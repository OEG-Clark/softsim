{"home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.None.setup.get_extensions": [[17, 57], ["os.path.dirname", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "torch.cuda.is_available", "os.path.join", "extension"], "function", ["None"], ["def", "get_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "extensions_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"maskrcnn_benchmark\"", ",", "\"csrc\"", ")", "\n", "\n", "main_file", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"*.cpp\"", ")", ")", "\n", "source_cpu", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cpu\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cuda\"", ",", "\"*.cu\"", ")", ")", "\n", "\n", "sources", "=", "main_file", "+", "source_cpu", "\n", "extension", "=", "CppExtension", "\n", "\n", "extra_compile_args", "=", "{", "\"cxx\"", ":", "[", "]", "}", "\n", "define_macros", "=", "[", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ":", "\n", "        ", "extension", "=", "CUDAExtension", "\n", "sources", "+=", "source_cuda", "\n", "define_macros", "+=", "[", "(", "\"WITH_CUDA\"", ",", "None", ")", "]", "\n", "extra_compile_args", "[", "\"nvcc\"", "]", "=", "[", "\n", "\"-DCUDA_HAS_FP16=1\"", ",", "\n", "\"-D__CUDA_NO_HALF_OPERATORS__\"", ",", "\n", "\"-D__CUDA_NO_HALF_CONVERSIONS__\"", ",", "\n", "\"-D__CUDA_NO_HALF2_OPERATORS__\"", ",", "\n", "]", "\n", "\n", "", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "\n", "include_dirs", "=", "[", "extensions_dir", "]", "\n", "\n", "ext_modules", "=", "[", "\n", "extension", "(", "\n", "\"maskrcnn_benchmark._C\"", ",", "\n", "sources", ",", "\n", "include_dirs", "=", "include_dirs", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ",", "\n", ")", "\n", "]", "\n", "\n", "return", "ext_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pycoco.mask.encode": [[85, 91], ["len", "pycocotools.encode", "len", "pycocotools.encode", "bimask.reshape"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.box_coder.BoxCoder.encode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.box_coder.BoxCoder.encode"], ["def", "encode", "(", "bimask", ")", ":", "\n", "    ", "if", "len", "(", "bimask", ".", "shape", ")", "==", "3", ":", "\n", "        ", "return", "_mask", ".", "encode", "(", "bimask", ")", "\n", "", "elif", "len", "(", "bimask", ".", "shape", ")", "==", "2", ":", "\n", "        ", "h", ",", "w", "=", "bimask", ".", "shape", "\n", "return", "_mask", ".", "encode", "(", "bimask", ".", "reshape", "(", "(", "h", ",", "w", ",", "1", ")", ",", "order", "=", "'F'", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pycoco.mask.decode": [[92, 97], ["type", "pycocotools.decode", "pycocotools.decode"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode"], ["", "", "def", "decode", "(", "rleObjs", ")", ":", "\n", "    ", "if", "type", "(", "rleObjs", ")", "==", "list", ":", "\n", "        ", "return", "_mask", ".", "decode", "(", "rleObjs", ")", "\n", "", "else", ":", "\n", "        ", "return", "_mask", ".", "decode", "(", "[", "rleObjs", "]", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pycoco.mask.area": [[98, 103], ["type", "pycocotools.area", "pycocotools.area"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.area", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.area"], ["", "", "def", "area", "(", "rleObjs", ")", ":", "\n", "    ", "if", "type", "(", "rleObjs", ")", "==", "list", ":", "\n", "        ", "return", "_mask", ".", "area", "(", "rleObjs", ")", "\n", "", "else", ":", "\n", "        ", "return", "_mask", ".", "area", "(", "[", "rleObjs", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pycoco.mask.toBbox": [[104, 109], ["type", "pycocotools.toBbox", "pycocotools.toBbox"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pycoco.mask.toBbox", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pycoco.mask.toBbox"], ["", "", "def", "toBbox", "(", "rleObjs", ")", ":", "\n", "    ", "if", "type", "(", "rleObjs", ")", "==", "list", ":", "\n", "        ", "return", "_mask", ".", "toBbox", "(", "rleObjs", ")", "\n", "", "else", ":", "\n", "        ", "return", "_mask", ".", "toBbox", "(", "[", "rleObjs", "]", ")", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.__init__": [[99, 130], ["cfg.clone", "maskrcnn_benchmark.modeling.detector.build_detection_model", "predictor.COCODemo.model.eval", "torch.device", "predictor.COCODemo.model.to", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer.load", "predictor.COCODemo.build_transform", "maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker", "torch.tensor", "torch.device"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.detectors.build_detection_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.build_transform"], ["def", "__init__", "(", "\n", "self", ",", "\n", "cfg", ",", "\n", "confidence_threshold", "=", "0.7", ",", "\n", "show_mask_heatmaps", "=", "False", ",", "\n", "masks_per_dim", "=", "2", ",", "\n", "min_image_size", "=", "224", ",", "\n", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "self", ".", "model", "=", "build_detection_model", "(", "cfg", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "min_image_size", "=", "min_image_size", "\n", "\n", "save_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "checkpointer", "=", "DetectronCheckpointer", "(", "cfg", ",", "self", ".", "model", ",", "save_dir", "=", "save_dir", ")", "\n", "_", "=", "checkpointer", ".", "load", "(", "cfg", ".", "MODEL", ".", "WEIGHT", ")", "\n", "\n", "self", ".", "transforms", "=", "self", ".", "build_transform", "(", ")", "\n", "\n", "mask_threshold", "=", "-", "1", "if", "show_mask_heatmaps", "else", "0.5", "\n", "self", ".", "masker", "=", "Masker", "(", "threshold", "=", "mask_threshold", ",", "padding", "=", "1", ")", "\n", "\n", "# used to make colors for each class", "\n", "self", ".", "palette", "=", "torch", ".", "tensor", "(", "[", "2", "**", "25", "-", "1", ",", "2", "**", "15", "-", "1", ",", "2", "**", "21", "-", "1", "]", ")", "\n", "\n", "self", ".", "cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "confidence_threshold", "=", "confidence_threshold", "\n", "self", ".", "show_mask_heatmaps", "=", "show_mask_heatmaps", "\n", "self", ".", "masks_per_dim", "=", "masks_per_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.build_transform": [[131, 160], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "def", "build_transform", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Creates a basic transformation that was used to train the models\n        \"\"\"", "\n", "cfg", "=", "self", ".", "cfg", "\n", "\n", "# we are loading images with OpenCV, so we don't need to convert them", "\n", "# to BGR, they are already! So all we need to do is to normalize", "\n", "# by 255 if we want to convert to BGR255 format, or flip the channels", "\n", "# if we want it to be in RGB in [0-1] range.", "\n", "if", "cfg", ".", "INPUT", ".", "TO_BGR255", ":", "\n", "            ", "to_bgr_transform", "=", "T", ".", "Lambda", "(", "lambda", "x", ":", "x", "*", "255", ")", "\n", "", "else", ":", "\n", "            ", "to_bgr_transform", "=", "T", ".", "Lambda", "(", "lambda", "x", ":", "x", "[", "[", "2", ",", "1", ",", "0", "]", "]", ")", "\n", "\n", "", "normalize_transform", "=", "T", ".", "Normalize", "(", "\n", "mean", "=", "cfg", ".", "INPUT", ".", "PIXEL_MEAN", ",", "std", "=", "cfg", ".", "INPUT", ".", "PIXEL_STD", "\n", ")", "\n", "\n", "transform", "=", "T", ".", "Compose", "(", "\n", "[", "\n", "T", ".", "ToPILImage", "(", ")", ",", "\n", "T", ".", "Resize", "(", "self", ".", "min_image_size", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "to_bgr_transform", ",", "\n", "normalize_transform", ",", "\n", "]", "\n", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.run_on_opencv_image": [[161, 183], ["predictor.COCODemo.compute_prediction", "predictor.COCODemo.select_top_predictions", "image.copy", "predictor.COCODemo.overlay_boxes", "predictor.COCODemo.overlay_class_names", "predictor.COCODemo.create_mask_montage", "predictor.COCODemo.overlay_mask"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.compute_prediction", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.select_top_predictions", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.overlay_boxes", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.overlay_class_names", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.create_mask_montage", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.overlay_mask"], ["", "def", "run_on_opencv_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            image (np.ndarray): an image as returned by OpenCV\n\n        Returns:\n            prediction (BoxList): the detected objects. Additional information\n                of the detection properties can be found in the fields of\n                the BoxList via `prediction.fields()`\n        \"\"\"", "\n", "predictions", "=", "self", ".", "compute_prediction", "(", "image", ")", "\n", "top_predictions", "=", "self", ".", "select_top_predictions", "(", "predictions", ")", "\n", "\n", "result", "=", "image", ".", "copy", "(", ")", "\n", "if", "self", ".", "show_mask_heatmaps", ":", "\n", "            ", "return", "self", ".", "create_mask_montage", "(", "result", ",", "top_predictions", ")", "\n", "", "result", "=", "self", ".", "overlay_boxes", "(", "result", ",", "top_predictions", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "            ", "result", "=", "self", ".", "overlay_mask", "(", "result", ",", "top_predictions", ")", "\n", "", "result", "=", "self", ".", "overlay_class_names", "(", "result", ",", "top_predictions", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.compute_prediction": [[184, 220], ["predictor.COCODemo.transforms", "maskrcnn_benchmark.structures.image_list.to_image_list", "image_list.to.to.to", "prediction.resize.resize.resize", "prediction.resize.resize.has_field", "torch.no_grad", "predictor.COCODemo.model", "o.to", "prediction.resize.resize.get_field", "prediction.resize.resize.add_field", "predictor.COCODemo.masker"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["", "def", "compute_prediction", "(", "self", ",", "original_image", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            original_image (np.ndarray): an image as returned by OpenCV\n\n        Returns:\n            prediction (BoxList): the detected objects. Additional information\n                of the detection properties can be found in the fields of\n                the BoxList via `prediction.fields()`\n        \"\"\"", "\n", "# apply pre-processing to image", "\n", "image", "=", "self", ".", "transforms", "(", "original_image", ")", "\n", "# convert to an ImageList, padded so that it is divisible by", "\n", "# cfg.DATALOADER.SIZE_DIVISIBILITY", "\n", "image_list", "=", "to_image_list", "(", "image", ",", "self", ".", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", "\n", "image_list", "=", "image_list", ".", "to", "(", "self", ".", "device", ")", "\n", "# compute predictions", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "predictions", "=", "self", ".", "model", "(", "image_list", ")", "\n", "", "predictions", "=", "[", "o", ".", "to", "(", "self", ".", "cpu_device", ")", "for", "o", "in", "predictions", "]", "\n", "\n", "# always single image is passed at a time", "\n", "prediction", "=", "predictions", "[", "0", "]", "\n", "\n", "# reshape prediction (a BoxList) into the original image size", "\n", "height", ",", "width", "=", "original_image", ".", "shape", "[", ":", "-", "1", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "width", ",", "height", ")", ")", "\n", "\n", "if", "prediction", ".", "has_field", "(", "\"mask\"", ")", ":", "\n", "# if we have masks, paste the masks in the right position", "\n", "# in the image, as defined by the bounding boxes", "\n", "            ", "masks", "=", "prediction", ".", "get_field", "(", "\"mask\"", ")", "\n", "# always single image is passed at a time", "\n", "masks", "=", "self", ".", "masker", "(", "[", "masks", "]", ",", "[", "prediction", "]", ")", "[", "0", "]", "\n", "prediction", ".", "add_field", "(", "\"mask\"", ",", "masks", ")", "\n", "", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.select_top_predictions": [[221, 241], ["predictions.get_field", "torch.nonzero().squeeze", "predictions.get_field", "predictions.get_field.sort", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "select_top_predictions", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Select only predictions which have a `score` > self.confidence_threshold,\n        and returns the predictions in descending order of score\n\n        Arguments:\n            predictions (BoxList): the result of the computation by the model.\n                It should contain the field `scores`.\n\n        Returns:\n            prediction (BoxList): the detected objects. Additional information\n                of the detection properties can be found in the fields of\n                the BoxList via `prediction.fields()`\n        \"\"\"", "\n", "scores", "=", "predictions", ".", "get_field", "(", "\"scores\"", ")", "\n", "keep", "=", "torch", ".", "nonzero", "(", "scores", ">", "self", ".", "confidence_threshold", ")", ".", "squeeze", "(", "1", ")", "\n", "predictions", "=", "predictions", "[", "keep", "]", "\n", "scores", "=", "predictions", ".", "get_field", "(", "\"scores\"", ")", "\n", "_", ",", "idx", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "return", "predictions", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.compute_colors_for_labels": [[242, 249], ["None"], "methods", ["None"], ["", "def", "compute_colors_for_labels", "(", "self", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Simple function that adds fixed colors depending on the class\n        \"\"\"", "\n", "colors", "=", "labels", "[", ":", ",", "None", "]", "*", "self", ".", "palette", "\n", "colors", "=", "(", "colors", "%", "255", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.overlay_boxes": [[250, 272], ["predictions.get_field", "predictor.COCODemo.compute_colors_for_labels().tolist", "zip", "box.to.to.to", "cv2.rectangle", "predictor.COCODemo.compute_colors_for_labels", "box[].tolist", "box[].tolist", "tuple", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.compute_colors_for_labels"], ["", "def", "overlay_boxes", "(", "self", ",", "image", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Adds the predicted boxes on top of the image\n\n        Arguments:\n            image (np.ndarray): an image as returned by OpenCV\n            predictions (BoxList): the result of the computation by the model.\n                It should contain the field `labels`.\n        \"\"\"", "\n", "labels", "=", "predictions", ".", "get_field", "(", "\"labels\"", ")", "\n", "boxes", "=", "predictions", ".", "bbox", "\n", "\n", "colors", "=", "self", ".", "compute_colors_for_labels", "(", "labels", ")", ".", "tolist", "(", ")", "\n", "\n", "for", "box", ",", "color", "in", "zip", "(", "boxes", ",", "colors", ")", ":", "\n", "            ", "box", "=", "box", ".", "to", "(", "torch", ".", "int64", ")", "\n", "top_left", ",", "bottom_right", "=", "box", "[", ":", "2", "]", ".", "tolist", "(", ")", ",", "box", "[", "2", ":", "]", ".", "tolist", "(", ")", "\n", "image", "=", "cv2", ".", "rectangle", "(", "\n", "image", ",", "tuple", "(", "top_left", ")", ",", "tuple", "(", "bottom_right", ")", ",", "tuple", "(", "color", ")", ",", "1", "\n", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.overlay_mask": [[273, 298], ["predictions.get_field().numpy", "predictions.get_field", "predictor.COCODemo.compute_colors_for_labels().tolist", "zip", "cv2.findContours", "cv2.drawContours", "predictions.get_field", "predictor.COCODemo.compute_colors_for_labels"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.compute_colors_for_labels"], ["", "def", "overlay_mask", "(", "self", ",", "image", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Adds the instances contours for each predicted object.\n        Each label has a different color.\n\n        Arguments:\n            image (np.ndarray): an image as returned by OpenCV\n            predictions (BoxList): the result of the computation by the model.\n                It should contain the field `mask` and `labels`.\n        \"\"\"", "\n", "masks", "=", "predictions", ".", "get_field", "(", "\"mask\"", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "predictions", ".", "get_field", "(", "\"labels\"", ")", "\n", "\n", "colors", "=", "self", ".", "compute_colors_for_labels", "(", "labels", ")", ".", "tolist", "(", ")", "\n", "\n", "for", "mask", ",", "color", "in", "zip", "(", "masks", ",", "colors", ")", ":", "\n", "            ", "thresh", "=", "mask", "[", "0", ",", ":", ",", ":", ",", "None", "]", "\n", "_", ",", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "\n", "thresh", ",", "cv2", ".", "RETR_TREE", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", "\n", ")", "\n", "image", "=", "cv2", ".", "drawContours", "(", "image", ",", "contours", ",", "-", "1", ",", "color", ",", "3", ")", "\n", "\n", "", "composite", "=", "image", "\n", "\n", "return", "composite", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.create_mask_montage": [[299, 334], ["predictions.get_field", "maskrcnn_benchmark.layers.interpolate().byte", "masks.reshape.reshape.reshape", "torch.zeros", "range", "cv2.applyColorMap", "len", "torch.zeros", "range", "torch.zeros.numpy", "maskrcnn_benchmark.layers.interpolate", "masks.reshape.reshape.float", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.interpolate"], ["", "def", "create_mask_montage", "(", "self", ",", "image", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Create a montage showing the probability heatmaps for each one one of the\n        detected objects\n\n        Arguments:\n            image (np.ndarray): an image as returned by OpenCV\n            predictions (BoxList): the result of the computation by the model.\n                It should contain the field `mask`.\n        \"\"\"", "\n", "masks", "=", "predictions", ".", "get_field", "(", "\"mask\"", ")", "\n", "masks_per_dim", "=", "self", ".", "masks_per_dim", "\n", "masks", "=", "L", ".", "interpolate", "(", "\n", "masks", ".", "float", "(", ")", ",", "scale_factor", "=", "1", "/", "masks_per_dim", "\n", ")", ".", "byte", "(", ")", "\n", "height", ",", "width", "=", "masks", ".", "shape", "[", "-", "2", ":", "]", "\n", "max_masks", "=", "masks_per_dim", "**", "2", "\n", "masks", "=", "masks", "[", ":", "max_masks", "]", "\n", "# handle case where we have less detections than max_masks", "\n", "if", "len", "(", "masks", ")", "<", "max_masks", ":", "\n", "            ", "masks_padded", "=", "torch", ".", "zeros", "(", "max_masks", ",", "1", ",", "height", ",", "width", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "masks_padded", "[", ":", "len", "(", "masks", ")", "]", "=", "masks", "\n", "masks", "=", "masks_padded", "\n", "", "masks", "=", "masks", ".", "reshape", "(", "masks_per_dim", ",", "masks_per_dim", ",", "height", ",", "width", ")", "\n", "result", "=", "torch", ".", "zeros", "(", "\n", "(", "masks_per_dim", "*", "height", ",", "masks_per_dim", "*", "width", ")", ",", "dtype", "=", "torch", ".", "uint8", "\n", ")", "\n", "for", "y", "in", "range", "(", "masks_per_dim", ")", ":", "\n", "            ", "start_y", "=", "y", "*", "height", "\n", "end_y", "=", "(", "y", "+", "1", ")", "*", "height", "\n", "for", "x", "in", "range", "(", "masks_per_dim", ")", ":", "\n", "                ", "start_x", "=", "x", "*", "width", "\n", "end_x", "=", "(", "x", "+", "1", ")", "*", "width", "\n", "result", "[", "start_y", ":", "end_y", ",", "start_x", ":", "end_x", "]", "=", "masks", "[", "y", ",", "x", "]", "\n", "", "", "return", "cv2", ".", "applyColorMap", "(", "result", ".", "numpy", "(", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.overlay_class_names": [[335, 359], ["predictions.get_field().tolist", "predictions.get_field().tolist", "zip", "template.format", "cv2.putText", "predictions.get_field", "predictions.get_field"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "overlay_class_names", "(", "self", ",", "image", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Adds detected class names and scores in the positions defined by the\n        top-left corner of the predicted bounding box\n\n        Arguments:\n            image (np.ndarray): an image as returned by OpenCV\n            predictions (BoxList): the result of the computation by the model.\n                It should contain the field `scores` and `labels`.\n        \"\"\"", "\n", "scores", "=", "predictions", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "predictions", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "[", "self", ".", "CATEGORIES", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "boxes", "=", "predictions", ".", "bbox", "\n", "\n", "template", "=", "\"{}: {:.2f}\"", "\n", "for", "box", ",", "score", ",", "label", "in", "zip", "(", "boxes", ",", "scores", ",", "labels", ")", ":", "\n", "            ", "x", ",", "y", "=", "box", "[", ":", "2", "]", "\n", "s", "=", "template", ".", "format", "(", "label", ",", "score", ")", "\n", "cv2", ".", "putText", "(", "\n", "image", ",", "s", ",", "(", "x", ",", "y", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", ".5", ",", "(", "255", ",", "255", ",", "255", ")", ",", "1", "\n", ")", "\n", "\n", "", "return", "image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.webcam.main": [[12, 79], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "maskrcnn_benchmark.config.cfg.merge_from_file", "maskrcnn_benchmark.config.cfg.merge_from_list", "maskrcnn_benchmark.config.cfg.freeze", "predictor.COCODemo", "cv2.VideoCapture", "pdb.set_trace", "cv2.destroyAllWindows", "time.time", "cv2.VideoCapture.read", "predictor.COCODemo.run_on_opencv_image", "print", "cv2.imshow", "cv2.waitKey", "time.time"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.convert_cityscapes_to_coco.parse_args", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.demo.predictor.COCODemo.run_on_opencv_image"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Object Detection Webcam Demo\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"../configs/caffe2/e2e_mask_rcnn_R_50_FPN_1x_caffe2.yaml\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--confidence-threshold\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.7", ",", "\n", "help", "=", "\"Minimum score for the prediction to be shown\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--min-image-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "224", ",", "\n", "help", "=", "\"Smallest size of the image to feed to the model. \"", "\n", "\"Model was trained with 800, which gives best results\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--show-mask-heatmaps\"", ",", "\n", "dest", "=", "\"show_mask_heatmaps\"", ",", "\n", "help", "=", "\"Show a heatmap probability for the top masks-per-dim masks\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--masks-per-dim\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", ",", "\n", "help", "=", "\"Number of heatmaps per dimension to show\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify model config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# load config from file and command-line arguments", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "# prepare object that handles inference plus adds predictions on top of image", "\n", "coco_demo", "=", "COCODemo", "(", "\n", "cfg", ",", "\n", "confidence_threshold", "=", "args", ".", "confidence_threshold", ",", "\n", "show_mask_heatmaps", "=", "args", ".", "show_mask_heatmaps", ",", "\n", "masks_per_dim", "=", "args", ".", "masks_per_dim", ",", "\n", "min_image_size", "=", "args", ".", "min_image_size", ",", "\n", ")", "\n", "\n", "cam", "=", "cv2", ".", "VideoCapture", "(", "0", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "while", "True", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "ret_val", ",", "img", "=", "cam", ".", "read", "(", ")", "\n", "composite", "=", "coco_demo", ".", "run_on_opencv_image", "(", "img", ")", "\n", "print", "(", "\"Time: {:.2f} s / img\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "cv2", ".", "imshow", "(", "\"COCO detections\"", ",", "composite", ")", "\n", "if", "cv2", ".", "waitKey", "(", "1", ")", "==", "27", ":", "\n", "            ", "break", "# esc to quit", "\n", "", "", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.get_median": [[31, 41], ["sorted", "len"], "function", ["None"], ["def", "get_median", "(", "data", ")", ":", "\n", "    ", "data", "=", "sorted", "(", "data", ")", "\n", "size", "=", "len", "(", "data", ")", "\n", "if", "size", "%", "2", "==", "0", ":", "\n", "        ", "median", "=", "(", "data", "[", "size", "//", "2", "]", "+", "data", "[", "size", "//", "2", "-", "1", "]", ")", "/", "2", "\n", "data", "[", "0", "]", "=", "median", "\n", "", "if", "size", "%", "2", "==", "1", ":", "\n", "        ", "median", "=", "data", "[", "(", "size", "-", "1", ")", "//", "2", "]", "\n", "data", "[", "0", "]", "=", "median", "\n", "", "return", "data", "[", "0", "]", "\n", "", "def", "chunks", "(", "arr", ",", "m", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.chunks": [[41, 44], ["int", "math.ceil", "range", "len", "float", "len"], "function", ["None"], ["", "def", "chunks", "(", "arr", ",", "m", ")", ":", "\n", "    ", "n", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "arr", ")", "/", "float", "(", "m", ")", ")", ")", "\n", "return", "[", "arr", "[", "i", ":", "i", "+", "n", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "arr", ")", ",", "n", ")", "]", "\n", "", "def", "annToMask", "(", "boxlist", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.annToMask": [[44, 65], ["boxlist.get_field", "boxlist.get_field", "list", "enumerate", "pycocotools.mask.frPyObjects", "pycocotools.mask.merge", "RLES.append", "numpy.nonzero", "polygons.append", "p.numpy"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "annToMask", "(", "boxlist", ")", ":", "\n", "    ", "\"\"\"\n    Convert annotation which can be polygons, uncompressed RLE to RLE.\n    :return: binary mask (numpy 2D array)\n    \"\"\"", "\n", "h", ",", "w", "=", "boxlist", ".", "size", "\n", "masks", "=", "boxlist", ".", "get_field", "(", "'masks'", ")", "\n", "labels", "=", "boxlist", ".", "get_field", "(", "'labels'", ")", "\n", "# pdb.set_trace()", "\n", "index", "=", "list", "(", "np", ".", "nonzero", "(", "labels", "==", "1", ")", "[", ":", ",", "0", "]", ")", "\n", "polygons", "=", "[", "]", "\n", "for", "i", ",", "seg", "in", "enumerate", "(", "masks", ".", "polygons", ")", ":", "\n", "        ", "if", "i", "in", "index", ":", "\n", "            ", "polygons", ".", "append", "(", "seg", ")", "\n", "", "", "RLES", "=", "[", "]", "\n", "for", "segm", "in", "polygons", ":", "\n", "        ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "[", "p", ".", "numpy", "(", ")", "for", "p", "in", "segm", ".", "polygons", "]", ",", "h", ",", "w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "RLES", ".", "append", "(", "rle", ")", "\n", "\n", "", "return", "RLES", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split": [[66, 122], ["maskrcnn_benchmark.utils.imports.import_file", "maskrcnn_benchmark.data.transforms.build_transforms", "maskrcnn_benchmark.data.build.build_dataset", "maskrcnn_benchmark.data.collate_batch.BatchCollator", "torch.utils.data.DataLoader", "collections.defaultdict", "enumerate", "collections.defaultdict.items", "split_set.get_median", "zip", "split_set.chunks", "split_set.chunks", "zip", "split_set.annToMask", "numpy.max", "numpy.mean", "name_dic[].append", "names.append", "overlapping.append", "open", "json.dump", "len", "pycocotools.mask.iou", "numpy.eye", "datasets[].get_img_info", "hard.append", "easy.append", "len", "sum", "len", "maskrcnn_benchmark.config.cfg"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.build.build_transforms", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.build_dataset", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.get_median", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.chunks", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.chunks", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.annToMask", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.get_img_info"], ["", "def", "split", "(", "cfg", ",", "num_fold", ")", ":", "\n", "# when calculate the overlap ratio, set the sliding window overlap = 0", "\n", "    ", "paths_catalog", "=", "import_file", "(", "\n", "\"maskrcnn_benchmark.config.paths_catalog\"", ",", "cfg", ".", "PATHS_CATALOG", ",", "True", "\n", ")", "\n", "DatasetCatalog", "=", "paths_catalog", ".", "DatasetCatalog", "\n", "dataset_list", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "\n", "transforms", "=", "build_transforms", "(", "cfg", ",", "False", ")", "\n", "datasets", "=", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "DatasetCatalog", ",", "False", ")", "\n", "collator", "=", "BatchCollator", "(", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", "[", "0", "]", ",", "\n", "num_workers", "=", "1", ",", "\n", "collate_fn", "=", "collator", ",", "\n", "\n", ")", "\n", "\n", "name_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ",", "0", ")", ":", "\n", "        ", "boxlists", "=", "data", "[", "1", "]", "[", "0", "]", "\n", "\n", "masks", "=", "annToMask", "(", "boxlists", ")", "\n", "isCrowed", "=", "len", "(", "masks", ")", "*", "[", "0", "]", "\n", "iou", "=", "maskUtils", ".", "iou", "(", "masks", ",", "masks", ",", "isCrowed", ")", "-", "np", ".", "eye", "(", "len", "(", "masks", ")", ")", "\n", "maxiou", "=", "np", ".", "max", "(", "iou", ",", "0", ")", "\n", "avgiou", "=", "np", ".", "mean", "(", "maxiou", ")", "\n", "name", "=", "datasets", "[", "0", "]", ".", "get_img_info", "(", "i", ")", "[", "'file_name'", "]", "\n", "name_dic", "[", "name", "]", ".", "append", "(", "avgiou", ")", "\n", "", "names", "=", "[", "]", "\n", "overlapping", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "name_dic", ".", "items", "(", ")", ":", "\n", "        ", "names", ".", "append", "(", "k", ")", "\n", "overlapping", ".", "append", "(", "sum", "(", "v", ")", "/", "len", "(", "v", ")", ")", "\n", "", "median", "=", "get_median", "(", "overlapping", ")", "\n", "# pdb.set_trace()", "\n", "hard", "=", "[", "]", "\n", "easy", "=", "[", "]", "\n", "for", "name", ",", "miou", "in", "zip", "(", "names", ",", "overlapping", ")", ":", "\n", "        ", "if", "miou", ">", "median", ":", "\n", "            ", "hard", ".", "append", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "easy", ".", "append", "(", "name", ")", "\n", "\n", "# pdb.set_trace()", "\n", "", "", "easy_n", "=", "chunks", "(", "easy", ",", "num_fold", ")", "\n", "hard_n", "=", "chunks", "(", "hard", ",", "num_fold", ")", "\n", "\n", "i", "=", "1", "\n", "splitfile", "=", "{", "}", "\n", "for", "e", ",", "h", "in", "zip", "(", "easy_n", ",", "hard_n", ")", ":", "\n", "        ", "splitfile", "[", "i", "]", "=", "{", "'easy'", ":", "e", ",", "'hard'", ":", "h", "}", "\n", "i", "+=", "1", "\n", "\n", "", "with", "open", "(", "'split.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "splitfile", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.main": [[123, 180], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "cv2.setNumThreads", "argparse.ArgumentParser.parse_args", "maskrcnn_benchmark.config.cfg.merge_from_file", "maskrcnn_benchmark.config.cfg.merge_from_list", "maskrcnn_benchmark.config.cfg.freeze", "maskrcnn_benchmark.utils.logger.setup_logger", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "split_set.split", "int", "torch.cuda.set_device", "torch.distributed.init_process_group", "maskrcnn_benchmark.utils.miscellaneous.mkdir", "maskrcnn_benchmark.utils.comm.get_rank", "open", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.collect_env.collect_env_info", "cf.read"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.convert_cityscapes_to_coco.parse_args", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.logger.setup_logger", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env.collect_env_info"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Object Detection Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--skip-test\"", ",", "\n", "dest", "=", "\"skip_test\"", ",", "\n", "help", "=", "\"Do not test the final model\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "cv2", ".", "setNumThreads", "(", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "args", ".", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "\n", "", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"maskrcnn_benchmark\"", ",", "output_dir", ",", "get_rank", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Collecting env info (might take some time)\"", ")", "\n", "logger", ".", "info", "(", "\"\\n\"", "+", "collect_env_info", "(", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "\"r\"", ")", "as", "cf", ":", "\n", "        ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "split", "(", "cfg", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.test_net._get_models_in_dir": [[24, 34], ["os.path.isdir", "os.listdir", "file.endswith", "models.append", "os.path.join"], "function", ["None"], ["def", "_get_models_in_dir", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "models", "=", "[", "]", "\n", "for", "file", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "# skip 000000.pth", "\n", "            ", "if", "file", ".", "endswith", "(", "'.pth'", ")", "and", "'_00000'", "not", "in", "file", ":", "\n", "                ", "models", ".", "append", "(", "os", ".", "path", ".", "join", "(", "path", ",", "file", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "models", "=", "[", "path", "]", "\n", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.test_net._find_yaml_in_dir": [[36, 43], ["os.walk", "file.endswith", "directory.split", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split"], ["", "def", "_find_yaml_in_dir", "(", "directory", ",", "isdir", "=", "True", ")", ":", "\n", "    ", "if", "not", "isdir", ":", "\n", "        ", "directory", "=", "'/'", ".", "join", "(", "directory", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "directory", ")", ":", "\n", "        ", "for", "file", "in", "files", ":", "\n", "            ", "if", "file", ".", "endswith", "(", "'.yaml'", ")", ":", "\n", "                ", "return", "os", ".", "path", ".", "join", "(", "directory", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.test_net.main": [[45, 234], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "maskrcnn_benchmark.config.cfg.merge_from_file", "maskrcnn_benchmark.config.cfg.merge_from_list", "maskrcnn_benchmark.config.cfg.freeze", "maskrcnn_benchmark.utils.logger.setup_logger", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "collect_evaluate_results.items", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "MAP.index", "AJI.index", "anno_xs.append", "anno_map.append", "anno_aji.append", "anno_xs.append", "anno_map.append", "anno_aji.append", "zip", "zip", "collect_evaluate_results.items", "matplotlib.legend", "matplotlib.savefig", "int", "torch.cuda.set_device", "torch.distributed.init_process_group", "test_net._find_yaml_in_dir", "test_net._get_models_in_dir", "maskrcnn_benchmark.utils.comm.get_rank", "test_net.test_once", "max", "max", "matplotlib.annotate", "matplotlib.annotate", "len", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "MAP.index", "AJI.index", "anno_xs.append", "anno_map.append", "anno_aji.append", "anno_xs.append", "anno_map.append", "anno_aji.append", "zip", "zip", "os.path.join", "open", "json.dump", "open", "json.dump", "os.path.isdir", "os.path.isdir", "maskrcnn_benchmark.utils.collect_env.collect_env_info", "scipy.savemat", "[].strip().strip", "int", "x_list.append", "AJI.append", "MAP.append", "AP50.append", "AP75.append", "AP85.append", "[].strip().strip", "int", "x_list.append", "AJI.append", "MAP.append", "AP50.append", "AP75.append", "AP85.append", "max", "max", "matplotlib.annotate", "matplotlib.annotate", "os.path.join", "os.path.join", "os.path.join", "parser.parse_args.test_path.split", "[].strip", "[].strip", "[].strip", "k.split", "k.split", "model_path.split"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.convert_cityscapes_to_coco.parse_args", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.logger.setup_logger", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.test_net._find_yaml_in_dir", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.test_net._get_models_in_dir", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.test_net.test_once", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env.collect_env_info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"PyTorch Object Detection Inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test_path'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'test model path or a single model weight file, if it is a path, will test all models inside the path'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"/private/home/fmassa/github/detectron.pytorch_v2/configs/e2e_faster_rcnn_R_50_C4_1x_caffe2.yaml\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpuid\"", ",", "default", "=", "'0'", ",", "help", "=", "'set gpu id'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "\n", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpuid", "\n", "\n", "#pdb.set_trace()", "\n", "", "if", "args", ".", "test_path", "is", "not", "None", ":", "\n", "        ", "_cfg", "=", "_find_yaml_in_dir", "(", "args", ".", "test_path", ",", "os", ".", "path", ".", "isdir", "(", "args", ".", "test_path", ")", ")", "\n", "model_list", "=", "_get_models_in_dir", "(", "args", ".", "test_path", ")", "\n", "save_dir", "=", "args", ".", "test_path", "if", "os", ".", "path", ".", "isdir", "(", "\n", "args", ".", "test_path", ")", "else", "'/'", ".", "join", "(", "(", "args", ".", "test_path", ")", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "_cfg", "=", "args", ".", "config_file", "\n", "model_list", "=", "[", "cfg", ".", "MODEL", ".", "WEIGHT", "]", "\n", "save_dir", "=", "\"\"", "\n", "#pdb.set_trace()", "\n", "", "cfg", ".", "merge_from_file", "(", "_cfg", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "logger", "=", "setup_logger", "(", "\"maskrcnn_benchmark\"", ",", "save_dir", ",", "get_rank", "(", ")", ",", "test", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "cfg", ")", "\n", "\n", "logger", ".", "info", "(", "\"Collecting env info (might take some time)\"", ")", "\n", "logger", ".", "info", "(", "\"\\n\"", "+", "collect_env_info", "(", ")", ")", "\n", "\n", "collect_evaluate_results", "=", "{", "}", "\n", "\n", "for", "model_path", "in", "model_list", ":", "\n", "        ", "results", "=", "test_once", "(", "cfg", ",", "save_dir", ",", "model_path", ",", "distributed", ")", "\n", "# pdb.set_trace()", "\n", "if", "cfg", ".", "DATASETS", ".", "MODE_IN_TEST", "==", "'test'", "and", "'isbi'", "in", "args", ".", "config_file", ":", "\n", "            ", "sio", ".", "savemat", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\n", "'isbi2015_%s.mat'", "%", "model_path", ".", "split", "(", "\n", "'/'", ")", "[", "-", "1", "]", ".", "strip", "(", "'.pth'", ")", ")", ",", "\n", "results", "[", "0", "]", ")", "\n", "continue", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "collect_evaluate_results", "[", "model_path", "]", "=", "results", "[", "0", "]", ".", "results", "[", "'segm'", "]", "\n", "", "", "if", "cfg", ".", "DATASETS", ".", "MODE_IN_TEST", "==", "'test'", "and", "'isbi'", "in", "args", ".", "config_file", ":", "\n", "        ", "return", "0", "\n", "\n", "# pdb.set_trace()", "\n", "# pdb.set_trace()", "\n", "# todo: prepare print", "\n", "", "x_list", "=", "[", "]", "\n", "AJI", "=", "[", "]", "\n", "MAP", "=", "[", "]", "\n", "AP50", "=", "[", "]", "\n", "AP75", "=", "[", "]", "\n", "AP85", "=", "[", "]", "\n", "best_student", "=", "{", "}", "\n", "best_teacher", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "collect_evaluate_results", ".", "items", "(", ")", ":", "\n", "        ", "if", "'t_model'", "not", "in", "k", ":", "\n", "            ", "name", "=", "k", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "strip", "(", "'.pth'", ")", ".", "strip", "(", "'model_'", ")", "\n", "if", "'fina'", "in", "name", ":", "\n", "                ", "continue", "\n", "", "name", "=", "int", "(", "name", ")", "\n", "x_list", ".", "append", "(", "name", ")", "\n", "aji", "=", "(", "v", "[", "'AJI'", "]", "[", "'nuclei'", "]", "+", "v", "[", "'AJI'", "]", "[", "'cytoplasm'", "]", ")", "/", "2", "\n", "map", "=", "v", "[", "'mAP'", "]", "[", "'all'", "]", "\n", "ap50", "=", "v", "[", "'AP50'", "]", "[", "'all'", "]", "\n", "ap75", "=", "v", "[", "'AP75'", "]", "[", "'all'", "]", "\n", "ap85", "=", "v", "[", "'AP85'", "]", "[", "'all'", "]", "\n", "AJI", ".", "append", "(", "aji", ")", "\n", "MAP", ".", "append", "(", "map", ")", "\n", "AP50", ".", "append", "(", "ap50", ")", "\n", "AP75", ".", "append", "(", "ap75", ")", "\n", "AP85", ".", "append", "(", "ap85", ")", "\n", "", "", "plt", ".", "plot", "(", "x_list", ",", "AJI", ",", "color", "=", "'green'", ",", "label", "=", "'AJI'", ")", "\n", "plt", ".", "plot", "(", "x_list", ",", "MAP", ",", "color", "=", "'red'", ",", "label", "=", "'mAP'", ")", "\n", "plt", ".", "plot", "(", "x_list", ",", "AP50", ",", "color", "=", "'skyblue'", ",", "label", "=", "'AP50'", ")", "\n", "plt", ".", "plot", "(", "x_list", ",", "AP75", ",", "color", "=", "'blue'", ",", "label", "=", "'AP75'", ")", "\n", "plt", ".", "plot", "(", "x_list", ",", "AP85", ",", "color", "=", "'black'", ",", "label", "=", "'AP85'", ")", "\n", "# show number", "\n", "anno_xs", "=", "[", "]", "\n", "anno_map", "=", "[", "]", "\n", "anno_aji", "=", "[", "]", "\n", "# pdb.set_trace()", "\n", "idxmap", "=", "MAP", ".", "index", "(", "max", "(", "MAP", ")", ")", "\n", "idxaji", "=", "AJI", ".", "index", "(", "max", "(", "AJI", ")", ")", "\n", "anno_xs", ".", "append", "(", "x_list", "[", "idxmap", "]", ")", "\n", "anno_map", ".", "append", "(", "MAP", "[", "idxmap", "]", ")", "\n", "anno_aji", ".", "append", "(", "AJI", "[", "idxmap", "]", ")", "\n", "anno_xs", ".", "append", "(", "x_list", "[", "idxaji", "]", ")", "\n", "anno_map", ".", "append", "(", "MAP", "[", "idxaji", "]", ")", "\n", "anno_aji", ".", "append", "(", "AJI", "[", "idxaji", "]", ")", "\n", "best_student", "[", "'map_best'", "]", "=", "{", "x_list", "[", "idxmap", "]", ":", "{", "'map'", ":", "MAP", "[", "idxmap", "]", ",", "'aji'", ":", "AJI", "[", "idxmap", "]", "}", "}", "\n", "best_student", "[", "'aji_best'", "]", "=", "{", "x_list", "[", "idxaji", "]", ":", "{", "'map'", ":", "MAP", "[", "idxaji", "]", ",", "'aji'", ":", "AJI", "[", "idxaji", "]", "}", "}", "\n", "\n", "for", "a", ",", "b", "in", "zip", "(", "anno_xs", ",", "anno_aji", ")", ":", "\n", "        ", "plt", ".", "annotate", "(", "'(%.0f,%.4f)'", "%", "(", "a", ",", "b", ")", ",", "(", "a", ",", "b", ")", ")", "\n", "", "for", "a", ",", "b", "in", "zip", "(", "anno_xs", ",", "anno_map", ")", ":", "\n", "        ", "plt", ".", "annotate", "(", "'(%.0f,%.4f)'", "%", "(", "a", ",", "b", ")", ",", "(", "a", ",", "b", ")", ")", "\n", "# for teacher", "\n", "", "x_list", "=", "[", "]", "\n", "AJI", "=", "[", "]", "\n", "MAP", "=", "[", "]", "\n", "AP50", "=", "[", "]", "\n", "AP75", "=", "[", "]", "\n", "AP85", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "collect_evaluate_results", ".", "items", "(", ")", ":", "\n", "        ", "if", "'t_model'", "in", "k", ":", "\n", "            ", "name", "=", "k", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "strip", "(", "'.pth'", ")", ".", "strip", "(", "'model_'", ")", "\n", "if", "'fina'", "in", "name", ":", "\n", "                ", "continue", "\n", "", "name", "=", "int", "(", "name", ")", "\n", "x_list", ".", "append", "(", "name", ")", "\n", "aji", "=", "(", "v", "[", "'AJI'", "]", "[", "'nuclei'", "]", "+", "v", "[", "'AJI'", "]", "[", "'cytoplasm'", "]", ")", "/", "2", "\n", "map", "=", "v", "[", "'mAP'", "]", "[", "'all'", "]", "\n", "ap50", "=", "v", "[", "'AP50'", "]", "[", "'all'", "]", "\n", "ap75", "=", "v", "[", "'AP75'", "]", "[", "'all'", "]", "\n", "ap85", "=", "v", "[", "'AP85'", "]", "[", "'all'", "]", "\n", "AJI", ".", "append", "(", "aji", ")", "\n", "MAP", ".", "append", "(", "map", ")", "\n", "AP50", ".", "append", "(", "ap50", ")", "\n", "AP75", ".", "append", "(", "ap75", ")", "\n", "AP85", ".", "append", "(", "ap85", ")", "\n", "", "", "if", "len", "(", "AJI", ")", ">", "0", ":", "\n", "        ", "plt", ".", "plot", "(", "x_list", ",", "AJI", ",", "'--'", ",", "color", "=", "'green'", ",", "label", "=", "'AJI'", ")", "\n", "plt", ".", "plot", "(", "x_list", ",", "MAP", ",", "'--'", ",", "color", "=", "'red'", ",", "label", "=", "'mAP'", ")", "\n", "plt", ".", "plot", "(", "x_list", ",", "AP50", ",", "'--'", ",", "color", "=", "'skyblue'", ",", "label", "=", "'AP50'", ")", "\n", "plt", ".", "plot", "(", "x_list", ",", "AP75", ",", "'--'", ",", "color", "=", "'blue'", ",", "label", "=", "'AP75'", ")", "\n", "plt", ".", "plot", "(", "x_list", ",", "AP85", ",", "'--'", ",", "color", "=", "'black'", ",", "label", "=", "'AP85'", ")", "\n", "# show number", "\n", "anno_xs", "=", "[", "]", "\n", "anno_map", "=", "[", "]", "\n", "anno_aji", "=", "[", "]", "\n", "# pdb.set_trace()", "\n", "idxmap", "=", "MAP", ".", "index", "(", "max", "(", "MAP", ")", ")", "\n", "idxaji", "=", "AJI", ".", "index", "(", "max", "(", "AJI", ")", ")", "\n", "anno_xs", ".", "append", "(", "x_list", "[", "idxmap", "]", ")", "\n", "anno_map", ".", "append", "(", "MAP", "[", "idxmap", "]", ")", "\n", "anno_aji", ".", "append", "(", "AJI", "[", "idxmap", "]", ")", "\n", "anno_xs", ".", "append", "(", "x_list", "[", "idxaji", "]", ")", "\n", "anno_map", ".", "append", "(", "MAP", "[", "idxaji", "]", ")", "\n", "anno_aji", ".", "append", "(", "AJI", "[", "idxaji", "]", ")", "\n", "best_teacher", "[", "'map_best'", "]", "=", "{", "x_list", "[", "idxmap", "]", ":", "{", "'map'", ":", "MAP", "[", "idxmap", "]", ",", "'aji'", ":", "AJI", "[", "idxmap", "]", "}", "}", "\n", "best_teacher", "[", "'aji_best'", "]", "=", "{", "x_list", "[", "idxaji", "]", ":", "{", "'map'", ":", "MAP", "[", "idxaji", "]", ",", "'aji'", ":", "AJI", "[", "idxaji", "]", "}", "}", "\n", "for", "a", ",", "b", "in", "zip", "(", "anno_xs", ",", "anno_aji", ")", ":", "\n", "            ", "plt", ".", "annotate", "(", "'(%.0f,%.4f)'", "%", "(", "a", ",", "b", ")", ",", "(", "a", ",", "b", ")", ")", "\n", "", "for", "a", ",", "b", "in", "zip", "(", "anno_xs", ",", "anno_map", ")", ":", "\n", "            ", "plt", ".", "annotate", "(", "'(%.0f,%.4f)'", "%", "(", "a", ",", "b", ")", ",", "(", "a", ",", "b", ")", ")", "\n", "\n", "", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"result.jpg\"", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'result.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "collect_evaluate_results", ",", "f", ")", "\n", "# write best result", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'best_result.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "{", "'student'", ":", "best_student", ",", "'teacher'", ":", "best_teacher", "}", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.test_net.test_once": [[237, 298], ["torch.cuda.empty_cache", "maskrcnn_benchmark.modeling.detector.build_detection_model", "maskrcnn_benchmark.modeling.detector.build_detection_model.to", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer.load", "maskrcnn_benchmark.data.make_data_loader", "len", "enumerate", "zip", "zip", "os.path.join", "maskrcnn_benchmark.utils.miscellaneous.mkdir", "maskrcnn_benchmark.engine.inference.inference", "results.append", "maskrcnn_benchmark.utils.comm.synchronize", "maskrcnn_benchmark.engine.inference.inference", "maskrcnn_benchmark.config.cfg"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.detectors.build_detection_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_data_loader", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.inference.inference", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.synchronize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.inference.inference"], ["", "", "def", "test_once", "(", "cfg", ",", "save_dir", ",", "weight_name", ",", "distributed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "model", "=", "build_detection_model", "(", "cfg", ")", "\n", "model", ".", "to", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "\n", "output_dir", "=", "save_dir", "\n", "checkpointer", "=", "DetectronCheckpointer", "(", "cfg", ",", "model", ",", "save_dir", "=", "output_dir", ")", "\n", "_", "=", "checkpointer", ".", "load", "(", "weight_name", ",", "test", "=", "True", ")", "\n", "\n", "iou_types", "=", "(", ")", "# (\"bbox\",)", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"segm\"", ",", ")", "\n", "", "output_folders", "=", "[", "None", "]", "*", "len", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", "\n", "dataset_names", "=", "cfg", ".", "DATASETS", ".", "TEST", "if", "not", "cfg", ".", "TEST", ".", "GEN", "else", "cfg", ".", "DATASETS", ".", "GEN", "\n", "if", "output_dir", ":", "\n", "        ", "for", "idx", ",", "dataset_name", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"inference\"", ",", "dataset_name", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "output_folders", "[", "idx", "]", "=", "output_folder", "\n", "", "", "data_loaders_val", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "\n", "is_distributed", "=", "distributed", ")", "\n", "results", "=", "[", "]", "\n", "if", "not", "cfg", ".", "TEST", ".", "GEN", ":", "\n", "        ", "for", "output_folder", ",", "dataset_name", ",", "data_loader_val", "in", "zip", "(", "output_folders", ",", "\n", "dataset_names", ",", "\n", "data_loaders_val", ")", ":", "\n", "            ", "result", ",", "_", "=", "inference", "(", "\n", "model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "iou_types", "=", "iou_types", ",", "\n", "box_only", "=", "cfg", ".", "MODEL", ".", "RPN_ONLY", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "expected_results", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS", ",", "\n", "expected_results_sigma_tol", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS_SIGMA_TOL", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", "generate_data", "=", "cfg", ".", "TEST", ".", "GEN", ",", "\n", "visual_num", "=", "cfg", ".", "TEST", ".", "VISUAL_NUM", "\n", ")", "\n", "# pdb.set_trace()", "\n", "results", ".", "append", "(", "result", ")", "\n", "\n", "synchronize", "(", ")", "\n", "\n", "", "return", "results", "\n", "", "else", ":", "\n", "        ", "for", "output_folder", ",", "dataset_name", ",", "data_loader_val", "in", "zip", "(", "output_folders", ",", "\n", "dataset_names", ",", "\n", "data_loaders_val", ")", ":", "\n", "            ", "inference", "(", "\n", "model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "iou_types", "=", "iou_types", ",", "\n", "box_only", "=", "cfg", ".", "MODEL", ".", "RPN_ONLY", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "expected_results", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS", ",", "\n", "expected_results_sigma_tol", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS_SIGMA_TOL", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", "generate_data", "=", "cfg", ".", "TEST", ".", "GEN", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.train_mean_teacher.train": [[25, 67], ["maskrcnn_benchmark.modeling.detector.build_detection_model", "maskrcnn_benchmark.modeling.detector.build_detection_model", "torch.device", "torch.device", "maskrcnn_benchmark.modeling.detector.build_detection_model.to", "maskrcnn_benchmark.modeling.detector.build_detection_model.to", "maskrcnn_benchmark.solver.make_optimizer", "maskrcnn_benchmark.solver.make_lr_scheduler", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer.load", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer.load", "maskrcnn_benchmark.data.make_mt_data_loader", "maskrcnn_benchmark.engine.MTtrainer.MTtrainer", "maskrcnn_benchmark.engine.MTtrainer.MTtrainer.train", "maskrcnn_benchmark.utils.comm.get_rank", "maskrcnn_benchmark.data.make_mt_data_loader", "data_loader_dict.update", "maskrcnn_benchmark.config.cfg"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.detectors.build_detection_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.detectors.build_detection_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.build.make_optimizer", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.build.make_lr_scheduler", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_mt_data_loader", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.train", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_mt_data_loader", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update"], ["def", "train", "(", "cfg", ",", "local_rank", ",", "distributed", ",", "save_path", "=", "'.'", ",", "writer", "=", "None", ")", ":", "\n", "# cfg.SOLVER.IMS_PER_BATCH =3# force it to 3", "\n", "    ", "model_s", "=", "build_detection_model", "(", "cfg", ",", "is_student", "=", "True", ")", "\n", "model_t", "=", "build_detection_model", "(", "cfg", ",", "is_teacher", "=", "True", ")", "\n", "device_t", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "device_s", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "model_s", ".", "to", "(", "device_s", ")", "\n", "model_t", ".", "to", "(", "device_t", ")", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model_s", ")", "\n", "scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "output_dir", "=", "save_path", "\n", "save_to_disk", "=", "get_rank", "(", ")", "==", "0", "\n", "checkpointer_s", "=", "DetectronCheckpointer", "(", "\n", "cfg", ",", "model_s", ",", "optimizer", ",", "scheduler", ",", "output_dir", ",", "save_to_disk", "\n", ")", "\n", "checkpointer_t", "=", "DetectronCheckpointer", "(", "cfg", ",", "model_t", ",", "optimizer", "=", "None", ",", "scheduler", "=", "scheduler", ",", "save_dir", "=", "output_dir", ",", "save_to_disk", "=", "save_to_disk", ")", "\n", "_init_weight", "=", "'e2e_mask_rcnn_R_50_FPN_1x.pth'", "\n", "_", "=", "checkpointer_s", ".", "load", "(", "_init_weight", ",", "True", ")", "\n", "_", "=", "checkpointer_t", ".", "load", "(", "_init_weight", ",", "True", ")", "\n", "sourceDataLoader", "=", "make_mt_data_loader", "(", "cfg", ",", "\n", "is_train", "=", "True", ",", "\n", "is_distributed", "=", "distributed", ",", "\n", "start_iter", "=", "0", ",", "\n", "mode", "=", "'source'", ",", "\n", "img_ratio", "=", "1", "/", "2", ")", "\n", "data_loader_dict", "=", "{", "'source'", ":", "sourceDataLoader", ",", "}", "\n", "if", "cfg", ".", "DATASETS", ".", "NO_LABEL", ":", "\n", "        ", "noLabelDataLoader", "=", "make_mt_data_loader", "(", "cfg", ",", "\n", "is_train", "=", "True", ",", "\n", "is_distributed", "=", "distributed", ",", "\n", "start_iter", "=", "0", ",", "\n", "mode", "=", "'no_label'", ",", "\n", "img_ratio", "=", "1", "/", "2", ")", "\n", "\n", "data_loader_dict", ".", "update", "(", "{", "'no_label'", ":", "noLabelDataLoader", "}", ")", "\n", "", "checkpoint_period", "=", "cfg", ".", "SOLVER", ".", "CHECKPOINT_PERIOD", "\n", "trainer", "=", "MTtrainer", "(", "model_s", ",", "model_t", ",", "data_loader_dict", ",", "optimizer", ",", "\n", "scheduler", ",", "checkpointer_s", ",", "checkpointer_t", ",", "checkpoint_period", ",", "cfg", ")", "\n", "\n", "trainer", ".", "train", "(", ")", "\n", "return", "model_s", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.train_mean_teacher.test": [[69, 102], ["torch.cuda.empty_cache", "maskrcnn_benchmark.data.make_data_loader", "zip", "len", "enumerate", "maskrcnn_benchmark.engine.inference.inference", "maskrcnn_benchmark.utils.comm.synchronize", "os.path.join", "maskrcnn_benchmark.utils.miscellaneous.mkdir", "maskrcnn_benchmark.config.cfg"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_data_loader", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.inference.inference", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.synchronize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.mkdir"], ["", "def", "test", "(", "cfg", ",", "model", ",", "distributed", ",", "output_dir", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "# TODO check if it helps", "\n", "iou_types", "=", "(", "\"segm\"", ",", ")", "\n", "# if cfg.MODEL.MASK_ON:", "\n", "# iou_types = iou_types + (\"segm\",)", "\n", "output_folders", "=", "[", "None", "]", "*", "len", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", "\n", "dataset_names", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "        ", "for", "idx", ",", "dataset_name", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"inference\"", ",", "\n", "dataset_name", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "output_folders", "[", "idx", "]", "=", "output_folder", "\n", "", "", "data_loaders_val", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "\n", "is_distributed", "=", "distributed", ")", "\n", "for", "output_folder", ",", "dataset_name", ",", "data_loader_val", "in", "zip", "(", "\n", "output_folders", ",", "\n", "dataset_names", ",", "\n", "data_loaders_val", ")", ":", "\n", "        ", "inference", "(", "\n", "model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "iou_types", "=", "iou_types", ",", "\n", "box_only", "=", "cfg", ".", "MODEL", ".", "RPN_ONLY", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "expected_results", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS", ",", "\n", "expected_results_sigma_tol", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS_SIGMA_TOL", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.train_mean_teacher.main": [[104, 201], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "cv2.setNumThreads", "argparse.ArgumentParser.parse_args", "maskrcnn_benchmark.config.cfg.merge_from_file", "maskrcnn_benchmark.config.cfg.merge_from_list", "maskrcnn_benchmark.config.cfg.freeze", "maskrcnn_benchmark.utils.logger.setup_logger", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "train_mean_teacher.train", "int", "torch.cuda.set_device", "torch.distributed.init_process_group", "maskrcnn_benchmark.utils.miscellaneous.mkdir", "shutil.copy2", "maskrcnn_benchmark.utils.comm.get_rank", "open", "maskrcnn_benchmark.utils.logger.setup_logger.info", "train_mean_teacher.test", "maskrcnn_benchmark.utils.collect_env.collect_env_info", "cf.read", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.convert_cityscapes_to_coco.parse_args", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.logger.setup_logger", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.train", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.train_mean_teacher.test", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env.collect_env_info"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"PyTorch Object Detection Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--skip-test\"", ",", "\n", "dest", "=", "\"skip_test\"", ",", "\n", "help", "=", "\"Do not test the final model\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpuid\"", ",", "default", "=", "'0'", ",", "help", "=", "'set gpu id'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ")", "\n", "cv2", ".", "setNumThreads", "(", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# pdb.set_trace()", "\n", "num_gpus", "=", "int", "(", "\n", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "args", ".", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpuid", "\n", "# else:", "\n", "# os.environ[\"CUDA_VISIBLE_DEVICES\"] = args.gpuid", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "subname", "=", "'debug'", "\n", "", "else", ":", "\n", "        ", "subname", "=", "'Sr1.0'", "'_U{unlabel}'", "'_mtCls{cls_loss}'", "'_mtHint{hint_loss}'", "'mt{lambdas}_pl{pl}'", ".", "format", "(", "\n", "unlabel", "=", "str", "(", "cfg", ".", "DATASETS", ".", "NO_LABEL", ")", ",", "\n", "cls_loss", "=", "str", "(", "cfg", ".", "MT", ".", "CLS_LOSS", ")", ",", "\n", "hint_loss", "=", "str", "(", "cfg", ".", "MT", ".", "FG_HINT", ")", ",", "\n", "lambdas", "=", "str", "(", "cfg", ".", "MT", ".", "LAMBDA", ")", ",", "\n", "pl", "=", "'1'", "if", "cfg", ".", "MT", ".", "PLTRAIN", "else", "'0'", "\n", ")", "\n", "\n", "", "if", "cfg", ".", "MT", ".", "ODKD", ":", "\n", "        ", "subname", "=", "'odkd_cls{cls}_hint{hint}_lambda{la}'", ".", "format", "(", "\n", "cls", "=", "str", "(", "cfg", ".", "MT", ".", "CLS_LOSS", ")", ",", "\n", "hint", "=", "str", "(", "cfg", ".", "MT", ".", "HINT", ")", ",", "\n", "la", "=", "str", "(", "cfg", ".", "MT", ".", "LAMBDA", ")", "\n", ")", "\n", "", "if", "cfg", ".", "MT", ".", "FFI", ":", "\n", "        ", "subname", "=", "'FFI_hint{hint}_lambda{la}'", ".", "format", "(", "\n", "\n", "hint", "=", "str", "(", "cfg", ".", "MT", ".", "HINT", ")", ",", "\n", "la", "=", "str", "(", "cfg", ".", "MT", ".", "LAMBDA", ")", "\n", ")", "\n", "", "save_path", "=", "subname", "\n", "output_dir", "=", "'result/pap/'", "+", "save_path", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "shutil", ".", "copy2", "(", "args", ".", "config_file", ",", "output_dir", ")", "\n", "# copy a cfg file to save path", "\n", "# Writter = SummaryWriter(os.path.join('tensorboard',output_dir))", "\n", "", "Writter", "=", "None", "\n", "logger", "=", "setup_logger", "(", "\"maskrcnn_benchmark\"", ",", "output_dir", ",", "\n", "get_rank", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Collecting env info (might take some time)\"", ")", "\n", "logger", ".", "info", "(", "\"\\n\"", "+", "collect_env_info", "(", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "\"r\"", ")", "as", "cf", ":", "\n", "        ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "model", "=", "train", "(", "cfg", ",", "args", ".", "local_rank", ",", "args", ".", "distributed", ",", "output_dir", ",", "writer", "=", "Writter", ")", "\n", "\n", "if", "not", "args", ".", "skip_test", ":", "\n", "        ", "test", "(", "cfg", ",", "model", ",", "args", ".", "distributed", ",", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.instances2dict_with_polygons.instances2dict_with_polygons": [[17, 69], ["isinstance", "print", "Image.open", "np.array", "np.unique", "os.path.abspath", "print", "Instance", "Instance.toDict", "instances[].append", "print", "sys.stdout.flush", "len", "cv2.findContours", "mask.copy", "c.reshape().tolist", "c.reshape"], "function", ["None"], ["def", "instances2dict_with_polygons", "(", "imageFileList", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "imgCount", "=", "0", "\n", "instanceDict", "=", "{", "}", "\n", "\n", "if", "not", "isinstance", "(", "imageFileList", ",", "list", ")", ":", "\n", "        ", "imageFileList", "=", "[", "imageFileList", "]", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Processing {} images...\"", ".", "format", "(", "len", "(", "imageFileList", ")", ")", ")", "\n", "\n", "", "for", "imageFileName", "in", "imageFileList", ":", "\n", "# Load image", "\n", "        ", "img", "=", "Image", ".", "open", "(", "imageFileName", ")", "\n", "\n", "# Image as numpy array", "\n", "imgNp", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "# Initialize label categories", "\n", "instances", "=", "{", "}", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "instances", "[", "label", ".", "name", "]", "=", "[", "]", "\n", "\n", "# Loop through all instance ids in instance image", "\n", "", "for", "instanceId", "in", "np", ".", "unique", "(", "imgNp", ")", ":", "\n", "            ", "if", "instanceId", "<", "1000", ":", "\n", "                ", "continue", "\n", "", "instanceObj", "=", "Instance", "(", "imgNp", ",", "instanceId", ")", "\n", "instanceObj_dict", "=", "instanceObj", ".", "toDict", "(", ")", "\n", "\n", "#instances[id2label[instanceObj.labelID].name].append(instanceObj.toDict())", "\n", "if", "id2label", "[", "instanceObj", ".", "labelID", "]", ".", "hasInstances", ":", "\n", "                ", "mask", "=", "(", "imgNp", "==", "instanceId", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "im2", ",", "contour", ",", "hier", "=", "cv2", ".", "findContours", "(", "\n", "mask", ".", "copy", "(", ")", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_NONE", ")", "\n", "\n", "polygons", "=", "[", "c", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "for", "c", "in", "contour", "]", "\n", "instanceObj_dict", "[", "'contours'", "]", "=", "polygons", "\n", "\n", "", "instances", "[", "id2label", "[", "instanceObj", ".", "labelID", "]", ".", "name", "]", ".", "append", "(", "instanceObj_dict", ")", "\n", "\n", "", "imgKey", "=", "os", ".", "path", ".", "abspath", "(", "imageFileName", ")", "\n", "instanceDict", "[", "imgKey", "]", "=", "instances", "\n", "imgCount", "+=", "1", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"\\rImages Processed: {}\"", ".", "format", "(", "imgCount", ")", ",", "end", "=", "' '", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"\"", ")", "\n", "\n", "", "return", "instanceDict", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.instances2dict_with_polygons.main": [[70, 77], ["instances2dict_with_polygons.instances2dict_with_polygons", "len", "fileList.append"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.instances2dict_with_polygons.instances2dict_with_polygons"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "fileList", "=", "[", "]", "\n", "if", "(", "len", "(", "argv", ")", ">", "2", ")", ":", "\n", "        ", "for", "arg", "in", "argv", ":", "\n", "            ", "if", "(", "\"png\"", "in", "arg", ")", ":", "\n", "                ", "fileList", ".", "append", "(", "arg", ")", "\n", "", "", "", "instances2dict_with_polygons", "(", "fileList", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.convert_cityscapes_to_coco.parse_args": [[38, 51], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.convert_cityscapes_to_coco.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Convert dataset'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "help", "=", "\"cocostuff, cityscapes\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--outdir'", ",", "help", "=", "\"output dir for json files\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--datadir'", ",", "help", "=", "\"data dir for annotations to be converted\"", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.convert_cityscapes_to_coco.convert_coco_stuff_mat": [[53, 91], ["os.path.join", "print", "open", "enumerate", "open", "outfile.write", "img_name.replace().strip.replace().strip", "os.path.join", "h5py.File", "h5py.File.get", "scipy.misc.imsave", "images.append", "len", "os.path.join", "json.dumps", "len", "h5py.File.get", "enumerate", "os.path.join", "img_name.replace().strip.replace", "categories.append", "chr"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get"], ["", "def", "convert_coco_stuff_mat", "(", "data_dir", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"Convert to png and save json with path. This currently only contains\n    the segmentation labels for objects+stuff in cocostuff - if we need to\n    combine with other labels from original COCO that will be a TODO.\"\"\"", "\n", "sets", "=", "[", "'train'", ",", "'val'", "]", "\n", "categories", "=", "[", "]", "\n", "json_name", "=", "'coco_stuff_%s.json'", "\n", "ann_dict", "=", "{", "}", "\n", "for", "data_set", "in", "sets", ":", "\n", "        ", "file_list", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'%s.txt'", ")", "\n", "images", "=", "[", "]", "\n", "with", "open", "(", "file_list", "%", "data_set", ")", "as", "f", ":", "\n", "            ", "for", "img_id", ",", "img_name", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "img_name", "=", "img_name", ".", "replace", "(", "'coco'", ",", "'COCO'", ")", ".", "strip", "(", "'\\n'", ")", "\n", "image", "=", "{", "}", "\n", "mat_file", "=", "os", ".", "path", ".", "join", "(", "\n", "data_dir", ",", "'annotations/%s.mat'", "%", "img_name", ")", "\n", "data", "=", "h5py", ".", "File", "(", "mat_file", ",", "'r'", ")", "\n", "labelMap", "=", "data", ".", "get", "(", "'S'", ")", "\n", "if", "len", "(", "categories", ")", "==", "0", ":", "\n", "                    ", "labelNames", "=", "data", ".", "get", "(", "'names'", ")", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "labelNames", ")", ":", "\n", "                        ", "categories", ".", "append", "(", "\n", "{", "\"id\"", ":", "idx", ",", "\"name\"", ":", "''", ".", "join", "(", "chr", "(", "i", ")", "for", "i", "in", "data", "[", "\n", "n", "[", "0", "]", "]", ")", "}", ")", "\n", "", "ann_dict", "[", "'categories'", "]", "=", "categories", "\n", "", "scipy", ".", "misc", ".", "imsave", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "img_name", "+", "'.png'", ")", ",", "labelMap", ")", "\n", "image", "[", "'width'", "]", "=", "labelMap", ".", "shape", "[", "0", "]", "\n", "image", "[", "'height'", "]", "=", "labelMap", ".", "shape", "[", "1", "]", "\n", "image", "[", "'file_name'", "]", "=", "img_name", "\n", "image", "[", "'seg_file_name'", "]", "=", "img_name", "\n", "image", "[", "'id'", "]", "=", "img_id", "\n", "images", ".", "append", "(", "image", ")", "\n", "", "", "ann_dict", "[", "'images'", "]", "=", "images", "\n", "print", "(", "\"Num images: %s\"", "%", "len", "(", "images", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "json_name", "%", "data_set", ")", ",", "'wb'", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "json", ".", "dumps", "(", "ann_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.convert_cityscapes_to_coco.getLabelID": [[94, 99], ["int"], "function", ["None"], ["", "", "", "def", "getLabelID", "(", "self", ",", "instID", ")", ":", "\n", "    ", "if", "(", "instID", "<", "1000", ")", ":", "\n", "        ", "return", "instID", "\n", "", "else", ":", "\n", "        ", "return", "int", "(", "instID", "/", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.convert_cityscapes_to_coco.convert_cityscapes_instance_only": [[101, 212], ["zip", "print", "os.path.join", "os.walk", "print", "print", "print", "open", "outfile.write", "filename.endswith", "len", "len", "len", "os.path.join", "json.dumps", "json.load", "images.append", "os.path.join", "print", "open", "cityscapesscripts.instances2dict_with_polygons", "data_set.split", "len", "os.path.join", "annotations.append", "data_set.split", "print", "len", "min", "print", "detectron.xyxy_to_xywh().tolist", "len", "len", "len", "len", "detectron.xyxy_to_xywh", "detectron.polys_to_boxes", "data_set.split", "data_set.split"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.cityscapes.instances2dict_with_polygons.instances2dict_with_polygons", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split"], ["", "", "def", "convert_cityscapes_instance_only", "(", "\n", "data_dir", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"Convert from cityscapes format to COCO instance seg format - polygons\"\"\"", "\n", "sets", "=", "[", "\n", "'gtFine_val'", ",", "\n", "'gtFine_train'", ",", "\n", "'gtFine_test'", ",", "\n", "\n", "# 'gtCoarse_train',", "\n", "# 'gtCoarse_val',", "\n", "# 'gtCoarse_train_extra'", "\n", "]", "\n", "ann_dirs", "=", "[", "\n", "'gtFine_trainvaltest/gtFine/val'", ",", "\n", "'gtFine_trainvaltest/gtFine/train'", ",", "\n", "'gtFine_trainvaltest/gtFine/test'", ",", "\n", "\n", "# 'gtCoarse/train',", "\n", "# 'gtCoarse/train_extra',", "\n", "# 'gtCoarse/val'", "\n", "]", "\n", "json_name", "=", "'instancesonly_filtered_%s.json'", "\n", "ends_in", "=", "'%s_polygons.json'", "\n", "img_id", "=", "0", "\n", "ann_id", "=", "0", "\n", "cat_id", "=", "1", "\n", "category_dict", "=", "{", "}", "\n", "\n", "category_instancesonly", "=", "[", "\n", "'person'", ",", "\n", "'rider'", ",", "\n", "'car'", ",", "\n", "'truck'", ",", "\n", "'bus'", ",", "\n", "'train'", ",", "\n", "'motorcycle'", ",", "\n", "'bicycle'", ",", "\n", "]", "\n", "\n", "for", "data_set", ",", "ann_dir", "in", "zip", "(", "sets", ",", "ann_dirs", ")", ":", "\n", "        ", "print", "(", "'Starting %s'", "%", "data_set", ")", "\n", "ann_dict", "=", "{", "}", "\n", "images", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "ann_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "ann_dir", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ann_dir", ")", ":", "\n", "            ", "for", "filename", "in", "files", ":", "\n", "                ", "if", "filename", ".", "endswith", "(", "ends_in", "%", "data_set", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", ":", "\n", "                    ", "if", "len", "(", "images", ")", "%", "50", "==", "0", ":", "\n", "                        ", "print", "(", "\"Processed %s images, %s annotations\"", "%", "(", "\n", "len", "(", "images", ")", ",", "len", "(", "annotations", ")", ")", ")", "\n", "", "json_ann", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", ")", "\n", "image", "=", "{", "}", "\n", "image", "[", "'id'", "]", "=", "img_id", "\n", "img_id", "+=", "1", "\n", "\n", "image", "[", "'width'", "]", "=", "json_ann", "[", "'imgWidth'", "]", "\n", "image", "[", "'height'", "]", "=", "json_ann", "[", "'imgHeight'", "]", "\n", "image", "[", "'file_name'", "]", "=", "filename", "[", ":", "-", "len", "(", "\n", "ends_in", "%", "data_set", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "]", "+", "'leftImg8bit.png'", "\n", "image", "[", "'seg_file_name'", "]", "=", "filename", "[", ":", "-", "len", "(", "\n", "ends_in", "%", "data_set", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "]", "+", "'%s_instanceIds.png'", "%", "data_set", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "images", ".", "append", "(", "image", ")", "\n", "\n", "fullname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "image", "[", "'seg_file_name'", "]", ")", "\n", "objects", "=", "cs", ".", "instances2dict_with_polygons", "(", "\n", "[", "fullname", "]", ",", "verbose", "=", "False", ")", "[", "fullname", "]", "\n", "\n", "for", "object_cls", "in", "objects", ":", "\n", "                        ", "if", "object_cls", "not", "in", "category_instancesonly", ":", "\n", "                            ", "continue", "# skip non-instance categories", "\n", "\n", "", "for", "obj", "in", "objects", "[", "object_cls", "]", ":", "\n", "                            ", "if", "obj", "[", "'contours'", "]", "==", "[", "]", ":", "\n", "                                ", "print", "(", "'Warning: empty contours.'", ")", "\n", "continue", "# skip non-instance categories", "\n", "\n", "", "len_p", "=", "[", "len", "(", "p", ")", "for", "p", "in", "obj", "[", "'contours'", "]", "]", "\n", "if", "min", "(", "len_p", ")", "<=", "4", ":", "\n", "                                ", "print", "(", "'Warning: invalid contours.'", ")", "\n", "continue", "# skip non-instance categories", "\n", "\n", "", "ann", "=", "{", "}", "\n", "ann", "[", "'id'", "]", "=", "ann_id", "\n", "ann_id", "+=", "1", "\n", "ann", "[", "'image_id'", "]", "=", "image", "[", "'id'", "]", "\n", "ann", "[", "'segmentation'", "]", "=", "obj", "[", "'contours'", "]", "\n", "\n", "if", "object_cls", "not", "in", "category_dict", ":", "\n", "                                ", "category_dict", "[", "object_cls", "]", "=", "cat_id", "\n", "cat_id", "+=", "1", "\n", "", "ann", "[", "'category_id'", "]", "=", "category_dict", "[", "object_cls", "]", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "ann", "[", "'area'", "]", "=", "obj", "[", "'pixelCount'", "]", "\n", "ann", "[", "'bbox'", "]", "=", "bboxs_util", ".", "xyxy_to_xywh", "(", "\n", "segms_util", ".", "polys_to_boxes", "(", "\n", "[", "ann", "[", "'segmentation'", "]", "]", ")", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "\n", "annotations", ".", "append", "(", "ann", ")", "\n", "\n", "", "", "", "", "", "ann_dict", "[", "'images'", "]", "=", "images", "\n", "categories", "=", "[", "{", "\"id\"", ":", "category_dict", "[", "name", "]", ",", "\"name\"", ":", "name", "}", "for", "name", "in", "\n", "category_dict", "]", "\n", "ann_dict", "[", "'categories'", "]", "=", "categories", "\n", "ann_dict", "[", "'annotations'", "]", "=", "annotations", "\n", "print", "(", "\"Num categories: %s\"", "%", "len", "(", "categories", ")", ")", "\n", "print", "(", "\"Num images: %s\"", "%", "len", "(", "images", ")", ")", "\n", "print", "(", "\"Num annotations: %s\"", "%", "len", "(", "annotations", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "json_name", "%", "data_set", ")", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "json", ".", "dumps", "(", "ann_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_metric_logger.TestMetricLogger.test_update": [[8, 18], ["maskrcnn_benchmark.utils.metric_logger.MetricLogger", "range", "test_metric_logger.TestMetricLogger.assertEqual", "test_metric_logger.TestMetricLogger.assertEqual", "test_metric_logger.TestMetricLogger.assertEqual", "test_metric_logger.TestMetricLogger.assertEqual", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.update", "float"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update"], ["    ", "def", "test_update", "(", "self", ")", ":", "\n", "        ", "meter", "=", "MetricLogger", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "meter", ".", "update", "(", "metric", "=", "float", "(", "i", ")", ")", "\n", "\n", "", "m", "=", "meter", ".", "meters", "[", "\"metric\"", "]", "\n", "self", ".", "assertEqual", "(", "m", ".", "count", ",", "10", ")", "\n", "self", ".", "assertEqual", "(", "m", ".", "total", ",", "45", ")", "\n", "self", ".", "assertEqual", "(", "m", ".", "median", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "m", ".", "avg", ",", "4.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_metric_logger.TestMetricLogger.test_no_attr": [[19, 26], ["maskrcnn_benchmark.utils.metric_logger.MetricLogger", "test_metric_logger.TestMetricLogger.assertRaises"], "methods", ["None"], ["", "def", "test_no_attr", "(", "self", ")", ":", "\n", "        ", "meter", "=", "MetricLogger", "(", ")", "\n", "_", "=", "meter", ".", "meters", "\n", "_", "=", "meter", ".", "delimiter", "\n", "def", "broken", "(", ")", ":", "\n", "            ", "_", "=", "meter", ".", "not_existent", "\n", "", "self", ".", "assertRaises", "(", "AttributeError", ",", "broken", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_data_samplers.SubsetSampler.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_data_samplers.SubsetSampler.__iter__": [[19, 21], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_data_samplers.SubsetSampler.__len__": [[22, 24], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_data_samplers.TestGroupedBatchSampler.test_respect_order_simple": [[27, 39], ["torch.utils.data.sampler.SequentialSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range", "itertools.chain.from_iterable"], "methods", ["None"], ["    ", "def", "test_respect_order_simple", "(", "self", ")", ":", "\n", "        ", "drop_uneven", "=", "False", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "40", ")", "]", "\n", "group_ids", "=", "[", "i", "//", "10", "for", "i", "in", "dataset", "]", "\n", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "for", "batch_size", "in", "[", "1", ",", "3", ",", "5", ",", "6", "]", ":", "\n", "            ", "batch_sampler", "=", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", "\n", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "merged_result", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "result", ")", ")", "\n", "self", ".", "assertEqual", "(", "merged_result", ",", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_data_samplers.TestGroupedBatchSampler.test_respect_order": [[40, 58], ["torch.utils.data.sampler.SequentialSampler", "enumerate", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range"], "methods", ["None"], ["", "", "def", "test_respect_order", "(", "self", ")", ":", "\n", "        ", "drop_uneven", "=", "False", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", "]", "\n", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "\n", "expected", "=", "[", "\n", "[", "[", "0", "]", ",", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", ",", "[", "4", "]", ",", "[", "5", "]", ",", "[", "6", "]", ",", "[", "7", "]", ",", "[", "8", "]", ",", "[", "9", "]", "]", ",", "\n", "[", "[", "0", ",", "1", ",", "3", "]", ",", "[", "2", ",", "4", ",", "5", "]", ",", "[", "6", ",", "9", "]", ",", "[", "7", ",", "8", "]", "]", ",", "\n", "[", "[", "0", ",", "1", ",", "3", ",", "6", "]", ",", "[", "2", ",", "4", ",", "5", ",", "7", "]", ",", "[", "8", "]", ",", "[", "9", "]", "]", ",", "\n", "]", "\n", "\n", "for", "idx", ",", "batch_size", "in", "enumerate", "(", "[", "1", ",", "3", ",", "4", "]", ")", ":", "\n", "            ", "batch_sampler", "=", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", "\n", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "self", ".", "assertEqual", "(", "result", ",", "expected", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_data_samplers.TestGroupedBatchSampler.test_respect_order_drop_uneven": [[59, 71], ["torch.utils.data.sampler.SequentialSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range"], "methods", ["None"], ["", "", "def", "test_respect_order_drop_uneven", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "3", "\n", "drop_uneven", "=", "True", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", "]", "\n", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "\n", "expected", "=", "[", "[", "0", ",", "1", ",", "3", "]", ",", "[", "2", ",", "4", ",", "5", "]", "]", "\n", "self", ".", "assertEqual", "(", "result", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_data_samplers.TestGroupedBatchSampler.test_subset_sampler": [[72, 84], ["test_data_samplers.SubsetSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range"], "methods", ["None"], ["", "def", "test_subset_sampler", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "3", "\n", "drop_uneven", "=", "False", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", "]", "\n", "sampler", "=", "SubsetSampler", "(", "[", "0", ",", "3", ",", "5", ",", "6", ",", "7", ",", "8", "]", ")", "\n", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "\n", "expected", "=", "[", "[", "0", ",", "3", ",", "6", "]", ",", "[", "5", ",", "7", ",", "8", "]", "]", "\n", "self", ".", "assertEqual", "(", "result", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_data_samplers.TestGroupedBatchSampler.test_permute_subset_sampler": [[85, 97], ["test_data_samplers.SubsetSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range"], "methods", ["None"], ["", "def", "test_permute_subset_sampler", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "3", "\n", "drop_uneven", "=", "False", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", "]", "\n", "sampler", "=", "SubsetSampler", "(", "[", "5", ",", "0", ",", "6", ",", "1", ",", "3", ",", "8", "]", ")", "\n", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "\n", "expected", "=", "[", "[", "5", ",", "8", "]", ",", "[", "0", ",", "6", ",", "1", "]", ",", "[", "3", "]", "]", "\n", "self", ".", "assertEqual", "(", "result", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_data_samplers.TestGroupedBatchSampler.test_permute_subset_sampler_drop_uneven": [[98, 110], ["test_data_samplers.SubsetSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range"], "methods", ["None"], ["", "def", "test_permute_subset_sampler_drop_uneven", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "3", "\n", "drop_uneven", "=", "True", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", "]", "\n", "sampler", "=", "SubsetSampler", "(", "[", "5", ",", "0", ",", "6", ",", "1", ",", "3", ",", "8", "]", ")", "\n", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "\n", "expected", "=", "[", "[", "0", ",", "6", ",", "1", "]", "]", "\n", "self", ".", "assertEqual", "(", "result", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_data_samplers.TestGroupedBatchSampler.test_len": [[111, 128], ["torch.utils.data.sampler.RandomSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "len", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "random.randint", "len", "len", "len", "len", "len", "len", "len", "range"], "methods", ["None"], ["", "def", "test_len", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "3", "\n", "drop_uneven", "=", "True", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "random", ".", "randint", "(", "0", ",", "1", ")", "for", "_", "in", "dataset", "]", "\n", "sampler", "=", "RandomSampler", "(", "dataset", ")", "\n", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "result", ")", ",", "len", "(", "batch_sampler", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "result", ")", ",", "len", "(", "batch_sampler", ")", ")", "\n", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "batch_sampler_len", "=", "len", "(", "batch_sampler", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "result", ")", ",", "batch_sampler_len", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "result", ")", ",", "len", "(", "batch_sampler", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.test_data_samplers.TestIterationBasedBatchSampler.test_number_of_iters_and_elements": [[131, 150], ["torch.utils.data.sampler.SequentialSampler", "torch.utils.data.sampler.BatchSampler", "maskrcnn_benchmark.data.samplers.IterationBasedBatchSampler", "enumerate", "len", "min", "test_data_samplers.TestIterationBasedBatchSampler.assertEqual", "range", "len", "len", "range"], "methods", ["None"], ["    ", "def", "test_number_of_iters_and_elements", "(", "self", ")", ":", "\n", "        ", "for", "batch_size", "in", "[", "2", ",", "3", ",", "4", "]", ":", "\n", "            ", "for", "num_iterations", "in", "[", "4", ",", "10", ",", "20", "]", ":", "\n", "                ", "for", "drop_last", "in", "[", "False", ",", "True", "]", ":", "\n", "                    ", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "batch_sampler", "=", "BatchSampler", "(", "\n", "sampler", ",", "batch_size", ",", "drop_last", "=", "drop_last", "\n", ")", "\n", "\n", "iter_sampler", "=", "IterationBasedBatchSampler", "(", "\n", "batch_sampler", ",", "num_iterations", "\n", ")", "\n", "assert", "len", "(", "iter_sampler", ")", "==", "num_iterations", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "iter_sampler", ")", ":", "\n", "                        ", "start", "=", "(", "i", "%", "len", "(", "batch_sampler", ")", ")", "*", "batch_size", "\n", "end", "=", "min", "(", "start", "+", "batch_size", ",", "len", "(", "dataset", ")", ")", "\n", "expected", "=", "[", "x", "for", "x", "in", "range", "(", "start", ",", "end", ")", "]", "\n", "self", ".", "assertEqual", "(", "batch", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model": [[15, 17], ["torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["None"], ["    ", "def", "create_model", "(", "self", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "2", ",", "3", ")", ",", "nn", ".", "Linear", "(", "3", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_complex_model": [[18, 35], ["torch.nn.Module", "torch.nn.Module", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Module", "torch.nn.Linear", "collections.OrderedDict", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "create_complex_model", "(", "self", ")", ":", "\n", "        ", "m", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "block1", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "block1", ".", "layer1", "=", "nn", ".", "Linear", "(", "2", ",", "3", ")", "\n", "m", ".", "layer2", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "m", ".", "res", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "res", ".", "layer2", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "\n", "state_dict", "=", "OrderedDict", "(", ")", "\n", "state_dict", "[", "\"layer1.weight\"", "]", "=", "torch", ".", "rand", "(", "3", ",", "2", ")", "\n", "state_dict", "[", "\"layer1.bias\"", "]", "=", "torch", ".", "rand", "(", "3", ")", "\n", "state_dict", "[", "\"layer2.weight\"", "]", "=", "torch", ".", "rand", "(", "2", ",", "3", ")", "\n", "state_dict", "[", "\"layer2.bias\"", "]", "=", "torch", ".", "rand", "(", "2", ")", "\n", "state_dict", "[", "\"res.layer2.weight\"", "]", "=", "torch", ".", "rand", "(", "2", ",", "3", ")", "\n", "state_dict", "[", "\"res.layer2.bias\"", "]", "=", "torch", ".", "rand", "(", "2", ")", "\n", "\n", "return", "m", ",", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.test_from_last_checkpoint_model": [[36, 70], ["zip", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "torch.nn.DataParallel", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "tempfile.TemporaryDirectory", "maskrcnn_benchmark.utils.checkpoint.Checkpointer", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.save", "maskrcnn_benchmark.utils.checkpoint.Checkpointer", "checkpoint.TestCheckpointer.assertTrue", "checkpoint.TestCheckpointer.assertEqual", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.load", "trained_model.parameters", "fresh_model.parameters", "checkpoint.TestCheckpointer.assertFalse", "checkpoint.TestCheckpointer.assertTrue", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.has_checkpoint", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.get_checkpoint_file", "os.path.join", "trained_p.equal", "id", "id"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.get_checkpoint_file"], ["", "def", "test_from_last_checkpoint_model", "(", "self", ")", ":", "\n", "# test that loading works even if they differ by a prefix", "\n", "        ", "for", "trained_model", ",", "fresh_model", "in", "[", "\n", "(", "self", ".", "create_model", "(", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "self", ".", "create_model", "(", ")", ",", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ")", ",", "\n", "(", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", ")", ",", "\n", "]", ":", "\n", "\n", "            ", "with", "TemporaryDirectory", "(", ")", "as", "f", ":", "\n", "                ", "checkpointer", "=", "Checkpointer", "(", "\n", "trained_model", ",", "save_dir", "=", "f", ",", "save_to_disk", "=", "True", "\n", ")", "\n", "checkpointer", ".", "save", "(", "\"checkpoint_file\"", ")", "\n", "\n", "# in the same folder", "\n", "fresh_checkpointer", "=", "Checkpointer", "(", "fresh_model", ",", "save_dir", "=", "f", ")", "\n", "self", ".", "assertTrue", "(", "fresh_checkpointer", ".", "has_checkpoint", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "fresh_checkpointer", ".", "get_checkpoint_file", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "f", ",", "\"checkpoint_file.pth\"", ")", ",", "\n", ")", "\n", "_", "=", "fresh_checkpointer", ".", "load", "(", ")", "\n", "\n", "", "for", "trained_p", ",", "loaded_p", "in", "zip", "(", "\n", "trained_model", ".", "parameters", "(", ")", ",", "fresh_model", ".", "parameters", "(", ")", "\n", ")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "trained_p", ")", "==", "id", "(", "loaded_p", ")", ")", "\n", "# same content", "\n", "self", ".", "assertTrue", "(", "trained_p", ".", "equal", "(", "loaded_p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.test_from_name_file_model": [[71, 102], ["zip", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "torch.nn.DataParallel", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "tempfile.TemporaryDirectory", "maskrcnn_benchmark.utils.checkpoint.Checkpointer", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.save", "trained_model.parameters", "fresh_model.parameters", "checkpoint.TestCheckpointer.assertFalse", "checkpoint.TestCheckpointer.assertTrue", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "tempfile.TemporaryDirectory", "maskrcnn_benchmark.utils.checkpoint.Checkpointer", "checkpoint.TestCheckpointer.assertFalse", "checkpoint.TestCheckpointer.assertEqual", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.load", "trained_p.equal", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.has_checkpoint", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.get_checkpoint_file", "os.path.join", "id", "id"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.get_checkpoint_file"], ["", "", "", "def", "test_from_name_file_model", "(", "self", ")", ":", "\n", "# test that loading works even if they differ by a prefix", "\n", "        ", "for", "trained_model", ",", "fresh_model", "in", "[", "\n", "(", "self", ".", "create_model", "(", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "self", ".", "create_model", "(", ")", ",", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ")", ",", "\n", "(", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", ")", ",", "\n", "]", ":", "\n", "            ", "with", "TemporaryDirectory", "(", ")", "as", "f", ":", "\n", "                ", "checkpointer", "=", "Checkpointer", "(", "\n", "trained_model", ",", "save_dir", "=", "f", ",", "save_to_disk", "=", "True", "\n", ")", "\n", "checkpointer", ".", "save", "(", "\"checkpoint_file\"", ")", "\n", "\n", "# on different folders", "\n", "with", "TemporaryDirectory", "(", ")", "as", "g", ":", "\n", "                    ", "fresh_checkpointer", "=", "Checkpointer", "(", "fresh_model", ",", "save_dir", "=", "g", ")", "\n", "self", ".", "assertFalse", "(", "fresh_checkpointer", ".", "has_checkpoint", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "fresh_checkpointer", ".", "get_checkpoint_file", "(", ")", ",", "\"\"", ")", "\n", "_", "=", "fresh_checkpointer", ".", "load", "(", "os", ".", "path", ".", "join", "(", "f", ",", "\"checkpoint_file.pth\"", ")", ")", "\n", "\n", "", "", "for", "trained_p", ",", "loaded_p", "in", "zip", "(", "\n", "trained_model", ".", "parameters", "(", ")", ",", "fresh_model", ".", "parameters", "(", ")", "\n", ")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "trained_p", ")", "==", "id", "(", "loaded_p", ")", ")", "\n", "# same content", "\n", "self", ".", "assertTrue", "(", "trained_p", ".", "equal", "(", "loaded_p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.test_complex_model_loaded": [[103, 115], ["checkpoint.TestCheckpointer.create_complex_model", "maskrcnn_benchmark.utils.model_serialization.load_state_dict", "zip", "torch.nn.DataParallel", "torch.nn.DataParallel.state_dict().values", "state_dict.values", "checkpoint.TestCheckpointer.assertFalse", "checkpoint.TestCheckpointer.assertTrue", "loaded.equal", "torch.nn.DataParallel.state_dict", "id", "id"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tests.checkpoint.TestCheckpointer.create_complex_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.load_state_dict"], ["", "", "", "def", "test_complex_model_loaded", "(", "self", ")", ":", "\n", "        ", "for", "add_data_parallel", "in", "[", "False", ",", "True", "]", ":", "\n", "            ", "model", ",", "state_dict", "=", "self", ".", "create_complex_model", "(", ")", "\n", "if", "add_data_parallel", ":", "\n", "                ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "load_state_dict", "(", "model", ",", "state_dict", ")", "\n", "for", "loaded", ",", "stored", "in", "zip", "(", "model", ".", "state_dict", "(", ")", ".", "values", "(", ")", ",", "state_dict", ".", "values", "(", ")", ")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "loaded", ")", "==", "id", "(", "stored", ")", ")", "\n", "# same content", "\n", "self", ".", "assertTrue", "(", "loaded", ".", "equal", "(", "stored", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.align_and_update_state_dicts": [[10, 57], ["sorted", "sorted", "torch.as_tensor().view", "torch.as_tensor().view.max", "logging.getLogger", "enumerate", "list", "list", "len", "len", "max", "max", "idxs.tolist", "logging.getLogger.info", "model_state_dict.keys", "loaded_state_dict.keys", "i.endswith", "len", "torch.as_tensor", "log_str_template.format", "len", "len", "tuple"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info"], ["def", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", ":", "\n", "    ", "\"\"\"\n    Strategy: suppose that the models that we will create will have prefixes appended\n    to each of its keys, for example due to an extra level of nesting that the original\n    pre-trained weights from ImageNet won't contain. For example, model.state_dict()\n    might return backbone[0].body.res2.conv1.weight, while the pre-trained model contains\n    res2.conv1.weight. We thus want to match both parameters together.\n    For that, we look for each model weight, look among all loaded keys if there is one\n    that is a suffix of the current weight name, and use it if that's the case.\n    If multiple matches exist, take the one with longest size\n    of the corresponding name. For example, for the same model as before, the pretrained\n    weight file can contain both res2.conv1.weight, as well as conv1.weight. In this case,\n    we want to match backbone[0].body.conv1.weight to conv1.weight, and\n    backbone[0].body.res2.conv1.weight to res2.conv1.weight.\n    \"\"\"", "\n", "current_keys", "=", "sorted", "(", "list", "(", "model_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "loaded_keys", "=", "sorted", "(", "list", "(", "loaded_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "# get a matrix of string matches, where each (i, j) entry correspond to the size of the", "\n", "# loaded_key string, if it matches", "\n", "match_matrix", "=", "[", "\n", "len", "(", "j", ")", "if", "i", ".", "endswith", "(", "j", ")", "else", "0", "for", "i", "in", "current_keys", "for", "j", "in", "loaded_keys", "\n", "]", "\n", "match_matrix", "=", "torch", ".", "as_tensor", "(", "match_matrix", ")", ".", "view", "(", "\n", "len", "(", "current_keys", ")", ",", "len", "(", "loaded_keys", ")", "\n", ")", "\n", "max_match_size", ",", "idxs", "=", "match_matrix", ".", "max", "(", "1", ")", "\n", "# remove indices that correspond to no-match", "\n", "idxs", "[", "max_match_size", "==", "0", "]", "=", "-", "1", "\n", "\n", "# used for logging", "\n", "max_size", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "current_keys", "]", ")", "if", "current_keys", "else", "1", "\n", "max_size_loaded", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "loaded_keys", "]", ")", "if", "loaded_keys", "else", "1", "\n", "log_str_template", "=", "\"{: <{}} loaded from {: <{}} of shape {}\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "for", "idx_new", ",", "idx_old", "in", "enumerate", "(", "idxs", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "idx_old", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "key", "=", "current_keys", "[", "idx_new", "]", "\n", "key_old", "=", "loaded_keys", "[", "idx_old", "]", "\n", "model_state_dict", "[", "key", "]", "=", "loaded_state_dict", "[", "key_old", "]", "\n", "logger", ".", "info", "(", "\n", "log_str_template", ".", "format", "(", "\n", "key", ",", "\n", "max_size", ",", "\n", "key_old", ",", "\n", "max_size_loaded", ",", "\n", "tuple", "(", "loaded_state_dict", "[", "key_old", "]", ".", "shape", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.strip_prefix_if_present": [[61, 69], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["", "", "def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.load_state_dict": [[71, 81], ["model.state_dict", "model_serialization.strip_prefix_if_present", "model_serialization.align_and_update_state_dicts", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.strip_prefix_if_present", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.align_and_update_state_dicts", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.load_state_dict"], ["", "def", "load_state_dict", "(", "model", ",", "loaded_state_dict", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# if the state_dict comes from a model that was wrapped in a", "\n", "# DataParallel or DistributedDataParallel during serialization,", "\n", "# remove the \"module\" prefix before performing the matching", "\n", "loaded_state_dict", "=", "strip_prefix_if_present", "(", "loaded_state_dict", ",", "prefix", "=", "\"module.\"", ")", "\n", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", "\n", "\n", "# use strict loading", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.UnNormalize.__init__": [[265, 268], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.UnNormalize.__call__": [[269, 281], ["zip", "tensor.permute.permute.permute", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "# The normalize code -> t.sub_(m).div_(s)", "\n", "", "tensor", "=", "tensor", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.mkdir": [[13, 19], ["os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.flattenlists": [[20, 29], ["numpy.array", "list", "polygons_new.append", "itertools.chain.from_iterable", "list.tolist"], "function", ["None"], ["", "", "", "def", "flattenlists", "(", "polygons", ")", ":", "\n", "    ", "polygons_new", "=", "[", "]", "\n", "\n", "for", "polygon", "in", "polygons", ":", "\n", "# print(polygon)", "\n", "        ", "polygon", "=", "np", ".", "array", "(", "polygon", ",", "np", ".", "int", ")", "\n", "polygon", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "polygon", ".", "tolist", "(", ")", ")", ")", "\n", "polygons_new", ".", "append", "(", "polygon", ")", "\n", "", "return", "polygons_new", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.close_contour": [[31, 35], ["numpy.array_equal", "numpy.vstack"], "function", ["None"], ["", "def", "close_contour", "(", "contour", ")", ":", "\n", "    ", "if", "not", "np", ".", "array_equal", "(", "contour", "[", "0", "]", ",", "contour", "[", "-", "1", "]", ")", ":", "\n", "        ", "contour", "=", "np", ".", "vstack", "(", "(", "contour", ",", "contour", "[", "0", "]", ")", ")", "\n", "", "return", "contour", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous._hflip": [[37, 39], ["torch.flip"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.flip"], ["", "def", "_hflip", "(", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "flip", "(", "tensor", ",", "(", "3", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.batch_hfilp": [[40, 53], ["isinstance", "isinstance", "t_list.append", "miscellaneous._hflip", "miscellaneous._hflip", "t_list.append", "miscellaneous._hflip"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous._hflip", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous._hflip", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous._hflip"], ["", "def", "batch_hfilp", "(", "tensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor", ",", "list", ")", ":", "\n", "        ", "t_list", "=", "[", "]", "\n", "for", "a", "in", "tensor", ":", "\n", "            ", "t_list", ".", "append", "(", "_hflip", "(", "a", ")", ")", "\n", "", "return", "t_list", "\n", "", "elif", "isinstance", "(", "tensor", ",", "tuple", ")", ":", "\n", "        ", "t_list", "=", "[", "]", "\n", "for", "a", "in", "tensor", ":", "\n", "            ", "t_list", ".", "append", "(", "_hflip", "(", "a", ")", ")", "\n", "", "return", "t_list", "\n", "", "else", ":", "\n", "        ", "return", "_hflip", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.batch_boxlist_hflip": [[54, 59], ["flip.append", "box.transpose"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose"], ["", "", "def", "batch_boxlist_hflip", "(", "boxlists", ")", ":", "\n", "    ", "flip", "=", "[", "]", "\n", "for", "box", "in", "boxlists", ":", "\n", "        ", "flip", ".", "append", "(", "box", ".", "transpose", "(", "0", ")", ")", "\n", "", "return", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.binary_mask_to_polygon": [[60, 85], ["numpy.pad", "skimage.measure.find_contours", "numpy.subtract", "miscellaneous.close_contour", "skimage.measure.approximate_polygon", "numpy.flip", "np.flip.ravel().tolist", "polygons.append", "len", "np.flip.ravel", "pycocotools.mask"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.close_contour", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.flip"], ["", "def", "binary_mask_to_polygon", "(", "binary_mask", ",", "tolerance", "=", "0", ")", ":", "\n", "    ", "\"\"\"Converts a binary mask to COCO polygon representation\n    Args:\n    binary_mask: a 2D binary numpy array where '1's represent the object\n    tolerance: Maximum distance from original points of polygon to approximated\n    polygonal chain. If tolerance is 0, the original coordinate array is returned.\n    \"\"\"", "\n", "\n", "polygons", "=", "[", "]", "\n", "# pad mask to close contours of shapes which start and end at an edge", "\n", "padded_binary_mask", "=", "np", ".", "pad", "(", "binary_mask", ",", "pad_width", "=", "1", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "contours", "=", "measure", ".", "find_contours", "(", "padded_binary_mask", ",", "0.5", ")", "\n", "contours", "=", "np", ".", "subtract", "(", "contours", ",", "1", ")", "\n", "for", "contour", "in", "contours", ":", "\n", "        ", "contour", "=", "close_contour", "(", "contour", ")", "\n", "contour", "=", "measure", ".", "approximate_polygon", "(", "contour", ",", "tolerance", ")", "\n", "if", "len", "(", "contour", ")", "<", "3", ":", "\n", "            ", "continue", "\n", "", "contour", "=", "np", ".", "flip", "(", "contour", ",", "axis", "=", "1", ")", "\n", "segmentation", "=", "contour", ".", "ravel", "(", ")", ".", "tolist", "(", ")", "\n", "# after padding and subtracting 1 we may get -0.5 points in our segmentation", "\n", "segmentation", "=", "[", "0", "if", "i", "<", "0", "else", "i", "for", "i", "in", "segmentation", "]", "\n", "polygons", ".", "append", "(", "segmentation", ")", "\n", "\n", "", "return", "polygons", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.maskToPolygons": [[87, 104], ["skimage.measure.find_contours", "binary_mask.astype", "numpy.flip", "np.flip.ravel().tolist", "numpy.asarray", "numpy.reshape().astype", "len", "polygons.append", "pdb.set_trace", "np.flip.ravel", "numpy.reshape", "int", "len"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.flip"], ["", "def", "maskToPolygons", "(", "binary_mask", ")", ":", "\n", "    ", "'''\n    :param mask: binary mask\n    :return: polygon in array\n    '''", "\n", "contours", "=", "measure", ".", "find_contours", "(", "binary_mask", ".", "astype", "(", "np", ".", "uint8", ")", ",", "0.5", ")", "\n", "polygons", "=", "[", "]", "\n", "for", "contour", "in", "contours", ":", "\n", "        ", "contour", "=", "np", ".", "flip", "(", "contour", ",", "axis", "=", "1", ")", "\n", "segmentation", "=", "contour", ".", "ravel", "(", ")", ".", "tolist", "(", ")", "\n", "mask", "=", "np", ".", "asarray", "(", "segmentation", ")", "\n", "mask", "=", "np", ".", "reshape", "(", "mask", ",", "(", "int", "(", "len", "(", "mask", ")", "/", "2", ")", ",", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "if", "len", "(", "segmentation", ")", ">=", "4", ":", "\n", "            ", "polygons", ".", "append", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "", "", "return", "polygons", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.polys_to_mask": [[105, 117], ["pycocotools.mask.frPyObjects", "numpy.array", "numpy.sum", "numpy.array", "pycocotools.mask.decode"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode"], ["", "def", "polys_to_mask", "(", "polygons", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"Convert from the COCO polygon segmentation format to a binary mask\n    encoded as a 2D array of data type numpy.float32. The polygon segmentation\n    is understood to be enclosed inside a height x width image. The resulting\n    mask is therefore of shape (height, width).\n    \"\"\"", "\n", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "polygons", ",", "height", ",", "width", ")", "\n", "mask", "=", "np", ".", "array", "(", "maskUtils", ".", "decode", "(", "rle", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# Flatten in case polygons was a list", "\n", "mask", "=", "np", ".", "sum", "(", "mask", ",", "axis", "=", "2", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ">", "0", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.mask_to_bbox": [[118, 131], ["numpy.array", "numpy.where", "numpy.where", "len", "len", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "mask_to_bbox", "(", "mask", ")", ":", "\n", "    ", "\"\"\"Compute the tight bounding box of a binary mask.\"\"\"", "\n", "xs", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "mask", ",", "axis", "=", "0", ")", ">", "0", ")", "[", "0", "]", "\n", "ys", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "mask", ",", "axis", "=", "1", ")", ">", "0", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "xs", ")", "==", "0", "or", "len", "(", "ys", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "", "x0", "=", "xs", "[", "0", "]", "\n", "x1", "=", "xs", "[", "-", "1", "]", "\n", "y0", "=", "ys", "[", "0", "]", "\n", "y1", "=", "ys", "[", "-", "1", "]", "\n", "return", "np", ".", "array", "(", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.poly_to_box": [[132, 140], ["min", "max", "min", "max", "min", "max", "min", "max"], "function", ["None"], ["", "def", "poly_to_box", "(", "poly", ")", ":", "\n", "    ", "\"\"\"Convert a list of polygons into an array of tight bounding boxes.\"\"\"", "\n", "x0", "=", "min", "(", "min", "(", "p", "[", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "x1", "=", "max", "(", "max", "(", "p", "[", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "y0", "=", "min", "(", "min", "(", "p", "[", "1", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "y1", "=", "max", "(", "max", "(", "p", "[", "1", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "boxes_from_polys", "=", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", "\n", "return", "boxes_from_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.maskToList": [[141, 160], ["miscellaneous.maskToPolygons", "polygon.tolist.tolist", "polygon_list.append", "pycocotools.mask"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.maskToPolygons"], ["", "def", "maskToList", "(", "binary_mask", ")", ":", "\n", "    ", "h", ",", "w", "=", "binary_mask", ".", "shape", "\n", "polygons", "=", "maskToPolygons", "(", "binary_mask", ")", "\n", "polygon_list", "=", "[", "]", "\n", "for", "polygon", "in", "polygons", ":", "\n", "        ", "polygon", "=", "polygon", "[", ":", ",", "0", ",", ":", "]", "\n", "polygon", "=", "polygon", ".", "tolist", "(", ")", "\n", "polygon_list", ".", "append", "(", "polygon", ")", "\n", "# if len(polygons)>1:", "\n", "#     polygon = polygons[0][:, 0, :]", "\n", "#     polygon = polygon.tolist()", "\n", "#", "\n", "#", "\n", "#     return False, polygon, (h,w)", "\n", "#", "\n", "# polygon = polygons[0][:,0,:]", "\n", "#", "\n", "# polygon = polygon.tolist()", "\n", "", "return", "True", ",", "polygon_list", ",", "(", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.rle_maskes_to_boxes2": [[161, 194], ["numpy.zeros", "enumerate", "numpy.array", "len", "miscellaneous.maskToList", "pycocotools.mask.sum", "miscellaneous.rle_maskes_to_boxes2.get_bounds"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.maskToList"], ["", "def", "rle_maskes_to_boxes2", "(", "masks", ")", ":", "\n", "    ", "\"\"\"Computes the bounding box of each mask in a list of RLE encoded masks.\"\"\"", "\n", "\n", "\n", "decoded_masks", "=", "[", "\n", "np", ".", "array", "(", "maskUtils", ".", "decode", "(", "rle", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "rle", "in", "masks", "\n", "]", "\n", "\n", "def", "get_bounds", "(", "flat_mask", ")", ":", "\n", "        ", "inds", "=", "np", ".", "where", "(", "flat_mask", ">", "0", ")", "[", "0", "]", "\n", "return", "inds", ".", "min", "(", ")", ",", "inds", ".", "max", "(", ")", "\n", "\n", "", "boxes", "=", "np", ".", "zeros", "(", "(", "len", "(", "decoded_masks", ")", ",", "4", ")", ")", "\n", "keep", "=", "[", "True", "]", "*", "len", "(", "decoded_masks", ")", "\n", "mask_lists", "=", "[", "]", "\n", "for", "i", ",", "mask", "in", "enumerate", "(", "decoded_masks", ")", ":", "\n", "\n", "        ", "if", "mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "keep", "[", "i", "]", "=", "False", "\n", "continue", "\n", "\n", "\n", "# mask_list = binary_mask_to_polygon(mask, 0)", "\n", "", "_", ",", "mask_list", ",", "_", "=", "maskToList", "(", "mask", ")", "\n", "flat_mask", "=", "mask", ".", "sum", "(", "axis", "=", "0", ")", "\n", "x0", ",", "x1", "=", "get_bounds", "(", "flat_mask", ")", "\n", "flat_mask", "=", "mask", ".", "sum", "(", "axis", "=", "1", ")", "\n", "y0", ",", "y1", "=", "get_bounds", "(", "flat_mask", ")", "\n", "boxes", "[", "i", ",", ":", "]", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "mask_list", "=", "flattenlists", "(", "mask_list", ")", "\n", "mask_lists", ".", "append", "(", "mask_list", ")", "\n", "\n", "", "return", "boxes", ",", "mask_lists", ",", "np", ".", "where", "(", "keep", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.rle_maskes_to_boxes": [[199, 232], ["numpy.zeros", "enumerate", "numpy.array", "len", "miscellaneous.binary_mask_to_polygon", "pycocotools.mask.sum", "miscellaneous.rle_maskes_to_boxes2.get_bounds"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.binary_mask_to_polygon"], ["", "def", "rle_maskes_to_boxes", "(", "masks", ")", ":", "\n", "    ", "\"\"\"Computes the bounding box of each mask in a list of RLE encoded masks.\"\"\"", "\n", "\n", "\n", "decoded_masks", "=", "[", "\n", "np", ".", "array", "(", "maskUtils", ".", "decode", "(", "rle", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "rle", "in", "masks", "\n", "]", "\n", "# pdb.set_trace()", "\n", "def", "get_bounds", "(", "flat_mask", ")", ":", "\n", "        ", "inds", "=", "np", ".", "where", "(", "flat_mask", ">", "0", ")", "[", "0", "]", "\n", "return", "inds", ".", "min", "(", ")", ",", "inds", ".", "max", "(", ")", "\n", "\n", "", "boxes", "=", "np", ".", "zeros", "(", "(", "len", "(", "decoded_masks", ")", ",", "4", ")", ")", "\n", "keep", "=", "[", "True", "]", "*", "len", "(", "decoded_masks", ")", "\n", "mask_lists", "=", "[", "]", "\n", "for", "i", ",", "mask", "in", "enumerate", "(", "decoded_masks", ")", ":", "\n", "\n", "        ", "if", "mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "keep", "[", "i", "]", "=", "False", "\n", "continue", "\n", "\n", "\n", "", "mask_list", "=", "binary_mask_to_polygon", "(", "mask", ",", "0", ")", "\n", "# _,mask_list,_ = maskToList(mask)", "\n", "flat_mask", "=", "mask", ".", "sum", "(", "axis", "=", "0", ")", "\n", "x0", ",", "x1", "=", "get_bounds", "(", "flat_mask", ")", "\n", "flat_mask", "=", "mask", ".", "sum", "(", "axis", "=", "1", ")", "\n", "y0", ",", "y1", "=", "get_bounds", "(", "flat_mask", ")", "\n", "boxes", "[", "i", ",", ":", "]", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "# mask_list = flattenlists(mask_list)", "\n", "mask_lists", ".", "append", "(", "mask_list", ")", "\n", "\n", "", "return", "boxes", ",", "mask_lists", ",", "np", ".", "where", "(", "keep", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.sigmoid_rampup": [[233, 241], ["numpy.clip", "float", "numpy.exp"], "function", ["None"], ["", "def", "sigmoid_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Exponential rampup from https://arxiv.org/abs/1610.02242\"\"\"", "\n", "if", "rampup_length", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "current", "=", "np", ".", "clip", "(", "current", ",", "0.0", ",", "rampup_length", ")", "\n", "phase", "=", "1.0", "-", "current", "/", "rampup_length", "\n", "return", "float", "(", "np", ".", "exp", "(", "-", "5.0", "*", "phase", "*", "phase", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.sigmoid_rampdown": [[242, 248], ["float", "numpy.exp"], "function", ["None"], ["", "", "def", "sigmoid_rampdown", "(", "gap_time", ",", "rampdown_length", ")", ":", "\n", "    ", "if", "rampdown_length", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "phase", "=", "1.0", "-", "gap_time", "/", "rampdown_length", "\n", "return", "float", "(", "np", ".", "exp", "(", "-", "12", "*", "phase", "*", "phase", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.linear_rampup": [[250, 257], ["None"], "function", ["None"], ["", "", "def", "linear_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Linear rampup\"\"\"", "\n", "assert", "current", ">=", "0", "and", "rampup_length", ">=", "0", "\n", "if", "current", ">=", "rampup_length", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "return", "current", "/", "rampup_length", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.cosine_rampdown": [[259, 263], ["float", "numpy.cos"], "function", ["None"], ["", "", "def", "cosine_rampdown", "(", "current", ",", "rampdown_length", ")", ":", "\n", "    ", "\"\"\"Cosine rampdown from https://arxiv.org/abs/1608.03983\"\"\"", "\n", "assert", "0", "<=", "current", "<=", "rampdown_length", "\n", "return", "float", "(", ".5", "*", "(", "np", ".", "cos", "(", "np", ".", "pi", "*", "current", "/", "rampdown_length", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.rles_to_binary_mask": [[283, 343], ["numpy.array", "sum", "numpy.array", "numpy.zeros_like", "numpy.array", "sum", "numpy.array", "numpy.zeros_like", "pycocotools.mask.decode", "cv2.morphologyEx", "abs", "pycocotools.mask.decode", "cv2.morphologyEx", "abs", "np.zeros_like.copy", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode"], ["", "", "def", "rles_to_binary_mask", "(", "labels", ",", "contour", "=", "False", ",", "type", "=", "1", ")", ":", "\n", "    ", "'''\n\n    :param labels:\n    :param contour:\n    :param type: 1: cyto and nuclei in one mask, cyto-1, nuclei-2\n            type 2: cyto has overlap, cyto and nuclei in two mask\n    :return:\n    '''", "\n", "rles", "=", "labels", "[", "'nuclei'", "]", "\n", "decoded_masks", "=", "[", "\n", "np", ".", "array", "(", "maskUtils", ".", "decode", "(", "rle", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "rle", "in", "\n", "rles", "\n", "]", "\n", "if", "not", "contour", ":", "\n", "        ", "binary_masks1", "=", "sum", "(", "decoded_masks", ")", "\n", "\n", "", "else", ":", "\n", "        ", "kernel", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "[", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ",", "np", ".", "uint8", ")", "\n", "binary_masks1", "=", "np", ".", "zeros_like", "(", "decoded_masks", "[", "0", "]", ")", "\n", "for", "instance", "in", "decoded_masks", ":", "\n", "            ", "gradient", "=", "cv2", ".", "morphologyEx", "(", "instance", ",", "cv2", ".", "MORPH_GRADIENT", ",", "\n", "kernel", ",", "iterations", "=", "2", ")", "\n", "gradient", "=", "abs", "(", "gradient", ")", "\n", "binary_masks1", "=", "gradient", "+", "binary_masks1", "\n", "", "binary_masks1", "=", "1", "*", "(", "binary_masks1", ">", "0", ")", "\n", "\n", "", "rles", "=", "labels", "[", "'cyto'", "]", "\n", "decoded_masks", "=", "[", "\n", "np", ".", "array", "(", "maskUtils", ".", "decode", "(", "rle", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "rle", "in", "\n", "rles", "\n", "]", "\n", "if", "not", "contour", ":", "\n", "        ", "binary_masks2", "=", "sum", "(", "decoded_masks", ")", "\n", "", "else", ":", "\n", "        ", "kernel", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "[", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ",", "np", ".", "uint8", ")", "\n", "binary_masks2", "=", "np", ".", "zeros_like", "(", "decoded_masks", "[", "0", "]", ")", "\n", "for", "instance", "in", "decoded_masks", ":", "\n", "            ", "gradient", "=", "cv2", ".", "morphologyEx", "(", "instance", ",", "cv2", ".", "MORPH_GRADIENT", ",", "\n", "kernel", ",", "iterations", "=", "2", ")", "\n", "gradient", "=", "abs", "(", "gradient", ")", "\n", "binary_masks2", "=", "gradient", "+", "binary_masks2", "\n", "", "binary_masks2", "=", "1", "*", "(", "binary_masks2", ">", "0", ")", "\n", "", "if", "not", "contour", ":", "\n", "        ", "if", "type", "==", "1", ":", "\n", "            ", "binary_masks2", "[", "binary_masks2", ">", "1", "]", "=", "3", "# overlapping", "\n", "binary_masks", "=", "binary_masks2", ".", "copy", "(", ")", "\n", "binary_masks", "[", "binary_masks1", ">=", "1", "]", "=", "2", "\n", "binary_masks1", "=", "binary_masks", "\n", "# binary_masks1[binary_masks1>=1]=2", "\n", "# binary_masks1[binary_masks2>0]=1", "\n", "\n", "", "else", ":", "\n", "            ", "binary_masks1", "=", "np", ".", "stack", "(", "(", "binary_masks1", ",", "binary_masks2", ")", ",", "-", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "binary_masks1", "=", "binary_masks1", "+", "binary_masks2", "\n", "binary_masks1", "[", "binary_masks1", ">", "1", "]", "=", "1", "\n", "# binary_masks = ((binary_masks1 + binary_masks2)>0 )*1", "\n", "", "return", "binary_masks1", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run": [[40, 50], ["subprocess.Popen", "subprocess.Popen.communicate", "output.decode.decode", "err.decode.decode", "output.decode.strip", "err.decode.strip"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode"], ["def", "run", "(", "command", ")", ":", "\n", "    ", "\"\"\"Returns (return-code, stdout, stderr)\"\"\"", "\n", "p", "=", "subprocess", ".", "Popen", "(", "command", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "\n", "stderr", "=", "subprocess", ".", "PIPE", ",", "shell", "=", "True", ")", "\n", "output", ",", "err", "=", "p", ".", "communicate", "(", ")", "\n", "rc", "=", "p", ".", "returncode", "\n", "if", "PY3", ":", "\n", "        ", "output", "=", "output", ".", "decode", "(", "\"utf-8\"", ")", "\n", "err", "=", "err", ".", "decode", "(", "\"utf-8\"", ")", "\n", "", "return", "rc", ",", "output", ".", "strip", "(", ")", ",", "err", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_read_all": [[52, 58], ["run_lambda"], "function", ["None"], ["", "def", "run_and_read_all", "(", "run_lambda", ",", "command", ")", ":", "\n", "    ", "\"\"\"Runs command using run_lambda; reads and returns entire output if rc is 0\"\"\"", "\n", "rc", ",", "out", ",", "_", "=", "run_lambda", "(", "command", ")", "\n", "if", "rc", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_parse_first_match": [[60, 69], ["run_lambda", "re.search", "re.search.group"], "function", ["None"], ["", "def", "run_and_parse_first_match", "(", "run_lambda", ",", "command", ",", "regex", ")", ":", "\n", "    ", "\"\"\"Runs command using run_lambda, returns the first regex match if it exists\"\"\"", "\n", "rc", ",", "out", ",", "_", "=", "run_lambda", "(", "command", ")", "\n", "if", "rc", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "match", "=", "re", ".", "search", "(", "regex", ",", "out", ")", "\n", "if", "match", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "return", "match", ".", "group", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_conda_packages": [[71, 83], ["os.environ.get", "collect_env_base.run_and_read_all", "re.compile", "re.sub", "collect_env_base.get_platform"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_read_all", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_platform"], ["", "def", "get_conda_packages", "(", "run_lambda", ")", ":", "\n", "    ", "if", "get_platform", "(", ")", "==", "'win32'", ":", "\n", "        ", "grep_cmd", "=", "r'findstr /R \"torch soumith mkl magma\"'", "\n", "", "else", ":", "\n", "        ", "grep_cmd", "=", "r'grep \"torch\\|soumith\\|mkl\\|magma\"'", "\n", "", "conda", "=", "os", ".", "environ", ".", "get", "(", "'CONDA_EXE'", ",", "'conda'", ")", "\n", "out", "=", "run_and_read_all", "(", "run_lambda", ",", "conda", "+", "' list | '", "+", "grep_cmd", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "return", "out", "\n", "# Comment starting at beginning of line", "\n", "", "comment_regex", "=", "re", ".", "compile", "(", "r'^#.*\\n'", ")", "\n", "return", "re", ".", "sub", "(", "comment_regex", ",", "''", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_gcc_version": [[85, 87], ["collect_env_base.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_parse_first_match"], ["", "def", "get_gcc_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'gcc --version'", ",", "r'gcc (.*)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_cmake_version": [[89, 91], ["collect_env_base.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_parse_first_match"], ["", "def", "get_cmake_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'cmake --version'", ",", "r'cmake (.*)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_nvidia_driver_version": [[93, 100], ["collect_env_base.get_nvidia_smi", "collect_env_base.run_and_parse_first_match", "collect_env_base.get_platform", "collect_env_base.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_nvidia_smi", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_parse_first_match", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_platform", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_parse_first_match"], ["", "def", "get_nvidia_driver_version", "(", "run_lambda", ")", ":", "\n", "    ", "if", "get_platform", "(", ")", "==", "'darwin'", ":", "\n", "        ", "cmd", "=", "'kextstat | grep -i cuda'", "\n", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "cmd", ",", "\n", "r'com[.]nvidia[.]CUDA [(](.*?)[)]'", ")", "\n", "", "smi", "=", "get_nvidia_smi", "(", ")", "\n", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "smi", ",", "r'Driver Version: (.*?) '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_gpu_info": [[102, 114], ["collect_env_base.get_nvidia_smi", "re.compile", "run_lambda", "re.sub", "collect_env_base.get_platform", "torch.cuda.is_available", "torch.cuda.get_device_name"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_nvidia_smi", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_platform"], ["", "def", "get_gpu_info", "(", "run_lambda", ")", ":", "\n", "    ", "if", "get_platform", "(", ")", "==", "'darwin'", ":", "\n", "        ", "if", "TORCH_AVAILABLE", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "torch", ".", "cuda", ".", "get_device_name", "(", "None", ")", "\n", "", "return", "None", "\n", "", "smi", "=", "get_nvidia_smi", "(", ")", "\n", "uuid_regex", "=", "re", ".", "compile", "(", "r' \\(UUID: .+?\\)'", ")", "\n", "rc", ",", "out", ",", "_", "=", "run_lambda", "(", "smi", "+", "' -L'", ")", "\n", "if", "rc", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "# Anonymize GPUs by removing their UUID", "\n", "", "return", "re", ".", "sub", "(", "uuid_regex", ",", "''", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_running_cuda_version": [[116, 118], ["collect_env_base.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_parse_first_match"], ["", "def", "get_running_cuda_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'nvcc --version'", ",", "r'V(.*)$'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_cudnn_version": [[120, 152], ["run_lambda", "set", "out.split", "list", "collect_env_base.get_platform", "os.environ.get", "os.path.realpath", "os.path.isfile", "sorted", "len", "collect_env_base.get_platform", "len", "os.path.isfile", "os.path.realpath", "list.add"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_platform", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_platform"], ["", "def", "get_cudnn_version", "(", "run_lambda", ")", ":", "\n", "    ", "\"\"\"This will return a list of libcudnn.so; it's hard to tell which one is being used\"\"\"", "\n", "if", "get_platform", "(", ")", "==", "'win32'", ":", "\n", "        ", "cudnn_cmd", "=", "'where /R \"%CUDA_PATH%\\\\bin\" cudnn*.dll'", "\n", "", "elif", "get_platform", "(", ")", "==", "'darwin'", ":", "\n", "# CUDA libraries and drivers can be found in /usr/local/cuda/. See", "\n", "# https://docs.nvidia.com/cuda/cuda-installation-guide-mac-os-x/index.html#install", "\n", "# https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installmac", "\n", "# Use CUDNN_LIBRARY when cudnn library is installed elsewhere.", "\n", "        ", "cudnn_cmd", "=", "'ls /usr/local/cuda/lib/libcudnn*'", "\n", "", "else", ":", "\n", "        ", "cudnn_cmd", "=", "'ldconfig -p | grep libcudnn | rev | cut -d\" \" -f1 | rev'", "\n", "", "rc", ",", "out", ",", "_", "=", "run_lambda", "(", "cudnn_cmd", ")", "\n", "# find will return 1 if there are permission errors or if not found", "\n", "if", "len", "(", "out", ")", "==", "0", "or", "(", "rc", "!=", "1", "and", "rc", "!=", "0", ")", ":", "\n", "        ", "l", "=", "os", ".", "environ", ".", "get", "(", "'CUDNN_LIBRARY'", ")", "\n", "if", "l", "is", "not", "None", "and", "os", ".", "path", ".", "isfile", "(", "l", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "realpath", "(", "l", ")", "\n", "", "return", "None", "\n", "", "files", "=", "set", "(", ")", "\n", "for", "fn", "in", "out", ".", "split", "(", "'\\n'", ")", ":", "\n", "        ", "fn", "=", "os", ".", "path", ".", "realpath", "(", "fn", ")", "# eliminate symbolic links", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "\n", "            ", "files", ".", "add", "(", "fn", ")", "\n", "", "", "if", "not", "files", ":", "\n", "        ", "return", "None", "\n", "# Alphabetize the result because the order is non-deterministic otherwise", "\n", "", "files", "=", "list", "(", "sorted", "(", "files", ")", ")", "\n", "if", "len", "(", "files", ")", "==", "1", ":", "\n", "        ", "return", "files", "[", "0", "]", "\n", "", "result", "=", "'\\n'", ".", "join", "(", "files", ")", "\n", "return", "'Probably one of the following:\\n{}'", ".", "format", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_nvidia_smi": [[154, 160], ["collect_env_base.get_platform"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_platform"], ["", "def", "get_nvidia_smi", "(", ")", ":", "\n", "# Note: nvidia-smi is currently available only on Windows and Linux", "\n", "    ", "smi", "=", "'nvidia-smi'", "\n", "if", "get_platform", "(", ")", "==", "'win32'", ":", "\n", "        ", "smi", "=", "'\"C:\\\\Program Files\\\\NVIDIA Corporation\\\\NVSMI\\\\%s\"'", "%", "smi", "\n", "", "return", "smi", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_platform": [[162, 173], ["sys.platform.startswith", "sys.platform.startswith", "sys.platform.startswith", "sys.platform.startswith"], "function", ["None"], ["", "def", "get_platform", "(", ")", ":", "\n", "    ", "if", "sys", ".", "platform", ".", "startswith", "(", "'linux'", ")", ":", "\n", "        ", "return", "'linux'", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "'win32'", ")", ":", "\n", "        ", "return", "'win32'", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "'cygwin'", ")", ":", "\n", "        ", "return", "'cygwin'", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "'darwin'", ")", ":", "\n", "        ", "return", "'darwin'", "\n", "", "else", ":", "\n", "        ", "return", "sys", ".", "platform", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_mac_version": [[175, 177], ["collect_env_base.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_parse_first_match"], ["", "", "def", "get_mac_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'sw_vers -productVersion'", ",", "r'(.*)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_windows_version": [[179, 181], ["collect_env_base.run_and_read_all"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_read_all"], ["", "def", "get_windows_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_read_all", "(", "run_lambda", ",", "'wmic os get Caption | findstr /v Caption'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_lsb_version": [[183, 185], ["collect_env_base.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_parse_first_match"], ["", "def", "get_lsb_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'lsb_release -a'", ",", "r'Description:\\t(.*)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.check_release_file": [[187, 190], ["collect_env_base.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.run_and_parse_first_match"], ["", "def", "check_release_file", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'cat /etc/*-release'", ",", "\n", "r'PRETTY_NAME=\"(.*)\"'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_os": [[192, 219], ["collect_env_base.get_platform", "collect_env_base.get_windows_version", "collect_env_base.get_mac_version", "collect_env_base.get_lsb_version", "collect_env_base.check_release_file"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_platform", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_windows_version", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_mac_version", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_lsb_version", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.check_release_file"], ["", "def", "get_os", "(", "run_lambda", ")", ":", "\n", "    ", "platform", "=", "get_platform", "(", ")", "\n", "\n", "if", "platform", "==", "'win32'", "or", "platform", "==", "'cygwin'", ":", "\n", "        ", "return", "get_windows_version", "(", "run_lambda", ")", "\n", "\n", "", "if", "platform", "==", "'darwin'", ":", "\n", "        ", "version", "=", "get_mac_version", "(", "run_lambda", ")", "\n", "if", "version", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "'Mac OSX {}'", ".", "format", "(", "version", ")", "\n", "\n", "", "if", "platform", "==", "'linux'", ":", "\n", "# Ubuntu/Debian based", "\n", "        ", "desc", "=", "get_lsb_version", "(", "run_lambda", ")", "\n", "if", "desc", "is", "not", "None", ":", "\n", "            ", "return", "desc", "\n", "\n", "# Try reading /etc/*-release", "\n", "", "desc", "=", "check_release_file", "(", "run_lambda", ")", "\n", "if", "desc", "is", "not", "None", ":", "\n", "            ", "return", "desc", "\n", "\n", "", "return", "platform", "\n", "\n", "# Unknown platform", "\n", "", "return", "platform", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_pip_packages": [[221, 249], ["collect_env_base.get_pip_packages.run_with_pip"], "function", ["None"], ["", "def", "get_pip_packages", "(", "run_lambda", ")", ":", "\n", "# People generally have `pip` as `pip` or `pip3`", "\n", "    ", "def", "run_with_pip", "(", "pip", ")", ":", "\n", "        ", "if", "get_platform", "(", ")", "==", "'win32'", ":", "\n", "            ", "grep_cmd", "=", "r'findstr /R \"numpy torch\"'", "\n", "", "else", ":", "\n", "            ", "grep_cmd", "=", "r'grep \"torch\\|numpy\"'", "\n", "", "return", "run_and_read_all", "(", "run_lambda", ",", "pip", "+", "' list --format=freeze | '", "+", "grep_cmd", ")", "\n", "\n", "", "if", "not", "PY3", ":", "\n", "        ", "return", "'pip'", ",", "run_with_pip", "(", "'pip'", ")", "\n", "\n", "# Try to figure out if the user is running pip or pip3.", "\n", "", "out2", "=", "run_with_pip", "(", "'pip'", ")", "\n", "out3", "=", "run_with_pip", "(", "'pip3'", ")", "\n", "\n", "num_pips", "=", "len", "(", "[", "x", "for", "x", "in", "[", "out2", ",", "out3", "]", "if", "x", "is", "not", "None", "]", ")", "\n", "if", "num_pips", "==", "0", ":", "\n", "        ", "return", "'pip'", ",", "out2", "\n", "\n", "", "if", "num_pips", "==", "1", ":", "\n", "        ", "if", "out2", "is", "not", "None", ":", "\n", "            ", "return", "'pip'", ",", "out2", "\n", "", "return", "'pip3'", ",", "out3", "\n", "\n", "# num_pips is 2. Return pip3 by default b/c that most likely", "\n", "# is the one associated with Python 3", "\n", "", "return", "'pip3'", ",", "out3", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_env_info": [[251, 279], ["collect_env_base.get_pip_packages", "SystemEnv", "torch.cuda.is_available", "collect_env_base.get_running_cuda_version", "collect_env_base.get_gpu_info", "collect_env_base.get_nvidia_driver_version", "collect_env_base.get_cudnn_version", "collect_env_base.get_conda_packages", "collect_env_base.get_os", "collect_env_base.get_gcc_version", "collect_env_base.get_cmake_version"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_pip_packages", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_running_cuda_version", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_gpu_info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_nvidia_driver_version", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_cudnn_version", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_conda_packages", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_os", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_gcc_version", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_cmake_version"], ["", "def", "get_env_info", "(", ")", ":", "\n", "    ", "run_lambda", "=", "run", "\n", "pip_version", ",", "pip_list_output", "=", "get_pip_packages", "(", "run_lambda", ")", "\n", "\n", "if", "TORCH_AVAILABLE", ":", "\n", "        ", "version_str", "=", "torch", ".", "__version__", "\n", "debug_mode_str", "=", "torch", ".", "version", ".", "debug", "\n", "cuda_available_str", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "cuda_version_str", "=", "torch", ".", "version", ".", "cuda", "\n", "", "else", ":", "\n", "        ", "version_str", "=", "debug_mode_str", "=", "cuda_available_str", "=", "cuda_version_str", "=", "'N/A'", "\n", "\n", "", "return", "SystemEnv", "(", "\n", "torch_version", "=", "version_str", ",", "\n", "is_debug_build", "=", "debug_mode_str", ",", "\n", "python_version", "=", "'{}.{}'", ".", "format", "(", "sys", ".", "version_info", "[", "0", "]", ",", "sys", ".", "version_info", "[", "1", "]", ")", ",", "\n", "is_cuda_available", "=", "cuda_available_str", ",", "\n", "cuda_compiled_version", "=", "cuda_version_str", ",", "\n", "cuda_runtime_version", "=", "get_running_cuda_version", "(", "run_lambda", ")", ",", "\n", "nvidia_gpu_models", "=", "get_gpu_info", "(", "run_lambda", ")", ",", "\n", "nvidia_driver_version", "=", "get_nvidia_driver_version", "(", "run_lambda", ")", ",", "\n", "cudnn_version", "=", "get_cudnn_version", "(", "run_lambda", ")", ",", "\n", "pip_version", "=", "pip_version", ",", "\n", "pip_packages", "=", "pip_list_output", ",", "\n", "conda_packages", "=", "get_conda_packages", "(", "run_lambda", ")", ",", "\n", "os", "=", "get_os", "(", "run_lambda", ")", ",", "\n", "gcc_version", "=", "get_gcc_version", "(", "run_lambda", ")", ",", "\n", "cmake_version", "=", "get_cmake_version", "(", "run_lambda", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.pretty_str": [[303, 375], ["envinfo._asdict", "collect_env_base.pretty_str.maybe_start_on_next_line"], "function", ["None"], ["def", "pretty_str", "(", "envinfo", ")", ":", "\n", "    ", "def", "replace_nones", "(", "dct", ",", "replacement", "=", "'Could not collect'", ")", ":", "\n", "        ", "for", "key", "in", "dct", ".", "keys", "(", ")", ":", "\n", "            ", "if", "dct", "[", "key", "]", "is", "not", "None", ":", "\n", "                ", "continue", "\n", "", "dct", "[", "key", "]", "=", "replacement", "\n", "", "return", "dct", "\n", "\n", "", "def", "replace_bools", "(", "dct", ",", "true", "=", "'Yes'", ",", "false", "=", "'No'", ")", ":", "\n", "        ", "for", "key", "in", "dct", ".", "keys", "(", ")", ":", "\n", "            ", "if", "dct", "[", "key", "]", "is", "True", ":", "\n", "                ", "dct", "[", "key", "]", "=", "true", "\n", "", "elif", "dct", "[", "key", "]", "is", "False", ":", "\n", "                ", "dct", "[", "key", "]", "=", "false", "\n", "", "", "return", "dct", "\n", "\n", "", "def", "prepend", "(", "text", ",", "tag", "=", "'[prepend]'", ")", ":", "\n", "        ", "lines", "=", "text", ".", "split", "(", "'\\n'", ")", "\n", "updated_lines", "=", "[", "tag", "+", "line", "for", "line", "in", "lines", "]", "\n", "return", "'\\n'", ".", "join", "(", "updated_lines", ")", "\n", "\n", "", "def", "replace_if_empty", "(", "text", ",", "replacement", "=", "'No relevant packages'", ")", ":", "\n", "        ", "if", "text", "is", "not", "None", "and", "len", "(", "text", ")", "==", "0", ":", "\n", "            ", "return", "replacement", "\n", "", "return", "text", "\n", "\n", "", "def", "maybe_start_on_next_line", "(", "string", ")", ":", "\n", "# If `string` is multiline, prepend a \\n to it.", "\n", "        ", "if", "string", "is", "not", "None", "and", "len", "(", "string", ".", "split", "(", "'\\n'", ")", ")", ">", "1", ":", "\n", "            ", "return", "'\\n{}\\n'", ".", "format", "(", "string", ")", "\n", "", "return", "string", "\n", "\n", "", "mutable_dict", "=", "envinfo", ".", "_asdict", "(", ")", "\n", "\n", "# If nvidia_gpu_models is multiline, start on the next line", "\n", "mutable_dict", "[", "'nvidia_gpu_models'", "]", "=", "maybe_start_on_next_line", "(", "envinfo", ".", "nvidia_gpu_models", ")", "\n", "\n", "# If the machine doesn't have CUDA, report some fields as 'No CUDA'", "\n", "dynamic_cuda_fields", "=", "[", "\n", "'cuda_runtime_version'", ",", "\n", "'nvidia_gpu_models'", ",", "\n", "'nvidia_driver_version'", ",", "\n", "]", "\n", "all_cuda_fields", "=", "dynamic_cuda_fields", "+", "[", "'cudnn_version'", "]", "\n", "all_dynamic_cuda_fields_missing", "=", "all", "(", "\n", "mutable_dict", "[", "field", "]", "is", "None", "for", "field", "in", "dynamic_cuda_fields", ")", "\n", "if", "TORCH_AVAILABLE", "and", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "all_dynamic_cuda_fields_missing", ":", "\n", "        ", "for", "field", "in", "all_cuda_fields", ":", "\n", "            ", "mutable_dict", "[", "field", "]", "=", "'No CUDA'", "\n", "", "if", "envinfo", ".", "cuda_compiled_version", "is", "None", ":", "\n", "            ", "mutable_dict", "[", "'cuda_compiled_version'", "]", "=", "'None'", "\n", "\n", "# Replace True with Yes, False with No", "\n", "", "", "mutable_dict", "=", "replace_bools", "(", "mutable_dict", ")", "\n", "\n", "# Replace all None objects with 'Could not collect'", "\n", "mutable_dict", "=", "replace_nones", "(", "mutable_dict", ")", "\n", "\n", "# If either of these are '', replace with 'No relevant packages'", "\n", "mutable_dict", "[", "'pip_packages'", "]", "=", "replace_if_empty", "(", "mutable_dict", "[", "'pip_packages'", "]", ")", "\n", "mutable_dict", "[", "'conda_packages'", "]", "=", "replace_if_empty", "(", "mutable_dict", "[", "'conda_packages'", "]", ")", "\n", "\n", "# Tag conda and pip packages with a prefix", "\n", "# If they were previously None, they'll show up as ie '[conda] Could not collect'", "\n", "if", "mutable_dict", "[", "'pip_packages'", "]", ":", "\n", "        ", "mutable_dict", "[", "'pip_packages'", "]", "=", "prepend", "(", "mutable_dict", "[", "'pip_packages'", "]", ",", "\n", "'[{}] '", ".", "format", "(", "envinfo", ".", "pip_version", ")", ")", "\n", "", "if", "mutable_dict", "[", "'conda_packages'", "]", ":", "\n", "        ", "mutable_dict", "[", "'conda_packages'", "]", "=", "prepend", "(", "mutable_dict", "[", "'conda_packages'", "]", ",", "\n", "'[conda] '", ")", "\n", "", "return", "env_info_fmt", ".", "format", "(", "**", "mutable_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_pretty_env_info": [[377, 379], ["collect_env_base.pretty_str", "collect_env_base.get_env_info"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.pretty_str", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_env_info"], ["", "def", "get_pretty_env_info", "(", ")", ":", "\n", "    ", "return", "pretty_str", "(", "get_env_info", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.main": [[381, 385], ["print", "collect_env_base.get_pretty_env_info", "print"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_pretty_env_info"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "\"Collecting environment information...\"", ")", "\n", "output", "=", "get_pretty_env_info", "(", ")", "\n", "print", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_world_size": [[15, 19], ["torch.distributed.get_world_size", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank": [[21, 25], ["torch.distributed.get_rank", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.is_main_process": [[27, 31], ["torch.distributed.is_initialized", "torch.distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.synchronize": [[33, 57], ["torch.distributed.get_world_size", "torch.distributed.get_rank", "comm.synchronize._send_and_wait"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_world_size", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize between multiple processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "\n", "", "def", "_send_and_wait", "(", "r", ")", ":", "\n", "        ", "if", "rank", "==", "r", ":", "\n", "            ", "tensor", "=", "torch", ".", "tensor", "(", "0", ",", "device", "=", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "            ", "tensor", "=", "torch", ".", "tensor", "(", "1", ",", "device", "=", "\"cuda\"", ")", "\n", "", "torch", ".", "distributed", ".", "broadcast", "(", "tensor", ",", "r", ")", "\n", "while", "tensor", ".", "item", "(", ")", "==", "1", ":", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "", "", "_send_and_wait", "(", "0", ")", "\n", "# now sync on the main process", "\n", "_send_and_wait", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm._encode": [[59, 71], ["pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to.numel", "torch.ByteTensor"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "_encode", "(", "encoded_data", ",", "data", ")", ":", "\n", "# gets a byte representation for the data", "\n", "    ", "encoded_bytes", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "# convert this byte string into a byte tensor", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "encoded_bytes", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "# encoding: first byte is the size and then rest is the data", "\n", "s", "=", "tensor", ".", "numel", "(", ")", "\n", "assert", "s", "<=", "255", ",", "\"Can't encode data greater than 255 bytes\"", "\n", "# put the encoded data in encoded_data", "\n", "encoded_data", "[", "0", "]", "=", "s", "\n", "encoded_data", "[", "1", ":", "(", "s", "+", "1", ")", "]", "=", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm._decode": [[73, 77], ["encoded_data[].to", "pickle.loads", "bytearray", "encoded_data[].to.tolist"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "_decode", "(", "encoded_data", ")", ":", "\n", "    ", "size", "=", "encoded_data", "[", "0", "]", "\n", "encoded_tensor", "=", "encoded_data", "[", "1", ":", "(", "size", "+", "1", ")", "]", ".", "to", "(", "\"cpu\"", ")", "\n", "return", "pickle", ".", "loads", "(", "bytearray", "(", "encoded_tensor", ".", "tolist", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.scatter_gather": [[81, 148], ["comm.synchronize", "torch.distributed.get_rank", "torch.empty", "comm.synchronize", "torch.distributed.broadcast", "comm._decode", "os.path.join", "torch.save", "comm.synchronize", "torch.distributed.is_initialized", "tempfile.mkdtemp", "comm._encode", "file_template.format", "torch.distributed.get_world_size", "range", "os.rmdir", "os.path.join", "torch.load", "data_list.append", "os.remove", "file_template.format"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.synchronize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.synchronize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm._decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.synchronize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm._encode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_world_size", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.remove"], ["", "def", "scatter_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    This function gathers data from multiple processes, and returns them\n    in a list, as they were obtained from each process.\n\n    This function is useful for retrieving data from multiple processes,\n    when launching the code with torch.distributed.launch\n\n    Note: this function is slow and should not be used in tight loops, i.e.,\n    do not use it in the training loop.\n\n    Arguments:\n        data: the object to be gathered from multiple processes.\n            It must be serializable\n\n    Returns:\n        result (list): a list with as many elements as there are processes,\n            where each element i in the list corresponds to the data that was\n            gathered from the process of rank i.\n    \"\"\"", "\n", "# strategy: the main process creates a temporary directory, and communicates", "\n", "# the location of the temporary directory to all other processes.", "\n", "# each process will then serialize the data to the folder defined by", "\n", "# the main process, and then the main process reads all of the serialized", "\n", "# files and returns them in a list", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "[", "data", "]", "\n", "", "synchronize", "(", ")", "\n", "# get rank of the current process", "\n", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "\n", "# the data to communicate should be small", "\n", "data_to_communicate", "=", "torch", ".", "empty", "(", "256", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "if", "rank", "==", "0", ":", "\n", "# manually creates a temporary directory, that needs to be cleaned", "\n", "# afterwards", "\n", "        ", "tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "_encode", "(", "data_to_communicate", ",", "tmp_dir", ")", "\n", "\n", "", "synchronize", "(", ")", "\n", "# the main process (rank=0) communicates the data to all processes", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "data_to_communicate", ",", "0", ")", "\n", "\n", "# get the data that was communicated", "\n", "tmp_dir", "=", "_decode", "(", "data_to_communicate", ")", "\n", "\n", "# each process serializes to a different file", "\n", "file_template", "=", "\"file{}.pth\"", "\n", "tmp_file", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "file_template", ".", "format", "(", "rank", ")", ")", "\n", "torch", ".", "save", "(", "data", ",", "tmp_file", ")", "\n", "\n", "# synchronize before loading the data", "\n", "synchronize", "(", ")", "\n", "\n", "# only the master process returns the data", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "for", "r", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "file_template", ".", "format", "(", "r", ")", ")", "\n", "d", "=", "torch", ".", "load", "(", "file_path", ")", "\n", "data_list", ".", "append", "(", "d", ")", "\n", "# cleanup", "\n", "os", ".", "remove", "(", "file_path", ")", "\n", "# cleanup", "\n", "", "os", ".", "rmdir", "(", "tmp_dir", ")", "\n", "return", "data_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.logger.setup_logger": [[7, 29], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "test", "=", "False", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "logger", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "if", "not", "test", ":", "\n", "        ", "save_name", "=", "\"log.txt\"", "\n", "", "else", ":", "\n", "        ", "save_name", "=", "\"log_test.txt\"", "\n", "", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_name", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.registry.Registry.__init__": [[31, 33], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.registry.Registry.register": [[34, 46], ["registry._register_generic", "registry._register_generic"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.registry._register_generic", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.registry._register_generic"], ["", "def", "register", "(", "self", ",", "module_name", ",", "module", "=", "None", ")", ":", "\n", "# used as function call", "\n", "        ", "if", "module", "is", "not", "None", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "module", ")", "\n", "return", "\n", "\n", "# used as decorator", "\n", "", "def", "register_fn", "(", "fn", ")", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "fn", ")", "\n", "return", "fn", "\n", "\n", "", "return", "register_fn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.registry._register_generic": [[4, 7], ["None"], "function", ["None"], ["def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_zoo.cache_url": [[15, 57], ["torch.hub.urlparse", "os.path.basename", "os.path.join", "maskrcnn_benchmark.utils.comm.synchronize", "os.path.expanduser", "os.getenv", "os.path.exists", "os.makedirs", "torch.hub.urlparse.path.replace", "maskrcnn_benchmark.utils.comm.is_main_process", "sys.stderr.write", "torch.hub.HASH_REGEX.search", "torch.hub._download_url_to_file", "os.getenv", "os.path.join", "os.path.exists", "hash_prefix.group.group", "len"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.synchronize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.is_main_process"], ["def", "cache_url", "(", "url", ",", "model_dir", "=", "None", ",", "progress", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Loads the Torch serialized object at the given URL.\n    If the object is already present in `model_dir`, it's deserialized and\n    returned. The filename part of the URL should follow the naming convention\n    ``filename-<sha256>.ext`` where ``<sha256>`` is the first eight or more\n    digits of the SHA256 hash of the contents of the file. The hash is used to\n    ensure unique names and to verify the contents of the file.\n    The default value of `model_dir` is ``$TORCH_HOME/models`` where\n    ``$TORCH_HOME`` defaults to ``~/.torch``. The default directory can be\n    overridden with the ``$TORCH_MODEL_ZOO`` environment variable.\n    Args:\n        url (string): URL of the object to download\n        model_dir (string, optional): directory in which to save the object\n        progress (bool, optional): whether or not to display a progress bar to stderr\n    Example:\n        >>> cached_file = maskrcnn_benchmark.utils.model_zoo.cache_url('https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth')\n    \"\"\"", "\n", "if", "model_dir", "is", "None", ":", "\n", "        ", "torch_home", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "getenv", "(", "'TORCH_HOME'", ",", "'~/.torch'", ")", ")", "\n", "model_dir", "=", "os", ".", "getenv", "(", "'TORCH_MODEL_ZOO'", ",", "os", ".", "path", ".", "join", "(", "torch_home", ",", "'models'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "parts", "=", "urlparse", "(", "url", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "parts", ".", "path", ")", "\n", "if", "filename", "==", "\"model_final.pkl\"", ":", "\n", "# workaround as pre-trained Caffe2 models from Detectron have all the same filename", "\n", "# so make the full path the filename by replacing / with _", "\n", "        ", "filename", "=", "parts", ".", "path", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "", "cached_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", "and", "is_main_process", "(", ")", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "url", ",", "cached_file", ")", ")", "\n", "hash_prefix", "=", "HASH_REGEX", ".", "search", "(", "filename", ")", "\n", "if", "hash_prefix", "is", "not", "None", ":", "\n", "            ", "hash_prefix", "=", "hash_prefix", ".", "group", "(", "1", ")", "\n", "# workaround: Caffe2 models don't have a hash, but follow the R-50 convention,", "\n", "# which matches the hash PyTorch uses. So we skip the hash matching", "\n", "# if the hash_prefix is less than 6 characters", "\n", "if", "len", "(", "hash_prefix", ")", "<", "6", ":", "\n", "                ", "hash_prefix", "=", "None", "\n", "", "", "_download_url_to_file", "(", "url", ",", "cached_file", ",", "hash_prefix", ",", "progress", "=", "progress", ")", "\n", "", "synchronize", "(", ")", "\n", "return", "cached_file", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.metric_logger.SmoothedValue.__init__": [[13, 18], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.metric_logger.SmoothedValue.update": [[19, 24], ["metric_logger.SmoothedValue.deque.append", "metric_logger.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.metric_logger.SmoothedValue.median": [[25, 29], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.metric_logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.metric_logger.SmoothedValue.avg": [[30, 34], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.metric_logger.SmoothedValue.global_avg": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.metric_logger.MetricLogger.__init__": [[41, 44], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.metric_logger.MetricLogger.update": [[45, 51], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.metric_logger.MetricLogger.__getattr__": [[52, 59], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.metric_logger.MetricLogger.__str__": [[60, 67], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "median", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.c2_model_loading._rename_basic_resnet_weights": [[12, 51], ["k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace"], "function", ["None"], ["def", "_rename_basic_resnet_weights", "(", "layer_keys", ")", ":", "\n", "    ", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_\"", ",", "\".\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".w\"", ",", "\".weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".bn\"", ",", "\"_bn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".b\"", ",", "\".bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_bn.s\"", ",", "\"_bn.scale\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".biasranch\"", ",", "\".branch\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"bbox.pred\"", ",", "\"bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"cls.score\"", ",", "\"cls_score\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res.conv1_\"", ",", "\"conv1_\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# RPN / Faster RCNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".biasbox\"", ",", "\".bbox\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv.rpn\"", ",", "\"rpn.conv\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.bbox.pred\"", ",", "\"rpn.bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.cls.logits\"", ",", "\"rpn.cls_logits\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Affine-Channel -> BatchNorm enaming", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_bn.scale\"", ",", "\"_bn.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Make torchvision-compatible", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv1_bn.\"", ",", "\"bn1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res2.\"", ",", "\"layer1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res3.\"", ",", "\"layer2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res4.\"", ",", "\"layer3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res5.\"", ",", "\"layer4.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2a.\"", ",", "\".conv1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2a_bn.\"", ",", "\".bn1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2b.\"", ",", "\".conv2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2b_bn.\"", ",", "\".bn2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2c.\"", ",", "\".conv3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2c_bn.\"", ",", "\".bn3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch1.\"", ",", "\".downsample.0.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch1_bn.\"", ",", "\".downsample.1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "return", "layer_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.c2_model_loading._rename_fpn_weights": [[52, 70], ["enumerate", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace"], "function", ["None"], ["", "def", "_rename_fpn_weights", "(", "layer_keys", ",", "stage_names", ")", ":", "\n", "    ", "for", "mapped_idx", ",", "stage_name", "in", "enumerate", "(", "stage_names", ",", "1", ")", ":", "\n", "        ", "suffix", "=", "\"\"", "\n", "if", "mapped_idx", "<", "4", ":", "\n", "            ", "suffix", "=", "\".lateral\"", "\n", "", "layer_keys", "=", "[", "\n", "k", ".", "replace", "(", "\"fpn.inner.layer{}.sum{}\"", ".", "format", "(", "stage_name", ",", "suffix", ")", ",", "\"fpn_inner{}\"", ".", "format", "(", "mapped_idx", ")", ")", "for", "k", "in", "layer_keys", "\n", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"fpn.layer{}.sum\"", ".", "format", "(", "stage_name", ")", ",", "\"fpn_layer{}\"", ".", "format", "(", "mapped_idx", ")", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "\n", "", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.conv.fpn2\"", ",", "\"rpn.conv\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.bbox_pred.fpn2\"", ",", "\"rpn.bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "\n", "k", ".", "replace", "(", "\"rpn.cls_logits.fpn2\"", ",", "\"rpn.cls_logits\"", ")", "for", "k", "in", "layer_keys", "\n", "]", "\n", "\n", "return", "layer_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.c2_model_loading._rename_weights_for_resnet": [[72, 119], ["sorted", "sorted", "c2_model_loading._rename_basic_resnet_weights", "c2_model_loading._rename_fpn_weights", "logging.getLogger", "logging.getLogger.info", "max", "collections.OrderedDict", "weights.keys", "weights.keys", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "torch.from_numpy", "logging.getLogger.info", "zip", "len"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.c2_model_loading._rename_basic_resnet_weights", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.c2_model_loading._rename_fpn_weights", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info"], ["", "def", "_rename_weights_for_resnet", "(", "weights", ",", "stage_names", ")", ":", "\n", "    ", "original_keys", "=", "sorted", "(", "weights", ".", "keys", "(", ")", ")", "\n", "layer_keys", "=", "sorted", "(", "weights", ".", "keys", "(", ")", ")", "\n", "\n", "# for X-101, rename output to fc1000 to avoid conflicts afterwards", "\n", "layer_keys", "=", "[", "k", "if", "k", "!=", "\"pred_b\"", "else", "\"fc1000_b\"", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", "if", "k", "!=", "\"pred_w\"", "else", "\"fc1000_w\"", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# performs basic renaming: _ -> . , etc", "\n", "layer_keys", "=", "_rename_basic_resnet_weights", "(", "layer_keys", ")", "\n", "\n", "# FPN", "\n", "layer_keys", "=", "_rename_fpn_weights", "(", "layer_keys", ",", "stage_names", ")", "\n", "\n", "# Mask R-CNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"mask.fcn.logits\"", ",", "\"mask_fcn_logits\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".[mask].fcn\"", ",", "\"mask_fcn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv5.mask\"", ",", "\"conv5_mask\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Keypoint R-CNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"kps.score.lowres\"", ",", "\"kps_score_lowres\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"kps.score\"", ",", "\"kps_score\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv.fcn\"", ",", "\"conv_fcn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Rename for our RPN structure", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.\"", ",", "\"rpn.head.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "key_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "original_keys", ",", "layer_keys", ")", "}", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "\"Remapping C2 weights\"", ")", "\n", "max_c2_key_size", "=", "max", "(", "[", "len", "(", "k", ")", "for", "k", "in", "original_keys", "if", "\"_momentum\"", "not", "in", "k", "]", ")", "\n", "\n", "new_weights", "=", "OrderedDict", "(", ")", "\n", "for", "k", "in", "original_keys", ":", "\n", "        ", "v", "=", "weights", "[", "k", "]", "\n", "if", "\"_momentum\"", "in", "k", ":", "\n", "            ", "continue", "\n", "# if 'fc1000' in k:", "\n", "#     continue", "\n", "", "w", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "# if \"bn\" in k:", "\n", "#     w = w.view(1, -1, 1, 1)", "\n", "logger", ".", "info", "(", "\"C2 name: {: <{}} mapped name: {}\"", ".", "format", "(", "k", ",", "max_c2_key_size", ",", "key_map", "[", "k", "]", ")", ")", "\n", "new_weights", "[", "key_map", "[", "k", "]", "]", "=", "w", "\n", "\n", "", "return", "new_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.c2_model_loading._load_c2_pickled_weights": [[121, 132], ["open", "pickle.load", "pickle.load"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load"], ["", "def", "_load_c2_pickled_weights", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "if", "torch", ".", "_six", ".", "PY3", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"latin1\"", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "if", "\"blobs\"", "in", "data", ":", "\n", "        ", "weights", "=", "data", "[", "\"blobs\"", "]", "\n", "", "else", ":", "\n", "        ", "weights", "=", "data", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.c2_model_loading.load_resnet_c2_format": [[142, 152], ["C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "c2_model_loading._load_c2_pickled_weights", "conv_body.replace().replace", "c2_model_loading._rename_weights_for_resnet", "dict", "conv_body.replace"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.registry.Registry.register", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.registry.Registry.register", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.registry.Registry.register", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.c2_model_loading._load_c2_pickled_weights", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.c2_model_loading._rename_weights_for_resnet"], ["@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-C4\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-FPN\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-FPN\"", ")", "\n", "def", "load_resnet_c2_format", "(", "cfg", ",", "f", ")", ":", "\n", "    ", "state_dict", "=", "_load_c2_pickled_weights", "(", "f", ")", "\n", "conv_body", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "\n", "arch", "=", "conv_body", ".", "replace", "(", "\"-C4\"", ",", "\"\"", ")", ".", "replace", "(", "\"-FPN\"", ",", "\"\"", ")", "\n", "stages", "=", "_C2_STAGE_NAMES", "[", "arch", "]", "\n", "state_dict", "=", "_rename_weights_for_resnet", "(", "state_dict", ",", "stages", ")", "\n", "return", "dict", "(", "model", "=", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.c2_model_loading.load_c2_format": [[154, 156], ["None"], "function", ["None"], ["", "def", "load_c2_format", "(", "cfg", ",", "f", ")", ":", "\n", "    ", "return", "C2_FORMAT_LOADER", "[", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "]", "(", "cfg", ",", "f", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.visual.vis_bbox": [[18, 51], ["isinstance", "enumerate", "cv2.rectangle.copy", "range", "cv2.cvtColor", "imagelist.tensors[].numpy", "numpy.squeeze", "numpy.transpose", "cv2.rectangle.copy", "range", "cv2.cvtColor.append", "bbox.convert.convert", "bbox.convert.bbox[].numpy().astype", "preprocess.colors.get_colors", "cv2.rectangle", "bbox.convert.convert", "bbox.convert.bbox[].numpy().astype", "preprocess.colors.get_colors", "cv2.rectangle", "tuple", "tuple", "tuple", "tuple", "bbox.convert.bbox[].numpy", "preprocess.colors.get_colors.tuple", "bbox.convert.bbox[].numpy", "preprocess.colors.get_colors.tuple"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["def", "vis_bbox", "(", "bboxlist", ",", "imagelist", ",", "normalize", "=", "[", "102.9801", ",", "115.9465", ",", "122.7717", "]", ")", ":", "\n", "    ", "if", "isinstance", "(", "imagelist", ",", "ImageList", ")", ":", "\n", "        ", "images", "=", "[", "]", "\n", "for", "i", ",", "bbox", "in", "enumerate", "(", "bboxlist", ")", ":", "\n", "            ", "if", "bbox", ".", "mode", "!=", "'xyxy'", ":", "\n", "                ", "bbox", "=", "bbox", ".", "convert", "(", "'xyxy'", ")", "\n", "\n", "", "image", "=", "imagelist", ".", "tensors", "[", "i", "]", ".", "numpy", "(", ")", "\n", "image", "=", "np", ".", "squeeze", "(", "image", ")", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "image", "+=", "normalize", "\n", "\n", "image", "=", "image", ".", "copy", "(", ")", "\n", "for", "j", "in", "range", "(", "bbox", ".", "bbox", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "box_coordinate", "=", "bbox", ".", "bbox", "[", "j", "]", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "color", "=", "get_colors", "(", "j", ")", "\n", "image", "=", "cv2", ".", "rectangle", "(", "image", ",", "tuple", "(", "box_coordinate", "[", ":", "2", "]", ")", ",", "tuple", "(", "box_coordinate", "[", "2", ":", "]", ")", ",", "color", "=", "color", ".", "tuple", "(", ")", ",", "thickness", "=", "3", ")", "\n", "", "images", ".", "append", "(", "image", ")", "\n", "", "", "else", ":", "\n", "        ", "bbox", "=", "bboxlist", "\n", "image", "=", "imagelist", "\n", "\n", "if", "bbox", ".", "mode", "!=", "'xyxy'", ":", "\n", "            ", "bbox", "=", "bbox", ".", "convert", "(", "'xyxy'", ")", "\n", "", "image", "=", "image", ".", "copy", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "bbox", ".", "bbox", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "box_coordinate", "=", "bbox", ".", "bbox", "[", "j", "]", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "color", "=", "get_colors", "(", "j", ")", "\n", "image", "=", "cv2", ".", "rectangle", "(", "image", ",", "tuple", "(", "box_coordinate", "[", ":", "2", "]", ")", ",", "tuple", "(", "box_coordinate", "[", "2", ":", "]", ")", ",", "color", "=", "color", ".", "tuple", "(", ")", ",", "\n", "thickness", "=", "3", ")", "\n", "", "images", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.visual.vis_mask": [[52, 74], ["isinstance", "enumerate", "enumerate", "cv2.cvtColor", "numpy.asarray", "numpy.reshape().astype", "preprocess.colors.get_colors", "numpy.asarray", "cv2.polylines", "cv2.cvtColor", "numpy.asarray", "numpy.reshape().astype", "preprocess.colors.get_colors", "numpy.asarray", "cv2.polylines", "numpy.asarray", "preprocess.colors.get_colors.tuple", "numpy.asarray", "preprocess.colors.get_colors.tuple", "numpy.reshape", "numpy.reshape", "int", "int", "len", "len"], "function", ["None"], ["", "def", "vis_mask", "(", "masklist", ",", "image", ",", "normalize", "=", "[", "102.9801", ",", "115.9465", ",", "122.7717", "]", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "masklist", ",", "SegmentationMask", ")", ":", "\n", "        ", "for", "i", ",", "polygon", "in", "enumerate", "(", "SegmentationMask", ")", ":", "\n", "            ", "poly", "=", "polygon", "[", "0", "]", ".", "polygons", "\n", "mask", "=", "np", ".", "asarray", "(", "poly", "[", "0", "]", ")", "\n", "mask", "=", "np", ".", "reshape", "(", "mask", ",", "(", "int", "(", "len", "(", "mask", ")", "/", "2", ")", ",", "2", ")", ")", ".", "astype", "(", "\n", "np", ".", "int32", ")", "\n", "color", "=", "get_colors", "(", "i", ")", "\n", "image", "=", "np", ".", "asarray", "(", "image", ")", "\n", "cv2", ".", "polylines", "(", "np", ".", "asarray", "(", "image", ")", ",", "[", "mask", "]", ",", "1", ",", "color", ".", "tuple", "(", ")", ",", "3", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "j", ",", "mask", "in", "enumerate", "(", "masklist", ")", ":", "\n", "            ", "mask", "=", "np", ".", "asarray", "(", "mask", "[", "0", "]", ")", "\n", "mask", "=", "np", ".", "reshape", "(", "mask", ",", "(", "int", "(", "len", "(", "mask", ")", "/", "2", ")", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "color", "=", "get_colors", "(", "j", ")", "\n", "image", "=", "np", ".", "asarray", "(", "image", ")", "\n", "cv2", ".", "polylines", "(", "np", ".", "asarray", "(", "image", ")", ",", "[", "mask", "]", ",", "1", ",", "color", ".", "tuple", "(", ")", ",", "3", ")", "\n", "", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.visual.vis_predict": [[80, 121], ["map", "name.split", "os.path.join", "openslide.open_slide", "cv2.cvtColor.read_region().convert", "numpy.asarray", "numpy.zeros_like", "enumerate", "numpy.zeros_like", "cv2.cvtColor", "cv2.addWeighted", "cv2.addWeighted", "pycocotools.mask.decode", "preprocess.colors.get_colors", "map", "enumerate", "cv2.cvtColor.read_region", "pdb.set_trace", "preprocess.colors.get_colors", "pdb.set_trace", "int", "int"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode"], ["", "def", "vis_predict", "(", "dataset", ",", "gt", ",", "dt", ",", "name", ",", "show_gt", "=", "True", ")", ":", "\n", "# input: list of dicts", "\n", "    ", "def", "convert_to_np", "(", "x", ")", ":", "\n", "        ", "rle", "=", "x", "[", "'segmentation'", "]", "\n", "arr", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "arr", "\n", "", "dt", "=", "map", "(", "convert_to_np", ",", "dt", ")", "\n", "name", ",", "w", ",", "h", "=", "name", ".", "split", "(", "'~'", ")", "\n", "# img = dataset._imgpath%name", "\n", "img", "=", "os", ".", "path", ".", "join", "(", "dataset", ".", "root", ",", "name", "+", "'.png'", ")", "\n", "img", "=", "ops", ".", "open_slide", "(", "img", ")", "\n", "img", "=", "img", ".", "read_region", "(", "(", "int", "(", "w", ")", ",", "int", "(", "h", ")", ")", ",", "0", ",", "(", "dataset", ".", "maxWS", ",", "dataset", ".", "maxWS", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "canvas", "=", "np", ".", "zeros_like", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "\n", "for", "idx", ",", "d", "in", "enumerate", "(", "dt", ")", ":", "\n", "        ", "if", "d", ".", "shape", "!=", "(", "1000", ",", "1000", ")", ":", "\n", "            ", "import", "pdb", ";", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "", "r", ",", "g", ",", "b", "=", "get_colors", "(", "idx", ")", "\n", "canvas", "[", ":", ",", ":", ",", "0", "]", "=", "canvas", "[", ":", ",", ":", ",", "0", "]", "+", "b", "*", "d", "\n", "canvas", "[", ":", ",", ":", ",", "1", "]", "=", "canvas", "[", ":", ",", ":", ",", "1", "]", "+", "g", "*", "d", "\n", "canvas", "[", ":", ",", ":", ",", "2", "]", "=", "canvas", "[", ":", ",", ":", ",", "2", "]", "+", "r", "*", "d", "\n", "\n", "", "canvas2", "=", "np", ".", "zeros_like", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "show_gt", ":", "\n", "        ", "gt", "=", "map", "(", "convert_to_np", ",", "gt", ")", "\n", "\n", "for", "idx", ",", "ins", "in", "enumerate", "(", "gt", ")", ":", "\n", "            ", "if", "ins", ".", "shape", "!=", "(", "1000", ",", "1000", ")", ":", "\n", "                ", "import", "pdb", ";", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "", "r", ",", "g", ",", "b", "=", "get_colors", "(", "idx", ")", "\n", "canvas2", "[", ":", ",", ":", ",", "0", "]", "=", "canvas2", "[", ":", ",", ":", ",", "0", "]", "+", "b", "*", "ins", "\n", "canvas2", "[", ":", ",", ":", ",", "1", "]", "=", "canvas2", "[", ":", ",", ":", ",", "1", "]", "+", "g", "*", "ins", "\n", "canvas2", "[", ":", ",", ":", ",", "2", "]", "=", "canvas2", "[", ":", ",", ":", ",", "2", "]", "+", "r", "*", "ins", "\n", "", "", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "add_img", "=", "cv2", ".", "addWeighted", "(", "img", ",", "0.5", ",", "canvas", ",", "0.5", ",", "0", ")", "\n", "add_img2", "=", "cv2", ".", "addWeighted", "(", "img", ",", "0.5", ",", "canvas2", ",", "0.5", ",", "0", ")", "\n", "return", "add_img", ",", "add_img2", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.visual.display_instance": [[142, 233], ["list", "image_name.split", "ops.open_slide.read_region().convert", "numpy.asarray", "cv2.cvtColor", "cv2.cvtColor.copy", "enumerate", "pycocotools.mask.decode", "map", "os.path.join", "openslide.open_slide", "enumerate", "preprocess.colors.get_colors", "maskrcnn_benchmark.utils.miscellaneous.maskToPolygons", "cv2.polylines", "pdb.set_trace", "list", "enumerate", "os.path.join", "openslide.open_slide", "ops.open_slide.read_region", "preprocess.colors.get_colors", "cv2.rectangle", "random.randint", "cv2.putText", "map", "enumerate", "preprocess.colors.get_colors", "maskrcnn_benchmark.utils.miscellaneous.maskToPolygons", "cv2.polylines", "int", "round", "preprocess.colors.get_colors", "cv2.rectangle", "random.randint", "cv2.putText", "int", "int", "round", "round", "round", "round", "round", "int", "round", "round", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.maskToPolygons", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.maskToPolygons"], ["", "def", "display_instance", "(", "dataset", ",", "image_name", ",", "gt", ",", "dt", ",", "show_masks", "=", "False", ",", "show_bbox", "=", "True", ",", "show_gt", "=", "True", ",", "alpha", "=", "0.5", ",", "show_caption", "=", "True", ")", ":", "\n", "    ", "'''\n\n    :param image: h,w,c\n    :param dt, gt : dict\n    :param title:  (optional) Figure title\n    :param figsize:(optional) the size of the image\n    :param color: (optional) An array or colors to use with each object\n    :param captions:(optional) A list of strings to use as captions for each object\n    :return:\n    '''", "\n", "# input: list of dicts", "\n", "def", "convert_seg_to_np", "(", "x", ")", ":", "\n", "        ", "rle", "=", "x", "[", "'segmentation'", "]", "\n", "arr", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "arr", "\n", "\n", "", "seg_dt", "=", "list", "(", "map", "(", "convert_seg_to_np", ",", "dt", ")", ")", "\n", "\n", "name", ",", "w", ",", "h", "=", "image_name", ".", "split", "(", "'~'", ")", "\n", "# img = dataset._imgpath%name", "\n", "try", ":", "\n", "        ", "img", "=", "os", ".", "path", ".", "join", "(", "dataset", ".", "root", ",", "name", "+", "'.png'", ")", "\n", "img", "=", "ops", ".", "open_slide", "(", "img", ")", "\n", "", "except", ":", "\n", "        ", "img", "=", "os", ".", "path", ".", "join", "(", "dataset", ".", "root", ",", "'image'", ",", "name", "+", "'.png'", ")", "\n", "img", "=", "ops", ".", "open_slide", "(", "img", ")", "\n", "# pdb.set_trace()", "\n", "# img = img.read_region(0, 0, 0, (3152, 2760)).convert(\"RGB\")", "\n", "", "img", "=", "img", ".", "read_region", "(", "(", "int", "(", "w", ")", ",", "int", "(", "h", ")", ")", ",", "0", ",", "(", "dataset", ".", "maxWS", ",", "dataset", ".", "maxWS", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img1", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "img2", "=", "img1", ".", "copy", "(", ")", "\n", "# canvas = np.zeros_like(img, dtype =  np.uint8)", "\n", "# 1. draw masks", "\n", "# pdb.set_trace()", "\n", "if", "show_masks", ":", "\n", "        ", "for", "idx", ",", "d", "in", "enumerate", "(", "seg_dt", ")", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "get_colors", "(", "idx", ")", "\n", "# visualize masks", "\n", "# convert list to numpy", "\n", "img1", "[", ":", ",", ":", ",", "0", "]", "=", "img1", "[", ":", ",", ":", ",", "0", "]", "*", "(", "d", "==", "0", ")", "+", "(", "d", ">", "0", ")", "*", "(", "(", "b", "*", "d", "*", "alpha", ")", "+", "img1", "[", ":", ",", ":", ",", "0", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "img1", "[", ":", ",", ":", ",", "1", "]", "=", "img1", "[", ":", ",", ":", ",", "1", "]", "*", "(", "d", "==", "0", ")", "+", "(", "d", ">", "0", ")", "*", "(", "(", "g", "*", "d", "*", "alpha", ")", "+", "img1", "[", ":", ",", ":", ",", "1", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "img1", "[", ":", ",", ":", ",", "2", "]", "=", "img1", "[", ":", ",", ":", ",", "2", "]", "*", "(", "d", "==", "0", ")", "+", "(", "d", ">", "0", ")", "*", "(", "(", "r", "*", "d", "*", "alpha", ")", "+", "img1", "[", ":", ",", ":", ",", "2", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "# 2. show others", "\n", "# pdb.set_trace()", "\n", "", "", "for", "idx", ",", "d", "in", "enumerate", "(", "seg_dt", ")", ":", "\n", "        ", "r", ",", "g", ",", "b", "=", "get_colors", "(", "idx", ")", "\n", "# visualize masks", "\n", "contour_list", "=", "maskToPolygons", "(", "d", ")", "\n", "cv2", ".", "polylines", "(", "img1", ",", "contour_list", ",", "True", ",", "(", "b", ",", "g", ",", "r", ")", ",", "thickness", "=", "1", ")", "\n", "if", "show_bbox", ":", "\n", "            ", "bbox", "=", "dt", "[", "idx", "]", "[", "'bbox'", "]", "\n", "cv2", ".", "rectangle", "(", "img1", ",", "(", "round", "(", "bbox", "[", "0", "]", ")", ",", "round", "(", "bbox", "[", "1", "]", ")", ")", ",", "\n", "(", "round", "(", "bbox", "[", "2", "]", ")", ",", "round", "(", "bbox", "[", "3", "]", ")", ")", ",", "(", "b", ",", "g", ",", "r", ")", ",", "thickness", "=", "1", ")", "\n", "# add information", "\n", "", "class_id", "=", "dt", "[", "idx", "]", "[", "'category_id'", "]", "[", "0", "]", "\n", "score", "=", "dt", "[", "idx", "]", "[", "'score'", "]", "\n", "if", "show_caption", ":", "\n", "            ", "x", "=", "random", ".", "randint", "(", "int", "(", "bbox", "[", "1", "]", ")", ",", "round", "(", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", ")", ")", "\n", "caption", "=", "\"{} {:.3f}\"", ".", "format", "(", "class_id", ",", "score", ")", "\n", "cv2", ".", "putText", "(", "img1", ",", "caption", ",", "(", "round", "(", "bbox", "[", "0", "]", ")", ",", "x", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.5", ",", "(", "b", ",", "g", ",", "r", ")", ",", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "# canvas2 = np.zeros_like(img, dtype =  np.uint8)", "\n", "# img2 = None", "\n", "", "", "if", "show_gt", ":", "\n", "# 1. show masks", "\n", "        ", "pdb", ".", "set_trace", "(", ")", "\n", "seg_gt", "=", "list", "(", "map", "(", "convert_seg_to_np", ",", "gt", ")", ")", "\n", "if", "show_masks", ":", "\n", "            ", "for", "idx", ",", "ins", "in", "enumerate", "(", "seg_gt", ")", ":", "\n", "                ", "r", ",", "g", ",", "b", "=", "get_colors", "(", "idx", ")", "\n", "img2", "[", ":", ",", ":", ",", "0", "]", "=", "img2", "[", ":", ",", ":", ",", "0", "]", "*", "(", "ins", "==", "0", ")", "+", "(", "ins", ">", "0", ")", "*", "(", "(", "b", "*", "ins", "*", "alpha", ")", "+", "img2", "[", ":", ",", ":", ",", "0", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "img2", "[", ":", ",", ":", ",", "1", "]", "=", "img2", "[", ":", ",", ":", ",", "1", "]", "*", "(", "ins", "==", "0", ")", "+", "(", "ins", ">", "0", ")", "*", "(", "(", "g", "*", "ins", "*", "alpha", ")", "+", "img2", "[", ":", ",", ":", ",", "1", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "img2", "[", ":", ",", ":", ",", "2", "]", "=", "img2", "[", ":", ",", ":", ",", "2", "]", "*", "(", "ins", "==", "0", ")", "+", "(", "ins", ">", "0", ")", "*", "(", "(", "r", "*", "ins", "*", "alpha", ")", "+", "img2", "[", ":", ",", ":", ",", "2", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "# 2. show others", "\n", "", "", "for", "idx", ",", "ins", "in", "enumerate", "(", "seg_gt", ")", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "get_colors", "(", "idx", ")", "\n", "contour_list", "=", "maskToPolygons", "(", "ins", ")", "\n", "cv2", ".", "polylines", "(", "img2", ",", "contour_list", ",", "True", ",", "(", "b", ",", "g", ",", "r", ")", ",", "thickness", "=", "2", ")", "\n", "if", "show_bbox", ":", "\n", "                ", "bbox", "=", "gt", "[", "idx", "]", "[", "'bbox'", "]", "\n", "cv2", ".", "rectangle", "(", "img2", ",", "(", "round", "(", "bbox", "[", "0", "]", ")", ",", "round", "(", "bbox", "[", "1", "]", ")", ")", ",", "(", "round", "(", "bbox", "[", "2", "]", ")", ",", "round", "(", "bbox", "[", "3", "]", ")", ")", ",", "(", "b", ",", "g", ",", "r", ")", ",", "\n", "thickness", "=", "3", ")", "\n", "x", "=", "random", ".", "randint", "(", "int", "(", "bbox", "[", "1", "]", ")", ",", "round", "(", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", ")", ")", "\n", "class_id", "=", "gt", "[", "idx", "]", "[", "'category_id'", "]", "[", "0", "]", "\n", "caption", "=", "\"{}\"", ".", "format", "(", "class_id", ")", "\n", "cv2", ".", "putText", "(", "img2", ",", "caption", ",", "(", "round", "(", "bbox", "[", "0", "]", ")", ",", "x", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.5", ",", "(", "b", ",", "g", ",", "r", ")", ",", "2", ",", "\n", "cv2", ".", "LINE_AA", ")", "\n", "\n", "", "", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.visual.visualize_pseudo_label": [[234, 252], ["enumerate", "pycocotools.mask.frPyObjects", "pycocotools.mask.merge", "RLES.append", "pycocotools.mask.decode", "preprocess.colors.get_colors", "int", "p.numpy"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode"], ["", "def", "visualize_pseudo_label", "(", "mask", ",", "image", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "RLES", "=", "[", "]", "\n", "for", "segm", "in", "mask", ".", "polygons", ":", "\n", "        ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "\n", "[", "p", ".", "numpy", "(", ")", "for", "p", "in", "segm", ".", "polygons", "]", ",", "800", ",", "800", "\n", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "RLES", ".", "append", "(", "rle", ")", "\n", "", "for", "idx", ",", "cyto", "in", "enumerate", "(", "RLES", ")", ":", "\n", "           ", "cyto_mask", "=", "maskUtils", ".", "decode", "(", "cyto", ")", "\n", "r", ",", "g", ",", "b", "=", "get_colors", "(", "int", "(", "2", "*", "idx", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "0", "]", "=", "image", "[", ":", ",", ":", ",", "0", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "\n", "(", "b", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "0", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "1", "]", "=", "image", "[", ":", ",", ":", ",", "1", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "\n", "(", "g", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "1", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "2", "]", "=", "image", "[", ":", ",", ":", ",", "2", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "\n", "(", "r", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "2", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.visual.display_instance_gen_rle": [[253, 276], ["enumerate", "enumerate", "pycocotools.mask.decode", "preprocess.colors.get_colors", "pycocotools.mask.decode", "preprocess.colors.get_colors", "int", "int"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode"], ["", "def", "display_instance_gen_rle", "(", "image", ",", "cyto_list", ",", "nuclei_list", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "\n", "for", "idx", ",", "cyto", "in", "enumerate", "(", "cyto_list", ")", ":", "\n", "        ", "cyto_mask", "=", "maskUtils", ".", "decode", "(", "cyto", ")", "\n", "r", ",", "g", ",", "b", "=", "get_colors", "(", "int", "(", "2", "*", "idx", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "0", "]", "=", "image", "[", ":", ",", ":", ",", "0", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "\n", "(", "b", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "0", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "1", "]", "=", "image", "[", ":", ",", ":", ",", "1", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "\n", "(", "g", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "1", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "2", "]", "=", "image", "[", ":", ",", ":", ",", "2", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "\n", "(", "r", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "2", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "", "for", "idx", ",", "cyto", "in", "enumerate", "(", "nuclei_list", ")", ":", "\n", "        ", "cyto_mask", "=", "maskUtils", ".", "decode", "(", "cyto", ")", "\n", "r", ",", "g", ",", "b", "=", "get_colors", "(", "int", "(", "2", "*", "idx", "+", "1", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "0", "]", "=", "image", "[", ":", ",", ":", ",", "0", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "\n", "(", "b", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "0", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "1", "]", "=", "image", "[", ":", ",", ":", ",", "1", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "\n", "(", "g", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "1", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "2", "]", "=", "image", "[", ":", ",", ":", ",", "2", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "\n", "(", "r", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "2", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "\n", "", "return", "image", "\n", "", "def", "display_instance_gen", "(", "image", ",", "cyto_list", ",", "nuclei_list", ",", "alpha", "=", "0.5", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.visual.display_instance_gen": [[276, 299], ["enumerate", "enumerate", "numpy.array", "pycocotools.mask.frPyObjects", "pycocotools.mask.decode", "preprocess.colors.get_colors", "numpy.array", "pycocotools.mask.frPyObjects", "pycocotools.mask.decode", "preprocess.colors.get_colors", "list", "int", "list", "int", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "maskUtils.decode.tolist", "maskUtils.decode.tolist"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode"], ["", "def", "display_instance_gen", "(", "image", ",", "cyto_list", ",", "nuclei_list", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "\n", "for", "idx", ",", "cyto", "in", "enumerate", "(", "cyto_list", ")", ":", "\n", "        ", "cyto_mask", "=", "np", ".", "array", "(", "cyto", ",", "np", ".", "int", ")", "\n", "cyto_mask", "=", "[", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "cyto_mask", ".", "tolist", "(", ")", ")", ")", "]", "\n", "cyto_mask", "=", "maskUtils", ".", "frPyObjects", "(", "cyto_mask", ",", "h", ",", "w", ")", "\n", "cyto_mask", "=", "maskUtils", ".", "decode", "(", "cyto_mask", "[", "0", "]", ")", "\n", "r", ",", "g", ",", "b", "=", "get_colors", "(", "int", "(", "2", "*", "idx", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "0", "]", "=", "image", "[", ":", ",", ":", ",", "0", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "(", "b", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "0", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "1", "]", "=", "image", "[", ":", ",", ":", ",", "1", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "(", "g", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "1", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "2", "]", "=", "image", "[", ":", ",", ":", ",", "2", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "(", "r", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "2", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "", "for", "idx", ",", "cyto", "in", "enumerate", "(", "nuclei_list", ")", ":", "\n", "        ", "cyto_mask", "=", "np", ".", "array", "(", "cyto", ",", "np", ".", "int", ")", "\n", "cyto_mask", "=", "[", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "cyto_mask", ".", "tolist", "(", ")", ")", ")", "]", "\n", "cyto_mask", "=", "maskUtils", ".", "frPyObjects", "(", "cyto_mask", ",", "h", ",", "w", ")", "\n", "cyto_mask", "=", "maskUtils", ".", "decode", "(", "cyto_mask", "[", "0", "]", ")", "\n", "r", ",", "g", ",", "b", "=", "get_colors", "(", "int", "(", "2", "*", "idx", "+", "1", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "0", "]", "=", "image", "[", ":", ",", ":", ",", "0", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "(", "b", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "0", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "1", "]", "=", "image", "[", ":", ",", ":", ",", "1", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "(", "g", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "1", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "2", "]", "=", "image", "[", ":", ",", ":", ",", "2", "]", "*", "(", "cyto_mask", "==", "0", ")", "+", "(", "cyto_mask", ">", "0", ")", "*", "(", "(", "r", "*", "alpha", ")", "+", "image", "[", ":", ",", ":", ",", "2", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "\n", "", "return", "image", "\n", "# for cyto in cyto_list:", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.visual.display_instance_dt": [[309, 366], ["list", "image_name.split", "os.path.join", "cv2.imread", "enumerate", "pycocotools.mask.decode", "map", "enumerate", "preprocess.colors.get_colors", "maskrcnn_benchmark.utils.miscellaneous.maskToPolygons", "cv2.polylines", "preprocess.colors.get_colors", "cv2.rectangle", "random.randint", "cv2.putText", "int", "round", "round", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.maskToPolygons"], ["", "def", "display_instance_dt", "(", "dataset", ",", "image_name", ",", "dt", ",", "show_masks", "=", "True", ",", "show_bbox", "=", "True", ",", "alpha", "=", "0.5", ",", "\n", "show_caption", "=", "True", ")", ":", "\n", "    ", "'''\n\n    :param image: h,w,c\n    :param dt, gt : dict\n    :param title:  (optional) Figure title\n    :param figsize:(optional) the size of the image\n    :param color: (optional) An array or colors to use with each object\n    :param captions:(optional) A list of strings to use as captions for each object\n    :return:\n    '''", "\n", "\n", "# input: list of dicts", "\n", "\n", "def", "convert_seg_to_np", "(", "x", ")", ":", "\n", "        ", "rle", "=", "x", "[", "'segmentation'", "]", "\n", "arr", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "arr", "\n", "\n", "", "seg_dt", "=", "list", "(", "map", "(", "convert_seg_to_np", ",", "dt", ")", ")", "\n", "\n", "name", ",", "w", ",", "h", "=", "image_name", ".", "split", "(", "'~'", ")", "\n", "# img = dataset._imgpath%name", "\n", "img", "=", "os", ".", "path", ".", "join", "(", "dataset", ".", "root", ",", "name", ")", "\n", "img1", "=", "cv2", ".", "imread", "(", "img", ")", "\n", "# canvas = np.zeros_like(img, dtype =  np.uint8)", "\n", "# 1. draw masks", "\n", "if", "show_masks", ":", "\n", "        ", "for", "idx", ",", "d", "in", "enumerate", "(", "seg_dt", ")", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "get_colors", "(", "idx", ")", "\n", "# visualize masks", "\n", "# convert list to numpy", "\n", "img1", "[", ":", ",", ":", ",", "0", "]", "=", "img1", "[", ":", ",", ":", ",", "0", "]", "*", "(", "d", "==", "0", ")", "+", "(", "d", ">", "0", ")", "*", "(", "(", "b", "*", "d", "*", "alpha", ")", "+", "img1", "[", ":", ",", ":", ",", "0", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "img1", "[", ":", ",", ":", ",", "1", "]", "=", "img1", "[", ":", ",", ":", ",", "1", "]", "*", "(", "d", "==", "0", ")", "+", "(", "d", ">", "0", ")", "*", "(", "(", "g", "*", "d", "*", "alpha", ")", "+", "img1", "[", ":", ",", ":", ",", "1", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "img1", "[", ":", ",", ":", ",", "2", "]", "=", "img1", "[", ":", ",", ":", ",", "2", "]", "*", "(", "d", "==", "0", ")", "+", "(", "d", ">", "0", ")", "*", "(", "(", "r", "*", "d", "*", "alpha", ")", "+", "img1", "[", ":", ",", ":", ",", "2", "]", "*", "(", "1", "-", "alpha", ")", ")", "\n", "# 2. show others", "\n", "", "", "for", "idx", ",", "d", "in", "enumerate", "(", "seg_dt", ")", ":", "\n", "        ", "r", ",", "g", ",", "b", "=", "get_colors", "(", "idx", ")", "\n", "# visualize masks", "\n", "contour_list", "=", "maskToPolygons", "(", "d", ")", "\n", "cv2", ".", "polylines", "(", "img1", ",", "contour_list", ",", "True", ",", "(", "b", ",", "g", ",", "r", ")", ",", "thickness", "=", "1", ")", "\n", "if", "show_bbox", ":", "\n", "            ", "bbox", "=", "dt", "[", "idx", "]", "[", "'bbox'", "]", "\n", "cv2", ".", "rectangle", "(", "img1", ",", "(", "round", "(", "bbox", "[", "0", "]", ")", ",", "round", "(", "bbox", "[", "1", "]", ")", ")", ",", "(", "round", "(", "bbox", "[", "2", "]", ")", ",", "round", "(", "bbox", "[", "3", "]", ")", ")", ",", "(", "b", ",", "g", ",", "r", ")", ",", "\n", "thickness", "=", "1", ")", "\n", "# add information", "\n", "", "class_id", "=", "dt", "[", "idx", "]", "[", "'category_id'", "]", "[", "0", "]", "\n", "score", "=", "dt", "[", "idx", "]", "[", "'score'", "]", "\n", "if", "show_caption", ":", "\n", "            ", "x", "=", "random", ".", "randint", "(", "int", "(", "bbox", "[", "1", "]", ")", ",", "round", "(", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", ")", ")", "\n", "caption", "=", "\"{} {:.3f}\"", ".", "format", "(", "class_id", ",", "score", ")", "\n", "cv2", ".", "putText", "(", "img1", ",", "caption", ",", "(", "round", "(", "bbox", "[", "0", "]", ")", ",", "x", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.5", ",", "(", "b", ",", "g", ",", "r", ")", ",", "2", ",", "cv2", ".", "LINE_AA", ")", "\n", "# canvas2 = np.zeros_like(img, dtype =  np.uint8)", "\n", "\n", "\n", "", "", "return", "img1", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env.get_pil_version": [[7, 9], ["None"], "function", ["None"], ["def", "get_pil_version", "(", ")", ":", "\n", "    ", "return", "\"\\n        Pillow ({})\"", ".", "format", "(", "PIL", ".", "__version__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env.collect_env_info": [[11, 15], ["maskrcnn_benchmark.utils.collect_env_base.get_pretty_env_info", "collect_env.get_pil_version"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env_base.get_pretty_env_info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.collect_env.get_pil_version"], ["", "def", "collect_env_info", "(", ")", ":", "\n", "    ", "env_str", "=", "get_pretty_env_info", "(", ")", "\n", "env_str", "+=", "get_pil_version", "(", ")", "\n", "return", "env_str", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.__init__": [[14, 33], ["logging.getLogger"], "methods", ["None"], ["class", "TestCheckpointer", "(", "unittest", ".", "TestCase", ")", ":", "\n", "    ", "def", "create_model", "(", "self", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "2", ",", "3", ")", ",", "nn", ".", "Linear", "(", "3", ",", "1", ")", ")", "\n", "\n", "", "def", "create_complex_model", "(", "self", ")", ":", "\n", "        ", "m", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "block1", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "block1", ".", "layer1", "=", "nn", ".", "Linear", "(", "2", ",", "3", ")", "\n", "m", ".", "layer2", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "m", ".", "res", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "res", ".", "layer2", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "\n", "state_dict", "=", "OrderedDict", "(", ")", "\n", "state_dict", "[", "\"layer1.weight\"", "]", "=", "torch", ".", "rand", "(", "3", ",", "2", ")", "\n", "state_dict", "[", "\"layer1.bias\"", "]", "=", "torch", ".", "rand", "(", "3", ")", "\n", "state_dict", "[", "\"layer2.weight\"", "]", "=", "torch", ".", "rand", "(", "2", ",", "3", ")", "\n", "state_dict", "[", "\"layer2.bias\"", "]", "=", "torch", ".", "rand", "(", "2", ")", "\n", "state_dict", "[", "\"res.layer2.weight\"", "]", "=", "torch", ".", "rand", "(", "2", ",", "3", ")", "\n", "state_dict", "[", "\"res.layer2.bias\"", "]", "=", "torch", ".", "rand", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save": [[34, 57], ["checkpoint.Checkpointer.model.state_dict", "data.update", "os.path.join", "checkpoint.Checkpointer.logger.info", "torch.save", "checkpoint.Checkpointer.tag_last_checkpoint", "checkpoint.Checkpointer.optimizer.state_dict", "checkpoint.Checkpointer.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.tag_last_checkpoint"], ["return", "m", ",", "state_dict", "\n", "\n", "", "def", "test_from_last_checkpoint_model", "(", "self", ")", ":", "\n", "# test that loading works even if they differ by a prefix", "\n", "        ", "for", "trained_model", ",", "fresh_model", "in", "[", "\n", "(", "self", ".", "create_model", "(", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "self", ".", "create_model", "(", ")", ",", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ")", ",", "\n", "(", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", ")", ",", "\n", "]", ":", "\n", "\n", "            ", "with", "TemporaryDirectory", "(", ")", "as", "f", ":", "\n", "                ", "checkpointer", "=", "Checkpointer", "(", "\n", "trained_model", ",", "save_dir", "=", "f", ",", "save_to_disk", "=", "True", "\n", ")", "\n", "checkpointer", ".", "save", "(", "\"checkpoint_file\"", ")", "\n", "\n", "# in the same folder", "\n", "fresh_checkpointer", "=", "Checkpointer", "(", "fresh_model", ",", "save_dir", "=", "f", ")", "\n", "self", ".", "assertTrue", "(", "fresh_checkpointer", ".", "has_checkpoint", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load_extra_data": [[58, 67], ["checkpoint.Checkpointer.logger.info"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info"], ["fresh_checkpointer", ".", "get_checkpoint_file", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "f", ",", "\"checkpoint_file.pth\"", ")", ",", "\n", ")", "\n", "_", "=", "fresh_checkpointer", ".", "load", "(", ")", "\n", "\n", "", "for", "trained_p", ",", "loaded_p", "in", "zip", "(", "\n", "trained_model", ".", "parameters", "(", ")", ",", "fresh_model", ".", "parameters", "(", ")", "\n", ")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "trained_p", ")", "==", "id", "(", "loaded_p", ")", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load": [[69, 118], ["checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer._load_file", "maskrcnn_benchmark.utils.model_serialization.load_state_dict", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer._load_file", "checkpoint.Checkpointer.Checkpointer._load_model", "checkpoint.Checkpointer.Checkpointer.pop", "checkpoint.Checkpointer.Checkpointer.has_checkpoint", "checkpoint.Checkpointer.Checkpointer.get_checkpoint_file", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.optimizer.load_state_dict", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.scheduler.load_state_dict", "checkpoint.Checkpointer.Checkpointer.pop", "checkpoint.Checkpointer.Checkpointer.pop"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.DetectronCheckpointer._load_file", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.DetectronCheckpointer._load_file", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer._load_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.get_checkpoint_file", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.load_state_dict"], ["self", ".", "assertTrue", "(", "trained_p", ".", "equal", "(", "loaded_p", ")", ")", "\n", "\n", "", "", "", "def", "test_from_name_file_model", "(", "self", ")", ":", "\n", "# test that loading works even if they differ by a prefix", "\n", "        ", "for", "trained_model", ",", "fresh_model", "in", "[", "\n", "(", "self", ".", "create_model", "(", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "self", ".", "create_model", "(", ")", ",", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ")", ",", "\n", "(", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", ")", ",", "\n", "]", ":", "\n", "            ", "with", "TemporaryDirectory", "(", ")", "as", "f", ":", "\n", "                ", "checkpointer", "=", "Checkpointer", "(", "\n", "trained_model", ",", "save_dir", "=", "f", ",", "save_to_disk", "=", "True", "\n", ")", "\n", "checkpointer", ".", "save", "(", "\"checkpoint_file\"", ")", "\n", "\n", "# on different folders", "\n", "with", "TemporaryDirectory", "(", ")", "as", "g", ":", "\n", "                    ", "fresh_checkpointer", "=", "Checkpointer", "(", "fresh_model", ",", "save_dir", "=", "g", ")", "\n", "self", ".", "assertFalse", "(", "fresh_checkpointer", ".", "has_checkpoint", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "fresh_checkpointer", ".", "get_checkpoint_file", "(", ")", ",", "\"\"", ")", "\n", "_", "=", "fresh_checkpointer", ".", "load", "(", "os", ".", "path", ".", "join", "(", "f", ",", "\"checkpoint_file.pth\"", ")", ")", "\n", "\n", "", "", "for", "trained_p", ",", "loaded_p", "in", "zip", "(", "\n", "trained_model", ".", "parameters", "(", ")", ",", "fresh_model", ".", "parameters", "(", ")", "\n", ")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "trained_p", ")", "==", "id", "(", "loaded_p", ")", ")", "\n", "# same content", "\n", "self", ".", "assertTrue", "(", "trained_p", ".", "equal", "(", "loaded_p", ")", ")", "\n", "\n", "", "", "", "def", "test_complex_model_loaded", "(", "self", ")", ":", "\n", "        ", "for", "add_data_parallel", "in", "[", "False", ",", "True", "]", ":", "\n", "            ", "model", ",", "state_dict", "=", "self", ".", "create_complex_model", "(", ")", "\n", "if", "add_data_parallel", ":", "\n", "                ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "load_state_dict", "(", "model", ",", "state_dict", ")", "\n", "for", "loaded", ",", "stored", "in", "zip", "(", "model", ".", "state_dict", "(", ")", ".", "values", "(", ")", ",", "state_dict", ".", "values", "(", ")", ")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "loaded", ")", "==", "id", "(", "stored", ")", ")", "\n", "# same content", "\n", "self", ".", "assertTrue", "(", "loaded", ".", "equal", "(", "stored", ")", ")", "\n", "\n", "\n", "", "", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "unittest", ".", "main", "(", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.has_checkpoint": [[119, 123], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.get_checkpoint_file": [[124, 138], ["os.path.join", "f.read.strip", "open", "f.read"], "methods", ["None"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.tag_last_checkpoint": [[139, 143], ["os.path.join", "open", "f.write"], "methods", ["None"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer._load_file": [[144, 147], ["torch.load", "torch.device"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer._load_model": [[148, 161], ["maskrcnn_benchmark.utils.model_serialization.load_state_dict", "checkpoint.pop", "checkpoint.Checkpointer.model.state_dict", "maskrcnn_benchmark.utils.model_serialization.strip_prefix_if_present", "maskrcnn_benchmark.utils.model_serialization.align_and_update_state_dicts", "checkpoint.Checkpointer.model.load_state_dict", "checkpoint.pop", "checkpoint.Checkpointer.items"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.strip_prefix_if_present", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.align_and_update_state_dicts", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.load_state_dict"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.DetectronCheckpointer.__init__": [[163, 177], ["checkpoint.Checkpointer.__init__", "cfg.clone"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.DetectronCheckpointer._load_file": [[178, 202], ["f.startswith", "f.startswith", "f.endswith", "checkpoint.Checkpointer._load_file", "maskrcnn_benchmark.utils.imports.import_file", "maskrcnn_benchmark.utils.imports.import_file.ModelCatalog.get", "checkpoint.DetectronCheckpointer.logger.info", "maskrcnn_benchmark.utils.model_zoo.cache_url", "checkpoint.DetectronCheckpointer.logger.info", "maskrcnn_benchmark.utils.c2_model_loading.load_c2_format", "dict", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.DetectronCheckpointer._load_file", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_zoo.cache_url", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.c2_model_loading.load_c2_format"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.DetectronCheckpointer.load_optimizer": [[203, 206], ["checkpoint.DetectronCheckpointer.logger.info", "checkpoint.DetectronCheckpointer.optimizer.load_state_dict", "torch.load().pop", "torch.load", "torch.device"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.env.setup_environment": [[7, 18], ["os.environ.get", "env.setup_custom_environment"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.env.setup_custom_environment"], ["def", "setup_environment", "(", ")", ":", "\n", "    ", "\"\"\"Perform environment setup work. The default setup is a no-op, but this\n    function allows the user to specify a Python source file that performs\n    custom setup work that may be necessary to their computing environment.\n    \"\"\"", "\n", "custom_module_path", "=", "os", ".", "environ", ".", "get", "(", "\"TORCH_DETECTRON_ENV_MODULE\"", ")", "\n", "if", "custom_module_path", ":", "\n", "        ", "setup_custom_environment", "(", "custom_module_path", ")", "\n", "", "else", ":", "\n", "# The default setup is a no-op", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.env.setup_custom_environment": [[20, 34], ["maskrcnn_benchmark.utils.imports.import_file", "maskrcnn_benchmark.utils.imports.import_file.setup_environment", "hasattr", "callable"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.env.setup_environment"], ["", "", "def", "setup_custom_environment", "(", "custom_module_path", ")", ":", "\n", "    ", "\"\"\"Load custom environment setup from a Python source file and run the setup\n    function.\n    \"\"\"", "\n", "module", "=", "import_file", "(", "\"maskrcnn_benchmark.utils.env.custom_module\"", ",", "custom_module_path", ")", "\n", "assert", "hasattr", "(", "module", ",", "\"setup_environment\"", ")", "and", "callable", "(", "\n", "module", ".", "setup_environment", "\n", ")", ",", "(", "\n", "\"Custom environment module defined in {} does not have the \"", "\n", "\"required callable attribute 'setup_environment'.\"", "\n", ")", ".", "format", "(", "\n", "custom_module_path", "\n", ")", "\n", "module", ".", "setup_environment", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.get_mat_output.get_nuclei_label": [[8, 41], ["cv2.resize", "cv2.connectedComponentsWithStats", "collections.defaultdict", "range", "nuclei[].append", "nuclei[].append", "numpy.zeros", "nuclei[].append", "nuclei[].append"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize"], ["def", "get_nuclei_label", "(", "nuclei_mask", ",", "ori_img", ",", "mode", "=", "'xyxy'", ",", "location", "=", "None", ")", ":", "\n", "    ", "assert", "mode", "in", "(", "'xyxy'", ",", "'xywh'", ")", "\n", "\n", "# resize the image to MPP=0.2529", "\n", "h_ori", ",", "w_ori", "=", "ori_img", ".", "shape", "[", ":", "2", "]", "\n", "nuclei_mask", "=", "cv2", ".", "resize", "(", "nuclei_mask", ",", "(", "w_ori", ",", "h_ori", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "# crop prediction inside location", "\n", "\n", "if", "location", "is", "not", "None", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "location", "\n", "# padding if right and down side out of original img", "\n", "if", "(", "x", "+", "w", ")", ">", "w_ori", "or", "(", "y", "+", "h", ")", ">", "h_ori", ":", "\n", "            ", "mask", "=", "np", ".", "zeros", "(", "(", "y", "+", "h", ",", "x", "+", "w", ")", ",", "dtype", "=", "nuclei_mask", ".", "dtype", ")", "\n", "mask", "[", ":", "h_ori", ",", ":", "w_ori", "]", "=", "nuclei_mask", "\n", "", "else", ":", "\n", "            ", "mask", "=", "nuclei_mask", "\n", "# crop into specific region:", "\n", "", "nuclei_mask", "=", "mask", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "", "retval", ",", "labels", ",", "stats", ",", "centroids", "=", "cv2", ".", "connectedComponentsWithStats", "(", "nuclei_mask", ",", "connectivity", "=", "8", ")", "\n", "nuclei", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "retval", ")", ":", "\n", "        ", "nuclei", "[", "'mask'", "]", ".", "append", "(", "labels", "==", "i", ")", "\n", "if", "mode", "==", "'xyxy'", ":", "\n", "            ", "nuclei", "[", "'bbox'", "]", ".", "append", "(", "\n", "[", "stats", "[", "i", "]", "[", "0", "]", ",", "stats", "[", "i", "]", "[", "1", "]", ",", "stats", "[", "i", "]", "[", "0", "]", "+", "stats", "[", "i", "]", "[", "2", "]", "-", "1", ",", "stats", "[", "i", "]", "[", "1", "]", "+", "stats", "[", "i", "]", "[", "3", "]", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "'xywh'", ":", "\n", "            ", "nuclei", "[", "'bbox'", "]", ".", "append", "(", "[", "stats", "[", "i", "]", "[", "0", "]", ",", "stats", "[", "i", "]", "[", "1", "]", ",", "stats", "[", "i", "]", "[", "2", "]", ",", "stats", "[", "i", "]", "[", "3", "]", "]", ")", "\n", "# the label of nuclei is 1", "\n", "", "nuclei", "[", "'label'", "]", ".", "append", "(", "1", ")", "\n", "\n", "", "return", "nuclei", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.get_mat_output.get_cytoplasm_label": [[43, 86], ["collections.defaultdict", "range", "len", "cv2.resize", "cv2.connectedComponentsWithStats", "cytoplasm[].append", "cytoplasm[].append", "print", "cytoplasm[].append", "numpy.zeros", "cytoplasm[].append"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize"], ["", "def", "get_cytoplasm_label", "(", "LSF5", ",", "ori_img", ",", "mode", "=", "'xyxy'", ",", "location", "=", "None", ")", ":", "\n", "    ", "assert", "mode", "in", "(", "'xyxy'", ",", "'xywh'", ")", "\n", "\n", "h_ori", ",", "w_ori", "=", "ori_img", ".", "shape", "[", ":", "2", "]", "\n", "cytoplasm", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "LSF5", ")", ")", ":", "\n", "        ", "cytoplasm_mask", "=", "LSF5", "[", "i", "]", "[", "0", "]", "\n", "\n", "# resize the image to MPP=0.2529", "\n", "cytoplasm_mask", "=", "cv2", ".", "resize", "(", "cytoplasm_mask", ",", "(", "w_ori", ",", "h_ori", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "# crop prediction inside location", "\n", "if", "location", "is", "not", "None", ":", "\n", "            ", "x", ",", "y", ",", "w", ",", "h", "=", "location", "\n", "# padding if right and down side out of original img", "\n", "if", "(", "x", "+", "w", ")", ">", "w_ori", "or", "(", "y", "+", "h", ")", ">", "h_ori", ":", "\n", "                ", "mask", "=", "np", ".", "zeros", "(", "(", "y", "+", "h", ",", "x", "+", "w", ")", ",", "dtype", "=", "cytoplasm_mask", ".", "dtype", ")", "\n", "mask", "[", ":", "h_ori", ",", ":", "w_ori", "]", "=", "cytoplasm_mask", "\n", "", "else", ":", "\n", "                ", "mask", "=", "cytoplasm_mask", "\n", "# crop into specific region:", "\n", "", "cytoplasm_mask", "=", "mask", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "\n", "", "retval", ",", "labels", ",", "stats", ",", "centroids", "=", "cv2", ".", "connectedComponentsWithStats", "(", "cytoplasm_mask", ",", "connectivity", "=", "8", ")", "\n", "if", "retval", ">=", "3", ":", "\n", "            ", "print", "(", "'split the cell because the box region'", ")", "\n", "# assert retval <= 2, retval", "\n", "\n", "", "if", "retval", "==", "1", ":", "\n", "# do not contain a mask", "\n", "            ", "continue", "\n", "\n", "", "cytoplasm", "[", "'mask'", "]", ".", "append", "(", "labels", "==", "1", ")", "\n", "if", "mode", "==", "'xyxy'", ":", "\n", "            ", "cytoplasm", "[", "'bbox'", "]", ".", "append", "(", "\n", "[", "stats", "[", "1", "]", "[", "0", "]", ",", "stats", "[", "1", "]", "[", "1", "]", ",", "stats", "[", "1", "]", "[", "0", "]", "+", "stats", "[", "1", "]", "[", "2", "]", "-", "1", ",", "stats", "[", "1", "]", "[", "1", "]", "+", "stats", "[", "1", "]", "[", "3", "]", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "'xywh'", ":", "\n", "            ", "cytoplasm", "[", "'bbox'", "]", ".", "append", "(", "[", "stats", "[", "1", "]", "[", "0", "]", ",", "stats", "[", "1", "]", "[", "1", "]", ",", "stats", "[", "1", "]", "[", "2", "]", ",", "stats", "[", "1", "]", "[", "3", "]", "]", ")", "\n", "# the label of cytoplasm is 2", "\n", "", "cytoplasm", "[", "'label'", "]", ".", "append", "(", "2", ")", "\n", "\n", "", "return", "cytoplasm", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.get_mat_output.process_folder": [[88, 106], ["os.path.join", "cv2.imread", "os.path.join", "scipy.loadmat", "os.path.join", "scipy.loadmat", "get_mat_output.get_nuclei_label", "get_mat_output.get_cytoplasm_label"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.get_mat_output.get_nuclei_label", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.get_mat_output.get_cytoplasm_label"], ["", "def", "process_folder", "(", "root", ",", "folder", ")", ":", "\n", "    ", "ori_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "folder", ",", "'{}.png'", ".", "format", "(", "folder", ")", ")", "\n", "ori_img", "=", "cv2", ".", "imread", "(", "ori_path", ")", "\n", "\n", "#     nuclei_path = os.path.join(root, folder, r\"Common\\NucleiMask.mat\")", "\n", "nuclei_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "folder", ",", "\"Common/NucleiMask.mat\"", ")", "\n", "nuclei_mask", "=", "sio", ".", "loadmat", "(", "nuclei_path", ")", "\n", "nuclei_mask", "=", "nuclei_mask", "[", "'NucleiMaskSet'", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "#     LSF5_path = os.path.join(root, folder, r\"LSF\\LSF5\\LSF_5_beta_5_kappa_13_chi_3_iterIn_20_iterOut_2.mat\")", "\n", "LSF5_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "folder", ",", "\"LSF/LSF5/LSF_5_beta_5_kappa_13_chi_3_iterIn_20_iterOut_2.mat\"", ")", "\n", "LSF5", "=", "sio", ".", "loadmat", "(", "LSF5_path", ")", "\n", "LSF5", "=", "LSF5", "[", "'LSF_5'", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "nuclei", "=", "get_nuclei_label", "(", "nuclei_mask", ",", "ori_img", ")", "\n", "cytoplasm", "=", "get_cytoplasm_label", "(", "LSF5", ",", "ori_img", ")", "\n", "\n", "return", "nuclei", ",", "cytoplasm", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.box_coder.BoxCoder.__init__": [[13, 21], ["math.log"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weights", ",", "bbox_xform_clip", "=", "math", ".", "log", "(", "1000.", "/", "16", ")", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            weights (4-element tuple)\n            bbox_xform_clip (float)\n        \"\"\"", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "bbox_xform_clip", "=", "bbox_xform_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.box_coder.BoxCoder.encode": [[22, 51], ["torch.stack", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "reference_boxes", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        Encode a set of proposals with respect to some\n        reference boxes\n\n        Arguments:\n            reference_boxes (Tensor): reference boxes\n            proposals (Tensor): boxes to be encoded\n        \"\"\"", "\n", "\n", "TO_REMOVE", "=", "1", "# TODO remove", "\n", "ex_widths", "=", "proposals", "[", ":", ",", "2", "]", "-", "proposals", "[", ":", ",", "0", "]", "+", "TO_REMOVE", "\n", "ex_heights", "=", "proposals", "[", ":", ",", "3", "]", "-", "proposals", "[", ":", ",", "1", "]", "+", "TO_REMOVE", "\n", "ex_ctr_x", "=", "proposals", "[", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "proposals", "[", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "reference_boxes", "[", ":", ",", "2", "]", "-", "reference_boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", "\n", "gt_heights", "=", "reference_boxes", "[", ":", ",", "3", "]", "-", "reference_boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", "\n", "gt_ctr_x", "=", "reference_boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "reference_boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "wx", ",", "wy", ",", "ww", ",", "wh", "=", "self", ".", "weights", "\n", "targets_dx", "=", "wx", "*", "(", "gt_ctr_x", "-", "ex_ctr_x", ")", "/", "ex_widths", "\n", "targets_dy", "=", "wy", "*", "(", "gt_ctr_y", "-", "ex_ctr_y", ")", "/", "ex_heights", "\n", "targets_dw", "=", "ww", "*", "torch", ".", "log", "(", "gt_widths", "/", "ex_widths", ")", "\n", "targets_dh", "=", "wh", "*", "torch", ".", "log", "(", "gt_heights", "/", "ex_heights", ")", "\n", "\n", "targets", "=", "torch", ".", "stack", "(", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ",", "dim", "=", "1", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.box_coder.BoxCoder.decode": [[52, 96], ["boxes.to.to.to", "torch.clamp", "torch.clamp", "torch.zeros_like", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "decode", "(", "self", ",", "rel_codes", ",", "boxes", ")", ":", "\n", "        ", "\"\"\"\n        From a set of original boxes and encoded relative box offsets,\n        get the decoded boxes.\n\n        Arguments:\n            rel_codes (Tensor): encoded boxes\n            boxes (Tensor): reference boxes.\n        \"\"\"", "\n", "\n", "boxes", "=", "boxes", ".", "to", "(", "rel_codes", ".", "dtype", ")", "\n", "\n", "TO_REMOVE", "=", "1", "# TODO remove", "\n", "widths", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", "\n", "heights", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", "\n", "ctr_x", "=", "boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "widths", "\n", "ctr_y", "=", "boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "heights", "\n", "\n", "wx", ",", "wy", ",", "ww", ",", "wh", "=", "self", ".", "weights", "\n", "dx", "=", "rel_codes", "[", ":", ",", "0", ":", ":", "4", "]", "/", "wx", "\n", "dy", "=", "rel_codes", "[", ":", ",", "1", ":", ":", "4", "]", "/", "wy", "\n", "dw", "=", "rel_codes", "[", ":", ",", "2", ":", ":", "4", "]", "/", "ww", "\n", "dh", "=", "rel_codes", "[", ":", ",", "3", ":", ":", "4", "]", "/", "wh", "\n", "\n", "# Prevent sending too large values into torch.exp()", "\n", "dw", "=", "torch", ".", "clamp", "(", "dw", ",", "max", "=", "self", ".", "bbox_xform_clip", ")", "\n", "dh", "=", "torch", ".", "clamp", "(", "dh", ",", "max", "=", "self", ".", "bbox_xform_clip", ")", "\n", "\n", "pred_ctr_x", "=", "dx", "*", "widths", "[", ":", ",", "None", "]", "+", "ctr_x", "[", ":", ",", "None", "]", "\n", "pred_ctr_y", "=", "dy", "*", "heights", "[", ":", ",", "None", "]", "+", "ctr_y", "[", ":", ",", "None", "]", "\n", "pred_w", "=", "torch", ".", "exp", "(", "dw", ")", "*", "widths", "[", ":", ",", "None", "]", "\n", "pred_h", "=", "torch", ".", "exp", "(", "dh", ")", "*", "heights", "[", ":", ",", "None", "]", "\n", "\n", "pred_boxes", "=", "torch", ".", "zeros_like", "(", "rel_codes", ")", "\n", "# x1", "\n", "pred_boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "pred_ctr_x", "-", "0.5", "*", "pred_w", "\n", "# y1", "\n", "pred_boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "pred_ctr_y", "-", "0.5", "*", "pred_h", "\n", "# x2 (note: \"- 1\" is correct; don't be fooled by the asymmetry)", "\n", "pred_boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "pred_ctr_x", "+", "0.5", "*", "pred_w", "-", "1", "\n", "# y2 (note: \"- 1\" is correct; don't be fooled by the asymmetry)", "\n", "pred_boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "pred_ctr_y", "+", "0.5", "*", "pred_h", "-", "1", "\n", "\n", "return", "pred_boxes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.python_nms.boxlist_nms": [[6, 33], ["boxlist.convert.convert", "boxlist.convert.get_field", "boxes.to.to", "score.to.to", "_box_nms", "keep.to.to", "boxlist.convert.convert"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["def", "boxlist_nms", "(", "boxlist", ",", "nms_thresh", ",", "max_proposals", "=", "-", "1", ",", "score_field", "=", "\"score\"", ")", ":", "\n", "    ", "\"\"\"\n    Performs non-maximum suppression on a boxlist, with scores specified\n    in a boxlist field via score_field.\n\n    Arguments:\n        boxlist(BoxList)\n        nms_thresh (float)\n        max_proposals (int): if > 0, then only the top max_proposals are kept\n            after non-maxium suppression\n        score_field (str)\n    \"\"\"", "\n", "if", "nms_thresh", "<=", "0", ":", "\n", "        ", "return", "boxlist", "\n", "", "mode", "=", "boxlist", ".", "mode", "\n", "boxlist", "=", "boxlist", ".", "convert", "(", "\"xyxy\"", ")", "\n", "boxes", "=", "boxlist", ".", "bbox", "\n", "score", "=", "boxlist", ".", "get_field", "(", "score_field", ")", "\n", "# this nms can only run on cuda:0", "\n", "boxes", "=", "boxes", ".", "to", "(", "'cuda:0'", ")", "\n", "score", "=", "score", ".", "to", "(", "'cuda:0'", ")", "\n", "keep", "=", "_box_nms", "(", "boxes", ",", "score", ",", "nms_thresh", ")", "\n", "keep", "=", "keep", ".", "to", "(", "boxlist", ".", "bbox", ".", "device", ")", "\n", "if", "max_proposals", ">", "0", ":", "\n", "        ", "keep", "=", "keep", "[", ":", "max_proposals", "]", "\n", "", "boxlist", "=", "boxlist", "[", "keep", "]", "\n", "return", "boxlist", ".", "convert", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.python_nms.cyto_nms": [[35, 95], ["boxlist.convert.convert", "boxlist.convert.get_field().cpu", "numpy.argsort", "boxlist.convert.get_field", "range", "range", "boxlist.convert.remove_field", "numpy.array", "torch.tensor", "keep.to.to", "boxlist.convert.convert", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "len", "len", "boxlist.convert.get_field", "np.argsort.tolist", "len", "keep.to.append", "len", "assigned_nuclei_list.append", "keep.to.append", "nuclei_id.remove"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.remove_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.remove"], ["", "def", "cyto_nms", "(", "boxlist", ",", "nms_thresh", ",", "score_field", "=", "\"score\"", ")", ":", "\n", "\n", "    ", "if", "nms_thresh", "<=", "0", ":", "\n", "        ", "return", "boxlist", "\n", "\n", "", "mode", "=", "boxlist", ".", "mode", "\n", "boxlist", "=", "boxlist", ".", "convert", "(", "\"xyxy\"", ")", "\n", "boxes", "=", "boxlist", ".", "bbox", "\n", "scores", "=", "boxlist", ".", "get_field", "(", "score_field", ")", ".", "cpu", "(", ")", "\n", "order", "=", "np", ".", "argsort", "(", "-", "scores", ")", "\n", "dets", "=", "boxes", "[", "order", "]", "\n", "nuclei_id_list", "=", "boxlist", ".", "get_field", "(", "\"nuclei_id_list\"", ")", "\n", "nuclei_id_list", "=", "[", "nuclei_id_list", "[", "i", "]", "for", "i", "in", "order", ".", "tolist", "(", ")", "]", "\n", "# pdb.set_trace()", "\n", "\"\"\"Pure Python NMS baseline.\"\"\"", "\n", "def", "_overlap", "(", "det_boxes", ",", "basement", ",", "others", ")", ":", "\n", "        ", "eps", "=", "1e-8", "\n", "x1_basement", ",", "y1_basement", ",", "x2_basement", ",", "y2_basement", "=", "det_boxes", "[", "basement", ",", "0", "]", ",", "det_boxes", "[", "basement", ",", "1", "]", ",", "det_boxes", "[", "basement", ",", "2", "]", ",", "det_boxes", "[", "basement", ",", "3", "]", "\n", "x1_others", ",", "y1_others", ",", "x2_others", ",", "y2_others", "=", "det_boxes", "[", "others", ",", "0", "]", ",", "det_boxes", "[", "others", ",", "1", "]", ",", "det_boxes", "[", "others", ",", "2", "]", ",", "det_boxes", "[", "others", ",", "3", "]", "\n", "areas_basement", "=", "(", "x2_basement", "-", "x1_basement", ")", "*", "(", "y2_basement", "-", "y1_basement", ")", "\n", "areas_others", "=", "(", "x2_others", "-", "x1_others", ")", "*", "(", "y2_others", "-", "y1_others", ")", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1_basement", ",", "x1_others", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1_basement", ",", "y1_others", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2_basement", ",", "x2_others", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2_basement", ",", "y2_others", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", ")", "\n", "inter", "=", "w", "*", "h", "\n", "ovr", "=", "inter", "/", "(", "areas_basement", "+", "areas_others", "-", "inter", "+", "eps", ")", "\n", "return", "ovr", "\n", "", "keep", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", ":", "\n", "        ", "if", "len", "(", "nuclei_id_list", "[", "i", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "keep", ".", "append", "(", "i", ")", "\n", "base", "=", "nuclei_id_list", "[", "keep", "[", "-", "1", "]", "]", "[", "0", "]", "\n", "break", "\n", "", "", "assigned_nuclei_list", "=", "[", "base", "]", "\n", "# pdb.set_trace()", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "dets", ")", ")", ":", "\n", "        ", "nuclei_id", "=", "nuclei_id_list", "[", "j", "]", "\n", "for", "nuclei", "in", "assigned_nuclei_list", ":", "\n", "            ", "while", "nuclei", "in", "nuclei_id", ":", "nuclei_id", ".", "remove", "(", "nuclei", ")", "\n", "", "if", "len", "(", "nuclei_id", ")", ">", "0", ":", "\n", "            ", "assigned_nuclei_list", ".", "append", "(", "nuclei_id", "[", "0", "]", ")", "\n", "keep", ".", "append", "(", "j", ")", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "# pdb.set_trace()", "\n", "", "", "boxlist", ".", "remove_field", "(", "'nuclei_id_list'", ")", "\n", "keep", "=", "np", ".", "array", "(", "keep", ")", "\n", "keep", "=", "torch", ".", "tensor", "(", "keep", ")", "\n", "keep", "=", "keep", ".", "to", "(", "boxlist", ".", "bbox", ".", "device", ")", "\n", "boxlist", "=", "boxlist", "[", "keep", "]", "\n", "return", "boxlist", ".", "convert", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.python_nms.set_cpu_nms": [[100, 155], ["boxlist.convert.convert", "boxlist.convert.get_field", "numpy.argsort", "boxlist.convert.get_field", "numpy.arange", "keep.to.to", "boxlist.convert.convert", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.ones", "len", "python_nms.cyto_nms._overlap"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["", "def", "set_cpu_nms", "(", "boxlist", ",", "nms_thresh", ",", "max_proposals", "=", "-", "1", ",", "score_field", "=", "\"score\"", ")", ":", "\n", "    ", "if", "nms_thresh", "<=", "0", ":", "\n", "        ", "return", "boxlist", "\n", "", "mode", "=", "boxlist", ".", "mode", "\n", "boxlist", "=", "boxlist", ".", "convert", "(", "\"xyxy\"", ")", "\n", "boxes", "=", "boxlist", ".", "bbox", "\n", "scores", "=", "boxlist", ".", "get_field", "(", "score_field", ")", "\n", "order", "=", "np", ".", "argsort", "(", "-", "scores", ")", "\n", "dets", "=", "boxes", "[", "order", "]", "\n", "numbers", "=", "boxlist", ".", "get_field", "(", "\"head_id\"", ")", "\n", "\n", "\"\"\"Pure Python NMS baseline.\"\"\"", "\n", "def", "_overlap", "(", "det_boxes", ",", "basement", ",", "others", ")", ":", "\n", "        ", "eps", "=", "1e-8", "\n", "x1_basement", ",", "y1_basement", ",", "x2_basement", ",", "y2_basement", "=", "det_boxes", "[", "basement", ",", "0", "]", ",", "det_boxes", "[", "basement", ",", "1", "]", ",", "det_boxes", "[", "basement", ",", "2", "]", ",", "det_boxes", "[", "basement", ",", "3", "]", "\n", "x1_others", ",", "y1_others", ",", "x2_others", ",", "y2_others", "=", "det_boxes", "[", "others", ",", "0", "]", ",", "det_boxes", "[", "others", ",", "1", "]", ",", "det_boxes", "[", "others", ",", "2", "]", ",", "det_boxes", "[", "others", ",", "3", "]", "\n", "areas_basement", "=", "(", "x2_basement", "-", "x1_basement", ")", "*", "(", "y2_basement", "-", "y1_basement", ")", "\n", "areas_others", "=", "(", "x2_others", "-", "x1_others", ")", "*", "(", "y2_others", "-", "y1_others", ")", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1_basement", ",", "x1_others", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1_basement", ",", "y1_others", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2_basement", ",", "x2_others", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2_basement", ",", "y2_others", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", ")", "\n", "inter", "=", "w", "*", "h", "\n", "ovr", "=", "inter", "/", "(", "areas_basement", "+", "areas_others", "-", "inter", "+", "eps", ")", "\n", "return", "ovr", "\n", "\n", "\n", "", "keep", "=", "np", ".", "ones", "(", "len", "(", "dets", ")", ")", "==", "1", "\n", "ruler", "=", "np", ".", "arange", "(", "len", "(", "dets", ")", ")", "\n", "while", "ruler", ".", "size", ">", "0", ":", "\n", "        ", "basement", "=", "ruler", "[", "0", "]", "\n", "ruler", "=", "ruler", "[", "1", ":", "]", "\n", "num", "=", "numbers", "[", "basement", "]", "\n", "# calculate the body overlap", "\n", "overlap", "=", "_overlap", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "basement", ",", "ruler", ")", "\n", "indices", "=", "np", ".", "where", "(", "overlap", ">", "nms_thresh", ")", "[", "0", "]", "\n", "loc", "=", "np", ".", "where", "(", "numbers", "[", "ruler", "]", "[", "indices", "]", "==", "num", ")", "[", "0", "]", "\n", "# the mask won't change in the step", "\n", "mask", "=", "keep", "[", "ruler", "[", "indices", "]", "[", "loc", "]", "]", "#.copy()", "\n", "keep", "[", "ruler", "[", "indices", "]", "]", "=", "False", "\n", "keep", "[", "ruler", "[", "indices", "]", "[", "loc", "]", "[", "mask", "]", "]", "=", "True", "\n", "ruler", "[", "~", "keep", "[", "ruler", "]", "]", "=", "-", "1", "\n", "ruler", "=", "ruler", "[", "ruler", ">", "0", "]", "\n", "", "keep", "=", "keep", "[", "np", ".", "argsort", "(", "order", ")", "]", "\n", "keep", "=", "keep", ".", "to", "(", "boxlist", ".", "bbox", ".", "device", ")", "\n", "if", "max_proposals", ">", "0", ":", "\n", "        ", "keep", "=", "keep", "[", ":", "max_proposals", "]", "\n", "", "boxlist", "=", "boxlist", "[", "keep", "]", "\n", "return", "boxlist", ".", "convert", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.python_nms.cpu_nms": [[159, 189], ["numpy.argsort", "numpy.array", "len", "keep.append", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "cpu_nms", "(", "dets", ",", "base_thr", ")", ":", "\n", "    ", "\"\"\"Pure Python NMS baseline.\"\"\"", "\n", "x1", "=", "dets", "[", ":", ",", "0", "]", "\n", "y1", "=", "dets", "[", ":", ",", "1", "]", "\n", "x2", "=", "dets", "[", ":", ",", "2", "]", "\n", "y2", "=", "dets", "[", ":", ",", "3", "]", "\n", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "\n", "areas", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "order", "=", "np", ".", "argsort", "(", "-", "scores", ")", "\n", "\n", "keep", "=", "[", "]", "\n", "eps", "=", "1e-8", "\n", "while", "len", "(", "order", ")", ">", "0", ":", "\n", "        ", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "i", ")", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", ")", "\n", "inter", "=", "w", "*", "h", "\n", "ovr", "=", "inter", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", "1", ":", "]", "]", "-", "inter", "+", "eps", ")", "\n", "\n", "inds", "=", "np", ".", "where", "(", "ovr", "<=", "base_thr", ")", "[", "0", "]", "\n", "indices", "=", "np", ".", "where", "(", "ovr", ">", "base_thr", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "", "return", "np", ".", "array", "(", "keep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.python_nms._test": [[190, 198], ["numpy.concatenate", "py_cpu_nms", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "_test", "(", ")", ":", "\n", "    ", "box1", "=", "np", ".", "array", "(", "[", "33", ",", "45", ",", "145", ",", "230", ",", "0.7", "]", ")", "[", "None", ",", ":", "]", "\n", "box2", "=", "np", ".", "array", "(", "[", "44", ",", "54", ",", "123", ",", "348", ",", "0.8", "]", ")", "[", "None", ",", ":", "]", "\n", "box3", "=", "np", ".", "array", "(", "[", "88", ",", "12", ",", "340", ",", "342", ",", "0.65", "]", ")", "[", "None", ",", ":", "]", "\n", "boxes", "=", "np", ".", "concatenate", "(", "[", "box1", ",", "box2", ",", "box3", "]", ",", "axis", "=", "0", ")", "\n", "nms_thresh", "=", "0.5", "\n", "keep", "=", "py_cpu_nms", "(", "boxes", ",", "nms_thresh", ")", "\n", "alive_boxes", "=", "boxes", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler.__init__": [[10, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_size_per_image", ",", "positive_fraction", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            batch_size_per_image (int): number of elements to be selected per image\n            positive_fraction (float): percentace of positive elements per batch\n        \"\"\"", "\n", "self", ".", "batch_size_per_image", "=", "batch_size_per_image", "\n", "self", ".", "positive_fraction", "=", "positive_fraction", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler.__call__": [[20, 73], ["torch.nonzero().squeeze", "torch.nonzero().squeeze", "int", "min", "min", "torch.zeros_like", "torch.zeros_like", "pos_idx.append", "neg_idx.append", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "torch.randperm", "torch.randperm", "torch.nonzero", "torch.nonzero", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "matched_idxs", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            matched idxs: list of tensors containing -1, 0 or positive values.\n                Each tensor corresponds to a specific image.\n                -1 values are ignored, 0 are considered as negatives and > 0 as\n                positives.\n\n        Returns:\n            pos_idx (list[tensor])\n            neg_idx (list[tensor])\n\n        Returns two lists of binary masks for each image.\n        The first list contains the positive elements that were selected,\n        and the second list the negative example.\n        \"\"\"", "\n", "pos_idx", "=", "[", "]", "\n", "neg_idx", "=", "[", "]", "\n", "\n", "\n", "for", "matched_idxs_per_image", "in", "matched_idxs", ":", "\n", "            ", "positive", "=", "torch", ".", "nonzero", "(", "matched_idxs_per_image", ">=", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "negative", "=", "torch", ".", "nonzero", "(", "matched_idxs_per_image", "==", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "num_pos", "=", "int", "(", "self", ".", "batch_size_per_image", "*", "self", ".", "positive_fraction", ")", "\n", "# protect against not enough positive examples", "\n", "num_pos", "=", "min", "(", "positive", ".", "numel", "(", ")", ",", "num_pos", ")", "\n", "num_neg", "=", "self", ".", "batch_size_per_image", "-", "num_pos", "\n", "# protect against not enough negative examples", "\n", "num_neg", "=", "min", "(", "negative", ".", "numel", "(", ")", ",", "num_neg", ")", "\n", "\n", "# randomly select positive and negative examples", "\n", "perm1", "=", "torch", ".", "randperm", "(", "positive", ".", "numel", "(", ")", ",", "device", "=", "positive", ".", "device", ")", "[", ":", "num_pos", "]", "\n", "perm2", "=", "torch", ".", "randperm", "(", "negative", ".", "numel", "(", ")", ",", "device", "=", "negative", ".", "device", ")", "[", ":", "num_neg", "]", "\n", "\n", "pos_idx_per_image", "=", "positive", "[", "perm1", "]", "\n", "neg_idx_per_image", "=", "negative", "[", "perm2", "]", "\n", "\n", "# create binary mask from indices", "\n", "pos_idx_per_image_mask", "=", "torch", ".", "zeros_like", "(", "\n", "matched_idxs_per_image", ",", "dtype", "=", "torch", ".", "uint8", "\n", ")", "\n", "neg_idx_per_image_mask", "=", "torch", ".", "zeros_like", "(", "\n", "matched_idxs_per_image", ",", "dtype", "=", "torch", ".", "uint8", "\n", ")", "\n", "pos_idx_per_image_mask", "[", "pos_idx_per_image", "]", "=", "1", "\n", "neg_idx_per_image_mask", "[", "neg_idx_per_image", "]", "=", "1", "\n", "\n", "pos_idx", ".", "append", "(", "pos_idx_per_image_mask", ")", "\n", "neg_idx", ".", "append", "(", "neg_idx_per_image_mask", ")", "\n", "\n", "\n", "", "return", "pos_idx", ",", "neg_idx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.matcher.Matcher.__init__": [[24, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "high_threshold", ",", "low_threshold", ",", "\n", "allow_low_quality_matches", "=", "False", ",", "top_k", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            high_threshold (float): quality values greater than or equal to\n                this value are candidate matches.\n            low_threshold (float): a lower quality threshold used to stratify\n                matches into three levels:\n                1) matches >= high_threshold\n                2) BETWEEN_THRESHOLDS matches in [low_threshold, high_threshold)\n                3) BELOW_LOW_THRESHOLD matches in [0, low_threshold)\n            allow_low_quality_matches (bool): if True, produce additional matches\n                for predictions that have only low-quality match candidates. See\n                set_low_quality_matches_ for more details.\n        \"\"\"", "\n", "assert", "low_threshold", "<=", "high_threshold", "\n", "self", ".", "high_threshold", "=", "high_threshold", "\n", "self", ".", "low_threshold", "=", "low_threshold", "\n", "self", ".", "allow_low_quality_matches", "=", "allow_low_quality_matches", "\n", "self", ".", "top_k", "=", "top_k", "\n", "", "def", "__call__", "(", "self", ",", "match_quality_matrix", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.matcher.Matcher.__call__": [[44, 109], ["match_quality_matrix.numel", "match_quality_matrix.max", "torch.topk", "ValueError", "ValueError", "matches.clone", "matcher.Matcher.set_low_quality_matches_", "matches.clone", "matcher.Matcher.set_low_quality_matches_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.matcher.Matcher.set_low_quality_matches_", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.matcher.Matcher.set_low_quality_matches_"], ["", "def", "__call__", "(", "self", ",", "match_quality_matrix", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            match_quality_matrix (Tensor[float]): an MxN tensor, containing the\n            pairwise quality between M ground-truth elements and N predicted elements.\n\n        Returns:\n            matches (Tensor[int64]): an N tensor where N[i] is a matched gt in\n            [0, M - 1] or a negative value indicating that prediction i could not\n            be matched.\n        \"\"\"", "\n", "if", "match_quality_matrix", ".", "numel", "(", ")", "==", "0", ":", "\n", "# pdb.set_trace()", "\n", "# empty targets or proposals not supported during training", "\n", "            ", "if", "match_quality_matrix", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "\n", "                ", "raise", "ValueError", "(", "\n", "\"No ground-truth boxes available for one of the images \"", "\n", "\"during training\"", ")", "\n", "", "else", ":", "\n", "\n", "                ", "raise", "ValueError", "(", "\n", "\"No proposal boxes available for one of the images \"", "\n", "\"during training\"", ")", "\n", "\n", "# match_quality_matrix is M (gt) x N (predicted)", "\n", "# Max over gt elements (dim 0) to find best gt candidate for each prediction", "\n", "\n", "", "", "if", "self", ".", "top_k", "<", "2", ":", "\n", "            ", "matched_vals", ",", "matches", "=", "match_quality_matrix", ".", "max", "(", "dim", "=", "0", ")", "\n", "if", "self", ".", "allow_low_quality_matches", ":", "\n", "                ", "all_matches", "=", "matches", ".", "clone", "(", ")", "\n", "\n", "# Assign candidate matches with low quality to negative (unassigned) values", "\n", "", "below_low_threshold", "=", "matched_vals", "<", "self", ".", "low_threshold", "\n", "between_thresholds", "=", "(", "matched_vals", ">=", "self", ".", "low_threshold", ")", "&", "(", "\n", "matched_vals", "<", "self", ".", "high_threshold", "\n", ")", "\n", "matches", "[", "below_low_threshold", "]", "=", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "matches", "[", "between_thresholds", "]", "=", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "\n", "if", "self", ".", "allow_low_quality_matches", ":", "\n", "                ", "self", ".", "set_low_quality_matches_", "(", "matches", ",", "all_matches", ",", "match_quality_matrix", ")", "\n", "\n", "", "return", "matches", "\n", "", "else", ":", "\n", "            ", "matched_vals", ",", "matches", "=", "torch", ".", "topk", "(", "match_quality_matrix", ",", "2", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "if", "self", ".", "allow_low_quality_matches", ":", "\n", "                ", "all_matches", "=", "matches", ".", "clone", "(", ")", "\n", "\n", "# Assign candidate matches with low quality to negative (unassigned) values", "\n", "", "below_low_threshold", "=", "matched_vals", "<", "self", ".", "low_threshold", "\n", "between_thresholds", "=", "(", "matched_vals", ">=", "self", ".", "low_threshold", ")", "&", "(", "\n", "matched_vals", "<", "self", ".", "high_threshold", "\n", ")", "\n", "matches", "[", "below_low_threshold", "]", "=", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "matches", "[", "between_thresholds", "]", "=", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "\n", "if", "self", ".", "allow_low_quality_matches", ":", "\n", "                ", "self", ".", "set_low_quality_matches_", "(", "matches", ",", "all_matches", ",", "\n", "match_quality_matrix", ")", "\n", "\n", "", "", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.matcher.Matcher.set_low_quality_matches_": [[110, 140], ["match_quality_matrix.max", "torch.nonzero"], "methods", ["None"], ["", "def", "set_low_quality_matches_", "(", "self", ",", "matches", ",", "all_matches", ",", "match_quality_matrix", ")", ":", "\n", "        ", "\"\"\"\n        Produce additional matches for predictions that have only low-quality matches.\n        Specifically, for each ground-truth find the set of predictions that have\n        maximum overlap with it (including ties); for each prediction in that set, if\n        it is unmatched, then match it to the ground-truth with which it has the highest\n        quality value.\n        \"\"\"", "\n", "# For each gt, find the prediction with which it has highest quality", "\n", "highest_quality_foreach_gt", ",", "_", "=", "match_quality_matrix", ".", "max", "(", "dim", "=", "1", ")", "\n", "# Find highest quality match available, even if it is low, including ties", "\n", "gt_pred_pairs_of_highest_quality", "=", "torch", ".", "nonzero", "(", "\n", "match_quality_matrix", "==", "highest_quality_foreach_gt", "[", ":", ",", "None", "]", "\n", ")", "\n", "# Example gt_pred_pairs_of_highest_quality:", "\n", "#   tensor([[    0, 39796],", "\n", "#           [    1, 32055],", "\n", "#           [    1, 32070],", "\n", "#           [    2, 39190],", "\n", "#           [    2, 40255],", "\n", "#           [    3, 40390],", "\n", "#           [    3, 41455],", "\n", "#           [    4, 45470],", "\n", "#           [    5, 45325],", "\n", "#           [    5, 46390]])", "\n", "# Each row is a (gt index, prediction index)", "\n", "# Note how gt items 1, 2, 3, and 5 each have two ties", "\n", "\n", "pred_inds_to_update", "=", "gt_pred_pairs_of_highest_quality", "[", ":", ",", "1", "]", "\n", "matches", "[", "pred_inds_to_update", "]", "=", "all_matches", "[", "pred_inds_to_update", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.poolers.LevelMapper.__init__": [[16, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "k_min", ",", "k_max", ",", "canonical_scale", "=", "224", ",", "canonical_level", "=", "4", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            k_min (int)\n            k_max (int)\n            canonical_scale (int)\n            canonical_level (int)\n            eps (float)\n        \"\"\"", "\n", "self", ".", "k_min", "=", "k_min", "\n", "self", ".", "k_max", "=", "k_max", "\n", "self", ".", "s0", "=", "canonical_scale", "\n", "self", ".", "lvl0", "=", "canonical_level", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.poolers.LevelMapper.__call__": [[31, 43], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "utils.cat", "torch.clamp.to", "torch.clamp.to", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "boxlist.area"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.area"], ["", "def", "__call__", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            boxlists (list[BoxList])\n        \"\"\"", "\n", "# Compute level ids", "\n", "s", "=", "torch", ".", "sqrt", "(", "cat", "(", "[", "boxlist", ".", "area", "(", ")", "for", "boxlist", "in", "boxlists", "]", ")", ")", "\n", "\n", "# Eqn.(1) in FPN paper", "\n", "target_lvls", "=", "torch", ".", "floor", "(", "self", ".", "lvl0", "+", "torch", ".", "log2", "(", "s", "/", "self", ".", "s0", "+", "self", ".", "eps", ")", ")", "\n", "target_lvls", "=", "torch", ".", "clamp", "(", "target_lvls", ",", "min", "=", "self", ".", "k_min", ",", "max", "=", "self", ".", "k_max", ")", "\n", "return", "target_lvls", ".", "to", "(", "torch", ".", "int64", ")", "-", "self", ".", "k_min", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.poolers.Pooler.__init__": [[55, 77], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "poolers.LevelMapper", "poolers.append", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "maskrcnn_benchmark.layers.ROIAlign", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "output_size", ",", "scales", ",", "sampling_ratio", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            output_size (list[tuple[int]] or list[int]): output size for the pooled region\n            scales (list[float]): scales for each Pooler\n            sampling_ratio (int): sampling ratio for ROIAlign\n        \"\"\"", "\n", "super", "(", "Pooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "poolers", "=", "[", "]", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "poolers", ".", "append", "(", "\n", "ROIAlign", "(", "\n", "output_size", ",", "spatial_scale", "=", "scale", ",", "sampling_ratio", "=", "sampling_ratio", "\n", ")", "\n", ")", "\n", "", "self", ".", "poolers", "=", "nn", ".", "ModuleList", "(", "poolers", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "# get the levels in the feature map by leveraging the fact that the network always", "\n", "# downsamples by a factor of 2 at each level.", "\n", "lvl_min", "=", "-", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "scales", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", ".", "item", "(", ")", "\n", "lvl_max", "=", "-", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "scales", "[", "-", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "map_levels", "=", "LevelMapper", "(", "lvl_min", ",", "lvl_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.poolers.Pooler.convert_to_roi_format": [[78, 90], ["utils.cat", "utils.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full", "torch.full", "torch.full", "torch.full", "enumerate", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "convert_to_roi_format", "(", "self", ",", "boxes", ")", ":", "\n", "        ", "concat_boxes", "=", "cat", "(", "[", "b", ".", "bbox", "for", "b", "in", "boxes", "]", ",", "dim", "=", "0", ")", "\n", "device", ",", "dtype", "=", "concat_boxes", ".", "device", ",", "concat_boxes", ".", "dtype", "\n", "ids", "=", "cat", "(", "\n", "[", "\n", "torch", ".", "full", "(", "(", "len", "(", "b", ")", ",", "1", ")", ",", "i", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "boxes", ")", "\n", "]", ",", "\n", "dim", "=", "0", ",", "\n", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "[", "ids", ",", "concat_boxes", "]", ",", "dim", "=", "1", ")", "\n", "return", "rois", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.poolers.Pooler.forward": [[91, 122], ["len", "poolers.Pooler.convert_to_roi_format", "poolers.Pooler.map_levels", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "zip", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "pooler", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.poolers.Pooler.convert_to_roi_format"], ["", "def", "forward", "(", "self", ",", "x", ",", "boxes", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            x (list[Tensor]): feature maps for each level\n            boxes (list[BoxList]): boxes to be used to perform the pooling operation.\n        Returns:\n            result (Tensor)\n        \"\"\"", "\n", "num_levels", "=", "len", "(", "self", ".", "poolers", ")", "\n", "rois", "=", "self", ".", "convert_to_roi_format", "(", "boxes", ")", "\n", "if", "num_levels", "==", "1", ":", "\n", "            ", "return", "self", ".", "poolers", "[", "0", "]", "(", "x", "[", "0", "]", ",", "rois", ")", "\n", "\n", "", "levels", "=", "self", ".", "map_levels", "(", "boxes", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "num_rois", "=", "len", "(", "rois", ")", "\n", "num_channels", "=", "x", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "output_size", "=", "self", ".", "output_size", "[", "0", "]", "\n", "\n", "dtype", ",", "device", "=", "x", "[", "0", "]", ".", "dtype", ",", "x", "[", "0", "]", ".", "device", "\n", "result", "=", "torch", ".", "zeros", "(", "\n", "(", "num_rois", ",", "num_channels", ",", "output_size", ",", "output_size", ")", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "for", "level", ",", "(", "per_level_feature", ",", "pooler", ")", "in", "enumerate", "(", "zip", "(", "x", ",", "self", ".", "poolers", ")", ")", ":", "\n", "            ", "idx_in_level", "=", "torch", ".", "nonzero", "(", "levels", "==", "level", ")", ".", "squeeze", "(", "1", ")", "\n", "rois_per_level", "=", "rois", "[", "idx_in_level", "]", "\n", "result", "[", "idx_in_level", "]", "=", "pooler", "(", "per_level_feature", ",", "rois_per_level", ")", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.GradientReversalFunction.forward": [[27, 31], ["x.clone"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "lambda_", ")", ":", "\n", "        ", "ctx", ".", "lambda_", "=", "lambda_", "\n", "return", "x", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.GradientReversalFunction.backward": [[32, 38], ["grads.new_tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grads", ")", ":", "\n", "        ", "lambda_", "=", "ctx", ".", "lambda_", "\n", "lambda_", "=", "grads", ".", "new_tensor", "(", "lambda_", ")", "\n", "dx", "=", "-", "lambda_", "*", "grads", "\n", "return", "dx", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.GradientReversal.__init__": [[41, 44], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambda_", "=", "1", ")", ":", "\n", "        ", "super", "(", "GradientReversal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambda_", "=", "lambda_", "\n", "", "def", "update_lambda", "(", "self", ",", "p", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.GradientReversal.update_lambda": [[44, 46], ["None"], "methods", ["None"], ["", "def", "update_lambda", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "lambda_", "=", "p", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.GradientReversal.forward": [[46, 48], ["GradientReversalFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "GradientReversalFunction", ".", "apply", "(", "x", ",", "self", ".", "lambda_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.GRL.__init__": [[51, 53], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "Lambda", ")", ":", "\n", "        ", "self", ".", "Lambda", "=", "Lambda", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.GRL.forward": [[53, 55], ["x.view_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n", "", "def", "backward", "(", "self", ",", "grads", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.GRL.backward": [[55, 58], ["grads.clone"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grads", ")", ":", "\n", "        ", "grad_in", "=", "grads", ".", "clone", "(", ")", "\n", "return", "grad_in", "*", "(", "-", "self", ".", "Lambda", ")", "\n", "", "def", "set_lambda", "(", "self", ",", "l", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.GRL.set_lambda": [[58, 60], ["None"], "methods", ["None"], ["", "def", "set_lambda", "(", "self", ",", "l", ")", ":", "\n", "        ", "self", ".", "Lambda", "=", "l", "", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat": [[9, 17], ["isinstance", "torch.cat", "len"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["def", "cat", "(", "tensors", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Efficient version of torch.cat that avoids a copy if there is only a single element in a list\n    \"\"\"", "\n", "assert", "isinstance", "(", "tensors", ",", "(", "list", ",", "tuple", ")", ")", "\n", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "return", "tensors", "[", "0", "]", "\n", "", "return", "torch", ".", "cat", "(", "tensors", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.entropy_loss": [[3, 16], ["torch.nn.functional.softmax", "torch.nn.functional.log_softmax", "torch.mean"], "function", ["None"], ["def", "entropy_loss", "(", "p", ",", "q", ",", "eps", "=", "10", "-", "6", ")", ":", "\n", "    ", "'''\n    h = p * log(q) where p is prob from teacher\n    :param p:\n    :param q:\n    :return:\n    '''", "\n", "# pdb.set_trace()", "\n", "p", "=", "F", ".", "softmax", "(", "p", ",", "dim", "=", "1", ")", "\n", "q", "=", "F", ".", "log_softmax", "(", "q", ",", "dim", "=", "1", ")", "\n", "result", "=", "p", "*", "q", "\n", "result", "=", "-", "torch", ".", "mean", "(", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.balanced_BCE": [[19, 30], ["torch.FloatTensor().to", "torch.nn.functional.binary_cross_entropy", "weight.sum", "torch.FloatTensor", "labels.long", "weight.numel"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "balanced_BCE", "(", "scores", ",", "labels", ",", "nms_score", ")", ":", "\n", "# weight  = torch.ones_like(scores,).to(labels.device)", "\n", "# weight[labels==0] = 0.2", "\n", "    ", "class_weight", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "2", "]", ")", ".", "to", "(", "labels", ".", "device", ")", "\n", "\n", "weight", "=", "class_weight", "[", "labels", ".", "long", "(", ")", "]", "\n", "weight", "=", "weight", "*", "weight", ".", "numel", "(", ")", "/", "weight", ".", "sum", "(", ")", "\n", "\n", "nms_loss", "=", "F", ".", "binary_cross_entropy", "(", "scores", ",", "nms_score", ",", "\n", "weight", ")", "\n", "return", "nms_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.combined_BCE": [[31, 37], ["torch.nn.functional.binary_cross_entropy", "losses.MSEloss"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.MSEloss"], ["", "def", "combined_BCE", "(", "scores", ",", "labels", ",", "nms_score", ")", ":", "\n", "\n", "    ", "loss1", "=", "F", ".", "binary_cross_entropy", "(", "scores", ",", "labels", ")", "\n", "loss2", "=", "MSEloss", "(", "scores", ",", "nms_score", ")", "\n", "loss", "=", "0.5", "*", "(", "loss1", "+", "loss2", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.smooth_l1": [[38, 45], ["torch.abs", "torch.where", "torch.where.mean"], "function", ["None"], ["", "def", "smooth_l1", "(", "scores", ",", "nms_score", ",", "beta", "=", "0.1", ")", ":", "\n", "\n", "    ", "n", "=", "torch", ".", "abs", "(", "scores", "-", "nms_score", ")", "\n", "cond", "=", "n", "<", "beta", "\n", "loss", "=", "torch", ".", "where", "(", "cond", ",", "0.5", "*", "n", "**", "2", "/", "beta", ",", "n", "-", "0.5", "*", "beta", ")", "\n", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.weighted_BCE": [[49, 70], ["labels.type.to", "labels.type.type", "torch.nn.functional.binary_cross_entropy", "nms_score[].sum", "labels.type.sum", "nms_score[].sum"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "weighted_BCE", "(", "scores", ",", "labels", ",", "nms_score", ")", ":", "\n", "# balanced", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "    ", "nms_score", "[", "labels", "==", "0", "]", "=", "1", "-", "nms_score", "[", "labels", "==", "0", "]", "\n", "# weight avg p/n", "\n", "negative_weight", "=", "(", "1", "-", "labels", ")", ".", "sum", "(", ")", "/", "nms_score", "[", "\n", "labels", "==", "0", "]", ".", "sum", "(", ")", "\n", "positive_weight", "=", "labels", ".", "sum", "(", ")", "/", "nms_score", "[", "labels", "==", "1", "]", ".", "sum", "(", ")", "\n", "nms_score", "[", "labels", "==", "1", "]", "=", "nms_score", "[", "labels", "==", "1", "]", "*", "positive_weight", "\n", "nms_score", "[", "labels", "==", "0", "]", "=", "nms_score", "[", "labels", "==", "0", "]", "*", "negative_weight", "\n", "labels", "=", "labels", ".", "to", "(", "scores", ".", "device", ")", "\n", "labels", "=", "labels", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "nms_loss", "=", "F", ".", "binary_cross_entropy", "(", "scores", ",", "labels", ",", "\n", "nms_score", ")", "\n", "return", "nms_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.BCE": [[71, 75], ["torch.nn.functional.binary_cross_entropy_with_logits"], "function", ["None"], ["", "def", "BCE", "(", "scores", ",", "nms_score", ")", ":", "\n", "\n", "    ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "scores", ",", "nms_score", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.KLloss": [[76, 82], ["torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "torch.nn.functional.kl_div"], "function", ["None"], ["", "def", "KLloss", "(", "score", ",", "nms_score", ")", ":", "\n", "    ", "score", "=", "F", ".", "log_softmax", "(", "score", ",", "dim", "=", "1", ")", "\n", "nms_score", "=", "F", ".", "softmax", "(", "nms_score", ",", "dim", "=", "1", ")", "\n", "# nms_score = F.softmax()", "\n", "loss", "=", "F", ".", "kl_div", "(", "score", ",", "nms_score", ")", "\n", "return", "loss", "\n", "# torch.nn.KLDivLoss", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.MSEloss": [[83, 87], ["torch.nn.functional.mse_loss"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss"], ["", "def", "MSEloss", "(", "score", ",", "target", ")", ":", "\n", "\n", "    ", "loss", "=", "F", ".", "mse_loss", "(", "score", ",", "target", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.regression_loss": [[89, 96], ["losses.MSEloss", "losses.KLloss", "print"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.MSEloss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.KLloss"], ["", "def", "regression_loss", "(", "type", ",", "predict", ",", "label", ")", ":", "\n", "    ", "if", "type", "==", "'mse'", ":", "\n", "        ", "return", "MSEloss", "(", "predict", ",", "label", ")", "\n", "", "elif", "type", "==", "'kl'", ":", "\n", "        ", "return", "KLloss", "(", "predict", ",", "label", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'error, not implement %s!!!'", "%", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.reg_flip_loss": [[97, 100], ["losses.MSEloss"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.MSEloss"], ["", "", "def", "reg_flip_loss", "(", "predict", ",", "label", ")", ":", "\n", "    ", "label", "[", ":", ",", "0", "]", "=", "-", "label", "[", ":", ",", "0", "]", "\n", "return", "MSEloss", "(", "predict", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.flip_l2_dist": [[101, 106], ["label.detach", "torch.nn.functional.mse_loss"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss"], ["", "def", "flip_l2_dist", "(", "predict", ",", "label", ")", ":", "\n", "    ", "new_label", "=", "label", ".", "detach", "(", ")", "\n", "new_label", "[", ":", ",", "0", "]", "=", "-", "new_label", "[", ":", ",", "0", "]", "\n", "dist", "=", "F", ".", "mse_loss", "(", "predict", ",", "new_label", ",", "reduction", "=", "'none'", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.CE_loss": [[108, 111], ["torch.nn.functional.binary_cross_entropy_with_logits"], "function", ["None"], ["", "def", "CE_loss", "(", "predict", ",", "label", ")", ":", "\n", "    ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "predict", ",", "label", ")", "\n", "return", "loss", "\n", "# def CE_loss", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.classification_loss": [[116, 132], ["losses.BCE", "losses.KLloss", "losses.weighted_BCE", "losses.MSEloss", "losses.entropy_loss", "losses.CE_loss", "print"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.BCE", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.KLloss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.weighted_BCE", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.MSEloss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.entropy_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.CE_loss"], ["", "def", "classification_loss", "(", "type", ",", "predict", ",", "label", ",", "weight", "=", "None", ")", ":", "\n", "    ", "if", "type", "==", "'bce'", ":", "\n", "        ", "return", "BCE", "(", "predict", ",", "label", ")", "\n", "", "elif", "type", "==", "'kl'", ":", "\n", "        ", "return", "KLloss", "(", "predict", ",", "weight", ")", "\n", "", "elif", "type", "==", "'wbce'", ":", "\n", "        ", "return", "weighted_BCE", "(", "predict", ",", "label", ",", "weight", ")", "\n", "", "elif", "type", "==", "'mse'", ":", "\n", "        ", "return", "MSEloss", "(", "predict", ",", "weight", ")", "\n", "", "elif", "type", "==", "'entropy'", ":", "\n", "        ", "return", "entropy_loss", "(", "predict", ",", "weight", ")", "\n", "", "elif", "type", "==", "'ce'", ":", "\n", "        ", "return", "CE_loss", "(", "predict", ",", "label", ")", "\n", "# todo wce and ce", "\n", "", "else", ":", "\n", "        ", "print", "(", "'error, not implement %s !!!'", "%", "type", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNHead.__init__": [[19, 38], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ",", "num_anchors", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            cfg              : config\n            in_channels (int): number of channels of the input feature\n            num_anchors (int): number of anchors to be predicted\n        \"\"\"", "\n", "super", "(", "RPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "num_anchors", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_anchors", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", "\n", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv", ",", "self", ".", "cls_logits", ",", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNHead.forward": [[39, 47], ["torch.relu", "torch.relu", "logits.append", "bbox_reg.append", "rpn.RPNHead.conv", "rpn.RPNHead.cls_logits", "rpn.RPNHead.bbox_pred"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "[", "]", "\n", "bbox_reg", "=", "[", "]", "\n", "for", "feature", "in", "x", ":", "\n", "            ", "t", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "feature", ")", ")", "\n", "logits", ".", "append", "(", "self", ".", "cls_logits", "(", "t", ")", ")", "\n", "bbox_reg", ".", "append", "(", "self", ".", "bbox_pred", "(", "t", ")", ")", "\n", "", "return", "logits", ",", "bbox_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule.__init__": [[55, 89], ["super().__init__", "cfg.clone", "anchor_generator.make_anchor_generator.make_anchor_generator", "rpn_head", "maskrcnn_benchmark.modeling.box_coder.BoxCoder", "inference.make_rpn_postprocessor", "inference.make_rpn_postprocessor", "loss.make_rpn_loss_evaluator", "anchor_generator.make_anchor_generator.make_anchor_generator.num_anchors_per_location"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.make_anchor_generator", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.make_rpn_postprocessor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.make_rpn_postprocessor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.loss.make_rpn_loss_evaluator", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.AnchorGenerator.num_anchors_per_location"], ["def", "__init__", "(", "self", ",", "cfg", ",", "is_teacher", "=", "False", ")", ":", "\n", "        ", "super", "(", "RPNModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "None", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n", "anchor_generator", "=", "make_anchor_generator", "(", "cfg", ")", "\n", "\n", "in_channels", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "OUT_CHANNELS", "\n", "rpn_head", "=", "registry", ".", "RPN_HEADS", "[", "cfg", ".", "MODEL", ".", "RPN", ".", "RPN_HEAD", "]", "\n", "head", "=", "rpn_head", "(", "\n", "cfg", ",", "in_channels", ",", "anchor_generator", ".", "num_anchors_per_location", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "rpn_box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "\n", "box_selector_train", "=", "make_rpn_postprocessor", "(", "cfg", ",", "\n", "rpn_box_coder", ",", "\n", "is_train", "=", "True", ",", "\n", "is_teacher", "=", "is_teacher", "\n", ")", "\n", "box_selector_test", "=", "make_rpn_postprocessor", "(", "cfg", ",", "\n", "rpn_box_coder", ",", "\n", "is_train", "=", "False", ",", "\n", "is_teacher", "=", "\n", "is_teacher", ",", "\n", ")", "\n", "\n", "loss_evaluator", "=", "make_rpn_loss_evaluator", "(", "cfg", ",", "rpn_box_coder", ")", "\n", "\n", "self", ".", "anchor_generator", "=", "anchor_generator", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "box_selector_train", "=", "box_selector_train", "\n", "self", ".", "box_selector_test", "=", "box_selector_test", "\n", "self", ".", "loss_evaluator", "=", "loss_evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule.set_teacher_mode": [[91, 93], ["None"], "methods", ["None"], ["", "def", "set_teacher_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule.forward": [[94, 130], ["isinstance", "enumerate", "rpn.RPNModule.avg", "rpn.RPNModule.avg", "rpn.RPNModule.anchor_generator", "rpn.RPNModule.head", "rpn.RPNModule.anchor_generator", "rpn.RPNModule._forward_train", "rpn.RPNModule._forward_test", "rpn.RPNModule._forward_single_head", "obj_list.append", "regression_list.append"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule.avg", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule.avg", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule._forward_train", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule._forward_test", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule._forward_single_head"], ["", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (ImageList): images for which we want to compute the predictions\n            features (list[Tensor]): features computed from the images that are\n                used for computing the predictions. Each tensor in the list\n                correspond to different feature levels\n            targets (list[BoxList): ground-truth boxes present in the image (optional)\n\n        Returns:\n            boxes (list[BoxList]): the predicted boxes from the RPN, one BoxList per\n                image.\n            losses (dict[Tensor]): the losses for the model during training. During\n                testing, it is an empty dict.\n        \"\"\"", "\n", "if", "isinstance", "(", "features", ",", "list", ")", ":", "\n", "            ", "obj_list", "=", "[", "]", "\n", "regression_list", "=", "[", "]", "\n", "for", "idx", ",", "feat", "in", "enumerate", "(", "features", ")", ":", "\n", "                ", "obj", ",", "reg", "=", "self", ".", "_forward_single_head", "(", "feat", ",", "idx", ")", "\n", "obj_list", ".", "append", "(", "obj", ")", "\n", "regression_list", ".", "append", "(", "reg", ")", "\n", "# pdb.set_trace()", "\n", "\n", "", "objectness", "=", "self", ".", "avg", "(", "obj_list", ")", "\n", "\n", "rpn_box_regression", "=", "self", ".", "avg", "(", "regression_list", ")", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "images", "[", "0", "]", ",", "features", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "objectness", ",", "rpn_box_regression", "=", "self", ".", "head", "(", "features", ")", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "images", ",", "features", ")", "\n", "\n", "", "if", "self", ".", "training", "or", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "targets", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_test", "(", "anchors", ",", "objectness", ",", "rpn_box_regression", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule._forward_single_head": [[131, 138], ["rpn.RPNModule.head"], "methods", ["None"], ["", "", "def", "_forward_single_head", "(", "self", ",", "features", ",", "i", ")", ":", "\n", "        ", "objectness", ",", "rpn_box_regression", "=", "self", ".", "head", "(", "features", ")", "\n", "# pdb.set_trace()", "\n", "if", "i", "%", "2", "!=", "0", ":", "\n", "            ", "for", "rpn", "in", "rpn_box_regression", ":", "\n", "                ", "rpn", "[", ":", ",", "0", ":", ":", "4", ",", ":", ",", ":", "]", "=", "-", "rpn", "[", ":", ",", "0", ":", ":", "4", ",", ":", ",", ":", "]", "\n", "", "", "return", "objectness", ",", "rpn_box_regression", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule.avg": [[139, 145], ["zip", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "avg_list.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "avg", "(", "self", ",", "listtensor", ")", ":", "\n", "        ", "avg_list", "=", "[", "]", "\n", "for", "tensor", "in", "zip", "(", "listtensor", "[", "0", "]", ",", "listtensor", "[", "1", "]", ",", "listtensor", "[", "2", "]", ",", "listtensor", "[", "3", "]", ")", ":", "\n", "            ", "mean_t", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "tensor", ")", ",", "0", ")", "\n", "avg_list", ".", "append", "(", "mean_t", ")", "\n", "", "return", "avg_list", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule.forward_teacher": [[146, 178], ["isinstance", "enumerate", "rpn.RPNModule.avg", "rpn.RPNModule.avg", "rpn.RPNModule.anchor_generator", "rpn.RPNModule.head", "rpn.RPNModule.anchor_generator", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rpn.RPNModule.box_selector_train", "rpn.RPNModule.loss_evaluator.teacher_sample_selection", "rpn.RPNModule._forward_single_head", "obj_list.append", "regression_list.append", "rpn.RPNModule.box_selector_train.forward_imitation"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule.avg", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule.avg", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.loss.RPNLossComputation.teacher_sample_selection", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule._forward_single_head", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.RPNPostProcessor.forward_imitation"], ["", "def", "forward_teacher", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "features", ",", "list", ")", ":", "\n", "# notice : currently we do not use multiple aug image feature to generate proposals in teacher mode.", "\n", "# may be used in future.", "\n", "            ", "obj_list", "=", "[", "]", "\n", "regression_list", "=", "[", "]", "\n", "for", "idx", ",", "feat", "in", "enumerate", "(", "features", ")", ":", "\n", "                ", "obj", ",", "reg", "=", "self", ".", "_forward_single_head", "(", "feat", ",", "idx", ")", "\n", "obj_list", ".", "append", "(", "obj", ")", "\n", "regression_list", ".", "append", "(", "reg", ")", "\n", "", "objectness", "=", "self", ".", "avg", "(", "obj_list", ")", "\n", "rpn_box_regression", "=", "self", ".", "avg", "(", "regression_list", ")", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "images", ",", "features", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "objectness", ",", "rpn_box_regression", "=", "self", ".", "head", "(", "features", ")", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "images", ",", "features", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "cfg", ".", "MT", ".", "FFI", ":", "\n", "                ", "ffi_boxes", "=", "self", ".", "box_selector_train", ".", "forward_imitation", "(", "anchors", ",", "objectness", ",", "targets", ",", "0.5", ")", "\n", "", "else", ":", "\n", "                ", "ffi_boxes", "=", "None", "\n", "", "boxes", "=", "self", ".", "box_selector_train", "(", "\n", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "targets", "\n", ")", "\n", "\n", "objectness", ",", "box_regression", ",", "sample_idx", ",", "label", "=", "self", ".", "loss_evaluator", ".", "teacher_sample_selection", "(", "\n", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "targets", ")", "\n", "\n", "\n", "", "return", "objectness", ",", "box_regression", ",", "sample_idx", ",", "label", ",", "boxes", ",", "{", "}", ",", "ffi_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule._forward_train": [[179, 202], ["rpn.RPNModule.loss_evaluator", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rpn.RPNModule.box_selector_train"], "methods", ["None"], ["", "def", "_forward_train", "(", "self", ",", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "targets", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "# When training an RPN-only model, the loss is determined by the", "\n", "# predicted objectness and rpn_box_regression values and there is", "\n", "# no need to transform the anchors into predicted boxes; this is an", "\n", "# optimization that avoids the unnecessary transformation.", "\n", "            ", "boxes", "=", "anchors", "\n", "", "else", ":", "\n", "# For end-to-end models, anchors must be transformed into boxes and", "\n", "# sampled into a training batch.", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "boxes", "=", "self", ".", "box_selector_train", "(", "\n", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "targets", "\n", ")", "\n", "# pdb.set_trace()", "\n", "", "", "loss_objectness", ",", "loss_rpn_box_reg", "=", "self", ".", "loss_evaluator", "(", "\n", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "targets", "\n", ")", "\n", "losses", "=", "{", "\n", "\"loss_objectness\"", ":", "loss_objectness", ",", "\n", "\"loss_rpn_box_reg\"", ":", "loss_rpn_box_reg", ",", "\n", "}", "\n", "return", "boxes", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.RPNModule._forward_test": [[203, 215], ["rpn.RPNModule.box_selector_test", "box.get_field().sort", "zip", "box.get_field"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "_forward_test", "(", "self", ",", "anchors", ",", "objectness", ",", "rpn_box_regression", ")", ":", "\n", "        ", "boxes", "=", "self", ".", "box_selector_test", "(", "anchors", ",", "objectness", ",", "rpn_box_regression", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "# For end-to-end models, the RPN proposals are an intermediate state", "\n", "# and don't bother to sort them in decreasing score order. For RPN-only", "\n", "# models, the proposals are the final output and we return them in", "\n", "# high-to-low confidence order.", "\n", "            ", "inds", "=", "[", "\n", "box", ".", "get_field", "(", "\"objectness\"", ")", ".", "sort", "(", "descending", "=", "True", ")", "[", "1", "]", "for", "box", "in", "boxes", "\n", "]", "\n", "boxes", "=", "[", "box", "[", "ind", "]", "for", "box", ",", "ind", "in", "zip", "(", "boxes", ",", "inds", ")", "]", "\n", "", "return", "boxes", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.build_rpn": [[217, 222], ["rpn.RPNModule"], "function", ["None"], ["", "", "def", "build_rpn", "(", "cfg", ",", "is_teacher", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    This gives the gist of it. Not super important because it doesn't change as much\n    \"\"\"", "\n", "return", "RPNModule", "(", "cfg", ",", "is_teacher", "=", "is_teacher", ",", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.__init__": [[16, 20], ["torch.nn.Module.__init__", "anchor_generator.BufferList.extend"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend"], ["def", "__init__", "(", "self", ",", "buffers", "=", "None", ")", ":", "\n", "        ", "super", "(", "BufferList", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "buffers", "is", "not", "None", ":", "\n", "            ", "self", ".", "extend", "(", "buffers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend": [[21, 26], ["len", "enumerate", "anchor_generator.BufferList.register_buffer", "str"], "methods", ["None"], ["", "", "def", "extend", "(", "self", ",", "buffers", ")", ":", "\n", "        ", "offset", "=", "len", "(", "self", ")", "\n", "for", "i", ",", "buffer", "in", "enumerate", "(", "buffers", ")", ":", "\n", "            ", "self", ".", "register_buffer", "(", "str", "(", "offset", "+", "i", ")", ",", "buffer", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.__len__": [[27, 29], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_buffers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.__iter__": [[30, 32], ["iter", "anchor_generator.BufferList._buffers.values"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_buffers", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.AnchorGenerator.__init__": [[40, 64], ["torch.nn.Module.__init__", "anchor_generator.BufferList", "len", "generate_anchors().float", "len", "len", "RuntimeError", "generate_anchors().float", "zip", "anchor_generator.generate_anchors", "anchor_generator.generate_anchors"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.generate_anchors", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.generate_anchors"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sizes", "=", "(", "128", ",", "256", ",", "512", ")", ",", "\n", "aspect_ratios", "=", "(", "0.5", ",", "1.0", ",", "2.0", ")", ",", "\n", "anchor_strides", "=", "(", "8", ",", "16", ",", "32", ")", ",", "\n", "straddle_thresh", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", "AnchorGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "len", "(", "anchor_strides", ")", "==", "1", ":", "\n", "            ", "anchor_stride", "=", "anchor_strides", "[", "0", "]", "\n", "cell_anchors", "=", "[", "\n", "generate_anchors", "(", "anchor_stride", ",", "sizes", ",", "aspect_ratios", ")", ".", "float", "(", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "anchor_strides", ")", "!=", "len", "(", "sizes", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"FPN should have #anchor_strides == #sizes\"", ")", "\n", "", "cell_anchors", "=", "[", "\n", "generate_anchors", "(", "anchor_stride", ",", "(", "size", ",", ")", ",", "aspect_ratios", ")", ".", "float", "(", ")", "\n", "for", "anchor_stride", ",", "size", "in", "zip", "(", "anchor_strides", ",", "sizes", ")", "\n", "]", "\n", "", "self", ".", "strides", "=", "anchor_strides", "\n", "self", ".", "cell_anchors", "=", "BufferList", "(", "cell_anchors", ")", "\n", "self", ".", "straddle_thresh", "=", "straddle_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.AnchorGenerator.num_anchors_per_location": [[65, 67], ["len"], "methods", ["None"], ["", "def", "num_anchors_per_location", "(", "self", ")", ":", "\n", "        ", "return", "[", "len", "(", "cell_anchors", ")", "for", "cell_anchors", "in", "self", ".", "cell_anchors", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.AnchorGenerator.grid_anchors": [[68, 94], ["zip", "torch.arange", "torch.arange", "torch.meshgrid", "shift_x.reshape.reshape.reshape", "shift_y.reshape.reshape.reshape", "torch.stack", "anchors.append", "torch.stack.view", "base_anchors.view"], "methods", ["None"], ["", "def", "grid_anchors", "(", "self", ",", "grid_sizes", ")", ":", "\n", "        ", "anchors", "=", "[", "]", "\n", "# import pdb;", "\n", "# pdb.set_trace()", "\n", "for", "size", ",", "stride", ",", "base_anchors", "in", "zip", "(", "\n", "grid_sizes", ",", "self", ".", "strides", ",", "self", ".", "cell_anchors", "\n", ")", ":", "\n", "# import pdb;pdb.set_trace()", "\n", "            ", "grid_height", ",", "grid_width", "=", "size", "\n", "device", "=", "base_anchors", ".", "device", "\n", "shifts_x", "=", "torch", ".", "arange", "(", "\n", "0", ",", "grid_width", "*", "stride", ",", "step", "=", "stride", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shifts_y", "=", "torch", ".", "arange", "(", "\n", "0", ",", "grid_height", "*", "stride", ",", "step", "=", "stride", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shift_y", ",", "shift_x", "=", "torch", ".", "meshgrid", "(", "shifts_y", ",", "shifts_x", ")", "\n", "shift_x", "=", "shift_x", ".", "reshape", "(", "-", "1", ")", "\n", "shift_y", "=", "shift_y", ".", "reshape", "(", "-", "1", ")", "\n", "shifts", "=", "torch", ".", "stack", "(", "(", "shift_x", ",", "shift_y", ",", "shift_x", ",", "shift_y", ")", ",", "dim", "=", "1", ")", "\n", "\n", "anchors", ".", "append", "(", "\n", "(", "shifts", ".", "view", "(", "-", "1", ",", "1", ",", "4", ")", "+", "base_anchors", ".", "view", "(", "1", ",", "-", "1", ",", "4", ")", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.AnchorGenerator.add_visibility_to": [[95, 109], ["boxlist.add_field", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["", "def", "add_visibility_to", "(", "self", ",", "boxlist", ")", ":", "\n", "        ", "image_width", ",", "image_height", "=", "boxlist", ".", "size", "\n", "anchors", "=", "boxlist", ".", "bbox", "\n", "if", "self", ".", "straddle_thresh", ">=", "0", ":", "\n", "            ", "inds_inside", "=", "(", "\n", "(", "anchors", "[", "...", ",", "0", "]", ">=", "-", "self", ".", "straddle_thresh", ")", "\n", "&", "(", "anchors", "[", "...", ",", "1", "]", ">=", "-", "self", ".", "straddle_thresh", ")", "\n", "&", "(", "anchors", "[", "...", ",", "2", "]", "<", "image_width", "+", "self", ".", "straddle_thresh", ")", "\n", "&", "(", "anchors", "[", "...", ",", "3", "]", "<", "image_height", "+", "self", ".", "straddle_thresh", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "anchors", ".", "device", "\n", "inds_inside", "=", "torch", ".", "ones", "(", "anchors", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "", "boxlist", ".", "add_field", "(", "\"visibility\"", ",", "inds_inside", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.AnchorGenerator.forward": [[110, 124], ["anchor_generator.AnchorGenerator.grid_anchors", "enumerate", "anchors.append", "maskrcnn_benchmark.structures.bounding_box.BoxList", "anchor_generator.AnchorGenerator.add_visibility_to", "anchors_in_image.append"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.AnchorGenerator.add_visibility_to"], ["", "def", "forward", "(", "self", ",", "image_list", ",", "feature_maps", ")", ":", "\n", "        ", "grid_sizes", "=", "[", "feature_map", ".", "shape", "[", "-", "2", ":", "]", "for", "feature_map", "in", "feature_maps", "]", "\n", "anchors_over_all_feature_maps", "=", "self", ".", "grid_anchors", "(", "grid_sizes", ")", "\n", "anchors", "=", "[", "]", "\n", "for", "i", ",", "(", "image_height", ",", "image_width", ")", "in", "enumerate", "(", "image_list", ".", "image_sizes", ")", ":", "\n", "            ", "anchors_in_image", "=", "[", "]", "\n", "for", "anchors_per_feature_map", "in", "anchors_over_all_feature_maps", ":", "\n", "                ", "boxlist", "=", "BoxList", "(", "\n", "anchors_per_feature_map", ",", "(", "image_width", ",", "image_height", ")", ",", "mode", "=", "\"xyxy\"", "\n", ")", "\n", "self", ".", "add_visibility_to", "(", "boxlist", ")", "\n", "anchors_in_image", ".", "append", "(", "boxlist", ")", "\n", "", "anchors", ".", "append", "(", "anchors_in_image", ")", "\n", "", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.make_anchor_generator": [[126, 142], ["anchor_generator.AnchorGenerator", "len", "len", "len"], "function", ["None"], ["", "", "def", "make_anchor_generator", "(", "config", ")", ":", "\n", "    ", "anchor_sizes", "=", "config", ".", "MODEL", ".", "RPN", ".", "ANCHOR_SIZES", "\n", "aspect_ratios", "=", "config", ".", "MODEL", ".", "RPN", ".", "ASPECT_RATIOS", "\n", "anchor_stride", "=", "config", ".", "MODEL", ".", "RPN", ".", "ANCHOR_STRIDE", "\n", "straddle_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "STRADDLE_THRESH", "\n", "\n", "if", "config", ".", "MODEL", ".", "RPN", ".", "USE_FPN", ":", "\n", "        ", "assert", "len", "(", "anchor_stride", ")", "==", "len", "(", "\n", "anchor_sizes", "\n", ")", ",", "\"FPN should have len(ANCHOR_STRIDE) == len(ANCHOR_SIZES)\"", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "anchor_stride", ")", "==", "1", ",", "\"Non-FPN should have a single ANCHOR_STRIDE\"", "\n", "", "anchor_generator", "=", "AnchorGenerator", "(", "\n", "anchor_sizes", ",", "aspect_ratios", ",", "anchor_stride", ",", "straddle_thresh", "\n", ")", "\n", "return", "anchor_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.generate_anchors": [[196, 207], ["anchor_generator._generate_anchors", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._generate_anchors"], ["", "def", "generate_anchors", "(", "\n", "stride", "=", "16", ",", "sizes", "=", "(", "32", ",", "64", ",", "128", ",", "256", ",", "512", ")", ",", "aspect_ratios", "=", "(", "0.5", ",", "1", ",", "2", ")", "\n", ")", ":", "\n", "    ", "\"\"\"Generates a matrix of anchor boxes in (x1, y1, x2, y2) format. Anchors\n    are centered on stride / 2, have (approximate) sqrt areas of the specified\n    sizes, and aspect ratios as given.\n    \"\"\"", "\n", "return", "_generate_anchors", "(", "\n", "stride", ",", "\n", "np", ".", "array", "(", "sizes", ",", "dtype", "=", "np", ".", "float", ")", "/", "stride", ",", "\n", "np", ".", "array", "(", "aspect_ratios", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._generate_anchors": [[210, 220], ["anchor_generator._ratio_enum", "numpy.vstack", "torch.from_numpy", "numpy.array", "anchor_generator._scale_enum", "range"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._ratio_enum", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._scale_enum"], ["", "def", "_generate_anchors", "(", "base_size", ",", "scales", ",", "aspect_ratios", ")", ":", "\n", "    ", "\"\"\"Generate anchor (reference) windows by enumerating aspect ratios X\n    scales wrt a reference (0, 0, base_size - 1, base_size - 1) window.\n    \"\"\"", "\n", "anchor", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "base_size", ",", "base_size", "]", ",", "dtype", "=", "np", ".", "float", ")", "-", "1", "\n", "anchors", "=", "_ratio_enum", "(", "anchor", ",", "aspect_ratios", ")", "\n", "anchors", "=", "np", ".", "vstack", "(", "\n", "[", "_scale_enum", "(", "anchors", "[", "i", ",", ":", "]", ",", "scales", ")", "for", "i", "in", "range", "(", "anchors", ".", "shape", "[", "0", "]", ")", "]", "\n", ")", "\n", "return", "torch", ".", "from_numpy", "(", "anchors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._whctrs": [[222, 229], ["None"], "function", ["None"], ["", "def", "_whctrs", "(", "anchor", ")", ":", "\n", "    ", "\"\"\"Return width, height, x center, and y center for an anchor (window).\"\"\"", "\n", "w", "=", "anchor", "[", "2", "]", "-", "anchor", "[", "0", "]", "+", "1", "\n", "h", "=", "anchor", "[", "3", "]", "-", "anchor", "[", "1", "]", "+", "1", "\n", "x_ctr", "=", "anchor", "[", "0", "]", "+", "0.5", "*", "(", "w", "-", "1", ")", "\n", "y_ctr", "=", "anchor", "[", "1", "]", "+", "0.5", "*", "(", "h", "-", "1", ")", "\n", "return", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._mkanchors": [[231, 246], ["numpy.hstack"], "function", ["None"], ["", "def", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", ":", "\n", "    ", "\"\"\"Given a vector of widths (ws) and heights (hs) around a center\n    (x_ctr, y_ctr), output a set of anchors (windows).\n    \"\"\"", "\n", "ws", "=", "ws", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "hs", "=", "hs", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "anchors", "=", "np", ".", "hstack", "(", "\n", "(", "\n", "x_ctr", "-", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "-", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", "x_ctr", "+", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "+", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", ")", "\n", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._ratio_enum": [[248, 257], ["anchor_generator._whctrs", "numpy.round", "numpy.round", "anchor_generator._mkanchors", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._whctrs", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._mkanchors"], ["", "def", "_ratio_enum", "(", "anchor", ",", "ratios", ")", ":", "\n", "    ", "\"\"\"Enumerate a set of anchors for each aspect ratio wrt an anchor.\"\"\"", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "size", "=", "w", "*", "h", "\n", "size_ratios", "=", "size", "/", "ratios", "\n", "ws", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "size_ratios", ")", ")", "\n", "hs", "=", "np", ".", "round", "(", "ws", "*", "ratios", ")", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._scale_enum": [[259, 266], ["anchor_generator._whctrs", "anchor_generator._mkanchors"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._whctrs", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator._mkanchors"], ["", "def", "_scale_enum", "(", "anchor", ",", "scales", ")", ":", "\n", "    ", "\"\"\"Enumerate a set of anchors for each scale wrt an anchor.\"\"\"", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "ws", "=", "w", "*", "scales", "\n", "hs", "=", "h", "*", "scales", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.RPNPostProcessor.__init__": [[21, 54], ["super().__init__", "maskrcnn_benchmark.modeling.box_coder.BoxCoder"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", "is_teacher", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "is_teacher", "=", "is_teacher", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.RPNPostProcessor.add_gt_proposals": [[55, 77], ["target.copy_with_fields", "gt_box.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "torch.ones", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist"], ["", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.RPNPostProcessor.forward_for_single_feature_map": [[78, 138], ["objectness.sigmoid.sigmoid.permute().reshape", "objectness.sigmoid.sigmoid.sigmoid", "box_regression.reshape.reshape.view().permute", "box_regression.reshape.reshape.reshape", "min", "objectness.sigmoid.sigmoid.topk", "torch.cat", "inference.RPNPostProcessor.box_coder.decode", "proposals.view.view.view", "enumerate", "torch.arange", "torch.cat.reshape", "box_regression.reshape.reshape.view", "torch.cat.view", "zip", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.clip_to_image", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "result.append", "objectness.sigmoid.sigmoid.permute", "box_regression.reshape.reshape.view", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.remove_small_boxes", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "\n", "box_regression", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "objectness", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "box_regression", "=", "box_regression", ".", "view", "(", "N", ",", "-", "1", ",", "4", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "box_regression", "=", "box_regression", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "# batch_ = batch_idx.expand([N ,pre_nms_top_n])", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "result", "=", "[", "]", "\n", "for", "j", ",", "(", "proposal", ",", "score", ",", "im_shape", ",", "topk_id", ",", ")", "in", "enumerate", "(", "\n", "zip", "(", "\n", "proposals", ",", "objectness", ",", "image_shapes", ",", "topk_idx", ",", ")", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "if", "self", ".", "is_teacher", ":", "\n", "# boxlist.add_field(\"bid\", batch_[j])", "\n", "                ", "boxlist", ".", "add_field", "(", "\"box_reg\"", ",", "box_regression", "[", "j", "]", ")", "\n", "boxlist", ".", "add_field", "(", "\"rpn_topk\"", ",", "topk_id", ")", "\n", "boxlist", ".", "add_field", "(", "\"rpn_ancher_level\"", ",", "torch", ".", "tensor", "(", "[", "i", "]", "\n", "*", "topk_id", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", ")", "\n", "", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.RPNPostProcessor.forward": [[139, 173], ["len", "list", "enumerate", "list", "zip", "zip", "sampled_boxes.append", "zip", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "inference.RPNPostProcessor.select_over_all_levels", "inference.RPNPostProcessor.add_gt_proposals", "inference.RPNPostProcessor.forward_for_single_feature_map"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.RPNPostProcessor.select_over_all_levels", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.RPNPostProcessor.add_gt_proposals", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.RPNPostProcessor.forward_for_single_feature_map"], ["", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "i", ",", "(", "a", ",", "o", ",", "b", ")", "in", "enumerate", "(", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ")", ":", "\n", "\n", "            ", "sampled_boxes", ".", "append", "(", "\n", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ",", "i", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "# todo: check if teacher-train mode can add these gts", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.RPNPostProcessor.forward_imitation": [[174, 192], ["enumerate", "zip", "enumerate", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "torch.zeros().to", "canvas_list.append", "zip", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "a[].clip_to_image", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "bbox.long.long.long", "torch.nonzero", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.clip_to_image"], ["", "def", "forward_imitation", "(", "self", ",", "anchors", ",", "objectness", ",", "targets", ",", "s", ")", ":", "\n", "# code to find bbox region in FFI method", "\n", "        ", "canvas_list", "=", "[", "]", "\n", "for", "j", ",", "(", "a_per_img", ",", "o_per_img", ",", "tar", ")", "in", "enumerate", "(", "zip", "(", "anchors", ",", "objectness", ",", "targets", ")", ")", ":", "\n", "            ", "anchor_list", "=", "[", "]", "\n", "for", "i", ",", "(", "a", ",", "o", ")", "in", "enumerate", "(", "zip", "(", "a_per_img", ",", "o_per_img", ")", ")", ":", "\n", "                ", "iou", "=", "boxlist_iou", "(", "a", ",", "tar", ")", "\n", "iou", "[", "iou", "<=", "s", "]", "=", "0.", "\n", "preserve", "=", "torch", ".", "nonzero", "(", "iou", ")", "[", ":", ",", "0", "]", "\n", "preserve_anchor", "=", "a", "[", "preserve", "]", ".", "clip_to_image", "(", ")", "\n", "anchor_list", ".", "append", "(", "preserve_anchor", ")", "\n", "", "anchor_list", "=", "cat_boxlist", "(", "anchor_list", ")", "\n", "canvas", "=", "torch", ".", "zeros", "(", "a", ".", "size", ")", ".", "to", "(", "device", "=", "o_per_img", ".", "device", ")", "\n", "for", "bbox", "in", "anchor_list", ".", "bbox", ":", "\n", "                ", "bbox", "=", "bbox", ".", "long", "(", ")", "\n", "canvas", "[", "bbox", "[", "1", "]", ":", "bbox", "[", "3", "]", ",", "bbox", "[", "0", "]", ":", "bbox", "[", "2", "]", "]", "=", "1", "\n", "", "canvas_list", ".", "append", "(", "canvas", ")", "\n", "", "return", "canvas_list", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.RPNPostProcessor.collect_batch_single_feature_idx": [[193, 213], ["range", "zip", "batch_idx.append", "sort_target.append", "feature_idxs.append", "targets_list.append"], "methods", ["None"], ["", "def", "collect_batch_single_feature_idx", "(", "self", ",", "teacher_sample_list", ",", "\n", "targets", ")", ":", "\n", "        ", "batch_idx", "=", "[", "]", "\n", "# batch_ori_idx = []", "\n", "sort_target", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "feature_idxs", "=", "[", "]", "\n", "targets_list", "=", "[", "]", "\n", "# pdb.set_trace()", "\n", "for", "per_img_sample", ",", "per_img_target", "in", "zip", "(", "\n", "teacher_sample_list", ",", "targets", ")", ":", "\n", "                ", "feature_idxs", ".", "append", "(", "\n", "per_img_sample", "[", "1", "]", "[", "(", "per_img_sample", "[", "0", "]", "==", "i", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "targets_list", ".", "append", "(", "\n", "per_img_target", "[", "(", "per_img_sample", "[", "0", "]", "==", "i", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", ")", "\n", "", "batch_idx", ".", "append", "(", "feature_idxs", ")", "\n", "sort_target", ".", "append", "(", "targets_list", ")", "\n", "# batch_ori_idx.append(ori_idx)", "\n", "", "return", "batch_idx", ",", "sort_target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.RPNPostProcessor.select_over_all_levels": [[216, 244], ["len", "torch.cat", "min", "torch.topk", "torch.zeros_like", "inds_mask.split.split.split", "range", "range", "len", "len", "boxlists[].get_field", "min", "torch.topk", "boxlist.get_field", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# TODO resolve this difference and make it consistent. It should be per image,", "\n", "# and not per batch", "\n", "if", "self", ".", "training", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", "\n", ")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n", "", "", "return", "boxlists", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.inference.make_rpn_postprocessor": [[246, 273], ["inference.RPNPostProcessor"], "function", ["None"], ["", "", "def", "make_rpn_postprocessor", "(", "config", ",", "rpn_box_coder", ",", "is_train", ",", "\n", "is_teacher", "=", "False", ")", ":", "\n", "# if is_teacher == True:", "\n", "#     # FORCE TRUE", "\n", "#     is_train=True", "\n", "    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n", "post_nms_top_n", "=", "post_nms_top_n", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "\n", "min_size", "=", "min_size", ",", "\n", "box_coder", "=", "rpn_box_coder", ",", "\n", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", ",", "\n", "is_teacher", "=", "is_teacher", ",", "\n", "\n", ")", "\n", "return", "box_selector", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.loss.RPNLossComputation.__init__": [[26, 42], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", "\n", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "cls_loss_type", "=", "cfg", ".", "MT", ".", "CLS_LOSS_TYPE", "\n", "self", ".", "alpha", "=", "cfg", ".", "MT", ".", "RPN_BOOST_ALPHA", "\n", "self", ".", "temp", "=", "cfg", ".", "MT", ".", "TEMP", "\n", "self", ".", "reg_loss_type", "=", "cfg", ".", "MT", ".", "REG_LOSS_TYPE", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.loss.RPNLossComputation.match_targets_to_anchors": [[42, 55], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.RPNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.RPNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "[", "]", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.loss.RPNLossComputation.prepare_targets": [[56, 84], ["zip", "loss.RPNLossComputation.match_targets_to_anchors", "loss.RPNLossComputation.get_field", "labels_per_image.to.to.to", "loss.RPNLossComputation.box_coder.encode", "labels.append", "regression_targets.append", "anchors_per_image.get_field"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.loss.RPNLossComputation.match_targets_to_anchors", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.box_coder.BoxCoder.encode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "objectness", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", "\n", ")", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.loss.RPNLossComputation.teacher_sample_selection": [[85, 137], ["loss.RPNLossComputation.prepare_targets", "loss.RPNLossComputation.fg_bg_sampler", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.cat", "zip", "utils.cat().reshape", "utils.cat().reshape", "torch.cat", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "objectness_per_level.permute().reshape.permute().reshape.permute().reshape", "box_regression_per_level.reshape.reshape.view", "box_regression_per_level.reshape.reshape.permute", "box_regression_per_level.reshape.reshape.reshape", "objectness_flattened.append", "box_regression_flattened.append", "torch.nonzero", "torch.nonzero", "utils.cat", "utils.cat", "torch.cat", "torch.cat", "objectness_per_level.permute().reshape.permute().reshape.permute"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.prepare_targets", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "teacher_sample_selection", "(", "self", ",", "anchors", ",", "objectness", ",", "\n", "box_regression", ",", "targets", ")", ":", "\n", "        ", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "\n", "anchors_per_image", "in", "anchors", "]", "\n", "# print('anchor', anchors)", "\n", "# print('target',targets)", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "\n", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "\n", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "\n", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "\n", "dim", "=", "0", ")", "\n", "sampled_pos_inds_num", "=", "sampled_pos_inds", ".", "shape", "\n", "objectness_flattened", "=", "[", "]", "\n", "box_regression_flattened", "=", "[", "]", "\n", "# for each feature level, permute the outputs to make them be in the", "\n", "# same format as the labels. Note that the labels are computed for", "\n", "# all feature levels concatenated, so we keep the same representation", "\n", "# for the objectness and the box_regression", "\n", "for", "objectness_per_level", ",", "box_regression_per_level", "in", "zip", "(", "\n", "objectness", ",", "box_regression", "\n", ")", ":", "\n", "            ", "N", ",", "A", ",", "H", ",", "W", "=", "objectness_per_level", ".", "shape", "\n", "objectness_per_level", "=", "objectness_per_level", ".", "permute", "(", "0", ",", "2", ",", "\n", "3", ",", "\n", "1", ")", ".", "reshape", "(", "\n", "N", ",", "-", "1", "\n", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "view", "(", "\n", "N", ",", "-", "1", ",", "4", ",", "H", ",", "W", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "permute", "(", "\n", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "reshape", "(", "\n", "N", ",", "-", "1", ",", "4", ")", "\n", "objectness_flattened", ".", "append", "(", "objectness_per_level", ")", "\n", "box_regression_flattened", ".", "append", "(", "box_regression_per_level", ")", "\n", "# concatenate on the first dimension (representing the feature levels), to", "\n", "# take into account the way the labels were generated (with all feature maps", "\n", "# being concatenated as well)", "\n", "", "objectness", "=", "cat", "(", "objectness_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "box_regression", "=", "cat", "(", "box_regression_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "\n", "-", "1", ",", "4", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "objectness", "=", "objectness", "[", "sampled_inds", "]", "\n", "label", "=", "labels", "[", "sampled_inds", "]", "\n", "box_regression", "=", "box_regression", "[", "sampled_pos_inds", "]", "\n", "return", "objectness", ",", "box_regression", ",", "(", "sampled_inds", ",", "sampled_pos_inds_num", ")", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.loss.RPNLossComputation.__call__": [[138, 197], ["loss.RPNLossComputation.prepare_targets", "loss.RPNLossComputation.fg_bg_sampler", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.cat", "zip", "utils.cat().reshape", "utils.cat().reshape", "torch.cat", "torch.cat", "torch.nn.functional.binary_cross_entropy_with_logits", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "objectness_per_level.permute().reshape.permute().reshape.permute().reshape", "box_regression_per_level.reshape.reshape.view", "box_regression_per_level.reshape.reshape.permute", "box_regression_per_level.reshape.reshape.reshape", "objectness_flattened.append", "box_regression_flattened.append", "maskrcnn_benchmark.layers.smooth_l1_loss", "torch.cat.numel", "torch.nonzero", "torch.nonzero", "utils.cat", "utils.cat", "torch.cat", "torch.cat", "objectness_per_level.permute().reshape.permute().reshape.permute"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.prepare_targets", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.smooth_l1_loss.smooth_l1_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "# print('anchor', anchors)", "\n", "# print('target',targets)", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness_flattened", "=", "[", "]", "\n", "box_regression_flattened", "=", "[", "]", "\n", "# for each feature level, permute the outputs to make them be in the", "\n", "# same format as the labels. Note that the labels are computed for", "\n", "# all feature levels concatenated, so we keep the same representation", "\n", "# for the objectness and the box_regression", "\n", "for", "objectness_per_level", ",", "box_regression_per_level", "in", "zip", "(", "\n", "objectness", ",", "box_regression", "\n", ")", ":", "\n", "            ", "N", ",", "A", ",", "H", ",", "W", "=", "objectness_per_level", ".", "shape", "\n", "objectness_per_level", "=", "objectness_per_level", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "\n", "N", ",", "-", "1", "\n", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "view", "(", "N", ",", "-", "1", ",", "4", ",", "H", ",", "W", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "objectness_flattened", ".", "append", "(", "objectness_per_level", ")", "\n", "box_regression_flattened", ".", "append", "(", "box_regression_per_level", ")", "\n", "# concatenate on the first dimension (representing the feature levels), to", "\n", "# take into account the way the labels were generated (with all feature maps", "\n", "# being concatenated as well)", "\n", "", "objectness", "=", "cat", "(", "objectness_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "box_regression", "=", "cat", "(", "box_regression_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.loss.make_rpn_loss_evaluator": [[198, 213], ["maskrcnn_benchmark.modeling.matcher.Matcher", "balanced_positive_negative_sampler.BalancedPositiveNegativeSampler", "loss.RPNLossComputation"], "function", ["None"], ["", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ",", ")", ":", "\n", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "matcher", ",", "fg_bg_sampler", ",", "\n", "box_coder", ",", "cfg", ")", "\n", "return", "loss_evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.RoiAlignMaskFeatureExtractor.__init__": [[15, 33], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.ConvTranspose2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "RoiAlignMaskFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_channels", "=", "257", "\n", "self", ".", "mask_fcn1", "=", "Conv2d", "(", "input_channels", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "mask_fcn2", "=", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "mask_fcn3", "=", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "if", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", "==", "1", ":", "\n", "            ", "self", ".", "conv5_mask", "=", "ConvTranspose2d", "(", "256", ",", "256", ",", "2", ",", "2", ",", "0", ")", "\n", "self", ".", "mask_fcn_logits", "=", "Conv2d", "(", "256", ",", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "for", "l", "in", "[", "self", ".", "mask_fcn1", ",", "self", ".", "mask_fcn2", ",", "self", ".", "mask_fcn3", ",", "self", ".", "conv5_mask", ",", "self", ".", "mask_fcn_logits", "]", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "l", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "mask_fcn_logits", "=", "None", "\n", "self", ".", "conv5_mask", "=", "Conv2d", "(", "256", ",", "16", ",", "3", ",", "1", ",", "1", ")", "\n", "for", "l", "in", "[", "self", ".", "mask_fcn1", ",", "self", ".", "mask_fcn2", ",", "self", ".", "mask_fcn3", ",", "self", ".", "conv5_mask", ",", "]", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "l", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.RoiAlignMaskFeatureExtractor.forward": [[37, 49], ["torch.nn.functional.max_pool2d", "torch.cat", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "relation_mask_feature_extractor.RoiAlignMaskFeatureExtractor.mask_fcn1", "relation_mask_feature_extractor.RoiAlignMaskFeatureExtractor.mask_fcn2", "relation_mask_feature_extractor.RoiAlignMaskFeatureExtractor.mask_fcn3", "relation_mask_feature_extractor.RoiAlignMaskFeatureExtractor.conv5_mask", "relation_mask_feature_extractor.RoiAlignMaskFeatureExtractor.mask_fcn_logits"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "mask", "=", "x", "\n", "# import  pdb;pdb.set_trace()", "\n", "mask_pool", "=", "F", ".", "max_pool2d", "(", "mask", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "mask_pool", ")", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5_mask", "(", "x", ")", ")", "\n", "if", "self", ".", "mask_fcn_logits", ":", "\n", "            ", "x", "=", "self", ".", "mask_fcn_logits", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.SameSizeRoiAlignMaskFeatureExtractor.__init__": [[52, 62], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "SameSizeRoiAlignMaskFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_channels", "=", "257", "\n", "self", ".", "mask_fcn1", "=", "Conv2d", "(", "input_channels", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "mask_fcn2", "=", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "mask_fcn3", "=", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv5_mask", "=", "Conv2d", "(", "256", ",", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", ",", "3", ",", "1", ",", "1", ")", "\n", "for", "l", "in", "[", "self", ".", "mask_fcn1", ",", "self", ".", "mask_fcn2", ",", "self", ".", "mask_fcn3", ",", "self", ".", "conv5_mask", ",", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "l", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.SameSizeRoiAlignMaskFeatureExtractor.forward": [[66, 76], ["torch.nn.functional.max_pool2d", "torch.cat", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "relation_mask_feature_extractor.SameSizeRoiAlignMaskFeatureExtractor.mask_fcn1", "relation_mask_feature_extractor.SameSizeRoiAlignMaskFeatureExtractor.mask_fcn2", "relation_mask_feature_extractor.SameSizeRoiAlignMaskFeatureExtractor.mask_fcn3", "relation_mask_feature_extractor.SameSizeRoiAlignMaskFeatureExtractor.conv5_mask"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "mask", "=", "x", "\n", "# import  pdb;pdb.set_trace()", "\n", "mask_pool", "=", "F", ".", "max_pool2d", "(", "mask", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "mask_pool", ")", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5_mask", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.RoiAlignFeatureExtractor.__init__": [[81, 92], ["maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.ConvTranspose2d", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "input_channels", "=", "256", "\n", "self", ".", "mask_fcn1", "=", "Conv2d", "(", "input_channels", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "mask_fcn2", "=", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "mask_fcn3", "=", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv5_mask", "=", "ConvTranspose2d", "(", "256", ",", "256", ",", "2", ",", "2", ",", "0", ")", "\n", "self", ".", "mask_fcn_logits", "=", "Conv2d", "(", "256", ",", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "mask_fcn1", ",", "self", ".", "mask_fcn2", ",", "self", ".", "mask_fcn3", ",", "self", ".", "mask_fcn4", ",", "self", ".", "conv5_mask", ",", "self", ".", "mask_fcn_logits", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "l", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.RoiAlignFeatureExtractor.forward": [[93, 100], ["torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "relation_mask_feature_extractor.RoiAlignFeatureExtractor.mask_fcn_logits", "relation_mask_feature_extractor.RoiAlignFeatureExtractor.mask_fcn1", "relation_mask_feature_extractor.RoiAlignFeatureExtractor.mask_fcn2", "relation_mask_feature_extractor.RoiAlignFeatureExtractor.mask_fcn3", "relation_mask_feature_extractor.RoiAlignFeatureExtractor.conv5_mask"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5_mask", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "mask_fcn_logits", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.MaskFeatureExtractor.__init__": [[103, 106], ["torch.nn.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "MaskFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'init MaskFeatureExtractor'", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.MaskFeatureExtractor.forward": [[106, 109], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "(", "roi", ",", "mask", ")", "=", "x", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.SameFeatureMask.__init__": [[111, 113], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "SameFeatureMask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.SameFeatureMask.forward": [[113, 115], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.DeepFeatureExtractor.__init__": [[117, 127], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DeepFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_channels", "=", "256", "\n", "self", ".", "mask_fcn1", "=", "Conv2d", "(", "input_channels", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "mask_fcn2", "=", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "mask_fcn3", "=", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv5_mask", "=", "Conv2d", "(", "256", ",", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", ",", "3", ",", "1", ",", "1", ")", "\n", "for", "l", "in", "[", "self", ".", "mask_fcn1", ",", "self", ".", "mask_fcn2", ",", "self", ".", "mask_fcn3", ",", "self", ".", "conv5_mask", ",", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "l", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.DeepFeatureExtractor.forward": [[128, 138], ["torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "relation_mask_feature_extractor.DeepFeatureExtractor.mask_fcn1", "relation_mask_feature_extractor.DeepFeatureExtractor.mask_fcn2", "relation_mask_feature_extractor.DeepFeatureExtractor.mask_fcn3", "relation_mask_feature_extractor.DeepFeatureExtractor.conv5_mask"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "mask", "=", "x", "\n", "# import  pdb;pdb.set_trace()", "\n", "# mask_pool = F.max_pool2d(mask, kernel_size=2, stride=2)", "\n", "# x = torch.cat((x, mask_pool), 1)", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5_mask", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.ShapeBuffer.__init__": [[158, 162], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.init.xavier_normal_", "torch.Tensor", "int"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ShapeBuffer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "center", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "int", "(", "2", "*", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "CENTER_PER_CLASS", ")", ",", "1", ",", "28", ",", "28", ")", ",", "requires_grad", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "center", ")", "\n", "", "def", "_set_center", "(", "self", ",", "means", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.ShapeBuffer._set_center": [[162, 164], ["None"], "methods", ["None"], ["", "def", "_set_center", "(", "self", ",", "means", ")", ":", "\n", "        ", "self", ".", "center", ".", "data", "=", "means", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.ShapeBuffer.forward": [[165, 167], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.ShapeBuffer.__repr__": [[168, 170], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(center)'", "", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.make_relation_mask_feature_extractor": [[150, 153], ["func"], "function", ["None"], ["def", "make_relation_mask_feature_extractor", "(", "cfg", ")", ":", "\n", "    ", "func", "=", "_RELATION_MASK_FEATURE_EXTRACTORS", "[", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "FEATURE_EXTRACTOR", "]", "\n", "return", "func", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.RelationModule.__init__": [[20, 37], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "appearance_feature_dim", "=", "1024", ",", "geo_feature_dim", "=", "64", ",", "\n", "fc_dim", "=", "(", "64", ",", "16", ")", ",", "group", "=", "16", ",", "dim", "=", "(", "1024", ",", "1024", ",", "1024", ")", ",", "topk", "=", "10", ",", "iou_method", "=", "'b'", ")", ":", "\n", "        ", "super", "(", "RelationModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc_dim", "=", "fc_dim", "\n", "self", ".", "dim_group", "=", "(", "int", "(", "dim", "[", "0", "]", "/", "group", ")", ",", "int", "(", "dim", "[", "1", "]", "/", "group", ")", ",", "int", "(", "dim", "[", "2", "]", "/", "group", ")", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "group", "=", "group", "\n", "self", ".", "WG", "=", "nn", ".", "Linear", "(", "geo_feature_dim", ",", "fc_dim", "[", "1", "]", ",", "bias", "=", "True", ")", "\n", "# 1024, 1024", "\n", "self", ".", "WK", "=", "nn", ".", "Linear", "(", "appearance_feature_dim", ",", "dim", "[", "1", "]", ",", "bias", "=", "True", ")", "\n", "self", ".", "WQ", "=", "nn", ".", "Linear", "(", "appearance_feature_dim", ",", "dim", "[", "0", "]", ",", "bias", "=", "True", ")", "\n", "# self.WV = nn.Linear(appearance_feature_dim, key_feature_dim, bias=True)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "fc_dim", "[", "1", "]", "*", "appearance_feature_dim", ",", "dim", "[", "2", "]", ",", "1", ",", "groups", "=", "group", ")", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "iou_method", "=", "iou_method", "\n", "assert", "fc_dim", "[", "1", "]", "==", "group", ",", "'Check the dimensions in attention!'", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.RelationModule.forward": [[38, 125], ["f_a.permute.permute.size", "f_a.permute.permute.permute", "f_a.permute.permute.contiguous().view", "position_embedding.view.view.view", "relation_module_bk.RelationModule.relu", "relation_module_bk.RelationModule.WK", "w_k.contiguous().view.contiguous().view.view", "w_k.contiguous().view.contiguous().view.permute", "w_k.contiguous().view.contiguous().view.contiguous().view", "relation_module_bk.RelationModule.WQ", "w_q.contiguous().view.contiguous().view.view", "w_q.contiguous().view.contiguous().view.transpose", "w_q.contiguous().view.contiguous().view.contiguous().view", "w_g.contiguous().view.contiguous().view.view", "w_g.contiguous().view.contiguous().view.permute", "w_g.contiguous().view.contiguous().view.contiguous().view", "min", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.zeros_like().to.scatter", "torch.zeros_like().to.scatter", "w_mn_topk.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.permute.permute.view", "output.permute.permute.permute", "output.permute.permute.contiguous().view", "relation_module_bk.RelationModule.conv1", "output.permute.permute.squeeze", "output.permute.permute.permute", "relation_module_bk.RelationModule.WG", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "log_iou[].repeat().view", "f_a.permute.permute.contiguous", "w_k.contiguous().view.contiguous().view.contiguous", "w_q.contiguous().view.contiguous().view.contiguous", "math.sqrt", "w_g.contiguous().view.contiguous().view.contiguous", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "output.permute.permute.contiguous", "float", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "log_iou[].repeat", "torch.log", "torch.log", "torch.log", "torch.log", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "f_a", ",", "position_embedding", ",", "iou", ")", ":", "\n", "# f_a: [num_rois, num_fg_classes, feat_dim]", "\n", "# pdb.set_trace()", "\n", "\n", "        ", "N", ",", "num_fg_class", ",", "feat_dim", "=", "f_a", ".", "size", "(", ")", "\n", "# f_a = f_a.transpose(0, 1)", "\n", "f_a", "=", "f_a", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "# f_a_reshape [num-roi*num-fg-cls, feat-dim]", "\n", "f_a_reshape", "=", "f_a", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "num_fg_class", ",", "feat_dim", ")", "\n", "# [num_fg_classes * num_rois * num_rois, fc_dim[0]]", "\n", "\n", "position_embedding", "=", "position_embedding", ".", "view", "(", "-", "1", ",", "self", ".", "fc_dim", "[", "0", "]", ")", "\n", "\n", "w_g", "=", "self", ".", "relu", "(", "self", ".", "WG", "(", "position_embedding", ")", ")", "\n", "\n", "w_k", "=", "self", ".", "WK", "(", "f_a_reshape", ")", "\n", "# [ num_rpi, 16, 64 ]", "\n", "\n", "w_k", "=", "w_k", ".", "view", "(", "-", "1", ",", "N", ",", "self", ".", "group", ",", "self", ".", "dim_group", "[", "1", "]", ")", "\n", "# todo: check", "\n", "w_k", "=", "w_k", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "# k_data_batch, [num_fg_classes * group, dim_group[1], num_rois,]", "\n", "w_k", "=", "w_k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "dim_group", "[", "1", "]", ",", "N", ")", "\n", "\n", "w_q", "=", "self", ".", "WQ", "(", "f_a_reshape", ")", "\n", "w_q", "=", "w_q", ".", "view", "(", "-", "1", ",", "N", ",", "self", ".", "group", ",", "self", ".", "dim_group", "[", "0", "]", ")", "\n", "\n", "w_q", "=", "w_q", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# q_data_batch, [num_fg_classes * group, num_rois, dim_group[0]]", "\n", "w_q", "=", "w_q", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "N", ",", "self", ".", "dim_group", "[", "0", "]", ")", "\n", "# aff, [num_fg_classes * group, num_rois, num_rois]", "\n", "aff", "=", "(", "1.0", "/", "math", ".", "sqrt", "(", "float", "(", "self", ".", "dim_group", "[", "1", "]", ")", ")", ")", "*", "torch", ".", "bmm", "(", "w_q", ",", "w_k", ")", "\n", "\n", "# scaled_dot = torch.sum((w_k*w_q),-1 )", "\n", "# scaled_dot = scaled_dot / np.sqrt(self.dim_k)", "\n", "\n", "w_g", "=", "w_g", ".", "view", "(", "-", "1", ",", "N", ",", "N", ",", "self", ".", "fc_dim", "[", "1", "]", ")", "\n", "#  [num_fg_classes, fc_dim[1], num_rois, num_rois]", "\n", "w_g", "=", "w_g", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "#  [num_fg_classes * fc_dim[1], num_rois, num_rois]", "\n", "w_g", "=", "w_g", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "N", ",", "N", ")", "\n", "# w_a = scaled_dot.view(N,N)", "\n", "# pdb.set_trace()", "\n", "# log_iou = torch.log(torch.clamp(iou, min =  1e-6)) if iou is not None else 0", "\n", "if", "iou", "is", "not", "None", ":", "\n", "            ", "iou", "=", "torch", ".", "cat", "(", "[", "iou", "[", "0", "]", "[", "None", ",", ":", ",", ":", "]", ",", "iou", "[", "1", "]", "[", "None", ",", ":", ",", ":", "]", "]", ")", "\n", "if", "self", ".", "iou_method", "==", "'s'", ":", "\n", "                ", "log_iou", "=", "torch", ".", "log", "(", "iou", "+", "1", ")", "\n", "", "elif", "self", ".", "iou_method", "==", "'h'", ":", "\n", "                ", "log_iou", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "iou", ",", "min", "=", "1e-6", ")", ")", "\n", "", "else", ":", "\n", "                ", "iou", "[", "iou", ">=", "1e-6", "]", "=", "1", "\n", "log_iou", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "iou", ",", "min", "=", "1e-6", ")", ")", "\n", "", "log_iou", "=", "log_iou", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "1", ",", "self", ".", "group", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "N", ",", "N", ")", "\n", "w_mn", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "w_g", ",", "min", "=", "1e-6", ")", ")", "+", "aff", "+", "log_iou", "\n", "", "else", ":", "\n", "            ", "w_mn", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "w_g", ",", "min", "=", "1e-6", ")", ")", "+", "aff", "\n", "# aff_softmax, [num_fg_classes * fc_dim[1], num_rois, num_rois]", "\n", "# only care about the relation with topk to remove noise information", "\n", "# pdb.set_trace()", "\n", "# try:", "\n", "", "top_k", "=", "min", "(", "N", ",", "self", ".", "topk", ")", "\n", "w_mn_topk", ",", "indices", "=", "torch", ".", "topk", "(", "w_mn", ",", "top_k", ",", "dim", "=", "2", ",", "\n", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "# except:", "\n", "# pdb.set_trace()", "\n", "res", "=", "torch", ".", "zeros_like", "(", "w_mn", ")", ".", "to", "(", "w_mn", ".", "device", ")", "\n", "\n", "w_mn_topk", "=", "F", ".", "softmax", "(", "w_mn_topk", ",", "dim", "=", "2", ")", "\n", "w_mn_topk", "=", "res", ".", "scatter", "(", "2", ",", "indices", ",", "w_mn_topk", ")", "\n", "w_mn_topk", "=", "w_mn_topk", ".", "view", "(", "num_fg_class", ",", "-", "1", ",", "N", ")", "\n", "# f_a: [num_fg_classes , num_rois, num_feat]", "\n", "# [num_fg_cls,fc_dim[1] * num_rois, num_feat ]", "\n", "output", "=", "torch", ".", "bmm", "(", "w_mn_topk", ",", "f_a", ")", "\n", "# [num_fg_cls,fc_dim[1] , num_rois, num_feat ]", "\n", "output", "=", "output", ".", "view", "(", "num_fg_class", ",", "self", ".", "fc_dim", "[", "1", "]", ",", "N", ",", "feat_dim", ")", "\n", "# [fc_dim[1], num_feat, num_rois, cls]", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "3", ",", "2", ",", "0", ")", "\n", "# output_t_reshape, [1, fc_dim[1] * feat_dim, num_rois, num_fg_classes]", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "self", ".", "fc_dim", "[", "1", "]", "*", "feat_dim", ",", "N", ",", "-", "1", ")", "\n", "# [1, 128, nroi, cls]", "\n", "output", "=", "self", ".", "conv1", "(", "output", ")", "\n", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "return", "output", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.ClsWiseRelationModule.__init__": [[134, 143], ["relation_module_bk.RelationModule.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "range", "range", "range", "range", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "appearance_feature_dim", "=", "1024", ",", "geo_feature_dim", "=", "64", ",", "\n", "fc_dim", "=", "(", "64", ",", "16", ")", ",", "group", "=", "16", ",", "dim", "=", "(", "1024", ",", "1024", ",", "1024", ")", ",", "nb_cls", "=", "2", ",", "topk", "=", "90", ")", ":", "\n", "        ", "super", "(", "ClsWiseRelationModule", ",", "self", ")", ".", "__init__", "(", "appearance_feature_dim", ",", "geo_feature_dim", ",", "fc_dim", ",", "group", ",", "dim", ")", "\n", "\n", "self", ".", "WG", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "geo_feature_dim", ",", "fc_dim", "[", "1", "]", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "int", "(", "nb_cls", "*", "nb_cls", ")", ")", "]", ")", "\n", "self", ".", "WK", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "appearance_feature_dim", ",", "dim", "[", "1", "]", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "int", "(", "nb_cls", "*", "nb_cls", ")", ")", "]", ")", "\n", "self", ".", "WQ", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "appearance_feature_dim", ",", "dim", "[", "0", "]", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "int", "(", "nb_cls", "*", "nb_cls", ")", ")", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "for", "_", "in", "range", "(", "int", "(", "nb_cls", "*", "nb_cls", ")", ")", "]", ")", "\n", "self", ".", "topk", "=", "topk", "\n", "", "def", "forward", "(", "self", ",", "f_a", ",", "position_embedding", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.ClsWiseRelationModule.forward": [[143, 183], ["f_a.permute.permute.size", "f_a.permute.permute.permute", "torch.split", "torch.split", "torch.split", "torch.split", "relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "w_mn.view.view.view", "f_a.permute.permute.contiguous().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.permute.permute.view", "output.permute.permute.permute", "output.permute.permute.contiguous().view", "relation_module_bk.ClsWiseRelationModule.conv1", "output.permute.permute.squeeze", "output.permute.permute.permute", "f.squeeze", "f_a.permute.permute.contiguous", "output.permute.permute.contiguous"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "f_a", ",", "position_embedding", ")", ":", "\n", "# f_a: [num_rois, num_fg_classes, feat_dim]", "\n", "# pdb.set_trace()", "\n", "\n", "        ", "N", ",", "num_fg_class", ",", "feat_dim", "=", "f_a", ".", "size", "(", ")", "\n", "# f_a = f_a.transpose(0, 1)", "\n", "# [cls, nroi, feat_dim ]", "\n", "f_a", "=", "f_a", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "f_a_cls", "=", "torch", ".", "split", "(", "f_a", ",", "1", ",", "dim", "=", "0", ")", "\n", "f_a_cls", "=", "[", "f", ".", "squeeze", "(", ")", "for", "f", "in", "f_a_cls", "]", "\n", "# pdb.set_trace()", "\n", "w_mn_11", "=", "self", ".", "_clswise_relation_op", "(", "f_a_cls", "[", "0", "]", ",", "f_a_cls", "[", "0", "]", ",", "position_embedding", "[", ":", ",", ":", "N", ",", ":", "N", ",", ":", "]", ",", "0", ")", "\n", "w_mn_12", "=", "self", ".", "_clswise_relation_op", "(", "f_a_cls", "[", "0", "]", ",", "f_a_cls", "[", "1", "]", ",", "position_embedding", "[", ":", ",", ":", "N", ",", "N", ":", ",", ":", "]", ",", "1", ")", "\n", "w_mn_21", "=", "self", ".", "_clswise_relation_op", "(", "f_a_cls", "[", "1", "]", ",", "f_a_cls", "[", "0", "]", ",", "position_embedding", "[", ":", ",", "N", ":", ",", ":", "N", ",", ":", "]", ",", "2", ")", "\n", "w_mn_22", "=", "self", ".", "_clswise_relation_op", "(", "f_a_cls", "[", "1", "]", ",", "f_a_cls", "[", "1", "]", ",", "position_embedding", "[", ":", ",", "N", ":", ",", "N", ":", ",", ":", "]", ",", "3", ")", "\n", "\n", "w_mn_sub1", "=", "torch", ".", "cat", "(", "[", "w_mn_11", ",", "w_mn_12", "]", ",", "dim", "=", "2", ")", "\n", "w_mn_sub2", "=", "torch", ".", "cat", "(", "[", "w_mn_21", ",", "w_mn_22", "]", ",", "dim", "=", "2", ")", "\n", "#[fc_dim[1], cls*nroi, cls*nroi]", "\n", "w_mn", "=", "torch", ".", "cat", "(", "[", "w_mn_sub1", ",", "w_mn_sub2", "]", ",", "dim", "=", "1", ")", "\n", "# normalized", "\n", "# w_mn = w_mn/2", "\n", "# wmn", "\n", "w_mn", "[", ":", ",", "N", ":", ",", ":", "N", "]", "=", "0", "\n", "w_mn", "[", ":", ",", ":", "N", ",", "N", ":", "]", "=", "0", "\n", "\n", "#[1, fc_dim[1]*cls*nroi, cls*nroi]", "\n", "w_mn", "=", "w_mn", ".", "view", "(", "1", ",", "-", "1", ",", "N", "*", "num_fg_class", ")", "\n", "f_a_reshape", "=", "f_a", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "N", "*", "num_fg_class", ",", "feat_dim", ")", "\n", "# [1,fc_dim[1]*cls*nroi, feat_dim ]", "\n", "output", "=", "torch", ".", "bmm", "(", "w_mn", ",", "f_a_reshape", ")", "\n", "output", "=", "output", ".", "view", "(", "self", ".", "fc_dim", "[", "1", "]", ",", "num_fg_class", ",", "N", ",", "feat_dim", ")", "\n", "output", "=", "output", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "# output_t_reshape, [1, fc_dim[1] * feat_dim, num_rois, num_fg_classes]", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "self", ".", "fc_dim", "[", "1", "]", "*", "feat_dim", ",", "N", ",", "-", "1", ")", "\n", "# [1, 128, nroi, cls]", "\n", "output", "=", "self", ".", "conv1", "(", "output", ")", "\n", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.ClsWiseRelationModule._clswise_relation_op": [[184, 225], ["f_k.size", "position_embedding.contiguous().view.contiguous().view.contiguous().view", "w_k.contiguous().view.contiguous().view.view", "w_k.contiguous().view.contiguous().view.permute", "w_k.contiguous().view.contiguous().view.contiguous().view", "w_q.contiguous().view.contiguous().view.view", "w_q.contiguous().view.contiguous().view.transpose", "w_q.contiguous().view.contiguous().view.contiguous().view", "w_g.contiguous().view.contiguous().view.view", "w_g.contiguous().view.contiguous().view.permute", "w_g.contiguous().view.contiguous().view.contiguous().view", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.zeros_like().to.scatter", "torch.zeros_like().to.scatter", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.log", "torch.log", "torch.log", "torch.log", "position_embedding.contiguous().view.contiguous().view.contiguous", "w_k.contiguous().view.contiguous().view.contiguous", "w_q.contiguous().view.contiguous().view.contiguous", "math.sqrt", "w_g.contiguous().view.contiguous().view.contiguous", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "float"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "_clswise_relation_op", "(", "self", ",", "f_k", ",", "f_q", ",", "position_embedding", ",", "idx", ")", ":", "\n", "        ", "'''\n        :param f_k: key featrue [ 1, n_roi, feat_dim]\n        :param f_q: query feature [1, n_roi, feat_dim]\n        :param position_embedding:\n        :param idx:\n        :return:\n        '''", "\n", "# pdb.set_trace()", "\n", "device", "=", "position_embedding", ".", "device", "\n", "N", ",", "feat_dim", "=", "f_k", ".", "size", "(", ")", "\n", "# f_a_reshape = f_a [num-roi*num-fg-cls, feat-dim]", "\n", "# [ num_rois * num_rois, fc_dim[0]]", "\n", "position_embedding", "=", "position_embedding", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "fc_dim", "[", "0", "]", ")", "\n", "w_g", "=", "self", ".", "relu", "[", "idx", "]", "(", "self", ".", "WG", "[", "idx", "]", "(", "position_embedding", ")", ")", "\n", "w_k", "=", "self", ".", "WK", "[", "idx", "]", "(", "f_k", ")", "\n", "# [ num_rpi, 16, 64 ]", "\n", "w_k", "=", "w_k", ".", "view", "(", "-", "1", ",", "N", ",", "self", ".", "group", ",", "self", ".", "dim_group", "[", "1", "]", ")", "\n", "# todo: check", "\n", "w_k", "=", "w_k", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "# k_data_batch, [ group, dim_group[1], num_rois,]", "\n", "w_k", "=", "w_k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "dim_group", "[", "1", "]", ",", "N", ")", "\n", "w_q", "=", "self", ".", "WQ", "[", "idx", "]", "(", "f_q", ")", "\n", "w_q", "=", "w_q", ".", "view", "(", "-", "1", ",", "N", ",", "self", ".", "group", ",", "self", ".", "dim_group", "[", "0", "]", ")", "\n", "w_q", "=", "w_q", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# q_data_batch, [num_fg_classes * group, num_rois, dim_group[0]]", "\n", "w_q", "=", "w_q", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "N", ",", "self", ".", "dim_group", "[", "0", "]", ")", "\n", "w_mn_appearance", "=", "(", "1.0", "/", "math", ".", "sqrt", "(", "float", "(", "self", ".", "dim_group", "[", "1", "]", ")", ")", ")", "*", "torch", ".", "bmm", "(", "w_q", ",", "w_k", ")", "\n", "w_g", "=", "w_g", ".", "view", "(", "-", "1", ",", "N", ",", "N", ",", "self", ".", "fc_dim", "[", "1", "]", ")", "\n", "#  [1, fc_dim[1], num_rois, num_rois]", "\n", "w_g", "=", "w_g", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "#  [1 * fc_dim[1], num_rois, num_rois]", "\n", "w_g", "=", "w_g", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "N", ",", "N", ")", "\n", "w_mn", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "w_g", ",", "min", "=", "1e-6", ")", ")", "+", "w_mn_appearance", "\n", "\n", "w_mn_topk", ",", "indices", "=", "torch", ".", "topk", "(", "w_mn", ",", "self", ".", "topk", ",", "dim", "=", "2", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "res", "=", "torch", ".", "zeros_like", "(", "w_mn", ")", ".", "to", "(", "device", ")", "\n", "w_mn_topk", "=", "F", ".", "softmax", "(", "w_mn_topk", ",", "dim", "=", "2", ")", "\n", "w_mn_topk", "=", "res", ".", "scatter", "(", "2", ",", "indices", ",", "w_mn_topk", ")", "\n", "# w_mn = F.softmax(w_mn, dim=2)", "\n", "return", "w_mn_topk", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.AppearanceIntraRelationModule.__init__": [[227, 236], ["relation_module_bk.ClsWiseRelationModule.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "appearance_feature_dim", "=", "1024", ",", "geo_feature_dim", "=", "64", ",", "\n", "fc_dim", "=", "(", "64", ",", "16", ")", ",", "group", "=", "16", ",", "dim", "=", "(", "1024", ",", "1024", ",", "1024", ")", ",", "topk", "=", "90", ")", ":", "\n", "        ", "super", "(", "AppearanceIntraRelationModule", ",", "self", ")", ".", "__init__", "(", "appearance_feature_dim", ",", "geo_feature_dim", ",", "fc_dim", ",", "group", ",", "dim", ")", "\n", "\n", "self", ".", "WG", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "geo_feature_dim", ",", "fc_dim", "[", "1", "]", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "WK", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "appearance_feature_dim", ",", "dim", "[", "1", "]", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "WQ", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "appearance_feature_dim", ",", "dim", "[", "0", "]", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "topk", "=", "topk", "\n", "", "def", "forward", "(", "self", ",", "f_a", ",", "position_embedding", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.AppearanceIntraRelationModule.forward": [[236, 266], ["f_a.contiguous().view.contiguous().view.size", "f_a.contiguous().view.contiguous().view.permute", "torch.split", "torch.split", "torch.split", "torch.split", "relation_module_bk.AppearanceIntraRelationModule._clswise_relation_op", "relation_module_bk.AppearanceIntraRelationModule._clswise_relation_op", "f_a.contiguous().view.contiguous().view.contiguous().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "output.permute.permute.view", "output.permute.permute.permute", "output.permute.permute.contiguous().view", "relation_module_bk.AppearanceIntraRelationModule.conv1", "output.permute.permute.squeeze", "output.permute.permute.permute", "f.squeeze", "int", "relation_module_bk.AppearanceIntraRelationModule.view", "relation_module_bk.AppearanceIntraRelationModule.view", "f_a.contiguous().view.contiguous().view.contiguous", "output.permute.permute.contiguous"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "f_a", ",", "position_embedding", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "N", ",", "num_fg_class", ",", "feat_dim", "=", "f_a", ".", "size", "(", ")", "\n", "# f_a = f_a.transpose(0, 1)", "\n", "f_a", "=", "f_a", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "# f_a_reshape [num-roi*num-fg-cls, feat-dim]", "\n", "f_a_cls", "=", "torch", ".", "split", "(", "f_a", ",", "1", ",", "dim", "=", "0", ")", "\n", "f_a_cls", "=", "[", "f", ".", "squeeze", "(", ")", "for", "f", "in", "f_a_cls", "]", "\n", "w_mn_12", "=", "self", ".", "_clswise_relation_op", "(", "f_a_cls", "[", "0", "]", ",", "f_a_cls", "[", "1", "]", ",", "position_embedding", "[", ":", ",", ":", "N", ",", "N", ":", ",", ":", "]", ",", "0", ")", "\n", "w_mn_21", "=", "self", ".", "_clswise_relation_op", "(", "f_a_cls", "[", "1", "]", ",", "f_a_cls", "[", "0", "]", ",", "position_embedding", "[", ":", ",", "N", ":", ",", ":", "N", ",", ":", "]", ",", "1", ")", "\n", "# pdb.set_trace()", "\n", "# w_mn = torch.cat([w_mn_12, w_mn_21], dim=0)", "\n", "# w_mn = w_mn.view(1, int(N *2), -1)", "\n", "f_a", "=", "f_a", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "int", "(", "N", "*", "2", ")", ",", "feat_dim", ")", "\n", "# pdb.set_trace()", "\n", "output_1", "=", "torch", ".", "bmm", "(", "w_mn_12", ".", "view", "(", "1", ",", "-", "1", ",", "N", ")", ",", "f_a", "[", ":", ",", "N", ":", ",", ":", "]", ")", "\n", "output_2", "=", "torch", ".", "bmm", "(", "w_mn_21", ".", "view", "(", "1", ",", "-", "1", ",", "N", ")", ",", "f_a", "[", ":", ",", ":", "N", ",", ":", "]", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output_1", ",", "output_2", "]", ")", "\n", "# pdb.set_trace()", "\n", "# [num_fg_cls,fc_dim[1] , num_rois, num_feat ]", "\n", "output", "=", "output", ".", "view", "(", "2", ",", "self", ".", "fc_dim", "[", "1", "]", ",", "N", ",", "feat_dim", ")", "\n", "# [fc_dim[1], num_feat, num_rois, cls]", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "3", ",", "2", ",", "0", ")", "\n", "# output_t_reshape, [1, fc_dim[1] * feat_dim, num_rois, num_fg_classes]", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "self", ".", "fc_dim", "[", "1", "]", "*", "feat_dim", ",", "N", ",", "-", "1", ")", "\n", "# [1, 128, nroi, cls]", "\n", "output", "=", "self", ".", "conv1", "(", "output", ")", "\n", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.IntraRelationModule.__init__": [[269, 278], ["relation_module_bk.ClsWiseRelationModule.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "appearance_feature_dim", "=", "1024", ",", "geo_feature_dim", "=", "64", ",", "\n", "fc_dim", "=", "(", "64", ",", "16", ")", ",", "group", "=", "16", ",", "dim", "=", "(", "1024", ",", "1024", ",", "1024", ")", ",", "topk", "=", "90", ")", ":", "\n", "        ", "super", "(", "IntraRelationModule", ",", "self", ")", ".", "__init__", "(", "appearance_feature_dim", ",", "geo_feature_dim", ",", "fc_dim", ",", "group", ",", "dim", ")", "\n", "\n", "self", ".", "WG", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "geo_feature_dim", ",", "fc_dim", "[", "1", "]", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "WK", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "appearance_feature_dim", ",", "dim", "[", "1", "]", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "WQ", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "appearance_feature_dim", ",", "dim", "[", "0", "]", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "topk", "=", "topk", "\n", "", "def", "forward", "(", "self", ",", "f_a", ",", "position_embedding", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.IntraRelationModule.forward": [[278, 315], ["f_a.view.view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.split", "torch.split", "torch.split", "torch.split", "relation_module_bk.IntraRelationModule._clswise_relation_op", "relation_module_bk.IntraRelationModule._clswise_relation_op", "f_a.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "output.permute.permute.view", "output.permute.permute.permute", "output.permute.permute.contiguous().view", "relation_module_bk.IntraRelationModule.conv1", "output.permute.permute.squeeze", "output.permute.permute.permute", "f.squeeze", "int", "relation_module_bk.IntraRelationModule.view", "relation_module_bk.IntraRelationModule.view", "output.permute.permute.contiguous"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.ClsWiseRelationModule._clswise_relation_op", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "f_a", ",", "position_embedding", ")", ":", "\n", "        ", "N", ",", "feat_dim", "=", "f_a", ".", "size", "(", ")", "\n", "# f_a = f_a.transpose(0, 1)", "\n", "# [cls, nroi, feat_dim ]", "\n", "# f_a = f_a.permute(1, 0, 2)", "\n", "# pdb.set_trace()", "\n", "f_a", "=", "torch", ".", "cat", "(", "[", "f_a", "[", "None", ",", ":", ",", ":", "]", ",", "f_a", "[", "None", ",", ":", ",", ":", "]", "]", ")", "\n", "f_a_cls", "=", "torch", ".", "split", "(", "f_a", ",", "1", ",", "dim", "=", "0", ")", "\n", "f_a_cls", "=", "[", "f", ".", "squeeze", "(", ")", "for", "f", "in", "f_a_cls", "]", "\n", "# pdb.set_trace()", "\n", "\n", "\n", "\n", "\n", "\n", "w_mn_12", "=", "self", ".", "_clswise_relation_op", "(", "f_a_cls", "[", "0", "]", ",", "f_a_cls", "[", "1", "]", ",", "position_embedding", "[", ":", ",", ":", "N", ",", "N", ":", ",", ":", "]", ",", "0", ")", "\n", "w_mn_21", "=", "self", ".", "_clswise_relation_op", "(", "f_a_cls", "[", "1", "]", ",", "f_a_cls", "[", "0", "]", ",", "position_embedding", "[", ":", ",", "N", ":", ",", ":", "N", ",", ":", "]", ",", "1", ")", "\n", "# pdb.set_trace()", "\n", "# w_mn = torch.cat([w_mn_12, w_mn_21], dim=0)", "\n", "# w_mn = w_mn.view(1, int(N *2), -1)", "\n", "f_a", "=", "f_a", ".", "view", "(", "1", ",", "int", "(", "N", "*", "2", ")", ",", "feat_dim", ")", "\n", "# pdb.set_trace()", "\n", "output_1", "=", "torch", ".", "bmm", "(", "w_mn_12", ".", "view", "(", "1", ",", "-", "1", ",", "N", ")", ",", "f_a", "[", ":", ",", "N", ":", ",", ":", "]", ")", "\n", "output_2", "=", "torch", ".", "bmm", "(", "w_mn_21", ".", "view", "(", "1", ",", "-", "1", ",", "N", ")", ",", "f_a", "[", ":", ",", ":", "N", ",", ":", "]", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output_1", ",", "output_2", "]", ")", "\n", "# pdb.set_trace()", "\n", "# [num_fg_cls,fc_dim[1] , num_rois, num_feat ]", "\n", "output", "=", "output", ".", "view", "(", "2", ",", "self", ".", "fc_dim", "[", "1", "]", ",", "N", ",", "feat_dim", ")", "\n", "# [fc_dim[1], num_feat, num_rois, cls]", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "3", ",", "2", ",", "0", ")", "\n", "# output_t_reshape, [1, fc_dim[1] * feat_dim, num_rois, num_fg_classes]", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "self", ".", "fc_dim", "[", "1", "]", "*", "feat_dim", ",", "N", ",", "-", "1", ")", "\n", "# [1, 128, nroi, cls]", "\n", "output", "=", "self", ".", "conv1", "(", "output", ")", "\n", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.__init__": [[318, 407], ["torch.Module.__init__", "cfg.clone", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "maskrcnn_benchmark.modeling.box_coder.BoxCoder", "torch.ReLU", "torch.ReLU", "int", "relation_module_bk.RelationModule", "relation_module_bk.ClsWiseRelationModule", "relation_module_bk.RelationModule", "torch.Linear", "torch.Linear", "relation_module_bk.Discriminative_Loss", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "relation_module_bk.AppearanceIntraRelationModule", "relation_module_bk.IntraRelationModule", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "is_teacher", "=", "False", ",", ")", ":", "\n", "        ", "super", "(", "DuplicationRemovalNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "self", ".", "reg_iou", "=", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "REG_IOU", "\n", "self", ".", "reg_iou_mask", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "REG_IOU_MSK", "\n", "self", ".", "discriminative", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "D_LOSS", "\n", "self", ".", "is_teacher", "=", "is_teacher", "\n", "# pdb.set_trace()", "\n", "self", ".", "first_n", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "FIRST_N", "\n", "self", ".", "NMS_thread", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "THREAD", "\n", "self", ".", "nms_rank_fc", "=", "nn", ".", "Linear", "(", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "ROI_FEAT_DIM", ",", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ",", "bias", "=", "True", ")", "\n", "self", ".", "roi_feat_embedding_fc", "=", "nn", ".", "Linear", "(", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "ROI_FEAT_DIM", ",", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ",", "bias", "=", "True", ")", "\n", "self", ".", "target_thresh", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "THREAD", "\n", "self", ".", "geo_feature_dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GEO_FEAT_DIM", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "USE_IOU", ":", "\n", "            ", "self", ".", "geo_feature_dim", "=", "int", "(", "self", ".", "geo_feature_dim", "/", "4", "*", "5", ")", "\n", "", "if", "not", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "CLS_WISE_RELATION", ":", "\n", "            ", "self", ".", "relation_module", "=", "RelationModule", "(", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ",", "\n", "geo_feature_dim", "=", "self", ".", "geo_feature_dim", ",", "\n", "fc_dim", "=", "(", "self", ".", "geo_feature_dim", ",", "16", ")", ",", "\n", "group", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GROUP", ",", "\n", "dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "HID_DIM", ",", "\n", "topk", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "TOPK", ",", "\n", "iou_method", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "IOU_METHOD", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relation_module", "=", "ClsWiseRelationModule", "(", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ",", "\n", "geo_feature_dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GEO_FEAT_DIM", ",", "\n", "fc_dim", "=", "(", "self", ".", "geo_feature_dim", ",", "16", ")", ",", "\n", "group", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GROUP", ",", "\n", "dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "HID_DIM", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "MUTRELATION", ":", "\n", "            ", "if", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_INTER", ":", "\n", "                ", "self", ".", "inter_relation", "=", "AppearanceIntraRelationModule", "(", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ",", "\n", "geo_feature_dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GEO_FEAT_DIM", ",", "\n", "fc_dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "FC_DIM", ",", "\n", "group", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GROUP", ",", "\n", "dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "HID_DIM", ",", "\n", "topk", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "TOPK", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "inter_relation", "=", "IntraRelationModule", "(", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ",", "\n", "geo_feature_dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GEO_FEAT_DIM", ",", "\n", "fc_dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "FC_DIM", ",", "\n", "group", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GROUP", ",", "\n", "dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "HID_DIM", ",", "\n", "topk", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "TOPK", ")", "\n", "", "", "if", "self", ".", "discriminative", ":", "\n", "            ", "self", ".", "relation_module_d", "=", "RelationModule", "(", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ",", "\n", "geo_feature_dim", "=", "self", ".", "geo_feature_dim", ",", "\n", "fc_dim", "=", "(", "self", ".", "geo_feature_dim", ",", "16", ")", ",", "\n", "group", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GROUP", ",", "\n", "dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "HID_DIM", ",", "\n", "topk", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "TOPK", ",", "\n", "iou_method", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "IOU_METHOD", ")", "\n", "self", ".", "classifier_d", "=", "nn", ".", "Linear", "(", "128", ",", "8", ",", "bias", "=", "True", ")", "\n", "self", ".", "d_loss", "=", "Discriminative_Loss", "(", ")", "\n", "\n", "\n", "# self.relu2 = nn.ReLU(inplace=True)", "\n", "\n", "# self.inter_classifier = nn.Linear(128, len(self.target_thresh), bias= True)", "\n", "# self.ir_conv = nn.Linear(128, len(self.target_thresh), bias= True)", "\n", "# self.nms_logit_fc = nn.Linear(cfg.MODEL.RELATION_NMS.ROI_FEAT_DIM,1,bias=True)", "\n", "", "self", ".", "nms_fg_weight", "=", "torch", ".", "tensor", "(", "[", "1.", ",", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "WEIGHT", "]", ")", "\n", "self", ".", "mt_fg_weight", "=", "torch", ".", "tensor", "(", "[", "1.", ",", "10.", "]", ")", "\n", "self", ".", "alpha", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "ALPHA", "\n", "self", ".", "gamma", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GAMMA", "\n", "self", ".", "boxcoder", "=", "BoxCoder", "(", "weights", "=", "(", "10.", ",", "10.", ",", "5.", ",", "5.", ")", ")", "\n", "self", ".", "class_agnostic", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "CLASS_AGNOSTIC", "\n", "self", ".", "fg_class", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "-", "1", "\n", "if", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "MUTRELATION", "and", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "CONCAT", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "int", "(", "128", "*", "2", ")", ",", "len", "(", "self", ".", "target_thresh", ")", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "128", ",", "len", "(", "self", ".", "target_thresh", ")", ",", "bias", "=", "True", ")", "\n", "", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# self.BCEloss = nn.BCELoss()", "\n", "# self.class_weight = torch.FloatTensor([1, 3]).cuda()", "\n", "self", ".", "fg_thread", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "FG_THREAD", "\n", "self", ".", "detections_per_img", "=", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "DETECTIONS_PER_IMG", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "POS_NMS", "!=", "-", "1", ":", "\n", "            ", "self", ".", "nms", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "POS_NMS", "\n", "", "else", ":", "\n", "            ", "self", ".", "nms", "=", "None", "\n", "# self.relu2 = nn.ReLU(inplace=True)", "\n", "# self.refined_matcher = make_refined_matcher(cfg)", "\n", "", "self", ".", "student_loss", "=", "cfg", ".", "MT", ".", "NMS_LOSS_TYPE", "\n", "self", ".", "mode", "=", "None", "\n", "", "def", "set_teacher_mode", "(", "self", ",", "mode", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.set_teacher_mode": [[407, 409], ["None"], "methods", ["None"], ["", "def", "set_teacher_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.forward": [[410, 944], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relation_module_bk.DuplicationRemovalNetwork.roi_feat_embedding_fc", "appearance_feature.split.split.split", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relation_module_bk.DuplicationRemovalNetwork.nms_rank_fc", "len", "f.get_field", "feature.size", "torch.masked_select.append", "torch.masked_select.append", "relation_module_bk.DuplicationRemovalNetwork.append", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "relation_module_bk.extract_multi_position_matrix", "relation_module_bk.DuplicationRemovalNetwork.relation_module", "relation_module_bk.DuplicationRemovalNetwork.relu1", "torch.masked_select.view", "torch.masked_select.view", "relation_module_bk.DuplicationRemovalNetwork.classifier", "torch.masked_select.view", "torch.masked_select.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relation_module_bk.extract_multi_position_matrix", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relation_module_bk.DuplicationRemovalNetwork.relation_module", "relation_module_bk.DuplicationRemovalNetwork.relu1", "relation_module_bk.DuplicationRemovalNetwork.classifier", "torch.masked_select.view", "torch.masked_select.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "relation_module_bk.DuplicationRemovalNetwork.prepare_ranking_student", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "relation_module_bk.DuplicationRemovalNetwork.prepare_ranking", "f.get_field", "f.bbox.reshape", "f.get_field().reshape", "f.get_field", "relation_module_bk.extract_rank_embedding", "relation_module_bk.DuplicationRemovalNetwork.relation_module_d", "torch.nn.functional.dropout.view", "relation_module_bk.DuplicationRemovalNetwork.classifier_d", "torch.nn.functional.dropout.view", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "len", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "relation_module_bk.DuplicationRemovalNetwork.inter_relation", "relation_module_bk.DuplicationRemovalNetwork.inter_relation", "torch.masked_select.view", "torch.masked_select.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.masked_select.view", "torch.masked_select.view", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.masked_select.to", "torch.masked_select.to", "torch.masked_select.type", "torch.masked_select.type", "torch.masked_select.to", "torch.masked_select.to", "torch.masked_select.type", "torch.masked_select.type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.to", "torch.cat.to", "torch.cat.type", "torch.cat.type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "len", "relation_module_bk.DuplicationRemovalNetwork.squeeze", "int", "len", "torch.masked_select.gt", "torch.masked_select.gt", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relation_module_bk.DuplicationRemovalNetwork.d_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "relation_module_bk.DuplicationRemovalNetwork.adaptive_bce", "relation_module_bk.DuplicationRemovalNetwork.adaptive_bce", "dict", "f.get_field", "f.get_field", "f.get_field", "relation_module_bk.DuplicationRemovalNetwork.adaptive_bce_with_cls_balance", "f.get_field", "f.get_field", "relation_module_bk.DuplicationRemovalNetwork.adaptive_bce_with_cls_balance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dict", "relation_module_bk.DuplicationRemovalNetwork.merge_multi_thread_score_test", "scores.clamp_.clamp_.split", "bboxes.split.split.split", "F.dropout.split.split", "objectness.split.split.split", "all_scores.split.split.split", "zip", "f.get_field", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "print", "maskrcnn_benchmark.modeling.losses.combined_BCE", "scores.clamp_.clamp_.clamp_", "torch.nn.functional.dropout.split", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "len", "result.append", "int", "int", "int", "int", "f.get_field", "f.get_field", "f.get_field", "torch.nn.functional.binary_cross_entropy", "torch.nn.functional.binary_cross_entropy", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "distance.transpose.transpose.transpose", "_idx.transpose.transpose.transpose", "_iou.transpose", "_iou_t.long().sum.long().sum.long().sum", "enumerate", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.modeling.python_nms.cyto_nms", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "nuclei_id_list.tolist.tolist.tolist", "list_of_nuclei_id_list.append", "torch.full", "torch.full", "torch.full", "torch.full", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field.cpu", "image_thresh.item", "torch.nn.functional.kl_div", "torch.nn.functional.kl_div", "torch.full", "torch.full", "torch.full", "torch.full", "_iou_t.long().sum.long().sum.long", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.log", "torch.log", "torch.log", "torch.log", "maskrcnn_benchmark.modeling.losses.smooth_l1", "print", "torch.full", "torch.full", "torch.full", "torch.full"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.extract_multi_position_matrix", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.extract_multi_position_matrix", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.prepare_ranking_student", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.prepare_ranking", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.extract_rank_embedding", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.adaptive_bce", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.adaptive_bce", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.adaptive_bce_with_cls_balance", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.adaptive_bce_with_cls_balance", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.merge_multi_thread_score_test", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.combined_BCE", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.python_nms.cyto_nms", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.smooth_l1"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_student", "=", "False", ",", "idx_t", "=", "None", ",", "stratergy2", "=", "False", ")", ":", "\n", "\n", "# import pdb;pdb.set_trace()", "\n", "        ", "if", "is_student", "and", "stratergy2", ":", "\n", "# pdb.set_trace()", "\n", "            ", "appearance_feature", ",", "proposals", ",", "cls_score", ",", "box_reg", ",", "nms_idx", ",", "nms_result_t", ",", "nms_score", ",", "=", "x", "\n", "appearance_feature", "=", "appearance_feature", "\n", "cls_score", "=", "cls_score", "\n", "box_reg", "=", "box_reg", "\n", "device", "=", "appearance_feature", ".", "device", "\n", "self", ".", "device", "=", "device", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "sorted_boxlists", "=", "self", ".", "prepare_ranking_student", "(", "cls_score", ",", "\n", "box_reg", ",", "\n", "proposals", ",", "\n", "nms_idx", ",", "\n", "nms_result_t", ",", "\n", "nms_score", ",", "\n", "is_student", ",", ")", "\n", "\n", "\n", "", "", "else", ":", "\n", "            ", "appearance_feature", ",", "proposals", ",", "cls_score", ",", "box_reg", ",", "targets", "=", "x", "\n", "device", "=", "appearance_feature", ".", "device", "\n", "appearance_feature", "=", "appearance_feature", "\n", "cls_score", "=", "cls_score", "\n", "box_reg", "=", "box_reg", "\n", "self", ".", "device", "=", "device", "\n", "# pdb.set_trace()", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "sorted_boxlists", "=", "self", ".", "prepare_ranking", "(", "cls_score", ",", "\n", "box_reg", ",", "\n", "proposals", ",", "\n", "targets", ",", "\n", "is_student", ",", "\n", "reg_iou", "=", "self", ".", "reg_iou", ")", "\n", "# concate value from different images", "\n", "# pdb.set_trace()", "\n", "", "", "boxes_per_image", "=", "[", "len", "(", "f", ")", "for", "f", "in", "proposals", "]", "\n", "# pdb.set_trace()", "\n", "idxs", "=", "[", "f", ".", "get_field", "(", "'sorted_idx'", ")", "for", "f", "in", "sorted_boxlists", "]", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'scores'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "bboxes", "=", "torch", ".", "cat", "(", "[", "f", ".", "bbox", ".", "reshape", "(", "-", "1", ",", "self", ".", "fg_class", ",", "4", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "objectness", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'objectness'", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "fg_class", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "all_scores", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'all_scores'", ")", "for", "f", "in", "\n", "sorted_boxlists", "]", ")", "\n", "# sort_idx = torch.cat([f.get_field('sorted_idx') for f in", "\n", "#      sorted_boxlists])", "\n", "# add iou information", "\n", "image_sizes", "=", "[", "f", ".", "size", "for", "f", "in", "sorted_boxlists", "]", "\n", "# pdb.set_trace()", "\n", "sorted_boxes_per_image", "=", "[", "[", "*", "f", ".", "shape", "]", "[", "0", "]", "for", "f", "in", "idxs", "]", "\n", "appearance_feature", "=", "self", ".", "roi_feat_embedding_fc", "(", "appearance_feature", ")", "\n", "appearance_feature", "=", "appearance_feature", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "sorted_features", "=", "[", "]", "\n", "nms_rank_embedding", "=", "[", "]", "\n", "# pdb.set_trace()", "\n", "for", "id", ",", "feature", ",", "box_per_image", "in", "zip", "(", "idxs", ",", "appearance_feature", ",", "boxes_per_image", ")", ":", "\n", "            ", "feature", "=", "feature", "[", "id", "]", "\n", "# pdb.set_trace()", "\n", "size", "=", "feature", ".", "size", "(", ")", "\n", "if", "size", "[", "0", "]", "<=", "self", ".", "first_n", ":", "\n", "                ", "first_n", "=", "size", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "first_n", "=", "self", ".", "first_n", "\n", "", "sorted_features", ".", "append", "(", "feature", ")", "\n", "#[rank_dim * batch , feat_dim]", "\n", "nms_rank_embedding", ".", "append", "(", "extract_rank_embedding", "(", "first_n", ",", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "ROI_FEAT_DIM", ",", "device", "=", "feature", ".", "device", ")", ")", "\n", "#  [first_n * batchsize, num_fg_classes, 128]", "\n", "\n", "", "sorted_features", "=", "torch", ".", "cat", "(", "sorted_features", ",", "dim", "=", "0", ")", "\n", "nms_rank_embedding", "=", "torch", ".", "cat", "(", "nms_rank_embedding", ",", "dim", "=", "0", ")", "\n", "nms_rank_embedding", "=", "self", ".", "nms_rank_fc", "(", "nms_rank_embedding", ")", "\n", "# pdb.set_trace()", "\n", "if", "not", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "MUTRELATION", ":", "\n", "\n", "            ", "sorted_features", "=", "sorted_features", "+", "nms_rank_embedding", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "boxes_cls_1", "=", "BoxList", "(", "bboxes", "[", ":", ",", "0", ",", ":", "]", ",", "image_sizes", "[", "0", "]", ")", "\n", "boxes_cls_2", "=", "BoxList", "(", "bboxes", "[", ":", ",", "1", ",", ":", "]", ",", "image_sizes", "[", "0", "]", ")", "\n", "iou_1", "=", "boxlist_iou", "(", "boxes_cls_1", ",", "boxes_cls_1", ")", "\n", "iou_2", "=", "boxlist_iou", "(", "boxes_cls_2", ",", "boxes_cls_2", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "USE_IOU", ":", "\n", "                ", "iou", "=", "[", "iou_1", ",", "iou_2", "]", "\n", "", "else", ":", "\n", "                ", "iou", "=", "None", "\n", "# pdb.set_trace()", "\n", "", "nms_position_matrix", "=", "extract_multi_position_matrix", "(", "bboxes", ",", "None", ",", "self", ".", "geo_feature_dim", ",", "1000", ",", "\n", "clswise", "=", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "CLS_WISE_RELATION", ",", ")", "\n", "nms_attention_1", "=", "self", ".", "relation_module", "(", "sorted_features", ",", "nms_position_matrix", ",", "iou", ")", "\n", "if", "self", ".", "discriminative", ":", "\n", "                ", "nms_attention_2", "=", "self", ".", "relation_module_d", "(", "sorted_features", ",", "nms_position_matrix", ",", "iou", ")", "\n", "d_features", "=", "sorted_features", "+", "nms_attention_2", "\n", "# d_features = nms_attention_2", "\n", "d_features", "=", "d_features", ".", "view", "(", "-", "1", ",", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "DO", ">", "0", ":", "\n", "                    ", "d_features", "=", "F", ".", "dropout", "(", "d_features", ",", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "DO", ",", "self", ".", "training", ")", "\n", "", "d_features", "=", "self", ".", "classifier_d", "(", "d_features", ")", "\n", "# 90\uff0c2\uff0c16", "\n", "d_features", "=", "d_features", ".", "view", "(", "-", "1", ",", "self", ".", "fg_class", ",", "8", ")", "\n", "# pdb.set_trace()", "\n", "# sorted_features = sorted_features.view(-1, self.fg_class, len(self.target_thresh))", "\n", "# if self.reg_iou:", "\n", "#     nms_attention_2 = self.relation_module_reg_iou(sorted_features,  nms_position_matrix, iou)", "\n", "#     sorted_features_reg_iou = sorted_features + nms_attention_2", "\n", "#     sorted_features_reg_iou = F.relu(sorted_features_reg_iou)", "\n", "#     sorted_features_reg_iou = sorted_features_reg_iou.view(-1, self.cfg.MODEL.RELATION_NMS.APPEARANCE_FEAT_DIM)", "\n", "#     sorted_features_reg_iou = self.classifier_2(sorted_features_reg_iou)", "\n", "#     sorted_features_reg_iou = sorted_features_reg_iou.view(-1, self.fg_class, len(self.target_thresh))", "\n", "\n", "", "sorted_features", "=", "sorted_features", "+", "nms_attention_1", "\n", "sorted_features", "=", "self", ".", "relu1", "(", "sorted_features", ")", "\n", "# [first_n * num_fg_classes, 128]", "\n", "sorted_features", "=", "sorted_features", ".", "view", "(", "-", "1", ",", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "DO", ">", "0", ":", "\n", "                ", "sorted_features", "=", "F", ".", "dropout", "(", "sorted_features", ",", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "DO", ",", "self", ".", "training", ")", "\n", "", "sorted_features", "=", "self", ".", "classifier", "(", "sorted_features", ")", "\n", "# logit_reshape, [first_n, num_fg_classes, num_thread]", "\n", "sorted_features", "=", "sorted_features", ".", "view", "(", "-", "1", ",", "self", ".", "fg_class", ",", "len", "(", "self", ".", "target_thresh", ")", ")", "\n", "if", "not", "self", ".", "reg_iou", ":", "\n", "                ", "sorted_features", "=", "torch", ".", "sigmoid", "(", "sorted_features", ")", "\n", "# labels = labels.view(-1,1)", "\n", "# labels = torch.clamp(labels, max=1.0)", "\n", "# class_weight = self.class_weight[labels.view(-1)].view(-1,1)", "\n", "# pdb.set_trace()", "\n", "", "scores", "=", "torch", ".", "cat", "(", "[", "scores", "[", ":", ",", ":", ",", "None", "]", "]", "*", "len", "(", "self", ".", "target_thresh", ")", ",", "dim", "=", "-", "1", ")", "\n", "# [first_n, num_fg_classes, num_thread]", "\n", "# scores = sorted_features * scores", "\n", "# scores  = sorted_features", "\n", "# pdb.set_trace()", "\n", "", "else", ":", "\n", "            ", "nms_rank_embedding", "=", "nms_rank_embedding", "[", ":", ",", "None", ",", ":", "]", "\n", "sorted_features", "=", "sorted_features", "+", "nms_rank_embedding", "\n", "\n", "nms_position_matrix", "=", "extract_multi_position_matrix", "(", "bboxes", ",", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GEO_FEAT_DIM", ",", "1000", ",", "\n", "clswise", "=", "True", ")", "\n", "N", "=", "nms_position_matrix", ".", "shape", "[", "1", "]", "\n", "# pdb.set_trace()", "\n", "intra_position", "=", "torch", ".", "cat", "(", "[", "nms_position_matrix", "[", ":", ",", ":", "int", "(", "N", "/", "2", ")", ",", ":", "int", "(", "N", "/", "2", ")", "]", ",", "\n", "nms_position_matrix", "[", ":", ",", "int", "(", "N", "/", "2", ")", ":", ",", "int", "(", "N", "/", "2", ")", ":", "]", "]", ")", "\n", "# inter_position = torch.cat([nms_position_matrix[:, :N/2, N/2:], nms_position_matrix[:, N/2: ,  :N/2 ]])", "\n", "nms_attention_1", "=", "self", ".", "relation_module", "(", "sorted_features", ",", "intra_position", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_INTER", ":", "\n", "                ", "inter_scores", "=", "self", ".", "inter_relation", "(", "sorted_features", ",", "nms_position_matrix", ")", "\n", "", "else", ":", "\n", "                ", "inter_scores", "=", "self", ".", "inter_relation", "(", "nms_rank_embedding", ".", "squeeze", "(", ")", ",", "nms_position_matrix", ")", "\n", "# inter_scores = self.relu2(inter_scores)", "\n", "# pdb.set_trace()", "\n", "", "sorted_features", "=", "sorted_features", "+", "nms_attention_1", "\n", "if", "not", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "CONCAT", ":", "\n", "                ", "sorted_features", "=", "sorted_features", "+", "inter_scores", "\n", "sorted_features", "=", "sorted_features", ".", "view", "(", "-", "1", ",", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ")", "\n", "", "else", ":", "\n", "# pdb.set_trace()", "\n", "                ", "sorted_features", "=", "torch", ".", "cat", "(", "[", "sorted_features", ",", "inter_scores", "]", ",", "dim", "=", "2", ")", "\n", "sorted_features", "=", "sorted_features", ".", "view", "(", "-", "1", ",", "int", "(", "2", "*", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ")", ")", "\n", "", "sorted_features", "=", "self", ".", "relu1", "(", "sorted_features", ")", "\n", "# [first_n * num_fg_classes, 128]", "\n", "\n", "# inter_scores = inter_scores.view(-1, self.cfg.MODEL.RELATION_NMS.APPEARANCE_FEAT_DIM)", "\n", "sorted_features", "=", "self", ".", "classifier", "(", "sorted_features", ")", "\n", "# inter_scores = self.inter_classifier(inter_scores)", "\n", "# pdb.set_trace()", "\n", "# logit_reshape, [first_n, num_fg_classes, num_thread]", "\n", "sorted_features", "=", "sorted_features", ".", "view", "(", "-", "1", ",", "self", ".", "fg_class", ",", "len", "(", "self", ".", "target_thresh", ")", ")", "\n", "# inter_scores = inter_scores.view(-1, self.fg_class, len(self.target_thresh))", "\n", "sorted_features", "=", "torch", ".", "sigmoid", "(", "sorted_features", ")", "\n", "# inter_scores = torch.sigmoid(inter_scores)", "\n", "\n", "\n", "# labels = labels.view(-1,1)", "\n", "# labels = torch.clamp(labels, max=1.0)", "\n", "# class_weight = self.class_weight[labels.view(-1)].view(-1,1)", "\n", "# pdb.set_trace()", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "scores", "[", ":", ",", ":", ",", "None", "]", "]", "*", "len", "(", "self", ".", "target_thresh", ")", ",", "dim", "=", "-", "1", ")", "\n", "# inter_scores = torch.cat([inter_scores[:,:]] * len(self.target_thresh), dim = -1)", "\n", "# [first_n, num_fg_classes, num_thread]", "\n", "# pdb.set_trace()", "\n", "# todo:", "\n", "# scores = sorted_features * scores", "\n", "", "loss_dict", "=", "{", "}", "\n", "if", "self", ".", "training", "and", "not", "is_student", ":", "\n", "\n", "\n", "            ", "if", "self", ".", "reg_iou", ":", "\n", "\n", "# when use regression donot do sorted_features = scores * sorted_features", "\n", "                ", "reg_label", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'labels_iou_reg'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "reg_label", "=", "reg_label", ".", "to", "(", "scores", ".", "device", ")", "\n", "reg_label", "=", "reg_label", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "if", "self", ".", "reg_iou_mask", ":", "\n", "                    ", "positive_mask", "=", "reg_label", ".", "gt", "(", "0.", ")", "\n", "reg_label", "=", "torch", ".", "masked_select", "(", "reg_label", ",", "positive_mask", ")", "\n", "sorted_features", "=", "torch", ".", "masked_select", "(", "sorted_features", ",", "positive_mask", ")", "\n", "\n", "", "sorted_features", "=", "sorted_features", ".", "to", "(", "scores", ".", "device", ")", "\n", "sorted_features", "=", "sorted_features", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "if", "self", ".", "discriminative", ":", "\n", "# 90 2 1", "\n", "                    ", "d_label", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'labels_iou_d'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "# pdb.set_trace()", "\n", "d_loss", "=", "self", ".", "d_loss", "(", "d_features", ",", "d_label", ")", "\n", "loss_dict", "[", "'d_loss'", "]", "=", "d_loss", "\n", "", "if", "reg_label", ".", "shape", "is", "not", "None", ":", "\n", "                    ", "reg_iou_loss", "=", "F", ".", "mse_loss", "(", "reg_label", ",", "sorted_features", ")", "\n", "# pdb.set_trace()", "\n", "", "else", ":", "\n", "                    ", "reg_iou_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "", "loss_dict", "[", "'nms_loss'", "]", "=", "reg_iou_loss", "\n", "\n", "# pdb.set_trace()", "\n", "", "else", ":", "\n", "                ", "sorted_features", "=", "scores", "*", "sorted_features", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'labels'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "\n", "labels", "=", "labels", ".", "to", "(", "scores", ".", "device", ")", "\n", "labels", "=", "labels", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "\n", "# WEIGHTED NMS", "\n", "# pdb.set_trace()", "\n", "if", "self", ".", "student_loss", "==", "'bce'", ":", "\n", "                    ", "nms_loss", "=", "self", ".", "adaptive_bce", "(", "scores", ",", "sorted_features", ",", "labels", ")", "\n", "", "else", ":", "\n", "                    ", "nms_loss", "=", "0.5", "*", "self", ".", "adaptive_bce_with_cls_balance", "(", "\n", "scores", ",", "sorted_features", ",", "\n", "labels", ",", "fg", "=", "self", ".", "nms_fg_weight", ")", "\n", "", "loss_dict", "[", "'nms_loss'", "]", "=", "nms_loss", "\n", "# self.nms_fg_weight = self.nms_fg_weight.to(device)", "\n", "# normalize_factor = labels.sum()/labels.numel()*4", "\n", "# weight = self.nms_fg_weight[labels.data.view(-1).long(", "\n", "#", "\n", "# )].view_as(labels)/normalize_factor", "\n", "# nms_loss = F.binary_cross_entropy(sorted_features,", "\n", "#                                   labels,", "\n", "#                                   weight)", "\n", "# nms_loss = F.binary_cross_entropy(sorted_features, labels,)", "\n", "\n", "# labels = labels.split(boxes_per_image, dim  = 0)", "\n", "# sorted_boxlists = sorted_boxlists.split(boxes_per_image, dim =0)", "\n", "\n", "", "return", "None", ",", "loss_dict", "\n", "", "elif", "is_student", "and", "stratergy2", ":", "\n", "# nms_score = f.sig(sorted feature), nms_result_t =", "\n", "# nms_score* score", "\n", "# pdb.set_trace()", "\n", "            ", "teacher_sorted_feauture", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "\n", "'nms_score'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "teacher_sorted_result", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "\n", "'nms_result_t'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "# teacher_score =torch.cat([f.get_field('nms_result_t')", "\n", "#                           for f in sorted_boxlists])", "\n", "if", "self", ".", "student_loss", "==", "'bce'", ":", "\n", "# pdb.set_trace()", "\n", "                ", "teacher_sorted_result", "[", "teacher_sorted_result", ">", "self", ".", "fg_thread", "]", "=", "1", "\n", "teacher_sorted_result", "[", "teacher_sorted_result", "<=", "self", ".", "fg_thread", "]", "=", "0", "\n", "nms_loss", "=", "self", ".", "adaptive_bce", "(", "scores", ",", "\n", "sorted_features", ",", "\n", "teacher_sorted_feauture", ",", "teacher_sorted_result", ")", "\n", "#", "\n", "#", "\n", "# gap =  - torch.abs(scores -", "\n", "#                    sorted_features).view_as(teacher_sorted_feauture)", "\n", "# normalize_factor = teacher_sorted_result.sum() / teacher_sorted_result.numel() * 4", "\n", "# cls_balance_weight = self.nms_fg_weight[", "\n", "#                          teacher_sorted_result.data.view(-1).long(", "\n", "# )].view_as(teacher_sorted_result)/normalize_factor", "\n", "# weight = (1 - self.alpha*torch.exp(gap)) * cls_balance_weight", "\n", "# nms_loss = F.binary_cross_entropy(scores.view_as(", "\n", "#     teacher_sorted_feauture),teacher_sorted_feauture, weight)", "\n", "", "elif", "self", ".", "student_loss", "==", "'wbce'", ":", "\n", "                ", "teacher_sorted_result", "[", "\n", "teacher_sorted_result", ">", "self", ".", "fg_thread", "]", "=", "1", "\n", "teacher_sorted_result", "[", "\n", "teacher_sorted_result", "<=", "self", ".", "fg_thread", "]", "=", "0", "\n", "nms_loss", "=", "self", ".", "adaptive_bce_with_cls_balance", "(", "scores", ",", "\n", "sorted_features", ",", "\n", "teacher_sorted_feauture", ",", "\n", "teacher_sorted_result", ",", "\n", "fg", "=", "\n", "self", ".", "mt_fg_weight", ")", "\n", "\n", "", "elif", "self", ".", "student_loss", "==", "'mse'", ":", "\n", "                ", "nms_loss", "=", "F", ".", "mse_loss", "(", "scores", "[", ":", ",", ":", ",", "0", "]", ",", "\n", "teacher_sorted_feauture", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'do not support %s'", "%", "self", ".", "student_loss", ")", "\n", "\n", "", "return", "None", ",", "dict", "(", "mt_nms_loss", "=", "nms_loss", ")", "\n", "\n", "\n", "", "elif", "self", ".", "training", "and", "is_student", ":", "\n", "            ", "scores", "=", "scores", "*", "sorted_features", "\n", "# pdb.set_trace()", "\n", "if", "self", ".", "reg_iou", ":", "\n", "                ", "nms_score", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'mt_nms'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "\n", "nms_loss", "=", "F", ".", "mse_loss", "(", "scores", ",", "nms_score", ")", "\n", "", "else", ":", "\n", "                ", "labels", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'labels'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "# pdb.set_trace()", "\n", "nms_score", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'mt_nms'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "# convert weight to 1 for cls 0", "\n", "if", "self", ".", "student_loss", "==", "'wbce'", ":", "\n", "# pdb.set_trace()", "\n", "                    ", "nms_loss", "=", "combined_BCE", "(", "scores", ",", "labels", ",", "nms_score", ")", "\n", "", "elif", "self", ".", "student_loss", "==", "'bce'", ":", "\n", "                    ", "nms_loss", "=", "F", ".", "binary_cross_entropy", "(", "scores", ",", "labels", ")", "\n", "", "elif", "self", ".", "student_loss", "==", "'mse'", ":", "\n", "# pdb.set_trace()", "\n", "                    ", "nms_loss", "=", "F", ".", "mse_loss", "(", "scores", ",", "nms_score", ")", "\n", "", "elif", "self", ".", "student_loss", "==", "'kl'", ":", "\n", "                    ", "nms_loss", "=", "F", ".", "kl_div", "(", "torch", ".", "log", "(", "scores", ")", ",", "nms_score", ")", "\n", "", "elif", "self", ".", "student_loss", "==", "'smooth'", ":", "\n", "                    ", "nms_loss", "=", "smooth_l1", "(", "scores", ",", "nms_score", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'error, nms loss do not support %s'", "%", "self", ".", "student_loss", ")", "\n", "# nms_loss = classification_loss(self.student_loss,", "\n", "#                                scores,labels,nms_score)", "\n", "\n", "# if self.student_loss =='kl':", "\n", "#     nms_loss = KLloss(scores,nms_score)", "\n", "# elif self.student_loss =='bce':", "\n", "#     nms_loss = BCE(scores,nms_score)", "\n", "# else:", "\n", "#     nms_loss = weighted_BCE(scores,labels,nms_score)", "\n", "", "", "return", "None", ",", "dict", "(", "mt_nms_loss", "=", "nms_loss", ")", "\n", "", "elif", "self", ".", "mode", "==", "'train'", ":", "\n", "# todo:check condition", "\n", "            ", "scores", "=", "sorted_features", "*", "scores", "\n", "return", "idxs", ",", "sorted_features", ",", "scores", "\n", "\n", "", "else", ":", "\n", "            ", "input_scores", "=", "scores", "\n", "\n", "if", "self", ".", "reg_iou", ":", "\n", "# pdb.set_trace()", "\n", "                ", "scores", "=", "sorted_features", "*", "(", "scores", ">", "self", ".", "fg_thread", ")", ".", "float", "(", ")", "\n", "scores", "=", "scores", ".", "clamp_", "(", "0.", ",", "1.", ")", "\n", "# pdb.set_trace()", "\n", "\n", "", "else", ":", "\n", "                ", "scores", "=", "sorted_features", "*", "scores", "\n", "", "scores", "=", "self", ".", "merge_multi_thread_score_test", "(", "scores", ")", "\n", "scores", "=", "scores", ".", "split", "(", "sorted_boxes_per_image", ",", "dim", "=", "0", ")", "\n", "bboxes", "=", "bboxes", ".", "split", "(", "sorted_boxes_per_image", ",", "dim", "=", "0", ")", "\n", "input_scores", "=", "input_scores", ".", "split", "(", "sorted_boxes_per_image", ",", "dim", "=", "0", ")", "\n", "objectness", "=", "objectness", ".", "split", "(", "sorted_boxes_per_image", ",", "dim", "=", "0", ")", "\n", "all_scores", "=", "all_scores", ".", "split", "(", "sorted_boxes_per_image", ",", "\n", "dim", "=", "0", ")", "\n", "if", "self", ".", "discriminative", ":", "\n", "                ", "input_scores", "=", "d_features", ".", "split", "(", "sorted_boxes_per_image", ",", "dim", "=", "0", ")", "\n", "\n", "# scores = [f.cpu().numpy() for f in scores]", "\n", "# bboxes = [f.cpu().numpy() for f in bboxes]", "\n", "", "result", "=", "[", "]", "\n", "# pdb.set_trace()", "\n", "for", "i_score", ",", "score", ",", "bbox", ",", "obj", ",", "image_size", ",", "prob_boxhead", "in", "zip", "(", "\n", "input_scores", ",", "\n", "scores", ",", "\n", "bboxes", ",", "\n", "objectness", ",", "\n", "image_sizes", ",", "all_scores", ")", ":", "\n", "                ", "result_per_image", "=", "[", "]", "\n", "# for nuclei", "\n", "index", "=", "(", "score", "[", ":", ",", "1", "]", ">=", "self", ".", "fg_thread", ")", ".", "nonzero", "(", ")", "[", ":", ",", "\n", "0", "]", "\n", "# cls_scores = i_score[index, i,0]", "\n", "cls_scores", "=", "score", "[", "index", ",", "1", "]", "\n", "# pdb.set_trace()", "\n", "\n", "cls_scores_all", "=", "prob_boxhead", "[", "index", ",", "1", "]", "\n", "cls_boxes", "=", "bbox", "[", "index", ",", "1", ",", ":", "]", "\n", "cls_obj", "=", "obj", "[", "index", ",", "1", "]", "\n", "\n", "boxlist_for_class", "=", "BoxList", "(", "cls_boxes", ",", "image_size", ",", "\n", "mode", "=", "'xyxy'", ")", "\n", "\n", "boxlist_for_class", ".", "add_field", "(", "'scores'", ",", "cls_scores", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "'objectness'", ",", "cls_obj", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "'all_scores'", ",", "\n", "cls_scores_all", ")", "\n", "boxlist_for_class", "=", "boxlist_nms", "(", "\n", "boxlist_for_class", ",", "0.5", ",", "score_field", "=", "\"scores\"", "\n", ")", "\n", "num_labels", "=", "len", "(", "boxlist_for_class", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "\"labels\"", ",", "\n", "torch", ".", "full", "(", "(", "\n", "num_labels", ",", ")", ",", "\n", "2", ",", "\n", "dtype", "=", "torch", ".", "int64", ")", ".", "to", "(", "\n", "device", ")", ")", "\n", "result_per_image", ".", "append", "(", "boxlist_for_class", ")", "\n", "\n", "# for cyto:", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "NMS_TYPE", "==", "'cyto'", ":", "\n", "                    ", "nuclei_bbox", "=", "boxlist_for_class", ".", "bbox", "\n", "inds", "=", "index", "\n", "cyto_bbox", "=", "bbox", "[", "inds", ",", "0", "]", "\n", "cyto_score", "=", "score", "[", "inds", ",", "0", "]", "\n", "# calculate ioa", "\n", "# inter/(nuclei_area)", "\n", "# todo: check correctness", "\n", "lt", "=", "torch", ".", "max", "(", "nuclei_bbox", "[", ":", ",", "None", ",", ":", "2", "]", ",", "\n", "cyto_bbox", "[", ":", ",", ":", "2", "]", ")", "# [N,", "\n", "# M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "nuclei_bbox", "[", ":", ",", "None", ",", "2", ":", "]", ",", "\n", "cyto_bbox", "[", ":", ",", "2", ":", "]", ")", "# [N,", "\n", "# M,2]", "\n", "TO_REMOVE", "=", "1", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "area", "=", "(", "nuclei_bbox", "[", ":", ",", "2", "]", "-", "nuclei_bbox", "[", ":", ",", "\n", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "\n", "nuclei_bbox", "[", ":", ",", "3", "]", "-", "nuclei_bbox", "[", ":", ",", "\n", "1", "]", "+", "TO_REMOVE", ")", "\n", "iou", "=", "inter", "/", "area", "[", ":", ",", "None", "]", "\n", "iou", "[", "iou", "<", "0.5", "]", "=", "0", "\n", "_iou", ",", "_idx", "=", "torch", ".", "sort", "(", "iou", ",", "dim", "=", "0", ",", "\n", "descending", "=", "True", ")", "\n", "nuclei_h", "=", "(", "(", "nuclei_bbox", "[", ":", ",", "0", "]", "+", "nuclei_bbox", "[", ":", ",", "\n", "2", "]", ")", "/", "2", ")", "[", ":", ",", "None", "]", "\n", "nuclei_w", "=", "(", "(", "nuclei_bbox", "[", ":", ",", "1", "]", "+", "nuclei_bbox", "[", ":", ",", "\n", "3", "]", ")", "/", "2", ")", "[", ":", ",", "None", "]", "\n", "cyto_h", "=", "(", "(", "cyto_bbox", "[", ":", ",", "0", "]", "+", "cyto_bbox", "[", ":", ",", "2", "]", ")", "/", "2", ")", "[", "\n", "None", ",", "...", "]", "\n", "cyto_w", "=", "(", "(", "cyto_bbox", "[", ":", ",", "1", "]", "+", "cyto_bbox", "[", ":", ",", "3", "]", ")", "/", "2", ")", "[", "\n", "None", ",", "...", "]", "\n", "# pdb.set_trace()", "\n", "distance", "=", "(", "nuclei_h", "-", "cyto_h", ")", "**", "2", "+", "(", "\n", "nuclei_w", "-", "cyto_w", ")", "**", "2", "\n", "\n", "distance", "=", "distance", ".", "transpose", "(", "1", ",", "0", ")", "\n", "_idx", "=", "_idx", ".", "transpose", "(", "1", ",", "0", ")", "\n", "_iou_t", "=", "_iou", ".", "transpose", "(", "1", ",", "0", ")", "\n", "_iou_t", "[", "_iou_t", ">", "0", "]", "=", "1", "\n", "_iou_t", "=", "_iou_t", ".", "long", "(", ")", ".", "sum", "(", "1", ")", "\n", "list_of_nuclei_id_list", "=", "[", "]", "\n", "for", "j", ",", "number", "in", "enumerate", "(", "_iou_t", ")", ":", "\n", "                        ", "nuclei_id_list", "=", "_idx", "[", "j", ",", ":", "number", "]", "\n", "distance_list", "=", "distance", "[", "j", ",", "nuclei_id_list", "]", "\n", "sort_distance", ",", "sort_distance_idx", "=", "torch", ".", "sort", "(", "\n", "distance_list", ",", "descending", "=", "False", ")", "\n", "nuclei_id_list", "=", "nuclei_id_list", "[", "\n", "sort_distance_idx", "]", "\n", "nuclei_id_list", "=", "nuclei_id_list", ".", "tolist", "(", ")", "\n", "list_of_nuclei_id_list", ".", "append", "(", "nuclei_id_list", ")", "\n", "# pdb.set_trace()", "\n", "", "boxlist_for_cyto", "=", "BoxList", "(", "cyto_bbox", ",", "\n", "image_size", ",", "\n", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist_for_cyto", ".", "add_field", "(", "\"scores\"", ",", "cyto_score", ")", "\n", "cls_scores_all", "=", "prob_boxhead", "[", "index", ",", "0", "]", "\n", "boxlist_for_cyto", ".", "add_field", "(", "'all_scores'", ",", "\n", "cls_scores_all", ")", "\n", "boxlist_for_cyto", ".", "add_field", "(", "\"objectness\"", ",", "\n", "cyto_score", ")", "\n", "boxlist_for_cyto", ".", "add_field", "(", "\"nuclei_id_list\"", ",", "\n", "list_of_nuclei_id_list", ")", "\n", "\n", "boxlist_for_cyto", "=", "cyto_nms", "(", "boxlist_for_cyto", ",", "\n", "self", ".", "nms", ",", "\n", "score_field", "=", "\"scores\"", ")", "\n", "boxlist_for_cyto", "=", "boxlist_nms", "(", "\n", "boxlist_for_cyto", ",", "self", ".", "nms", ",", "\n", "score_field", "=", "\"scores\"", "\n", ")", "\n", "num_labels", "=", "len", "(", "boxlist_for_cyto", ")", "\n", "boxlist_for_cyto", ".", "add_field", "(", "\n", "\"labels\"", ",", "torch", ".", "full", "(", "(", "num_labels", ",", ")", ",", "1", ",", "\n", "dtype", "=", "torch", ".", "int64", ",", "\n", "device", "=", "device", ")", "\n", ")", "\n", "# pdb.set_trace()", "\n", "# boxlist_for_cyto.remove_field['nuclei_id_list']", "\n", "result_per_image", ".", "append", "(", "boxlist_for_cyto", ")", "\n", "\n", "", "else", ":", "\n", "\n", "\n", "\n", "                    ", "index", "=", "(", "score", "[", ":", ",", "0", "]", ">=", "\n", "self", ".", "fg_thread", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "# cls_scores = i_score[index, i,0]", "\n", "cls_scores", "=", "score", "[", "index", ",", "0", "]", "\n", "# pdb.set_trace()", "\n", "\n", "cls_scores_all", "=", "prob_boxhead", "[", "index", ",", "0", "]", "\n", "cls_boxes", "=", "bbox", "[", "index", ",", "0", ",", ":", "]", "\n", "cls_obj", "=", "obj", "[", "index", ",", "0", "]", "\n", "\n", "boxlist_for_class", "=", "BoxList", "(", "cls_boxes", ",", "image_size", ",", "mode", "=", "'xyxy'", ")", "\n", "# Pos greedy NMS if POS_NMS!=-1", "\n", "# boxlist_for_class.add_field('idx', index)", "\n", "boxlist_for_class", ".", "add_field", "(", "'scores'", ",", "cls_scores", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "'objectness'", ",", "cls_obj", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "'all_scores'", ",", "cls_scores_all", ")", "\n", "# pdb.set_trace()", "\n", "if", "self", ".", "nms", ":", "\n", "# for nuclei", "\n", "                        ", "boxlist_for_class", "=", "boxlist_nms", "(", "\n", "boxlist_for_class", ",", "self", ".", "nms", ",", "score_field", "=", "\"scores\"", "\n", ")", "\n", "# pdb.set_trace()", "\n", "", "num_labels", "=", "len", "(", "boxlist_for_class", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "\"labels\"", ",", "\n", "torch", ".", "full", "(", "(", "\n", "num_labels", ",", ")", ",", "\n", "1", ",", "\n", "dtype", "=", "torch", ".", "int64", ")", ".", "to", "(", "device", ")", ")", "\n", "result_per_image", ".", "append", "(", "boxlist_for_class", ")", "\n", "\n", "", "result_per_image", "=", "cat_boxlist", "(", "result_per_image", ")", "\n", "number_of_detections", "=", "len", "(", "result_per_image", ")", "\n", "\n", "\n", "# Limit to max_per_image detections **over all classes**", "\n", "if", "number_of_detections", ">", "self", ".", "detections_per_img", ">", "0", ":", "\n", "                    ", "cls_scores", "=", "result_per_image", ".", "get_field", "(", "\"scores\"", ")", "\n", "image_thresh", ",", "_", "=", "torch", ".", "kthvalue", "(", "\n", "cls_scores", ".", "cpu", "(", ")", ",", "number_of_detections", "-", "self", ".", "detections_per_img", "+", "1", "\n", ")", "\n", "keep", "=", "cls_scores", ">=", "image_thresh", ".", "item", "(", ")", "\n", "keep", "=", "torch", ".", "nonzero", "(", "keep", ")", ".", "squeeze", "(", "1", ")", "\n", "result_per_image", "=", "result_per_image", "[", "keep", "]", "\n", "", "result", ".", "append", "(", "result_per_image", ")", "\n", "", "if", "not", "self", ".", "is_teacher", ":", "\n", "                ", "return", "result", ",", "{", "}", "\n", "", "else", ":", "\n", "\n", "                ", "return", "result", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.adaptive_bce": [[945, 971], ["relation_module_bk.DuplicationRemovalNetwork.nms_fg_weight.to", "relation_module_bk.DuplicationRemovalNetwork.nms_fg_weight[].view_as", "torch.nn.functional.binary_cross_entropy", "torch.nn.functional.binary_cross_entropy", "torch.abs().view_as", "torch.abs().view_as", "torch.abs().view_as", "torch.abs().view_as", "relation_module_bk.DuplicationRemovalNetwork.sum", "label_t.numel", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nms_score.view_as", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "label_t.data.view().long", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "label_t.data.view"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "", "", "def", "adaptive_bce", "(", "self", ",", "classifier", ",", "nms_score", ",", "label", ",", "label_t", "=", "\n", "None", ")", ":", "\n", "\n", "        ", "if", "label_t", "is", "None", ":", "\n", "            ", "label_t", "=", "label", "\n", "", "gap", "=", "-", "torch", ".", "abs", "(", "classifier", "-", "nms_score", ")", ".", "view_as", "(", "label", ")", "\n", "\n", "self", ".", "nms_fg_weight", "=", "self", ".", "nms_fg_weight", ".", "to", "(", "nms_score", ".", "device", ")", "\n", "cls_balance_weight", "=", "self", ".", "nms_fg_weight", "[", "label_t", ".", "data", ".", "view", "(", "\n", "-", "1", ")", ".", "long", "(", ")", "]", ".", "view_as", "(", "label_t", ")", "\n", "normalize_factor", "=", "(", "cls_balance_weight", ".", "sum", "(", ")", ")", "/", "label_t", ".", "numel", "(", ")", "\n", "\n", "cls_balance_weight", "=", "cls_balance_weight", "/", "normalize_factor", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "weight", "=", "torch", ".", "pow", "(", "(", "1", "-", "self", ".", "alpha", "*", "torch", ".", "exp", "(", "gap", ")", ")", ",", "\n", "self", ".", "gamma", "\n", ")", "*", "cls_balance_weight", "\n", "# nms_loss = F.binary_cross_entropy(nms_score.view_as(label),", "\n", "#                                   label, weight)", "\n", "#", "\n", "", "nms_loss", "=", "F", ".", "binary_cross_entropy", "(", "nms_score", ".", "view_as", "(", "label", ")", ",", "\n", "label", ",", "weight", ")", "\n", "return", "nms_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.adaptive_bce_with_cls_balance": [[972, 1000], ["fg.to.to.to", "torch.nn.functional.binary_cross_entropy", "torch.nn.functional.binary_cross_entropy", "torch.abs().view_as", "torch.abs().view_as", "torch.abs().view_as", "torch.abs().view_as", "fg[].view_as", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weight.sum", "weight.sum", "nms_score.view_as", "label_t.sum", "label_t.numel", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "label_t.data.view().long", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "label_t.data.view"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "adaptive_bce_with_cls_balance", "(", "self", ",", "classifier", ",", "nms_score", ",", "label", ",", "label_t", "=", "\n", "None", ",", "fg", "=", "None", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "if", "label_t", "is", "None", ":", "\n", "            ", "label_t", "=", "label", "\n", "", "gap", "=", "-", "torch", ".", "abs", "(", "classifier", "-", "nms_score", ")", ".", "view_as", "(", "label", ")", "\n", "normalize_factor", "=", "label_t", ".", "sum", "(", ")", "/", "label_t", ".", "numel", "(", ")", "*", "4", "\n", "# try:", "\n", "# pdb.set_trace()", "\n", "fg", "=", "fg", ".", "to", "(", "label_t", ".", "device", ")", "\n", "# except:", "\n", "#     pdb.set_trace()", "\n", "cls_balance_weight", "=", "fg", "[", "label_t", ".", "data", ".", "view", "(", "\n", "-", "1", ")", ".", "long", "(", ")", "]", ".", "view_as", "(", "label_t", ")", "/", "normalize_factor", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "weight", "=", "torch", ".", "pow", "(", "(", "1", "-", "self", ".", "alpha", "*", "torch", ".", "exp", "(", "gap", ")", ")", ",", "\n", "self", ".", "gamma", "\n", ")", "*", "cls_balance_weight", "\n", "# class balance:", "\n", "", "cls_norm", "=", "weight", ".", "sum", "(", ")", "/", "weight", ".", "sum", "(", "dim", "=", "0", ")", "\n", "# pdb.set_trace()", "\n", "weight", "=", "weight", "*", "cls_norm", "\n", "# pdb.set_trace()", "\n", "nms_loss", "=", "F", ".", "binary_cross_entropy", "(", "nms_score", ".", "view_as", "(", "label", ")", ",", "\n", "label", ",", "weight", ")", "\n", "\n", "return", "nms_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.prepare_bbox_iou": [[1001, 1009], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou"], ["", "def", "prepare_bbox_iou", "(", "self", ",", "boxlist", ",", "label_index", ",", "clswize", "=", "True", ")", ":", "\n", "        ", "iou", "=", "boxlist_iou", "(", "boxlist", ",", "boxlist", ")", "\n", "if", "clswize", ":", "\n", "            ", "split_point", "=", "label_index", "[", "0", "]", "\n", "iou1", "=", "iou", "[", ":", "split_point", ",", ":", "split_point", "]", "\n", "iou2", "=", "iou", "[", "split_point", ":", ",", "split_point", ":", "]", "\n", "iou", "=", "[", "iou1", ",", "iou2", "]", "\n", "", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.prepare_discriminative_label": [[1010, 1087], ["targets.get_field", "range", "numpy.stack().astype", "numpy.stack().astype", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "numpy.zeros", "output_reg_list.append", "output_d_list.append", "numpy.eye", "sorted_score[].cpu().numpy", "boxes.view.view.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "iou.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.stack", "numpy.stack", "output_reg_list.append", "output_d_list.append", "numpy.stack", "numpy.stack", "numpy.ones", "numpy.max", "numpy.argmax", "output_list_per_class.append", "output_reg_list_per_class.append", "len", "sorted_score[].cpu", "iou.cpu().numpy.cpu().numpy.cpu", "len", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "prepare_discriminative_label", "(", "self", ",", "sorted_boxes", ",", "sorted_score", ",", "targets", ")", ":", "\n", "        ", "TO_REMOVE", "=", "1", "\n", "labels", "=", "targets", ".", "get_field", "(", "'labels'", ")", "\n", "\n", "# output = np.zeros((sorted_boxes.shape[0].numpy(),))", "\n", "# pdb.set_trace()", "\n", "# output_list = []", "\n", "output_reg_list", "=", "[", "]", "\n", "output_d_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "fg_class", ")", ":", "\n", "            ", "cls_label_indice", "=", "torch", ".", "nonzero", "(", "labels", "==", "(", "i", "+", "1", ")", ")", "\n", "cls_target_bbox", "=", "targets", ".", "bbox", "[", "cls_label_indice", "[", ":", ",", "0", "]", "]", "\n", "\n", "# todo: avoid None gt situation", "\n", "num_valid_gt", "=", "len", "(", "cls_label_indice", ")", "\n", "\n", "if", "num_valid_gt", "==", "0", ":", "\n", "\n", "                ", "output", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", "len", "(", "self", ".", "target_thresh", ")", ")", ")", "\n", "output_d", "=", "-", "np", ".", "ones", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", "len", "(", "self", ".", "target_thresh", ")", ")", ")", "\n", "# output_reg = output.copy()", "\n", "# output_list.append(output)", "\n", "output_reg_list", ".", "append", "(", "output", ")", "\n", "output_d_list", ".", "append", "(", "output_d", ")", "\n", "", "else", ":", "\n", "                ", "output_list_per_class", "=", "[", "]", "\n", "output_reg_list_per_class", "=", "[", "]", "\n", "eye_matrix", "=", "np", ".", "eye", "(", "num_valid_gt", ")", "\n", "score_per_class", "=", "sorted_score", "[", ":", ",", "i", ":", "i", "+", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "boxes", "=", "sorted_boxes", "[", ":", ",", "i", ",", ":", "]", "\n", "boxes", "=", "boxes", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "area1", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "area2", "=", "(", "cls_target_bbox", "[", ":", ",", "2", "]", "-", "cls_target_bbox", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "\n", "cls_target_bbox", "[", ":", ",", "3", "]", "-", "cls_target_bbox", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "lt", "=", "torch", ".", "max", "(", "boxes", "[", ":", ",", "None", ",", ":", "2", "]", ",", "cls_target_bbox", "[", ":", ",", ":", "2", "]", ")", "# [N,M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "boxes", "[", ":", ",", "None", ",", "2", ":", "]", ",", "cls_target_bbox", "[", ":", ",", "2", ":", "]", ")", "# [N,M,2]", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "# [num_gt, first_n]", "\n", "iou", "=", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", "\n", "iou", "=", "iou", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "thresh", "in", "self", ".", "target_thresh", ":", "\n", "# pdb.set_trace()", "\n", "                    ", "output_reg", "=", "np", ".", "max", "(", "iou", ",", "1", ")", "\n", "output_argmax", "=", "np", ".", "argmax", "(", "iou", ",", "1", ")", "\n", "output_argmax", "[", "np", ".", "where", "(", "output_reg", "==", "0", ")", "[", "0", "]", "]", "=", "-", "1", "\n", "output_list_per_class", ".", "append", "(", "output_argmax", ")", "\n", "# todo: temp comment", "\n", "# overlap_mask = (iou > thresh)", "\n", "# overlap_iou = iou * overlap_mask", "\n", "# valid_bbox_indices = np.where(overlap_mask)[0]", "\n", "# overlap_score = np.tile(score_per_class, (1, num_valid_gt))", "\n", "# overlap_score *= overlap_mask", "\n", "# max_overlap_indices = np.argmax(iou, axis=1)", "\n", "# max_overlap_mask = eye_matrix[max_overlap_indices]", "\n", "# overlap_score *= max_overlap_mask", "\n", "# overlap_iou =overlap_iou * max_overlap_mask", "\n", "# max_score_indices = np.argmax(overlap_score, axis=0)", "\n", "# max_overlap_iou = overlap_iou[max_score_indices, np.arange(overlap_score.shape[1])]", "\n", "# # output = np.zeros(([*sorted_boxes.shape][0],))", "\n", "# output_reg = np.zeros(([*sorted_boxes.shape][0],))", "\n", "# output_idx, inter_1, inter_2  = np.intersect1d(max_score_indices, valid_bbox_indices,return_indices=True)", "\n", "# # output[output_idx] = 1", "\n", "# output_reg[output_idx] = max_overlap_iou[inter_1]", "\n", "# # output_list_per_class.append(output)", "\n", "output_reg_list_per_class", ".", "append", "(", "output_reg", ")", "\n", "", "output_per_class", "=", "np", ".", "stack", "(", "output_list_per_class", ",", "axis", "=", "-", "1", ")", "\n", "output_reg_per_class", "=", "np", ".", "stack", "(", "output_reg_list_per_class", ",", "axis", "=", "-", "1", ")", "\n", "# pdb.set_trace()", "\n", "# output_list.append(output_per_class.view())", "\n", "output_reg_list", ".", "append", "(", "output_reg_per_class", ")", "\n", "output_d_list", ".", "append", "(", "output_per_class", ")", "\n", "# output =  np.stack(output_list, axis=1).astype(np.float32, copy=False)", "\n", "", "", "output_reg", "=", "np", ".", "stack", "(", "output_reg_list", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "output_d", "=", "np", ".", "stack", "(", "output_d_list", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "# pdb.set_trace()", "\n", "return", "output_reg", ",", "output_d", "\n", "", "def", "prepare_reg_label", "(", "self", ",", "sorted_boxes", ",", "sorted_score", ",", "targets", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.prepare_reg_label": [[1087, 1163], ["targets.get_field", "range", "numpy.stack().astype", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "numpy.zeros", "output_reg_list.append", "numpy.eye", "sorted_score[].cpu().numpy", "boxes.view.view.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "iou.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.stack", "output_reg_list.append", "numpy.stack", "numpy.max", "numpy.tile", "numpy.argmax", "numpy.argmax", "numpy.zeros", "numpy.intersect1d", "output_reg_list_per_class.append", "len", "sorted_score[].cpu", "iou.cpu().numpy.cpu().numpy.cpu", "numpy.where", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "prepare_reg_label", "(", "self", ",", "sorted_boxes", ",", "sorted_score", ",", "targets", ")", ":", "\n", "        ", "'''\n\n        :param sorted_boxes: [ first n, fg_cls_num, 4]\n        :param indice: [first n, fg_cls_num]\n        :param sorted_score: [first n, fg_cls_num]\n        :param targets: Boxlist obj\n        :return: label [first n, num_thread * fg_cls_num]\n        '''", "\n", "TO_REMOVE", "=", "1", "\n", "labels", "=", "targets", ".", "get_field", "(", "'labels'", ")", "\n", "\n", "# output = np.zeros((sorted_boxes.shape[0].numpy(),))", "\n", "# pdb.set_trace()", "\n", "# output_list = []", "\n", "output_reg_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "fg_class", ")", ":", "\n", "            ", "cls_label_indice", "=", "torch", ".", "nonzero", "(", "labels", "==", "(", "i", "+", "1", ")", ")", "\n", "cls_target_bbox", "=", "targets", ".", "bbox", "[", "cls_label_indice", "[", ":", ",", "0", "]", "]", "\n", "\n", "# todo: avoid None gt situation", "\n", "num_valid_gt", "=", "len", "(", "cls_label_indice", ")", "\n", "\n", "if", "num_valid_gt", "==", "0", ":", "\n", "\n", "                ", "output", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", "len", "(", "self", ".", "target_thresh", ")", ")", ")", "\n", "# output_reg = output.copy()", "\n", "# output_list.append(output)", "\n", "output_reg_list", ".", "append", "(", "output", ")", "\n", "", "else", ":", "\n", "                ", "output_list_per_class", "=", "[", "]", "\n", "output_reg_list_per_class", "=", "[", "]", "\n", "eye_matrix", "=", "np", ".", "eye", "(", "num_valid_gt", ")", "\n", "score_per_class", "=", "sorted_score", "[", ":", ",", "i", ":", "i", "+", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "boxes", "=", "sorted_boxes", "[", ":", ",", "i", ",", ":", "]", "\n", "boxes", "=", "boxes", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "area1", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "area2", "=", "(", "cls_target_bbox", "[", ":", ",", "2", "]", "-", "cls_target_bbox", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "cls_target_bbox", "[", ":", ",", "3", "]", "-", "cls_target_bbox", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "lt", "=", "torch", ".", "max", "(", "boxes", "[", ":", ",", "None", ",", ":", "2", "]", ",", "cls_target_bbox", "[", ":", ",", ":", "2", "]", ")", "# [N,M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "boxes", "[", ":", ",", "None", ",", "2", ":", "]", ",", "cls_target_bbox", "[", ":", ",", "2", ":", "]", ")", "# [N,M,2]", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "# [num_gt, first_n]", "\n", "iou", "=", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", "\n", "iou", "=", "iou", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "thresh", "in", "self", ".", "target_thresh", ":", "\n", "# pdb.set_trace()", "\n", "                    ", "output_reg", "=", "np", ".", "max", "(", "iou", ",", "1", ")", "\n", "# todo: temp comment", "\n", "overlap_mask", "=", "(", "iou", ">", "thresh", ")", "\n", "overlap_iou", "=", "iou", "*", "overlap_mask", "\n", "valid_bbox_indices", "=", "np", ".", "where", "(", "overlap_mask", ")", "[", "0", "]", "\n", "overlap_score", "=", "np", ".", "tile", "(", "score_per_class", ",", "(", "1", ",", "num_valid_gt", ")", ")", "\n", "overlap_score", "*=", "overlap_mask", "\n", "max_overlap_indices", "=", "np", ".", "argmax", "(", "iou", ",", "axis", "=", "1", ")", "\n", "max_overlap_mask", "=", "eye_matrix", "[", "max_overlap_indices", "]", "\n", "overlap_score", "*=", "max_overlap_mask", "\n", "overlap_iou", "=", "overlap_iou", "*", "max_overlap_mask", "\n", "max_score_indices", "=", "np", ".", "argmax", "(", "overlap_score", ",", "axis", "=", "0", ")", "\n", "max_overlap_iou", "=", "overlap_iou", "[", "max_score_indices", ",", "np", ".", "arange", "(", "overlap_score", ".", "shape", "[", "1", "]", ")", "]", "\n", "# output = np.zeros(([*sorted_boxes.shape][0],))", "\n", "output_reg", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", ")", ")", "\n", "output_idx", ",", "inter_1", ",", "inter_2", "=", "np", ".", "intersect1d", "(", "max_score_indices", ",", "valid_bbox_indices", ",", "return_indices", "=", "True", ")", "\n", "# output[output_idx] = 1", "\n", "output_reg", "[", "output_idx", "]", "=", "max_overlap_iou", "[", "inter_1", "]", "\n", "# output_list_per_class.append(output)", "\n", "output_reg_list_per_class", ".", "append", "(", "output_reg", ")", "\n", "# output_per_class = np.stack(output_list_per_class, axis=-1)", "\n", "", "output_reg_per_class", "=", "np", ".", "stack", "(", "output_reg_list_per_class", ",", "axis", "=", "-", "1", ")", "\n", "# pdb.set_trace()", "\n", "# output_list.append(output_per_class.view())", "\n", "output_reg_list", ".", "append", "(", "output_reg_per_class", ")", "\n", "\n", "# output =  np.stack(output_list, axis=1).astype(np.float32, copy=False)", "\n", "", "", "output_reg", "=", "np", ".", "stack", "(", "output_reg_list", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "return", "output_reg", "\n", "# return (output, output_reg)", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.prepare_label": [[1165, 1223], ["targets.get_field", "range", "numpy.stack().astype", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "numpy.zeros", "output_list.append", "numpy.eye", "sorted_score[].cpu().numpy", "boxes.view.view.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "iou.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.stack", "output_list.append", "numpy.stack", "numpy.tile", "numpy.argmax", "numpy.argmax", "numpy.zeros", "output_list_per_class.append", "len", "sorted_score[].cpu", "iou.cpu().numpy.cpu().numpy.cpu", "numpy.where", "numpy.intersect1d"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "prepare_label", "(", "self", ",", "sorted_boxes", ",", "sorted_score", ",", "targets", ")", ":", "\n", "        ", "'''\n\n        :param sorted_boxes: [ first n, fg_cls_num, 4]\n        :param indice: [first n, fg_cls_num]\n        :param sorted_score: [first n, fg_cls_num]\n        :param targets: Boxlist obj\n        :return: label [first n, num_thread * fg_cls_num]\n        '''", "\n", "TO_REMOVE", "=", "1", "\n", "labels", "=", "targets", ".", "get_field", "(", "'labels'", ")", "\n", "\n", "# output = np.zeros((sorted_boxes.shape[0].numpy(),))", "\n", "\n", "output_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "fg_class", ")", ":", "\n", "            ", "cls_label_indice", "=", "torch", ".", "nonzero", "(", "labels", "==", "(", "i", "+", "1", ")", ")", "\n", "cls_target_bbox", "=", "targets", ".", "bbox", "[", "cls_label_indice", "[", ":", ",", "0", "]", "]", "\n", "\n", "# todo: avoid None gt situation", "\n", "num_valid_gt", "=", "len", "(", "cls_label_indice", ")", "\n", "\n", "if", "num_valid_gt", "==", "0", ":", "\n", "\n", "                ", "output", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", "len", "(", "self", ".", "target_thresh", ")", ")", ")", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "", "else", ":", "\n", "                ", "output_list_per_class", "=", "[", "]", "\n", "eye_matrix", "=", "np", ".", "eye", "(", "num_valid_gt", ")", "\n", "score_per_class", "=", "sorted_score", "[", ":", ",", "i", ":", "i", "+", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "boxes", "=", "sorted_boxes", "[", ":", ",", "i", ",", ":", "]", "\n", "boxes", "=", "boxes", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "area1", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "area2", "=", "(", "cls_target_bbox", "[", ":", ",", "2", "]", "-", "cls_target_bbox", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "cls_target_bbox", "[", ":", ",", "3", "]", "-", "cls_target_bbox", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "lt", "=", "torch", ".", "max", "(", "boxes", "[", ":", ",", "None", ",", ":", "2", "]", ",", "cls_target_bbox", "[", ":", ",", ":", "2", "]", ")", "# [N,M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "boxes", "[", ":", ",", "None", ",", "2", ":", "]", ",", "cls_target_bbox", "[", ":", ",", "2", ":", "]", ")", "# [N,M,2]", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "# [num_gt, first_n]", "\n", "iou", "=", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", "\n", "iou", "=", "iou", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "thresh", "in", "self", ".", "target_thresh", ":", "\n", "                    ", "overlap_mask", "=", "(", "iou", ">", "thresh", ")", "\n", "valid_bbox_indices", "=", "np", ".", "where", "(", "overlap_mask", ")", "[", "0", "]", "\n", "overlap_score", "=", "np", ".", "tile", "(", "score_per_class", ",", "(", "1", ",", "num_valid_gt", ")", ")", "\n", "overlap_score", "*=", "overlap_mask", "\n", "max_overlap_indices", "=", "np", ".", "argmax", "(", "iou", ",", "axis", "=", "1", ")", "\n", "max_overlap_mask", "=", "eye_matrix", "[", "max_overlap_indices", "]", "\n", "overlap_score", "*=", "max_overlap_mask", "\n", "max_score_indices", "=", "np", ".", "argmax", "(", "overlap_score", ",", "axis", "=", "0", ")", "\n", "output", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", ")", ")", "\n", "output", "[", "np", ".", "intersect1d", "(", "max_score_indices", ",", "valid_bbox_indices", ")", "]", "=", "1", "\n", "output_list_per_class", ".", "append", "(", "output", ")", "\n", "", "output_per_class", "=", "np", ".", "stack", "(", "output_list_per_class", ",", "axis", "=", "-", "1", ")", "\n", "output_list", ".", "append", "(", "output_per_class", ")", "\n", "", "", "output", "=", "np", ".", "stack", "(", "output_list", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.prepare_label_student": [[1225, 1331], ["targets.get_field", "targets.get_field", "range", "numpy.stack().astype", "numpy.stack().astype", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "t_score[].cpu().numpy", "len", "numpy.zeros", "numpy.ones", "output_score_list.append", "output_list.append", "numpy.eye", "sorted_score[].cpu().numpy", "boxes.view.view.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "iou.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.stack", "numpy.stack", "output_list.append", "output_score_list.append", "numpy.stack", "numpy.stack", "t_score[].cpu", "numpy.tile", "numpy.tile().transpose", "numpy.argmax", "numpy.amax", "numpy.argmax", "numpy.zeros", "numpy.zeros", "output_list_per_class.append", "output_list_score_per_class.append", "len", "len", "sorted_score[].cpu", "iou.cpu().numpy.cpu().numpy.cpu", "numpy.where", "numpy.tile", "numpy.intersect1d", "numpy.intersect1d", "numpy.intersect1d"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose"], ["", "def", "prepare_label_student", "(", "self", ",", "sorted_boxes", ",", "sorted_score", ",", "\n", "targets", ")", ":", "\n", "        ", "'''\n\n        :param sorted_boxes: [ first n, fg_cls_num, 4]\n        :param indice: [first n, fg_cls_num]\n        :param sorted_score: [first n, fg_cls_num]\n        :param targets: Boxlist obj\n        :return: label [first n, num_thread * fg_cls_num]\n        '''", "\n", "TO_REMOVE", "=", "1", "\n", "labels", "=", "targets", ".", "get_field", "(", "'labels'", ")", "\n", "t_score", "=", "targets", ".", "get_field", "(", "'scores'", ")", "\n", "# output = np.zeros((sorted_boxes.shape[0].numpy(),))", "\n", "\n", "output_list", "=", "[", "]", "\n", "output_score_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "fg_class", ")", ":", "\n", "            ", "cls_label_indice", "=", "torch", ".", "nonzero", "(", "labels", "==", "(", "i", "+", "1", ")", ")", "\n", "cls_target_bbox", "=", "targets", ".", "bbox", "[", "cls_label_indice", "[", ":", ",", "0", "]", "]", "\n", "\n", "cls_target_score", "=", "t_score", "[", "cls_label_indice", "[", ":", ",", "0", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# todo: avoid None gt situation", "\n", "num_valid_gt", "=", "len", "(", "cls_label_indice", ")", "\n", "# pdb.set_trace()", "\n", "if", "num_valid_gt", "==", "0", ":", "\n", "\n", "                ", "output", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", "\n", "len", "(", "self", ".", "target_thresh", ")", ")", ")", "\n", "output_score", "=", "np", ".", "ones", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", "\n", "len", "(", "self", ".", "target_thresh", ")", ")", ")", "\n", "output_score_list", ".", "append", "(", "output_score", ")", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "", "else", ":", "\n", "                ", "output_list_score_per_class", "=", "[", "]", "\n", "output_list_per_class", "=", "[", "]", "\n", "eye_matrix", "=", "np", ".", "eye", "(", "num_valid_gt", ")", "\n", "score_per_class", "=", "sorted_score", "[", ":", ",", "\n", "i", ":", "i", "+", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "boxes", "=", "sorted_boxes", "[", ":", ",", "i", ",", ":", "]", "\n", "boxes", "=", "boxes", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "area1", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "\n", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "area2", "=", "(", "cls_target_bbox", "[", ":", ",", "2", "]", "-", "cls_target_bbox", "[", ":", ",", "\n", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "\n", "cls_target_bbox", "[", ":", ",", "\n", "3", "]", "-", "cls_target_bbox", "[", ":", ",", "\n", "1", "]", "+", "TO_REMOVE", ")", "\n", "lt", "=", "torch", ".", "max", "(", "boxes", "[", ":", ",", "None", ",", ":", "2", "]", ",", "\n", "cls_target_bbox", "[", ":", ",", ":", "2", "]", ")", "# [N,M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "boxes", "[", ":", ",", "None", ",", "2", ":", "]", ",", "\n", "cls_target_bbox", "[", ":", ",", "2", ":", "]", ")", "# [N,M,2]", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "# [num_gt, first_n]", "\n", "iou", "=", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", "\n", "iou", "=", "iou", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "thresh", "in", "self", ".", "target_thresh", ":", "\n", "                    ", "overlap_mask", "=", "(", "iou", ">", "thresh", ")", "\n", "valid_bbox_indices", "=", "np", ".", "where", "(", "overlap_mask", ")", "[", "0", "]", "\n", "overlap_score", "=", "np", ".", "tile", "(", "score_per_class", ",", "\n", "(", "1", ",", "num_valid_gt", ")", ")", "\n", "overlap_nms_target", "=", "np", ".", "tile", "(", "\n", "cls_target_score", "[", "...", ",", "None", "]", ",", "\n", "(", "1", ",", "score_per_class", ".", "shape", "[", "0", "]", ")", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "# overlap_score_nms = np.tile(cls_target_score,", "\n", "#                         (1, num_valid_gt))", "\n", "overlap_score", "*=", "overlap_mask", "\n", "overlap_nms_target", "*=", "overlap_mask", "\n", "# pdb.set_trace()", "\n", "# overlap_score_nms *=overlap_mask", "\n", "max_overlap_indices", "=", "np", ".", "argmax", "(", "iou", ",", "axis", "=", "1", ")", "\n", "max_overlap_mask", "=", "eye_matrix", "[", "max_overlap_indices", "]", "\n", "overlap_score", "*=", "max_overlap_mask", "\n", "overlap_nms_target", "*=", "max_overlap_mask", "\n", "\n", "#np.amax(", "\n", "# overlap_nms_target,1)", "\n", "overlap_nms_target", "=", "np", ".", "amax", "(", "overlap_nms_target", ",", "1", ")", "\n", "max_score_indices", "=", "np", ".", "argmax", "(", "overlap_score", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "\n", "output", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", ")", ")", "\n", "output_nms", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", ")", ")", "\n", "output", "[", "np", ".", "intersect1d", "(", "max_score_indices", ",", "\n", "valid_bbox_indices", ")", "]", "=", "1", "\n", "# pdb.set_trace()", "\n", "output_nms", "[", "np", ".", "intersect1d", "(", "max_score_indices", ",", "valid_bbox_indices", ")", "]", "=", "overlap_nms_target", "[", "np", ".", "intersect1d", "(", "max_score_indices", ",", "\n", "valid_bbox_indices", ")", "]", "\n", "\n", "output_list_per_class", ".", "append", "(", "output", ")", "\n", "output_list_score_per_class", ".", "append", "(", "output_nms", ")", "\n", "", "output_per_class", "=", "np", ".", "stack", "(", "output_list_per_class", ",", "\n", "axis", "=", "-", "1", ")", "\n", "output_score_per_class", "=", "np", ".", "stack", "(", "\n", "output_list_score_per_class", ",", "axis", "=", "-", "1", ")", "\n", "output_list", ".", "append", "(", "output_per_class", ")", "\n", "output_score_list", ".", "append", "(", "output_score_per_class", ")", "\n", "", "", "output", "=", "np", ".", "stack", "(", "output_list", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ",", "\n", "copy", "=", "False", ")", "\n", "output_score", "=", "np", ".", "stack", "(", "output_score_list", ",", "axis", "=", "1", ")", ".", "astype", "(", "\n", "np", ".", "float32", ",", "\n", "copy", "=", "False", ")", "\n", "return", "output", ",", "output_score", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.prepare_ranking_student": [[1332, 1415], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "relation_module_bk.DuplicationRemovalNetwork.boxcoder.decode", "proposals.split.split.split", "cls_score.split.split.split", "zip", "len", "f.get_field", "box_regression.view", "boxes_per_img.reshape", "prob.reshape", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather().squeeze.view", "torch.gather().squeeze.view", "sorted_obj.view.view.view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "boxlist.clip_to_image.clip_to_image.add_field", "boxlist.clip_to_image.clip_to_image.add_field", "boxlist.clip_to_image.clip_to_image.add_field", "boxlist.clip_to_image.clip_to_image.add_field", "boxlist.clip_to_image.clip_to_image.clip_to_image", "results.append", "sum", "cat_boxes.append", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "mask.view().expand.view().expand.view().expand", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().expand.view().expand.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "prepare_ranking_student", "(", "self", ",", "cls_score", ",", "box_regression", ",", "\n", "proposals", ",", "nms_idx", ",", "nms_result_t", ",", "nms_score", ",", "\n", "mt_learning", "=", "None", ")", ":", "\n", "\n", "        ", "boxes_per_image", "=", "[", "len", "(", "box", ")", "for", "box", "in", "proposals", "]", "\n", "\n", "concat_boxes", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "proposals", "]", ",", "dim", "=", "0", ")", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "proposals", "]", "\n", "# if self.training:", "\n", "#     labels = torch.cat([box.get_field('labels') for box in proposals])", "\n", "#     labels = labels.split(boxes_per_image, dim=0)", "\n", "# pdb.set_trace()", "\n", "objectness", "=", "[", "f", ".", "get_field", "(", "'objectness'", ")", "for", "f", "in", "proposals", "]", "\n", "proposals", "=", "self", ".", "boxcoder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "sum", "(", "boxes_per_image", ")", ",", "-", "1", ")", ",", "\n", "concat_boxes", "\n", ")", "\n", "# todo: use iou to decide the new label", "\n", "# pdb.set_trace()", "\n", "\n", "proposals", "=", "proposals", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "cls_score", "=", "cls_score", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "\n", "results", "=", "[", "]", "\n", "num_classes", "=", "self", ".", "fg_class", "+", "1", "\n", "# pdb.set_trace()", "\n", "for", "prob", ",", "boxes_per_img", ",", "image_shape", ",", "idx", ",", "result_t", ",", "score_t", ",", "obj", "in", "zip", "(", "cls_score", ",", "proposals", ",", "image_shapes", ",", "nms_idx", ",", "\n", "[", "nms_result_t", "]", ",", "[", "nms_score", "]", ",", "objectness", ")", ":", "\n", "\n", "            ", "boxes", "=", "boxes_per_img", ".", "reshape", "(", "-", "1", ",", "4", "*", "num_classes", ")", "\n", "scores", "=", "prob", ".", "reshape", "(", "-", "1", ",", "num_classes", ")", "\n", "# pdb.set_trace()", "\n", "\n", "cat_boxes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "num_classes", ")", ":", "\n", "# skip class 0, because it is the background class", "\n", "                ", "cls_boxes", "=", "boxes", "[", ":", ",", "j", "*", "4", ":", "(", "j", "+", "1", ")", "*", "4", "]", "\n", "cat_boxes", ".", "append", "(", "cls_boxes", ")", "\n", "", "boxes", "=", "torch", ".", "cat", "(", "\n", "[", "bbox", "[", ":", ",", ":", ",", "None", "]", "for", "bbox", "in", "cat_boxes", "]", ",", "dim", "=", "2", ")", "\n", "# scores =  torch.cat([s for s in cat_score])", "\n", "\n", "scores", "=", "scores", "[", ":", ",", "1", ":", "]", "\n", "ori_scores", "=", "scores", "\n", "num_roi", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "if", "num_roi", "<=", "self", ".", "first_n", ":", "\n", "                ", "first_n", "=", "num_roi", "\n", "# pdb.set_trace()", "\n", "", "else", ":", "\n", "                ", "first_n", "=", "self", ".", "first_n", "\n", "", "sorted_scores", "=", "torch", ".", "gather", "(", "scores", ",", "dim", "=", "0", ",", "index", "=", "idx", ")", "\n", "ori_scores", "=", "ori_scores", "[", "idx", "]", "\n", "sorted_obj", "=", "obj", "[", "idx", "]", "\n", "sorted_boxes", "=", "boxes", "[", "idx", "]", "\n", "\n", "if", "self", ".", "class_agnostic", ":", "\n", "# [first_n, num_fg_class, 4]", "\n", "                ", "sorted_boxes", "=", "torch", ".", "squeeze", "(", "sorted_boxes", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "torch", ".", "arange", "(", "0", ",", "num_classes", "-", "1", ")", ".", "to", "(", "\n", "device", "=", "self", ".", "device", ")", "\n", "mask", "=", "mask", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "first_n", ",", "\n", "num_classes", "-", "1", ",", "\n", "4", ",", "1", ")", "\n", "sorted_boxes", "=", "torch", ".", "gather", "(", "sorted_boxes", ",", "dim", "=", "3", ",", "\n", "index", "=", "mask", ")", ".", "squeeze", "(", "dim", "=", "3", ")", "\n", "", "sorted_boxes", "=", "sorted_boxes", ".", "view", "(", "\n", "first_n", "*", "(", "num_classes", "-", "1", ")", ",", "-", "1", ")", "\n", "# pdb.set_trace()", "\n", "# idx = idx.view(-1)", "\n", "sorted_obj", "=", "sorted_obj", ".", "view", "(", "first_n", "*", "(", "num_classes", "-", "1", ")", ")", "\n", "boxlist", "=", "BoxList", "(", "sorted_boxes", ",", "image_shape", ",", "\n", "mode", "=", "\"xyxy\"", ",", ")", "\n", "boxlist", ".", "add_field", "(", "'sorted_idx'", ",", "idx", ")", "\n", "boxlist", ".", "add_field", "(", "'objectness'", ",", "sorted_obj", ")", "\n", "boxlist", ".", "extra_fields", "[", "'scores'", "]", "=", "sorted_scores", "\n", "boxlist", ".", "extra_fields", "[", "\"all_scores\"", "]", "=", "ori_scores", "\n", "boxlist", ".", "add_field", "(", "'nms_result_t'", ",", "result_t", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "boxlist", ".", "add_field", "(", "'nms_score'", ",", "score_t", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "results", ".", "append", "(", "boxlist", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.prepare_ranking": [[1418, 1486], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "relation_module_bk.DuplicationRemovalNetwork.boxcoder.decode", "proposals.split.split.split", "cls_score.split.split.split", "len", "f.get_field", "box_regression.view", "zip", "zip", "sum", "relation_module_bk.DuplicationRemovalNetwork.filter_results", "results.append", "relation_module_bk.DuplicationRemovalNetwork.filter_results", "results.append"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.PostProcessor.filter_results", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.PostProcessor.filter_results"], ["", "def", "prepare_ranking", "(", "self", ",", "cls_score", ",", "box_regression", ",", "\n", "proposals", ",", "targets", ",", "mt_learning", "=", "None", ",", "reg_iou", "=", "False", ")", ":", "\n", "        ", "'''\n        :param score:[num_per_img*batchsize, class]\n        :param proposal: list of boxlist\n        :return:\n        '''", "\n", "# if is not train, targets is None which should be set into a none list", "\n", "\n", "# pdb.set_trace()", "\n", "boxes_per_image", "=", "[", "len", "(", "box", ")", "for", "box", "in", "proposals", "]", "\n", "\n", "concat_boxes", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "proposals", "]", ",", "dim", "=", "0", ")", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "proposals", "]", "\n", "# if self.training:", "\n", "#     labels = torch.cat([box.get_field('labels') for box in proposals])", "\n", "#     labels = labels.split(boxes_per_image, dim=0)", "\n", "# pdb.set_trace()", "\n", "objectness", "=", "[", "f", ".", "get_field", "(", "'objectness'", ")", "for", "f", "in", "proposals", "]", "\n", "proposals", "=", "self", ".", "boxcoder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "sum", "(", "boxes_per_image", ")", ",", "-", "1", ")", ",", "concat_boxes", "\n", ")", "\n", "# todo: use iou to decide the new label", "\n", "# pdb.set_trace()", "\n", "\n", "\n", "proposals", "=", "proposals", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "cls_score", "=", "cls_score", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "\n", "results", "=", "[", "]", "\n", "if", "self", ".", "training", ":", "\n", "# if idx_t is None:", "\n", "            ", "for", "prob", ",", "boxes_per_img", ",", "image_shape", ",", "target", ",", "obj", "in", "zip", "(", "\n", "cls_score", ",", "proposals", ",", "image_shapes", ",", "targets", ",", "objectness", ")", ":", "\n", "# try:", "\n", "#     cls_score_c = cls_score[0].detach().cpu().numpy()", "\n", "#     boxes_per_img_c = boxes_per_img.detach().cpu().numpy()", "\n", "#     obj_c = obj.detach().cpu().numpy()", "\n", "\n", "                ", "boxlist", "=", "self", ".", "filter_results", "(", "boxes_per_img", ",", "\n", "target", ",", "prob", ",", "\n", "image_shape", ",", "\n", "self", ".", "fg_class", "+", "1", ",", "obj", ",", "\n", "mt_learning", ",", "reg_iou", ")", "\n", "# except:", "\n", "#     pdb.set_trace()", "\n", "results", ".", "append", "(", "boxlist", ")", "\n", "# else:", "\n", "#     for prob, boxes_per_img, image_shape,  target,  \\", "\n", "#         obj, i_t in zip(", "\n", "#             cls_score, proposals, image_shapes,", "\n", "#             targets, objectness  ,idx_t         ):", "\n", "#         boxlist = self.filter_results(boxes_per_img,", "\n", "#                                       target, prob,", "\n", "#                                       image_shape,", "\n", "#                                       self.fg_class+1,", "\n", "#                                       obj, i_t)", "\n", "#         results.append(boxlist)", "\n", "\n", "", "", "else", ":", "\n", "# test do not have target", "\n", "            ", "for", "prob", ",", "boxes_per_img", ",", "image_shape", ",", "obj", "in", "zip", "(", "\n", "cls_score", ",", "proposals", ",", "image_shapes", ",", "objectness", "\n", ")", ":", "\n", "                ", "boxlist", "=", "self", ".", "filter_results", "(", "boxes_per_img", ",", "None", ",", "prob", ",", "image_shape", ",", "self", ".", "fg_class", "+", "1", ",", "obj", ",", "reg_iou", "=", "reg_iou", ")", "\n", "results", ".", "append", "(", "boxlist", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.prepare_boxlist": [[1487, 1506], ["boxes.reshape.reshape.reshape", "scores.reshape.reshape.reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["", "def", "prepare_boxlist", "(", "self", ",", "boxes", ",", "scores", ",", "image_shape", ",", "label", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"\n        Returns BoxList from `boxes` and adds probability scores information\n        as an extra field\n        `boxes` has shape (#detections, 4 * #classes), where each row represents\n        a list of predicted bounding boxes for each of the object classes in the\n        dataset (including the background class). The detections in each row\n        originate from the same object proposal.\n        `scores` has shape (#detection, #classes), where each row represents a list\n        of object detection confidence scores for each of the object classes in the\n        dataset (including the background class). `scores[i, j]`` corresponds to the\n        box at `boxes[i, j * 4:(j + 1) * 4]`.\n        \"\"\"", "\n", "boxes", "=", "boxes", ".", "reshape", "(", "-", "1", ",", "4", "*", "num_classes", ")", "\n", "scores", "=", "scores", ".", "reshape", "(", "-", "1", ",", "num_classes", ")", "\n", "boxlist", "=", "BoxList", "(", "boxes", ",", "image_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"scores\"", ",", "scores", ")", "\n", "boxlist", ".", "add_field", "(", "'labels'", ",", "label", ")", "\n", "return", "boxlist", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.filter_results": [[1507, 1629], ["torch.cat.reshape", "torch.cat.reshape", "scores.reshape.reshape.reshape", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.gather().squeeze.view", "torch.gather().squeeze.view", "sorted_obj.view.view.view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "boxlist.clip_to_image.clip_to_image.add_field", "boxlist.clip_to_image.clip_to_image.add_field", "boxlist.clip_to_image.clip_to_image.clip_to_image", "cat_boxes.append", "pdb.set_trace", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "mask.view().expand.view().expand.view().expand", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "relation_module_bk.DuplicationRemovalNetwork.prepare_label_student", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "relation_module_bk.DuplicationRemovalNetwork.prepare_label", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "boxlist.clip_to_image.clip_to_image.add_field", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().expand.view().expand.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "relation_module_bk.DuplicationRemovalNetwork.prepare_discriminative_label", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "relation_module_bk.DuplicationRemovalNetwork.prepare_reg_label", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.prepare_label_student", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.prepare_label", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.prepare_discriminative_label", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.prepare_reg_label", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "filter_results", "(", "self", ",", "boxes", ",", "targets", ",", "scores", ",", "image_shape", ",", "\n", "num_classes", ",", "obj", ",", "mt_learning", "=", "False", ",", "reg_iou", "=", "False", ")", ":", "\n", "        ", "\"\"\"return the sorted boxlist and sorted idx\n        \"\"\"", "\n", "# unwrap the boxlist to avoid additional overhead.", "\n", "# if we had multi-class NMS, we could perform this directly on the boxlist", "\n", "# boxes = boxlist.bbox.reshape(-1, num_classes * 4)", "\n", "#[n_roi, 4, cls]", "\n", "# boxes = boxlist.bbox.reshape(-1, 4, num_classes)", "\n", "\n", "boxes", "=", "boxes", ".", "reshape", "(", "-", "1", ",", "4", "*", "num_classes", ")", "\n", "scores", "=", "scores", ".", "reshape", "(", "-", "1", ",", "num_classes", ")", "\n", "# pdb.set_trace()", "\n", "\n", "cat_boxes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "num_classes", ")", ":", "\n", "# skip class 0, because it is the background class", "\n", "            ", "cls_boxes", "=", "boxes", "[", ":", ",", "j", "*", "4", ":", "(", "j", "+", "1", ")", "*", "4", "]", "\n", "cat_boxes", ".", "append", "(", "cls_boxes", ")", "\n", "", "boxes", "=", "torch", ".", "cat", "(", "[", "bbox", "[", ":", ",", ":", ",", "None", "]", "for", "bbox", "in", "cat_boxes", "]", ",", "dim", "=", "2", ")", "\n", "# scores =  torch.cat([s for s in cat_score])", "\n", "\n", "scores", "=", "scores", "[", ":", ",", "1", ":", "]", "\n", "ori_scores", "=", "scores", "\n", "num_roi", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "if", "num_roi", "<=", "self", ".", "first_n", ":", "\n", "            ", "first_n", "=", "num_roi", "\n", "# pdb.set_trace()", "\n", "", "else", ":", "\n", "            ", "first_n", "=", "self", ".", "first_n", "\n", "\n", "\n", "# if i_t is None:", "\n", "\n", "", "sorted_scores", ",", "indices", "=", "torch", ".", "topk", "(", "scores", ",", "first_n", ",", "dim", "=", "0", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "\n", "if", "obj", ".", "shape", "[", "0", "]", "<", "first_n", ":", "\n", "            ", "indices", "=", "indices", "[", ":", "obj", ".", "shape", "[", "0", "]", "]", "\n", "sorted_scores", "=", "sorted_scores", "[", ":", "obj", ".", "shape", "[", "0", "]", "]", "\n", "", "if", "indices", ".", "shape", "[", "1", "]", "!=", "2", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "# else:", "\n", "#     pdb.set_trace()", "\n", "#     sorted_scores = scores[i_t]", "\n", "#     indices = i_t", "\n", "# class_idx = torch.range(0, num_classes-1).to(", "\n", "#             self.device).long().reshape(-1,1)", "\n", "# reshaped_scores = sorted_score", "\n", "", "ori_scores", "=", "ori_scores", "[", "indices", "]", "\n", "# if not self.training:", "\n", "#     max_scores_per_class = torch.max(sorted_scores, dim = 0)", "\n", "#     max_scores_per_class = max_scores_per_class.cpu().numpy()", "\n", "#     valid_class_thresh = np.minimum(self.target_thresh, max_scores_per_class.max())", "\n", "#     valid_class_indices = np.where(max_scores_per_class >= valid_class_thresh)[0]", "\n", "#     invalid_class_indices = np.where(max_scores_per_class < valid_class_thresh)[0]", "\n", "#     num_valid_classes = len(valid_class_indices)", "\n", "#     valid_class_indices_nd = torch.from_numpy(valid_class_indices).gpu()", "\n", "\n", "# [first_n, num_fg_class, 4, num_fg_cls]", "\n", "sorted_obj", "=", "obj", "[", "indices", "]", "\n", "# try :", "\n", "sorted_boxes", "=", "boxes", "[", "indices", "]", "\n", "# except:", "\n", "#     pdb.set_trace()", "\n", "# pdb.set_trace()", "\n", "if", "self", ".", "class_agnostic", ":", "\n", "# [first_n, num_fg_class, 4]", "\n", "            ", "sorted_boxes", "=", "torch", ".", "squeeze", "(", "sorted_boxes", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "# pdb.set_trace()", "\n", "\n", "            ", "mask", "=", "torch", ".", "arange", "(", "0", ",", "num_classes", "-", "1", ")", ".", "to", "(", "\n", "device", "=", "self", ".", "device", ")", "\n", "\n", "mask", "=", "mask", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "first_n", ",", "num_classes", "-", "1", ",", "4", ",", "1", ")", "\n", "# [first_n, num_fg_class, 4]", "\n", "sorted_boxes", "=", "torch", ".", "gather", "(", "sorted_boxes", ",", "dim", "=", "3", ",", "index", "=", "mask", ")", ".", "squeeze", "(", "dim", "=", "3", ")", "\n", "# package them into boxlist", "\n", "#  pdb.set_trace()", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "if", "mt_learning", ":", "\n", "                ", "labels", ",", "nms_target", "=", "self", ".", "prepare_label_student", "(", "\n", "sorted_boxes", ",", "sorted_scores", ",", "targets", ")", "\n", "nms_target", "=", "torch", ".", "from_numpy", "(", "nms_target", ")", ".", "to", "(", "\n", "sorted_scores", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "labels", "=", "self", ".", "prepare_label", "(", "sorted_boxes", ",", "sorted_scores", ",", "\n", "targets", ")", "\n", "labels_cls", "=", "torch", ".", "from_numpy", "(", "labels", ")", ".", "to", "(", "sorted_scores", ".", "device", ")", "\n", "", "if", "reg_iou", ":", "\n", "                ", "if", "self", ".", "discriminative", ":", "\n", "                    ", "labels_reg", ",", "labels_d", "=", "self", ".", "prepare_discriminative_label", "(", "sorted_boxes", ",", "sorted_scores", ",", "targets", ")", "\n", "labels_reg", "=", "torch", ".", "from_numpy", "(", "labels_reg", ")", ".", "to", "(", "sorted_scores", ".", "device", ")", "\n", "labels_d", "=", "torch", ".", "from_numpy", "(", "labels_d", ")", ".", "to", "(", "sorted_scores", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "labels_reg", "=", "self", ".", "prepare_reg_label", "(", "sorted_boxes", ",", "sorted_scores", ",", "\n", "targets", ")", "\n", "# labels_cls= torch.from_numpy(labels_cls).to(sorted_scores.device)", "\n", "labels_reg", "=", "torch", ".", "from_numpy", "(", "labels_reg", ")", ".", "to", "(", "sorted_scores", ".", "device", ")", "\n", "\n", "\n", "", "", "", "sorted_boxes", "=", "sorted_boxes", ".", "view", "(", "first_n", "*", "(", "num_classes", "-", "1", ")", ",", "-", "1", ")", "\n", "# pdb.set_trace()", "\n", "sorted_obj", "=", "sorted_obj", ".", "view", "(", "first_n", "*", "(", "num_classes", "-", "1", ")", ")", "\n", "boxlist", "=", "BoxList", "(", "sorted_boxes", ",", "image_shape", ",", "mode", "=", "\"xyxy\"", ",", ")", "\n", "boxlist", ".", "add_field", "(", "'sorted_idx'", ",", "indices", ")", "\n", "boxlist", ".", "add_field", "(", "'objectness'", ",", "sorted_obj", ")", "\n", "boxlist", ".", "extra_fields", "[", "'scores'", "]", "=", "sorted_scores", "\n", "boxlist", ".", "extra_fields", "[", "\"all_scores\"", "]", "=", "ori_scores", "\n", "# boxlist.extra_fields[\"\"]", "\n", "if", "self", ".", "training", ":", "\n", "\n", "            ", "if", "reg_iou", ":", "\n", "                ", "boxlist", ".", "extra_fields", "[", "'labels_iou_reg'", "]", "=", "labels_reg", "\n", "if", "self", ".", "discriminative", ":", "\n", "                    ", "boxlist", ".", "extra_fields", "[", "'labels_iou_d'", "]", "=", "labels_d", "\n", "", "", "else", ":", "\n", "                ", "boxlist", ".", "extra_fields", "[", "'labels'", "]", "=", "labels_cls", "\n", "", "if", "mt_learning", ":", "\n", "                ", "boxlist", ".", "add_field", "(", "'mt_nms'", ",", "nms_target", ")", "\n", "", "", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "return", "boxlist", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.DuplicationRemovalNetwork.merge_multi_thread_score_test": [[1630, 1640], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "min", "max", "len"], "methods", ["None"], ["", "def", "merge_multi_thread_score_test", "(", "self", ",", "scores", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "MERGE_METHOD", "==", "-", "1", ":", "\n", "            ", "scores", "=", "torch", ".", "mean", "(", "scores", ",", "-", "1", ")", "\n", "", "elif", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "MERGE_METHOD", "==", "-", "2", ":", "\n", "            ", "scores", "=", "torch", ".", "max", "(", "scores", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "MERGE_METHOD", "\n", "idx", "=", "min", "(", "max", "(", "idx", ",", "0", ")", ",", "len", "(", "self", ".", "target_thresh", ")", ")", "\n", "scores", "=", "scores", "[", ":", ",", ":", ",", "idx", "]", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.Discriminative_Loss.__init__": [[1665, 1676], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "delta_var", "=", "0.5", ",", "delta_dist", "=", "1.5", ",", "norm", "=", "2", ",", "alpha", "=", "1.0", ",", "beta", "=", "1.0", ",", "gamma", "=", "0.001", ",", "usegpu", "=", "True", ",", "size_average", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "Discriminative_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "delta_var", "=", "delta_var", "\n", "self", ".", "delta_dist", "=", "delta_dist", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "usegpu", "=", "usegpu", "\n", "assert", "self", ".", "norm", "in", "[", "1", ",", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.Discriminative_Loss.forward": [[1677, 1693], ["range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "target.long", "relation_module_bk.Discriminative_Loss._d_loss_per_cls", "_loss.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.Discriminative_Loss._d_loss_per_cls"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "n_clusters", "=", "None", ")", ":", "\n", "        ", "target", "=", "target", ".", "long", "(", ")", "+", "1", "\n", "num", ",", "nb_cls", ",", "_", "=", "target", ".", "shape", "\n", "_", ",", "_", ",", "embed_dim", "=", "input", ".", "shape", "\n", "_loss", "=", "[", "]", "\n", "# pdb.set_trace()", "\n", "# input = torch.norm(input,dim=1)", "\n", "for", "cls", "in", "range", "(", "nb_cls", ")", ":", "\n", "            ", "fg_idx", "=", "torch", ".", "nonzero", "(", "target", "[", ":", ",", "cls", ",", ":", "]", ")", "[", ":", ",", "0", "]", "\n", "if", "fg_idx", ".", "shape", "[", "0", "]", "<=", "2", ":", "\n", "                ", "continue", "\n", "", "loss", "=", "self", ".", "_d_loss_per_cls", "(", "input", "[", ":", ",", "cls", ",", ":", "]", ",", "target", "[", ":", ",", "cls", ",", ":", "]", ",", "embed_dim", ")", "\n", "_loss", ".", "append", "(", "loss", ")", "\n", "# pdb.set_trace()", "\n", "", "d_loss", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "_loss", ")", ")", "\n", "return", "d_loss", "\n", "", "def", "_d_loss_per_cls", "(", "self", ",", "input", ",", "target", ",", "embed_dim", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.Discriminative_Loss._d_loss_per_cls": [[1693, 1728], ["torch.unique", "torch.unique", "torch.unique", "torch.unique", "target.repeat", "torch_scatter.scatter_mean", "torch_scatter.scatter_add", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "print", "margin.to.to.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "print", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "unique_number.float", "var.sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "_d_loss_per_cls", "(", "self", ",", "input", ",", "target", ",", "embed_dim", ")", ":", "\n", "# do not cal cluster-0", "\n", "# pdb.set_trace()", "\n", "        ", "fg_idx", "=", "torch", ".", "nonzero", "(", "target", ")", "[", ":", ",", "0", "]", "\n", "target", "=", "target", "[", "fg_idx", "]", "\n", "input", "=", "input", "[", "fg_idx", "]", "\n", "unique_labels", ",", "unique_number", "=", "torch", ".", "unique", "(", "target", ",", "return_counts", "=", "True", ")", "\n", "scatter_mask", "=", "target", ".", "repeat", "(", "1", ",", "embed_dim", ")", "\n", "mean", "=", "ts", ".", "scatter_mean", "(", "input", ",", "scatter_mask", ",", "dim", "=", "0", ")", "\n", "# calculate var", "\n", "\n", "sub", "=", "input", "-", "mean", "[", "target", "[", ":", ",", "0", "]", "]", "\n", "sub", "=", "torch", ".", "clamp", "(", "torch", ".", "abs", "(", "sub", ")", ".", "sum", "(", "1", ")", "-", "self", ".", "delta_var", ",", "min", "=", "0", ")", "**", "2", "\n", "sum_sub", "=", "ts", ".", "scatter_add", "(", "sub", ",", "target", "[", ":", ",", "0", "]", ",", "dim", "=", "0", ")", "\n", "var", "=", "sum_sub", "[", "unique_labels", "]", "/", "unique_number", ".", "float", "(", ")", "\n", "var", "=", "var", ".", "sum", "(", "0", ")", "/", "unique_labels", ".", "shape", "[", "0", "]", "\n", "# calculate dist", "\n", "# remove zero cluster", "\n", "mean", "=", "torch", ".", "index_select", "(", "mean", ",", "dim", "=", "0", ",", "index", "=", "unique_labels", ")", "\n", "num_cluster", "=", "mean", ".", "shape", "[", "0", "]", "\n", "print", "(", "'nbcluster'", ",", "num_cluster", ")", "\n", "mean_a", "=", "mean", "[", ":", ",", "None", ",", ":", "]", "\n", "mean_b", "=", "mean", "[", "None", ",", ":", ",", ":", "]", "\n", "diff", "=", "mean_a", "-", "mean_b", "\n", "margin", "=", "2", "*", "self", ".", "delta_dist", "*", "(", "1.0", "-", "torch", ".", "eye", "(", "num_cluster", ")", ")", "\n", "margin", "=", "margin", ".", "to", "(", "mean", ".", "device", ")", "\n", "c_dist", "=", "torch", ".", "sum", "(", "torch", ".", "clamp", "(", "margin", "-", "torch", ".", "abs", "(", "diff", ")", ".", "sum", "(", "-", "1", ")", ",", "min", "=", "0", ")", "**", "2", ")", "\n", "dist", "=", "(", "c_dist", "+", "1e-10", ")", "/", "(", "2", "*", "num_cluster", "*", "(", "num_cluster", "-", "1", "+", "1e-10", ")", ")", "\n", "# dist = dist.clamp(max=100)", "\n", "\n", "# calculate reg", "\n", "reg", "=", "torch", ".", "abs", "(", "mean", ")", ".", "sum", "(", ")", "/", "num_cluster", "\n", "loss", "=", "self", ".", "alpha", "*", "var", "+", "self", ".", "beta", "*", "dist", "+", "self", ".", "gamma", "*", "reg", "\n", "print", "(", "'var'", ",", "var", ".", "data", ",", "'dist'", ",", "dist", ",", "'reg'", ",", "0.001", "*", "reg", ".", "data", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.cluster": [[1642, 1654], ["sklearn.cluster.MeanShift", "sklearn.cluster.MeanShift.fit"], "function", ["None"], ["", "", "def", "cluster", "(", "prediction", ",", "bandwidth", ")", ":", "\n", "    ", "ms", "=", "MeanShift", "(", "bandwidth", ",", "bin_seeding", "=", "True", ")", "\n", "# print ('Mean shift clustering, might take some time ...')", "\n", "# tic = time.time()", "\n", "ms", ".", "fit", "(", "prediction", ")", "\n", "# print ('time for clustering', time.time() - tic)", "\n", "labels", "=", "ms", ".", "labels_", "\n", "cluster_centers", "=", "ms", ".", "cluster_centers_", "\n", "\n", "num_clusters", "=", "cluster_centers", ".", "shape", "[", "0", "]", "\n", "\n", "return", "num_clusters", ",", "labels", ",", "cluster_centers", "\n", "", "def", "remove_idx_in_same_cluster", "(", "cluster_ids", ",", "scores", ",", "unique_id", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.remove_idx_in_same_cluster": [[1654, 1663], ["scores.cpu().numpy.cpu().numpy", "unique_id.tolist", "numpy.nonzero", "numpy.argmax", "index_list.append", "scores.cpu().numpy.cpu"], "function", ["None"], ["", "def", "remove_idx_in_same_cluster", "(", "cluster_ids", ",", "scores", ",", "unique_id", ")", ":", "\n", "    ", "index_list", "=", "[", "]", "\n", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "unique_id", ".", "tolist", "(", ")", ":", "\n", "         ", "index", "=", "np", ".", "nonzero", "(", "cluster_ids", "==", "i", ")", "\n", "score", "=", "scores", "[", "index", "[", "0", "]", "]", "\n", "max_score", "=", "np", ".", "argmax", "(", "score", ")", "\n", "index_list", ".", "append", "(", "index", "[", "0", "]", "[", "max_score", "]", ")", "\n", "", "return", "index_list", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.make_refined_matcher": [[1735, 1742], ["maskrcnn_benchmark.modeling.matcher.Matcher"], "function", ["None"], ["", "", "def", "make_refined_matcher", "(", "cfg", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "False", ",", "\n", ")", "\n", "return", "matcher", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.extract_rank_embedding": [[1743, 1764], ["torch.arange().to().float", "torch.arange().to().float", "torch.arange().to", "torch.arange().to", "dim_mat.view.view", "torch.arange().to().float.view", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cat", "torch.cat", "embedding.to.to", "torch.pow", "torch.pow", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "extract_rank_embedding", "(", "rank_dim", ",", "feat_dim", ",", "wave_length", "=", "1000", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "\"\"\" Extract rank embedding\n    Args:\n        rank_dim: maximum of ranks\n        feat_dim: dimension of embedding feature\n        wave_length:\n    Returns:\n        embedding: [rank_dim, feat_dim]\n    \"\"\"", "\n", "rank_range", "=", "torch", ".", "arange", "(", "0", ",", "rank_dim", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "feat_range", "=", "torch", ".", "arange", "(", "feat_dim", "/", "2", ")", ".", "to", "(", "device", ")", "\n", "dim_mat", "=", "feat_range", "/", "(", "feat_dim", "/", "2", ")", "\n", "dim_mat", "=", "1.", "/", "(", "torch", ".", "pow", "(", "wave_length", ",", "dim_mat", ")", ")", "\n", "dim_mat", "=", "dim_mat", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "rank_mat", "=", "rank_range", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "mul_mat", "=", "rank_mat", "*", "dim_mat", "\n", "sin_mat", "=", "torch", ".", "sin", "(", "mul_mat", ")", "\n", "cos_mat", "=", "torch", ".", "cos", "(", "mul_mat", ")", "\n", "embedding", "=", "torch", ".", "cat", "(", "(", "sin_mat", ",", "cos_mat", ")", ",", "-", "1", ")", "\n", "embedding", "=", "embedding", ".", "to", "(", "device", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.extract_multi_position_matrix": [[1767, 1830], ["boxes.reshape.permute", "torch.chunk", "torch.chunk", "torch.clamp", "torch.clamp", "torch.log", "torch.log", "torch.clamp", "torch.clamp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "delta_h.view.size", "delta_x.view.view", "delta_y.view.view", "delta_w.view.view", "delta_h.view.view", "torch.arange().to", "torch.arange().to", "dim_mat.view.view", "mul_mat.view.view", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cat", "torch.cat", "boxes.reshape.reshape", "cx.permute", "torch.abs", "torch.abs", "cy.permute", "torch.abs", "torch.abs", "w.permute", "h.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pow", "torch.pow", "position_mat.view.view", "position_mat.view.view", "torch.cat", "torch.cat", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "extract_multi_position_matrix", "(", "boxes", ",", "iou", ",", "dim_g", ",", "wave_len", ",", "clswise", "=", "False", ")", ":", "\n", "    ", "if", "iou", "is", "not", "None", ":", "\n", "        ", "iou", "=", "torch", ".", "cat", "(", "[", "iou", "[", "0", "]", "[", "None", ",", ":", ",", ":", "]", ",", "iou", "[", "1", "]", "[", "None", ",", ":", ",", ":", "]", "]", ",", "0", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "boxes", "=", "boxes", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "if", "clswise", ":", "\n", "# [cls * nroi, 1, 4]", "\n", "        ", "boxes", "=", "boxes", ".", "reshape", "(", "1", ",", "-", "1", ",", "4", ")", "\n", "", "x_min", ",", "y_min", ",", "x_max", ",", "y_max", "=", "torch", ".", "chunk", "(", "boxes", ",", "4", ",", "dim", "=", "2", ")", "\n", "cx", "=", "(", "x_min", "+", "x_max", ")", "*", "0.5", "\n", "cy", "=", "(", "y_min", "+", "y_max", ")", "*", "0.5", "\n", "w", "=", "(", "x_max", "-", "x_min", ")", "+", "1.", "\n", "h", "=", "(", "y_max", "-", "y_min", ")", "+", "1.", "\n", "\n", "delta_x", "=", "cx", "-", "cx", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "delta_x", "=", "torch", ".", "clamp", "(", "torch", ".", "abs", "(", "delta_x", "/", "w", ")", ",", "min", "=", "1e-3", ")", "\n", "delta_x", "=", "torch", ".", "log", "(", "delta_x", ")", "\n", "\n", "delta_y", "=", "cy", "-", "cy", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "delta_y", "=", "torch", ".", "clamp", "(", "torch", ".", "abs", "(", "delta_y", "/", "h", ")", ",", "min", "=", "1e-3", ")", "\n", "delta_y", "=", "torch", ".", "log", "(", "delta_y", ")", "\n", "\n", "delta_w", "=", "w", "/", "w", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "delta_w", "=", "torch", ".", "log", "(", "delta_w", ")", "\n", "\n", "delta_h", "=", "h", "/", "h", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "delta_h", "=", "torch", ".", "log", "(", "delta_h", ")", "\n", "\n", "size", "=", "delta_h", ".", "size", "(", ")", "\n", "\n", "delta_x", "=", "delta_x", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "delta_y", "=", "delta_y", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "delta_w", "=", "delta_w", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "delta_h", "=", "delta_h", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "# clsn, nrio, nrio, 4", "\n", "\n", "if", "iou", "is", "not", "None", ":", "\n", "        ", "position_mat", "=", "torch", ".", "cat", "(", "(", "delta_x", ",", "delta_y", ",", "delta_w", ",", "delta_h", ",", "iou", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "position_mat", "=", "torch", ".", "cat", "(", "(", "delta_x", ",", "delta_y", ",", "delta_w", ",", "delta_h", ")", ",", "-", "1", ")", "\n", "", "dev", "=", "10", "if", "iou", "is", "not", "None", "else", "8", "\n", "# pdb.set_trace()", "\n", "feat_range", "=", "torch", ".", "arange", "(", "dim_g", "/", "dev", ")", ".", "to", "(", "boxes", ".", "device", ")", "\n", "dim_mat", "=", "feat_range", "/", "(", "dim_g", "/", "dev", ")", "\n", "dim_mat", "=", "1.", "/", "(", "torch", ".", "pow", "(", "wave_len", ",", "dim_mat", ")", ")", "\n", "\n", "\n", "\n", "dim_mat", "=", "dim_mat", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "if", "iou", "is", "not", "None", ":", "\n", "        ", "position_mat", "=", "position_mat", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "5", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "position_mat", "=", "position_mat", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "4", ",", "-", "1", ")", "\n", "\n", "", "position_mat", "=", "100.", "*", "position_mat", "\n", "\n", "mul_mat", "=", "position_mat", "*", "dim_mat", "\n", "mul_mat", "=", "mul_mat", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "-", "1", ")", "\n", "sin_mat", "=", "torch", ".", "sin", "(", "mul_mat", ")", "\n", "cos_mat", "=", "torch", ".", "cos", "(", "mul_mat", ")", "\n", "embedding", "=", "torch", ".", "cat", "(", "(", "sin_mat", ",", "cos_mat", ")", ",", "-", "1", ")", "\n", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module_bk.extract_multi_position_matrix_polar": [[1831, 1871], ["boxes.reshape.permute", "torch.chunk", "torch.chunk", "torch.sqrt", "torch.sqrt", "torch.clamp", "torch.clamp", "torch.log", "torch.log", "torch.atan2", "torch.atan2", "torch.log", "torch.log", "torch.log", "torch.log", "delta_h.view.size", "delta_w.view.view", "delta_h.view.view", "delta_r.view.view", "theta.view.view", "boxes.reshape.reshape", "cx.permute", "cy.permute", "w.permute", "h.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "iou.view"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "extract_multi_position_matrix_polar", "(", "boxes", ",", "iou", ",", "clswise", "=", "False", ",", ")", ":", "\n", "# pdb.set_trace()", "\n", "    ", "boxes", "=", "boxes", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "if", "clswise", ":", "\n", "# [cls * nroi, 1, 4]", "\n", "        ", "boxes", "=", "boxes", ".", "reshape", "(", "1", ",", "-", "1", ",", "4", ")", "\n", "", "x_min", ",", "y_min", ",", "x_max", ",", "y_max", "=", "torch", ".", "chunk", "(", "boxes", ",", "4", ",", "dim", "=", "2", ")", "\n", "cx", "=", "(", "x_min", "+", "x_max", ")", "*", "0.5", "\n", "cy", "=", "(", "y_min", "+", "y_max", ")", "*", "0.5", "\n", "w", "=", "(", "x_max", "-", "x_min", ")", "+", "1.", "\n", "h", "=", "(", "y_max", "-", "y_min", ")", "+", "1.", "\n", "\n", "delta_x", "=", "cx", "-", "cx", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "delta_y", "=", "cy", "-", "cy", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "delta_w", "=", "w", "/", "w", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "delta_h", "=", "h", "/", "h", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "delta_r", "=", "torch", ".", "sqrt", "(", "delta_y", "**", "2", "+", "delta_x", "**", "2", ")", "\n", "delta_r", "=", "torch", ".", "clamp", "(", "delta_r", ",", "min", "=", "1e-3", ")", "\n", "delta_r", "=", "torch", ".", "log", "(", "delta_r", ")", "\n", "theta", "=", "torch", ".", "atan2", "(", "delta_y", ",", "delta_x", ")", "\n", "\n", "delta_w", "=", "torch", ".", "log", "(", "delta_w", ")", "\n", "delta_h", "=", "torch", ".", "log", "(", "delta_h", ")", "\n", "\n", "size", "=", "delta_h", ".", "size", "(", ")", "\n", "delta_w", "=", "delta_w", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "delta_h", "=", "delta_h", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "delta_r", "=", "delta_r", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "theta", "=", "theta", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "if", "iou", "is", "not", "None", ":", "\n", "        ", "iou_shape", "=", "iou", ".", "shape", "\n", "position_mat", "=", "torch", ".", "cat", "(", "(", "delta_r", ",", "theta", ",", "delta_w", ",", "delta_h", ",", "iou", ".", "view", "(", "1", ",", "iou_shape", "[", "0", "]", ",", "iou_shape", "[", "1", "]", ",", "1", ")", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "position_mat", "=", "torch", ".", "cat", "(", "(", "delta_r", ",", "theta", ",", "delta_w", ",", "delta_h", ")", ",", "-", "1", ")", "\n", "\n", "\n", "", "return", "position_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.mask_relation_module.MaskRelationRefineNet.__init__": [[17, 52], ["torch.nn.Module.__init__", "cfg.clone", "maskrcnn_benchmark.modeling.relation.relation_mask_feature_extractor.make_relation_mask_feature_extractor", "maskrcnn_benchmark.modeling.box_coder.BoxCoder", "torch.nn.Conv2d", "torch.nn.Conv2d", "int", "int", "maskrcnn_benchmark.layers.ConvTranspose2d", "mask_relation_module.CAM_Module", "maskrcnn_benchmark.layers.ConvTranspose2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "int", "mask_relation_module.CIAM_Module"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_mask_feature_extractor.make_relation_mask_feature_extractor"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "predictor", ")", ":", "\n", "        ", "super", "(", "MaskRelationRefineNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "hide_dim", "=", "(", "784", ",", ")", "if", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", "==", "1", "else", "(", "int", "(", "14", "*", "14", "*", "16", ")", ",", ")", "\n", "self", ".", "output_channel", "=", "784", "if", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", "==", "1", "else", "int", "(", "14", "*", "14", "*", "16", ")", "\n", "self", ".", "relation_hw", "=", "14", "if", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", "!=", "1", "else", "28", "\n", "self", ".", "appearance_feature_extractor", "=", "make_relation_mask_feature_extractor", "(", "cfg", ")", "\n", "self", ".", "prepare_sort_by_cluster", "=", "False", "\n", "self", ".", "num_center_per_class", "=", "1", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "IOU_COOR", "==", "True", "and", "self", ".", "geo_feature_dim", "==", "4", ":", "\n", "            ", "self", ".", "geo_feature_dim", "=", "5", "\n", "", "if", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "IOU_COOR", "and", "self", ".", "geo_feature_dim", ">", "5", ":", "\n", "            ", "self", ".", "geo_feature_dim", "=", "int", "(", "self", ".", "geo_feature_dim", "/", "4", "*", "5", ")", "\n", "", "self", ".", "boxcoder", "=", "BoxCoder", "(", "weights", "=", "(", "10.", ",", "10.", ",", "5.", ",", "5.", ")", ")", "\n", "# self.class_agnostic = cfg.MODEL.RELATION_NMS.CLASS_AGNOSTIC", "\n", "self", ".", "fg_class", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "-", "1", "\n", "# in_channel = int(16 * 14 * 14) if cfg.MODEL.RELATION_MASK.EXTRACTOR_CHANNEL!=1 else ()", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", ",", "3", ",", "1", ")", "\n", "# self.classifier = nn.Linear(128, int(cfg.MODEL.ROI_MASK_HEAD.RESOLUTION * cfg.MODEL.ROI_MASK_HEAD.RESOLUTION), bias=True)", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", "!=", "1", ":", "\n", "            ", "self", ".", "deconv_1", "=", "ConvTranspose2d", "(", "16", ",", "16", ",", "2", ",", "2", ",", "0", ")", "\n", "\n", "# self.detections_per_img = cfg.MODEL.ROI_HEADS.DETECTIONS_PER_IMG", "\n", "", "self", ".", "iter", "=", "0", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "TYPE", "==", "'CAM'", ":", "\n", "            ", "self", ".", "relation_module", "=", "CAM_Module", "(", "128", ")", "\n", "", "elif", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "TYPE", "==", "'CIAM'", ":", "\n", "            ", "self", ".", "relation_module", "=", "CIAM_Module", "(", "cfg", ")", "\n", "", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "SAME_PREDICTOR", ":", "\n", "            ", "self", ".", "predictor", "=", "predictor", "\n", "", "else", ":", "\n", "            ", "self", ".", "deconv_1", "=", "ConvTranspose2d", "(", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", ",", "\n", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", ",", "2", ",", "2", ",", "0", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.mask_relation_module.MaskRelationRefineNet.forward": [[53, 108], ["mask_relation_module.MaskRelationRefineNet.prepare_msk_relation", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "mask_relation_module.MaskRelationRefineNet.appearance_feature_extractor", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "mask_relation_module.MaskRelationRefineNet.predictor", "mask_relation_module.MaskRelationRefineNet.deconv_1", "torch.relu", "torch.relu", "mask_relation_module.MaskRelationRefineNet.classifier", "mask_relation_module.MaskRelationRefineNet.relation_module", "range", "mask_relation_module.MaskRelationRefineNet.append", "mask_relation_module.MaskRelationRefineNet.relation_module"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.mask_relation_module.MaskRelationRefineNet.prepare_msk_relation", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        Only support batch = 1\n        :param x:\n        :return:\n        '''", "\n", "\n", "features_RoI", ",", "features_mask", ",", "proposals", ",", "targets", "=", "x", "\n", "# binarized", "\n", "select_feature_mask", ",", "sorted_feature_roi", ",", "sorted_feature_mask", ",", "distances", ",", "sorted_proposals", ",", "bboxes", ",", "label_index", ",", "center", ",", "distance_before_refine", "=", "self", ".", "prepare_msk_relation", "(", "features_RoI", ",", "features_mask", ",", "proposals", ",", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "TYPE", "==", "'CAM'", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "fg_class", ")", ":", "\n", "                ", "feature", "=", "select_feature_mask", "[", "i", "]", "\n", "select_feature_mask", "[", "i", "]", "=", "self", ".", "relation_module", "(", "feature", "[", "None", ",", ":", ",", ":", ",", ":", "]", ")", "[", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "", "select_feature_mask", "=", "torch", ".", "cat", "(", "select_feature_mask", ")", "\n", "index", "=", "torch", ".", "arange", "(", "select_feature_mask", ".", "shape", "[", "0", "]", ",", "device", "=", "select_feature_mask", ".", "device", ")", "\n", "sorted_feature_mask", "[", "index", ",", "label_index", "]", "=", "select_feature_mask", "[", ":", ",", ":", ",", ":", "]", "\n", "return", "sorted_feature_mask", ",", "sorted_proposals", ",", "targets", ",", "None", "\n", "# distance_before_refine = torch.cat(distance_before_refine)", "\n", "", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "TYPE", "==", "'CIAM'", ":", "\n", "            ", "cls_length", "=", "[", "select_feature_mask", "[", "i", "]", ".", "shape", "[", "0", "]", "for", "i", "in", "range", "(", "self", ".", "fg_class", ")", "]", "\n", "select_feature_mask", "=", "torch", ".", "cat", "(", "select_feature_mask", ",", "dim", "=", "0", ")", "\n", "sorted_feature_roi", "=", "torch", ".", "cat", "(", "sorted_feature_roi", ",", "dim", "=", "0", ")", "\n", "select_feature_mask", "=", "F", ".", "sigmoid", "(", "select_feature_mask", ")", "\n", "sorted_feature", "=", "self", ".", "appearance_feature_extractor", "(", "(", "sorted_feature_roi", ",", "select_feature_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "FEATURE_EXTRACTOR", "==", "'SameFeatureMask'", ":", "\n", "                ", "sorted_feature", ",", "select_feature_mask", "=", "sorted_feature", "\n", "sorted_feature", "=", "torch", ".", "split", "(", "sorted_feature", ",", "cls_length", ")", "\n", "", "else", ":", "\n", "                ", "sorted_feature", "=", "torch", ".", "split", "(", "sorted_feature", ",", "cls_length", ")", "\n", "", "relation_feature", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "fg_class", ")", ":", "\n", "                ", "feature", "=", "sorted_feature", "[", "i", "]", "\n", "if", "feature", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "                    ", "relation_feature", ".", "append", "(", "self", ".", "relation_module", "(", "feature", ")", ")", "\n", "", "", "relation_feature", "=", "torch", ".", "cat", "(", "relation_feature", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "SAME_PREDICTOR", "and", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "FEATURE_EXTRACTOR", "in", "[", "\"SameSizeRoiAlignMaskFeatureExtractor\"", ",", "\"SameFeatureMask\"", ",", "'DeepFeatureExtractor'", "]", ":", "\n", "                ", "relation_feature", "=", "self", ".", "predictor", "(", "relation_feature", ")", "\n", "", "else", ":", "\n", "                ", "relation_feature", "=", "self", ".", "deconv_1", "(", "relation_feature", ")", "\n", "relation_feature", "=", "F", ".", "relu", "(", "relation_feature", ")", "\n", "relation_feature", "=", "self", ".", "classifier", "(", "relation_feature", ")", "\n", "", "index", "=", "torch", ".", "arange", "(", "relation_feature", ".", "shape", "[", "0", "]", ",", "device", "=", "select_feature_mask", ".", "device", ")", "\n", "sorted_feature_mask", "[", "index", "]", "=", "relation_feature", "\n", "return", "sorted_feature_mask", ",", "sorted_proposals", ",", "targets", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.mask_relation_module.MaskRelationRefineNet.prepare_msk_relation": [[109, 156], ["proposal.get_field", "proposal.get_field", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "select_feature_mask.append", "torch.cat.append", "torch.cat.append", "sorted_feature_roi.append", "bboxes.append", "objectness.append", "index.tolist", "maskrcnn_benchmark.modeling.relation.relation_module.cat_boxlist", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "range", "cls_boxlist.append", "len", "boxlist.append", "maskrcnn_benchmark.modeling.relation.relation_module.cat_boxlist"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist"], ["", "", "def", "prepare_msk_relation", "(", "self", ",", "featureROI", ",", "feature_mask", ",", "proposal", ")", ":", "\n", "\n", "        ", "gt_labels", "=", "proposal", ".", "get_field", "(", "'labels'", ")", "\n", "obj_score", "=", "proposal", ".", "get_field", "(", "'objectness'", ")", "\n", "label_index", "=", "[", "torch", ".", "nonzero", "(", "gt_labels", "==", "(", "i", "+", "1", ")", ")", "[", ":", ",", "0", "]", "for", "i", "in", "range", "(", "self", ".", "fg_class", ")", "]", "\n", "objectness", "=", "[", "]", "\n", "sorted_feature_roi", "=", "[", "]", "\n", "select_feature_mask", "=", "[", "]", "\n", "sorted_feature_mask", "=", "[", "]", "\n", "bboxes", "=", "[", "]", "\n", "boxlist", "=", "[", "]", "\n", "for", "labels", ",", "index", "in", "enumerate", "(", "label_index", ")", ":", "\n", "# get the class feature and box", "\n", "            ", "cls_feature_mask", "=", "feature_mask", "[", "index", ",", "labels", "+", "1", "]", "\n", "all_cls_feature_mask", "=", "feature_mask", "[", "index", "]", "\n", "cls_feature_roi", "=", "featureROI", "[", "index", "]", "\n", "cls_bbox", "=", "proposal", ".", "bbox", "[", "index", "]", "\n", "cls_obj_score", "=", "obj_score", "[", "index", "]", "\n", "# sort box and feature", "\n", "sort_object_score", ",", "sort_index", "=", "torch", ".", "sort", "(", "cls_obj_score", ",", "descending", "=", "True", ")", "\n", "index", "=", "index", "[", "sort_index", "]", "\n", "cls_feature_mask", "=", "cls_feature_mask", "[", "sort_index", "]", "\n", "all_cls_feature_mask", "=", "all_cls_feature_mask", "[", "sort_index", "]", "\n", "cls_feature_roi", "=", "cls_feature_roi", "[", "sort_index", "]", "\n", "cls_bbox", "=", "cls_bbox", "[", "sort_index", "]", "\n", "select_feature_mask", ".", "append", "(", "cls_feature_mask", ")", "\n", "sorted_feature_mask", ".", "append", "(", "all_cls_feature_mask", ")", "\n", "sorted_feature_roi", ".", "append", "(", "cls_feature_roi", ")", "\n", "bboxes", ".", "append", "(", "cls_bbox", ")", "\n", "objectness", ".", "append", "(", "sort_object_score", ")", "\n", "cls_boxlist", "=", "[", "]", "\n", "for", "i", "in", "index", ".", "tolist", "(", ")", ":", "\n", "                ", "cls_boxlist", ".", "append", "(", "proposal", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "", "if", "len", "(", "index", ")", "!=", "0", ":", "\n", "# sometimes it only have one class box", "\n", "                ", "boxlist", ".", "append", "(", "cat_boxlist", "(", "cls_boxlist", ")", ")", "\n", "", "", "boxlist", "=", "[", "cat_boxlist", "(", "boxlist", ")", "]", "\n", "sorted_feature_mask", "=", "torch", ".", "cat", "(", "sorted_feature_mask", ",", "0", ")", "\n", "return", "select_feature_mask", ",", "sorted_feature_roi", ",", "sorted_feature_mask", ",", "None", ",", "boxlist", ",", "bboxes", ",", "gt_labels", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.mask_relation_module.CAM_Module.__init__": [[159, 166], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Softmax", "torch.nn.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "CAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.mask_relation_module.CAM_Module.forward": [[166, 189], ["x.size", "x.view", "x.view().permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "mask_relation_module.CAM_Module.softmax", "x.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "[].expand_as", "x.view", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X C X C\n        \"\"\"", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", "\n", "proj_key", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "\n", "energy_new", "=", "torch", ".", "max", "(", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "# pdb.set_trace()", "\n", "attention", "=", "self", ".", "softmax", "(", "energy_new", ")", "\n", "proj_value", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "attention", ",", "proj_value", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.mask_relation_module.CIAM_Module.__init__": [[191, 199], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Softmax", "torch.nn.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", ")", ":", "\n", "        ", "super", "(", "CIAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "NORM", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "self", ".", "topk", "=", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "TOPK", "\n", "self", ".", "prenorm", "=", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "PRE_NORM", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.mask_relation_module.CIAM_Module.forward": [[199, 243], ["x.size", "channel_wize_feature.permute.permute.permute", "channel_wize_feature.permute.permute.contiguous().view", "channel_wize_feature.permute.permute.contiguous().view().permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "mask_relation_module.CIAM_Module.softmax", "x.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "[].expand_as", "x.view", "channel_wize_feature.permute.permute.contiguous", "channel_wize_feature.permute.permute.contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.max", "torch.max", "torch.max", "torch.max", "channel_weight[].expand_as", "mask_relation_module.normalize_tensor", "torch.bmm.view", "torch.bmm.view", "channel_wize_feature.permute.permute.contiguous", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.mask_relation_module.normalize_tensor"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n\n        :param x: (n,c,h,w) n instance feature map\n        :return:\n        '''", "\n", "# pre-norm", "\n", "\n", "\n", "\n", "n_instance", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "if", "n_instance", ">", "self", ".", "topk", ":", "\n", "            ", "topk", "=", "self", ".", "topk", "\n", "", "else", ":", "\n", "            ", "topk", "=", "n_instance", "\n", "", "if", "self", ".", "prenorm", ":", "\n", "            ", "normfeature", "=", "torch", ".", "norm", "(", "x", ".", "view", "(", "n_instance", ",", "-", "1", ")", ",", "2", ",", "-", "1", ")", "\n", "channel_wize_feature", "=", "x", "/", "normfeature", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "# channel_wize_feature = normalize_tensor(x)", "\n", "", "else", ":", "\n", "            ", "channel_wize_feature", "=", "x", "\n", "", "channel_wize_feature", "=", "channel_wize_feature", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "proj_query", "=", "channel_wize_feature", ".", "contiguous", "(", ")", ".", "view", "(", "C", ",", "n_instance", ",", "-", "1", ")", "\n", "proj_key", "=", "channel_wize_feature", ".", "contiguous", "(", ")", ".", "view", "(", "C", ",", "n_instance", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# [c, n, n ]", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "# normalize", "\n", "if", "self", ".", "norm", "==", "1", ":", "\n", "            ", "channel_weight", "=", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "energy", ".", "view", "(", "C", ",", "-", "1", ")", ",", "dim", "=", "1", ")", ")", "\n", "channel_weight", "=", "channel_weight", "/", "torch", ".", "max", "(", "channel_weight", ")", "\n", "norm_energy", "=", "energy", "*", "channel_weight", "[", ":", ",", "None", ",", "None", "]", ".", "expand_as", "(", "energy", ")", "\n", "", "elif", "self", ".", "norm", "==", "2", ":", "\n", "            ", "norm_energy", "=", "normalize_tensor", "(", "energy", "[", "None", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "norm_energy", "=", "norm_energy", "[", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "norm_energy", "=", "energy", "\n", "", "norm_energy", "=", "torch", ".", "max", "(", "norm_energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "norm_energy", ")", "-", "norm_energy", "\n", "norm_energy", "=", "torch", ".", "mean", "(", "norm_energy", ",", "0", ")", "\n", "attention", "=", "self", ".", "softmax", "(", "norm_energy", ")", "\n", "proj_value", "=", "x", ".", "view", "(", "1", ",", "n_instance", ",", "-", "1", ")", "\n", "out", "=", "torch", ".", "bmm", "(", "attention", "[", "None", ",", ":", ",", ":", "]", ",", "proj_value", ")", "\n", "out", "=", "out", ".", "view", "(", "n_instance", ",", "C", ",", "H", ",", "W", ")", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.mask_relation_module.normalize_tensor": [[244, 248], ["torch.sqrt().view", "torch.sqrt().view", "torch.sqrt", "torch.sqrt", "in_feat.size", "in_feat.size", "in_feat.size", "torch.sqrt().view.expand_as", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "normalize_tensor", "(", "in_feat", ",", "eps", "=", "1e-10", ")", ":", "\n", "# norm_factor = torch.sqrt(torch.sum(in_feat**2,dim=1)).view(in_feat.size()[0],1,in_feat.size()[2],in_feat.size()[3]).repeat(1,in_feat.size()[1],1,1)", "\n", "    ", "norm_factor", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "in_feat", "**", "2", ",", "dim", "=", "1", ")", ")", ".", "view", "(", "in_feat", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "in_feat", ".", "size", "(", ")", "[", "2", "]", ",", "in_feat", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "return", "in_feat", "/", "(", "norm_factor", ".", "expand_as", "(", "in_feat", ")", "+", "eps", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.RelationModule.__init__": [[15, 32], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "appearance_feature_dim", "=", "1024", ",", "geo_feature_dim", "=", "64", ",", "\n", "fc_dim", "=", "(", "64", ",", "16", ")", ",", "group", "=", "16", ",", "dim", "=", "(", "1024", ",", "1024", ",", "1024", ")", ",", "topk", "=", "10", ",", "iou_method", "=", "'b'", ")", ":", "\n", "        ", "super", "(", "RelationModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc_dim", "=", "fc_dim", "\n", "self", ".", "dim_group", "=", "(", "int", "(", "dim", "[", "0", "]", "/", "group", ")", ",", "int", "(", "dim", "[", "1", "]", "/", "group", ")", ",", "int", "(", "dim", "[", "2", "]", "/", "group", ")", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "group", "=", "group", "\n", "self", ".", "WG", "=", "nn", ".", "Linear", "(", "geo_feature_dim", ",", "fc_dim", "[", "1", "]", ",", "bias", "=", "True", ")", "\n", "# 1024, 1024", "\n", "self", ".", "WK", "=", "nn", ".", "Linear", "(", "appearance_feature_dim", ",", "dim", "[", "1", "]", ",", "bias", "=", "True", ")", "\n", "self", ".", "WQ", "=", "nn", ".", "Linear", "(", "appearance_feature_dim", ",", "dim", "[", "0", "]", ",", "bias", "=", "True", ")", "\n", "# self.WV = nn.Linear(appearance_feature_dim, key_feature_dim, bias=True)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "fc_dim", "[", "1", "]", "*", "appearance_feature_dim", ",", "dim", "[", "2", "]", ",", "1", ",", "groups", "=", "group", ")", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "iou_method", "=", "iou_method", "\n", "assert", "fc_dim", "[", "1", "]", "==", "group", ",", "'Check the dimensions in attention!'", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.RelationModule.forward": [[33, 91], ["f_a.permute.permute.size", "f_a.permute.permute.permute", "f_a.permute.permute.contiguous().view", "position_embedding.view.view.view", "relation_module.RelationModule.relu", "relation_module.RelationModule.WK", "w_k.contiguous().view.contiguous().view.view", "w_k.contiguous().view.contiguous().view.permute", "w_k.contiguous().view.contiguous().view.contiguous().view", "relation_module.RelationModule.WQ", "w_q.contiguous().view.contiguous().view.view", "w_q.contiguous().view.contiguous().view.transpose", "w_q.contiguous().view.contiguous().view.contiguous().view", "w_g.contiguous().view.contiguous().view.view", "w_g.contiguous().view.contiguous().view.permute", "w_g.contiguous().view.contiguous().view.contiguous().view", "min", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.zeros_like().to.scatter", "torch.zeros_like().to.scatter", "w_mn_topk.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.permute.permute.view", "output.permute.permute.permute", "output.permute.permute.contiguous().view", "relation_module.RelationModule.conv1", "output.permute.permute.squeeze", "output.permute.permute.permute", "relation_module.RelationModule.WG", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "log_iou[].repeat().view", "f_a.permute.permute.contiguous", "w_k.contiguous().view.contiguous().view.contiguous", "w_q.contiguous().view.contiguous().view.contiguous", "math.sqrt", "w_g.contiguous().view.contiguous().view.contiguous", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "output.permute.permute.contiguous", "float", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "log_iou[].repeat", "torch.log", "torch.log", "torch.log", "torch.log", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "f_a", ",", "position_embedding", ",", "iou", ")", ":", "\n", "# f_a: [num_rois, num_fg_classes, feat_dim]", "\n", "        ", "N", ",", "num_fg_class", ",", "feat_dim", "=", "f_a", ".", "size", "(", ")", "\n", "# f_a = f_a.transpose(0, 1)", "\n", "f_a", "=", "f_a", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "# f_a_reshape [num-roi*num-fg-cls, feat-dim]", "\n", "f_a_reshape", "=", "f_a", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "num_fg_class", ",", "feat_dim", ")", "\n", "# [num_fg_classes * num_rois * num_rois, fc_dim[0]]", "\n", "position_embedding", "=", "position_embedding", ".", "view", "(", "-", "1", ",", "self", ".", "fc_dim", "[", "0", "]", ")", "\n", "w_g", "=", "self", ".", "relu", "(", "self", ".", "WG", "(", "position_embedding", ")", ")", "\n", "w_k", "=", "self", ".", "WK", "(", "f_a_reshape", ")", "\n", "# [ num_rpi, 16, 64 ]", "\n", "w_k", "=", "w_k", ".", "view", "(", "-", "1", ",", "N", ",", "self", ".", "group", ",", "self", ".", "dim_group", "[", "1", "]", ")", "\n", "w_k", "=", "w_k", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "# k_data_batch, [num_fg_classes * group, dim_group[1], num_rois,]", "\n", "w_k", "=", "w_k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "dim_group", "[", "1", "]", ",", "N", ")", "\n", "w_q", "=", "self", ".", "WQ", "(", "f_a_reshape", ")", "\n", "w_q", "=", "w_q", ".", "view", "(", "-", "1", ",", "N", ",", "self", ".", "group", ",", "self", ".", "dim_group", "[", "0", "]", ")", "\n", "w_q", "=", "w_q", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# q_data_batch, [num_fg_classes * group, num_rois, dim_group[0]]", "\n", "w_q", "=", "w_q", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "N", ",", "self", ".", "dim_group", "[", "0", "]", ")", "\n", "# aff, [num_fg_classes * group, num_rois, num_rois]", "\n", "aff", "=", "(", "1.0", "/", "math", ".", "sqrt", "(", "float", "(", "self", ".", "dim_group", "[", "1", "]", ")", ")", ")", "*", "torch", ".", "bmm", "(", "w_q", ",", "w_k", ")", "\n", "w_g", "=", "w_g", ".", "view", "(", "-", "1", ",", "N", ",", "N", ",", "self", ".", "fc_dim", "[", "1", "]", ")", "\n", "#  [num_fg_classes, fc_dim[1], num_rois, num_rois]", "\n", "w_g", "=", "w_g", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "#  [num_fg_classes * fc_dim[1], num_rois, num_rois]", "\n", "w_g", "=", "w_g", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "N", ",", "N", ")", "\n", "if", "iou", "is", "not", "None", ":", "\n", "            ", "iou", "=", "torch", ".", "cat", "(", "[", "iou", "[", "0", "]", "[", "None", ",", ":", ",", ":", "]", ",", "iou", "[", "1", "]", "[", "None", ",", ":", ",", ":", "]", "]", ")", "\n", "if", "self", ".", "iou_method", "==", "'s'", ":", "\n", "                ", "log_iou", "=", "torch", ".", "log", "(", "iou", "+", "1", ")", "\n", "", "elif", "self", ".", "iou_method", "==", "'h'", ":", "\n", "                ", "log_iou", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "iou", ",", "min", "=", "1e-6", ")", ")", "\n", "", "else", ":", "\n", "                ", "iou", "[", "iou", ">=", "1e-6", "]", "=", "1", "\n", "log_iou", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "iou", ",", "min", "=", "1e-6", ")", ")", "\n", "", "log_iou", "=", "log_iou", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "1", ",", "self", ".", "group", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "N", ",", "N", ")", "\n", "w_mn", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "w_g", ",", "min", "=", "1e-6", ")", ")", "+", "aff", "+", "log_iou", "\n", "", "else", ":", "\n", "            ", "w_mn", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "w_g", ",", "min", "=", "1e-6", ")", ")", "+", "aff", "\n", "", "top_k", "=", "min", "(", "N", ",", "self", ".", "topk", ")", "\n", "w_mn_topk", ",", "indices", "=", "torch", ".", "topk", "(", "w_mn", ",", "top_k", ",", "dim", "=", "2", ",", "\n", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "res", "=", "torch", ".", "zeros_like", "(", "w_mn", ")", ".", "to", "(", "w_mn", ".", "device", ")", "\n", "w_mn_topk", "=", "F", ".", "softmax", "(", "w_mn_topk", ",", "dim", "=", "2", ")", "\n", "w_mn_topk", "=", "res", ".", "scatter", "(", "2", ",", "indices", ",", "w_mn_topk", ")", "\n", "w_mn_topk", "=", "w_mn_topk", ".", "view", "(", "num_fg_class", ",", "-", "1", ",", "N", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "w_mn_topk", ",", "f_a", ")", "\n", "output", "=", "output", ".", "view", "(", "num_fg_class", ",", "self", ".", "fc_dim", "[", "1", "]", ",", "N", ",", "feat_dim", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "3", ",", "2", ",", "0", ")", "\n", "# output_t_reshape, [1, fc_dim[1] * feat_dim, num_rois, num_fg_classes]", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "self", ".", "fc_dim", "[", "1", "]", "*", "feat_dim", ",", "N", ",", "-", "1", ")", "\n", "# [1, 128, nroi, cls]", "\n", "output", "=", "self", ".", "conv1", "(", "output", ")", "\n", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "return", "output", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.__init__": [[95, 133], ["torch.Module.__init__", "cfg.clone", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "relation_module.RelationModule", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "maskrcnn_benchmark.modeling.box_coder.BoxCoder", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "int", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "is_teacher", "=", "False", ",", ")", ":", "\n", "        ", "super", "(", "DuplicationRemovalNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "# if reg_iou = True, then this network is used to regress", "\n", "# the iou to the GT. if not True, this predict", "\n", "# true-object/duplicate", "\n", "self", ".", "reg_iou", "=", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "REG_IOU", "\n", "self", ".", "first_n", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "FIRST_N", "\n", "self", ".", "NMS_thread", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "THREAD", "\n", "self", ".", "nms_rank_fc", "=", "nn", ".", "Linear", "(", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "ROI_FEAT_DIM", ",", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ",", "bias", "=", "True", ")", "\n", "self", ".", "roi_feat_embedding_fc", "=", "nn", ".", "Linear", "(", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "ROI_FEAT_DIM", ",", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ",", "bias", "=", "True", ")", "\n", "self", ".", "target_thresh", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "THREAD", "\n", "self", ".", "geo_feature_dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GEO_FEAT_DIM", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "USE_IOU", ":", "\n", "            ", "self", ".", "geo_feature_dim", "=", "int", "(", "self", ".", "geo_feature_dim", "/", "4", "*", "5", ")", "\n", "", "self", ".", "relation_module", "=", "RelationModule", "(", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ",", "\n", "geo_feature_dim", "=", "self", ".", "geo_feature_dim", ",", "\n", "fc_dim", "=", "(", "self", ".", "geo_feature_dim", ",", "16", ")", ",", "\n", "group", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GROUP", ",", "\n", "dim", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "HID_DIM", ",", "\n", "topk", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "TOPK", ",", "\n", "iou_method", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "IOU_METHOD", ")", "\n", "\n", "self", ".", "nms_fg_weight", "=", "torch", ".", "tensor", "(", "[", "1.", ",", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "WEIGHT", "]", ")", "\n", "self", ".", "mt_fg_weight", "=", "torch", ".", "tensor", "(", "[", "1.", ",", "10.", "]", ")", "\n", "self", ".", "alpha", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "ALPHA", "\n", "self", ".", "gamma", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "GAMMA", "\n", "self", ".", "boxcoder", "=", "BoxCoder", "(", "weights", "=", "(", "10.", ",", "10.", ",", "5.", ",", "5.", ")", ")", "\n", "self", ".", "class_agnostic", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "CLASS_AGNOSTIC", "\n", "self", ".", "fg_class", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "-", "1", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "128", ",", "len", "(", "self", ".", "target_thresh", ")", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fg_thread", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "FG_THREAD", "\n", "self", ".", "detections_per_img", "=", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "DETECTIONS_PER_IMG", "\n", "self", ".", "nms", "=", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "POS_NMS", "\n", "self", ".", "nms_loss_type", "=", "cfg", ".", "MT", ".", "NMS_LOSS_TYPE", "\n", "self", ".", "mode", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.set_teacher_mode": [[134, 136], ["None"], "methods", ["None"], ["", "def", "set_teacher_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.forward": [[137, 322], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relation_module.DuplicationRemovalNetwork.roi_feat_embedding_fc", "appearance_feature.split.split.split", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relation_module.DuplicationRemovalNetwork.nms_rank_fc", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "relation_module.extract_multi_position_matrix", "relation_module.DuplicationRemovalNetwork.relation_module", "relation_module.DuplicationRemovalNetwork.relu1", "sorted_features.type.type.view", "relation_module.DuplicationRemovalNetwork.classifier", "sorted_features.type.type.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "relation_module.DuplicationRemovalNetwork.prepare_ranking", "len", "f.get_field", "feature.size", "sorted_features.type.type.append", "relation_module.DuplicationRemovalNetwork.append", "len", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "relation_module.DuplicationRemovalNetwork.merge_multi_thread_score_test", "scores.split.split.split", "bboxes.split.split.split", "input_scores.split.split.split", "objectness.split.split.split", "all_scores.split.split.split", "zip", "f.get_field", "f.bbox.reshape", "f.get_field().reshape", "f.get_field", "relation_module.extract_rank_embedding", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "reg_label.type.type.to", "reg_label.type.type.type", "sorted_features.type.type.to", "sorted_features.type.type.type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "labels.type.type.to", "labels.type.type.type", "torch.nn.functional.binary_cross_entropy", "torch.nn.functional.binary_cross_entropy", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "len", "result.append", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "f.get_field", "f.get_field", "f.get_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field.cpu", "image_thresh.item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.extract_multi_position_matrix", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.prepare_ranking", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.merge_multi_thread_score_test", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.extract_rank_embedding", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "appearance_feature", ",", "proposals", ",", "cls_score", ",", "box_reg", ",", "targets", "=", "x", "\n", "self", ".", "device", "=", "appearance_feature", ".", "device", "\n", "appearance_feature", "=", "appearance_feature", "\n", "cls_score", "=", "cls_score", "\n", "box_reg", "=", "box_reg", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sorted_boxlists", "=", "self", ".", "prepare_ranking", "(", "cls_score", ",", "\n", "box_reg", ",", "\n", "proposals", ",", "\n", "targets", ",", "\n", "reg_iou", "=", "self", ".", "reg_iou", ")", "\n", "# concate value from different images", "\n", "", "boxes_per_image", "=", "[", "len", "(", "f", ")", "for", "f", "in", "proposals", "]", "\n", "idxs", "=", "[", "f", ".", "get_field", "(", "'sorted_idx'", ")", "for", "f", "in", "sorted_boxlists", "]", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'scores'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "bboxes", "=", "torch", ".", "cat", "(", "[", "f", ".", "bbox", ".", "reshape", "(", "-", "1", ",", "self", ".", "fg_class", ",", "4", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "objectness", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'objectness'", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "fg_class", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "all_scores", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'all_scores'", ")", "for", "f", "in", "\n", "sorted_boxlists", "]", ")", "\n", "\n", "# add iou information", "\n", "image_sizes", "=", "[", "f", ".", "size", "for", "f", "in", "sorted_boxlists", "]", "\n", "sorted_boxes_per_image", "=", "[", "[", "*", "f", ".", "shape", "]", "[", "0", "]", "for", "f", "in", "idxs", "]", "\n", "appearance_feature", "=", "self", ".", "roi_feat_embedding_fc", "(", "appearance_feature", ")", "\n", "appearance_feature", "=", "appearance_feature", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "sorted_features", "=", "[", "]", "\n", "nms_rank_embedding", "=", "[", "]", "\n", "for", "id", ",", "feature", ",", "box_per_image", "in", "zip", "(", "idxs", ",", "appearance_feature", ",", "boxes_per_image", ")", ":", "\n", "            ", "feature", "=", "feature", "[", "id", "]", "\n", "size", "=", "feature", ".", "size", "(", ")", "\n", "if", "size", "[", "0", "]", "<=", "self", ".", "first_n", ":", "\n", "                ", "first_n", "=", "size", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "first_n", "=", "self", ".", "first_n", "\n", "", "sorted_features", ".", "append", "(", "feature", ")", "\n", "#[rank_dim * batch , feat_dim]", "\n", "nms_rank_embedding", ".", "append", "(", "extract_rank_embedding", "(", "first_n", ",", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "ROI_FEAT_DIM", ",", "device", "=", "feature", ".", "device", ")", ")", "\n", "#  [first_n * batchsize, num_fg_classes, 128]", "\n", "", "sorted_features", "=", "torch", ".", "cat", "(", "sorted_features", ",", "dim", "=", "0", ")", "\n", "nms_rank_embedding", "=", "torch", ".", "cat", "(", "nms_rank_embedding", ",", "dim", "=", "0", ")", "\n", "nms_rank_embedding", "=", "self", ".", "nms_rank_fc", "(", "nms_rank_embedding", ")", "\n", "sorted_features", "=", "sorted_features", "+", "nms_rank_embedding", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "boxes_cls_1", "=", "BoxList", "(", "bboxes", "[", ":", ",", "0", ",", ":", "]", ",", "image_sizes", "[", "0", "]", ")", "\n", "boxes_cls_2", "=", "BoxList", "(", "bboxes", "[", ":", ",", "1", ",", ":", "]", ",", "image_sizes", "[", "0", "]", ")", "\n", "iou_1", "=", "boxlist_iou", "(", "boxes_cls_1", ",", "boxes_cls_1", ")", "\n", "iou_2", "=", "boxlist_iou", "(", "boxes_cls_2", ",", "boxes_cls_2", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "USE_IOU", ":", "\n", "            ", "iou", "=", "[", "iou_1", ",", "iou_2", "]", "\n", "", "else", ":", "\n", "            ", "iou", "=", "None", "\n", "", "nms_position_matrix", "=", "extract_multi_position_matrix", "(", "bboxes", ",", "None", ",", "self", ".", "geo_feature_dim", ",", "1000", ",", "\n", "clswise", "=", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "CLS_WISE_RELATION", ",", ")", "\n", "nms_attention_1", "=", "self", ".", "relation_module", "(", "sorted_features", ",", "nms_position_matrix", ",", "iou", ")", "\n", "sorted_features", "=", "sorted_features", "+", "nms_attention_1", "\n", "sorted_features", "=", "self", ".", "relu1", "(", "sorted_features", ")", "\n", "# [first_n * num_fg_classes, 128]", "\n", "sorted_features", "=", "sorted_features", ".", "view", "(", "-", "1", ",", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "APPEARANCE_FEAT_DIM", ")", "\n", "sorted_features", "=", "self", ".", "classifier", "(", "sorted_features", ")", "\n", "# logit_reshape, [first_n, num_fg_classes, num_thread]", "\n", "sorted_features", "=", "sorted_features", ".", "view", "(", "-", "1", ",", "self", ".", "fg_class", ",", "len", "(", "self", ".", "target_thresh", ")", ")", "\n", "if", "not", "self", ".", "reg_iou", ":", "\n", "            ", "sorted_features", "=", "torch", ".", "sigmoid", "(", "sorted_features", ")", "\n", "", "scores", "=", "torch", ".", "cat", "(", "[", "scores", "[", ":", ",", ":", ",", "None", "]", "]", "*", "len", "(", "self", ".", "target_thresh", ")", ",", "dim", "=", "-", "1", ")", "\n", "loss_dict", "=", "{", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "reg_iou", ":", "\n", "# when use regression donot do sorted_features = scores * sorted_features", "\n", "                ", "reg_label", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'labels_iou_reg'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "reg_label", "=", "reg_label", ".", "to", "(", "scores", ".", "device", ")", "\n", "reg_label", "=", "reg_label", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "sorted_features", "=", "sorted_features", ".", "to", "(", "scores", ".", "device", ")", "\n", "sorted_features", "=", "sorted_features", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "if", "reg_label", ".", "shape", "is", "not", "None", ":", "\n", "                    ", "reg_iou_loss", "=", "F", ".", "mse_loss", "(", "reg_label", ",", "sorted_features", ")", "\n", "", "else", ":", "\n", "                    ", "reg_iou_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "", "loss_dict", "[", "'nms_loss'", "]", "=", "reg_iou_loss", "\n", "", "else", ":", "\n", "                ", "sorted_features", "=", "scores", "*", "sorted_features", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "f", ".", "get_field", "(", "'labels'", ")", "for", "f", "in", "sorted_boxlists", "]", ")", "\n", "\n", "labels", "=", "labels", ".", "to", "(", "scores", ".", "device", ")", "\n", "labels", "=", "labels", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "\n", "# WEIGHTED NMS", "\n", "nms_loss", "=", "F", ".", "binary_cross_entropy", "(", "scores", "*", "sorted_features", ",", "labels", ")", "\n", "loss_dict", "[", "'nms_loss'", "]", "=", "nms_loss", "\n", "", "return", "None", ",", "loss_dict", "\n", "", "else", ":", "\n", "            ", "input_scores", "=", "scores", "\n", "if", "self", ".", "reg_iou", ":", "\n", "                ", "scores", "=", "sorted_features", "*", "(", "scores", ">", "self", ".", "fg_thread", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "scores", "=", "sorted_features", "*", "scores", "\n", "", "scores", "=", "self", ".", "merge_multi_thread_score_test", "(", "scores", ")", "\n", "scores", "=", "scores", ".", "split", "(", "sorted_boxes_per_image", ",", "dim", "=", "0", ")", "\n", "bboxes", "=", "bboxes", ".", "split", "(", "sorted_boxes_per_image", ",", "dim", "=", "0", ")", "\n", "input_scores", "=", "input_scores", ".", "split", "(", "sorted_boxes_per_image", ",", "dim", "=", "0", ")", "\n", "objectness", "=", "objectness", ".", "split", "(", "sorted_boxes_per_image", ",", "dim", "=", "0", ")", "\n", "all_scores", "=", "all_scores", ".", "split", "(", "sorted_boxes_per_image", ",", "\n", "dim", "=", "0", ")", "\n", "result", "=", "[", "]", "\n", "for", "i_score", ",", "score", ",", "bbox", ",", "obj", ",", "image_size", ",", "prob_boxhead", "in", "zip", "(", "\n", "input_scores", ",", "\n", "scores", ",", "\n", "bboxes", ",", "\n", "objectness", ",", "\n", "image_sizes", ",", "all_scores", ")", ":", "\n", "                ", "result_per_image", "=", "[", "]", "\n", "# for nuclei", "\n", "index", "=", "(", "score", "[", ":", ",", "1", "]", ">=", "self", ".", "fg_thread", ")", ".", "nonzero", "(", ")", "[", ":", ",", "\n", "0", "]", "\n", "# cls_scores = i_score[index, i,0]", "\n", "cls_scores", "=", "score", "[", "index", ",", "1", "]", "\n", "cls_scores_all", "=", "prob_boxhead", "[", "index", ",", "1", "]", "\n", "cls_boxes", "=", "bbox", "[", "index", ",", "1", ",", ":", "]", "\n", "cls_obj", "=", "obj", "[", "index", ",", "1", "]", "\n", "\n", "boxlist_for_class", "=", "BoxList", "(", "cls_boxes", ",", "image_size", ",", "\n", "mode", "=", "'xyxy'", ")", "\n", "\n", "boxlist_for_class", ".", "add_field", "(", "'scores'", ",", "cls_scores", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "'objectness'", ",", "cls_obj", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "'all_scores'", ",", "\n", "cls_scores_all", ")", "\n", "boxlist_for_class", "=", "boxlist_nms", "(", "\n", "boxlist_for_class", ",", "0.5", ",", "score_field", "=", "\"scores\"", "\n", ")", "\n", "num_labels", "=", "len", "(", "boxlist_for_class", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "\"labels\"", ",", "\n", "torch", ".", "full", "(", "(", "\n", "num_labels", ",", ")", ",", "\n", "2", ",", "\n", "dtype", "=", "torch", ".", "int64", ")", ".", "to", "(", "\n", "self", ".", "device", ")", ")", "\n", "result_per_image", ".", "append", "(", "boxlist_for_class", ")", "\n", "index", "=", "(", "score", "[", ":", ",", "0", "]", ">=", "\n", "self", ".", "fg_thread", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "# cls_scores = i_score[index, i,0]", "\n", "cls_scores", "=", "score", "[", "index", ",", "0", "]", "\n", "# pdb.set_trace()", "\n", "\n", "cls_scores_all", "=", "prob_boxhead", "[", "index", ",", "0", "]", "\n", "cls_boxes", "=", "bbox", "[", "index", ",", "0", ",", ":", "]", "\n", "cls_obj", "=", "obj", "[", "index", ",", "0", "]", "\n", "\n", "boxlist_for_class", "=", "BoxList", "(", "cls_boxes", ",", "image_size", ",", "mode", "=", "'xyxy'", ")", "\n", "# Pos greedy NMS if POS_NMS!=-1", "\n", "# boxlist_for_class.add_field('idx', index)", "\n", "boxlist_for_class", ".", "add_field", "(", "'scores'", ",", "cls_scores", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "'objectness'", ",", "cls_obj", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "'all_scores'", ",", "cls_scores_all", ")", "\n", "# pdb.set_trace()", "\n", "if", "self", ".", "nms", ":", "\n", "# for nuclei", "\n", "                    ", "boxlist_for_class", "=", "boxlist_nms", "(", "\n", "boxlist_for_class", ",", "self", ".", "nms", ",", "score_field", "=", "\"scores\"", "\n", ")", "\n", "# pdb.set_trace()", "\n", "", "num_labels", "=", "len", "(", "boxlist_for_class", ")", "\n", "boxlist_for_class", ".", "add_field", "(", "\"labels\"", ",", "\n", "torch", ".", "full", "(", "(", "\n", "num_labels", ",", ")", ",", "\n", "1", ",", "\n", "dtype", "=", "torch", ".", "int64", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "result_per_image", ".", "append", "(", "boxlist_for_class", ")", "\n", "result_per_image", "=", "cat_boxlist", "(", "result_per_image", ")", "\n", "number_of_detections", "=", "len", "(", "result_per_image", ")", "\n", "\n", "# Limit to max_per_image detections **over all classes**", "\n", "if", "number_of_detections", ">", "self", ".", "detections_per_img", ">", "0", ":", "\n", "                    ", "cls_scores", "=", "result_per_image", ".", "get_field", "(", "\"scores\"", ")", "\n", "image_thresh", ",", "_", "=", "torch", ".", "kthvalue", "(", "\n", "cls_scores", ".", "cpu", "(", ")", ",", "number_of_detections", "-", "self", ".", "detections_per_img", "+", "1", "\n", ")", "\n", "keep", "=", "cls_scores", ">=", "image_thresh", ".", "item", "(", ")", "\n", "keep", "=", "torch", ".", "nonzero", "(", "keep", ")", ".", "squeeze", "(", "1", ")", "\n", "result_per_image", "=", "result_per_image", "[", "keep", "]", "\n", "", "result", ".", "append", "(", "result_per_image", ")", "\n", "\n", "", "return", "result", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.prepare_reg_label": [[323, 402], ["targets.get_field", "range", "numpy.stack().astype", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "numpy.zeros", "output_reg_list.append", "numpy.eye", "sorted_score[].cpu().numpy", "boxes.view.view.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "iou.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.stack", "output_reg_list.append", "numpy.stack", "len", "sorted_score[].cpu", "iou.cpu().numpy.cpu().numpy.cpu", "numpy.max", "numpy.tile", "numpy.argmax", "numpy.argmax", "numpy.zeros", "numpy.intersect1d", "output_reg_list_per_class.append", "pdb.set_trace", "numpy.where", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "", "def", "prepare_reg_label", "(", "self", ",", "sorted_boxes", ",", "sorted_score", ",", "targets", ")", ":", "\n", "        ", "'''\n\n        :param sorted_boxes: [ first n, fg_cls_num, 4]\n        :param indice: [first n, fg_cls_num]\n        :param sorted_score: [first n, fg_cls_num]\n        :param targets: Boxlist obj\n        :return: label [first n, num_thread * fg_cls_num]\n        '''", "\n", "TO_REMOVE", "=", "1", "\n", "labels", "=", "targets", ".", "get_field", "(", "'labels'", ")", "\n", "\n", "# output = np.zeros((sorted_boxes.shape[0].numpy(),))", "\n", "# pdb.set_trace()", "\n", "# output_list = []", "\n", "output_reg_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "fg_class", ")", ":", "\n", "            ", "cls_label_indice", "=", "torch", ".", "nonzero", "(", "labels", "==", "(", "i", "+", "1", ")", ")", "\n", "cls_target_bbox", "=", "targets", ".", "bbox", "[", "cls_label_indice", "[", ":", ",", "0", "]", "]", "\n", "\n", "# todo: avoid None gt situation", "\n", "num_valid_gt", "=", "len", "(", "cls_label_indice", ")", "\n", "\n", "if", "num_valid_gt", "==", "0", ":", "\n", "\n", "                ", "output", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", "len", "(", "self", ".", "target_thresh", ")", ")", ")", "\n", "# output_reg = output.copy()", "\n", "# output_list.append(output)", "\n", "output_reg_list", ".", "append", "(", "output", ")", "\n", "", "else", ":", "\n", "                ", "output_list_per_class", "=", "[", "]", "\n", "output_reg_list_per_class", "=", "[", "]", "\n", "eye_matrix", "=", "np", ".", "eye", "(", "num_valid_gt", ")", "\n", "score_per_class", "=", "sorted_score", "[", ":", ",", "i", ":", "i", "+", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "boxes", "=", "sorted_boxes", "[", ":", ",", "i", ",", ":", "]", "\n", "boxes", "=", "boxes", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "area1", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "area2", "=", "(", "cls_target_bbox", "[", ":", ",", "2", "]", "-", "cls_target_bbox", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "cls_target_bbox", "[", ":", ",", "3", "]", "-", "cls_target_bbox", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "lt", "=", "torch", ".", "max", "(", "boxes", "[", ":", ",", "None", ",", ":", "2", "]", ",", "cls_target_bbox", "[", ":", ",", ":", "2", "]", ")", "# [N,M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "boxes", "[", ":", ",", "None", ",", "2", ":", "]", ",", "cls_target_bbox", "[", ":", ",", "2", ":", "]", ")", "# [N,M,2]", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "# [num_gt, first_n]", "\n", "iou", "=", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", "\n", "iou", "=", "iou", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "try", ":", "\n", "                    ", "for", "thresh", "in", "self", ".", "target_thresh", ":", "\n", "# pdb.set_trace()", "\n", "                        ", "output_reg", "=", "np", ".", "max", "(", "iou", ",", "1", ")", "\n", "# todo: temp comment", "\n", "overlap_mask", "=", "(", "iou", ">", "thresh", ")", "\n", "overlap_iou", "=", "iou", "*", "overlap_mask", "\n", "valid_bbox_indices", "=", "np", ".", "where", "(", "overlap_mask", ")", "[", "0", "]", "\n", "overlap_score", "=", "np", ".", "tile", "(", "score_per_class", ",", "(", "1", ",", "num_valid_gt", ")", ")", "\n", "overlap_score", "*=", "overlap_mask", "\n", "max_overlap_indices", "=", "np", ".", "argmax", "(", "iou", ",", "axis", "=", "1", ")", "\n", "max_overlap_mask", "=", "eye_matrix", "[", "max_overlap_indices", "]", "\n", "overlap_score", "*=", "max_overlap_mask", "\n", "overlap_iou", "=", "overlap_iou", "*", "max_overlap_mask", "\n", "max_score_indices", "=", "np", ".", "argmax", "(", "overlap_score", ",", "axis", "=", "0", ")", "\n", "max_overlap_iou", "=", "overlap_iou", "[", "max_score_indices", ",", "np", ".", "arange", "(", "overlap_score", ".", "shape", "[", "1", "]", ")", "]", "\n", "# output = np.zeros(([*sorted_boxes.shape][0],))", "\n", "output_reg", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", ")", ")", "\n", "output_idx", ",", "inter_1", ",", "inter_2", "=", "np", ".", "intersect1d", "(", "max_score_indices", ",", "valid_bbox_indices", ",", "return_indices", "=", "True", ")", "\n", "# output[output_idx] = 1", "\n", "output_reg", "[", "output_idx", "]", "=", "max_overlap_iou", "[", "inter_1", "]", "\n", "# output_list_per_class.append(output)", "\n", "output_reg_list_per_class", ".", "append", "(", "output_reg", ")", "\n", "", "", "except", ":", "\n", "                    ", "pdb", ".", "set_trace", "(", ")", "\n", "# output_per_class = np.stack(output_list_per_class, axis=-1)", "\n", "", "output_reg_per_class", "=", "np", ".", "stack", "(", "output_reg_list_per_class", ",", "axis", "=", "-", "1", ")", "\n", "# pdb.set_trace()", "\n", "# output_list.append(output_per_class.view())", "\n", "output_reg_list", ".", "append", "(", "output_reg_per_class", ")", "\n", "\n", "# output =  np.stack(output_list, axis=1).astype(np.float32, copy=False)", "\n", "", "", "output_reg", "=", "np", ".", "stack", "(", "output_reg_list", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "return", "output_reg", "\n", "# return (output, output_reg)", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.prepare_label": [[404, 462], ["targets.get_field", "range", "numpy.stack().astype", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "numpy.zeros", "output_list.append", "numpy.eye", "sorted_score[].cpu().numpy", "boxes.view.view.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "iou.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.stack", "output_list.append", "numpy.stack", "numpy.tile", "numpy.argmax", "numpy.argmax", "numpy.zeros", "output_list_per_class.append", "len", "sorted_score[].cpu", "iou.cpu().numpy.cpu().numpy.cpu", "numpy.where", "numpy.intersect1d"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "prepare_label", "(", "self", ",", "sorted_boxes", ",", "sorted_score", ",", "targets", ")", ":", "\n", "        ", "'''\n\n        :param sorted_boxes: [ first n, fg_cls_num, 4]\n        :param indice: [first n, fg_cls_num]\n        :param sorted_score: [first n, fg_cls_num]\n        :param targets: Boxlist obj\n        :return: label [first n, num_thread * fg_cls_num]\n        '''", "\n", "TO_REMOVE", "=", "1", "\n", "labels", "=", "targets", ".", "get_field", "(", "'labels'", ")", "\n", "\n", "# output = np.zeros((sorted_boxes.shape[0].numpy(),))", "\n", "\n", "output_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "fg_class", ")", ":", "\n", "            ", "cls_label_indice", "=", "torch", ".", "nonzero", "(", "labels", "==", "(", "i", "+", "1", ")", ")", "\n", "cls_target_bbox", "=", "targets", ".", "bbox", "[", "cls_label_indice", "[", ":", ",", "0", "]", "]", "\n", "\n", "# todo: avoid None gt situation", "\n", "num_valid_gt", "=", "len", "(", "cls_label_indice", ")", "\n", "\n", "if", "num_valid_gt", "==", "0", ":", "\n", "\n", "                ", "output", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", "len", "(", "self", ".", "target_thresh", ")", ")", ")", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "", "else", ":", "\n", "                ", "output_list_per_class", "=", "[", "]", "\n", "eye_matrix", "=", "np", ".", "eye", "(", "num_valid_gt", ")", "\n", "score_per_class", "=", "sorted_score", "[", ":", ",", "i", ":", "i", "+", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "boxes", "=", "sorted_boxes", "[", ":", ",", "i", ",", ":", "]", "\n", "boxes", "=", "boxes", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "area1", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "area2", "=", "(", "cls_target_bbox", "[", ":", ",", "2", "]", "-", "cls_target_bbox", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "cls_target_bbox", "[", ":", ",", "3", "]", "-", "cls_target_bbox", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "lt", "=", "torch", ".", "max", "(", "boxes", "[", ":", ",", "None", ",", ":", "2", "]", ",", "cls_target_bbox", "[", ":", ",", ":", "2", "]", ")", "# [N,M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "boxes", "[", ":", ",", "None", ",", "2", ":", "]", ",", "cls_target_bbox", "[", ":", ",", "2", ":", "]", ")", "# [N,M,2]", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "# [num_gt, first_n]", "\n", "iou", "=", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", "\n", "iou", "=", "iou", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "thresh", "in", "self", ".", "target_thresh", ":", "\n", "                    ", "overlap_mask", "=", "(", "iou", ">", "thresh", ")", "\n", "valid_bbox_indices", "=", "np", ".", "where", "(", "overlap_mask", ")", "[", "0", "]", "\n", "overlap_score", "=", "np", ".", "tile", "(", "score_per_class", ",", "(", "1", ",", "num_valid_gt", ")", ")", "\n", "overlap_score", "*=", "overlap_mask", "\n", "max_overlap_indices", "=", "np", ".", "argmax", "(", "iou", ",", "axis", "=", "1", ")", "\n", "max_overlap_mask", "=", "eye_matrix", "[", "max_overlap_indices", "]", "\n", "overlap_score", "*=", "max_overlap_mask", "\n", "max_score_indices", "=", "np", ".", "argmax", "(", "overlap_score", ",", "axis", "=", "0", ")", "\n", "output", "=", "np", ".", "zeros", "(", "(", "[", "*", "sorted_boxes", ".", "shape", "]", "[", "0", "]", ",", ")", ")", "\n", "output", "[", "np", ".", "intersect1d", "(", "max_score_indices", ",", "valid_bbox_indices", ")", "]", "=", "1", "\n", "output_list_per_class", ".", "append", "(", "output", ")", "\n", "", "output_per_class", "=", "np", ".", "stack", "(", "output_list_per_class", ",", "axis", "=", "-", "1", ")", "\n", "output_list", ".", "append", "(", "output_per_class", ")", "\n", "", "", "output", "=", "np", ".", "stack", "(", "output_list", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.prepare_ranking": [[463, 502], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "relation_module.DuplicationRemovalNetwork.boxcoder.decode", "proposals.split.split.split", "cls_score.split.split.split", "len", "f.get_field", "box_regression.view", "zip", "zip", "sum", "relation_module.DuplicationRemovalNetwork.filter_results", "results.append", "relation_module.DuplicationRemovalNetwork.filter_results", "results.append"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.PostProcessor.filter_results", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.PostProcessor.filter_results"], ["", "def", "prepare_ranking", "(", "self", ",", "cls_score", ",", "box_regression", ",", "\n", "proposals", ",", "targets", ",", "reg_iou", "=", "False", ")", ":", "\n", "        ", "'''\n        :param score:[num_per_img*batchsize, class]\n        :param proposal: list of boxlist\n        :return:\n        '''", "\n", "# if is not train, targets is None which should be set into a none list", "\n", "\n", "boxes_per_image", "=", "[", "len", "(", "box", ")", "for", "box", "in", "proposals", "]", "\n", "concat_boxes", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "proposals", "]", ",", "dim", "=", "0", ")", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "proposals", "]", "\n", "objectness", "=", "[", "f", ".", "get_field", "(", "'objectness'", ")", "for", "f", "in", "proposals", "]", "\n", "proposals", "=", "self", ".", "boxcoder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "sum", "(", "boxes_per_image", ")", ",", "-", "1", ")", ",", "concat_boxes", "\n", ")", "\n", "proposals", "=", "proposals", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "cls_score", "=", "cls_score", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "results", "=", "[", "]", "\n", "if", "self", ".", "training", ":", "\n", "# if idx_t is None:", "\n", "            ", "for", "prob", ",", "boxes_per_img", ",", "image_shape", ",", "target", ",", "obj", "in", "zip", "(", "\n", "cls_score", ",", "proposals", ",", "image_shapes", ",", "targets", ",", "objectness", ")", ":", "\n", "\n", "                ", "boxlist", "=", "self", ".", "filter_results", "(", "boxes_per_img", ",", "\n", "target", ",", "prob", ",", "\n", "image_shape", ",", "\n", "self", ".", "fg_class", "+", "1", ",", "obj", ",", "reg_iou", ")", "\n", "\n", "results", ".", "append", "(", "boxlist", ")", "\n", "", "", "else", ":", "\n", "# test do not have target", "\n", "            ", "for", "prob", ",", "boxes_per_img", ",", "image_shape", ",", "obj", "in", "zip", "(", "\n", "cls_score", ",", "proposals", ",", "image_shapes", ",", "objectness", "\n", ")", ":", "\n", "                ", "boxlist", "=", "self", ".", "filter_results", "(", "boxes_per_img", ",", "None", ",", "prob", ",", "image_shape", ",", "self", ".", "fg_class", "+", "1", ",", "obj", ",", "reg_iou", "=", "reg_iou", ")", "\n", "results", ".", "append", "(", "boxlist", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.filter_results": [[503, 591], ["torch.cat.reshape", "torch.cat.reshape", "scores.reshape.reshape.reshape", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "ori_scores.clone().cpu().numpy", "obj.clone().cpu().numpy", "torch.cat.clone().cpu().numpy", "torch.cat.clone().cpu().numpy", "torch.gather().squeeze.view", "torch.gather().squeeze.view", "sorted_obj.view.view.view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "boxlist.clip_to_image.clip_to_image.add_field", "boxlist.clip_to_image.clip_to_image.add_field", "boxlist.clip_to_image.clip_to_image.clip_to_image", "pdb.set_trace", "cat_boxes.append", "pdb.set_trace", "pdb.set_trace", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "relation_module.DuplicationRemovalNetwork.prepare_label", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "ori_scores.clone().cpu", "obj.clone().cpu", "torch.cat.clone().cpu", "torch.cat.clone().cpu", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "mask.view().expand.view().expand.view().expand", "relation_module.DuplicationRemovalNetwork.prepare_reg_label", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "pdb.set_trace", "pdb.set_trace", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ori_scores.clone", "obj.clone", "torch.cat.clone", "torch.cat.clone", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().expand.view().expand.view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.prepare_label", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.prepare_reg_label", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "filter_results", "(", "self", ",", "boxes", ",", "targets", ",", "scores", ",", "image_shape", ",", "\n", "num_classes", ",", "obj", ",", "reg_iou", "=", "False", ")", ":", "\n", "        ", "\"\"\"return the sorted boxlist and sorted idx\n        \"\"\"", "\n", "# unwrap the boxlist to avoid additional overhead.", "\n", "# if we had multi-class NMS, we could perform this directly on the boxlist", "\n", "# boxes = boxlist.bbox.reshape(-1, num_classes * 4)", "\n", "#[n_roi, 4, cls]", "\n", "# boxes = boxlist.bbox.reshape(-1, 4, num_classes)", "\n", "\n", "boxes", "=", "boxes", ".", "reshape", "(", "-", "1", ",", "4", "*", "num_classes", ")", "\n", "scores", "=", "scores", ".", "reshape", "(", "-", "1", ",", "num_classes", ")", "\n", "# pdb.set_trace()", "\n", "if", "scores", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "", "cat_boxes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "num_classes", ")", ":", "\n", "# skip class 0, because it is the background class", "\n", "            ", "cls_boxes", "=", "boxes", "[", ":", ",", "j", "*", "4", ":", "(", "j", "+", "1", ")", "*", "4", "]", "\n", "cat_boxes", ".", "append", "(", "cls_boxes", ")", "\n", "", "boxes", "=", "torch", ".", "cat", "(", "[", "bbox", "[", ":", ",", ":", ",", "None", "]", "for", "bbox", "in", "cat_boxes", "]", ",", "dim", "=", "2", ")", "\n", "# scores =  torch.cat([s for s in cat_score])", "\n", "scores", "=", "scores", "[", ":", ",", "1", ":", "]", "\n", "ori_scores", "=", "scores", "\n", "num_roi", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "if", "num_roi", "<=", "self", ".", "first_n", ":", "\n", "            ", "first_n", "=", "num_roi", "\n", "# pdb.set_trace()", "\n", "", "else", ":", "\n", "            ", "first_n", "=", "self", ".", "first_n", "\n", "\n", "\n", "\n", "", "sorted_scores", ",", "indices", "=", "torch", ".", "topk", "(", "scores", ",", "first_n", ",", "dim", "=", "0", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "\n", "if", "obj", ".", "shape", "[", "0", "]", "<", "first_n", ":", "\n", "            ", "indices", "=", "indices", "[", ":", "obj", ".", "shape", "[", "0", "]", "]", "\n", "sorted_scores", "=", "sorted_scores", "[", ":", "obj", ".", "shape", "[", "0", "]", "]", "\n", "", "if", "indices", ".", "shape", "[", "1", "]", "!=", "2", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "", "cp_s", "=", "ori_scores", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cp_o", "=", "obj", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "box", "=", "boxes", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ori_scores", "=", "ori_scores", "[", "indices", "]", "\n", "sorted_obj", "=", "obj", "[", "indices", "]", "\n", "sorted_boxes", "=", "boxes", "[", "indices", "]", "\n", "\n", "\n", "\n", "if", "sorted_boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "if", "self", ".", "class_agnostic", ":", "\n", "# [first_n, num_fg_class, 4]", "\n", "            ", "sorted_boxes", "=", "torch", ".", "squeeze", "(", "sorted_boxes", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "mask", "=", "torch", ".", "arange", "(", "0", ",", "num_classes", "-", "1", ")", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "", "except", ":", "\n", "                ", "pdb", ".", "set_trace", "(", ")", "\n", "", "try", ":", "\n", "                ", "mask", "=", "mask", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "first_n", ",", "num_classes", "-", "1", ",", "4", ",", "1", ")", "\n", "", "except", ":", "\n", "                ", "pdb", ".", "set_trace", "(", ")", "\n", "", "sorted_boxes", "=", "torch", ".", "gather", "(", "sorted_boxes", ",", "dim", "=", "3", ",", "index", "=", "mask", ")", ".", "squeeze", "(", "dim", "=", "3", ")", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "labels", "=", "self", ".", "prepare_label", "(", "sorted_boxes", ",", "\n", "sorted_scores", ",", "targets", ")", "\n", "labels_cls", "=", "torch", ".", "from_numpy", "(", "labels", ")", ".", "to", "(", "sorted_scores", ".", "device", ")", "\n", "if", "reg_iou", ":", "\n", "                ", "labels_reg", "=", "self", ".", "prepare_reg_label", "(", "sorted_boxes", ",", "sorted_scores", ",", "\n", "targets", ")", "\n", "labels_reg", "=", "torch", ".", "from_numpy", "(", "labels_reg", ")", ".", "to", "(", "sorted_scores", ".", "device", ")", "\n", "", "", "sorted_boxes", "=", "sorted_boxes", ".", "view", "(", "first_n", "*", "(", "num_classes", "-", "1", ")", ",", "-", "1", ")", "\n", "sorted_obj", "=", "sorted_obj", ".", "view", "(", "first_n", "*", "(", "num_classes", "-", "1", ")", ")", "\n", "boxlist", "=", "BoxList", "(", "sorted_boxes", ",", "image_shape", ",", "mode", "=", "\"xyxy\"", ",", ")", "\n", "boxlist", ".", "add_field", "(", "'sorted_idx'", ",", "indices", ")", "\n", "boxlist", ".", "add_field", "(", "'objectness'", ",", "sorted_obj", ")", "\n", "boxlist", ".", "extra_fields", "[", "'scores'", "]", "=", "sorted_scores", "\n", "boxlist", ".", "extra_fields", "[", "\"all_scores\"", "]", "=", "ori_scores", "\n", "# boxlist.extra_fields[\"\"]", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "reg_iou", ":", "\n", "                ", "boxlist", ".", "extra_fields", "[", "'labels_iou_reg'", "]", "=", "labels_reg", "\n", "", "else", ":", "\n", "                ", "boxlist", ".", "extra_fields", "[", "'labels'", "]", "=", "labels_cls", "\n", "", "", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "return", "boxlist", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.DuplicationRemovalNetwork.merge_multi_thread_score_test": [[592, 602], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "min", "max", "len"], "methods", ["None"], ["", "def", "merge_multi_thread_score_test", "(", "self", ",", "scores", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "MERGE_METHOD", "==", "-", "1", ":", "\n", "            ", "scores", "=", "torch", ".", "mean", "(", "scores", ",", "-", "1", ")", "\n", "", "elif", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "MERGE_METHOD", "==", "-", "2", ":", "\n", "            ", "scores", "=", "torch", ".", "max", "(", "scores", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "MERGE_METHOD", "\n", "idx", "=", "min", "(", "max", "(", "idx", ",", "0", ")", ",", "len", "(", "self", ".", "target_thresh", ")", ")", "\n", "scores", "=", "scores", "[", ":", ",", ":", ",", "idx", "]", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.extract_rank_embedding": [[604, 625], ["torch.arange().to().float", "torch.arange().to().float", "torch.arange().to", "torch.arange().to", "dim_mat.view.view", "torch.arange().to().float.view", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cat", "torch.cat", "embedding.to.to", "torch.pow", "torch.pow", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "", "def", "extract_rank_embedding", "(", "rank_dim", ",", "feat_dim", ",", "wave_length", "=", "1000", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "\"\"\" Extract rank embedding\n    Args:\n        rank_dim: maximum of ranks\n        feat_dim: dimension of embedding feature\n        wave_length:\n    Returns:\n        embedding: [rank_dim, feat_dim]\n    \"\"\"", "\n", "rank_range", "=", "torch", ".", "arange", "(", "0", ",", "rank_dim", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "feat_range", "=", "torch", ".", "arange", "(", "feat_dim", "/", "2", ")", ".", "to", "(", "device", ")", "\n", "dim_mat", "=", "feat_range", "/", "(", "feat_dim", "/", "2", ")", "\n", "dim_mat", "=", "1.", "/", "(", "torch", ".", "pow", "(", "wave_length", ",", "dim_mat", ")", ")", "\n", "dim_mat", "=", "dim_mat", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "rank_mat", "=", "rank_range", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "mul_mat", "=", "rank_mat", "*", "dim_mat", "\n", "sin_mat", "=", "torch", ".", "sin", "(", "mul_mat", ")", "\n", "cos_mat", "=", "torch", ".", "cos", "(", "mul_mat", ")", "\n", "embedding", "=", "torch", ".", "cat", "(", "(", "sin_mat", ",", "cos_mat", ")", ",", "-", "1", ")", "\n", "embedding", "=", "embedding", ".", "to", "(", "device", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.relation.relation_module.extract_multi_position_matrix": [[626, 683], ["boxes.reshape.permute", "torch.chunk", "torch.chunk", "torch.clamp", "torch.clamp", "torch.log", "torch.log", "torch.clamp", "torch.clamp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "delta_h.view.size", "delta_x.view.view", "delta_y.view.view", "delta_w.view.view", "delta_h.view.view", "torch.arange().to", "torch.arange().to", "dim_mat.view.view", "mul_mat.view.view", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cat", "torch.cat", "boxes.reshape.reshape", "cx.permute", "torch.abs", "torch.abs", "cy.permute", "torch.abs", "torch.abs", "w.permute", "h.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pow", "torch.pow", "position_mat.view.view", "position_mat.view.view", "torch.cat", "torch.cat", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "extract_multi_position_matrix", "(", "boxes", ",", "iou", ",", "dim_g", ",", "wave_len", ",", "clswise", "=", "False", ")", ":", "\n", "    ", "if", "iou", "is", "not", "None", ":", "\n", "        ", "iou", "=", "torch", ".", "cat", "(", "[", "iou", "[", "0", "]", "[", "None", ",", ":", ",", ":", "]", ",", "iou", "[", "1", "]", "[", "None", ",", ":", ",", ":", "]", "]", ",", "0", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "boxes", "=", "boxes", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "if", "clswise", ":", "\n", "# [cls * nroi, 1, 4]", "\n", "        ", "boxes", "=", "boxes", ".", "reshape", "(", "1", ",", "-", "1", ",", "4", ")", "\n", "", "x_min", ",", "y_min", ",", "x_max", ",", "y_max", "=", "torch", ".", "chunk", "(", "boxes", ",", "4", ",", "dim", "=", "2", ")", "\n", "cx", "=", "(", "x_min", "+", "x_max", ")", "*", "0.5", "\n", "cy", "=", "(", "y_min", "+", "y_max", ")", "*", "0.5", "\n", "w", "=", "(", "x_max", "-", "x_min", ")", "+", "1.", "\n", "h", "=", "(", "y_max", "-", "y_min", ")", "+", "1.", "\n", "\n", "delta_x", "=", "cx", "-", "cx", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "delta_x", "=", "torch", ".", "clamp", "(", "torch", ".", "abs", "(", "delta_x", "/", "w", ")", ",", "min", "=", "1e-3", ")", "\n", "delta_x", "=", "torch", ".", "log", "(", "delta_x", ")", "\n", "\n", "delta_y", "=", "cy", "-", "cy", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "delta_y", "=", "torch", ".", "clamp", "(", "torch", ".", "abs", "(", "delta_y", "/", "h", ")", ",", "min", "=", "1e-3", ")", "\n", "delta_y", "=", "torch", ".", "log", "(", "delta_y", ")", "\n", "\n", "delta_w", "=", "w", "/", "w", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "delta_w", "=", "torch", ".", "log", "(", "delta_w", ")", "\n", "\n", "delta_h", "=", "h", "/", "h", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "delta_h", "=", "torch", ".", "log", "(", "delta_h", ")", "\n", "\n", "size", "=", "delta_h", ".", "size", "(", ")", "\n", "\n", "delta_x", "=", "delta_x", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "delta_y", "=", "delta_y", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "delta_w", "=", "delta_w", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "delta_h", "=", "delta_h", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", "\n", "# clsn, nrio, nrio, 4", "\n", "\n", "if", "iou", "is", "not", "None", ":", "\n", "        ", "position_mat", "=", "torch", ".", "cat", "(", "(", "delta_x", ",", "delta_y", ",", "delta_w", ",", "delta_h", ",", "iou", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "position_mat", "=", "torch", ".", "cat", "(", "(", "delta_x", ",", "delta_y", ",", "delta_w", ",", "delta_h", ")", ",", "-", "1", ")", "\n", "", "dev", "=", "10", "if", "iou", "is", "not", "None", "else", "8", "\n", "# pdb.set_trace()", "\n", "feat_range", "=", "torch", ".", "arange", "(", "dim_g", "/", "dev", ")", ".", "to", "(", "boxes", ".", "device", ")", "\n", "dim_mat", "=", "feat_range", "/", "(", "dim_g", "/", "dev", ")", "\n", "dim_mat", "=", "1.", "/", "(", "torch", ".", "pow", "(", "wave_len", ",", "dim_mat", ")", ")", "\n", "dim_mat", "=", "dim_mat", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "if", "iou", "is", "not", "None", ":", "\n", "        ", "position_mat", "=", "position_mat", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "5", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "position_mat", "=", "position_mat", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "4", ",", "-", "1", ")", "\n", "", "position_mat", "=", "100.", "*", "position_mat", "\n", "mul_mat", "=", "position_mat", "*", "dim_mat", "\n", "mul_mat", "=", "mul_mat", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "-", "1", ")", "\n", "sin_mat", "=", "torch", ".", "sin", "(", "mul_mat", ")", "\n", "cos_mat", "=", "torch", ".", "cos", "(", "mul_mat", ")", "\n", "embedding", "=", "torch", ".", "cat", "(", "(", "sin_mat", ",", "cos_mat", ")", ",", "-", "1", ")", "\n", "return", "embedding", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.CombinedROIHeads.__init__": [[14, 19], ["super().__init__", "cfg.clone"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "heads", ")", ":", "\n", "        ", "super", "(", "CombinedROIHeads", ",", "self", ")", ".", "__init__", "(", "heads", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", "and", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", ":", "\n", "            ", "self", ".", "mask", ".", "feature_extractor", "=", "self", ".", "box", ".", "feature_extractor", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.CombinedROIHeads.forward": [[20, 39], ["roi_heads.CombinedROIHeads.box", "losses.update", "roi_heads.CombinedROIHeads.mask", "losses.update"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update"], ["", "", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ")", ":", "\n", "        ", "losses", "=", "{", "}", "\n", "# TODO rename x to roi_box_features, if it doesn't increase memory consumption", "\n", "x", ",", "detections", ",", "loss_box", ",", "class_logits", ",", "box_regression", "=", "self", ".", "box", "(", "features", ",", "proposals", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss_box", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "            ", "mask_features", "=", "features", "\n", "# optimization: during training, if we share the feature extractor between", "\n", "# the box and the mask heads, then we can reuse the features already computed", "\n", "if", "(", "\n", "self", ".", "training", "\n", "and", "self", ".", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", "\n", ")", ":", "\n", "                ", "mask_features", "=", "x", "\n", "# During training, self.box() will return the unaltered proposals as \"detections\"", "\n", "# this makes the API consistent during training and testing", "\n", "", "_", ",", "detections", ",", "loss_mask", "=", "self", ".", "mask", "(", "mask_features", ",", "detections", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss_mask", ")", "\n", "", "return", "x", ",", "detections", ",", "losses", ",", "class_logits", ",", "box_regression", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.BoxROIHeads.__init__": [[43, 46], ["super().__init__", "cfg.clone"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "boxheads", ")", ":", "\n", "        ", "super", "(", "BoxROIHeads", ",", "self", ")", ".", "__init__", "(", "boxheads", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.BoxROIHeads.forward": [[46, 52], ["roi_heads.BoxROIHeads.box", "losses.update"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ")", ":", "\n", "        ", "losses", "=", "{", "}", "\n", "# TODO rename x to roi_box_features, if it doesn't increase memory consumption", "\n", "x", ",", "detections", ",", "loss_box", ",", "class_logits", ",", "box_regression", "=", "self", ".", "box", "(", "features", ",", "proposals", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss_box", ")", "\n", "return", "x", ",", "detections", ",", "losses", ",", "class_logits", ",", "box_regression", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.BoxROIHeads.forward_student": [[53, 55], ["roi_heads.BoxROIHeads.box.forward_student"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.forward_student"], ["", "def", "forward_student", "(", "self", ",", "features", ",", "proposals", ",", "class_logits_t", ")", ":", "\n", "        ", "return", "self", ".", "box", ".", "forward_student", "(", "features", ",", "proposals", ",", "class_logits_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.BoxROIHeads.forward_teacher": [[57, 64], ["roi_heads.BoxROIHeads.box.forward_teacher", "losses.update"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.forward_teacher", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update"], ["", "def", "forward_teacher", "(", "self", ",", "feature_tuple", ",", "proposals", ",", "teacher_infer", ")", ":", "\n", "        ", "losses", "=", "{", "}", "\n", "x", ",", "detections", ",", "loss_box", ",", "class_logits", ",", "box_regression", "=", "self", ".", "box", ".", "forward_teacher", "(", "feature_tuple", ",", "proposals", ",", "\n", "targets", "=", "teacher_infer", ")", "\n", "losses", ".", "update", "(", "loss_box", ")", "\n", "return", "x", ",", "detections", ",", "losses", ",", "class_logits", ",", "box_regression", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.MaskROIHeads.__init__": [[67, 70], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "maskheads", ")", ":", "\n", "        ", "super", "(", "MaskROIHeads", ",", "self", ")", ".", "__init__", "(", "maskheads", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "", "def", "forward", "(", "self", ",", "losses", ",", "features", ",", "detections", ",", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.MaskROIHeads.forward": [[70, 78], ["roi_heads.MaskROIHeads.mask", "losses.update"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update"], ["", "def", "forward", "(", "self", ",", "losses", ",", "features", ",", "detections", ",", "\n", "targets", "=", "None", ",", "images", "=", "None", ")", ":", "\n", "\n", "        ", "_", ",", "detections", ",", "loss_mask", "=", "self", ".", "mask", "(", "features", ",", "detections", ",", "\n", "targets", ",", "\n", "images", ")", "\n", "losses", ".", "update", "(", "loss_mask", ")", "\n", "return", "detections", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.build_roi_heads": [[80, 94], ["CombinedROIHeads.append", "CombinedROIHeads.append", "roi_heads.CombinedROIHeads", "box_head.box_head.build_roi_box_head", "mask_head.mask_head.build_roi_mask_head"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.build_roi_box_head", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.mask_head.build_roi_mask_head"], ["", "", "def", "build_roi_heads", "(", "cfg", ")", ":", "\n", "# individually create the heads, that will be combined together", "\n", "# afterwards", "\n", "    ", "roi_heads", "=", "[", "]", "\n", "if", "not", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "        ", "roi_heads", ".", "append", "(", "(", "\"box\"", ",", "build_roi_box_head", "(", "cfg", ")", ")", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "roi_heads", ".", "append", "(", "(", "\"mask\"", ",", "build_roi_mask_head", "(", "cfg", ")", ")", ")", "\n", "\n", "# combine individual heads in a single module", "\n", "", "if", "roi_heads", ":", "\n", "        ", "roi_heads", "=", "CombinedROIHeads", "(", "cfg", ",", "roi_heads", ")", "\n", "\n", "", "return", "roi_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.box_roi_heads": [[95, 97], ["roi_heads.BoxROIHeads", "box_head.box_head.build_roi_box_head"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.build_roi_box_head"], ["", "def", "box_roi_heads", "(", "cfg", ",", "relation", "=", "True", ")", ":", "\n", "    ", "return", "BoxROIHeads", "(", "cfg", ",", "[", "(", "\"box\"", ",", "build_roi_box_head", "(", "cfg", ",", "relation", "=", "relation", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.mask_roi_heads": [[98, 100], ["roi_heads.MaskROIHeads", "mask_head.mask_head.build_roi_mask_head"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.mask_head.build_roi_mask_head"], ["", "def", "mask_roi_heads", "(", "cfg", ",", "is_student", "=", "False", ")", ":", "\n", "    ", "return", "MaskROIHeads", "(", "cfg", ",", "[", "(", "\"mask\"", ",", "build_roi_mask_head", "(", "cfg", ",", "is_student", ")", ")", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.mask_head.ROIMaskHead.__init__": [[40, 53], ["super().__init__", "cfg.clone", "roi_mask_feature_extractors.make_roi_mask_feature_extractor", "roi_mask_predictors.make_roi_mask_predictor", "inference.make_roi_mask_post_processor", "inference.make_roi_mask_generator", "loss.make_roi_mask_loss_evaluator", "maskrcnn_benchmark.modeling.relation.mask_relation_module.MaskRelationRefineNet", "roi_mask_feature_extractors.make_mask_adapt_layer"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.make_roi_mask_feature_extractor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_predictors.make_roi_mask_predictor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.make_roi_mask_post_processor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.make_roi_mask_generator", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.make_roi_mask_loss_evaluator", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.make_mask_adapt_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "is_student", ")", ":", "\n", "        ", "super", "(", "ROIMaskHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "self", ".", "feature_extractor", "=", "make_roi_mask_feature_extractor", "(", "cfg", ")", "\n", "self", ".", "predictor", "=", "make_roi_mask_predictor", "(", "cfg", ")", "\n", "self", ".", "post_processor", "=", "make_roi_mask_post_processor", "(", "cfg", ")", "\n", "self", ".", "mask_generator", "=", "make_roi_mask_generator", "(", "cfg", ")", "\n", "self", ".", "loss_evaluator", "=", "make_roi_mask_loss_evaluator", "(", "cfg", ")", "\n", "if", "cfg", ".", "MODEL", ".", "RELATION_MASK", ":", "\n", "            ", "self", ".", "mask_relation_module", "=", "MaskRelationRefineNet", "(", "cfg", ",", "self", ".", "predictor", ")", "\n", "", "if", "cfg", ".", "MT", ".", "HINT", ":", "\n", "            ", "self", ".", "feat_adapt_module", "=", "make_mask_adapt_layer", "(", "cfg", ")", "\n", "", "self", ".", "mode", "=", "None", "\n", "", "def", "set_teacher_mode", "(", "self", ",", "mode", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.mask_head.ROIMaskHead.set_teacher_mode": [[53, 55], ["None"], "methods", ["None"], ["", "def", "set_teacher_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.mask_head.ROIMaskHead.forward": [[55, 151], ["mask_head.ROIMaskHead.predictor", "mask_head.keep_only_positive_boxes", "len", "mask_head.ROIMaskHead.loss_evaluator", "len", "torch.split", "zip", "mask_head.ROIMaskHead.feature_extractor", "mask_head.ROIMaskHead.feature_extractor", "len", "torch.split", "mask_head.ROIMaskHead.mask_relation_module", "mask_logits_2_list.append", "proposals_list.extend", "targets_list.append", "relation_loss_list.append", "len", "torch.cat", "mask_head.ROIMaskHead.post_processor", "mask_head.ROIMaskHead.mask_generator", "mask_head.ROIMaskHead.loss_evaluator", "dict", "torch.cat", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.mask_head.keep_only_positive_boxes", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "\n", "targets", "=", "None", ",", "images", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (list[Tensor]): feature-maps from possibly several levels\n            proposals (list[BoxList]): proposal boxes\n            targets (list[BoxList], optional): the ground-truth targets.\n\n        Returns:\n            x (Tensor): the result of the feature extractor\n            proposals (list[BoxList]): during training, the original proposals\n                are returned. During testing, the predicted boxlists are returned\n                with the `mask` field set\n            losses (dict[Tensor]): During training, returns the losses for the\n                head. During testing, returns an empty dict.\n\n        \"\"\"", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# during training, only focus on positive boxes", "\n", "            ", "all_proposals", "=", "proposals", "\n", "proposals", ",", "positive_inds", "=", "keep_only_positive_boxes", "(", "proposals", ")", "\n", "", "batch_size", "=", "[", "len", "(", "f", ")", "for", "f", "in", "proposals", "]", "\n", "if", "self", ".", "training", "and", "self", ".", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", ":", "\n", "            ", "x", "=", "features", "\n", "x", "=", "x", "[", "torch", ".", "cat", "(", "positive_inds", ",", "dim", "=", "0", ")", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "FEATURE_EXTRACTOR", "==", "\"PRCNNFeatureExtractor\"", ":", "\n", "                ", "x", ",", "pre_feature", "=", "self", ".", "feature_extractor", "(", "images", ".", "tensors", ",", "proposals", ")", "\n", "", "else", ":", "\n", "                ", "x", ",", "pre_feature", "=", "self", ".", "feature_extractor", "(", "features", ",", "proposals", ")", "\n", "\n", "", "", "mask_logits_1", "=", "self", ".", "predictor", "(", "x", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "loss_mask_1", "=", "self", ".", "loss_evaluator", "(", "proposals", ",", "\n", "mask_logits_1", ",", "\n", "targets", ")", "\n", "", "if", "len", "(", "batch_size", ")", ">", "1", ":", "\n", "            ", "mask_logits_1", "=", "torch", ".", "split", "(", "mask_logits_1", ",", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "mask_logits_1", "=", "[", "mask_logits_1", "]", "\n", "", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "USE_RELATION", ":", "\n", "            ", "feature", "=", "x", "\n", "if", "len", "(", "batch_size", ")", ">", "1", ":", "\n", "                ", "feature", "=", "torch", ".", "split", "(", "feature", ",", "batch_size", ")", "\n", "", "else", ":", "\n", "                ", "feature", "=", "[", "feature", "]", "\n", "", "mask_logits_2_list", "=", "[", "]", "\n", "proposals_list", "=", "[", "]", "\n", "targets_list", "=", "[", "]", "\n", "relation_loss_list", "=", "[", "]", "\n", "if", "targets", "==", "None", ":", "\n", "                ", "targets", "=", "[", "None", "]", "*", "len", "(", "batch_size", ")", "\n", "", "for", "f", ",", "m", ",", "p", ",", "t", "in", "zip", "(", "feature", ",", "mask_logits_1", ",", "proposals", ",", "\n", "targets", ")", ":", "\n", "                ", "mask_logits_2", ",", "p", ",", "t", ",", "relation_loss", "=", "self", ".", "mask_relation_module", "(", "(", "f", ",", "m", ",", "p", ",", "t", ")", ")", "\n", "mask_logits_2_list", ".", "append", "(", "mask_logits_2", ")", "\n", "proposals_list", ".", "extend", "(", "p", ")", "\n", "targets_list", ".", "append", "(", "t", ")", "\n", "relation_loss_list", ".", "append", "(", "relation_loss", ")", "\n", "# pdb.set_trace()", "\n", "", "proposals", "=", "proposals_list", "\n", "mask_logits_2", "=", "mask_logits_2_list", "\n", "if", "len", "(", "mask_logits_2", ")", ">", "1", ":", "\n", "                ", "mask_logits_2", "=", "torch", ".", "cat", "(", "mask_logits_2", ")", "\n", "", "else", ":", "\n", "                ", "mask_logits_2", "=", "mask_logits_2", "[", "0", "]", "\n", "\n", "", "", "if", "not", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "USE_RELATION", ":", "\n", "                ", "mask_logits", "=", "mask_logits_2", "\n", "", "else", ":", "\n", "                ", "mask_logits", "=", "mask_logits_1", "\n", "", "if", "self", ".", "mode", "is", "None", "or", "self", ".", "mode", "==", "'train'", ":", "# normal phase, inference", "\n", "                ", "result", "=", "self", ".", "post_processor", "(", "mask_logits", ",", "proposals", ")", "\n", "", "else", ":", "\n", "# teacher, test mode to generate segmentation mask", "\n", "# todo: generate the mask in teacher-train mode with augmented images.", "\n", "                ", "result", "=", "self", ".", "mask_generator", "(", "mask_logits", ",", "proposals", ")", "\n", "", "return", "x", ",", "result", ",", "{", "}", "\n", "\n", "# loss", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "USE_RELATION", ":", "\n", "                ", "loss_mask_2", "=", "self", ".", "loss_evaluator", "(", "proposals", ",", "\n", "mask_logits_2", ",", "\n", "targets", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "DEEP_SUPER", ":", "\n", "                    ", "loss_seg", "=", "0.5", "*", "(", "loss_mask_1", "+", "loss_mask_2", ")", "\n", "", "else", ":", "\n", "                    ", "loss_seg", "=", "loss_mask_2", "\n", "", "", "else", ":", "\n", "                ", "loss_seg", "=", "loss_mask_1", "\n", "\n", "", "return", "x", ",", "all_proposals", ",", "dict", "(", "loss_seg", "=", "loss_seg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.mask_head.keep_only_positive_boxes": [[15, 37], ["isinstance", "isinstance", "boxes[].has_field", "boxes_per_image.get_field", "inds_mask.nonzero().squeeze", "positive_boxes.append", "positive_inds.append", "inds_mask.nonzero"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["def", "keep_only_positive_boxes", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"\n    Given a set of BoxList containing the `labels` field,\n    return a set of BoxList for which `labels > 0`.\n\n    Arguments:\n        boxes (list of BoxList)\n    \"\"\"", "\n", "assert", "isinstance", "(", "boxes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "boxes", "[", "0", "]", ",", "BoxList", ")", "\n", "if", "boxes", "[", "0", "]", ".", "has_field", "(", "\"labels\"", ")", ":", "\n", "        ", "label_field", "=", "'labels'", "\n", "", "positive_boxes", "=", "[", "]", "\n", "positive_inds", "=", "[", "]", "\n", "num_boxes", "=", "0", "\n", "for", "boxes_per_image", "in", "boxes", ":", "\n", "        ", "labels", "=", "boxes_per_image", ".", "get_field", "(", "\"labels\"", ")", "\n", "inds_mask", "=", "labels", ">", "0", "\n", "inds", "=", "inds_mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "positive_boxes", ".", "append", "(", "boxes_per_image", "[", "inds", "]", ")", "\n", "positive_inds", ".", "append", "(", "inds_mask", ")", "\n", "", "return", "positive_boxes", ",", "positive_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.mask_head.build_roi_mask_head": [[153, 155], ["mask_head.ROIMaskHead"], "function", ["None"], ["", "", "", "def", "build_roi_mask_head", "(", "cfg", ",", "is_student", "=", "False", ")", ":", "\n", "    ", "return", "ROIMaskHead", "(", "cfg", ",", "is_student", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_predictors.MaskRCNNC4Predictor.__init__": [[10, 33], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.ConvTranspose2d", "maskrcnn_benchmark.layers.Conv2d", "roi_mask_predictors.MaskRCNNC4Predictor.named_parameters", "torch.nn.init.constant_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "MaskRCNNC4Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "dim_reduced", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "CONV_LAYERS", "[", "-", "1", "]", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "USE_FPN", ":", "\n", "            ", "num_inputs", "=", "dim_reduced", "\n", "", "else", ":", "\n", "            ", "stage_index", "=", "4", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stage_index", "-", "1", ")", "\n", "res2_out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "num_inputs", "=", "res2_out_channels", "*", "stage2_relative_factor", "\n", "\n", "", "self", ".", "conv5_mask", "=", "ConvTranspose2d", "(", "num_inputs", ",", "dim_reduced", ",", "2", ",", "2", ",", "0", ")", "\n", "self", ".", "mask_fcn_logits", "=", "Conv2d", "(", "dim_reduced", ",", "num_classes", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"bias\"", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "\"weight\"", "in", "name", ":", "\n", "# Caffe2 implementation uses MSRAFill, which in fact", "\n", "# corresponds to kaiming_normal_ in PyTorch", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "param", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_predictors.MaskRCNNC4Predictor.forward": [[34, 37], ["torch.nn.functional.relu", "roi_mask_predictors.MaskRCNNC4Predictor.mask_fcn_logits", "roi_mask_predictors.MaskRCNNC4Predictor.conv5_mask"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5_mask", "(", "x", ")", ")", "\n", "return", "self", ".", "mask_fcn_logits", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_predictors.PRCNNPredictor.__init__": [[40, 51], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "roi_mask_predictors.PRCNNPredictor.named_parameters", "torch.nn.init.constant_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "PRCNNPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mask_fcn_logits", "=", "Conv2d", "(", "32", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"bias\"", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "\"weight\"", "in", "name", ":", "\n", "# Caffe2 implementation uses MSRAFill, which in fact", "\n", "# corresponds to kaiming_normal_ in PyTorch", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "param", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_predictors.PRCNNPredictor.forward": [[51, 54], ["torch.nn.functional.relu", "roi_mask_predictors.PRCNNPredictor.mask_fcn_logits"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "return", "self", ".", "mask_fcn_logits", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_predictors.make_roi_mask_predictor": [[61, 64], ["func"], "function", ["None"], ["def", "make_roi_mask_predictor", "(", "cfg", ")", ":", "\n", "    ", "func", "=", "_ROI_MASK_PREDICTOR", "[", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "PREDICTOR", "]", "\n", "return", "func", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.MaskPostProcessor.__init__": [[25, 28], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.MaskPostProcessor.forward": [[29, 66], ["x.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "inference.MaskPostProcessor.split", "zip", "maskrcnn_benchmark.structures.bounding_box.BoxList.get_field", "len", "inference.MaskPostProcessor.masker", "maskrcnn_benchmark.structures.bounding_box.BoxList", "box.fields", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "results.append", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "box.get_field"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["is_teacher", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "is_teacher", "=", "is_teacher", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.MaskPostProcessorCOCOFormat.forward": [[75, 90], ["inference.MaskPostProcessor.forward", "result.get_field().cpu", "result.add_field", "rle[].decode", "result.get_field", "mask_util.encode", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.ConvTranspose2d.forward", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.box_coder.BoxCoder.encode"], ["\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "\n", "box_regression", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "objectness", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.Masker.__init__": [[215, 218], ["None"], "methods", ["None"], ["\n", "", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.Masker.forward_single_image": [[219, 231], ["boxes.convert.convert.convert", "inference.paste_mask_in_image", "len", "masks.new_empty", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.paste_mask_in_image"], ["# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# TODO resolve this difference and make it consistent. It should be per image,", "\n", "# and not per batch", "\n", "if", "self", ".", "training", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.Masker.__call__": [[232, 247], ["isinstance", "zip", "len", "len", "inference.Masker.forward_single_image", "results.append", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.Masker.forward_single_image"], ["inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", "\n", ")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n", "", "", "return", "boxlists", "\n", "\n", "\n", "", "", "def", "make_rpn_postprocessor", "(", "config", ",", "rpn_box_coder", ",", "is_train", ",", "\n", "is_teacher", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.expand_boxes": [[95, 110], ["torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "# batch_ = batch_idx.expand([N ,pre_nms_top_n])", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.expand_masks": [[112, 120], ["mask.new_zeros", "float"], "function", ["None"], ["\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "result", "=", "[", "]", "\n", "for", "j", ",", "(", "proposal", ",", "score", ",", "im_shape", ",", "topk_id", ",", ")", "in", "enumerate", "(", "\n", "zip", "(", "\n", "proposals", ",", "objectness", ",", "image_shapes", ",", "topk_idx", ",", ")", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.crop_mask_to_proposal": [[122, 168], ["inference.expand_masks", "box.to.to", "proposal.to.to", "int", "int", "max", "max", "F.interpolate.expand", "F.interpolate.to", "torch.interpolate", "torch.zeros", "torch.zeros", "max", "min", "max", "min", "F.interpolate.expand", "torch.interpolate", "inference.expand_boxes"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.expand_masks", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.interpolate", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.interpolate", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.expand_boxes"], ["# boxlist.add_field(\"bid\", batch_[j])", "\n", "                ", "boxlist", ".", "add_field", "(", "\"box_reg\"", ",", "box_regression", "[", "j", "]", ")", "\n", "boxlist", ".", "add_field", "(", "\"rpn_topk\"", ",", "topk_id", ")", "\n", "boxlist", ".", "add_field", "(", "\"rpn_ancher_level\"", ",", "torch", ".", "tensor", "(", "[", "i", "]", "\n", "*", "topk_id", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", ")", "\n", "", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "i", ",", "(", "a", ",", "o", ",", "b", ")", "in", "enumerate", "(", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ")", ":", "\n", "\n", "            ", "sampled_boxes", ".", "append", "(", "\n", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ",", "i", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "# todo: check if teacher-train mode can add these gts", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.paste_mask_in_image": [[169, 207], ["inference.expand_masks", "box.to.to", "int", "int", "max", "max", "F.interpolate.expand", "F.interpolate.to", "torch.interpolate", "torch.zeros", "torch.zeros", "max", "min", "max", "min", "inference.expand_boxes"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.expand_masks", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.interpolate", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.expand_boxes"], ["", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "#", "\n", "", "def", "forward_imitation", "(", "self", ",", "anchors", ",", "objectness", ",", "targets", ",", "s", ")", ":", "\n", "# code to find bbox region in FFI method", "\n", "        ", "canvas_list", "=", "[", "]", "\n", "for", "j", ",", "(", "a_per_img", ",", "o_per_img", ",", "tar", ")", "in", "enumerate", "(", "zip", "(", "anchors", ",", "objectness", ",", "targets", ")", ")", ":", "\n", "            ", "anchor_list", "=", "[", "]", "\n", "for", "i", ",", "(", "a", ",", "o", ")", "in", "enumerate", "(", "zip", "(", "a_per_img", ",", "o_per_img", ")", ")", ":", "\n", "                ", "iou", "=", "boxlist_iou", "(", "a", ",", "tar", ")", "\n", "iou", "[", "iou", "<=", "s", "]", "=", "0.", "\n", "preserve", "=", "torch", ".", "nonzero", "(", "iou", ")", "[", ":", ",", "0", "]", "\n", "preserve_anchor", "=", "a", "[", "preserve", "]", ".", "clip_to_image", "(", ")", "\n", "anchor_list", ".", "append", "(", "preserve_anchor", ")", "\n", "", "anchor_list", "=", "cat_boxlist", "(", "anchor_list", ")", "\n", "canvas", "=", "torch", ".", "zeros", "(", "a", ".", "size", ")", ".", "to", "(", "device", "=", "o_per_img", ".", "device", ")", "\n", "for", "bbox", "in", "anchor_list", ".", "bbox", ":", "\n", "                ", "bbox", "=", "bbox", ".", "long", "(", ")", "\n", "canvas", "[", "bbox", "[", "1", "]", ":", "bbox", "[", "3", "]", ",", "bbox", "[", "0", "]", ":", "bbox", "[", "2", "]", "]", "=", "1", "\n", "", "canvas_list", ".", "append", "(", "canvas", ")", "\n", "", "return", "canvas_list", "\n", "\n", "", "def", "collect_batch_single_feature_idx", "(", "self", ",", "teacher_sample_list", ",", "\n", "targets", ")", ":", "\n", "        ", "batch_idx", "=", "[", "]", "\n", "# batch_ori_idx = []", "\n", "sort_target", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "feature_idxs", "=", "[", "]", "\n", "targets_list", "=", "[", "]", "\n", "# pdb.set_trace()", "\n", "for", "per_img_sample", ",", "per_img_target", "in", "zip", "(", "\n", "teacher_sample_list", ",", "targets", ")", ":", "\n", "                ", "feature_idxs", ".", "append", "(", "\n", "per_img_sample", "[", "1", "]", "[", "(", "per_img_sample", "[", "0", "]", "==", "i", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "targets_list", ".", "append", "(", "\n", "per_img_target", "[", "(", "per_img_sample", "[", "0", "]", "==", "i", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.make_roi_mask_post_processor": [[249, 257], ["inference.MaskPostProcessor", "inference.Masker"], "function", ["None"], ["#     # FORCE TRUE", "\n", "#     is_train=True", "\n", "    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.make_roi_mask_generator": [[258, 263], ["inference.Masker", "inference.MaskPostProcessor"], "function", ["None"], ["        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.inference.mask_mutual_target_processor": [[264, 268], ["inference.Masker"], "function", ["None"], ["post_nms_top_n", "=", "post_nms_top_n", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "\n", "min_size", "=", "min_size", ",", "\n", "box_coder", "=", "rpn_box_coder", ",", "\n", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", ",", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.PRCNNFeatureExtractor.__init__": [[13, 59], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.modeling.poolers.Pooler", "torch.nn.MaxPool2d", "maskrcnn_benchmark.modeling.poolers.Pooler", "torch.nn.MaxPool2d", "maskrcnn_benchmark.modeling.poolers.Pooler", "torch.nn.MaxPool2d", "maskrcnn_benchmark.modeling.poolers.Pooler", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "PRCNNFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5", "=", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv6", "=", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv7", "=", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv8", "=", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "# pdb.set_trace()", "\n", "self", ".", "pooler1", "=", "Pooler", "(", "\n", "output_size", "=", "(", "25", ",", "25", ")", ",", "\n", "scales", "=", "(", "1.", ",", ")", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "self", ".", "p1", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "pooler2", "=", "Pooler", "(", "\n", "output_size", "=", "(", "25", ",", "25", ")", ",", "\n", "scales", "=", "(", "0.5", ",", ")", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "self", ".", "p2", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "pooler3", "=", "Pooler", "(", "\n", "output_size", "=", "(", "25", ",", "25", ")", ",", "\n", "scales", "=", "(", "0.25", ",", ")", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "self", ".", "p3", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "pooler4", "=", "Pooler", "(", "\n", "output_size", "=", "(", "25", ",", "25", ")", ",", "\n", "scales", "=", "(", "0.125", ",", ")", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "\n", "\n", "\n", "self", ".", "posconv1", "=", "Conv2d", "(", "480", ",", "256", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "posconv2", "=", "Conv2d", "(", "256", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "for", "layer", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "self", ".", "conv4", ",", "self", ".", "conv5", ",", "self", ".", "conv6", ",", "self", ".", "conv7", ",", "self", ".", "conv8", ",", "\n", "self", ".", "posconv1", ",", "self", ".", "posconv2", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "layer", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.PRCNNFeatureExtractor.forward": [[60, 89], ["torch.nn.functional.relu", "torch.nn.functional.relu", "roi_mask_feature_extractors.PRCNNFeatureExtractor.pooler1", "roi_mask_feature_extractors.PRCNNFeatureExtractor.p1", "torch.nn.functional.relu", "torch.nn.functional.relu", "roi_mask_feature_extractors.PRCNNFeatureExtractor.pooler2", "roi_mask_feature_extractors.PRCNNFeatureExtractor.p2", "torch.nn.functional.relu", "torch.nn.functional.relu", "roi_mask_feature_extractors.PRCNNFeatureExtractor.pooler3", "roi_mask_feature_extractors.PRCNNFeatureExtractor.p3", "torch.nn.functional.relu", "torch.nn.functional.relu", "roi_mask_feature_extractors.PRCNNFeatureExtractor.pooler4", "range", "torch.cat", "roi_mask_feature_extractors.PRCNNFeatureExtractor.posconv1", "torch.nn.functional.relu", "roi_mask_feature_extractors.PRCNNFeatureExtractor.posconv2", "roi_mask_feature_extractors.PRCNNFeatureExtractor.conv1", "roi_mask_feature_extractors.PRCNNFeatureExtractor.conv2", "roi_mask_feature_extractors.PRCNNFeatureExtractor.conv3", "roi_mask_feature_extractors.PRCNNFeatureExtractor.conv4", "roi_mask_feature_extractors.PRCNNFeatureExtractor.conv5", "roi_mask_feature_extractors.PRCNNFeatureExtractor.conv6", "roi_mask_feature_extractors.PRCNNFeatureExtractor.conv7", "roi_mask_feature_extractors.PRCNNFeatureExtractor.conv8", "roi_mask_feature_extractors.PRCNNFeatureExtractor.append", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "\n", "        ", "pre_feature", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x1", "=", "self", ".", "pooler1", "(", "[", "x", "]", ",", "proposals", ")", "\n", "x", "=", "self", ".", "p1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv4", "(", "x", ")", ")", "\n", "x2", "=", "self", ".", "pooler2", "(", "[", "x", "]", ",", "proposals", ")", "\n", "x", "=", "self", ".", "p2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv6", "(", "x", ")", ")", "\n", "x3", "=", "self", ".", "pooler3", "(", "[", "x", "]", ",", "proposals", ")", "\n", "x", "=", "self", ".", "p3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv7", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv8", "(", "x", ")", ")", "\n", "x4", "=", "self", ".", "pooler4", "(", "[", "x", "]", ",", "proposals", ")", "\n", "# concate", "\n", "num", "=", "x1", ".", "shape", "[", "0", "]", "\n", "concate_feature", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "            ", "concate_feature", ".", "append", "(", "torch", ".", "cat", "(", "[", "x1", "[", "i", "]", ",", "x2", "[", "i", "]", ",", "x3", "[", "i", "]", ",", "x4", "[", "i", "]", "]", ",", "0", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "", "concate_feature", "=", "torch", ".", "cat", "(", "concate_feature", ",", "0", ")", "\n", "# pdb.set_trace()", "\n", "concate_feature", "=", "self", ".", "posconv1", "(", "concate_feature", ")", "\n", "concate_feature", "=", "F", ".", "relu", "(", "concate_feature", ")", "\n", "concate_feature", "=", "self", ".", "posconv2", "(", "concate_feature", ")", "\n", "return", "concate_feature", ",", "pre_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.__init__": [[96, 130], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "enumerate", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.add_module", "roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.blocks.append"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            num_classes (int): number of output classes\n            input_size (int): number of channels of the input once it's flattened\n            representation_size (int): size of the intermediate representation\n        \"\"\"", "\n", "super", "(", "MaskRCNNFPNFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "input_size", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "OUT_CHANNELS", "\n", "self", ".", "pooler", "=", "pooler", "\n", "\n", "layers", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "CONV_LAYERS", "\n", "\n", "next_feature", "=", "input_size", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "layer_idx", ",", "layer_features", "in", "enumerate", "(", "layers", ",", "1", ")", ":", "\n", "            ", "layer_name", "=", "\"mask_fcn{}\"", ".", "format", "(", "layer_idx", ")", "\n", "module", "=", "Conv2d", "(", "next_feature", ",", "layer_features", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "# Caffe2 implementation uses MSRAFill, which in fact", "\n", "# corresponds to kaiming_normal_ in PyTorch", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "module", ")", "\n", "next_feature", "=", "layer_features", "\n", "self", ".", "blocks", ".", "append", "(", "layer_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.forward": [[131, 147], ["roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.pooler", "torch.nn.functional.relu.to", "torch.nn.functional.relu", "p.to", "p.to", "getattr"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "# pdb.set_trace()", "\n", "\n", "        ", "device", "=", "x", "[", "0", "]", ".", "device", ".", "index", "\n", "if", "device", "!=", "0", ":", "\n", "            ", "x", "=", "[", "p", ".", "to", "(", "'cuda:0'", ")", "for", "p", "in", "x", "]", "\n", "proposals", "=", "[", "p", ".", "to", "(", "'cuda:0'", ")", "for", "p", "in", "proposals", "]", "\n", "", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "if", "device", "!=", "0", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "'cuda:1'", ")", "\n", "# x = self.pooler(x, proposals)", "\n", "", "pre_feature", "=", "x", "\n", "for", "layer_name", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "getattr", "(", "self", ",", "layer_name", ")", "(", "x", ")", ")", "\n", "\n", "", "return", "x", ",", "pre_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.MaskRCNNFPNAdaptor.__init__": [[150, 170], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "roi_mask_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "roi_mask_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "roi_mask_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "roi_mask_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "roi_mask_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "MaskRCNNFPNAdaptor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "channel", "=", "[", "256", ",", "256", ",", "256", ",", "256", ",", "256", "]", "\n", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "input_size", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "OUT_CHANNELS", "\n", "self", ".", "pooler", "=", "pooler", "\n", "\n", "self", ".", "adapter_1", "=", "self", ".", "_init_adaptor", "(", "channel", "[", "0", "]", ",", "channel", "[", "0", "]", ")", "\n", "self", ".", "adapter_2", "=", "self", ".", "_init_adaptor", "(", "channel", "[", "1", "]", ",", "channel", "[", "1", "]", ")", "\n", "self", ".", "adapter_3", "=", "self", ".", "_init_adaptor", "(", "channel", "[", "2", "]", ",", "channel", "[", "2", "]", ")", "\n", "self", ".", "adapter_4", "=", "self", ".", "_init_adaptor", "(", "channel", "[", "3", "]", ",", "channel", "[", "3", "]", ")", "\n", "self", ".", "adapter_5", "=", "self", ".", "_init_adaptor", "(", "channel", "[", "4", "]", ",", "channel", "[", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor": [[171, 177], ["maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_adaptor", "(", "self", ",", "s_channel", ",", "t_channel", ")", ":", "\n", "        ", "adaptor", "=", "Conv2d", "(", "s_channel", ",", "t_channel", ",", "1", ",", "1", ",", "1", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "adaptor", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "\n", "nonlinearity", "=", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "adaptor", ".", "bias", ",", "0", ")", "\n", "return", "adaptor", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.MaskRCNNFPNAdaptor.forward": [[178, 188], ["roi_mask_feature_extractors.MaskRCNNFPNAdaptor.adapter_1", "roi_mask_feature_extractors.MaskRCNNFPNAdaptor.adapter_2", "roi_mask_feature_extractors.MaskRCNNFPNAdaptor.adapter_3", "roi_mask_feature_extractors.MaskRCNNFPNAdaptor.adapter_4", "roi_mask_feature_extractors.MaskRCNNFPNAdaptor.adapter_5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features_s", ")", ":", "\n", "# adapt", "\n", "        ", "features_s", "[", "0", "]", "=", "self", ".", "adapter_1", "(", "features_s", "[", "0", "]", ")", "\n", "features_s", "[", "1", "]", "=", "self", ".", "adapter_2", "(", "features_s", "[", "1", "]", ")", "\n", "features_s", "[", "2", "]", "=", "self", ".", "adapter_3", "(", "features_s", "[", "2", "]", ")", "\n", "features_s", "[", "3", "]", "=", "self", ".", "adapter_4", "(", "features_s", "[", "3", "]", ")", "\n", "features_s", "[", "4", "]", "=", "self", ".", "adapter_5", "(", "features_s", "[", "4", "]", ")", "\n", "# for layer_name in self.blocks:", "\n", "#     features_s = F.relu(getattr(self, layer_name)(features_s))", "\n", "return", "features_s", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.DeeperExtractor.__init__": [[193, 202], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DeeperExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mask_fcn1", "=", "Conv2d", "(", "257", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "mask_fcn2", "=", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "mask_fcn3", "=", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv5_mask", "=", "Conv2d", "(", "256", ",", "cfg", ".", "MODEL", ".", "RELATION_MASK", ".", "EXTRACTOR_CHANNEL", ",", "3", ",", "1", ",", "1", ")", "\n", "for", "l", "in", "[", "self", ".", "mask_fcn1", ",", "self", ".", "mask_fcn2", ",", "self", ".", "mask_fcn3", ",", "self", ".", "conv5_mask", ",", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "l", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.DeeperExtractor.forward": [[202, 212], ["torch.nn.functional.max_pool2d", "torch.cat", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "roi_mask_feature_extractors.DeeperExtractor.mask_fcn1", "roi_mask_feature_extractors.DeeperExtractor.mask_fcn2", "roi_mask_feature_extractors.DeeperExtractor.mask_fcn3", "roi_mask_feature_extractors.DeeperExtractor.conv5_mask"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "mask", "=", "x", "\n", "# import  pdb;pdb.set_trace()", "\n", "mask_pool", "=", "F", ".", "max_pool2d", "(", "mask", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "mask_pool", ")", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "mask_fcn3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5_mask", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.make_roi_mask_feature_extractor": [[222, 225], ["func"], "function", ["None"], ["def", "make_roi_mask_feature_extractor", "(", "cfg", ")", ":", "\n", "    ", "func", "=", "_ROI_MASK_FEATURE_EXTRACTORS", "[", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "FEATURE_EXTRACTOR", "]", "\n", "return", "func", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.roi_mask_feature_extractors.make_mask_adapt_layer": [[226, 228], ["roi_mask_feature_extractors.MaskRCNNFPNAdaptor"], "function", ["None"], ["", "def", "make_mask_adapt_layer", "(", "cfg", ")", ":", "\n", "    ", "return", "MaskRCNNFPNAdaptor", "(", "cfg", ")", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.MaskRCNNLossComputation.__init__": [[79, 89], ["None"], "methods", ["None"], ["\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "", "def", "teacher_sample_selection", "(", "self", ",", "anchors", ",", "objectness", ",", "\n", "box_regression", ",", "targets", ")", ":", "\n", "        ", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "\n", "anchors_per_image", "in", "anchors", "]", "\n", "# print('anchor', anchors)", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.MaskRCNNLossComputation.match_targets_to_proposals": [[90, 102], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.MaskRCNNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.MaskRCNNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["# print('target',targets)", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "\n", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "\n", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "\n", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "\n", "dim", "=", "0", ")", "\n", "sampled_pos_inds_num", "=", "sampled_pos_inds", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.MaskRCNNLossComputation.match_targets_labels_to_proposals": [[103, 115], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.MaskRCNNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.MaskRCNNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["objectness_flattened", "=", "[", "]", "\n", "box_regression_flattened", "=", "[", "]", "\n", "# for each feature level, permute the outputs to make them be in the", "\n", "# same format as the labels. Note that the labels are computed for", "\n", "# all feature levels concatenated, so we keep the same representation", "\n", "# for the objectness and the box_regression", "\n", "for", "objectness_per_level", ",", "box_regression_per_level", "in", "zip", "(", "\n", "objectness", ",", "box_regression", "\n", ")", ":", "\n", "            ", "N", ",", "A", ",", "H", ",", "W", "=", "objectness_per_level", ".", "shape", "\n", "objectness_per_level", "=", "objectness_per_level", ".", "permute", "(", "0", ",", "2", ",", "\n", "3", ",", "\n", "1", ")", ".", "reshape", "(", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.MaskRCNNLossComputation.prepare_targets": [[116, 150], ["zip", "loss.MaskRCNNLossComputation.match_targets_to_proposals", "loss.MaskRCNNLossComputation.get_field", "loss.MaskRCNNLossComputation.get_field", "labels_per_image.to.to.to", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "loss.MaskRCNNLossComputation.get_field", "loss.project_masks_on_boxes", "labels.append", "masks.append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.match_targets_to_proposals", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.project_masks_on_boxes"], ["N", ",", "-", "1", "\n", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "view", "(", "\n", "N", ",", "-", "1", ",", "4", ",", "H", ",", "W", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "permute", "(", "\n", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "reshape", "(", "\n", "N", ",", "-", "1", ",", "4", ")", "\n", "objectness_flattened", ".", "append", "(", "objectness_per_level", ")", "\n", "box_regression_flattened", ".", "append", "(", "box_regression_per_level", ")", "\n", "# concatenate on the first dimension (representing the feature levels), to", "\n", "# take into account the way the labels were generated (with all feature maps", "\n", "# being concatenated as well)", "\n", "", "objectness", "=", "cat", "(", "objectness_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "box_regression", "=", "cat", "(", "box_regression_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "\n", "-", "1", ",", "4", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "objectness", "=", "objectness", "[", "sampled_inds", "]", "\n", "label", "=", "labels", "[", "sampled_inds", "]", "\n", "box_regression", "=", "box_regression", "[", "sampled_pos_inds", "]", "\n", "return", "objectness", ",", "box_regression", ",", "(", "sampled_inds", ",", "sampled_pos_inds_num", ")", ",", "label", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.MaskRCNNLossComputation.__call__": [[151, 181], ["loss.MaskRCNNLossComputation.prepare_targets", "maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "maskrcnn_benchmark.modeling.utils.cat.numel", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "mask_logits.sum"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.prepare_targets", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["# print('anchor', anchors)", "\n", "# print('target',targets)", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness_flattened", "=", "[", "]", "\n", "box_regression_flattened", "=", "[", "]", "\n", "# for each feature level, permute the outputs to make them be in the", "\n", "# same format as the labels. Note that the labels are computed for", "\n", "# all feature levels concatenated, so we keep the same representation", "\n", "# for the objectness and the box_regression", "\n", "for", "objectness_per_level", ",", "box_regression_per_level", "in", "zip", "(", "\n", "objectness", ",", "box_regression", "\n", ")", ":", "\n", "            ", "N", ",", "A", ",", "H", ",", "W", "=", "objectness_per_level", ".", "shape", "\n", "objectness_per_level", "=", "objectness_per_level", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "\n", "N", ",", "-", "1", "\n", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "view", "(", "N", ",", "-", "1", ",", "4", ",", "H", ",", "W", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "objectness_flattened", ".", "append", "(", "objectness_per_level", ")", "\n", "box_regression_flattened", ".", "append", "(", "box_regression_per_level", ")", "\n", "# concatenate on the first dimension (representing the feature levels), to", "\n", "# take into account the way the labels were generated (with all feature maps", "\n", "# being concatenated as well)", "\n", "", "objectness", "=", "cat", "(", "objectness_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.vgg16.__init__": [[204, 241], ["super().__init__", "torchvision.models.VGG", "torch.load", "torch.load", "torch.load", "torch.load", "torchvision.models.VGG.load_state_dict", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "loss.vgg16.mean.view", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "loss.vgg16.std.view", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "loss.vgg16.slice1.add_module", "loss.vgg16.slice2.add_module", "loss.vgg16.slice3.add_module", "loss.vgg16.slice4.add_module", "loss.make_layers", "loss.vgg16.parameters", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.make_layers"], [")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "matcher", ",", "fg_bg_sampler", ",", "\n", "box_coder", ",", "cfg", ")", "\n", "return", "loss_evaluator", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.vgg16.forward": [[242, 263], ["torch.nn.functional.pad", "torch.nn.functional.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "loss.vgg16.slice1", "loss.vgg16.slice2", "loss.vgg16.slice3", "loss.vgg16.slice4", "collections.namedtuple", "collections.namedtuple."], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.dice_loss": [[19, 30], ["torch.nn.functional.sigmoid", "F.sigmoid.view", "target.view", "input.view.sum", "target.view.sum"], "function", ["None"], ["import", "pdb", "\n", "\n", "class", "RPNLossComputation", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    This class computes the RPN loss.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", "\n", ",", "cfg", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss": [[32, 36], ["torch.nn.functional.sigmoid", "maskrcnn_benchmark.modeling.losses.MSEloss"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.losses.MSEloss"], ["\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.project_masks_on_boxes": [[37, 76], ["proposals.bbox.to.convert", "proposals.bbox.to.bbox.to", "zip", "torch.stack().to", "torch.stack().to", "torch.device", "torch.device", "segmentation_mask.crop", "segmentation_mask.crop.resize", "cropped_mask.resize.convert", "masks.append", "len", "torch.empty", "torch.empty", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.crop", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "cls_loss_type", "=", "cfg", ".", "MT", ".", "CLS_LOSS_TYPE", "\n", "self", ".", "alpha", "=", "cfg", ".", "MT", ".", "RPN_BOOST_ALPHA", "\n", "self", ".", "temp", "=", "cfg", ".", "MT", ".", "TEMP", "\n", "self", ".", "reg_loss_type", "=", "cfg", ".", "MT", ".", "REG_LOSS_TYPE", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "[", "]", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "objectness", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", "\n", ")", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.make_roi_mask_loss_evaluator": [[183, 195], ["maskrcnn_benchmark.modeling.matcher.Matcher", "loss.MaskRCNNLossComputation"], "function", ["None"], ["\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.make_layers": [[264, 278], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_predictors.FastRCNNPredictor.__init__": [[6, 24], ["torch.nn.Module.__init__", "torch.nn.AvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "FastRCNNPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "stage_index", "=", "4", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stage_index", "-", "1", ")", "\n", "res2_out_channels", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "num_inputs", "=", "res2_out_channels", "*", "stage2_relative_factor", "\n", "\n", "num_classes", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "7", ",", "stride", "=", "7", ")", "\n", "self", ".", "cls_score", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "num_classes", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "num_classes", "*", "4", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "cls_score", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_score", ".", "bias", ",", "0", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "bbox_pred", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bbox_pred", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_predictors.FastRCNNPredictor.forward": [[25, 31], ["roi_box_predictors.FastRCNNPredictor.avgpool", "x.view.view.view", "roi_box_predictors.FastRCNNPredictor.cls_score", "roi_box_predictors.FastRCNNPredictor.bbox_pred", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "cls_logit", "=", "self", ".", "cls_score", "(", "x", ")", "\n", "bbox_pred", "=", "self", ".", "bbox_pred", "(", "x", ")", "\n", "return", "cls_logit", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_predictors.FPNPredictor.__init__": [[34, 46], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "FPNPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "representation_size", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "MLP_HEAD_DIM", "\n", "\n", "self", ".", "cls_score", "=", "nn", ".", "Linear", "(", "representation_size", ",", "num_classes", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Linear", "(", "representation_size", ",", "num_classes", "*", "4", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "cls_score", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "bbox_pred", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "l", "in", "[", "self", ".", "cls_score", ",", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_predictors.FPNPredictor.forward": [[47, 52], ["roi_box_predictors.FPNPredictor.cls_score", "roi_box_predictors.FPNPredictor.bbox_pred"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "scores", "=", "self", ".", "cls_score", "(", "x", ")", "\n", "bbox_deltas", "=", "self", ".", "bbox_pred", "(", "x", ")", "\n", "\n", "return", "scores", ",", "bbox_deltas", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_predictors.make_roi_box_predictor": [[60, 63], ["func"], "function", ["None"], ["def", "make_roi_box_predictor", "(", "cfg", ")", ":", "\n", "    ", "func", "=", "_ROI_BOX_PREDICTOR", "[", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "PREDICTOR", "]", "\n", "return", "func", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.PostProcessor.__init__": [[18, 36], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.box_coder.BoxCoder"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", "is_teacher", "=", "False", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.PostProcessor.forward": [[36, 72], ["torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inference.PostProcessor.box_coder.decode", "proposals.split.split.split", "class_prob.split.split.split", "zip", "len", "box_regression.view", "inference.PostProcessor.prepare_boxlist", "inference.PostProcessor.clip_to_image", "inference.PostProcessor.filter_results", "results.append", "sum", "inference.PostProcessor.add_field"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.PostProcessor.prepare_boxlist", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.PostProcessor.filter_results", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "is_teacher", "=", "is_teacher", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.PostProcessor.prepare_boxlist": [[73, 91], ["boxes.reshape.reshape.reshape", "scores.reshape.reshape.reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "\n", "box_regression", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "objectness", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.PostProcessor.filter_results": [[92, 146], ["boxlist.bbox.reshape", "boxlist.get_field().reshape", "range", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "len", "boxlist.fields", "boxlist.get_field", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "inds_all[].nonzero().squeeze", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "boxlist.get_field", "maskrcnn_benchmark.modeling.python_nms.set_cpu_nms", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "torch.full", "torch.full", "torch.full", "torch.full", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field.cpu", "image_thresh.item", "inds_all[].nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.python_nms.set_cpu_nms", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_nms"], ["box_regression", "=", "box_regression", ".", "view", "(", "N", ",", "-", "1", ",", "4", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "box_regression", "=", "box_regression", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "# batch_ = batch_idx.expand([N ,pre_nms_top_n])", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "result", "=", "[", "]", "\n", "for", "j", ",", "(", "proposal", ",", "score", ",", "im_shape", ",", "topk_id", ",", ")", "in", "enumerate", "(", "\n", "zip", "(", "\n", "proposals", ",", "objectness", ",", "image_shapes", ",", "topk_idx", ",", ")", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "if", "self", ".", "is_teacher", ":", "\n", "# boxlist.add_field(\"bid\", batch_[j])", "\n", "                ", "boxlist", ".", "add_field", "(", "\"box_reg\"", ",", "box_regression", "[", "j", "]", ")", "\n", "boxlist", ".", "add_field", "(", "\"rpn_topk\"", ",", "topk_id", ")", "\n", "boxlist", ".", "add_field", "(", "\"rpn_ancher_level\"", ",", "torch", ".", "tensor", "(", "[", "i", "]", "\n", "*", "topk_id", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", ")", "\n", "", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.make_roi_box_post_processor": [[147, 162], ["maskrcnn_benchmark.modeling.box_coder.BoxCoder", "inference.PostProcessor"], "function", ["None"], ["\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "i", ",", "(", "a", ",", "o", ",", "b", ")", "in", "enumerate", "(", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ")", ":", "\n", "\n", "            ", "sampled_boxes", ".", "append", "(", "\n", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ",", "i", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.__init__": [[13, 38], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "maskrcnn_benchmark.modeling.backbone.resnet.StageSpec", "maskrcnn_benchmark.modeling.backbone.resnet.ResNetHead"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "ResNet50Conv5ROIFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "\n", "stage", "=", "resnet", ".", "StageSpec", "(", "index", "=", "4", ",", "block_count", "=", "3", ",", "return_features", "=", "False", ")", "\n", "head", "=", "resnet", ".", "ResNetHead", "(", "\n", "block_module", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "TRANS_FUNC", ",", "\n", "stages", "=", "(", "stage", ",", ")", ",", "\n", "num_groups", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "NUM_GROUPS", ",", "\n", "width_per_group", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "WIDTH_PER_GROUP", ",", "\n", "stride_in_1x1", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "STRIDE_IN_1X1", ",", "\n", "stride_init", "=", "None", ",", "\n", "res2_out_channels", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", ",", "\n", ")", "\n", "\n", "self", ".", "pooler", "=", "pooler", "\n", "self", ".", "head", "=", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.forward": [[39, 43], ["roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.pooler", "roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor.__init__": [[47, 59], ["torch.nn.Module.__init__", "roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "MaskRCNNFPNAdaptor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "channel", "=", "[", "256", ",", "256", ",", "256", ",", "256", ",", "256", "]", "\n", "if", "cfg", ".", "MT", ".", "T_ADAPT", "is", "not", "True", ":", "\n", "            ", "out_channel", "=", "channel", "\n", "", "else", ":", "\n", "            ", "out_channel", "=", "[", "128", ",", "128", ",", "128", ",", "128", ",", "128", "]", "\n", "", "self", ".", "adapter_1", "=", "self", ".", "_init_adaptor", "(", "channel", "[", "0", "]", ",", "out_channel", "[", "0", "]", ")", "\n", "self", ".", "adapter_2", "=", "self", ".", "_init_adaptor", "(", "channel", "[", "1", "]", ",", "out_channel", "[", "1", "]", ")", "\n", "self", ".", "adapter_3", "=", "self", ".", "_init_adaptor", "(", "channel", "[", "2", "]", ",", "out_channel", "[", "2", "]", ")", "\n", "self", ".", "adapter_4", "=", "self", ".", "_init_adaptor", "(", "channel", "[", "3", "]", ",", "out_channel", "[", "3", "]", ")", "\n", "self", ".", "adapter_5", "=", "self", ".", "_init_adaptor", "(", "channel", "[", "4", "]", ",", "out_channel", "[", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor._init_adaptor": [[60, 65], ["maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_adaptor", "(", "self", ",", "s_channel", ",", "t_channel", ")", ":", "\n", "        ", "adaptor", "=", "Conv2d", "(", "s_channel", ",", "t_channel", ",", "1", ",", "1", ",", "0", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "adaptor", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "adaptor", ".", "bias", ",", "0", ")", "\n", "return", "adaptor", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor.forward": [[66, 76], ["roi_box_feature_extractors.MaskRCNNFPNAdaptor.adapter_1", "roi_box_feature_extractors.MaskRCNNFPNAdaptor.adapter_2", "roi_box_feature_extractors.MaskRCNNFPNAdaptor.adapter_3", "roi_box_feature_extractors.MaskRCNNFPNAdaptor.adapter_4", "roi_box_feature_extractors.MaskRCNNFPNAdaptor.adapter_5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features_s", ")", ":", "\n", "# adapt", "\n", "        ", "features1", "=", "self", ".", "adapter_1", "(", "features_s", "[", "0", "]", ")", "\n", "features2", "=", "self", ".", "adapter_2", "(", "features_s", "[", "1", "]", ")", "\n", "features3", "=", "self", ".", "adapter_3", "(", "features_s", "[", "2", "]", ")", "\n", "features4", "=", "self", ".", "adapter_4", "(", "features_s", "[", "3", "]", ")", "\n", "features5", "=", "self", ".", "adapter_5", "(", "features_s", "[", "4", "]", ")", "\n", "output", "=", "[", "features1", ",", "features2", ",", "features3", ",", "features4", ",", "features5", "]", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.FPN2MLPFeatureExtractor.__init__": [[83, 106], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "FPN2MLPFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "input_size", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "OUT_CHANNELS", "*", "resolution", "**", "2", "\n", "representation_size", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "MLP_HEAD_DIM", "\n", "self", ".", "pooler", "=", "pooler", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "input_size", ",", "representation_size", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "representation_size", ",", "representation_size", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "for", "l", "in", "[", "self", ".", "fc6", ",", "self", ".", "fc7", "]", ":", "\n", "# Caffe2 implementation uses XavierFill, which in fact", "\n", "# corresponds to kaiming_uniform_ in PyTorch", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.FPN2MLPFeatureExtractor.forward": [[107, 126], ["roi_box_feature_extractors.FPN2MLPFeatureExtractor.pooler", "torch.nn.functional.dropout.view", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.dropout.to", "torch.nn.functional.dropout.size", "roi_box_feature_extractors.FPN2MLPFeatureExtractor.fc6", "roi_box_feature_extractors.FPN2MLPFeatureExtractor.fc7", "torch.nn.functional.dropout", "p.to", "p.to"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "proposals", ",", "filp", "=", "False", ",", "istrain", "=", "False", ")", ":", "\n", "# pooler only support cuda:0!!!", "\n", "        ", "device", "=", "x", "[", "0", "]", ".", "device", ".", "index", "\n", "if", "device", "!=", "0", ":", "\n", "            ", "x", "=", "[", "p", ".", "to", "(", "'cuda:0'", ")", "for", "p", "in", "x", "]", "\n", "proposals", "=", "[", "p", ".", "to", "(", "'cuda:0'", ")", "for", "p", "in", "proposals", "]", "\n", "", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "if", "device", "!=", "0", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "'cuda:1'", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "x", ")", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc7", "(", "x", ")", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "DO", ">", "0", ":", "\n", "# todo train for teacher", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "DO", ",", "training", "=", "istrain", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.make_roi_box_feature_extractor": [[127, 132], ["func"], "function", ["None"], ["", "", "def", "make_roi_box_feature_extractor", "(", "cfg", ")", ":", "\n", "    ", "func", "=", "registry", ".", "ROI_BOX_FEATURE_EXTRACTORS", "[", "\n", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "FEATURE_EXTRACTOR", "\n", "]", "\n", "return", "func", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.__init__": [[18, 38], ["None"], "methods", ["None"], ["regression_loss", ",", "reg_flip_loss", "\n", "import", "pdb", "\n", "\n", "class", "RPNLossComputation", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    This class computes the RPN loss.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", "\n", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "cls_loss_type", "=", "cfg", ".", "MT", ".", "CLS_LOSS_TYPE", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.match_targets_to_proposals": [[39, 50], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.FastRCNNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.FastRCNNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["self", ".", "alpha", "=", "cfg", ".", "MT", ".", "RPN_BOOST_ALPHA", "\n", "self", ".", "temp", "=", "cfg", ".", "MT", ".", "TEMP", "\n", "self", ".", "reg_loss_type", "=", "cfg", ".", "MT", ".", "REG_LOSS_TYPE", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "[", "]", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.prepare_targets": [[51, 81], ["zip", "loss.FastRCNNLossComputation.match_targets_to_proposals", "loss.FastRCNNLossComputation.get_field", "loss.FastRCNNLossComputation.get_field", "labels_per_image.to.to.to", "loss.FastRCNNLossComputation.box_coder.encode", "labels.append", "regression_targets.append"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.match_targets_to_proposals", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.box_coder.BoxCoder.encode"], ["# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "objectness", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", "\n", ")", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.subsample": [[82, 117], ["loss.FastRCNNLossComputation.prepare_targets", "loss.FastRCNNLossComputation.fg_bg_sampler", "list", "zip", "enumerate", "proposals_per_image.add_field", "proposals_per_image.add_field", "zip", "torch.nonzero().squeeze", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.prepare_targets", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "", "def", "teacher_sample_selection", "(", "self", ",", "anchors", ",", "objectness", ",", "\n", "box_regression", ",", "targets", ")", ":", "\n", "        ", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "\n", "anchors_per_image", "in", "anchors", "]", "\n", "# print('anchor', anchors)", "\n", "# print('target',targets)", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "\n", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "\n", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "\n", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "\n", "dim", "=", "0", ")", "\n", "sampled_pos_inds_num", "=", "sampled_pos_inds", ".", "shape", "\n", "objectness_flattened", "=", "[", "]", "\n", "box_regression_flattened", "=", "[", "]", "\n", "# for each feature level, permute the outputs to make them be in the", "\n", "# same format as the labels. Note that the labels are computed for", "\n", "# all feature levels concatenated, so we keep the same representation", "\n", "# for the objectness and the box_regression", "\n", "for", "objectness_per_level", ",", "box_regression_per_level", "in", "zip", "(", "\n", "objectness", ",", "box_regression", "\n", ")", ":", "\n", "            ", "N", ",", "A", ",", "H", ",", "W", "=", "objectness_per_level", ".", "shape", "\n", "objectness_per_level", "=", "objectness_per_level", ".", "permute", "(", "0", ",", "2", ",", "\n", "3", ",", "\n", "1", ")", ".", "reshape", "(", "\n", "N", ",", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.__call__": [[118, 163], ["maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "torch.nn.functional.cross_entropy", "torch.nonzero().squeeze", "maskrcnn_benchmark.layers.smooth_l1_loss", "hasattr", "RuntimeError", "torch.tensor", "maskrcnn_benchmark.modeling.utils.cat.numel", "proposal.get_field", "proposal.get_field", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.smooth_l1_loss.smooth_l1_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["box_regression_per_level", "=", "box_regression_per_level", ".", "view", "(", "\n", "N", ",", "-", "1", ",", "4", ",", "H", ",", "W", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "permute", "(", "\n", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "reshape", "(", "\n", "N", ",", "-", "1", ",", "4", ")", "\n", "objectness_flattened", ".", "append", "(", "objectness_per_level", ")", "\n", "box_regression_flattened", ".", "append", "(", "box_regression_per_level", ")", "\n", "# concatenate on the first dimension (representing the feature levels), to", "\n", "# take into account the way the labels were generated (with all feature maps", "\n", "# being concatenated as well)", "\n", "", "objectness", "=", "cat", "(", "objectness_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "box_regression", "=", "cat", "(", "box_regression_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "\n", "-", "1", ",", "4", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "objectness", "=", "objectness", "[", "sampled_inds", "]", "\n", "label", "=", "labels", "[", "sampled_inds", "]", "\n", "box_regression", "=", "box_regression", "[", "sampled_pos_inds", "]", "\n", "return", "objectness", ",", "box_regression", ",", "(", "sampled_inds", ",", "sampled_pos_inds_num", ")", ",", "label", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "# print('anchor', anchors)", "\n", "# print('target',targets)", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness_flattened", "=", "[", "]", "\n", "box_regression_flattened", "=", "[", "]", "\n", "# for each feature level, permute the outputs to make them be in the", "\n", "# same format as the labels. Note that the labels are computed for", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation._mean_var_logits": [[164, 174], ["torch.stack", "torch.mean", "torch.stack", "torch.mean", "torch.std", "torch.nn.functional.softmax"], "methods", ["None"], ["# all feature levels concatenated, so we keep the same representation", "\n", "# for the objectness and the box_regression", "\n", "for", "objectness_per_level", ",", "box_regression_per_level", "in", "zip", "(", "\n", "objectness", ",", "box_regression", "\n", ")", ":", "\n", "            ", "N", ",", "A", ",", "H", ",", "W", "=", "objectness_per_level", ".", "shape", "\n", "objectness_per_level", "=", "objectness_per_level", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "\n", "N", ",", "-", "1", "\n", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "view", "(", "N", ",", "-", "1", ",", "4", ",", "H", ",", "W", ")", "\n", "box_regression_per_level", "=", "box_regression_per_level", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation._mean_var_regression": [[175, 184], ["enumerate", "torch.stack", "torch.mean", "torch.std"], "methods", ["None"], ["box_regression_per_level", "=", "box_regression_per_level", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "objectness_flattened", ".", "append", "(", "objectness_per_level", ")", "\n", "box_regression_flattened", ".", "append", "(", "box_regression_per_level", ")", "\n", "# concatenate on the first dimension (representing the feature levels), to", "\n", "# take into account the way the labels were generated (with all feature maps", "\n", "# being concatenated as well)", "\n", "", "objectness", "=", "cat", "(", "objectness_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "box_regression", "=", "cat", "(", "box_regression_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.evaluatePSM": [[185, 238], ["maskrcnn_benchmark.modeling.utils.cat", "loss.FastRCNNLossComputation.FastRCNNLossComputation._mean_var_logits", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "v_logit_t_p.sum.sum.sum", "v_logit_t_n.sum.sum.sum", "enumerate", "torch.mean", "loss.FastRCNNLossComputation.FastRCNNLossComputation.cls_loss", "torch.mean.append", "torch.stack", "proposal.get_field", "torch.nonzero", "torch.nonzero", "torch.cat", "torch.cat", "torch.cat.clone", "torch.argsort", "torch.randperm", "min", "int"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation._mean_var_logits", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.cls_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n", "\n", "", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ",", ")", ":", "\n", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "matcher", ",", "fg_bg_sampler", ",", "\n", "box_coder", ",", "cfg", ")", "\n", "return", "loss_evaluator", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.evaluateODKD": [[239, 256], ["maskrcnn_benchmark.modeling.utils.cat", "torch.nonzero().squeeze", "torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "torch.ones().to", "proposal.get_field", "torch.nonzero", "torch.ones", "torch.nn.functional.softmax.detach"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation._acc_cls_pos": [[258, 261], ["[].sum().cpu().numpy", "[].sum().cpu", "[].sum", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation._dist": [[262, 266], ["int", "torch.nn.functional.mse_loss", "regression[].clone", "gt[].clone"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.cls_loss": [[267, 288], ["torch.nn.functional.softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.kl_div", "torch.nn.functional.mse_loss", "torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "sharpen.detach", "loss.sharpen", "torch.ones().to", "torch.ones", "sharpen.detach", "sharpen.detach"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.mask_head.loss.mse_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.sharpen", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.make_roi_box_loss_evaluator": [[289, 310], ["maskrcnn_benchmark.modeling.matcher.Matcher", "maskrcnn_benchmark.modeling.box_coder.BoxCoder", "maskrcnn_benchmark.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler", "loss.FastRCNNLossComputation"], "function", ["None"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.sharpen": [[311, 316], ["targets_u.detach.detach", "pt.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead.__init__": [[17, 25], ["super().__init__", "roi_box_feature_extractors.make_roi_box_feature_extractor", "roi_box_predictors.make_roi_box_predictor", "inference.make_roi_box_post_processor", "loss.make_roi_box_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_feature_extractors.make_roi_box_feature_extractor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.roi_box_predictors.make_roi_box_predictor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.inference.make_roi_box_post_processor", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.make_roi_box_loss_evaluator"], ["def", "__init__", "(", "self", ",", "cfg", ",", "relation", "=", "True", ")", ":", "\n", "        ", "super", "(", "ROIBoxHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_extractor", "=", "make_roi_box_feature_extractor", "(", "cfg", ")", "\n", "self", ".", "predictor", "=", "make_roi_box_predictor", "(", "cfg", ")", "\n", "self", ".", "post_processor", "=", "make_roi_box_post_processor", "(", "cfg", ")", "\n", "self", ".", "loss_evaluator", "=", "make_roi_box_loss_evaluator", "(", "cfg", ")", "\n", "self", ".", "use_realation_nms", "=", "relation", "and", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "USE_RELATION_NMS", "\n", "self", ".", "cfg", "=", "cfg", "\n", "", "def", "set_teacher_mode", "(", "self", ",", "mode", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead.set_teacher_mode": [[25, 27], ["None"], "methods", ["None"], ["", "def", "set_teacher_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead.forward": [[28, 75], ["box_head.ROIBoxHead.feature_extractor", "box_head.ROIBoxHead.predictor", "box_head.ROIBoxHead.loss_evaluator", "dict", "torch.no_grad", "box_head.ROIBoxHead.loss_evaluator.subsample", "box_head.ROIBoxHead.post_processor"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.subsample"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (list[Tensor]): feature-maps from possibly several levels\n            proposals (list[BoxList]): proposal boxes\n            targets (list[BoxList], optional): the ground-truth targets.\n\n        Returns:\n            x (Tensor): the result of the feature extractor\n            proposals (list[BoxList]): during training, the subsampled proposals\n                are returned. During testing, the predicted boxlists are returned\n            losses (dict[Tensor]): During training, returns the losses for the\n                head. During testing, returns an empty dict.\n        \"\"\"", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# Faster R-CNN subsamples during training the proposals with a fixed", "\n", "# positive / negative ratio", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "proposals", "=", "self", ".", "loss_evaluator", ".", "subsample", "(", "proposals", ",", "targets", ")", "\n", "\n", "# extract features that will be fed to the final classifier. The", "\n", "# feature_extractor generally corresponds to the pooler + heads", "\n", "", "", "x", "=", "self", ".", "feature_extractor", "(", "features", ",", "proposals", ",", "istrain", "=", "\n", "self", ".", "training", ")", "\n", "# final classifier that converts the features into predictions", "\n", "class_logits", ",", "box_regression", "=", "self", ".", "predictor", "(", "x", ")", "\n", "if", "not", "self", ".", "training", ":", "\n", "# if not learn nms, then uncomment the following line", "\n", "            ", "if", "not", "self", ".", "use_realation_nms", ":", "\n", "                ", "proposals", "=", "self", ".", "post_processor", "(", "(", "class_logits", ",", "box_regression", ")", ",", "proposals", ")", "\n", "", "return", "(", "\n", "x", ",", "\n", "proposals", ",", "\n", "{", "}", ",", "\n", "class_logits", ",", "\n", "box_regression", "\n", ")", "\n", "", "loss_classifier", ",", "loss_box_reg", "=", "self", ".", "loss_evaluator", "(", "\n", "[", "class_logits", "]", ",", "[", "box_regression", "]", ")", "\n", "return", "(", "\n", "x", ",", "\n", "proposals", ",", "\n", "dict", "(", "loss_classifier", "=", "loss_classifier", ",", "\n", "loss_box_reg", "=", "loss_box_reg", ")", ",", "\n", "class_logits", ",", "\n", "box_regression", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead._forward_single": [[77, 96], ["maskrcnn_benchmark.utils.miscellaneous.batch_boxlist_hflip", "enumerate", "box_head.ROIBoxHead.loss_evaluator.subsample", "box_head.ROIBoxHead.predictor", "feats.append", "logits.append", "regressions.append", "box_head.ROIBoxHead.feature_extractor", "box_head.ROIBoxHead.feature_extractor"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.batch_boxlist_hflip", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.subsample"], ["", "def", "_forward_single", "(", "self", ",", "proposals", ",", "targets", ",", "feats_list", ",", "istrain", "=", "False", ")", ":", "\n", "        ", "if", "targets", "is", "not", "None", ":", "\n", "            ", "proposals", "=", "self", ".", "loss_evaluator", ".", "subsample", "(", "proposals", ",", "targets", ")", "\n", "", "proposals_B", "=", "batch_boxlist_hflip", "(", "proposals", ")", "\n", "feats", "=", "[", "]", "\n", "logits", "=", "[", "]", "\n", "regressions", "=", "[", "]", "\n", "for", "i", ",", "feat", "in", "enumerate", "(", "feats_list", ")", ":", "\n", "            ", "if", "i", "%", "2", "==", "0", ":", "\n", "                ", "x", "=", "self", ".", "feature_extractor", "(", "feat", ",", "proposals", ",", "istrain", "=", "istrain", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "feature_extractor", "(", "feat", ",", "proposals_B", ",", "istrain", "=", "istrain", ")", "\n", "", "class_logit", ",", "box_regression", "=", "self", ".", "predictor", "(", "x", ")", "\n", "feats", ".", "append", "(", "x", ")", "\n", "logits", ".", "append", "(", "class_logit", ")", "\n", "regressions", ".", "append", "(", "box_regression", ")", "\n", "# extract feature", "\n", "\n", "", "return", "feats", ",", "logits", ",", "regressions", ",", "proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead.forward_teacher": [[97, 101], ["box_head.ROIBoxHead._forward_single"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead._forward_single"], ["", "def", "forward_teacher", "(", "self", ",", "feature_tuple", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "feats", ",", "logits", ",", "regressions", ",", "proposals", "=", "self", ".", "_forward_single", "(", "proposals", ",", "targets", ",", "feature_tuple", ",", "istrain", "=", "False", ")", "\n", "return", "(", "feats", ",", "proposals", ",", "{", "}", ",", "logits", ",", "regressions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead.forward_student": [[102, 114], ["box_head.ROIBoxHead._forward_single", "dict", "box_head.ROIBoxHead.loss_evaluator.evaluateODKD", "box_head.ROIBoxHead.loss_evaluator.evaluatePSM", "torch.zeros().to", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead._forward_single", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.evaluateODKD", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.loss.FastRCNNLossComputation.evaluatePSM", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "forward_student", "(", "self", ",", "features", ",", "proposals", ",", "class_logits_t", ")", ":", "\n", "\n", "        ", "feats", ",", "logits", ",", "regressions", ",", "_", "=", "self", ".", "_forward_single", "(", "proposals", ",", "targets", "=", "None", ",", "feats_list", "=", "features", ",", "istrain", "=", "True", ")", "\n", "if", "self", ".", "cfg", ".", "MT", ".", "ODKD", ":", "\n", "            ", "cls_loss", "=", "self", ".", "loss_evaluator", ".", "evaluateODKD", "(", "logits", ",", "proposals", ",", "class_logits_t", ")", "\n", "", "elif", "self", ".", "cfg", ".", "MT", ".", "CLS_LOSS", ">", "0", ":", "\n", "            ", "cls_loss", "=", "self", ".", "loss_evaluator", ".", "evaluatePSM", "(", "logits", ",", "class_logits_t", ",", "proposals", ")", "\n", "", "else", ":", "\n", "            ", "cls_loss", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "to", "(", "logits", "[", "0", "]", ".", "device", ")", "#", "\n", "# placeholder", "\n", "", "loss_dict", "=", "dict", "(", "mt_classifier", "=", "cls_loss", ")", "\n", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.build_roi_box_head": [[116, 123], ["box_head.ROIBoxHead"], "function", ["None"], ["", "", "def", "build_roi_box_head", "(", "cfg", ",", "relation", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a new box head.\n    By default, uses ROIBoxHead, but if it turns out not to be enough, just register a new class\n    and make it a parameter in the config\n    \"\"\"", "\n", "return", "ROIBoxHead", "(", "cfg", ",", "relation", "=", "relation", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.fpn.FPN.__init__": [[14, 42], ["torch.nn.Module.__init__", "enumerate", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "fpn.FPN.add_module", "fpn.FPN.add_module", "fpn.FPN.inner_blocks.append", "fpn.FPN.layer_blocks.append", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels_list", ",", "out_channels", ",", "top_blocks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels_list (list[int]): number of channels for each feature map that\n                will be fed\n            out_channels (int): number of channels of the FPN representation\n            top_blocks (nn.Module or None): if provided, an extra operation will\n                be performed on the output of the last (smallest resolution)\n                FPN output, and the result will extend the result list\n        \"\"\"", "\n", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inner_blocks", "=", "[", "]", "\n", "self", ".", "layer_blocks", "=", "[", "]", "\n", "for", "idx", ",", "in_channels", "in", "enumerate", "(", "in_channels_list", ",", "1", ")", ":", "\n", "            ", "inner_block", "=", "\"fpn_inner{}\"", ".", "format", "(", "idx", ")", "\n", "layer_block", "=", "\"fpn_layer{}\"", ".", "format", "(", "idx", ")", "\n", "inner_block_module", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", "\n", "layer_block_module", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ")", "\n", "for", "module", "in", "[", "inner_block_module", ",", "layer_block_module", "]", ":", "\n", "# Caffe2 implementation uses XavierFill, which in fact", "\n", "# corresponds to kaiming_uniform_ in PyTorch", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "module", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "self", ".", "add_module", "(", "inner_block", ",", "inner_block_module", ")", "\n", "self", ".", "add_module", "(", "layer_block", ",", "layer_block_module", ")", "\n", "self", ".", "inner_blocks", ".", "append", "(", "inner_block", ")", "\n", "self", ".", "layer_blocks", ".", "append", "(", "layer_block", ")", "\n", "", "self", ".", "top_blocks", "=", "top_blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.fpn.FPN.forward": [[43, 70], ["results.append", "zip", "tuple", "getattr", "torch.interpolate", "torch.interpolate", "results.insert", "fpn.FPN.top_blocks", "results.extend", "getattr", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.interpolate", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.interpolate", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            x (list[Tensor]): feature maps for each feature level.\n        Returns:\n            results (tuple[Tensor]): feature maps after FPN layers.\n                They are ordered from highest resolution first.\n        \"\"\"", "\n", "last_inner", "=", "getattr", "(", "self", ",", "self", ".", "inner_blocks", "[", "-", "1", "]", ")", "(", "x", "[", "-", "1", "]", ")", "\n", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "getattr", "(", "self", ",", "self", ".", "layer_blocks", "[", "-", "1", "]", ")", "(", "last_inner", ")", ")", "\n", "for", "feature", ",", "inner_block", ",", "layer_block", "in", "zip", "(", "\n", "x", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "self", ".", "inner_blocks", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "self", ".", "layer_blocks", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", "\n", ")", ":", "\n", "            ", "inner_top_down", "=", "F", ".", "interpolate", "(", "last_inner", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "inner_lateral", "=", "getattr", "(", "self", ",", "inner_block", ")", "(", "feature", ")", "\n", "# TODO use size instead of scale to make it robust to different sizes", "\n", "# inner_top_down = F.upsample(last_inner, size=inner_lateral.shape[-2:],", "\n", "# mode='bilinear', align_corners=False)", "\n", "last_inner", "=", "inner_lateral", "+", "inner_top_down", "\n", "results", ".", "insert", "(", "0", ",", "getattr", "(", "self", ",", "layer_block", ")", "(", "last_inner", ")", ")", "\n", "\n", "", "if", "self", ".", "top_blocks", "is", "not", "None", ":", "\n", "            ", "last_results", "=", "self", ".", "top_blocks", "(", "results", "[", "-", "1", "]", ")", "\n", "results", ".", "extend", "(", "last_results", ")", "\n", "\n", "", "return", "tuple", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.fpn.LastLevelMaxPool.forward": [[73, 75], ["torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "[", "F", ".", "max_pool2d", "(", "x", ",", "1", ",", "2", ",", "0", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet.ResNet.__init__": [[62, 107], ["torch.nn.Module.__init__", "stem_module", "resnet.ResNet._freeze_backbone", "resnet._make_stage", "resnet.ResNet.add_module", "resnet.ResNet.stages.append", "str", "int"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet.ResNet._freeze_backbone", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# If we want to use the cfg in forward(), then we should make a copy", "\n", "# of it and store it for later use:", "\n", "# self.cfg = cfg.clone()", "\n", "\n", "# Translate string names to implementations", "\n", "stem_module", "=", "_STEM_MODULES", "[", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_FUNC", "]", "\n", "stage_specs", "=", "_STAGE_SPECS", "[", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "]", "\n", "transformation_module", "=", "_TRANSFORMATION_MODULES", "[", "cfg", ".", "MODEL", ".", "RESNETS", ".", "TRANS_FUNC", "]", "\n", "\n", "# Construct the stem module", "\n", "self", ".", "stem", "=", "stem_module", "(", "cfg", ")", "\n", "\n", "# Constuct the specified ResNet stages", "\n", "num_groups", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NUM_GROUPS", "\n", "width_per_group", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "WIDTH_PER_GROUP", "\n", "in_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", "\n", "stage2_bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "stage2_out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "self", ".", "stages", "=", "[", "]", "\n", "self", ".", "return_features", "=", "{", "}", "\n", "for", "stage_spec", "in", "stage_specs", ":", "\n", "            ", "name", "=", "\"layer\"", "+", "str", "(", "stage_spec", ".", "index", ")", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stage_spec", ".", "index", "-", "1", ")", "\n", "bottleneck_channels", "=", "stage2_bottleneck_channels", "*", "stage2_relative_factor", "\n", "out_channels", "=", "stage2_out_channels", "*", "stage2_relative_factor", "\n", "module", "=", "_make_stage", "(", "\n", "transformation_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "stage_spec", ".", "block_count", ",", "\n", "num_groups", ",", "\n", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STRIDE_IN_1X1", ",", "\n", "first_stride", "=", "int", "(", "stage_spec", ".", "index", ">", "1", ")", "+", "1", ",", "\n", ")", "\n", "in_channels", "=", "out_channels", "\n", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "self", ".", "stages", ".", "append", "(", "name", ")", "\n", "self", ".", "return_features", "[", "name", "]", "=", "stage_spec", ".", "return_features", "\n", "\n", "# Optionally freeze (requires_grad=False) parts of the backbone", "\n", "", "self", ".", "_freeze_backbone", "(", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "FREEZE_CONV_BODY_AT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet.ResNet._freeze_backbone": [[108, 116], ["range", "getattr.parameters", "getattr", "str"], "methods", ["None"], ["", "def", "_freeze_backbone", "(", "self", ",", "freeze_at", ")", ":", "\n", "        ", "for", "stage_index", "in", "range", "(", "freeze_at", ")", ":", "\n", "            ", "if", "stage_index", "==", "0", ":", "\n", "                ", "m", "=", "self", ".", "stem", "# stage 0 is the stem", "\n", "", "else", ":", "\n", "                ", "m", "=", "getattr", "(", "self", ",", "\"layer\"", "+", "str", "(", "stage_index", ")", ")", "\n", "", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet.ResNet.forward": [[117, 125], ["resnet.ResNet.stem", "getattr", "outputs.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "for", "stage_name", "in", "self", ".", "stages", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "stage_name", ")", "(", "x", ")", "\n", "if", "self", ".", "return_features", "[", "stage_name", "]", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ")", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet.ResNetHead.__init__": [[128, 167], ["torch.nn.Module.__init__", "resnet._make_stage", "resnet.ResNetHead.add_module", "resnet.ResNetHead.stages.append", "str", "int"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet._make_stage"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block_module", ",", "\n", "stages", ",", "\n", "num_groups", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride_init", "=", "None", ",", "\n", "res2_out_channels", "=", "256", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResNetHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stages", "[", "0", "]", ".", "index", "-", "1", ")", "\n", "stage2_bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "out_channels", "=", "res2_out_channels", "*", "stage2_relative_factor", "\n", "in_channels", "=", "out_channels", "//", "2", "\n", "bottleneck_channels", "=", "stage2_bottleneck_channels", "*", "stage2_relative_factor", "\n", "\n", "block_module", "=", "_TRANSFORMATION_MODULES", "[", "block_module", "]", "\n", "\n", "self", ".", "stages", "=", "[", "]", "\n", "stride", "=", "stride_init", "\n", "for", "stage", "in", "stages", ":", "\n", "            ", "name", "=", "\"layer\"", "+", "str", "(", "stage", ".", "index", ")", "\n", "if", "not", "stride", ":", "\n", "                ", "stride", "=", "int", "(", "stage", ".", "index", ">", "1", ")", "+", "1", "\n", "", "module", "=", "_make_stage", "(", "\n", "block_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "stage", ".", "block_count", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "first_stride", "=", "stride", ",", "\n", ")", "\n", "stride", "=", "None", "\n", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "self", ".", "stages", ".", "append", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet.ResNetHead.forward": [[168, 172], ["getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "stage", "in", "self", ".", "stages", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "stage", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet.BottleneckWithFixedBatchNorm.__init__": [[203, 253], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.FrozenBatchNorm2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.FrozenBatchNorm2d", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.FrozenBatchNorm2d", "torch.nn.Sequential", "torch.nn.Sequential", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.FrozenBatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", "=", "1", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BottleneckWithFixedBatchNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "FrozenBatchNorm2d", "(", "out_channels", ")", ",", "\n", ")", "\n", "\n", "# The original MSRA ResNet models have stride in the first 1x1 conv", "\n", "# The subsequent fb.torch.resnet and Caffe2 ResNe[X]t implementations have", "\n", "# stride in the 3x3 conv", "\n", "", "stride_1x1", ",", "stride_3x3", "=", "(", "stride", ",", "1", ")", "if", "stride_in_1x1", "else", "(", "1", ",", "stride", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride_1x1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "FrozenBatchNorm2d", "(", "bottleneck_channels", ")", "\n", "# TODO: specify init for the above", "\n", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride_3x3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "num_groups", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "FrozenBatchNorm2d", "(", "bottleneck_channels", ")", "\n", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn3", "=", "FrozenBatchNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet.BottleneckWithFixedBatchNorm.forward": [[254, 275], ["resnet.BottleneckWithFixedBatchNorm.conv1", "resnet.BottleneckWithFixedBatchNorm.bn1", "torch.relu_", "torch.relu_", "resnet.BottleneckWithFixedBatchNorm.conv2", "resnet.BottleneckWithFixedBatchNorm.bn2", "torch.relu_", "torch.relu_", "resnet.BottleneckWithFixedBatchNorm.conv3", "resnet.BottleneckWithFixedBatchNorm.bn3", "torch.relu_", "torch.relu_", "resnet.BottleneckWithFixedBatchNorm.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out0", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out0", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet.StemWithFixedBatchNorm.__init__": [[278, 287], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.FrozenBatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "StemWithFixedBatchNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "3", ",", "out_channels", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "FrozenBatchNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet.StemWithFixedBatchNorm.forward": [[288, 294], ["resnet.StemWithFixedBatchNorm.conv1", "resnet.StemWithFixedBatchNorm.bn1", "torch.relu_", "torch.relu_", "torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu_", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.resnet._make_stage": [[174, 200], ["range", "torch.nn.Sequential", "blocks.append", "transformation_module"], "function", ["None"], ["", "", "def", "_make_stage", "(", "\n", "transformation_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "block_count", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "first_stride", ",", "\n", ")", ":", "\n", "    ", "blocks", "=", "[", "]", "\n", "stride", "=", "first_stride", "\n", "for", "_", "in", "range", "(", "block_count", ")", ":", "\n", "        ", "blocks", ".", "append", "(", "\n", "transformation_module", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "stride", ",", "\n", ")", "\n", ")", "\n", "stride", "=", "1", "\n", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.backbone.build_resnet_backbone": [[12, 17], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "resnet.ResNet", "torch.nn.Sequential", "collections.OrderedDict"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.registry.Registry.register"], ["@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50-C4\"", ")", "\n", "def", "build_resnet_backbone", "(", "cfg", ")", ":", "\n", "    ", "body", "=", "resnet", ".", "ResNet", "(", "cfg", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", "]", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.backbone.build_resnet_fpn_backbone": [[19, 37], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "resnet.ResNet", "fpn.FPN", "torch.nn.Sequential", "collections.OrderedDict", "fpn.LastLevelMaxPool"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.registry.Registry.register", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.registry.Registry.register"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50-FPN\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-101-FPN\"", ")", "\n", "def", "build_resnet_fpn_backbone", "(", "cfg", ")", ":", "\n", "    ", "body", "=", "resnet", ".", "ResNet", "(", "cfg", ")", "\n", "in_channels_stage2", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "OUT_CHANNELS", "\n", "fpn", "=", "fpn_module", ".", "FPN", "(", "\n", "in_channels_list", "=", "[", "\n", "in_channels_stage2", ",", "\n", "in_channels_stage2", "*", "2", ",", "\n", "in_channels_stage2", "*", "4", ",", "\n", "in_channels_stage2", "*", "8", ",", "\n", "]", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "top_blocks", "=", "fpn_module", ".", "LastLevelMaxPool", "(", ")", ",", "\n", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", ",", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.backbone.build_backbone": [[39, 45], ["None"], "function", ["None"], ["", "def", "build_backbone", "(", "cfg", ")", ":", "\n", "    ", "assert", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "in", "registry", ".", "BACKBONES", ",", "\"cfg.MODEL.BACKBONE.CONV_BODY: {} are not registered in registry\"", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "\n", ")", "\n", "return", "registry", ".", "BACKBONES", "[", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "]", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.detectors.build_detection_model": [[5, 8], ["meta_arch"], "function", ["None"], ["def", "build_detection_model", "(", "cfg", ",", "is_teacher", "=", "False", ",", "is_student", "=", "False", ")", ":", "\n", "    ", "meta_arch", "=", "_DETECTION_META_ARCHITECTURES", "[", "cfg", ".", "MODEL", ".", "META_ARCHITECTURE", "]", "\n", "return", "meta_arch", "(", "cfg", ",", "is_teacher", ",", "is_student", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.__init__": [[18, 34], ["torch.nn.Module.__init__", "backbone.build_backbone", "rpn.rpn.build_rpn", "roi_heads.roi_heads.box_roi_heads", "roi_heads.roi_heads.mask_roi_heads", "maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_feature_extractors.MaskRCNNFPNAdaptor", "relation.relation_module.DuplicationRemovalNetwork"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.backbone.backbone.build_backbone", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.rpn.build_rpn", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.box_roi_heads", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.roi_heads.roi_heads.mask_roi_heads"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "is_teacher", "=", "False", ",", "is_student", "=", "False", ",", ")", ":", "\n", "        ", "super", "(", "GeneralizedRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mt_learning", "=", "False", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "backbone", "=", "build_backbone", "(", "cfg", ")", "\n", "self", ".", "rpn", "=", "build_rpn", "(", "cfg", ",", "is_teacher", ")", "\n", "self", ".", "box_heads", "=", "box_roi_heads", "(", "cfg", ")", "\n", "self", ".", "mask_heads", "=", "mask_roi_heads", "(", "cfg", ",", "is_student", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "USE_RELATION_NMS", ":", "\n", "            ", "self", ".", "relation_nms", "=", "DuplicationRemovalNetwork", "(", "cfg", ",", "is_teacher", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relation_nms", "=", "None", "\n", "", "self", ".", "mt_fg_hint", "=", "cfg", ".", "MT", ".", "FG_HINT", "\n", "self", ".", "mt_cls", "=", "cfg", ".", "MT", ".", "CLS_LOSS", "\n", "self", ".", "hint_adaptor", "=", "MaskRCNNFPNAdaptor", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.set_module_mode": [[35, 41], ["generalized_rcnn.GeneralizedRCNN.rpn.set_teacher_mode", "generalized_rcnn.GeneralizedRCNN.box_heads.box.set_teacher_mode", "generalized_rcnn.GeneralizedRCNN.mask_heads.mask.set_teacher_mode", "generalized_rcnn.GeneralizedRCNN.relation_nms.set_teacher_mode"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead.set_teacher_mode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead.set_teacher_mode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead.set_teacher_mode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.box_head.box_head.ROIBoxHead.set_teacher_mode"], ["", "def", "set_module_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "rpn", ".", "set_teacher_mode", "(", "mode", ")", "\n", "self", ".", "box_heads", ".", "box", ".", "set_teacher_mode", "(", "mode", ")", "\n", "if", "self", ".", "relation_nms", ":", "\n", "            ", "self", ".", "relation_nms", ".", "set_teacher_mode", "(", "mode", ")", "\n", "", "self", ".", "mask_heads", ".", "mask", ".", "set_teacher_mode", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.forward": [[42, 116], ["maskrcnn_benchmark.structures.image_list.to_image_list", "generalized_rcnn.GeneralizedRCNN.backbone", "generalized_rcnn.GeneralizedRCNN.rpn", "generalized_rcnn.GeneralizedRCNN.box_heads", "generalized_rcnn.GeneralizedRCNN.mask_heads", "ValueError", "torch.nn.functional.softmax", "torch.split", "torch.split", "torch.split", "zip", "losses.update", "losses.update", "generalized_rcnn.GeneralizedRCNN.relation_nms", "nms_result_list.append", "nms_loss_list.append", "losses.update", "len", "len", "torch.mean", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ",", "tta", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Supervised learning\n        Arguments:\n            images (list[Tensor] or ImageList): images to be processed\n            targets (list[BoxList]): ground-truth boxes present in the image (optional)\n\n        Returns:\n            result (list[BoxList] or dict[Tensor]): the output from the model.\n                During training, it returns a dict[Tensor] which contains the losses.\n                During testing, it returns list[BoxList] contains additional fields\n                like `scores`, `labels` and `mask` (for Mask R-CNN models).\n\n        \"\"\"", "\n", "\n", "if", "self", ".", "training", "and", "targets", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"In training mode, targets should be passed\"", ")", "\n", "", "images", "=", "to_image_list", "(", "images", ")", "\n", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensors", ")", "\n", "proposals", ",", "proposal_losses", "=", "self", ".", "rpn", "(", "images", ",", "features", ",", "targets", ")", "\n", "x", ",", "result", ",", "losses", ",", "class_logits", ",", "box_regression", "=", "self", ".", "box_heads", "(", "features", ",", "proposals", ",", "targets", ")", "\n", "if", "self", ".", "relation_nms", "is", "not", "None", ":", "# if use relation module. This part is orthogonal with MT framework", "\n", "#appearance_feature, proposals, cls_score, box_reg", "\n", "            ", "class_logits", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "class_logits", ")", "\n", "batch_size", "=", "[", "f", ".", "bbox", ".", "shape", "[", "0", "]", "for", "f", "in", "result", "]", "\n", "x_list", "=", "torch", ".", "split", "(", "x", ",", "batch_size", ")", "\n", "class_logits_list", "=", "torch", ".", "split", "(", "class_logits", ",", "batch_size", ")", "\n", "box_regression_list", "=", "torch", ".", "split", "(", "box_regression", ",", "batch_size", ")", "\n", "nms_result_list", "=", "[", "]", "\n", "nms_loss_list", "=", "[", "]", "\n", "if", "targets", "==", "None", ":", "\n", "                ", "targets", "=", "[", "None", "]", "*", "len", "(", "x_list", ")", "\n", "", "for", "xitem", ",", "re", ",", "clsl", ",", "boxr", ",", "target", "in", "zip", "(", "x_list", ",", "\n", "result", ",", "\n", "class_logits_list", ",", "\n", "box_regression_list", ",", "\n", "targets", ")", ":", "\n", "                ", "nms_result", ",", "nms_loss", "=", "self", ".", "relation_nms", "(", "(", "xitem", ",", "\n", "[", "re", "]", ",", "\n", "clsl", ",", "\n", "boxr", ",", "\n", "[", "target", "]", ")", ")", "\n", "nms_result_list", ".", "append", "(", "nms_result", ")", "\n", "nms_loss_list", ".", "append", "(", "nms_loss", ")", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "                ", "if", "len", "(", "nms_result_list", ")", "==", "1", ":", "\n", "                    ", "nms_result", "=", "nms_result_list", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "nms_result", "=", "[", "f", "[", "0", "]", "for", "f", "in", "nms_result_list", "]", "\n", "", "result", "=", "nms_result", "\n", "", "else", ":", "\n", "                ", "nms_loss", "=", "[", "f", "[", "'nms_loss'", "]", "for", "f", "in", "nms_loss_list", "]", "\n", "nms_loss", "=", "{", "'nms_loss'", ":", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "\n", "nms_loss", ")", ")", "}", "\n", "\n", "# in train phase, mask branch use proposals from det branch,", "\n", "# in test phase, mask branch use proposals from relation-nms branch", "\n", "", "", "result", ",", "detector_losses", "=", "self", ".", "mask_heads", "(", "losses", ",", "\n", "features", ",", "\n", "result", ",", "\n", "targets", ",", "\n", "images", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "losses", "=", "{", "}", "\n", "losses", ".", "update", "(", "detector_losses", ")", "\n", "losses", ".", "update", "(", "proposal_losses", ")", "\n", "if", "self", ".", "relation_nms", "is", "not", "None", ":", "\n", "                ", "losses", ".", "update", "(", "nms_loss", ")", "\n", "", "return", "losses", "\n", "", "else", ":", "\n", "            ", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.forward_teacher": [[117, 167], ["generalized_rcnn.GeneralizedRCNN.set_module_mode", "generalized_rcnn.GeneralizedRCNN.extract_aug_feat", "generalized_rcnn.GeneralizedRCNN.rpn.forward_teacher", "generalized_rcnn.GeneralizedRCNN.set_module_mode", "generalized_rcnn.GeneralizedRCNN.forward", "maskrcnn_benchmark.structures.image_list.to_image_list", "generalized_rcnn.GeneralizedRCNN.get_emb_feature", "generalized_rcnn.GeneralizedRCNN.box_heads.forward_teacher", "integral_mask_list.append", "t.get_field().decode", "torch.tensor", "integral_mask_list.append", "t.get_field().sum", "t.get_field", "t.get_field"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.set_module_mode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.extract_aug_feat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.forward_teacher", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.set_module_mode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.ConvTranspose2d.forward", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.get_emb_feature", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.forward_teacher", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "", "def", "forward_teacher", "(", "self", ",", "images", ",", "targets", "=", "None", ")", ":", "\n", "        ", "result", "=", "None", "\n", "class_logits", "=", "None", "\n", "integral_mask_list", "=", "[", "]", "\n", "if", "targets", "is", "None", ":", "\n", "            ", "self", ".", "set_module_mode", "(", "'test'", ")", "\n", "# test mode for teacher, this step we generate coarse", "\n", "# results and use them as targets for proposal sampling", "\n", "# therefore, to speed up, one aug-image(not k-aug version) is used to generate course result.", "\n", "images_infer", "=", "images", "[", "0", "]", "\n", "teacher_infer", "=", "self", ".", "forward", "(", "images_infer", ")", "\n", "\n", "if", "self", ".", "mt_fg_hint", ">", "0", ":", "\n", "                ", "for", "t", "in", "teacher_infer", ":", "\n", "                    ", "integral_mask", "=", "t", ".", "get_field", "(", "'mask'", ")", ".", "sum", "(", "0", ")", "[", "0", "]", "\n", "integral_mask_list", ".", "append", "(", "integral_mask", ")", "\n", "", "", "", "else", ":", "\n", "            ", "teacher_infer", "=", "targets", "\n", "if", "self", ".", "mt_fg_hint", ">", "0", ":", "\n", "                ", "for", "t", "in", "teacher_infer", ":", "\n", "                    ", "integral_mask", "=", "t", ".", "get_field", "(", "'masks'", ")", ".", "decode", "(", "800", ",", "800", ")", "\n", "integral_mask", "=", "torch", ".", "tensor", "(", "integral_mask", ")", "\n", "integral_mask_list", ".", "append", "(", "integral_mask", ")", "\n", "\n", "", "", "", "self", ".", "set_module_mode", "(", "'train'", ")", "\n", "images", "=", "[", "to_image_list", "(", "image", ")", "for", "image", "in", "images", "]", "\n", "aug_features", "=", "self", ".", "extract_aug_feat", "(", "images", ")", "\n", "rpn_feat", "=", "aug_features", "[", "0", "]", "# we do mt on *HEAD* and not on *RPN*, so use the first feature to get ROI", "\n", "\n", "objectness", ",", "rpn_box_regression", ",", "sample_idx", ",", "label", ",", "proposals", ",", "_", ",", "ffi_boxes", "=", "self", ".", "rpn", ".", "forward_teacher", "(", "images", "[", "0", "]", ",", "rpn_feat", ",", "teacher_infer", ")", "\n", "# todo: rewrite  boxhead forward teacher", "\n", "\n", "if", "self", ".", "cfg", ".", "MT", ".", "FG_HINT", "or", "self", ".", "cfg", ".", "MT", ".", "HINT", "or", "self", ".", "cfg", ".", "MT", ".", "ODKD", ":", "\n", "# ffi/fg/naive feat loss", "\n", "            ", "embeddings", "=", "self", ".", "get_emb_feature", "(", "aug_features", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", "=", "None", "\n", "", "if", "self", ".", "cfg", ".", "MT", ".", "CLS_LOSS", "or", "self", ".", "cfg", ".", "MT", ".", "ODKD", ":", "\n", "            ", "head_feat", ",", "result", ",", "losses", ",", "class_logits", ",", "box_regression", ",", "=", "self", ".", "box_heads", ".", "forward_teacher", "(", "\n", "aug_features", ",", "proposals", ",", "teacher_infer", ")", "\n", "# since we do not have consistency loss in mask head,", "\n", "# we skip this part.", "\n", "", "return", "{", "'result_t'", ":", "result", ",", "\n", "'class_logit_t'", ":", "class_logits", ",", "\n", "'embedding'", ":", "embeddings", ",", "\n", "'seg_mask'", ":", "integral_mask_list", ",", "\n", "'ffi_boxes'", ":", "ffi_boxes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.forward_student": [[170, 200], ["isinstance", "generalized_rcnn.GeneralizedRCNN.extract_aug_feat", "generalized_rcnn.GeneralizedRCNN.get_fg_feature_loss", "loss_dict.update", "generalized_rcnn.GeneralizedRCNN.get_ffi_loss", "loss_dict.update", "generalized_rcnn.GeneralizedRCNN.get_naive_hint_loss", "loss_dict.update", "generalized_rcnn.GeneralizedRCNN.box_heads.forward_student", "loss_dict.update", "maskrcnn_benchmark.structures.image_list.to_image_list", "maskrcnn_benchmark.structures.image_list.to_image_list"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.extract_aug_feat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.get_fg_feature_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.get_ffi_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.get_naive_hint_loss", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.forward_student", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list"], ["", "def", "forward_student", "(", "self", ",", "images", ",", "result_t", ")", ":", "\n", "        ", "loss_dict", "=", "{", "}", "\n", "if", "isinstance", "(", "images", ",", "list", ")", ":", "\n", "            ", "images", "=", "[", "to_image_list", "(", "image", ")", "for", "image", "in", "images", "]", "\n", "", "else", ":", "\n", "            ", "images", "=", "[", "to_image_list", "(", "images", ")", "]", "\n", "", "feat_list", "=", "self", ".", "extract_aug_feat", "(", "images", ",", "teacher", "=", "False", ")", "\n", "if", "self", ".", "cfg", ".", "MT", ".", "FG_HINT", ":", "\n", "            ", "fg_hint_loss", "=", "self", ".", "get_fg_feature_loss", "(", "feat_list", ",", "\n", "result_t", "[", "'seg_mask'", "]", ",", "result_t", "[", "'embedding'", "]", ")", "\n", "\n", "loss_dict", ".", "update", "(", "mt_fg_loss", "=", "fg_hint_loss", ")", "\n", "", "if", "self", ".", "cfg", ".", "MT", ".", "FFI", ":", "# compared method", "\n", "            ", "ffi_hint_loss", "=", "self", ".", "get_ffi_loss", "(", "feat_list", ",", "\n", "result_t", "[", "'ffi_boxes'", "]", ",", "result_t", "[", "'embedding'", "]", ")", "\n", "loss_dict", ".", "update", "(", "mt_hint_loss", "=", "ffi_hint_loss", ")", "\n", "", "if", "self", ".", "cfg", ".", "MT", ".", "ODKD", ":", "# compared method", "\n", "#naive hint loss", "\n", "            ", "naive_hint_loss", "=", "self", ".", "get_naive_hint_loss", "(", "feat_list", ",", "result_t", "[", "'embedding'", "]", ")", "\n", "loss_dict", ".", "update", "(", "mt_hint_loss", "=", "naive_hint_loss", ")", "\n", "# currently we do not conduct rpn consistent loss,", "\n", "# therefore we direct use teacher ROI in student boxhead", "\n", "# todo: rewrite boxhead.forward_student", "\n", "", "if", "self", ".", "cfg", ".", "MT", ".", "CLS_LOSS", "or", "self", ".", "cfg", ".", "MT", ".", "ODKD", ":", "\n", "            ", "losses", "=", "self", ".", "box_heads", ".", "forward_student", "(", "\n", "feat_list", ",", "result_t", "[", "'result_t'", "]", ",", "\n", "result_t", "[", "'class_logit_t'", "]", ",", ")", "\n", "\n", "loss_dict", ".", "update", "(", "losses", ")", "\n", "", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.extract_aug_feat": [[201, 216], ["enumerate", "generalized_rcnn.GeneralizedRCNN.backbone", "img.hflip", "generalized_rcnn.GeneralizedRCNN.backbone", "feat_list.extend", "generalized_rcnn.GeneralizedRCNN.backbone", "feat_list.append", "img.hflip"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.hflip", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.hflip"], ["", "def", "extract_aug_feat", "(", "self", ",", "imglist", ",", "teacher", "=", "True", ")", ":", "\n", "        ", "feat_list", "=", "[", "]", "\n", "if", "teacher", ":", "\n", "            ", "for", "img", "in", "imglist", ":", "\n", "                ", "feat1", "=", "self", ".", "backbone", "(", "img", ".", "tensors", ")", "\n", "img", ".", "hflip", "(", ")", "\n", "feat1_f", "=", "self", ".", "backbone", "(", "img", ".", "tensors", ")", "\n", "feat_list", ".", "extend", "(", "[", "feat1", ",", "feat1_f", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "img", "in", "enumerate", "(", "imglist", ")", ":", "\n", "                ", "if", "i", "%", "2", "==", "1", ":", "\n", "                    ", "img", ".", "hflip", "(", ")", "\n", "", "feat", "=", "self", ".", "backbone", "(", "img", ".", "tensors", ")", "\n", "feat_list", ".", "append", "(", "feat", ")", "\n", "", "", "return", "feat_list", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.get_emb_feature": [[218, 223], ["embedding_list.append", "generalized_rcnn.GeneralizedRCNN.hint_adaptor"], "methods", ["None"], ["", "def", "get_emb_feature", "(", "self", ",", "feature_list", ")", ":", "\n", "        ", "embedding_list", "=", "[", "]", "\n", "for", "feat", "in", "feature_list", ":", "\n", "            ", "embedding_list", ".", "append", "(", "self", ".", "hint_adaptor", "(", "feat", ")", ")", "\n", "", "return", "embedding_list", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.get_fg_feature_loss": [[224, 230], ["generalized_rcnn.GeneralizedRCNN.get_emb_feature", "generalized_rcnn.fg_hint_loss"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.get_emb_feature", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.fg_hint_loss"], ["", "def", "get_fg_feature_loss", "(", "self", ",", "feature_list", ",", "seg_mask", ",", "\n", "teacher_feat", ")", ":", "\n", "        ", "student_feat", "=", "self", ".", "get_emb_feature", "(", "feature_list", ")", "\n", "\n", "loss", "=", "fg_hint_loss", "(", "teacher_feat", ",", "student_feat", ",", "seg_mask", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.get_ffi_loss": [[231, 235], ["generalized_rcnn.GeneralizedRCNN.get_emb_feature", "generalized_rcnn.ffi_hint_loss"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.get_emb_feature", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.ffi_hint_loss"], ["", "def", "get_ffi_loss", "(", "self", ",", "feature", ",", "int_mask", ",", "teacher_feature", ")", ":", "\n", "        ", "student_feat", "=", "self", ".", "get_emb_feature", "(", "feature", ")", "\n", "loss", "=", "ffi_hint_loss", "(", "teacher_feature", ",", "student_feat", ",", "int_mask", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.get_naive_hint_loss": [[236, 240], ["generalized_rcnn.GeneralizedRCNN.get_emb_feature", "generalized_rcnn.naive_hint_loss"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.get_emb_feature", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.naive_hint_loss"], ["", "def", "get_naive_hint_loss", "(", "self", ",", "feature", ",", "teacher_feature", ")", ":", "\n", "        ", "student_feat", "=", "self", ".", "get_emb_feature", "(", "feature", ")", "\n", "loss", "=", "naive_hint_loss", "(", "teacher_feature", ",", "student_feat", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.fg_hint_loss": [[243, 283], ["enumerate", "torch.stack", "torch.mean", "new_teacher.append", "len", "torch.stack.to", "torch.nn.functional.adaptive_avg_pool2d", "mask_list.append", "len", "torch.stack", "maskrcnn_benchmark.utils.miscellaneous.batch_hfilp", "mask[].float", "zip", "dists.append", "zip", "maskrcnn_benchmark.utils.miscellaneous._hflip", "dists.append", "msk.sum", "msk.sum"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.batch_hfilp", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous._hflip"], ["", "", "def", "fg_hint_loss", "(", "teachers", ",", "students", ",", "masks", ")", ":", "\n", "# proposed hint loss for fg feature", "\n", "    ", "new_teacher", "=", "[", "]", "\n", "for", "i", ",", "feat", "in", "enumerate", "(", "teachers", ")", ":", "\n", "        ", "if", "i", "%", "2", "==", "1", ":", "\n", "            ", "feat", "=", "batch_hfilp", "(", "feat", ")", "\n", "", "new_teacher", ".", "append", "(", "feat", ")", "\n", "", "hi_size", "=", "[", "f", ".", "shape", "for", "f", "in", "students", "[", "0", "]", "]", "\n", "mask_list", "=", "[", "]", "\n", "masks", "=", "torch", ".", "stack", "(", "masks", ")", "\n", "if", "len", "(", "students", ")", ">", "1", ":", "\n", "        ", "ori_student_list", "=", "students", "[", "0", ":", ":", "2", "]", "\n", "flip_student_list", "=", "students", "[", "1", ":", ":", "2", "]", "\n", "", "else", ":", "\n", "        ", "ori_student_list", "=", "students", "\n", "flip_student_list", "=", "[", "]", "\n", "", "for", "size", "in", "hi_size", ":", "\n", "        ", "mask", "=", "masks", ".", "to", "(", "new_teacher", "[", "0", "]", "[", "0", "]", ".", "device", ")", "\n", "mask", "=", "F", ".", "adaptive_avg_pool2d", "(", "mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", ",", "size", "[", "2", ":", "]", ")", "\n", "mask", "[", "mask", ">", "0.5", "]", "=", "1.", "\n", "mask", "[", "mask", "<=", "0.5", "]", "=", "0.", "\n", "mask_list", ".", "append", "(", "mask", ")", "\n", "\n", "", "dists", "=", "[", "]", "\n", "for", "feature", "in", "new_teacher", ":", "\n", "        ", "for", "student", "in", "ori_student_list", ":", "\n", "            ", "for", "s_f", ",", "t_f", ",", "msk", "in", "zip", "(", "student", ",", "feature", ",", "mask_list", ")", ":", "\n", "                ", "dist", "=", "(", "(", "(", "s_f", "-", "t_f", ")", "**", "2", ")", "*", "msk", ")", ".", "sum", "(", ")", "/", "(", "msk", ".", "sum", "(", ")", "*", "\n", "s_f", ".", "shape", "[", "1", "]", "\n", "+", "1e-7", ")", "\n", "dists", ".", "append", "(", "dist", ")", "\n", "", "", "", "if", "len", "(", "students", ")", ">", "1", ":", "\n", "        ", "for", "feature", "in", "new_teacher", ":", "\n", "            ", "for", "student", "in", "flip_student_list", ":", "\n", "                ", "for", "s_f", ",", "t_f", ",", "msk", "in", "zip", "(", "student", ",", "feature", ",", "mask_list", ")", ":", "\n", "                    ", "s_f", "=", "_hflip", "(", "s_f", ")", "\n", "dist", "=", "(", "(", "(", "s_f", "-", "t_f", ")", "**", "2", ")", "*", "msk", ")", ".", "sum", "(", ")", "/", "(", "msk", ".", "sum", "(", ")", "*", "s_f", ".", "shape", "[", "1", "]", "+", "1e-7", ")", "\n", "dists", ".", "append", "(", "dist", ")", "\n", "", "", "", "", "dist", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "dists", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.ffi_hint_loss": [[284, 295], ["torch.stack", "zip", "torch.mean", "torch.nn.functional.adaptive_avg_pool2d", "dists.append", "torch.stack", "masks[].float", "F.adaptive_avg_pool2d.sum"], "function", ["None"], ["", "def", "ffi_hint_loss", "(", "teachers", ",", "students", ",", "masks", ")", ":", "\n", "    ", "dists", "=", "[", "]", "\n", "masks", "=", "torch", ".", "stack", "(", "masks", ")", "\n", "for", "s_f", ",", "t_f", "in", "zip", "(", "students", ",", "teachers", ")", ":", "\n", "        ", "msk", "=", "F", ".", "adaptive_avg_pool2d", "(", "masks", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", ",", "s_f", ".", "shape", "[", "2", ":", "]", ")", "\n", "msk", "[", "msk", ">", "0.5", "]", "=", "1.", "\n", "msk", "[", "msk", "<=", "0.5", "]", "=", "0.", "\n", "dist", "=", "(", "(", "(", "s_f", "-", "t_f", ")", "**", "2", ")", "*", "msk", ")", ".", "sum", "(", ")", "/", "(", "msk", ".", "sum", "(", ")", "*", "s_f", ".", "shape", "[", "1", "]", ")", "\n", "dists", ".", "append", "(", "dist", ")", "\n", "", "dist", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "dists", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.naive_hint_loss": [[296, 303], ["zip", "torch.mean", "dists.append", "torch.stack", "s_f.numel"], "function", ["None"], ["", "def", "naive_hint_loss", "(", "teachers", ",", "students", ",", ")", ":", "\n", "    ", "dists", "=", "[", "]", "\n", "for", "s_f", ",", "t_f", "in", "zip", "(", "students", ",", "teachers", ")", ":", "\n", "        ", "dist", "=", "(", "(", "(", "s_f", "-", "t_f", ")", "**", "2", ")", ")", ".", "sum", "(", ")", "/", "(", "s_f", ".", "numel", "(", ")", ")", "\n", "dists", ".", "append", "(", "dist", ")", "\n", "", "dist", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "dists", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.old_fg_hint": [[305, 342], ["torch.stack", "torch.mean", "print", "torch.stack.to", "torch.nn.functional.adaptive_avg_pool2d", "mask_list.append", "F.adaptive_avg_pool2d.clone", "maskrcnn_benchmark.utils.miscellaneous._hflip", "f_mask_list.append", "zip", "len", "torch.stack", "msk.sum", "mask[].float", "dists.append", "zip", "dists.append", "msk.sum", "msk.sum"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous._hflip"], ["", "def", "old_fg_hint", "(", "teachers", ",", "students", ",", "masks", ")", ":", "\n", "    ", "ori_teacher_list", "=", "teachers", "[", "0", ":", ":", "2", "]", "\n", "\n", "flip_teacher_list", "=", "teachers", "[", "1", ":", ":", "2", "]", "\n", "\n", "hi_size", "=", "[", "f", ".", "shape", "for", "f", "in", "students", "[", "0", "]", "]", "\n", "mask_list", "=", "[", "]", "\n", "f_mask_list", "=", "[", "]", "\n", "masks", "=", "torch", ".", "stack", "(", "masks", ")", "\n", "for", "size", "in", "hi_size", ":", "\n", "        ", "mask", "=", "masks", ".", "to", "(", "ori_teacher_list", "[", "0", "]", "[", "0", "]", ".", "device", ")", "\n", "mask", "=", "F", ".", "adaptive_avg_pool2d", "(", "mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", ",", "\n", "size", "[", "2", ":", "]", ")", "\n", "mask", "[", "mask", ">", "0.5", "]", "=", "1.", "\n", "mask", "[", "mask", "<=", "0.5", "]", "=", "0.", "\n", "mask_list", ".", "append", "(", "mask", ")", "\n", "fmsk", "=", "mask", ".", "clone", "(", ")", "\n", "fmsk", "=", "_hflip", "(", "fmsk", ")", "\n", "f_mask_list", ".", "append", "(", "fmsk", ")", "\n", "", "dists", "=", "[", "]", "\n", "\n", "for", "feature", "in", "ori_teacher_list", ":", "\n", "        ", "for", "s_f", ",", "t_f", ",", "msk", "in", "zip", "(", "students", "[", "0", "]", ",", "feature", ",", "mask_list", ")", ":", "\n", "            ", "dist", "=", "(", "(", "(", "s_f", "-", "t_f", ")", "**", "2", ")", "*", "msk", ")", ".", "sum", "(", ")", "/", "(", "\n", "(", "msk", ".", "sum", "(", ")", "*", "s_f", ".", "shape", "[", "1", "]", ")", "+", "1e-5", ")", "\n", "dists", ".", "append", "(", "dist", ")", "\n", "", "", "if", "len", "(", "students", ")", ">", "1", ":", "\n", "        ", "for", "feature", "in", "flip_teacher_list", ":", "\n", "            ", "for", "s_f", ",", "t_f", ",", "msk", "in", "zip", "(", "students", "[", "1", "]", ",", "feature", ",", "\n", "f_mask_list", ")", ":", "\n", "                ", "dist", "=", "(", "(", "(", "s_f", "-", "t_f", ")", "**", "2", ")", "*", "msk", ")", ".", "sum", "(", ")", "/", "(", "\n", "(", "msk", ".", "sum", "(", ")", "*", "s_f", ".", "shape", "[", "1", "]", ")", "+", "1e-5", ")", "\n", "dists", ".", "append", "(", "dist", ")", "\n", "# pdb.set_trace()", "\n", "", "", "", "dist", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "dists", ")", ")", "\n", "print", "(", "dist", ",", "msk", ".", "sum", "(", ")", ")", "\n", "return", "dist", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.Mask.__init__": [[20, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "masks", ",", "size", ",", "mode", ")", ":", "\n", "        ", "self", ".", "masks", "=", "masks", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.Mask.transpose": [[25, 42], ["list", "segmentation_mask.Mask.masks.index_select", "segmentation_mask.Mask", "NotImplementedError", "range"], "methods", ["None"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", "FLIP_TOP_BOTTOM", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT and FLIP_TOP_BOTTOM implemented\"", "\n", ")", "\n", "\n", "", "width", ",", "height", "=", "self", ".", "size", "\n", "if", "method", "==", "FLIP_LEFT_RIGHT", ":", "\n", "            ", "dim", "=", "width", "\n", "idx", "=", "2", "\n", "", "elif", "method", "==", "FLIP_TOP_BOTTOM", ":", "\n", "            ", "dim", "=", "height", "\n", "idx", "=", "1", "\n", "\n", "", "flip_idx", "=", "list", "(", "range", "(", "dim", ")", "[", ":", ":", "-", "1", "]", ")", "\n", "flipped_masks", "=", "self", ".", "masks", ".", "index_select", "(", "dim", ",", "flip_idx", ")", "\n", "return", "Mask", "(", "flipped_masks", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.Mask.crop": [[43, 48], ["segmentation_mask.Mask"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "w", ",", "h", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "\n", "cropped_masks", "=", "self", ".", "masks", "[", ":", ",", "box", "[", "1", "]", ":", "box", "[", "3", "]", ",", "box", "[", "0", "]", ":", "box", "[", "2", "]", "]", "\n", "return", "Mask", "(", "cropped_masks", ",", "size", "=", "(", "w", ",", "h", ")", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.Mask.resize": [[49, 51], ["None"], "methods", ["None"], ["", "def", "resize", "(", "self", ",", "size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.Polygons.__init__": [[60, 70], ["isinstance", "isinstance", "torch.as_tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "polygons", ",", "size", ",", "mode", ")", ":", "\n", "# assert isinstance(polygons, list), '{}'.format(polygons)", "\n", "        ", "if", "isinstance", "(", "polygons", ",", "list", ")", ":", "\n", "            ", "polygons", "=", "[", "torch", ".", "as_tensor", "(", "p", ",", "dtype", "=", "torch", ".", "float32", ")", "for", "p", "in", "polygons", "]", "\n", "", "elif", "isinstance", "(", "polygons", ",", "Polygons", ")", ":", "\n", "            ", "polygons", "=", "polygons", ".", "polygons", "\n", "\n", "", "self", ".", "polygons", "=", "polygons", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.Polygons.transpose": [[71, 93], ["segmentation_mask.Polygons", "NotImplementedError", "poly.clone", "flipped_polygons.append"], "methods", ["None"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", "FLIP_TOP_BOTTOM", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT and FLIP_TOP_BOTTOM implemented\"", "\n", ")", "\n", "\n", "", "flipped_polygons", "=", "[", "]", "\n", "width", ",", "height", "=", "self", ".", "size", "\n", "if", "method", "==", "FLIP_LEFT_RIGHT", ":", "\n", "            ", "dim", "=", "width", "\n", "idx", "=", "0", "\n", "", "elif", "method", "==", "FLIP_TOP_BOTTOM", ":", "\n", "            ", "dim", "=", "height", "\n", "idx", "=", "1", "\n", "\n", "", "for", "poly", "in", "self", ".", "polygons", ":", "\n", "            ", "p", "=", "poly", ".", "clone", "(", ")", "\n", "TO_REMOVE", "=", "1", "\n", "p", "[", "idx", ":", ":", "2", "]", "=", "dim", "-", "poly", "[", "idx", ":", ":", "2", "]", "-", "TO_REMOVE", "\n", "flipped_polygons", ".", "append", "(", "p", ")", "\n", "\n", "", "return", "Polygons", "(", "flipped_polygons", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.Polygons.crop": [[94, 109], ["max", "max", "segmentation_mask.Polygons", "poly.clone", "cropped_polygons.append"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "w", ",", "h", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "\n", "# TODO chck if necessary", "\n", "w", "=", "max", "(", "w", ",", "1", ")", "\n", "h", "=", "max", "(", "h", ",", "1", ")", "\n", "\n", "cropped_polygons", "=", "[", "]", "\n", "for", "poly", "in", "self", ".", "polygons", ":", "\n", "            ", "p", "=", "poly", ".", "clone", "(", ")", "\n", "p", "[", "0", ":", ":", "2", "]", "=", "p", "[", "0", ":", ":", "2", "]", "-", "box", "[", "0", "]", "# .clamp(min=0, max=w)", "\n", "p", "[", "1", ":", ":", "2", "]", "=", "p", "[", "1", ":", ":", "2", "]", "-", "box", "[", "1", "]", "# .clamp(min=0, max=h)", "\n", "cropped_polygons", ".", "append", "(", "p", ")", "\n", "\n", "", "return", "Polygons", "(", "cropped_polygons", ",", "size", "=", "(", "w", ",", "h", ")", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.Polygons.resize": [[110, 126], ["tuple", "segmentation_mask.Polygons", "segmentation_mask.Polygons", "poly.clone", "scaled_polygons.append", "float", "float", "zip"], "methods", ["None"], ["", "def", "resize", "(", "self", ",", "size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ratios", "=", "tuple", "(", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "size", ",", "self", ".", "size", ")", ")", "\n", "if", "ratios", "[", "0", "]", "==", "ratios", "[", "1", "]", ":", "\n", "            ", "ratio", "=", "ratios", "[", "0", "]", "\n", "scaled_polys", "=", "[", "p", "*", "ratio", "for", "p", "in", "self", ".", "polygons", "]", "\n", "return", "Polygons", "(", "scaled_polys", ",", "size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n", "", "ratio_w", ",", "ratio_h", "=", "ratios", "\n", "scaled_polygons", "=", "[", "]", "\n", "for", "poly", "in", "self", ".", "polygons", ":", "\n", "            ", "p", "=", "poly", ".", "clone", "(", ")", "\n", "p", "[", "0", ":", ":", "2", "]", "*=", "ratio_w", "\n", "p", "[", "1", ":", ":", "2", "]", "*=", "ratio_h", "\n", "scaled_polygons", ".", "append", "(", "p", ")", "\n", "\n", "", "return", "Polygons", "(", "scaled_polygons", ",", "size", "=", "size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.Polygons.convert": [[127, 138], ["pycocotools.frPyObjects", "pycocotools.merge", "pycocotools.decode", "torch.from_numpy", "p.numpy"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode"], ["", "def", "convert", "(", "self", ",", "mode", ")", ":", "\n", "        ", "width", ",", "height", "=", "self", ".", "size", "\n", "if", "mode", "==", "\"mask\"", ":", "\n", "            ", "rles", "=", "mask_utils", ".", "frPyObjects", "(", "\n", "[", "p", ".", "numpy", "(", ")", "for", "p", "in", "self", ".", "polygons", "]", ",", "height", ",", "width", "\n", ")", "\n", "rle", "=", "mask_utils", ".", "merge", "(", "rles", ")", "\n", "mask", "=", "mask_utils", ".", "decode", "(", "rle", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "# TODO add squeeze?", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.Polygons.__repr__": [[139, 146], ["len"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_polygons={}, \"", ".", "format", "(", "len", "(", "self", ".", "polygons", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={}, \"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "s", "+=", "\"mode={})\"", ".", "format", "(", "self", ".", "mode", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.__init__": [[153, 173], ["isinstance", "isinstance", "segmentation_mask.Polygons"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "polygons", ",", "size", ",", "mode", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            polygons: a list of list of lists of numbers. The first\n                level of the list correspond to individual instances,\n                the second level to all the polygons that compose the\n                object, and the third level to the polygon coordinates.\n        \"\"\"", "\n", "# print(polygons)", "\n", "assert", "isinstance", "(", "polygons", ",", "list", ")", "\n", "if", "not", "isinstance", "(", "polygons", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "polygons", "=", "[", "Polygons", "(", "p", ",", "size", ",", "mode", ")", "for", "p", "in", "polygons", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "polygons", "=", "[", "]", "\n", "self", ".", "mask", "=", "polygons", "\n", "\n", "\n", "\n", "", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode": [[174, 182], ["numpy.zeros", "segm.convert", "segm.convert.numpy"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["", "def", "decode", "(", "self", ",", "h", ",", "w", ")", ":", "\n", "# covnert mask object to binary mask numpy array", "\n", "# RLES = []", "\n", "        ", "binary_mask", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "for", "segm", "in", "self", ".", "polygons", ":", "\n", "            ", "mask", "=", "segm", ".", "convert", "(", "'mask'", ")", "\n", "binary_mask", "=", "binary_mask", "+", "mask", ".", "numpy", "(", ")", "\n", "", "return", "binary_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.transpose": [[184, 194], ["segmentation_mask.SegmentationMask", "NotImplementedError", "flipped.append", "polygon.transpose"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", "FLIP_TOP_BOTTOM", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT and FLIP_TOP_BOTTOM implemented\"", "\n", ")", "\n", "\n", "", "flipped", "=", "[", "]", "\n", "for", "polygon", "in", "self", ".", "polygons", ":", "\n", "            ", "flipped", ".", "append", "(", "polygon", ".", "transpose", "(", "method", ")", ")", "\n", "", "return", "SegmentationMask", "(", "flipped", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.crop": [[195, 210], ["isinstance", "segmentation_mask.SegmentationMask", "segmentation_mask.SegmentationMask", "cropped.append", "cropped.append", "polygon.crop"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.crop"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "polygons", "[", "0", "]", ",", "Polygons", ")", ":", "\n", "            ", "w", ",", "h", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "cropped", "=", "[", "]", "\n", "for", "polygon", "in", "self", ".", "polygons", ":", "\n", "                ", "cropped", ".", "append", "(", "polygon", ".", "crop", "(", "box", ")", ")", "\n", "", "return", "SegmentationMask", "(", "cropped", ",", "size", "=", "(", "w", ",", "h", ")", ",", "mode", "=", "self", ".", "mode", ")", "\n", "", "else", ":", "\n", "            ", "cropped", "=", "[", "]", "\n", "w", ",", "h", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "for", "mask", "in", "self", ".", "mask", ":", "\n", "                ", "mask", "=", "mask", "[", "box", "[", "1", "]", ":", "box", "[", "3", "]", ",", "box", "[", "0", "]", ":", "box", "[", "2", "]", "]", "\n", "cropped", ".", "append", "(", "mask", ")", "\n", "", "return", "SegmentationMask", "(", "cropped", ",", "size", "=", "(", "w", ",", "h", ")", ",", "mode", "=", "\n", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.resize": [[211, 217], ["segmentation_mask.SegmentationMask", "scaled.append", "polygon.resize"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize"], ["", "", "def", "resize", "(", "self", ",", "size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "scaled", "=", "[", "]", "\n", "\n", "for", "polygon", "in", "self", ".", "polygons", ":", "\n", "            ", "scaled", ".", "append", "(", "polygon", ".", "resize", "(", "size", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "", "return", "SegmentationMask", "(", "scaled", ",", "size", "=", "size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.to": [[218, 220], ["None"], "methods", ["None"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.__getitem__": [[221, 236], ["isinstance", "segmentation_mask.SegmentationMask", "isinstance", "item.tolist.tolist.nonzero", "item.tolist.tolist.tolist", "selected_polygons.append", "item.tolist.tolist.squeeze", "item.tolist.tolist.numel"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "(", "int", ",", "slice", ")", ")", ":", "\n", "            ", "selected_polygons", "=", "[", "self", ".", "polygons", "[", "item", "]", "]", "\n", "", "else", ":", "\n", "# advanced indexing on a single dimension", "\n", "            ", "selected_polygons", "=", "[", "]", "\n", "if", "isinstance", "(", "item", ",", "torch", ".", "Tensor", ")", "and", "item", ".", "dtype", "==", "torch", ".", "uint8", ":", "\n", "                ", "item", "=", "item", ".", "nonzero", "(", ")", "\n", "item", "=", "item", ".", "squeeze", "(", "1", ")", "if", "item", ".", "numel", "(", ")", ">", "0", "else", "item", "\n", "item", "=", "item", ".", "tolist", "(", ")", "\n", "", "for", "i", "in", "item", ":", "\n", "# print(self.polygons[i])", "\n", "\n", "                ", "selected_polygons", ".", "append", "(", "self", ".", "polygons", "[", "i", "]", ")", "\n", "", "", "return", "SegmentationMask", "(", "selected_polygons", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.__iter__": [[239, 241], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "polygons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.__repr__": [[242, 248], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_instances={}, \"", ".", "format", "(", "len", "(", "self", ".", "polygons", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={})\"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.__init__": [[15, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tensors", ",", "image_sizes", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            tensors (tensor)\n            image_sizes (list[tuple[int, int]])\n        \"\"\"", "\n", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "image_sizes", "=", "image_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.to": [[24, 27], ["image_list.ImageList.tensors.to", "image_list.ImageList"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "cast_tensor", "=", "self", ".", "tensors", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "ImageList", "(", "cast_tensor", ",", "self", ".", "image_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.hflip": [[28, 30], ["torch.flip"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.flip"], ["", "def", "hflip", "(", "self", ")", ":", "\n", "        ", "self", ".", "tensors", "=", "torch", ".", "flip", "(", "self", ".", "tensors", ",", "(", "3", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.vflip": [[31, 33], ["torch.flip"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.flip"], ["", "def", "vflip", "(", "self", ")", ":", "\n", "        ", "self", ".", "tensors", "=", "torch", ".", "flip", "(", "self", ".", "tensors", ",", "(", "2", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.flip": [[34, 36], ["torch.flip"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.flip"], ["", "def", "flip", "(", "self", ")", ":", "\n", "        ", "self", ".", "tensors", "=", "torch", ".", "flip", "(", "self", ".", "tensors", ",", "(", "2", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list": [[39, 81], ["isinstance", "isinstance", "isinstance", "image_list.ImageList", "isinstance", "tensors.dim", "tuple", "tensors[].new().zero_", "zip", "image_list.ImageList", "TypeError", "list", "int", "int", "tuple", "pad_img[].copy_", "max", "len", "tensors[].new", "type", "zip", "math.ceil", "math.ceil"], "function", ["None"], ["", "", "def", "to_image_list", "(", "tensors", ",", "size_divisible", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    tensors can be an ImageList, a torch.Tensor or\n    an iterable of Tensors. It can't be a numpy array.\n    When tensors is an iterable of Tensors, it pads\n    the Tensors with zeros so that they have the same\n    shape\n    \"\"\"", "\n", "if", "isinstance", "(", "tensors", ",", "torch", ".", "Tensor", ")", "and", "size_divisible", ">", "0", ":", "\n", "        ", "tensors", "=", "[", "tensors", "]", "\n", "\n", "", "if", "isinstance", "(", "tensors", ",", "ImageList", ")", ":", "\n", "        ", "return", "tensors", "\n", "", "elif", "isinstance", "(", "tensors", ",", "torch", ".", "Tensor", ")", ":", "\n", "# single tensor shape can be inferred", "\n", "        ", "assert", "tensors", ".", "dim", "(", ")", "==", "4", "\n", "image_sizes", "=", "[", "tensor", ".", "shape", "[", "-", "2", ":", "]", "for", "tensor", "in", "tensors", "]", "\n", "return", "ImageList", "(", "tensors", ",", "image_sizes", ")", "\n", "", "elif", "isinstance", "(", "tensors", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "max_size", "=", "tuple", "(", "max", "(", "s", ")", "for", "s", "in", "zip", "(", "*", "[", "img", ".", "shape", "for", "img", "in", "tensors", "]", ")", ")", "\n", "\n", "# TODO Ideally, just remove this and let me model handle arbitrary", "\n", "# input sizs", "\n", "if", "size_divisible", ">", "0", ":", "\n", "            ", "import", "math", "\n", "\n", "stride", "=", "size_divisible", "\n", "max_size", "=", "list", "(", "max_size", ")", "\n", "max_size", "[", "1", "]", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "[", "1", "]", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "[", "2", "]", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "[", "2", "]", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "=", "tuple", "(", "max_size", ")", "\n", "\n", "", "batch_shape", "=", "(", "len", "(", "tensors", ")", ",", ")", "+", "max_size", "\n", "batched_imgs", "=", "tensors", "[", "0", "]", ".", "new", "(", "*", "batch_shape", ")", ".", "zero_", "(", ")", "\n", "for", "img", ",", "pad_img", "in", "zip", "(", "tensors", ",", "batched_imgs", ")", ":", "\n", "            ", "pad_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", ".", "copy_", "(", "img", ")", "\n", "\n", "", "image_sizes", "=", "[", "im", ".", "shape", "[", "-", "2", ":", "]", "for", "im", "in", "tensors", "]", "\n", "\n", "return", "ImageList", "(", "batched_imgs", ",", "image_sizes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unsupported type for to_image_list: {}\"", ".", "format", "(", "type", "(", "tensors", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.cat_image_list": [[83, 91], ["torch.cat", "image_list.ImageList"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "", "def", "cat_image_list", "(", "listofimagelist", ")", ":", "\n", "    ", "tensors", "=", "[", "f", ".", "tensors", "for", "f", "in", "listofimagelist", "]", "\n", "tensors", "=", "torch", ".", "cat", "(", "tensors", ")", "\n", "sizes", "=", "[", "f", ".", "image_sizes", "for", "f", "in", "listofimagelist", "]", "\n", "# flatten", "\n", "size", "=", "[", "item", "for", "sub", "in", "sizes", "for", "item", "in", "sub", "]", "\n", "imagelist", "=", "ImageList", "(", "tensors", ",", "size", ")", "\n", "return", "imagelist", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.__init__": [[19, 39], ["torch.as_tensor", "isinstance", "torch.device", "torch.as_tensor.ndimension", "ValueError", "torch.as_tensor.size", "ValueError", "ValueError", "torch.as_tensor.ndimension", "torch.as_tensor.size"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bbox", ",", "image_size", ",", "mode", "=", "\"xyxy\"", ")", ":", "\n", "        ", "device", "=", "bbox", ".", "device", "if", "isinstance", "(", "bbox", ",", "torch", ".", "Tensor", ")", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "bbox", "=", "torch", ".", "as_tensor", "(", "bbox", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "if", "bbox", ".", "ndimension", "(", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"bbox should have 2 dimensions, got {}\"", ".", "format", "(", "bbox", ".", "ndimension", "(", ")", ")", "\n", ")", "\n", "", "if", "bbox", ".", "size", "(", "-", "1", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"last dimenion of bbox should have a \"", "\n", "\"size of 4, got {}\"", ".", "format", "(", "bbox", ".", "size", "(", "-", "1", ")", ")", "\n", ")", "\n", "", "if", "mode", "not", "in", "(", "\"xyxy\"", ",", "\"xywh\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode should be 'xyxy' or 'xywh'\"", ")", "\n", "\n", "", "self", ".", "bbox", "=", "bbox", "\n", "self", ".", "size", "=", "image_size", "# (image_width, image_height)", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "extra_fields", "=", "{", "}", "\n", "self", ".", "number", "=", "bbox", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field": [[40, 42], ["None"], "methods", ["None"], ["", "def", "add_field", "(", "self", ",", "field", ",", "field_data", ")", ":", "\n", "        ", "self", ".", "extra_fields", "[", "field", "]", "=", "field_data", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field": [[43, 45], ["None"], "methods", ["None"], ["", "def", "get_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "self", ".", "extra_fields", "[", "field", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.has_field": [[46, 48], ["None"], "methods", ["None"], ["", "def", "has_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "field", "in", "self", ".", "extra_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.remove_field": [[49, 51], ["None"], "methods", ["None"], ["", "def", "remove_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "del", "self", ".", "extra_fields", "[", "field", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.fields": [[52, 54], ["list", "bounding_box.BoxList.extra_fields.keys"], "methods", ["None"], ["", "def", "fields", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "extra_fields", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList._copy_extra_fields": [[55, 58], ["bbox.extra_fields.items"], "methods", ["None"], ["", "def", "_copy_extra_fields", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "bbox", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "extra_fields", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert": [[59, 78], ["bounding_box.BoxList._split_into_xyxy", "bounding_box.BoxList._copy_extra_fields", "ValueError", "torch.cat", "bounding_box.BoxList", "torch.cat", "bounding_box.BoxList"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList._copy_extra_fields", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "", "def", "convert", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "not", "in", "(", "\"xyxy\"", ",", "\"xywh\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode should be 'xyxy' or 'xywh'\"", ")", "\n", "", "if", "mode", "==", "self", ".", "mode", ":", "\n", "            ", "return", "self", "\n", "# we only have two modes, so don't need to check", "\n", "# self.mode", "\n", "", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "if", "mode", "==", "\"xyxy\"", ":", "\n", "            ", "bbox", "=", "torch", ".", "cat", "(", "(", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", ",", "dim", "=", "-", "1", ")", "\n", "bbox", "=", "BoxList", "(", "bbox", ",", "self", ".", "size", ",", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "bbox", "=", "torch", ".", "cat", "(", "\n", "(", "xmin", ",", "ymin", ",", "xmax", "-", "xmin", "+", "TO_REMOVE", ",", "ymax", "-", "ymin", "+", "TO_REMOVE", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "bbox", ",", "self", ".", "size", ",", "mode", "=", "mode", ")", "\n", "", "bbox", ".", "_copy_extra_fields", "(", "self", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList._split_into_xyxy": [[79, 94], ["bounding_box.BoxList.bbox.split", "bounding_box.BoxList.bbox.split", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split"], ["", "def", "_split_into_xyxy", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"xyxy\"", ":", "\n", "            ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "bbox", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "return", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "\n", "", "elif", "self", ".", "mode", "==", "\"xywh\"", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "xmin", ",", "ymin", ",", "w", ",", "h", "=", "self", ".", "bbox", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "return", "(", "\n", "xmin", ",", "\n", "ymin", ",", "\n", "xmin", "+", "(", "w", "-", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", ",", "\n", "ymin", "+", "(", "h", "-", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Should not be here\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize": [[95, 132], ["tuple", "bounding_box.BoxList._split_into_xyxy", "torch.cat", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.convert", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.add_field", "bounding_box.BoxList.add_field", "isinstance", "v.resize.resize.resize", "float", "float", "zip", "isinstance", "v.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize"], ["", "", "def", "resize", "(", "self", ",", "size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Returns a resized copy of this bounding box\n\n        :param size: The requested size in pixels, as a 2-tuple:\n            (width, height).\n        \"\"\"", "\n", "\n", "ratios", "=", "tuple", "(", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "size", ",", "self", ".", "size", ")", ")", "\n", "if", "ratios", "[", "0", "]", "==", "ratios", "[", "1", "]", ":", "\n", "            ", "ratio", "=", "ratios", "[", "0", "]", "\n", "scaled_box", "=", "self", ".", "bbox", "*", "ratio", "\n", "bbox", "=", "BoxList", "(", "scaled_box", ",", "size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "# bbox._copy_extra_fields(self)", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "v", "=", "v", ".", "resize", "(", "size", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "bbox", "\n", "\n", "", "ratio_width", ",", "ratio_height", "=", "ratios", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "scaled_xmin", "=", "xmin", "*", "ratio_width", "\n", "scaled_xmax", "=", "xmax", "*", "ratio_width", "\n", "scaled_ymin", "=", "ymin", "*", "ratio_height", "\n", "scaled_ymax", "=", "ymax", "*", "ratio_height", "\n", "scaled_box", "=", "torch", ".", "cat", "(", "\n", "(", "scaled_xmin", ",", "scaled_ymin", ",", "scaled_xmax", ",", "scaled_ymax", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "scaled_box", ",", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# bbox._copy_extra_fields(self)", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "resize", "(", "size", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "\n", "", "return", "bbox", ".", "convert", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose": [[133, 170], ["bounding_box.BoxList._split_into_xyxy", "torch.cat", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.convert", "NotImplementedError", "bounding_box.BoxList.add_field", "isinstance", "v.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "\"\"\"\n        Transpose bounding box (flip or rotate in 90 degree steps)\n        :param method: One of :py:attr:`PIL.Image.FLIP_LEFT_RIGHT`,\n          :py:attr:`PIL.Image.FLIP_TOP_BOTTOM`, :py:attr:`PIL.Image.ROTATE_90`,\n          :py:attr:`PIL.Image.ROTATE_180`, :py:attr:`PIL.Image.ROTATE_270`,\n          :py:attr:`PIL.Image.TRANSPOSE` or :py:attr:`PIL.Image.TRANSVERSE`.\n        \"\"\"", "\n", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", "FLIP_TOP_BOTTOM", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT and FLIP_TOP_BOTTOM implemented\"", "\n", ")", "\n", "\n", "", "image_width", ",", "image_height", "=", "self", ".", "size", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "if", "method", "==", "FLIP_LEFT_RIGHT", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "transposed_xmin", "=", "image_width", "-", "xmax", "-", "TO_REMOVE", "\n", "transposed_xmax", "=", "image_width", "-", "xmin", "-", "TO_REMOVE", "\n", "transposed_ymin", "=", "ymin", "\n", "transposed_ymax", "=", "ymax", "\n", "", "elif", "method", "==", "FLIP_TOP_BOTTOM", ":", "\n", "            ", "transposed_xmin", "=", "xmin", "\n", "transposed_xmax", "=", "xmax", "\n", "transposed_ymin", "=", "image_height", "-", "ymax", "\n", "transposed_ymax", "=", "image_height", "-", "ymin", "\n", "\n", "", "transposed_boxes", "=", "torch", ".", "cat", "(", "\n", "(", "transposed_xmin", ",", "transposed_ymin", ",", "transposed_xmax", ",", "transposed_ymax", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "transposed_boxes", ",", "self", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# bbox._copy_extra_fields(self)", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "transpose", "(", "method", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "bbox", ".", "convert", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.crop": [[171, 198], ["bounding_box.BoxList._split_into_xyxy", "torch.cat", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.convert", "bounding_box.BoxList.add_field", "isinstance", "v.crop.crop.crop"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.crop"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "\"\"\"\n        Cropss a rectangular region from this bounding box. The box is a\n        4-tuple defining the left, upper, right, and lower pixel\n        coordinate.\n        \"\"\"", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "w", ",", "h", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "cropped_xmin", "=", "(", "xmin", "-", "box", "[", "0", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "cropped_ymin", "=", "(", "ymin", "-", "box", "[", "1", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "cropped_xmax", "=", "(", "xmax", "-", "box", "[", "0", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "cropped_ymax", "=", "(", "ymax", "-", "box", "[", "1", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "\n", "# TODO should I filter empty boxes here?", "\n", "if", "False", ":", "\n", "            ", "is_empty", "=", "(", "cropped_xmin", "==", "cropped_xmax", ")", "|", "(", "cropped_ymin", "==", "cropped_ymax", ")", "\n", "\n", "", "cropped_box", "=", "torch", ".", "cat", "(", "\n", "(", "cropped_xmin", ",", "cropped_ymin", ",", "cropped_xmax", ",", "cropped_ymax", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "cropped_box", ",", "(", "w", ",", "h", ")", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# bbox._copy_extra_fields(self)", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "crop", "(", "box", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "bbox", ".", "convert", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to": [[201, 208], ["bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.bbox.to", "hasattr", "bounding_box.BoxList.add_field", "v.to.to.to"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", ".", "to", "(", "device", ")", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "\"to\"", ")", ":", "\n", "                ", "v", "=", "v", ".", "to", "(", "device", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.__getitem__": [[209, 214], ["bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.add_field"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", "[", "item", "]", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "bbox", ".", "add_field", "(", "k", ",", "v", "[", "item", "]", ")", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.__len__": [[215, 217], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bbox", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.remove": [[219, 226], ["set", "list", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "range", "bounding_box.BoxList.add_field", "len", "set"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["", "def", "remove", "(", "self", ",", "item", ")", ":", "\n", "        ", "total_index", "=", "set", "(", "range", "(", "len", "(", "self", ".", "bbox", ")", ")", ")", "\n", "remain", "=", "list", "(", "total_index", "-", "set", "(", "item", ")", ")", "\n", "bbox", "=", "BoxList", "(", "self", ".", "bbox", "[", "remain", "]", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "bbox", ".", "add_field", "(", "k", ",", "v", "[", "remain", "]", ")", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.clip_to_image": [[228, 239], ["bounding_box.BoxList.bbox[].clamp_", "bounding_box.BoxList.bbox[].clamp_", "bounding_box.BoxList.bbox[].clamp_", "bounding_box.BoxList.bbox[].clamp_"], "methods", ["None"], ["", "def", "clip_to_image", "(", "self", ",", "remove_empty", "=", "True", ")", ":", "\n", "        ", "TO_REMOVE", "=", "1", "\n", "self", ".", "bbox", "[", ":", ",", "0", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "0", "]", "-", "TO_REMOVE", ")", "\n", "self", ".", "bbox", "[", ":", ",", "1", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "1", "]", "-", "TO_REMOVE", ")", "\n", "self", ".", "bbox", "[", ":", ",", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "0", "]", "-", "TO_REMOVE", ")", "\n", "self", ".", "bbox", "[", ":", ",", "3", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "1", "]", "-", "TO_REMOVE", ")", "\n", "if", "remove_empty", ":", "\n", "            ", "box", "=", "self", ".", "bbox", "\n", "keep", "=", "(", "box", "[", ":", ",", "3", "]", ">", "box", "[", ":", ",", "1", "]", ")", "&", "(", "box", "[", ":", ",", "2", "]", ">", "box", "[", ":", ",", "0", "]", ")", "\n", "return", "self", "[", "keep", "]", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.area": [[240, 251], ["RuntimeError"], "methods", ["None"], ["", "def", "area", "(", "self", ")", ":", "\n", "        ", "box", "=", "self", ".", "bbox", "\n", "if", "self", ".", "mode", "==", "\"xyxy\"", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "area", "=", "(", "box", "[", ":", ",", "2", "]", "-", "box", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "box", "[", ":", ",", "3", "]", "-", "box", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"xywh\"", ":", "\n", "            ", "area", "=", "box", "[", ":", ",", "2", "]", "*", "box", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Should not be here\"", ")", "\n", "\n", "", "return", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.copy_with_fields": [[252, 259], ["bounding_box.BoxList", "isinstance", "bounding_box.BoxList.add_field", "bounding_box.BoxList.get_field"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "copy_with_fields", "(", "self", ",", "fields", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "if", "not", "isinstance", "(", "fields", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "fields", "=", "[", "fields", "]", "\n", "", "for", "field", "in", "fields", ":", "\n", "            ", "bbox", ".", "add_field", "(", "field", ",", "self", ".", "get_field", "(", "field", ")", ")", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.__repr__": [[260, 267], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_boxes={}, \"", ".", "format", "(", "len", "(", "self", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={}, \"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "s", "+=", "\"mode={})\"", ".", "format", "(", "self", ".", "mode", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_nms": [[9, 36], ["boxlist.convert.convert", "boxlist.convert.get_field", "boxes.to.to", "score.to.to", "maskrcnn_benchmark.layers.nms", "keep.to.to", "boxlist.convert.convert"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["def", "boxlist_nms", "(", "boxlist", ",", "nms_thresh", ",", "max_proposals", "=", "-", "1", ",", "score_field", "=", "\"score\"", ")", ":", "\n", "    ", "\"\"\"\n    Performs non-maximum suppression on a boxlist, with scores specified\n    in a boxlist field via score_field.\n\n    Arguments:\n        boxlist(BoxList)\n        nms_thresh (float)\n        max_proposals (int): if > 0, then only the top max_proposals are kept\n            after non-maxium suppression\n        score_field (str)\n    \"\"\"", "\n", "if", "nms_thresh", "<=", "0", ":", "\n", "        ", "return", "boxlist", "\n", "", "mode", "=", "boxlist", ".", "mode", "\n", "boxlist", "=", "boxlist", ".", "convert", "(", "\"xyxy\"", ")", "\n", "boxes", "=", "boxlist", ".", "bbox", "\n", "score", "=", "boxlist", ".", "get_field", "(", "score_field", ")", "\n", "# this nms can only run on cuda:0", "\n", "boxes", "=", "boxes", ".", "to", "(", "'cuda:0'", ")", "\n", "score", "=", "score", ".", "to", "(", "'cuda:0'", ")", "\n", "keep", "=", "_box_nms", "(", "boxes", ",", "score", ",", "nms_thresh", ")", "\n", "keep", "=", "keep", ".", "to", "(", "boxlist", ".", "bbox", ".", "device", ")", "\n", "if", "max_proposals", ">", "0", ":", "\n", "        ", "keep", "=", "keep", "[", ":", "max_proposals", "]", "\n", "", "boxlist", "=", "boxlist", "[", "keep", "]", "\n", "return", "boxlist", ".", "convert", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.remove_small_boxes": [[38, 53], ["xywh_boxes.unbind", "boxlist.convert"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["", "def", "remove_small_boxes", "(", "boxlist", ",", "min_size", ")", ":", "\n", "    ", "\"\"\"\n    Only keep boxes with both sides >= min_size\n\n    Arguments:\n        boxlist (Boxlist)\n        min_size (int)\n    \"\"\"", "\n", "# TODO maybe add an API for querying the ws / hs", "\n", "xywh_boxes", "=", "boxlist", ".", "convert", "(", "\"xywh\"", ")", ".", "bbox", "\n", "_", ",", "_", ",", "ws", ",", "hs", "=", "xywh_boxes", ".", "unbind", "(", "dim", "=", "1", ")", "\n", "keep", "=", "(", "\n", "(", "ws", ">=", "min_size", ")", "&", "(", "hs", ">=", "min_size", ")", "\n", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "return", "boxlist", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou": [[57, 93], ["len", "len", "boxlist1.area", "boxlist2.area", "torch.max", "torch.min", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.area", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.area"], ["", "def", "boxlist_iou", "(", "boxlist1", ",", "boxlist2", ")", ":", "\n", "    ", "\"\"\"Compute the intersection over union of two set of boxes.\n    The box order must be (xmin, ymin, xmax, ymax).\n\n    Arguments:\n      box1: (BoxList) bounding boxes, sized [N,4].\n      box2: (BoxList) bounding boxes, sized [M,4].\n\n    Returns:\n      (tensor) iou, sized [N,M].\n\n    Reference:\n      https://github.com/chainer/chainercv/blob/master/chainercv/utils/bbox/bbox_iou.py\n    \"\"\"", "\n", "if", "boxlist1", ".", "size", "!=", "boxlist2", ".", "size", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"boxlists should have same image size, got {}, {}\"", ".", "format", "(", "boxlist1", ",", "boxlist2", ")", ")", "\n", "\n", "", "N", "=", "len", "(", "boxlist1", ")", "\n", "M", "=", "len", "(", "boxlist2", ")", "\n", "\n", "area1", "=", "boxlist1", ".", "area", "(", ")", "\n", "area2", "=", "boxlist2", ".", "area", "(", ")", "\n", "\n", "box1", ",", "box2", "=", "boxlist1", ".", "bbox", ",", "boxlist2", ".", "bbox", "\n", "\n", "lt", "=", "torch", ".", "max", "(", "box1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "box2", "[", ":", ",", ":", "2", "]", ")", "# [N,M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "box1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "box2", "[", ":", ",", "2", ":", "]", ")", "# [N,M,2]", "\n", "\n", "TO_REMOVE", "=", "1", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "\n", "iou", "=", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops._cat": [[96, 104], ["isinstance", "torch.cat", "len"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat"], ["", "def", "_cat", "(", "tensors", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Efficient version of torch.cat that avoids a copy if there is only a single element in a list\n    \"\"\"", "\n", "assert", "isinstance", "(", "tensors", ",", "(", "list", ",", "tuple", ")", ")", "\n", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "return", "tensors", "[", "0", "]", "\n", "", "return", "torch", ".", "cat", "(", "tensors", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist": [[106, 135], ["isinstance", "all", "all", "all", "set", "all", "bounding_box.BoxList", "bboxes[].fields", "boxlist_ops._cat", "boxlist_ops._cat", "bounding_box.BoxList.add_field", "isinstance", "set", "bbox.get_field", "bbox.fields"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops._cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops._cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.fields"], ["", "def", "cat_boxlist", "(", "bboxes", ")", ":", "\n", "    ", "\"\"\"\n    Concatenates a list of BoxList (having the same image size) into a\n    single BoxList *WITHOUT* segment mask field!\n    Arguments:\n        bboxes (list[BoxList])\n    \"\"\"", "\n", "assert", "isinstance", "(", "bboxes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "bbox", ",", "BoxList", ")", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "size", "=", "bboxes", "[", "0", "]", ".", "size", "\n", "assert", "all", "(", "bbox", ".", "size", "==", "size", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "mode", "=", "bboxes", "[", "0", "]", ".", "mode", "\n", "assert", "all", "(", "bbox", ".", "mode", "==", "mode", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "fields", "=", "set", "(", "bboxes", "[", "0", "]", ".", "fields", "(", ")", ")", "\n", "assert", "all", "(", "set", "(", "bbox", ".", "fields", "(", ")", ")", "==", "fields", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "fields", "=", "[", "f", "for", "f", "in", "fields", "if", "f", "!=", "'mask'", "]", "\n", "\n", "\n", "cat_boxes", "=", "BoxList", "(", "_cat", "(", "[", "bbox", ".", "bbox", "for", "bbox", "in", "bboxes", "]", ",", "dim", "=", "0", ")", ",", "size", ",", "mode", ")", "\n", "\n", "for", "field", "in", "fields", ":", "\n", "        ", "data", "=", "_cat", "(", "[", "bbox", ".", "get_field", "(", "field", ")", "for", "bbox", "in", "bboxes", "]", ",", "dim", "=", "0", ")", "\n", "cat_boxes", ".", "add_field", "(", "field", ",", "data", ")", "\n", "\n", "", "return", "cat_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.cat_boxlist_with_extra_fields": [[138, 164], ["isinstance", "all", "all", "all", "set", "all", "bounding_box.BoxList", "bboxes[].fields", "boxlist_ops._cat", "boxlist_ops._cat", "bounding_box.BoxList.add_field", "isinstance", "set", "bbox.get_field", "bbox.fields"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops._cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops._cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.fields"], ["", "def", "cat_boxlist_with_extra_fields", "(", "bboxes", ")", ":", "\n", "    ", "\"\"\"\n    Concatenates a list of BoxList (having the same image size) into a\n    single BoxList\n    Arguments:\n        bboxes (list[BoxList])\n    \"\"\"", "\n", "assert", "isinstance", "(", "bboxes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "bbox", ",", "BoxList", ")", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "size", "=", "bboxes", "[", "0", "]", ".", "size", "\n", "assert", "all", "(", "bbox", ".", "size", "==", "size", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "mode", "=", "bboxes", "[", "0", "]", ".", "mode", "\n", "assert", "all", "(", "bbox", ".", "mode", "==", "mode", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "fields", "=", "set", "(", "bboxes", "[", "0", "]", ".", "fields", "(", ")", ")", "\n", "assert", "all", "(", "set", "(", "bbox", ".", "fields", "(", ")", ")", "==", "fields", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "cat_boxes", "=", "BoxList", "(", "_cat", "(", "[", "bbox", ".", "bbox", "for", "bbox", "in", "bboxes", "]", ",", "dim", "=", "0", ")", ",", "size", ",", "mode", ")", "\n", "\n", "for", "field", "in", "fields", ":", "\n", "        ", "data", "=", "_cat", "(", "[", "bbox", ".", "get_field", "(", "field", ")", "for", "bbox", "in", "bboxes", "]", ",", "dim", "=", "0", ")", "\n", "cat_boxes", ".", "add_field", "(", "field", ",", "data", ")", "\n", "\n", "", "return", "cat_boxes", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.DatasetCatalog.get": [[113, 175], ["dict", "dict", "dict", "dict", "os.path.join", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "dict", "dict", "RuntimeError"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "get", "(", "name", ",", "aug_number", "=", "3", ",", "syn_mt", "=", "True", ")", ":", "\n", "        ", "if", "\"coco\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"img_dir\"", "]", ")", ",", "\n", "ann_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"ann_file\"", "]", ")", ",", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"COCODataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"voc\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "split", "=", "attrs", "[", "\"split\"", "]", ",", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"PascalVOCDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"papnuclei_source\"", "in", "name", ":", "\n", "            ", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "root", "=", "attrs", "[", "\"root\"", "]", ",", "\n", "annFile", "=", "attrs", "[", "'annFile'", "]", ",", "\n", "split", "=", "attrs", "[", "'split'", "]", ",", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"PapNucleiSourceDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"papnuclei_no_label\"", "in", "name", ":", "\n", "            ", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "root", "=", "attrs", "[", "\"root\"", "]", ",", "\n", "annFile", "=", "attrs", "[", "'annFile'", "]", ",", "\n", "split", "=", "attrs", "[", "'split'", "]", ",", "\n", "aug_k", "=", "aug_number", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"PapNucleiUnlabelDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "\n", "", "elif", "\"pap\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "root", "=", "attrs", "[", "\"root\"", "]", ",", "\n", "annFile", "=", "attrs", "[", "'annFile'", "]", ",", "\n", "split", "=", "attrs", "[", "'split'", "]", ",", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"PapNucleiDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Dataset not available: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get": [[197, 204], ["name.startswith", "name.startswith", "RuntimeError", "paths_catalog.ModelCatalog.get_c2_detectron_12_2017_baselines", "paths_catalog.ModelCatalog.get_c2_imagenet_pretrained"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get_c2_detectron_12_2017_baselines", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get_c2_imagenet_pretrained"], ["@", "staticmethod", "\n", "def", "get", "(", "name", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "\"Caffe2Detectron/COCO\"", ")", ":", "\n", "            ", "return", "ModelCatalog", ".", "get_c2_detectron_12_2017_baselines", "(", "name", ")", "\n", "", "if", "name", ".", "startswith", "(", "\"ImageNetPretrained\"", ")", ":", "\n", "            ", "return", "ModelCatalog", ".", "get_c2_imagenet_pretrained", "(", "name", ")", "\n", "", "raise", "RuntimeError", "(", "\"model not present in the catalog {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get_c2_imagenet_pretrained": [[205, 212], ["len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_c2_imagenet_pretrained", "(", "name", ")", ":", "\n", "        ", "prefix", "=", "ModelCatalog", ".", "S3_C2_DETECTRON_URL", "\n", "name", "=", "name", "[", "len", "(", "\"ImageNetPretrained/\"", ")", ":", "]", "\n", "name", "=", "ModelCatalog", ".", "C2_IMAGENET_MODELS", "[", "name", "]", "\n", "url", "=", "\"/\"", ".", "join", "(", "[", "prefix", ",", "name", "]", ")", "\n", "return", "url", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get_c2_detectron_12_2017_baselines": [[213, 230], ["name.split", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split"], ["", "@", "staticmethod", "\n", "def", "get_c2_detectron_12_2017_baselines", "(", "name", ")", ":", "\n", "# Detectron C2 models are stored following the structure", "\n", "# prefix/<model_id>/2012_2017_baselines/<model_name>.yaml.<signature>/suffix", "\n", "# we use as identifiers in the catalog Caffe2Detectron/COCO/<model_id>/<model_name>", "\n", "        ", "prefix", "=", "ModelCatalog", ".", "S3_C2_DETECTRON_URL", "\n", "suffix", "=", "ModelCatalog", ".", "C2_DETECTRON_SUFFIX", "\n", "# remove identification prefix", "\n", "name", "=", "name", "[", "len", "(", "\"Caffe2Detectron/COCO/\"", ")", ":", "]", "\n", "# split in <model_id> and <model_name>", "\n", "model_id", ",", "model_name", "=", "name", ".", "split", "(", "\"/\"", ")", "\n", "# parsing to make it match the url address from the Caffe2 models", "\n", "model_name", "=", "\"{}.yaml\"", ".", "format", "(", "model_name", ")", "\n", "signature", "=", "ModelCatalog", ".", "C2_DETECTRON_MODELS", "[", "name", "]", "\n", "unique_name", "=", "\".\"", ".", "join", "(", "[", "model_name", ",", "signature", "]", ")", "\n", "url", "=", "\"/\"", ".", "join", "(", "[", "prefix", ",", "model_id", ",", "\"12_2017_baselines\"", ",", "unique_name", ",", "suffix", "]", ")", "\n", "return", "url", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers._utils._load_C_extensions": [[14, 36], ["os.path.dirname", "os.path.dirname", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "load_ext", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "torch.cuda.is_available", "source.extend", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend"], ["", "def", "_load_C_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "this_dir", ")", "\n", "this_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"csrc\"", ")", "\n", "\n", "main_file", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"*.cpp\"", ")", ")", "\n", "source_cpu", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"cpu\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"cuda\"", ",", "\"*.cu\"", ")", ")", "\n", "\n", "source", "=", "main_file", "+", "source_cpu", "\n", "\n", "extra_cflags", "=", "[", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ":", "\n", "        ", "source", ".", "extend", "(", "source_cuda", ")", "\n", "extra_cflags", "=", "[", "\"-DWITH_CUDA\"", "]", "\n", "", "source", "=", "[", "os", ".", "path", ".", "join", "(", "this_dir", ",", "s", ")", "for", "s", "in", "source", "]", "\n", "extra_include_paths", "=", "[", "this_dir", "]", "\n", "return", "load_ext", "(", "\n", "\"torchvision\"", ",", "\n", "source", ",", "\n", "extra_cflags", "=", "extra_cflags", ",", "\n", "extra_include_paths", "=", "extra_include_paths", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.l2_loss.l2_loss": [[3, 15], ["torch.nonzero().squeeze", "loss.sum", "torch.abs", "torch.nonzero"], "function", ["None"], ["def", "l2_loss", "(", "input", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    very similar to the smooth_l1_loss from pytorch, but with\n    the extra beta parameter\n    \"\"\"", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "target", ">", "0.0", ")", ".", "squeeze", "(", "1", ")", "\n", "if", "pos_inds", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "cond", "=", "torch", ".", "abs", "(", "input", "[", "pos_inds", "]", "-", "target", "[", "pos_inds", "]", ")", "\n", "loss", "=", "0.5", "*", "cond", "**", "2", "/", "pos_inds", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "loss", "=", "input", "*", "0.0", "\n", "", "return", "loss", ".", "sum", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.roi_pool._ROIPool.forward": [[12, 22], ["torch.nn.modules.utils._pair", "input.size", "maskrcnn_benchmark._C.roi_pool_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ")", ":", "\n", "        ", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", ",", "argmax", "=", "_C", ".", "roi_pool_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", "\n", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "roi", ",", "argmax", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.roi_pool._ROIPool.backward": [[23, 44], ["maskrcnn_benchmark._C.roi_pool_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "rois", ",", "argmax", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "roi_pool_backward", "(", "\n", "grad_output", ",", "\n", "input", ",", "\n", "rois", ",", "\n", "argmax", ",", "\n", "spatial_scale", ",", "\n", "output_size", "[", "0", "]", ",", "\n", "output_size", "[", "1", "]", ",", "\n", "bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.roi_pool.ROIPool.__init__": [[50, 54], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "spatial_scale", ")", ":", "\n", "        ", "super", "(", "ROIPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.roi_pool.ROIPool.forward": [[55, 57], ["roi_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "        ", "return", "roi_pool", "(", "input", ",", "rois", ",", "self", ".", "output_size", ",", "self", ".", "spatial_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.roi_pool.ROIPool.__repr__": [[58, 64], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"output_size=\"", "+", "str", "(", "self", ".", "output_size", ")", "\n", "tmpstr", "+=", "\", spatial_scale=\"", "+", "str", "(", "self", ".", "spatial_scale", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.batch_norm.FrozenBatchNorm2d.__init__": [[12, 18], ["torch.nn.Module.__init__", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.zeros", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.batch_norm.FrozenBatchNorm2d.forward": [[19, 25], ["scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape", "batch_norm.FrozenBatchNorm2d.running_var.rsqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "scale", "=", "self", ".", "weight", "*", "self", ".", "running_var", ".", "rsqrt", "(", ")", "\n", "bias", "=", "self", ".", "bias", "-", "self", ".", "running_mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.roi_align._ROIAlign.forward": [[12, 23], ["ctx.save_for_backward", "torch.nn.modules.utils._pair", "input.size", "maskrcnn_benchmark._C.roi_align_forward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "roi", ")", "\n", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "_C", ".", "roi_align_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", ",", "sampling_ratio", "\n", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.roi_align._ROIAlign.backward": [[24, 45], ["maskrcnn_benchmark._C.roi_align_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "rois", ",", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "sampling_ratio", "=", "ctx", ".", "sampling_ratio", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "roi_align_backward", "(", "\n", "grad_output", ",", "\n", "rois", ",", "\n", "spatial_scale", ",", "\n", "output_size", "[", "0", "]", ",", "\n", "output_size", "[", "1", "]", ",", "\n", "bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", "sampling_ratio", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.roi_align.ROIAlign.__init__": [[51, 56], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "super", "(", "ROIAlign", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.roi_align.ROIAlign.forward": [[57, 61], ["roi_align"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "return", "roi_align", "(", "input", ",", "rois", ",", "self", ".", "output_size", ",", "\n", "self", ".", "spatial_scale", ",", "self", ".", "sampling_ratio", ")", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.roi_align.ROIAlign.__repr__": [[61, 68], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"output_size=\"", "+", "str", "(", "self", ".", "output_size", ")", "\n", "tmpstr", "+=", "\", spatial_scale=\"", "+", "str", "(", "self", ".", "spatial_scale", ")", "\n", "tmpstr", "+=", "\", sampling_ratio=\"", "+", "str", "(", "self", ".", "sampling_ratio", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc._NewEmptyTensorOp.forward": [[18, 22], ["x.new_empty"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "new_shape", ")", ":", "\n", "        ", "ctx", ".", "shape", "=", "x", ".", "shape", "\n", "return", "x", ".", "new_empty", "(", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc._NewEmptyTensorOp.backward": [[23, 27], ["_NewEmptyTensorOp.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "shape", "=", "ctx", ".", "shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "grad", ",", "shape", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.Conv2d.forward": [[31, 44], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward", "zip"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.ConvTranspose2d.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "Conv2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "+", "2", "*", "p", "-", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", ")", "//", "d", "+", "1", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "weight", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.ConvTranspose2d.forward": [[47, 65], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward", "zip"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.ConvTranspose2d.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "ConvTranspose2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "-", "1", ")", "*", "d", "-", "2", "*", "p", "+", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", "+", "op", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", ",", "op", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "output_padding", ",", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "bias", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.interpolate": [[67, 103], ["tuple", "_NewEmptyTensorOp.apply", "input.numel", "torch.nn.functional.interpolate", "misc.interpolate._check_size_scale_factor"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc.interpolate"], ["", "", "def", "interpolate", "(", "\n", "input", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ",", "mode", "=", "\"nearest\"", ",", "align_corners", "=", "None", "\n", ")", ":", "\n", "    ", "if", "input", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", "\n", ")", "\n", "\n", "", "def", "_check_size_scale_factor", "(", "dim", ")", ":", "\n", "        ", "if", "size", "is", "None", "and", "scale_factor", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"either size or scale_factor should be defined\"", ")", "\n", "", "if", "size", "is", "not", "None", "and", "scale_factor", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"only one of size or scale_factor should be defined\"", ")", "\n", "", "if", "(", "\n", "scale_factor", "is", "not", "None", "\n", "and", "isinstance", "(", "scale_factor", ",", "tuple", ")", "\n", "and", "len", "(", "scale_factor", ")", "!=", "dim", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"scale_factor shape must match input shape. \"", "\n", "\"Input is {}D, scale_factor size is {}\"", ".", "format", "(", "dim", ",", "len", "(", "scale_factor", ")", ")", "\n", ")", "\n", "\n", "", "", "def", "_output_size", "(", "dim", ")", ":", "\n", "        ", "_check_size_scale_factor", "(", "dim", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "            ", "return", "size", "\n", "", "scale_factors", "=", "_ntuple", "(", "dim", ")", "(", "scale_factor", ")", "\n", "# math.floor might return float in py2.7", "\n", "return", "[", "\n", "int", "(", "math", ".", "floor", "(", "input", ".", "size", "(", "i", "+", "2", ")", "*", "scale_factors", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "dim", ")", "\n", "]", "\n", "\n", "", "output_shape", "=", "tuple", "(", "_output_size", "(", "2", ")", ")", "\n", "output_shape", "=", "input", ".", "shape", "[", ":", "-", "2", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "input", ",", "output_shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.smooth_l1_loss.smooth_l1_loss": [[6, 21], ["torch.abs", "torch.where", "torch.where.mean", "torch.where.sum", "torch.where.sum"], "function", ["None"], ["def", "smooth_l1_loss", "(", "input", ",", "target", ",", "beta", "=", "1.", "/", "9", ",", "size_average", "=", "True", ",", "\n", "reduction", "=", "'sum'", ")", ":", "\n", "    ", "\"\"\"\n    very similar to the smooth_l1_loss from pytorch, but with\n    the extra beta parameter\n    \"\"\"", "\n", "n", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "cond", "=", "n", "<", "beta", "\n", "loss", "=", "torch", ".", "where", "(", "cond", ",", "0.5", "*", "n", "**", "2", "/", "beta", ",", "n", "-", "0.5", "*", "beta", ")", "\n", "if", "size_average", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "if", "reduction", "==", "'sum'", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "loss", ".", "sum", "(", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.__init__": [[112, 164], ["object.__init__", "logging.getLogger", "maskrcnn_benchmark.utils.metric_logger.MetricLogger", "len", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_s", ",", "model_t", ",", "data_loader", ",", "optimizer", ",", "\n", "scheduler", ",", "ckpt_s", ",", "ckpt_t", ",", "checkpoint_period", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "MTtrainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.trainer\"", ")", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "self", ".", "max_iter", "=", "len", "(", "data_loader", "[", "'source'", "]", ")", "\n", "self", ".", "start_iter", "=", "0", "\n", "\n", "self", ".", "student", "=", "model_s", "\n", "self", ".", "student_bs", "=", "cfg", ".", "MT", ".", "AUG_S", "\n", "self", ".", "teacher", "=", "model_t", "\n", "self", ".", "teacher_bs", "=", "cfg", ".", "MT", ".", "AUG_K", "\n", "# pdb.set_trace()", "\n", "self", ".", "device_s", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "self", ".", "device_t", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "self", ".", "checkpoint_period", "=", "checkpoint_period", "\n", "self", ".", "ckpt_s", "=", "ckpt_s", "\n", "self", ".", "ckpt_t", "=", "ckpt_t", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "# mt hyperparameter", "\n", "self", ".", "lambda_value", "=", "cfg", ".", "MT", ".", "LAMBDA", "\n", "self", ".", "alpha", "=", "cfg", ".", "MT", ".", "ALPHA", "\n", "self", ".", "alpha_rampup", "=", "cfg", ".", "MT", ".", "ALPHA_RAMPUP", "\n", "self", ".", "rampup_step", "=", "cfg", ".", "MT", ".", "RAMPUP_STEP", "\n", "self", ".", "rampdown_step", "=", "cfg", ".", "MT", ".", "RAMPDOWN_STEP", "\n", "self", ".", "start_mt", "=", "cfg", ".", "MT", ".", "START_MT", "\n", "#loss weight", "\n", "self", ".", "balanced_weight", "=", "{", "\n", "'mt_classifier'", ":", "(", "cfg", ".", "MT", ".", "CLS_LOSS", ")", ",", "\n", "'nms_loss'", ":", "cfg", ".", "MODEL", ".", "RELATION_NMS", ".", "LOSS", ",", "\n", "'mt_fg_loss'", ":", "cfg", ".", "MT", ".", "FG_HINT", ",", "\n", "}", "\n", "\n", "self", ".", "dataloader_s", "=", "data_loader", "[", "'source'", "]", "\n", "if", "self", ".", "cfg", ".", "DATASETS", ".", "NO_LABEL", ":", "\n", "            ", "self", ".", "dataloader_u", "=", "data_loader", "[", "'no_label'", "]", "\n", "", "if", "cfg", ".", "DATASETS", ".", "SYN", ":", "\n", "# todo: add in training", "\n", "            ", "self", ".", "dataloader_syn", "=", "data_loader", "[", "'synthesis'", "]", "\n", "", "self", ".", "n_step_unlabel", "=", "cfg", ".", "MT", ".", "N_STEP_UNLABEL", "\n", "self", ".", "weight_sum_loss", "=", "partial", "(", "weight_sum_losses", ",", "\n", "rampup_length", "\n", "=", "self", ".", "rampup_step", ",", "\n", "rampdown_length", "=", "\n", "self", ".", "rampdown_step", ",", "\n", "total_length", "=", "self", ".", "max_iter", ",", "\n", "l", "=", "self", ".", "lambda_value", ",", "\n", "balanced", "=", "\n", "self", ".", "balanced_weight", ",", "\n", "start_mt", "=", "self", ".", "start_mt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.train": [[165, 230], ["MTtrainer.MTtrainer.student.train", "MTtrainer.MTtrainer.teacher.eval", "time.time", "time.time", "enumerate", "str", "MTtrainer.MTtrainer.logger.info", "MTtrainer.MTtrainer.forward_source", "MTtrainer.MTtrainer.scheduler.step", "MTtrainer.MTtrainer.weight_sum_loss", "sum", "MTtrainer.reduce_loss_dict", "sum", "MTtrainer.MTtrainer.meters.update", "MTtrainer.MTtrainer.optimizer.zero_grad", "sum.backward", "MTtrainer.MTtrainer.optimizer.step", "time.time", "MTtrainer.MTtrainer.meters.update", "str", "time.time", "datetime.timedelta", "MTtrainer.MTtrainer.forward_unlabel", "MTtrainer.MTtrainer.update", "MTtrainer.MTtrainer.update_teacher", "time.time", "datetime.timedelta", "MTtrainer.MTtrainer.logger.info", "MTtrainer.MTtrainer.save_model", "MTtrainer.MTtrainer.save_model", "MTtrainer.MTtrainer.meters.delimiter.join().format", "MTtrainer.MTtrainer.items", "reduce_loss_dict.values", "int", "MTtrainer.MTtrainer.meters.delimiter.join", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.train", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.forward_source", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.reduce_loss_dict", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.layers.misc._NewEmptyTensorOp.backward", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.forward_unlabel", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.update_teacher", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.save_model", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.save_model"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "student", ".", "train", "(", ")", "\n", "self", ".", "teacher", ".", "eval", "(", ")", "\n", "start_training_time", "=", "time", ".", "time", "(", ")", "\n", "# pdb.set_trace()", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "iteration", ",", "data_source", "in", "enumerate", "(", "self", ".", "dataloader_s", ",", "self", ".", "start_iter", ")", ":", "\n", "# if iteration>self.start_mt:", "\n", "#     self.checkpoint_period = 50", "\n", "            ", "data_s", ",", "target_s", ",", "_", "=", "data_source", "\n", "loss_dict", "=", "self", ".", "forward_source", "(", "data_s", ",", "target_s", ")", "\n", "if", "iteration", ">", "self", ".", "start_mt", "and", "self", ".", "lambda_value", ">", "0", "and", "self", ".", "cfg", ".", "DATASETS", ".", "NO_LABEL", ":", "\n", "                ", "unlabel_loss_dict", "=", "self", ".", "forward_unlabel", "(", ")", "\n", "loss_dict", ".", "update", "(", "unlabel_loss_dict", ")", "\n", "\n", "# calculate losses", "\n", "", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "losses_dict", "=", "self", ".", "weight_sum_loss", "(", "loss_dict", ",", "iteration", ")", "\n", "losses", "=", "sum", "(", "loss", "for", "k", ",", "loss", "in", "losses_dict", ".", "items", "(", ")", ")", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "# todo add loss weight to different loss", "\n", "loss_dict_reduced", "=", "reduce_loss_dict", "(", "losses_dict", ")", "\n", "losses_reduced", "=", "sum", "(", "\n", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "self", ".", "meters", ".", "update", "(", "loss", "=", "losses_reduced", ",", "**", "loss_dict_reduced", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "# update teacher", "\n", "if", "self", ".", "lambda_value", ">", "0", "and", "iteration", ">", "(", "self", ".", "start_mt", "-", "10", ")", ":", "\n", "                ", "self", ".", "update_teacher", "(", "iteration", "-", "(", "self", ".", "start_mt", "-", "10", ")", ")", "\n", "\n", "", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "meters", ".", "update", "(", "time", "=", "batch_time", ")", "\n", "\n", "eta_seconds", "=", "self", ".", "meters", ".", "time", ".", "global_avg", "*", "(", "self", ".", "max_iter", "-", "iteration", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "iteration", "%", "20", "==", "0", "or", "iteration", "==", "self", ".", "max_iter", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\n", "self", ".", "meters", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "\"eta: {eta}\"", ",", "\n", "\"iter: {iter}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"lr: {lr:.6f}\"", ",", "\n", "\"max mem: {memory:.0f}\"", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "eta", "=", "eta_string", ",", "\n", "iter", "=", "iteration", ",", "\n", "meters", "=", "str", "(", "self", ".", "meters", ")", ",", "\n", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1024.0", "/", "1024.0", ",", "\n", ")", "\n", ")", "\n", "", "if", "iteration", "%", "self", ".", "checkpoint_period", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "iteration", ")", "\n", "", "if", "iteration", "==", "self", ".", "max_iter", ":", "\n", "                ", "self", ".", "save_model", "(", "final", "=", "True", ")", "\n", "", "", "total_training_time", "=", "time", ".", "time", "(", ")", "-", "start_training_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_training_time", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Total training time: {} ({:.4f} s / it)\"", "\n", ".", "format", "(", "total_time_str", ",", "total_training_time", "/", "(", "self", ".", "max_iter", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.save_model": [[231, 240], ["MTtrainer.MTtrainer.ckpt_s.save", "MTtrainer.MTtrainer.ckpt_s.save", "MTtrainer.MTtrainer.ckpt_t.save", "MTtrainer.MTtrainer.ckpt_t.save"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save"], ["", "def", "save_model", "(", "self", ",", "iteration", "=", "0", ",", "final", "=", "False", ")", ":", "\n", "        ", "if", "iteration", ">", "0", "and", "not", "final", ":", "\n", "            ", "self", ".", "ckpt_s", ".", "save", "(", "\"model_{:07d}\"", ".", "format", "(", "iteration", ")", ")", "\n", "if", "iteration", ">", "self", ".", "start_mt", ":", "\n", "                ", "self", ".", "ckpt_t", ".", "save", "(", "\"t_model_{:07d}\"", ".", "format", "(", "iteration", ")", ")", "\n", "", "", "if", "final", ":", "\n", "            ", "self", ".", "ckpt_s", ".", "save", "(", "\"model_final\"", ".", "format", "(", "iteration", ")", ")", "\n", "if", "iteration", ">", "self", ".", "start_mt", ":", "\n", "                ", "self", ".", "ckpt_t", ".", "save", "(", "\"t_model_final\"", ".", "format", "(", "iteration", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.forward_source": [[241, 246], ["image.to.to.to", "MTtrainer.MTtrainer.student", "t.to"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["", "", "", "def", "forward_source", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "image", "=", "image", ".", "to", "(", "self", ".", "device_s", ")", "\n", "target", "=", "[", "t", ".", "to", "(", "self", ".", "device_s", ")", "for", "t", "in", "target", "]", "\n", "losses_dict", "=", "self", ".", "student", "(", "image", ",", "target", ")", "\n", "return", "losses_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.forward_unlabel": [[247, 276], ["range", "MTtrainer.accumulate_loss_dict", "next", "MTtrainer.MTtrainer.student.forward_student", "unlabel_loss_dict.append", "MTtrainer.MTtrainer.optimizer.zero_grad", "iter", "f.to", "s.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "MTtrainer.MTtrainer.teacher.forward_teacher", "MTtrainer.MTtrainer.logger.info"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.accumulate_loss_dict", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.forward_student", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.detector.generalized_rcnn.GeneralizedRCNN.forward_teacher", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info"], ["", "def", "forward_unlabel", "(", "self", ")", ":", "\n", "# image list has N augmented images", "\n", "        ", "unlabel_loss_dict", "=", "[", "]", "\n", "loss_dict", "=", "{", "}", "\n", "for", "_", "in", "range", "(", "self", ".", "n_step_unlabel", ")", ":", "\n", "            ", "data_unlabel", "=", "next", "(", "iter", "(", "self", ".", "dataloader_u", ")", ")", "\n", "data_u_list", ",", "_", "=", "data_unlabel", "\n", "teacher_list", "=", "data_u_list", "[", ":", "self", ".", "teacher_bs", "]", "\n", "student", "=", "data_u_list", "[", "-", "self", ".", "student_bs", ":", "]", "\n", "teacher_list", "=", "[", "f", ".", "to", "(", "self", ".", "device_t", ")", "for", "f", "in", "teacher_list", "]", "\n", "student", "=", "[", "s", ".", "to", "(", "self", ".", "device_s", ")", "for", "s", "in", "student", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "teacher_results", "=", "self", ".", "teacher", ".", "forward_teacher", "(", "\n", "teacher_list", ")", "\n", "", "except", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\n", "'teacher bug, may because no bbox, skip this pair'", ")", "\n", "continue", "\n", "", "", "loss_dict", "=", "self", ".", "student", ".", "forward_student", "(", "student", ",", "\n", "teacher_results", ")", "\n", "unlabel_loss_dict", ".", "append", "(", "loss_dict", ")", "\n", "# average the unlabel_loss", "\n", "", "if", "unlabel_loss_dict", "==", "[", "]", ":", "\n", "# skip this iter", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "return", "loss_dict", "\n", "", "loss_dict", "=", "accumulate_loss_dict", "(", "unlabel_loss_dict", ")", "\n", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.MTtrainer.update_teacher": [[277, 282], ["min", "zip", "MTtrainer.MTtrainer.teacher.parameters", "MTtrainer.MTtrainer.student.parameters", "ema_param.data.mul_().add_", "ema_param.data.mul_"], "methods", ["None"], ["", "def", "update_teacher", "(", "self", ",", "iter", ")", ":", "\n", "        ", "alpha", "=", "min", "(", "1", "-", "1", "/", "(", "iter", "+", "1", ")", ",", "self", ".", "alpha", ")", "\n", "for", "ema_param", ",", "param", "in", "zip", "(", "self", ".", "teacher", ".", "parameters", "(", ")", ",", "\n", "self", ".", "student", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "ema_param", ".", "data", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "1", "-", "alpha", ",", "param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.reduce_loss_dict": [[16, 43], ["maskrcnn_benchmark.utils.comm.get_world_size", "torch.no_grad", "torch.no_grad", "loss_dict.items", "torch.stack", "torch.stack", "torch.reduce", "torch.no_grad", "torch.no_grad", "loss_dict.items", "loss_names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_world_size", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank"], ["def", "reduce_loss_dict", "(", "loss_dict", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the loss dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    loss_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "reduced_losses", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "                ", "reduced_losses", "[", "k", "]", "=", "v", "\n", "", "", "return", "reduced_losses", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_names", "=", "[", "]", "\n", "all_losses", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "            ", "loss_names", ".", "append", "(", "k", ")", "\n", "all_losses", ".", "append", "(", "v", ")", "\n", "", "all_losses", "=", "torch", ".", "stack", "(", "all_losses", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "all_losses", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "all_losses", "/=", "world_size", "\n", "", "reduced_losses", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "loss_names", ",", "all_losses", ")", "}", "\n", "", "return", "reduced_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer._gather_data_from_loaders": [[44, 49], ["None"], "function", ["None"], ["", "def", "_gather_data_from_loaders", "(", "source", ",", "nolabel", ")", ":", "\n", "# (images_s1,targets_s, _) = source", "\n", "    ", "(", "images_s1", ",", "targets_s", ",", "_", ")", "=", "source", "\n", "(", "images_nl_list", ",", "_", ")", "=", "nolabel", "\n", "return", "images_nl_list", ",", "images_s1", ",", "targets_s", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.init_teacher_weight": [[50, 56], ["zip", "model_t.parameters", "model_s.parameters", "ema_param.data.mul_().add_", "ema_param.data.mul_"], "function", ["None"], ["", "def", "init_teacher_weight", "(", "model_s", ",", "model_t", ")", ":", "\n", "\n", "    ", "for", "ema_param", ",", "param", "in", "zip", "(", "model_t", ".", "parameters", "(", ")", ",", "\n", "model_s", ".", "parameters", "(", ")", ")", ":", "\n", "\n", "        ", "ema_param", ".", "data", ".", "mul_", "(", "0.", ")", ".", "add_", "(", "1", ",", "param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.accumulate_loss_dict": [[57, 65], ["collections.Counter", "dict", "dict.keys", "dict.update", "len"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update"], ["", "", "def", "accumulate_loss_dict", "(", "losses", ")", ":", "\n", "    ", "c", "=", "Counter", "(", ")", "\n", "for", "loss", "in", "losses", ":", "\n", "        ", "c", ".", "update", "(", "loss", ")", "\n", "", "c", "=", "dict", "(", "c", ")", "\n", "for", "k", "in", "c", ".", "keys", "(", ")", ":", "\n", "        ", "c", "[", "k", "]", "=", "c", "[", "k", "]", "/", "len", "(", "losses", ")", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.MTtrainer.weight_sum_losses": [[67, 110], ["loss_dict.items", "loss.items", "maskrcnn_benchmark.utils.miscellaneous.sigmoid_rampup", "loss.update", "loss.update", "loss.update", "maskrcnn_benchmark.utils.miscellaneous.sigmoid_rampdown"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.sigmoid_rampup", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.sigmoid_rampdown"], ["", "def", "weight_sum_losses", "(", "loss_dict", ",", "step", ",", "rampup_length", ",", "\n", "rampdown_length", ",", "total_length", ",", "\n", "l", "=", "1", ",", "\n", "balanced", "=", "None", ",", "start_mt", "=", "1000", ")", ":", "\n", "    ", "'''\n    :param loss_dict: losses from model\n    :param step: current iter\n    :param rampup_length: steps for consistency loss start from\n    0 to 1\n    :param rampdown_length: steps for consistency loss from 1 to 0\n    at the end of training\n    :param total_length: training iters\n    :param l: lambda_value to balance supervised and consistency loss\n    :param balanced: the weight for each loss term\n    :param start_mt: start the mean teacher framework when the\n    student model is relative stable.\n    :return:  weighted loss\n\n    loss = sup_loss[i] * balanced[i] + weight(Time) * (consist_loss[\n    j]*balanced[j] )\n\n    '''", "\n", "if", "(", "step", "-", "start_mt", ")", "<", "rampup_length", "and", "(", "step", "-", "start_mt", ")", ">", "0", ":", "\n", "        ", "weight", "=", "l", "*", "sigmoid_rampup", "(", "step", "-", "start_mt", ",", "rampup_length", ")", "\n", "", "elif", "(", "total_length", "-", "step", ")", "<", "rampdown_length", ":", "\n", "        ", "weight", "=", "l", "*", "sigmoid_rampdown", "(", "total_length", "-", "step", ",", "rampup_length", ")", "\n", "", "else", ":", "\n", "        ", "weight", "=", "l", "\n", "# pdb.set_trace()", "\n", "", "loss", "=", "{", "}", "\n", "# pdb.set_trace()", "\n", "for", "k", ",", "v", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'mt'", "in", "k", ":", "\n", "# mean teacher loss", "\n", "            ", "loss", ".", "update", "(", "{", "k", ":", "weight", "*", "v", "}", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "", "", "for", "k", ",", "v", "in", "loss", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "loss", ".", "update", "(", "{", "k", ":", "v", "*", "balanced", "[", "k", "]", "}", ")", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.inference.compute_on_dataset": [[16, 42], ["model.eval", "torch.device", "enumerate", "tqdm.tqdm", "results_dict.update", "images.to.to", "img1.to.to", "img2.to.to", "torch.no_grad", "model", "o.to", "zip"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.to"], ["    ", "\"\"\"\n    Performs post-processing on the outputs of the RPN boxes, before feeding the\n    proposals to the heads\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", "is_teacher", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.inference._accumulate_predictions_from_multiple_gpus": [[44, 68], ["utils.comm.scatter_gather", "list", "utils.comm.is_main_process", "predictions.update", "sorted", "predictions.keys", "len", "logging.getLogger", "logging.getLogger.warning", "pdb.set_trace"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.scatter_gather", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.is_main_process", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update"], ["self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "is_teacher", "=", "is_teacher", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.inference.inference": [[70, 126], ["torch.device", "logging.getLogger", "logging.getLogger.info", "time.time", "inference.compute_on_dataset", "utils.comm.synchronize", "str", "logging.getLogger.info", "inference._accumulate_predictions_from_multiple_gpus", "dict", "maskrcnn_benchmark.data.datasets.evaluation.evaluate", "torch.distributed.is_initialized", "torch.distributed.get_world_size", "time.time", "datetime.timedelta", "utils.comm.is_main_process", "torch.save", "len", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.inference.compute_on_dataset", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.synchronize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.engine.inference._accumulate_predictions_from_multiple_gpus", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.evaluate", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_world_size", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.is_main_process", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save"], ["\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "\n", "box_regression", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "objectness", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "box_regression", "=", "box_regression", ".", "view", "(", "N", ",", "-", "1", ",", "4", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "box_regression", "=", "box_regression", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "# batch_ = batch_idx.expand([N ,pre_nms_top_n])", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "result", "=", "[", "]", "\n", "for", "j", ",", "(", "proposal", ",", "score", ",", "im_shape", ",", "topk_id", ",", ")", "in", "enumerate", "(", "\n", "zip", "(", "\n", "proposals", ",", "objectness", ",", "image_shapes", ",", "topk_idx", ",", ")", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "if", "self", ".", "is_teacher", ":", "\n", "# boxlist.add_field(\"bid\", batch_[j])", "\n", "                ", "boxlist", ".", "add_field", "(", "\"box_reg\"", ",", "box_regression", "[", "j", "]", ")", "\n", "boxlist", ".", "add_field", "(", "\"rpn_topk\"", ",", "topk_id", ")", "\n", "boxlist", ".", "add_field", "(", "\"rpn_ancher_level\"", ",", "torch", ".", "tensor", "(", "[", "i", "]", "\n", "*", "topk_id", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", ")", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.build_dataset": [[19, 69], ["isinstance", "RuntimeError", "dataset_catalog.get", "getattr", "getattr.", "datasets.append", "len", "datasets.ConcatDataset"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.config.paths_catalog.ModelCatalog.get"], ["def", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "dataset_catalog", ",", "\n", "is_train", "=", "True", ",", "gen_fake", "=", "0", ",", "gen_true", "=", "0", ",", "aug_k", "=", "\n", "2", ",", "syn_mt", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Arguments:\n        syn_mt: use mean teacher to train synthesis data\n        dataset_list (list[str]): Contains the names of the datasets, i.e.,\n            coco_2014_trian, coco_2014_val, etc\n        transforms (callable): transforms to apply to each (image, target) sample\n        dataset_catalog (DatasetCatalog): contains the information on how to\n            construct a dataset.\n        is_train (bool): whether to setup the dataset for training or testing\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "dataset_list", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"dataset_list should be a list of strings, got {}\"", ".", "format", "(", "\n", "dataset_list", ")", "\n", ")", "\n", "", "datasets", "=", "[", "]", "\n", "for", "dataset_name", "in", "dataset_list", ":", "\n", "# pdb.set_trace()", "\n", "        ", "data", "=", "dataset_catalog", ".", "get", "(", "dataset_name", ",", "aug_k", ",", "syn_mt", ")", "\n", "factory", "=", "getattr", "(", "D", ",", "data", "[", "\"factory\"", "]", ")", "\n", "args", "=", "data", "[", "\"args\"", "]", "\n", "# for COCODataset, we want to remove images without annotations", "\n", "# during training", "\n", "if", "data", "[", "\"factory\"", "]", "==", "\"COCODataset\"", ":", "\n", "            ", "args", "[", "\"remove_images_without_annotations\"", "]", "=", "is_train", "\n", "", "if", "data", "[", "\"factory\"", "]", "==", "\"PascalVOCDataset\"", ":", "\n", "            ", "args", "[", "\"use_difficult\"", "]", "=", "not", "is_train", "\n", "", "if", "data", "[", "\"factory\"", "]", "in", "[", "\"PapNucleiGenTrueDataset\"", ",", "\n", "'PapNucleiSynDataset'", ",", "\n", "'PapNucleiSynMTDataset'", "]", ":", "\n", "            ", "args", "[", "\"gen_fake\"", "]", "=", "gen_fake", "\n", "args", "[", "\"gen_true\"", "]", "=", "gen_true", "\n", "", "args", "[", "\"transforms\"", "]", "=", "transforms", "\n", "# make dataset from factory", "\n", "dataset", "=", "factory", "(", "**", "args", ")", "\n", "datasets", ".", "append", "(", "dataset", ")", "\n", "\n", "# for testing, return a list of datasets", "\n", "", "if", "not", "is_train", ":", "\n", "        ", "return", "datasets", "\n", "\n", "# for training, concatenate all datasets into a single one", "\n", "", "dataset", "=", "datasets", "[", "0", "]", "\n", "if", "len", "(", "datasets", ")", ">", "1", ":", "\n", "        ", "dataset", "=", "D", ".", "ConcatDataset", "(", "datasets", ")", "\n", "\n", "", "return", "[", "dataset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_data_sampler": [[71, 80], ["samplers.DistributedSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.SequentialSampler"], "function", ["None"], ["", "def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "samplers", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "# pdb.set_trace()", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build._quantize": [[82, 87], ["copy.copy", "sorted", "list", "map", "bisect.bisect_right"], "function", ["None"], ["", "def", "_quantize", "(", "x", ",", "bins", ")", ":", "\n", "    ", "bins", "=", "copy", ".", "copy", "(", "bins", ")", "\n", "bins", "=", "sorted", "(", "bins", ")", "\n", "quantized", "=", "list", "(", "map", "(", "lambda", "y", ":", "bisect", ".", "bisect_right", "(", "bins", ",", "y", ")", ",", "x", ")", ")", "\n", "return", "quantized", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build._compute_aspect_ratios": [[89, 97], ["range", "len", "dataset.get_img_info", "aspect_ratios.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.get_img_info"], ["", "def", "_compute_aspect_ratios", "(", "dataset", ")", ":", "\n", "    ", "aspect_ratios", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_info", "=", "dataset", ".", "get_img_info", "(", "i", ")", "\n", "aspect_ratio", "=", "float", "(", "img_info", "[", "\"height\"", "]", ")", "/", "float", "(", "\n", "img_info", "[", "\"width\"", "]", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_batch_data_sampler": [[99, 120], ["build._compute_aspect_ratios", "build._quantize", "samplers.GroupedBatchSampler", "torch.utils.data.sampler.BatchSampler", "samplers.IterationBasedBatchSampler", "isinstance"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build._compute_aspect_ratios", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build._quantize"], ["", "def", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_batch", ",", "\n", "num_iters", "=", "None", ",", "start_iter", "=", "0", "\n", ")", ":", "\n", "    ", "if", "aspect_grouping", ":", "\n", "        ", "if", "not", "isinstance", "(", "aspect_grouping", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "aspect_grouping", "=", "[", "aspect_grouping", "]", "\n", "", "aspect_ratios", "=", "_compute_aspect_ratios", "(", "dataset", ")", "\n", "group_ids", "=", "_quantize", "(", "aspect_ratios", ",", "aspect_grouping", ")", "\n", "batch_sampler", "=", "samplers", ".", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "images_per_batch", ",", "drop_uneven", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "        ", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "BatchSampler", "(", "\n", "sampler", ",", "images_per_batch", ",", "drop_last", "=", "False", "\n", ")", "\n", "", "if", "num_iters", "is", "not", "None", ":", "\n", "        ", "batch_sampler", "=", "samplers", ".", "IterationBasedBatchSampler", "(", "\n", "batch_sampler", ",", "num_iters", ",", "start_iter", "\n", ")", "\n", "", "return", "batch_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.build_mt_data_loader": [[123, 141], ["build.make_data_sampler", "build.make_batch_data_sampler", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_data_sampler", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_batch_data_sampler"], ["", "def", "build_mt_data_loader", "(", "dataset", ",", "shuffle", ",", "is_distributed", ",", "aspect_grouping", ",", "images_per_gpu", ",", "\n", "num_iters", ",", "start_iter", ",", "cfg", ",", "is_train", ",", "collator", ")", ":", "\n", "# import pdb;pdb.set_trace()", "\n", "    ", "sampler", "=", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "is_distributed", ")", "\n", "batch_sampler", "=", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_gpu", ",", "\n", "num_iters", ",", "start_iter", "\n", ")", "\n", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "//", "4", "if", "is_train", "else", "1", "\n", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "collate_fn", "=", "collator", ",", "\n", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_mt_data_loader": [[143, 214], ["maskrcnn_benchmark.utils.comm.get_world_size", "maskrcnn_benchmark.utils.imports.import_file", "transforms.build_transforms", "build.build_dataset", "build.build_collator", "build.build_mt_data_loader", "int", "logging.getLogger", "logging.getLogger.warning"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_world_size", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.build.build_transforms", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.build_dataset", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.build_collator", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.build_mt_data_loader"], ["", "def", "make_mt_data_loader", "(", "cfg", ",", "is_train", "=", "True", ",", "is_distributed", "=", "False", ",", "\n", "start_iter", "=", "0", ",", "mode", "=", "'source'", ",", "img_ratio", "=", "1.", ")", ":", "\n", "    ", "num_gpus", "=", "get_world_size", "(", ")", "\n", "dataset_list_dict", "=", "{", "'source'", ":", "'papnuclei_source'", ",", "\n", "'no_label'", ":", "'papnuclei_no_label'", ",", "}", "\n", "\n", "if", "is_train", ":", "\n", "        ", "images_per_batch", "=", "int", "(", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", "*", "img_ratio", ")", "\n", "assert", "(", "\n", "images_per_batch", "%", "num_gpus", "==", "0", "\n", ")", ",", "\"SOLVER.IMS_PER_BATCH ({}) must be divisible by the number \"", "\n", "\"of GPUs ({}) used.\"", ".", "format", "(", "images_per_batch", ",", "num_gpus", ")", "\n", "images_per_gpu", "=", "images_per_batch", "//", "num_gpus", "\n", "shuffle", "=", "True", "\n", "num_iters", "=", "cfg", ".", "SOLVER", ".", "MAX_ITER", "\n", "", "else", ":", "\n", "        ", "images_per_batch", "=", "cfg", ".", "TEST", ".", "IMS_PER_BATCH", "\n", "assert", "(", "\n", "images_per_batch", "%", "num_gpus", "==", "0", "\n", ")", ",", "\"TEST.IMS_PER_BATCH ({}) must be divisible by the number \"", "\n", "\"of GPUs ({}) used.\"", ".", "format", "(", "images_per_batch", ",", "num_gpus", ")", "\n", "images_per_gpu", "=", "images_per_batch", "//", "num_gpus", "\n", "shuffle", "=", "False", "if", "not", "is_distributed", "else", "True", "\n", "num_iters", "=", "None", "\n", "start_iter", "=", "0", "\n", "\n", "", "if", "images_per_gpu", ">", "1", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "warning", "(", "\n", "\"When using more than one image per GPU you may encounter \"", "\n", "\"an out-of-memory (OOM) error if your GPU does not have \"", "\n", "\"sufficient memory. If this happens, you can reduce \"", "\n", "\"SOLVER.IMS_PER_BATCH (for training) or \"", "\n", "\"TEST.IMS_PER_BATCH (for inference). For training, you must \"", "\n", "\"also adjust the learning rate and schedule length according \"", "\n", "\"to the linear scaling rule. See for example: \"", "\n", "\"https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14\"", "\n", ")", "\n", "\n", "# group images which have similar aspect ratio. In this case, we only", "\n", "# group in two cases: those with width / height > 1, and the other way around,", "\n", "# but the code supports more general grouping strategy", "\n", "", "aspect_grouping", "=", "[", "\n", "1", "]", "if", "cfg", ".", "DATALOADER", ".", "ASPECT_RATIO_GROUPING", "else", "[", "]", "\n", "\n", "paths_catalog", "=", "import_file", "(", "\n", "\"maskrcnn_benchmark.config.paths_catalog\"", ",", "cfg", ".", "PATHS_CATALOG", ",", "\n", "True", "\n", ")", "\n", "DatasetCatalog", "=", "paths_catalog", ".", "DatasetCatalog", "\n", "if", "is_train", ":", "\n", "        ", "dataset", "=", "dataset_list_dict", "[", "mode", "]", "\n", "", "elif", "cfg", ".", "DATASETS", ".", "MODE_IN_TEST", "==", "'val'", ":", "\n", "        ", "dataset", "=", "cfg", ".", "DATASETS", ".", "VAL", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "", "transforms", "=", "build_transforms", "(", "cfg", ",", "is_train", ",", "domain", "=", "mode", ")", "\n", "syn_mt", "=", "True", "if", "cfg", ".", "SYN", ".", "MT_LOSS", ">", "0", "else", "False", "\n", "dataset", "=", "build_dataset", "(", "[", "dataset", "]", ",", "transforms", ",", "\n", "DatasetCatalog", ",", "is_train", ",", "\n", "aug_k", "=", "cfg", ".", "MT", ".", "AUG_K", "+", "cfg", ".", "MT", ".", "AUG_S", ",", "\n", "syn_mt", "=", "syn_mt", ",", "gen_true", "=", "cfg", ".", "DATASETS", ".", "GEN_TRUE", ")", "\n", "collators", "=", "build_collator", "(", "cfg", ",", "mode", ")", "\n", "dataloader", "=", "build_mt_data_loader", "(", "dataset", "[", "0", "]", ",", "\n", "shuffle", ",", "\n", "is_distributed", ",", "\n", "aspect_grouping", ",", "\n", "images_per_gpu", ",", "\n", "num_iters", ",", "start_iter", ",", "\n", "cfg", ",", "is_train", ",", "collators", ")", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.build_collator": [[215, 228], ["collate_batch.BatchCollator", "collate_batch.BatchCollatorWoLabelK", "collate_batch.BatchCollatorWoLabel_Compared"], "function", ["None"], ["", "def", "build_collator", "(", "cfg", ",", "mode", "=", "'source'", ")", ":", "\n", "    ", "size_divisibility", "=", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", "\n", "if", "mode", "==", "'source'", ":", "\n", "        ", "collator", "=", "BatchCollator", "(", "size_divisibility", ")", "\n", "", "elif", "mode", "==", "'no_label'", ":", "\n", "        ", "if", "not", "cfg", ".", "MT", ".", "ODKD", "and", "not", "cfg", ".", "MT", ".", "FFI", ":", "\n", "            ", "collator", "=", "BatchCollatorWoLabelK", "(", "size_divisibility", ",", "\n", "cfg", ".", "MT", ".", "AUG_K", "+", "cfg", ".", "MT", ".", "AUG_S", ")", "\n", "", "else", ":", "\n", "            ", "collator", "=", "BatchCollatorWoLabel_Compared", "(", "size_divisibility", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "collator", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_data_loader": [[229, 319], ["maskrcnn_benchmark.utils.comm.get_world_size", "maskrcnn_benchmark.utils.imports.import_file", "transforms.build_transforms", "build.build_dataset", "logging.getLogger", "logging.getLogger.warning", "build.make_data_sampler", "build.make_batch_data_sampler", "torch.utils.data.DataLoader", "data_loaders.append", "collate_batch.TTABatchCollator", "collate_batch.BatchCollator", "len"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_world_size", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.build.build_transforms", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.build_dataset", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_data_sampler", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.build.make_batch_data_sampler"], ["", "def", "make_data_loader", "(", "cfg", ",", "is_train", "=", "True", ",", "is_distributed", "=", "False", ",", "\n", "start_iter", "=", "0", ")", ":", "\n", "    ", "num_gpus", "=", "get_world_size", "(", ")", "\n", "if", "is_train", ":", "\n", "        ", "images_per_batch", "=", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", "\n", "assert", "(", "\n", "images_per_batch", "%", "num_gpus", "==", "0", "\n", ")", ",", "\"SOLVER.IMS_PER_BATCH ({}) must be divisible by the number \"", "\n", "\"of GPUs ({}) used.\"", ".", "format", "(", "images_per_batch", ",", "num_gpus", ")", "\n", "images_per_gpu", "=", "images_per_batch", "//", "num_gpus", "\n", "shuffle", "=", "True", "\n", "num_iters", "=", "cfg", ".", "SOLVER", ".", "MAX_ITER", "\n", "", "else", ":", "\n", "        ", "images_per_batch", "=", "cfg", ".", "TEST", ".", "IMS_PER_BATCH", "\n", "assert", "(", "\n", "images_per_batch", "%", "num_gpus", "==", "0", "\n", ")", ",", "\"TEST.IMS_PER_BATCH ({}) must be divisible by the number \"", "\n", "\"of GPUs ({}) used.\"", ".", "format", "(", "images_per_batch", ",", "num_gpus", ")", "\n", "images_per_gpu", "=", "images_per_batch", "//", "num_gpus", "\n", "shuffle", "=", "False", "if", "not", "is_distributed", "else", "True", "\n", "num_iters", "=", "None", "\n", "start_iter", "=", "0", "\n", "\n", "", "if", "images_per_gpu", ">", "1", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "warning", "(", "\n", "\"When using more than one image per GPU you may encounter \"", "\n", "\"an out-of-memory (OOM) error if your GPU does not have \"", "\n", "\"sufficient memory. If this happens, you can reduce \"", "\n", "\"SOLVER.IMS_PER_BATCH (for training) or \"", "\n", "\"TEST.IMS_PER_BATCH (for inference). For training, you must \"", "\n", "\"also adjust the learning rate and schedule length according \"", "\n", "\"to the linear scaling rule. See for example: \"", "\n", "\"https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14\"", "\n", ")", "\n", "\n", "# group images which have similar aspect ratio. In this case, we only", "\n", "# group in two cases: those with width / height > 1, and the other way around,", "\n", "# but the code supports more general grouping strategy", "\n", "", "aspect_grouping", "=", "[", "\n", "1", "]", "if", "cfg", ".", "DATALOADER", ".", "ASPECT_RATIO_GROUPING", "else", "[", "]", "\n", "\n", "paths_catalog", "=", "import_file", "(", "\n", "\"maskrcnn_benchmark.config.paths_catalog\"", ",", "cfg", ".", "PATHS_CATALOG", ",", "\n", "True", "\n", ")", "\n", "DatasetCatalog", "=", "paths_catalog", ".", "DatasetCatalog", "\n", "# import pdb;pdb.set_trace()", "\n", "if", "is_train", ":", "\n", "        ", "dataset_list", "=", "cfg", ".", "DATASETS", ".", "TRAIN", "\n", "", "elif", "cfg", ".", "DATASETS", ".", "MODE_IN_TEST", "==", "'val'", ":", "\n", "        ", "dataset_list", "=", "cfg", ".", "DATASETS", ".", "VAL", "\n", "", "elif", "cfg", ".", "DATASETS", ".", "MODE_IN_TEST", "==", "'gen'", ":", "\n", "        ", "dataset_list", "=", "cfg", ".", "DATASETS", ".", "GEN", "\n", "", "else", ":", "\n", "        ", "dataset_list", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "\n", "# dataset_list = cfg.DATASETS.TRAIN if is_train else cfg.DATASETS.TEST", "\n", "\n", "", "transforms", "=", "build_transforms", "(", "cfg", ",", "is_train", ")", "\n", "datasets", "=", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "\n", "DatasetCatalog", ",", "is_train", ",", "\n", "gen_fake", "=", "cfg", ".", "DATASETS", ".", "GEN_FAKE", ",", "\n", "gen_true", "=", "cfg", ".", "DATASETS", ".", "GEN_TRUE", ")", "\n", "\n", "data_loaders", "=", "[", "]", "\n", "for", "dataset", "in", "datasets", ":", "\n", "        ", "sampler", "=", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "is_distributed", ")", "\n", "batch_sampler", "=", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_gpu", ",", "\n", "num_iters", ",", "start_iter", "\n", ")", "\n", "if", "cfg", ".", "TEST", ".", "TTA", ":", "\n", "            ", "collator", "=", "TTABatchCollator", "(", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", "\n", "", "else", ":", "\n", "            ", "collator", "=", "BatchCollator", "(", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", "\n", "", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "if", "is_train", "else", "1", "\n", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "collate_fn", "=", "collator", ",", "\n", ")", "\n", "data_loaders", ".", "append", "(", "data_loader", ")", "\n", "", "if", "is_train", ":", "\n", "# during training, a single (possibly concatenated) data_loader is returned", "\n", "        ", "assert", "len", "(", "data_loaders", ")", "==", "1", "\n", "return", "data_loaders", "[", "0", "]", "\n", "", "return", "data_loaders", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.collate_batch.BatchCollator.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size_divisible", "=", "0", ")", ":", "\n", "        ", "self", ".", "size_divisible", "=", "size_divisible", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.collate_batch.BatchCollator.__call__": [[15, 21], ["list", "maskrcnn_benchmark.structures.image_list.to_image_list", "zip"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "images", "=", "to_image_list", "(", "transposed_batch", "[", "0", "]", ",", "self", ".", "size_divisible", ")", "\n", "targets", "=", "transposed_batch", "[", "1", "]", "\n", "img_ids", "=", "transposed_batch", "[", "2", "]", "\n", "return", "images", ",", "targets", ",", "img_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.collate_batch.TTABatchCollator.__init__": [[29, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size_divisible", "=", "0", ")", ":", "\n", "        ", "self", ".", "size_divisible", "=", "size_divisible", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.collate_batch.TTABatchCollator.__call__": [[32, 42], ["list", "maskrcnn_benchmark.structures.image_list.to_image_list", "maskrcnn_benchmark.structures.image_list.to_image_list", "zip"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "image_1", "=", "to_image_list", "(", "transposed_batch", "[", "0", "]", ",", "\n", "self", ".", "size_divisible", ")", "\n", "image_2", "=", "to_image_list", "(", "transposed_batch", "[", "1", "]", ",", "\n", "self", ".", "size_divisible", ")", "\n", "\n", "targets", "=", "transposed_batch", "[", "2", "]", "\n", "img_ids", "=", "transposed_batch", "[", "3", "]", "\n", "return", "(", "image_1", ",", "image_2", ")", ",", "targets", ",", "img_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.collate_batch.BatchCollatorWoLabel_Compared.__init__": [[44, 46], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size_divisible", "=", "0", ",", ")", ":", "\n", "        ", "self", ".", "size_divisible", "=", "size_divisible", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.collate_batch.BatchCollatorWoLabel_Compared.__call__": [[47, 57], ["list", "maskrcnn_benchmark.structures.image_list.to_image_list", "maskrcnn_benchmark.structures.image_list.to_image_list", "zip"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "image_1", "=", "to_image_list", "(", "transposed_batch", "[", "0", "]", ",", "\n", "self", ".", "size_divisible", ")", "\n", "image_2", "=", "to_image_list", "(", "transposed_batch", "[", "1", "]", ",", "\n", "self", ".", "size_divisible", ")", "\n", "\n", "\n", "img_ids", "=", "transposed_batch", "[", "2", "]", "\n", "return", "image_1", ",", "image_2", ",", "img_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.collate_batch.BatchCollatorWoLabelK.__init__": [[59, 62], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size_divisible", "=", "0", ",", "aug_k", "=", "3", ")", ":", "\n", "        ", "self", ".", "size_divisible", "=", "size_divisible", "\n", "self", ".", "aug_k", "=", "aug_k", "\n", "", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.data.collate_batch.BatchCollatorWoLabelK.__call__": [[62, 78], ["list", "list", "range", "zip", "zip", "maskrcnn_benchmark.structures.image_list.to_image_list", "_batch_tensor.append"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.to_image_list"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "# input", "\n", "# [[[teacher],[student],id], [[teacher],[student],id],... ]", "\n", "# return [imglist, imglist,...], id", "\n", "\n", "        ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "_batch", "=", "transposed_batch", "[", "0", "]", "\n", "_batch_list", "=", "list", "(", "zip", "(", "*", "_batch", ")", ")", "\n", "_batch_tensor", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "aug_k", ")", ":", "\n", "            ", "_image", "=", "to_image_list", "(", "_batch_list", "[", "i", "]", ",", "self", ".", "size_divisible", ")", "\n", "_batch_tensor", ".", "append", "(", "_image", ")", "\n", "\n", "", "idx", "=", "transposed_batch", "[", "1", "]", "\n", "\n", "return", "_batch_tensor", ",", "idx", "", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset.__init__": [[113, 189], ["CELL", "json.load", "Pap._get_img_list", "time.time", "int", "cell.imgs.items", "len", "Pap.PapNucleiDataset.store_tmp_train_patches", "dict", "print", "print", "print", "open", "Pap._get_sw", "Pap.PapNucleiDataset.ids.extend", "str", "zip", "cell.loadImgs", "info[].split", "openslide.open_slide", "Pap.PapNucleiDataset._remove_unsuitable_patches", "enumerate", "Pap.PapNucleiDataset.category_name_to_contiguous_id.items", "range", "Pap.PapNucleiDataset.class_to_ind.items", "enumerate", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "time.time", "len", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._get_img_list", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.store_tmp_train_patches", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._get_sw", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadImgs", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset._remove_unsuitable_patches"], ["def", "__init__", "(", "\n", "self", ",", "root", ",", "annFile", ",", "split", ",", "\n", "remove_images_without_annotations", "=", "True", ",", "\n", "transforms", "=", "None", ",", "\n", "maxWindowSize", "=", "1000", ",", "foldfile", "=", "'./split.json'", ",", "use_gen", "=", "True", ",", "\n", "gen_fake", "=", "0", "\n", ",", "gen_true", "=", "0", ",", "tta", "=", "False", ")", ":", "\n", "        ", "from", "maskrcnn_benchmark", ".", "data", ".", "datasets", ".", "cell", "import", "CELL", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "cv", "=", "1", "\n", "self", ".", "annFile", "=", "annFile", "\n", "self", ".", "cell", "=", "CELL", "(", "annFile", ")", "\n", "assert", "split", "in", "(", "'train'", ",", "'val'", ",", "'test'", ",", "\n", "'gen'", ")", ",", "\"split error, (train, val, test) available\"", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "maxWS", "=", "maxWindowSize", "\n", "self", ".", "ids", "=", "[", "]", "\n", "self", ".", "image_pool", "=", "{", "}", "\n", "# load train/val/test fold", "\n", "self", ".", "gen_fake", "=", "gen_fake", "\n", "self", ".", "gen_true", "=", "gen_true", "\n", "val_fold", "=", "json", ".", "load", "(", "open", "(", "foldfile", ",", "'r'", ")", ")", "\n", "use_img_list", "=", "_get_img_list", "(", "split", ",", "root", ",", "val_fold", ",", "easy", "=", "True", ",", "\n", "hard", "=", "True", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "cell", "=", "self", ".", "cell", "\n", "winSize", "=", "int", "(", "self", ".", "maxWS", "*", "windowSizeRatio", "[", "self", ".", "split", "]", ")", "\n", "for", "img_id", ",", "img", "in", "cell", ".", "imgs", ".", "items", "(", ")", ":", "\n", "            ", "info", "=", "cell", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "\n", "file_name", "=", "info", "[", "'file_name'", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "file_name", "not", "in", "use_img_list", ":", "\n", "                ", "continue", "\n", "", "w", ",", "h", "=", "img", "[", "'width'", "]", ",", "img", "[", "'height'", "]", "\n", "windows", "=", "_get_sw", "(", "w", ",", "h", ",", "winSize", ",", "overlapPercent", "[", "split", "]", ")", "\n", "if", "img_id", "not", "in", "self", ".", "image_pool", ":", "\n", "                ", "self", ".", "image_pool", "[", "img_id", "]", "=", "ops", ".", "open_slide", "(", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "info", "[", "'file_name'", "]", ")", ")", "\n", "# filter images without detection annotations and only noise/tiny annotation", "\n", "", "id_sublist", "=", "[", "{", "\n", "'id'", ":", "info", "[", "'id'", "]", ",", "\n", "'file_name'", ":", "file_name", ",", "\n", "'img_id'", ":", "img_id", ",", "\n", "'location'", ":", "wsize", ",", "\n", "}", "for", "wsize", "in", "windows", "]", "\n", "if", "remove_images_without_annotations", ":", "\n", "                ", "id_sublist", "=", "self", ".", "_remove_unsuitable_patches", "(", "\n", "id_sublist", ",", "\n", "thresh", "=", "0.001", "*", "winSize", "**", "2", ")", "\n", "", "self", ".", "ids", ".", "extend", "(", "id_sublist", ")", "\n", "", "start_id", "=", "len", "(", "self", ".", "ids", ")", "\n", "self", ".", "start_id", "=", "start_id", "\n", "self", ".", "labels", "=", "{", "}", "\n", "self", ".", "tmp_train_patches_dir", "=", "'../temp_patch'", "+", "'_'", "+", "str", "(", "self", ".", "cv", ")", "\n", "self", ".", "fine_tune_source", "=", "False", "\n", "self", ".", "store_tmp_train_patches", "(", ")", "\n", "\n", "self", ".", "category_name_to_contiguous_id", "=", "{", "\n", "c", ":", "i", "for", "i", ",", "c", "in", "enumerate", "(", "PapNucleiDataset", ".", "CLASSES", ")", "\n", "}", "\n", "self", ".", "contiguous_id_to_category_name", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "\n", "self", ".", "category_name_to_contiguous_id", ".", "items", "(", ")", "\n", "}", "\n", "cls", "=", "PapNucleiDataset", ".", "CLASSES", "\n", "self", ".", "class_to_ind", "=", "dict", "(", "zip", "(", "cls", ",", "range", "(", "len", "(", "cls", ")", ")", ")", ")", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "\n", "self", ".", "class_to_ind", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "id_to_img_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "ids", ")", "}", "\n", "\n", "print", "(", "'Done (time={:0.2f}s\\n) '", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "print", "(", "'PapNuclei Dataset has %d patch images...'", "%", "(", "\n", "len", "(", "self", ".", "ids", ")", ")", ")", "\n", "print", "(", "'%d gen fake images; %d gen true images'", "%", "(", "len", "(", "\n", "self", ".", "gen_fake_image_list", ")", ",", "len", "(", "self", ".", "gen_true_image_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset.source_length": [[190, 192], ["None"], "methods", ["None"], ["", "def", "source_length", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "start_id", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset.store_tmp_train_patches": [[193, 224], ["maskrcnn_benchmark.utils.miscellaneous.mkdir", "print", "tqdm.tqdm.tqdm", "print", "range", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "range", "Pap.PapNucleiDataset.image_pool[].read_region().convert", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "Pap.PapNucleiDataset.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "Pap.PapNucleiDataset.image_pool[].read_region", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save"], ["", "def", "store_tmp_train_patches", "(", "self", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "self", ".", "patch_dir", "=", "{", "}", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "self", ".", "tmp_train_patches_dir", ")", "or", "len", "(", "os", ".", "listdir", "(", "self", ".", "tmp_train_patches_dir", ")", ")", "==", "0", ")", ":", "\n", "            ", "mkdir", "(", "self", ".", "tmp_train_patches_dir", ")", "\n", "print", "(", "'create temp patch files...'", ")", "\n", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "self", ".", "start_id", ")", ")", ":", "\n", "                ", "item", "=", "self", ".", "ids", "[", "idx", "]", "\n", "img_id", "=", "item", "[", "'img_id'", "]", "\n", "img", "=", "self", ".", "image_pool", "[", "img_id", "]", ".", "read_region", "(", "\n", "(", "item", "[", "'location'", "]", "[", "0", "]", ",", "item", "[", "'location'", "]", "[", "1", "]", ")", ",", "0", ",", "\n", "(", "1000", ",", "1000", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmp_train_patches_dir", ",", "\n", "item", "[", "'file_name'", "]", "+", "'_'", "+", "str", "(", "item", "[", "'location'", "]", "[", "0", "]", ")", "\n", "+", "'_'", "+", "str", "(", "item", "[", "'location'", "]", "[", "1", "]", ")", "\n", "+", "'.png'", ")", "\n", "img", ".", "save", "(", "img_path", ")", "\n", "self", ".", "patch_dir", "[", "idx", "]", "=", "img_path", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'already have patch files, reuse it'", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "start_id", ")", ":", "\n", "                ", "item", "=", "self", ".", "ids", "[", "idx", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmp_train_patches_dir", ",", "\n", "item", "[", "'file_name'", "]", "+", "'_'", "+", "str", "(", "\n", "item", "[", "'location'", "]", "[", "0", "]", ")", "\n", "+", "'_'", "+", "str", "(", "\n", "item", "[", "'location'", "]", "[", "1", "]", ")", "\n", "+", "'.png'", ")", "\n", "self", ".", "patch_dir", "[", "idx", "]", "=", "img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset.__getitem__": [[225, 256], ["torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "target.clip_to_image.clip_to_image.add_field", "maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask", "target.clip_to_image.clip_to_image.add_field", "target.clip_to_image.clip_to_image.clip_to_image", "len", "int", "Pap.PapNucleiDataset.filter_gt", "Pap.PapNucleiDataset.transforms", "PIL.Image.open", "Pap.PapNucleiDataset.image_pool[].read_region().convert", "len", "print", "numpy.random.choice", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "len", "Pap.PapNucleiDataset.image_pool[].read_region"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.filter_gt", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "masks", "=", "[", "]", "\n", "while", "len", "(", "masks", ")", "==", "0", ":", "\n", "            ", "item", "=", "self", ".", "ids", "[", "index", "]", "\n", "img_id", "=", "item", "[", "'img_id'", "]", "\n", "winSize", "=", "int", "(", "\n", "self", ".", "maxWS", "*", "windowSizeRatio", "[", "self", ".", "split", "]", ")", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "img_path", "=", "self", ".", "patch_dir", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "", "else", ":", "\n", "\n", "                ", "img", "=", "self", ".", "image_pool", "[", "img_id", "]", ".", "read_region", "(", "\n", "(", "item", "[", "'location'", "]", "[", "0", "]", ",", "item", "[", "'location'", "]", "[", "1", "]", ")", ",", "0", ",", "\n", "(", "winSize", ",", "winSize", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "# load and filter gt mask& bbox", "\n", "# print(img.size)", "\n", "", "masks", ",", "bboxes", ",", "labels", "=", "self", ".", "filter_gt", "(", "item", ")", "\n", "if", "len", "(", "masks", ")", "==", "0", ":", "\n", "                ", "print", "(", "'No mask for index:'", ",", "index", ")", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "ids", ")", ")", "\n", "", "", "bboxes", "=", "torch", ".", "as_tensor", "(", "bboxes", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "# guard against no boxes", "\n", "target", "=", "BoxList", "(", "bboxes", ",", "img", ".", "size", ",", "mode", "=", "'xyxy'", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ")", "\n", "target", ".", "add_field", "(", "\"labels\"", ",", "labels", ")", "\n", "masks", "=", "SegmentationMask", "(", "masks", ",", "img", ".", "size", ")", "\n", "target", ".", "add_field", "(", "\"masks\"", ",", "masks", ")", "\n", "target", "=", "target", ".", "clip_to_image", "(", "remove_empty", "=", "True", ")", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "", "return", "img", ",", "target", ",", "index", "\n", "# cytoplasm", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset.__len__": [[257, 259], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset.get_img_info": [[260, 265], ["None"], "methods", ["None"], ["", "def", "get_img_info", "(", "self", ",", "index", ")", ":", "\n", "# img_id = self.id_to_img_map[index]", "\n", "        ", "img_data", "=", "self", ".", "ids", "[", "index", "]", "[", "'location'", "]", "\n", "return", "{", "\"width\"", ":", "img_data", "[", "2", "]", ",", "\"height\"", ":", "img_data", "[", "3", "]", ",", "\n", "\"file_name\"", ":", "self", ".", "ids", "[", "index", "]", "[", "'file_name'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset.get_img_in_inference": [[266, 285], ["img_name.split", "numpy.asarray", "Pap.PapNucleiDataset.image_pool[].read_region().convert", "Pap.PapNucleiDataset.image_pool[].read_region().convert", "Pap.PapNucleiDataset.image_pool[].read_region", "Pap.PapNucleiDataset.image_pool[].read_region", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["", "def", "get_img_in_inference", "(", "self", ",", "img_name", ")", ":", "\n", "        ", "\"\"\"\n        haven't fixed\n        Note that the key of image_pool now is \"image_id\" rather than \"file_name\"\n        \"\"\"", "\n", "file_name", ",", "w", ",", "h", "=", "img_name", ".", "split", "(", "'~'", ")", "\n", "# pdb.set_trace()", "\n", "try", ":", "\n", "# it seems that there is a wierd bug, read the image first time will caused trunct", "\n", "            ", "img", "=", "self", ".", "image_pool", "[", "file_name", "]", ".", "read_region", "(", "\n", "(", "int", "(", "w", ")", ",", "int", "(", "h", ")", ")", ",", "0", ",", "(", "\n", "self", ".", "maxWS", ",", "self", ".", "maxWS", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "except", ":", "\n", "            ", "img", "=", "self", ".", "image_pool", "[", "file_name", "]", ".", "read_region", "(", "\n", "(", "int", "(", "w", ")", ",", "int", "(", "h", ")", ")", ",", "0", ",", "(", "\n", "self", ".", "maxWS", ",", "self", ".", "maxWS", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset.get_ground_truth": [[286, 311], ["Pap.PapNucleiDataset.filter_gt", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "Pap.PapNucleiDataset.annToRLE", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "len", "pdb.set_trace", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.filter_gt", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.annToRLE", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["", "def", "get_ground_truth", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        haven't test\n        for inference only, return mask in rle modec\n        Args:\n            item (img_id, location(x, y, w, h)) : image_id and its sliding window\n        \"\"\"", "\n", "ratio", "=", "0.005", "if", "self", ".", "split", "==", "'test'", "else", "0.05", "\n", "masks", ",", "bboxes", ",", "labels", "=", "self", ".", "filter_gt", "(", "item", ",", "ratio", ")", "\n", "if", "len", "(", "masks", ")", "==", "0", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "# if item['location'][2] == self.maxWS and item['location'][3] == self.maxWS:", "\n", "#     pdb.set_trace()", "\n", "# assert item['location'][2] == self.maxWS and item['location'][3] == self.maxWS, \"Error in bbox size.\"", "\n", "", "bboxes", "=", "torch", ".", "as_tensor", "(", "bboxes", ")", ".", "reshape", "(", "-", "1", ",", "\n", "4", ")", "# guard against no boxes", "\n", "target", "=", "BoxList", "(", "bboxes", ",", "(", "self", ".", "maxWS", ",", "self", ".", "maxWS", ")", ",", "\n", "mode", "=", "'xyxy'", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ")", "\n", "target", ".", "add_field", "(", "\"labels\"", ",", "labels", ")", "\n", "# masks = SegmentationMask(masks, (img_id['location'][2], img_id['location'][3]))", "\n", "# pdb.set_trace()", "\n", "rle_masks", "=", "self", ".", "annToRLE", "(", "masks", ",", "item", ")", "\n", "target", ".", "add_field", "(", "\"masks\"", ",", "rle_masks", ")", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset.filter_gt": [[312, 360], ["time.time", "cell.getAnnIds", "cell.loadAnns", "numpy.array", "Pap._modify_out_of_roi_masks", "pycocotools.mask.append", "bbox.append", "label.append", "Pap._check_if_in_crop_img", "mask_crop[].min", "mask_crop[].min", "mask_crop[].max", "mask_crop[].max", "list", "itertools.chain.from_iterable", "_modify_out_of_roi_masks.tolist"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.getAnnIds", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadAnns", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._modify_out_of_roi_masks", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._check_if_in_crop_img"], ["", "def", "filter_gt", "(", "self", ",", "item", ",", "ratio", "=", "0.005", ")", ":", "\n", "        ", "\"\"\"\n        Get mask, bbox, label in the given image within the sliding window.\n        Args:\n            item (img_id, location(x, y, w, h)) : image_id and its sliding window\n            ratio (float)                       : the minimal area ratio need preserved (cropped bbox area >= original bbox area * ratio)\n        Returns:\n            mask (int list)\n            bbox\n            label\n        \"\"\"", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "cell", "=", "self", ".", "cell", "\n", "img_id", "=", "item", "[", "'img_id'", "]", "\n", "ann_ids", "=", "cell", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", "\n", "anns", "=", "cell", ".", "loadAnns", "(", "ann_ids", ")", "\n", "location", "=", "item", "[", "'location'", "]", "\n", "\n", "mask", ",", "bbox", ",", "label", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "mask_ori", "=", "np", ".", "array", "(", "ann", "[", "'segmentation'", "]", ",", "np", ".", "int", ")", "\n", "if", "mask_ori", ".", "shape", "[", "0", "]", "<=", "2", ":", "\n", "# remove the annotation whose mask coordinate number <= 2. (line or point cannot be considered as a mask)", "\n", "                ", "continue", "\n", "", "if", "not", "_check_if_in_crop_img", "(", "mask_ori", ",", "location", ")", ":", "\n", "                ", "continue", "\n", "", "mask_crop", "=", "_modify_out_of_roi_masks", "(", "mask_ori", ",", "location", ")", "\n", "# bbox_crop (xmin, ymin, xmax, ymax)", "\n", "bbox_crop", "=", "[", "mask_crop", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "mask_crop", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "\n", "mask_crop", "[", ":", ",", "0", "]", ".", "max", "(", ")", ",", "mask_crop", "[", ":", ",", "1", "]", ".", "max", "(", ")", "]", "\n", "# remove bbox of which the majority outside the patch", "\n", "bbox_area_ori", "=", "ann", "[", "'bbox'", "]", "[", "2", "]", "*", "ann", "[", "'bbox'", "]", "[", "3", "]", "\n", "bbox_area_crop", "=", "(", "bbox_crop", "[", "2", "]", "-", "bbox_crop", "[", "0", "]", ")", "*", "(", "\n", "bbox_crop", "[", "3", "]", "-", "bbox_crop", "[", "1", "]", ")", "\n", "if", "bbox_area_crop", "<", "bbox_area_ori", "*", "ratio", ":", "\n", "                ", "continue", "\n", "\n", "# polygons: a list of list of lists of numbers.", "\n", "", "mask_crop", "=", "[", "\n", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "\n", "mask_crop", ".", "tolist", "(", ")", ")", ")", "]", "\n", "mask", ".", "append", "(", "mask_crop", ")", "\n", "bbox", ".", "append", "(", "bbox_crop", ")", "\n", "# class +1 because in json file, we begin at class 0 and ignore the background", "\n", "# pdb.set_trace()", "\n", "label", ".", "append", "(", "ann", "[", "'category_id'", "]", "+", "1", ")", "\n", "\n", "", "return", "mask", ",", "bbox", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset._remove_unsuitable_patches": [[361, 384], ["Pap.PapNucleiDataset.filter_gt", "sum", "len", "ids.append"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.filter_gt"], ["", "def", "_remove_unsuitable_patches", "(", "self", ",", "id_list", ",", "thresh", ")", ":", "\n", "        ", "\"\"\"\n        remove the patches with no masks in the location region\n        or with only small ratio of masks ( ratio*w*h )\n        Args:\n            id_list [(img_id, location(x, y, w, h))] : image_id and its sliding window\n            thresh                                   : bbox area need to be greater than thresh\n        Returns:\n            ids : id list satisfying the constrains\n        \"\"\"", "\n", "# remove the patches with only small ratio of masks ( ratio*w*h )", "\n", "ids", "=", "[", "]", "\n", "for", "item", "in", "id_list", ":", "\n", "# pdb.set_trace()", "\n", "            ", "mask", ",", "bbox", ",", "label", "=", "self", ".", "filter_gt", "(", "item", ")", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "area", "=", "sum", "(", "\n", "[", "(", "obj", "[", "2", "]", "-", "obj", "[", "0", "]", ")", "*", "(", "obj", "[", "3", "]", "-", "obj", "[", "1", "]", ")", "for", "obj", "in", "\n", "bbox", "]", ")", "\n", "if", "area", ">", "thresh", ":", "\n", "                ", "ids", ".", "append", "(", "item", ")", "\n", "", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset._reset_size": [[385, 394], ["int"], "methods", ["None"], ["", "def", "_reset_size", "(", "self", ",", "anno", ")", ":", "\n", "        ", "\"\"\"\n        Haven't test\n        May have problem anno['id']\n        \"\"\"", "\n", "size", "=", "int", "(", "self", ".", "maxWS", "*", "windowSizeRatio", "[", "self", ".", "split", "]", ")", "\n", "anno", "[", "'id'", "]", "[", "'location'", "]", "[", "2", "]", "=", "size", "\n", "anno", "[", "'id'", "]", "[", "'location'", "]", "[", "3", "]", "=", "size", "\n", "return", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset.annToRLE": [[395, 421], ["int", "isinstance", "pycocotools.mask.frPyObjects", "pycocotools.mask.merge", "RLES.append", "type", "pycocotools.mask.frPyObjects", "pycocotools.mask.merge", "RLES.append", "p.numpy"], "methods", ["None"], ["", "def", "annToRLE", "(", "self", ",", "masks", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE to RLE.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "size", "=", "int", "(", "self", ".", "maxWS", "*", "windowSizeRatio", "[", "self", ".", "split", "]", ")", "\n", "\n", "h", ",", "w", "=", "size", ",", "size", "\n", "RLES", "=", "[", "]", "\n", "if", "isinstance", "(", "masks", ",", "SegmentationMask", ")", ":", "\n", "            ", "for", "segm", "in", "masks", ".", "polygons", ":", "\n", "                ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "\n", "[", "p", ".", "numpy", "(", ")", "for", "p", "in", "segm", "]", ",", "h", ",", "w", "\n", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "RLES", ".", "append", "(", "rle", ")", "\n", "", "", "elif", "type", "(", "masks", ")", "==", "list", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "            ", "for", "polygon", "in", "masks", ":", "\n", "                ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "polygon", ",", "h", ",", "w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "RLES", ".", "append", "(", "rle", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "RLES", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiDataset.__repr__": [[422, 435], ["Pap.PapNucleiDataset.__len__", "Pap.PapNucleiDataset.transforms.__repr__().replace", "Pap.PapNucleiDataset.transforms.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.weighted_random_sampler.WeightedRandomSubSampler.__len__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Compose.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "\n", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "fmt_str", "+=", "'    Annotation File: {}\\n'", ".", "format", "(", "self", ".", "annFile", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "\n", "self", ".", "transforms", ".", "__repr__", "(", ")", ".", "replace", "(", "\n", "'\\n'", ",", "\n", "'\\n'", "+", "' '", "*", "len", "(", "\n", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.__init__": [[443, 519], ["CELL", "json.load", "Pap._get_img_list", "time.time", "int", "sorted", "len", "Pap.PapNucleiSourceDataset.store_tmp_train_patches", "dict", "print", "print", "open", "cell.imgs.items", "Pap._get_sw", "Pap.PapNucleiSourceDataset.ids.extend", "len", "str", "zip", "cell.loadImgs", "info[].split", "openslide.open_slide", "Pap.PapNucleiSourceDataset._remove_unsuitable_patches", "enumerate", "Pap.PapNucleiSourceDataset.category_name_to_contiguous_id.items", "range", "Pap.PapNucleiSourceDataset.class_to_ind.items", "enumerate", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "int", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._get_img_list", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.store_tmp_train_patches", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._get_sw", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadImgs", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset._remove_unsuitable_patches"], ["def", "__init__", "(", "\n", "self", ",", "root", ",", "annFile", ",", "split", ",", "\n", "remove_images_without_annotations", "=", "True", ",", "\n", "transforms", "=", "None", ",", "\n", "maxWindowSize", "=", "1000", ",", "foldfile", "=", "'./split.json'", ",", "\n", "use_gen", "=", "False", ",", "\n", "gen_fake", "=", "0", "\n", ",", "gen_true", "=", "0", ",", "ratio", "=", "1.", ",", "tta", "=", "False", ")", ":", "\n", "        ", "from", "maskrcnn_benchmark", ".", "data", ".", "datasets", ".", "cell", "import", "CELL", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "cv", "=", "1", "\n", "self", ".", "annFile", "=", "annFile", "\n", "self", ".", "cell", "=", "CELL", "(", "annFile", ")", "\n", "assert", "split", "in", "(", "'train'", ",", "'val'", ",", "'test'", ",", "\n", "'gen'", ")", ",", "\"split error, (train, val, test) available\"", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "maxWS", "=", "maxWindowSize", "\n", "self", ".", "ids", "=", "[", "]", "\n", "self", ".", "image_pool", "=", "{", "}", "\n", "# load train/val/test fold", "\n", "self", ".", "gen_fake", "=", "gen_fake", "\n", "self", ".", "gen_true", "=", "gen_true", "\n", "val_fold", "=", "json", ".", "load", "(", "open", "(", "foldfile", ",", "'r'", ")", ")", "\n", "use_img_list", "=", "_get_img_list", "(", "split", ",", "root", ",", "val_fold", ",", "easy", "=", "True", ",", "\n", "hard", "=", "True", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "cell", "=", "self", ".", "cell", "\n", "winSize", "=", "int", "(", "self", ".", "maxWS", "*", "windowSizeRatio", "[", "self", ".", "split", "]", ")", "\n", "for", "img_id", ",", "img", "in", "sorted", "(", "cell", ".", "imgs", ".", "items", "(", ")", ")", ":", "\n", "            ", "info", "=", "cell", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "\n", "file_name", "=", "info", "[", "'file_name'", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "file_name", "not", "in", "use_img_list", ":", "\n", "                ", "continue", "\n", "", "w", ",", "h", "=", "img", "[", "'width'", "]", ",", "img", "[", "'height'", "]", "\n", "windows", "=", "_get_sw", "(", "w", ",", "h", ",", "winSize", ",", "overlapPercent", "[", "split", "]", ")", "\n", "if", "img_id", "not", "in", "self", ".", "image_pool", ":", "\n", "                ", "self", ".", "image_pool", "[", "img_id", "]", "=", "ops", ".", "open_slide", "(", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "info", "[", "'file_name'", "]", ")", ")", "\n", "# filter images without detection annotations and only noise/tiny annotation", "\n", "", "id_sublist", "=", "[", "{", "\n", "'id'", ":", "info", "[", "'id'", "]", ",", "\n", "'file_name'", ":", "file_name", ",", "\n", "'img_id'", ":", "img_id", ",", "\n", "'location'", ":", "wsize", ",", "\n", "}", "for", "wsize", "in", "windows", "]", "\n", "if", "remove_images_without_annotations", ":", "\n", "                ", "id_sublist", "=", "self", ".", "_remove_unsuitable_patches", "(", "\n", "id_sublist", ",", "\n", "thresh", "=", "0.001", "*", "winSize", "**", "2", ")", "\n", "", "self", ".", "ids", ".", "extend", "(", "id_sublist", ")", "\n", "", "if", "split", "==", "'train'", ":", "\n", "            ", "_total", "=", "len", "(", "self", ".", "ids", ")", "\n", "self", ".", "ids", "=", "self", ".", "ids", "[", ":", "int", "(", "_total", "*", "ratio", ")", "]", "\n", "", "self", ".", "start_id", "=", "len", "(", "self", ".", "ids", ")", "\n", "self", ".", "labels", "=", "{", "}", "\n", "self", ".", "tmp_train_patches_dir", "=", "'../temp_patch'", "+", "'_'", "+", "str", "(", "self", ".", "cv", ")", "\n", "self", ".", "store_tmp_train_patches", "(", ")", "\n", "\n", "self", ".", "category_name_to_contiguous_id", "=", "{", "\n", "c", ":", "i", "for", "i", ",", "c", "in", "enumerate", "(", "PapNucleiDataset", ".", "CLASSES", ")", "\n", "}", "\n", "self", ".", "contiguous_id_to_category_name", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "\n", "self", ".", "category_name_to_contiguous_id", ".", "items", "(", ")", "\n", "}", "\n", "cls", "=", "PapNucleiDataset", ".", "CLASSES", "\n", "self", ".", "class_to_ind", "=", "dict", "(", "zip", "(", "cls", ",", "range", "(", "len", "(", "cls", ")", ")", ")", ")", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "\n", "self", ".", "class_to_ind", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "id_to_img_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "ids", ")", "}", "\n", "\n", "print", "(", "'Done (time={:0.2f}s\\n) '", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "print", "(", "'PapNuclei Dataset has %d source patch images...'", "%", "(", "\n", "len", "(", "self", ".", "ids", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.store_tmp_train_patches": [[520, 551], ["maskrcnn_benchmark.utils.miscellaneous.mkdir", "print", "tqdm.tqdm.tqdm", "print", "range", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "range", "Pap.PapNucleiSourceDataset.image_pool[].read_region().convert", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "Pap.PapNucleiSourceDataset.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "Pap.PapNucleiSourceDataset.image_pool[].read_region", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save"], ["", "def", "store_tmp_train_patches", "(", "self", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "self", ".", "patch_dir", "=", "{", "}", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "self", ".", "tmp_train_patches_dir", ")", "or", "len", "(", "os", ".", "listdir", "(", "self", ".", "tmp_train_patches_dir", ")", ")", "==", "0", ")", ":", "\n", "            ", "mkdir", "(", "self", ".", "tmp_train_patches_dir", ")", "\n", "print", "(", "'create temp patch files...'", ")", "\n", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "self", ".", "start_id", ")", ")", ":", "\n", "                ", "item", "=", "self", ".", "ids", "[", "idx", "]", "\n", "img_id", "=", "item", "[", "'img_id'", "]", "\n", "img", "=", "self", ".", "image_pool", "[", "img_id", "]", ".", "read_region", "(", "\n", "(", "item", "[", "'location'", "]", "[", "0", "]", ",", "item", "[", "'location'", "]", "[", "1", "]", ")", ",", "0", ",", "\n", "(", "1000", ",", "1000", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmp_train_patches_dir", ",", "\n", "item", "[", "'file_name'", "]", "+", "'_'", "+", "str", "(", "item", "[", "'location'", "]", "[", "0", "]", ")", "\n", "+", "'_'", "+", "str", "(", "item", "[", "'location'", "]", "[", "1", "]", ")", "\n", "+", "'.png'", ")", "\n", "img", ".", "save", "(", "img_path", ")", "\n", "self", ".", "patch_dir", "[", "idx", "]", "=", "img_path", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'already have patch files, reuse it'", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "start_id", ")", ":", "\n", "                ", "item", "=", "self", ".", "ids", "[", "idx", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmp_train_patches_dir", ",", "\n", "item", "[", "'file_name'", "]", "+", "'_'", "+", "str", "(", "\n", "item", "[", "'location'", "]", "[", "0", "]", ")", "\n", "+", "'_'", "+", "str", "(", "\n", "item", "[", "'location'", "]", "[", "1", "]", ")", "\n", "+", "'.png'", ")", "\n", "self", ".", "patch_dir", "[", "idx", "]", "=", "img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.__getitem__": [[552, 585], ["torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "target.clip_to_image.clip_to_image.add_field", "maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask", "target.clip_to_image.clip_to_image.add_field", "target.clip_to_image.clip_to_image.clip_to_image", "Pap.PapNucleiSourceDataset.transforms", "len", "int", "Pap.PapNucleiSourceDataset.filter_gt", "PIL.Image.open", "Pap.PapNucleiSourceDataset.image_pool[].read_region().convert", "print", "numpy.random.choice", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "len", "len", "Pap.PapNucleiSourceDataset.image_pool[].read_region", "set", "set"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.filter_gt", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "masks", "=", "[", "]", "\n", "while", "len", "(", "masks", ")", "==", "0", ":", "\n", "            ", "item", "=", "self", ".", "ids", "[", "index", "]", "\n", "\n", "img_id", "=", "item", "[", "'img_id'", "]", "\n", "winSize", "=", "int", "(", "\n", "self", ".", "maxWS", "*", "windowSizeRatio", "[", "self", ".", "split", "]", ")", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "img_path", "=", "self", ".", "patch_dir", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "", "else", ":", "\n", "\n", "                ", "img", "=", "self", ".", "image_pool", "[", "img_id", "]", ".", "read_region", "(", "\n", "(", "item", "[", "'location'", "]", "[", "0", "]", ",", "item", "[", "'location'", "]", "[", "1", "]", ")", ",", "0", ",", "\n", "(", "winSize", ",", "winSize", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "", "masks", ",", "bboxes", ",", "labels", "=", "self", ".", "filter_gt", "(", "item", ")", "\n", "if", "len", "(", "masks", ")", "==", "0", "or", "(", "1", "not", "in", "set", "(", "labels", ")", "or", "2", "not", "\n", "in", "set", "(", "labels", ")", ")", ":", "\n", "                ", "print", "(", "'No mask for index:'", ",", "index", ")", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "ids", ")", ")", "\n", "", "", "bboxes", "=", "torch", ".", "as_tensor", "(", "bboxes", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "# guard against no boxes", "\n", "\n", "target", "=", "BoxList", "(", "bboxes", ",", "img", ".", "size", ",", "mode", "=", "'xyxy'", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ")", "\n", "target", ".", "add_field", "(", "\"labels\"", ",", "labels", ")", "\n", "masks", "=", "SegmentationMask", "(", "masks", ",", "img", ".", "size", ")", "\n", "target", ".", "add_field", "(", "\"masks\"", ",", "masks", ")", "\n", "target", "=", "target", ".", "clip_to_image", "(", "remove_empty", "=", "True", ")", "\n", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "return", "img", ",", "target", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.__len__": [[587, 589], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.get_img_info": [[590, 594], ["None"], "methods", ["None"], ["", "def", "get_img_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_data", "=", "self", ".", "ids", "[", "index", "]", "[", "'location'", "]", "\n", "return", "{", "\"width\"", ":", "img_data", "[", "2", "]", ",", "\"height\"", ":", "img_data", "[", "3", "]", ",", "\n", "\"file_name\"", ":", "self", ".", "ids", "[", "index", "]", "[", "'file_name'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.get_img_in_inference": [[595, 614], ["img_name.split", "numpy.asarray", "Pap.PapNucleiSourceDataset.image_pool[].read_region().convert", "Pap.PapNucleiSourceDataset.image_pool[].read_region().convert", "Pap.PapNucleiSourceDataset.image_pool[].read_region", "Pap.PapNucleiSourceDataset.image_pool[].read_region", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["", "def", "get_img_in_inference", "(", "self", ",", "img_name", ")", ":", "\n", "        ", "\"\"\"\n        haven't fixed\n        Note that the key of image_pool now is \"image_id\" rather than \"file_name\"\n        \"\"\"", "\n", "file_name", ",", "w", ",", "h", "=", "img_name", ".", "split", "(", "'~'", ")", "\n", "# pdb.set_trace()", "\n", "try", ":", "\n", "# it seems that there is a wierd bug, read the image first time will caused trunct", "\n", "            ", "img", "=", "self", ".", "image_pool", "[", "file_name", "]", ".", "read_region", "(", "\n", "(", "int", "(", "w", ")", ",", "int", "(", "h", ")", ")", ",", "0", ",", "(", "\n", "self", ".", "maxWS", ",", "self", ".", "maxWS", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "except", ":", "\n", "            ", "img", "=", "self", ".", "image_pool", "[", "file_name", "]", ".", "read_region", "(", "\n", "(", "int", "(", "w", ")", ",", "int", "(", "h", ")", ")", ",", "0", ",", "(", "\n", "self", ".", "maxWS", ",", "self", ".", "maxWS", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.get_ground_truth": [[615, 640], ["Pap.PapNucleiSourceDataset.filter_gt", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "Pap.PapNucleiSourceDataset.annToRLE", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "len", "pdb.set_trace", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.filter_gt", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.annToRLE", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["", "def", "get_ground_truth", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        haven't test\n        for inference only, return mask in rle modec\n        Args:\n            item (img_id, location(x, y, w, h)) : image_id and its sliding window\n        \"\"\"", "\n", "ratio", "=", "0.005", "if", "self", ".", "split", "==", "'test'", "else", "0.05", "\n", "masks", ",", "bboxes", ",", "labels", "=", "self", ".", "filter_gt", "(", "item", ",", "ratio", ")", "\n", "if", "len", "(", "masks", ")", "==", "0", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "# if item['location'][2] == self.maxWS and item['location'][3] == self.maxWS:", "\n", "#     pdb.set_trace()", "\n", "# assert item['location'][2] == self.maxWS and item['location'][3] == self.maxWS, \"Error in bbox size.\"", "\n", "", "bboxes", "=", "torch", ".", "as_tensor", "(", "bboxes", ")", ".", "reshape", "(", "-", "1", ",", "\n", "4", ")", "# guard against no boxes", "\n", "target", "=", "BoxList", "(", "bboxes", ",", "(", "self", ".", "maxWS", ",", "self", ".", "maxWS", ")", ",", "\n", "mode", "=", "'xyxy'", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ")", "\n", "target", ".", "add_field", "(", "\"labels\"", ",", "labels", ")", "\n", "# masks = SegmentationMask(masks, (img_id['location'][2], img_id['location'][3]))", "\n", "# pdb.set_trace()", "\n", "rle_masks", "=", "self", ".", "annToRLE", "(", "masks", ",", "item", ")", "\n", "target", ".", "add_field", "(", "\"masks\"", ",", "rle_masks", ")", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.filter_gt": [[641, 686], ["time.time", "cell.getAnnIds", "cell.loadAnns", "numpy.array", "Pap._modify_out_of_roi_masks", "pycocotools.mask.append", "bbox.append", "label.append", "Pap._check_if_in_crop_img", "mask_crop[].min", "mask_crop[].min", "mask_crop[].max", "mask_crop[].max", "list", "itertools.chain.from_iterable", "_modify_out_of_roi_masks.tolist"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.getAnnIds", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadAnns", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._modify_out_of_roi_masks", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._check_if_in_crop_img"], ["", "def", "filter_gt", "(", "self", ",", "item", ",", "ratio", "=", "0.005", ")", ":", "\n", "        ", "\"\"\"\n        Get mask, bbox, label in the given image within the sliding window.\n        Args:\n            item (img_id, location(x, y, w, h)) : image_id and its sliding window\n            ratio (float)                       : the minimal area ratio need preserved (cropped bbox area >= original bbox area * ratio)\n        Returns:\n            mask (int list)\n            bbox\n            label\n        \"\"\"", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "cell", "=", "self", ".", "cell", "\n", "img_id", "=", "item", "[", "'img_id'", "]", "\n", "ann_ids", "=", "cell", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", "\n", "anns", "=", "cell", ".", "loadAnns", "(", "ann_ids", ")", "\n", "location", "=", "item", "[", "'location'", "]", "\n", "\n", "mask", ",", "bbox", ",", "label", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "mask_ori", "=", "np", ".", "array", "(", "ann", "[", "'segmentation'", "]", ",", "np", ".", "int", ")", "\n", "if", "mask_ori", ".", "shape", "[", "0", "]", "<=", "2", ":", "\n", "# remove the annotation whose mask coordinate number <= 2. (line or point cannot be considered as a mask)", "\n", "                ", "continue", "\n", "", "if", "not", "_check_if_in_crop_img", "(", "mask_ori", ",", "location", ")", ":", "\n", "                ", "continue", "\n", "", "mask_crop", "=", "_modify_out_of_roi_masks", "(", "mask_ori", ",", "location", ")", "\n", "# bbox_crop (xmin, ymin, xmax, ymax)", "\n", "bbox_crop", "=", "[", "mask_crop", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "mask_crop", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "\n", "mask_crop", "[", ":", ",", "0", "]", ".", "max", "(", ")", ",", "mask_crop", "[", ":", ",", "1", "]", ".", "max", "(", ")", "]", "\n", "# remove bbox of which the majority outside the patch", "\n", "bbox_area_ori", "=", "ann", "[", "'bbox'", "]", "[", "2", "]", "*", "ann", "[", "'bbox'", "]", "[", "3", "]", "\n", "bbox_area_crop", "=", "(", "bbox_crop", "[", "2", "]", "-", "bbox_crop", "[", "0", "]", ")", "*", "(", "\n", "bbox_crop", "[", "3", "]", "-", "bbox_crop", "[", "1", "]", ")", "\n", "if", "bbox_area_crop", "<", "bbox_area_ori", "*", "ratio", ":", "\n", "                ", "continue", "\n", "# polygons: a list of list of lists of numbers.", "\n", "", "mask_crop", "=", "[", "\n", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "\n", "mask_crop", ".", "tolist", "(", ")", ")", ")", "]", "\n", "mask", ".", "append", "(", "mask_crop", ")", "\n", "bbox", ".", "append", "(", "bbox_crop", ")", "\n", "# class +1 because in json file, we begin at class 0 and ignore the background", "\n", "label", ".", "append", "(", "ann", "[", "'category_id'", "]", "+", "1", ")", "\n", "", "return", "mask", ",", "bbox", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset._remove_unsuitable_patches": [[687, 710], ["Pap.PapNucleiSourceDataset.filter_gt", "sum", "len", "ids.append"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.filter_gt"], ["", "def", "_remove_unsuitable_patches", "(", "self", ",", "id_list", ",", "thresh", ")", ":", "\n", "        ", "\"\"\"\n        remove the patches with no masks in the location region\n        or with only small ratio of masks ( ratio*w*h )\n        Args:\n            id_list [(img_id, location(x, y, w, h))] : image_id and its sliding window\n            thresh                                   : bbox area need to be greater than thresh\n        Returns:\n            ids : id list satisfying the constrains\n        \"\"\"", "\n", "# remove the patches with only small ratio of masks ( ratio*w*h )", "\n", "ids", "=", "[", "]", "\n", "for", "item", "in", "id_list", ":", "\n", "# pdb.set_trace()", "\n", "            ", "mask", ",", "bbox", ",", "label", "=", "self", ".", "filter_gt", "(", "item", ")", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "area", "=", "sum", "(", "\n", "[", "(", "obj", "[", "2", "]", "-", "obj", "[", "0", "]", ")", "*", "(", "obj", "[", "3", "]", "-", "obj", "[", "1", "]", ")", "for", "obj", "in", "\n", "bbox", "]", ")", "\n", "if", "area", ">", "thresh", ":", "\n", "                ", "ids", ".", "append", "(", "item", ")", "\n", "", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset._reset_size": [[711, 720], ["int"], "methods", ["None"], ["", "def", "_reset_size", "(", "self", ",", "anno", ")", ":", "\n", "        ", "\"\"\"\n        Haven't test\n        May have problem anno['id']\n        \"\"\"", "\n", "size", "=", "int", "(", "self", ".", "maxWS", "*", "windowSizeRatio", "[", "self", ".", "split", "]", ")", "\n", "anno", "[", "'id'", "]", "[", "'location'", "]", "[", "2", "]", "=", "size", "\n", "anno", "[", "'id'", "]", "[", "'location'", "]", "[", "3", "]", "=", "size", "\n", "return", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.annToRLE": [[721, 747], ["int", "isinstance", "pycocotools.mask.frPyObjects", "pycocotools.mask.merge", "RLES.append", "type", "pycocotools.mask.frPyObjects", "pycocotools.mask.merge", "RLES.append", "p.numpy"], "methods", ["None"], ["", "def", "annToRLE", "(", "self", ",", "masks", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE to RLE.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "size", "=", "int", "(", "self", ".", "maxWS", "*", "windowSizeRatio", "[", "self", ".", "split", "]", ")", "\n", "\n", "h", ",", "w", "=", "size", ",", "size", "\n", "RLES", "=", "[", "]", "\n", "if", "isinstance", "(", "masks", ",", "SegmentationMask", ")", ":", "\n", "            ", "for", "segm", "in", "masks", ".", "polygons", ":", "\n", "                ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "\n", "[", "p", ".", "numpy", "(", ")", "for", "p", "in", "segm", "]", ",", "h", ",", "w", "\n", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "RLES", ".", "append", "(", "rle", ")", "\n", "", "", "elif", "type", "(", "masks", ")", "==", "list", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "            ", "for", "polygon", "in", "masks", ":", "\n", "                ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "polygon", ",", "h", ",", "w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "RLES", ".", "append", "(", "rle", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "RLES", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.__repr__": [[748, 761], ["Pap.PapNucleiSourceDataset.__len__", "Pap.PapNucleiSourceDataset.transforms.__repr__().replace", "Pap.PapNucleiSourceDataset.transforms.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.weighted_random_sampler.WeightedRandomSubSampler.__len__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Compose.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "\n", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "fmt_str", "+=", "'    Annotation File: {}\\n'", ".", "format", "(", "self", ".", "annFile", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "\n", "self", ".", "transforms", ".", "__repr__", "(", ")", ".", "replace", "(", "\n", "'\\n'", ",", "\n", "'\\n'", "+", "' '", "*", "len", "(", "\n", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiUnlabelDataset.__init__": [[769, 815], ["time.time", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "enumerate", "dict", "print", "print", "Pap.PapNucleiUnlabelDataset.ids.append", "zip", "enumerate", "Pap.PapNucleiUnlabelDataset.category_name_to_contiguous_id.items", "range", "Pap.PapNucleiUnlabelDataset.class_to_ind.items", "enumerate", "len", "len", "time.time"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "root", ",", "annFile", ",", "split", ",", "\n", "transforms", "=", "None", ",", "\n", "maxWindowSize", "=", "1000", ",", "\n", "aug_k", "=", "2", ",", "gen_fake", "=", "0", ",", "gen_true", "=", "0", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "cv", "=", "1", "\n", "self", ".", "aug_k", "=", "aug_k", "+", "1", "\n", "self", ".", "annFile", "=", "annFile", "\n", "assert", "split", "in", "(", "'train'", ",", "'val'", ",", "'test'", ",", "\n", "'gen'", ")", ",", "\"split error, (train, val, test) available\"", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "maxWS", "=", "maxWindowSize", "\n", "self", ".", "ids", "=", "[", "]", "\n", "self", ".", "image_pool", "=", "{", "}", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "imagelist", "=", "os", ".", "listdir", "(", "root", ")", "\n", "imagelist", "=", "[", "f", "for", "f", "in", "imagelist", "if", "'.png'", "in", "f", "]", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "imagelist", ")", ":", "\n", "            ", "self", ".", "ids", ".", "append", "(", "\n", "{", "\n", "'id'", ":", "idx", ",", "\n", "'file_name'", ":", "image", ",", "\n", "'img_id'", ":", "idx", ",", "\n", "'location'", ":", "(", "0", ",", "0", ",", "1000", ",", "1000", ")", ",", "\n", "}", ")", "\n", "", "self", ".", "labels", "=", "{", "}", "\n", "\n", "self", ".", "category_name_to_contiguous_id", "=", "{", "\n", "c", ":", "i", "for", "i", ",", "c", "in", "enumerate", "(", "PapNucleiDataset", ".", "CLASSES", ")", "\n", "}", "\n", "self", ".", "contiguous_id_to_category_name", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "\n", "self", ".", "category_name_to_contiguous_id", ".", "items", "(", ")", "\n", "}", "\n", "cls", "=", "PapNucleiDataset", ".", "CLASSES", "\n", "self", ".", "class_to_ind", "=", "dict", "(", "zip", "(", "cls", ",", "range", "(", "len", "(", "cls", ")", ")", ")", ")", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "\n", "self", ".", "class_to_ind", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "id_to_img_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "ids", ")", "}", "\n", "\n", "print", "(", "'Done (time={:0.2f}s\\n) '", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "print", "(", "'PapNuclei Dataset has %d Unlabelled patch images...'", "%", "(", "\n", "len", "(", "self", ".", "ids", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiUnlabelDataset.__getitem__": [[818, 831], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open", "range", "copy.deepcopy", "aug_imgs.append"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "ids", "[", "index", "]", "[", "\n", "'file_name'", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "\n", "img", ",", "target", "=", "self", ".", "transforms", "[", "0", "]", "(", "img", ",", "None", ")", "\n", "# copy image", "\n", "aug_imgs", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "aug_k", ")", ":", "\n", "            ", "new_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "new_img", ",", "target", "=", "self", ".", "transforms", "[", "1", "]", "(", "new_img", ",", "None", ")", "\n", "aug_imgs", ".", "append", "(", "new_img", ")", "\n", "", "return", "aug_imgs", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiUnlabelDataset.__len__": [[833, 835], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiUnlabelDataset.get_img_info": [[836, 841], ["None"], "methods", ["None"], ["", "def", "get_img_info", "(", "self", ",", "index", ")", ":", "\n", "# img_id = self.id_to_img_map[index]", "\n", "        ", "img_data", "=", "self", ".", "ids", "[", "index", "]", "[", "'location'", "]", "\n", "return", "{", "\"width\"", ":", "img_data", "[", "2", "]", ",", "\"height\"", ":", "img_data", "[", "3", "]", ",", "\n", "\"file_name\"", ":", "self", ".", "ids", "[", "index", "]", "[", "'file_name'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiUnlabelDataset._reset_size": [[842, 851], ["int"], "methods", ["None"], ["", "def", "_reset_size", "(", "self", ",", "anno", ")", ":", "\n", "        ", "\"\"\"\n        Haven't test\n        May have problem anno['id']\n        \"\"\"", "\n", "size", "=", "int", "(", "self", ".", "maxWS", "*", "windowSizeRatio", "[", "self", ".", "split", "]", ")", "\n", "anno", "[", "'id'", "]", "[", "'location'", "]", "[", "2", "]", "=", "size", "\n", "anno", "[", "'id'", "]", "[", "'location'", "]", "[", "3", "]", "=", "size", "\n", "return", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiUnlabelDataset.__repr__": [[852, 865], ["Pap.PapNucleiUnlabelDataset.__len__", "Pap.PapNucleiUnlabelDataset.transforms.__repr__().replace", "Pap.PapNucleiUnlabelDataset.transforms.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.weighted_random_sampler.WeightedRandomSubSampler.__len__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Compose.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "\n", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "fmt_str", "+=", "'    Annotation File: {}\\n'", ".", "format", "(", "self", ".", "annFile", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "\n", "self", ".", "transforms", ".", "__repr__", "(", ")", ".", "replace", "(", "\n", "'\\n'", ",", "\n", "'\\n'", "+", "' '", "*", "len", "(", "\n", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._get_img_list": [[40, 45], ["None"], "function", ["None"], ["def", "_get_img_list", "(", "split", ",", "root", ",", "folddict", ",", "easy", "=", "True", ",", "hard", "=", "True", ")", ":", "\n", "    ", "imglist", "=", "[", "]", "\n", "# TODO: GET YOU OWN DATASET IMAGELIST", "\n", "# imglist = ['AGC1_BD1601497']", "\n", "return", "imglist", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._get_sw": [[47, 54], ["slidingwindow.generateForSize", "window.getRect"], "function", ["None"], ["", "def", "_get_sw", "(", "w", ",", "h", ",", "windowSize", ",", "overlapPercent", ")", ":", "\n", "# reture: location (x, y, w, h)", "\n", "    ", "windows", "=", "sw", ".", "generateForSize", "(", "w", ",", "h", ",", "sw", ".", "DimOrder", ".", "HeightWidthChannel", ",", "\n", "windowSize", ",", "overlapPercent", ",", "\n", "transforms", "=", "[", "]", ")", "\n", "windows", "=", "[", "window", ".", "getRect", "(", ")", "for", "window", "in", "windows", "]", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._check_if_in_crop_img": [[56, 67], ["numpy.logical_and().any", "numpy.greater", "numpy.less", "numpy.greater", "numpy.less", "numpy.logical_and"], "function", ["None"], ["", "def", "_check_if_in_crop_img", "(", "mask", ",", "location", ")", ":", "\n", "    ", "\"\"\"\n    Check if mask has points in the location range\n    :para mask (int array) : polygon of mask\n    :location (tuple)      : sliding window (x, y, w, h)\n    \"\"\"", "\n", "x", "=", "(", "np", ".", "greater", "(", "mask", "[", ":", ",", "0", "]", ",", "location", "[", "0", "]", ")", ")", "&", "(", "\n", "np", ".", "less", "(", "mask", "[", ":", ",", "0", "]", ",", "(", "location", "[", "0", "]", "+", "location", "[", "2", "]", ")", ")", ")", "\n", "y", "=", "(", "np", ".", "greater", "(", "mask", "[", ":", ",", "1", "]", ",", "location", "[", "1", "]", ")", ")", "&", "(", "\n", "np", ".", "less", "(", "mask", "[", ":", ",", "1", "]", ",", "(", "location", "[", "1", "]", "+", "location", "[", "3", "]", ")", ")", ")", "\n", "return", "np", ".", "logical_and", "(", "x", ",", "y", ")", ".", "any", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap._modify_out_of_roi_masks": [[69, 102], ["polygon.copy", "list", "max", "min", "max", "min", "mask[].clip", "mask[].clip", "numpy.nonzero", "numpy.nonzero", "set", "set"], "function", ["None"], ["", "def", "_modify_out_of_roi_masks", "(", "polygon", ",", "location", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        polygon (numpy array, np.int) : polygons (n*2)\n        location (tuple)              : sliding window (x, y, w, h)\n    Returns:\n        mask (numpy array)            : mask after cropping\n    ISSUE!!\n        bbox not tight!!\n    \"\"\"", "\n", "#####", "\n", "# pdb.set_trace()", "\n", "mask", "=", "polygon", ".", "copy", "(", ")", "\n", "\n", "mask", "[", ":", ",", "0", "]", "=", "(", "polygon", "[", ":", ",", "0", "]", "-", "location", "[", "0", "]", ")", "\n", "mask", "[", ":", ",", "1", "]", "=", "(", "polygon", "[", ":", ",", "1", "]", "-", "location", "[", "1", "]", ")", "\n", "in_roi_w", "=", "np", ".", "nonzero", "(", "(", "mask", "[", ":", ",", "0", "]", ">=", "0", ")", "*", "(", "mask", "[", ":", ",", "0", "]", "<=", "location", "[", "2", "]", ")", ")", "[", "0", "]", "\n", "in_roi_h", "=", "np", ".", "nonzero", "(", "(", "mask", "[", ":", ",", "1", "]", ">=", "0", ")", "*", "(", "mask", "[", ":", ",", "1", "]", "<=", "location", "[", "3", "]", ")", ")", "[", "0", "]", "\n", "in_roi", "=", "list", "(", "set", "(", "in_roi_h", ")", "&", "set", "(", "in_roi_w", ")", ")", "\n", "in_roi_mask", "=", "mask", "[", "in_roi", "]", "\n", "max_w", "=", "max", "(", "in_roi_mask", "[", ":", ",", "0", "]", ")", "\n", "min_w", "=", "min", "(", "in_roi_mask", "[", ":", ",", "0", "]", ")", "\n", "max_h", "=", "max", "(", "in_roi_mask", "[", ":", ",", "1", "]", ")", "\n", "min_h", "=", "min", "(", "in_roi_mask", "[", ":", ",", "1", "]", ")", "\n", "mask", "[", ":", ",", "0", "]", "=", "mask", "[", ":", ",", "0", "]", ".", "clip", "(", "min", "=", "min_w", ",", "max", "=", "max_w", ")", "\n", "mask", "[", ":", ",", "1", "]", "=", "mask", "[", ":", ",", "1", "]", ".", "clip", "(", "min", "=", "min_h", ",", "max", "=", "max_h", ")", "\n", "#####", "\n", "# mask = polygon.copy()", "\n", "# mask[:, 0] = (polygon[:, 0] - location[0]).clip(min=0, max=location[2])", "\n", "# mask[:, 1] = (polygon[:, 1] - location[1]).clip(min=0, max=location[3])", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.coco.COCODataset.__init__": [[10, 33], ["super().__init__", "sorted", "enumerate", "coco.COCODataset.json_category_id_to_contiguous_id.items", "enumerate", "coco.COCODataset.coco.getCatIds", "len", "coco.COCODataset.coco.getAnnIds"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.getCatIds", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.getAnnIds"], ["    ", "def", "__init__", "(", "\n", "self", ",", "ann_file", ",", "root", ",", "remove_images_without_annotations", ",", "transforms", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "COCODataset", ",", "self", ")", ".", "__init__", "(", "root", ",", "ann_file", ")", "\n", "# sort indices for reproducible results", "\n", "self", ".", "ids", "=", "sorted", "(", "self", ".", "ids", ")", "\n", "\n", "# filter images without detection annotations", "\n", "if", "remove_images_without_annotations", ":", "\n", "            ", "self", ".", "ids", "=", "[", "\n", "img_id", "\n", "for", "img_id", "in", "self", ".", "ids", "\n", "if", "len", "(", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ",", "iscrowd", "=", "None", ")", ")", ">", "0", "\n", "]", "\n", "\n", "", "self", ".", "json_category_id_to_contiguous_id", "=", "{", "\n", "v", ":", "i", "+", "1", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "coco", ".", "getCatIds", "(", ")", ")", "\n", "}", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "json_category_id_to_contiguous_id", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "id_to_img_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "ids", ")", "}", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.coco.COCODataset.__getitem__": [[34, 60], ["super().__getitem__", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert", "torch.tensor", "target.clip_to_image.clip_to_image.add_field", "maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask", "target.clip_to_image.clip_to_image.add_field", "target.clip_to_image.clip_to_image.clip_to_image", "coco.COCODataset.transforms", "torch.as_tensor", "maskrcnn_benchmark.structures.bounding_box.BoxList"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.__getitem__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.clip_to_image"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "anno", "=", "super", "(", "COCODataset", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "# iscrowed = 0 means polygon annotation, 1 means rle annotation", "\n", "# filter crowd annotations", "\n", "# TODO might be better to add an extra field", "\n", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", "\n", "\n", "boxes", "=", "[", "obj", "[", "\"bbox\"", "]", "for", "obj", "in", "anno", "]", "\n", "boxes", "=", "torch", ".", "as_tensor", "(", "boxes", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "# guard against no boxes", "\n", "target", "=", "BoxList", "(", "boxes", ",", "img", ".", "size", ",", "mode", "=", "\"xywh\"", ")", ".", "convert", "(", "\"xyxy\"", ")", "\n", "\n", "classes", "=", "[", "obj", "[", "\"category_id\"", "]", "for", "obj", "in", "anno", "]", "\n", "classes", "=", "[", "self", ".", "json_category_id_to_contiguous_id", "[", "c", "]", "for", "c", "in", "classes", "]", "\n", "classes", "=", "torch", ".", "tensor", "(", "classes", ")", "\n", "target", ".", "add_field", "(", "\"labels\"", ",", "classes", ")", "\n", "\n", "masks", "=", "[", "obj", "[", "\"segmentation\"", "]", "for", "obj", "in", "anno", "]", "\n", "masks", "=", "SegmentationMask", "(", "masks", ",", "img", ".", "size", ")", "\n", "target", ".", "add_field", "(", "\"masks\"", ",", "masks", ")", "\n", "\n", "target", "=", "target", ".", "clip_to_image", "(", "remove_empty", "=", "True", ")", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.coco.COCODataset.get_img_info": [[61, 65], ["None"], "methods", ["None"], ["", "def", "get_img_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "id_to_img_map", "[", "index", "]", "\n", "img_data", "=", "self", ".", "coco", ".", "imgs", "[", "img_id", "]", "\n", "return", "img_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.__init__": [[54, 74], ["dict", "dict", "dict", "dict", "collections.defaultdict", "collections.defaultdict", "print", "time.time", "json.load", "print", "cell.CELL.createIndex", "open", "type", "type", "time.time"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.createIndex"], ["    ", "def", "__init__", "(", "self", ",", "annotation_file", "=", "None", ",", ")", ":", "\n", "# https://github.com/cocodataset/cocoapi/blob/master/PythonAPI/pycocotools/coco.py", "\n", "        ", "\"\"\"\n        Constructor of Cervical Cell Segmentation helper class for reading and visualizing annotations.\n        :param annotation_file (str): location of annotation file\n        :param image_folder (str): location to the folder that hosts images.\n        :return:\n        \"\"\"", "\n", "# load dataset", "\n", "\n", "self", ".", "dataset", ",", "self", ".", "anns", ",", "self", ".", "cats", ",", "self", ".", "imgs", "=", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "self", ".", "imgToAnns", ",", "self", ".", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "if", "not", "annotation_file", "==", "None", ":", "\n", "            ", "print", "(", "'CELL class: loading annotations into memory...'", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "dataset", "=", "json", ".", "load", "(", "open", "(", "annotation_file", ",", "'r'", ")", ")", "\n", "assert", "type", "(", "dataset", ")", "==", "dict", ",", "'annotation file format {} not supported'", ".", "format", "(", "type", "(", "dataset", ")", ")", "\n", "print", "(", "'Done (time={:0.2f}s)'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "createIndex", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.createIndex": [[75, 105], ["print", "print", "collections.defaultdict", "collections.defaultdict", "imgToAnns[].append", "catToImgs[].append"], "methods", ["None"], ["", "", "def", "createIndex", "(", "self", ")", ":", "\n", "# create index", "\n", "        ", "print", "(", "'creating index...'", ")", "\n", "anns", ",", "cats", ",", "imgs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "imgToAnns", ",", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "if", "'annotations'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "                ", "imgToAnns", "[", "ann", "[", "'image_id'", "]", "]", ".", "append", "(", "ann", ")", "\n", "anns", "[", "ann", "[", "'id'", "]", "]", "=", "ann", "\n", "\n", "", "", "if", "'images'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", ":", "\n", "                ", "imgs", "[", "img", "[", "'id'", "]", "]", "=", "img", "\n", "\n", "", "", "if", "'categories'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "cat", "in", "self", ".", "dataset", "[", "'categories'", "]", ":", "\n", "                ", "cats", "[", "cat", "[", "'id'", "]", "]", "=", "cat", "\n", "\n", "", "", "if", "'annotations'", "in", "self", ".", "dataset", "and", "'categories'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "                ", "catToImgs", "[", "ann", "[", "'category_id'", "]", "]", ".", "append", "(", "ann", "[", "'image_id'", "]", ")", "\n", "\n", "", "", "print", "(", "'index created!\\n'", ")", "\n", "\n", "# create class members", "\n", "self", ".", "anns", "=", "anns", "\n", "self", ".", "imgToAnns", "=", "imgToAnns", "\n", "self", ".", "catToImgs", "=", "catToImgs", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "cats", "=", "cats", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info": [[106, 113], ["cell.CELL.dataset[].items", "print"], "methods", ["None"], ["", "def", "info", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print information about the annotation file.\n        :return:\n        \"\"\"", "\n", "for", "key", ",", "value", "in", "self", ".", "dataset", "[", "'info'", "]", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.getAnnIds": [[114, 137], ["cell._isArrayLike", "cell._isArrayLike", "len", "len", "len", "list", "len", "itertools.chain.from_iterable", "len", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval._isArrayLike", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval._isArrayLike"], ["", "", "def", "getAnnIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ",", "areaRng", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Get ann ids that satisfy given filter conditions. default skips that filter\n        :param imgIds  (int array)     : get anns for given imgs\n               catIds  (int array)     : get anns for given cats\n               areaRng (float array)   : get anns for given area range (e.g. [0 inf])\n        :return: ids (int array)       : integer array of ann ids\n        \"\"\"", "\n", "imgIds", "=", "imgIds", "if", "_isArrayLike", "(", "imgIds", ")", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "_isArrayLike", "(", "catIds", ")", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "len", "(", "areaRng", ")", "==", "0", ":", "\n", "            ", "anns", "=", "self", ".", "dataset", "[", "'annotations'", "]", "\n", "", "else", ":", "\n", "            ", "if", "not", "len", "(", "imgIds", ")", "==", "0", ":", "\n", "                ", "lists", "=", "[", "self", ".", "imgToAnns", "[", "imgId", "]", "for", "imgId", "in", "imgIds", "if", "imgId", "in", "self", ".", "imgToAnns", "]", "\n", "anns", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "lists", ")", ")", "\n", "", "else", ":", "\n", "                ", "anns", "=", "self", ".", "dataset", "[", "'annotations'", "]", "\n", "", "anns", "=", "anns", "if", "len", "(", "catIds", ")", "==", "0", "else", "[", "ann", "for", "ann", "in", "anns", "if", "ann", "[", "'category_id'", "]", "in", "catIds", "]", "\n", "anns", "=", "anns", "if", "len", "(", "areaRng", ")", "==", "0", "else", "[", "ann", "for", "ann", "in", "anns", "if", "ann", "[", "'area'", "]", ">", "areaRng", "[", "0", "]", "and", "ann", "[", "'area'", "]", "<", "areaRng", "[", "1", "]", "]", "\n", "ids", "=", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "anns", "]", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.getCatIds": [[138, 156], ["cell._isArrayLike", "cell._isArrayLike", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval._isArrayLike", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval._isArrayLike"], ["", "def", "getCatIds", "(", "self", ",", "catNms", "=", "[", "]", ",", "catIds", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        filtering parameters. default skips that filter.\n        :param catNms (str array)  : get cats for given cat names\n        :param catIds (int array)  : get cats for given cat ids\n        :return: ids (int array)   : integer array of cat ids\n        \"\"\"", "\n", "catNms", "=", "catNms", "if", "_isArrayLike", "(", "catNms", ")", "else", "[", "catNms", "]", "\n", "catIds", "=", "catIds", "if", "_isArrayLike", "(", "catIds", ")", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "catNms", ")", "==", "len", "(", "supNms", ")", "==", "len", "(", "catIds", ")", "==", "0", ":", "\n", "            ", "cats", "=", "self", ".", "dataset", "[", "'categories'", "]", "\n", "", "else", ":", "\n", "            ", "cats", "=", "self", ".", "dataset", "[", "'categories'", "]", "\n", "cats", "=", "cats", "if", "len", "(", "catNms", ")", "==", "0", "else", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'name'", "]", "in", "catNms", "]", "\n", "cats", "=", "cats", "if", "len", "(", "catIds", ")", "==", "0", "else", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'id'", "]", "in", "catIds", "]", "\n", "", "ids", "=", "[", "cat", "[", "'id'", "]", "for", "cat", "in", "cats", "]", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.getImgIds": [[157, 177], ["list", "cell._isArrayLike", "cell._isArrayLike", "len", "len", "cell.CELL.imgs.keys", "set", "enumerate", "set", "set", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval._isArrayLike", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval._isArrayLike"], ["", "def", "getImgIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Get img ids that satisfy given filter conditions.\n        :param imgIds (int array) : get imgs for given ids\n        :param catIds (int array) : get imgs with all given cats\n        :return: ids (int array)  : integer array of img ids\n        '''", "\n", "imgIds", "=", "imgIds", "if", "_isArrayLike", "(", "imgIds", ")", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "_isArrayLike", "(", "catIds", ")", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "0", ":", "\n", "            ", "ids", "=", "self", ".", "imgs", ".", "keys", "(", ")", "\n", "", "else", ":", "\n", "            ", "ids", "=", "set", "(", "imgIds", ")", "\n", "for", "i", ",", "catId", "in", "enumerate", "(", "catIds", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "len", "(", "ids", ")", "==", "0", ":", "\n", "                    ", "ids", "=", "set", "(", "self", ".", "catToImgs", "[", "catId", "]", ")", "\n", "", "else", ":", "\n", "                    ", "ids", "&=", "set", "(", "self", ".", "catToImgs", "[", "catId", "]", ")", "\n", "", "", "", "return", "list", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadAnns": [[178, 188], ["cell._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval._isArrayLike"], ["", "def", "loadAnns", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying anns\n        :return: anns (object array) : loaded ann objects\n        \"\"\"", "\n", "if", "_isArrayLike", "(", "ids", ")", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadCats": [[189, 199], ["cell._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval._isArrayLike"], ["", "", "def", "loadCats", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load cats with the specified ids.\n        :param ids (int array)       : integer ids specifying cats\n        :return: cats (object array) : loaded cat objects\n        \"\"\"", "\n", "if", "_isArrayLike", "(", "ids", ")", ":", "\n", "            ", "return", "[", "self", ".", "cats", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "cats", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadImgs": [[200, 210], ["cell._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval._isArrayLike"], ["", "", "def", "loadImgs", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying img\n        :return: imgs (object array) : loaded img objects\n        \"\"\"", "\n", "if", "_isArrayLike", "(", "ids", ")", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.showAnns": [[211, 245], ["len", "Exception", "matplotlib.gca", "matplotlib.gca.set_autoscale_on", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "matplotlib.gca.set_xlim", "matplotlib.gca.set_ylim", "type", "numpy.array", "polygons.append", "color.append", "matplotlib.patches.Polygon", "numpy.random.random"], "methods", ["None"], ["", "", "def", "showAnns", "(", "self", ",", "anns", ")", ":", "\n", "        ", "\"\"\"\n        Display the specified annotations.\n        :param anns (array of object): annotations to display\n        :return: None\n        \"\"\"", "\n", "if", "len", "(", "anns", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "if", "'segmentation'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "datasetType", "=", "'instances'", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'datasetType not supported'", ")", "\n", "", "if", "datasetType", "==", "'instances'", ":", "\n", "            ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_autoscale_on", "(", "False", ")", "\n", "polygons", "=", "[", "]", "\n", "color", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "c", "=", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "3", ")", ")", "*", "0.6", "+", "0.4", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "if", "'segmentation'", "in", "ann", ":", "\n", "                    ", "if", "type", "(", "ann", "[", "'segmentation'", "]", ")", "==", "list", ":", "\n", "# polygon", "\n", "# polygon format in Cervical Cell Segmentation dataset is different from the COCO dataset.", "\n", "                        ", "poly", "=", "np", ".", "array", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "polygons", ".", "append", "(", "Polygon", "(", "poly", ")", ")", "\n", "color", ".", "append", "(", "c", ")", "\n", "", "", "", "p", "=", "PatchCollection", "(", "polygons", ",", "facecolor", "=", "color", ",", "linewidths", "=", "0", ",", "alpha", "=", "0.4", ")", "\n", "ax", ".", "add_collection", "(", "p", ")", "\n", "p", "=", "PatchCollection", "(", "polygons", ",", "facecolor", "=", "'none'", ",", "edgecolors", "=", "color", ",", "linewidths", "=", "2", ")", "\n", "ax", ".", "add_collection", "(", "p", ")", "\n", "# ==== added by xujq", "\n", "t", "=", "self", ".", "imgs", "[", "ann", "[", "'image_id'", "]", "]", "\n", "ax", ".", "set_xlim", "(", "right", "=", "t", "[", "'width'", "]", ")", "\n", "ax", ".", "set_ylim", "(", "top", "=", "t", "[", "'height'", "]", ")", "\n", "# ================", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadRes": [[247, 291], ["cell.CELL", "print", "time.time", "print", "cell.CELL.createIndex", "json.load", "type", "set", "copy.deepcopy", "enumerate", "type", "type", "open", "type", "cell.CELL.loadNumpyAnnotations", "set", "set", "copy.deepcopy", "enumerate", "cell.CELL.getImgIds", "pycocotools.mask.area", "time.time", "pycocotools.mask.toBbox"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.createIndex", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadNumpyAnnotations", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.getImgIds", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.area", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pycoco.mask.toBbox"], ["", "", "def", "loadRes", "(", "self", ",", "resFile", ")", ":", "\n", "        ", "\"\"\"\n        Load result file and return a result api object.\n        :param   resFile (str)     : file name of result file\n        :return: res (obj)         : result api object\n        \"\"\"", "\n", "res", "=", "CELL", "(", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", "]", "\n", "\n", "print", "(", "'Loading and preparing results...'", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "type", "(", "resFile", ")", "==", "str", "or", "type", "(", "resFile", ")", "==", "unicode", ":", "\n", "            ", "anns", "=", "json", ".", "load", "(", "open", "(", "resFile", ")", ")", "\n", "", "elif", "type", "(", "resFile", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "anns", "=", "self", ".", "loadNumpyAnnotations", "(", "resFile", ")", "\n", "", "else", ":", "\n", "            ", "anns", "=", "resFile", "\n", "", "assert", "type", "(", "anns", ")", "==", "list", ",", "'results in not an array of objects'", "\n", "annsImgIds", "=", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", "\n", "assert", "set", "(", "annsImgIds", ")", "==", "(", "set", "(", "annsImgIds", ")", "&", "set", "(", "self", ".", "getImgIds", "(", ")", ")", ")", ",", "'Results do not correspond to current cell set'", "\n", "if", "'bbox'", "in", "anns", "[", "0", "]", "and", "not", "anns", "[", "0", "]", "[", "'bbox'", "]", "==", "[", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "bb", "=", "ann", "[", "'bbox'", "]", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "[", "bb", "[", "0", "]", ",", "bb", "[", "0", "]", "+", "bb", "[", "2", "]", ",", "bb", "[", "1", "]", ",", "bb", "[", "1", "]", "+", "bb", "[", "3", "]", "]", "\n", "if", "not", "'segmentation'", "in", "ann", ":", "\n", "# segmentation different from coco", "\n", "                    ", "ann", "[", "'segmentation'", "]", "=", "[", "[", "x1", ",", "y1", "]", ",", "[", "x1", ",", "y2", "]", ",", "[", "x2", ",", "y2", "]", ",", "[", "x2", ",", "y1", "]", "]", "\n", "", "ann", "[", "'area'", "]", "=", "bb", "[", "2", "]", "*", "bb", "[", "3", "]", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "", "", "elif", "'segmentation'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "# now only support compressed RLE format as segmentation results", "\n", "                ", "ann", "[", "'area'", "]", "=", "maskUtils", ".", "area", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "if", "not", "'bbox'", "in", "ann", ":", "\n", "                    ", "ann", "[", "'bbox'", "]", "=", "maskUtils", ".", "toBbox", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "", "", "print", "(", "'DONE (t={:0.2f}s)'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "res", ".", "dataset", "[", "'annotations'", "]", "=", "anns", "\n", "res", ".", "createIndex", "(", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.download": [[292, 294], ["None"], "methods", ["None"], ["", "def", "download", "(", "self", ",", "tarDir", "=", "None", ",", "imgIds", "=", "[", "]", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadNumpyAnnotations": [[295, 317], ["print", "print", "range", "type", "print", "int", "int"], "methods", ["None"], ["", "def", "loadNumpyAnnotations", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Convert result data from a numpy array [Nx7] where each row contains {imageID,x1,y1,w,h,score,class}\n        :param  data (numpy.ndarray)\n        :return: annotations (python nested list)\n        \"\"\"", "\n", "print", "(", "'Converting ndarray to lists...'", ")", "\n", "assert", "(", "type", "(", "data", ")", "==", "np", ".", "ndarray", ")", "\n", "print", "(", "data", ".", "shape", ")", "\n", "assert", "(", "data", ".", "shape", "[", "1", "]", "==", "7", ")", "\n", "N", "=", "data", ".", "shape", "[", "0", "]", "\n", "ann", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "if", "i", "%", "1000000", "==", "0", ":", "\n", "                ", "print", "(", "'{}/{}'", ".", "format", "(", "i", ",", "N", ")", ")", "\n", "", "ann", "+=", "[", "{", "\n", "'image_id'", ":", "int", "(", "data", "[", "i", ",", "0", "]", ")", ",", "\n", "'bbox'", ":", "[", "data", "[", "i", ",", "1", "]", ",", "data", "[", "i", ",", "2", "]", ",", "data", "[", "i", ",", "3", "]", ",", "data", "[", "i", ",", "4", "]", "]", ",", "\n", "'score'", ":", "data", "[", "i", ",", "5", "]", ",", "\n", "'category_id'", ":", "int", "(", "data", "[", "i", ",", "6", "]", ")", ",", "\n", "}", "]", "\n", "", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.annToRLE": [[318, 338], ["type", "pycocotools.mask.frPyObjects", "pycocotools.mask.merge", "type", "pycocotools.mask.frPyObjects"], "methods", ["None"], ["", "def", "annToRLE", "(", "self", ",", "ann", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE to RLE.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "t", "=", "self", ".", "imgs", "[", "ann", "[", "'image_id'", "]", "]", "\n", "h", ",", "w", "=", "t", "[", "'height'", "]", ",", "t", "[", "'width'", "]", "\n", "segm", "=", "ann", "[", "'segmentation'", "]", "\n", "if", "type", "(", "segm", ")", "==", "list", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "            ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "segm", ",", "h", ",", "w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "", "elif", "type", "(", "segm", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "# uncompressed RLE", "\n", "            ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "segm", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "# rle", "\n", "            ", "rle", "=", "ann", "[", "'segmentation'", "]", "\n", "", "return", "rle", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.annToMask": [[339, 347], ["cell.CELL.annToRLE", "pycocotools.mask.decode"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.annToRLE", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode"], ["", "def", "annToMask", "(", "self", ",", "ann", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE, or RLE to binary mask.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "rle", "=", "self", ".", "annToRLE", "(", "ann", ")", "\n", "m", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell._isArrayLike": [[50, 52], ["hasattr", "hasattr"], "function", ["None"], ["def", "_isArrayLike", "(", "obj", ")", ":", "\n", "    ", "return", "hasattr", "(", "obj", ",", "'__iter__'", ")", "and", "hasattr", "(", "obj", ",", "'__len__'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.list_dataset.ListDataset.__init__": [[12, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_lists", ",", "transforms", "=", "None", ")", ":", "\n", "        ", "self", ".", "image_lists", "=", "image_lists", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.list_dataset.ListDataset.__getitem__": [[16, 27], ["PIL.Image.open().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "list_dataset.ListDataset.transforms", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "image_lists", "[", "item", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "# dummy target", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "target", "=", "BoxList", "(", "[", "[", "0", ",", "0", ",", "w", ",", "h", "]", "]", ",", "img", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.list_dataset.ListDataset.__len__": [[28, 30], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_lists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.list_dataset.ListDataset.get_img_info": [[31, 37], ["None"], "methods", ["None"], ["", "def", "get_img_info", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        Return the image dimensions for the image, without\n        loading and pre-processing it\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.concat_dataset.ConcatDataset.get_idxs": [[13, 20], ["bisect.bisect_right"], "methods", ["None"], ["def", "get_idxs", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "return", "dataset_idx", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.concat_dataset.ConcatDataset.get_img_info": [[21, 24], ["concat_dataset.ConcatDataset.get_idxs", "concat_dataset.ConcatDataset.datasets[].get_img_info"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.concat_dataset.ConcatDataset.get_idxs", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.get_img_info"], ["", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", ",", "sample_idx", "=", "self", ".", "get_idxs", "(", "idx", ")", "\n", "return", "self", ".", "datasets", "[", "dataset_idx", "]", ".", "get_img_info", "(", "sample_idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.__init__": [[43, 60], ["os.path.join", "os.path.join", "os.path.join", "dict", "open", "f.readlines", "x.strip", "zip", "enumerate", "range", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "split", ",", "use_difficult", "=", "False", ",", "transforms", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "data_dir", "\n", "self", ".", "image_set", "=", "split", "\n", "self", ".", "keep_difficult", "=", "use_difficult", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n", "self", ".", "_annopath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"Annotations\"", ",", "\"%s.xml\"", ")", "\n", "self", ".", "_imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"JPEGImages\"", ",", "\"%s.jpg\"", ")", "\n", "self", ".", "_imgsetpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "\"%s.txt\"", ")", "\n", "\n", "with", "open", "(", "self", ".", "_imgsetpath", "%", "self", ".", "image_set", ")", "as", "f", ":", "\n", "            ", "self", ".", "ids", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "ids", "=", "[", "x", ".", "strip", "(", "\"\\n\"", ")", "for", "x", "in", "self", ".", "ids", "]", "\n", "self", ".", "id_to_img_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "ids", ")", "}", "\n", "\n", "cls", "=", "PascalVOCDataset", ".", "CLASSES", "\n", "self", ".", "class_to_ind", "=", "dict", "(", "zip", "(", "cls", ",", "range", "(", "len", "(", "cls", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.__getitem__": [[61, 72], ["PIL.Image.open().convert", "voc.PascalVOCDataset.get_groundtruth", "target.clip_to_image.clip_to_image.clip_to_image", "voc.PascalVOCDataset.transforms", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.get_groundtruth", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.clip_to_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "self", ".", "_imgpath", "%", "img_id", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "target", "=", "self", ".", "get_groundtruth", "(", "index", ")", "\n", "target", "=", "target", ".", "clip_to_image", "(", "remove_empty", "=", "True", ")", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.get_groundtruth": [[76, 86], ["ET.parse().getroot", "voc.PascalVOCDataset._preprocess_annotation", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "ET.parse"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset._preprocess_annotation", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.add_field"], ["", "def", "get_groundtruth", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "anno", "=", "ET", ".", "parse", "(", "self", ".", "_annopath", "%", "img_id", ")", ".", "getroot", "(", ")", "\n", "anno", "=", "self", ".", "_preprocess_annotation", "(", "anno", ")", "\n", "\n", "height", ",", "width", "=", "anno", "[", "\"im_info\"", "]", "\n", "target", "=", "BoxList", "(", "anno", "[", "\"boxes\"", "]", ",", "(", "width", ",", "height", ")", ",", "mode", "=", "\"xyxy\"", ")", "\n", "target", ".", "add_field", "(", "\"labels\"", ",", "anno", "[", "\"labels\"", "]", ")", "\n", "target", ".", "add_field", "(", "\"difficult\"", ",", "anno", "[", "\"difficult\"", "]", ")", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset._preprocess_annotation": [[87, 125], ["target.iter", "target.find", "tuple", "obj.find().text.lower().strip", "obj.find", "tuple", "boxes.append", "gt_classes.append", "difficult_boxes.append", "map", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "int", "map", "obj.find().text.lower", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "list", "obj.find", "map", "target.find.find", "target.find.find", "obj.find"], "methods", ["None"], ["", "def", "_preprocess_annotation", "(", "self", ",", "target", ")", ":", "\n", "        ", "boxes", "=", "[", "]", "\n", "gt_classes", "=", "[", "]", "\n", "difficult_boxes", "=", "[", "]", "\n", "TO_REMOVE", "=", "1", "\n", "\n", "for", "obj", "in", "target", ".", "iter", "(", "\"object\"", ")", ":", "\n", "            ", "difficult", "=", "int", "(", "obj", ".", "find", "(", "\"difficult\"", ")", ".", "text", ")", "==", "1", "\n", "if", "not", "self", ".", "keep_difficult", "and", "difficult", ":", "\n", "                ", "continue", "\n", "", "name", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "bb", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "# Refer to \"https://github.com/rbgirshick/py-faster-rcnn/blob/master/lib/datasets/pascal_voc.py#L208-L211\"", "\n", "box", "=", "[", "\n", "bb", ".", "find", "(", "\"xmin\"", ")", ".", "text", ",", "\n", "bb", ".", "find", "(", "\"ymin\"", ")", ".", "text", ",", "\n", "bb", ".", "find", "(", "\"xmax\"", ")", ".", "text", ",", "\n", "bb", ".", "find", "(", "\"ymax\"", ")", ".", "text", ",", "\n", "]", "\n", "bndbox", "=", "tuple", "(", "\n", "map", "(", "lambda", "x", ":", "x", "-", "TO_REMOVE", ",", "list", "(", "map", "(", "int", ",", "box", ")", ")", ")", "\n", ")", "\n", "\n", "boxes", ".", "append", "(", "bndbox", ")", "\n", "gt_classes", ".", "append", "(", "self", ".", "class_to_ind", "[", "name", "]", ")", "\n", "difficult_boxes", ".", "append", "(", "difficult", ")", "\n", "\n", "", "size", "=", "target", ".", "find", "(", "\"size\"", ")", "\n", "im_info", "=", "tuple", "(", "map", "(", "int", ",", "(", "size", ".", "find", "(", "\"height\"", ")", ".", "text", ",", "size", ".", "find", "(", "\"width\"", ")", ".", "text", ")", ")", ")", "\n", "\n", "res", "=", "{", "\n", "\"boxes\"", ":", "torch", ".", "tensor", "(", "boxes", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "\"labels\"", ":", "torch", ".", "tensor", "(", "gt_classes", ")", ",", "\n", "\"difficult\"", ":", "torch", ".", "tensor", "(", "difficult_boxes", ")", ",", "\n", "\"im_info\"", ":", "im_info", ",", "\n", "}", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.get_img_info": [[126, 132], ["ET.parse().getroot", "ET.parse().getroot.find", "tuple", "map", "ET.parse", "ET.parse().getroot.find.find", "ET.parse().getroot.find.find"], "methods", ["None"], ["", "def", "get_img_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "anno", "=", "ET", ".", "parse", "(", "self", ".", "_annopath", "%", "img_id", ")", ".", "getroot", "(", ")", "\n", "size", "=", "anno", ".", "find", "(", "\"size\"", ")", "\n", "im_info", "=", "tuple", "(", "map", "(", "int", ",", "(", "size", ".", "find", "(", "\"height\"", ")", ".", "text", ",", "size", ".", "find", "(", "\"width\"", ")", ".", "text", ")", ")", ")", "\n", "return", "{", "\"height\"", ":", "im_info", "[", "0", "]", ",", "\"width\"", ":", "im_info", "[", "1", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.map_class_id_to_class_name": [[133, 135], ["None"], "methods", ["None"], ["", "def", "map_class_id_to_class_name", "(", "self", ",", "class_id", ")", ":", "\n", "        ", "return", "PascalVOCDataset", ".", "CLASSES", "[", "class_id", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.evaluation.__init__.evaluate": [[7, 33], ["dict", "isinstance", "coco.coco_evaluation", "isinstance", "voc.voc_evaluation", "isinstance", "pap.pap_evaluation", "isinstance", "pap.pap_evaluation", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.__init__.coco_evaluation", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.voc.__init__.voc_evaluation", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.__init__.pap_evaluation", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.__init__.pap_evaluation"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.evaluation.__init__.generate": [[34, 40], ["dict", "isinstance", "pap_generation"], "function", ["None"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.COCOResults.__init__": [[310, 319], ["all", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "iou_types", ")", ":", "\n", "        ", "allowed_types", "=", "(", "\"box_proposal\"", ",", "\"bbox\"", ",", "\"segm\"", ")", "\n", "assert", "all", "(", "iou_type", "in", "allowed_types", "for", "iou_type", "in", "iou_types", ")", "\n", "results", "=", "OrderedDict", "(", ")", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "            ", "results", "[", "iou_type", "]", "=", "OrderedDict", "(", "\n", "[", "(", "metric", ",", "-", "1", ")", "for", "metric", "in", "COCOResults", ".", "METRICS", "[", "iou_type", "]", "]", "\n", ")", "\n", "", "self", ".", "results", "=", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.COCOResults.update": [[320, 332], ["isinstance", "enumerate"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "coco_eval", ")", ":", "\n", "        ", "if", "coco_eval", "is", "None", ":", "\n", "            ", "return", "\n", "", "from", "pycocotools", ".", "cocoeval", "import", "COCOeval", "\n", "\n", "assert", "isinstance", "(", "coco_eval", ",", "COCOeval", ")", "\n", "s", "=", "coco_eval", ".", "stats", "\n", "iou_type", "=", "coco_eval", ".", "params", ".", "iouType", "\n", "res", "=", "self", ".", "results", "[", "iou_type", "]", "\n", "metrics", "=", "COCOResults", ".", "METRICS", "[", "iou_type", "]", "\n", "for", "idx", ",", "metric", "in", "enumerate", "(", "metrics", ")", ":", "\n", "            ", "res", "[", "metric", "]", "=", "s", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.COCOResults.__repr__": [[333, 336], ["repr"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "# TODO make it pretty", "\n", "        ", "return", "repr", "(", "self", ".", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.do_coco_evaluation": [[13, 65], ["logging.getLogger", "logging.getLogger.info", "coco_eval.COCOResults", "logging.getLogger.info", "logging.getLogger.info", "coco_eval.check_expected_results", "logging.getLogger.info", "coco_eval.COCOResults", "logging.getLogger.info", "coco_eval.check_expected_results", "logging.getLogger.info", "coco_eval.prepare_for_coco_detection", "logging.getLogger.info", "coco_eval.prepare_for_coco_segmentation", "torch.save", "areas.items", "torch.save", "tempfile.NamedTemporaryFile", "coco_eval.evaluate_predictions_on_coco", "coco_eval.COCOResults.update", "os.path.join", "coco_eval.evaluate_box_proposals", "stats[].item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.check_expected_results", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.check_expected_results", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.prepare_for_coco_detection", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.prepare_for_coco_segmentation", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.evaluate_predictions_on_coco", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.evaluate_box_proposals"], ["def", "do_coco_evaluation", "(", "\n", "dataset", ",", "\n", "predictions", ",", "\n", "box_only", ",", "\n", "output_folder", ",", "\n", "iou_types", ",", "\n", "expected_results", ",", "\n", "expected_results_sigma_tol", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "\n", "if", "box_only", ":", "\n", "        ", "logger", ".", "info", "(", "\"Evaluating bbox proposals\"", ")", "\n", "areas", "=", "{", "\"all\"", ":", "\"\"", ",", "\"small\"", ":", "\"s\"", ",", "\"medium\"", ":", "\"m\"", ",", "\"large\"", ":", "\"l\"", "}", "\n", "res", "=", "COCOResults", "(", "\"box_proposal\"", ")", "\n", "for", "limit", "in", "[", "100", ",", "1000", "]", ":", "\n", "            ", "for", "area", ",", "suffix", "in", "areas", ".", "items", "(", ")", ":", "\n", "                ", "stats", "=", "evaluate_box_proposals", "(", "\n", "predictions", ",", "dataset", ",", "area", "=", "area", ",", "limit", "=", "limit", "\n", ")", "\n", "key", "=", "\"AR{}@{:d}\"", ".", "format", "(", "suffix", ",", "limit", ")", "\n", "res", ".", "results", "[", "\"box_proposal\"", "]", "[", "key", "]", "=", "stats", "[", "\"ar\"", "]", ".", "item", "(", ")", "\n", "", "", "logger", ".", "info", "(", "res", ")", "\n", "check_expected_results", "(", "res", ",", "expected_results", ",", "expected_results_sigma_tol", ")", "\n", "if", "output_folder", ":", "\n", "            ", "torch", ".", "save", "(", "res", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"box_proposals.pth\"", ")", ")", "\n", "", "return", "\n", "", "logger", ".", "info", "(", "\"Preparing results for COCO format\"", ")", "\n", "coco_results", "=", "{", "}", "\n", "if", "\"bbox\"", "in", "iou_types", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing bbox results\"", ")", "\n", "coco_results", "[", "\"bbox\"", "]", "=", "prepare_for_coco_detection", "(", "predictions", ",", "dataset", ")", "\n", "", "if", "\"segm\"", "in", "iou_types", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing segm results\"", ")", "\n", "coco_results", "[", "\"segm\"", "]", "=", "prepare_for_coco_segmentation", "(", "predictions", ",", "dataset", ")", "\n", "\n", "", "results", "=", "COCOResults", "(", "*", "iou_types", ")", "\n", "logger", ".", "info", "(", "\"Evaluating predictions\"", ")", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "f", ":", "\n", "            ", "file_path", "=", "f", ".", "name", "\n", "if", "output_folder", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "iou_type", "+", "\".json\"", ")", "\n", "", "res", "=", "evaluate_predictions_on_coco", "(", "\n", "dataset", ".", "coco", ",", "coco_results", "[", "iou_type", "]", ",", "file_path", ",", "iou_type", "\n", ")", "\n", "results", ".", "update", "(", "res", ")", "\n", "", "", "logger", ".", "info", "(", "results", ")", "\n", "check_expected_results", "(", "results", ",", "expected_results", ",", "expected_results_sigma_tol", ")", "\n", "if", "output_folder", ":", "\n", "        ", "torch", ".", "save", "(", "results", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"coco_results.pth\"", ")", ")", "\n", "", "return", "results", ",", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.prepare_for_coco_detection": [[67, 99], ["enumerate", "prediction.convert.resize", "prediction.convert.convert", "prediction.convert.bbox.tolist", "prediction.convert.get_field().tolist", "prediction.convert.get_field().tolist", "coco_results.extend", "len", "prediction.convert.get_field", "prediction.convert.get_field", "enumerate"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "prepare_for_coco_detection", "(", "predictions", ",", "dataset", ")", ":", "\n", "# assert isinstance(dataset, COCODataset)", "\n", "    ", "coco_results", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "# TODO replace with get_img_info?", "\n", "", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"width\"", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "prediction", "=", "prediction", ".", "convert", "(", "\"xywh\"", ")", "\n", "\n", "boxes", "=", "prediction", ".", "bbox", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "\n", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "mapped_labels", "[", "k", "]", ",", "\n", "\"bbox\"", ":", "box", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "box", "in", "enumerate", "(", "boxes", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.prepare_for_coco_segmentation": [[101, 153], ["maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker", "tqdm.tqdm", "enumerate", "prediction.resize.resize", "prediction.resize.get_field", "prediction.resize.get_field().tolist", "prediction.resize.get_field().tolist", "coco_results.extend", "len", "list", "maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker.", "rle[].decode", "masker.expand", "prediction.resize.get_field", "prediction.resize.get_field", "mask_util.encode", "np.array", "enumerate"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.box_coder.BoxCoder.encode"], ["", "def", "prepare_for_coco_segmentation", "(", "predictions", ",", "dataset", ")", ":", "\n", "    ", "import", "pycocotools", ".", "mask", "as", "mask_util", "\n", "import", "numpy", "as", "np", "\n", "\n", "masker", "=", "Masker", "(", "threshold", "=", "0.5", ",", "padding", "=", "1", ")", "\n", "# assert isinstance(dataset, COCODataset)", "\n", "coco_results", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "tqdm", "(", "enumerate", "(", "predictions", ")", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "# TODO replace with get_img_info?", "\n", "", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"width\"", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "masks", "=", "prediction", ".", "get_field", "(", "\"mask\"", ")", "\n", "# t = time.time()", "\n", "# Masker is necessary only if masks haven't been already resized.", "\n", "if", "list", "(", "masks", ".", "shape", "[", "-", "2", ":", "]", ")", "!=", "[", "image_height", ",", "image_width", "]", ":", "\n", "            ", "masks", "=", "masker", "(", "masks", ".", "expand", "(", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "prediction", ")", "\n", "masks", "=", "masks", "[", "0", "]", "\n", "# logger.info('Time mask: {}'.format(time.time() - t))", "\n", "# prediction = prediction.convert('xywh')", "\n", "\n", "# boxes = prediction.bbox.tolist()", "\n", "", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "\n", "# rles = prediction.get_field('mask')", "\n", "\n", "rles", "=", "[", "\n", "mask_util", ".", "encode", "(", "np", ".", "array", "(", "mask", "[", "0", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "order", "=", "\"F\"", ")", ")", "[", "0", "]", "\n", "for", "mask", "in", "masks", "\n", "]", "\n", "for", "rle", "in", "rles", ":", "\n", "            ", "rle", "[", "\"counts\"", "]", "=", "rle", "[", "\"counts\"", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "mapped_labels", "[", "k", "]", ",", "\n", "\"segmentation\"", ":", "rle", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "rle", "in", "enumerate", "(", "rles", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.evaluate_box_proposals": [[156, 269], ["enumerate", "torch.cat", "torch.sort", "torch.zeros_like", "enumerate", "torch.zeros_like.mean", "prediction.resize.resize", "dataset.coco.getAnnIds", "dataset.coco.loadAnns", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert", "torch.as_tensor", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "torch.zeros", "range", "torch.cat.append", "torch.arange", "prediction.resize.get_field().sort", "len", "len", "len", "len", "min", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou.max", "max_overlaps.max", "float", "torch.as_tensor", "maskrcnn_benchmark.structures.bounding_box.BoxList", "len", "len", "len", "prediction.resize.get_field"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.utils.cat", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.getAnnIds", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadAnns", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field"], ["", "def", "evaluate_box_proposals", "(", "\n", "predictions", ",", "dataset", ",", "thresholds", "=", "None", ",", "area", "=", "\"all\"", ",", "limit", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluate detection proposal recall metrics. This function is a much\n    faster alternative to the official COCO API recall evaluation code. However,\n    it produces slightly different results.\n    \"\"\"", "\n", "# Record max overlap value for each gt box", "\n", "# Return vector of overlap values", "\n", "areas", "=", "{", "\n", "\"all\"", ":", "0", ",", "\n", "\"small\"", ":", "1", ",", "\n", "\"medium\"", ":", "2", ",", "\n", "\"large\"", ":", "3", ",", "\n", "\"96-128\"", ":", "4", ",", "\n", "\"128-256\"", ":", "5", ",", "\n", "\"256-512\"", ":", "6", ",", "\n", "\"512-inf\"", ":", "7", ",", "\n", "}", "\n", "area_ranges", "=", "[", "\n", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "# all", "\n", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "# small", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "# medium", "\n", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", ",", "# large", "\n", "[", "96", "**", "2", ",", "128", "**", "2", "]", ",", "# 96-128", "\n", "[", "128", "**", "2", ",", "256", "**", "2", "]", ",", "# 128-256", "\n", "[", "256", "**", "2", ",", "512", "**", "2", "]", ",", "# 256-512", "\n", "[", "512", "**", "2", ",", "1e5", "**", "2", "]", ",", "\n", "]", "# 512-inf", "\n", "assert", "area", "in", "areas", ",", "\"Unknown area range: {}\"", ".", "format", "(", "area", ")", "\n", "area_range", "=", "area_ranges", "[", "areas", "[", "area", "]", "]", "\n", "gt_overlaps", "=", "[", "]", "\n", "num_pos", "=", "0", "\n", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "\n", "# TODO replace with get_img_info?", "\n", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"width\"", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "\n", "# sort predictions in descending order", "\n", "# TODO maybe remove this and make it explicit in the documentation", "\n", "inds", "=", "prediction", ".", "get_field", "(", "\"objectness\"", ")", ".", "sort", "(", "descending", "=", "True", ")", "[", "1", "]", "\n", "prediction", "=", "prediction", "[", "inds", "]", "\n", "\n", "ann_ids", "=", "dataset", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "original_id", ")", "\n", "anno", "=", "dataset", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "gt_boxes", "=", "[", "obj", "[", "\"bbox\"", "]", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", "\n", "gt_boxes", "=", "torch", ".", "as_tensor", "(", "gt_boxes", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "# guard against no boxes", "\n", "gt_boxes", "=", "BoxList", "(", "gt_boxes", ",", "(", "image_width", ",", "image_height", ")", ",", "mode", "=", "\"xywh\"", ")", ".", "convert", "(", "\n", "\"xyxy\"", "\n", ")", "\n", "gt_areas", "=", "torch", ".", "as_tensor", "(", "[", "obj", "[", "\"area\"", "]", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "valid_gt_inds", "=", "(", "gt_areas", ">=", "area_range", "[", "0", "]", ")", "&", "(", "gt_areas", "<=", "area_range", "[", "1", "]", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "valid_gt_inds", "]", "\n", "\n", "num_pos", "+=", "len", "(", "gt_boxes", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "limit", "is", "not", "None", "and", "len", "(", "prediction", ")", ">", "limit", ":", "\n", "            ", "prediction", "=", "prediction", "[", ":", "limit", "]", "\n", "\n", "", "overlaps", "=", "boxlist_iou", "(", "prediction", ",", "gt_boxes", ")", "\n", "\n", "_gt_overlaps", "=", "torch", ".", "zeros", "(", "len", "(", "gt_boxes", ")", ")", "\n", "for", "j", "in", "range", "(", "min", "(", "len", "(", "prediction", ")", ",", "len", "(", "gt_boxes", ")", ")", ")", ":", "\n", "# find which proposal box maximally covers each gt box", "\n", "# and get the iou amount of coverage for each gt box", "\n", "            ", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "\n", "# find which gt box is 'best' covered (i.e. 'best' = most iou)", "\n", "gt_ovr", ",", "gt_ind", "=", "max_overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "assert", "gt_ovr", ">=", "0", "\n", "# find the proposal box that covers the best covered gt box", "\n", "box_ind", "=", "argmax_overlaps", "[", "gt_ind", "]", "\n", "# record the iou coverage of this gt box", "\n", "_gt_overlaps", "[", "j", "]", "=", "overlaps", "[", "box_ind", ",", "gt_ind", "]", "\n", "assert", "_gt_overlaps", "[", "j", "]", "==", "gt_ovr", "\n", "# mark the proposal box and the gt box as used", "\n", "overlaps", "[", "box_ind", ",", ":", "]", "=", "-", "1", "\n", "overlaps", "[", ":", ",", "gt_ind", "]", "=", "-", "1", "\n", "\n", "# append recorded iou coverage level", "\n", "", "gt_overlaps", ".", "append", "(", "_gt_overlaps", ")", "\n", "", "gt_overlaps", "=", "torch", ".", "cat", "(", "gt_overlaps", ",", "dim", "=", "0", ")", "\n", "gt_overlaps", ",", "_", "=", "torch", ".", "sort", "(", "gt_overlaps", ")", "\n", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "step", "=", "0.05", "\n", "thresholds", "=", "torch", ".", "arange", "(", "0.5", ",", "0.95", "+", "1e-5", ",", "step", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "recalls", "=", "torch", ".", "zeros_like", "(", "thresholds", ")", "\n", "# compute recall for each iou threshold", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "recalls", "[", "i", "]", "=", "(", "gt_overlaps", ">=", "t", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "/", "float", "(", "num_pos", ")", "\n", "# ar = 2 * np.trapz(recalls, thresholds)", "\n", "", "ar", "=", "recalls", ".", "mean", "(", ")", "\n", "return", "{", "\n", "\"ar\"", ":", "ar", ",", "\n", "\"recalls\"", ":", "recalls", ",", "\n", "\"thresholds\"", ":", "thresholds", ",", "\n", "\"gt_overlaps\"", ":", "gt_overlaps", ",", "\n", "\"num_pos\"", ":", "num_pos", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.evaluate_predictions_on_coco": [[272, 291], ["COCOeval", "COCOeval.evaluate", "COCOeval.accumulate", "COCOeval.summarize", "open", "json.dump", "coco_gt.loadRes", "COCO", "str"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.evaluate", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.accumulate", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.summarize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.loadRes"], ["", "def", "evaluate_predictions_on_coco", "(", "\n", "coco_gt", ",", "coco_results", ",", "json_result_file", ",", "iou_type", "=", "\"bbox\"", "\n", ")", ":", "\n", "    ", "import", "json", "\n", "\n", "with", "open", "(", "json_result_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "coco_results", ",", "f", ")", "\n", "\n", "", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "from", "pycocotools", ".", "cocoeval", "import", "COCOeval", "\n", "\n", "coco_dt", "=", "coco_gt", ".", "loadRes", "(", "str", "(", "json_result_file", ")", ")", "if", "coco_results", "else", "COCO", "(", ")", "\n", "\n", "# coco_dt = coco_gt.loadRes(coco_results)", "\n", "coco_eval", "=", "COCOeval", "(", "coco_gt", ",", "coco_dt", ",", "iou_type", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "return", "coco_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.check_expected_results": [[338, 358], ["logging.getLogger", "logging.getLogger.error", "logging.getLogger.info"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info"], ["", "", "def", "check_expected_results", "(", "results", ",", "expected_results", ",", "sigma_tol", ")", ":", "\n", "    ", "if", "not", "expected_results", ":", "\n", "        ", "return", "\n", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "for", "task", ",", "metric", ",", "(", "mean", ",", "std", ")", "in", "expected_results", ":", "\n", "        ", "actual_val", "=", "results", ".", "results", "[", "task", "]", "[", "metric", "]", "\n", "lo", "=", "mean", "-", "sigma_tol", "*", "std", "\n", "hi", "=", "mean", "+", "sigma_tol", "*", "std", "\n", "ok", "=", "(", "lo", "<", "actual_val", ")", "and", "(", "actual_val", "<", "hi", ")", "\n", "msg", "=", "(", "\n", "\"{} > {} sanity check (actual vs. expected): \"", "\n", "\"{:.3f} vs. mean={:.4f}, std={:.4}, range=({:.4f}, {:.4f})\"", "\n", ")", ".", "format", "(", "task", ",", "metric", ",", "actual_val", ",", "mean", ",", "std", ",", "lo", ",", "hi", ")", "\n", "if", "not", "ok", ":", "\n", "            ", "msg", "=", "\"FAIL: \"", "+", "msg", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"PASS: \"", "+", "msg", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.__init__.coco_evaluation": [[4, 21], ["coco_eval.do_coco_evaluation"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.coco.coco_eval.do_coco_evaluation"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.voc.voc_eval.do_voc_evaluation": [[12, 47], ["enumerate", "voc_eval.eval_detection_voc", "enumerate", "logger.info", "dataset.get_img_info", "prediction.resize.resize", "pred_boxlists.append", "dataset.get_groundtruth", "gt_boxlists.append", "len", "dataset.map_class_id_to_class_name", "open", "fid.write", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.voc.voc_eval.eval_detection_voc", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.get_img_info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.get_groundtruth", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.voc.PascalVOCDataset.map_class_id_to_class_name"], ["def", "do_voc_evaluation", "(", "dataset", ",", "predictions", ",", "output_folder", ",", "logger", ")", ":", "\n", "# TODO need to make the use_07_metric format available", "\n", "# for the user to choose", "\n", "    ", "pred_boxlists", "=", "[", "]", "\n", "gt_boxlists", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "img_info", "=", "dataset", ".", "get_img_info", "(", "image_id", ")", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "image_width", "=", "img_info", "[", "\"width\"", "]", "\n", "image_height", "=", "img_info", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "pred_boxlists", ".", "append", "(", "prediction", ")", "\n", "\n", "gt_boxlist", "=", "dataset", ".", "get_groundtruth", "(", "image_id", ")", "\n", "gt_boxlists", ".", "append", "(", "gt_boxlist", ")", "\n", "\n", "", "result", "=", "eval_detection_voc", "(", "\n", "pred_boxlists", "=", "pred_boxlists", ",", "\n", "gt_boxlists", "=", "gt_boxlists", ",", "\n", "iou_thresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "True", ",", "\n", ")", "\n", "result_str", "=", "\"mAP: {:.4f}\\n\"", ".", "format", "(", "result", "[", "\"map\"", "]", ")", "\n", "for", "i", ",", "ap", "in", "enumerate", "(", "result", "[", "\"ap\"", "]", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "# skip background", "\n", "            ", "continue", "\n", "", "result_str", "+=", "\"{:<16}: {:.4f}\\n\"", ".", "format", "(", "\n", "dataset", ".", "map_class_id_to_class_name", "(", "i", ")", ",", "ap", "\n", ")", "\n", "", "logger", ".", "info", "(", "result_str", ")", "\n", "if", "output_folder", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"result.txt\"", ")", ",", "\"w\"", ")", "as", "fid", ":", "\n", "            ", "fid", ".", "write", "(", "result_str", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.voc.voc_eval.eval_detection_voc": [[49, 67], ["voc_eval.calc_detection_voc_prec_rec", "voc_eval.calc_detection_voc_ap", "len", "len", "numpy.nanmean"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.voc.voc_eval.calc_detection_voc_prec_rec", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.voc.voc_eval.calc_detection_voc_ap"], ["", "def", "eval_detection_voc", "(", "pred_boxlists", ",", "gt_boxlists", ",", "iou_thresh", "=", "0.5", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\"Evaluate on voc dataset.\n    Args:\n        pred_boxlists(list[BoxList]): pred boxlist, has labels and scores fields.\n        gt_boxlists(list[BoxList]): ground truth boxlist, has labels field.\n        iou_thresh: iou thresh\n        use_07_metric: boolean\n    Returns:\n        dict represents the results\n    \"\"\"", "\n", "assert", "len", "(", "gt_boxlists", ")", "==", "len", "(", "\n", "pred_boxlists", "\n", ")", ",", "\"Length of gt and pred lists need to be same.\"", "\n", "prec", ",", "rec", "=", "calc_detection_voc_prec_rec", "(", "\n", "pred_boxlists", "=", "pred_boxlists", ",", "gt_boxlists", "=", "gt_boxlists", ",", "iou_thresh", "=", "iou_thresh", "\n", ")", "\n", "ap", "=", "calc_detection_voc_ap", "(", "prec", ",", "rec", ",", "use_07_metric", "=", "use_07_metric", ")", "\n", "return", "{", "\"ap\"", ":", "ap", ",", "\"map\"", ":", "np", ".", "nanmean", "(", "ap", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.voc.voc_eval.calc_detection_voc_prec_rec": [[69, 159], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "zip", "collections.defaultdict.keys", "pred_boxlist.bbox.numpy", "pred_boxlist.get_field().numpy", "pred_boxlist.get_field().numpy", "gt_boxlist.bbox.numpy", "gt_boxlist.get_field().numpy", "gt_boxlist.get_field().numpy", "numpy.unique", "max", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "numpy.concatenate().astype", "numpy.logical_not().sum", "score[].extend", "pred_bbox_l.copy.copy", "gt_bbox_l.copy.copy", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou().numpy", "boxlist_iou().numpy.argmax", "numpy.zeros", "collections.defaultdict.keys", "np.array.argsort", "pred_boxlist.get_field", "pred_boxlist.get_field", "gt_boxlist.get_field", "gt_boxlist.get_field", "pred_score_l.argsort", "len", "len", "match[].extend", "numpy.concatenate", "numpy.logical_not", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "match[].append", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList", "boxlist_iou().numpy.max", "match[].append", "match[].append", "match[].append"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.boxlist_ops.boxlist_iou"], ["", "def", "calc_detection_voc_prec_rec", "(", "gt_boxlists", ",", "pred_boxlists", ",", "iou_thresh", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Calculate precision and recall based on evaluation code of PASCAL VOC.\n    This function calculates precision and recall of\n    predicted bounding boxes obtained from a dataset which has :math:`N`\n    images.\n    The code is based on the evaluation code used in PASCAL VOC Challenge.\n   \"\"\"", "\n", "n_pos", "=", "defaultdict", "(", "int", ")", "\n", "score", "=", "defaultdict", "(", "list", ")", "\n", "match", "=", "defaultdict", "(", "list", ")", "\n", "for", "gt_boxlist", ",", "pred_boxlist", "in", "zip", "(", "gt_boxlists", ",", "pred_boxlists", ")", ":", "\n", "        ", "pred_bbox", "=", "pred_boxlist", ".", "bbox", ".", "numpy", "(", ")", "\n", "pred_label", "=", "pred_boxlist", ".", "get_field", "(", "\"labels\"", ")", ".", "numpy", "(", ")", "\n", "pred_score", "=", "pred_boxlist", ".", "get_field", "(", "\"scores\"", ")", ".", "numpy", "(", ")", "\n", "gt_bbox", "=", "gt_boxlist", ".", "bbox", ".", "numpy", "(", ")", "\n", "gt_label", "=", "gt_boxlist", ".", "get_field", "(", "\"labels\"", ")", ".", "numpy", "(", ")", "\n", "gt_difficult", "=", "gt_boxlist", ".", "get_field", "(", "\"difficult\"", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "l", "in", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "pred_label", ",", "gt_label", ")", ")", ".", "astype", "(", "int", ")", ")", ":", "\n", "            ", "pred_mask_l", "=", "pred_label", "==", "l", "\n", "pred_bbox_l", "=", "pred_bbox", "[", "pred_mask_l", "]", "\n", "pred_score_l", "=", "pred_score", "[", "pred_mask_l", "]", "\n", "# sort by score", "\n", "order", "=", "pred_score_l", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "pred_bbox_l", "=", "pred_bbox_l", "[", "order", "]", "\n", "pred_score_l", "=", "pred_score_l", "[", "order", "]", "\n", "\n", "gt_mask_l", "=", "gt_label", "==", "l", "\n", "gt_bbox_l", "=", "gt_bbox", "[", "gt_mask_l", "]", "\n", "gt_difficult_l", "=", "gt_difficult", "[", "gt_mask_l", "]", "\n", "\n", "n_pos", "[", "l", "]", "+=", "np", ".", "logical_not", "(", "gt_difficult_l", ")", ".", "sum", "(", ")", "\n", "score", "[", "l", "]", ".", "extend", "(", "pred_score_l", ")", "\n", "\n", "if", "len", "(", "pred_bbox_l", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "gt_bbox_l", ")", "==", "0", ":", "\n", "                ", "match", "[", "l", "]", ".", "extend", "(", "(", "0", ",", ")", "*", "pred_bbox_l", ".", "shape", "[", "0", "]", ")", "\n", "continue", "\n", "\n", "# VOC evaluation follows integer typed bounding boxes.", "\n", "", "pred_bbox_l", "=", "pred_bbox_l", ".", "copy", "(", ")", "\n", "pred_bbox_l", "[", ":", ",", "2", ":", "]", "+=", "1", "\n", "gt_bbox_l", "=", "gt_bbox_l", ".", "copy", "(", ")", "\n", "gt_bbox_l", "[", ":", ",", "2", ":", "]", "+=", "1", "\n", "iou", "=", "boxlist_iou", "(", "\n", "BoxList", "(", "pred_bbox_l", ",", "gt_boxlist", ".", "size", ")", ",", "\n", "BoxList", "(", "gt_bbox_l", ",", "gt_boxlist", ".", "size", ")", ",", "\n", ")", ".", "numpy", "(", ")", "\n", "gt_index", "=", "iou", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "# set -1 if there is no matching ground truth", "\n", "gt_index", "[", "iou", ".", "max", "(", "axis", "=", "1", ")", "<", "iou_thresh", "]", "=", "-", "1", "\n", "del", "iou", "\n", "\n", "selec", "=", "np", ".", "zeros", "(", "gt_bbox_l", ".", "shape", "[", "0", "]", ",", "dtype", "=", "bool", ")", "\n", "for", "gt_idx", "in", "gt_index", ":", "\n", "                ", "if", "gt_idx", ">=", "0", ":", "\n", "                    ", "if", "gt_difficult_l", "[", "gt_idx", "]", ":", "\n", "                        ", "match", "[", "l", "]", ".", "append", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                        ", "if", "not", "selec", "[", "gt_idx", "]", ":", "\n", "                            ", "match", "[", "l", "]", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                            ", "match", "[", "l", "]", ".", "append", "(", "0", ")", "\n", "", "", "selec", "[", "gt_idx", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "match", "[", "l", "]", ".", "append", "(", "0", ")", "\n", "\n", "", "", "", "", "n_fg_class", "=", "max", "(", "n_pos", ".", "keys", "(", ")", ")", "+", "1", "\n", "prec", "=", "[", "None", "]", "*", "n_fg_class", "\n", "rec", "=", "[", "None", "]", "*", "n_fg_class", "\n", "\n", "for", "l", "in", "n_pos", ".", "keys", "(", ")", ":", "\n", "        ", "score_l", "=", "np", ".", "array", "(", "score", "[", "l", "]", ")", "\n", "match_l", "=", "np", ".", "array", "(", "match", "[", "l", "]", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "\n", "order", "=", "score_l", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "match_l", "=", "match_l", "[", "order", "]", "\n", "\n", "tp", "=", "np", ".", "cumsum", "(", "match_l", "==", "1", ")", "\n", "fp", "=", "np", ".", "cumsum", "(", "match_l", "==", "0", ")", "\n", "\n", "# If an element of fp + tp is 0,", "\n", "# the corresponding element of prec[l] is nan.", "\n", "prec", "[", "l", "]", "=", "tp", "/", "(", "fp", "+", "tp", ")", "\n", "# If n_pos[l] is 0, rec[l] is None.", "\n", "if", "n_pos", "[", "l", "]", ">", "0", ":", "\n", "            ", "rec", "[", "l", "]", "=", "tp", "/", "n_pos", "[", "l", "]", "\n", "\n", "", "", "return", "prec", ",", "rec", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.voc.voc_eval.calc_detection_voc_ap": [[161, 218], ["len", "numpy.empty", "range", "numpy.arange", "numpy.concatenate", "numpy.concatenate", "numpy.sum", "numpy.maximum.accumulate", "numpy.where", "numpy.sum", "numpy.max", "numpy.nan_to_num", "numpy.nan_to_num"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.accumulate"], ["", "def", "calc_detection_voc_ap", "(", "prec", ",", "rec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate average precisions based on evaluation code of PASCAL VOC.\n    This function calculates average precisions\n    from given precisions and recalls.\n    The code is based on the evaluation code used in PASCAL VOC Challenge.\n    Args:\n        prec (list of numpy.array): A list of arrays.\n            :obj:`prec[l]` indicates precision for class :math:`l`.\n            If :obj:`prec[l]` is :obj:`None`, this function returns\n            :obj:`numpy.nan` for class :math:`l`.\n        rec (list of numpy.array): A list of arrays.\n            :obj:`rec[l]` indicates recall for class :math:`l`.\n            If :obj:`rec[l]` is :obj:`None`, this function returns\n            :obj:`numpy.nan` for class :math:`l`.\n        use_07_metric (bool): Whether to use PASCAL VOC 2007 evaluation metric\n            for calculating average precision. The default value is\n            :obj:`False`.\n    Returns:\n        ~numpy.ndarray:\n        This function returns an array of average precisions.\n        The :math:`l`-th value corresponds to the average precision\n        for class :math:`l`. If :obj:`prec[l]` or :obj:`rec[l]` is\n        :obj:`None`, the corresponding value is set to :obj:`numpy.nan`.\n    \"\"\"", "\n", "\n", "n_fg_class", "=", "len", "(", "prec", ")", "\n", "ap", "=", "np", ".", "empty", "(", "n_fg_class", ")", "\n", "for", "l", "in", "range", "(", "n_fg_class", ")", ":", "\n", "        ", "if", "prec", "[", "l", "]", "is", "None", "or", "rec", "[", "l", "]", "is", "None", ":", "\n", "            ", "ap", "[", "l", "]", "=", "np", ".", "nan", "\n", "continue", "\n", "\n", "", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "            ", "ap", "[", "l", "]", "=", "0", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.0", ",", "1.1", ",", "0.1", ")", ":", "\n", "                ", "if", "np", ".", "sum", "(", "rec", "[", "l", "]", ">=", "t", ")", "==", "0", ":", "\n", "                    ", "p", "=", "0", "\n", "", "else", ":", "\n", "                    ", "p", "=", "np", ".", "max", "(", "np", ".", "nan_to_num", "(", "prec", "[", "l", "]", ")", "[", "rec", "[", "l", "]", ">=", "t", "]", ")", "\n", "", "ap", "[", "l", "]", "+=", "p", "/", "11", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "            ", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "np", ".", "nan_to_num", "(", "prec", "[", "l", "]", ")", ",", "[", "0", "]", ")", ")", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "rec", "[", "l", "]", ",", "[", "1", "]", ")", ")", "\n", "\n", "mpre", "=", "np", ".", "maximum", ".", "accumulate", "(", "mpre", "[", ":", ":", "-", "1", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "[", "l", "]", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "\n", "", "", "return", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.voc.__init__.voc_evaluation": [[6, 16], ["logging.getLogger", "logging.getLogger.info", "voc_eval.do_voc_evaluation", "logging.getLogger.warning"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.voc.voc_eval.do_voc_evaluation"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.__init__": [[152, 162], ["all", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "iou_types", ")", ":", "\n", "        ", "allowed_types", "=", "(", "\"segm\"", ")", "\n", "# pdb.set_trace()", "\n", "assert", "all", "(", "iou_type", "in", "allowed_types", "for", "iou_type", "in", "iou_types", ")", "\n", "results", "=", "OrderedDict", "(", ")", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "            ", "results", "[", "iou_type", "]", "=", "OrderedDict", "(", "\n", "[", "(", "metric", ",", "-", "1", ")", "for", "metric", "in", "PapResults", ".", "METRICS", "[", "iou_type", "]", "]", "\n", ")", "\n", "", "self", ".", "results", "=", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update": [[163, 183], ["enumerate", "s[].items", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "pap_eval", ")", ":", "\n", "        ", "if", "pap_eval", "is", "None", ":", "\n", "            ", "return", "\n", "", "s", "=", "pap_eval", ".", "stats", "\n", "# pdb.set_trace()", "\n", "\n", "iou_type", "=", "pap_eval", ".", "params", ".", "iouType", "\n", "res", "=", "self", ".", "results", "[", "iou_type", "]", "\n", "metrics", "=", "PapResults", ".", "METRICS", "[", "iou_type", "]", "\n", "for", "idx", ",", "metric", "in", "enumerate", "(", "metrics", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "s", "[", "metric", "]", ".", "items", "(", ")", ":", "\n", "# temp code, turn value in array", "\n", "                ", "if", "isinstance", "(", "v", ",", "numbers", ".", "Number", ")", ":", "\n", "                    ", "s", "[", "metric", "]", "[", "k", "]", "=", "v", "\n", "", "elif", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "                    ", "s", "[", "metric", "]", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "s", "[", "metric", "]", "[", "k", "]", "=", "v", "[", "0", ",", "0", "]", "\n", "\n", "", "", "res", "[", "metric", "]", "=", "s", "[", "metric", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.__repr__": [[184, 186], ["repr"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.__init__": [[213, 232], ["super().__init__", "pap_eval.Params", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "pap_eval.Papeval.createIndex", "sorted", "sorted", "pap_eval.Papeval._gts[].append", "pap_eval.Papeval._dts[].append", "copy.deepcopy", "pap_eval.Papeval.catToImgGTs.keys"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.createIndex"], ["    ", "def", "__init__", "(", "self", ",", "gts", ",", "dts", ",", "iou_type", ",", ")", ":", "\n", "        ", "super", "(", "Papeval", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "iou_type", "=", "iou_type", "\n", "self", ".", "PapGt", "=", "gts", "# ground truth", "\n", "self", ".", "PapDt", "=", "dts", "# detections", "\n", "self", ".", "params", "=", "{", "}", "# evaluation parameters", "\n", "self", ".", "params", "=", "Params", "(", "iouType", "=", "iou_type", ")", "# parameters", "\n", "self", ".", "_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "for", "gt", "in", "gts", ":", "\n", "            ", "self", ".", "_gts", "[", "gt", "[", "'image_id'", "]", "[", "'file_name'", "]", "+", "'_%d_%d'", "%", "(", "gt", "[", "'image_id'", "]", "[", "'location'", "]", "[", "0", "]", ",", "gt", "[", "'image_id'", "]", "[", "'location'", "]", "[", "1", "]", ")", ",", "gt", "[", "'category_id'", "]", "]", ".", "append", "(", "gt", ")", "\n", "", "for", "dt", "in", "dts", ":", "\n", "            ", "self", ".", "_dts", "[", "dt", "[", "'image_id'", "]", "[", "'file_name'", "]", "+", "'_%d_%d'", "%", "(", "dt", "[", "'image_id'", "]", "[", "'location'", "]", "[", "0", "]", ",", "dt", "[", "'image_id'", "]", "[", "'location'", "]", "[", "1", "]", ")", ",", "dt", "[", "'category_id'", "]", "]", ".", "append", "(", "dt", ")", "\n", "", "self", ".", "evalImgs", "=", "defaultdict", "(", "list", ")", "# per-image per-category evaluation results", "\n", "self", ".", "eval", "=", "{", "}", "# accumulated evaluation results", "\n", "self", ".", "createIndex", "(", ")", "\n", "\n", "self", ".", "params", ".", "imgIds", "=", "sorted", "(", "copy", ".", "deepcopy", "(", "self", ".", "img_id", ")", ")", "\n", "self", ".", "params", ".", "catIds", "=", "sorted", "(", "self", ".", "catToImgGTs", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.evaluate": [[233, 271], ["time.time", "print", "list", "sorted", "copy.deepcopy", "time.time", "print", "numpy.unique", "list", "pap_eval.Papeval.computeIoU", "pap_eval.Papeval.evaluateImg"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.computeIoU", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.evaluateImg"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "'''\n        Run per image evaluation on given images and store results (a list of dict) in self.evalImgs\n        :return: None\n        '''", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'Running per image evaluation...'", ")", "\n", "p", "=", "self", ".", "params", "\n", "# # add backward compatibility if useSegm is specified in params", "\n", "# if not p.useSegm is None:", "\n", "#     p.iouType = 'segm' if p.useSegm == 1 else 'bbox'", "\n", "#     print('useSegm (deprecated) is not None. Running {} evaluation'.format(p.iouType))", "\n", "# print('Evaluate annotation type *{}*'.format(p.iouType))", "\n", "p", ".", "imgIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "imgIds", ")", ")", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "p", ".", "catIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "catIds", ")", ")", "\n", "", "p", ".", "maxDets", "=", "sorted", "(", "p", ".", "maxDets", ")", "\n", "self", ".", "params", "=", "p", "\n", "\n", "\n", "# loop through images, area range, max detection number", "\n", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "else", "[", "-", "1", "]", "\n", "self", ".", "ious", "=", "{", "(", "imgId", ",", "catId", ")", ":", "self", ".", "computeIoU", "(", "imgId", ",", "catId", ")", "for", "imgId", "in", "p", ".", "imgIds", "\n", "for", "catId", "in", "catIds", "}", "\n", "# compute self", "\n", "evaluateImg", "=", "self", ".", "evaluateImg", "\n", "maxDet", "=", "p", ".", "maxDets", "[", "-", "1", "]", "\n", "# todo parallel evaluate", "\n", "self", ".", "evalImgs", "=", "[", "evaluateImg", "(", "imgId", ",", "catId", ",", "maxDet", ")", "\n", "for", "catId", "in", "catIds", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "]", "\n", "\n", "self", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "self", ".", "params", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'DONE (t={:0.2f}s).'", ".", "format", "(", "toc", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.computeIoU": [[274, 330], ["numpy.argsort", "pycocotools.mask.iouIntUni", "len", "Exception", "len", "len", "pycocotools.mask.area", "pycocotools.mask.merge", "len", "len", "len", "len", "len", "copy.deepcopy", "len", "copy.deepcopy", "pycocotools.mask.area", "dsc.max", "pdb.set_trace"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.area", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.area"], ["", "def", "computeIoU", "(", "self", ",", "imgId", ",", "catId", ")", ":", "\n", "        ", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gt", "=", "self", ".", "_gts", "[", "imgId", ",", "catId", "]", "\n", "dt", "=", "self", ".", "_dts", "[", "imgId", ",", "catId", "]", "\n", "", "else", ":", "\n", "            ", "gt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_gts", "[", "imgId", ",", "cId", "]", "]", "\n", "dt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_dts", "[", "imgId", ",", "cId", "]", "]", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "inds", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "dt", "=", "[", "dt", "[", "i", "]", "for", "i", "in", "inds", "]", "\n", "if", "len", "(", "dt", ")", ">", "p", ".", "maxDets", "[", "-", "1", "]", ":", "\n", "            ", "dt", "=", "dt", "[", "0", ":", "p", ".", "maxDets", "[", "-", "1", "]", "]", "\n", "\n", "", "if", "p", ".", "iouType", "==", "'segm'", ":", "\n", "            ", "g", "=", "[", "g", "[", "'segmentation'", "]", "for", "g", "in", "gt", "]", "\n", "d", "=", "[", "d", "[", "'segmentation'", "]", "for", "d", "in", "dt", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unknown iouType for iou computation'", ")", "\n", "\n", "# compute iou between each dt and gt region", "\n", "", "iscrowd", "=", "[", "0", "]", "*", "len", "(", "g", ")", "\n", "if", "len", "(", "g", ")", "!=", "0", ":", "\n", "            ", "gt_area", "=", "maskUtils", ".", "area", "(", "g", ")", "\n", "", "else", ":", "\n", "            ", "gt_area", "=", "None", "\n", "# ious = np.zeros((1,len(gt)), dtype=np.double)", "\n", "# intersection = np.zeros((1,len(gt)), dtype=np.double)", "\n", "# union = np.asarray(map(maskUtils.area, g),dtype= np.double)", "\n", "# union = union[np.newaxis,:]", "\n", "# pdb.set_trace()", "\n", "", "iouIntUni", "=", "maskUtils", ".", "iouIntUni", "(", "d", ",", "g", ",", "iscrowd", ")", "\n", "\n", "if", "len", "(", "d", ")", "==", "0", "or", "len", "(", "g", ")", "==", "0", ":", "\n", "\n", "            ", "ious", "=", "[", "]", "\n", "dsc", "=", "[", "]", "\n", "tpp", "=", "[", "]", "\n", "intersection", "=", "[", "]", "\n", "if", "len", "(", "d", ")", ">", "0", ":", "\n", "                ", "merge_area", "=", "copy", ".", "deepcopy", "(", "d", ")", "\n", "", "if", "len", "(", "g", ")", ">", "0", ":", "\n", "                ", "merge_area", "=", "copy", ".", "deepcopy", "(", "g", ")", "\n", "", "merge_area", "=", "maskUtils", ".", "merge", "(", "merge_area", ",", "intersect", "=", "False", ")", "\n", "union", "=", "[", "maskUtils", ".", "area", "(", "merge_area", ")", "]", "\n", "", "else", ":", "\n", "            ", "ious", ",", "intersection", ",", "union", "=", "iouIntUni", "[", "0", "]", ",", "iouIntUni", "[", "1", "]", ",", "iouIntUni", "[", "2", "]", "\n", "intersection", "[", "ious", "<=", "0", "]", "=", "0", "\n", "\n", "dsc", "=", "2", "*", "intersection", "/", "(", "union", "+", "intersection", "+", "1e-10", ")", "#[2 * i/(u + i) for i,u in zip(intersection, union)]", "\n", "if", "dsc", ".", "max", "(", ")", ">", "1", ":", "\n", "                ", "pdb", ".", "set_trace", "(", ")", "\n", "# if (intersection/gt_area).max", "\n", "\n", "", "", "return", "ious", ",", "intersection", ",", "union", ",", "gt_area", ",", "dsc", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.compute_F1": [[332, 424], ["copy.deepcopy", "copy.deepcopy.T.tolist", "list", "list", "set", "set.discard", "enumerate", "zip", "map", "map", "len", "list", "set", "set.discard", "len", "numpy.linspace", "range", "range", "range", "len", "list.count", "len", "print", "map", "max", "enumerate", "len", "zip", "zip", "max", "list.count", "list.index", "iou_list[].index", "x.index", "max", "max", "max", "max", "max", "enumerate"], "methods", ["None"], ["", "def", "compute_F1", "(", "self", ",", "gt_area", ",", "iou", ",", "intersection", ",", "UseIOU", "=", "True", ")", ":", "\n", "        ", "TP", "=", "0", "\n", "FP", "=", "0", "\n", "FN", "=", "0", "\n", "\n", "PR_thread", "=", "[", "i", "for", "i", "in", "np", ".", "linspace", "(", "0.2", ",", "0.9", ",", "28", ")", "]", "\n", "TPLIST", "=", "[", "0", "for", "i", "in", "range", "(", "28", ")", "]", "\n", "FPLIST", "=", "[", "0", "for", "i", "in", "range", "(", "28", ")", "]", "\n", "# PLIST = [0 for i in range(28)]", "\n", "# RLIST =[0 for i in range(28)]", "\n", "F1LIST", "=", "[", "0", "for", "i", "in", "range", "(", "28", ")", "]", "\n", "iou_copy", "=", "copy", ".", "deepcopy", "(", "iou", ")", "\n", "gt_num", "=", "iou", ".", "shape", "[", "1", "]", "\n", "# gt_map_seg = np.zeros((gt_num,2)) # 0 for map idx, 1 for iou value", "\n", "# pdb.set_trace()", "\n", "iou_list", "=", "iou_copy", ".", "T", ".", "tolist", "(", ")", "\n", "inter_index_list", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "index", "(", "max", "(", "x", ")", ")", "if", "max", "(", "x", ")", ">", "0", "else", "-", "1", ",", "iou_list", ")", ")", "\n", "inter_value_list", "=", "list", "(", "map", "(", "lambda", "x", ":", "max", "(", "x", ")", ",", "iou_list", ")", ")", "\n", "# gt_map_seg[:,0] = np.asarray(inter_index_list,)", "\n", "# gt_map_seg[:,1] = np.asarray(inter_value_list)", "\n", "inter_index_set", "=", "set", "(", "inter_index_list", ")", "\n", "inter_index_set", ".", "discard", "(", "-", "1", ")", "\n", "\n", "while", "(", "len", "(", "inter_index_list", ")", "-", "inter_value_list", ".", "count", "(", "0", ")", ")", "!=", "len", "(", "inter_index_set", ")", ":", "\n", "# find the duplicate index and set another segmented result to ground truth base on criterion", "\n", "\n", "            ", "duplicate_indices", "=", "[", "]", "\n", "\n", "for", "v", "in", "inter_index_set", ":", "\n", "                ", "if", "inter_index_list", ".", "count", "(", "v", ")", ">", "1", ":", "\n", "                    ", "duplicate_indices", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "inter_index_list", ")", "if", "x", "==", "v", "]", "\n", "break", "\n", "# then get the max iou index in duplicate indices", "\n", "", "", "if", "len", "(", "duplicate_indices", ")", "==", "0", ":", "\n", "# pdb.set_trace()", "\n", "                ", "print", "(", "'bug'", ")", "\n", "", "iou_for_duplicate", "=", "list", "(", "map", "(", "inter_value_list", ".", "__getitem__", ",", "duplicate_indices", ")", ")", "\n", "# delete the index with max iou", "\n", "del", "duplicate_indices", "[", "(", "iou_for_duplicate", ".", "index", "(", "max", "(", "iou_for_duplicate", ")", ")", ")", "]", "\n", "# search for best iou match again", "\n", "for", "i", "in", "duplicate_indices", ":", "\n", "                ", "iou_list", "[", "i", "]", "[", "v", "]", "=", "0", "\n", "inter_index_list", "[", "i", "]", "=", "iou_list", "[", "i", "]", ".", "index", "(", "max", "(", "iou_list", "[", "i", "]", ")", ")", "if", "max", "(", "iou_list", "[", "i", "]", ")", ">", "0", "else", "-", "1", "\n", "inter_value_list", "[", "i", "]", "=", "max", "(", "iou_list", "[", "i", "]", ")", "\n", "", "inter_index_set", "=", "set", "(", "inter_index_list", ")", "\n", "inter_index_set", ".", "discard", "(", "-", "1", ")", "\n", "# so far, for each gt, we map a seg result.", "\n", "# Then computer ratio = intersect/union", "\n", "", "for", "gtidx", ",", "segidx", "in", "enumerate", "(", "inter_index_list", ")", ":", "\n", "            ", "if", "segidx", "!=", "-", "1", ":", "\n", "\n", "                ", "if", "UseIOU", ":", "\n", "                    ", "value", "=", "iou_list", "[", "gtidx", "]", "[", "segidx", "]", "\n", "", "else", ":", "\n", "                    ", "_intersection", "=", "intersection", "[", "gtidx", ",", "segidx", "]", "\n", "value", "=", "_intersection", "/", "gt_area", "[", "gtidx", "]", "\n", "\n", "", "if", "value", ">", "0.5", ":", "\n", "                    ", "TP", "+=", "1", "\n", "\n", "\n", "# LIST", "\n", "", "for", "k", ",", "thread", "in", "enumerate", "(", "PR_thread", ")", ":", "\n", "                    ", "if", "value", ">", "thread", ":", "\n", "                        ", "TPLIST", "[", "k", "]", "+=", "1", "\n", "\n", "# add unmatched segmented result to FP", "\n", "", "", "", "", "seg_num", "=", "iou", ".", "shape", "[", "0", "]", "\n", "FNLIST", "=", "[", "len", "(", "gt_area", ")", "-", "f", "for", "f", "in", "TPLIST", "]", "\n", "\n", "FPLIST", "=", "[", "iou", ".", "shape", "[", "0", "]", "-", "t", "for", "t", "in", "TPLIST", "]", "\n", "# FPLIST = [f + (iou.shape[0] - t ) for t,f in zip(TPLIST,FPLIST)]", "\n", "# pdb.set_trace()", "\n", "PLIST", "=", "[", "t", "/", "(", "t", "+", "f", ")", "for", "t", ",", "f", "in", "zip", "(", "TPLIST", ",", "FPLIST", ")", "]", "\n", "RLIST", "=", "[", "t", "/", "(", "t", "+", "f", ")", "for", "t", ",", "f", "in", "zip", "(", "TPLIST", ",", "FNLIST", ")", "]", "\n", "itm", "=", "0", "\n", "for", "p", ",", "r", "in", "zip", "(", "PLIST", ",", "RLIST", ")", ":", "\n", "            ", "if", "(", "p", "+", "r", ")", "==", "0", ":", "\n", "                ", "F1LIST", "[", "itm", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "F1LIST", "[", "itm", "]", "=", "2", "*", "p", "*", "r", "/", "(", "p", "+", "r", ")", "\n", "", "itm", "+=", "1", "\n", "\n", "", "FN", "=", "len", "(", "gt_area", ")", "-", "TP", "\n", "FP", "=", "(", "iou", ".", "shape", "[", "0", "]", "-", "TP", ")", "\n", "precision", "=", "TP", "/", "(", "TP", "+", "FP", ")", "\n", "recall", "=", "TP", "/", "(", "TP", "+", "FN", ")", "\n", "if", "(", "recall", "+", "precision", ")", "==", "0", ":", "\n", "            ", "F1", "=", "0", "\n", "", "else", ":", "\n", "            ", "F1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "", "return", "PLIST", ",", "RLIST", ",", "F1", ",", "precision", ",", "recall", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.caclulateMetrics": [[427, 478], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "allTPR.max", "pdb.set_trace", "numpy.ones", "dsc.max", "numpy.argmax", "numpy.unravel_index", "numpy.count_nonzero", "numpy.count_nonzero"], "methods", ["None"], ["", "def", "caclulateMetrics", "(", "self", ",", "ious", ",", "ints", ",", "areas", ",", "dsc", ",", "gt", ")", ":", "\n", "\n", "        ", "dc_thread", "=", "0.7", "\n", "# p = self.params", "\n", "try", ":", "\n", "            ", "D", ",", "G", "=", "ious", ".", "shape", "\n", "", "except", ":", "\n", "            ", "G", "=", "len", "(", "gt", ")", "\n", "D", "=", "0", "\n", "", "if", "D", "==", "0", ":", "\n", "            ", "gtdsc", "=", "np", ".", "zeros", "(", "(", "G", ")", ")", "\n", "gttpr", "=", "np", ".", "zeros", "(", "(", "G", ")", ")", "\n", "mdsc", "=", "0", "\n", "mtpr", "=", "0", "\n", "FNR", "=", "0", "\n", "FDR", "=", "0", "\n", "alldsc", "=", "gtdsc", "[", "gtdsc", ">", "dc_thread", "]", "\n", "alltpr", "=", "gttpr", "[", "gtdsc", ">", "dc_thread", "]", "\n", "", "else", ":", "\n", "\n", "            ", "allTPR", "=", "ints", "/", "areas", "\n", "if", "allTPR", ".", "max", "(", ")", ">", "1", ":", "\n", "\n", "                ", "pdb", ".", "set_trace", "(", ")", "\n", "", "gtmid", "=", "-", "np", ".", "ones", "(", "(", "G", ")", ")", "\n", "gtdsc", "=", "np", ".", "zeros", "(", "(", "G", ")", ")", "\n", "gttpr", "=", "np", ".", "zeros", "(", "(", "G", ")", ")", "\n", "# AJI", "\n", "# DSC = np.zeros((1, 1))", "\n", "dsc_shape", "=", "dsc", ".", "shape", "\n", "\n", "while", "dsc", ".", "max", "(", ")", ">", "dc_thread", ":", "\n", "                ", "maxind", "=", "np", ".", "argmax", "(", "dsc", ")", "\n", "# [detect, gt]", "\n", "ind", "=", "np", ".", "unravel_index", "(", "maxind", ",", "dsc_shape", ")", "\n", "maxdsc", "=", "dsc", "[", "ind", "]", "\n", "gtmid", "[", "ind", "[", "1", "]", "]", "=", "ind", "[", "0", "]", "\n", "gtdsc", "[", "ind", "[", "1", "]", "]", "=", "maxdsc", "\n", "gttpr", "[", "ind", "[", "1", "]", "]", "=", "allTPR", "[", "ind", "]", "\n", "dsc", "[", "ind", "[", "0", "]", "]", "=", "0", "\n", "dsc", "[", ":", ",", "ind", "[", "1", "]", "]", "=", "0", "\n", "# pdb.set_trace()", "\n", "", "alldsc", "=", "gtdsc", "[", "gtdsc", ">", "dc_thread", "]", "\n", "# mdsc = np.mean(alldsc)", "\n", "alltpr", "=", "gttpr", "[", "gtdsc", ">", "dc_thread", "]", "\n", "# mtpr = np.mean(alltpr)", "\n", "FNR", "=", "(", "G", "-", "np", ".", "count_nonzero", "(", "gtdsc", ")", ")", "\n", "# mFNR = FNR/G", "\n", "FDR", "=", "(", "D", "-", "np", ".", "count_nonzero", "(", "gtdsc", ")", ")", "\n", "# mFDR = FDR/D", "\n", "", "return", "alldsc", ",", "alltpr", ",", "FNR", ",", "FDR", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.cal_MAP": [[480, 510], ["numpy.linspace", "len", "len", "len", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.round", "len", "enumerate", "min", "enumerate"], "methods", ["None"], ["", "def", "cal_MAP", "(", "self", ",", "dt", ",", "gt", ",", "ious", ",", "thr", "=", "np", ".", "linspace", "(", ".5", ",", "0.95", ",", "\n", "np", ".", "round", "(", "(", "0.95", "-", ".5", ")", "/", ".05", ")", "+", "1", ",", "endpoint", "=", "True", ")", ")", ":", "\n", "        ", "T", "=", "len", "(", "thr", ")", "\n", "G", "=", "len", "(", "gt", ")", "\n", "D", "=", "len", "(", "dt", ")", "\n", "gtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "G", ")", ")", "\n", "dtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "\n", "if", "not", "len", "(", "ious", ")", "==", "0", ":", "\n", "            ", "for", "tind", ",", "t", "in", "enumerate", "(", "thr", ")", ":", "\n", "                ", "for", "dind", ",", "d", "in", "enumerate", "(", "dt", ")", ":", "\n", "# information about best match so far (m=-1 -> unmatched)", "\n", "                    ", "iou", "=", "min", "(", "[", "t", ",", "1", "-", "1e-10", "]", ")", "\n", "m", "=", "-", "1", "\n", "for", "gind", ",", "g", "in", "enumerate", "(", "gt", ")", ":", "\n", "# if this gt already matched, and not a crowd, continue", "\n", "                        ", "if", "gtm", "[", "tind", ",", "gind", "]", ">", "0", ":", "\n", "                            ", "continue", "\n", "", "if", "ious", "[", "dind", ",", "gind", "]", "<", "iou", ":", "\n", "                            ", "continue", "\n", "# if match successful and best so far, store appropriately", "\n", "", "iou", "=", "ious", "[", "dind", ",", "gind", "]", "\n", "m", "=", "gind", "\n", "# if match made store id of match for both dt and gt", "\n", "", "if", "m", "==", "-", "1", ":", "\n", "                        ", "continue", "\n", "", "dtm", "[", "tind", ",", "dind", "]", "=", "m", "+", "1", "\n", "gtm", "[", "tind", ",", "m", "]", "=", "dind", "+", "1", "\n", "\n", "", "", "", "return", "dtm", ",", "gtm", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.evaluateImg": [[512, 674], ["numpy.argsort", "pap_eval.Papeval.caclulateMetrics", "pap_eval.Papeval.cal_MAP", "len", "len", "len", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pap_eval.Papeval.compute_F1", "numpy.ones", "numpy.ones", "enumerate", "numpy.divide", "numpy.array", "numpy.zeros", "len", "len", "len", "len", "len", "enumerate", "numpy.argwhere", "numpy.argwhere", "len", "len", "min", "enumerate", "pycocotools.mask.area", "pycocotools.mask.area", "sum", "len", "len", "sum", "range", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.caclulateMetrics", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.cal_MAP", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.compute_F1", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.area", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.area"], ["", "def", "evaluateImg", "(", "self", ",", "imgId", ",", "catId", ",", "maxDet", ")", ":", "\n", "        ", "'''\n        perform evaluation for single category and image\n        :return: dict (single image results)\n        '''", "\n", "# todo: compute bbox recall for nuclei and cytoplasm.", "\n", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gt", "=", "self", ".", "_gts", "[", "imgId", ",", "catId", "]", "\n", "dt", "=", "self", ".", "_dts", "[", "imgId", ",", "catId", "]", "\n", "", "else", ":", "\n", "            ", "gt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_gts", "[", "imgId", ",", "cId", "]", "]", "\n", "dt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_dts", "[", "imgId", ",", "cId", "]", "]", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "# prepare for F1 SCORE", "\n", "\n", "#", "\n", "", "for", "g", "in", "gt", ":", "\n", "#     if g['ignore'] or (g['area']<aRng[0] or g['area']>aRng[1]):", "\n", "#         g['_ignore'] = 1", "\n", "#     else:", "\n", "                ", "g", "[", "'_ignore'", "]", "=", "0", "\n", "\n", "# sort dt highest score first, sort gt ignore last", "\n", "# gtind = np.argsort([g['_ignore'] for g in gt], kind='mergesort')", "\n", "# gt = [gt[i] for i in gtind]", "\n", "", "dtind", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "dt", "=", "[", "dt", "[", "i", "]", "for", "i", "in", "dtind", "[", "0", ":", "maxDet", "]", "]", "\n", "# iscrowd = [int(o['iscrowd']) for o in gt]", "\n", "# load computed ious", "\n", "\n", "ious", "=", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "[", "0", "]", "#if len(self.ious[imgId, catId][0]) > 0 else self.ious[imgId, catId][0]", "\n", "intersection", "=", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "[", "1", "]", "# if len(self.ious[imgId, catId][1]) > 0 else self.ious[imgId, catId][1]", "\n", "union", "=", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "[", "2", "]", "# if len(self.ious[imgId, catId][2]) > 0 else self.ious[imgId, catId][2]", "\n", "area", "=", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "[", "3", "]", "\n", "dsc", "=", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "[", "4", "]", "\n", "# if intersection.max()>1:", "\n", "#     pdb.set_trace()", "\n", "# calculate f1 SCORE", "\n", "if", "len", "(", "gt", ")", "!=", "0", "and", "len", "(", "dt", ")", "!=", "0", ":", "\n", "            ", "PLIST", ",", "RLIST", ",", "F1", ",", "precision", ",", "recall", "=", "self", ".", "compute_F1", "(", "area", ",", "ious", ",", "intersection", ",", "p", ".", "UseIOU", ")", "\n", "", "elif", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", ">", "0", ":", "\n", "            ", "F1", ",", "precision", ",", "recall", "=", "1", ",", "0", ",", "1", "\n", "PLIST", ",", "RLIST", "=", "[", "0", "for", "i", "in", "range", "(", "28", ")", "]", ",", "[", "1", "for", "i", "in", "range", "(", "28", ")", "]", "\n", "", "elif", "len", "(", "gt", ")", ">", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "F1", ",", "precision", ",", "recall", "=", "0", ",", "1", ",", "0", "\n", "PLIST", ",", "RLIST", "=", "[", "1", "for", "i", "in", "range", "(", "28", ")", "]", ",", "[", "0", "for", "i", "in", "range", "(", "28", ")", "]", "\n", "", "else", ":", "\n", "            ", "F1", ",", "precision", ",", "recall", "=", "1", ",", "1", ",", "1", "\n", "PLIST", ",", "RLIST", "=", "[", "1", "for", "i", "in", "range", "(", "28", ")", "]", ",", "[", "1", "for", "i", "in", "range", "(", "28", ")", "]", "\n", "\n", "# calculate metrics", "\n", "", "mdsc", ",", "mtpr", ",", "FNR", ",", "FDR", "=", "self", ".", "caclulateMetrics", "(", "ious", ",", "\n", "intersection", ",", "\n", "area", ",", "\n", "dsc", ",", "gt", ")", "\n", "# pdb.set_trace()", "\n", "ap_dtm", ",", "ap_gtm", "=", "self", ".", "cal_MAP", "(", "dt", ",", "gt", ",", "ious", ")", "\n", "\n", "\n", "# calculate AJI", "\n", "dc_thread", "=", "0.6", "\n", "iouThrsAJI", "=", "[", "0.5", "]", "\n", "T", "=", "len", "(", "iouThrsAJI", ")", "\n", "G", "=", "len", "(", "gt", ")", "\n", "D", "=", "len", "(", "dt", ")", "\n", "gtm", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "G", ")", ")", "\n", "dtm", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "D", ")", ")", "\n", "gtIg", "=", "np", ".", "array", "(", "[", "g", "[", "'_ignore'", "]", "for", "g", "in", "gt", "]", ")", "\n", "dtIg", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "# AJI", "\n", "AJI", "=", "np", ".", "zeros", "(", "(", "T", ",", "1", ")", ")", "\n", "# IOU = np.zeros((T,1))", "\n", "INTERSECTION", "=", "np", ".", "zeros", "(", "(", "T", ",", "1", ")", ")", "\n", "UNION", "=", "np", ".", "zeros", "(", "(", "T", ",", "1", ")", ")", "\n", "\n", "DSC", "=", "np", ".", "zeros", "(", "(", "G", ",", "1", ")", ")", "\n", "if", "not", "len", "(", "ious", ")", "==", "0", ":", "\n", "\n", "            ", "for", "tind", ",", "t", "in", "enumerate", "(", "iouThrsAJI", ")", ":", "\n", "                ", "for", "gind", ",", "g", "in", "enumerate", "(", "gt", ")", ":", "\n", "                    ", "iou", "=", "min", "(", "[", "t", ",", "1", "-", "1e-10", "]", ")", "\n", "_intersection", "=", "0", "\n", "_union", "=", "0", "\n", "m", "=", "-", "1", "\n", "_dsc", "=", "0", "\n", "for", "dind", ",", "d", "in", "enumerate", "(", "dt", ")", ":", "\n", "# if the dt already matched, continue", "\n", "                        ", "if", "dtm", "[", "tind", ",", "dind", "]", ">", "0", ":", "\n", "                            ", "continue", "\n", "# continue to next dt unless better match made", "\n", "", "if", "ious", "[", "dind", ",", "gind", "]", "<", "iou", ":", "\n", "                            ", "continue", "\n", "# if match successful and best so far, store it", "\n", "", "iou", "=", "ious", "[", "dind", ",", "gind", "]", "\n", "_union", "=", "union", "[", "dind", ",", "gind", "]", "\n", "_intersection", "=", "intersection", "[", "dind", ",", "gind", "]", "\n", "# _dsc = dsc[dind, gind]", "\n", "m", "=", "dind", "\n", "", "if", "m", "==", "-", "1", ":", "\n", "                        ", "continue", "\n", "\n", "", "dtm", "[", "tind", ",", "m", "]", "=", "g", "[", "'image_id'", "]", "[", "'id'", "]", "\n", "gtm", "[", "tind", ",", "gind", "]", "=", "dt", "[", "m", "]", "[", "'image_id'", "]", "[", "'id'", "]", "\n", "INTERSECTION", "[", "tind", ",", "0", "]", "=", "INTERSECTION", "[", "tind", ",", "0", "]", "+", "_intersection", "\n", "UNION", "[", "tind", ",", "0", "]", "=", "UNION", "[", "tind", ",", "0", "]", "+", "_union", "\n", "DSC", "[", "gind", ",", "0", "]", "=", "_dsc", "\n", "# add missing gt and dt", "\n", "\n", "", "miss_gt", "=", "np", ".", "argwhere", "(", "gtm", "==", "-", "1", ")", "\n", "miss_dt", "=", "np", ".", "argwhere", "(", "dtm", "==", "-", "1", ")", "\n", "miss_gt", "=", "[", "gt", "[", "gt_index", "[", "1", "]", "]", "[", "'segmentation'", "]", "for", "gt_index", "in", "miss_gt", "]", "\n", "miss_dt", "=", "[", "dt", "[", "dt_index", "[", "1", "]", "]", "[", "'segmentation'", "]", "for", "dt_index", "in", "miss_dt", "]", "\n", "miss_gt", "=", "[", "maskUtils", ".", "area", "(", "f", ")", "for", "f", "in", "miss_gt", "]", "\n", "miss_dt", "=", "[", "maskUtils", ".", "area", "(", "f", ")", "for", "f", "in", "miss_dt", "]", "\n", "UNION", "[", "tind", ",", "0", "]", "=", "UNION", "[", "tind", ",", "0", "]", "+", "sum", "(", "miss_dt", ")", "+", "sum", "(", "miss_gt", ")", "\n", "\n", "", "AJI", "=", "np", ".", "divide", "(", "INTERSECTION", ",", "UNION", ")", "\n", "gtIg", "=", "np", ".", "array", "(", "[", "0", "for", "g", "in", "gt", "]", ")", "\n", "# DSC > 0.7", "\n", "# good_ins = DSC[np.where(DSC > dc_thread)]", "\n", "# if len(np.nonzero(good_ins)[0]) == 0:", "\n", "#     DSC_GOOD = 0", "\n", "# else:", "\n", "#     DSC_GOOD = np.mean(good_ins)", "\n", "# DSC_GOOD = np.asarray(DSC_GOOD).reshape(1,1)", "\n", "# if catId =='nuclei':", "\n", "#     pdb.set_trace()", "\n", "# fno", "\n", "# DSC[DSC> dc_thread] = 1", "\n", "# DSC[DSC<=dc_thread] = 0", "\n", "# FNO =  (G - np.sum(DSC))/G", "\n", "\n", "", "else", ":", "\n", "            ", "AJI", "=", "np", ".", "zeros", "(", "(", "T", ",", "1", ")", ")", "\n", "# DSC_GOOD = np.zeros((T,1))", "\n", "# FNO = 1", "\n", "# # set unmatched detections outside of area range to ignore", "\n", "# a = np.array([d['area']<aRng[0] or d['area']>aRng[1] for d in dt]).reshape((1, len(dt)))", "\n", "# dtIg = np.logical_or(dtIg, np.logical_and(dtm==0, np.repeat(a,T,0)))", "\n", "# store results for given image and category", "\n", "\n", "\n", "", "return", "{", "\n", "'image_id'", ":", "imgId", ",", "\n", "'category_id'", ":", "catId", ",", "\n", "'maxDet'", ":", "maxDet", ",", "\n", "'dtMatches'", ":", "dtm", ",", "\n", "'gtMatches'", ":", "gtm", ",", "\n", "'map_dtMatches'", ":", "ap_dtm", ",", "\n", "'map_gtMatches'", ":", "ap_gtm", ",", "\n", "'dtScores'", ":", "[", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "\n", "'AJI'", ":", "AJI", ",", "\n", "'F1'", ":", "F1", ",", "\n", "'DSC'", ":", "mdsc", ",", "\n", "'TPRp'", ":", "mtpr", ",", "\n", "'FNRo'", ":", "FNR", ",", "\n", "'FDR'", ":", "FDR", ",", "\n", "'num_G'", ":", "G", ",", "\n", "'num_D'", ":", "D", ",", "\n", "'gtIg'", ":", "gtIg", "\n", "# 'precision': precision,", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.createIndex": [[682, 703], ["print", "print", "collections.defaultdict", "collections.defaultdict", "catToImgGTs[].append", "img_id.append", "catToImgDTs[].append"], "methods", ["None"], ["", "def", "createIndex", "(", "self", ")", ":", "\n", "# create index", "\n", "        ", "print", "(", "'creating index...'", ")", "\n", "# anns, cats, imgs = {}, {}, {}", "\n", "img_id", "=", "[", "]", "\n", "# self.cat_name =", "\n", "catToImgGTs", ",", "catToImgDTs", ",", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "for", "gt", "in", "self", ".", "PapGt", ":", "\n", "            ", "catToImgGTs", "[", "gt", "[", "'category_id'", "]", "]", ".", "append", "(", "gt", "[", "'image_id'", "]", ")", "\n", "img_id", ".", "append", "(", "gt", "[", "'image_id'", "]", "[", "'file_name'", "]", "+", "'_%d_%d'", "%", "(", "gt", "[", "'image_id'", "]", "[", "'location'", "]", "[", "0", "]", ",", "gt", "[", "'image_id'", "]", "[", "'location'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "for", "dt", "in", "self", ".", "PapDt", ":", "\n", "            ", "catToImgDTs", "[", "dt", "[", "'category_id'", "]", "]", ".", "append", "(", "dt", "[", "'image_id'", "]", ")", "\n", "\n", "", "print", "(", "'index created!'", ")", "\n", "\n", "# create class members", "\n", "# self.imgToAnns = imgToAnns", "\n", "self", ".", "catToImgGTs", "=", "catToImgGTs", "\n", "self", ".", "catToImgDTs", "=", "catToImgDTs", "\n", "self", ".", "img_id", "=", "img_id", "\n", "# self.imgs = imgs", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.accumulate": [[706, 796], ["len", "len", "set", "set", "len", "enumerate", "len", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.concatenate", "numpy.argsort", "numpy.concatenate", "numpy.count_nonzero", "numpy.logical_not", "numpy.cumsum().astype", "numpy.cumsum().astype", "enumerate", "enumerate", "enumerate", "len", "numpy.concatenate", "zip", "numpy.array", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "pr.tolist.tolist.tolist", "q.tolist.tolist.tolist", "range", "numpy.searchsorted", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "enumerate", "numpy.spacing"], "methods", ["None"], ["", "def", "accumulate", "(", "self", ")", ":", "\n", "        ", "p", "=", "self", ".", "params", "\n", "catIds", "=", "self", ".", "params", ".", "catIds", "if", "self", ".", "params", ".", "useCats", "else", "[", "-", "1", "]", "\n", "T", "=", "len", "(", "p", ".", "iouThrs", ")", "\n", "R", "=", "len", "(", "p", ".", "recThrs", ")", "\n", "K", "=", "len", "(", "p", ".", "catIds", ")", "if", "p", ".", "useCats", "else", "1", "\n", "precision", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "R", ",", "K", ",", ")", ")", "# -1 for the precision of absent categories", "\n", "recall", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "K", ",", ")", ")", "\n", "scores", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "R", ",", "K", ",", ")", ")", "\n", "_pe", "=", "self", ".", "_paramsEval", "\n", "catIds", "=", "_pe", ".", "catIds", "if", "_pe", ".", "useCats", "else", "[", "-", "1", "]", "\n", "setK", "=", "set", "(", "catIds", ")", "\n", "setI", "=", "set", "(", "_pe", ".", "imgIds", ")", "\n", "# get inds to evaluate", "\n", "k_list", "=", "[", "n", "for", "n", ",", "k", "in", "enumerate", "(", "p", ".", "catIds", ")", "if", "k", "in", "setK", "]", "\n", "i_list", "=", "[", "n", "for", "n", ",", "i", "in", "enumerate", "(", "p", ".", "imgIds", ")", "if", "i", "in", "setI", "]", "\n", "I0", "=", "len", "(", "_pe", ".", "imgIds", ")", "\n", "# pdb.set_trace()", "\n", "# retrieve E at each category, area range, and max number of detections", "\n", "for", "k", ",", "k0", "in", "enumerate", "(", "k_list", ")", ":", "\n", "            ", "Nk", "=", "k0", "*", "I0", "\n", "# Na =  I0", "\n", "E", "=", "[", "self", ".", "evalImgs", "[", "Nk", "+", "i", "]", "for", "i", "in", "i_list", "]", "\n", "E", "=", "[", "e", "for", "e", "in", "E", "if", "not", "e", "is", "None", "]", "\n", "if", "len", "(", "E", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "dtScores", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtScores'", "]", "for", "e", "in", "E", "]", ")", "\n", "\n", "# different sorting method generates slightly different results.", "\n", "# mergesort is used to be consistent as Matlab implementation.", "\n", "inds", "=", "np", ".", "argsort", "(", "-", "dtScores", ",", "kind", "=", "'mergesort'", ")", "\n", "dtScoresSorted", "=", "dtScores", "[", "inds", "]", "\n", "\n", "dtm", "=", "np", ".", "concatenate", "(", "\n", "[", "e", "[", "'map_dtMatches'", "]", "for", "e", "in", "E", "]", ",", "\n", "axis", "=", "1", ")", "[", ":", ",", "inds", "]", "\n", "gtIg", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'gtIg'", "]", "for", "e", "in", "E", "]", ")", "\n", "# dtIg = np.concatenate(", "\n", "#     [e['dtIgnore'] for e in E],", "\n", "#     axis=1)[:, inds]", "\n", "# gtIg = np.concatenate([e['gtIgnore'] for e in E])", "\n", "npig", "=", "np", ".", "count_nonzero", "(", "gtIg", "==", "0", ")", "\n", "# if npig == 0:", "\n", "#     continue", "\n", "tps", "=", "dtm", ">", "0", "\n", "fps", "=", "np", ".", "logical_not", "(", "dtm", ")", "\n", "\n", "tp_sum", "=", "np", ".", "cumsum", "(", "tps", ",", "axis", "=", "1", ")", ".", "astype", "(", "\n", "dtype", "=", "np", ".", "float", ")", "\n", "fp_sum", "=", "np", ".", "cumsum", "(", "fps", ",", "axis", "=", "1", ")", ".", "astype", "(", "\n", "dtype", "=", "np", ".", "float", ")", "\n", "for", "t", ",", "(", "tp", ",", "fp", ")", "in", "enumerate", "(", "zip", "(", "tp_sum", ",", "fp_sum", ")", ")", ":", "\n", "                ", "tp", "=", "np", ".", "array", "(", "tp", ")", "\n", "fp", "=", "np", ".", "array", "(", "fp", ")", "\n", "nd", "=", "len", "(", "tp", ")", "\n", "rc", "=", "tp", "/", "npig", "\n", "pr", "=", "tp", "/", "(", "fp", "+", "tp", "+", "np", ".", "spacing", "(", "1", ")", ")", "\n", "q", "=", "np", ".", "zeros", "(", "(", "R", ",", ")", ")", "\n", "ss", "=", "np", ".", "zeros", "(", "(", "R", ",", ")", ")", "\n", "\n", "if", "nd", ":", "\n", "                    ", "recall", "[", "t", ",", "k", "]", "=", "rc", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "recall", "[", "t", ",", "k", "]", "=", "0", "\n", "\n", "# numpy is slow without cython optimization for accessing elements", "\n", "# use python array gets significant speed improvement", "\n", "", "pr", "=", "pr", ".", "tolist", "(", ")", ";", "q", "=", "q", ".", "tolist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nd", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                    ", "if", "pr", "[", "i", "]", ">", "pr", "[", "i", "-", "1", "]", ":", "\n", "                        ", "pr", "[", "i", "-", "1", "]", "=", "pr", "[", "i", "]", "\n", "\n", "", "", "inds", "=", "np", ".", "searchsorted", "(", "rc", ",", "p", ".", "recThrs", ",", "\n", "side", "=", "'left'", ")", "\n", "try", ":", "\n", "                    ", "for", "ri", ",", "pi", "in", "enumerate", "(", "inds", ")", ":", "\n", "                        ", "q", "[", "ri", "]", "=", "pr", "[", "pi", "]", "\n", "ss", "[", "ri", "]", "=", "dtScoresSorted", "[", "pi", "]", "\n", "", "", "except", ":", "\n", "                    ", "pass", "\n", "", "precision", "[", "t", ",", ":", ",", "k", "]", "=", "np", ".", "array", "(", "q", ")", "\n", "scores", "[", "t", ",", ":", ",", "k", "]", "=", "np", ".", "array", "(", "ss", ")", "\n", "# pdb.set_trace()", "\n", "", "", "self", ".", "eval", "=", "{", "\n", "'params'", ":", "p", ",", "\n", "'counts'", ":", "[", "T", ",", "R", ",", "K", ",", "]", ",", "\n", "'precision'", ":", "precision", ",", "\n", "'recall'", ":", "recall", ",", "\n", "'scores'", ":", "scores", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.summarize": [[799, 943], ["enumerate", "pap_eval.Papeval.summarize._summarize"], "methods", ["None"], ["", "def", "summarize", "(", "self", ")", ":", "\n", "# have not use dice yet", "\n", "# 'mDSC': mdsc,", "\n", "# 'TPRp': mtpr,", "\n", "# 'FNRo': FNR,", "\n", "# 'FDR': FDR", "\n", "        ", "stats", "=", "{", "}", "\n", "AJI", "=", "{", "}", "\n", "DSC", "=", "{", "}", "\n", "# FNO = {}", "\n", "F1_score", "=", "{", "}", "\n", "TPR", "=", "{", "}", "\n", "FDR", "=", "{", "}", "\n", "FNR", "=", "{", "}", "\n", "mAP", "=", "{", "}", "\n", "AP50", "=", "{", "}", "\n", "AP75", "=", "{", "}", "\n", "AP85", "=", "{", "}", "\n", "def", "_summarize", "(", "catId", "=", "None", ",", "iouThr", "=", "None", ",", ")", ":", "\n", "            ", "p", "=", "self", ".", "params", "\n", "iStr", "=", "' {:<18} {} @[ IoU={:<9} ] = {:0.3f}'", "\n", "titleStr", "=", "'Average Precision'", "\n", "typeStr", "=", "'(AP)'", "\n", "iouStr", "=", "'{:0.2f}:{:0.2f}'", ".", "format", "(", "p", ".", "iouThrs", "[", "0", "]", ",", "\n", "p", ".", "iouThrs", "[", "-", "1", "]", ")", "if", "iouThr", "is", "None", "else", "'{:0.2f}'", ".", "format", "(", "iouThr", ")", "\n", "# dimension of precision: [TxRxKxAxM]", "\n", "s", "=", "self", ".", "eval", "[", "'precision'", "]", "\n", "# IoU", "\n", "if", "iouThr", "is", "not", "None", ":", "\n", "                ", "t", "=", "np", ".", "where", "(", "iouThr", "==", "p", ".", "iouThrs", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "t", "]", "\n", "", "if", "catId", "is", "not", "None", ":", "\n", "                ", "s", "=", "s", "[", ":", ",", ":", ",", "catId", "]", "\n", "", "if", "len", "(", "s", "[", "s", ">", "-", "1", "]", ")", "==", "0", ":", "\n", "                ", "mean_s", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "mean_s", "=", "np", ".", "mean", "(", "s", "[", "s", ">", "-", "1", "]", ")", "\n", "# print(iStr.format(titleStr, typeStr, iouStr, mean_s))", "\n", "", "return", "mean_s", "\n", "\n", "# P = {}", "\n", "# R = {}", "\n", "# RLIST = {}", "\n", "# PLIST = {}", "\n", "", "for", "catId", ",", "cat", "in", "enumerate", "(", "self", ".", "_paramsEval", ".", "catIds", ")", ":", "\n", "            ", "aji", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "_paramsEval", ".", "iouThrs", ")", ",", "1", ")", ")", "\n", "_count", "=", "0", "\n", "F1", "=", "0", "\n", "# precision = 0", "\n", "# plist = [0 for i in range(28)]", "\n", "# rlist = [0 for i in range(28)]", "\n", "# recall = 0", "\n", "dsc", "=", "[", "]", "\n", "fno", "=", "0", "\n", "num_G", "=", "0", "\n", "num_D", "=", "0", "\n", "tpr", "=", "[", "]", "\n", "fnr", "=", "[", "]", "\n", "fdr", "=", "[", "]", "\n", "# pdb.set_trace()", "\n", "for", "result", "in", "self", ".", "evalImgs", ":", "\n", "\n", "                ", "if", "result", "is", "None", ":", "\n", "# skip len(gt)=0 & len(dt)", "\n", "                    ", "continue", "\n", "", "if", "result", "[", "'category_id'", "]", "==", "cat", ":", "\n", "                    ", "aji", "=", "aji", "+", "result", "[", "'AJI'", "]", "\n", "F1", "=", "F1", "+", "result", "[", "'F1'", "]", "\n", "# precision = precision + result['precision']", "\n", "# recall = recall + result['recall']", "\n", "# for t in range(28):", "\n", "#     plist[t] = plist[t] + result['PLIST'][t]", "\n", "#     rlist[t] = rlist[t] + result['RLIST'][t]", "\n", "# dsc.append(result['DSC'])", "\n", "dsc", ".", "extend", "(", "list", "(", "result", "[", "'DSC'", "]", ")", ")", "\n", "# fno = fno + result['FNO']", "\n", "num_D", "=", "num_D", "+", "result", "[", "\"num_D\"", "]", "\n", "num_G", "=", "num_G", "+", "result", "[", "\"num_G\"", "]", "\n", "fdr", ".", "append", "(", "result", "[", "'FDR'", "]", ")", "\n", "fnr", ".", "append", "(", "result", "[", "'FNRo'", "]", ")", "\n", "\n", "tpr", ".", "extend", "(", "list", "(", "result", "[", "'TPRp'", "]", ")", ")", "\n", "# if max(tpr)>1:", "\n", "#     pdb.set_trace()", "\n", "_count", "+=", "1", "\n", "", "", "aji", "=", "np", ".", "divide", "(", "aji", ",", "_count", ")", "\n", "F1", "=", "F1", "/", "_count", "\n", "# precision = precision/_count", "\n", "# recall = recall/ _count", "\n", "fdr", "=", "sum", "(", "fdr", ")", "/", "num_D", "\n", "fnr", "=", "sum", "(", "fnr", ")", "/", "num_G", "\n", "# pdb.set_trace()", "\n", "tpr", "=", "sum", "(", "tpr", ")", "/", "(", "len", "(", "tpr", ")", "+", "1e-10", ")", "\n", "dsc", "=", "sum", "(", "dsc", ")", "/", "(", "len", "(", "dsc", ")", "+", "1e-10", ")", "\n", "# plist = [f/_count for f in plist]", "\n", "# rlist = [f/_count for f in rlist]", "\n", "# dsc = np.asarray(dsc)", "\n", "# dsc = np.mean(dsc[np.where(dsc>0)])", "\n", "# pdb.set_trace()", "\n", "\n", "# fno = fno/_count", "\n", "AJI", "[", "cat", "]", "=", "aji", "\n", "F1_score", "[", "cat", "]", "=", "F1", "\n", "DSC", "[", "cat", "]", "=", "dsc", "\n", "TPR", "[", "cat", "]", "=", "tpr", "\n", "FDR", "[", "cat", "]", "=", "fdr", "\n", "FNR", "[", "cat", "]", "=", "fnr", "\n", "mAP", "[", "cat", "]", "=", "_summarize", "(", "catId", ")", "\n", "AP50", "[", "cat", "]", "=", "_summarize", "(", "catId", ",", "0.5", ")", "\n", "AP85", "[", "cat", "]", "=", "_summarize", "(", "catId", ",", "0.85", ")", "\n", "AP75", "[", "cat", "]", "=", "_summarize", "(", "catId", ",", "0.75", ")", "\n", "# P[cat] = precision", "\n", "# PLIST[cat] = plist", "\n", "# RLIST[cat] = rlist", "\n", "# R[cat] = recall", "\n", "# DSC[cat] = dsc", "\n", "# FNO[cat] = fno", "\n", "", "mAP", "[", "'all'", "]", "=", "_summarize", "(", ")", "\n", "AP50", "[", "'all'", "]", "=", "_summarize", "(", "iouThr", "=", ".5", ")", "\n", "AP75", "[", "'all'", "]", "=", "_summarize", "(", "iouThr", "=", ".75", ")", "\n", "AP85", "[", "'all'", "]", "=", "_summarize", "(", "iouThr", "=", ".85", ")", "\n", "# pdb.set_trace()", "\n", "\n", "stats", "[", "'AJI'", "]", "=", "AJI", "\n", "stats", "[", "'F1'", "]", "=", "F1_score", "\n", "# stats['precision'] = P", "\n", "# stats['recall'] = R", "\n", "stats", "[", "'DSC'", "]", "=", "DSC", "\n", "stats", "[", "'TPRP'", "]", "=", "TPR", "\n", "stats", "[", "'FNRo'", "]", "=", "FNR", "\n", "stats", "[", "'FDRo'", "]", "=", "FDR", "\n", "# stats['FNO'] = FNO", "\n", "# stats['PLIST'] = PLIST", "\n", "# stats['RLIST'] = RLIST", "\n", "# pdb.set_trace()", "\n", "stats", "[", "'mAP'", "]", "=", "mAP", "\n", "stats", "[", "'AP50'", "]", "=", "AP50", "\n", "stats", "[", "'AP75'", "]", "=", "AP75", "\n", "stats", "[", "'AP85'", "]", "=", "AP85", "\n", "\n", "\n", "\n", "self", ".", "stats", "=", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Params.setDetParams": [[949, 966], ["numpy.linspace", "numpy.linspace", "numpy.round", "numpy.round"], "methods", ["None"], ["def", "setDetParams", "(", "self", ")", ":", "\n", "        ", "self", ".", "imgIds", "=", "[", "]", "\n", "self", ".", "catIds", "=", "[", "]", "\n", "# np.arange causes trouble.  the data point on arange is slightly larger than the true value", "\n", "# self.iouThrs = [0.5] #np.linspace(.5, 0.95, np.round((0.95 - .5) / .05) + 1, endpoint=True)", "\n", "# self.recThrs = np.linspace(.0, 1.00, np.round((1.00 - .0) / .01) + 1, endpoint=True)", "\n", "self", ".", "maxDets", "=", "[", "200", "]", "\n", "self", ".", "areaRng", "=", "[", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", "]", "\n", "# self.areaRngLbl = ['all', 'small', 'medium', 'large']", "\n", "self", ".", "useCats", "=", "1", "\n", "self", ".", "UseIOU", "=", "True", "\n", "self", ".", "iouThrs", "=", "np", ".", "linspace", "(", ".5", ",", "0.95", ",", "\n", "np", ".", "round", "(", "(", "0.95", "-", ".5", ")", "/", ".05", ")", "+", "1", ",", "\n", "endpoint", "=", "True", ")", "\n", "self", ".", "recThrs", "=", "np", ".", "linspace", "(", ".0", ",", "1.00", ",", "\n", "np", ".", "round", "(", "(", "1.00", "-", ".0", ")", "/", ".01", ")", "+", "1", ",", "\n", "endpoint", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Params.__init__": [[967, 976], ["pap_eval.Params.setDetParams", "Exception"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Params.setDetParams"], ["", "def", "__init__", "(", "self", ",", "iouType", "=", "'segm'", ")", ":", "\n", "        ", "if", "iouType", "==", "'segm'", "or", "iouType", "==", "'bbox'", ":", "\n", "            ", "self", ".", "setDetParams", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'iouType not supported'", ")", "\n", "", "self", ".", "iouType", "=", "iouType", "\n", "# useSegm is deprecated", "\n", "self", ".", "useSegm", "=", "None", "", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval._isArrayLike": [[17, 19], ["hasattr", "hasattr"], "function", ["None"], ["def", "_isArrayLike", "(", "obj", ")", ":", "\n", "    ", "return", "hasattr", "(", "obj", ",", "'__iter__'", ")", "and", "hasattr", "(", "obj", ",", "'__len__'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.do_pap_evaluation": [[20, 48], ["logger.info", "pap_eval.prepare_for_pap_segmentation", "pap_eval.PapResults", "logger.info", "logger.info", "torch.save", "tempfile.NamedTemporaryFile", "pap_eval.evaluate_predictions_on_pap", "pap_eval.PapResults.update", "pap_eval.visualize_results", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.prepare_for_pap_segmentation", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.evaluate_predictions_on_pap", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.PapResults.update", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.visualize_results"], ["", "def", "do_pap_evaluation", "(", "\n", "dataset", ",", "\n", "predictions", ",", "\n", "output_folder", ",", "\n", "iou_types", ",", "\n", "logger", ",", "\n", "visual_num", "=", "0", "\n", ")", ":", "\n", "    ", "logger", "=", "logger", "\n", "logger", ".", "info", "(", "\"Preparing results for Pap format\"", ")", "\n", "pap_gts", ",", "pap_results", "=", "prepare_for_pap_segmentation", "(", "predictions", ",", "dataset", ")", "\n", "results", "=", "PapResults", "(", "*", "iou_types", ")", "\n", "logger", ".", "info", "(", "\"Evaluating predictions\"", ")", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "f", ":", "\n", "            ", "file_path", "=", "f", ".", "name", "\n", "if", "output_folder", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "iou_type", "+", "\".json\"", ")", "\n", "", "res", "=", "evaluate_predictions_on_pap", "(", "\n", "pap_gts", ",", "pap_results", ",", "file_path", ",", "iou_type", "\n", ")", "\n", "results", ".", "update", "(", "res", ")", "\n", "", "", "logger", ".", "info", "(", "results", ")", "\n", "if", "output_folder", ":", "\n", "        ", "if", "visual_num", ">", "0", ":", "\n", "            ", "visualize_results", "(", "dataset", ",", "pap_results", ",", "pap_gts", ",", "output_folder", ",", "visual_num", ")", "\n", "", "torch", ".", "save", "(", "results", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"pap_results.pth\"", ")", ")", "\n", "", "return", "results", ",", "pap_results", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.visualize_results": [[49, 78], ["os.path.join", "maskrcnn_benchmark.utils.miscellaneous.mkdir", "collections.defaultdict", "collections.defaultdict", "enumerate", "enumerate", "visual_imgs_dt[].append", "enumerate", "collections.defaultdict.items", "maskrcnn_benchmark.utils.visual.display_instance", "os.path.join", "cv2.imwrite", "visual_imgs_gt[].append", "cv2.imwrite", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.visual.display_instance"], ["", "def", "visualize_results", "(", "dataset", ",", "pap_results", ",", "pap_gts", ",", "output_folder", ",", "visual_num", ",", "show_bbox", "=", "False", ",", "show_caption", "=", "False", ")", ":", "\n", "# pdb.set_trace()", "\n", "    ", "vis_save_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'visual'", ")", "\n", "mkdir", "(", "vis_save_path", ")", "\n", "visual_imgs_dt", "=", "defaultdict", "(", "list", ")", "\n", "visual_imgs_gt", "=", "defaultdict", "(", "list", ")", "\n", "for", "_", ",", "pap_result", "in", "enumerate", "(", "pap_results", ")", ":", "\n", "        ", "original_id", "=", "pap_result", "[", "'image_id'", "]", "\n", "visual_imgs_dt", "[", "original_id", "[", "'file_name'", "]", "+", "'~%d~%d'", "%", "(", "\n", "original_id", "[", "'location'", "]", "[", "0", "]", ",", "original_id", "[", "'location'", "]", "[", "1", "]", ")", "]", ".", "append", "(", "pap_result", ")", "\n", "", "if", "pap_gts", "is", "not", "None", ":", "\n", "        ", "for", "_", ",", "pap_gt", "in", "enumerate", "(", "pap_gts", ")", ":", "\n", "            ", "original_id", "=", "pap_gt", "[", "'image_id'", "]", "\n", "visual_imgs_gt", "[", "original_id", "[", "'file_name'", "]", "+", "'~%d~%d'", "%", "(", "\n", "original_id", "[", "'location'", "]", "[", "0", "]", ",", "original_id", "[", "'location'", "]", "[", "1", "]", ")", "]", ".", "append", "(", "pap_gt", ")", "\n", "", "", "show_gt", "=", "True", "if", "pap_gts", "is", "not", "None", "else", "False", "\n", "\n", "for", "i", ",", "(", "k", ",", "vis_gt", ")", "in", "enumerate", "(", "visual_imgs_gt", ".", "items", "(", ")", ")", ":", "\n", "\n", "            ", "vis_dt", "=", "visual_imgs_dt", "[", "k", "]", "\n", "# pdb.set_trace()", "\n", "vis_img", ",", "gts", "=", "display_instance", "(", "dataset", ",", "k", ",", "vis_gt", ",", "\n", "vis_dt", ",", "show_gt", "=", "show_gt", ",", "\n", "show_bbox", "=", "show_bbox", ",", "show_caption", "=", "show_caption", ")", "\n", "# vis_img,gts = vis_predict(dataset, vis_gt, vis_dt, k, True)", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "vis_save_path", ",", "k", "+", "'.jpg'", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "vis_img", ")", "\n", "if", "show_gt", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "vis_save_path", ",", "k", "+", "'gt.jpg'", ")", ",", "gts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.prepare_for_pap_segmentation": [[79, 144], ["maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker", "enumerate", "predictions.items", "dataset.get_ground_truth", "dataset.get_ground_truth.get_field().tolist", "dataset.get_ground_truth.get_field", "dataset.get_ground_truth.bbox.tolist", "pap_gt.extend", "prediction.resize.resize", "prediction.resize.get_field", "prediction.resize.bbox.tolist", "prediction.resize.get_field().tolist", "prediction.resize.get_field().tolist", "pap_results.extend", "len", "list", "maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker.", "rle[].decode", "dataset.get_ground_truth.get_field", "masker.expand", "prediction.resize.get_field", "prediction.resize.get_field", "pycocotools.mask.encode", "print", "enumerate", "numpy.array", "enumerate"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.Pap.PapNucleiSourceDataset.get_ground_truth", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.segmentation_mask.SegmentationMask.decode", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.modeling.box_coder.BoxCoder.encode"], ["", "", "", "def", "prepare_for_pap_segmentation", "(", "predictions", ",", "dataset", ")", ":", "\n", "    ", "masker", "=", "Masker", "(", "threshold", "=", "0.5", ",", "padding", "=", "1", ")", "\n", "pap_results", "=", "[", "]", "\n", "pap_gt", "=", "[", "]", "\n", "for", "idx", ",", "(", "image_id", ",", "prediction", ")", "in", "enumerate", "(", "predictions", ".", "items", "(", ")", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "# TODO replace with get_img_info?", "\n", "", "image_width", "=", "dataset", ".", "maxWS", "\n", "image_height", "=", "dataset", ".", "maxWS", "\n", "target", "=", "dataset", ".", "get_ground_truth", "(", "original_id", ")", "\n", "gt_labels", "=", "target", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "gt_masks", "=", "target", ".", "get_field", "(", "\"masks\"", ")", "\n", "gt_boxes", "=", "target", ".", "bbox", ".", "tolist", "(", ")", "\n", "gt_mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "gt_labels", "]", "\n", "pap_gt", ".", "extend", "(", "\n", "[", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "gt_mapped_labels", "[", "k", "]", ",", "\n", "\"segmentation\"", ":", "rle", ",", "\n", "\"bbox\"", ":", "gt_boxes", "[", "k", "]", "\n", "\n", "}", "for", "k", ",", "rle", "in", "enumerate", "(", "gt_masks", ")", "]", "\n", ")", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "masks", "=", "prediction", ".", "get_field", "(", "\"mask\"", ")", "\n", "# Masker is necessary only if masks haven't been already resized.", "\n", "if", "list", "(", "masks", ".", "shape", "[", "-", "2", ":", "]", ")", "!=", "[", "image_height", ",", "image_width", "]", ":", "\n", "            ", "masks", "=", "masker", "(", "masks", ".", "expand", "(", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "prediction", ")", "\n", "masks", "=", "masks", "[", "0", "]", "\n", "# pdb.set_trace()", "\n", "# prepare for bbox", "\n", "# prediction = prediction.convert(\"xywh\")", "\n", "", "boxes", "=", "prediction", ".", "bbox", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "# blank_rle = mask_util.encode(np.array(blank_mask[0, :, :], order=\"F\"))", "\n", "rles", "=", "[", "\n", "maskUtils", ".", "encode", "(", "np", ".", "array", "(", "mask", "[", "0", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "order", "=", "\"F\"", ")", ")", "[", "0", "]", "\n", "for", "mask", "in", "masks", "\n", "]", "\n", "for", "rle", "in", "rles", ":", "\n", "            ", "rle", "[", "\"counts\"", "]", "=", "rle", "[", "\"counts\"", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", "# pdb.set_trace()", "\n", "", "try", ":", "\n", "            ", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "", "except", ":", "\n", "# pdb.set_trace()", "\n", "            ", "print", "(", "'bug'", ")", "\n", "", "pap_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "mapped_labels", "[", "k", "]", ",", "\n", "\"segmentation\"", ":", "rle", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "\"bbox\"", ":", "boxes", "[", "k", "]", "\n", "\n", "}", "\n", "for", "k", ",", "rle", "in", "enumerate", "(", "rles", ")", "\n", "]", "\n", ")", "\n", "\n", "", "return", "pap_gt", ",", "pap_results", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.evaluate_predictions_on_pap": [[189, 204], ["pap_eval.Papeval", "pap_eval.Papeval.evaluate", "pap_eval.Papeval.accumulate", "pap_eval.Papeval.summarize", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.evaluate", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.accumulate", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.Papeval.summarize"], ["", "", "def", "evaluate_predictions_on_pap", "(", "\n", "pap_gt", ",", "pap_results", ",", "json_result_file", ",", "iou_type", "=", "\"segm\"", "\n", ")", ":", "\n", "    ", "import", "json", "\n", "\n", "with", "open", "(", "json_result_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "pap_results", ",", "f", ")", "\n", "\n", "", "_eval", "=", "Papeval", "(", "pap_gt", ",", "pap_results", ",", "iou_type", ")", "\n", "_eval", ".", "evaluate", "(", ")", "\n", "_eval", ".", "accumulate", "(", ")", "\n", "_eval", ".", "summarize", "(", ")", "\n", "\n", "\n", "return", "_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.convert_to_xylist": [[205, 211], ["new_poly.append", "zip"], "function", ["None"], ["", "def", "convert_to_xylist", "(", "polys", ")", ":", "\n", "    ", "new_poly", "=", "[", "]", "\n", "for", "poly", "in", "polys", ":", "\n", "        ", "poly2", "=", "[", "[", "i", ",", "j", "]", "for", "i", ",", "j", "in", "zip", "(", "poly", "[", ":", ":", "2", "]", ",", "poly", "[", "1", ":", ":", "2", "]", ")", "]", "\n", "new_poly", ".", "append", "(", "poly2", ")", "\n", "", "return", "new_poly", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.__init__.pap_evaluation": [[4, 16], ["logging.getLogger", "logging.getLogger.info", "pap_eval.do_pap_evaluation", "logging.getLogger.warning"], "function", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.datasets.cell.CELL.info", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.pap.pap_eval.do_pap_evaluation"], []], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.distributed.DistributedSampler.__init__": [[25, 41], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_world_size", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_world_size", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.utils.comm.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.distributed.DistributedSampler.__iter__": [[42, 61], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.distributed.DistributedSampler.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.distributed.DistributedSampler.set_epoch": [[65, 67], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.grouped_batch_sampler.GroupedBatchSampler.__init__": [[24, 39], ["torch.as_tensor", "isinstance", "ValueError", "grouped_batch_sampler.GroupedBatchSampler.group_ids.dim", "torch.unique().sort", "torch.unique"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "sampler", ",", "Sampler", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"sampler should be an instance of \"", "\n", "\"torch.utils.data.Sampler, but got sampler={}\"", ".", "format", "(", "sampler", ")", "\n", ")", "\n", "", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "group_ids", "=", "torch", ".", "as_tensor", "(", "group_ids", ")", "\n", "assert", "self", ".", "group_ids", ".", "dim", "(", ")", "==", "1", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_uneven", "=", "drop_uneven", "\n", "\n", "self", ".", "groups", "=", "torch", ".", "unique", "(", "self", ".", "group_ids", ")", ".", "sort", "(", "0", ")", "[", "0", "]", "\n", "\n", "self", ".", "_can_reuse_batches", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches": [[40, 101], ["len", "torch.as_tensor", "torch.full", "torch.arange", "tuple", "torch.as_tensor", "[].tolist", "list", "len", "c.split", "itertools.chain.from_iterable", "t[].item", "merged[].tolist", "enumerate", "torch.as_tensor.tolist", "torch.as_tensor.sort", "len", "kept.append", "s.sort"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.tools.split_set.split"], ["", "def", "_prepare_batches", "(", "self", ")", ":", "\n", "        ", "dataset_size", "=", "len", "(", "self", ".", "group_ids", ")", "\n", "# get the sampled indices from the sampler", "\n", "sampled_ids", "=", "torch", ".", "as_tensor", "(", "list", "(", "self", ".", "sampler", ")", ")", "\n", "# potentially not all elements of the dataset were sampled", "\n", "# by the sampler (e.g., DistributedSampler).", "\n", "# construct a tensor which contains -1 if the element was", "\n", "# not sampled, and a non-negative number indicating the", "\n", "# order where the element was sampled.", "\n", "# for example. if sampled_ids = [3, 1] and dataset_size = 5,", "\n", "# the order is [-1, 1, -1, 0, -1]", "\n", "order", "=", "torch", ".", "full", "(", "(", "dataset_size", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "order", "[", "sampled_ids", "]", "=", "torch", ".", "arange", "(", "len", "(", "sampled_ids", ")", ")", "\n", "\n", "# get a mask with the elements that were sampled", "\n", "mask", "=", "order", ">=", "0", "\n", "\n", "# find the elements that belong to each individual cluster", "\n", "clusters", "=", "[", "(", "self", ".", "group_ids", "==", "i", ")", "&", "mask", "for", "i", "in", "self", ".", "groups", "]", "\n", "# get relative order of the elements inside each cluster", "\n", "# that follows the order from the sampler", "\n", "relative_order", "=", "[", "order", "[", "cluster", "]", "for", "cluster", "in", "clusters", "]", "\n", "# with the relative order, find the absolute order in the", "\n", "# sampled space", "\n", "permutation_ids", "=", "[", "s", "[", "s", ".", "sort", "(", ")", "[", "1", "]", "]", "for", "s", "in", "relative_order", "]", "\n", "# permute each cluster so that they follow the order from", "\n", "# the sampler", "\n", "permuted_clusters", "=", "[", "sampled_ids", "[", "idx", "]", "for", "idx", "in", "permutation_ids", "]", "\n", "\n", "# splits each cluster in batch_size, and merge as a list of tensors", "\n", "splits", "=", "[", "c", ".", "split", "(", "self", ".", "batch_size", ")", "for", "c", "in", "permuted_clusters", "]", "\n", "merged", "=", "tuple", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "splits", ")", ")", "\n", "\n", "# now each batch internally has the right order, but", "\n", "# they are grouped by clusters. Find the permutation between", "\n", "# different batches that brings them as close as possible to", "\n", "# the order that we have in the sampler. For that, we will consider the", "\n", "# ordering as coming from the first element of each batch, and sort", "\n", "# correspondingly", "\n", "first_element_of_batch", "=", "[", "t", "[", "0", "]", ".", "item", "(", ")", "for", "t", "in", "merged", "]", "\n", "# get and inverse mapping from sampled indices and the position where", "\n", "# they occur (as returned by the sampler)", "\n", "inv_sampled_ids_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "sampled_ids", ".", "tolist", "(", ")", ")", "}", "\n", "# from the first element in each batch, get a relative ordering", "\n", "first_index_of_batch", "=", "torch", ".", "as_tensor", "(", "\n", "[", "inv_sampled_ids_map", "[", "s", "]", "for", "s", "in", "first_element_of_batch", "]", "\n", ")", "\n", "\n", "# permute the batches so that they approximately follow the order", "\n", "# from the sampler", "\n", "permutation_order", "=", "first_index_of_batch", ".", "sort", "(", "0", ")", "[", "1", "]", ".", "tolist", "(", ")", "\n", "# finally, permute the batches", "\n", "batches", "=", "[", "merged", "[", "i", "]", ".", "tolist", "(", ")", "for", "i", "in", "permutation_order", "]", "\n", "\n", "if", "self", ".", "drop_uneven", ":", "\n", "            ", "kept", "=", "[", "]", "\n", "for", "batch", "in", "batches", ":", "\n", "                ", "if", "len", "(", "batch", ")", "==", "self", ".", "batch_size", ":", "\n", "                    ", "kept", ".", "append", "(", "batch", ")", "\n", "", "", "batches", "=", "kept", "\n", "", "return", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.grouped_batch_sampler.GroupedBatchSampler.__iter__": [[102, 110], ["iter", "grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_can_reuse_batches", ":", "\n", "            ", "batches", "=", "self", ".", "_batches", "\n", "self", ".", "_can_reuse_batches", "=", "False", "\n", "", "else", ":", "\n", "            ", "batches", "=", "self", ".", "_prepare_batches", "(", ")", "\n", "", "self", ".", "_batches", "=", "batches", "\n", "return", "iter", "(", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.grouped_batch_sampler.GroupedBatchSampler.__len__": [[111, 116], ["len", "hasattr", "grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_batches\"", ")", ":", "\n", "            ", "self", ".", "_batches", "=", "self", ".", "_prepare_batches", "(", ")", "\n", "self", ".", "_can_reuse_batches", "=", "True", "\n", "", "return", "len", "(", "self", ".", "_batches", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_sampler", ",", "num_iterations", ",", "start_iter", "=", "0", ")", ":", "\n", "        ", "self", ".", "batch_sampler", "=", "batch_sampler", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "self", ".", "start_iter", "=", "start_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__iter__": [[16, 29], ["hasattr", "iteration_based_batch_sampler.IterationBasedBatchSampler.batch_sampler.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.distributed.DistributedSampler.set_epoch"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "iteration", "=", "self", ".", "start_iter", "\n", "while", "iteration", "<=", "self", ".", "num_iterations", ":", "\n", "# if the underlying sampler has a set_epoch method, like", "\n", "# DistributedSampler, used for making each process see", "\n", "# a different split of the dataset, then set it", "\n", "            ", "if", "hasattr", "(", "self", ".", "batch_sampler", ".", "sampler", ",", "\"set_epoch\"", ")", ":", "\n", "                ", "self", ".", "batch_sampler", ".", "sampler", ".", "set_epoch", "(", "iteration", ")", "\n", "", "for", "batch", "in", "self", ".", "batch_sampler", ":", "\n", "                ", "iteration", "+=", "1", "\n", "if", "iteration", ">", "self", ".", "num_iterations", ":", "\n", "                    ", "break", "\n", "", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__len__": [[30, 32], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_iterations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.weighted_random_sampler.WeightedRandomSubSampler.__init__": [[17, 30], ["torch.tensor", "len", "isinstance", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "weights", ",", "replacement", "=", "True", ")", ":", "\n", "\n", "        ", "if", "not", "isinstance", "(", "replacement", ",", "bool", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"replacement should be a boolean value, but got \"", "\n", "\"replacement={}\"", ".", "format", "(", "replacement", ")", ")", "\n", "\n", "", "self", ".", "gen_fake", "=", "data_source", ".", "gen_fake", "\n", "self", ".", "gen_true", "=", "data_source", ".", "gen_true", "\n", "self", ".", "source_data", "=", "data_source", ".", "start_id", "\n", "self", ".", "weights", "=", "torch", ".", "tensor", "(", "weights", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "data_source", ")", "\n", "self", ".", "replacement", "=", "replacement", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.weighted_random_sampler.WeightedRandomSubSampler.__iter__": [[31, 34], ["iter", "torch.multinomial().tolist", "torch.multinomial"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "torch", ".", "multinomial", "(", "self", ".", "weights", ",", "self", ".", "num_samples", ",", "\n", "self", ".", "replacement", ")", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.samplers.weighted_random_sampler.WeightedRandomSubSampler.__len__": [[35, 37], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Compose.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Compose.__call__": [[14, 18], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "target", "=", "t", "(", "image", ",", "target", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Compose.__repr__": [[19, 26], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "\"\\n\"", "\n", "format_string", "+=", "\"    {0}\"", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "\"\\n)\"", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Resize.__init__": [[29, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_size", ",", "max_size", ")", ":", "\n", "        ", "self", ".", "min_size", "=", "min_size", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Resize.get_size": [[34, 60], ["float", "float", "int", "int", "min", "max", "int", "round"], "methods", ["None"], ["", "def", "get_size", "(", "self", ",", "image_size", ")", ":", "\n", "        ", "w", ",", "h", "=", "image_size", "\n", "size", "=", "self", ".", "min_size", "\n", "max_size", "=", "self", ".", "max_size", "\n", "\n", "\n", "if", "max_size", "is", "not", "None", ":", "\n", "            ", "if", "w", "==", "max_size", "and", "h", "==", "max_size", ":", "\n", "# this is the case for ISBI2015 val (1024,1024)", "\n", "                ", "return", "(", "h", ",", "w", ")", "\n", "", "min_original_size", "=", "float", "(", "min", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "max_original_size", "=", "float", "(", "max", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "if", "max_original_size", "/", "min_original_size", "*", "size", ">", "max_size", ":", "\n", "                ", "size", "=", "int", "(", "round", "(", "max_size", "*", "min_original_size", "/", "max_original_size", ")", ")", "\n", "# print('size', size)", "\n", "", "", "if", "(", "w", "<=", "h", "and", "w", "==", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "size", ")", ":", "\n", "            ", "return", "(", "h", ",", "w", ")", "\n", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ow", "=", "size", "\n", "oh", "=", "int", "(", "size", "*", "h", "/", "w", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "size", "\n", "ow", "=", "int", "(", "size", "*", "w", "/", "h", ")", "\n", "\n", "", "return", "(", "oh", ",", "ow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Resize.__call__": [[61, 70], ["transforms.Resize.get_size", "torchvision.transforms.functional.resize", "torchvision.transforms.functional.resize", "target.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Resize.get_size", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.resize"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "size", "=", "self", ".", "get_size", "(", "image", ".", "size", ")", "\n", "# print('img', image.size)", "\n", "image", "=", "F", ".", "resize", "(", "image", ",", "size", ")", "\n", "# print('before', target)", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "target", "=", "target", ".", "resize", "(", "image", ".", "size", ")", "\n", "# print('after', target)", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.RandomHorizontalFlip.__init__": [[73, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.RandomHorizontalFlip.__call__": [[76, 82], ["random.random", "torchvision.transforms.functional.hflip", "torchvision.transforms.functional.hflip", "target.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.hflip", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.image_list.ImageList.hflip", "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.structures.bounding_box.BoxList.transpose"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image", "=", "F", ".", "hflip", "(", "image", ")", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "target", "=", "target", ".", "transpose", "(", "0", ")", "\n", "", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.ToTensor.__call__": [[85, 87], ["torchvision.transforms.functional.to_tensor", "torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "to_tensor", "(", "image", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Normalize.__init__": [[90, 94], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "to_bgr255", "=", "True", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "to_bgr255", "=", "to_bgr255", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.Normalize.__call__": [[95, 100], ["torchvision.transforms.functional.normalize", "torchvision.transforms.functional.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "to_bgr255", ":", "\n", "            ", "image", "=", "image", "[", "[", "2", ",", "1", ",", "0", "]", "]", "*", "255", "\n", "", "image", "=", "F", ".", "normalize", "(", "image", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.AdjustGamma.__init__": [[102, 104], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ")", ":", "\n", "        ", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.AdjustGamma.__call__": [[105, 109], ["torchvision.adjust_gamma", "torchvision.adjust_gamma", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "return", "tf", ".", "adjust_gamma", "(", "img", ",", "random", ".", "uniform", "(", "1", ",", "\n", "1", "+", "\n", "self", ".", "gamma", ")", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.AdjustSaturation.__init__": [[111, 113], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "saturation", ")", ":", "\n", "        ", "self", ".", "saturation", "=", "saturation", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.AdjustSaturation.__call__": [[114, 119], ["torchvision.adjust_saturation", "torchvision.adjust_saturation", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "\n", "        ", "return", "tf", ".", "adjust_saturation", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "saturation", ",", "\n", "1", "+", "self", ".", "saturation", ")", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.AdjustHue.__init__": [[121, 123], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "hue", ")", ":", "\n", "        ", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.AdjustHue.__call__": [[124, 127], ["torchvision.adjust_hue", "torchvision.adjust_hue", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "return", "tf", ".", "adjust_hue", "(", "img", ",", "random", ".", "uniform", "(", "-", "self", ".", "hue", ",", "\n", "self", ".", "hue", ")", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.AdjustBrightness.__init__": [[129, 131], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "bf", ")", ":", "\n", "        ", "self", ".", "bf", "=", "bf", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.AdjustBrightness.__call__": [[132, 136], ["torchvision.adjust_brightness", "torchvision.adjust_brightness", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "return", "tf", ".", "adjust_brightness", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "bf", ",", "\n", "1", "+", "self", ".", "bf", ")", ")", ",", "target", "\n", "", "", "class", "AdjustContrast", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.AdjustContrast.__init__": [[137, 139], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cf", ")", ":", "\n", "        ", "self", ".", "cf", "=", "cf", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.AdjustContrast.__call__": [[140, 144], ["torchvision.adjust_contrast", "torchvision.adjust_contrast", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "return", "tf", ".", "adjust_contrast", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "cf", ",", "\n", "1", "+", "self", ".", "cf", ")", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.RandomErasing.__init__": [[159, 162], ["transforms.RandomErasing.get_random_eraser"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.RandomErasing.get_random_eraser"], ["def", "__init__", "(", "self", ",", "prob", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "erasor", "=", "self", ".", "get_random_eraser", "(", ")", "\n", "", "def", "get_random_eraser", "(", "self", ",", "s_l", "=", "0.001", ",", "s_h", "=", "0.004", ",", "r_1", "=", "0.2", ",", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.RandomErasing.get_random_eraser": [[162, 195], ["numpy.random.rand", "numpy.random.uniform", "int", "int", "numpy.random.randint", "numpy.random.randint", "numpy.random.uniform", "numpy.random.uniform", "numpy.sqrt", "numpy.sqrt", "numpy.random.uniform"], "methods", ["None"], ["", "def", "get_random_eraser", "(", "self", ",", "s_l", "=", "0.001", ",", "s_h", "=", "0.004", ",", "r_1", "=", "0.2", ",", "\n", "r_2", "=", "1", "/", "0.2", ",", "v_l", "=", "0", ",", "v_h", "=", "255", ",", "pixel_level", "=", "True", ")", ":", "\n", "        ", "p", "=", "self", ".", "prob", "\n", "def", "eraser", "(", "input_img", ")", ":", "\n", "            ", "p_1", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "\n", "if", "p_1", ">", "p", ":", "\n", "                ", "return", "input_img", "\n", "\n", "", "img_h", ",", "img_w", ",", "img_c", "=", "input_img", ".", "shape", "\n", "\n", "\n", "while", "True", ":", "\n", "                ", "s", "=", "np", ".", "random", ".", "uniform", "(", "s_l", ",", "s_h", ")", "*", "img_h", "*", "img_w", "\n", "r", "=", "np", ".", "random", ".", "uniform", "(", "r_1", ",", "r_2", ")", "\n", "w", "=", "int", "(", "np", ".", "sqrt", "(", "s", "/", "r", ")", ")", "\n", "h", "=", "int", "(", "np", ".", "sqrt", "(", "s", "*", "r", ")", ")", "\n", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img_w", ")", "\n", "top", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img_h", ")", "\n", "\n", "if", "left", "+", "w", "<=", "img_w", "and", "top", "+", "h", "<=", "img_h", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "pixel_level", ":", "\n", "                ", "c", "=", "np", ".", "random", ".", "uniform", "(", "v_l", ",", "v_h", ",", "(", "h", ",", "w", ",", "img_c", ")", ")", "\n", "", "else", ":", "\n", "                ", "c", "=", "np", ".", "random", ".", "uniform", "(", "v_l", ",", "v_h", ")", "\n", "\n", "", "input_img", "[", "top", ":", "top", "+", "h", ",", "left", ":", "left", "+", "w", ",", ":", "]", "=", "c", "\n", "\n", "return", "input_img", "\n", "\n", "", "return", "eraser", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.transforms.RandomErasing.__call__": [[196, 206], ["random.randint", "numpy.array", "range", "PIL.Image.fromarray", "transforms.RandomErasing.erasor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "\n", "        ", "num", "=", "random", ".", "randint", "(", "0", ",", "10", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "# print('before', img.shape)", "\n", "for", "_", "in", "range", "(", "num", ")", ":", "\n", "            ", "img", "=", "self", ".", "erasor", "(", "img", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "\"RGB\"", ")", "\n", "# print('after', img.size)", "\n", "return", "img", ",", "target", "", "", "", ""]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.transforms.build.build_transforms": [[5, 81], ["transforms.Normalize", "transforms.Compose", "transforms.Compose", "transforms.Compose", "transforms.Compose", "transforms.Compose", "transforms.Compose", "print", "transforms.Resize", "transforms.RandomHorizontalFlip", "transforms.AdjustBrightness", "transforms.AdjustContrast", "transforms.AdjustHue", "transforms.RandomErasing", "transforms.ToTensor", "transforms.Resize", "transforms.RandomHorizontalFlip", "transforms.ToTensor", "transforms.Resize", "transforms.RandomHorizontalFlip", "transforms.AdjustBrightness", "transforms.AdjustContrast", "transforms.AdjustHue", "transforms.RandomErasing", "transforms.ToTensor", "transforms.Resize", "transforms.RandomHorizontalFlip", "transforms.AdjustBrightness", "transforms.AdjustContrast", "transforms.AdjustHue", "transforms.RandomErasing", "transforms.ToTensor"], "function", ["None"], ["\n", "import", "torch", ".", "utils", ".", "data", "\n", "from", "maskrcnn_benchmark", ".", "utils", ".", "comm", "import", "get_world_size", "\n", "from", "maskrcnn_benchmark", ".", "utils", ".", "imports", "import", "import_file", "\n", "\n", "from", ".", "import", "datasets", "as", "D", "\n", "from", ".", "import", "samplers", "\n", "import", "pdb", "\n", "from", ".", "collate_batch", "import", "BatchCollator", ",", "TTABatchCollator", ",", "BatchCollatorWoLabel_Compared", ",", "BatchCollatorWoLabelK", "\n", "from", ".", "transforms", "import", "build_transforms", "\n", "\n", "\n", "def", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "dataset_catalog", ",", "\n", "is_train", "=", "True", ",", "gen_fake", "=", "0", ",", "gen_true", "=", "0", ",", "aug_k", "=", "\n", "2", ",", "syn_mt", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Arguments:\n        syn_mt: use mean teacher to train synthesis data\n        dataset_list (list[str]): Contains the names of the datasets, i.e.,\n            coco_2014_trian, coco_2014_val, etc\n        transforms (callable): transforms to apply to each (image, target) sample\n        dataset_catalog (DatasetCatalog): contains the information on how to\n            construct a dataset.\n        is_train (bool): whether to setup the dataset for training or testing\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "dataset_list", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"dataset_list should be a list of strings, got {}\"", ".", "format", "(", "\n", "dataset_list", ")", "\n", ")", "\n", "", "datasets", "=", "[", "]", "\n", "for", "dataset_name", "in", "dataset_list", ":", "\n", "# pdb.set_trace()", "\n", "        ", "data", "=", "dataset_catalog", ".", "get", "(", "dataset_name", ",", "aug_k", ",", "syn_mt", ")", "\n", "factory", "=", "getattr", "(", "D", ",", "data", "[", "\"factory\"", "]", ")", "\n", "args", "=", "data", "[", "\"args\"", "]", "\n", "# for COCODataset, we want to remove images without annotations", "\n", "# during training", "\n", "if", "data", "[", "\"factory\"", "]", "==", "\"COCODataset\"", ":", "\n", "            ", "args", "[", "\"remove_images_without_annotations\"", "]", "=", "is_train", "\n", "", "if", "data", "[", "\"factory\"", "]", "==", "\"PascalVOCDataset\"", ":", "\n", "            ", "args", "[", "\"use_difficult\"", "]", "=", "not", "is_train", "\n", "", "if", "data", "[", "\"factory\"", "]", "in", "[", "\"PapNucleiGenTrueDataset\"", ",", "\n", "'PapNucleiSynDataset'", ",", "\n", "'PapNucleiSynMTDataset'", "]", ":", "\n", "            ", "args", "[", "\"gen_fake\"", "]", "=", "gen_fake", "\n", "args", "[", "\"gen_true\"", "]", "=", "gen_true", "\n", "", "args", "[", "\"transforms\"", "]", "=", "transforms", "\n", "# make dataset from factory", "\n", "dataset", "=", "factory", "(", "**", "args", ")", "\n", "datasets", ".", "append", "(", "dataset", ")", "\n", "\n", "# for testing, return a list of datasets", "\n", "", "if", "not", "is_train", ":", "\n", "        ", "return", "datasets", "\n", "\n", "# for training, concatenate all datasets into a single one", "\n", "", "dataset", "=", "datasets", "[", "0", "]", "\n", "if", "len", "(", "datasets", ")", ">", "1", ":", "\n", "        ", "dataset", "=", "D", ".", "ConcatDataset", "(", "datasets", ")", "\n", "\n", "", "return", "[", "dataset", "]", "\n", "\n", "\n", "", "def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "samplers", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "# pdb.set_trace()", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.build.make_optimizer": [[5, 24], ["model.named_parameters", "torch.optim.SGD", "any"], "function", ["None"], ["\n", "import", "torch", ".", "utils", ".", "data", "\n", "from", "maskrcnn_benchmark", ".", "utils", ".", "comm", "import", "get_world_size", "\n", "from", "maskrcnn_benchmark", ".", "utils", ".", "imports", "import", "import_file", "\n", "\n", "from", ".", "import", "datasets", "as", "D", "\n", "from", ".", "import", "samplers", "\n", "import", "pdb", "\n", "from", ".", "collate_batch", "import", "BatchCollator", ",", "TTABatchCollator", ",", "BatchCollatorWoLabel_Compared", ",", "BatchCollatorWoLabelK", "\n", "from", ".", "transforms", "import", "build_transforms", "\n", "\n", "\n", "def", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "dataset_catalog", ",", "\n", "is_train", "=", "True", ",", "gen_fake", "=", "0", ",", "gen_true", "=", "0", ",", "aug_k", "=", "\n", "2", ",", "syn_mt", "=", "False", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.build.make_lr_scheduler": [[26, 34], ["lr_scheduler.WarmupMultiStepLR"], "function", ["None"], ["\n", "if", "not", "isinstance", "(", "dataset_list", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"dataset_list should be a list of strings, got {}\"", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[11, 39], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "# import pdb;pdb.set_trace()", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIAAAAAA_MMT-PSM.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[40, 53], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "self", ".", "last_epoch", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]]}