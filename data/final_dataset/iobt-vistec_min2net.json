{"home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.loss.mean_squared_error": [[6, 16], ["tensorflow.switch", "tensorflow.mean", "tensorflow.equal", "tensorflow.zeros", "tensorflow.square", "tensorflow.constant", "tensorflow.shape"], "function", ["None"], ["def", "mean_squared_error", "(", "y_true", ",", "y_pred", ")", ":", "\n", "\t", "\"\"\" loss function computing MSE of non-blank(!=0) in y_true\n\t\tArgs:\n\t\t\ty_true(tftensor): true label\n\t\t\ty_pred(tftensor): predicted label\n\t\treturn:\n\t\t\tMSE reconstruction error for loss computing\n\t\"\"\"", "\n", "loss", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "y_true", ",", "tf", ".", "constant", "(", "0.", ")", ")", ",", "tf", ".", "zeros", "(", "K", ".", "shape", "(", "y_true", ")", ")", ",", "K", ".", "square", "(", "y_pred", "-", "y_true", ")", ")", "\n", "return", "K", ".", "mean", "(", "loss", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.loss.triplet_loss": [[17, 23], ["tensorflow_addons.losses.triplet_semihard_loss"], "function", ["None"], ["", "def", "triplet_loss", "(", "margin", "=", "1.0", ")", ":", "\n", "    ", "def", "inner_triplet_loss_objective", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "labels", "=", "y_true", "\n", "embeddings", "=", "y_pred", "\n", "return", "tfa", ".", "losses", ".", "triplet_semihard_loss", "(", "y_true", "=", "labels", ",", "y_pred", "=", "embeddings", ",", "margin", "=", "margin", ")", "\n", "", "return", "inner_triplet_loss_objective", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.loss.SparseCategoricalCrossentropy": [[24, 46], ["tensorflow.keras.losses.SparseCategoricalCrossentropy", "tf.keras.losses.SparseCategoricalCrossentropy.", "tensorflow.cast", "tensorflow.constant", "tensorflow.cast", "tensorflow.lookup.KeyValueTensorInitializer", "tensorflow.lookup.StaticHashTable", "tf.lookup.StaticHashTable.lookup", "tensorflow.constant", "list", "list", "class_weight.values", "class_weight.keys"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.loss.SparseCategoricalCrossentropy"], ["", "def", "SparseCategoricalCrossentropy", "(", "class_weight", "=", "None", ")", ":", "\n", "    ", "\"\"\"[SparseCategoricalCrossentropy]\n\n    Args:\n        class_weight ([dict], optional): dict of class_weight\n        class_weight = {0: 0.3,\n                        1: 0.7}\n        Defaults to None.\n    \"\"\"", "\n", "def", "inner_sparse_categorical_crossentropy", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "scce", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "if", "class_weight", ":", "\n", "            ", "keys_tensor", "=", "tf", ".", "cast", "(", "tf", ".", "constant", "(", "list", "(", "class_weight", ".", "keys", "(", ")", ")", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "vals_tensor", "=", "tf", ".", "constant", "(", "list", "(", "class_weight", ".", "values", "(", ")", ")", ",", "tf", ".", "float32", ")", "\n", "input_tensor", "=", "tf", ".", "cast", "(", "y_true", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "init", "=", "tf", ".", "lookup", ".", "KeyValueTensorInitializer", "(", "keys_tensor", ",", "vals_tensor", ")", "\n", "table", "=", "tf", ".", "lookup", ".", "StaticHashTable", "(", "init", ",", "default_value", "=", "-", "1", ")", "\n", "sample_weight", "=", "table", ".", "lookup", "(", "input_tensor", ")", "\n", "", "else", ":", "\n", "            ", "sample_weight", "=", "None", "\n", "", "return", "scce", "(", "y_true", ",", "y_pred", ",", "sample_weight", ")", "\n", "", "return", "inner_sparse_categorical_crossentropy", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.__init__": [[83, 99], ["kwargs.keys", "utils.DataLoader.__setattr__", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "train_type", "=", "None", ",", "data_type", "=", "None", ",", "num_class", "=", "2", ",", "subject", "=", "None", ",", "data_format", "=", "None", ",", "dataset_path", "=", "'/datasets'", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "dataset", "=", "dataset", "#Dataset name: 'OpenBMI', 'SMR_BCI', 'BCIC2a'", "\n", "self", ".", "train_type", "=", "train_type", "# 'subject_dependent', 'subject_independent'", "\n", "self", ".", "data_type", "=", "data_type", "# 'fbcsp', 'spectral_spatial', 'time_domain'", "\n", "self", ".", "dataset_path", "=", "dataset_path", "\n", "self", ".", "subject", "=", "subject", "# id, start at 1", "\n", "self", ".", "data_format", "=", "data_format", "# 'channels_first', 'channels_last'", "\n", "self", ".", "fold", "=", "None", "# fold, start at 1", "\n", "self", ".", "prefix_name", "=", "'S'", "\n", "self", ".", "num_class", "=", "num_class", "\n", "for", "k", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "\n", "\n", "", "self", ".", "path", "=", "self", ".", "dataset_path", "+", "'/'", "+", "self", ".", "dataset", "+", "'/'", "+", "self", ".", "data_type", "+", "'/'", "+", "str", "(", "self", ".", "num_class", ")", "+", "'_class/'", "+", "self", ".", "train_type", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader._change_data_format": [[100, 121], ["print", "X.reshape.reshape.reshape", "X.reshape.reshape.reshape", "X.reshape.reshape.reshape", "numpy.swapaxes", "utils.zero_padding", "X.reshape.reshape.reshape", "Exception"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.zero_padding"], ["", "def", "_change_data_format", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "data_format", "==", "'NCTD'", ":", "\n", "# (#n_trial, #channels, #time, #depth)", "\n", "            ", "X", "=", "X", ".", "reshape", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "X", ".", "shape", "[", "2", "]", ",", "1", ")", "\n", "", "elif", "self", ".", "data_format", "==", "'NDCT'", ":", "\n", "# (#n_trial, #depth, #channels, #time)", "\n", "            ", "X", "=", "X", ".", "reshape", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ",", "X", ".", "shape", "[", "1", "]", ",", "X", ".", "shape", "[", "2", "]", ")", "\n", "", "elif", "self", ".", "data_format", "==", "'NTCD'", ":", "\n", "# (#n_trial, #time, #channels, #depth)", "\n", "            ", "X", "=", "X", ".", "reshape", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "X", ".", "shape", "[", "2", "]", ",", "1", ")", "\n", "X", "=", "np", ".", "swapaxes", "(", "X", ",", "1", ",", "3", ")", "\n", "", "elif", "self", ".", "data_format", "==", "'NSHWD'", ":", "\n", "# (#n_trial, #Freqs, #height, #width, #depth)", "\n", "            ", "X", "=", "zero_padding", "(", "X", ")", "\n", "X", "=", "X", ".", "reshape", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "X", ".", "shape", "[", "2", "]", ",", "X", ".", "shape", "[", "3", "]", ",", "1", ")", "\n", "", "elif", "self", ".", "data_format", "==", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Value Error: data_format requires None, \\'NCTD\\', \\'NDCT\\', \\'NTCD\\' or \\'NSHWD\\', found data_format={}'", ".", "format", "(", "self", ".", "data_format", ")", ")", "\n", "", "print", "(", "'change data_format to \\'{}\\', new dimention is {}'", ".", "format", "(", "self", ".", "data_format", ",", "X", ".", "shape", ")", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_train_set": [[122, 137], ["kwargs.keys", "utils.DataLoader.__setattr__", "numpy.array", "numpy.array", "utils.DataLoader._change_data_format", "numpy.load", "numpy.load", "Exception"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader._change_data_format"], ["", "def", "load_train_set", "(", "self", ",", "fold", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "fold", "=", "fold", "\n", "for", "k", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "\n", "# load ", "\n", "", "X", ",", "y", "=", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "file_x", "=", "self", ".", "path", "+", "'/X_train_{}{:03d}_fold{:03d}.npy'", ".", "format", "(", "self", ".", "prefix_name", ",", "self", ".", "subject", ",", "self", ".", "fold", ")", "\n", "self", ".", "file_y", "=", "self", ".", "path", "+", "'/y_train_{}{:03d}_fold{:03d}.npy'", ".", "format", "(", "self", ".", "prefix_name", ",", "self", ".", "subject", ",", "self", ".", "fold", ")", "\n", "X", "=", "self", ".", "_change_data_format", "(", "np", ".", "load", "(", "self", ".", "file_x", ")", ")", "\n", "y", "=", "np", ".", "load", "(", "self", ".", "file_y", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "'Path Error: file does not exist, please check this path {}, and {}'", ".", "format", "(", "self", ".", "file_x", ",", "self", ".", "file_y", ")", ")", "\n", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_val_set": [[138, 153], ["kwargs.keys", "utils.DataLoader.__setattr__", "numpy.array", "numpy.array", "utils.DataLoader._change_data_format", "numpy.load", "numpy.load", "Exception"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader._change_data_format"], ["", "def", "load_val_set", "(", "self", ",", "fold", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "fold", "=", "fold", "\n", "for", "k", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "\n", "# load ", "\n", "", "X", ",", "y", "=", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "file_x", "=", "self", ".", "path", "+", "'/X_val_{}{:03d}_fold{:03d}.npy'", ".", "format", "(", "self", ".", "prefix_name", ",", "self", ".", "subject", ",", "self", ".", "fold", ")", "\n", "self", ".", "file_y", "=", "self", ".", "path", "+", "'/y_val_{}{:03d}_fold{:03d}.npy'", ".", "format", "(", "self", ".", "prefix_name", ",", "self", ".", "subject", ",", "self", ".", "fold", ")", "\n", "X", "=", "self", ".", "_change_data_format", "(", "np", ".", "load", "(", "self", ".", "file_x", ")", ")", "\n", "y", "=", "np", ".", "load", "(", "self", ".", "file_y", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "'Path Error: file does not exist, please check this path {}, and {}'", ".", "format", "(", "self", ".", "file_x", ",", "self", ".", "file_y", ")", ")", "\n", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_test_set": [[154, 169], ["kwargs.keys", "utils.DataLoader.__setattr__", "numpy.array", "numpy.array", "utils.DataLoader._change_data_format", "numpy.load", "numpy.load", "Exception"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader._change_data_format"], ["", "def", "load_test_set", "(", "self", ",", "fold", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "fold", "=", "fold", "\n", "for", "k", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "\n", "# load ", "\n", "", "X", ",", "y", "=", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "file_x", "=", "self", ".", "path", "+", "'/X_test_{}{:03d}_fold{:03d}.npy'", ".", "format", "(", "self", ".", "prefix_name", ",", "self", ".", "subject", ",", "self", ".", "fold", ")", "\n", "self", ".", "file_y", "=", "self", ".", "path", "+", "'/y_test_{}{:03d}_fold{:03d}.npy'", ".", "format", "(", "self", ".", "prefix_name", ",", "self", ".", "subject", ",", "self", ".", "fold", ")", "\n", "X", "=", "self", ".", "_change_data_format", "(", "np", ".", "load", "(", "self", ".", "file_x", ")", ")", "\n", "y", "=", "np", ".", "load", "(", "self", ".", "file_y", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "'Path Error: file does not exist, please check this path {}, and {}'", ".", "format", "(", "self", ".", "file_x", ",", "self", ".", "file_y", ")", ")", "\n", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.TimeHistory.__init__": [[195, 197], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "save_path", "=", "None", ")", ":", "\n", "        ", "self", ".", "save_path", "=", "save_path", "\n", "", "def", "on_train_begin", "(", "self", ",", "logs", "=", "{", "}", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.TimeHistory.on_train_begin": [[197, 201], ["utils.write_log"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "logs", "=", "[", "]", "\n", "if", "self", ".", "save_path", ":", "\n", "            ", "write_log", "(", "filepath", "=", "self", ".", "save_path", ",", "data", "=", "[", "'time_log'", "]", ",", "mode", "=", "'w'", ")", "\n", "", "", "def", "on_epoch_begin", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.TimeHistory.on_epoch_begin": [[201, 203], ["time.time"], "methods", ["None"], ["", "", "def", "on_epoch_begin", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.TimeHistory.on_epoch_end": [[203, 208], ["utils.TimeHistory.logs.append", "time.time", "utils.write_log"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "time_diff", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "logs", ".", "append", "(", "time_diff", ")", "\n", "if", "self", ".", "save_path", ":", "\n", "            ", "write_log", "(", "filepath", "=", "self", ".", "save_path", ",", "data", "=", "[", "time_diff", "]", ",", "mode", "=", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.load_raw": [[17, 81], ["print", "range", "Exception", "print", "os.path.exists", "os.makedirs", "os.path.exists", "print", "print", "wget.download", "range", "Exception", "print", "os.remove", "os.path.exists", "os.makedirs", "os.path.exists", "print", "print", "wget.download", "range", "Exception", "os.remove", "os.path.exists", "os.makedirs", "os.path.exists", "print", "print", "wget.download", "os.remove"], "function", ["None"], ["def", "load_raw", "(", "dataset", ")", ":", "\n", "# folder_name = str(PATH)+'/datasets'", "\n", "    ", "folder_name", "=", "'datasets'", "\n", "if", "dataset", "==", "'OpenBMI'", ":", "\n", "        ", "try", ":", "\n", "            ", "num_subjects", "=", "54", "\n", "sessions", "=", "[", "1", ",", "2", "]", "\n", "save_path", "=", "folder_name", "+", "'/'", "+", "dataset", "+", "'/raw'", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "", "for", "session", "in", "sessions", ":", "\n", "                ", "for", "person", "in", "range", "(", "1", ",", "num_subjects", "+", "1", ")", ":", "\n", "                    ", "file_name", "=", "'/sess{:02d}_subj{:02d}_EEG_MI.mat'", ".", "format", "(", "session", ",", "person", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", "+", "file_name", ")", ":", "\n", "                        ", "os", ".", "remove", "(", "save_path", "+", "file_name", ")", "# if exist, remove file", "\n", "", "print", "(", "'\\n===Download is being processed on session: {} subject: {}==='", ".", "format", "(", "session", ",", "person", ")", ")", "\n", "url", "=", "'ftp://parrot.genomics.cn/gigadb/pub/10.5524/100001_101000/100542/session{}/s{}{}'", ".", "format", "(", "session", ",", "person", ",", "file_name", ")", "\n", "print", "(", "'save to: '", "+", "save_path", "+", "file_name", ")", "\n", "wget", ".", "download", "(", "url", ",", "save_path", "+", "file_name", ")", "\n", "", "", "print", "(", "'\\nDone!'", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "'Path Error: file does not exist, please direccly download at http://gigadb.org/dataset/100542'", ")", "\n", "", "", "elif", "dataset", "==", "'BCIC2a'", ":", "\n", "        ", "try", ":", "\n", "            ", "num_subjects", "=", "9", "\n", "sessions", "=", "[", "'T'", ",", "'E'", "]", "\n", "save_path", "=", "folder_name", "+", "'/'", "+", "dataset", "+", "'/raw'", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "", "for", "session", "in", "sessions", ":", "\n", "                ", "for", "person", "in", "range", "(", "1", ",", "num_subjects", "+", "1", ")", ":", "\n", "                    ", "file_name", "=", "'/A{:02d}{}.mat'", ".", "format", "(", "person", ",", "session", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", "+", "file_name", ")", ":", "\n", "                        ", "os", ".", "remove", "(", "save_path", "+", "file_name", ")", "# if exist, remove file", "\n", "", "print", "(", "'\\n===Download is being processed on session: {} subject: {}==='", ".", "format", "(", "session", ",", "person", ")", ")", "\n", "url", "=", "'https://lampx.tugraz.at/~bci/database/001-2014'", "+", "file_name", "\n", "print", "(", "'save to: '", "+", "save_path", "+", "file_name", ")", "\n", "wget", ".", "download", "(", "url", ",", "save_path", "+", "file_name", ")", "\n", "", "", "print", "(", "'\\nDone!'", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "'Path Error: file does not exist, please direccly download at http://bnci-horizon-2020.eu/database/data-sets'", ")", "\n", "", "", "elif", "dataset", "==", "'SMR_BCI'", ":", "\n", "        ", "try", ":", "\n", "            ", "num_subjects", "=", "14", "\n", "sessions", "=", "[", "'T'", ",", "'E'", "]", "\n", "save_path", "=", "folder_name", "+", "'/'", "+", "dataset", "+", "'/raw'", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "", "for", "session", "in", "sessions", ":", "\n", "                ", "for", "person", "in", "range", "(", "1", ",", "num_subjects", "+", "1", ")", ":", "\n", "                    ", "file_name", "=", "'/S{:02d}{}.mat'", ".", "format", "(", "person", ",", "session", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", "+", "file_name", ")", ":", "\n", "                        ", "os", ".", "remove", "(", "save_path", "+", "file_name", ")", "# if exist, remove file", "\n", "", "print", "(", "'\\n===Download is being processed on session: {} subject: {}==='", ".", "format", "(", "session", ",", "person", ")", ")", "\n", "url", "=", "'https://lampx.tugraz.at/~bci/database/002-2014'", "+", "file_name", "\n", "print", "(", "'save to: '", "+", "save_path", "+", "file_name", ")", "\n", "wget", ".", "download", "(", "url", ",", "save_path", "+", "file_name", ")", "\n", "", "", "print", "(", "'\\nDone!'", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "'Path Error: file does not exist, please direccly download at http://bnci-horizon-2020.eu/database/data-sets'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.compute_class_weight": [[170, 183], ["dict", "zip", "numpy.unique", "sklearn.utils.class_weight.compute_class_weight", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.compute_class_weight"], ["", "", "def", "compute_class_weight", "(", "y_train", ")", ":", "\n", "    ", "\"\"\"compute class balancing\n\n    Args:\n        y_train (list, ndarray): [description]\n\n    Returns:\n        (dict): class weight balancing\n    \"\"\"", "\n", "return", "dict", "(", "zip", "(", "np", ".", "unique", "(", "y_train", ")", ",", "\n", "class_weight", ".", "compute_class_weight", "(", "class_weight", "=", "'balanced'", ",", "\n", "classes", "=", "np", ".", "unique", "(", "y_train", ")", ",", "\n", "y", "=", "y_train", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.str2bool": [[184, 193], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "       ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log": [[209, 221], ["open", "csv.writer", "csv.writer.writerow", "Exception"], "function", ["None"], ["", "", "", "def", "write_log", "(", "filepath", "=", "'test.log'", ",", "data", "=", "[", "]", ",", "mode", "=", "'w'", ")", ":", "\n", "    ", "'''\n    filepath: path to save\n    data: list of data\n    mode: a = update data to file, w = write a new file\n    '''", "\n", "try", ":", "\n", "        ", "with", "open", "(", "filepath", ",", "mode", ")", "as", "csvFile", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "csvFile", ")", "\n", "writer", ".", "writerow", "(", "data", ")", "\n", "", "", "except", "IOError", ":", "\n", "        ", "raise", "Exception", "(", "'I/O error'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.zero_padding": [[222, 232], ["int", "numpy.zeros", "range", "print", "len", "Exception", "range", "numpy.pad"], "function", ["None"], ["", "", "def", "zero_padding", "(", "data", ",", "pad_size", "=", "4", ")", ":", "\n", "    ", "if", "len", "(", "data", ".", "shape", ")", "!=", "4", ":", "\n", "        ", "raise", "Exception", "(", "'Dimension is not match!, must have 4 dims'", ")", "\n", "", "new_shape", "=", "int", "(", "data", ".", "shape", "[", "2", "]", "+", "(", "2", "*", "pad_size", ")", ")", "\n", "data_pad", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "data", ".", "shape", "[", "1", "]", ",", "new_shape", ",", "new_shape", ")", ")", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "data", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "data_pad", "[", "i", ",", "j", ",", ":", ",", ":", "]", "=", "np", ".", "pad", "(", "data", "[", "i", ",", "j", ",", ":", ",", ":", "]", ",", "[", "pad_size", ",", "pad_size", "]", ",", "mode", "=", "'constant'", ")", "\n", "", "", "print", "(", "data_pad", ".", "shape", ")", "\n", "return", "data_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter": [[234, 241], ["scipy.signal.butter", "scipy.signal.filtfilt"], "function", ["None"], ["", "def", "butter_bandpass_filter", "(", "data", ",", "lowcut", ",", "highcut", ",", "fs", ",", "order", ")", ":", "\n", "    ", "nyq", "=", "0.5", "*", "fs", "\n", "low", "=", "lowcut", "/", "nyq", "\n", "high", "=", "highcut", "/", "nyq", "\n", "b", ",", "a", "=", "butter", "(", "order", ",", "[", "low", ",", "high", "]", ",", "btype", "=", "'band'", ")", "\n", "y", "=", "filtfilt", "(", "b", ",", "a", ",", "data", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.resampling": [[242, 251], ["int", "numpy.zeros", "range", "len", "Exception", "range", "scipy.signal.resample"], "function", ["None"], ["", "def", "resampling", "(", "data", ",", "new_smp_freq", ",", "data_len", ")", ":", "\n", "    ", "if", "len", "(", "data", ".", "shape", ")", "!=", "3", ":", "\n", "        ", "raise", "Exception", "(", "'Dimesion error'", ",", "\"--> please use three-dimensional input\"", ")", "\n", "", "new_smp_point", "=", "int", "(", "data_len", "*", "new_smp_freq", ")", "\n", "data_resampled", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "data", ".", "shape", "[", "1", "]", ",", "new_smp_point", ")", ")", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "data", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "data_resampled", "[", "i", ",", "j", ",", ":", "]", "=", "signal", ".", "resample", "(", "data", "[", "i", ",", "j", ",", ":", "]", ",", "new_smp_point", ")", "\n", "", "", "return", "data_resampled", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.psd_welch": [[252, 264], ["numpy.zeros", "range", "len", "Exception", "range", "scipy.signal.welch", "[].tolist", "numpy.where"], "function", ["None"], ["", "def", "psd_welch", "(", "data", ",", "smp_freq", ")", ":", "\n", "    ", "if", "len", "(", "data", ".", "shape", ")", "!=", "3", ":", "\n", "        ", "raise", "Exception", "(", "\"Dimension Error, must have 3 dimension\"", ")", "\n", "", "n_samples", ",", "n_chs", ",", "n_points", "=", "data", ".", "shape", "\n", "data_psd", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "n_chs", ",", "89", ")", ")", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_chs", ")", ":", "\n", "            ", "freq", ",", "power_den", "=", "signal", ".", "welch", "(", "data", "[", "i", ",", "j", "]", ",", "smp_freq", ",", "nperseg", "=", "n_points", ")", "\n", "index", "=", "np", ".", "where", "(", "(", "freq", ">=", "8", ")", "&", "(", "freq", "<=", "30", ")", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "# print(\"the length of---\", len(index))", "\n", "data_psd", "[", "i", ",", "j", "]", "=", "power_den", "[", "index", "]", "\n", "", "", "return", "data_psd", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__init__": [[14, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "bands", ",", "\n", "smp_freq", ",", "\n", "num_class", "=", "2", ",", "\n", "order", "=", "5", ",", "\n", "n_components", "=", "10", ",", "\n", "n_pick_bands", "=", "20", ")", ":", "\n", "        ", "self", ".", "bands", "=", "bands", "\n", "self", ".", "smp_freq", "=", "smp_freq", "\n", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "n_pick_bands", "=", "n_pick_bands", "\n", "self", ".", "cov_type", "=", "'epoch'", "\n", "self", ".", "classes", "=", "None", "\n", "self", ".", "order", "=", "order", "\n", "self", ".", "n_classes", "=", "num_class", "\n", "if", "self", ".", "n_classes", "==", "2", ":", "\n", "            ", "self", ".", "component_order", "=", "'alternate'", "\n", "", "else", ":", "\n", "            ", "self", ".", "component_order", "=", "'mutual_info'", "\n", "", "self", ".", "norm_trace", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__covariance": [[35, 39], ["numpy.dot", "numpy.trace", "numpy.dot"], "methods", ["None"], ["", "def", "__covariance", "(", "self", ",", "X", ")", ":", "\n", "# covariance = np.dot(X, X.T)/X.shape[0]", "\n", "# return covariance", "\n", "        ", "return", "np", ".", "dot", "(", "X", ",", "X", ".", "T", ")", "/", "np", ".", "trace", "(", "np", ".", "dot", "(", "X", ",", "X", ".", "T", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__get_spatial_filter": [[41, 49], ["SpectralSpatialMapping.SpectralSpatialMapping.__decompose_covs", "SpectralSpatialMapping.SpectralSpatialMapping.__order_components"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__decompose_covs", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__order_components"], ["", "def", "__get_spatial_filter", "(", "self", ",", "covs", ",", "sample_weights", ")", ":", "\n", "        ", "eigen_vectors", ",", "eigen_values", "=", "self", ".", "__decompose_covs", "(", "covs", ",", "sample_weights", ")", "\n", "# CSP requires the eigenvalues and eigenvector be sorted in descending order", "\n", "sorted_index", "=", "self", ".", "__order_components", "(", "covs", ",", "sample_weights", ",", "eigen_vectors", ",", "eigen_values", ")", "\n", "eigen_vectors", "=", "eigen_vectors", "[", ":", ",", "sorted_index", "]", "\n", "sp_filters", "=", "eigen_vectors", ".", "T", "\n", "pick_filters", "=", "sp_filters", "[", ":", "self", ".", "n_components", "]", "\n", "return", "pick_filters", ",", "sp_filters", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__decompose_covs": [[50, 61], ["len", "scipy.linalg.eigh", "SpectralSpatialMapping.SpectralSpatialMapping.__ajd_pham", "SpectralSpatialMapping.SpectralSpatialMapping.__normalize_eigenvectors", "covs.sum"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__ajd_pham", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__normalize_eigenvectors"], ["", "def", "__decompose_covs", "(", "self", ",", "covs", ",", "sample_weights", ")", ":", "\n", "        ", "n_classes", "=", "len", "(", "covs", ")", "\n", "if", "n_classes", "==", "2", ":", "\n", "            ", "eigen_values", ",", "eigen_vectors", "=", "linalg", ".", "eigh", "(", "covs", "[", "0", "]", ",", "covs", ".", "sum", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "# The multiclass case is adapted from", "\n", "# http://github.com/alexandrebarachant/pyRiemann", "\n", "            ", "eigen_vectors", ",", "D", "=", "self", ".", "__ajd_pham", "(", "covs", ")", "\n", "eigen_vectors", "=", "self", ".", "__normalize_eigenvectors", "(", "eigen_vectors", ".", "T", ",", "covs", ",", "sample_weights", ")", "\n", "eigen_values", "=", "None", "\n", "", "return", "eigen_vectors", ",", "eigen_values", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__calculate_covariance_matrices": [[62, 85], ["numpy.unique", "len", "len", "Exception", "cov_estimator", "covs.append", "sample_weights.append", "numpy.stack", "numpy.array", "numpy.trace"], "methods", ["None"], ["", "def", "__calculate_covariance_matrices", "(", "self", ",", "data", ",", "y_class", ")", ":", "\n", "        ", "'''The data is in the form of samples x channels x sampled_time_points'''", "\n", "if", "len", "(", "data", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension is not match!'", ")", "\n", "", "n_samples", ",", "n_channels", ",", "n_points", "=", "data", ".", "shape", "\n", "\n", "if", "self", ".", "cov_type", "==", "'concat'", ":", "\n", "            ", "cov_estimator", "=", "self", ".", "__concat_cov", "\n", "", "elif", "self", ".", "cov_type", "==", "'epoch'", ":", "\n", "            ", "cov_estimator", "=", "self", ".", "__epoch_cov", "\n", "\n", "", "covs", "=", "[", "]", "\n", "sample_weights", "=", "[", "]", "\n", "self", ".", "classes", "=", "np", ".", "unique", "(", "y_class", ")", "\n", "n_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "# print('The numbers of class used are {} and type of class {}'.format(n_classes, self.classes))", "\n", "for", "id_class", "in", "self", ".", "classes", ":", "\n", "            ", "cov", ",", "weight", "=", "cov_estimator", "(", "data", "[", "y_class", "==", "id_class", "]", ")", "\n", "if", "self", ".", "norm_trace", ":", "\n", "                ", "cov", "/=", "np", ".", "trace", "(", "cov", ")", "\n", "", "covs", ".", "append", "(", "cov", ")", "\n", "sample_weights", ".", "append", "(", "weight", ")", "\n", "", "return", "np", ".", "stack", "(", "covs", ")", ",", "np", ".", "array", "(", "sample_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__concat_cov": [[86, 97], ["numpy.transpose", "X_class.reshape.reshape.reshape", "SpectralSpatialMapping.SpectralSpatialMapping.__covariance"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__covariance"], ["", "def", "__concat_cov", "(", "self", ",", "X_class", ")", ":", "\n", "        ", "'''The data is in the form of samples x channels x sampled_time_points'''", "\n", "'''Concatenate epochs before computing the covariance.'''", "\n", "n_samples", ",", "n_channels", ",", "n_points", "=", "X_class", ".", "shape", "\n", "X_class", "=", "np", ".", "transpose", "(", "X_class", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "X_class", "=", "X_class", ".", "reshape", "(", "n_channels", ",", "-", "1", ")", "\n", "cov", "=", "self", ".", "__covariance", "(", "X_class", ")", "\n", "# The covariace with norm trace is used to provide better results", "\n", "# cov = np.cov(X_class)", "\n", "weight", "=", "X_class", ".", "shape", "[", "0", "]", "\n", "return", "cov", ",", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__epoch_cov": [[98, 105], ["sum", "len", "len", "SpectralSpatialMapping.SpectralSpatialMapping.__covariance"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__covariance"], ["", "def", "__epoch_cov", "(", "self", ",", "X_class", ")", ":", "\n", "        ", "'''The data is in the form of samples x channels x sampled_time_points'''", "\n", "'''Mean of per-epoch covariances.'''", "\n", "cov", "=", "sum", "(", "self", ".", "__covariance", "(", "data", ")", "for", "data", "in", "X_class", ")", "\n", "cov", "/=", "len", "(", "X_class", ")", "\n", "weight", "=", "len", "(", "X_class", ")", "\n", "return", "cov", ",", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__compute_mutual_info": [[106, 121], ["range", "sample_weights.sum", "zip", "mutual_info.append", "numpy.dot", "numpy.dot", "numpy.log", "numpy.sqrt"], "methods", ["None"], ["", "def", "__compute_mutual_info", "(", "self", ",", "covs", ",", "sample_weights", ",", "eigen_vectors", ")", ":", "\n", "        ", "class_probas", "=", "sample_weights", "/", "sample_weights", ".", "sum", "(", ")", "\n", "\n", "mutual_info", "=", "[", "]", "\n", "for", "jj", "in", "range", "(", "eigen_vectors", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "aa", ",", "bb", "=", "0", ",", "0", "\n", "for", "(", "cov", ",", "prob", ")", "in", "zip", "(", "covs", ",", "class_probas", ")", ":", "\n", "                ", "tmp", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "eigen_vectors", "[", ":", ",", "jj", "]", ".", "T", ",", "cov", ")", ",", "\n", "eigen_vectors", "[", ":", ",", "jj", "]", ")", "\n", "aa", "+=", "prob", "*", "np", ".", "log", "(", "np", ".", "sqrt", "(", "tmp", ")", ")", "\n", "bb", "+=", "prob", "*", "(", "tmp", "**", "2", "-", "1", ")", "\n", "", "mi", "=", "-", "(", "aa", "+", "(", "3.0", "/", "16", ")", "*", "(", "bb", "**", "2", ")", ")", "\n", "mutual_info", ".", "append", "(", "mi", ")", "\n", "\n", "", "return", "mutual_info", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__normalize_eigenvectors": [[122, 131], ["numpy.average", "range", "numpy.dot", "numpy.sqrt", "numpy.dot"], "methods", ["None"], ["", "def", "__normalize_eigenvectors", "(", "self", ",", "eigen_vectors", ",", "covs", ",", "sample_weights", ")", ":", "\n", "# Here we apply an euclidean mean. See pyRiemann for other metrics", "\n", "        ", "mean_cov", "=", "np", ".", "average", "(", "covs", ",", "axis", "=", "0", ",", "weights", "=", "sample_weights", ")", "\n", "\n", "for", "ii", "in", "range", "(", "eigen_vectors", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "tmp", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "eigen_vectors", "[", ":", ",", "ii", "]", ".", "T", ",", "mean_cov", ")", ",", "\n", "eigen_vectors", "[", ":", ",", "ii", "]", ")", "\n", "eigen_vectors", "[", ":", ",", "ii", "]", "/=", "np", ".", "sqrt", "(", "tmp", ")", "\n", "", "return", "eigen_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__order_components": [[132, 144], ["SpectralSpatialMapping.SpectralSpatialMapping.__compute_mutual_info", "numpy.argsort", "numpy.argsort", "numpy.argsort", "numpy.empty_like", "numpy.abs", "len", "len"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__compute_mutual_info"], ["", "def", "__order_components", "(", "self", ",", "covs", ",", "sample_weights", ",", "eigen_vectors", ",", "eigen_values", ")", ":", "\n", "        ", "if", "self", ".", "component_order", "==", "'mutual_info'", "and", "self", ".", "n_classes", ">", "2", ":", "\n", "            ", "mutual_info", "=", "self", ".", "__compute_mutual_info", "(", "covs", ",", "sample_weights", ",", "eigen_vectors", ")", "\n", "ix", "=", "np", ".", "argsort", "(", "mutual_info", ")", "[", ":", ":", "-", "1", "]", "\n", "", "elif", "self", ".", "component_order", "==", "'mutual_info'", "and", "self", ".", "n_classes", "==", "2", ":", "\n", "            ", "ix", "=", "np", ".", "argsort", "(", "np", ".", "abs", "(", "eigen_values", "-", "0.5", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "", "elif", "self", ".", "component_order", "==", "'alternate'", "and", "self", ".", "n_classes", "==", "2", ":", "\n", "            ", "i", "=", "np", ".", "argsort", "(", "eigen_values", ")", "\n", "ix", "=", "np", ".", "empty_like", "(", "i", ")", "\n", "ix", "[", "1", ":", ":", "2", "]", "=", "i", "[", ":", "len", "(", "i", ")", "//", "2", "]", "\n", "ix", "[", "0", ":", ":", "2", "]", "=", "i", "[", "len", "(", "i", ")", "//", "2", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "", "return", "ix", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__ajd_pham": [[145, 222], ["numpy.eye", "range", "numpy.reshape().transpose", "numpy.concatenate", "range", "range", "numpy.reshape", "numpy.arange", "numpy.arange", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.sqrt", "numpy.conj", "numpy.real", "numpy.array", "numpy.dot", "numpy.reshape", "numpy.dot", "numpy.reshape", "numpy.dot", "max", "numpy.imag", "numpy.sqrt", "numpy.conj"], "methods", ["None"], ["", "def", "__ajd_pham", "(", "self", ",", "X", ",", "eps", "=", "1e-6", ",", "max_iter", "=", "15", ")", ":", "\n", "        ", "'''Approximate joint diagonalization based on Pham's algorithm.\n        This is a direct implementation of the PHAM's AJD algorithm [1].\n        Parameters\n        ----------\n        X : ndarray, shape (n_epochs, n_channels, n_channels)\n            A set of covariance matrices to diagonalize.\n        eps : float, default 1e-6\n            The tolerance for stopping criterion.\n        max_iter : int, default 1000\n            The maximum number of iteration to reach convergence.\n        Returns\n        -------\n        V : ndarray, shape (n_channels, n_channels)\n            The diagonalizer.\n        D : ndarray, shape (n_epochs, n_channels, n_channels)\n            The set of quasi diagonal matrices.\n        References\n        ----------\n        .. [1] Pham, Dinh Tuan. 'Joint approximate diagonalization of positive\n               definite Hermitian matrices.' SIAM Journal on Matrix Analysis and\n               Applications 22, no. 4 (2001): 1136-1152.\n        '''", "\n", "# Adapted from http://github.com/alexandrebarachant/pyRiemann", "\n", "n_epochs", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "# Reshape input matrix", "\n", "A", "=", "np", ".", "concatenate", "(", "X", ",", "axis", "=", "0", ")", ".", "T", "\n", "\n", "# Init variables", "\n", "n_times", ",", "n_m", "=", "A", ".", "shape", "\n", "V", "=", "np", ".", "eye", "(", "n_times", ")", "\n", "epsilon", "=", "n_times", "*", "(", "n_times", "-", "1", ")", "*", "eps", "\n", "\n", "for", "it", "in", "range", "(", "max_iter", ")", ":", "\n", "            ", "decr", "=", "0", "\n", "for", "ii", "in", "range", "(", "1", ",", "n_times", ")", ":", "\n", "                ", "for", "jj", "in", "range", "(", "ii", ")", ":", "\n", "                    ", "Ii", "=", "np", ".", "arange", "(", "ii", ",", "n_m", ",", "n_times", ")", "\n", "Ij", "=", "np", ".", "arange", "(", "jj", ",", "n_m", ",", "n_times", ")", "\n", "\n", "c1", "=", "A", "[", "ii", ",", "Ii", "]", "\n", "c2", "=", "A", "[", "jj", ",", "Ij", "]", "\n", "\n", "g12", "=", "np", ".", "mean", "(", "A", "[", "ii", ",", "Ij", "]", "/", "c1", ")", "\n", "g21", "=", "np", ".", "mean", "(", "A", "[", "ii", ",", "Ij", "]", "/", "c2", ")", "\n", "\n", "omega21", "=", "np", ".", "mean", "(", "c1", "/", "c2", ")", "\n", "omega12", "=", "np", ".", "mean", "(", "c2", "/", "c1", ")", "\n", "omega", "=", "np", ".", "sqrt", "(", "omega12", "*", "omega21", ")", "\n", "\n", "tmp", "=", "np", ".", "sqrt", "(", "omega21", "/", "omega12", ")", "\n", "tmp1", "=", "(", "tmp", "*", "g12", "+", "g21", ")", "/", "(", "omega", "+", "1", ")", "\n", "tmp2", "=", "(", "tmp", "*", "g12", "-", "g21", ")", "/", "max", "(", "omega", "-", "1", ",", "1e-9", ")", "\n", "\n", "h12", "=", "tmp1", "+", "tmp2", "\n", "h21", "=", "np", ".", "conj", "(", "(", "tmp1", "-", "tmp2", ")", "/", "tmp", ")", "\n", "\n", "decr", "+=", "n_epochs", "*", "(", "g12", "*", "np", ".", "conj", "(", "h12", ")", "+", "g21", "*", "h21", ")", "/", "2.0", "\n", "\n", "tmp", "=", "1", "+", "1.j", "*", "0.5", "*", "np", ".", "imag", "(", "h12", "*", "h21", ")", "\n", "tmp", "=", "np", ".", "real", "(", "tmp", "+", "np", ".", "sqrt", "(", "tmp", "**", "2", "-", "h12", "*", "h21", ")", ")", "\n", "tau", "=", "np", ".", "array", "(", "[", "[", "1", ",", "-", "h12", "/", "tmp", "]", ",", "[", "-", "h21", "/", "tmp", ",", "1", "]", "]", ")", "\n", "\n", "A", "[", "[", "ii", ",", "jj", "]", ",", ":", "]", "=", "np", ".", "dot", "(", "tau", ",", "A", "[", "[", "ii", ",", "jj", "]", ",", ":", "]", ")", "\n", "tmp", "=", "np", ".", "c_", "[", "A", "[", ":", ",", "Ii", "]", ",", "A", "[", ":", ",", "Ij", "]", "]", "\n", "tmp", "=", "np", ".", "reshape", "(", "tmp", ",", "(", "n_times", "*", "n_epochs", ",", "2", ")", ",", "order", "=", "'F'", ")", "\n", "tmp", "=", "np", ".", "dot", "(", "tmp", ",", "tau", ".", "T", ")", "\n", "\n", "tmp", "=", "np", ".", "reshape", "(", "tmp", ",", "(", "n_times", ",", "n_epochs", "*", "2", ")", ",", "order", "=", "'F'", ")", "\n", "A", "[", ":", ",", "Ii", "]", "=", "tmp", "[", ":", ",", ":", "n_epochs", "]", "\n", "A", "[", ":", ",", "Ij", "]", "=", "tmp", "[", ":", ",", "n_epochs", ":", "]", "\n", "V", "[", "[", "ii", ",", "jj", "]", ",", ":", "]", "=", "np", ".", "dot", "(", "tau", ",", "V", "[", "[", "ii", ",", "jj", "]", ",", ":", "]", ")", "\n", "", "", "if", "decr", "<", "epsilon", ":", "\n", "                ", "break", "\n", "", "", "D", "=", "np", ".", "reshape", "(", "A", ",", "(", "n_times", ",", "-", "1", ",", "n_times", ")", ")", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "V", ",", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.__get_log_var_feats": [[223, 229], ["numpy.dot", "numpy.var", "numpy.log"], "methods", ["None"], ["", "def", "__get_log_var_feats", "(", "self", ",", "spatial_filt", ",", "data", ")", ":", "\n", "        ", "data_dot", "=", "np", ".", "dot", "(", "spatial_filt", ",", "data", ")", "# spatially filtered signals ", "\n", "data_var", "=", "np", ".", "var", "(", "data_dot", ")", "\n", "# We use log(var) instead of averaging", "\n", "data_log", "=", "np", ".", "log", "(", "data_var", ")", "\n", "return", "data_log", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.get_transformed_feats": [[230, 234], ["numpy.dot", "SpectralSpatialMapping.SpectralSpatialMapping.__covariance"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__covariance"], ["", "def", "get_transformed_feats", "(", "self", ",", "spatial_filt", ",", "data", ")", ":", "\n", "        ", "data_dot", "=", "np", ".", "dot", "(", "spatial_filt", ",", "data", ")", "# spatially filtered signals ", "\n", "data_cov", "=", "self", ".", "__covariance", "(", "data_dot", ")", "\n", "return", "data_cov", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset": [[235, 287], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.swapaxes", "sklearn.feature_selection.SelectKBest", "sklearn.feature_selection.SelectKBest.fit_transform", "sklearn.feature_selection.SelectKBest.get_support", "numpy.take", "numpy.take", "numpy.take", "len", "Exception", "print", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "SpectralSpatialMapping.SpectralSpatialMapping.__calculate_covariance_matrices", "SpectralSpatialMapping.SpectralSpatialMapping.__get_spatial_filter", "range", "range", "range", "print", "numpy.swapaxes", "numpy.swapaxes", "numpy.swapaxes", "len", "len", "len", "len", "SpectralSpatialMapping.SpectralSpatialMapping.__get_log_var_feats", "SpectralSpatialMapping.SpectralSpatialMapping.get_transformed_feats", "SpectralSpatialMapping.SpectralSpatialMapping.get_transformed_feats", "SpectralSpatialMapping.SpectralSpatialMapping.get_transformed_feats"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.fit_transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__calculate_covariance_matrices", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__get_spatial_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__get_log_var_feats", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.get_transformed_feats", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.get_transformed_feats", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.get_transformed_feats"], ["", "def", "spatial_spectral_with_valset", "(", "self", ",", "X_tr", ",", "y_tr", ",", "X_val", ",", "X_te", ")", ":", "\n", "        ", "if", "len", "(", "X_tr", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension is not match!'", ")", "\n", "\n", "# Empty array for getting the transformed features in each frequency band    ", "\n", "", "X_tr_transformed_var", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "bands", ")", ",", "X_tr", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "# Empty array for getting the covariance matrix ", "\n", "X_tr_transformed_cov", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "bands", ")", ",", "X_tr", ".", "shape", "[", "0", "]", ",", "X_tr", ".", "shape", "[", "1", "]", ",", "X_tr", ".", "shape", "[", "1", "]", ")", ")", "\n", "X_val_transformed_cov", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "bands", ")", ",", "X_val", ".", "shape", "[", "0", "]", ",", "X_val", ".", "shape", "[", "1", "]", ",", "X_val", ".", "shape", "[", "1", "]", ")", ")", "\n", "X_te_transformed_cov", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "bands", ")", ",", "X_te", ".", "shape", "[", "0", "]", ",", "X_te", ".", "shape", "[", "1", "]", ",", "X_te", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "for", "id_band", ",", "freq_band", "in", "enumerate", "(", "self", ".", "bands", ")", ":", "\n", "            ", "print", "(", "'The process is holding on ID {} and Freq Interval {}'", ".", "format", "(", "id_band", ",", "freq_band", ")", ")", "\n", "\n", "X_tr_filtered", "=", "butter_bandpass_filter", "(", "X_tr", ",", "freq_band", "[", "0", "]", ",", "freq_band", "[", "1", "]", ",", "self", ".", "smp_freq", ",", "self", ".", "order", ")", "\n", "X_val_filtered", "=", "butter_bandpass_filter", "(", "X_val", ",", "freq_band", "[", "0", "]", ",", "freq_band", "[", "1", "]", ",", "self", ".", "smp_freq", ",", "self", ".", "order", ")", "\n", "X_te_filtered", "=", "butter_bandpass_filter", "(", "X_te", ",", "freq_band", "[", "0", "]", ",", "freq_band", "[", "1", "]", ",", "self", ".", "smp_freq", ",", "self", ".", "order", ")", "\n", "\n", "# Calculating covariance only on training set", "\n", "covs", ",", "sample_weights", "=", "self", ".", "__calculate_covariance_matrices", "(", "X_tr_filtered", ",", "y_tr", ")", "\n", "spf_sel", ",", "spf_org", "=", "self", ".", "__get_spatial_filter", "(", "covs", ",", "sample_weights", ")", "\n", "\n", "# Calculate the variance of spatially filtered signals and then compute the logarithm in each single EEG trial", "\n", "for", "sample_tr", "in", "range", "(", "X_tr_filtered", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "X_tr_transformed_var", "[", "id_band", ",", "sample_tr", "]", "=", "self", ".", "__get_log_var_feats", "(", "spf_sel", ",", "X_tr_filtered", "[", "sample_tr", ",", ":", ",", ":", "]", ")", "\n", "X_tr_transformed_cov", "[", "id_band", ",", "sample_tr", ",", ":", ",", ":", "]", "=", "self", ".", "get_transformed_feats", "(", "spf_org", ",", "X_tr_filtered", "[", "sample_tr", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "for", "sample_val", "in", "range", "(", "X_val_filtered", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "X_val_transformed_cov", "[", "id_band", ",", "sample_val", ",", ":", ",", ":", "]", "=", "self", ".", "get_transformed_feats", "(", "spf_org", ",", "X_val_filtered", "[", "sample_val", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "for", "sample_te", "in", "range", "(", "X_te_filtered", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "X_te_transformed_cov", "[", "id_band", ",", "sample_te", ",", ":", ",", ":", "]", "=", "self", ".", "get_transformed_feats", "(", "spf_org", ",", "X_te_filtered", "[", "sample_te", ",", ":", ",", ":", "]", ")", "\n", "\n", "# Prepare the most suited form of data for rearanging all frequency bands", "\n", "", "", "X_tr_transformed_var_sw", "=", "np", ".", "swapaxes", "(", "X_tr_transformed_var", ",", "0", ",", "1", ")", "\n", "\n", "# Rearrange all frequency bands from the largest MI value to smallest MI value and pick k frequency bands by considering the most k largest MI values.", "\n", "# This procedure considered only traning set obtaning the order of k frequnecy bands that provide the largest MI value.", "\n", "selector", "=", "SelectKBest", "(", "score_func", "=", "mutual_info_classif", ",", "k", "=", "self", ".", "n_pick_bands", ")", "\n", "X_tr_picked_band", "=", "selector", ".", "fit_transform", "(", "X_tr_transformed_var_sw", ",", "y_tr", ")", "\n", "des_order_list", "=", "selector", ".", "get_support", "(", "indices", "=", "True", ")", "\n", "\n", "# Display the selected subbands", "\n", "for", "idx_band", "in", "des_order_list", ":", "\n", "            ", "print", "(", "'band_name:'", ",", "self", ".", "bands", "[", "idx_band", "]", ",", "'---'", ",", "'Index_is:'", ",", "idx_band", ")", "\n", "\n", "", "X_tr_se_band", "=", "np", ".", "take", "(", "np", ".", "swapaxes", "(", "X_tr_transformed_cov", ",", "0", ",", "1", ")", ",", "des_order_list", ",", "axis", "=", "1", ")", "\n", "X_val_se_band", "=", "np", ".", "take", "(", "np", ".", "swapaxes", "(", "X_val_transformed_cov", ",", "0", ",", "1", ")", ",", "des_order_list", ",", "axis", "=", "1", ")", "\n", "X_te_se_band", "=", "np", ".", "take", "(", "np", ".", "swapaxes", "(", "X_te_transformed_cov", ",", "0", ",", "1", ")", ",", "des_order_list", ",", "axis", "=", "1", ")", "\n", "# All data are in the form of (n_samples,n_subbands,n_components,n_components)", "\n", "return", "X_tr_se_band", ",", "X_val_se_band", ",", "X_te_se_band", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__init__": [[17, 39], ["sklearn.feature_selection.SelectKBest", "range", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "bands", ",", "\n", "smp_freq", ",", "\n", "num_class", "=", "2", ",", "\n", "order", "=", "5", ",", "\n", "n_components", "=", "4", ",", "\n", "n_features", "=", "8", ")", ":", "\n", "        ", "self", ".", "bands", "=", "bands", "\n", "self", ".", "smp_freq", "=", "smp_freq", "\n", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "n_features", "=", "n_features", "\n", "self", ".", "cov_type", "=", "'epoch'", "\n", "self", ".", "order", "=", "order", "\n", "self", ".", "n_classes", "=", "num_class", "\n", "self", ".", "classes", "=", "None", "\n", "if", "self", ".", "n_classes", "==", "2", ":", "\n", "            ", "self", ".", "component_order", "=", "'alternate'", "\n", "", "else", ":", "\n", "            ", "self", ".", "component_order", "=", "'mutual_info'", "\n", "", "self", ".", "norm_trace", "=", "False", "\n", "self", ".", "spatial_transform", "=", "[", "None", "for", "i", "in", "range", "(", "len", "(", "bands", ")", ")", "]", "\n", "self", ".", "selector", "=", "SelectKBest", "(", "score_func", "=", "mutual_info_classif", ",", "k", "=", "self", ".", "n_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__covariance": [[40, 44], ["numpy.dot", "numpy.trace", "numpy.dot"], "methods", ["None"], ["", "def", "__covariance", "(", "self", ",", "X", ")", ":", "\n", "#         covariance = np.dot(X, X.T)/X.shape[0]", "\n", "#         return covariance", "\n", "        ", "return", "np", ".", "dot", "(", "X", ",", "X", ".", "T", ")", "/", "np", ".", "trace", "(", "np", ".", "dot", "(", "X", ",", "X", ".", "T", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__get_spatial_filter": [[46, 54], ["FBCSP.FBCSP.__decompose_covs", "FBCSP.FBCSP.__order_components"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__decompose_covs", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__order_components"], ["", "def", "__get_spatial_filter", "(", "self", ",", "covs", ",", "sample_weights", ")", ":", "\n", "        ", "eigen_vectors", ",", "eigen_values", "=", "self", ".", "__decompose_covs", "(", "covs", ",", "sample_weights", ")", "\n", "# CSP requires the eigenvalues and eigenvector be sorted in descending order", "\n", "sorted_index", "=", "self", ".", "__order_components", "(", "covs", ",", "sample_weights", ",", "eigen_vectors", ",", "eigen_values", ")", "\n", "eigen_vectors", "=", "eigen_vectors", "[", ":", ",", "sorted_index", "]", "\n", "sp_filters", "=", "eigen_vectors", ".", "T", "\n", "pick_filters", "=", "sp_filters", "[", ":", "self", ".", "n_components", "]", "\n", "return", "pick_filters", ",", "sp_filters", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__decompose_covs": [[55, 66], ["len", "scipy.linalg.eigh", "FBCSP.FBCSP.__ajd_pham", "FBCSP.FBCSP.__normalize_eigenvectors", "covs.sum"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__ajd_pham", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__normalize_eigenvectors"], ["", "def", "__decompose_covs", "(", "self", ",", "covs", ",", "sample_weights", ")", ":", "\n", "        ", "n_classes", "=", "len", "(", "covs", ")", "\n", "if", "n_classes", "==", "2", ":", "\n", "            ", "eigen_values", ",", "eigen_vectors", "=", "linalg", ".", "eigh", "(", "covs", "[", "0", "]", ",", "covs", ".", "sum", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "# The multiclass case is adapted from", "\n", "# http://github.com/alexandrebarachant/pyRiemann", "\n", "            ", "eigen_vectors", ",", "D", "=", "self", ".", "__ajd_pham", "(", "covs", ")", "\n", "eigen_vectors", "=", "self", ".", "__normalize_eigenvectors", "(", "eigen_vectors", ".", "T", ",", "covs", ",", "sample_weights", ")", "\n", "eigen_values", "=", "None", "\n", "", "return", "eigen_vectors", ",", "eigen_values", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__calculate_covariance_matrices": [[67, 89], ["numpy.unique", "len", "len", "Exception", "cov_estimator", "covs.append", "sample_weights.append", "numpy.stack", "numpy.array", "numpy.trace"], "methods", ["None"], ["", "def", "__calculate_covariance_matrices", "(", "self", ",", "data", ",", "y_class", ")", ":", "\n", "        ", "'''The data is in the form of samples x channels x sampled_time_points'''", "\n", "if", "len", "(", "data", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension is not match!'", ")", "\n", "", "n_samples", ",", "n_channels", ",", "n_points", "=", "data", ".", "shape", "\n", "\n", "if", "self", ".", "cov_type", "==", "'concat'", ":", "\n", "            ", "cov_estimator", "=", "self", ".", "__concat_cov", "\n", "", "elif", "self", ".", "cov_type", "==", "'epoch'", ":", "\n", "            ", "cov_estimator", "=", "self", ".", "__epoch_cov", "\n", "\n", "", "covs", "=", "[", "]", "\n", "sample_weights", "=", "[", "]", "\n", "self", ".", "classes", "=", "np", ".", "unique", "(", "y_class", ")", "\n", "n_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "for", "id_class", "in", "self", ".", "classes", ":", "\n", "            ", "cov", ",", "weight", "=", "cov_estimator", "(", "data", "[", "y_class", "==", "id_class", "]", ")", "\n", "if", "self", ".", "norm_trace", ":", "\n", "                ", "cov", "/=", "np", ".", "trace", "(", "cov", ")", "\n", "", "covs", ".", "append", "(", "cov", ")", "\n", "sample_weights", ".", "append", "(", "weight", ")", "\n", "", "return", "np", ".", "stack", "(", "covs", ")", ",", "np", ".", "array", "(", "sample_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__concat_cov": [[90, 101], ["numpy.transpose", "X_class.reshape.reshape.reshape", "FBCSP.FBCSP.__covariance"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__covariance"], ["", "def", "__concat_cov", "(", "self", ",", "X_class", ")", ":", "\n", "        ", "'''The data is in the form of samples x channels x sampled_time_points'''", "\n", "'''Concatenate epochs before computing the covariance.'''", "\n", "n_samples", ",", "n_channels", ",", "n_points", "=", "X_class", ".", "shape", "\n", "X_class", "=", "np", ".", "transpose", "(", "X_class", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "X_class", "=", "X_class", ".", "reshape", "(", "n_channels", ",", "-", "1", ")", "\n", "# The covariace with norm trace is used to provide better results", "\n", "cov", "=", "self", ".", "__covariance", "(", "X_class", ")", "\n", "# cov = np.cov(X_class) ", "\n", "weight", "=", "X_class", ".", "shape", "[", "0", "]", "\n", "return", "cov", ",", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__epoch_cov": [[102, 109], ["sum", "len", "len", "FBCSP.FBCSP.__covariance"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__covariance"], ["", "def", "__epoch_cov", "(", "self", ",", "X_class", ")", ":", "\n", "        ", "'''The data is in the form of samples x channels x sampled_time_points'''", "\n", "'''Mean of per-epoch covariances.'''", "\n", "cov", "=", "sum", "(", "self", ".", "__covariance", "(", "data", ")", "for", "data", "in", "X_class", ")", "\n", "cov", "/=", "len", "(", "X_class", ")", "\n", "weight", "=", "len", "(", "X_class", ")", "\n", "return", "cov", ",", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__compute_mutual_info": [[110, 125], ["range", "sample_weights.sum", "zip", "mutual_info.append", "numpy.dot", "numpy.dot", "numpy.log", "numpy.sqrt"], "methods", ["None"], ["", "def", "__compute_mutual_info", "(", "self", ",", "covs", ",", "sample_weights", ",", "eigen_vectors", ")", ":", "\n", "        ", "class_probas", "=", "sample_weights", "/", "sample_weights", ".", "sum", "(", ")", "\n", "\n", "mutual_info", "=", "[", "]", "\n", "for", "jj", "in", "range", "(", "eigen_vectors", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "aa", ",", "bb", "=", "0", ",", "0", "\n", "for", "(", "cov", ",", "prob", ")", "in", "zip", "(", "covs", ",", "class_probas", ")", ":", "\n", "                ", "tmp", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "eigen_vectors", "[", ":", ",", "jj", "]", ".", "T", ",", "cov", ")", ",", "\n", "eigen_vectors", "[", ":", ",", "jj", "]", ")", "\n", "aa", "+=", "prob", "*", "np", ".", "log", "(", "np", ".", "sqrt", "(", "tmp", ")", ")", "\n", "bb", "+=", "prob", "*", "(", "tmp", "**", "2", "-", "1", ")", "\n", "", "mi", "=", "-", "(", "aa", "+", "(", "3.0", "/", "16", ")", "*", "(", "bb", "**", "2", ")", ")", "\n", "mutual_info", ".", "append", "(", "mi", ")", "\n", "\n", "", "return", "mutual_info", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__normalize_eigenvectors": [[126, 135], ["numpy.average", "range", "numpy.dot", "numpy.sqrt", "numpy.dot"], "methods", ["None"], ["", "def", "__normalize_eigenvectors", "(", "self", ",", "eigen_vectors", ",", "covs", ",", "sample_weights", ")", ":", "\n", "# Here we apply an euclidean mean. See pyRiemann for other metrics", "\n", "        ", "mean_cov", "=", "np", ".", "average", "(", "covs", ",", "axis", "=", "0", ",", "weights", "=", "sample_weights", ")", "\n", "\n", "for", "ii", "in", "range", "(", "eigen_vectors", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "tmp", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "eigen_vectors", "[", ":", ",", "ii", "]", ".", "T", ",", "mean_cov", ")", ",", "\n", "eigen_vectors", "[", ":", ",", "ii", "]", ")", "\n", "eigen_vectors", "[", ":", ",", "ii", "]", "/=", "np", ".", "sqrt", "(", "tmp", ")", "\n", "", "return", "eigen_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__order_components": [[136, 150], ["len", "FBCSP.FBCSP.__compute_mutual_info", "numpy.argsort", "numpy.argsort", "numpy.argsort", "numpy.empty_like", "numpy.abs", "len", "len"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__compute_mutual_info"], ["", "def", "__order_components", "(", "self", ",", "covs", ",", "sample_weights", ",", "eigen_vectors", ",", "eigen_values", ")", ":", "\n", "        ", "n_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "ix", "=", "[", "]", "\n", "if", "self", ".", "component_order", "==", "'mutual_info'", "and", "n_classes", ">", "2", ":", "\n", "            ", "mutual_info", "=", "self", ".", "__compute_mutual_info", "(", "covs", ",", "sample_weights", ",", "eigen_vectors", ")", "\n", "ix", "=", "np", ".", "argsort", "(", "mutual_info", ")", "[", ":", ":", "-", "1", "]", "\n", "", "elif", "self", ".", "component_order", "==", "'mutual_info'", "and", "n_classes", "==", "2", ":", "\n", "            ", "ix", "=", "np", ".", "argsort", "(", "np", ".", "abs", "(", "eigen_values", "-", "0.5", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "", "elif", "self", ".", "component_order", "==", "'alternate'", "and", "n_classes", "==", "2", ":", "\n", "            ", "i", "=", "np", ".", "argsort", "(", "eigen_values", ")", "\n", "ix", "=", "np", ".", "empty_like", "(", "i", ")", "\n", "ix", "[", "1", ":", ":", "2", "]", "=", "i", "[", ":", "len", "(", "i", ")", "//", "2", "]", "\n", "ix", "[", "0", ":", ":", "2", "]", "=", "i", "[", "len", "(", "i", ")", "//", "2", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "", "return", "ix", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__ajd_pham": [[151, 228], ["numpy.eye", "range", "numpy.reshape().transpose", "numpy.concatenate", "range", "range", "numpy.reshape", "numpy.arange", "numpy.arange", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.sqrt", "numpy.conj", "numpy.real", "numpy.array", "numpy.dot", "numpy.reshape", "numpy.dot", "numpy.reshape", "numpy.dot", "max", "numpy.imag", "numpy.sqrt", "numpy.conj"], "methods", ["None"], ["", "def", "__ajd_pham", "(", "self", ",", "X", ",", "eps", "=", "1e-6", ",", "max_iter", "=", "15", ")", ":", "\n", "        ", "'''Approximate joint diagonalization based on Pham's algorithm.\n        This is a direct implementation of the PHAM's AJD algorithm [1].\n        Parameters\n        ----------\n        X : ndarray, shape (n_epochs, n_channels, n_channels)\n            A set of covariance matrices to diagonalize.\n        eps : float, default 1e-6\n            The tolerance for stopping criterion.\n        max_iter : int, default 1000\n            The maximum number of iteration to reach convergence.\n        Returns\n        -------\n        V : ndarray, shape (n_channels, n_channels)\n            The diagonalizer.\n        D : ndarray, shape (n_epochs, n_channels, n_channels)\n            The set of quasi diagonal matrices.\n        References\n        ----------\n        .. [1] Pham, Dinh Tuan. 'Joint approximate diagonalization of positive\n               definite Hermitian matrices.' SIAM Journal on Matrix Analysis and\n               Applications 22, no. 4 (2001): 1136-1152.\n        '''", "\n", "# Adapted from http://github.com/alexandrebarachant/pyRiemann", "\n", "n_epochs", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "# Reshape input matrix", "\n", "A", "=", "np", ".", "concatenate", "(", "X", ",", "axis", "=", "0", ")", ".", "T", "\n", "\n", "# Init variables", "\n", "n_times", ",", "n_m", "=", "A", ".", "shape", "\n", "V", "=", "np", ".", "eye", "(", "n_times", ")", "\n", "epsilon", "=", "n_times", "*", "(", "n_times", "-", "1", ")", "*", "eps", "\n", "\n", "for", "it", "in", "range", "(", "max_iter", ")", ":", "\n", "            ", "decr", "=", "0", "\n", "for", "ii", "in", "range", "(", "1", ",", "n_times", ")", ":", "\n", "                ", "for", "jj", "in", "range", "(", "ii", ")", ":", "\n", "                    ", "Ii", "=", "np", ".", "arange", "(", "ii", ",", "n_m", ",", "n_times", ")", "\n", "Ij", "=", "np", ".", "arange", "(", "jj", ",", "n_m", ",", "n_times", ")", "\n", "\n", "c1", "=", "A", "[", "ii", ",", "Ii", "]", "\n", "c2", "=", "A", "[", "jj", ",", "Ij", "]", "\n", "\n", "g12", "=", "np", ".", "mean", "(", "A", "[", "ii", ",", "Ij", "]", "/", "c1", ")", "\n", "g21", "=", "np", ".", "mean", "(", "A", "[", "ii", ",", "Ij", "]", "/", "c2", ")", "\n", "\n", "omega21", "=", "np", ".", "mean", "(", "c1", "/", "c2", ")", "\n", "omega12", "=", "np", ".", "mean", "(", "c2", "/", "c1", ")", "\n", "omega", "=", "np", ".", "sqrt", "(", "omega12", "*", "omega21", ")", "\n", "\n", "tmp", "=", "np", ".", "sqrt", "(", "omega21", "/", "omega12", ")", "\n", "tmp1", "=", "(", "tmp", "*", "g12", "+", "g21", ")", "/", "(", "omega", "+", "1", ")", "\n", "tmp2", "=", "(", "tmp", "*", "g12", "-", "g21", ")", "/", "max", "(", "omega", "-", "1", ",", "1e-9", ")", "\n", "\n", "h12", "=", "tmp1", "+", "tmp2", "\n", "h21", "=", "np", ".", "conj", "(", "(", "tmp1", "-", "tmp2", ")", "/", "tmp", ")", "\n", "\n", "decr", "+=", "n_epochs", "*", "(", "g12", "*", "np", ".", "conj", "(", "h12", ")", "+", "g21", "*", "h21", ")", "/", "2.0", "\n", "\n", "tmp", "=", "1", "+", "1.j", "*", "0.5", "*", "np", ".", "imag", "(", "h12", "*", "h21", ")", "\n", "tmp", "=", "np", ".", "real", "(", "tmp", "+", "np", ".", "sqrt", "(", "tmp", "**", "2", "-", "h12", "*", "h21", ")", ")", "\n", "tau", "=", "np", ".", "array", "(", "[", "[", "1", ",", "-", "h12", "/", "tmp", "]", ",", "[", "-", "h21", "/", "tmp", ",", "1", "]", "]", ")", "\n", "\n", "A", "[", "[", "ii", ",", "jj", "]", ",", ":", "]", "=", "np", ".", "dot", "(", "tau", ",", "A", "[", "[", "ii", ",", "jj", "]", ",", ":", "]", ")", "\n", "tmp", "=", "np", ".", "c_", "[", "A", "[", ":", ",", "Ii", "]", ",", "A", "[", ":", ",", "Ij", "]", "]", "\n", "tmp", "=", "np", ".", "reshape", "(", "tmp", ",", "(", "n_times", "*", "n_epochs", ",", "2", ")", ",", "order", "=", "'F'", ")", "\n", "tmp", "=", "np", ".", "dot", "(", "tmp", ",", "tau", ".", "T", ")", "\n", "\n", "tmp", "=", "np", ".", "reshape", "(", "tmp", ",", "(", "n_times", ",", "n_epochs", "*", "2", ")", ",", "order", "=", "'F'", ")", "\n", "A", "[", ":", ",", "Ii", "]", "=", "tmp", "[", ":", ",", ":", "n_epochs", "]", "\n", "A", "[", ":", ",", "Ij", "]", "=", "tmp", "[", ":", ",", "n_epochs", ":", "]", "\n", "V", "[", "[", "ii", ",", "jj", "]", ",", ":", "]", "=", "np", ".", "dot", "(", "tau", ",", "V", "[", "[", "ii", ",", "jj", "]", ",", ":", "]", ")", "\n", "", "", "if", "decr", "<", "epsilon", ":", "\n", "                ", "break", "\n", "", "", "D", "=", "np", ".", "reshape", "(", "A", ",", "(", "n_times", ",", "-", "1", ",", "n_times", ")", ")", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "V", ",", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__get_log_var_feats": [[229, 236], ["numpy.dot", "numpy.var", "numpy.log"], "methods", ["None"], ["", "def", "__get_log_var_feats", "(", "self", ",", "spatial_filt", ",", "data", ")", ":", "\n", "        ", "data_dot", "=", "np", ".", "dot", "(", "spatial_filt", ",", "data", ")", "# spatially filtered signals ", "\n", "data_var", "=", "np", ".", "var", "(", "data_dot", ",", "axis", "=", "1", ")", "\n", "# data_var = (data_dot**2).mean(axis=1)", "\n", "# We use log(var) instead of averaging", "\n", "data_log", "=", "np", ".", "log", "(", "data_var", ")", "\n", "return", "data_log", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.fit_transform": [[237, 263], ["numpy.zeros", "enumerate", "numpy.swapaxes", "X_transformed_var.reshape.reshape.reshape", "FBCSP.FBCSP.selector.fit_transform", "len", "Exception", "min2net.utils.butter_bandpass_filter", "FBCSP.FBCSP.__calculate_covariance_matrices", "FBCSP.FBCSP.__get_spatial_filter", "range", "len", "FBCSP.FBCSP.__get_log_var_feats"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.fit_transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__calculate_covariance_matrices", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__get_spatial_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__get_log_var_feats"], ["", "def", "fit_transform", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "if", "len", "(", "X", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension is not match!'", ")", "\n", "\n", "", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "X_transformed_var", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "bands", ")", ",", "n_samples", ",", "self", ".", "n_components", ")", ")", "\n", "\n", "for", "id_band", ",", "freq_band", "in", "enumerate", "(", "self", ".", "bands", ")", ":", "\n", "# Compute band-pass filter of EEG signals", "\n", "            ", "X_filtered", "=", "butter_bandpass_filter", "(", "X", ",", "freq_band", "[", "0", "]", ",", "freq_band", "[", "1", "]", ",", "self", ".", "smp_freq", ",", "self", ".", "order", ")", "\n", "\n", "# Calculating covariance only on training set", "\n", "covs", ",", "sample_weights", "=", "self", ".", "__calculate_covariance_matrices", "(", "X_filtered", ",", "y", ")", "\n", "spf_sel", ",", "spf_org", "=", "self", ".", "__get_spatial_filter", "(", "covs", ",", "sample_weights", ")", "\n", "self", ".", "spatial_transform", "[", "id_band", "]", "=", "spf_sel", "\n", "\n", "# Calculate the variance of spatially filtered signals and then compute the logarithm ", "\n", "for", "sample", "in", "range", "(", "X_filtered", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "X_transformed_var", "[", "id_band", ",", "sample", "]", "=", "self", ".", "__get_log_var_feats", "(", "self", ".", "spatial_transform", "[", "id_band", "]", ",", "X_filtered", "[", "sample", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "", "X_transformed_var", "=", "np", ".", "swapaxes", "(", "X_transformed_var", ",", "0", ",", "1", ")", "\n", "X_transformed_var", "=", "X_transformed_var", ".", "reshape", "(", "n_samples", ",", "-", "1", ")", "\n", "\n", "# select k best", "\n", "X_fbcsp", "=", "self", ".", "selector", ".", "fit_transform", "(", "X_transformed_var", ",", "y", ")", "\n", "return", "X_fbcsp", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform": [[264, 283], ["numpy.zeros", "enumerate", "numpy.swapaxes", "X_transformed_var.reshape.reshape.reshape", "FBCSP.FBCSP.selector.transform", "len", "Exception", "min2net.utils.butter_bandpass_filter", "range", "len", "FBCSP.FBCSP.__get_log_var_feats"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.__get_log_var_feats"], ["", "def", "transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "len", "(", "X", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension is not match!'", ")", "\n", "\n", "", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "X_transformed_var", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "bands", ")", ",", "n_samples", ",", "self", ".", "n_components", ")", ")", "\n", "\n", "for", "id_band", ",", "freq_band", "in", "enumerate", "(", "self", ".", "bands", ")", ":", "\n", "            ", "X_filtered", "=", "butter_bandpass_filter", "(", "X", ",", "freq_band", "[", "0", "]", ",", "freq_band", "[", "1", "]", ",", "self", ".", "smp_freq", ",", "self", ".", "order", ")", "\n", "\n", "# Calculate the variance of spatially filtered signals and then compute the logarithm ", "\n", "for", "sample_te", "in", "range", "(", "X_filtered", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "X_transformed_var", "[", "id_band", ",", "sample_te", "]", "=", "self", ".", "__get_log_var_feats", "(", "self", ".", "spatial_transform", "[", "id_band", "]", ",", "X_filtered", "[", "sample_te", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "", "X_transformed_var", "=", "np", ".", "swapaxes", "(", "X_transformed_var", ",", "0", ",", "1", ")", "\n", "X_transformed_var", "=", "X_transformed_var", ".", "reshape", "(", "n_samples", ",", "-", "1", ")", "\n", "# select k best", "\n", "X_fbcsp", "=", "self", ".", "selector", ".", "transform", "(", "X_transformed_var", ")", "\n", "return", "X_fbcsp", "", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.fbcsp.subject_dependent_setting": [[16, 54], ["min2net.preprocessing.SMR_BCI.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "fbcsp.__load_SMR_BCI", "zip", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "Exception", "sklearn.model_selection.StratifiedKFold.split", "print", "min2net.preprocessing.FBCSP.FBCSP", "min2net.preprocessing.FBCSP.FBCSP.fit_transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "print", "fbcsp.__save_data_with_valset", "print", "int", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.time_domain.__load_SMR_BCI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.fit_transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["def", "subject_dependent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_features", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/fbcsp/{}_class/subject_dependent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "# Carry out subject-dependent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_tr", ",", "y_tr", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "if", "len", "(", "X_tr", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension Error, must have 3 dimension'", ")", "\n", "\n", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_index", ",", "val_index", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "X_tr", ",", "y_tr", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_index", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_index", ")", ")", "\n", "X_tr_cv", ",", "X_val_cv", "=", "X_tr", "[", "train_index", "]", ",", "X_tr", "[", "val_index", "]", "\n", "y_tr_cv", ",", "y_val_cv", "=", "y_tr", "[", "train_index", "]", ",", "y_tr", "[", "val_index", "]", "\n", "\n", "# Peforming FBCSP feature extraction", "\n", "fbcsp_scaler", "=", "FBCSP", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_features", "=", "n_features", ")", "\n", "X_tr_fbcsp", "=", "fbcsp_scaler", ".", "fit_transform", "(", "X_tr_cv", ",", "y_tr_cv", ")", "\n", "X_val_fbcsp", "=", "fbcsp_scaler", ".", "transform", "(", "X_val_cv", ")", "\n", "X_te_fbcsp", "=", "fbcsp_scaler", ".", "transform", "(", "X_te", ")", "\n", "print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_tr_fbcsp", ".", "shape", ",", "X_val_fbcsp", ".", "shape", ",", "X_te_fbcsp", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_tr_fbcsp", ",", "y_tr_cv", ",", "X_val_fbcsp", ",", "y_val_cv", ",", "X_te_fbcsp", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.fbcsp.subject_independent_setting": [[55, 100], ["min2net.preprocessing.SMR_BCI.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "fbcsp.__load_SMR_BCI", "zip", "numpy.delete", "numpy.zeros", "numpy.zeros", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "sklearn.model_selection.StratifiedKFold.split", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "min2net.preprocessing.FBCSP.FBCSP", "min2net.preprocessing.FBCSP.FBCSP.fit_transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "print", "fbcsp.__save_data_with_valset", "print", "int", "int", "range", "len", "len", "len", "X_train_all[].reshape", "X_test_all[].reshape", "X_train_all[].reshape", "X_test_all[].reshape", "y_train_all[].reshape", "y_test_all[].reshape", "y_train_all[].reshape", "y_test_all[].reshape", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.time_domain.__load_SMR_BCI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.fit_transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["", "", "", "def", "subject_independent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_features", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/fbcsp/{}_class/subject_independent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-independent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_val", ",", "y_val", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "train_subj", "=", "[", "i", "for", "i", "in", "range", "(", "n_subjs", ")", "]", "\n", "train_subj", "=", "np", ".", "delete", "(", "train_subj", ",", "person", ")", "# remove test subject", "\n", "\n", "# Generating fake data to used for k-fold cross-validation only", "\n", "fake_tr", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ",", "2", ")", ")", "\n", "fake_tr_la", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ")", ")", "\n", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_ind", ",", "val_ind", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "fake_tr", ",", "fake_tr_la", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_ind", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_ind", ")", ")", "\n", "train_index", ",", "val_index", "=", "train_subj", "[", "train_ind", "]", ",", "train_subj", "[", "val_ind", "]", "\n", "X_train_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "X_val_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_train_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_val_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "# Peforming FBCSP feature extraction", "\n", "fbcsp_scaler", "=", "FBCSP", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_features", "=", "n_features", ")", "\n", "X_train_fbcsp", "=", "fbcsp_scaler", ".", "fit_transform", "(", "X_train_cat", ",", "y_train_cat", ")", "\n", "X_val_fbcsp", "=", "fbcsp_scaler", ".", "transform", "(", "X_val_cat", ")", "\n", "X_test_fbcsp", "=", "fbcsp_scaler", ".", "transform", "(", "X_te", ")", "\n", "print", "(", "\"Check dimension of training data {}, val data {} and testing data {}\"", ".", "format", "(", "X_train_fbcsp", ".", "shape", ",", "X_val_fbcsp", ".", "shape", ",", "X_test_fbcsp", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_train_fbcsp", ",", "y_train_cat", ",", "X_val_fbcsp", ",", "y_val_cat", ",", "X_test_fbcsp", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.fbcsp.__load_SMR_BCI": [[101, 106], ["min2net.preprocessing.SMR_BCI.raw.load_crop_data"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.load_crop_data"], ["", "", "", "def", "__load_SMR_BCI", "(", "PATH", ",", "subject", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n", "    ", "start", "=", "CONSTANT", "[", "'MI'", "]", "[", "'start'", "]", "# 4", "\n", "stop", "=", "CONSTANT", "[", "'MI'", "]", "[", "'stop'", "]", "# 8", "\n", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "=", "raw", ".", "load_crop_data", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "start", "=", "start", ",", "stop", "=", "stop", ",", "new_smp_freq", "=", "new_smp_freq", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "return", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.fbcsp.__save_data_with_valset": [[107, 115], ["numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print"], "function", ["None"], ["", "def", "__save_data_with_valset", "(", "save_path", ",", "NAME", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", ")", ":", "\n", "    ", "np", ".", "save", "(", "save_path", "+", "'/X_train_'", "+", "NAME", "+", "'.npy'", ",", "X_train", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_val_'", "+", "NAME", "+", "'.npy'", ",", "X_val", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_test_'", "+", "NAME", "+", "'.npy'", ",", "X_test", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_train_'", "+", "NAME", "+", "'.npy'", ",", "y_train", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_val_'", "+", "NAME", "+", "'.npy'", ",", "y_val", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_test_'", "+", "NAME", "+", "'.npy'", ",", "y_test", ")", "\n", "print", "(", "'save DONE'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.spectral_spatial.subject_dependent_setting": [[16, 53], ["min2net.preprocessing.SMR_BCI.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "spectral_spatial.__load_SMR_BCI", "zip", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "Exception", "sklearn.model_selection.StratifiedKFold.split", "print", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "print", "spectral_spatial.__save_data_with_valset", "print", "int", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.time_domain.__load_SMR_BCI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["def", "subject_dependent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_pick_bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/spectral_spatial/{}_class/subject_dependent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-dependent setting with 5-fold cross validation        ", "\n", "", "", "for", "person", ",", "(", "X_tr", ",", "y_tr", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "if", "len", "(", "X_tr", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension Error, must have 3 dimension'", ")", "\n", "\n", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_index", ",", "val_index", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "X_tr", ",", "y_tr", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_index", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_index", ")", ")", "\n", "X_tr_cv", ",", "X_val_cv", "=", "X_tr", "[", "train_index", "]", ",", "X_tr", "[", "val_index", "]", "\n", "y_tr_cv", ",", "y_val_cv", "=", "y_tr", "[", "train_index", "]", ",", "y_tr", "[", "val_index", "]", "\n", "\n", "# Peforming spectral-spatial feature representation", "\n", "SS_rep", "=", "SpectralSpatialMapping", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_pick_bands", "=", "n_pick_bands", ")", "\n", "X_tr_ss", ",", "X_val_ss", ",", "X_te_ss", "=", "SS_rep", ".", "spatial_spectral_with_valset", "(", "X_tr_cv", ",", "y_tr_cv", ",", "X_val_cv", ",", "X_te", ")", "\n", "print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_tr_ss", ".", "shape", ",", "X_val_ss", ".", "shape", ",", "X_te_ss", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_tr_ss", ",", "y_tr_cv", ",", "X_val_ss", ",", "y_val_cv", ",", "X_te_ss", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.spectral_spatial.subject_independent_setting": [[54, 98], ["min2net.preprocessing.SMR_BCI.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "spectral_spatial.__load_SMR_BCI", "zip", "numpy.delete", "numpy.zeros", "numpy.zeros", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "sklearn.model_selection.StratifiedKFold.split", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "print", "spectral_spatial.__save_data_with_valset", "print", "int", "int", "range", "len", "len", "len", "X_train_all[].reshape", "X_test_all[].reshape", "X_train_all[].reshape", "X_test_all[].reshape", "y_train_all[].reshape", "y_test_all[].reshape", "y_train_all[].reshape", "y_test_all[].reshape", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.time_domain.__load_SMR_BCI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["", "", "", "def", "subject_independent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_pick_bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/spectral_spatial/{}_class/subject_independent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-independent setting with 5-fold cross validation        ", "\n", "", "", "for", "person", ",", "(", "X_val", ",", "y_val", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "train_subj", "=", "[", "i", "for", "i", "in", "range", "(", "n_subjs", ")", "]", "\n", "train_subj", "=", "np", ".", "delete", "(", "train_subj", ",", "person", ")", "# remove test subject", "\n", "\n", "# Generating fake data to used for k-fold cross-validation only ", "\n", "fake_tr", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ",", "2", ")", ")", "\n", "fake_tr_la", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ")", ")", "\n", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_ind", ",", "val_ind", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "fake_tr", ",", "fake_tr_la", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_ind", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_ind", ")", ")", "\n", "train_index", ",", "val_index", "=", "train_subj", "[", "train_ind", "]", ",", "train_subj", "[", "val_ind", "]", "\n", "X_train_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "X_val_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_train_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_val_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# Peforming spectral-spatial feature representation", "\n", "SS_rep", "=", "SpectralSpatialMapping", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_pick_bands", "=", "n_pick_bands", ")", "\n", "X_train_ss", ",", "X_val_ss", ",", "X_test_ss", "=", "SS_rep", ".", "spatial_spectral_with_valset", "(", "X_train_cat", ",", "y_train_cat", ",", "X_val_cat", ",", "X_te", ")", "\n", "print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_train_ss", ".", "shape", ",", "X_val_ss", ".", "shape", ",", "X_test_ss", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_train_ss", ",", "y_train_cat", ",", "X_val_ss", ",", "y_val_cat", ",", "X_test_ss", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.spectral_spatial.__load_SMR_BCI": [[99, 104], ["min2net.preprocessing.SMR_BCI.raw.load_crop_data"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.load_crop_data"], ["", "", "", "def", "__load_SMR_BCI", "(", "PATH", ",", "subject", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n", "    ", "start", "=", "CONSTANT", "[", "'MI'", "]", "[", "'start'", "]", "# 4", "\n", "stop", "=", "CONSTANT", "[", "'MI'", "]", "[", "'stop'", "]", "# 8", "\n", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "=", "raw", ".", "load_crop_data", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "start", "=", "start", ",", "stop", "=", "stop", ",", "new_smp_freq", "=", "new_smp_freq", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "return", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.spectral_spatial.__save_data_with_valset": [[105, 113], ["numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print"], "function", ["None"], ["", "def", "__save_data_with_valset", "(", "save_path", ",", "NAME", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", ")", ":", "\n", "    ", "np", ".", "save", "(", "save_path", "+", "'/X_train_'", "+", "NAME", "+", "'.npy'", ",", "X_train", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_val_'", "+", "NAME", "+", "'.npy'", ",", "X_val", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_test_'", "+", "NAME", "+", "'.npy'", ",", "X_test", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_train_'", "+", "NAME", "+", "'.npy'", ",", "y_train", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_val_'", "+", "NAME", "+", "'.npy'", ",", "y_val", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_test_'", "+", "NAME", "+", "'.npy'", ",", "y_test", ")", "\n", "print", "(", "'save DONE'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.raw.read_raw": [[13, 42], ["range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "scipy.loadmat", "scipy.loadmat", "numpy.transpose", "int", "str().zfill", "str().zfill", "int", "str", "str"], "function", ["None"], ["def", "read_raw", "(", "PATH", ",", "subject", ",", "training", ",", "id_chosen_chs", ")", ":", "\n", "    ", "if", "training", ":", "\n", "        ", "mat", "=", "sio", ".", "loadmat", "(", "PATH", "+", "'/S'", "+", "str", "(", "subject", ")", ".", "zfill", "(", "2", ")", "+", "'T.mat'", ")", "[", "'data'", "]", "\n", "n_trials", "=", "CONSTANT", "[", "'n_trials_tr'", "]", "# 100", "\n", "label", "=", "np", ".", "zeros", "(", "n_trials", ")", "\n", "data", "=", "np", ".", "zeros", "(", "(", "n_trials", ",", "n_chs", ",", "window_len", ")", ")", "\n", "", "else", ":", "\n", "        ", "mat", "=", "sio", ".", "loadmat", "(", "PATH", "+", "'/S'", "+", "str", "(", "subject", ")", ".", "zfill", "(", "2", ")", "+", "'E.mat'", ")", "[", "'data'", "]", "\n", "n_trials", "=", "CONSTANT", "[", "'n_trials_te'", "]", "# 60", "\n", "label", "=", "np", ".", "zeros", "(", "n_trials", ")", "\n", "data", "=", "np", ".", "zeros", "(", "(", "n_trials", ",", "n_chs", ",", "window_len", ")", ")", "\n", "", "NO_valid_trial", "=", "0", "\n", "for", "ii", "in", "range", "(", "0", ",", "mat", ".", "size", ")", ":", "\n", "        ", "mat_1", "=", "mat", "[", "0", ",", "ii", "]", "\n", "mat_2", "=", "[", "mat_1", "[", "0", ",", "0", "]", "]", "\n", "mat_info", "=", "mat_2", "[", "0", "]", "\n", "_X", "=", "mat_info", "[", "0", "]", "\n", "_trial", "=", "mat_info", "[", "1", "]", "\n", "_y", "=", "mat_info", "[", "2", "]", "\n", "_fs", "=", "mat_info", "[", "3", "]", "\n", "_classes", "=", "mat_info", "[", "4", "]", "\n", "for", "trial", "in", "range", "(", "0", ",", "_trial", ".", "size", ")", ":", "\n", "# class 1 (right hand) and class 2 (feet) ", "\n", "            ", "_data", "=", "np", ".", "transpose", "(", "_X", "[", "_trial", "[", "0", "]", "[", "trial", "]", ":", "int", "(", "_trial", "[", "0", "]", "[", "trial", "]", "+", "window_len", ")", ",", "id_chosen_chs", "]", ")", "\n", "_label", "=", "int", "(", "_y", "[", "0", "]", "[", "trial", "]", ")", "\n", "data", "[", "NO_valid_trial", ",", ":", ",", ":", "]", "=", "_data", "\n", "label", "[", "NO_valid_trial", "]", "=", "_label", "\n", "NO_valid_trial", "+=", "1", "\n", "", "", "return", "data", ",", "label", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.raw.chanel_selection": [[43, 50], ["chs_id.append", "print", "numpy.where", "numpy.array"], "function", ["None"], ["", "def", "chanel_selection", "(", "sel_chs", ")", ":", "\n", "    ", "chs_id", "=", "[", "]", "\n", "for", "name_ch", "in", "sel_chs", ":", "\n", "        ", "ch_id", "=", "np", ".", "where", "(", "np", ".", "array", "(", "orig_chs", ")", "==", "name_ch", ")", "[", "0", "]", "[", "0", "]", "\n", "chs_id", ".", "append", "(", "ch_id", ")", "\n", "print", "(", "'chosen_channel:'", ",", "name_ch", ",", "'---'", ",", "'Index_is:'", ",", "ch_id", ")", "\n", "", "return", "chs_id", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.raw.load_crop_data": [[51, 62], ["int", "int", "raw.read_raw", "raw.read_raw", "min2net.utils.resampling", "min2net.utils.resampling"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.read_raw", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.read_raw", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.resampling", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.resampling"], ["", "def", "load_crop_data", "(", "PATH", ",", "subject", ",", "start", ",", "stop", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n", "    ", "start_time", "=", "int", "(", "start", "*", "new_smp_freq", ")", "# 4*", "\n", "stop_time", "=", "int", "(", "stop", "*", "new_smp_freq", ")", "# 8*", "\n", "X_train", ",", "y_tr", "=", "read_raw", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "training", "=", "True", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "X_test", ",", "y_te", "=", "read_raw", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "training", "=", "False", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "if", "new_smp_freq", "<", "orig_smp_freq", ":", "\n", "        ", "X_train", "=", "resampling", "(", "X_train", ",", "new_smp_freq", ",", "trial_len", ")", "\n", "X_test", "=", "resampling", "(", "X_test", ",", "new_smp_freq", ",", "trial_len", ")", "\n", "", "X_train", "=", "X_train", "[", ":", ",", ":", ",", "start_time", ":", "stop_time", "]", "\n", "X_test", "=", "X_test", "[", ":", ",", ":", ",", "start_time", ":", "stop_time", "]", "\n", "return", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.time_domain.subject_dependent_setting": [[16, 53], ["min2net.preprocessing.SMR_BCI.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time_domain.__load_SMR_BCI", "zip", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "Exception", "sklearn.model_selection.StratifiedKFold.split", "print", "print", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "print", "time_domain.__save_data_with_valset", "print", "int", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.time_domain.__load_SMR_BCI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["def", "subject_dependent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/time_domain/{}_class/subject_dependent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-dependent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_tr", ",", "y_tr", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "if", "len", "(", "X_tr", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension Error, must have 3 dimension'", ")", "\n", "\n", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_index", ",", "val_index", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "X_tr", ",", "y_tr", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_index", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_index", ")", ")", "\n", "X_tr_cv", ",", "X_val_cv", "=", "X_tr", "[", "train_index", "]", ",", "X_tr", "[", "val_index", "]", "\n", "y_tr_cv", ",", "y_val_cv", "=", "y_tr", "[", "train_index", "]", ",", "y_tr", "[", "val_index", "]", "\n", "\n", "print", "(", "'Band-pass filtering from {} to {} Hz.'", ".", "format", "(", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ")", ")", "\n", "X_tr_fil", "=", "butter_bandpass_filter", "(", "X_tr_cv", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_val_fil", "=", "butter_bandpass_filter", "(", "X_val_cv", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_te_fil", "=", "butter_bandpass_filter", "(", "X_te", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_tr_fil", ".", "shape", ",", "X_val_fil", ".", "shape", ",", "X_te_fil", ".", "shape", ")", ")", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_tr_fil", ",", "y_tr_cv", ",", "X_val_fil", ",", "y_val_cv", ",", "X_te_fil", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.time_domain.subject_independent_setting": [[54, 100], ["min2net.preprocessing.SMR_BCI.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time_domain.__load_SMR_BCI", "zip", "numpy.delete", "numpy.zeros", "numpy.zeros", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "sklearn.model_selection.StratifiedKFold.split", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "print", "time_domain.__save_data_with_valset", "print", "int", "int", "range", "len", "len", "len", "X_train_all[].reshape", "X_test_all[].reshape", "X_train_all[].reshape", "X_test_all[].reshape", "y_train_all[].reshape", "y_test_all[].reshape", "y_train_all[].reshape", "y_test_all[].reshape", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.time_domain.__load_SMR_BCI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["", "", "", "def", "subject_independent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/time_domain/{}_class/subject_independent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-independent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_val", ",", "y_val", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "train_subj", "=", "[", "i", "for", "i", "in", "range", "(", "n_subjs", ")", "]", "\n", "train_subj", "=", "np", ".", "delete", "(", "train_subj", ",", "person", ")", "# remove test subject", "\n", "\n", "# Generating fake data to used for k-fold cross-validation only", "\n", "fake_tr", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ",", "2", ")", ")", "\n", "fake_tr_la", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ")", ")", "\n", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_ind", ",", "val_ind", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "fake_tr", ",", "fake_tr_la", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_ind", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_ind", ")", ")", "\n", "train_index", ",", "val_index", "=", "train_subj", "[", "train_ind", "]", ",", "train_subj", "[", "val_ind", "]", "\n", "X_train_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "X_val_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_train_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_val_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# Performing bandpass-filtering", "\n", "print", "(", "'Band-pass filtering from {} to {} Hz.'", ".", "format", "(", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ")", ")", "\n", "X_train_fil", "=", "butter_bandpass_filter", "(", "X_train_cat", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_val_fil", "=", "butter_bandpass_filter", "(", "X_val_cat", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_test_fil", "=", "butter_bandpass_filter", "(", "X_te", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "\n", "print", "(", "'Verify the final dimesion of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_train_fil", ".", "shape", ",", "X_val_fil", ".", "shape", ",", "X_test_fil", ".", "shape", ")", ")", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_train_fil", ",", "y_train_cat", ",", "X_val_fil", ",", "y_val_cat", ",", "X_test_fil", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.time_domain.__load_SMR_BCI": [[101, 106], ["min2net.preprocessing.SMR_BCI.raw.load_crop_data"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.load_crop_data"], ["", "", "", "def", "__load_SMR_BCI", "(", "PATH", ",", "subject", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n", "    ", "start", "=", "CONSTANT", "[", "'MI'", "]", "[", "'start'", "]", "# 4", "\n", "stop", "=", "CONSTANT", "[", "'MI'", "]", "[", "'stop'", "]", "# 8", "\n", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "=", "raw", ".", "load_crop_data", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "start", "=", "start", ",", "stop", "=", "stop", ",", "new_smp_freq", "=", "new_smp_freq", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "return", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.SMR_BCI.time_domain.__save_data_with_valset": [[107, 115], ["numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print"], "function", ["None"], ["", "def", "__save_data_with_valset", "(", "save_path", ",", "NAME", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", ")", ":", "\n", "    ", "np", ".", "save", "(", "save_path", "+", "'/X_train_'", "+", "NAME", "+", "'.npy'", ",", "X_train", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_val_'", "+", "NAME", "+", "'.npy'", ",", "X_val", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_test_'", "+", "NAME", "+", "'.npy'", ",", "X_test", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_train_'", "+", "NAME", "+", "'.npy'", ",", "y_train", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_val_'", "+", "NAME", "+", "'.npy'", ",", "y_val", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_test_'", "+", "NAME", "+", "'.npy'", ",", "y_test", ")", "\n", "print", "(", "'save DONE'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.fbcsp.subject_dependent_setting": [[15, 56], ["len", "min2net.preprocessing.BCIC2a.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "fbcsp.__load_BCIC2a", "zip", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "Exception", "sklearn.model_selection.StratifiedKFold.split", "print", "min2net.preprocessing.FBCSP.FBCSP", "min2net.preprocessing.FBCSP.FBCSP.fit_transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "print", "fbcsp.__save_data_with_valset", "print", "int", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.time_domain.__load_BCIC2a", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.fit_transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["\n", "def", "subject_dependent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_features", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/fbcsp/{}_class/subject_dependent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "# Carry out subject-dependent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_tr", ",", "y_tr", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "if", "len", "(", "X_tr", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension Error, must have 3 dimension'", ")", "\n", "\n", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_index", ",", "val_index", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "X_tr", ",", "y_tr", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_index", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_index", ")", ")", "\n", "X_tr_cv", ",", "X_val_cv", "=", "X_tr", "[", "train_index", "]", ",", "X_tr", "[", "val_index", "]", "\n", "y_tr_cv", ",", "y_val_cv", "=", "y_tr", "[", "train_index", "]", ",", "y_tr", "[", "val_index", "]", "\n", "\n", "# Peforming FBCSP feature extraction", "\n", "fbcsp_scaler", "=", "FBCSP", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_features", "=", "n_features", ")", "\n", "X_tr_fbcsp", "=", "fbcsp_scaler", ".", "fit_transform", "(", "X_tr_cv", ",", "y_tr_cv", ")", "\n", "X_val_fbcsp", "=", "fbcsp_scaler", ".", "transform", "(", "X_val_cv", ")", "\n", "X_te_fbcsp", "=", "fbcsp_scaler", ".", "transform", "(", "X_te", ")", "\n", "print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_tr_fbcsp", ".", "shape", ",", "X_val_fbcsp", ".", "shape", ",", "X_te_fbcsp", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_tr_fbcsp", ",", "y_tr_cv", ",", "X_val_fbcsp", ",", "y_val_cv", ",", "X_te_fbcsp", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "subject_independent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_features", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.fbcsp.subject_independent_setting": [[58, 112], ["len", "min2net.preprocessing.BCIC2a.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "fbcsp.__load_BCIC2a", "zip", "numpy.delete", "numpy.zeros", "numpy.zeros", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "sklearn.model_selection.StratifiedKFold.split", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "min2net.preprocessing.FBCSP.FBCSP", "min2net.preprocessing.FBCSP.FBCSP.fit_transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "print", "fbcsp.__save_data_with_valset", "print", "int", "int", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.time_domain.__load_BCIC2a", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.fit_transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["save_path", "=", "save_path", "+", "'/SMR_BCI/fbcsp/{}_class/subject_independent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-independent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_val", ",", "y_val", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "train_subj", "=", "[", "i", "for", "i", "in", "range", "(", "n_subjs", ")", "]", "\n", "train_subj", "=", "np", ".", "delete", "(", "train_subj", ",", "person", ")", "# remove test subject", "\n", "\n", "# Generating fake data to used for k-fold cross-validation only", "\n", "fake_tr", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ",", "2", ")", ")", "\n", "fake_tr_la", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ")", ")", "\n", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_ind", ",", "val_ind", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "fake_tr", ",", "fake_tr_la", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_ind", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_ind", ")", ")", "\n", "train_index", ",", "val_index", "=", "train_subj", "[", "train_ind", "]", ",", "train_subj", "[", "val_ind", "]", "\n", "X_train_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "X_val_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_train_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_val_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "# Peforming FBCSP feature extraction", "\n", "fbcsp_scaler", "=", "FBCSP", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_features", "=", "n_features", ")", "\n", "X_train_fbcsp", "=", "fbcsp_scaler", ".", "fit_transform", "(", "X_train_cat", ",", "y_train_cat", ")", "\n", "X_val_fbcsp", "=", "fbcsp_scaler", ".", "transform", "(", "X_val_cat", ")", "\n", "X_test_fbcsp", "=", "fbcsp_scaler", ".", "transform", "(", "X_te", ")", "\n", "print", "(", "\"Check dimension of training data {}, val data {} and testing data {}\"", ".", "format", "(", "X_train_fbcsp", ".", "shape", ",", "X_val_fbcsp", ".", "shape", ",", "X_test_fbcsp", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_train_fbcsp", ",", "y_train_cat", ",", "X_val_fbcsp", ",", "y_val_cat", ",", "X_test_fbcsp", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "__load_SMR_BCI", "(", "PATH", ",", "subject", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n", "    ", "start", "=", "CONSTANT", "[", "'MI'", "]", "[", "'start'", "]", "# 4", "\n", "stop", "=", "CONSTANT", "[", "'MI'", "]", "[", "'stop'", "]", "# 8", "\n", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "=", "raw", ".", "load_crop_data", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "start", "=", "start", ",", "stop", "=", "stop", ",", "new_smp_freq", "=", "new_smp_freq", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "return", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "\n", "\n", "", "def", "__save_data_with_valset", "(", "save_path", ",", "NAME", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", ")", ":", "\n", "    ", "np", ".", "save", "(", "save_path", "+", "'/X_train_'", "+", "NAME", "+", "'.npy'", ",", "X_train", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_val_'", "+", "NAME", "+", "'.npy'", ",", "X_val", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_test_'", "+", "NAME", "+", "'.npy'", ",", "X_test", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_train_'", "+", "NAME", "+", "'.npy'", ",", "y_train", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_val_'", "+", "NAME", "+", "'.npy'", ",", "y_val", ")", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.fbcsp.__load_BCIC2a": [[113, 119], ["min2net.preprocessing.BCIC2a.raw.load_crop_data"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.load_crop_data"], ["np", ".", "save", "(", "save_path", "+", "'/y_test_'", "+", "NAME", "+", "'.npy'", ",", "y_test", ")", "\n", "print", "(", "'save DONE'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.fbcsp.__save_data_with_valset": [[120, 128], ["numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.spectral_spatial.subject_dependent_setting": [[16, 55], ["len", "min2net.preprocessing.BCIC2a.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "spectral_spatial.__load_BCIC2a", "zip", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "Exception", "sklearn.model_selection.StratifiedKFold.split", "print", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "print", "spectral_spatial.__save_data_with_valset", "print", "int", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.time_domain.__load_BCIC2a", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["def", "subject_dependent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_pick_bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/spectral_spatial/{}_class/subject_dependent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-dependent setting with 5-fold cross validation        ", "\n", "", "", "for", "person", ",", "(", "X_tr", ",", "y_tr", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "if", "len", "(", "X_tr", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension Error, must have 3 dimension'", ")", "\n", "\n", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_index", ",", "val_index", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "X_tr", ",", "y_tr", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_index", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_index", ")", ")", "\n", "X_tr_cv", ",", "X_val_cv", "=", "X_tr", "[", "train_index", "]", ",", "X_tr", "[", "val_index", "]", "\n", "y_tr_cv", ",", "y_val_cv", "=", "y_tr", "[", "train_index", "]", ",", "y_tr", "[", "val_index", "]", "\n", "\n", "# Peforming spectral-spatial feature representation", "\n", "SS_rep", "=", "SpectralSpatialMapping", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_pick_bands", "=", "n_pick_bands", ")", "\n", "X_tr_ss", ",", "X_val_ss", ",", "X_te_ss", "=", "SS_rep", ".", "spatial_spectral_with_valset", "(", "X_tr_cv", ",", "y_tr_cv", ",", "X_val_cv", ",", "X_te", ")", "\n", "print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_tr_ss", ".", "shape", ",", "X_val_ss", ".", "shape", ",", "X_te_ss", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_tr_ss", ",", "y_tr_cv", ",", "X_val_ss", ",", "y_val_cv", ",", "X_te_ss", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "subject_independent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_pick_bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.spectral_spatial.subject_independent_setting": [[57, 109], ["len", "min2net.preprocessing.BCIC2a.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "spectral_spatial.__load_BCIC2a", "zip", "numpy.delete", "numpy.zeros", "numpy.zeros", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "sklearn.model_selection.StratifiedKFold.split", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "print", "spectral_spatial.__save_data_with_valset", "print", "int", "int", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.time_domain.__load_BCIC2a", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["save_path", "=", "save_path", "+", "'/SMR_BCI/spectral_spatial/{}_class/subject_independent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-independent setting with 5-fold cross validation        ", "\n", "", "", "for", "person", ",", "(", "X_val", ",", "y_val", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "train_subj", "=", "[", "i", "for", "i", "in", "range", "(", "n_subjs", ")", "]", "\n", "train_subj", "=", "np", ".", "delete", "(", "train_subj", ",", "person", ")", "# remove test subject", "\n", "\n", "# Generating fake data to used for k-fold cross-validation only ", "\n", "fake_tr", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ",", "2", ")", ")", "\n", "fake_tr_la", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ")", ")", "\n", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_ind", ",", "val_ind", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "fake_tr", ",", "fake_tr_la", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_ind", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_ind", ")", ")", "\n", "train_index", ",", "val_index", "=", "train_subj", "[", "train_ind", "]", ",", "train_subj", "[", "val_ind", "]", "\n", "X_train_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "X_val_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_train_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_val_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# Peforming spectral-spatial feature representation", "\n", "SS_rep", "=", "SpectralSpatialMapping", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_pick_bands", "=", "n_pick_bands", ")", "\n", "X_train_ss", ",", "X_val_ss", ",", "X_test_ss", "=", "SS_rep", ".", "spatial_spectral_with_valset", "(", "X_train_cat", ",", "y_train_cat", ",", "X_val_cat", ",", "X_te", ")", "\n", "print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_train_ss", ".", "shape", ",", "X_val_ss", ".", "shape", ",", "X_test_ss", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_train_ss", ",", "y_train_cat", ",", "X_val_ss", ",", "y_val_cat", ",", "X_test_ss", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "__load_SMR_BCI", "(", "PATH", ",", "subject", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n", "    ", "start", "=", "CONSTANT", "[", "'MI'", "]", "[", "'start'", "]", "# 4", "\n", "stop", "=", "CONSTANT", "[", "'MI'", "]", "[", "'stop'", "]", "# 8", "\n", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "=", "raw", ".", "load_crop_data", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "start", "=", "start", ",", "stop", "=", "stop", ",", "new_smp_freq", "=", "new_smp_freq", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "return", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "\n", "\n", "", "def", "__save_data_with_valset", "(", "save_path", ",", "NAME", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", ")", ":", "\n", "    ", "np", ".", "save", "(", "save_path", "+", "'/X_train_'", "+", "NAME", "+", "'.npy'", ",", "X_train", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_val_'", "+", "NAME", "+", "'.npy'", ",", "X_val", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_test_'", "+", "NAME", "+", "'.npy'", ",", "X_test", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_train_'", "+", "NAME", "+", "'.npy'", ",", "y_train", ")", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.spectral_spatial.__load_BCIC2a": [[111, 117], ["min2net.preprocessing.BCIC2a.raw.load_crop_data"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.load_crop_data"], ["np", ".", "save", "(", "save_path", "+", "'/y_test_'", "+", "NAME", "+", "'.npy'", ",", "y_test", ")", "\n", "print", "(", "'save DONE'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.spectral_spatial.__save_data_with_valset": [[118, 126], ["numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.raw.read_raw": [[13, 43], ["numpy.zeros", "numpy.zeros", "range", "range", "scipy.loadmat", "scipy.loadmat", "numpy.transpose", "int", "str", "str", "int", "int"], "function", ["None"], ["def", "read_raw", "(", "PATH", ",", "subject", ",", "training", ",", "id_chosen_chs", ")", ":", "\n", "    ", "if", "training", ":", "\n", "        ", "mat", "=", "sio", ".", "loadmat", "(", "PATH", "+", "'/S'", "+", "str", "(", "subject", ")", ".", "zfill", "(", "2", ")", "+", "'T.mat'", ")", "[", "'data'", "]", "\n", "n_trials", "=", "CONSTANT", "[", "'n_trials_tr'", "]", "# 100", "\n", "label", "=", "np", ".", "zeros", "(", "n_trials", ")", "\n", "data", "=", "np", ".", "zeros", "(", "(", "n_trials", ",", "n_chs", ",", "window_len", ")", ")", "\n", "", "else", ":", "\n", "        ", "mat", "=", "sio", ".", "loadmat", "(", "PATH", "+", "'/S'", "+", "str", "(", "subject", ")", ".", "zfill", "(", "2", ")", "+", "'E.mat'", ")", "[", "'data'", "]", "\n", "n_trials", "=", "CONSTANT", "[", "'n_trials_te'", "]", "# 60", "\n", "label", "=", "np", ".", "zeros", "(", "n_trials", ")", "\n", "data", "=", "np", ".", "zeros", "(", "(", "n_trials", ",", "n_chs", ",", "window_len", ")", ")", "\n", "", "NO_valid_trial", "=", "0", "\n", "for", "ii", "in", "range", "(", "0", ",", "mat", ".", "size", ")", ":", "\n", "        ", "mat_1", "=", "mat", "[", "0", ",", "ii", "]", "\n", "mat_2", "=", "[", "mat_1", "[", "0", ",", "0", "]", "]", "\n", "mat_info", "=", "mat_2", "[", "0", "]", "\n", "_X", "=", "mat_info", "[", "0", "]", "\n", "_trial", "=", "mat_info", "[", "1", "]", "\n", "_y", "=", "mat_info", "[", "2", "]", "\n", "_fs", "=", "mat_info", "[", "3", "]", "\n", "_classes", "=", "mat_info", "[", "4", "]", "\n", "for", "trial", "in", "range", "(", "0", ",", "_trial", ".", "size", ")", ":", "\n", "# class 1 (right hand) and class 2 (feet) ", "\n", "            ", "_data", "=", "np", ".", "transpose", "(", "_X", "[", "_trial", "[", "0", "]", "[", "trial", "]", ":", "int", "(", "_trial", "[", "0", "]", "[", "trial", "]", "+", "window_len", ")", ",", "id_chosen_chs", "]", ")", "\n", "_label", "=", "int", "(", "_y", "[", "0", "]", "[", "trial", "]", ")", "\n", "data", "[", "NO_valid_trial", ",", ":", ",", ":", "]", "=", "_data", "\n", "label", "[", "NO_valid_trial", "]", "=", "_label", "\n", "NO_valid_trial", "+=", "1", "\n", "", "", "return", "data", ",", "label", "-", "1", "\n", "\n", "", "def", "chanel_selection", "(", "sel_chs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.raw.chanel_selection": [[44, 51], ["chs_id.append", "print", "numpy.where", "numpy.array"], "function", ["None"], ["    ", "chs_id", "=", "[", "]", "\n", "for", "name_ch", "in", "sel_chs", ":", "\n", "        ", "ch_id", "=", "np", ".", "where", "(", "np", ".", "array", "(", "orig_chs", ")", "==", "name_ch", ")", "[", "0", "]", "[", "0", "]", "\n", "chs_id", ".", "append", "(", "ch_id", ")", "\n", "print", "(", "'chosen_channel:'", ",", "name_ch", ",", "'---'", ",", "'Index_is:'", ",", "ch_id", ")", "\n", "", "return", "chs_id", "\n", "\n", "", "def", "load_crop_data", "(", "PATH", ",", "subject", ",", "start", ",", "stop", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.raw.load_crop_data": [[52, 66], ["int", "int", "raw.read_raw", "raw.read_raw", "print", "min2net.utils.resampling", "min2net.utils.resampling"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.read_raw", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.read_raw", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.resampling", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.resampling"], ["    ", "start_time", "=", "int", "(", "start", "*", "new_smp_freq", ")", "# 4*", "\n", "stop_time", "=", "int", "(", "stop", "*", "new_smp_freq", ")", "# 8*", "\n", "X_train", ",", "y_tr", "=", "read_raw", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "training", "=", "True", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "X_test", ",", "y_te", "=", "read_raw", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "training", "=", "False", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "if", "new_smp_freq", "<", "orig_smp_freq", ":", "\n", "        ", "X_train", "=", "resampling", "(", "X_train", ",", "new_smp_freq", ",", "trial_len", ")", "\n", "X_test", "=", "resampling", "(", "X_test", ",", "new_smp_freq", ",", "trial_len", ")", "\n", "", "X_train", "=", "X_train", "[", ":", ",", ":", ",", "start_time", ":", "stop_time", "]", "\n", "X_test", "=", "X_test", "[", ":", ",", ":", ",", "start_time", ":", "stop_time", "]", "\n", "return", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.time_domain.subject_dependent_setting": [[15, 54], ["len", "min2net.preprocessing.BCIC2a.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time_domain.__load_BCIC2a", "zip", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "Exception", "sklearn.model_selection.StratifiedKFold.split", "print", "print", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "print", "time_domain.__save_data_with_valset", "print", "int", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.time_domain.__load_BCIC2a", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["\n", "def", "subject_dependent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/time_domain/{}_class/subject_dependent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-dependent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_tr", ",", "y_tr", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "if", "len", "(", "X_tr", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension Error, must have 3 dimension'", ")", "\n", "\n", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_index", ",", "val_index", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "X_tr", ",", "y_tr", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_index", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_index", ")", ")", "\n", "X_tr_cv", ",", "X_val_cv", "=", "X_tr", "[", "train_index", "]", ",", "X_tr", "[", "val_index", "]", "\n", "y_tr_cv", ",", "y_val_cv", "=", "y_tr", "[", "train_index", "]", ",", "y_tr", "[", "val_index", "]", "\n", "\n", "print", "(", "'Band-pass filtering from {} to {} Hz.'", ".", "format", "(", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ")", ")", "\n", "X_tr_fil", "=", "butter_bandpass_filter", "(", "X_tr_cv", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_val_fil", "=", "butter_bandpass_filter", "(", "X_val_cv", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_te_fil", "=", "butter_bandpass_filter", "(", "X_te", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_tr_fil", ".", "shape", ",", "X_val_fil", ".", "shape", ",", "X_te_fil", ".", "shape", ")", ")", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_tr_fil", ",", "y_tr_cv", ",", "X_val_fil", ",", "y_val_cv", ",", "X_te_fil", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "subject_independent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.time_domain.subject_independent_setting": [[56, 111], ["len", "min2net.preprocessing.BCIC2a.raw.chanel_selection", "range", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time_domain.__load_BCIC2a", "zip", "numpy.delete", "numpy.zeros", "numpy.zeros", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "sklearn.model_selection.StratifiedKFold.split", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "print", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "print", "time_domain.__save_data_with_valset", "print", "int", "int", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.time_domain.__load_BCIC2a", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/time_domain/{}_class/subject_independent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-independent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_val", ",", "y_val", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "train_subj", "=", "[", "i", "for", "i", "in", "range", "(", "n_subjs", ")", "]", "\n", "train_subj", "=", "np", ".", "delete", "(", "train_subj", ",", "person", ")", "# remove test subject", "\n", "\n", "# Generating fake data to used for k-fold cross-validation only", "\n", "fake_tr", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ",", "2", ")", ")", "\n", "fake_tr_la", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ")", ")", "\n", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_ind", ",", "val_ind", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "fake_tr", ",", "fake_tr_la", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_ind", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_ind", ")", ")", "\n", "train_index", ",", "val_index", "=", "train_subj", "[", "train_ind", "]", ",", "train_subj", "[", "val_ind", "]", "\n", "X_train_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "X_val_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_train_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_val_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# Performing bandpass-filtering", "\n", "print", "(", "'Band-pass filtering from {} to {} Hz.'", ".", "format", "(", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ")", ")", "\n", "X_train_fil", "=", "butter_bandpass_filter", "(", "X_train_cat", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_val_fil", "=", "butter_bandpass_filter", "(", "X_val_cat", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_test_fil", "=", "butter_bandpass_filter", "(", "X_te", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "\n", "print", "(", "'Verify the final dimesion of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_train_fil", ".", "shape", ",", "X_val_fil", ".", "shape", ",", "X_test_fil", ".", "shape", ")", ")", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_train_fil", ",", "y_train_cat", ",", "X_val_fil", ",", "y_val_cat", ",", "X_test_fil", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "__load_SMR_BCI", "(", "PATH", ",", "subject", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n", "    ", "start", "=", "CONSTANT", "[", "'MI'", "]", "[", "'start'", "]", "# 4", "\n", "stop", "=", "CONSTANT", "[", "'MI'", "]", "[", "'stop'", "]", "# 8", "\n", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "=", "raw", ".", "load_crop_data", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "start", "=", "start", ",", "stop", "=", "stop", ",", "new_smp_freq", "=", "new_smp_freq", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "return", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "\n", "\n", "", "def", "__save_data_with_valset", "(", "save_path", ",", "NAME", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", ")", ":", "\n", "    ", "np", ".", "save", "(", "save_path", "+", "'/X_train_'", "+", "NAME", "+", "'.npy'", ",", "X_train", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_val_'", "+", "NAME", "+", "'.npy'", ",", "X_val", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/X_test_'", "+", "NAME", "+", "'.npy'", ",", "X_test", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_train_'", "+", "NAME", "+", "'.npy'", ",", "y_train", ")", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.time_domain.__load_BCIC2a": [[112, 118], ["min2net.preprocessing.BCIC2a.raw.load_crop_data"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.load_crop_data"], ["np", ".", "save", "(", "save_path", "+", "'/y_val_'", "+", "NAME", "+", "'.npy'", ",", "y_val", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'/y_test_'", "+", "NAME", "+", "'.npy'", ",", "y_test", ")", "\n", "print", "(", "'save DONE'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.BCIC2a.time_domain.__save_data_with_valset": [[119, 127], ["numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.fbcsp.subject_dependent_setting": [[14, 46], ["min2net.preprocessing.OpenBMI.raw.chanel_selection", "fbcsp.__load_OpenBMI", "enumerate", "zip", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "Exception", "sklearn.model_selection.StratifiedKFold.split", "print", "min2net.preprocessing.FBCSP.FBCSP", "min2net.preprocessing.FBCSP.FBCSP.fit_transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "print", "fbcsp.__save_data_with_valset", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__load_OpenBMI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.fit_transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["MI_len", "=", "CONSTANT", "[", "'MI'", "]", "[", "'len'", "]", "\n", "\n", "def", "subject_dependent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_features", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/fbcsp/{}_class/subject_dependent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "# Carry out subject-dependent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_tr", ",", "y_tr", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "if", "len", "(", "X_tr", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension Error, must have 3 dimension'", ")", "\n", "\n", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_index", ",", "val_index", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "X_tr", ",", "y_tr", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_index", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_index", ")", ")", "\n", "X_tr_cv", ",", "X_val_cv", "=", "X_tr", "[", "train_index", "]", ",", "X_tr", "[", "val_index", "]", "\n", "y_tr_cv", ",", "y_val_cv", "=", "y_tr", "[", "train_index", "]", ",", "y_tr", "[", "val_index", "]", "\n", "\n", "# Peforming FBCSP feature extraction", "\n", "fbcsp_scaler", "=", "FBCSP", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_features", "=", "n_features", ")", "\n", "X_tr_fbcsp", "=", "fbcsp_scaler", ".", "fit_transform", "(", "X_tr_cv", ",", "y_tr_cv", ")", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.fbcsp.subject_independent_setting": [[48, 94], ["min2net.preprocessing.OpenBMI.raw.chanel_selection", "fbcsp.__load_OpenBMI", "enumerate", "zip", "numpy.delete", "numpy.zeros", "numpy.zeros", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "sklearn.model_selection.StratifiedKFold.split", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "min2net.preprocessing.FBCSP.FBCSP", "min2net.preprocessing.FBCSP.FBCSP.fit_transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "min2net.preprocessing.FBCSP.FBCSP.transform", "print", "print", "fbcsp.__save_data_with_valset", "print", "range", "len", "len", "len", "numpy.unique", "numpy.unique", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__load_OpenBMI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.fit_transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.FBCSP.FBCSP.transform", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["X_te_fbcsp", "=", "fbcsp_scaler", ".", "transform", "(", "X_te", ")", "\n", "print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_tr_fbcsp", ".", "shape", ",", "X_val_fbcsp", ".", "shape", ",", "X_te_fbcsp", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_tr_fbcsp", ",", "y_tr_cv", ",", "X_val_fbcsp", ",", "y_val_cv", ",", "X_te_fbcsp", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "subject_independent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_features", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/fbcsp/{}_class/subject_independent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-independent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_val", ",", "y_val", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "train_subj", "=", "[", "i", "for", "i", "in", "range", "(", "n_subjs", ")", "]", "\n", "train_subj", "=", "np", ".", "delete", "(", "train_subj", ",", "person", ")", "# remove test subject", "\n", "\n", "# Generating fake data to used for k-fold cross-validation only", "\n", "fake_tr", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ",", "2", ")", ")", "\n", "fake_tr_la", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ")", ")", "\n", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_ind", ",", "val_ind", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "fake_tr", ",", "fake_tr_la", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_ind", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_ind", ")", ")", "\n", "train_index", ",", "val_index", "=", "train_subj", "[", "train_ind", "]", ",", "train_subj", "[", "val_ind", "]", "\n", "X_train_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "X_val_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_train_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_val_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "# Peforming FBCSP feature extraction", "\n", "fbcsp_scaler", "=", "FBCSP", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_features", "=", "n_features", ")", "\n", "X_train_fbcsp", "=", "fbcsp_scaler", ".", "fit_transform", "(", "X_train_cat", ",", "y_train_cat", ")", "\n", "X_val_fbcsp", "=", "fbcsp_scaler", ".", "transform", "(", "X_val_cat", ")", "\n", "X_test_fbcsp", "=", "fbcsp_scaler", ".", "transform", "(", "X_te", ")", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.fbcsp.__load_OpenBMI": [[95, 98], ["min2net.preprocessing.OpenBMI.raw.load_crop_data"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.load_crop_data"], ["print", "(", "\"Check dimension of training data {}, val data {} and testing data {}\"", ".", "format", "(", "X_train_fbcsp", ".", "shape", ",", "X_val_fbcsp", ".", "shape", ",", "X_test_fbcsp", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_train_fbcsp", ",", "y_train_cat", ",", "X_val_fbcsp", ",", "y_val_cat", ",", "X_test_fbcsp", ",", "y_te", ")", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.fbcsp.__save_data_with_valset": [[99, 107], ["numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print"], "function", ["None"], ["print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "__load_SMR_BCI", "(", "PATH", ",", "subject", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n", "    ", "start", "=", "CONSTANT", "[", "'MI'", "]", "[", "'start'", "]", "# 4", "\n", "stop", "=", "CONSTANT", "[", "'MI'", "]", "[", "'stop'", "]", "# 8", "\n", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "=", "raw", ".", "load_crop_data", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "start", "=", "start", ",", "stop", "=", "stop", ",", "new_smp_freq", "=", "new_smp_freq", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "return", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "\n", "\n", "", "def", "__save_data_with_valset", "(", "save_path", ",", "NAME", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.spectral_spatial.subject_dependent_setting": [[13, 42], ["min2net.preprocessing.OpenBMI.raw.chanel_selection", "spectral_spatial.__load_OpenBMI", "enumerate", "zip", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "Exception", "sklearn.model_selection.StratifiedKFold.split", "print", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "print", "spectral_spatial.__save_data_with_valset", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__load_OpenBMI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["orig_smp_freq", "=", "CONSTANT", "[", "'orig_smp_freq'", "]", "\n", "MI_len", "=", "CONSTANT", "[", "'MI'", "]", "[", "'len'", "]", "\n", "\n", "def", "subject_dependent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_pick_bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/spectral_spatial/{}_class/subject_dependent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-dependent setting with 5-fold cross validation        ", "\n", "", "", "for", "person", ",", "(", "X_tr", ",", "y_tr", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "if", "len", "(", "X_tr", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension Error, must have 3 dimension'", ")", "\n", "\n", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_index", ",", "val_index", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "X_tr", ",", "y_tr", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_index", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_index", ")", ")", "\n", "X_tr_cv", ",", "X_val_cv", "=", "X_tr", "[", "train_index", "]", ",", "X_tr", "[", "val_index", "]", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.spectral_spatial.subject_independent_setting": [[44, 88], ["min2net.preprocessing.OpenBMI.raw.chanel_selection", "spectral_spatial.__load_OpenBMI", "enumerate", "zip", "numpy.delete", "numpy.zeros", "numpy.zeros", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "sklearn.model_selection.StratifiedKFold.split", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping", "min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "print", "print", "spectral_spatial.__save_data_with_valset", "print", "range", "len", "len", "len", "numpy.unique", "numpy.unique", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__load_OpenBMI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.preprocessing.SpectralSpatialMapping.SpectralSpatialMapping.spatial_spectral_with_valset", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["\n", "# Peforming spectral-spatial feature representation", "\n", "SS_rep", "=", "SpectralSpatialMapping", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_pick_bands", "=", "n_pick_bands", ")", "\n", "X_tr_ss", ",", "X_val_ss", ",", "X_te_ss", "=", "SS_rep", ".", "spatial_spectral_with_valset", "(", "X_tr_cv", ",", "y_tr_cv", ",", "X_val_cv", ",", "X_te", ")", "\n", "print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_tr_ss", ".", "shape", ",", "X_val_ss", ".", "shape", ",", "X_te_ss", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_tr_ss", ",", "y_tr_cv", ",", "X_val_ss", ",", "y_val_cv", ",", "X_te_ss", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "subject_independent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "n_components", ",", "bands", ",", "n_pick_bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/spectral_spatial/{}_class/subject_independent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-independent setting with 5-fold cross validation        ", "\n", "", "", "for", "person", ",", "(", "X_val", ",", "y_val", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "train_subj", "=", "[", "i", "for", "i", "in", "range", "(", "n_subjs", ")", "]", "\n", "train_subj", "=", "np", ".", "delete", "(", "train_subj", ",", "person", ")", "# remove test subject", "\n", "\n", "# Generating fake data to used for k-fold cross-validation only ", "\n", "fake_tr", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ",", "2", ")", ")", "\n", "fake_tr_la", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ")", ")", "\n", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_ind", ",", "val_ind", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "fake_tr", ",", "fake_tr_la", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_ind", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_ind", ")", ")", "\n", "train_index", ",", "val_index", "=", "train_subj", "[", "train_ind", "]", ",", "train_subj", "[", "val_ind", "]", "\n", "X_train_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "X_val_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_train_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_val_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.spectral_spatial.__load_OpenBMI": [[89, 92], ["min2net.preprocessing.OpenBMI.raw.load_crop_data"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.load_crop_data"], ["\n", "# Peforming spectral-spatial feature representation", "\n", "SS_rep", "=", "SpectralSpatialMapping", "(", "bands", "=", "bands", ",", "smp_freq", "=", "pick_smp_freq", ",", "num_class", "=", "num_class", ",", "order", "=", "order", ",", "n_components", "=", "n_components", ",", "n_pick_bands", "=", "n_pick_bands", ")", "\n", "X_train_ss", ",", "X_val_ss", ",", "X_test_ss", "=", "SS_rep", ".", "spatial_spectral_with_valset", "(", "X_train_cat", ",", "y_train_cat", ",", "X_val_cat", ",", "X_te", ")", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.spectral_spatial.__save_data_with_valset": [[93, 101], ["numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print"], "function", ["None"], ["print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_train_ss", ".", "shape", ",", "X_val_ss", ".", "shape", ",", "X_test_ss", ".", "shape", ")", ")", "\n", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_train_ss", ",", "y_train_cat", ",", "X_val_ss", ",", "y_val_cat", ",", "X_test_ss", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "__load_SMR_BCI", "(", "PATH", ",", "subject", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n", "    ", "start", "=", "CONSTANT", "[", "'MI'", "]", "[", "'start'", "]", "# 4", "\n", "stop", "=", "CONSTANT", "[", "'MI'", "]", "[", "'stop'", "]", "# 8", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.read_raw": [[8, 50], ["scipy.loadmat", "print", "numpy.swapaxes", "print", "numpy.swapaxes", "print", "str().zfill", "numpy.swapaxes", "numpy.swapaxes", "raw.__segment_data", "numpy.take", "numpy.swapaxes", "print", "raw.__segment_data", "numpy.take", "numpy.swapaxes", "print", "raw.__segment_data_whole_period", "numpy.take", "numpy.swapaxes", "print", "raw.__segment_data_whole_period", "numpy.take", "numpy.swapaxes", "print", "str().zfill", "str", "str"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.__segment_data", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.__segment_data", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.__segment_data_whole_period", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.__segment_data_whole_period"], ["orig_smp_freq", "=", "CONSTANT", "[", "'orig_smp_freq'", "]", "\n", "trial_len", "=", "CONSTANT", "[", "'trial_len'", "]", "\n", "n_chs", "=", "CONSTANT", "[", "'n_chs'", "]", "# 15", "\n", "window_len", "=", "CONSTANT", "[", "'trial_len'", "]", "*", "CONSTANT", "[", "'orig_smp_freq'", "]", "# 8*512", "\n", "\n", "def", "read_raw", "(", "PATH", ",", "subject", ",", "training", ",", "id_chosen_chs", ")", ":", "\n", "    ", "if", "training", ":", "\n", "        ", "mat", "=", "sio", ".", "loadmat", "(", "PATH", "+", "'/S'", "+", "str", "(", "subject", ")", ".", "zfill", "(", "2", ")", "+", "'T.mat'", ")", "[", "'data'", "]", "\n", "n_trials", "=", "CONSTANT", "[", "'n_trials_tr'", "]", "# 100", "\n", "label", "=", "np", ".", "zeros", "(", "n_trials", ")", "\n", "data", "=", "np", ".", "zeros", "(", "(", "n_trials", ",", "n_chs", ",", "window_len", ")", ")", "\n", "", "else", ":", "\n", "        ", "mat", "=", "sio", ".", "loadmat", "(", "PATH", "+", "'/S'", "+", "str", "(", "subject", ")", ".", "zfill", "(", "2", ")", "+", "'E.mat'", ")", "[", "'data'", "]", "\n", "n_trials", "=", "CONSTANT", "[", "'n_trials_te'", "]", "# 60", "\n", "label", "=", "np", ".", "zeros", "(", "n_trials", ")", "\n", "data", "=", "np", ".", "zeros", "(", "(", "n_trials", ",", "n_chs", ",", "window_len", ")", ")", "\n", "", "NO_valid_trial", "=", "0", "\n", "for", "ii", "in", "range", "(", "0", ",", "mat", ".", "size", ")", ":", "\n", "        ", "mat_1", "=", "mat", "[", "0", ",", "ii", "]", "\n", "mat_2", "=", "[", "mat_1", "[", "0", ",", "0", "]", "]", "\n", "mat_info", "=", "mat_2", "[", "0", "]", "\n", "_X", "=", "mat_info", "[", "0", "]", "\n", "_trial", "=", "mat_info", "[", "1", "]", "\n", "_y", "=", "mat_info", "[", "2", "]", "\n", "_fs", "=", "mat_info", "[", "3", "]", "\n", "_classes", "=", "mat_info", "[", "4", "]", "\n", "for", "trial", "in", "range", "(", "0", ",", "_trial", ".", "size", ")", ":", "\n", "# class 1 (right hand) and class 2 (feet) ", "\n", "            ", "_data", "=", "np", ".", "transpose", "(", "_X", "[", "_trial", "[", "0", "]", "[", "trial", "]", ":", "int", "(", "_trial", "[", "0", "]", "[", "trial", "]", "+", "window_len", ")", ",", "id_chosen_chs", "]", ")", "\n", "_label", "=", "int", "(", "_y", "[", "0", "]", "[", "trial", "]", ")", "\n", "data", "[", "NO_valid_trial", ",", ":", ",", ":", "]", "=", "_data", "\n", "label", "[", "NO_valid_trial", "]", "=", "_label", "\n", "NO_valid_trial", "+=", "1", "\n", "", "", "return", "data", ",", "label", "-", "1", "\n", "\n", "", "def", "chanel_selection", "(", "sel_chs", ")", ":", "\n", "    ", "chs_id", "=", "[", "]", "\n", "for", "name_ch", "in", "sel_chs", ":", "\n", "        ", "ch_id", "=", "np", ".", "where", "(", "np", ".", "array", "(", "orig_chs", ")", "==", "name_ch", ")", "[", "0", "]", "[", "0", "]", "\n", "chs_id", ".", "append", "(", "ch_id", ")", "\n", "print", "(", "'chosen_channel:'", ",", "name_ch", ",", "'---'", ",", "'Index_is:'", ",", "ch_id", ")", "\n", "", "return", "chs_id", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.load_crop_data": [[51, 108], ["print", "len", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "enumerate", "X_train.reshape", "y_train.reshape", "X_test.reshape", "y_test.reshape", "print", "len", "enumerate", "raw.read_raw", "min2net.utils.resampling", "min2net.utils.resampling", "int", "int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "enumerate", "X_train.reshape", "y_train.reshape", "X_test.reshape", "y_test.reshape", "print", "len", "enumerate", "len", "int", "len", "len", "int", "len", "raw.read_raw", "raw.__add_on_resting", "raw.__add_on_resting", "min2net.utils.resampling", "min2net.utils.resampling", "int", "int", "numpy.zeros", "numpy.zeros", "range", "enumerate", "X_test.reshape", "y_test.reshape", "len", "int", "len", "len", "int", "len", "raw.read_raw", "raw.__transitory_mi", "min2net.utils.resampling", "int", "len", "int", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.read_raw", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.resampling", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.resampling", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.read_raw", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.__add_on_resting", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.__add_on_resting", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.resampling", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.resampling", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.read_raw", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.__transitory_mi", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.resampling"], ["", "def", "load_crop_data", "(", "PATH", ",", "subject", ",", "start", ",", "stop", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n", "    ", "start_time", "=", "int", "(", "start", "*", "new_smp_freq", ")", "# 4*", "\n", "stop_time", "=", "int", "(", "stop", "*", "new_smp_freq", ")", "# 8*", "\n", "X_train", ",", "y_tr", "=", "read_raw", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "training", "=", "True", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "X_test", ",", "y_te", "=", "read_raw", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "training", "=", "False", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n", "if", "new_smp_freq", "<", "orig_smp_freq", ":", "\n", "        ", "X_train", "=", "resampling", "(", "X_train", ",", "new_smp_freq", ",", "trial_len", ")", "\n", "X_test", "=", "resampling", "(", "X_test", ",", "new_smp_freq", ",", "trial_len", ")", "\n", "", "X_train", "=", "X_train", "[", ":", ",", ":", ",", "start_time", ":", "stop_time", "]", "\n", "X_test", "=", "X_test", "[", ":", ",", ":", ",", "start_time", ":", "stop_time", "]", "\n", "return", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection": [[109, 117], ["chs_id.append", "print", "numpy.where", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.__segment_data": [[118, 133], ["numpy.zeros", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.__segment_data_whole_period": [[134, 151], ["numpy.zeros", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.__add_on_resting": [[152, 178], ["print", "print", "int", "int", "int", "int", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "numpy.concatenate", "numpy.full", "numpy.concatenate", "numpy.concatenate", "numpy.where", "numpy.where"], "function", ["None"], []], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.__transitory_mi": [[179, 187], ["print", "print", "int", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.subject_dependent_setting": [[13, 43], ["min2net.preprocessing.OpenBMI.raw.chanel_selection", "time_domain.__load_OpenBMI", "enumerate", "zip", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "Exception", "sklearn.model_selection.StratifiedKFold.split", "print", "print", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "print", "time_domain.__save_data_with_valset", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__load_OpenBMI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["orig_smp_freq", "=", "CONSTANT", "[", "'orig_smp_freq'", "]", "\n", "MI_len", "=", "CONSTANT", "[", "'MI'", "]", "[", "'len'", "]", "\n", "\n", "def", "subject_dependent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/time_domain/{}_class/subject_dependent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-dependent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_tr", ",", "y_tr", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "if", "len", "(", "X_tr", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Dimension Error, must have 3 dimension'", ")", "\n", "\n", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_index", ",", "val_index", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "X_tr", ",", "y_tr", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_index", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_index", ")", ")", "\n", "X_tr_cv", ",", "X_val_cv", "=", "X_tr", "[", "train_index", "]", ",", "X_tr", "[", "val_index", "]", "\n", "y_tr_cv", ",", "y_val_cv", "=", "y_tr", "[", "train_index", "]", ",", "y_tr", "[", "val_index", "]", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.subject_independent_setting": [[44, 91], ["min2net.preprocessing.OpenBMI.raw.chanel_selection", "time_domain.__load_OpenBMI", "enumerate", "zip", "numpy.delete", "numpy.zeros", "numpy.zeros", "sklearn.model_selection.StratifiedKFold", "enumerate", "os.path.exists", "os.makedirs", "len", "sklearn.model_selection.StratifiedKFold.split", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "print", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "min2net.utils.butter_bandpass_filter", "print", "print", "time_domain.__save_data_with_valset", "print", "range", "len", "len", "len", "numpy.unique", "numpy.unique", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.chanel_selection", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__load_OpenBMI", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.butter_bandpass_filter", "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset"], ["\n", "print", "(", "'Band-pass filtering from {} to {} Hz.'", ".", "format", "(", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ")", ")", "\n", "X_tr_fil", "=", "butter_bandpass_filter", "(", "X_tr_cv", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_val_fil", "=", "butter_bandpass_filter", "(", "X_val_cv", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_te_fil", "=", "butter_bandpass_filter", "(", "X_te", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "print", "(", "'Check dimension of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_tr_fil", ".", "shape", ",", "X_val_fil", ".", "shape", ",", "X_te_fil", ".", "shape", ")", ")", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_tr_fil", ",", "y_tr_cv", ",", "X_val_fil", ",", "y_val_cv", ",", "X_te_fil", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "subject_independent_setting", "(", "k_folds", ",", "pick_smp_freq", ",", "bands", ",", "order", ",", "save_path", ",", "num_class", "=", "2", ",", "sel_chs", "=", "None", ")", ":", "\n", "    ", "sel_chs", "=", "CONSTANT", "[", "'sel_chs'", "]", "if", "sel_chs", "==", "None", "else", "sel_chs", "\n", "n_folds", "=", "k_folds", "\n", "save_path", "=", "save_path", "+", "'/SMR_BCI/time_domain/{}_class/subject_independent'", ".", "format", "(", "num_class", ")", "\n", "\n", "X_train_all", ",", "y_train_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_tr", ")", ")", "\n", "X_test_all", ",", "y_test_all", "=", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_subjs", ",", "n_trials_te", ")", ")", "\n", "\n", "id_chosen_chs", "=", "raw", ".", "chanel_selection", "(", "sel_chs", ")", "\n", "for", "s", "in", "range", "(", "n_subjs", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "__load_SMR_BCI", "(", "raw_path", ",", "s", "+", "1", ",", "pick_smp_freq", ",", "id_chosen_chs", ")", "\n", "X_train_all", "[", "s", "]", ",", "y_train_all", "[", "s", "]", "=", "X_train", ",", "y_train", "\n", "X_test_all", "[", "s", "]", ",", "y_test_all", "[", "s", "]", "=", "X_test", ",", "y_test", "\n", "\n", "", "for", "directory", "in", "[", "save_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# Carry out subject-independent setting with 5-fold cross validation", "\n", "", "", "for", "person", ",", "(", "X_val", ",", "y_val", ",", "X_te", ",", "y_te", ")", "in", "enumerate", "(", "zip", "(", "X_train_all", ",", "y_train_all", ",", "X_test_all", ",", "y_test_all", ")", ")", ":", "\n", "        ", "train_subj", "=", "[", "i", "for", "i", "in", "range", "(", "n_subjs", ")", "]", "\n", "train_subj", "=", "np", ".", "delete", "(", "train_subj", ",", "person", ")", "# remove test subject", "\n", "\n", "# Generating fake data to used for k-fold cross-validation only", "\n", "fake_tr", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ",", "2", ")", ")", "\n", "fake_tr_la", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_subj", ")", ")", ")", "\n", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", ")", "\n", "for", "fold", ",", "(", "train_ind", ",", "val_ind", ")", "in", "enumerate", "(", "skf", ".", "split", "(", "fake_tr", ",", "fake_tr_la", ")", ")", ":", "\n", "            ", "print", "(", "'FOLD:'", ",", "fold", "+", "1", ",", "'TRAIN:'", ",", "len", "(", "train_ind", ")", ",", "'VALIDATION:'", ",", "len", "(", "val_ind", ")", ")", "\n", "train_index", ",", "val_index", "=", "train_subj", "[", "train_ind", "]", ",", "train_subj", "[", "val_ind", "]", "\n", "X_train_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "X_val_cat", "=", "np", ".", "concatenate", "(", "(", "X_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ",", "X_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ",", "n_chs", ",", "int", "(", "MI_len", "*", "pick_smp_freq", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_train_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "train_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "y_val_cat", "=", "np", ".", "concatenate", "(", "(", "y_train_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ",", "y_test_all", "[", "val_index", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# Performing bandpass-filtering", "\n", "print", "(", "'Band-pass filtering from {} to {} Hz.'", ".", "format", "(", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__load_OpenBMI": [[92, 95], ["min2net.preprocessing.OpenBMI.raw.load_crop_data"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.raw.load_crop_data"], ["X_train_fil", "=", "butter_bandpass_filter", "(", "X_train_cat", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_val_fil", "=", "butter_bandpass_filter", "(", "X_val_cat", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "X_test_fil", "=", "butter_bandpass_filter", "(", "X_te", ",", "bands", "[", "0", "]", ",", "bands", "[", "1", "]", ",", "pick_smp_freq", ",", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.OpenBMI.time_domain.__save_data_with_valset": [[96, 104], ["numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print"], "function", ["None"], ["print", "(", "'Verify the final dimesion of training data {}, val data {} and testing data {}'", ".", "format", "(", "X_train_fil", ".", "shape", ",", "X_val_fil", ".", "shape", ",", "X_test_fil", ".", "shape", ")", ")", "\n", "SAVE_NAME", "=", "'S{:03d}_fold{:03d}'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", "\n", "__save_data_with_valset", "(", "save_path", ",", "SAVE_NAME", ",", "X_train_fil", ",", "y_train_cat", ",", "X_val_fil", ",", "y_val_cat", ",", "X_test_fil", ",", "y_te", ")", "\n", "print", "(", "'The preprocessing of subject {} from fold {} is DONE!!!'", ".", "format", "(", "person", "+", "1", ",", "fold", "+", "1", ")", ")", "\n", "\n", "", "", "", "def", "__load_SMR_BCI", "(", "PATH", ",", "subject", ",", "new_smp_freq", ",", "id_chosen_chs", ")", ":", "\n", "    ", "start", "=", "CONSTANT", "[", "'MI'", "]", "[", "'start'", "]", "# 4", "\n", "stop", "=", "CONSTANT", "[", "'MI'", "]", "[", "'stop'", "]", "# 8", "\n", "X_train", ",", "y_tr", ",", "X_test", ",", "y_te", "=", "raw", ".", "load_crop_data", "(", "PATH", "=", "PATH", ",", "subject", "=", "subject", ",", "start", "=", "start", ",", "stop", "=", "stop", ",", "new_smp_freq", "=", "new_smp_freq", ",", "id_chosen_chs", "=", "id_chosen_chs", ")", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net_without_triplet.MIN2Net_without_triplet.__init__": [[19, 86], ["tensorflow.keras.optimizers.Adam", "kwargs.keys", "numpy.random.seed", "tensorflow.random.set_seed", "tensorflow.keras.backend.set_image_data_format", "MIN2Net_without_triplet.MIN2Net_without_triplet.__setattr__", "os.path.exists", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_shape", "=", "(", "1", ",", "400", ",", "20", ")", ",", "\n", "num_class", "=", "2", ",", "\n", "loss", "=", "[", "mean_squared_error", ",", "'sparse_categorical_crossentropy'", "]", ",", "\n", "loss_weights", "=", "[", "1.", ",", "1.", "]", ",", "\n", "latent_dim", "=", "None", ",", "\n", "epochs", "=", "200", ",", "\n", "batch_size", "=", "100", ",", "\n", "optimizer", "=", "Adam", "(", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", ",", "\n", "lr", "=", "1e-2", ",", "\n", "min_lr", "=", "1e-3", ",", "\n", "factor", "=", "0.25", ",", "\n", "patience", "=", "20", ",", "\n", "es_patience", "=", "50", ",", "\n", "verbose", "=", "1", ",", "\n", "log_path", "=", "'logs'", ",", "\n", "model_name", "=", "'MIN2Net_without_triplet'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "D", ",", "T", ",", "C", "=", "input_shape", "\n", "self", ".", "latent_dim", "=", "latent_dim", "if", "latent_dim", "is", "not", "None", "else", "C", "if", "num_class", "==", "2", "else", "64", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "optimizer", ".", "lr", "=", "lr", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "es_patience", "=", "es_patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "log_path", "=", "log_path", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "weights_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_weights.h5'", "\n", "self", ".", "csv_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_log.log'", "\n", "self", ".", "time_log", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_time_log.csv'", "\n", "\n", "# use **kwargs to set the new value of below args.", "\n", "self", ".", "f1_average", "=", "'binary'", "if", "self", ".", "num_class", "==", "2", "else", "'macro'", "\n", "self", ".", "data_format", "=", "'channels_last'", "\n", "self", ".", "metrics", "=", "'accuracy'", "\n", "self", ".", "monitor", "=", "'val_loss'", "\n", "self", ".", "mode", "=", "'min'", "\n", "self", ".", "save_best_only", "=", "True", "\n", "self", ".", "save_weight_only", "=", "True", "\n", "self", ".", "seed", "=", "1234", "\n", "self", ".", "class_balancing", "=", "False", "\n", "# 'set params'", "\n", "self", ".", "subsampling_size", "=", "100", "\n", "self", ".", "pool_size_1", "=", "(", "1", ",", "T", "//", "self", ".", "subsampling_size", ")", "\n", "self", ".", "pool_size_2", "=", "(", "1", ",", "4", ")", "\n", "self", ".", "filter_1", "=", "C", "\n", "self", ".", "filter_2", "=", "10", "\n", "\n", "for", "k", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "\n", "", "self", ".", "flatten_size", "=", "T", "//", "self", ".", "pool_size_1", "[", "1", "]", "//", "self", ".", "pool_size_2", "[", "1", "]", "\n", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "tf", ".", "random", ".", "set_seed", "(", "self", ".", "seed", ")", "\n", "K", ".", "set_image_data_format", "(", "self", ".", "data_format", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "log_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net_without_triplet.MIN2Net_without_triplet.build": [[87, 123], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "tensorflow.keras.models.Model.summary", "tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "tensorflow.keras.models.Model.summary", "tensorflow.keras.models.Model.", "tensorflow.keras.models.Model.", "tensorflow.keras.models.Model", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Dense", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm"], "methods", ["None"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "\n", "        ", "'encoder'", "\n", "encoder_input", "=", "Input", "(", "self", ".", "input_shape", ")", "\n", "en_conv", "=", "Conv2D", "(", "self", ".", "filter_1", ",", "(", "1", ",", "64", ")", ",", "activation", "=", "'elu'", ",", "padding", "=", "\"same\"", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "encoder_input", ")", "\n", "en_conv", "=", "BatchNormalization", "(", "axis", "=", "3", ",", "epsilon", "=", "1e-05", ",", "momentum", "=", "0.1", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "AveragePooling2D", "(", "pool_size", "=", "self", ".", "pool_size_1", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "Conv2D", "(", "self", ".", "filter_2", ",", "(", "1", ",", "32", ")", ",", "activation", "=", "'elu'", ",", "padding", "=", "\"same\"", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "BatchNormalization", "(", "axis", "=", "3", ",", "epsilon", "=", "1e-05", ",", "momentum", "=", "0.1", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "AveragePooling2D", "(", "pool_size", "=", "self", ".", "pool_size_2", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "Flatten", "(", ")", "(", "en_conv", ")", "\n", "encoder_output", "=", "Dense", "(", "self", ".", "latent_dim", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "0.5", ")", ")", "(", "en_conv", ")", "\n", "encoder", "=", "models", ".", "Model", "(", "inputs", "=", "encoder_input", ",", "outputs", "=", "encoder_output", ",", "name", "=", "'encoder'", ")", "\n", "encoder", ".", "summary", "(", ")", "\n", "\n", "'decoder'", "\n", "decoder_input", "=", "Input", "(", "shape", "=", "(", "self", ".", "latent_dim", ",", ")", ",", "name", "=", "'decoder_input'", ")", "\n", "de_conv", "=", "Dense", "(", "1", "*", "self", ".", "flatten_size", "*", "self", ".", "filter_2", ",", "activation", "=", "'elu'", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "0.5", ")", ")", "(", "decoder_input", ")", "\n", "de_conv", "=", "Reshape", "(", "(", "1", ",", "self", ".", "flatten_size", ",", "self", ".", "filter_2", ")", ")", "(", "de_conv", ")", "\n", "de_conv", "=", "Conv2DTranspose", "(", "filters", "=", "self", ".", "filter_2", ",", "kernel_size", "=", "(", "1", ",", "64", ")", ",", "activation", "=", "'elu'", ",", "padding", "=", "'same'", ",", "strides", "=", "self", ".", "pool_size_2", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "de_conv", ")", "\n", "decoder_output", "=", "Conv2DTranspose", "(", "filters", "=", "self", ".", "filter_1", ",", "kernel_size", "=", "(", "1", ",", "32", ")", ",", "activation", "=", "'elu'", ",", "padding", "=", "'same'", ",", "strides", "=", "self", ".", "pool_size_1", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "de_conv", ")", "\n", "decoder", "=", "models", ".", "Model", "(", "inputs", "=", "decoder_input", ",", "outputs", "=", "decoder_output", ",", "name", "=", "'decoder'", ")", "\n", "decoder", ".", "summary", "(", ")", "\n", "\n", "'Build the computation graph for training'", "\n", "latent", "=", "encoder", "(", "encoder_input", ")", "\n", "train_xr", "=", "decoder", "(", "latent", ")", "\n", "z", "=", "Dense", "(", "self", ".", "num_class", ",", "activation", "=", "'softmax'", ",", "name", "=", "'classifier'", ")", "(", "latent", ")", "\n", "\n", "return", "models", ".", "Model", "(", "inputs", "=", "encoder_input", ",", "outputs", "=", "[", "train_xr", ",", "z", "]", ",", "name", "=", "'MIN2Net_without_triplet'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net_without_triplet.MIN2Net_without_triplet.fit": [[124, 153], ["tensorflow.keras.callbacks.CSVLogger", "min2net.utils.TimeHistory", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.ReduceLROnPlateau", "tensorflow.keras.callbacks.EarlyStopping", "MIN2Net_without_triplet.MIN2Net_without_triplet.build", "MIN2Net_without_triplet.MIN2Net_without_triplet.summary", "MIN2Net_without_triplet.MIN2Net_without_triplet.compile", "MIN2Net_without_triplet.MIN2Net_without_triplet.fit", "Exception", "min2net.utils.compute_class_weight", "min2net.loss.SparseCategoricalCrossentropy", "Exception"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.compute_class_weight", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.loss.SparseCategoricalCrossentropy"], ["", "def", "fit", "(", "self", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", ":", "\n", "\n", "        ", "if", "X_train", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_train` is incompatible: expected ndim=4, found ndim={}'", ".", "format", "(", "X_train", ".", "ndim", ")", ")", "\n", "", "elif", "X_val", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_val` is incompatible: expected ndim=4, found ndim={}'", ".", "format", "(", "X_val", ".", "ndim", ")", ")", "\n", "\n", "", "csv_logger", "=", "CSVLogger", "(", "self", ".", "csv_dir", ")", "\n", "time_callback", "=", "TimeHistory", "(", "self", ".", "time_log", ")", "\n", "checkpointer", "=", "ModelCheckpoint", "(", "monitor", "=", "self", ".", "monitor", ",", "filepath", "=", "self", ".", "weights_dir", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "save_best_only", "=", "self", ".", "save_best_only", ",", "\n", "save_weight_only", "=", "self", ".", "save_weight_only", ")", "\n", "reduce_lr", "=", "ReduceLROnPlateau", "(", "monitor", "=", "self", ".", "monitor", ",", "patience", "=", "self", ".", "patience", ",", "\n", "factor", "=", "self", ".", "factor", ",", "mode", "=", "self", ".", "mode", ",", "verbose", "=", "self", ".", "verbose", ",", "\n", "min_lr", "=", "self", ".", "min_lr", ")", "\n", "es", "=", "EarlyStopping", "(", "monitor", "=", "self", ".", "monitor", ",", "mode", "=", "self", ".", "mode", ",", "verbose", "=", "self", ".", "verbose", ",", "\n", "patience", "=", "self", ".", "es_patience", ")", "\n", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "if", "self", ".", "class_balancing", ":", "# compute_class_weight if class_balancing is True", "\n", "            ", "class_weight", "=", "compute_class_weight", "(", "y_train", ")", "\n", "self", ".", "loss", "[", "-", "1", "]", "=", "SparseCategoricalCrossentropy", "(", "class_weight", "=", "class_weight", ")", "\n", "\n", "", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "self", ".", "metrics", ",", "loss_weights", "=", "self", ".", "loss_weights", ")", "\n", "model", ".", "fit", "(", "x", "=", "X_train", ",", "y", "=", "[", "X_train", ",", "y_train", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "self", ".", "shuffle", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "validation_data", "=", "(", "X_val", ",", "[", "X_val", ",", "y_val", "]", ")", ",", "\n", "callbacks", "=", "[", "checkpointer", ",", "csv_logger", ",", "reduce_lr", ",", "es", ",", "time_callback", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net_without_triplet.MIN2Net_without_triplet.predict": [[154, 189], ["MIN2Net_without_triplet.MIN2Net_without_triplet.build", "MIN2Net_without_triplet.MIN2Net_without_triplet.load_weights", "MIN2Net_without_triplet.MIN2Net_without_triplet.compile", "time.time", "MIN2Net_without_triplet.MIN2Net_without_triplet.predict", "time.time", "MIN2Net_without_triplet.MIN2Net_without_triplet.evaluate", "numpy.argmax", "print", "sklearn.metrics.f1_score", "print", "print", "Exception", "sklearn.metrics.classification_report"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict"], ["", "def", "predict", "(", "self", ",", "X_test", ",", "y_test", ")", ":", "\n", "\n", "        ", "if", "X_test", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_test` is incompatible: expected ndim=4, found ndim={}'", ".", "format", "(", "X_test", ".", "ndim", ")", ")", "\n", "\n", "", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "load_weights", "(", "self", ".", "weights_dir", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "loss", "=", "self", ".", "loss", ",", "\n", "metrics", "=", "self", ".", "metrics", ",", "\n", "loss_weights", "=", "self", ".", "loss_weights", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "y_pred_decoder", ",", "y_pred_clf", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "loss", ",", "decoder_loss", ",", "classifier_loss", ",", "decoder_acc", ",", "classifier_acc", "=", "model", ".", "evaluate", "(", "x", "=", "X_test", ",", "\n", "y", "=", "[", "X_test", ",", "y_test", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ")", "\n", "y_pred_argm", "=", "np", ".", "argmax", "(", "y_pred_clf", ",", "axis", "=", "1", ")", "\n", "print", "(", "\"F1-score is computed based on {}\"", ".", "format", "(", "self", ".", "f1_average", ")", ")", "\n", "f1", "=", "f1_score", "(", "y_test", ",", "y_pred_argm", ",", "average", "=", "self", ".", "f1_average", ")", "\n", "print", "(", "'(loss: {}, accuracy: {})'", ".", "format", "(", "loss", ",", "classifier_acc", ")", ")", "\n", "print", "(", "classification_report", "(", "y_test", ",", "y_pred_argm", ")", ")", "\n", "evaluation", "=", "{", "'loss'", ":", "loss", ",", "\n", "'decoder_loss'", ":", "decoder_loss", ",", "\n", "'classifier_loss'", ":", "classifier_loss", ",", "\n", "'accuracy'", ":", "classifier_acc", ",", "\n", "'f1-score'", ":", "f1", ",", "\n", "'prediction_time'", ":", "end", "-", "start", "}", "\n", "Y", "=", "{", "'y_true'", ":", "y_test", ",", "\n", "'y_pred'", ":", "y_pred_argm", ",", "\n", "'y_pred_decoder'", ":", "y_pred_decoder", "}", "\n", "\n", "return", "Y", ",", "evaluation", "", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net.MIN2Net.__init__": [[18, 86], ["tensorflow.keras.optimizers.Adam", "kwargs.keys", "numpy.random.seed", "tensorflow.random.set_seed", "tensorflow.keras.backend.set_image_data_format", "min2net.loss.triplet_loss", "MIN2Net.MIN2Net.__setattr__", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.loss.triplet_loss"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_shape", "=", "(", "1", ",", "400", ",", "20", ")", ",", "\n", "num_class", "=", "2", ",", "\n", "loss", "=", "[", "mean_squared_error", ",", "triplet_loss", "(", "margin", "=", "1.0", ")", ",", "'sparse_categorical_crossentropy'", "]", ",", "\n", "loss_weights", "=", "[", "1.", ",", "1.", ",", "1.", "]", ",", "\n", "latent_dim", "=", "None", ",", "\n", "epochs", "=", "200", ",", "\n", "batch_size", "=", "100", ",", "\n", "optimizer", "=", "Adam", "(", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", ",", "\n", "lr", "=", "1e-2", ",", "\n", "min_lr", "=", "1e-3", ",", "\n", "factor", "=", "0.5", ",", "\n", "patience", "=", "5", ",", "\n", "es_patience", "=", "20", ",", "\n", "verbose", "=", "1", ",", "\n", "log_path", "=", "'logs'", ",", "\n", "model_name", "=", "'MIN2Net'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "D", ",", "T", ",", "C", "=", "input_shape", "\n", "self", ".", "latent_dim", "=", "latent_dim", "if", "latent_dim", "is", "not", "None", "else", "C", "if", "num_class", "==", "2", "else", "64", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "optimizer", ".", "lr", "=", "lr", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "es_patience", "=", "es_patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "log_path", "=", "log_path", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "weights_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_weights.h5'", "\n", "self", ".", "csv_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_log.log'", "\n", "self", ".", "time_log", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_time_log.csv'", "\n", "\n", "# use **kwargs to set the new value of below args.", "\n", "self", ".", "f1_average", "=", "'binary'", "if", "self", ".", "num_class", "==", "2", "else", "'macro'", "\n", "self", ".", "data_format", "=", "'channels_last'", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "metrics", "=", "'accuracy'", "\n", "self", ".", "monitor", "=", "'val_loss'", "\n", "self", ".", "mode", "=", "'min'", "\n", "self", ".", "save_best_only", "=", "True", "\n", "self", ".", "save_weight_only", "=", "True", "\n", "self", ".", "seed", "=", "1234", "\n", "self", ".", "class_balancing", "=", "False", "\n", "# 'set params'", "\n", "self", ".", "subsampling_size", "=", "100", "\n", "self", ".", "pool_size_1", "=", "(", "1", ",", "T", "//", "self", ".", "subsampling_size", ")", "\n", "self", ".", "pool_size_2", "=", "(", "1", ",", "4", ")", "\n", "self", ".", "filter_1", "=", "C", "\n", "self", ".", "filter_2", "=", "10", "\n", "\n", "for", "k", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "\n", "", "self", ".", "flatten_size", "=", "T", "//", "self", ".", "pool_size_1", "[", "1", "]", "//", "self", ".", "pool_size_2", "[", "1", "]", "\n", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "tf", ".", "random", ".", "set_seed", "(", "self", ".", "seed", ")", "\n", "K", ".", "set_image_data_format", "(", "self", ".", "data_format", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "log_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net.MIN2Net.build": [[87, 125], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "tensorflow.keras.models.Model.summary", "tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "tensorflow.keras.models.Model.summary", "tensorflow.keras.models.Model.", "tensorflow.keras.models.Model.", "tensorflow.keras.models.Model", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Dense", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm"], "methods", ["None"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "'encoder'", "\n", "encoder_input", "=", "Input", "(", "self", ".", "input_shape", ")", "\n", "en_conv", "=", "Conv2D", "(", "self", ".", "filter_1", ",", "(", "1", ",", "64", ")", ",", "activation", "=", "'elu'", ",", "padding", "=", "\"same\"", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "encoder_input", ")", "\n", "en_conv", "=", "BatchNormalization", "(", "axis", "=", "3", ",", "epsilon", "=", "1e-05", ",", "momentum", "=", "0.1", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "AveragePooling2D", "(", "pool_size", "=", "self", ".", "pool_size_1", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "Conv2D", "(", "self", ".", "filter_2", ",", "(", "1", ",", "32", ")", ",", "activation", "=", "'elu'", ",", "padding", "=", "\"same\"", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "BatchNormalization", "(", "axis", "=", "3", ",", "epsilon", "=", "1e-05", ",", "momentum", "=", "0.1", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "AveragePooling2D", "(", "pool_size", "=", "self", ".", "pool_size_2", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "Flatten", "(", ")", "(", "en_conv", ")", "\n", "encoder_output", "=", "Dense", "(", "self", ".", "latent_dim", ",", "kernel_constraint", "=", "max_norm", "(", "0.5", ")", ")", "(", "en_conv", ")", "\n", "encoder", "=", "Model", "(", "inputs", "=", "encoder_input", ",", "outputs", "=", "encoder_output", ",", "name", "=", "'encoder'", ")", "\n", "encoder", ".", "summary", "(", ")", "\n", "\n", "'decoder'", "\n", "decoder_input", "=", "Input", "(", "shape", "=", "(", "self", ".", "latent_dim", ",", ")", ",", "name", "=", "'decoder_input'", ")", "\n", "de_conv", "=", "Dense", "(", "1", "*", "self", ".", "flatten_size", "*", "self", ".", "filter_2", ",", "activation", "=", "'elu'", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "0.5", ")", ")", "(", "decoder_input", ")", "\n", "de_conv", "=", "Reshape", "(", "(", "1", ",", "self", ".", "flatten_size", ",", "self", ".", "filter_2", ")", ")", "(", "de_conv", ")", "\n", "de_conv", "=", "Conv2DTranspose", "(", "filters", "=", "self", ".", "filter_2", ",", "kernel_size", "=", "(", "1", ",", "64", ")", ",", "\n", "activation", "=", "'elu'", ",", "padding", "=", "'same'", ",", "strides", "=", "self", ".", "pool_size_2", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "de_conv", ")", "\n", "decoder_output", "=", "Conv2DTranspose", "(", "filters", "=", "self", ".", "filter_1", ",", "kernel_size", "=", "(", "1", ",", "32", ")", ",", "\n", "activation", "=", "'elu'", ",", "padding", "=", "'same'", ",", "strides", "=", "self", ".", "pool_size_1", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "de_conv", ")", "\n", "decoder", "=", "Model", "(", "inputs", "=", "decoder_input", ",", "outputs", "=", "decoder_output", ",", "name", "=", "'decoder'", ")", "\n", "decoder", ".", "summary", "(", ")", "\n", "\n", "'Build the computation graph for training'", "\n", "latent", "=", "encoder", "(", "encoder_input", ")", "\n", "train_xr", "=", "decoder", "(", "latent", ")", "\n", "z", "=", "Dense", "(", "self", ".", "num_class", ",", "activation", "=", "'softmax'", ",", "kernel_constraint", "=", "max_norm", "(", "0.5", ")", ",", "\n", "name", "=", "'classifier'", ")", "(", "latent", ")", "\n", "\n", "return", "Model", "(", "inputs", "=", "encoder_input", ",", "outputs", "=", "[", "train_xr", ",", "latent", ",", "z", "]", ",", "\n", "name", "=", "'MIN2Net'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net.MIN2Net.fit": [[126, 156], ["tensorflow.keras.callbacks.CSVLogger", "min2net.utils.TimeHistory", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.ReduceLROnPlateau", "tensorflow.keras.callbacks.EarlyStopping", "MIN2Net.MIN2Net.build", "MIN2Net.MIN2Net.summary", "MIN2Net.MIN2Net.compile", "MIN2Net.MIN2Net.fit", "Exception", "min2net.utils.compute_class_weight", "min2net.loss.SparseCategoricalCrossentropy", "Exception", "str", "str"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.compute_class_weight", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.loss.SparseCategoricalCrossentropy"], ["", "def", "fit", "(", "self", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", ":", "\n", "\n", "        ", "if", "X_train", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_train` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_train", ".", "ndim", ")", ")", "\n", "", "elif", "X_val", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_val` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_val", ".", "ndim", ")", ")", "\n", "\n", "", "csv_logger", "=", "CSVLogger", "(", "self", ".", "csv_dir", ")", "\n", "time_callback", "=", "TimeHistory", "(", "self", ".", "time_log", ")", "\n", "checkpointer", "=", "ModelCheckpoint", "(", "monitor", "=", "self", ".", "monitor", ",", "filepath", "=", "self", ".", "weights_dir", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "save_best_only", "=", "self", ".", "save_best_only", ",", "\n", "save_weight_only", "=", "self", ".", "save_weight_only", ")", "\n", "reduce_lr", "=", "ReduceLROnPlateau", "(", "monitor", "=", "self", ".", "monitor", ",", "patience", "=", "self", ".", "patience", ",", "\n", "factor", "=", "self", ".", "factor", ",", "mode", "=", "self", ".", "mode", ",", "verbose", "=", "self", ".", "verbose", ",", "\n", "min_lr", "=", "self", ".", "min_lr", ")", "\n", "es", "=", "EarlyStopping", "(", "monitor", "=", "self", ".", "monitor", ",", "mode", "=", "self", ".", "mode", ",", "verbose", "=", "self", ".", "verbose", ",", "\n", "patience", "=", "self", ".", "es_patience", ")", "\n", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "if", "self", ".", "class_balancing", ":", "# compute_class_weight if class_balancing is True", "\n", "            ", "class_weight", "=", "compute_class_weight", "(", "y_train", ")", "\n", "self", ".", "loss", "[", "-", "1", "]", "=", "SparseCategoricalCrossentropy", "(", "class_weight", "=", "class_weight", ")", "\n", "\n", "", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "self", ".", "metrics", ",", "loss_weights", "=", "self", ".", "loss_weights", ")", "\n", "\n", "model", ".", "fit", "(", "x", "=", "X_train", ",", "y", "=", "[", "X_train", ",", "y_train", ",", "y_train", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "self", ".", "shuffle", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "validation_data", "=", "(", "X_val", ",", "[", "X_val", ",", "y_val", ",", "y_val", "]", ")", ",", "\n", "callbacks", "=", "[", "checkpointer", ",", "csv_logger", ",", "reduce_lr", ",", "es", ",", "time_callback", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net.MIN2Net.predict": [[157, 191], ["MIN2Net.MIN2Net.build", "MIN2Net.MIN2Net.summary", "MIN2Net.MIN2Net.load_weights", "MIN2Net.MIN2Net.compile", "time.time", "MIN2Net.MIN2Net.predict", "time.time", "MIN2Net.MIN2Net.evaluate", "numpy.argmax", "print", "sklearn.metrics.f1_score", "print", "print", "Exception", "sklearn.metrics.classification_report", "str"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict"], ["", "def", "predict", "(", "self", ",", "X_test", ",", "y_test", ")", ":", "\n", "\n", "        ", "if", "X_test", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_test` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_test", ".", "ndim", ")", ")", "\n", "\n", "", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "summary", "(", ")", "\n", "model", ".", "load_weights", "(", "self", ".", "weights_dir", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "self", ".", "metrics", ",", "loss_weights", "=", "self", ".", "loss_weights", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "y_pred_decoder", ",", "y_pred_trip", ",", "y_pred_clf", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "loss", ",", "decoder_loss", ",", "trip_loss", ",", "classifier_loss", ",", "decoder_acc", ",", "trip_acc", ",", "classifier_acc", "=", "model", ".", "evaluate", "(", "x", "=", "X_test", ",", "\n", "y", "=", "[", "X_test", ",", "y_test", ",", "y_test", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ")", "\n", "y_pred_argm", "=", "np", ".", "argmax", "(", "y_pred_clf", ",", "axis", "=", "1", ")", "\n", "print", "(", "\"F1-score is computed based on {}\"", ".", "format", "(", "self", ".", "f1_average", ")", ")", "\n", "f1", "=", "f1_score", "(", "y_test", ",", "y_pred_argm", ",", "average", "=", "self", ".", "f1_average", ")", "\n", "print", "(", "'(loss: {}, accuracy: {})'", ".", "format", "(", "loss", ",", "classifier_acc", ")", ")", "\n", "print", "(", "classification_report", "(", "y_test", ",", "y_pred_argm", ")", ")", "\n", "evaluation", "=", "{", "'loss'", ":", "loss", ",", "\n", "'decoder_loss'", ":", "decoder_loss", ",", "\n", "'triplet_loss'", ":", "trip_loss", ",", "\n", "'classifier_loss'", ":", "classifier_loss", ",", "\n", "'accuracy'", ":", "classifier_acc", ",", "\n", "'f1-score'", ":", "f1", ",", "\n", "'prediction_time'", ":", "end", "-", "start", "}", "\n", "Y", "=", "{", "'y_true'", ":", "y_test", ",", "\n", "'y_pred'", ":", "y_pred_argm", ",", "\n", "'y_pred_decoder'", ":", "y_pred_decoder", "}", "\n", "\n", "return", "Y", ",", "evaluation", "", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.SVM.SVM.__init__": [[11, 45], ["kwargs.keys", "numpy.random.seed", "SVM.SVM.__setattr__", "os.path.exists", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "log_path", "=", "'logs'", ",", "\n", "model_name", "=", "'SVM'", ",", "\n", "tuned_parameters", "=", "None", ",", "\n", "num_class", "=", "2", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "tuned_parameters", "==", "None", ":", "\n", "            ", "self", ".", "tuned_parameters", "=", "[", "{", "'kernel'", ":", "[", "'rbf'", "]", ",", "\n", "'gamma'", ":", "[", "1e-2", ",", "1e-3", "]", ",", "\n", "'C'", ":", "[", "0.001", ",", "0.01", ",", "0.1", ",", "1", ",", "10", ",", "100", ",", "1000", "]", "\n", "}", ",", "\n", "{", "'kernel'", ":", "[", "'sigmoid'", "]", ",", "\n", "'gamma'", ":", "[", "1e-2", ",", "1e-3", "]", ",", "\n", "'C'", ":", "[", "0.001", ",", "0.01", ",", "0.1", ",", "1", ",", "10", ",", "100", ",", "1000", "]", "\n", "}", ",", "\n", "{", "'kernel'", ":", "[", "'linear'", "]", ",", "\n", "'gamma'", ":", "[", "1e-2", ",", "1e-3", "]", ",", "\n", "'C'", ":", "[", "0.001", ",", "0.01", ",", "0.1", ",", "1", ",", "10", ",", "100", ",", "1000", "]", "\n", "}", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "tuned_parameters", "=", "tuned_parameters", "\n", "", "self", ".", "seed", "=", "1234", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "f1_average", "=", "'binary'", "if", "self", ".", "num_class", "==", "2", "else", "'macro'", "\n", "\n", "for", "k", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "log_path", ")", "\n", "", "self", ".", "model_path", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_model.gz'", "\n", "self", ".", "time_log", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_time_log.csv'", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.SVM.SVM.fit": [[46, 77], ["print", "print", "numpy.concatenate", "numpy.concatenate", "numpy.full", "numpy.full", "numpy.concatenate().tolist", "sklearn.model_selection.PredefinedSplit", "sklearn.model_selection.GridSearchCV", "time.time", "sklearn.model_selection.GridSearchCV.fit", "time.time", "print", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "joblib.dump", "min2net.utils.write_log", "min2net.utils.write_log", "Exception", "Exception", "numpy.concatenate", "sklearn.svm.SVC", "str", "str"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log"], ["", "def", "fit", "(", "self", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", ":", "\n", "\n", "        ", "if", "X_train", ".", "ndim", "!=", "2", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_train` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_train", ".", "ndim", ")", ")", "\n", "", "elif", "X_val", ".", "ndim", "!=", "2", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_val` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_val", ".", "ndim", ")", ")", "\n", "\n", "", "print", "(", "'Dimension of training set is: {} and label is: {}'", ".", "format", "(", "X_train", ".", "shape", ",", "y_train", ".", "shape", ")", ")", "\n", "print", "(", "'Dimension of validation set is: {} and label is: {}'", ".", "format", "(", "X_val", ".", "shape", ",", "y_val", ".", "shape", ")", ")", "\n", "\n", "X_all", "=", "np", ".", "concatenate", "(", "(", "X_train", ",", "X_val", ")", ",", "axis", "=", "0", ")", "\n", "y_all", "=", "np", ".", "concatenate", "(", "(", "y_train", ",", "y_val", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# Create a list where train data indices are -1 and validation data indices are 0", "\n", "tr_index", "=", "np", ".", "full", "(", "(", "X_train", ".", "shape", "[", "0", "]", ")", ",", "-", "1", ")", "\n", "val_index", "=", "np", ".", "full", "(", "(", "X_val", ".", "shape", "[", "0", "]", ")", ",", "0", ")", "\n", "split_index", "=", "np", ".", "concatenate", "(", "(", "tr_index", ",", "val_index", ")", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "# Use the list to create PredefinedSplit", "\n", "pds", "=", "PredefinedSplit", "(", "test_fold", "=", "split_index", ")", "\n", "clf", "=", "GridSearchCV", "(", "estimator", "=", "SVC", "(", ")", ",", "param_grid", "=", "self", ".", "tuned_parameters", ",", "cv", "=", "pds", ",", "scoring", "=", "'accuracy'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "clf", ".", "fit", "(", "X_all", ",", "y_all", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "#Clasifying with an optimal parameter set", "\n", "Optimal_params", "=", "clf", ".", "best_params_", "\n", "print", "(", "Optimal_params", ")", "\n", "classifier", "=", "SVC", "(", "**", "Optimal_params", ")", "\n", "classifier", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "dump", "(", "classifier", ",", "self", ".", "model_path", ")", "\n", "write_log", "(", "filepath", "=", "self", ".", "time_log", ",", "data", "=", "[", "'time_log'", "]", ",", "mode", "=", "'w'", ")", "\n", "write_log", "(", "filepath", "=", "self", ".", "time_log", ",", "data", "=", "[", "end", "-", "start", "]", ",", "mode", "=", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.SVM.SVM.predict": [[78, 100], ["print", "joblib.load", "joblib.load.score", "print", "time.time", "time.time", "print", "len", "print", "sklearn.metrics.f1_score", "Exception", "joblib.load.predict", "sklearn.metrics.classification_report", "numpy.unique", "str"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict"], ["", "def", "predict", "(", "self", ",", "X_test", ",", "y_test", ")", ":", "\n", "\n", "        ", "if", "X_test", ".", "ndim", "!=", "2", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_test` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_test", ".", "ndim", ")", ")", "\n", "\n", "", "print", "(", "'Dimesion of testing set is: {} and label is: {}'", ".", "format", "(", "X_test", ".", "shape", ",", "y_test", ".", "shape", ")", ")", "\n", "classifier", "=", "load", "(", "self", ".", "model_path", ")", "\n", "svm_acc", "=", "classifier", ".", "score", "(", "X_test", ",", "y_test", ")", "\n", "print", "(", "'===Test Score for Optimized Parameters===:'", ",", "svm_acc", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "y_true", ",", "y_pred", "=", "y_test", ",", "classifier", ".", "predict", "(", "X_test", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "classification_report", "(", "y_true", ",", "y_pred", ")", ")", "\n", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "y_test", ")", ")", "\n", "print", "(", "\"F1-score is computed based on {}\"", ".", "format", "(", "self", ".", "f1_average", ")", ")", "\n", "f1", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "self", ".", "f1_average", ")", "\n", "evaluation", "=", "{", "'accuracy'", ":", "svm_acc", ",", "\n", "'f1-score'", ":", "f1", ",", "\n", "'prediction_time'", ":", "end", "-", "start", "}", "\n", "Y", "=", "{", "'y_true'", ":", "y_true", ",", "\n", "'y_pred'", ":", "y_pred", "}", "\n", "return", "Y", ",", "evaluation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net_without_decoder.MIN2Net_without_decoder.__init__": [[18, 87], ["tensorflow.keras.optimizers.Adam", "kwargs.keys", "numpy.random.seed", "tensorflow.random.set_seed", "tensorflow.keras.backend.set_image_data_format", "min2net.loss.triplet_loss", "MIN2Net_without_decoder.MIN2Net_without_decoder.__setattr__", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.loss.triplet_loss"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_shape", "=", "(", "1", ",", "400", ",", "20", ")", ",", "\n", "num_class", "=", "2", ",", "\n", "loss", "=", "[", "triplet_loss", "(", "margin", "=", "1.0", ")", ",", "'sparse_categorical_crossentropy'", "]", ",", "\n", "loss_weights", "=", "[", "1.", ",", "1.", "]", ",", "\n", "latent_dim", "=", "None", ",", "\n", "epochs", "=", "200", ",", "\n", "batch_size", "=", "100", ",", "\n", "optimizer", "=", "Adam", "(", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", ",", "\n", "lr", "=", "1e-2", ",", "\n", "min_lr", "=", "1e-3", ",", "\n", "factor", "=", "0.25", ",", "\n", "patience", "=", "20", ",", "\n", "es_patience", "=", "50", ",", "\n", "verbose", "=", "1", ",", "\n", "log_path", "=", "'logs'", ",", "\n", "model_name", "=", "'MIN2Net_without_decoder'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "D", ",", "T", ",", "C", "=", "input_shape", "\n", "self", ".", "latent_dim", "=", "latent_dim", "if", "latent_dim", "is", "not", "None", "else", "C", "if", "num_class", "==", "2", "else", "64", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "optimizer", ".", "lr", "=", "lr", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "es_patience", "=", "es_patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "log_path", "=", "log_path", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "weights_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_weights.h5'", "\n", "self", ".", "csv_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_log.log'", "\n", "self", ".", "time_log", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_time_log.csv'", "\n", "\n", "# use **kwargs to set the new value of below args.", "\n", "self", ".", "f1_average", "=", "'binary'", "if", "self", ".", "num_class", "==", "2", "else", "'macro'", "\n", "self", ".", "data_format", "=", "'channels_last'", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "metrics", "=", "'accuracy'", "\n", "self", ".", "monitor", "=", "'val_loss'", "\n", "self", ".", "mode", "=", "'min'", "\n", "self", ".", "save_best_only", "=", "True", "\n", "self", ".", "save_weight_only", "=", "True", "\n", "self", ".", "seed", "=", "1234", "\n", "self", ".", "class_balancing", "=", "False", "\n", "# 'set params'", "\n", "self", ".", "subsampling_size", "=", "100", "\n", "self", ".", "subsampling_size", "=", "100", "\n", "self", ".", "pool_size_1", "=", "(", "1", ",", "T", "//", "self", ".", "subsampling_size", ")", "\n", "self", ".", "pool_size_2", "=", "(", "1", ",", "4", ")", "\n", "self", ".", "filter_1", "=", "C", "\n", "self", ".", "filter_2", "=", "10", "\n", "\n", "for", "k", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "\n", "", "self", ".", "flatten_size", "=", "T", "//", "self", ".", "pool_size_1", "[", "1", "]", "//", "self", ".", "pool_size_2", "[", "1", "]", "\n", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "tf", ".", "random", ".", "set_seed", "(", "self", ".", "seed", ")", "\n", "K", ".", "set_image_data_format", "(", "self", ".", "data_format", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "log_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net_without_decoder.MIN2Net_without_decoder.build": [[88, 108], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm"], "methods", ["None"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "'encoder --> DCNN'", "\n", "encoder_input", "=", "Input", "(", "self", ".", "input_shape", ")", "\n", "en_conv", "=", "Conv2D", "(", "self", ".", "filter_1", ",", "(", "1", ",", "64", ")", ",", "activation", "=", "'elu'", ",", "padding", "=", "\"same\"", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "encoder_input", ")", "\n", "en_conv", "=", "BatchNormalization", "(", "axis", "=", "3", ",", "epsilon", "=", "1e-05", ",", "momentum", "=", "0.1", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "AveragePooling2D", "(", "pool_size", "=", "self", ".", "pool_size_1", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "Conv2D", "(", "self", ".", "filter_2", ",", "(", "1", ",", "32", ")", ",", "activation", "=", "'elu'", ",", "padding", "=", "\"same\"", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "BatchNormalization", "(", "axis", "=", "3", ",", "epsilon", "=", "1e-05", ",", "momentum", "=", "0.1", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "AveragePooling2D", "(", "pool_size", "=", "self", ".", "pool_size_2", ")", "(", "en_conv", ")", "\n", "en_conv", "=", "Flatten", "(", ")", "(", "en_conv", ")", "\n", "encoder_output", "=", "Dense", "(", "self", ".", "latent_dim", ",", "kernel_constraint", "=", "max_norm", "(", "0.5", ")", ")", "(", "en_conv", ")", "\n", "\n", "\n", "z", "=", "Dense", "(", "self", ".", "num_class", ",", "activation", "=", "'softmax'", ",", "kernel_constraint", "=", "max_norm", "(", "0.5", ")", ",", "\n", "name", "=", "'classifier'", ")", "(", "encoder_output", ")", "\n", "\n", "return", "models", ".", "Model", "(", "inputs", "=", "encoder_input", ",", "outputs", "=", "[", "encoder_output", ",", "z", "]", ",", "\n", "name", "=", "'MIN2Net_without_decoder'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net_without_decoder.MIN2Net_without_decoder.fit": [[110, 140], ["tensorflow.keras.callbacks.CSVLogger", "min2net.utils.TimeHistory", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.ReduceLROnPlateau", "tensorflow.keras.callbacks.EarlyStopping", "MIN2Net_without_decoder.MIN2Net_without_decoder.build", "MIN2Net_without_decoder.MIN2Net_without_decoder.summary", "MIN2Net_without_decoder.MIN2Net_without_decoder.compile", "MIN2Net_without_decoder.MIN2Net_without_decoder.fit", "Exception", "min2net.utils.compute_class_weight", "min2net.loss.SparseCategoricalCrossentropy", "Exception"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.compute_class_weight", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.loss.SparseCategoricalCrossentropy"], ["", "def", "fit", "(", "self", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", ":", "\n", "\n", "        ", "if", "X_train", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_train` is incompatible: expected ndim=4, found ndim={}'", ".", "format", "(", "X_train", ".", "ndim", ")", ")", "\n", "", "elif", "X_val", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_val` is incompatible: expected ndim=4, found ndim={}'", ".", "format", "(", "X_val", ".", "ndim", ")", ")", "\n", "\n", "", "csv_logger", "=", "CSVLogger", "(", "self", ".", "csv_dir", ")", "\n", "time_callback", "=", "TimeHistory", "(", "self", ".", "time_log", ")", "\n", "checkpointer", "=", "ModelCheckpoint", "(", "monitor", "=", "self", ".", "monitor", ",", "filepath", "=", "self", ".", "weights_dir", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "save_best_only", "=", "self", ".", "save_best_only", ",", "\n", "save_weight_only", "=", "self", ".", "save_weight_only", ")", "\n", "reduce_lr", "=", "ReduceLROnPlateau", "(", "monitor", "=", "self", ".", "monitor", ",", "patience", "=", "self", ".", "patience", ",", "\n", "factor", "=", "self", ".", "factor", ",", "mode", "=", "self", ".", "mode", ",", "verbose", "=", "self", ".", "verbose", ",", "\n", "min_lr", "=", "self", ".", "min_lr", ")", "\n", "es", "=", "EarlyStopping", "(", "monitor", "=", "self", ".", "monitor", ",", "mode", "=", "self", ".", "mode", ",", "verbose", "=", "self", ".", "verbose", ",", "\n", "patience", "=", "self", ".", "es_patience", ")", "\n", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "if", "self", ".", "class_balancing", ":", "# compute_class_weight if class_balancing is True", "\n", "            ", "class_weight", "=", "compute_class_weight", "(", "y_train", ")", "\n", "self", ".", "loss", "[", "-", "1", "]", "=", "SparseCategoricalCrossentropy", "(", "class_weight", "=", "class_weight", ")", "\n", "\n", "", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "self", ".", "metrics", ",", "loss_weights", "=", "self", ".", "loss_weights", ")", "\n", "\n", "model", ".", "fit", "(", "x", "=", "X_train", ",", "y", "=", "[", "y_train", ",", "y_train", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "self", ".", "shuffle", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "validation_data", "=", "(", "X_val", ",", "[", "y_val", ",", "y_val", "]", ")", ",", "\n", "callbacks", "=", "[", "checkpointer", ",", "csv_logger", ",", "reduce_lr", ",", "es", ",", "time_callback", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.MIN2Net_without_decoder.MIN2Net_without_decoder.predict": [[141, 173], ["MIN2Net_without_decoder.MIN2Net_without_decoder.build", "MIN2Net_without_decoder.MIN2Net_without_decoder.load_weights", "MIN2Net_without_decoder.MIN2Net_without_decoder.compile", "time.time", "MIN2Net_without_decoder.MIN2Net_without_decoder.predict", "time.time", "MIN2Net_without_decoder.MIN2Net_without_decoder.evaluate", "numpy.argmax", "sklearn.metrics.f1_score", "print", "print", "print", "Exception", "sklearn.metrics.classification_report"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict"], ["", "def", "predict", "(", "self", ",", "X_test", ",", "y_test", ")", ":", "\n", "\n", "        ", "if", "X_test", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_test` is incompatible: expected ndim=4, found ndim={}'", ".", "format", "(", "X_test", ".", "ndim", ")", ")", "\n", "\n", "", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "load_weights", "(", "self", ".", "weights_dir", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "self", ".", "metrics", ",", "loss_weights", "=", "self", ".", "loss_weights", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "y_pred_trip", ",", "y_pred_clf", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "loss", ",", "trip_loss", ",", "classifier_loss", ",", "trip_acc", ",", "classifier_acc", "=", "model", ".", "evaluate", "(", "x", "=", "X_test", ",", "\n", "y", "=", "[", "y_test", ",", "y_test", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "y_pred_argm", "=", "np", ".", "argmax", "(", "y_pred_clf", ",", "axis", "=", "1", ")", "\n", "f1", "=", "f1_score", "(", "y_test", ",", "y_pred_argm", ",", "average", "=", "self", ".", "f1_average", ")", "\n", "print", "(", "\"F1-score is computed based on {}\"", ".", "format", "(", "self", ".", "f1_average", ")", ")", "\n", "print", "(", "'(loss: {}, accuracy: {})'", ".", "format", "(", "loss", ",", "classifier_acc", ")", ")", "\n", "print", "(", "classification_report", "(", "y_test", ",", "y_pred_argm", ")", ")", "\n", "evaluation", "=", "{", "'loss'", ":", "loss", ",", "\n", "'triplet_loss'", ":", "trip_loss", ",", "\n", "'classifier_loss'", ":", "classifier_loss", ",", "\n", "'accuracy'", ":", "classifier_acc", ",", "\n", "'f1-score'", ":", "f1", ",", "\n", "'prediction_time'", ":", "end", "-", "start", "}", "\n", "Y", "=", "{", "'y_true'", ":", "y_test", ",", "\n", "'y_pred'", ":", "y_pred_argm", "}", "\n", "\n", "return", "Y", ",", "evaluation", "", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.EEGNet.EEGNet.__init__": [[16, 85], ["tensorflow.keras.optimizers.Adam", "int", "kwargs.keys", "numpy.random.seed", "tensorflow.random.set_seed", "tensorflow.keras.backend.set_image_data_format", "EEGNet.EEGNet.__setattr__", "os.path.exists", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_shape", "=", "(", "1", ",", "20", ",", "400", ")", ",", "\n", "num_class", "=", "2", ",", "\n", "loss", "=", "'sparse_categorical_crossentropy'", ",", "\n", "epochs", "=", "200", ",", "\n", "batch_size", "=", "100", ",", "\n", "optimizer", "=", "Adam", "(", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", ",", "\n", "lr", "=", "0.01", ",", "\n", "min_lr", "=", "0.01", ",", "\n", "factor", "=", "0.25", ",", "\n", "patience", "=", "10", ",", "\n", "es_patience", "=", "20", ",", "\n", "verbose", "=", "1", ",", "\n", "log_path", "=", "'logs'", ",", "\n", "model_name", "=", "'EEGNet'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "optimizer", ".", "lr", "=", "lr", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "es_patience", "=", "es_patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "log_path", "=", "log_path", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "weights_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_weights.h5'", "\n", "self", ".", "csv_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_log.log'", "\n", "self", ".", "time_log", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_time_log.csv'", "\n", "\n", "# use **kwargs to set the new value of below args.", "\n", "self", ".", "kernLength", "=", "200", "\n", "self", ".", "F1", "=", "8", "\n", "self", ".", "D", "=", "2", "\n", "self", ".", "F2", "=", "int", "(", "self", ".", "F1", "*", "self", ".", "D", ")", "\n", "self", ".", "norm_rate", "=", "0.25", "\n", "self", ".", "dropout_rate", "=", "0.5", "\n", "self", ".", "f1_average", "=", "'binary'", "if", "self", ".", "num_class", "==", "2", "else", "'macro'", "\n", "self", ".", "data_format", "=", "'channels_first'", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "metrics", "=", "'accuracy'", "\n", "self", ".", "monitor", "=", "'val_loss'", "\n", "self", ".", "mode", "=", "'min'", "\n", "self", ".", "save_best_only", "=", "True", "\n", "self", ".", "save_weight_only", "=", "True", "\n", "self", ".", "seed", "=", "1234", "\n", "self", ".", "class_balancing", "=", "False", "\n", "self", ".", "class_weight", "=", "None", "\n", "\n", "for", "k", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "\n", "", "if", "self", ".", "data_format", "==", "'channels_first'", ":", "\n", "            ", "self", ".", "Chans", "=", "self", ".", "input_shape", "[", "1", "]", "\n", "self", ".", "Samples", "=", "self", ".", "input_shape", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "Chans", "=", "self", ".", "input_shape", "[", "0", "]", "\n", "self", ".", "Samples", "=", "self", ".", "input_shape", "[", "1", "]", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "tf", ".", "random", ".", "set_seed", "(", "self", ".", "seed", ")", "\n", "K", ".", "set_image_data_format", "(", "self", ".", "data_format", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "log_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.EEGNet.EEGNet.build": [[86, 116], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.DepthwiseConv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.SeparableConv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm"], "methods", ["None"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "input1", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ")", "\n", "\n", "##################################################################", "\n", "block1", "=", "Conv2D", "(", "self", ".", "F1", ",", "(", "1", ",", "self", ".", "kernLength", ")", ",", "padding", "=", "'same'", ",", "\n", "input_shape", "=", "self", ".", "input_shape", ",", "\n", "use_bias", "=", "False", ")", "(", "input1", ")", "\n", "block1", "=", "BatchNormalization", "(", ")", "(", "block1", ")", "\n", "block1", "=", "DepthwiseConv2D", "(", "(", "self", ".", "Chans", ",", "1", ")", ",", "use_bias", "=", "False", ",", "\n", "depth_multiplier", "=", "self", ".", "D", ",", "\n", "depthwise_constraint", "=", "max_norm", "(", "1.", ")", ")", "(", "block1", ")", "\n", "block1", "=", "BatchNormalization", "(", ")", "(", "block1", ")", "\n", "block1", "=", "Activation", "(", "'elu'", ")", "(", "block1", ")", "\n", "block1", "=", "AveragePooling2D", "(", "(", "1", ",", "4", ")", ")", "(", "block1", ")", "\n", "block1", "=", "Dropout", "(", "self", ".", "dropout_rate", ")", "(", "block1", ")", "\n", "\n", "block2", "=", "SeparableConv2D", "(", "self", ".", "F2", ",", "(", "1", ",", "self", ".", "kernLength", "//", "4", ")", ",", "\n", "use_bias", "=", "False", ",", "padding", "=", "'same'", ")", "(", "block1", ")", "\n", "block2", "=", "BatchNormalization", "(", ")", "(", "block2", ")", "\n", "block2", "=", "Activation", "(", "'elu'", ")", "(", "block2", ")", "\n", "block2", "=", "AveragePooling2D", "(", "(", "1", ",", "8", ")", ")", "(", "block2", ")", "\n", "block2", "=", "Dropout", "(", "self", ".", "dropout_rate", ")", "(", "block2", ")", "\n", "\n", "flatten", "=", "Flatten", "(", "name", "=", "'flatten'", ")", "(", "block2", ")", "\n", "\n", "dense", "=", "Dense", "(", "self", ".", "num_class", ",", "name", "=", "'dense'", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "self", ".", "norm_rate", ")", ")", "(", "flatten", ")", "\n", "softmax", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'softmax'", ")", "(", "dense", ")", "\n", "\n", "return", "Model", "(", "inputs", "=", "input1", ",", "outputs", "=", "softmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.EEGNet.EEGNet.fit": [[117, 154], ["tensorflow.keras.callbacks.CSVLogger", "min2net.utils.TimeHistory", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.ReduceLROnPlateau", "tensorflow.keras.callbacks.EarlyStopping", "EEGNet.EEGNet.build", "EEGNet.EEGNet.compile", "EEGNet.EEGNet.summary", "print", "EEGNet.EEGNet.fit", "Exception", "min2net.utils.compute_class_weight", "Exception", "str", "str"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.compute_class_weight"], ["", "def", "fit", "(", "self", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", ":", "\n", "\n", "        ", "if", "X_train", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_train` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_train", ".", "ndim", ")", ")", "\n", "", "elif", "X_val", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_val` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_val", ".", "ndim", ")", ")", "\n", "\n", "", "self", ".", "input_shape", "=", "X_train", ".", "shape", "[", "1", ":", "]", "\n", "if", "self", ".", "data_format", "==", "'channels_first'", ":", "\n", "            ", "self", ".", "Chans", "=", "self", ".", "input_shape", "[", "1", "]", "\n", "self", ".", "Samples", "=", "self", ".", "input_shape", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "Chans", "=", "self", ".", "input_shape", "[", "0", "]", "\n", "self", ".", "Samples", "=", "self", ".", "input_shape", "[", "1", "]", "\n", "\n", "", "csv_logger", "=", "CSVLogger", "(", "self", ".", "csv_dir", ")", "\n", "time_callback", "=", "TimeHistory", "(", "self", ".", "time_log", ")", "\n", "checkpointer", "=", "ModelCheckpoint", "(", "monitor", "=", "self", ".", "monitor", ",", "filepath", "=", "self", ".", "weights_dir", ",", "verbose", "=", "self", ".", "verbose", ",", "\n", "save_best_only", "=", "self", ".", "save_best_only", ",", "save_weight_only", "=", "self", ".", "save_weight_only", ")", "\n", "reduce_lr", "=", "ReduceLROnPlateau", "(", "monitor", "=", "self", ".", "monitor", ",", "patience", "=", "self", ".", "patience", ",", "factor", "=", "self", ".", "factor", ",", "\n", "mode", "=", "self", ".", "mode", ",", "verbose", "=", "self", ".", "verbose", ",", "min_lr", "=", "self", ".", "min_lr", ")", "\n", "es", "=", "EarlyStopping", "(", "monitor", "=", "self", ".", "monitor", ",", "mode", "=", "self", ".", "mode", ",", "verbose", "=", "self", ".", "verbose", ",", "patience", "=", "self", ".", "es_patience", ")", "\n", "\n", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "self", ".", "metrics", ")", "\n", "model", ".", "summary", "(", ")", "\n", "print", "(", "\"The first kernel size is (1, {})\"", ".", "format", "(", "self", ".", "kernLength", ")", ")", "\n", "\n", "if", "self", ".", "class_balancing", ":", "# compute_class_weight if class_balancing is True", "\n", "            ", "self", ".", "class_weight", "=", "compute_class_weight", "(", "y_train", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "class_weight", "=", "None", "\n", "\n", "", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "self", ".", "shuffle", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "validation_data", "=", "(", "X_val", ",", "y_val", ")", ",", "class_weight", "=", "self", ".", "class_weight", ",", "\n", "callbacks", "=", "[", "checkpointer", ",", "csv_logger", ",", "reduce_lr", ",", "es", ",", "time_callback", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.EEGNet.EEGNet.predict": [[155, 179], ["EEGNet.EEGNet.build", "EEGNet.EEGNet.load_weights", "EEGNet.EEGNet.compile", "time.time", "EEGNet.EEGNet.predict", "time.time", "EEGNet.EEGNet.evaluate", "numpy.argmax", "print", "print", "sklearn.metrics.f1_score", "Exception", "sklearn.metrics.classification_report", "str"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict"], ["", "def", "predict", "(", "self", ",", "X_test", ",", "y_test", ")", ":", "\n", "\n", "        ", "if", "X_test", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_test` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_test", ".", "ndim", ")", ")", "\n", "\n", "", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "load_weights", "(", "self", ".", "weights_dir", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "self", ".", "metrics", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "y_pred", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "loss", ",", "accuracy", "=", "model", ".", "evaluate", "(", "x", "=", "X_test", ",", "y", "=", "y_test", ",", "batch_size", "=", "self", ".", "batch_size", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "y_pred_argm", "=", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "1", ")", "\n", "print", "(", "classification_report", "(", "y_test", ",", "y_pred_argm", ")", ")", "\n", "print", "(", "\"F1-score is computed based on {}\"", ".", "format", "(", "self", ".", "f1_average", ")", ")", "\n", "f1", "=", "f1_score", "(", "y_test", ",", "y_pred_argm", ",", "average", "=", "self", ".", "f1_average", ")", "\n", "evaluation", "=", "{", "'loss'", ":", "loss", ",", "\n", "'accuracy'", ":", "accuracy", ",", "\n", "'f1-score'", ":", "f1", ",", "\n", "'prediction_time'", ":", "end", "-", "start", "}", "\n", "Y", "=", "{", "'y_true'", ":", "y_test", ",", "\n", "'y_pred'", ":", "y_pred_argm", "}", "\n", "return", "Y", ",", "evaluation", "", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.SpectralSpatialCNN.SpectralSpatialCNN.__init__": [[15, 74], ["tensorflow.keras.optimizers.Adam", "kwargs.keys", "numpy.random.seed", "tensorflow.random.set_seed", "tensorflow.keras.backend.set_image_data_format", "SpectralSpatialCNN.SpectralSpatialCNN.__setattr__", "os.path.exists", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_shape", "=", "(", "28", ",", "28", ",", "1", ")", ",", "\n", "num_class", "=", "2", ",", "\n", "loss", "=", "'sparse_categorical_crossentropy'", ",", "\n", "epochs", "=", "200", ",", "\n", "batch_size", "=", "100", ",", "\n", "optimizer", "=", "Adam", "(", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", ",", "\n", "lr", "=", "1e-5", ",", "\n", "min_lr", "=", "1e-5", ",", "\n", "factor", "=", "0.25", ",", "\n", "patience", "=", "10", ",", "\n", "es_patience", "=", "20", ",", "\n", "verbose", "=", "1", ",", "\n", "log_path", "=", "'logs'", ",", "\n", "model_name", "=", "'SpectralSpatialCNN'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "optimizer", ".", "lr", "=", "lr", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "es_patience", "=", "es_patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "log_path", "=", "log_path", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "weights_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_weights.h5'", "\n", "self", ".", "csv_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_log.log'", "\n", "self", ".", "time_log", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_time_log.csv'", "\n", "\n", "\n", "# use **kwargs to set the new value of below args.", "\n", "self", ".", "n_subbands", "=", "20", "\n", "self", ".", "dropout_rate", "=", "0.5", "\n", "self", ".", "f1_average", "=", "'binary'", "if", "self", ".", "num_class", "==", "2", "else", "'macro'", "\n", "self", ".", "data_format", "=", "'channels_last'", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "metrics", "=", "'accuracy'", "\n", "self", ".", "monitor", "=", "'val_loss'", "\n", "self", ".", "mode", "=", "'min'", "\n", "self", ".", "save_best_only", "=", "True", "\n", "self", ".", "save_weight_only", "=", "True", "\n", "self", ".", "seed", "=", "1234", "\n", "self", ".", "class_balancing", "=", "False", "\n", "self", ".", "class_weight", "=", "None", "\n", "\n", "for", "k", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "tf", ".", "random", ".", "set_seed", "(", "self", ".", "seed", ")", "\n", "K", ".", "set_image_data_format", "(", "self", ".", "data_format", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "log_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.SpectralSpatialCNN.SpectralSpatialCNN.__cnn_model": [[76, 84], ["tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense"], "methods", ["None"], ["", "", "def", "__cnn_model", "(", "self", ",", "model_input", ")", ":", "\n", "# DeepConvNet", "\n", "        ", "model", "=", "Conv2D", "(", "filters", "=", "10", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "\"same\"", ")", "(", "model_input", ")", "\n", "model", "=", "Conv2D", "(", "filters", "=", "14", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "\"same\"", ")", "(", "model", ")", "\n", "model", "=", "Conv2D", "(", "filters", "=", "18", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "\"same\"", ")", "(", "model", ")", "\n", "model", "=", "Flatten", "(", ")", "(", "model", ")", "\n", "model", "=", "Dense", "(", "256", ")", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.SpectralSpatialCNN.SpectralSpatialCNN.build": [[85, 94], ["tensorflow.keras.models.Model", "tensorflow.keras.layers.Input", "SpectralSpatialCNN.SpectralSpatialCNN.__cnn_model", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.SpectralSpatialCNN.SpectralSpatialCNN.__cnn_model"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "input_data", "=", "[", "Input", "(", "shape", "=", "self", ".", "input_shape", ")", "for", "i", "in", "range", "(", "self", ".", "n_subbands", ")", "]", "\n", "model_sub", "=", "[", "self", ".", "__cnn_model", "(", "input_data", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "n_subbands", ")", "]", "\n", "out_sub_model", "=", "Concatenate", "(", ")", "(", "[", "model_sub", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "n_subbands", ")", "]", ")", "\n", "sub_model", "=", "Dense", "(", "1024", ")", "(", "out_sub_model", ")", "\n", "sub_model", "=", "Dropout", "(", "self", ".", "dropout_rate", ")", "(", "sub_model", ")", "\n", "sub_model", "=", "Dense", "(", "self", ".", "num_class", ",", "activation", "=", "'softmax'", ")", "(", "sub_model", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "input_data", ",", "outputs", "=", "sub_model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.SpectralSpatialCNN.SpectralSpatialCNN.fit": [[95, 124], ["tensorflow.keras.callbacks.CSVLogger", "min2net.utils.TimeHistory", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.ReduceLROnPlateau", "tensorflow.keras.callbacks.EarlyStopping", "SpectralSpatialCNN.SpectralSpatialCNN.build", "SpectralSpatialCNN.SpectralSpatialCNN.compile", "SpectralSpatialCNN.SpectralSpatialCNN.summary", "SpectralSpatialCNN.SpectralSpatialCNN.fit", "Exception", "min2net.utils.compute_class_weight", "Exception", "str", "range", "str", "range"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.compute_class_weight"], ["", "def", "fit", "(", "self", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", ":", "\n", "        ", "if", "X_train", ".", "ndim", "!=", "5", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_train` is incompatible: expected ndim=5, found ndim='", "+", "str", "(", "X_train", ".", "ndim", ")", ")", "\n", "", "elif", "X_val", ".", "ndim", "!=", "5", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_val` is incompatible: expected ndim=5, found ndim='", "+", "str", "(", "X_val", ".", "ndim", ")", ")", "\n", "\n", "", "self", ".", "input_shape", "=", "(", "X_train", ".", "shape", "[", "2", "]", ",", "X_train", ".", "shape", "[", "3", "]", ",", "X_train", ".", "shape", "[", "4", "]", ")", "\n", "self", ".", "n_subbands", "=", "X_train", ".", "shape", "[", "1", "]", "\n", "\n", "csv_logger", "=", "CSVLogger", "(", "self", ".", "csv_dir", ")", "\n", "time_callback", "=", "TimeHistory", "(", "self", ".", "time_log", ")", "\n", "checkpointer", "=", "ModelCheckpoint", "(", "monitor", "=", "self", ".", "monitor", ",", "filepath", "=", "self", ".", "weights_dir", ",", "verbose", "=", "self", ".", "verbose", ",", "\n", "save_best_only", "=", "self", ".", "save_best_only", ",", "save_weight_only", "=", "self", ".", "save_weight_only", ")", "\n", "reduce_lr", "=", "ReduceLROnPlateau", "(", "monitor", "=", "self", ".", "monitor", ",", "patience", "=", "self", ".", "patience", ",", "factor", "=", "self", ".", "factor", ",", "mode", "=", "self", ".", "mode", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "min_lr", "=", "self", ".", "min_lr", ")", "\n", "es", "=", "EarlyStopping", "(", "monitor", "=", "self", ".", "monitor", ",", "mode", "=", "self", ".", "mode", ",", "verbose", "=", "self", ".", "verbose", ",", "patience", "=", "self", ".", "es_patience", ")", "\n", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "self", ".", "metrics", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "if", "self", ".", "class_balancing", ":", "# compute_class_weight if class_balancing is True", "\n", "            ", "self", ".", "class_weight", "=", "compute_class_weight", "(", "y_train", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "class_weight", "=", "None", "\n", "\n", "", "model", ".", "fit", "(", "[", "X_train", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", "for", "i", "in", "range", "(", "self", ".", "n_subbands", ")", "]", ",", "y_train", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "self", ".", "shuffle", ",", "class_weight", "=", "self", ".", "class_weight", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "validation_data", "=", "(", "[", "X_val", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", "for", "i", "in", "range", "(", "self", ".", "n_subbands", ")", "]", ",", "y_val", ")", ",", "\n", "callbacks", "=", "[", "checkpointer", ",", "csv_logger", ",", "reduce_lr", ",", "es", ",", "time_callback", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.SpectralSpatialCNN.SpectralSpatialCNN.predict": [[125, 149], ["SpectralSpatialCNN.SpectralSpatialCNN.build", "SpectralSpatialCNN.SpectralSpatialCNN.load_weights", "SpectralSpatialCNN.SpectralSpatialCNN.compile", "time.time", "SpectralSpatialCNN.SpectralSpatialCNN.predict", "time.time", "SpectralSpatialCNN.SpectralSpatialCNN.evaluate", "numpy.argmax", "print", "sklearn.metrics.f1_score", "print", "Exception", "sklearn.metrics.classification_report", "str", "range", "range"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict"], ["", "def", "predict", "(", "self", ",", "X_test", ",", "y_test", ")", ":", "\n", "        ", "if", "X_test", ".", "ndim", "!=", "5", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_test` is incompatible: expected ndim=5, found ndim='", "+", "str", "(", "X_test", ".", "ndim", ")", ")", "\n", "", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "load_weights", "(", "self", ".", "weights_dir", ")", "\n", "self", ".", "n_subbands", "=", "X_test", ".", "shape", "[", "1", "]", "\n", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "self", ".", "metrics", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "y_pred", "=", "model", ".", "predict", "(", "[", "X_test", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", "for", "i", "in", "range", "(", "self", ".", "n_subbands", ")", "]", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "loss", ",", "acc", "=", "model", ".", "evaluate", "(", "x", "=", "[", "X_test", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", "for", "i", "in", "range", "(", "self", ".", "n_subbands", ")", "]", ",", "y", "=", "y_test", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "y_pred_argm", "=", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "1", ")", "\n", "print", "(", "\"F1-score is comptured basen on {}\"", ".", "format", "(", "self", ".", "f1_average", ")", ")", "\n", "f1", "=", "f1_score", "(", "y_test", ",", "y_pred_argm", ",", "average", "=", "self", ".", "f1_average", ")", "\n", "print", "(", "classification_report", "(", "y_test", ",", "y_pred_argm", ")", ")", "\n", "evaluation", "=", "{", "'loss'", ":", "loss", ",", "\n", "'accuracy'", ":", "acc", ",", "\n", "'f1-score'", ":", "f1", ",", "\n", "'prediction_time'", ":", "end", "-", "start", "}", "\n", "Y", "=", "{", "'y_true'", ":", "y_test", ",", "\n", "'y_pred'", ":", "y_pred_argm", "}", "\n", "return", "Y", ",", "evaluation", "", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.__init__": [[16, 85], ["tensorflow.keras.optimizers.Adam", "int", "kwargs.keys", "numpy.random.seed", "tensorflow.random.set_seed", "tensorflow.keras.backend.set_image_data_format", "DeepConvNet.DeepConvNet.__setattr__", "os.path.exists", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_shape", "=", "(", "1", ",", "20", ",", "400", ")", ",", "\n", "num_class", "=", "2", ",", "\n", "loss", "=", "'sparse_categorical_crossentropy'", ",", "\n", "epochs", "=", "200", ",", "\n", "batch_size", "=", "100", ",", "\n", "optimizer", "=", "Adam", "(", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", ",", "\n", "lr", "=", "0.01", ",", "\n", "min_lr", "=", "0.01", ",", "\n", "factor", "=", "0.25", ",", "\n", "patience", "=", "10", ",", "\n", "es_patience", "=", "20", ",", "\n", "verbose", "=", "1", ",", "\n", "log_path", "=", "'logs'", ",", "\n", "model_name", "=", "'DeepConvNet'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "optimizer", ".", "lr", "=", "lr", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "es_patience", "=", "es_patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "log_path", "=", "log_path", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "weights_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_weights.h5'", "\n", "self", ".", "csv_dir", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_out_log.log'", "\n", "self", ".", "time_log", "=", "log_path", "+", "'/'", "+", "model_name", "+", "'_time_log.csv'", "\n", "\n", "# use **kwargs to set the new value of below args.", "\n", "self", ".", "kernLength", "=", "125", "\n", "self", ".", "F1", "=", "8", "\n", "self", ".", "D", "=", "2", "\n", "self", ".", "F2", "=", "int", "(", "self", ".", "F1", "*", "self", ".", "D", ")", "\n", "self", ".", "norm_rate", "=", "0.25", "\n", "self", ".", "dropout_rate", "=", "0.5", "\n", "self", ".", "f1_average", "=", "'binary'", "if", "self", ".", "num_class", "==", "2", "else", "'macro'", "\n", "self", ".", "data_format", "=", "'channels_first'", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "metrics", "=", "'accuracy'", "\n", "self", ".", "monitor", "=", "'val_loss'", "\n", "self", ".", "mode", "=", "'min'", "\n", "self", ".", "save_best_only", "=", "True", "\n", "self", ".", "save_weight_only", "=", "True", "\n", "self", ".", "seed", "=", "1234", "\n", "self", ".", "class_balancing", "=", "False", "\n", "self", ".", "class_weight", "=", "None", "\n", "\n", "for", "k", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "\n", "", "if", "self", ".", "data_format", "==", "'channels_first'", ":", "\n", "            ", "self", ".", "Chans", "=", "self", ".", "input_shape", "[", "1", "]", "\n", "self", ".", "Samples", "=", "self", ".", "input_shape", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "Chans", "=", "self", ".", "input_shape", "[", "0", "]", "\n", "self", ".", "Samples", "=", "self", ".", "input_shape", "[", "1", "]", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "tf", ".", "random", ".", "set_seed", "(", "self", ".", "seed", ")", "\n", "K", ".", "set_image_data_format", "(", "self", ".", "data_format", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "log_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build": [[86, 149], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm", "tensorflow.keras.constraints.max_norm"], "methods", ["None"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Keras implementation of the Deep Convolutional Network as described in\n        Schirrmeister et. al. (2017), Human Brain Mapping.\n\n        This implementation assumes the input is a 2-second EEG signal sampled at\n        128Hz, as opposed to signals sampled at 250Hz as described in the original\n        paper. We also perform temporal convolutions of length (1, 5) as opposed\n        to (1, 10) due to this sampling rate difference.\n\n        Note that we use the max_norm constraint on all convolutional layers, as\n        well as the classification layer. We also change the defaults for the\n        BatchNormalization layer. We used this based on a personal communication\n        with the original authors.\n\n                          ours        original paper\n        pool_size        1, 2        1, 3\n        strides          1, 2        1, 3\n        conv filters     1, 5        1, 10\n\n        Note that this implementation has not been verified by the original\n        authors.\n\n        \"\"\"", "\n", "\n", "# start the model", "\n", "input_main", "=", "Input", "(", "self", ".", "input_shape", ")", "\n", "block1", "=", "Conv2D", "(", "25", ",", "(", "1", ",", "5", ")", ",", "\n", "input_shape", "=", "(", "self", ".", "input_shape", ")", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "input_main", ")", "\n", "block1", "=", "Conv2D", "(", "25", ",", "(", "self", ".", "Chans", ",", "1", ")", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "block1", ")", "\n", "block1", "=", "BatchNormalization", "(", "axis", "=", "1", ",", "epsilon", "=", "1e-05", ",", "momentum", "=", "0.1", ")", "(", "block1", ")", "\n", "block1", "=", "Activation", "(", "'elu'", ")", "(", "block1", ")", "\n", "block1", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "(", "1", ",", "2", ")", ")", "(", "block1", ")", "\n", "block1", "=", "Dropout", "(", "self", ".", "dropout_rate", ")", "(", "block1", ")", "\n", "\n", "block2", "=", "Conv2D", "(", "50", ",", "(", "1", ",", "5", ")", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "block1", ")", "\n", "block2", "=", "BatchNormalization", "(", "axis", "=", "1", ",", "epsilon", "=", "1e-05", ",", "momentum", "=", "0.1", ")", "(", "block2", ")", "\n", "block2", "=", "Activation", "(", "'elu'", ")", "(", "block2", ")", "\n", "block2", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "(", "1", ",", "2", ")", ")", "(", "block2", ")", "\n", "block2", "=", "Dropout", "(", "self", ".", "dropout_rate", ")", "(", "block2", ")", "\n", "\n", "block3", "=", "Conv2D", "(", "100", ",", "(", "1", ",", "5", ")", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "block2", ")", "\n", "block3", "=", "BatchNormalization", "(", "axis", "=", "1", ",", "epsilon", "=", "1e-05", ",", "momentum", "=", "0.1", ")", "(", "block3", ")", "\n", "block3", "=", "Activation", "(", "'elu'", ")", "(", "block3", ")", "\n", "block3", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "(", "1", ",", "2", ")", ")", "(", "block3", ")", "\n", "block3", "=", "Dropout", "(", "self", ".", "dropout_rate", ")", "(", "block3", ")", "\n", "\n", "block4", "=", "Conv2D", "(", "200", ",", "(", "1", ",", "5", ")", ",", "\n", "kernel_constraint", "=", "max_norm", "(", "2.", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "(", "block3", ")", "\n", "block4", "=", "BatchNormalization", "(", "axis", "=", "1", ",", "epsilon", "=", "1e-05", ",", "momentum", "=", "0.1", ")", "(", "block4", ")", "\n", "block4", "=", "Activation", "(", "'elu'", ")", "(", "block4", ")", "\n", "block4", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "(", "1", ",", "2", ")", ")", "(", "block4", ")", "\n", "block4", "=", "Dropout", "(", "self", ".", "dropout_rate", ")", "(", "block4", ")", "\n", "\n", "flatten", "=", "Flatten", "(", ")", "(", "block4", ")", "\n", "\n", "dense", "=", "Dense", "(", "self", ".", "num_class", ",", "kernel_constraint", "=", "max_norm", "(", "0.5", ")", ")", "(", "flatten", ")", "\n", "softmax", "=", "Activation", "(", "'softmax'", ")", "(", "dense", ")", "\n", "\n", "return", "Model", "(", "inputs", "=", "input_main", ",", "outputs", "=", "softmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit": [[150, 186], ["tensorflow.keras.callbacks.CSVLogger", "min2net.utils.TimeHistory", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.ReduceLROnPlateau", "tensorflow.keras.callbacks.EarlyStopping", "DeepConvNet.DeepConvNet.build", "DeepConvNet.DeepConvNet.compile", "DeepConvNet.DeepConvNet.summary", "DeepConvNet.DeepConvNet.fit", "Exception", "min2net.utils.compute_class_weight", "Exception", "str", "str"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.compute_class_weight"], ["", "def", "fit", "(", "self", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", ":", "\n", "\n", "        ", "if", "X_train", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_train` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_train", ".", "ndim", ")", ")", "\n", "", "elif", "X_val", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_val` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_val", ".", "ndim", ")", ")", "\n", "\n", "", "self", ".", "input_shape", "=", "X_train", ".", "shape", "[", "1", ":", "]", "\n", "if", "self", ".", "data_format", "==", "'channels_first'", ":", "\n", "            ", "self", ".", "Chans", "=", "self", ".", "input_shape", "[", "1", "]", "\n", "self", ".", "Samples", "=", "self", ".", "input_shape", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "Chans", "=", "self", ".", "input_shape", "[", "0", "]", "\n", "self", ".", "Samples", "=", "self", ".", "input_shape", "[", "1", "]", "\n", "\n", "", "csv_logger", "=", "CSVLogger", "(", "self", ".", "csv_dir", ")", "\n", "time_callback", "=", "TimeHistory", "(", "self", ".", "time_log", ")", "\n", "checkpointer", "=", "ModelCheckpoint", "(", "monitor", "=", "self", ".", "monitor", ",", "filepath", "=", "self", ".", "weights_dir", ",", "verbose", "=", "self", ".", "verbose", ",", "\n", "save_best_only", "=", "self", ".", "save_best_only", ",", "save_weight_only", "=", "self", ".", "save_weight_only", ")", "\n", "reduce_lr", "=", "ReduceLROnPlateau", "(", "monitor", "=", "self", ".", "monitor", ",", "patience", "=", "self", ".", "patience", ",", "factor", "=", "self", ".", "factor", ",", "mode", "=", "self", ".", "mode", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "min_lr", "=", "self", ".", "min_lr", ")", "\n", "es", "=", "EarlyStopping", "(", "monitor", "=", "self", ".", "monitor", ",", "mode", "=", "self", ".", "mode", ",", "verbose", "=", "self", ".", "verbose", ",", "patience", "=", "self", ".", "es_patience", ")", "\n", "\n", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "self", ".", "metrics", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "if", "self", ".", "class_balancing", ":", "# compute_class_weight if class_balancing is True", "\n", "            ", "self", ".", "class_weight", "=", "compute_class_weight", "(", "y_train", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "class_weight", "=", "None", "\n", "\n", "", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "self", ".", "shuffle", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "validation_data", "=", "(", "X_val", ",", "y_val", ")", ",", "class_weight", "=", "self", ".", "class_weight", ",", "\n", "callbacks", "=", "[", "checkpointer", ",", "csv_logger", ",", "reduce_lr", ",", "es", ",", "time_callback", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict": [[187, 211], ["DeepConvNet.DeepConvNet.build", "DeepConvNet.DeepConvNet.load_weights", "DeepConvNet.DeepConvNet.compile", "time.time", "DeepConvNet.DeepConvNet.predict", "time.time", "DeepConvNet.DeepConvNet.evaluate", "numpy.argmax", "print", "print", "sklearn.metrics.f1_score", "Exception", "sklearn.metrics.classification_report", "str"], "methods", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.build", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict"], ["", "def", "predict", "(", "self", ",", "X_test", ",", "y_test", ")", ":", "\n", "\n", "        ", "if", "X_test", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "Exception", "(", "'ValueError: `X_test` is incompatible: expected ndim=4, found ndim='", "+", "str", "(", "X_test", ".", "ndim", ")", ")", "\n", "\n", "", "model", "=", "self", ".", "build", "(", ")", "\n", "model", ".", "load_weights", "(", "self", ".", "weights_dir", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "self", ".", "metrics", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "y_pred", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "loss", ",", "accuracy", "=", "model", ".", "evaluate", "(", "x", "=", "X_test", ",", "y", "=", "y_test", ",", "batch_size", "=", "self", ".", "batch_size", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "y_pred_argm", "=", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "1", ")", "\n", "print", "(", "classification_report", "(", "y_test", ",", "y_pred_argm", ")", ")", "\n", "print", "(", "\"F1-score is computed based on {}\"", ".", "format", "(", "self", ".", "f1_average", ")", ")", "\n", "f1", "=", "f1_score", "(", "y_test", ",", "y_pred_argm", ",", "average", "=", "self", ".", "f1_average", ")", "\n", "evaluation", "=", "{", "'loss'", ":", "loss", ",", "\n", "'accuracy'", ":", "accuracy", ",", "\n", "'f1-score'", ":", "f1", ",", "\n", "'prediction_time'", ":", "end", "-", "start", "}", "\n", "Y", "=", "{", "'y_true'", ":", "y_test", ",", "\n", "'y_pred'", ":", "y_pred_argm", "}", "\n", "return", "Y", ",", "evaluation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.experiments.train_DeepConvNet_k-fold-CV.k_fold_cross_validation": [[18, 71], ["min2net.utils.DataLoader", "range", "numpy.savez", "print", "min2net.model.DeepConvNet", "min2net.utils.DataLoader.load_train_set", "min2net.utils.DataLoader.load_val_set", "min2net.utils.DataLoader.load_test_set", "min2net.model.DeepConvNet.fit", "min2net.model.DeepConvNet.predict", "min2net.utils.write_log", "y_true.append", "y_pred.append", "tensorflow.keras.backend.clear_session", "min2net.utils.write_log", "numpy.array", "numpy.array", "tensorflow.keras.optimizers.Adam", "evaluation.values", "evaluation.keys"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_train_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_val_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_test_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log"], ["def", "k_fold_cross_validation", "(", "subject", ")", ":", "\n", "# create object of DataLoader", "\n", "    ", "loader", "=", "DataLoader", "(", "dataset", "=", "args", ".", "dataset", ",", "\n", "train_type", "=", "args", ".", "train_type", ",", "\n", "subject", "=", "subject", ",", "\n", "data_format", "=", "data_format", ",", "\n", "data_type", "=", "data_type", ",", "\n", "dataset_path", "=", "args", ".", "data_path", ")", "\n", "\n", "y_true", ",", "y_pred", "=", "[", "]", ",", "[", "]", "\n", "for", "fold", "in", "range", "(", "1", ",", "n_folds", "+", "1", ")", ":", "\n", "\n", "        ", "model_name", "=", "'S{:03d}_fold{:02d}'", ".", "format", "(", "subject", ",", "fold", ")", "\n", "model", "=", "DeepConvNet", "(", "input_shape", "=", "input_shape", ",", "\n", "class_balancing", "=", "True", ",", "\n", "f1_average", "=", "'binary'", ",", "\n", "num_class", "=", "num_class", ",", "\n", "loss", "=", "'sparse_categorical_crossentropy'", ",", "\n", "epochs", "=", "epochs", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "optimizer", "=", "Adam", "(", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "min_lr", "=", "min_lr", ",", "\n", "factor", "=", "factor", ",", "\n", "patience", "=", "patience", ",", "\n", "es_patience", "=", "es_patience", ",", "\n", "log_path", "=", "log_path", ",", "\n", "model_name", "=", "model_name", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "\n", "# load dataset", "\n", "X_train", ",", "y_train", "=", "loader", ".", "load_train_set", "(", "fold", "=", "fold", ")", "\n", "X_val", ",", "y_val", "=", "loader", ".", "load_val_set", "(", "fold", "=", "fold", ")", "\n", "X_test", ",", "y_test", "=", "loader", ".", "load_test_set", "(", "fold", "=", "fold", ")", "\n", "\n", "# train and test using DeepConvNet", "\n", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", "\n", "Y", ",", "evaluation", "=", "model", ".", "predict", "(", "X_test", ",", "y_test", ")", "\n", "\n", "# logging", "\n", "csv_file", "=", "log_path", "+", "'/S{:03d}_all_results.csv'", ".", "format", "(", "subject", ")", "\n", "if", "fold", "==", "1", ":", "\n", "            ", "write_log", "(", "csv_file", ",", "data", "=", "evaluation", ".", "keys", "(", ")", ",", "mode", "=", "'w'", ")", "\n", "", "write_log", "(", "csv_file", ",", "data", "=", "evaluation", ".", "values", "(", ")", ",", "mode", "=", "'a'", ")", "\n", "y_true", ".", "append", "(", "Y", "[", "'y_true'", "]", ")", "\n", "y_pred", ".", "append", "(", "Y", "[", "'y_pred'", "]", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "\n", "# writing results", "\n", "", "np", ".", "savez", "(", "log_path", "+", "'/S{:03d}_Y_results.npz'", ".", "format", "(", "subject", ")", ",", "\n", "y_true", "=", "np", ".", "array", "(", "y_true", ")", ",", "\n", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", ")", "\n", "print", "(", "'------------------------- S{:03d} Done--------------------------'", ".", "format", "(", "subject", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.experiments.train_FBCSP-SVM_k-fold-CV.k_fold_cross_validation": [[15, 55], ["min2net.utils.DataLoader", "range", "numpy.savez", "print", "min2net.model.SVM", "min2net.utils.DataLoader.load_train_set", "min2net.utils.DataLoader.load_val_set", "min2net.utils.DataLoader.load_test_set", "min2net.model.SVM.fit", "min2net.model.SVM.predict", "min2net.utils.write_log", "y_true.append", "y_pred.append", "min2net.utils.write_log", "numpy.array", "numpy.array", "evaluation.values", "evaluation.keys"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_train_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_val_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_test_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log"], ["def", "k_fold_cross_validation", "(", "subject", ")", ":", "\n", "# create object of DataLoader", "\n", "    ", "loader", "=", "DataLoader", "(", "dataset", "=", "args", ".", "dataset", ",", "\n", "train_type", "=", "args", ".", "train_type", ",", "\n", "subject", "=", "subject", ",", "\n", "data_format", "=", "data_format", ",", "\n", "data_type", "=", "data_type", ",", "\n", "dataset_path", "=", "args", ".", "data_path", ")", "\n", "\n", "y_true", ",", "y_pred", "=", "[", "]", ",", "[", "]", "\n", "for", "fold", "in", "range", "(", "1", ",", "n_folds", "+", "1", ")", ":", "\n", "\n", "        ", "model_name", "=", "'SVM_S{:03d}_fold{:02d}'", ".", "format", "(", "subject", ",", "fold", ")", "\n", "svm", "=", "SVM", "(", "log_path", "=", "log_path", ",", "\n", "model_name", "=", "model_name", ",", "\n", "num_class", "=", "num_class", ",", "\n", "tuned_parameters", "=", "tuned_parameters", ")", "\n", "\n", "# load dataset", "\n", "X_train", ",", "y_train", "=", "loader", ".", "load_train_set", "(", "fold", "=", "fold", ")", "\n", "X_val", ",", "y_val", "=", "loader", ".", "load_val_set", "(", "fold", "=", "fold", ")", "\n", "X_test", ",", "y_test", "=", "loader", ".", "load_test_set", "(", "fold", "=", "fold", ")", "\n", "\n", "# train and test using SVM", "\n", "svm", ".", "fit", "(", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", "\n", "Y", ",", "evaluation", "=", "svm", ".", "predict", "(", "X_test", ",", "y_test", ")", "\n", "\n", "# logging", "\n", "csv_file", "=", "log_path", "+", "'/S{:03d}_all_results.csv'", ".", "format", "(", "subject", ")", "\n", "if", "fold", "==", "1", ":", "\n", "            ", "write_log", "(", "csv_file", ",", "data", "=", "evaluation", ".", "keys", "(", ")", ",", "mode", "=", "'w'", ")", "\n", "", "write_log", "(", "csv_file", ",", "data", "=", "evaluation", ".", "values", "(", ")", ",", "mode", "=", "'a'", ")", "\n", "y_true", ".", "append", "(", "Y", "[", "'y_true'", "]", ")", "\n", "y_pred", ".", "append", "(", "Y", "[", "'y_pred'", "]", ")", "\n", "\n", "# writing file", "\n", "", "np", ".", "savez", "(", "log_path", "+", "'/S{:03d}_Y_results.npz'", ".", "format", "(", "subject", ")", ",", "\n", "y_true", "=", "np", ".", "array", "(", "y_true", ")", ",", "\n", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", ")", "\n", "print", "(", "'------------------------- S{:03d} Done--------------------------'", ".", "format", "(", "subject", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.experiments.train_MIN2Net_k-fold-CV.k_fold_cross_validation": [[20, 77], ["min2net.utils.DataLoader", "range", "numpy.savez", "numpy.save", "print", "min2net.model.MIN2Net", "min2net.utils.DataLoader.load_train_set", "min2net.utils.DataLoader.load_val_set", "min2net.utils.DataLoader.load_test_set", "min2net.model.MIN2Net.fit", "min2net.model.MIN2Net.predict", "min2net.utils.write_log", "y_true.append", "y_pred.append", "y_pred_decoder.append", "tensorflow.keras.backend.clear_session", "numpy.array", "min2net.utils.write_log", "numpy.array", "numpy.array", "tensorflow.keras.optimizers.Adam", "evaluation.values", "min2net.loss.triplet_loss", "evaluation.keys"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_train_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_val_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_test_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.loss.triplet_loss"], ["def", "k_fold_cross_validation", "(", "subject", ")", ":", "\n", "# create object of DataLoader", "\n", "    ", "loader", "=", "DataLoader", "(", "dataset", "=", "args", ".", "dataset", ",", "\n", "train_type", "=", "args", ".", "train_type", ",", "\n", "subject", "=", "subject", ",", "\n", "data_format", "=", "data_format", ",", "\n", "data_type", "=", "data_type", ",", "\n", "dataset_path", "=", "args", ".", "data_path", ")", "\n", "\n", "y_true", ",", "y_pred", ",", "y_pred_decoder", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "fold", "in", "range", "(", "1", ",", "n_folds", "+", "1", ")", ":", "\n", "\n", "        ", "model_name", "=", "'S{:03d}_fold{:02d}'", ".", "format", "(", "subject", ",", "fold", ")", "\n", "model", "=", "MIN2Net", "(", "input_shape", "=", "input_shape", ",", "\n", "class_balancing", "=", "True", ",", "\n", "f1_average", "=", "'binary'", ",", "\n", "num_class", "=", "num_class", ",", "\n", "loss", "=", "[", "mean_squared_error", ",", "triplet_loss", "(", "margin", "=", "args", ".", "margin", ")", ",", "'sparse_categorical_crossentropy'", "]", ",", "\n", "loss_weights", "=", "args", ".", "loss_weights", ",", "\n", "epochs", "=", "epochs", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "optimizer", "=", "Adam", "(", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "min_lr", "=", "min_lr", ",", "\n", "factor", "=", "factor", ",", "\n", "patience", "=", "patience", ",", "\n", "es_patience", "=", "es_patience", ",", "\n", "latent_dim", "=", "latent_dim", ",", "\n", "log_path", "=", "log_path", ",", "\n", "model_name", "=", "model_name", ")", "\n", "\n", "# load dataset", "\n", "X_train", ",", "y_train", "=", "loader", ".", "load_train_set", "(", "fold", "=", "fold", ")", "\n", "X_val", ",", "y_val", "=", "loader", ".", "load_val_set", "(", "fold", "=", "fold", ")", "\n", "X_test", ",", "y_test", "=", "loader", ".", "load_test_set", "(", "fold", "=", "fold", ")", "\n", "\n", "# train and test using MIN2Net", "\n", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", "\n", "Y", ",", "evaluation", "=", "model", ".", "predict", "(", "X_test", ",", "y_test", ")", "\n", "\n", "# logging", "\n", "csv_file", "=", "log_path", "+", "'/S{:03d}_all_results.csv'", ".", "format", "(", "subject", ")", "\n", "if", "fold", "==", "1", ":", "\n", "            ", "write_log", "(", "csv_file", ",", "data", "=", "evaluation", ".", "keys", "(", ")", ",", "mode", "=", "'w'", ")", "\n", "", "write_log", "(", "csv_file", ",", "data", "=", "evaluation", ".", "values", "(", ")", ",", "mode", "=", "'a'", ")", "\n", "y_true", ".", "append", "(", "Y", "[", "'y_true'", "]", ")", "\n", "y_pred", ".", "append", "(", "Y", "[", "'y_pred'", "]", ")", "\n", "y_pred_decoder", ".", "append", "(", "Y", "[", "'y_pred_decoder'", "]", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "\n", "# writing results", "\n", "", "np", ".", "savez", "(", "log_path", "+", "'/S{:03d}_Y_results.npz'", ".", "format", "(", "subject", ")", ",", "\n", "y_true", "=", "np", ".", "array", "(", "y_true", ")", ",", "\n", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", ")", "\n", "np", ".", "save", "(", "log_path", "+", "'/S{:03d}_Y_reconstruction.npy'", ".", "format", "(", "subject", ")", ",", "\n", "np", ".", "array", "(", "y_pred_decoder", ")", ")", "\n", "print", "(", "'------------------------- S{:03d} Done--------------------------'", ".", "format", "(", "subject", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.experiments.train_EEGNet_k-fold-CV.k_fold_cross_validation": [[18, 71], ["min2net.utils.DataLoader", "range", "numpy.savez", "print", "min2net.model.EEGNet", "min2net.utils.DataLoader.load_train_set", "min2net.utils.DataLoader.load_val_set", "min2net.utils.DataLoader.load_test_set", "min2net.model.EEGNet.fit", "min2net.model.EEGNet.predict", "min2net.utils.write_log", "y_true.append", "y_pred.append", "tensorflow.keras.backend.clear_session", "min2net.utils.write_log", "numpy.array", "numpy.array", "tensorflow.keras.optimizers.Adam", "evaluation.values", "evaluation.keys"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_train_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_val_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_test_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log"], ["def", "k_fold_cross_validation", "(", "subject", ")", ":", "\n", "# create object of DataLoader", "\n", "    ", "loader", "=", "DataLoader", "(", "dataset", "=", "args", ".", "dataset", ",", "\n", "train_type", "=", "args", ".", "train_type", ",", "\n", "subject", "=", "subject", ",", "\n", "data_format", "=", "data_format", ",", "\n", "data_type", "=", "data_type", ",", "\n", "dataset_path", "=", "args", ".", "data_path", ")", "\n", "\n", "y_true", ",", "y_pred", "=", "[", "]", ",", "[", "]", "\n", "for", "fold", "in", "range", "(", "1", ",", "n_folds", "+", "1", ")", ":", "\n", "\n", "        ", "model_name", "=", "'S{:03d}_fold{:02d}'", ".", "format", "(", "subject", ",", "fold", ")", "\n", "model", "=", "EEGNet", "(", "input_shape", "=", "input_shape", ",", "\n", "class_balancing", "=", "True", ",", "\n", "f1_average", "=", "'binary'", ",", "\n", "num_class", "=", "num_class", ",", "\n", "loss", "=", "'sparse_categorical_crossentropy'", ",", "\n", "epochs", "=", "epochs", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "optimizer", "=", "Adam", "(", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "min_lr", "=", "min_lr", ",", "\n", "factor", "=", "factor", ",", "\n", "patience", "=", "patience", ",", "\n", "es_patience", "=", "es_patience", ",", "\n", "log_path", "=", "log_path", ",", "\n", "model_name", "=", "model_name", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "\n", "# load dataset", "\n", "X_train", ",", "y_train", "=", "loader", ".", "load_train_set", "(", "fold", "=", "fold", ")", "\n", "X_val", ",", "y_val", "=", "loader", ".", "load_val_set", "(", "fold", "=", "fold", ")", "\n", "X_test", ",", "y_test", "=", "loader", ".", "load_test_set", "(", "fold", "=", "fold", ")", "\n", "\n", "# train and test using EEGNet", "\n", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", "\n", "Y", ",", "evaluation", "=", "model", ".", "predict", "(", "X_test", ",", "y_test", ")", "\n", "\n", "# logging", "\n", "csv_file", "=", "log_path", "+", "'/S{:03d}_all_results.csv'", ".", "format", "(", "subject", ")", "\n", "if", "fold", "==", "1", ":", "\n", "            ", "write_log", "(", "csv_file", ",", "data", "=", "evaluation", ".", "keys", "(", ")", ",", "mode", "=", "'w'", ")", "\n", "", "write_log", "(", "csv_file", ",", "data", "=", "evaluation", ".", "values", "(", ")", ",", "mode", "=", "'a'", ")", "\n", "y_true", ".", "append", "(", "Y", "[", "'y_true'", "]", ")", "\n", "y_pred", ".", "append", "(", "Y", "[", "'y_pred'", "]", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "\n", "# writing results", "\n", "", "np", ".", "savez", "(", "log_path", "+", "'/S{:03d}_Y_results.npz'", ".", "format", "(", "subject", ")", ",", "\n", "y_true", "=", "np", ".", "array", "(", "y_true", ")", ",", "\n", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", ")", "\n", "print", "(", "'------------------------- S{:03d} Done--------------------------'", ".", "format", "(", "subject", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iobt-vistec_min2net.experiments.train_SpectralSpatialCNN_k-fold-CV.k_fold_cross_validation": [[17, 70], ["min2net.utils.DataLoader", "range", "numpy.savez", "print", "min2net.model.SpectralSpatialCNN", "min2net.utils.DataLoader.load_train_set", "min2net.utils.DataLoader.load_val_set", "min2net.utils.DataLoader.load_test_set", "min2net.model.SpectralSpatialCNN.fit", "min2net.model.SpectralSpatialCNN.predict", "min2net.utils.write_log", "y_true.append", "y_pred.append", "tensorflow.keras.backend.clear_session", "min2net.utils.write_log", "numpy.array", "numpy.array", "tensorflow.keras.optimizers.Adam", "evaluation.values", "evaluation.keys"], "function", ["home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_train_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_val_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.DataLoader.load_test_set", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.fit", "home.repos.pwc.inspect_result.iobt-vistec_min2net.model.DeepConvNet.DeepConvNet.predict", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log", "home.repos.pwc.inspect_result.iobt-vistec_min2net.min2net.utils.write_log"], ["def", "k_fold_cross_validation", "(", "subject", ")", ":", "\n", "# create object of DataLoader", "\n", "    ", "loader", "=", "DataLoader", "(", "dataset", "=", "args", ".", "dataset", ",", "\n", "train_type", "=", "args", ".", "train_type", ",", "\n", "subject", "=", "subject", ",", "\n", "data_format", "=", "data_format", ",", "\n", "data_type", "=", "data_type", ",", "\n", "dataset_path", "=", "args", ".", "data_path", ")", "\n", "\n", "y_true", ",", "y_pred", "=", "[", "]", ",", "[", "]", "\n", "for", "fold", "in", "range", "(", "1", ",", "n_folds", "+", "1", ")", ":", "\n", "\n", "        ", "model_name", "=", "'S{:03d}_fold{:02d}'", ".", "format", "(", "subject", ",", "fold", ")", "\n", "model", "=", "SpectralSpatialCNN", "(", "input_shape", "=", "input_shape", ",", "\n", "class_balancing", "=", "True", ",", "\n", "f1_average", "=", "'binary'", ",", "\n", "num_class", "=", "num_class", ",", "\n", "loss", "=", "'sparse_categorical_crossentropy'", ",", "\n", "epochs", "=", "epochs", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "optimizer", "=", "Adam", "(", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "min_lr", "=", "min_lr", ",", "\n", "factor", "=", "factor", ",", "\n", "patience", "=", "patience", ",", "\n", "es_patience", "=", "es_patience", ",", "\n", "log_path", "=", "log_path", ",", "\n", "model_name", "=", "model_name", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "\n", "# load dataset", "\n", "X_train", ",", "y_train", "=", "loader", ".", "load_train_set", "(", "fold", "=", "fold", ")", "\n", "X_val", ",", "y_val", "=", "loader", ".", "load_val_set", "(", "fold", "=", "fold", ")", "\n", "X_test", ",", "y_test", "=", "loader", ".", "load_test_set", "(", "fold", "=", "fold", ")", "\n", "\n", "# train and test using SpectralSpatialCNN", "\n", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", "\n", "Y", ",", "evaluation", "=", "model", ".", "predict", "(", "X_test", ",", "y_test", ")", "\n", "\n", "# logging", "\n", "csv_file", "=", "log_path", "+", "'/S{:03d}_all_results.csv'", ".", "format", "(", "subject", ")", "\n", "if", "fold", "==", "1", ":", "\n", "            ", "write_log", "(", "csv_file", ",", "data", "=", "evaluation", ".", "keys", "(", ")", ",", "mode", "=", "'w'", ")", "\n", "", "write_log", "(", "csv_file", ",", "data", "=", "evaluation", ".", "values", "(", ")", ",", "mode", "=", "'a'", ")", "\n", "y_true", ".", "append", "(", "Y", "[", "'y_true'", "]", ")", "\n", "y_pred", ".", "append", "(", "Y", "[", "'y_pred'", "]", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "\n", "# writing results", "\n", "", "np", ".", "savez", "(", "log_path", "+", "'/S{:03d}_Y_results.npz'", ".", "format", "(", "subject", ")", ",", "\n", "y_true", "=", "np", ".", "array", "(", "y_true", ")", ",", "\n", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", ")", "\n", "print", "(", "'------------------------- S{:03d} Done--------------------------'", ".", "format", "(", "subject", ")", ")", "\n", "\n"]]}