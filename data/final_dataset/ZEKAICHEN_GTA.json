{"home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.EarlyStopping.__init__": [[20, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "patience", "=", "7", ",", "verbose", "=", "False", ",", "delta", "=", "0", ")", ":", "\n", "        ", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_loss_min", "=", "np", ".", "Inf", "\n", "self", ".", "delta", "=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.EarlyStopping.__call__": [[29, 43], ["tools.EarlyStopping.save_checkpoint", "print", "tools.EarlyStopping.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.EarlyStopping.save_checkpoint", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.EarlyStopping.save_checkpoint"], ["", "def", "__call__", "(", "self", ",", "val_loss", ",", "model", ",", "path", ")", ":", "\n", "        ", "score", "=", "-", "val_loss", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ",", "path", ")", "\n", "", "elif", "score", "<", "self", ".", "best_score", "+", "self", ".", "delta", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "print", "(", "f'EarlyStopping counter: {self.counter} out of {self.patience}'", ")", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ",", "path", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.EarlyStopping.save_checkpoint": [[44, 49], ["torch.save", "print", "model.state_dict"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "val_loss", ",", "model", ",", "path", ")", ":", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "f'Validation loss decreased ({self.val_loss_min:.6f} --> {val_loss:.6f}).  Saving model ...'", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "path", "+", "'/'", "+", "'checkpoint.pth'", ")", "\n", "self", ".", "val_loss_min", "=", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.StandardScaler.__init__": [[57, 60], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.StandardScaler.transform": [[61, 63], ["None"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "(", "data", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.StandardScaler.inverse_transform": [[64, 66], ["None"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "(", "data", "*", "self", ".", "std", ")", "+", "self", ".", "mean", "", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.adjust_learning_rate": [[4, 18], ["lr_adjust.keys", "print"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "# lr = args.learning_rate * (0.2 ** (epoch // 2))", "\n", "    ", "if", "args", ".", "lradj", "==", "'type1'", ":", "\n", "        ", "lr_adjust", "=", "{", "epoch", ":", "args", ".", "learning_rate", "*", "(", "0.5", "**", "(", "(", "epoch", "-", "1", ")", "//", "1", ")", ")", "}", "\n", "", "elif", "args", ".", "lradj", "==", "'type2'", ":", "\n", "        ", "lr_adjust", "=", "{", "\n", "2", ":", "5e-5", ",", "4", ":", "1e-5", ",", "6", ":", "5e-6", ",", "8", ":", "1e-6", ",", "\n", "10", ":", "5e-7", ",", "15", ":", "1e-7", ",", "20", ":", "5e-8", "\n", "}", "\n", "", "if", "epoch", "in", "lr_adjust", ".", "keys", "(", ")", ":", "\n", "        ", "lr", "=", "lr_adjust", "[", "epoch", "]", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "print", "(", "'Updating learning rate to {}'", ".", "format", "(", "lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.RSE": [[3, 5], ["numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "true.mean"], "function", ["None"], ["def", "RSE", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "true", "-", "pred", ")", "**", "2", ")", ")", "/", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "true", "-", "true", ".", "mean", "(", ")", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.CORR": [[6, 10], ["numpy.sqrt", "true.mean", "pred.mean", "true.mean", "pred.mean"], "function", ["None"], ["", "def", "CORR", "(", "pred", ",", "true", ")", ":", "\n", "    ", "u", "=", "(", "(", "true", "-", "true", ".", "mean", "(", "0", ")", ")", "*", "(", "pred", "-", "pred", ".", "mean", "(", "0", ")", ")", ")", ".", "sum", "(", "0", ")", "\n", "d", "=", "np", ".", "sqrt", "(", "(", "(", "true", "-", "true", ".", "mean", "(", "0", ")", ")", "**", "2", "*", "(", "pred", "-", "pred", ".", "mean", "(", "0", ")", ")", "**", "2", ")", ".", "sum", "(", "0", ")", ")", "\n", "return", "(", "u", "/", "d", ")", ".", "mean", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.MAE": [[11, 13], ["numpy.mean", "numpy.abs"], "function", ["None"], ["", "def", "MAE", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "np", ".", "abs", "(", "pred", "-", "true", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.MSE": [[14, 16], ["numpy.mean"], "function", ["None"], ["", "def", "MSE", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "(", "pred", "-", "true", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.RMSE": [[17, 19], ["numpy.sqrt", "metrics.MSE"], "function", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.MSE"], ["", "def", "RMSE", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "MSE", "(", "pred", ",", "true", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.MAPE": [[20, 22], ["numpy.mean", "numpy.abs"], "function", ["None"], ["", "def", "MAPE", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "np", ".", "abs", "(", "(", "pred", "-", "true", ")", "/", "true", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.MSPE": [[23, 25], ["numpy.mean", "numpy.square"], "function", ["None"], ["", "def", "MSPE", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "np", ".", "square", "(", "(", "pred", "-", "true", ")", "/", "true", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.metric": [[26, 34], ["metrics.MAE", "metrics.MSE", "metrics.RMSE", "metrics.MAPE", "metrics.MSPE"], "function", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.MAE", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.MSE", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.RMSE", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.MAPE", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.MSPE"], ["", "def", "metric", "(", "pred", ",", "true", ")", ":", "\n", "    ", "mae", "=", "MAE", "(", "pred", ",", "true", ")", "\n", "mse", "=", "MSE", "(", "pred", ",", "true", ")", "\n", "rmse", "=", "RMSE", "(", "pred", ",", "true", ")", "\n", "mape", "=", "MAPE", "(", "pred", ",", "true", ")", "\n", "mspe", "=", "MSPE", "(", "pred", ",", "true", ")", "\n", "\n", "return", "mae", ",", "mse", ",", "rmse", ",", "mape", ",", "mspe", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.SPOT.__init__": [[48, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "q", "=", "1e-4", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n\t    Parameters\n\t    ----------\n\t    q\n\t\t    Detection level (risk)\n\t\n\t    Returns\n\t    ----------\n    \tSPOT object\n        \"\"\"", "\n", "self", ".", "proba", "=", "q", "\n", "self", ".", "extreme_quantile", "=", "None", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "init_data", "=", "None", "\n", "self", ".", "init_threshold", "=", "None", "\n", "self", ".", "peaks", "=", "None", "\n", "self", ".", "n", "=", "0", "\n", "self", ".", "Nt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.SPOT.__str__": [[69, 96], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "s", "+=", "'Streaming Peaks-Over-Threshold Object\\n'", "\n", "s", "+=", "'Detection level q = %s\\n'", "%", "self", ".", "proba", "\n", "if", "self", ".", "data", "is", "not", "None", ":", "\n", "            ", "s", "+=", "'Data imported : Yes\\n'", "\n", "s", "+=", "'\\t initialization  : %s values\\n'", "%", "self", ".", "init_data", ".", "size", "\n", "s", "+=", "'\\t stream : %s values\\n'", "%", "self", ".", "data", ".", "size", "\n", "", "else", ":", "\n", "            ", "s", "+=", "'Data imported : No\\n'", "\n", "return", "s", "\n", "\n", "", "if", "self", ".", "n", "==", "0", ":", "\n", "            ", "s", "+=", "'Algorithm initialized : No\\n'", "\n", "", "else", ":", "\n", "            ", "s", "+=", "'Algorithm initialized : Yes\\n'", "\n", "s", "+=", "'\\t initial threshold : %s\\n'", "%", "self", ".", "init_threshold", "\n", "\n", "r", "=", "self", ".", "n", "-", "self", ".", "init_data", ".", "size", "\n", "if", "r", ">", "0", ":", "\n", "                ", "s", "+=", "'Algorithm run : Yes\\n'", "\n", "s", "+=", "'\\t number of observations : %s (%.2f %%)\\n'", "%", "(", "r", ",", "100", "*", "r", "/", "self", ".", "n", ")", "\n", "", "else", ":", "\n", "                ", "s", "+=", "'\\t number of peaks  : %s\\n'", "%", "self", ".", "Nt", "\n", "s", "+=", "'\\t extreme quantile : %s\\n'", "%", "self", ".", "extreme_quantile", "\n", "s", "+=", "'Algorithm run : No\\n'", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.SPOT.fit": [[98, 137], ["isinstance", "isinstance", "numpy.array", "isinstance", "numpy.array", "isinstance", "isinstance", "isinstance", "print", "isinstance", "type", "int", "print", "isinstance"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "init_data", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Import data to SPOT object\n        \n        Parameters\n\t    ----------\n\t    init_data : list, numpy.array or pandas.Series\n\t\t    initial batch to calibrate the algorithm\n            \n        data : numpy.array\n\t\t    data for the run (list, np.array or pd.series)\n\t\n        \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "data", "=", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "self", ".", "data", "=", "data", ".", "values", "\n", "", "else", ":", "\n", "            ", "print", "(", "'This data format (%s) is not supported'", "%", "type", "(", "data", ")", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "init_data", ",", "list", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "np", ".", "array", "(", "init_data", ")", "\n", "", "elif", "isinstance", "(", "init_data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "init_data", "\n", "", "elif", "isinstance", "(", "init_data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "init_data", ".", "values", "\n", "", "elif", "isinstance", "(", "init_data", ",", "int", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "self", ".", "data", "[", ":", "init_data", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "init_data", ":", "]", "\n", "", "elif", "isinstance", "(", "init_data", ",", "float", ")", "&", "(", "init_data", "<", "1", ")", "&", "(", "init_data", ">", "0", ")", ":", "\n", "            ", "r", "=", "int", "(", "init_data", "*", "data", ".", "size", ")", "\n", "self", ".", "init_data", "=", "self", ".", "data", "[", ":", "r", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "r", ":", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "'The initial data cannot be set'", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.SPOT.add": [[138, 159], ["isinstance", "numpy.append", "numpy.array", "isinstance", "isinstance", "print", "type"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        This function allows to append data to the already fitted data\n        \n        Parameters\n\t    ----------\n\t    data : list, numpy.array, pandas.Series\n\t\t    data to append\n        \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "data", "=", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "data", "=", "data", ".", "values", "\n", "", "else", ":", "\n", "            ", "print", "(", "'This data format (%s) is not supported'", "%", "type", "(", "data", ")", ")", "\n", "return", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "append", "(", "self", ".", "data", ",", "data", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.SPOT.initialize": [[160, 199], ["numpy.sort", "spot.SPOT._grimshaw", "spot.SPOT._quantile", "math.floor", "print", "print", "print", "print", "print", "print", "print", "print", "int", "str", "str", "str", "chr", "chr"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile"], ["", "def", "initialize", "(", "self", ",", "level", "=", "0.98", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Run the calibration (initialization) step\n        \n        Parameters\n\t    ----------\n        level : float\n            (default 0.98) Probability associated with the initial threshold t \n\t    verbose : bool\n\t\t    (default = True) If True, gives details about the batch initialization\n        \"\"\"", "\n", "level", "=", "level", "-", "floor", "(", "level", ")", "\n", "\n", "n_init", "=", "self", ".", "init_data", ".", "size", "\n", "\n", "S", "=", "np", ".", "sort", "(", "self", ".", "init_data", ")", "# we sort X to get the empirical quantile", "\n", "self", ".", "init_threshold", "=", "S", "[", "int", "(", "level", "*", "n_init", ")", "]", "# t is fixed for the whole algorithm", "\n", "\n", "# initial peaks", "\n", "self", ".", "peaks", "=", "self", ".", "init_data", "[", "self", ".", "init_data", ">", "self", ".", "init_threshold", "]", "-", "self", ".", "init_threshold", "\n", "self", ".", "Nt", "=", "self", ".", "peaks", ".", "size", "\n", "self", ".", "n", "=", "n_init", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Initial threshold : %s'", "%", "self", ".", "init_threshold", ")", "\n", "print", "(", "'Number of peaks : %s'", "%", "self", ".", "Nt", ")", "\n", "print", "(", "'Grimshaw maximum log-likelihood estimation ... '", ",", "end", "=", "''", ")", "\n", "\n", "", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", ")", "\n", "self", ".", "extreme_quantile", "=", "self", ".", "_quantile", "(", "g", ",", "s", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'[done]'", ")", "\n", "print", "(", "'\\t'", "+", "chr", "(", "0x03B3", ")", "+", "' = '", "+", "str", "(", "g", ")", ")", "\n", "print", "(", "'\\t'", "+", "chr", "(", "0x03C3", ")", "+", "' = '", "+", "str", "(", "s", ")", ")", "\n", "print", "(", "'\\tL = '", "+", "str", "(", "l", ")", ")", "\n", "print", "(", "'Extreme quantile (probability = %s): %s'", "%", "(", "self", ".", "proba", ",", "self", ".", "extreme_quantile", ")", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.SPOT._rootsFinder": [[203, 249], ["scipy.optimize.minimize", "numpy.round", "numpy.unique", "numpy.arange", "numpy.zeros", "numpy.random.uniform", "f", "spot.SPOT._rootsFinder.objFun"], "methods", ["None"], ["", "def", "_rootsFinder", "(", "fun", ",", "jac", ",", "bounds", ",", "npoints", ",", "method", ")", ":", "\n", "        ", "\"\"\"\n        Find possible roots of a scalar function\n        \n        Parameters\n        ----------\n        fun : function\n\t\t    scalar function \n        jac : function\n            first order derivative of the function  \n        bounds : tuple\n            (min,max) interval for the roots search    \n        npoints : int\n            maximum number of roots to output      \n        method : str\n            'regular' : regular sample of the search interval, 'random' : uniform (distribution) sample of the search interval\n        \n        Returns\n        ----------\n        numpy.array\n            possible roots of the function\n        \"\"\"", "\n", "if", "method", "==", "'regular'", ":", "\n", "            ", "step", "=", "(", "bounds", "[", "1", "]", "-", "bounds", "[", "0", "]", ")", "/", "(", "npoints", "+", "1", ")", "\n", "X0", "=", "np", ".", "arange", "(", "bounds", "[", "0", "]", "+", "step", ",", "bounds", "[", "1", "]", ",", "step", ")", "\n", "", "elif", "method", "==", "'random'", ":", "\n", "            ", "X0", "=", "np", ".", "random", ".", "uniform", "(", "bounds", "[", "0", "]", ",", "bounds", "[", "1", "]", ",", "npoints", ")", "\n", "\n", "", "def", "objFun", "(", "X", ",", "f", ",", "jac", ")", ":", "\n", "            ", "g", "=", "0", "\n", "j", "=", "np", ".", "zeros", "(", "X", ".", "shape", ")", "\n", "i", "=", "0", "\n", "for", "x", "in", "X", ":", "\n", "                ", "fx", "=", "f", "(", "x", ")", "\n", "g", "=", "g", "+", "fx", "**", "2", "\n", "j", "[", "i", "]", "=", "2", "*", "fx", "*", "jac", "(", "x", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "return", "g", ",", "j", "\n", "\n", "", "opt", "=", "minimize", "(", "lambda", "X", ":", "objFun", "(", "X", ",", "fun", ",", "jac", ")", ",", "X0", ",", "\n", "method", "=", "'L-BFGS-B'", ",", "\n", "jac", "=", "True", ",", "bounds", "=", "[", "bounds", "]", "*", "len", "(", "X0", ")", ")", "\n", "\n", "X", "=", "opt", ".", "x", "\n", "np", ".", "round", "(", "X", ",", "decimals", "=", "5", ")", "\n", "return", "np", ".", "unique", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.SPOT._log_likelihood": [[251, 275], ["math.log", "numpy.log().sum", "math.log", "Y.mean", "numpy.log"], "methods", ["None"], ["", "def", "_log_likelihood", "(", "Y", ",", "gamma", ",", "sigma", ")", ":", "\n", "        ", "\"\"\"\n        Compute the log-likelihood for the Generalized Pareto Distribution (\u03bc=0)\n        \n        Parameters\n        ----------\n        Y : numpy.array\n\t\t    observations\n        gamma : float\n            GPD index parameter\n        sigma : float\n            GPD scale parameter (>0)   \n        Returns\n        ----------\n        float\n            log-likelihood of the sample Y to be drawn from a GPD(\u03b3,\u03c3,\u03bc=0)\n        \"\"\"", "\n", "n", "=", "Y", ".", "size", "\n", "if", "gamma", "!=", "0", ":", "\n", "            ", "tau", "=", "gamma", "/", "sigma", "\n", "L", "=", "-", "n", "*", "log", "(", "sigma", ")", "-", "(", "1", "+", "(", "1", "/", "gamma", ")", ")", "*", "(", "np", ".", "log", "(", "1", "+", "tau", "*", "Y", ")", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "L", "=", "n", "*", "(", "1", "+", "log", "(", "Y", ".", "mean", "(", ")", ")", ")", "\n", "", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.SPOT._grimshaw": [[277, 356], ["spot.SPOT.peaks.min", "spot.SPOT.peaks.max", "spot.SPOT.peaks.mean", "spot.SPOT._rootsFinder", "spot.SPOT._rootsFinder", "numpy.concatenate", "spot.SPOT._log_likelihood", "numpy.mean", "spot.SPOT._grimshaw.u"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._rootsFinder", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._rootsFinder", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._log_likelihood"], ["", "def", "_grimshaw", "(", "self", ",", "epsilon", "=", "1e-8", ",", "n_points", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Compute the GPD parameters estimation with the Grimshaw's trick\n        \n        Parameters\n        ----------\n        epsilon : float\n\t\t    numerical parameter to perform (default : 1e-8)\n        n_points : int\n            maximum number of candidates for maximum likelihood (default : 10)\n        Returns\n        ----------\n        gamma_best,sigma_best,ll_best\n            gamma estimates, sigma estimates and corresponding log-likelihood\n        \"\"\"", "\n", "def", "u", "(", "s", ")", ":", "\n", "            ", "return", "1", "+", "np", ".", "log", "(", "s", ")", ".", "mean", "(", ")", "\n", "\n", "", "def", "v", "(", "s", ")", ":", "\n", "            ", "return", "np", ".", "mean", "(", "1", "/", "s", ")", "\n", "\n", "", "def", "w", "(", "Y", ",", "t", ")", ":", "\n", "            ", "s", "=", "1", "+", "t", "*", "Y", "\n", "us", "=", "u", "(", "s", ")", "\n", "vs", "=", "v", "(", "s", ")", "\n", "return", "us", "*", "vs", "-", "1", "\n", "\n", "", "def", "jac_w", "(", "Y", ",", "t", ")", ":", "\n", "            ", "s", "=", "1", "+", "t", "*", "Y", "\n", "us", "=", "u", "(", "s", ")", "\n", "vs", "=", "v", "(", "s", ")", "\n", "jac_us", "=", "(", "1", "/", "t", ")", "*", "(", "1", "-", "vs", ")", "\n", "jac_vs", "=", "(", "1", "/", "t", ")", "*", "(", "-", "vs", "+", "np", ".", "mean", "(", "1", "/", "s", "**", "2", ")", ")", "\n", "return", "us", "*", "jac_vs", "+", "vs", "*", "jac_us", "\n", "\n", "\n", "", "Ym", "=", "self", ".", "peaks", ".", "min", "(", ")", "\n", "YM", "=", "self", ".", "peaks", ".", "max", "(", ")", "\n", "Ymean", "=", "self", ".", "peaks", ".", "mean", "(", ")", "\n", "\n", "\n", "a", "=", "-", "1", "/", "YM", "\n", "if", "abs", "(", "a", ")", "<", "2", "*", "epsilon", ":", "\n", "            ", "epsilon", "=", "abs", "(", "a", ")", "/", "n_points", "\n", "\n", "", "a", "=", "a", "+", "epsilon", "\n", "b", "=", "2", "*", "(", "Ymean", "-", "Ym", ")", "/", "(", "Ymean", "*", "Ym", ")", "\n", "c", "=", "2", "*", "(", "Ymean", "-", "Ym", ")", "/", "(", "Ym", "**", "2", ")", "\n", "\n", "# We look for possible roots", "\n", "left_zeros", "=", "SPOT", ".", "_rootsFinder", "(", "lambda", "t", ":", "w", "(", "self", ".", "peaks", ",", "t", ")", ",", "\n", "lambda", "t", ":", "jac_w", "(", "self", ".", "peaks", ",", "t", ")", ",", "\n", "(", "a", "+", "epsilon", ",", "-", "epsilon", ")", ",", "\n", "n_points", ",", "'regular'", ")", "\n", "\n", "right_zeros", "=", "SPOT", ".", "_rootsFinder", "(", "lambda", "t", ":", "w", "(", "self", ".", "peaks", ",", "t", ")", ",", "\n", "lambda", "t", ":", "jac_w", "(", "self", ".", "peaks", ",", "t", ")", ",", "\n", "(", "b", ",", "c", ")", ",", "\n", "n_points", ",", "'regular'", ")", "\n", "\n", "# all the possible roots", "\n", "zeros", "=", "np", ".", "concatenate", "(", "(", "left_zeros", ",", "right_zeros", ")", ")", "\n", "\n", "# 0 is always a solution so we initialize with it", "\n", "gamma_best", "=", "0", "\n", "sigma_best", "=", "Ymean", "\n", "ll_best", "=", "SPOT", ".", "_log_likelihood", "(", "self", ".", "peaks", ",", "gamma_best", ",", "sigma_best", ")", "\n", "\n", "# we look for better candidates", "\n", "for", "z", "in", "zeros", ":", "\n", "            ", "gamma", "=", "u", "(", "1", "+", "z", "*", "self", ".", "peaks", ")", "-", "1", "\n", "sigma", "=", "gamma", "/", "z", "\n", "ll", "=", "SPOT", ".", "_log_likelihood", "(", "self", ".", "peaks", ",", "gamma", ",", "sigma", ")", "\n", "if", "ll", ">", "ll_best", ":", "\n", "                ", "gamma_best", "=", "gamma", "\n", "sigma_best", "=", "sigma", "\n", "ll_best", "=", "ll", "\n", "\n", "", "", "return", "gamma_best", ",", "sigma_best", ",", "ll_best", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.SPOT._quantile": [[359, 379], ["math.log", "pow"], "methods", ["None"], ["", "def", "_quantile", "(", "self", ",", "gamma", ",", "sigma", ")", ":", "\n", "        ", "\"\"\"\n        Compute the quantile at level 1-q\n        \n        Parameters\n        ----------\n        gamma : float\n\t\t    GPD parameter\n        sigma : float\n            GPD parameter\n        Returns\n        ----------\n        float\n            quantile at level 1-q for the GPD(\u03b3,\u03c3,\u03bc=0)\n        \"\"\"", "\n", "r", "=", "self", ".", "n", "*", "self", ".", "proba", "/", "self", ".", "Nt", "\n", "if", "gamma", "!=", "0", ":", "\n", "            ", "return", "self", ".", "init_threshold", "+", "(", "sigma", "/", "gamma", ")", "*", "(", "pow", "(", "r", ",", "-", "gamma", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "init_threshold", "-", "sigma", "*", "log", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.SPOT.run": [[381, 442], ["tqdm.tqdm", "print", "range", "th.append", "alarm.append", "numpy.append", "spot.SPOT._grimshaw", "spot.SPOT._quantile", "numpy.append", "spot.SPOT._grimshaw", "spot.SPOT._quantile"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile"], ["", "", "def", "run", "(", "self", ",", "with_alarm", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Run SPOT on the stream\n        \n        Parameters\n        ----------\n        with_alarm : bool\n\t\t    (default = True) If False, SPOT will adapt the threshold assuming \\\n            there is no abnormal values\n        Returns\n        ----------\n        dict\n            keys : 'thresholds' and 'alarms'\n            \n            'thresholds' contains the extreme quantiles and 'alarms' contains \\\n            the indexes of the values which have triggered alarms\n            \n        \"\"\"", "\n", "if", "(", "self", ".", "n", ">", "self", ".", "init_data", ".", "size", ")", ":", "\n", "            ", "print", "(", "'Warning : the algorithm seems to have already been run, you \\\n            should initialize before running again'", ")", "\n", "return", "{", "}", "\n", "\n", "# list of the thresholds", "\n", "", "th", "=", "[", "]", "\n", "alarm", "=", "[", "]", "\n", "# Loop over the stream", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "self", ".", "data", ".", "size", ")", ")", ":", "\n", "\n", "# If the observed value exceeds the current threshold (alarm case)", "\n", "            ", "if", "self", ".", "data", "[", "i", "]", ">", "self", ".", "extreme_quantile", ":", "\n", "# if we want to alarm, we put it in the alarm list", "\n", "                ", "if", "with_alarm", ":", "\n", "                    ", "alarm", ".", "append", "(", "i", ")", "\n", "# otherwise we add it in the peaks", "\n", "", "else", ":", "\n", "                    ", "self", ".", "peaks", "=", "np", ".", "append", "(", "self", ".", "peaks", ",", "self", ".", "data", "[", "i", "]", "-", "self", ".", "init_threshold", ")", "\n", "self", ".", "Nt", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", ")", "\n", "self", ".", "extreme_quantile", "=", "self", ".", "_quantile", "(", "g", ",", "s", ")", "\n", "\n", "# case where the value exceeds the initial threshold but not the alarm ones", "\n", "", "", "elif", "self", ".", "data", "[", "i", "]", ">", "self", ".", "init_threshold", ":", "\n", "# we add it in the peaks", "\n", "                    ", "self", ".", "peaks", "=", "np", ".", "append", "(", "self", ".", "peaks", ",", "self", ".", "data", "[", "i", "]", "-", "self", ".", "init_threshold", ")", "\n", "self", ".", "Nt", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", ")", "\n", "self", ".", "extreme_quantile", "=", "self", ".", "_quantile", "(", "g", ",", "s", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "n", "+=", "1", "\n", "\n", "\n", "", "th", ".", "append", "(", "self", ".", "extreme_quantile", ")", "# thresholds record", "\n", "\n", "", "return", "{", "'thresholds'", ":", "th", ",", "'alarms'", ":", "alarm", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.SPOT.plot": [[444, 480], ["range", "run_results.keys", "matplotlib.plot", "matplotlib.xlim", "matplotlib.plot", "fig.append", "matplotlib.scatter", "fig.append"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.plot", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.plot"], ["", "def", "plot", "(", "self", ",", "run_results", ",", "with_alarm", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Plot the results of given by the run\n        \n        Parameters\n        ----------\n        run_results : dict\n            results given by the 'run' method\n        with_alarm : bool\n\t\t    (default = True) If True, alarms are plotted.\n        Returns\n        ----------\n        list\n            list of the plots\n            \n        \"\"\"", "\n", "x", "=", "range", "(", "self", ".", "data", ".", "size", ")", "\n", "K", "=", "run_results", ".", "keys", "(", ")", "\n", "\n", "ts_fig", ",", "=", "plt", ".", "plot", "(", "x", ",", "self", ".", "data", ",", "color", "=", "air_force_blue", ")", "\n", "fig", "=", "[", "ts_fig", "]", "\n", "\n", "if", "'thresholds'", "in", "K", ":", "\n", "            ", "th", "=", "run_results", "[", "'thresholds'", "]", "\n", "th_fig", ",", "=", "plt", ".", "plot", "(", "x", ",", "th", ",", "color", "=", "deep_saffron", ",", "lw", "=", "2", ",", "ls", "=", "'dashed'", ")", "\n", "fig", ".", "append", "(", "th_fig", ")", "\n", "\n", "", "if", "with_alarm", "and", "(", "'alarms'", "in", "K", ")", ":", "\n", "            ", "alarm", "=", "run_results", "[", "'alarms'", "]", "\n", "al_fig", "=", "plt", ".", "scatter", "(", "alarm", ",", "self", ".", "data", "[", "alarm", "]", ",", "color", "=", "'red'", ")", "\n", "fig", ".", "append", "(", "al_fig", ")", "\n", "\n", "", "plt", ".", "xlim", "(", "(", "0", ",", "self", ".", "data", ".", "size", ")", ")", "\n", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.biSPOT.__init__": [[527, 551], ["dict.copy", "dict.copy", "dict.copy", "dict.copy", "dict.copy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "q", "=", "1e-4", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n\t    Parameters\n\t    ----------\n\t    q\n\t\t    Detection level (risk)\n\t\n\t    Returns\n\t    ----------\n        biSPOT object\n        \"\"\"", "\n", "self", ".", "proba", "=", "q", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "init_data", "=", "None", "\n", "self", ".", "n", "=", "0", "\n", "nonedict", "=", "{", "'up'", ":", "None", ",", "'down'", ":", "None", "}", "\n", "\n", "self", ".", "extreme_quantile", "=", "dict", ".", "copy", "(", "nonedict", ")", "\n", "self", ".", "init_threshold", "=", "dict", ".", "copy", "(", "nonedict", ")", "\n", "self", ".", "peaks", "=", "dict", ".", "copy", "(", "nonedict", ")", "\n", "self", ".", "gamma", "=", "dict", ".", "copy", "(", "nonedict", ")", "\n", "self", ".", "sigma", "=", "dict", ".", "copy", "(", "nonedict", ")", "\n", "self", ".", "Nt", "=", "{", "'up'", ":", "0", ",", "'down'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.biSPOT.__str__": [[553, 582], ["len", "len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "s", "+=", "'Streaming Peaks-Over-Threshold Object\\n'", "\n", "s", "+=", "'Detection level q = %s\\n'", "%", "self", ".", "proba", "\n", "if", "self", ".", "data", "is", "not", "None", ":", "\n", "            ", "s", "+=", "'Data imported : Yes\\n'", "\n", "s", "+=", "'\\t initialization  : %s values\\n'", "%", "self", ".", "init_data", ".", "size", "\n", "s", "+=", "'\\t stream : %s values\\n'", "%", "self", ".", "data", ".", "size", "\n", "", "else", ":", "\n", "            ", "s", "+=", "'Data imported : No\\n'", "\n", "return", "s", "\n", "\n", "", "if", "self", ".", "n", "==", "0", ":", "\n", "            ", "s", "+=", "'Algorithm initialized : No\\n'", "\n", "", "else", ":", "\n", "            ", "s", "+=", "'Algorithm initialized : Yes\\n'", "\n", "s", "+=", "'\\t initial threshold : %s\\n'", "%", "self", ".", "init_threshold", "\n", "\n", "r", "=", "self", ".", "n", "-", "self", ".", "init_data", ".", "size", "\n", "if", "r", ">", "0", ":", "\n", "                ", "s", "+=", "'Algorithm run : Yes\\n'", "\n", "s", "+=", "'\\t number of observations : %s (%.2f %%)\\n'", "%", "(", "r", ",", "100", "*", "r", "/", "self", ".", "n", ")", "\n", "s", "+=", "'\\t triggered alarms : %s (%.2f %%)\\n'", "%", "(", "len", "(", "self", ".", "alarm", ")", ",", "100", "*", "len", "(", "self", ".", "alarm", ")", "/", "self", ".", "n", ")", "\n", "", "else", ":", "\n", "                ", "s", "+=", "'\\t number of peaks  : %s\\n'", "%", "self", ".", "Nt", "\n", "s", "+=", "'\\t upper extreme quantile : %s\\n'", "%", "self", ".", "extreme_quantile", "[", "'up'", "]", "\n", "s", "+=", "'\\t lower extreme quantile : %s\\n'", "%", "self", ".", "extreme_quantile", "[", "'down'", "]", "\n", "s", "+=", "'Algorithm run : No\\n'", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.biSPOT.fit": [[584, 623], ["isinstance", "isinstance", "numpy.array", "isinstance", "numpy.array", "isinstance", "isinstance", "isinstance", "print", "isinstance", "type", "int", "print", "isinstance"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "init_data", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Import data to biSPOT object\n        \n        Parameters\n\t    ----------\n\t    init_data : list, numpy.array or pandas.Series\n\t\t    initial batch to calibrate the algorithm ()\n            \n        data : numpy.array\n\t\t    data for the run (list, np.array or pd.series)\n\t\n        \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "data", "=", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "self", ".", "data", "=", "data", ".", "values", "\n", "", "else", ":", "\n", "            ", "print", "(", "'This data format (%s) is not supported'", "%", "type", "(", "data", ")", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "init_data", ",", "list", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "np", ".", "array", "(", "init_data", ")", "\n", "", "elif", "isinstance", "(", "init_data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "init_data", "\n", "", "elif", "isinstance", "(", "init_data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "init_data", ".", "values", "\n", "", "elif", "isinstance", "(", "init_data", ",", "int", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "self", ".", "data", "[", ":", "init_data", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "init_data", ":", "]", "\n", "", "elif", "isinstance", "(", "init_data", ",", "float", ")", "&", "(", "init_data", "<", "1", ")", "&", "(", "init_data", ">", "0", ")", ":", "\n", "            ", "r", "=", "int", "(", "init_data", "*", "data", ".", "size", ")", "\n", "self", ".", "init_data", "=", "self", ".", "data", "[", ":", "r", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "r", ":", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "'The initial data cannot be set'", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.biSPOT.add": [[624, 645], ["isinstance", "numpy.append", "numpy.array", "isinstance", "isinstance", "print", "type"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        This function allows to append data to the already fitted data\n        \n        Parameters\n\t    ----------\n\t    data : list, numpy.array, pandas.Series\n\t\t    data to append\n        \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "data", "=", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "data", "=", "data", ".", "values", "\n", "", "else", ":", "\n", "            ", "print", "(", "'This data format (%s) is not supported'", "%", "type", "(", "data", ")", ")", "\n", "return", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "append", "(", "self", ".", "data", ",", "data", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.biSPOT.initialize": [[646, 692], ["numpy.sort", "print", "print", "print", "spot.biSPOT._grimshaw", "spot.biSPOT._quantile", "print", "print", "print", "print", "print", "print", "print", "print", "int", "int", "chr", "chr"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile"], ["", "def", "initialize", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Run the calibration (initialization) step\n        \n        Parameters\n\t    ----------\n\t    verbose : bool\n\t\t    (default = True) If True, gives details about the batch initialization\n        \"\"\"", "\n", "n_init", "=", "self", ".", "init_data", ".", "size", "\n", "\n", "S", "=", "np", ".", "sort", "(", "self", ".", "init_data", ")", "# we sort X to get the empirical quantile", "\n", "self", ".", "init_threshold", "[", "'up'", "]", "=", "S", "[", "int", "(", "0.98", "*", "n_init", ")", "]", "# t is fixed for the whole algorithm", "\n", "self", ".", "init_threshold", "[", "'down'", "]", "=", "S", "[", "int", "(", "0.02", "*", "n_init", ")", "]", "# t is fixed for the whole algorithm", "\n", "\n", "# initial peaks", "\n", "self", ".", "peaks", "[", "'up'", "]", "=", "self", ".", "init_data", "[", "self", ".", "init_data", ">", "self", ".", "init_threshold", "[", "'up'", "]", "]", "-", "self", ".", "init_threshold", "[", "'up'", "]", "\n", "self", ".", "peaks", "[", "'down'", "]", "=", "-", "(", "self", ".", "init_data", "[", "self", ".", "init_data", "<", "self", ".", "init_threshold", "[", "'down'", "]", "]", "-", "self", ".", "init_threshold", "[", "'down'", "]", ")", "\n", "self", ".", "Nt", "[", "'up'", "]", "=", "self", ".", "peaks", "[", "'up'", "]", ".", "size", "\n", "self", ".", "Nt", "[", "'down'", "]", "=", "self", ".", "peaks", "[", "'down'", "]", ".", "size", "\n", "self", ".", "n", "=", "n_init", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Initial threshold : %s'", "%", "self", ".", "init_threshold", ")", "\n", "print", "(", "'Number of peaks : %s'", "%", "self", ".", "Nt", ")", "\n", "print", "(", "'Grimshaw maximum log-likelihood estimation ... '", ",", "end", "=", "''", ")", "\n", "\n", "", "l", "=", "{", "'up'", ":", "None", ",", "'down'", ":", "None", "}", "\n", "for", "side", "in", "[", "'up'", ",", "'down'", "]", ":", "\n", "            ", "g", ",", "s", ",", "l", "[", "side", "]", "=", "self", ".", "_grimshaw", "(", "side", ")", "\n", "self", ".", "extreme_quantile", "[", "side", "]", "=", "self", ".", "_quantile", "(", "side", ",", "g", ",", "s", ")", "\n", "self", ".", "gamma", "[", "side", "]", "=", "g", "\n", "self", ".", "sigma", "[", "side", "]", "=", "s", "\n", "\n", "", "ltab", "=", "20", "\n", "form", "=", "(", "'\\t'", "+", "'%20s'", "+", "'%20.2f'", "+", "'%20.2f'", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'[done]'", ")", "\n", "print", "(", "'\\t'", "+", "'Parameters'", ".", "rjust", "(", "ltab", ")", "+", "'Upper'", ".", "rjust", "(", "ltab", ")", "+", "'Lower'", ".", "rjust", "(", "ltab", ")", ")", "\n", "print", "(", "'\\t'", "+", "'-'", "*", "ltab", "*", "3", ")", "\n", "print", "(", "form", "%", "(", "chr", "(", "0x03B3", ")", ",", "self", ".", "gamma", "[", "'up'", "]", ",", "self", ".", "gamma", "[", "'down'", "]", ")", ")", "\n", "print", "(", "form", "%", "(", "chr", "(", "0x03C3", ")", ",", "self", ".", "sigma", "[", "'up'", "]", ",", "self", ".", "sigma", "[", "'down'", "]", ")", ")", "\n", "print", "(", "form", "%", "(", "'likelihood'", ",", "l", "[", "'up'", "]", ",", "l", "[", "'down'", "]", ")", ")", "\n", "print", "(", "form", "%", "(", "'Extreme quantile'", ",", "self", ".", "extreme_quantile", "[", "'up'", "]", ",", "self", ".", "extreme_quantile", "[", "'down'", "]", ")", ")", "\n", "print", "(", "'\\t'", "+", "'-'", "*", "ltab", "*", "3", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.biSPOT._rootsFinder": [[696, 741], ["scipy.optimize.minimize", "numpy.round", "numpy.unique", "numpy.arange", "numpy.zeros", "numpy.random.uniform", "f", "spot.biSPOT._rootsFinder.objFun"], "methods", ["None"], ["", "def", "_rootsFinder", "(", "fun", ",", "jac", ",", "bounds", ",", "npoints", ",", "method", ")", ":", "\n", "        ", "\"\"\"\n        Find possible roots of a scalar function\n        \n        Parameters\n        ----------\n        fun : function\n\t\t    scalar function \n        jac : function\n            first order derivative of the function  \n        bounds : tuple\n            (min,max) interval for the roots search    \n        npoints : int\n            maximum number of roots to output      \n        method : str\n            'regular' : regular sample of the search interval, 'random' : uniform (distribution) sample of the search interval\n        \n        Returns\n        ----------\n        numpy.array\n            possible roots of the function\n        \"\"\"", "\n", "if", "method", "==", "'regular'", ":", "\n", "            ", "step", "=", "(", "bounds", "[", "1", "]", "-", "bounds", "[", "0", "]", ")", "/", "(", "npoints", "+", "1", ")", "\n", "X0", "=", "np", ".", "arange", "(", "bounds", "[", "0", "]", "+", "step", ",", "bounds", "[", "1", "]", ",", "step", ")", "\n", "", "elif", "method", "==", "'random'", ":", "\n", "            ", "X0", "=", "np", ".", "random", ".", "uniform", "(", "bounds", "[", "0", "]", ",", "bounds", "[", "1", "]", ",", "npoints", ")", "\n", "\n", "", "def", "objFun", "(", "X", ",", "f", ",", "jac", ")", ":", "\n", "            ", "g", "=", "0", "\n", "j", "=", "np", ".", "zeros", "(", "X", ".", "shape", ")", "\n", "i", "=", "0", "\n", "for", "x", "in", "X", ":", "\n", "                ", "fx", "=", "f", "(", "x", ")", "\n", "g", "=", "g", "+", "fx", "**", "2", "\n", "j", "[", "i", "]", "=", "2", "*", "fx", "*", "jac", "(", "x", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "return", "g", ",", "j", "\n", "", "opt", "=", "minimize", "(", "lambda", "X", ":", "objFun", "(", "X", ",", "fun", ",", "jac", ")", ",", "X0", ",", "\n", "method", "=", "'L-BFGS-B'", ",", "\n", "jac", "=", "True", ",", "bounds", "=", "[", "bounds", "]", "*", "len", "(", "X0", ")", ")", "\n", "\n", "X", "=", "opt", ".", "x", "\n", "np", ".", "round", "(", "X", ",", "decimals", "=", "5", ")", "\n", "return", "np", ".", "unique", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.biSPOT._log_likelihood": [[743, 767], ["math.log", "numpy.log().sum", "math.log", "Y.mean", "numpy.log"], "methods", ["None"], ["", "def", "_log_likelihood", "(", "Y", ",", "gamma", ",", "sigma", ")", ":", "\n", "        ", "\"\"\"\n        Compute the log-likelihood for the Generalized Pareto Distribution (\u03bc=0)\n        \n        Parameters\n        ----------\n        Y : numpy.array\n\t\t    observations\n        gamma : float\n            GPD index parameter\n        sigma : float\n            GPD scale parameter (>0)   \n        Returns\n        ----------\n        float\n            log-likelihood of the sample Y to be drawn from a GPD(\u03b3,\u03c3,\u03bc=0)\n        \"\"\"", "\n", "n", "=", "Y", ".", "size", "\n", "if", "gamma", "!=", "0", ":", "\n", "            ", "tau", "=", "gamma", "/", "sigma", "\n", "L", "=", "-", "n", "*", "log", "(", "sigma", ")", "-", "(", "1", "+", "(", "1", "/", "gamma", ")", ")", "*", "(", "np", ".", "log", "(", "1", "+", "tau", "*", "Y", ")", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "L", "=", "n", "*", "(", "1", "+", "log", "(", "Y", ".", "mean", "(", ")", ")", ")", "\n", "", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.biSPOT._grimshaw": [[769, 848], ["spot.biSPOT.peaks[].min", "spot.biSPOT.peaks[].max", "spot.biSPOT.peaks[].mean", "spot.biSPOT._rootsFinder", "spot.biSPOT._rootsFinder", "numpy.concatenate", "spot.biSPOT._log_likelihood", "numpy.mean", "spot.biSPOT._grimshaw.u"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._rootsFinder", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._rootsFinder", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._log_likelihood"], ["", "def", "_grimshaw", "(", "self", ",", "side", ",", "epsilon", "=", "1e-8", ",", "n_points", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Compute the GPD parameters estimation with the Grimshaw's trick\n        \n        Parameters\n        ----------\n        epsilon : float\n\t\t    numerical parameter to perform (default : 1e-8)\n        n_points : int\n            maximum number of candidates for maximum likelihood (default : 10)\n        Returns\n        ----------\n        gamma_best,sigma_best,ll_best\n            gamma estimates, sigma estimates and corresponding log-likelihood\n        \"\"\"", "\n", "def", "u", "(", "s", ")", ":", "\n", "            ", "return", "1", "+", "np", ".", "log", "(", "s", ")", ".", "mean", "(", ")", "\n", "\n", "", "def", "v", "(", "s", ")", ":", "\n", "            ", "return", "np", ".", "mean", "(", "1", "/", "s", ")", "\n", "\n", "", "def", "w", "(", "Y", ",", "t", ")", ":", "\n", "            ", "s", "=", "1", "+", "t", "*", "Y", "\n", "us", "=", "u", "(", "s", ")", "\n", "vs", "=", "v", "(", "s", ")", "\n", "return", "us", "*", "vs", "-", "1", "\n", "\n", "", "def", "jac_w", "(", "Y", ",", "t", ")", ":", "\n", "            ", "s", "=", "1", "+", "t", "*", "Y", "\n", "us", "=", "u", "(", "s", ")", "\n", "vs", "=", "v", "(", "s", ")", "\n", "jac_us", "=", "(", "1", "/", "t", ")", "*", "(", "1", "-", "vs", ")", "\n", "jac_vs", "=", "(", "1", "/", "t", ")", "*", "(", "-", "vs", "+", "np", ".", "mean", "(", "1", "/", "s", "**", "2", ")", ")", "\n", "return", "us", "*", "jac_vs", "+", "vs", "*", "jac_us", "\n", "\n", "\n", "", "Ym", "=", "self", ".", "peaks", "[", "side", "]", ".", "min", "(", ")", "\n", "YM", "=", "self", ".", "peaks", "[", "side", "]", ".", "max", "(", ")", "\n", "Ymean", "=", "self", ".", "peaks", "[", "side", "]", ".", "mean", "(", ")", "\n", "\n", "\n", "a", "=", "-", "1", "/", "YM", "\n", "if", "abs", "(", "a", ")", "<", "2", "*", "epsilon", ":", "\n", "            ", "epsilon", "=", "abs", "(", "a", ")", "/", "n_points", "\n", "\n", "", "a", "=", "a", "+", "epsilon", "\n", "b", "=", "2", "*", "(", "Ymean", "-", "Ym", ")", "/", "(", "Ymean", "*", "Ym", ")", "\n", "c", "=", "2", "*", "(", "Ymean", "-", "Ym", ")", "/", "(", "Ym", "**", "2", ")", "\n", "\n", "# We look for possible roots", "\n", "left_zeros", "=", "biSPOT", ".", "_rootsFinder", "(", "lambda", "t", ":", "w", "(", "self", ".", "peaks", "[", "side", "]", ",", "t", ")", ",", "\n", "lambda", "t", ":", "jac_w", "(", "self", ".", "peaks", "[", "side", "]", ",", "t", ")", ",", "\n", "(", "a", "+", "epsilon", ",", "-", "epsilon", ")", ",", "\n", "n_points", ",", "'regular'", ")", "\n", "\n", "right_zeros", "=", "biSPOT", ".", "_rootsFinder", "(", "lambda", "t", ":", "w", "(", "self", ".", "peaks", "[", "side", "]", ",", "t", ")", ",", "\n", "lambda", "t", ":", "jac_w", "(", "self", ".", "peaks", "[", "side", "]", ",", "t", ")", ",", "\n", "(", "b", ",", "c", ")", ",", "\n", "n_points", ",", "'regular'", ")", "\n", "\n", "# all the possible roots", "\n", "zeros", "=", "np", ".", "concatenate", "(", "(", "left_zeros", ",", "right_zeros", ")", ")", "\n", "\n", "# 0 is always a solution so we initialize with it", "\n", "gamma_best", "=", "0", "\n", "sigma_best", "=", "Ymean", "\n", "ll_best", "=", "biSPOT", ".", "_log_likelihood", "(", "self", ".", "peaks", "[", "side", "]", ",", "gamma_best", ",", "sigma_best", ")", "\n", "\n", "# we look for better candidates", "\n", "for", "z", "in", "zeros", ":", "\n", "            ", "gamma", "=", "u", "(", "1", "+", "z", "*", "self", ".", "peaks", "[", "side", "]", ")", "-", "1", "\n", "sigma", "=", "gamma", "/", "z", "\n", "ll", "=", "biSPOT", ".", "_log_likelihood", "(", "self", ".", "peaks", "[", "side", "]", ",", "gamma", ",", "sigma", ")", "\n", "if", "ll", ">", "ll_best", ":", "\n", "                ", "gamma_best", "=", "gamma", "\n", "sigma_best", "=", "sigma", "\n", "ll_best", "=", "ll", "\n", "\n", "", "", "return", "gamma_best", ",", "sigma_best", ",", "ll_best", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.biSPOT._quantile": [[851, 882], ["print", "math.log", "pow", "math.log", "pow"], "methods", ["None"], ["", "def", "_quantile", "(", "self", ",", "side", ",", "gamma", ",", "sigma", ")", ":", "\n", "        ", "\"\"\"\n        Compute the quantile at level 1-q for a given side\n        \n        Parameters\n        ----------\n        side : str\n            'up' or 'down'\n        gamma : float\n\t\t    GPD parameter\n        sigma : float\n            GPD parameter\n        Returns\n        ----------\n        float\n            quantile at level 1-q for the GPD(\u03b3,\u03c3,\u03bc=0)\n        \"\"\"", "\n", "if", "side", "==", "'up'", ":", "\n", "            ", "r", "=", "self", ".", "n", "*", "self", ".", "proba", "/", "self", ".", "Nt", "[", "side", "]", "\n", "if", "gamma", "!=", "0", ":", "\n", "                ", "return", "self", ".", "init_threshold", "[", "'up'", "]", "+", "(", "sigma", "/", "gamma", ")", "*", "(", "pow", "(", "r", ",", "-", "gamma", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "init_threshold", "[", "'up'", "]", "-", "sigma", "*", "log", "(", "r", ")", "\n", "", "", "elif", "side", "==", "'down'", ":", "\n", "            ", "r", "=", "self", ".", "n", "*", "self", ".", "proba", "/", "self", ".", "Nt", "[", "side", "]", "\n", "if", "gamma", "!=", "0", ":", "\n", "                ", "return", "self", ".", "init_threshold", "[", "'down'", "]", "-", "(", "sigma", "/", "gamma", ")", "*", "(", "pow", "(", "r", ",", "-", "gamma", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "init_threshold", "[", "'down'", "]", "+", "sigma", "*", "log", "(", "r", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'error : the side is not right'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.biSPOT.run": [[884, 972], ["tqdm.tqdm", "print", "range", "thup.append", "thdown.append", "alarm.append", "numpy.append", "spot.biSPOT._grimshaw", "spot.biSPOT._quantile", "numpy.append", "spot.biSPOT._grimshaw", "spot.biSPOT._quantile", "alarm.append", "numpy.append", "spot.biSPOT._grimshaw", "spot.biSPOT._quantile", "numpy.append", "spot.biSPOT._grimshaw", "spot.biSPOT._quantile"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile"], ["", "", "def", "run", "(", "self", ",", "with_alarm", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Run biSPOT on the stream\n        \n        Parameters\n        ----------\n        with_alarm : bool\n\t\t    (default = True) If False, SPOT will adapt the threshold assuming \\\n            there is no abnormal values\n        Returns\n        ----------\n        dict\n            keys : 'upper_thresholds', 'lower_thresholds' and 'alarms'\n            \n            '***-thresholds' contains the extreme quantiles and 'alarms' contains \\\n            the indexes of the values which have triggered alarms\n            \n        \"\"\"", "\n", "if", "(", "self", ".", "n", ">", "self", ".", "init_data", ".", "size", ")", ":", "\n", "            ", "print", "(", "'Warning : the algorithm seems to have already been run, you \\\n            should initialize before running again'", ")", "\n", "return", "{", "}", "\n", "\n", "# list of the thresholds", "\n", "", "thup", "=", "[", "]", "\n", "thdown", "=", "[", "]", "\n", "alarm", "=", "[", "]", "\n", "# Loop over the stream", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "self", ".", "data", ".", "size", ")", ")", ":", "\n", "\n", "# If the observed value exceeds the current threshold (alarm case)", "\n", "            ", "if", "self", ".", "data", "[", "i", "]", ">", "self", ".", "extreme_quantile", "[", "'up'", "]", ":", "\n", "# if we want to alarm, we put it in the alarm list", "\n", "                ", "if", "with_alarm", ":", "\n", "                    ", "alarm", ".", "append", "(", "i", ")", "\n", "# otherwise we add it in the peaks", "\n", "", "else", ":", "\n", "                    ", "self", ".", "peaks", "[", "'up'", "]", "=", "np", ".", "append", "(", "self", ".", "peaks", "[", "'up'", "]", ",", "self", ".", "data", "[", "i", "]", "-", "self", ".", "init_threshold", "[", "'up'", "]", ")", "\n", "self", ".", "Nt", "[", "'up'", "]", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", "'up'", ")", "\n", "self", ".", "extreme_quantile", "[", "'up'", "]", "=", "self", ".", "_quantile", "(", "'up'", ",", "g", ",", "s", ")", "\n", "\n", "# case where the value exceeds the initial threshold but not the alarm ones", "\n", "", "", "elif", "self", ".", "data", "[", "i", "]", ">", "self", ".", "init_threshold", "[", "'up'", "]", ":", "\n", "# we add it in the peaks", "\n", "                    ", "self", ".", "peaks", "[", "'up'", "]", "=", "np", ".", "append", "(", "self", ".", "peaks", "[", "'up'", "]", ",", "self", ".", "data", "[", "i", "]", "-", "self", ".", "init_threshold", "[", "'up'", "]", ")", "\n", "self", ".", "Nt", "[", "'up'", "]", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", "'up'", ")", "\n", "self", ".", "extreme_quantile", "[", "'up'", "]", "=", "self", ".", "_quantile", "(", "'up'", ",", "g", ",", "s", ")", "\n", "\n", "", "elif", "self", ".", "data", "[", "i", "]", "<", "self", ".", "extreme_quantile", "[", "'down'", "]", ":", "\n", "# if we want to alarm, we put it in the alarm list", "\n", "                ", "if", "with_alarm", ":", "\n", "                    ", "alarm", ".", "append", "(", "i", ")", "\n", "# otherwise we add it in the peaks", "\n", "", "else", ":", "\n", "                    ", "self", ".", "peaks", "[", "'down'", "]", "=", "np", ".", "append", "(", "self", ".", "peaks", "[", "'down'", "]", ",", "-", "(", "self", ".", "data", "[", "i", "]", "-", "self", ".", "init_threshold", "[", "'down'", "]", ")", ")", "\n", "self", ".", "Nt", "[", "'down'", "]", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", "'down'", ")", "\n", "self", ".", "extreme_quantile", "[", "'down'", "]", "=", "self", ".", "_quantile", "(", "'down'", ",", "g", ",", "s", ")", "\n", "\n", "# case where the value exceeds the initial threshold but not the alarm ones", "\n", "", "", "elif", "self", ".", "data", "[", "i", "]", "<", "self", ".", "init_threshold", "[", "'down'", "]", ":", "\n", "# we add it in the peaks", "\n", "                    ", "self", ".", "peaks", "[", "'down'", "]", "=", "np", ".", "append", "(", "self", ".", "peaks", "[", "'down'", "]", ",", "-", "(", "self", ".", "data", "[", "i", "]", "-", "self", ".", "init_threshold", "[", "'down'", "]", ")", ")", "\n", "self", ".", "Nt", "[", "'down'", "]", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", "'down'", ")", "\n", "self", ".", "extreme_quantile", "[", "'down'", "]", "=", "self", ".", "_quantile", "(", "'down'", ",", "g", ",", "s", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "n", "+=", "1", "\n", "\n", "\n", "", "thup", ".", "append", "(", "self", ".", "extreme_quantile", "[", "'up'", "]", ")", "# thresholds record", "\n", "thdown", ".", "append", "(", "self", ".", "extreme_quantile", "[", "'down'", "]", ")", "# thresholds record", "\n", "\n", "", "return", "{", "'upper_thresholds'", ":", "thup", ",", "'lower_thresholds'", ":", "thdown", ",", "'alarms'", ":", "alarm", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.biSPOT.plot": [[973, 1014], ["range", "run_results.keys", "matplotlib.plot", "matplotlib.xlim", "matplotlib.plot", "fig.append", "matplotlib.plot", "fig.append", "matplotlib.scatter", "fig.append"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.plot", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.plot", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.plot"], ["", "def", "plot", "(", "self", ",", "run_results", ",", "with_alarm", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Plot the results of given by the run\n        \n        Parameters\n        ----------\n        run_results : dict\n            results given by the 'run' method\n        with_alarm : bool\n\t\t    (default = True) If True, alarms are plotted.\n        Returns\n        ----------\n        list\n            list of the plots\n            \n        \"\"\"", "\n", "x", "=", "range", "(", "self", ".", "data", ".", "size", ")", "\n", "K", "=", "run_results", ".", "keys", "(", ")", "\n", "\n", "ts_fig", ",", "=", "plt", ".", "plot", "(", "x", ",", "self", ".", "data", ",", "color", "=", "air_force_blue", ")", "\n", "fig", "=", "[", "ts_fig", "]", "\n", "\n", "if", "'upper_thresholds'", "in", "K", ":", "\n", "            ", "thup", "=", "run_results", "[", "'upper_thresholds'", "]", "\n", "uth_fig", ",", "=", "plt", ".", "plot", "(", "x", ",", "thup", ",", "color", "=", "deep_saffron", ",", "lw", "=", "2", ",", "ls", "=", "'dashed'", ")", "\n", "fig", ".", "append", "(", "uth_fig", ")", "\n", "\n", "", "if", "'lower_thresholds'", "in", "K", ":", "\n", "            ", "thdown", "=", "run_results", "[", "'lower_thresholds'", "]", "\n", "lth_fig", ",", "=", "plt", ".", "plot", "(", "x", ",", "thdown", ",", "color", "=", "deep_saffron", ",", "lw", "=", "2", ",", "ls", "=", "'dashed'", ")", "\n", "fig", ".", "append", "(", "lth_fig", ")", "\n", "\n", "", "if", "with_alarm", "and", "(", "'alarms'", "in", "K", ")", ":", "\n", "            ", "alarm", "=", "run_results", "[", "'alarms'", "]", "\n", "al_fig", "=", "plt", ".", "scatter", "(", "alarm", ",", "self", ".", "data", "[", "alarm", "]", ",", "color", "=", "'red'", ")", "\n", "fig", ".", "append", "(", "al_fig", ")", "\n", "\n", "", "plt", ".", "xlim", "(", "(", "0", ",", "self", ".", "data", ".", "size", ")", ")", "\n", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.dSPOT.__init__": [[1070, 1080], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "q", ",", "depth", ")", ":", "\n", "        ", "self", ".", "proba", "=", "q", "\n", "self", ".", "extreme_quantile", "=", "None", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "init_data", "=", "None", "\n", "self", ".", "init_threshold", "=", "None", "\n", "self", ".", "peaks", "=", "None", "\n", "self", ".", "n", "=", "0", "\n", "self", ".", "Nt", "=", "0", "\n", "self", ".", "depth", "=", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.dSPOT.__str__": [[1081, 1109], ["len", "len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "s", "+=", "'Streaming Peaks-Over-Threshold Object\\n'", "\n", "s", "+=", "'Detection level q = %s\\n'", "%", "self", ".", "proba", "\n", "if", "self", ".", "data", "is", "not", "None", ":", "\n", "            ", "s", "+=", "'Data imported : Yes\\n'", "\n", "s", "+=", "'\\t initialization  : %s values\\n'", "%", "self", ".", "init_data", ".", "size", "\n", "s", "+=", "'\\t stream : %s values\\n'", "%", "self", ".", "data", ".", "size", "\n", "", "else", ":", "\n", "            ", "s", "+=", "'Data imported : No\\n'", "\n", "return", "s", "\n", "\n", "", "if", "self", ".", "n", "==", "0", ":", "\n", "            ", "s", "+=", "'Algorithm initialized : No\\n'", "\n", "", "else", ":", "\n", "            ", "s", "+=", "'Algorithm initialized : Yes\\n'", "\n", "s", "+=", "'\\t initial threshold : %s\\n'", "%", "self", ".", "init_threshold", "\n", "\n", "r", "=", "self", ".", "n", "-", "self", ".", "init_data", ".", "size", "\n", "if", "r", ">", "0", ":", "\n", "                ", "s", "+=", "'Algorithm run : Yes\\n'", "\n", "s", "+=", "'\\t number of observations : %s (%.2f %%)\\n'", "%", "(", "r", ",", "100", "*", "r", "/", "self", ".", "n", ")", "\n", "s", "+=", "'\\t triggered alarms : %s (%.2f %%)\\n'", "%", "(", "len", "(", "self", ".", "alarm", ")", ",", "100", "*", "len", "(", "self", ".", "alarm", ")", "/", "self", ".", "n", ")", "\n", "", "else", ":", "\n", "                ", "s", "+=", "'\\t number of peaks  : %s\\n'", "%", "self", ".", "Nt", "\n", "s", "+=", "'\\t extreme quantile : %s\\n'", "%", "self", ".", "extreme_quantile", "\n", "s", "+=", "'Algorithm run : No\\n'", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.dSPOT.fit": [[1111, 1150], ["isinstance", "isinstance", "numpy.array", "isinstance", "numpy.array", "isinstance", "isinstance", "isinstance", "print", "isinstance", "type", "int", "print", "isinstance"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "init_data", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Import data to DSPOT object\n        \n        Parameters\n\t    ----------\n\t    init_data : list, numpy.array or pandas.Series\n\t\t    initial batch to calibrate the algorithm\n            \n        data : numpy.array\n\t\t    data for the run (list, np.array or pd.series)\n\t\n        \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "data", "=", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "self", ".", "data", "=", "data", ".", "values", "\n", "", "else", ":", "\n", "            ", "print", "(", "'This data format (%s) is not supported'", "%", "type", "(", "data", ")", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "init_data", ",", "list", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "np", ".", "array", "(", "init_data", ")", "\n", "", "elif", "isinstance", "(", "init_data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "init_data", "\n", "", "elif", "isinstance", "(", "init_data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "init_data", ".", "values", "\n", "", "elif", "isinstance", "(", "init_data", ",", "int", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "self", ".", "data", "[", ":", "init_data", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "init_data", ":", "]", "\n", "", "elif", "isinstance", "(", "init_data", ",", "float", ")", "&", "(", "init_data", "<", "1", ")", "&", "(", "init_data", ">", "0", ")", ":", "\n", "            ", "r", "=", "int", "(", "init_data", "*", "data", ".", "size", ")", "\n", "self", ".", "init_data", "=", "self", ".", "data", "[", ":", "r", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "r", ":", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "'The initial data cannot be set'", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.dSPOT.add": [[1151, 1172], ["isinstance", "numpy.append", "numpy.array", "isinstance", "isinstance", "print", "type"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        This function allows to append data to the already fitted data\n        \n        Parameters\n\t    ----------\n\t    data : list, numpy.array, pandas.Series\n\t\t    data to append\n        \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "data", "=", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "data", "=", "data", ".", "values", "\n", "", "else", ":", "\n", "            ", "print", "(", "'This data format (%s) is not supported'", "%", "type", "(", "data", ")", ")", "\n", "return", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "append", "(", "self", ".", "data", ",", "data", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.dSPOT.initialize": [[1173, 1211], ["spot.backMean", "numpy.sort", "spot.dSPOT._grimshaw", "spot.dSPOT._quantile", "print", "print", "print", "print", "print", "print", "print", "print", "int", "str", "str", "str", "chr", "chr"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.backMean", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile"], ["", "def", "initialize", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Run the calibration (initialization) step\n        \n        Parameters\n\t    ----------\n\t    verbose : bool\n\t\t    (default = True) If True, gives details about the batch initialization\n        \"\"\"", "\n", "n_init", "=", "self", ".", "init_data", ".", "size", "-", "self", ".", "depth", "\n", "\n", "M", "=", "backMean", "(", "self", ".", "init_data", ",", "self", ".", "depth", ")", "\n", "T", "=", "self", ".", "init_data", "[", "self", ".", "depth", ":", "]", "-", "M", "[", ":", "-", "1", "]", "# new variable", "\n", "\n", "S", "=", "np", ".", "sort", "(", "T", ")", "# we sort X to get the empirical quantile", "\n", "self", ".", "init_threshold", "=", "S", "[", "int", "(", "0.98", "*", "n_init", ")", "]", "# t is fixed for the whole algorithm", "\n", "\n", "# initial peaks", "\n", "self", ".", "peaks", "=", "T", "[", "T", ">", "self", ".", "init_threshold", "]", "-", "self", ".", "init_threshold", "\n", "self", ".", "Nt", "=", "self", ".", "peaks", ".", "size", "\n", "self", ".", "n", "=", "n_init", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Initial threshold : %s'", "%", "self", ".", "init_threshold", ")", "\n", "print", "(", "'Number of peaks : %s'", "%", "self", ".", "Nt", ")", "\n", "print", "(", "'Grimshaw maximum log-likelihood estimation ... '", ",", "end", "=", "''", ")", "\n", "\n", "", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", ")", "\n", "self", ".", "extreme_quantile", "=", "self", ".", "_quantile", "(", "g", ",", "s", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'[done]'", ")", "\n", "print", "(", "'\\t'", "+", "chr", "(", "0x03B3", ")", "+", "' = '", "+", "str", "(", "g", ")", ")", "\n", "print", "(", "'\\t'", "+", "chr", "(", "0x03C3", ")", "+", "' = '", "+", "str", "(", "s", ")", ")", "\n", "print", "(", "'\\tL = '", "+", "str", "(", "l", ")", ")", "\n", "print", "(", "'Extreme quantile (probability = %s): %s'", "%", "(", "self", ".", "proba", ",", "self", ".", "extreme_quantile", ")", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.dSPOT._rootsFinder": [[1215, 1261], ["scipy.optimize.minimize", "numpy.round", "numpy.unique", "numpy.arange", "numpy.zeros", "numpy.random.uniform", "f", "spot.dSPOT._rootsFinder.objFun"], "methods", ["None"], ["", "def", "_rootsFinder", "(", "fun", ",", "jac", ",", "bounds", ",", "npoints", ",", "method", ")", ":", "\n", "        ", "\"\"\"\n        Find possible roots of a scalar function\n        \n        Parameters\n        ----------\n        fun : function\n\t\t    scalar function \n        jac : function\n            first order derivative of the function  \n        bounds : tuple\n            (min,max) interval for the roots search    \n        npoints : int\n            maximum number of roots to output      \n        method : str\n            'regular' : regular sample of the search interval, 'random' : uniform (distribution) sample of the search interval\n        \n        Returns\n        ----------\n        numpy.array\n            possible roots of the function\n        \"\"\"", "\n", "if", "method", "==", "'regular'", ":", "\n", "            ", "step", "=", "(", "bounds", "[", "1", "]", "-", "bounds", "[", "0", "]", ")", "/", "(", "npoints", "+", "1", ")", "\n", "X0", "=", "np", ".", "arange", "(", "bounds", "[", "0", "]", "+", "step", ",", "bounds", "[", "1", "]", ",", "step", ")", "\n", "", "elif", "method", "==", "'random'", ":", "\n", "            ", "X0", "=", "np", ".", "random", ".", "uniform", "(", "bounds", "[", "0", "]", ",", "bounds", "[", "1", "]", ",", "npoints", ")", "\n", "\n", "", "def", "objFun", "(", "X", ",", "f", ",", "jac", ")", ":", "\n", "            ", "g", "=", "0", "\n", "j", "=", "np", ".", "zeros", "(", "X", ".", "shape", ")", "\n", "i", "=", "0", "\n", "for", "x", "in", "X", ":", "\n", "                ", "fx", "=", "f", "(", "x", ")", "\n", "g", "=", "g", "+", "fx", "**", "2", "\n", "j", "[", "i", "]", "=", "2", "*", "fx", "*", "jac", "(", "x", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "return", "g", ",", "j", "\n", "\n", "", "opt", "=", "minimize", "(", "lambda", "X", ":", "objFun", "(", "X", ",", "fun", ",", "jac", ")", ",", "X0", ",", "\n", "method", "=", "'L-BFGS-B'", ",", "\n", "jac", "=", "True", ",", "bounds", "=", "[", "bounds", "]", "*", "len", "(", "X0", ")", ")", "\n", "\n", "X", "=", "opt", ".", "x", "\n", "np", ".", "round", "(", "X", ",", "decimals", "=", "5", ")", "\n", "return", "np", ".", "unique", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.dSPOT._log_likelihood": [[1263, 1287], ["math.log", "numpy.log().sum", "math.log", "Y.mean", "numpy.log"], "methods", ["None"], ["", "def", "_log_likelihood", "(", "Y", ",", "gamma", ",", "sigma", ")", ":", "\n", "        ", "\"\"\"\n        Compute the log-likelihood for the Generalized Pareto Distribution (\u03bc=0)\n        \n        Parameters\n        ----------\n        Y : numpy.array\n\t\t    observations\n        gamma : float\n            GPD index parameter\n        sigma : float\n            GPD scale parameter (>0)   \n        Returns\n        ----------\n        float\n            log-likelihood of the sample Y to be drawn from a GPD(\u03b3,\u03c3,\u03bc=0)\n        \"\"\"", "\n", "n", "=", "Y", ".", "size", "\n", "if", "gamma", "!=", "0", ":", "\n", "            ", "tau", "=", "gamma", "/", "sigma", "\n", "L", "=", "-", "n", "*", "log", "(", "sigma", ")", "-", "(", "1", "+", "(", "1", "/", "gamma", ")", ")", "*", "(", "np", ".", "log", "(", "1", "+", "tau", "*", "Y", ")", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "L", "=", "n", "*", "(", "1", "+", "log", "(", "Y", ".", "mean", "(", ")", ")", ")", "\n", "", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.dSPOT._grimshaw": [[1289, 1368], ["spot.dSPOT.peaks.min", "spot.dSPOT.peaks.max", "spot.dSPOT.peaks.mean", "spot.SPOT._rootsFinder", "spot.SPOT._rootsFinder", "numpy.concatenate", "spot.SPOT._log_likelihood", "numpy.mean", "spot.dSPOT._grimshaw.u"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._rootsFinder", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._rootsFinder", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._log_likelihood"], ["", "def", "_grimshaw", "(", "self", ",", "epsilon", "=", "1e-8", ",", "n_points", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Compute the GPD parameters estimation with the Grimshaw's trick\n        \n        Parameters\n        ----------\n        epsilon : float\n\t\t    numerical parameter to perform (default : 1e-8)\n        n_points : int\n            maximum number of candidates for maximum likelihood (default : 10)\n        Returns\n        ----------\n        gamma_best,sigma_best,ll_best\n            gamma estimates, sigma estimates and corresponding log-likelihood\n        \"\"\"", "\n", "def", "u", "(", "s", ")", ":", "\n", "            ", "return", "1", "+", "np", ".", "log", "(", "s", ")", ".", "mean", "(", ")", "\n", "\n", "", "def", "v", "(", "s", ")", ":", "\n", "            ", "return", "np", ".", "mean", "(", "1", "/", "s", ")", "\n", "\n", "", "def", "w", "(", "Y", ",", "t", ")", ":", "\n", "            ", "s", "=", "1", "+", "t", "*", "Y", "\n", "us", "=", "u", "(", "s", ")", "\n", "vs", "=", "v", "(", "s", ")", "\n", "return", "us", "*", "vs", "-", "1", "\n", "\n", "", "def", "jac_w", "(", "Y", ",", "t", ")", ":", "\n", "            ", "s", "=", "1", "+", "t", "*", "Y", "\n", "us", "=", "u", "(", "s", ")", "\n", "vs", "=", "v", "(", "s", ")", "\n", "jac_us", "=", "(", "1", "/", "t", ")", "*", "(", "1", "-", "vs", ")", "\n", "jac_vs", "=", "(", "1", "/", "t", ")", "*", "(", "-", "vs", "+", "np", ".", "mean", "(", "1", "/", "s", "**", "2", ")", ")", "\n", "return", "us", "*", "jac_vs", "+", "vs", "*", "jac_us", "\n", "\n", "\n", "", "Ym", "=", "self", ".", "peaks", ".", "min", "(", ")", "\n", "YM", "=", "self", ".", "peaks", ".", "max", "(", ")", "\n", "Ymean", "=", "self", ".", "peaks", ".", "mean", "(", ")", "\n", "\n", "\n", "a", "=", "-", "1", "/", "YM", "\n", "if", "abs", "(", "a", ")", "<", "2", "*", "epsilon", ":", "\n", "            ", "epsilon", "=", "abs", "(", "a", ")", "/", "n_points", "\n", "\n", "", "a", "=", "a", "+", "epsilon", "\n", "b", "=", "2", "*", "(", "Ymean", "-", "Ym", ")", "/", "(", "Ymean", "*", "Ym", ")", "\n", "c", "=", "2", "*", "(", "Ymean", "-", "Ym", ")", "/", "(", "Ym", "**", "2", ")", "\n", "\n", "# We look for possible roots", "\n", "left_zeros", "=", "SPOT", ".", "_rootsFinder", "(", "lambda", "t", ":", "w", "(", "self", ".", "peaks", ",", "t", ")", ",", "\n", "lambda", "t", ":", "jac_w", "(", "self", ".", "peaks", ",", "t", ")", ",", "\n", "(", "a", "+", "epsilon", ",", "-", "epsilon", ")", ",", "\n", "n_points", ",", "'regular'", ")", "\n", "\n", "right_zeros", "=", "SPOT", ".", "_rootsFinder", "(", "lambda", "t", ":", "w", "(", "self", ".", "peaks", ",", "t", ")", ",", "\n", "lambda", "t", ":", "jac_w", "(", "self", ".", "peaks", ",", "t", ")", ",", "\n", "(", "b", ",", "c", ")", ",", "\n", "n_points", ",", "'regular'", ")", "\n", "\n", "# all the possible roots", "\n", "zeros", "=", "np", ".", "concatenate", "(", "(", "left_zeros", ",", "right_zeros", ")", ")", "\n", "\n", "# 0 is always a solution so we initialize with it", "\n", "gamma_best", "=", "0", "\n", "sigma_best", "=", "Ymean", "\n", "ll_best", "=", "SPOT", ".", "_log_likelihood", "(", "self", ".", "peaks", ",", "gamma_best", ",", "sigma_best", ")", "\n", "\n", "# we look for better candidates", "\n", "for", "z", "in", "zeros", ":", "\n", "            ", "gamma", "=", "u", "(", "1", "+", "z", "*", "self", ".", "peaks", ")", "-", "1", "\n", "sigma", "=", "gamma", "/", "z", "\n", "ll", "=", "dSPOT", ".", "_log_likelihood", "(", "self", ".", "peaks", ",", "gamma", ",", "sigma", ")", "\n", "if", "ll", ">", "ll_best", ":", "\n", "                ", "gamma_best", "=", "gamma", "\n", "sigma_best", "=", "sigma", "\n", "ll_best", "=", "ll", "\n", "\n", "", "", "return", "gamma_best", ",", "sigma_best", ",", "ll_best", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.dSPOT._quantile": [[1371, 1391], ["math.log", "pow"], "methods", ["None"], ["", "def", "_quantile", "(", "self", ",", "gamma", ",", "sigma", ")", ":", "\n", "        ", "\"\"\"\n        Compute the quantile at level 1-q\n        \n        Parameters\n        ----------\n        gamma : float\n\t\t    GPD parameter\n        sigma : float\n            GPD parameter\n        Returns\n        ----------\n        float\n            quantile at level 1-q for the GPD(\u03b3,\u03c3,\u03bc=0)\n        \"\"\"", "\n", "r", "=", "self", ".", "n", "*", "self", ".", "proba", "/", "self", ".", "Nt", "\n", "if", "gamma", "!=", "0", ":", "\n", "            ", "return", "self", ".", "init_threshold", "+", "(", "sigma", "/", "gamma", ")", "*", "(", "pow", "(", "r", ",", "-", "gamma", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "init_threshold", "-", "sigma", "*", "log", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.dSPOT.run": [[1393, 1460], ["tqdm.tqdm", "print", "range", "numpy.append.mean", "th.append", "alarm.append", "numpy.append", "spot.dSPOT._grimshaw", "spot.dSPOT._quantile", "numpy.append", "numpy.append", "spot.dSPOT._grimshaw", "spot.dSPOT._quantile", "numpy.append", "numpy.append"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile"], ["", "", "def", "run", "(", "self", ",", "with_alarm", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Run biSPOT on the stream\n        \n        Parameters\n        ----------\n        with_alarm : bool\n\t\t    (default = True) If False, SPOT will adapt the threshold assuming \\\n            there is no abnormal values\n        Returns\n        ----------\n        dict\n            keys : 'upper_thresholds', 'lower_thresholds' and 'alarms'\n            \n            '***-thresholds' contains the extreme quantiles and 'alarms' contains \\\n            the indexes of the values which have triggered alarms\n            \n        \"\"\"", "\n", "if", "(", "self", ".", "n", ">", "self", ".", "init_data", ".", "size", ")", ":", "\n", "            ", "print", "(", "'Warning : the algorithm seems to have already been run, you \\\n            should initialize before running again'", ")", "\n", "return", "{", "}", "\n", "\n", "# actual normal window", "\n", "", "W", "=", "self", ".", "init_data", "[", "-", "self", ".", "depth", ":", "]", "\n", "\n", "# list of the thresholds", "\n", "th", "=", "[", "]", "\n", "alarm", "=", "[", "]", "\n", "# Loop over the stream", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "self", ".", "data", ".", "size", ")", ")", ":", "\n", "            ", "Mi", "=", "W", ".", "mean", "(", ")", "\n", "# If the observed value exceeds the current threshold (alarm case)", "\n", "if", "(", "self", ".", "data", "[", "i", "]", "-", "Mi", ")", ">", "self", ".", "extreme_quantile", ":", "\n", "# if we want to alarm, we put it in the alarm list", "\n", "                ", "if", "with_alarm", ":", "\n", "                    ", "alarm", ".", "append", "(", "i", ")", "\n", "# otherwise we add it in the peaks", "\n", "", "else", ":", "\n", "                    ", "self", ".", "peaks", "=", "np", ".", "append", "(", "self", ".", "peaks", ",", "self", ".", "data", "[", "i", "]", "-", "Mi", "-", "self", ".", "init_threshold", ")", "\n", "self", ".", "Nt", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", ")", "\n", "self", ".", "extreme_quantile", "=", "self", ".", "_quantile", "(", "g", ",", "s", ")", "#+ Mi", "\n", "W", "=", "np", ".", "append", "(", "W", "[", "1", ":", "]", ",", "self", ".", "data", "[", "i", "]", ")", "\n", "\n", "# case where the value exceeds the initial threshold but not the alarm ones", "\n", "", "", "elif", "(", "self", ".", "data", "[", "i", "]", "-", "Mi", ")", ">", "self", ".", "init_threshold", ":", "\n", "# we add it in the peaks", "\n", "                    ", "self", ".", "peaks", "=", "np", ".", "append", "(", "self", ".", "peaks", ",", "self", ".", "data", "[", "i", "]", "-", "Mi", "-", "self", ".", "init_threshold", ")", "\n", "self", ".", "Nt", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", ")", "\n", "self", ".", "extreme_quantile", "=", "self", ".", "_quantile", "(", "g", ",", "s", ")", "#+ Mi", "\n", "W", "=", "np", ".", "append", "(", "W", "[", "1", ":", "]", ",", "self", ".", "data", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "n", "+=", "1", "\n", "W", "=", "np", ".", "append", "(", "W", "[", "1", ":", "]", ",", "self", ".", "data", "[", "i", "]", ")", "\n", "\n", "\n", "", "th", ".", "append", "(", "self", ".", "extreme_quantile", "+", "Mi", ")", "# thresholds record", "\n", "\n", "", "return", "{", "'thresholds'", ":", "th", ",", "'alarms'", ":", "alarm", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.dSPOT.plot": [[1462, 1508], ["range", "run_results.keys", "matplotlib.plot", "matplotlib.xlim", "matplotlib.plot", "fig.append", "len", "matplotlib.scatter"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.plot", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.plot"], ["", "def", "plot", "(", "self", ",", "run_results", ",", "with_alarm", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Plot the results given by the run\n        \n        Parameters\n        ----------\n        run_results : dict\n            results given by the 'run' method\n        with_alarm : bool\n\t\t    (default = True) If True, alarms are plotted.\n        Returns\n        ----------\n        list\n            list of the plots\n            \n        \"\"\"", "\n", "x", "=", "range", "(", "self", ".", "data", ".", "size", ")", "\n", "K", "=", "run_results", ".", "keys", "(", ")", "\n", "\n", "ts_fig", ",", "=", "plt", ".", "plot", "(", "x", ",", "self", ".", "data", ",", "color", "=", "air_force_blue", ",", "alpha", "=", "0.5", ")", "\n", "fig", "=", "[", "ts_fig", "]", "\n", "\n", "#        if 'upper_thresholds' in K:", "\n", "#            thup = run_results['upper_thresholds']", "\n", "#            uth_fig, = plt.plot(x,thup,color=deep_saffron,lw=2,ls='dashed')", "\n", "#            fig.append(uth_fig)", "\n", "#            ", "\n", "#        if 'lower_thresholds' in K:", "\n", "#            thdown = run_results['lower_thresholds']", "\n", "#            lth_fig, = plt.plot(x,thdown,color=deep_saffron,lw=2,ls='dashed')", "\n", "#            fig.append(lth_fig)", "\n", "\n", "if", "'thresholds'", "in", "K", ":", "\n", "            ", "th", "=", "run_results", "[", "'thresholds'", "]", "\n", "th_fig", ",", "=", "plt", ".", "plot", "(", "x", ",", "th", ",", "color", "=", "deep_saffron", ",", "lw", "=", "2", ",", "ls", "=", "'dashed'", ",", "alpha", "=", "0.5", ")", "\n", "fig", ".", "append", "(", "th_fig", ")", "\n", "\n", "", "if", "with_alarm", "and", "(", "'alarms'", "in", "K", ")", ":", "\n", "            ", "alarm", "=", "run_results", "[", "'alarms'", "]", "\n", "if", "len", "(", "alarm", ")", ">", "0", ":", "\n", "                ", "plt", ".", "scatter", "(", "alarm", ",", "self", ".", "data", "[", "alarm", "]", ",", "color", "=", "'red'", ")", "\n", "\n", "", "", "plt", ".", "xlim", "(", "(", "0", ",", "self", ".", "data", ".", "size", ")", ")", "\n", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.__init__": [[1554, 1569], ["dict.copy", "dict.copy", "dict.copy", "dict.copy", "dict.copy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "q", "=", "1e-4", ",", "depth", "=", "10", ")", ":", "\n", "        ", "self", ".", "proba", "=", "q", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "init_data", "=", "None", "\n", "self", ".", "n", "=", "0", "\n", "self", ".", "depth", "=", "depth", "\n", "\n", "nonedict", "=", "{", "'up'", ":", "None", ",", "'down'", ":", "None", "}", "\n", "\n", "self", ".", "extreme_quantile", "=", "dict", ".", "copy", "(", "nonedict", ")", "\n", "self", ".", "init_threshold", "=", "dict", ".", "copy", "(", "nonedict", ")", "\n", "self", ".", "peaks", "=", "dict", ".", "copy", "(", "nonedict", ")", "\n", "self", ".", "gamma", "=", "dict", ".", "copy", "(", "nonedict", ")", "\n", "self", ".", "sigma", "=", "dict", ".", "copy", "(", "nonedict", ")", "\n", "self", ".", "Nt", "=", "{", "'up'", ":", "0", ",", "'down'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.__str__": [[1571, 1600], ["len", "len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "s", "+=", "'Streaming Peaks-Over-Threshold Object\\n'", "\n", "s", "+=", "'Detection level q = %s\\n'", "%", "self", ".", "proba", "\n", "if", "self", ".", "data", "is", "not", "None", ":", "\n", "            ", "s", "+=", "'Data imported : Yes\\n'", "\n", "s", "+=", "'\\t initialization  : %s values\\n'", "%", "self", ".", "init_data", ".", "size", "\n", "s", "+=", "'\\t stream : %s values\\n'", "%", "self", ".", "data", ".", "size", "\n", "", "else", ":", "\n", "            ", "s", "+=", "'Data imported : No\\n'", "\n", "return", "s", "\n", "\n", "", "if", "self", ".", "n", "==", "0", ":", "\n", "            ", "s", "+=", "'Algorithm initialized : No\\n'", "\n", "", "else", ":", "\n", "            ", "s", "+=", "'Algorithm initialized : Yes\\n'", "\n", "s", "+=", "'\\t initial threshold : %s\\n'", "%", "self", ".", "init_threshold", "\n", "\n", "r", "=", "self", ".", "n", "-", "self", ".", "init_data", ".", "size", "\n", "if", "r", ">", "0", ":", "\n", "                ", "s", "+=", "'Algorithm run : Yes\\n'", "\n", "s", "+=", "'\\t number of observations : %s (%.2f %%)\\n'", "%", "(", "r", ",", "100", "*", "r", "/", "self", ".", "n", ")", "\n", "s", "+=", "'\\t triggered alarms : %s (%.2f %%)\\n'", "%", "(", "len", "(", "self", ".", "alarm", ")", ",", "100", "*", "len", "(", "self", ".", "alarm", ")", "/", "self", ".", "n", ")", "\n", "", "else", ":", "\n", "                ", "s", "+=", "'\\t number of peaks  : %s\\n'", "%", "self", ".", "Nt", "\n", "s", "+=", "'\\t upper extreme quantile : %s\\n'", "%", "self", ".", "extreme_quantile", "[", "'up'", "]", "\n", "s", "+=", "'\\t lower extreme quantile : %s\\n'", "%", "self", ".", "extreme_quantile", "[", "'down'", "]", "\n", "s", "+=", "'Algorithm run : No\\n'", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.fit": [[1602, 1641], ["isinstance", "isinstance", "numpy.array", "isinstance", "numpy.array", "isinstance", "isinstance", "isinstance", "print", "isinstance", "type", "int", "print", "isinstance"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "init_data", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Import data to biDSPOT object\n        \n        Parameters\n\t    ----------\n\t    init_data : list, numpy.array or pandas.Series\n\t\t    initial batch to calibrate the algorithm\n            \n        data : numpy.array\n\t\t    data for the run (list, np.array or pd.series)\n\t\n        \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "data", "=", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "self", ".", "data", "=", "data", ".", "values", "\n", "", "else", ":", "\n", "            ", "print", "(", "'This data format (%s) is not supported'", "%", "type", "(", "data", ")", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "init_data", ",", "list", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "np", ".", "array", "(", "init_data", ")", "\n", "", "elif", "isinstance", "(", "init_data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "init_data", "\n", "", "elif", "isinstance", "(", "init_data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "init_data", ".", "values", "\n", "", "elif", "isinstance", "(", "init_data", ",", "int", ")", ":", "\n", "            ", "self", ".", "init_data", "=", "self", ".", "data", "[", ":", "init_data", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "init_data", ":", "]", "\n", "", "elif", "isinstance", "(", "init_data", ",", "float", ")", "&", "(", "init_data", "<", "1", ")", "&", "(", "init_data", ">", "0", ")", ":", "\n", "            ", "r", "=", "int", "(", "init_data", "*", "data", ".", "size", ")", "\n", "self", ".", "init_data", "=", "self", ".", "data", "[", ":", "r", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "r", ":", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "'The initial data cannot be set'", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.add": [[1642, 1663], ["isinstance", "numpy.append", "numpy.array", "isinstance", "isinstance", "print", "type"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        This function allows to append data to the already fitted data\n        \n        Parameters\n\t    ----------\n\t    data : list, numpy.array, pandas.Series\n\t\t    data to append\n        \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "data", "=", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "pd", ".", "Series", ")", ":", "\n", "            ", "data", "=", "data", ".", "values", "\n", "", "else", ":", "\n", "            ", "print", "(", "'This data format (%s) is not supported'", "%", "type", "(", "data", ")", ")", "\n", "return", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "append", "(", "self", ".", "data", ",", "data", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.initialize": [[1664, 1713], ["spot.backMean", "numpy.sort", "print", "print", "print", "spot.bidSPOT._grimshaw", "spot.bidSPOT._quantile", "print", "print", "print", "print", "print", "print", "print", "print", "int", "int", "chr", "chr"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.backMean", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile"], ["", "def", "initialize", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Run the calibration (initialization) step\n        \n        Parameters\n\t    ----------\n\t    verbose : bool\n\t\t    (default = True) If True, gives details about the batch initialization\n        \"\"\"", "\n", "n_init", "=", "self", ".", "init_data", ".", "size", "-", "self", ".", "depth", "\n", "\n", "M", "=", "backMean", "(", "self", ".", "init_data", ",", "self", ".", "depth", ")", "\n", "T", "=", "self", ".", "init_data", "[", "self", ".", "depth", ":", "]", "-", "M", "[", ":", "-", "1", "]", "# new variable", "\n", "\n", "S", "=", "np", ".", "sort", "(", "T", ")", "# we sort T to get the empirical quantile", "\n", "self", ".", "init_threshold", "[", "'up'", "]", "=", "S", "[", "int", "(", "0.98", "*", "n_init", ")", "]", "# t is fixed for the whole algorithm", "\n", "self", ".", "init_threshold", "[", "'down'", "]", "=", "S", "[", "int", "(", "0.02", "*", "n_init", ")", "]", "# t is fixed for the whole algorithm", "\n", "\n", "# initial peaks", "\n", "self", ".", "peaks", "[", "'up'", "]", "=", "T", "[", "T", ">", "self", ".", "init_threshold", "[", "'up'", "]", "]", "-", "self", ".", "init_threshold", "[", "'up'", "]", "\n", "self", ".", "peaks", "[", "'down'", "]", "=", "-", "(", "T", "[", "T", "<", "self", ".", "init_threshold", "[", "'down'", "]", "]", "-", "self", ".", "init_threshold", "[", "'down'", "]", ")", "\n", "self", ".", "Nt", "[", "'up'", "]", "=", "self", ".", "peaks", "[", "'up'", "]", ".", "size", "\n", "self", ".", "Nt", "[", "'down'", "]", "=", "self", ".", "peaks", "[", "'down'", "]", ".", "size", "\n", "self", ".", "n", "=", "n_init", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Initial threshold : %s'", "%", "self", ".", "init_threshold", ")", "\n", "print", "(", "'Number of peaks : %s'", "%", "self", ".", "Nt", ")", "\n", "print", "(", "'Grimshaw maximum log-likelihood estimation ... '", ",", "end", "=", "''", ")", "\n", "\n", "", "l", "=", "{", "'up'", ":", "None", ",", "'down'", ":", "None", "}", "\n", "for", "side", "in", "[", "'up'", ",", "'down'", "]", ":", "\n", "            ", "g", ",", "s", ",", "l", "[", "side", "]", "=", "self", ".", "_grimshaw", "(", "side", ")", "\n", "self", ".", "extreme_quantile", "[", "side", "]", "=", "self", ".", "_quantile", "(", "side", ",", "g", ",", "s", ")", "\n", "self", ".", "gamma", "[", "side", "]", "=", "g", "\n", "self", ".", "sigma", "[", "side", "]", "=", "s", "\n", "\n", "", "ltab", "=", "20", "\n", "form", "=", "(", "'\\t'", "+", "'%20s'", "+", "'%20.2f'", "+", "'%20.2f'", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'[done]'", ")", "\n", "print", "(", "'\\t'", "+", "'Parameters'", ".", "rjust", "(", "ltab", ")", "+", "'Upper'", ".", "rjust", "(", "ltab", ")", "+", "'Lower'", ".", "rjust", "(", "ltab", ")", ")", "\n", "print", "(", "'\\t'", "+", "'-'", "*", "ltab", "*", "3", ")", "\n", "print", "(", "form", "%", "(", "chr", "(", "0x03B3", ")", ",", "self", ".", "gamma", "[", "'up'", "]", ",", "self", ".", "gamma", "[", "'down'", "]", ")", ")", "\n", "print", "(", "form", "%", "(", "chr", "(", "0x03C3", ")", ",", "self", ".", "sigma", "[", "'up'", "]", ",", "self", ".", "sigma", "[", "'down'", "]", ")", ")", "\n", "print", "(", "form", "%", "(", "'likelihood'", ",", "l", "[", "'up'", "]", ",", "l", "[", "'down'", "]", ")", ")", "\n", "print", "(", "form", "%", "(", "'Extreme quantile'", ",", "self", ".", "extreme_quantile", "[", "'up'", "]", ",", "self", ".", "extreme_quantile", "[", "'down'", "]", ")", ")", "\n", "print", "(", "'\\t'", "+", "'-'", "*", "ltab", "*", "3", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._rootsFinder": [[1717, 1763], ["scipy.optimize.minimize", "numpy.round", "numpy.unique", "numpy.arange", "numpy.zeros", "numpy.random.uniform", "f", "spot.bidSPOT._rootsFinder.objFun"], "methods", ["None"], ["", "def", "_rootsFinder", "(", "fun", ",", "jac", ",", "bounds", ",", "npoints", ",", "method", ")", ":", "\n", "        ", "\"\"\"\n        Find possible roots of a scalar function\n        \n        Parameters\n        ----------\n        fun : function\n\t\t    scalar function \n        jac : function\n            first order derivative of the function  \n        bounds : tuple\n            (min,max) interval for the roots search    \n        npoints : int\n            maximum number of roots to output      \n        method : str\n            'regular' : regular sample of the search interval, 'random' : uniform (distribution) sample of the search interval\n        \n        Returns\n        ----------\n        numpy.array\n            possible roots of the function\n        \"\"\"", "\n", "if", "method", "==", "'regular'", ":", "\n", "            ", "step", "=", "(", "bounds", "[", "1", "]", "-", "bounds", "[", "0", "]", ")", "/", "(", "npoints", "+", "1", ")", "\n", "X0", "=", "np", ".", "arange", "(", "bounds", "[", "0", "]", "+", "step", ",", "bounds", "[", "1", "]", ",", "step", ")", "\n", "", "elif", "method", "==", "'random'", ":", "\n", "            ", "X0", "=", "np", ".", "random", ".", "uniform", "(", "bounds", "[", "0", "]", ",", "bounds", "[", "1", "]", ",", "npoints", ")", "\n", "\n", "", "def", "objFun", "(", "X", ",", "f", ",", "jac", ")", ":", "\n", "            ", "g", "=", "0", "\n", "j", "=", "np", ".", "zeros", "(", "X", ".", "shape", ")", "\n", "i", "=", "0", "\n", "for", "x", "in", "X", ":", "\n", "                ", "fx", "=", "f", "(", "x", ")", "\n", "g", "=", "g", "+", "fx", "**", "2", "\n", "j", "[", "i", "]", "=", "2", "*", "fx", "*", "jac", "(", "x", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "return", "g", ",", "j", "\n", "\n", "", "opt", "=", "minimize", "(", "lambda", "X", ":", "objFun", "(", "X", ",", "fun", ",", "jac", ")", ",", "X0", ",", "\n", "method", "=", "'L-BFGS-B'", ",", "\n", "jac", "=", "True", ",", "bounds", "=", "[", "bounds", "]", "*", "len", "(", "X0", ")", ")", "\n", "\n", "X", "=", "opt", ".", "x", "\n", "np", ".", "round", "(", "X", ",", "decimals", "=", "5", ")", "\n", "return", "np", ".", "unique", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._log_likelihood": [[1765, 1789], ["math.log", "numpy.log().sum", "math.log", "Y.mean", "numpy.log"], "methods", ["None"], ["", "def", "_log_likelihood", "(", "Y", ",", "gamma", ",", "sigma", ")", ":", "\n", "        ", "\"\"\"\n        Compute the log-likelihood for the Generalized Pareto Distribution (\u03bc=0)\n        \n        Parameters\n        ----------\n        Y : numpy.array\n\t\t    observations\n        gamma : float\n            GPD index parameter\n        sigma : float\n            GPD scale parameter (>0)   \n        Returns\n        ----------\n        float\n            log-likelihood of the sample Y to be drawn from a GPD(\u03b3,\u03c3,\u03bc=0)\n        \"\"\"", "\n", "n", "=", "Y", ".", "size", "\n", "if", "gamma", "!=", "0", ":", "\n", "            ", "tau", "=", "gamma", "/", "sigma", "\n", "L", "=", "-", "n", "*", "log", "(", "sigma", ")", "-", "(", "1", "+", "(", "1", "/", "gamma", ")", ")", "*", "(", "np", ".", "log", "(", "1", "+", "tau", "*", "Y", ")", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "L", "=", "n", "*", "(", "1", "+", "log", "(", "Y", ".", "mean", "(", ")", ")", ")", "\n", "", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw": [[1791, 1870], ["spot.bidSPOT.peaks[].min", "spot.bidSPOT.peaks[].max", "spot.bidSPOT.peaks[].mean", "spot.bidSPOT._rootsFinder", "spot.bidSPOT._rootsFinder", "numpy.concatenate", "spot.bidSPOT._log_likelihood", "numpy.mean", "spot.bidSPOT._grimshaw.u"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._rootsFinder", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._rootsFinder", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._log_likelihood"], ["", "def", "_grimshaw", "(", "self", ",", "side", ",", "epsilon", "=", "1e-8", ",", "n_points", "=", "8", ")", ":", "\n", "        ", "\"\"\"\n        Compute the GPD parameters estimation with the Grimshaw's trick\n        \n        Parameters\n        ----------\n        epsilon : float\n\t\t    numerical parameter to perform (default : 1e-8)\n        n_points : int\n            maximum number of candidates for maximum likelihood (default : 10)\n        Returns\n        ----------\n        gamma_best,sigma_best,ll_best\n            gamma estimates, sigma estimates and corresponding log-likelihood\n        \"\"\"", "\n", "def", "u", "(", "s", ")", ":", "\n", "            ", "return", "1", "+", "np", ".", "log", "(", "s", ")", ".", "mean", "(", ")", "\n", "\n", "", "def", "v", "(", "s", ")", ":", "\n", "            ", "return", "np", ".", "mean", "(", "1", "/", "s", ")", "\n", "\n", "", "def", "w", "(", "Y", ",", "t", ")", ":", "\n", "            ", "s", "=", "1", "+", "t", "*", "Y", "\n", "us", "=", "u", "(", "s", ")", "\n", "vs", "=", "v", "(", "s", ")", "\n", "return", "us", "*", "vs", "-", "1", "\n", "\n", "", "def", "jac_w", "(", "Y", ",", "t", ")", ":", "\n", "            ", "s", "=", "1", "+", "t", "*", "Y", "\n", "us", "=", "u", "(", "s", ")", "\n", "vs", "=", "v", "(", "s", ")", "\n", "jac_us", "=", "(", "1", "/", "t", ")", "*", "(", "1", "-", "vs", ")", "\n", "jac_vs", "=", "(", "1", "/", "t", ")", "*", "(", "-", "vs", "+", "np", ".", "mean", "(", "1", "/", "s", "**", "2", ")", ")", "\n", "return", "us", "*", "jac_vs", "+", "vs", "*", "jac_us", "\n", "\n", "\n", "", "Ym", "=", "self", ".", "peaks", "[", "side", "]", ".", "min", "(", ")", "\n", "YM", "=", "self", ".", "peaks", "[", "side", "]", ".", "max", "(", ")", "\n", "Ymean", "=", "self", ".", "peaks", "[", "side", "]", ".", "mean", "(", ")", "\n", "\n", "\n", "a", "=", "-", "1", "/", "YM", "\n", "if", "abs", "(", "a", ")", "<", "2", "*", "epsilon", ":", "\n", "            ", "epsilon", "=", "abs", "(", "a", ")", "/", "n_points", "\n", "\n", "", "a", "=", "a", "+", "epsilon", "\n", "b", "=", "2", "*", "(", "Ymean", "-", "Ym", ")", "/", "(", "Ymean", "*", "Ym", ")", "\n", "c", "=", "2", "*", "(", "Ymean", "-", "Ym", ")", "/", "(", "Ym", "**", "2", ")", "\n", "\n", "# We look for possible roots", "\n", "left_zeros", "=", "bidSPOT", ".", "_rootsFinder", "(", "lambda", "t", ":", "w", "(", "self", ".", "peaks", "[", "side", "]", ",", "t", ")", ",", "\n", "lambda", "t", ":", "jac_w", "(", "self", ".", "peaks", "[", "side", "]", ",", "t", ")", ",", "\n", "(", "a", "+", "epsilon", ",", "-", "epsilon", ")", ",", "\n", "n_points", ",", "'regular'", ")", "\n", "\n", "right_zeros", "=", "bidSPOT", ".", "_rootsFinder", "(", "lambda", "t", ":", "w", "(", "self", ".", "peaks", "[", "side", "]", ",", "t", ")", ",", "\n", "lambda", "t", ":", "jac_w", "(", "self", ".", "peaks", "[", "side", "]", ",", "t", ")", ",", "\n", "(", "b", ",", "c", ")", ",", "\n", "n_points", ",", "'regular'", ")", "\n", "\n", "# all the possible roots", "\n", "zeros", "=", "np", ".", "concatenate", "(", "(", "left_zeros", ",", "right_zeros", ")", ")", "\n", "\n", "# 0 is always a solution so we initialize with it", "\n", "gamma_best", "=", "0", "\n", "sigma_best", "=", "Ymean", "\n", "ll_best", "=", "bidSPOT", ".", "_log_likelihood", "(", "self", ".", "peaks", "[", "side", "]", ",", "gamma_best", ",", "sigma_best", ")", "\n", "\n", "# we look for better candidates", "\n", "for", "z", "in", "zeros", ":", "\n", "            ", "gamma", "=", "u", "(", "1", "+", "z", "*", "self", ".", "peaks", "[", "side", "]", ")", "-", "1", "\n", "sigma", "=", "gamma", "/", "z", "\n", "ll", "=", "bidSPOT", ".", "_log_likelihood", "(", "self", ".", "peaks", "[", "side", "]", ",", "gamma", ",", "sigma", ")", "\n", "if", "ll", ">", "ll_best", ":", "\n", "                ", "gamma_best", "=", "gamma", "\n", "sigma_best", "=", "sigma", "\n", "ll_best", "=", "ll", "\n", "\n", "", "", "return", "gamma_best", ",", "sigma_best", ",", "ll_best", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile": [[1873, 1904], ["print", "math.log", "pow", "math.log", "pow"], "methods", ["None"], ["", "def", "_quantile", "(", "self", ",", "side", ",", "gamma", ",", "sigma", ")", ":", "\n", "        ", "\"\"\"\n        Compute the quantile at level 1-q for a given side\n        \n        Parameters\n        ----------\n        side : str\n            'up' or 'down'\n        gamma : float\n\t\t    GPD parameter\n        sigma : float\n            GPD parameter\n        Returns\n        ----------\n        float\n            quantile at level 1-q for the GPD(\u03b3,\u03c3,\u03bc=0)\n        \"\"\"", "\n", "if", "side", "==", "'up'", ":", "\n", "            ", "r", "=", "self", ".", "n", "*", "self", ".", "proba", "/", "self", ".", "Nt", "[", "side", "]", "\n", "if", "gamma", "!=", "0", ":", "\n", "                ", "return", "self", ".", "init_threshold", "[", "'up'", "]", "+", "(", "sigma", "/", "gamma", ")", "*", "(", "pow", "(", "r", ",", "-", "gamma", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "init_threshold", "[", "'up'", "]", "-", "sigma", "*", "log", "(", "r", ")", "\n", "", "", "elif", "side", "==", "'down'", ":", "\n", "            ", "r", "=", "self", ".", "n", "*", "self", ".", "proba", "/", "self", ".", "Nt", "[", "side", "]", "\n", "if", "gamma", "!=", "0", ":", "\n", "                ", "return", "self", ".", "init_threshold", "[", "'down'", "]", "-", "(", "sigma", "/", "gamma", ")", "*", "(", "pow", "(", "r", ",", "-", "gamma", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "init_threshold", "[", "'down'", "]", "+", "sigma", "*", "log", "(", "r", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'error : the side is not right'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.run": [[1906, 2002], ["tqdm.tqdm", "print", "range", "numpy.append.mean", "thup.append", "thdown.append", "alarm.append", "numpy.append", "spot.bidSPOT._grimshaw", "spot.bidSPOT._quantile", "numpy.append", "numpy.append", "spot.bidSPOT._grimshaw", "spot.bidSPOT._quantile", "numpy.append", "alarm.append", "numpy.append", "spot.bidSPOT._grimshaw", "spot.bidSPOT._quantile", "numpy.append", "numpy.append", "spot.bidSPOT._grimshaw", "spot.bidSPOT._quantile", "numpy.append", "numpy.append"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._grimshaw", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT._quantile"], ["", "", "def", "run", "(", "self", ",", "with_alarm", "=", "True", ",", "plot", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Run biDSPOT on the stream\n        \n        Parameters\n        ----------\n        with_alarm : bool\n\t\t    (default = True) If False, SPOT will adapt the threshold assuming \\\n            there is no abnormal values\n        Returns\n        ----------\n        dict\n            keys : 'upper_thresholds', 'lower_thresholds' and 'alarms'\n            \n            '***-thresholds' contains the extreme quantiles and 'alarms' contains \\\n            the indexes of the values which have triggered alarms\n            \n        \"\"\"", "\n", "if", "(", "self", ".", "n", ">", "self", ".", "init_data", ".", "size", ")", ":", "\n", "            ", "print", "(", "'Warning : the algorithm seems to have already been run, you \\\n            should initialize before running again'", ")", "\n", "return", "{", "}", "\n", "\n", "# actual normal window", "\n", "", "W", "=", "self", ".", "init_data", "[", "-", "self", ".", "depth", ":", "]", "\n", "\n", "# list of the thresholds", "\n", "thup", "=", "[", "]", "\n", "thdown", "=", "[", "]", "\n", "alarm", "=", "[", "]", "\n", "# Loop over the stream", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "self", ".", "data", ".", "size", ")", ")", ":", "\n", "            ", "Mi", "=", "W", ".", "mean", "(", ")", "\n", "Ni", "=", "self", ".", "data", "[", "i", "]", "-", "Mi", "\n", "# If the observed value exceeds the current threshold (alarm case)", "\n", "if", "Ni", ">", "self", ".", "extreme_quantile", "[", "'up'", "]", ":", "\n", "# if we want to alarm, we put it in the alarm list", "\n", "                ", "if", "with_alarm", ":", "\n", "                    ", "alarm", ".", "append", "(", "i", ")", "\n", "# otherwise we add it in the peaks", "\n", "", "else", ":", "\n", "                    ", "self", ".", "peaks", "[", "'up'", "]", "=", "np", ".", "append", "(", "self", ".", "peaks", "[", "'up'", "]", ",", "Ni", "-", "self", ".", "init_threshold", "[", "'up'", "]", ")", "\n", "self", ".", "Nt", "[", "'up'", "]", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", "'up'", ")", "\n", "self", ".", "extreme_quantile", "[", "'up'", "]", "=", "self", ".", "_quantile", "(", "'up'", ",", "g", ",", "s", ")", "\n", "W", "=", "np", ".", "append", "(", "W", "[", "1", ":", "]", ",", "self", ".", "data", "[", "i", "]", ")", "\n", "\n", "# case where the value exceeds the initial threshold but not the alarm ones", "\n", "", "", "elif", "Ni", ">", "self", ".", "init_threshold", "[", "'up'", "]", ":", "\n", "# we add it in the peaks", "\n", "                    ", "self", ".", "peaks", "[", "'up'", "]", "=", "np", ".", "append", "(", "self", ".", "peaks", "[", "'up'", "]", ",", "Ni", "-", "self", ".", "init_threshold", "[", "'up'", "]", ")", "\n", "self", ".", "Nt", "[", "'up'", "]", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", "'up'", ")", "\n", "self", ".", "extreme_quantile", "[", "'up'", "]", "=", "self", ".", "_quantile", "(", "'up'", ",", "g", ",", "s", ")", "\n", "W", "=", "np", ".", "append", "(", "W", "[", "1", ":", "]", ",", "self", ".", "data", "[", "i", "]", ")", "\n", "\n", "", "elif", "Ni", "<", "self", ".", "extreme_quantile", "[", "'down'", "]", ":", "\n", "# if we want to alarm, we put it in the alarm list", "\n", "                ", "if", "with_alarm", ":", "\n", "                    ", "alarm", ".", "append", "(", "i", ")", "\n", "# otherwise we add it in the peaks", "\n", "", "else", ":", "\n", "                    ", "self", ".", "peaks", "[", "'down'", "]", "=", "np", ".", "append", "(", "self", ".", "peaks", "[", "'down'", "]", ",", "-", "(", "Ni", "-", "self", ".", "init_threshold", "[", "'down'", "]", ")", ")", "\n", "self", ".", "Nt", "[", "'down'", "]", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", "'down'", ")", "\n", "self", ".", "extreme_quantile", "[", "'down'", "]", "=", "self", ".", "_quantile", "(", "'down'", ",", "g", ",", "s", ")", "\n", "W", "=", "np", ".", "append", "(", "W", "[", "1", ":", "]", ",", "self", ".", "data", "[", "i", "]", ")", "\n", "\n", "# case where the value exceeds the initial threshold but not the alarm ones", "\n", "", "", "elif", "Ni", "<", "self", ".", "init_threshold", "[", "'down'", "]", ":", "\n", "# we add it in the peaks", "\n", "                    ", "self", ".", "peaks", "[", "'down'", "]", "=", "np", ".", "append", "(", "self", ".", "peaks", "[", "'down'", "]", ",", "-", "(", "Ni", "-", "self", ".", "init_threshold", "[", "'down'", "]", ")", ")", "\n", "self", ".", "Nt", "[", "'down'", "]", "+=", "1", "\n", "self", ".", "n", "+=", "1", "\n", "# and we update the thresholds", "\n", "\n", "g", ",", "s", ",", "l", "=", "self", ".", "_grimshaw", "(", "'down'", ")", "\n", "self", ".", "extreme_quantile", "[", "'down'", "]", "=", "self", ".", "_quantile", "(", "'down'", ",", "g", ",", "s", ")", "\n", "W", "=", "np", ".", "append", "(", "W", "[", "1", ":", "]", ",", "self", ".", "data", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "n", "+=", "1", "\n", "W", "=", "np", ".", "append", "(", "W", "[", "1", ":", "]", ",", "self", ".", "data", "[", "i", "]", ")", "\n", "\n", "\n", "", "thup", ".", "append", "(", "self", ".", "extreme_quantile", "[", "'up'", "]", "+", "Mi", ")", "# upper thresholds record", "\n", "thdown", ".", "append", "(", "self", ".", "extreme_quantile", "[", "'down'", "]", "+", "Mi", ")", "# lower thresholds record", "\n", "\n", "", "return", "{", "'upper_thresholds'", ":", "thup", ",", "'lower_thresholds'", ":", "thdown", ",", "'alarms'", ":", "alarm", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.plot": [[2004, 2046], ["range", "run_results.keys", "matplotlib.plot", "matplotlib.xlim", "matplotlib.plot", "fig.append", "matplotlib.plot", "fig.append", "len", "matplotlib.scatter", "fig.append"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.plot", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.plot", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.bidSPOT.plot"], ["", "def", "plot", "(", "self", ",", "run_results", ",", "with_alarm", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Plot the results given by the run\n        \n        Parameters\n        ----------\n        run_results : dict\n            results given by the 'run' method\n        with_alarm : bool\n\t\t    (default = True) If True, alarms are plotted.\n        Returns\n        ----------\n        list\n            list of the plots\n            \n        \"\"\"", "\n", "x", "=", "range", "(", "self", ".", "data", ".", "size", ")", "\n", "K", "=", "run_results", ".", "keys", "(", ")", "\n", "\n", "ts_fig", ",", "=", "plt", ".", "plot", "(", "x", ",", "self", ".", "data", ",", "color", "=", "air_force_blue", ")", "\n", "fig", "=", "[", "ts_fig", "]", "\n", "\n", "if", "'upper_thresholds'", "in", "K", ":", "\n", "            ", "thup", "=", "run_results", "[", "'upper_thresholds'", "]", "\n", "uth_fig", ",", "=", "plt", ".", "plot", "(", "x", ",", "thup", ",", "color", "=", "deep_saffron", ",", "lw", "=", "2", ",", "ls", "=", "'dashed'", ",", "alpha", "=", "0.5", ")", "\n", "fig", ".", "append", "(", "uth_fig", ")", "\n", "\n", "", "if", "'lower_thresholds'", "in", "K", ":", "\n", "            ", "thdown", "=", "run_results", "[", "'lower_thresholds'", "]", "\n", "lth_fig", ",", "=", "plt", ".", "plot", "(", "x", ",", "thdown", ",", "color", "=", "deep_saffron", ",", "lw", "=", "2", ",", "ls", "=", "'dashed'", ",", "alpha", "=", "0.5", ")", "\n", "fig", ".", "append", "(", "lth_fig", ")", "\n", "\n", "", "if", "with_alarm", "and", "(", "'alarms'", "in", "K", ")", ":", "\n", "            ", "alarm", "=", "run_results", "[", "'alarms'", "]", "\n", "if", "len", "(", "alarm", ")", ">", "0", ":", "\n", "                ", "al_fig", "=", "plt", ".", "scatter", "(", "alarm", ",", "self", ".", "data", "[", "alarm", "]", ",", "color", "=", "'red'", ",", "alpha", "=", "0.5", ")", "\n", "fig", ".", "append", "(", "al_fig", ")", "\n", "\n", "", "", "plt", ".", "xlim", "(", "(", "0", ",", "self", ".", "data", ".", "size", ")", ")", "\n", "\n", "\n", "return", "fig", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.spot.backMean": [[1026, 1034], ["X[].sum", "M.append", "range", "numpy.array", "len", "M.append"], "function", ["None"], ["def", "backMean", "(", "X", ",", "d", ")", ":", "\n", "    ", "M", "=", "[", "]", "\n", "w", "=", "X", "[", ":", "d", "]", ".", "sum", "(", ")", "\n", "M", ".", "append", "(", "w", "/", "d", ")", "\n", "for", "i", "in", "range", "(", "d", ",", "len", "(", "X", ")", ")", ":", "\n", "        ", "w", "=", "w", "-", "X", "[", "i", "-", "d", "]", "+", "X", "[", "i", "]", "\n", "M", ".", "append", "(", "w", "/", "d", ")", "\n", "", "return", "np", ".", "array", "(", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.masking.TriangularCausalMask.__init__": [[4, 8], ["torch.no_grad", "torch.triu().to", "torch.triu", "torch.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "B", ",", "L", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "mask_shape", "=", "[", "B", ",", "1", ",", "L", ",", "L", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "_mask", "=", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "mask_shape", ",", "dtype", "=", "torch", ".", "bool", ")", ",", "diagonal", "=", "1", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.masking.TriangularCausalMask.mask": [[9, 12], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "mask", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.masking.ProbMask.__init__": [[14, 21], ["torch.ones().to().triu", "_mask[].expand", "_mask_ex[].to", "_mask_ex[].to.view().to", "torch.ones().to", "_mask_ex[].to.view", "torch.ones", "torch.arange", "torch.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "B", ",", "H", ",", "L", ",", "index", ",", "scores", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "_mask", "=", "torch", ".", "ones", "(", "L", ",", "scores", ".", "shape", "[", "-", "1", "]", ",", "dytpe", "=", "torch", ".", "bool", ")", ".", "to", "(", "device", ")", ".", "triu", "(", "1", ")", "\n", "_mask_ex", "=", "_mask", "[", "None", ",", "None", ",", ":", "]", ".", "expand", "(", "B", ",", "H", ",", "L", ",", "scores", ".", "shape", "[", "-", "1", "]", ")", "\n", "indicator", "=", "_mask_ex", "[", "torch", ".", "arange", "(", "B", ")", "[", ":", ",", "None", ",", "None", "]", ",", "\n", "torch", ".", "arange", "(", "H", ")", "[", "None", ",", ":", ",", "None", "]", ",", "\n", "index", ",", ":", "]", ".", "to", "(", "device", ")", "\n", "self", ".", "_mask", "=", "indicator", ".", "view", "(", "scores", ".", "shape", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.masking.ProbMask.mask": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mask", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_mask", "", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_basic.Exp_Basic.__init__": [[6, 10], ["exp_basic.Exp_Basic._acquire_device", "exp_basic.Exp_Basic._build_model().to", "exp_basic.Exp_Basic._build_model"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_basic.Exp_Basic._acquire_device", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._build_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "self", ".", "_acquire_device", "(", ")", "\n", "self", ".", "model", "=", "self", ".", "_build_model", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_basic.Exp_Basic._build_model": [[11, 14], ["None"], "methods", ["None"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_basic.Exp_Basic._acquire_device": [[15, 24], ["str", "torch.device", "print", "torch.device", "print"], "methods", ["None"], ["", "def", "_acquire_device", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "use_gpu", ":", "\n", "            ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "self", ".", "args", ".", "gpu", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "print", "(", "'Use GPU: cuda:0'", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "print", "(", "'Use CPU'", ")", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_basic.Exp_Basic._get_data": [[25, 27], ["None"], "methods", ["None"], ["", "def", "_get_data", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_basic.Exp_Basic.vali": [[28, 30], ["None"], "methods", ["None"], ["", "def", "vali", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_basic.Exp_Basic.train": [[31, 33], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_basic.Exp_Basic.test": [[34, 36], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_gta_dad.Exp_GTA_DAD.__init__": [[27, 29], ["exp.exp_basic.Exp_Basic.__init__"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Exp_GTA_DAD", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_gta_dad.Exp_GTA_DAD._build_model": [[30, 56], ["model.double"], "methods", ["None"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "model_dict", "=", "{", "\n", "'gta'", ":", "GTA", ",", "\n", "}", "\n", "if", "self", ".", "args", ".", "model", "==", "'gta'", ":", "\n", "            ", "model", "=", "model_dict", "[", "self", ".", "args", ".", "model", "]", "(", "\n", "self", ".", "args", ".", "num_nodes", ",", "\n", "self", ".", "args", ".", "seq_len", ",", "\n", "self", ".", "args", ".", "label_len", ",", "\n", "self", ".", "args", ".", "pred_len", ",", "\n", "self", ".", "args", ".", "num_levels", ",", "\n", "self", ".", "args", ".", "factor", ",", "\n", "self", ".", "args", ".", "d_model", ",", "\n", "self", ".", "args", ".", "n_heads", ",", "\n", "self", ".", "args", ".", "e_layers", ",", "\n", "self", ".", "args", ".", "d_layers", ",", "\n", "self", ".", "args", ".", "d_ff", ",", "\n", "self", ".", "args", ".", "dropout", ",", "\n", "self", ".", "args", ".", "attn", ",", "\n", "self", ".", "args", ".", "embed", ",", "\n", "self", ".", "args", ".", "data", ",", "\n", "self", ".", "args", ".", "activation", ",", "\n", "self", ".", "device", "\n", ")", "\n", "\n", "", "return", "model", ".", "double", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_gta_dad.Exp_GTA_DAD._get_data": [[57, 90], ["Data", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len"], "methods", ["None"], ["", "def", "_get_data", "(", "self", ",", "flag", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "\n", "data_dict", "=", "{", "\n", "'SMAP'", ":", "NASA_Anomaly", ",", "\n", "'MSL'", ":", "NASA_Anomaly", ",", "\n", "'WADI'", ":", "WADI", ",", "\n", "'SWaT'", ":", "SWaT", ",", "\n", "}", "\n", "Data", "=", "data_dict", "[", "self", ".", "args", ".", "data", "]", "\n", "\n", "if", "flag", "==", "'test'", ":", "\n", "            ", "shuffle_flag", "=", "False", ";", "drop_last", "=", "True", ";", "batch_size", "=", "args", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "shuffle_flag", "=", "True", ";", "drop_last", "=", "True", ";", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "", "data_set", "=", "Data", "(", "\n", "root_path", "=", "args", ".", "root_path", ",", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "flag", "=", "flag", ",", "\n", "size", "=", "[", "args", ".", "seq_len", ",", "args", ".", "label_len", ",", "args", ".", "pred_len", "]", ",", "\n", "features", "=", "args", ".", "features", ",", "\n", "target", "=", "args", ".", "target", "\n", ")", "\n", "print", "(", "flag", ",", "len", "(", "data_set", ")", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "data_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle_flag", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "drop_last", "=", "drop_last", ")", "\n", "\n", "return", "data_set", ",", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_gta_dad.Exp_GTA_DAD._select_optimizer": [[91, 94], ["torch.optim.Adam", "torch.optim.Adam", "exp_gta_dad.Exp_GTA_DAD.model.parameters"], "methods", ["None"], ["", "def", "_select_optimizer", "(", "self", ")", ":", "\n", "        ", "model_optim", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "return", "model_optim", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_gta_dad.Exp_GTA_DAD._select_criterion": [[95, 98], ["torch.MSELoss", "torch.MSELoss"], "methods", ["None"], ["", "def", "_select_criterion", "(", "self", ")", ":", "\n", "        ", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_gta_dad.Exp_GTA_DAD.vali": [[99, 128], ["exp_gta_dad.Exp_GTA_DAD.model.eval", "enumerate", "numpy.average", "exp_gta_dad.Exp_GTA_DAD.model.train", "batch_x.double().to.double().to.double().to", "batch_y[].to.double().to", "batch_x_mark.double().to.double().to.double().to", "batch_y_mark.double().to.double().to.double().to", "exp_gta_dad.Exp_GTA_DAD.model", "batch_y[].to", "exp_gta_dad.Exp_GTA_DAD.detach().cpu", "batch_y[].to.detach().cpu", "criterion", "numpy.average.append", "batch_x.double().to.double().to.double", "batch_y[].to.double", "batch_x_mark.double().to.double().to.double", "batch_y_mark.double().to.double().to.double", "exp_gta_dad.Exp_GTA_DAD.detach", "batch_y[].to.detach"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.train"], ["", "def", "vali", "(", "self", ",", "vali_data", ",", "vali_loader", ",", "criterion", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ",", "batch_label", ")", "in", "enumerate", "(", "vali_loader", ")", ":", "\n", "            ", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y", "=", "batch_y", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch_x_mark", "=", "batch_x_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y_mark", "=", "batch_y_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# decoder input", "\n", "# dec_inp = torch.zeros_like(batch_y[:,-self.args.pred_len:,:]).double()", "\n", "# dec_inp = torch.cat([batch_y[:,:self.args.label_len,:], dec_inp], dim=1).double().to(self.device)", "\n", "# encoder - decoder", "\n", "# outputs = self.model(batch_x, batch_x_mark, dec_inp, batch_y_mark)", "\n", "outputs", "=", "self", ".", "model", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ")", "\n", "batch_y", "=", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "pred", "=", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "true", "=", "batch_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "loss", "=", "criterion", "(", "pred", ",", "true", ")", "\n", "\n", "total_loss", ".", "append", "(", "loss", ")", "\n", "\n", "", "total_loss", "=", "np", ".", "average", "(", "total_loss", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_gta_dad.Exp_GTA_DAD.train": [[129, 202], ["exp_gta_dad.Exp_GTA_DAD._get_data", "exp_gta_dad.Exp_GTA_DAD._get_data", "exp_gta_dad.Exp_GTA_DAD._get_data", "time.time", "len", "utils.tools.EarlyStopping", "exp_gta_dad.Exp_GTA_DAD._select_optimizer", "exp_gta_dad.Exp_GTA_DAD._select_criterion", "range", "exp_gta_dad.Exp_GTA_DAD.model.load_state_dict", "os.path.exists", "os.makedirs", "exp_gta_dad.Exp_GTA_DAD.model.train", "enumerate", "numpy.average", "exp_gta_dad.Exp_GTA_DAD.vali", "exp_gta_dad.Exp_GTA_DAD.vali", "print", "utils.tools.EarlyStopping.", "utils.tools.adjust_learning_rate", "torch.load", "torch.load", "torch.load", "torch.load", "exp_gta_dad.Exp_GTA_DAD.zero_grad", "batch_x.double().to.double().to.double().to", "batch_y[].to.double().to", "batch_x_mark.double().to.double().to.double().to", "batch_y_mark.double().to.double().to.double().to", "exp_gta_dad.Exp_GTA_DAD.model", "batch_y[].to", "numpy.average.append", "loss.backward", "exp_gta_dad.Exp_GTA_DAD.step", "print", "exp_gta_dad.Exp_GTA_DAD.", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "loss.item", "print", "print", "time.time", "batch_x.double().to.double().to.double", "batch_y[].to.double", "batch_x_mark.double().to.double().to.double", "batch_y_mark.double().to.double().to.double", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "loss.item", "time.time"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._select_optimizer", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._select_criterion", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.train", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.vali", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.vali", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.adjust_learning_rate"], ["", "def", "train", "(", "self", ",", "setting", ")", ":", "\n", "        ", "train_data", ",", "train_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'train'", ")", "\n", "vali_data", ",", "vali_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'val'", ")", "\n", "test_data", ",", "test_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'test'", ")", "\n", "\n", "path", "=", "'./checkpoints/'", "+", "setting", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "time_now", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_steps", "=", "len", "(", "train_loader", ")", "\n", "early_stopping", "=", "EarlyStopping", "(", "patience", "=", "self", ".", "args", ".", "patience", ",", "verbose", "=", "True", ")", "\n", "\n", "model_optim", "=", "self", ".", "_select_optimizer", "(", ")", "\n", "criterion", "=", "self", ".", "_select_criterion", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "train_epochs", ")", ":", "\n", "            ", "iter_count", "=", "0", "\n", "train_loss", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "iter_count", "+=", "1", "\n", "\n", "model_optim", ".", "zero_grad", "(", ")", "\n", "\n", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y", "=", "batch_y", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch_x_mark", "=", "batch_x_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y_mark", "=", "batch_y_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# decoder input", "\n", "# dec_inp = torch.zeros_like(batch_y[:,-self.args.pred_len:,:]).double()", "\n", "# dec_inp = torch.cat([batch_y[:,:self.args.label_len,:], dec_inp], dim=1).double().to(self.device)", "\n", "# encoder - decoder", "\n", "# outputs = self.model(batch_x, batch_x_mark, dec_inp, batch_y_mark)", "\n", "outputs", "=", "self", ".", "model", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ")", "\n", "batch_y", "=", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "loss", "=", "criterion", "(", "outputs", ",", "batch_y", ")", "+", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "self", ".", "model", ".", "gt_embedding", ".", "gc_module", ".", "logits", "[", ":", ",", "0", "]", ")", ")", "\n", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "\"\\titers: {0}, epoch: {1} | loss: {2:.7f}\"", ".", "format", "(", "i", "+", "1", ",", "epoch", "+", "1", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "speed", "=", "(", "time", ".", "time", "(", ")", "-", "time_now", ")", "/", "iter_count", "\n", "left_time", "=", "speed", "*", "(", "(", "self", ".", "args", ".", "train_epochs", "-", "epoch", ")", "*", "train_steps", "-", "i", ")", "\n", "print", "(", "'\\tspeed: {:.4f}s/iter; left time: {:.4f}s'", ".", "format", "(", "speed", ",", "left_time", ")", ")", "\n", "iter_count", "=", "0", "\n", "time_now", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "model_optim", ".", "step", "(", ")", "\n", "\n", "", "train_loss", "=", "np", ".", "average", "(", "train_loss", ")", "\n", "vali_loss", "=", "self", ".", "vali", "(", "vali_data", ",", "vali_loader", ",", "criterion", ")", "\n", "test_loss", "=", "self", ".", "vali", "(", "test_data", ",", "test_loader", ",", "criterion", ")", "\n", "\n", "print", "(", "\"Epoch: {0}, Steps: {1} | Train Loss: {2:.7f} Vali Loss: {3:.7f} Test Loss: {4:.7f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "train_steps", ",", "train_loss", ",", "vali_loss", ",", "test_loss", ")", ")", "\n", "early_stopping", "(", "vali_loss", ",", "self", ".", "model", ",", "path", ")", "\n", "if", "early_stopping", ".", "early_stop", ":", "\n", "                ", "print", "(", "\"Early stopping\"", ")", "\n", "break", "\n", "\n", "", "adjust_learning_rate", "(", "model_optim", ",", "epoch", "+", "1", ",", "self", ".", "args", ")", "\n", "\n", "", "best_model_path", "=", "path", "+", "'/'", "+", "'checkpoint.pth'", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "best_model_path", ")", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_gta_dad.Exp_GTA_DAD.test": [[203, 258], ["exp_gta_dad.Exp_GTA_DAD._get_data", "exp_gta_dad.Exp_GTA_DAD.model.eval", "numpy.array", "numpy.array", "numpy.array", "print", "preds.reshape.reshape.reshape", "trues.reshape.reshape.reshape", "labels.reshape.reshape.reshape", "print", "utils.metrics.metric", "print", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "os.path.exists", "os.makedirs", "numpy.array", "batch_x.double().to.double().to.double().to", "batch_y[].to.double().to", "batch_x_mark.double().to.double().to.double().to", "batch_y_mark.double().to.double().to.double().to", "exp_gta_dad.Exp_GTA_DAD.model", "batch_y[].to", "exp_gta_dad.Exp_GTA_DAD.detach().cpu().numpy", "batch_y[].to.detach().cpu().numpy", "batch_label.long().detach().numpy.long().detach().numpy.long().detach().numpy", "preds.reshape.reshape.append", "trues.reshape.reshape.append", "labels.reshape.reshape.append", "batch_x.double().to.double().to.double", "batch_y[].to.double", "batch_x_mark.double().to.double().to.double", "batch_y_mark.double().to.double().to.double", "exp_gta_dad.Exp_GTA_DAD.detach().cpu", "batch_y[].to.detach().cpu", "batch_label.long().detach().numpy.long().detach().numpy.long().detach", "exp_gta_dad.Exp_GTA_DAD.detach", "batch_y[].to.detach", "batch_label.long().detach().numpy.long().detach().numpy.long"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.metric"], ["", "def", "test", "(", "self", ",", "setting", ")", ":", "\n", "        ", "test_data", ",", "test_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'test'", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "preds", "=", "[", "]", "\n", "trues", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ",", "batch_label", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "                ", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y", "=", "batch_y", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_x_mark", "=", "batch_x_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y_mark", "=", "batch_y_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# decoder input", "\n", "# dec_inp = torch.zeros_like(batch_y[:,-self.args.pred_len:,:]).double()", "\n", "# dec_inp = torch.cat([batch_y[:,:self.args.label_len,:], dec_inp], dim=1).double().to(self.device)", "\n", "# encoder - decoder", "\n", "# outputs = self.model(batch_x, batch_x_mark, dec_inp, batch_y_mark)", "\n", "outputs", "=", "self", ".", "model", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ")", "\n", "batch_y", "=", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "pred", "=", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#.squeeze()", "\n", "true", "=", "batch_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#.squeeze()", "\n", "batch_label", "=", "batch_label", ".", "long", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "trues", ".", "append", "(", "true", ")", "\n", "labels", ".", "append", "(", "batch_label", ")", "\n", "\n", "", "", "preds", "=", "np", ".", "array", "(", "preds", ")", "\n", "trues", "=", "np", ".", "array", "(", "trues", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "print", "(", "'test shape:'", ",", "preds", ".", "shape", ",", "trues", ".", "shape", ")", "\n", "preds", "=", "preds", ".", "reshape", "(", "-", "1", ",", "preds", ".", "shape", "[", "-", "2", "]", ",", "preds", ".", "shape", "[", "-", "1", "]", ")", "\n", "trues", "=", "trues", ".", "reshape", "(", "-", "1", ",", "trues", ".", "shape", "[", "-", "2", "]", ",", "trues", ".", "shape", "[", "-", "1", "]", ")", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ",", "labels", ".", "shape", "[", "-", "1", "]", ")", "\n", "print", "(", "'test shape:'", ",", "preds", ".", "shape", ",", "trues", ".", "shape", ")", "\n", "\n", "# result save", "\n", "folder_path", "=", "'./results/'", "+", "setting", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "\n", "", "mae", ",", "mse", ",", "rmse", ",", "mape", ",", "mspe", "=", "metric", "(", "preds", ",", "trues", ")", "\n", "print", "(", "'mse:{}, mae:{}'", ".", "format", "(", "mse", ",", "mae", ")", ")", "\n", "\n", "np", ".", "save", "(", "folder_path", "+", "'metrics.npy'", ",", "np", ".", "array", "(", "[", "mae", ",", "mse", ",", "rmse", ",", "mape", ",", "mspe", "]", ")", ")", "\n", "np", ".", "save", "(", "folder_path", "+", "'pred.npy'", ",", "preds", ")", "\n", "np", ".", "save", "(", "folder_path", "+", "'true.npy'", ",", "trues", ")", "\n", "np", ".", "save", "(", "folder_path", "+", "'label.npy'", ",", "labels", ")", "\n", "\n", "return", "", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer_dad.Exp_Informer_DAD.__init__": [[26, 28], ["exp.exp_basic.Exp_Basic.__init__"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Exp_Informer_DAD", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer_dad.Exp_Informer_DAD._build_model": [[29, 56], ["model.double"], "methods", ["None"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "model_dict", "=", "{", "\n", "'informer'", ":", "Informer", ",", "\n", "}", "\n", "if", "self", ".", "args", ".", "model", "==", "'informer'", ":", "\n", "            ", "model", "=", "model_dict", "[", "self", ".", "args", ".", "model", "]", "(", "\n", "self", ".", "args", ".", "enc_in", ",", "\n", "self", ".", "args", ".", "dec_in", ",", "\n", "self", ".", "args", ".", "c_out", ",", "\n", "self", ".", "args", ".", "seq_len", ",", "\n", "self", ".", "args", ".", "label_len", ",", "\n", "self", ".", "args", ".", "pred_len", ",", "\n", "self", ".", "args", ".", "factor", ",", "\n", "self", ".", "args", ".", "d_model", ",", "\n", "self", ".", "args", ".", "n_heads", ",", "\n", "self", ".", "args", ".", "e_layers", ",", "\n", "self", ".", "args", ".", "d_layers", ",", "\n", "self", ".", "args", ".", "d_ff", ",", "\n", "self", ".", "args", ".", "dropout", ",", "\n", "self", ".", "args", ".", "attn", ",", "\n", "self", ".", "args", ".", "embed", ",", "\n", "self", ".", "args", ".", "data", "[", ":", "-", "1", "]", ",", "\n", "self", ".", "args", ".", "activation", ",", "\n", "self", ".", "device", "\n", ")", "\n", "\n", "", "return", "model", ".", "double", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer_dad.Exp_Informer_DAD._get_data": [[57, 89], ["Data", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len"], "methods", ["None"], ["", "def", "_get_data", "(", "self", ",", "flag", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "\n", "data_dict", "=", "{", "\n", "'SMAP'", ":", "NASA_Anomaly", ",", "\n", "'MSL'", ":", "NASA_Anomaly", ",", "\n", "'WADI'", ":", "WADI", ",", "\n", "}", "\n", "Data", "=", "data_dict", "[", "self", ".", "args", ".", "data", "]", "\n", "\n", "if", "flag", "==", "'test'", ":", "\n", "            ", "shuffle_flag", "=", "False", ";", "drop_last", "=", "True", ";", "batch_size", "=", "args", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "shuffle_flag", "=", "True", ";", "drop_last", "=", "True", ";", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "", "data_set", "=", "Data", "(", "\n", "root_path", "=", "args", ".", "root_path", ",", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "flag", "=", "flag", ",", "\n", "size", "=", "[", "args", ".", "seq_len", ",", "args", ".", "label_len", ",", "args", ".", "pred_len", "]", ",", "\n", "features", "=", "args", ".", "features", ",", "\n", "target", "=", "args", ".", "target", "\n", ")", "\n", "print", "(", "flag", ",", "len", "(", "data_set", ")", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "data_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle_flag", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "drop_last", "=", "drop_last", ")", "\n", "\n", "return", "data_set", ",", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer_dad.Exp_Informer_DAD._select_optimizer": [[90, 93], ["torch.optim.Adam", "torch.optim.Adam", "exp_informer_dad.Exp_Informer_DAD.model.parameters"], "methods", ["None"], ["", "def", "_select_optimizer", "(", "self", ")", ":", "\n", "        ", "model_optim", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "return", "model_optim", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer_dad.Exp_Informer_DAD._select_criterion": [[94, 97], ["torch.MSELoss", "torch.MSELoss"], "methods", ["None"], ["", "def", "_select_criterion", "(", "self", ")", ":", "\n", "        ", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer_dad.Exp_Informer_DAD.vali": [[98, 126], ["exp_informer_dad.Exp_Informer_DAD.model.eval", "enumerate", "numpy.average", "exp_informer_dad.Exp_Informer_DAD.model.train", "batch_x.double().to.double().to.double().to", "batch_y[].to.double", "batch_x_mark.double().to.double().to.double().to", "batch_y_mark.double().to.double().to.double().to", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "exp_informer_dad.Exp_Informer_DAD.model", "batch_y[].to", "exp_informer_dad.Exp_Informer_DAD.detach().cpu", "batch_y[].to.detach().cpu", "criterion", "numpy.average.append", "batch_x.double().to.double().to.double", "batch_x_mark.double().to.double().to.double", "batch_y_mark.double().to.double().to.double", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "exp_informer_dad.Exp_Informer_DAD.detach", "batch_y[].to.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.train"], ["", "def", "vali", "(", "self", ",", "vali_data", ",", "vali_loader", ",", "criterion", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ",", "batch_label", ")", "in", "enumerate", "(", "vali_loader", ")", ":", "\n", "            ", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y", "=", "batch_y", ".", "double", "(", ")", "\n", "\n", "batch_x_mark", "=", "batch_x_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y_mark", "=", "batch_y_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# decoder input", "\n", "dec_inp", "=", "torch", ".", "zeros_like", "(", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ")", ".", "double", "(", ")", "\n", "dec_inp", "=", "torch", ".", "cat", "(", "[", "batch_y", "[", ":", ",", ":", "self", ".", "args", ".", "label_len", ",", ":", "]", ",", "dec_inp", "]", ",", "dim", "=", "1", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# encoder - decoder", "\n", "outputs", "=", "self", ".", "model", "(", "batch_x", ",", "batch_x_mark", ",", "dec_inp", ",", "batch_y_mark", ")", "\n", "batch_y", "=", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "pred", "=", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "true", "=", "batch_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "loss", "=", "criterion", "(", "pred", ",", "true", ")", "\n", "\n", "total_loss", ".", "append", "(", "loss", ")", "\n", "\n", "", "total_loss", "=", "np", ".", "average", "(", "total_loss", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer_dad.Exp_Informer_DAD.train": [[127, 198], ["exp_informer_dad.Exp_Informer_DAD._get_data", "exp_informer_dad.Exp_Informer_DAD._get_data", "exp_informer_dad.Exp_Informer_DAD._get_data", "time.time", "len", "utils.tools.EarlyStopping", "exp_informer_dad.Exp_Informer_DAD._select_optimizer", "exp_informer_dad.Exp_Informer_DAD._select_criterion", "range", "exp_informer_dad.Exp_Informer_DAD.model.load_state_dict", "os.path.exists", "os.makedirs", "exp_informer_dad.Exp_Informer_DAD.model.train", "enumerate", "numpy.average", "exp_informer_dad.Exp_Informer_DAD.vali", "exp_informer_dad.Exp_Informer_DAD.vali", "print", "utils.tools.EarlyStopping.", "utils.tools.adjust_learning_rate", "torch.load", "torch.load", "torch.load", "torch.load", "exp_informer_dad.Exp_Informer_DAD.zero_grad", "batch_x.double().to.double().to.double().to", "batch_y[].to.double", "batch_x_mark.double().to.double().to.double().to", "batch_y_mark.double().to.double().to.double().to", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "exp_informer_dad.Exp_Informer_DAD.model", "batch_y[].to", "exp_informer_dad.Exp_Informer_DAD.", "numpy.average.append", "exp_informer_dad.Exp_Informer_DAD.backward", "exp_informer_dad.Exp_Informer_DAD.step", "print", "exp_informer_dad.Exp_Informer_DAD.item", "print", "print", "time.time", "batch_x.double().to.double().to.double", "batch_x_mark.double().to.double().to.double", "batch_y_mark.double().to.double().to.double", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "exp_informer_dad.Exp_Informer_DAD.item", "time.time", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._select_optimizer", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._select_criterion", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.train", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.vali", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.vali", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.adjust_learning_rate"], ["", "def", "train", "(", "self", ",", "setting", ")", ":", "\n", "        ", "train_data", ",", "train_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'train'", ")", "\n", "vali_data", ",", "vali_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'val'", ")", "\n", "test_data", ",", "test_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'test'", ")", "\n", "\n", "path", "=", "'./checkpoints/'", "+", "setting", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "time_now", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_steps", "=", "len", "(", "train_loader", ")", "\n", "early_stopping", "=", "EarlyStopping", "(", "patience", "=", "self", ".", "args", ".", "patience", ",", "verbose", "=", "True", ")", "\n", "\n", "model_optim", "=", "self", ".", "_select_optimizer", "(", ")", "\n", "criterion", "=", "self", ".", "_select_criterion", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "train_epochs", ")", ":", "\n", "            ", "iter_count", "=", "0", "\n", "train_loss", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "iter_count", "+=", "1", "\n", "\n", "model_optim", ".", "zero_grad", "(", ")", "\n", "\n", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y", "=", "batch_y", ".", "double", "(", ")", "\n", "\n", "batch_x_mark", "=", "batch_x_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y_mark", "=", "batch_y_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# decoder input", "\n", "dec_inp", "=", "torch", ".", "zeros_like", "(", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ")", ".", "double", "(", ")", "\n", "dec_inp", "=", "torch", ".", "cat", "(", "[", "batch_y", "[", ":", ",", ":", "self", ".", "args", ".", "label_len", ",", ":", "]", ",", "dec_inp", "]", ",", "dim", "=", "1", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# encoder - decoder", "\n", "outputs", "=", "self", ".", "model", "(", "batch_x", ",", "batch_x_mark", ",", "dec_inp", ",", "batch_y_mark", ")", "\n", "\n", "batch_y", "=", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "batch_y", ")", "\n", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "\"\\titers: {0}, epoch: {1} | loss: {2:.7f}\"", ".", "format", "(", "i", "+", "1", ",", "epoch", "+", "1", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "speed", "=", "(", "time", ".", "time", "(", ")", "-", "time_now", ")", "/", "iter_count", "\n", "left_time", "=", "speed", "*", "(", "(", "self", ".", "args", ".", "train_epochs", "-", "epoch", ")", "*", "train_steps", "-", "i", ")", "\n", "print", "(", "'\\tspeed: {:.4f}s/iter; left time: {:.4f}s'", ".", "format", "(", "speed", ",", "left_time", ")", ")", "\n", "iter_count", "=", "0", "\n", "time_now", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "model_optim", ".", "step", "(", ")", "\n", "\n", "", "train_loss", "=", "np", ".", "average", "(", "train_loss", ")", "\n", "vali_loss", "=", "self", ".", "vali", "(", "vali_data", ",", "vali_loader", ",", "criterion", ")", "\n", "test_loss", "=", "self", ".", "vali", "(", "test_data", ",", "test_loader", ",", "criterion", ")", "\n", "\n", "print", "(", "\"Epoch: {0}, Steps: {1} | Train Loss: {2:.7f} Vali Loss: {3:.7f} Test Loss: {4:.7f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "train_steps", ",", "train_loss", ",", "vali_loss", ",", "test_loss", ")", ")", "\n", "early_stopping", "(", "vali_loss", ",", "self", ".", "model", ",", "path", ")", "\n", "if", "early_stopping", ".", "early_stop", ":", "\n", "                ", "print", "(", "\"Early stopping\"", ")", "\n", "break", "\n", "\n", "", "adjust_learning_rate", "(", "model_optim", ",", "epoch", "+", "1", ",", "self", ".", "args", ")", "\n", "\n", "", "best_model_path", "=", "path", "+", "'/'", "+", "'checkpoint.pth'", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "best_model_path", ")", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer_dad.Exp_Informer_DAD.test": [[199, 253], ["exp_informer_dad.Exp_Informer_DAD._get_data", "exp_informer_dad.Exp_Informer_DAD.model.eval", "numpy.array", "numpy.array", "numpy.array", "print", "preds.reshape.reshape.reshape", "trues.reshape.reshape.reshape", "labels.reshape.reshape.reshape", "print", "utils.metrics.metric", "print", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "os.path.exists", "os.makedirs", "numpy.array", "batch_x.double().to.double().to.double().to", "batch_y[].to.double", "batch_x_mark.double().to.double().to.double().to", "batch_y_mark.double().to.double().to.double().to", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "exp_informer_dad.Exp_Informer_DAD.model", "batch_y[].to", "exp_informer_dad.Exp_Informer_DAD.detach().cpu().numpy", "batch_y[].to.detach().cpu().numpy", "batch_label.long().detach().numpy.long().detach().numpy.long().detach().numpy", "preds.reshape.reshape.append", "trues.reshape.reshape.append", "labels.reshape.reshape.append", "batch_x.double().to.double().to.double", "batch_x_mark.double().to.double().to.double", "batch_y_mark.double().to.double().to.double", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "exp_informer_dad.Exp_Informer_DAD.detach().cpu", "batch_y[].to.detach().cpu", "batch_label.long().detach().numpy.long().detach().numpy.long().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "exp_informer_dad.Exp_Informer_DAD.detach", "batch_y[].to.detach", "batch_label.long().detach().numpy.long().detach().numpy.long"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.metric"], ["", "def", "test", "(", "self", ",", "setting", ")", ":", "\n", "        ", "test_data", ",", "test_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'test'", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "preds", "=", "[", "]", "\n", "trues", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ",", "batch_label", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "                ", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y", "=", "batch_y", ".", "double", "(", ")", "\n", "batch_x_mark", "=", "batch_x_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y_mark", "=", "batch_y_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# decoder input", "\n", "dec_inp", "=", "torch", ".", "zeros_like", "(", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ")", ".", "double", "(", ")", "\n", "dec_inp", "=", "torch", ".", "cat", "(", "[", "batch_y", "[", ":", ",", ":", "self", ".", "args", ".", "label_len", ",", ":", "]", ",", "dec_inp", "]", ",", "dim", "=", "1", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# encoder - decoder", "\n", "outputs", "=", "self", ".", "model", "(", "batch_x", ",", "batch_x_mark", ",", "dec_inp", ",", "batch_y_mark", ")", "\n", "batch_y", "=", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "pred", "=", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#.squeeze()", "\n", "true", "=", "batch_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#.squeeze()", "\n", "batch_label", "=", "batch_label", ".", "long", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "trues", ".", "append", "(", "true", ")", "\n", "labels", ".", "append", "(", "batch_label", ")", "\n", "\n", "", "", "preds", "=", "np", ".", "array", "(", "preds", ")", "\n", "trues", "=", "np", ".", "array", "(", "trues", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "print", "(", "'test shape:'", ",", "preds", ".", "shape", ",", "trues", ".", "shape", ")", "\n", "preds", "=", "preds", ".", "reshape", "(", "-", "1", ",", "preds", ".", "shape", "[", "-", "2", "]", ",", "preds", ".", "shape", "[", "-", "1", "]", ")", "\n", "trues", "=", "trues", ".", "reshape", "(", "-", "1", ",", "trues", ".", "shape", "[", "-", "2", "]", ",", "trues", ".", "shape", "[", "-", "1", "]", ")", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ",", "labels", ".", "shape", "[", "-", "1", "]", ")", "\n", "print", "(", "'test shape:'", ",", "preds", ".", "shape", ",", "trues", ".", "shape", ")", "\n", "\n", "# result save", "\n", "folder_path", "=", "'./results/'", "+", "setting", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "\n", "", "mae", ",", "mse", ",", "rmse", ",", "mape", ",", "mspe", "=", "metric", "(", "preds", ",", "trues", ")", "\n", "print", "(", "'mse:{}, mae:{}'", ".", "format", "(", "mse", ",", "mae", ")", ")", "\n", "\n", "np", ".", "save", "(", "folder_path", "+", "'metrics.npy'", ",", "np", ".", "array", "(", "[", "mae", ",", "mse", ",", "rmse", ",", "mape", ",", "mspe", "]", ")", ")", "\n", "np", ".", "save", "(", "folder_path", "+", "'pred.npy'", ",", "preds", ")", "\n", "np", ".", "save", "(", "folder_path", "+", "'true.npy'", ",", "trues", ")", "\n", "np", ".", "save", "(", "folder_path", "+", "'label.npy'", ",", "labels", ")", "\n", "\n", "return", "", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_vrae_dad.Exp_VRAE_DAD.__init__": [[25, 27], ["exp.exp_basic.Exp_Basic.__init__"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Exp_VRAE_DAD", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_vrae_dad.Exp_VRAE_DAD._build_model": [[28, 48], ["model.double"], "methods", ["None"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "model_dict", "=", "{", "\n", "'vrae'", ":", "VRAE", ",", "\n", "}", "\n", "if", "self", ".", "args", ".", "model", "==", "'vrae'", ":", "\n", "            ", "model", "=", "model_dict", "[", "self", ".", "args", ".", "model", "]", "(", "\n", "self", ".", "args", ".", "seq_len", ",", "\n", "self", ".", "args", ".", "enc_in", ",", "\n", "self", ".", "args", ".", "batch_size", ",", "\n", "self", ".", "args", ".", "enc_hid", ",", "\n", "self", ".", "args", ".", "dec_hid", ",", "\n", "self", ".", "args", ".", "e_layers", ",", "\n", "self", ".", "args", ".", "d_layers", ",", "\n", "self", ".", "args", ".", "d_lat", ",", "\n", "self", ".", "args", ".", "block", ",", "\n", "self", ".", "args", ".", "dropout", ",", "\n", "self", ".", "device", "\n", ")", "\n", "\n", "", "return", "model", ".", "double", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_vrae_dad.Exp_VRAE_DAD._get_data": [[49, 81], ["Data", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len"], "methods", ["None"], ["", "def", "_get_data", "(", "self", ",", "flag", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "\n", "data_dict", "=", "{", "\n", "'SMAP'", ":", "NASA_Anomaly", ",", "\n", "'MSL'", ":", "NASA_Anomaly", ",", "\n", "'WADI'", ":", "WADI", ",", "\n", "}", "\n", "Data", "=", "data_dict", "[", "self", ".", "args", ".", "data", "]", "\n", "\n", "if", "flag", "==", "'test'", ":", "\n", "            ", "shuffle_flag", "=", "False", ";", "drop_last", "=", "True", ";", "batch_size", "=", "args", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "shuffle_flag", "=", "True", ";", "drop_last", "=", "True", ";", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "", "data_set", "=", "Data", "(", "\n", "root_path", "=", "args", ".", "root_path", ",", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "flag", "=", "flag", ",", "\n", "size", "=", "[", "args", ".", "seq_len", ",", "args", ".", "label_len", ",", "args", ".", "pred_len", "]", ",", "\n", "features", "=", "args", ".", "features", ",", "\n", "target", "=", "args", ".", "target", "\n", ")", "\n", "print", "(", "flag", ",", "len", "(", "data_set", ")", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "data_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle_flag", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "drop_last", "=", "drop_last", ")", "\n", "\n", "return", "data_set", ",", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_vrae_dad.Exp_VRAE_DAD._select_optimizer": [[82, 85], ["torch.optim.Adam", "torch.optim.Adam", "exp_vrae_dad.Exp_VRAE_DAD.model.parameters"], "methods", ["None"], ["", "def", "_select_optimizer", "(", "self", ")", ":", "\n", "        ", "model_optim", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "return", "model_optim", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_vrae_dad.Exp_VRAE_DAD._select_criterion": [[86, 89], ["torch.MSELoss", "torch.MSELoss"], "methods", ["None"], ["", "def", "_select_criterion", "(", "self", ")", ":", "\n", "        ", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_vrae_dad.Exp_VRAE_DAD.vali": [[90, 110], ["exp_vrae_dad.Exp_VRAE_DAD.model.eval", "enumerate", "numpy.average", "exp_vrae_dad.Exp_VRAE_DAD.model.train", "batch_x.double().to.double().to.double().to", "exp_vrae_dad.Exp_VRAE_DAD.model", "outputs.detach().cpu", "batch_x.double().to.double().to.detach().cpu", "criterion", "numpy.average.append", "batch_x.double().to.double().to.double", "outputs.detach", "batch_x.double().to.double().to.detach"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.train"], ["", "def", "vali", "(", "self", ",", "vali_data", ",", "vali_loader", ",", "criterion", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ",", "batch_label", ")", "in", "enumerate", "(", "vali_loader", ")", ":", "\n", "            ", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# encoder - decoder", "\n", "outputs", ",", "latent", "=", "self", ".", "model", "(", "batch_x", ")", "\n", "\n", "pred", "=", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "true", "=", "batch_x", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "loss", "=", "criterion", "(", "pred", ",", "true", ")", "\n", "\n", "total_loss", ".", "append", "(", "loss", ")", "\n", "\n", "", "total_loss", "=", "np", ".", "average", "(", "total_loss", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_vrae_dad.Exp_VRAE_DAD.train": [[111, 174], ["exp_vrae_dad.Exp_VRAE_DAD._get_data", "exp_vrae_dad.Exp_VRAE_DAD._get_data", "exp_vrae_dad.Exp_VRAE_DAD._get_data", "time.time", "len", "utils.tools.EarlyStopping", "exp_vrae_dad.Exp_VRAE_DAD._select_optimizer", "exp_vrae_dad.Exp_VRAE_DAD._select_criterion", "range", "exp_vrae_dad.Exp_VRAE_DAD.model.load_state_dict", "os.path.exists", "os.makedirs", "exp_vrae_dad.Exp_VRAE_DAD.model.train", "enumerate", "numpy.average", "exp_vrae_dad.Exp_VRAE_DAD.vali", "exp_vrae_dad.Exp_VRAE_DAD.vali", "print", "utils.tools.EarlyStopping.", "utils.tools.adjust_learning_rate", "torch.load", "torch.load", "torch.load", "torch.load", "exp_vrae_dad.Exp_VRAE_DAD.zero_grad", "batch_x.double().to.double().to.double().to", "exp_vrae_dad.Exp_VRAE_DAD.model.compute_loss", "numpy.average.append", "loss.backward", "exp_vrae_dad.Exp_VRAE_DAD.step", "print", "loss.item", "print", "print", "time.time", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "batch_x.double().to.double().to.double", "exp_vrae_dad.Exp_VRAE_DAD.model.parameters", "loss.item", "time.time"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._select_optimizer", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._select_criterion", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.train", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.vali", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.vali", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.adjust_learning_rate", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.VRAE.compute_loss"], ["", "def", "train", "(", "self", ",", "setting", ")", ":", "\n", "        ", "train_data", ",", "train_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'train'", ")", "\n", "vali_data", ",", "vali_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'val'", ")", "\n", "test_data", ",", "test_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'test'", ")", "\n", "\n", "path", "=", "'./checkpoints/'", "+", "setting", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "time_now", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_steps", "=", "len", "(", "train_loader", ")", "\n", "early_stopping", "=", "EarlyStopping", "(", "patience", "=", "self", ".", "args", ".", "patience", ",", "verbose", "=", "True", ")", "\n", "\n", "model_optim", "=", "self", ".", "_select_optimizer", "(", ")", "\n", "criterion", "=", "self", ".", "_select_criterion", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "train_epochs", ")", ":", "\n", "            ", "iter_count", "=", "0", "\n", "train_loss", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "iter_count", "+=", "1", "\n", "\n", "model_optim", ".", "zero_grad", "(", ")", "\n", "\n", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# encoder - decoder", "\n", "loss", ",", "recon_loss", ",", "kl_loss", ",", "_", "=", "self", ".", "model", ".", "compute_loss", "(", "batch_x", ",", "criterion", ")", "\n", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "\"\\titers: {0}, epoch: {1} | loss: {2:.7f}\"", ".", "format", "(", "i", "+", "1", ",", "epoch", "+", "1", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "speed", "=", "(", "time", ".", "time", "(", ")", "-", "time_now", ")", "/", "iter_count", "\n", "left_time", "=", "speed", "*", "(", "(", "self", ".", "args", ".", "train_epochs", "-", "epoch", ")", "*", "train_steps", "-", "i", ")", "\n", "print", "(", "'\\tspeed: {:.4f}s/iter; left time: {:.4f}s'", ".", "format", "(", "speed", ",", "left_time", ")", ")", "\n", "iter_count", "=", "0", "\n", "time_now", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "args", ".", "clip", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "max_norm", "=", "self", ".", "args", ".", "max_grad_norm", ")", "\n", "", "model_optim", ".", "step", "(", ")", "\n", "\n", "", "train_loss", "=", "np", ".", "average", "(", "train_loss", ")", "\n", "vali_loss", "=", "self", ".", "vali", "(", "vali_data", ",", "vali_loader", ",", "criterion", ")", "\n", "test_loss", "=", "self", ".", "vali", "(", "test_data", ",", "test_loader", ",", "criterion", ")", "\n", "\n", "print", "(", "\"Epoch: {0}, Steps: {1} | Train Loss: {2:.7f} Vali Loss: {3:.7f} Test Loss: {4:.7f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "train_steps", ",", "train_loss", ",", "vali_loss", ",", "test_loss", ")", ")", "\n", "early_stopping", "(", "vali_loss", ",", "self", ".", "model", ",", "path", ")", "\n", "if", "early_stopping", ".", "early_stop", ":", "\n", "                ", "print", "(", "\"Early stopping\"", ")", "\n", "break", "\n", "\n", "", "adjust_learning_rate", "(", "model_optim", ",", "epoch", "+", "1", ",", "self", ".", "args", ")", "\n", "\n", "", "best_model_path", "=", "path", "+", "'/'", "+", "'checkpoint.pth'", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "best_model_path", ")", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_vrae_dad.Exp_VRAE_DAD.test": [[175, 222], ["exp_vrae_dad.Exp_VRAE_DAD._get_data", "exp_vrae_dad.Exp_VRAE_DAD.model.eval", "numpy.array", "numpy.array", "numpy.array", "print", "preds.reshape.reshape.reshape", "trues.reshape.reshape.reshape", "labels.reshape.reshape.reshape", "print", "utils.metrics.metric", "print", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "os.path.exists", "os.makedirs", "numpy.array", "batch_x.double().to.double().to.double().to", "exp_vrae_dad.Exp_VRAE_DAD.model", "outputs.detach().cpu().numpy", "batch_x.double().to.double().to.detach().cpu().numpy", "batch_label.long().detach().numpy.long().detach().numpy.long().detach().numpy", "preds.reshape.reshape.append", "trues.reshape.reshape.append", "labels.reshape.reshape.append", "batch_x.double().to.double().to.double", "outputs.detach().cpu", "batch_x.double().to.double().to.detach().cpu", "batch_label.long().detach().numpy.long().detach().numpy.long().detach", "outputs.detach", "batch_x.double().to.double().to.detach", "batch_label.long().detach().numpy.long().detach().numpy.long"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.metric"], ["", "def", "test", "(", "self", ",", "setting", ")", ":", "\n", "        ", "test_data", ",", "test_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'test'", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "preds", "=", "[", "]", "\n", "trues", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ",", "batch_label", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "                ", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# encoder - decoder", "\n", "outputs", ",", "latent", "=", "self", ".", "model", "(", "batch_x", ")", "\n", "\n", "pred", "=", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#.squeeze()", "\n", "true", "=", "batch_x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#.squeeze()", "\n", "batch_label", "=", "batch_label", ".", "long", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "trues", ".", "append", "(", "true", ")", "\n", "labels", ".", "append", "(", "batch_label", ")", "\n", "\n", "", "", "preds", "=", "np", ".", "array", "(", "preds", ")", "\n", "trues", "=", "np", ".", "array", "(", "trues", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "print", "(", "'test shape:'", ",", "preds", ".", "shape", ",", "trues", ".", "shape", ")", "\n", "preds", "=", "preds", ".", "reshape", "(", "-", "1", ",", "preds", ".", "shape", "[", "-", "2", "]", ",", "preds", ".", "shape", "[", "-", "1", "]", ")", "\n", "trues", "=", "trues", ".", "reshape", "(", "-", "1", ",", "trues", ".", "shape", "[", "-", "2", "]", ",", "trues", ".", "shape", "[", "-", "1", "]", ")", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ",", "labels", ".", "shape", "[", "-", "1", "]", ")", "\n", "print", "(", "'test shape:'", ",", "preds", ".", "shape", ",", "trues", ".", "shape", ")", "\n", "\n", "# result save", "\n", "folder_path", "=", "'./results/'", "+", "setting", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "\n", "", "mae", ",", "mse", ",", "rmse", ",", "mape", ",", "mspe", "=", "metric", "(", "preds", ",", "trues", ")", "\n", "print", "(", "'mse:{}, mae:{}'", ".", "format", "(", "mse", ",", "mae", ")", ")", "\n", "\n", "np", ".", "save", "(", "folder_path", "+", "'metrics.npy'", ",", "np", ".", "array", "(", "[", "mae", ",", "mse", ",", "rmse", ",", "mape", ",", "mspe", "]", ")", ")", "\n", "np", ".", "save", "(", "folder_path", "+", "'pred.npy'", ",", "preds", ")", "\n", "np", ".", "save", "(", "folder_path", "+", "'true.npy'", ",", "trues", ")", "\n", "np", ".", "save", "(", "folder_path", "+", "'label.npy'", ",", "labels", ")", "\n", "\n", "return", "", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.__init__": [[28, 30], ["exp.exp_basic.Exp_Basic.__init__"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Exp_Informer", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._build_model": [[31, 58], ["model.double"], "methods", ["None"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "model_dict", "=", "{", "\n", "'informer'", ":", "Informer", ",", "\n", "}", "\n", "if", "self", ".", "args", ".", "model", "==", "'informer'", ":", "\n", "            ", "model", "=", "model_dict", "[", "self", ".", "args", ".", "model", "]", "(", "\n", "self", ".", "args", ".", "enc_in", ",", "\n", "self", ".", "args", ".", "dec_in", ",", "\n", "self", ".", "args", ".", "c_out", ",", "\n", "self", ".", "args", ".", "seq_len", ",", "\n", "self", ".", "args", ".", "label_len", ",", "\n", "self", ".", "args", ".", "pred_len", ",", "\n", "self", ".", "args", ".", "factor", ",", "\n", "self", ".", "args", ".", "d_model", ",", "\n", "self", ".", "args", ".", "n_heads", ",", "\n", "self", ".", "args", ".", "e_layers", ",", "\n", "self", ".", "args", ".", "d_layers", ",", "\n", "self", ".", "args", ".", "d_ff", ",", "\n", "self", ".", "args", ".", "dropout", ",", "\n", "self", ".", "args", ".", "attn", ",", "\n", "self", ".", "args", ".", "embed", ",", "\n", "self", ".", "args", ".", "data", "[", ":", "-", "1", "]", ",", "\n", "self", ".", "args", ".", "activation", ",", "\n", "self", ".", "device", "\n", ")", "\n", "\n", "", "return", "model", ".", "double", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data": [[59, 94], ["Data", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len"], "methods", ["None"], ["", "def", "_get_data", "(", "self", ",", "flag", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "\n", "data_dict", "=", "{", "\n", "'ETTh1'", ":", "Dataset_ETT_hour", ",", "\n", "'ETTh2'", ":", "Dataset_ETT_hour", ",", "\n", "'ETTm1'", ":", "Dataset_ETT_minute", ",", "\n", "'SolarEnergy'", ":", "SolarEnergy", ",", "\n", "'WADI'", ":", "WADI", ",", "\n", "'SMAP'", ":", "NASA_data", "\n", "}", "\n", "Data", "=", "data_dict", "[", "self", ".", "args", ".", "data", "]", "\n", "\n", "if", "flag", "==", "'test'", ":", "\n", "            ", "shuffle_flag", "=", "False", ";", "drop_last", "=", "True", ";", "batch_size", "=", "args", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "shuffle_flag", "=", "True", ";", "drop_last", "=", "True", ";", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "", "data_set", "=", "Data", "(", "\n", "root_path", "=", "args", ".", "root_path", ",", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "flag", "=", "flag", ",", "\n", "size", "=", "[", "args", ".", "seq_len", ",", "args", ".", "label_len", ",", "args", ".", "pred_len", "]", ",", "\n", "features", "=", "args", ".", "features", ",", "\n", "target", "=", "args", ".", "target", "\n", ")", "\n", "print", "(", "flag", ",", "len", "(", "data_set", ")", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "data_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle_flag", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "drop_last", "=", "drop_last", ")", "\n", "\n", "return", "data_set", ",", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._select_optimizer": [[95, 98], ["torch.optim.Adam", "torch.optim.Adam", "exp_informer.Exp_Informer.model.parameters"], "methods", ["None"], ["", "def", "_select_optimizer", "(", "self", ")", ":", "\n", "        ", "model_optim", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "return", "model_optim", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._select_criterion": [[99, 102], ["torch.MSELoss", "torch.MSELoss"], "methods", ["None"], ["", "def", "_select_criterion", "(", "self", ")", ":", "\n", "        ", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.vali": [[103, 129], ["exp_informer.Exp_Informer.model.eval", "enumerate", "numpy.average", "exp_informer.Exp_Informer.model.train", "batch_x.double().to.double().to.double().to", "batch_y[].to.double", "batch_x_mark.double().to.double().to.double().to", "batch_y_mark.double().to.double().to.double().to", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "exp_informer.Exp_Informer.model", "batch_y[].to", "exp_informer.Exp_Informer.detach().cpu", "batch_y[].to.detach().cpu", "criterion", "numpy.average.append", "batch_x.double().to.double().to.double", "batch_x_mark.double().to.double().to.double", "batch_y_mark.double().to.double().to.double", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "exp_informer.Exp_Informer.detach", "batch_y[].to.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.train"], ["", "def", "vali", "(", "self", ",", "vali_data", ",", "vali_loader", ",", "criterion", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "[", "]", "\n", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ")", "in", "enumerate", "(", "vali_loader", ")", ":", "\n", "            ", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y", "=", "batch_y", ".", "double", "(", ")", "\n", "\n", "batch_x_mark", "=", "batch_x_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y_mark", "=", "batch_y_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# decoder input", "\n", "dec_inp", "=", "torch", ".", "zeros_like", "(", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ")", ".", "double", "(", ")", "\n", "dec_inp", "=", "torch", ".", "cat", "(", "[", "batch_y", "[", ":", ",", ":", "self", ".", "args", ".", "label_len", ",", ":", "]", ",", "dec_inp", "]", ",", "dim", "=", "1", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# encoder - decoder", "\n", "outputs", "=", "self", ".", "model", "(", "batch_x", ",", "batch_x_mark", ",", "dec_inp", ",", "batch_y_mark", ")", "\n", "batch_y", "=", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "pred", "=", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "true", "=", "batch_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "loss", "=", "criterion", "(", "pred", ",", "true", ")", "\n", "\n", "total_loss", ".", "append", "(", "loss", ")", "\n", "", "total_loss", "=", "np", ".", "average", "(", "total_loss", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.train": [[130, 201], ["exp_informer.Exp_Informer._get_data", "exp_informer.Exp_Informer._get_data", "exp_informer.Exp_Informer._get_data", "time.time", "len", "utils.tools.EarlyStopping", "exp_informer.Exp_Informer._select_optimizer", "exp_informer.Exp_Informer._select_criterion", "range", "exp_informer.Exp_Informer.model.load_state_dict", "os.path.exists", "os.makedirs", "exp_informer.Exp_Informer.model.train", "enumerate", "numpy.average", "exp_informer.Exp_Informer.vali", "exp_informer.Exp_Informer.vali", "print", "utils.tools.EarlyStopping.", "utils.tools.adjust_learning_rate", "torch.load", "torch.load", "torch.load", "torch.load", "exp_informer.Exp_Informer.zero_grad", "batch_x.double().to.double().to.double().to", "batch_y[].to.double", "batch_x_mark.double().to.double().to.double().to", "batch_y_mark.double().to.double().to.double().to", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "exp_informer.Exp_Informer.model", "batch_y[].to", "exp_informer.Exp_Informer.", "numpy.average.append", "exp_informer.Exp_Informer.backward", "exp_informer.Exp_Informer.step", "print", "exp_informer.Exp_Informer.item", "print", "print", "time.time", "batch_x.double().to.double().to.double", "batch_x_mark.double().to.double().to.double", "batch_y_mark.double().to.double().to.double", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "exp_informer.Exp_Informer.item", "time.time", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._select_optimizer", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._select_criterion", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.train", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.vali", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.vali", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.tools.adjust_learning_rate"], ["", "def", "train", "(", "self", ",", "setting", ")", ":", "\n", "        ", "train_data", ",", "train_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'train'", ")", "\n", "vali_data", ",", "vali_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'val'", ")", "\n", "test_data", ",", "test_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'test'", ")", "\n", "\n", "path", "=", "'./checkpoints/'", "+", "setting", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "time_now", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_steps", "=", "len", "(", "train_loader", ")", "\n", "early_stopping", "=", "EarlyStopping", "(", "patience", "=", "self", ".", "args", ".", "patience", ",", "verbose", "=", "True", ")", "\n", "\n", "model_optim", "=", "self", ".", "_select_optimizer", "(", ")", "\n", "criterion", "=", "self", ".", "_select_criterion", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "train_epochs", ")", ":", "\n", "            ", "iter_count", "=", "0", "\n", "train_loss", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "iter_count", "+=", "1", "\n", "\n", "model_optim", ".", "zero_grad", "(", ")", "\n", "\n", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y", "=", "batch_y", ".", "double", "(", ")", "\n", "\n", "batch_x_mark", "=", "batch_x_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y_mark", "=", "batch_y_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# decoder input", "\n", "dec_inp", "=", "torch", ".", "zeros_like", "(", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ")", ".", "double", "(", ")", "\n", "dec_inp", "=", "torch", ".", "cat", "(", "[", "batch_y", "[", ":", ",", ":", "self", ".", "args", ".", "label_len", ",", ":", "]", ",", "dec_inp", "]", ",", "dim", "=", "1", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# encoder - decoder", "\n", "outputs", "=", "self", ".", "model", "(", "batch_x", ",", "batch_x_mark", ",", "dec_inp", ",", "batch_y_mark", ")", "\n", "\n", "batch_y", "=", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "batch_y", ")", "\n", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "\"\\titers: {0}, epoch: {1} | loss: {2:.7f}\"", ".", "format", "(", "i", "+", "1", ",", "epoch", "+", "1", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "speed", "=", "(", "time", ".", "time", "(", ")", "-", "time_now", ")", "/", "iter_count", "\n", "left_time", "=", "speed", "*", "(", "(", "self", ".", "args", ".", "train_epochs", "-", "epoch", ")", "*", "train_steps", "-", "i", ")", "\n", "print", "(", "'\\tspeed: {:.4f}s/iter; left time: {:.4f}s'", ".", "format", "(", "speed", ",", "left_time", ")", ")", "\n", "iter_count", "=", "0", "\n", "time_now", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "model_optim", ".", "step", "(", ")", "\n", "\n", "", "train_loss", "=", "np", ".", "average", "(", "train_loss", ")", "\n", "vali_loss", "=", "self", ".", "vali", "(", "vali_data", ",", "vali_loader", ",", "criterion", ")", "\n", "test_loss", "=", "self", ".", "vali", "(", "test_data", ",", "test_loader", ",", "criterion", ")", "\n", "\n", "print", "(", "\"Epoch: {0}, Steps: {1} | Train Loss: {2:.7f} Vali Loss: {3:.7f} Test Loss: {4:.7f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "train_steps", ",", "train_loss", ",", "vali_loss", ",", "test_loss", ")", ")", "\n", "early_stopping", "(", "vali_loss", ",", "self", ".", "model", ",", "path", ")", "\n", "if", "early_stopping", ".", "early_stop", ":", "\n", "                ", "print", "(", "\"Early stopping\"", ")", "\n", "break", "\n", "\n", "", "adjust_learning_rate", "(", "model_optim", ",", "epoch", "+", "1", ",", "self", ".", "args", ")", "\n", "\n", "", "best_model_path", "=", "path", "+", "'/'", "+", "'checkpoint.pth'", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "best_model_path", ")", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer.test": [[202, 249], ["exp_informer.Exp_Informer._get_data", "exp_informer.Exp_Informer.model.eval", "enumerate", "numpy.array", "numpy.array", "print", "preds.reshape.reshape.reshape", "trues.reshape.reshape.reshape", "print", "utils.metrics.metric", "print", "numpy.save", "numpy.save", "numpy.save", "batch_x.double().to.double().to.double().to", "batch_y[].to.double", "batch_x_mark.double().to.double().to.double().to", "batch_y_mark.double().to.double().to.double().to", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "exp_informer.Exp_Informer.model", "batch_y[].to", "exp_informer.Exp_Informer.detach().cpu().numpy", "batch_y[].to.detach().cpu().numpy", "preds.reshape.reshape.append", "trues.reshape.reshape.append", "os.path.exists", "os.makedirs", "numpy.array", "batch_x.double().to.double().to.double", "batch_x_mark.double().to.double().to.double", "batch_y_mark.double().to.double().to.double", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "exp_informer.Exp_Informer.detach().cpu", "batch_y[].to.detach().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "exp_informer.Exp_Informer.detach", "batch_y[].to.detach"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.exp.exp_informer.Exp_Informer._get_data", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.utils.metrics.metric"], ["", "def", "test", "(", "self", ",", "setting", ")", ":", "\n", "        ", "test_data", ",", "test_loader", "=", "self", ".", "_get_data", "(", "flag", "=", "'test'", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "preds", "=", "[", "]", "\n", "trues", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "batch_x", "=", "batch_x", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y", "=", "batch_y", ".", "double", "(", ")", "\n", "batch_x_mark", "=", "batch_x_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_y_mark", "=", "batch_y_mark", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# decoder input", "\n", "dec_inp", "=", "torch", ".", "zeros_like", "(", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ")", ".", "double", "(", ")", "\n", "dec_inp", "=", "torch", ".", "cat", "(", "[", "batch_y", "[", ":", ",", ":", "self", ".", "args", ".", "label_len", ",", ":", "]", ",", "dec_inp", "]", ",", "dim", "=", "1", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# encoder - decoder", "\n", "outputs", "=", "self", ".", "model", "(", "batch_x", ",", "batch_x_mark", ",", "dec_inp", ",", "batch_y_mark", ")", "\n", "batch_y", "=", "batch_y", "[", ":", ",", "-", "self", ".", "args", ".", "pred_len", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "pred", "=", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#.squeeze()", "\n", "true", "=", "batch_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#.squeeze()", "\n", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "trues", ".", "append", "(", "true", ")", "\n", "\n", "", "preds", "=", "np", ".", "array", "(", "preds", ")", "\n", "trues", "=", "np", ".", "array", "(", "trues", ")", "\n", "print", "(", "'test shape:'", ",", "preds", ".", "shape", ",", "trues", ".", "shape", ")", "\n", "preds", "=", "preds", ".", "reshape", "(", "-", "1", ",", "preds", ".", "shape", "[", "-", "2", "]", ",", "preds", ".", "shape", "[", "-", "1", "]", ")", "\n", "trues", "=", "trues", ".", "reshape", "(", "-", "1", ",", "trues", ".", "shape", "[", "-", "2", "]", ",", "trues", ".", "shape", "[", "-", "1", "]", ")", "\n", "print", "(", "'test shape:'", ",", "preds", ".", "shape", ",", "trues", ".", "shape", ")", "\n", "\n", "# result save", "\n", "folder_path", "=", "'./results/'", "+", "setting", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "\n", "", "mae", ",", "mse", ",", "rmse", ",", "mape", ",", "mspe", "=", "metric", "(", "preds", ",", "trues", ")", "\n", "print", "(", "'mse:{}, mae:{}'", ".", "format", "(", "mse", ",", "mae", ")", ")", "\n", "\n", "np", ".", "save", "(", "folder_path", "+", "'metrics.npy'", ",", "np", ".", "array", "(", "[", "mae", ",", "mse", ",", "rmse", ",", "mape", ",", "mspe", "]", ")", ")", "\n", "np", ".", "save", "(", "folder_path", "+", "'pred.npy'", ",", "preds", ")", "\n", "np", ".", "save", "(", "folder_path", "+", "'true.npy'", ",", "trues", ")", "\n", "\n", "return", "", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.encoder.ConvLayer.__init__": [[6, 16], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ")", ":", "\n", "        ", "super", "(", "ConvLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "downConv", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "c_in", ",", "\n", "out_channels", "=", "c_in", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "2", ",", "\n", "padding_mode", "=", "'circular'", ")", "\n", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "c_in", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ELU", "(", ")", "\n", "self", ".", "maxPool", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.encoder.ConvLayer.forward": [[17, 24], ["encoder.ConvLayer.downConv", "encoder.ConvLayer.norm", "encoder.ConvLayer.activation", "encoder.ConvLayer.maxPool", "x.transpose.transpose.transpose", "x.transpose.transpose.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "downConv", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "maxPool", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.encoder.EncoderLayer.__init__": [[26, 36], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "attention", ",", "d_model", ",", "d_ff", "=", "None", ",", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_ff", "=", "d_ff", "or", "4", "*", "d_model", "\n", "self", ".", "attention", "=", "attention", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "d_model", ",", "out_channels", "=", "d_ff", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "d_ff", ",", "out_channels", "=", "d_model", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "activation", "=", "F", ".", "relu", "if", "activation", "==", "\"relu\"", "else", "F", ".", "gelu", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.encoder.EncoderLayer.forward": [[37, 49], ["encoder.EncoderLayer.norm1", "encoder.EncoderLayer.dropout", "encoder.EncoderLayer.dropout", "encoder.EncoderLayer.norm2", "encoder.EncoderLayer.dropout", "encoder.EncoderLayer.activation", "encoder.EncoderLayer.conv2().transpose", "encoder.EncoderLayer.attention", "encoder.EncoderLayer.conv1", "encoder.EncoderLayer.transpose", "encoder.EncoderLayer.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "attn_mask", "=", "None", ")", ":", "\n", "# x [B, L, D]", "\n", "        ", "x", "=", "x", "+", "self", ".", "dropout", "(", "self", ".", "attention", "(", "\n", "x", ",", "x", ",", "x", ",", "\n", "attn_mask", "=", "attn_mask", "\n", ")", ")", "\n", "\n", "y", "=", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "y", "=", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "conv1", "(", "y", ".", "transpose", "(", "-", "1", ",", "1", ")", ")", ")", ")", "\n", "y", "=", "self", ".", "dropout", "(", "self", ".", "conv2", "(", "y", ")", ".", "transpose", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "return", "self", ".", "norm2", "(", "x", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.encoder.Encoder.__init__": [[51, 56], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "attn_layers", ",", "conv_layers", "=", "None", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attn_layers", "=", "nn", ".", "ModuleList", "(", "attn_layers", ")", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", "conv_layers", ")", "if", "conv_layers", "is", "not", "None", "else", "None", "\n", "self", ".", "norm", "=", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.encoder.Encoder.forward": [[57, 72], ["zip", "encoder.Encoder.norm", "attn_layer", "conv_layer", "attn_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "attn_mask", "=", "None", ")", ":", "\n", "# x [B, L, D]", "\n", "        ", "if", "self", ".", "conv_layers", "is", "not", "None", ":", "\n", "            ", "for", "attn_layer", ",", "conv_layer", "in", "zip", "(", "self", ".", "attn_layers", ",", "self", ".", "conv_layers", ")", ":", "\n", "                ", "x", "=", "attn_layer", "(", "x", ",", "attn_mask", "=", "attn_mask", ")", "\n", "x", "=", "conv_layer", "(", "x", ")", "\n", "", "x", "=", "self", ".", "attn_layers", "[", "-", "1", "]", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "for", "attn_layer", "in", "self", ".", "attn_layers", ":", "\n", "                ", "x", "=", "attn_layer", "(", "x", ",", "attn_mask", "=", "attn_mask", ")", "\n", "\n", "", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.FullAttention.__init__": [[11, 16], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mask_flag", "=", "True", ",", "factor", "=", "5", ",", "scale", "=", "None", ",", "attention_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "FullAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "mask_flag", "=", "mask_flag", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attention_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.FullAttention.forward": [[17, 33], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn.FullAttention.dropout", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.contiguous", "torch.einsum.contiguous", "torch.einsum.contiguous", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "math.sqrt", "utils.masking.TriangularCausalMask"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "queries", ",", "keys", ",", "values", ",", "attn_mask", ")", ":", "\n", "        ", "B", ",", "L", ",", "H", ",", "E", "=", "queries", ".", "shape", "\n", "_", ",", "S", ",", "_", ",", "D", "=", "values", ".", "shape", "\n", "scale", "=", "self", ".", "scale", "or", "1.", "/", "sqrt", "(", "E", ")", "\n", "\n", "scores", "=", "torch", ".", "einsum", "(", "\"blhe,bshe->bhls\"", ",", "queries", ",", "keys", ")", "\n", "if", "self", ".", "mask_flag", ":", "\n", "            ", "if", "attn_mask", "is", "None", ":", "\n", "                ", "attn_mask", "=", "TriangularCausalMask", "(", "B", ",", "L", ",", "device", "=", "queries", ".", "device", ")", "\n", "\n", "", "scores", ".", "masked_fill_", "(", "attn_mask", ".", "mask", ",", "-", "np", ".", "inf", ")", "\n", "\n", "", "A", "=", "self", ".", "dropout", "(", "torch", ".", "softmax", "(", "scale", "*", "scores", ",", "dim", "=", "-", "1", ")", ")", "\n", "V", "=", "torch", ".", "einsum", "(", "\"bhls,bshd->blhd\"", ",", "A", ",", "values", ")", "\n", "\n", "return", "V", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.ProbAttention.__init__": [[35, 41], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mask_flag", "=", "True", ",", "factor", "=", "5", ",", "scale", "=", "None", ",", "attention_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "ProbAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "mask_flag", "=", "mask_flag", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attention_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.ProbAttention._prob_QK": [[42, 64], ["K.unsqueeze().expand", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "M.topk", "K.transpose", "K.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().squeeze.max", "torch.matmul().squeeze.max", "torch.matmul().squeeze.max", "torch.matmul().squeeze.sum", "torch.matmul().squeeze.sum", "torch.matmul().squeeze.sum", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "Q.unsqueeze", "K_sample.transpose", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "_prob_QK", "(", "self", ",", "Q", ",", "K", ",", "sample_k", ",", "n_top", ")", ":", "\n", "# Q [B, H, L, D]", "\n", "        ", "B", ",", "H", ",", "L", ",", "E", "=", "K", ".", "shape", "\n", "_", ",", "_", ",", "S", ",", "_", "=", "Q", ".", "shape", "\n", "\n", "# calculate the sampled Q_K", "\n", "K_expand", "=", "K", ".", "unsqueeze", "(", "-", "3", ")", ".", "expand", "(", "B", ",", "H", ",", "S", ",", "L", ",", "E", ")", "\n", "indx_sample", "=", "torch", ".", "randint", "(", "L", ",", "(", "S", ",", "sample_k", ")", ")", "\n", "K_sample", "=", "K_expand", "[", ":", ",", ":", ",", "torch", ".", "arange", "(", "S", ")", ".", "unsqueeze", "(", "1", ")", ",", "indx_sample", ",", ":", "]", "\n", "Q_K_sample", "=", "torch", ".", "matmul", "(", "Q", ".", "unsqueeze", "(", "-", "2", ")", ",", "K_sample", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# find the Top_k query with sparisty measurement", "\n", "M", "=", "Q_K_sample", ".", "max", "(", "-", "1", ")", "[", "0", "]", "-", "torch", ".", "div", "(", "Q_K_sample", ".", "sum", "(", "-", "1", ")", ",", "L", ")", "\n", "M_top", "=", "M", ".", "topk", "(", "n_top", ",", "sorted", "=", "False", ")", "[", "1", "]", "\n", "\n", "# use the reduced Q to calculate Q_K", "\n", "Q_reduce", "=", "Q", "[", "torch", ".", "arange", "(", "B", ")", "[", ":", ",", "None", ",", "None", "]", ",", "\n", "torch", ".", "arange", "(", "H", ")", "[", "None", ",", ":", ",", "None", "]", ",", "\n", "M_top", ",", ":", "]", "\n", "Q_K", "=", "torch", ".", "matmul", "(", "Q_reduce", ",", "K", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "return", "Q_K", ",", "M_top", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.ProbAttention._get_initial_context": [[65, 74], ["V.sum", "V.sum.unsqueeze().expand().clone", "V.cumsum", "V.sum.unsqueeze().expand", "V.sum.unsqueeze"], "methods", ["None"], ["", "def", "_get_initial_context", "(", "self", ",", "V", ",", "L_Q", ")", ":", "\n", "        ", "B", ",", "H", ",", "L_V", ",", "D", "=", "V", ".", "shape", "\n", "if", "not", "self", ".", "mask_flag", ":", "\n", "            ", "V_sum", "=", "V", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "contex", "=", "V_sum", ".", "unsqueeze", "(", "-", "2", ")", ".", "expand", "(", "B", ",", "H", ",", "L_Q", ",", "V_sum", ".", "shape", "[", "-", "1", "]", ")", ".", "clone", "(", ")", "\n", "", "else", ":", "# use mask", "\n", "            ", "assert", "(", "L_Q", "==", "L_V", ")", "# requires that L_Q == L_V, i.e. for self-attention only", "\n", "contex", "=", "V", ".", "cumsum", "(", "dim", "=", "-", "1", ")", "\n", "", "return", "contex", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.ProbAttention._update_context": [[75, 88], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "utils.masking.ProbMask", "scores.masked_fill_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "_update_context", "(", "self", ",", "context_in", ",", "V", ",", "scores", ",", "index", ",", "L_Q", ",", "attn_mask", ")", ":", "\n", "        ", "B", ",", "H", ",", "L_V", ",", "D", "=", "V", ".", "shape", "\n", "\n", "if", "self", ".", "mask_flag", ":", "\n", "            ", "attn_mask", "=", "ProbMask", "(", "B", ",", "H", ",", "L_Q", ",", "index", ",", "scores", ",", "device", "=", "V", ".", "device", ")", "\n", "scores", ".", "masked_fill_", "(", "attn_mask", ".", "mask", ",", "-", "np", ".", "inf", ")", "\n", "\n", "", "attn", "=", "torch", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "# nn.Softmax(dim=-1)(scores)", "\n", "\n", "context_in", "[", "torch", ".", "arange", "(", "B", ")", "[", ":", ",", "None", ",", "None", "]", ",", "\n", "torch", ".", "arange", "(", "H", ")", "[", "None", ",", ":", ",", "None", "]", ",", "\n", "index", ",", ":", "]", "=", "torch", ".", "matmul", "(", "attn", ",", "V", ")", "\n", "return", "context_in", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.ProbAttention.forward": [[89, 111], ["queries.view.view.view", "keys.view.view.view", "values.view.view.view", "attn.ProbAttention._prob_QK", "attn.ProbAttention._get_initial_context", "attn.ProbAttention._update_context", "attn.ProbAttention.contiguous", "numpy.ceil().astype().item", "numpy.ceil().astype().item", "math.sqrt", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil", "numpy.ceil", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.ProbAttention._prob_QK", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.ProbAttention._get_initial_context", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.ProbAttention._update_context"], ["", "def", "forward", "(", "self", ",", "queries", ",", "keys", ",", "values", ",", "attn_mask", ")", ":", "\n", "        ", "B", ",", "L", ",", "H", ",", "D", "=", "queries", ".", "shape", "\n", "_", ",", "S", ",", "_", ",", "_", "=", "keys", ".", "shape", "\n", "\n", "queries", "=", "queries", ".", "view", "(", "B", ",", "H", ",", "L", ",", "-", "1", ")", "\n", "keys", "=", "keys", ".", "view", "(", "B", ",", "H", ",", "S", ",", "-", "1", ")", "\n", "values", "=", "values", ".", "view", "(", "B", ",", "H", ",", "S", ",", "-", "1", ")", "\n", "\n", "U", "=", "self", ".", "factor", "*", "np", ".", "ceil", "(", "np", ".", "log", "(", "S", ")", ")", ".", "astype", "(", "'int'", ")", ".", "item", "(", ")", "\n", "u", "=", "self", ".", "factor", "*", "np", ".", "ceil", "(", "np", ".", "log", "(", "L", ")", ")", ".", "astype", "(", "'int'", ")", ".", "item", "(", ")", "\n", "\n", "scores_top", ",", "index", "=", "self", ".", "_prob_QK", "(", "queries", ",", "keys", ",", "u", ",", "U", ")", "\n", "# add scale factor", "\n", "scale", "=", "self", ".", "scale", "or", "1.", "/", "sqrt", "(", "D", ")", "\n", "if", "scale", "is", "not", "None", ":", "\n", "            ", "scores_top", "=", "scores_top", "*", "scale", "\n", "# get the context", "\n", "", "context", "=", "self", ".", "_get_initial_context", "(", "values", ",", "L", ")", "\n", "# update the context with selected top_k queries", "\n", "context", "=", "self", ".", "_update_context", "(", "context", ",", "values", ",", "scores_top", ",", "index", ",", "L", ",", "attn_mask", ")", "\n", "\n", "return", "context", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.AttentionLayer.__init__": [[114, 127], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "attention", ",", "d_model", ",", "n_heads", ",", "d_keys", "=", "None", ",", "\n", "d_values", "=", "None", ")", ":", "\n", "        ", "super", "(", "AttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "d_keys", "=", "d_keys", "or", "(", "d_model", "//", "n_heads", ")", "\n", "d_values", "=", "d_values", "or", "(", "d_model", "//", "n_heads", ")", "\n", "\n", "self", ".", "inner_attention", "=", "attention", "\n", "self", ".", "query_projection", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_keys", "*", "n_heads", ")", "\n", "self", ".", "key_projection", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_keys", "*", "n_heads", ")", "\n", "self", ".", "value_projection", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_values", "*", "n_heads", ")", "\n", "self", ".", "out_projection", "=", "nn", ".", "Linear", "(", "d_values", "*", "n_heads", ",", "d_model", ")", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.attn.AttentionLayer.forward": [[128, 145], ["attn.AttentionLayer.query_projection().view", "attn.AttentionLayer.key_projection().view", "attn.AttentionLayer.value_projection().view", "attn.AttentionLayer.inner_attention().view", "attn.AttentionLayer.out_projection", "attn.AttentionLayer.query_projection", "attn.AttentionLayer.key_projection", "attn.AttentionLayer.value_projection", "attn.AttentionLayer.inner_attention"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "queries", ",", "keys", ",", "values", ",", "attn_mask", ")", ":", "\n", "        ", "B", ",", "L", ",", "_", "=", "queries", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "keys", ".", "shape", "\n", "H", "=", "self", ".", "n_heads", "\n", "\n", "queries", "=", "self", ".", "query_projection", "(", "queries", ")", ".", "view", "(", "B", ",", "L", ",", "H", ",", "-", "1", ")", "\n", "keys", "=", "self", ".", "key_projection", "(", "keys", ")", ".", "view", "(", "B", ",", "S", ",", "H", ",", "-", "1", ")", "\n", "values", "=", "self", ".", "value_projection", "(", "values", ")", ".", "view", "(", "B", ",", "S", ",", "H", ",", "-", "1", ")", "\n", "\n", "out", "=", "self", ".", "inner_attention", "(", "\n", "queries", ",", "\n", "keys", ",", "\n", "values", ",", "\n", "attn_mask", "\n", ")", ".", "view", "(", "B", ",", "L", ",", "-", "1", ")", "\n", "\n", "return", "self", ".", "out_projection", "(", "out", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.tconv.TemporalBlock.__init__": [[16, 37], ["torch.Module.__init__", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "tconv.TemporalBlock.init_weights", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.tconv.TemporalBlock.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_inputs", ",", "n_outputs", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "padding", "=", "1", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "TemporalBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "weight_norm", "(", "nn", ".", "Conv1d", "(", "n_inputs", ",", "n_outputs", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "padding_mode", "=", "'circular'", ")", ")", "\n", "# self.chomp1 = Chomp1d(padding)", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "conv2", "=", "weight_norm", "(", "nn", ".", "Conv1d", "(", "n_outputs", ",", "n_outputs", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "padding_mode", "=", "'circular'", ")", ")", "\n", "# self.chomp2 = Chomp1d(padding)", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "self", ".", "relu1", ",", "self", ".", "dropout1", ",", "\n", "self", ".", "conv2", ",", "self", ".", "relu2", ",", "self", ".", "dropout2", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "Conv1d", "(", "n_inputs", ",", "n_outputs", ",", "1", ")", "if", "n_inputs", "!=", "n_outputs", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.tconv.TemporalBlock.init_weights": [[38, 46], ["tconv.TemporalBlock.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "# self.conv1.weight.data.normal_(0, 0.01)", "\n", "# self.conv2.weight.data.normal_(0, 0.01)", "\n", "# if self.downsample is not None:", "\n", "#     self.downsample.weight.data.normal_(0, 0.01)", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.tconv.TemporalBlock.forward": [[47, 51], ["tconv.TemporalBlock.net", "tconv.TemporalBlock.relu", "tconv.TemporalBlock.downsample"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "net", "(", "x", ")", "\n", "res", "=", "x", "if", "self", ".", "downsample", "is", "None", "else", "self", ".", "downsample", "(", "x", ")", "\n", "return", "self", ".", "relu", "(", "out", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.tconv.TemporalConvNet.__init__": [[54, 66], ["torch.Module.__init__", "len", "range", "torch.Sequential", "torch.Sequential", "tconv.TemporalBlock"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_channels", ",", "kernel_size", "=", "3", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "TemporalConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "num_channels", ")", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "dilation_size", "=", "2", "**", "i", "\n", "in_channels", "=", "num_inputs", "if", "i", "==", "0", "else", "num_channels", "[", "i", "-", "1", "]", "\n", "out_channels", "=", "num_channels", "[", "i", "]", "\n", "layers", "+=", "[", "TemporalBlock", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "dilation_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "*", "dilation_size", "//", "2", ",", "dropout", "=", "dropout", ")", "]", "\n", "\n", "", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.tconv.TemporalConvNet.forward": [[67, 69], ["tconv.TemporalConvNet.network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.embed.PositionalEmbedding.__init__": [[8, 22], ["torch.Module.__init__", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "embed.PositionalEmbedding.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Compute the positional encodings once in log space.", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", ".", "float", "(", ")", "\n", "pe", ".", "require_grad", "=", "False", "\n", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", ".", "exp", "(", ")", "\n", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.embed.PositionalEmbedding.forward": [[23, 25], ["x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.embed.TokenEmbedding.__init__": [[27, 35], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "embed.TokenEmbedding.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "d_model", ")", ":", "\n", "        ", "super", "(", "TokenEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "1", "if", "torch", ".", "__version__", ">=", "'1.5.0'", "else", "2", "\n", "self", ".", "tokenConv", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "c_in", ",", "out_channels", "=", "d_model", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "padding", ",", "padding_mode", "=", "'circular'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.embed.TokenEmbedding.forward": [[36, 39], ["embed.TokenEmbedding.tokenConv().transpose", "embed.TokenEmbedding.tokenConv", "embed.TokenEmbedding.permute"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "tokenConv", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.embed.FixedEmbedding.__init__": [[41, 55], ["torch.Module.__init__", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.arange().float().unsqueeze", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "d_model", ")", ":", "\n", "        ", "super", "(", "FixedEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "w", "=", "torch", ".", "zeros", "(", "c_in", ",", "d_model", ")", ".", "float", "(", ")", "\n", "w", ".", "require_grad", "=", "False", "\n", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "c_in", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", ".", "exp", "(", ")", "\n", "\n", "w", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "w", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "\n", "self", ".", "emb", "=", "nn", ".", "Embedding", "(", "c_in", ",", "d_model", ")", "\n", "self", ".", "emb", ".", "weight", "=", "nn", ".", "Parameter", "(", "w", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.embed.FixedEmbedding.forward": [[56, 58], ["embed.FixedEmbedding.emb().detach", "embed.FixedEmbedding.emb"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "emb", "(", "x", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.embed.TemporalEmbedding.__init__": [[60, 86], ["torch.Module.__init__", "Embed", "Embed", "Embed", "Embed", "Embed", "Embed", "Embed", "Embed", "Embed", "Embed"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "embed_type", "=", "'fixed'", ",", "data", "=", "'ETTh'", ")", ":", "\n", "        ", "super", "(", "TemporalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "minute_size", "=", "4", ";", "hour_size", "=", "24", "\n", "weekday_size", "=", "7", ";", "day_size", "=", "32", ";", "month_size", "=", "13", "\n", "\n", "Embed", "=", "FixedEmbedding", "if", "embed_type", "==", "'fixed'", "else", "nn", ".", "Embedding", "\n", "if", "data", "==", "'ETTm'", ":", "\n", "            ", "self", ".", "minute_embed", "=", "Embed", "(", "minute_size", ",", "d_model", ")", "\n", "", "elif", "data", "==", "'SolarEnergy'", ":", "\n", "            ", "minute_size", "=", "6", "\n", "self", ".", "minute_embed", "=", "Embed", "(", "minute_size", ",", "d_model", ")", "\n", "", "elif", "data", "==", "'WADI'", ":", "\n", "            ", "minute_size", "=", "60", "\n", "second_size", "=", "6", "\n", "self", ".", "minute_embed", "=", "Embed", "(", "minute_size", ",", "d_model", ")", "\n", "self", ".", "second_emebd", "=", "Embed", "(", "second_size", ",", "d_model", ")", "\n", "", "elif", "data", "==", "'SMAP'", ":", "\n", "            ", "minute_size", "=", "60", "\n", "second_size", "=", "15", "\n", "self", ".", "minute_embed", "=", "Embed", "(", "minute_size", ",", "d_model", ")", "\n", "self", ".", "second_emebd", "=", "Embed", "(", "second_size", ",", "d_model", ")", "\n", "", "self", ".", "hour_embed", "=", "Embed", "(", "hour_size", ",", "d_model", ")", "\n", "self", ".", "weekday_embed", "=", "Embed", "(", "weekday_size", ",", "d_model", ")", "\n", "self", ".", "day_embed", "=", "Embed", "(", "day_size", ",", "d_model", ")", "\n", "self", ".", "month_embed", "=", "Embed", "(", "month_size", ",", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.embed.TemporalEmbedding.forward": [[87, 98], ["x.long.long.long", "embed.TemporalEmbedding.hour_embed", "embed.TemporalEmbedding.weekday_embed", "embed.TemporalEmbedding.day_embed", "embed.TemporalEmbedding.month_embed", "hasattr", "embed.TemporalEmbedding.second_emebd", "hasattr", "embed.TemporalEmbedding.minute_embed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "long", "(", ")", "\n", "\n", "second_x", "=", "self", ".", "second_emebd", "(", "x", "[", ":", ",", ":", ",", "5", "]", ")", "if", "hasattr", "(", "self", ",", "'second_embed'", ")", "else", "0.", "\n", "minute_x", "=", "self", ".", "minute_embed", "(", "x", "[", ":", ",", ":", ",", "4", "]", ")", "if", "hasattr", "(", "self", ",", "'minute_embed'", ")", "else", "0.", "\n", "hour_x", "=", "self", ".", "hour_embed", "(", "x", "[", ":", ",", ":", ",", "3", "]", ")", "\n", "weekday_x", "=", "self", ".", "weekday_embed", "(", "x", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "day_x", "=", "self", ".", "day_embed", "(", "x", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "month_x", "=", "self", ".", "month_embed", "(", "x", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "\n", "return", "hour_x", "+", "weekday_x", "+", "day_x", "+", "month_x", "+", "minute_x", "+", "second_x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.embed.DataEmbedding.__init__": [[100, 108], ["torch.Module.__init__", "embed.TokenEmbedding", "embed.PositionalEmbedding", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "d_model", ",", "embed_type", "=", "'fixed'", ",", "data", "=", "'ETTh'", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "DataEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "value_embedding", "=", "TokenEmbedding", "(", "c_in", "=", "c_in", ",", "d_model", "=", "d_model", ")", "\n", "self", ".", "position_embedding", "=", "PositionalEmbedding", "(", "d_model", "=", "d_model", ")", "\n", "# self.temporal_embedding = TemporalEmbedding(d_model=d_model, embed_type=embed_type, data=data)", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.embed.DataEmbedding.forward": [[109, 114], ["embed.DataEmbedding.dropout", "embed.DataEmbedding.value_embedding", "embed.DataEmbedding.position_embedding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_mark", ")", ":", "\n", "# x = self.value_embedding(x) + self.position_embedding(x) + self.temporal_embedding(x_mark)", "\n", "        ", "x", "=", "self", ".", "value_embedding", "(", "x", ")", "+", "self", ".", "position_embedding", "(", "x", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.decoder.DecoderLayer.__init__": [[6, 19], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "self_attention", ",", "cross_attention", ",", "d_model", ",", "d_ff", "=", "None", ",", "\n", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_ff", "=", "d_ff", "or", "4", "*", "d_model", "\n", "self", ".", "self_attention", "=", "self_attention", "\n", "self", ".", "cross_attention", "=", "cross_attention", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "d_model", ",", "out_channels", "=", "d_ff", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "d_ff", ",", "out_channels", "=", "d_model", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "activation", "=", "F", ".", "relu", "if", "activation", "==", "\"relu\"", "else", "F", ".", "gelu", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.decoder.DecoderLayer.forward": [[20, 37], ["decoder.DecoderLayer.norm1", "decoder.DecoderLayer.norm2", "decoder.DecoderLayer.dropout", "decoder.DecoderLayer.dropout", "decoder.DecoderLayer.norm3", "decoder.DecoderLayer.dropout", "decoder.DecoderLayer.dropout", "decoder.DecoderLayer.activation", "decoder.DecoderLayer.conv2().transpose", "decoder.DecoderLayer.self_attention", "decoder.DecoderLayer.cross_attention", "decoder.DecoderLayer.conv1", "decoder.DecoderLayer.transpose", "decoder.DecoderLayer.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "cross", ",", "x_mask", "=", "None", ",", "cross_mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "dropout", "(", "self", ".", "self_attention", "(", "\n", "x", ",", "x", ",", "x", ",", "\n", "attn_mask", "=", "x_mask", "\n", ")", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "dropout", "(", "self", ".", "cross_attention", "(", "\n", "x", ",", "cross", ",", "cross", ",", "\n", "attn_mask", "=", "cross_mask", "\n", ")", ")", "\n", "\n", "y", "=", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "y", "=", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "conv1", "(", "y", ".", "transpose", "(", "-", "1", ",", "1", ")", ")", ")", ")", "\n", "y", "=", "self", ".", "dropout", "(", "self", ".", "conv2", "(", "y", ")", ".", "transpose", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "return", "self", ".", "norm3", "(", "x", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.decoder.Decoder.__init__": [[39, 43], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layers", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "self", ".", "norm", "=", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.decoder.Decoder.forward": [[44, 52], ["layer", "decoder.Decoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "cross", ",", "x_mask", "=", "None", ",", "cross_mask", "=", "None", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "cross", ",", "x_mask", "=", "x_mask", ",", "cross_mask", "=", "cross_mask", ")", "\n", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.model.Informer.__init__": [[12, 64], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "models.embed.DataEmbedding", "models.embed.DataEmbedding", "models.encoder.Encoder", "models.decoder.Decoder", "torch.Linear", "torch.Linear", "torch.Linear", "models.encoder.EncoderLayer", "models.encoder.ConvLayer", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "models.decoder.DecoderLayer", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "models.attn.AttentionLayer", "range", "range", "models.attn.AttentionLayer", "models.attn.AttentionLayer", "range", "Attn", "models.attn.FullAttention", "models.attn.FullAttention"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "enc_in", ",", "dec_in", ",", "c_out", ",", "seq_len", ",", "label_len", ",", "out_len", ",", "\n", "factor", "=", "5", ",", "d_model", "=", "512", ",", "n_heads", "=", "8", ",", "e_layers", "=", "3", ",", "d_layers", "=", "2", ",", "d_ff", "=", "512", ",", "\n", "dropout", "=", "0.0", ",", "attn", "=", "'prob'", ",", "embed", "=", "'fixed'", ",", "data", "=", "'ETTh'", ",", "activation", "=", "'gelu'", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", ")", ":", "\n", "        ", "super", "(", "Informer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pred_len", "=", "out_len", "\n", "self", ".", "attn", "=", "attn", "\n", "\n", "# Encoding", "\n", "self", ".", "enc_embedding", "=", "DataEmbedding", "(", "enc_in", ",", "d_model", ",", "embed", ",", "data", ",", "dropout", ")", "\n", "self", ".", "dec_embedding", "=", "DataEmbedding", "(", "dec_in", ",", "d_model", ",", "embed", ",", "data", ",", "dropout", ")", "\n", "# Attention", "\n", "Attn", "=", "ProbAttention", "if", "attn", "==", "'prob'", "else", "FullAttention", "\n", "# Encoder", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "[", "\n", "EncoderLayer", "(", "\n", "AttentionLayer", "(", "Attn", "(", "False", ",", "factor", ",", "attention_dropout", "=", "dropout", ")", ",", "\n", "d_model", ",", "n_heads", ")", ",", "\n", "d_model", ",", "\n", "d_ff", ",", "\n", "dropout", "=", "dropout", ",", "\n", "activation", "=", "activation", "\n", ")", "for", "l", "in", "range", "(", "e_layers", ")", "\n", "]", ",", "\n", "[", "\n", "ConvLayer", "(", "\n", "d_model", "\n", ")", "for", "l", "in", "range", "(", "e_layers", "-", "1", ")", "\n", "]", ",", "\n", "norm_layer", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", ")", "\n", "# Decoder", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "[", "\n", "DecoderLayer", "(", "\n", "AttentionLayer", "(", "FullAttention", "(", "True", ",", "factor", ",", "attention_dropout", "=", "dropout", ")", ",", "\n", "d_model", ",", "n_heads", ")", ",", "\n", "AttentionLayer", "(", "FullAttention", "(", "False", ",", "factor", ",", "attention_dropout", "=", "dropout", ")", ",", "\n", "d_model", ",", "n_heads", ")", ",", "\n", "d_model", ",", "\n", "d_ff", ",", "\n", "dropout", "=", "dropout", ",", "\n", "activation", "=", "activation", ",", "\n", ")", "\n", "for", "l", "in", "range", "(", "d_layers", ")", "\n", "]", ",", "\n", "norm_layer", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", ")", "\n", "# self.end_conv1 = nn.Conv1d(in_channels=label_len+out_len, out_channels=out_len, kernel_size=1, bias=True)", "\n", "# self.end_conv2 = nn.Conv1d(in_channels=d_model, out_channels=c_out, kernel_size=1, bias=True)", "\n", "self", ".", "projection", "=", "nn", ".", "Linear", "(", "d_model", ",", "c_out", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.model.Informer.forward": [[65, 77], ["model.Informer.enc_embedding", "model.Informer.encoder", "model.Informer.dec_embedding", "model.Informer.decoder", "model.Informer.projection"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_enc", ",", "x_mark_enc", ",", "x_dec", ",", "x_mark_dec", ",", "\n", "enc_self_mask", "=", "None", ",", "dec_self_mask", "=", "None", ",", "dec_enc_mask", "=", "None", ")", ":", "\n", "        ", "enc_out", "=", "self", ".", "enc_embedding", "(", "x_enc", ",", "x_mark_enc", ")", "\n", "enc_out", "=", "self", ".", "encoder", "(", "enc_out", ",", "attn_mask", "=", "enc_self_mask", ")", "\n", "\n", "dec_out", "=", "self", ".", "dec_embedding", "(", "x_dec", ",", "x_mark_dec", ")", "\n", "dec_out", "=", "self", ".", "decoder", "(", "dec_out", ",", "enc_out", ",", "x_mask", "=", "dec_self_mask", ",", "cross_mask", "=", "dec_enc_mask", ")", "\n", "dec_out", "=", "self", ".", "projection", "(", "dec_out", ")", "\n", "\n", "# dec_out = self.end_conv1(dec_out)", "\n", "# dec_out = self.end_conv2(dec_out.transpose(2,1)).transpose(1,2)", "\n", "return", "dec_out", "[", ":", ",", "-", "self", ".", "pred_len", ":", ",", ":", "]", "# [B, L, D]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.Encoder.__init__": [[18, 33], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["def", "__init__", "(", "self", ",", "number_of_features", ",", "hidden_size", ",", "hidden_layer_depth", ",", "latent_length", ",", "dropout", ",", "block", "=", "'LSTM'", ")", ":", "\n", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "number_of_features", "=", "number_of_features", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "hidden_layer_depth", "=", "hidden_layer_depth", "\n", "self", ".", "latent_length", "=", "latent_length", "\n", "\n", "if", "block", "==", "'LSTM'", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "LSTM", "(", "self", ".", "number_of_features", ",", "self", ".", "hidden_size", ",", "self", ".", "hidden_layer_depth", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "", "elif", "block", "==", "'GRU'", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "GRU", "(", "self", ".", "number_of_features", ",", "self", ".", "hidden_size", ",", "self", ".", "hidden_layer_depth", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.Encoder.forward": [[34, 44], ["vrae.Encoder.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward propagation of encoder. Given input, outputs the last hidden state of encoder\n        :param x: input to the encoder, of shape (sequence_length, batch_size, number_of_features)\n        :return: last hidden state of encoder, of shape (batch_size, hidden_size)\n        \"\"\"", "\n", "\n", "_", ",", "(", "h_end", ",", "c_end", ")", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "h_end", "=", "h_end", "[", "-", "1", ",", ":", ",", ":", "]", "\n", "return", "h_end", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.Lambda.__init__": [[51, 62], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "latent_length", ")", ":", "\n", "        ", "super", "(", "Lambda", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "latent_length", "=", "latent_length", "\n", "\n", "self", ".", "hidden_to_mean", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "latent_length", ")", "\n", "self", ".", "hidden_to_logvar", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "latent_length", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "hidden_to_mean", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "hidden_to_logvar", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.Lambda.forward": [[63, 78], ["vrae.Lambda.hidden_to_mean", "vrae.Lambda.hidden_to_logvar", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like.mul().add_", "torch.randn_like.mul().add_", "torch.randn_like.mul", "torch.randn_like.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cell_output", ")", ":", "\n", "        ", "\"\"\"Given last hidden state of encoder, passes through a linear layer, and finds the mean and variance\n        :param cell_output: last hidden state of encoder\n        :return: latent vector\n        \"\"\"", "\n", "\n", "self", ".", "latent_mean", "=", "self", ".", "hidden_to_mean", "(", "cell_output", ")", "\n", "self", ".", "latent_logvar", "=", "self", ".", "hidden_to_logvar", "(", "cell_output", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "self", ".", "latent_logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "self", ".", "latent_mean", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "latent_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.Decoder.__init__": [[90, 118], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.randn().double().to", "torch.randn().double().to", "torch.randn().double().to", "torch.randn().double().to", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.LSTM", "torch.LSTM", "torch.GRU", "torch.GRU", "torch.randn().double", "torch.randn().double", "torch.randn().double", "torch.randn().double", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["def", "__init__", "(", "self", ",", "num_of_features", ",", "sequence_length", ",", "batch_size", ",", "hidden_size", ",", "hidden_layer_depth", ",", "latent_length", ",", "output_size", ",", "device", ",", "block", "=", "'LSTM'", ")", ":", "\n", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_of_features", "=", "num_of_features", "\n", "self", ".", "sequence_length", "=", "sequence_length", "\n", "self", ".", "hidden_layer_depth", "=", "hidden_layer_depth", "\n", "self", ".", "latent_length", "=", "latent_length", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "device", "=", "device", "\n", "\n", "if", "block", "==", "'LSTM'", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "LSTM", "(", "self", ".", "num_of_features", ",", "self", ".", "hidden_size", ",", "self", ".", "hidden_layer_depth", ",", "batch_first", "=", "True", ")", "\n", "", "elif", "block", "==", "'GRU'", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "GRU", "(", "self", ".", "num_of_features", ",", "self", ".", "hidden_size", ",", "self", ".", "hidden_layer_depth", ",", "batch_first", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "latent_to_hidden", "=", "nn", ".", "Linear", "(", "self", ".", "latent_length", ",", "self", ".", "hidden_size", "*", "2", ")", "\n", "self", ".", "hidden_to_output", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "output_size", ")", "\n", "\n", "self", ".", "decoder_inputs", "=", "torch", ".", "randn", "(", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "self", ".", "num_of_features", ",", "requires_grad", "=", "True", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# self.c_0 = torch.zeros(self.hidden_layer_depth, self.batch_size, self.hidden_size, requires_grad=True).double().to(self.device)", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "latent_to_hidden", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "hidden_to_output", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.Decoder.forward": [[119, 139], ["vrae.Decoder.latent_to_hidden", "isinstance", "vrae.Decoder.hidden_to_output", "h_states[].contiguous", "h_states[].contiguous", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "vrae.Decoder.model", "isinstance", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "vrae.Decoder.model", "range", "range", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "latent", ")", ":", "\n", "        ", "\"\"\"Converts latent to hidden to output\n        :param latent: latent vector\n        :return: outputs consisting of mean and std dev of vector\n        \"\"\"", "\n", "h_states", "=", "self", ".", "latent_to_hidden", "(", "latent", ")", "\n", "h_state", ",", "c_state", "=", "h_states", "[", ":", ",", ":", "self", ".", "hidden_size", "]", ".", "contiguous", "(", ")", ",", "h_states", "[", ":", ",", "self", ".", "hidden_size", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "model", ",", "nn", ".", "LSTM", ")", ":", "\n", "            ", "h_0", "=", "torch", ".", "stack", "(", "[", "h_state", "for", "_", "in", "range", "(", "self", ".", "hidden_layer_depth", ")", "]", ")", "\n", "c_0", "=", "torch", ".", "stack", "(", "[", "c_state", "for", "_", "in", "range", "(", "self", ".", "hidden_layer_depth", ")", "]", ")", "\n", "decoder_output", ",", "_", "=", "self", ".", "model", "(", "self", ".", "decoder_inputs", ",", "(", "h_0", ",", "c_0", ")", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "model", ",", "nn", ".", "GRU", ")", ":", "\n", "            ", "h_0", "=", "torch", ".", "stack", "(", "[", "h_state", "for", "_", "in", "range", "(", "self", ".", "hidden_layer_depth", ")", "]", ")", "\n", "decoder_output", ",", "_", "=", "self", ".", "model", "(", "self", ".", "decoder_inputs", ",", "h_0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "out", "=", "self", ".", "hidden_to_output", "(", "decoder_output", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.VRAE.__init__": [[165, 192], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "vrae.Encoder", "vrae.Lambda", "vrae.Decoder"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["def", "__init__", "(", "self", ",", "sequence_length", ",", "number_of_features", ",", "batch_size", ",", "enc_hidden_size", "=", "90", ",", "dec_hidden_size", "=", "90", ",", "\n", "enc_hidden_layer_depth", "=", "2", ",", "dec_hidden_layer_depth", "=", "2", ",", "latent_length", "=", "20", ",", "\n", "block", "=", "'LSTM'", ",", "dropout_rate", "=", "0.2", ",", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", ")", ":", "\n", "\n", "        ", "super", "(", "VRAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "number_of_features", "=", "number_of_features", ",", "\n", "hidden_size", "=", "enc_hidden_size", ",", "\n", "hidden_layer_depth", "=", "enc_hidden_layer_depth", ",", "\n", "latent_length", "=", "latent_length", ",", "\n", "dropout", "=", "dropout_rate", ",", "\n", "block", "=", "block", ")", "\n", "\n", "self", ".", "lmbd", "=", "Lambda", "(", "hidden_size", "=", "enc_hidden_size", ",", "\n", "latent_length", "=", "latent_length", ")", "\n", "\n", "self", ".", "decoder", "=", "Decoder", "(", "num_of_features", "=", "number_of_features", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "hidden_size", "=", "dec_hidden_size", ",", "\n", "hidden_layer_depth", "=", "dec_hidden_layer_depth", ",", "\n", "latent_length", "=", "latent_length", ",", "\n", "output_size", "=", "number_of_features", ",", "\n", "block", "=", "block", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.VRAE.forward": [[193, 204], ["vrae.VRAE.encoder", "vrae.VRAE.lmbd", "vrae.VRAE.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward propagation which involves one pass from inputs to encoder to lambda to decoder\n        :param x:input tensor\n        :return: the decoded output, latent vector\n        \"\"\"", "\n", "cell_output", "=", "self", ".", "encoder", "(", "x", ")", "\n", "latent", "=", "self", ".", "lmbd", "(", "cell_output", ")", "\n", "x_decoded", "=", "self", ".", "decoder", "(", "latent", ")", "\n", "\n", "return", "x_decoded", ",", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.VRAE._rec": [[205, 219], ["loss_fn", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x_decoded.transpose", "x.transpose", "latent_logvar.exp", "latent_mean.pow"], "methods", ["None"], ["", "def", "_rec", "(", "self", ",", "x_decoded", ",", "x", ",", "loss_fn", ")", ":", "\n", "        ", "\"\"\"\n        Compute the loss given output x decoded, input x and the specified loss function\n        :param x_decoded: output of the decoder\n        :param x: input to the encoder\n        :param loss_fn: loss function specified\n        :return: joint loss, reconstruction loss and kl-divergence loss\n        \"\"\"", "\n", "latent_mean", ",", "latent_logvar", "=", "self", ".", "lmbd", ".", "latent_mean", ",", "self", ".", "lmbd", ".", "latent_logvar", "\n", "\n", "kl_loss", "=", "-", "0.5", "*", "torch", ".", "mean", "(", "1", "+", "latent_logvar", "-", "latent_mean", ".", "pow", "(", "2", ")", "-", "latent_logvar", ".", "exp", "(", ")", ")", "\n", "recon_loss", "=", "loss_fn", "(", "x_decoded", ".", "transpose", "(", "0", ",", "1", ")", ",", "x", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "return", "kl_loss", "+", "recon_loss", ",", "recon_loss", ",", "kl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.VRAE.compute_loss": [[220, 233], ["torch.autograd.Variable", "torch.autograd.Variable", "vrae.VRAE.", "vrae.VRAE._rec", "X[].to", "torch.autograd.Variable.detach", "torch.autograd.Variable.detach"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae.VRAE._rec"], ["", "def", "compute_loss", "(", "self", ",", "X", ",", "loss_fn", ")", ":", "\n", "        ", "\"\"\"\n        Given input tensor, forward propagate, compute the loss, and backward propagate.\n        Represents the lifecycle of a single iteration\n        :param X: Input tensor\n        :return: total loss, reconstruction loss, kl-divergence loss and original input\n        \"\"\"", "\n", "x", "=", "Variable", "(", "X", "[", ":", ",", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "x_decoded", ",", "_", "=", "self", "(", "x", ")", "\n", "loss", ",", "recon_loss", ",", "kl_loss", "=", "self", ".", "_rec", "(", "x_decoded", ",", "x", ".", "detach", "(", ")", ",", "loss_fn", ")", "\n", "\n", "return", "loss", ",", "recon_loss", ",", "kl_loss", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.vrae._assert_no_grad": [[140, 143], ["None"], "function", ["None"], ["", "", "def", "_assert_no_grad", "(", "tensor", ")", ":", "\n", "    ", "assert", "not", "tensor", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these tensors as not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.AdaGCNConv.__init__": [[13, 35], ["torch_geometric.nn.MessagePassing.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "gta.AdaGCNConv._init_graph_logits_", "gta.AdaGCNConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "gta.AdaGCNConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.AdaGCNConv._init_graph_logits_", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.AdaGCNConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_nodes", ",", "in_channels", ",", "out_channels", ",", "improved", "=", "False", ",", "\n", "add_self_loops", "=", "False", ",", "normalize", "=", "True", ",", "bias", "=", "True", ",", "init_method", "=", "'all'", ")", ":", "\n", "        ", "super", "(", "AdaGCNConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "node_dim", "=", "0", ")", "#  \"Max\" aggregation.", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "init_method", "=", "init_method", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "_init_graph_logits_", "(", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.AdaGCNConv._init_graph_logits_": [[36, 48], ["gta.AdaGCNConv.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "NotImplementedError", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "_init_graph_logits_", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "init_method", "==", "'all'", ":", "\n", "            ", "logits", "=", ".8", "*", "torch", ".", "ones", "(", "self", ".", "num_nodes", "**", "2", ",", "2", ")", "\n", "logits", "[", ":", ",", "1", "]", "=", "0", "\n", "", "elif", "self", ".", "init_method", "==", "'random'", ":", "\n", "            ", "logits", "=", "1e-3", "*", "torch", ".", "randn", "(", "self", ".", "num_nodes", "**", "2", ",", "2", ")", "\n", "", "elif", "self", ".", "init_method", "==", "'equal'", ":", "\n", "            ", "logits", "=", ".5", "*", "torch", ".", "ones", "(", "self", ".", "num_nodes", "**", "2", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Initial Method %s is not implemented'", "%", "self", ".", "init_method", ")", "\n", "\n", "", "self", ".", "register_parameter", "(", "'logits'", ",", "Parameter", "(", "logits", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.AdaGCNConv.reset_parameters": [[49, 52], ["torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.zeros"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "weight", ")", "\n", "zeros", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.AdaGCNConv.forward": [[53, 73], ["torch.nn.functional.gumbel_softmax", "torch.nn.functional.gumbel_softmax", "torch.nn.functional.gumbel_softmax", "torch.nn.functional.gumbel_softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "gta.AdaGCNConv.propagate", "torch_geometric.nn.conv.gcn_conv.gcn_norm", "torch.matmul.size", "torch.matmul.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ")", ":", "\n", "# x has shape [N, in_channels]", "\n", "# edge_index has shape [2, E]", "\n", "        ", "if", "self", ".", "normalize", ":", "\n", "            ", "edge_index", ",", "edge_weight", "=", "gcn_norm", "(", "# yapf: disable", "\n", "edge_index", ",", "edge_weight", ",", "x", ".", "size", "(", "self", ".", "node_dim", ")", ",", "\n", "self", ".", "improved", ",", "self", ".", "add_self_loops", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "", "z", "=", "torch", ".", "nn", ".", "functional", ".", "gumbel_softmax", "(", "self", ".", "logits", ",", "hard", "=", "True", ")", "\n", "\n", "x", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "\n", "\n", "# propagate_type: (x: Tensor, edge_weight: OptTensor)", "\n", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "edge_weight", "=", "edge_weight", ",", "\n", "size", "=", "None", ",", "z", "=", "z", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "bias", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.AdaGCNConv.message": [[74, 79], ["z[].contiguous().view", "z[].contiguous().view", "edge_weight.view", "z[].contiguous", "z[].contiguous", "x_j.dim", "x_j.dim", "x_j.dim"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "edge_weight", ",", "z", ")", ":", "\n", "        ", "if", "edge_weight", "is", "None", ":", "\n", "            ", "return", "x_j", "*", "z", "[", ":", ",", "0", "]", ".", "contiguous", "(", ")", ".", "view", "(", "[", "-", "1", "]", "+", "[", "1", "]", "*", "(", "x_j", ".", "dim", "(", ")", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "edge_weight", ".", "view", "(", "[", "-", "1", "]", "+", "[", "1", "]", "*", "(", "x_j", ".", "dim", "(", ")", "-", "1", ")", ")", "*", "x_j", "*", "z", "[", ":", ",", "0", "]", ".", "contiguous", "(", ")", ".", "view", "(", "[", "-", "1", "]", "+", "[", "1", "]", "*", "(", "x_j", ".", "dim", "(", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.AdaGCNConv.__repr__": [[80, 83], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.GraphTemporalEmbedding.__init__": [[86, 108], ["torch.device", "torch.device", "torch.device", "torch.device", "super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "gta.AdaGCNConv", "range", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gta.GraphTemporalEmbedding.tc_modules.extend", "range", "source_nodes.append", "target_nodes.append", "models.tconv.TemporalBlock"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_nodes", ",", "seq_len", ",", "num_levels", ",", "kernel_size", "=", "3", ",", "dropout", "=", "0.02", ",", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", ")", ":", "\n", "        ", "super", "(", "GraphTemporalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_levels", "=", "num_levels", "\n", "self", ".", "device", "=", "device", "\n", "assert", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "self", ".", "tc_modules", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "gc_module", "=", "AdaGCNConv", "(", "num_nodes", ",", "seq_len", ",", "seq_len", ")", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "dilation_size", "=", "2", "**", "i", "\n", "self", ".", "tc_modules", ".", "extend", "(", "[", "TemporalBlock", "(", "num_nodes", ",", "num_nodes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "dilation_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "*", "dilation_size", "//", "2", ",", "dropout", "=", "dropout", ")", "]", ")", "\n", "# self.gc_modules.extend([AdaGCNConv(num_nodes, seq_len, seq_len)])", "\n", "\n", "", "source_nodes", ",", "target_nodes", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_nodes", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_nodes", ")", ":", "\n", "                ", "source_nodes", ".", "append", "(", "j", ")", "\n", "target_nodes", ".", "append", "(", "i", ")", "\n", "", "", "self", ".", "edge_index", "=", "torch", ".", "tensor", "(", "[", "source_nodes", ",", "target_nodes", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.GraphTemporalEmbedding.forward": [[109, 124], ["gta.GraphTemporalEmbedding.permute", "range", "gta.GraphTemporalEmbedding.transpose", "gta.GraphTemporalEmbedding.gc_module().transpose", "gta.GraphTemporalEmbedding.transpose", "gta.GraphTemporalEmbedding.gc_module", "gta.GraphTemporalEmbedding.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# >> (bsz, seq_len, num_nodes)", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# >> (bsz, num_nodes, seq_len)", "\n", "\n", "x", "=", "self", ".", "tc_modules", "[", "0", "]", "(", "x", ")", "# >> (bsz, num_nodes, seq_len)", "\n", "x", "=", "self", ".", "gc_modules", "[", "0", "]", "(", "x", ".", "transpose", "(", "0", ",", "1", ")", ",", "self", ".", "edge_index", ")", ".", "transpose", "(", "0", ",", "1", ")", "# >> (bsz, num_nodes, seq_len)", "\n", "# output = x", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_levels", ")", ":", "\n", "            ", "x", "=", "self", ".", "tc_modules", "[", "i", "]", "(", "x", ")", "# >> (bsz, num_nodes, seq_len)", "\n", "x", "=", "self", ".", "gc_module", "(", "x", ".", "transpose", "(", "0", ",", "1", ")", ",", "self", ".", "edge_index", ")", ".", "transpose", "(", "0", ",", "1", ")", "# >> (bsz, num_nodes, seq_len)", "\n", "# output += x", "\n", "\n", "# return output.transpose(1, 2) # >> (bsz, seq_len, num_nodes)", "\n", "", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.GTA.__init__": [[127, 143], ["torch.device", "torch.device", "torch.device", "torch.device", "super().__init__", "gta.GraphTemporalEmbedding", "models.model.Informer"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_nodes", ",", "seq_len", ",", "label_len", ",", "out_len", ",", "num_levels", ",", "\n", "factor", "=", "5", ",", "d_model", "=", "512", ",", "n_heads", "=", "8", ",", "e_layers", "=", "3", ",", "d_layers", "=", "2", ",", "d_ff", "=", "512", ",", "\n", "dropout", "=", "0.0", ",", "attn", "=", "'prob'", ",", "embed", "=", "'fixed'", ",", "data", "=", "'ETTh'", ",", "activation", "=", "'gelu'", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", ")", ":", "\n", "        ", "super", "(", "GTA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "label_len", "=", "label_len", "\n", "self", ".", "out_len", "=", "out_len", "\n", "self", ".", "num_levels", "=", "num_levels", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "gt_embedding", "=", "GraphTemporalEmbedding", "(", "num_nodes", ",", "seq_len", ",", "num_levels", ",", "kernel_size", "=", "3", ",", "dropout", "=", "dropout", ",", "device", "=", "device", ")", "\n", "self", ".", "model", "=", "Informer", "(", "num_nodes", ",", "num_nodes", ",", "num_nodes", ",", "seq_len", ",", "label_len", ",", "out_len", ",", "\n", "factor", ",", "d_model", ",", "n_heads", ",", "e_layers", ",", "d_layers", ",", "d_ff", ",", "\n", "dropout", ",", "attn", ",", "embed", ",", "data", ",", "activation", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.models.gta.GTA.forward": [[144, 155], ["gta.GTA.gt_embedding", "torch.zeros_like().double().to", "torch.zeros_like().double().to", "torch.zeros_like().double().to", "torch.zeros_like().double().to", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "torch.cat().double().to", "gta.GTA.model", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.zeros_like().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_x", ",", "batch_y", ",", "batch_x_mark", ",", "batch_y_mark", ")", ":", "\n", "# >> (bsz, seq_len, num_nodes)", "\n", "# batch_x = batch_x.contiguous().transpose(1, 2).transpose(0, 1) # >> (bsz, num_nodes, seq_len) >> (num_nodes, bsz, seq_len)", "\n", "# print(batch_x.size())", "\n", "        ", "batch_x", "=", "self", ".", "gt_embedding", "(", "batch_x", ")", "# >> (bsz, seq, num_nodes)", "\n", "# batch_x = batch_x.transpose(0, 1).transpose(1, 2) # >> (bsz, seq_len, num_nodes)", "\n", "dec_inp", "=", "torch", ".", "zeros_like", "(", "batch_y", "[", ":", ",", "-", "self", ".", "out_len", ":", ",", ":", "]", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "dec_inp", "=", "torch", ".", "cat", "(", "[", "batch_y", "[", ":", ",", ":", "self", ".", "label_len", ",", ":", "]", ",", "dec_inp", "]", ",", "dim", "=", "1", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "batch_x", ",", "batch_x_mark", ",", "dec_inp", ",", "batch_y_mark", ")", "\n", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.Dataset_ETT_hour.__init__": [[14, 39], ["data_loader.Dataset_ETT_hour.__read_data__"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__read_data__"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "flag", "=", "'train'", ",", "size", "=", "None", ",", "\n", "features", "=", "'S'", ",", "data_path", "=", "'ETTh1.csv'", ",", "\n", "target", "=", "'OT'", ",", "scale", "=", "True", ")", ":", "\n", "# size [seq_len, label_len pred_len]", "\n", "# info", "\n", "        ", "if", "size", "==", "None", ":", "\n", "            ", "self", ".", "seq_len", "=", "24", "*", "4", "*", "4", "\n", "self", ".", "label_len", "=", "24", "*", "4", "\n", "self", ".", "pred_len", "=", "24", "*", "4", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_len", "=", "size", "[", "0", "]", "\n", "self", ".", "label_len", "=", "size", "[", "1", "]", "\n", "self", ".", "pred_len", "=", "size", "[", "2", "]", "\n", "# init", "\n", "", "assert", "flag", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", "\n", "type_map", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'test'", ":", "2", "}", "\n", "self", ".", "set_type", "=", "type_map", "[", "flag", "]", "\n", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "__read_data__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.Dataset_ETT_hour.__read_data__": [[40, 72], ["sklearn.preprocessing.StandardScaler", "pandas.read_csv", "pandas.to_datetime", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "os.path.join", "sklearn.preprocessing.StandardScaler.fit_transform", "df_stamp.drop", "row.weekday"], "methods", ["None"], ["", "def", "__read_data__", "(", "self", ")", ":", "\n", "        ", "scaler", "=", "StandardScaler", "(", ")", "\n", "df_raw", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\n", "self", ".", "data_path", ")", ")", "\n", "\n", "border1s", "=", "[", "0", ",", "12", "*", "30", "*", "24", "-", "self", ".", "seq_len", ",", "12", "*", "30", "*", "24", "+", "4", "*", "30", "*", "24", "-", "self", ".", "seq_len", "]", "\n", "border2s", "=", "[", "12", "*", "30", "*", "24", ",", "12", "*", "30", "*", "24", "+", "4", "*", "30", "*", "24", ",", "12", "*", "30", "*", "24", "+", "8", "*", "30", "*", "24", "]", "\n", "border1", "=", "border1s", "[", "self", ".", "set_type", "]", "\n", "border2", "=", "border2s", "[", "self", ".", "set_type", "]", "\n", "\n", "if", "self", ".", "features", "==", "'M'", ":", "\n", "            ", "cols_data", "=", "df_raw", ".", "columns", "[", "1", ":", "]", "\n", "df_data", "=", "df_raw", "[", "cols_data", "]", "\n", "", "elif", "self", ".", "features", "==", "'S'", ":", "\n", "            ", "df_data", "=", "df_raw", "[", "[", "self", ".", "target", "]", "]", "\n", "\n", "", "if", "self", ".", "scale", ":", "\n", "            ", "data", "=", "scaler", ".", "fit_transform", "(", "df_data", ".", "values", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "df_data", ".", "values", "\n", "\n", "", "df_stamp", "=", "df_raw", "[", "[", "'date'", "]", "]", "[", "border1", ":", "border2", "]", "\n", "df_stamp", "[", "'date'", "]", "=", "pd", ".", "to_datetime", "(", "df_stamp", ".", "date", ")", "\n", "df_stamp", "[", "'month'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "month", ",", "1", ")", "\n", "df_stamp", "[", "'day'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "day", ",", "1", ")", "\n", "df_stamp", "[", "'weekday'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "weekday", "(", ")", ",", "1", ")", "\n", "df_stamp", "[", "'hour'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "hour", ",", "1", ")", "\n", "data_stamp", "=", "df_stamp", ".", "drop", "(", "[", "'date'", "]", ",", "1", ")", ".", "values", "\n", "\n", "self", ".", "data_x", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_y", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_stamp", "=", "data_stamp", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.Dataset_ETT_hour.__getitem__": [[73, 85], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "s_begin", "=", "index", "\n", "s_end", "=", "s_begin", "+", "self", ".", "seq_len", "\n", "r_begin", "=", "s_end", "-", "self", ".", "label_len", "\n", "r_end", "=", "r_begin", "+", "self", ".", "label_len", "+", "self", ".", "pred_len", "\n", "\n", "seq_x", "=", "self", ".", "data_x", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y", "=", "self", ".", "data_y", "[", "r_begin", ":", "r_end", "]", "\n", "seq_x_mark", "=", "self", ".", "data_stamp", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y_mark", "=", "self", ".", "data_stamp", "[", "r_begin", ":", "r_end", "]", "\n", "\n", "return", "seq_x", ",", "seq_y", ",", "seq_x_mark", ",", "seq_y_mark", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.Dataset_ETT_hour.__len__": [[86, 88], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_x", ")", "-", "self", ".", "seq_len", "-", "self", ".", "pred_len", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.Dataset_ETT_minute.__init__": [[90, 115], ["data_loader.Dataset_ETT_minute.__read_data__"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__read_data__"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "flag", "=", "'train'", ",", "size", "=", "None", ",", "\n", "features", "=", "'S'", ",", "data_path", "=", "'ETTm1.csv'", ",", "\n", "target", "=", "'OT'", ",", "scale", "=", "True", ")", ":", "\n", "# size [seq_len, label_len pred_len]", "\n", "# info", "\n", "        ", "if", "size", "==", "None", ":", "\n", "            ", "self", ".", "seq_len", "=", "24", "*", "4", "*", "4", "\n", "self", ".", "label_len", "=", "24", "*", "4", "\n", "self", ".", "pred_len", "=", "24", "*", "4", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_len", "=", "size", "[", "0", "]", "\n", "self", ".", "label_len", "=", "size", "[", "1", "]", "\n", "self", ".", "pred_len", "=", "size", "[", "2", "]", "\n", "# init", "\n", "", "assert", "flag", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", "\n", "type_map", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'test'", ":", "2", "}", "\n", "self", ".", "set_type", "=", "type_map", "[", "flag", "]", "\n", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "__read_data__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.Dataset_ETT_minute.__read_data__": [[116, 150], ["sklearn.preprocessing.StandardScaler", "pandas.read_csv", "pandas.to_datetime", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.minute.map", "os.path.join", "sklearn.preprocessing.StandardScaler.fit_transform", "df_stamp.drop", "row.weekday"], "methods", ["None"], ["", "def", "__read_data__", "(", "self", ")", ":", "\n", "        ", "scaler", "=", "StandardScaler", "(", ")", "\n", "df_raw", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\n", "self", ".", "data_path", ")", ")", "\n", "\n", "border1s", "=", "[", "0", ",", "12", "*", "30", "*", "24", "*", "4", "-", "self", ".", "seq_len", ",", "12", "*", "30", "*", "24", "*", "4", "+", "4", "*", "30", "*", "24", "*", "4", "-", "self", ".", "seq_len", "]", "\n", "border2s", "=", "[", "12", "*", "30", "*", "24", "*", "4", ",", "12", "*", "30", "*", "24", "*", "4", "+", "4", "*", "30", "*", "24", "*", "4", ",", "12", "*", "30", "*", "24", "*", "4", "+", "8", "*", "30", "*", "24", "*", "4", "]", "\n", "border1", "=", "border1s", "[", "self", ".", "set_type", "]", "\n", "border2", "=", "border2s", "[", "self", ".", "set_type", "]", "\n", "\n", "if", "self", ".", "features", "==", "'M'", ":", "\n", "            ", "cols_data", "=", "df_raw", ".", "columns", "[", "1", ":", "]", "\n", "df_data", "=", "df_raw", "[", "cols_data", "]", "\n", "", "elif", "self", ".", "features", "==", "'S'", ":", "\n", "            ", "df_data", "=", "df_raw", "[", "[", "self", ".", "target", "]", "]", "\n", "\n", "", "if", "self", ".", "scale", ":", "\n", "            ", "data", "=", "scaler", ".", "fit_transform", "(", "df_data", ".", "values", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "df_data", ".", "values", "\n", "\n", "", "df_stamp", "=", "df_raw", "[", "[", "'date'", "]", "]", "[", "border1", ":", "border2", "]", "\n", "df_stamp", "[", "'date'", "]", "=", "pd", ".", "to_datetime", "(", "df_stamp", ".", "date", ")", "\n", "df_stamp", "[", "'month'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "month", ",", "1", ")", "\n", "df_stamp", "[", "'day'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "day", ",", "1", ")", "\n", "df_stamp", "[", "'weekday'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "weekday", "(", ")", ",", "1", ")", "\n", "df_stamp", "[", "'hour'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "hour", ",", "1", ")", "\n", "df_stamp", "[", "'minute'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "minute", ",", "1", ")", "\n", "df_stamp", "[", "'minute'", "]", "=", "df_stamp", ".", "minute", ".", "map", "(", "lambda", "x", ":", "x", "//", "15", ")", "\n", "data_stamp", "=", "df_stamp", ".", "drop", "(", "[", "'date'", "]", ",", "1", ")", ".", "values", "\n", "\n", "self", ".", "data_x", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_y", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_stamp", "=", "data_stamp", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.Dataset_ETT_minute.__getitem__": [[151, 163], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "s_begin", "=", "index", "\n", "s_end", "=", "s_begin", "+", "self", ".", "seq_len", "\n", "r_begin", "=", "s_end", "-", "self", ".", "label_len", "\n", "r_end", "=", "r_begin", "+", "self", ".", "label_len", "+", "self", ".", "pred_len", "\n", "\n", "seq_x", "=", "self", ".", "data_x", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y", "=", "self", ".", "data_y", "[", "r_begin", ":", "r_end", "]", "\n", "seq_x_mark", "=", "self", ".", "data_stamp", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y_mark", "=", "self", ".", "data_stamp", "[", "r_begin", ":", "r_end", "]", "\n", "\n", "return", "seq_x", ",", "seq_y", ",", "seq_x_mark", ",", "seq_y_mark", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.Dataset_ETT_minute.__len__": [[164, 166], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_x", ")", "-", "self", ".", "seq_len", "-", "self", ".", "pred_len", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.SolarEnergy.__init__": [[168, 193], ["data_loader.SolarEnergy.__read_data__"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__read_data__"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "flag", "=", "'train'", ",", "size", "=", "None", ",", "\n", "features", "=", "'M'", ",", "data_path", "=", "'solar_energy.csv'", ",", "\n", "target", "=", "'0'", ",", "scale", "=", "True", ")", ":", "\n", "# size [seq_len, label_len pred_len]", "\n", "# info", "\n", "        ", "if", "size", "==", "None", ":", "\n", "            ", "self", ".", "seq_len", "=", "12", "*", "4", "*", "6", "\n", "self", ".", "label_len", "=", "12", "*", "6", "\n", "self", ".", "pred_len", "=", "12", "*", "6", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_len", "=", "size", "[", "0", "]", "\n", "self", ".", "label_len", "=", "size", "[", "1", "]", "\n", "self", ".", "pred_len", "=", "size", "[", "2", "]", "\n", "# init", "\n", "", "assert", "flag", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", "\n", "type_map", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'test'", ":", "2", "}", "\n", "self", ".", "set_type", "=", "type_map", "[", "flag", "]", "\n", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "__read_data__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.SolarEnergy.__read_data__": [[194, 228], ["sklearn.preprocessing.StandardScaler", "pandas.read_csv", "pandas.to_datetime", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.minute.map", "os.path.join", "sklearn.preprocessing.StandardScaler.fit_transform", "df_stamp.drop", "row.weekday"], "methods", ["None"], ["", "def", "__read_data__", "(", "self", ")", ":", "\n", "        ", "scaler", "=", "StandardScaler", "(", ")", "\n", "df_raw", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\n", "self", ".", "data_path", ")", ")", "\n", "\n", "border1s", "=", "[", "0", ",", "6", "*", "30", "*", "24", "*", "6", "-", "self", ".", "seq_len", ",", "6", "*", "30", "*", "24", "*", "6", "+", "2", "*", "30", "*", "24", "*", "6", "-", "self", ".", "seq_len", "]", "\n", "border2s", "=", "[", "6", "*", "30", "*", "24", "*", "6", ",", "6", "*", "30", "*", "24", "*", "6", "+", "2", "*", "30", "*", "24", "*", "6", ",", "8", "*", "30", "*", "24", "*", "6", "+", "4", "*", "30", "*", "24", "*", "6", "]", "\n", "border1", "=", "border1s", "[", "self", ".", "set_type", "]", "\n", "border2", "=", "border2s", "[", "self", ".", "set_type", "]", "\n", "\n", "if", "self", ".", "features", "==", "'M'", ":", "\n", "            ", "cols_data", "=", "df_raw", ".", "columns", "[", "1", ":", "]", "\n", "df_data", "=", "df_raw", "[", "cols_data", "]", "\n", "", "elif", "self", ".", "features", "==", "'S'", ":", "\n", "            ", "df_data", "=", "df_raw", "[", "[", "self", ".", "target", "]", "]", "\n", "\n", "", "if", "self", ".", "scale", ":", "\n", "            ", "data", "=", "scaler", ".", "fit_transform", "(", "df_data", ".", "values", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "df_data", ".", "values", "\n", "\n", "", "df_stamp", "=", "df_raw", "[", "[", "'date'", "]", "]", "[", "border1", ":", "border2", "]", "\n", "df_stamp", "[", "'date'", "]", "=", "pd", ".", "to_datetime", "(", "df_stamp", ".", "date", ")", "\n", "df_stamp", "[", "'month'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "month", ",", "1", ")", "\n", "df_stamp", "[", "'day'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "day", ",", "1", ")", "\n", "df_stamp", "[", "'weekday'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "weekday", "(", ")", ",", "1", ")", "\n", "df_stamp", "[", "'hour'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "hour", ",", "1", ")", "\n", "df_stamp", "[", "'minute'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "minute", ",", "1", ")", "\n", "df_stamp", "[", "'minute'", "]", "=", "df_stamp", ".", "minute", ".", "map", "(", "lambda", "x", ":", "x", "//", "10", ")", "\n", "data_stamp", "=", "df_stamp", ".", "drop", "(", "[", "'date'", "]", ",", "1", ")", ".", "values", "\n", "\n", "self", ".", "data_x", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_y", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_stamp", "=", "data_stamp", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.SolarEnergy.__getitem__": [[229, 241], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "s_begin", "=", "index", "\n", "s_end", "=", "s_begin", "+", "self", ".", "seq_len", "\n", "r_begin", "=", "s_end", "-", "self", ".", "label_len", "\n", "r_end", "=", "r_begin", "+", "self", ".", "label_len", "+", "self", ".", "pred_len", "\n", "\n", "seq_x", "=", "self", ".", "data_x", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y", "=", "self", ".", "data_y", "[", "r_begin", ":", "r_end", "]", "\n", "seq_x_mark", "=", "self", ".", "data_stamp", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y_mark", "=", "self", ".", "data_stamp", "[", "r_begin", ":", "r_end", "]", "\n", "\n", "return", "seq_x", ",", "seq_y", ",", "seq_x_mark", ",", "seq_y_mark", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.SolarEnergy.__len__": [[242, 244], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_x", ")", "-", "self", ".", "seq_len", "-", "self", ".", "pred_len", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.DogeCoin.__init__": [[247, 272], ["data_loader.DogeCoin.__read_data__"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__read_data__"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "flag", "=", "'train'", ",", "size", "=", "None", ",", "\n", "features", "=", "'M'", ",", "data_path", "=", "'DOGEUSDT-5m-data.csv'", ",", "\n", "target", "=", "'0'", ",", "scale", "=", "True", ")", ":", "\n", "# size [seq_len, label_len pred_len]", "\n", "# info", "\n", "        ", "if", "size", "==", "None", ":", "\n", "            ", "self", ".", "seq_len", "=", "12", "*", "4", "*", "6", "\n", "self", ".", "label_len", "=", "12", "*", "6", "\n", "self", ".", "pred_len", "=", "12", "*", "6", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_len", "=", "size", "[", "0", "]", "\n", "self", ".", "label_len", "=", "size", "[", "1", "]", "\n", "self", ".", "pred_len", "=", "size", "[", "2", "]", "\n", "# init", "\n", "", "assert", "flag", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", "\n", "type_map", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'test'", ":", "2", "}", "\n", "self", ".", "set_type", "=", "type_map", "[", "flag", "]", "\n", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "__read_data__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.DogeCoin.__read_data__": [[273, 307], ["sklearn.preprocessing.StandardScaler", "pandas.read_csv", "pandas.to_datetime", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.minute.map", "os.path.join", "sklearn.preprocessing.StandardScaler.fit_transform", "df_stamp.drop", "row.weekday"], "methods", ["None"], ["", "def", "__read_data__", "(", "self", ")", ":", "\n", "        ", "scaler", "=", "StandardScaler", "(", ")", "\n", "df_raw", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\n", "self", ".", "data_path", ")", ")", "\n", "\n", "border1s", "=", "[", "0", ",", "6", "*", "30", "*", "24", "*", "6", "-", "self", ".", "seq_len", ",", "6", "*", "30", "*", "24", "*", "6", "+", "2", "*", "30", "*", "24", "*", "6", "-", "self", ".", "seq_len", "]", "\n", "border2s", "=", "[", "6", "*", "30", "*", "24", "*", "6", ",", "6", "*", "30", "*", "24", "*", "6", "+", "2", "*", "30", "*", "24", "*", "6", ",", "8", "*", "30", "*", "24", "*", "6", "+", "4", "*", "30", "*", "24", "*", "6", "]", "\n", "border1", "=", "border1s", "[", "self", ".", "set_type", "]", "\n", "border2", "=", "border2s", "[", "self", ".", "set_type", "]", "\n", "\n", "if", "self", ".", "features", "==", "'M'", ":", "\n", "            ", "cols_data", "=", "df_raw", ".", "columns", "[", "1", ":", "]", "\n", "df_data", "=", "df_raw", "[", "cols_data", "]", "\n", "", "elif", "self", ".", "features", "==", "'S'", ":", "\n", "            ", "df_data", "=", "df_raw", "[", "[", "self", ".", "target", "]", "]", "\n", "\n", "", "if", "self", ".", "scale", ":", "\n", "            ", "data", "=", "scaler", ".", "fit_transform", "(", "df_data", ".", "values", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "df_data", ".", "values", "\n", "\n", "", "df_stamp", "=", "df_raw", "[", "[", "'date'", "]", "]", "[", "border1", ":", "border2", "]", "\n", "df_stamp", "[", "'date'", "]", "=", "pd", ".", "to_datetime", "(", "df_stamp", ".", "date", ")", "\n", "df_stamp", "[", "'month'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "month", ",", "1", ")", "\n", "df_stamp", "[", "'day'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "day", ",", "1", ")", "\n", "df_stamp", "[", "'weekday'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "weekday", "(", ")", ",", "1", ")", "\n", "df_stamp", "[", "'hour'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "hour", ",", "1", ")", "\n", "df_stamp", "[", "'minute'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "minute", ",", "1", ")", "\n", "df_stamp", "[", "'minute'", "]", "=", "df_stamp", ".", "minute", ".", "map", "(", "lambda", "x", ":", "x", "//", "10", ")", "\n", "data_stamp", "=", "df_stamp", ".", "drop", "(", "[", "'date'", "]", ",", "1", ")", ".", "values", "\n", "\n", "self", ".", "data_x", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_y", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_stamp", "=", "data_stamp", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.DogeCoin.__getitem__": [[308, 320], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "s_begin", "=", "index", "\n", "s_end", "=", "s_begin", "+", "self", ".", "seq_len", "\n", "r_begin", "=", "s_end", "-", "self", ".", "label_len", "\n", "r_end", "=", "r_begin", "+", "self", ".", "label_len", "+", "self", ".", "pred_len", "\n", "\n", "seq_x", "=", "self", ".", "data_x", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y", "=", "self", ".", "data_y", "[", "r_begin", ":", "r_end", "]", "\n", "seq_x_mark", "=", "self", ".", "data_stamp", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y_mark", "=", "self", ".", "data_stamp", "[", "r_begin", ":", "r_end", "]", "\n", "\n", "return", "seq_x", ",", "seq_y", ",", "seq_x_mark", ",", "seq_y_mark", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader.DogeCoin.__len__": [[321, 323], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_x", ")", "-", "self", ".", "seq_len", "-", "self", ".", "pred_len", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.NASA_Anomaly.__init__": [[15, 42], ["data_loader_dad.NASA_Anomaly.__read_data__"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__read_data__"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "flag", "=", "'train'", ",", "size", "=", "None", ",", "\n", "features", "=", "'M'", ",", "data_path", "=", "'SMAP'", ",", "\n", "target", "=", "0", ",", "scale", "=", "True", ")", ":", "\n", "# size [seq_len, label_len pred_len]", "\n", "# info", "\n", "        ", "if", "size", "==", "None", ":", "\n", "            ", "self", ".", "seq_len", "=", "8", "*", "60", "\n", "self", ".", "label_len", "=", "2", "*", "60", "\n", "self", ".", "pred_len", "=", "2", "*", "60", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_len", "=", "size", "[", "0", "]", "\n", "self", ".", "label_len", "=", "size", "[", "1", "]", "\n", "self", ".", "pred_len", "=", "size", "[", "2", "]", "\n", "# init", "\n", "", "assert", "flag", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", "\n", "\n", "type_map", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'test'", ":", "2", "}", "\n", "self", ".", "set_type", "=", "type_map", "[", "flag", "]", "\n", "self", ".", "flag", "=", "flag", "\n", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "__read_data__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.NASA_Anomaly.get_data_dim": [[43, 52], ["str().startswith", "ValueError", "str", "str"], "methods", ["None"], ["", "def", "get_data_dim", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "if", "dataset", "==", "'SMAP'", ":", "\n", "            ", "return", "25", "\n", "", "elif", "dataset", "==", "'MSL'", ":", "\n", "            ", "return", "55", "\n", "", "elif", "str", "(", "dataset", ")", ".", "startswith", "(", "'machine'", ")", ":", "\n", "            ", "return", "38", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'unknown dataset '", "+", "str", "(", "dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.NASA_Anomaly.__read_data__": [[53, 117], ["data_loader_dad.NASA_Anomaly.get_data_dim", "pandas.DataFrame", "pandas.date_range", "pandas.DataFrame.date.apply", "pandas.DataFrame.date.apply", "pandas.DataFrame.date.apply", "pandas.DataFrame.date.apply", "pandas.DataFrame.date.apply", "pandas.DataFrame.date.apply", "open", "pickle.load().reshape", "open.close", "data_loader_dad.NASA_Anomaly.preprocess", "pandas.DataFrame.drop", "os.path.join", "len", "row.weekday", "len", "pickle.load", "open", "pickle.load().reshape", "open.close", "open", "pickle.load().reshape", "open.close", "len", "len", "len", "os.path.join", "os.path.join", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.NASA_Anomaly.get_data_dim", "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.NASA_Anomaly.preprocess"], ["", "", "def", "__read_data__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        get data from pkl files\n\n        return shape: (([train_size, x_dim], [train_size] or None), ([test_size, x_dim], [test_size]))\n        \"\"\"", "\n", "\n", "x_dim", "=", "self", ".", "get_data_dim", "(", "self", ".", "data_path", ")", "\n", "if", "self", ".", "flag", "==", "'train'", ":", "\n", "            ", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "self", ".", "data_path", ",", "'{}_train.pkl'", ".", "format", "(", "self", ".", "data_path", ")", ")", ",", "\"rb\"", ")", "\n", "data", "=", "pickle", ".", "load", "(", "f", ")", ".", "reshape", "(", "(", "-", "1", ",", "x_dim", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "elif", "self", ".", "flag", "in", "[", "'val'", ",", "'test'", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "self", ".", "data_path", ",", "'{}_test.pkl'", ".", "format", "(", "self", ".", "data_path", ")", ")", ",", "\"rb\"", ")", "\n", "data", "=", "pickle", ".", "load", "(", "f", ")", ".", "reshape", "(", "(", "-", "1", ",", "x_dim", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "except", "(", "KeyError", ",", "FileNotFoundError", ")", ":", "\n", "                ", "data", "=", "None", "\n", "", "try", ":", "\n", "                ", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "self", ".", "data_path", ",", "'{}_test_label.pkl'", ".", "format", "(", "self", ".", "data_path", ")", ")", ",", "\"rb\"", ")", "\n", "label", "=", "pickle", ".", "load", "(", "f", ")", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "except", "(", "KeyError", ",", "FileNotFoundError", ")", ":", "\n", "                ", "label", "=", "None", "\n", "", "assert", "len", "(", "data", ")", "==", "len", "(", "label", ")", ",", "\"length of test data shoube the same as label\"", "\n", "", "if", "self", ".", "scale", ":", "\n", "            ", "data", "=", "self", ".", "preprocess", "(", "data", ")", "\n", "\n", "", "df_stamp", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'date'", "]", ")", "\n", "date", "=", "pd", ".", "date_range", "(", "start", "=", "'1/1/2015'", ",", "periods", "=", "len", "(", "data", ")", ",", "freq", "=", "'4s'", ")", "\n", "df_stamp", "[", "'date'", "]", "=", "date", "\n", "df_stamp", "[", "'month'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "month", ",", "1", ")", "\n", "df_stamp", "[", "'day'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "day", ",", "1", ")", "\n", "df_stamp", "[", "'weekday'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "weekday", "(", ")", ",", "1", ")", "\n", "df_stamp", "[", "'hour'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "hour", ",", "1", ")", "\n", "df_stamp", "[", "'minute'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "minute", ",", "1", ")", "\n", "# df_stamp['minute'] = df_stamp.minute.map(lambda x:x//10)", "\n", "df_stamp", "[", "'second'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "second", ",", "1", ")", "\n", "data_stamp", "=", "df_stamp", ".", "drop", "(", "[", "'date'", "]", ",", "1", ")", ".", "values", "\n", "\n", "if", "self", ".", "flag", "==", "'train'", ":", "\n", "            ", "if", "self", ".", "features", "==", "'M'", ":", "\n", "                ", "self", ".", "data_x", "=", "data", "\n", "self", ".", "data_y", "=", "data", "\n", "", "elif", "self", ".", "features", "==", "'S'", ":", "\n", "                ", "df_data", "=", "data", "[", ":", ",", "[", "self", ".", "target", "]", "]", "\n", "self", ".", "data_x", "=", "df_data", "\n", "self", ".", "data_y", "=", "df_data", "\n", "", "", "else", ":", "\n", "            ", "border1s", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "border2s", "=", "[", "None", ",", "len", "(", "data", ")", "//", "4", ",", "len", "(", "data", ")", "]", "\n", "border1", "=", "border1s", "[", "self", ".", "set_type", "]", "\n", "border2", "=", "border2s", "[", "self", ".", "set_type", "]", "\n", "if", "self", ".", "features", "==", "'M'", ":", "\n", "                ", "self", ".", "data_x", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_y", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "label", "=", "label", "[", "border1", ":", "border2", "]", "\n", "", "elif", "self", ".", "features", "==", "'S'", ":", "\n", "                ", "df_data", "=", "data", "[", ":", ",", "[", "self", ".", "target", "]", "]", "\n", "self", ".", "data_x", "=", "df_data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_y", "=", "df_data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "label", "=", "label", "[", "border1", ":", "border2", "]", "\n", "", "", "self", ".", "data_stamp", "=", "data_stamp", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.NASA_Anomaly.preprocess": [[118, 136], ["numpy.asarray", "numpy.any", "sklearn.preprocessing.MinMaxScaler().fit_transform", "print", "len", "ValueError", "print", "numpy.nan_to_num", "sum", "sklearn.preprocessing.MinMaxScaler", "numpy.isnan"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "df", ")", ":", "\n", "        ", "\"\"\"returns normalized and standardized data.\n        \"\"\"", "\n", "\n", "df", "=", "np", ".", "asarray", "(", "df", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "len", "(", "df", ".", "shape", ")", "==", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Data must be a 2-D array'", ")", "\n", "\n", "", "if", "np", ".", "any", "(", "sum", "(", "np", ".", "isnan", "(", "df", ")", ")", "!=", "0", ")", ":", "\n", "            ", "print", "(", "'Data contains null values. Will be replaced with 0'", ")", "\n", "df", "=", "np", ".", "nan_to_num", "(", ")", "\n", "\n", "# normalize data", "\n", "", "df", "=", "MinMaxScaler", "(", ")", ".", "fit_transform", "(", "df", ")", "\n", "print", "(", "'Data normalized'", ")", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.NASA_Anomaly.__getitem__": [[137, 153], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "s_begin", "=", "index", "\n", "s_end", "=", "s_begin", "+", "self", ".", "seq_len", "\n", "r_begin", "=", "s_end", "-", "self", ".", "label_len", "\n", "r_end", "=", "s_end", "+", "self", ".", "pred_len", "\n", "\n", "seq_x", "=", "self", ".", "data_x", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y", "=", "self", ".", "data_y", "[", "r_begin", ":", "r_end", "]", "\n", "seq_x_mark", "=", "self", ".", "data_stamp", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y_mark", "=", "self", ".", "data_stamp", "[", "r_begin", ":", "r_end", "]", "\n", "\n", "if", "self", ".", "flag", "==", "'train'", ":", "\n", "            ", "return", "seq_x", ",", "seq_y", ",", "seq_x_mark", ",", "seq_y_mark", "\n", "", "else", ":", "\n", "            ", "seq_label", "=", "self", ".", "label", "[", "s_end", ":", "r_end", "]", "\n", "return", "seq_x", ",", "seq_y", ",", "seq_x_mark", ",", "seq_y_mark", ",", "seq_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.NASA_Anomaly.__len__": [[154, 156], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_x", ")", "-", "self", ".", "seq_len", "-", "self", ".", "pred_len", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.WADI.__init__": [[159, 185], ["data_loader_dad.WADI.__read_data__"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__read_data__"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "flag", "=", "'train'", ",", "size", "=", "None", ",", "\n", "features", "=", "'M'", ",", "data_path", "=", "'WADI_14days_downsampled.csv'", ",", "\n", "target", "=", "'1_AIT_001_PV'", ",", "scale", "=", "True", ")", ":", "\n", "# size [seq_len, label_len pred_len]", "\n", "# info", "\n", "        ", "if", "size", "==", "None", ":", "\n", "            ", "self", ".", "seq_len", "=", "8", "*", "60", "\n", "self", ".", "label_len", "=", "2", "*", "60", "\n", "self", ".", "pred_len", "=", "2", "*", "60", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_len", "=", "size", "[", "0", "]", "\n", "self", ".", "label_len", "=", "size", "[", "1", "]", "\n", "self", ".", "pred_len", "=", "size", "[", "2", "]", "\n", "# init", "\n", "", "assert", "flag", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", "\n", "self", ".", "flag", "=", "flag", "\n", "type_map", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'test'", ":", "2", "}", "\n", "self", ".", "set_type", "=", "type_map", "[", "flag", "]", "\n", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "__read_data__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.WADI.__read_data__": [[186, 246], ["sklearn.preprocessing.MinMaxScaler", "pandas.to_datetime", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.date.apply", "df_stamp.second.map", "pandas.read_csv", "pandas.read_csv", "df_stamp.drop", "os.path.join", "sklearn.preprocessing.MinMaxScaler.fit_transform", "os.path.join", "len", "sklearn.preprocessing.MinMaxScaler.fit_transform", "row.weekday", "len"], "methods", ["None"], ["", "def", "__read_data__", "(", "self", ")", ":", "\n", "        ", "scaler", "=", "MinMaxScaler", "(", ")", "\n", "if", "self", ".", "flag", "==", "'train'", ":", "\n", "            ", "df_raw", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\n", "'WADI_14days_downsampled.csv'", ")", ")", "\n", "if", "self", ".", "features", "==", "'M'", ":", "\n", "                ", "cols_data", "=", "df_raw", ".", "columns", "[", "1", ":", "]", "\n", "df_data", "=", "df_raw", "[", "cols_data", "]", "\n", "", "elif", "self", ".", "features", "==", "'S'", ":", "\n", "                ", "df_data", "=", "df_raw", "[", "[", "self", ".", "target", "]", "]", "\n", "\n", "", "df_stamp", "=", "df_raw", "[", "[", "'date'", "]", "]", "\n", "\n", "if", "self", ".", "scale", ":", "\n", "                ", "data", "=", "scaler", ".", "fit_transform", "(", "df_data", ".", "values", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "df_data", ".", "values", "\n", "\n", "", "self", ".", "data_x", "=", "data", "\n", "self", ".", "data_y", "=", "data", "\n", "", "else", ":", "\n", "            ", "df_raw", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\n", "'WADI_attackdata_downsampled.csv'", ")", ")", "\n", "\n", "border1s", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "border2s", "=", "[", "None", ",", "len", "(", "df_raw", ")", "//", "4", ",", "len", "(", "df_raw", ")", "]", "\n", "border1", "=", "border1s", "[", "self", ".", "set_type", "]", "\n", "border2", "=", "border2s", "[", "self", ".", "set_type", "]", "\n", "\n", "df_stamp", "=", "df_raw", "[", "[", "'date'", "]", "]", "[", "border1", ":", "border2", "]", "\n", "\n", "if", "self", ".", "features", "==", "'M'", ":", "\n", "                ", "cols_data", "=", "df_raw", ".", "columns", "[", "1", ":", "-", "1", "]", "\n", "df_data", "=", "df_raw", "[", "cols_data", "]", "\n", "label", "=", "df_raw", "[", "'label'", "]", ".", "values", "\n", "", "elif", "self", ".", "features", "==", "'S'", ":", "\n", "                ", "df_data", "=", "df_raw", "[", "[", "self", ".", "target", "]", "]", "\n", "label", "=", "df_raw", "[", "'label'", "]", ".", "values", "\n", "\n", "", "if", "self", ".", "scale", ":", "\n", "                ", "data", "=", "scaler", ".", "fit_transform", "(", "df_data", ".", "values", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "df_data", ".", "values", "\n", "\n", "", "self", ".", "data_x", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_y", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "label", "=", "label", "[", "border1", ":", "border2", "]", "\n", "\n", "", "df_stamp", "[", "'date'", "]", "=", "pd", ".", "to_datetime", "(", "df_stamp", ".", "date", ")", "\n", "df_stamp", "[", "'month'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "month", ",", "1", ")", "\n", "df_stamp", "[", "'day'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "day", ",", "1", ")", "\n", "df_stamp", "[", "'weekday'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "weekday", "(", ")", ",", "1", ")", "\n", "df_stamp", "[", "'hour'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "hour", ",", "1", ")", "\n", "df_stamp", "[", "'minute'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "minute", ",", "1", ")", "\n", "# df_stamp['minute'] = df_stamp.minute.map(lambda x:x//10)", "\n", "df_stamp", "[", "'second'", "]", "=", "df_stamp", ".", "date", ".", "apply", "(", "lambda", "row", ":", "row", ".", "second", ",", "1", ")", "\n", "df_stamp", "[", "'second'", "]", "=", "df_stamp", ".", "second", ".", "map", "(", "lambda", "x", ":", "x", "//", "10", ")", "\n", "data_stamp", "=", "df_stamp", ".", "drop", "(", "[", "'date'", "]", ",", "1", ")", ".", "values", "\n", "\n", "self", ".", "data_stamp", "=", "data_stamp", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.WADI.__getitem__": [[247, 263], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "s_begin", "=", "index", "\n", "s_end", "=", "s_begin", "+", "self", ".", "seq_len", "\n", "r_begin", "=", "s_end", "-", "self", ".", "label_len", "\n", "r_end", "=", "s_end", "+", "self", ".", "pred_len", "\n", "\n", "seq_x", "=", "self", ".", "data_x", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y", "=", "self", ".", "data_y", "[", "r_begin", ":", "r_end", "]", "\n", "seq_x_mark", "=", "self", ".", "data_stamp", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y_mark", "=", "self", ".", "data_stamp", "[", "r_begin", ":", "r_end", "]", "\n", "\n", "if", "self", ".", "flag", "==", "'train'", ":", "\n", "            ", "return", "seq_x", ",", "seq_y", ",", "seq_x_mark", ",", "seq_y_mark", "\n", "", "else", ":", "\n", "            ", "seq_label", "=", "self", ".", "label", "[", "s_end", ":", "r_end", "]", "\n", "return", "seq_x", ",", "seq_y", ",", "seq_x_mark", ",", "seq_y_mark", ",", "seq_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.WADI.__len__": [[264, 266], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_x", ")", "-", "self", ".", "seq_len", "-", "self", ".", "pred_len", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__init__": [[269, 295], ["data_loader_dad.SWaT.__read_data__"], "methods", ["home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__read_data__"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "flag", "=", "'train'", ",", "size", "=", "None", ",", "\n", "features", "=", "'M'", ",", "data_path", "=", "'SWaT_normaldata_downsampled.csv'", ",", "\n", "target", "=", "'FIT_101'", ",", "scale", "=", "True", ")", ":", "\n", "# size [seq_len, label_len pred_len]", "\n", "# info", "\n", "        ", "if", "size", "==", "None", ":", "\n", "            ", "self", ".", "seq_len", "=", "8", "*", "60", "\n", "self", ".", "label_len", "=", "2", "*", "60", "\n", "self", ".", "pred_len", "=", "2", "*", "60", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_len", "=", "size", "[", "0", "]", "\n", "self", ".", "label_len", "=", "size", "[", "1", "]", "\n", "self", ".", "pred_len", "=", "size", "[", "2", "]", "\n", "# init", "\n", "", "assert", "flag", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", "\n", "self", ".", "flag", "=", "flag", "\n", "type_map", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'test'", ":", "2", "}", "\n", "self", ".", "set_type", "=", "type_map", "[", "flag", "]", "\n", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "__read_data__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__read_data__": [[296, 356], ["sklearn.preprocessing.MinMaxScaler", "pandas.to_datetime", "df_stamp[].apply", "df_stamp[].apply", "df_stamp[].apply", "df_stamp[].apply", "df_stamp[].apply", "df_stamp[].apply", "df_stamp.second.map", "pandas.read_csv", "pandas.read_csv", "df_stamp.drop", "os.path.join", "sklearn.preprocessing.MinMaxScaler.fit_transform", "os.path.join", "len", "sklearn.preprocessing.MinMaxScaler.fit_transform", "row.weekday", "len"], "methods", ["None"], ["", "def", "__read_data__", "(", "self", ")", ":", "\n", "        ", "scaler", "=", "MinMaxScaler", "(", ")", "\n", "if", "self", ".", "flag", "==", "'train'", ":", "\n", "            ", "df_raw", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\n", "'SWaT_normaldata_downsampled.csv'", ")", ")", "\n", "if", "self", ".", "features", "==", "'M'", ":", "\n", "                ", "cols_data", "=", "df_raw", ".", "columns", "[", "1", ":", "]", "\n", "df_data", "=", "df_raw", "[", "cols_data", "]", "\n", "", "elif", "self", ".", "features", "==", "'S'", ":", "\n", "                ", "df_data", "=", "df_raw", "[", "[", "self", ".", "target", "]", "]", "\n", "\n", "", "df_stamp", "=", "df_raw", "[", "[", "' Timestamp'", "]", "]", "\n", "\n", "if", "self", ".", "scale", ":", "\n", "                ", "data", "=", "scaler", ".", "fit_transform", "(", "df_data", ".", "values", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "df_data", ".", "values", "\n", "\n", "", "self", ".", "data_x", "=", "data", "\n", "self", ".", "data_y", "=", "data", "\n", "", "else", ":", "\n", "            ", "df_raw", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\n", "'SWaT_attackdata_downsampled.csv'", ")", ")", "\n", "\n", "border1s", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "border2s", "=", "[", "None", ",", "len", "(", "df_raw", ")", "//", "4", ",", "len", "(", "df_raw", ")", "]", "\n", "border1", "=", "border1s", "[", "self", ".", "set_type", "]", "\n", "border2", "=", "border2s", "[", "self", ".", "set_type", "]", "\n", "\n", "df_stamp", "=", "df_raw", "[", "[", "' Timestamp'", "]", "]", "[", "border1", ":", "border2", "]", "\n", "\n", "if", "self", ".", "features", "==", "'M'", ":", "\n", "                ", "cols_data", "=", "df_raw", ".", "columns", "[", "1", ":", "-", "1", "]", "\n", "df_data", "=", "df_raw", "[", "cols_data", "]", "\n", "label", "=", "df_raw", "[", "'Normal/Attack'", "]", ".", "values", "\n", "", "elif", "self", ".", "features", "==", "'S'", ":", "\n", "                ", "df_data", "=", "df_raw", "[", "[", "self", ".", "target", "]", "]", "\n", "label", "=", "df_raw", "[", "'Normal/Attack'", "]", ".", "values", "\n", "\n", "", "if", "self", ".", "scale", ":", "\n", "                ", "data", "=", "scaler", ".", "fit_transform", "(", "df_data", ".", "values", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "df_data", ".", "values", "\n", "\n", "", "self", ".", "data_x", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "data_y", "=", "data", "[", "border1", ":", "border2", "]", "\n", "self", ".", "label", "=", "label", "[", "border1", ":", "border2", "]", "\n", "\n", "", "df_stamp", "[", "' Timestamp'", "]", "=", "pd", ".", "to_datetime", "(", "df_stamp", "[", "' Timestamp'", "]", ")", "\n", "df_stamp", "[", "'month'", "]", "=", "df_stamp", "[", "' Timestamp'", "]", ".", "apply", "(", "lambda", "row", ":", "row", ".", "month", ",", "1", ")", "\n", "df_stamp", "[", "'day'", "]", "=", "df_stamp", "[", "' Timestamp'", "]", ".", "apply", "(", "lambda", "row", ":", "row", ".", "day", ",", "1", ")", "\n", "df_stamp", "[", "'weekday'", "]", "=", "df_stamp", "[", "' Timestamp'", "]", ".", "apply", "(", "lambda", "row", ":", "row", ".", "weekday", "(", ")", ",", "1", ")", "\n", "df_stamp", "[", "'hour'", "]", "=", "df_stamp", "[", "' Timestamp'", "]", ".", "apply", "(", "lambda", "row", ":", "row", ".", "hour", ",", "1", ")", "\n", "df_stamp", "[", "'minute'", "]", "=", "df_stamp", "[", "' Timestamp'", "]", ".", "apply", "(", "lambda", "row", ":", "row", ".", "minute", ",", "1", ")", "\n", "# df_stamp['minute'] = df_stamp.minute.map(lambda x:x//10)", "\n", "df_stamp", "[", "'second'", "]", "=", "df_stamp", "[", "' Timestamp'", "]", ".", "apply", "(", "lambda", "row", ":", "row", ".", "second", ",", "1", ")", "\n", "df_stamp", "[", "'second'", "]", "=", "df_stamp", ".", "second", ".", "map", "(", "lambda", "x", ":", "x", "//", "10", ")", "\n", "data_stamp", "=", "df_stamp", ".", "drop", "(", "[", "' Timestamp'", "]", ",", "1", ")", ".", "values", "\n", "\n", "self", ".", "data_stamp", "=", "data_stamp", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__getitem__": [[357, 373], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "s_begin", "=", "index", "\n", "s_end", "=", "s_begin", "+", "self", ".", "seq_len", "\n", "r_begin", "=", "s_end", "-", "self", ".", "label_len", "\n", "r_end", "=", "s_end", "+", "self", ".", "pred_len", "\n", "\n", "seq_x", "=", "self", ".", "data_x", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y", "=", "self", ".", "data_y", "[", "r_begin", ":", "r_end", "]", "\n", "seq_x_mark", "=", "self", ".", "data_stamp", "[", "s_begin", ":", "s_end", "]", "\n", "seq_y_mark", "=", "self", ".", "data_stamp", "[", "r_begin", ":", "r_end", "]", "\n", "\n", "if", "self", ".", "flag", "==", "'train'", ":", "\n", "            ", "return", "seq_x", ",", "seq_y", ",", "seq_x_mark", ",", "seq_y_mark", "\n", "", "else", ":", "\n", "            ", "seq_label", "=", "self", ".", "label", "[", "s_end", ":", "r_end", "]", "\n", "return", "seq_x", ",", "seq_y", ",", "seq_x_mark", ",", "seq_y_mark", ",", "seq_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ZEKAICHEN_GTA.data.data_loader_dad.SWaT.__len__": [[374, 376], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_x", ")", "-", "self", ".", "seq_len", "-", "self", ".", "pred_len", "+", "1", "\n", "\n"]]}