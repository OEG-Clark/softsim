{"home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.JuhanTestModelV1.create_model": [[85, 155], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationCnnIndirectAttentionModule", "video_pooling_modules.TriangulationCnnIndirectAttentionModule", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationCnnIndirectAttentionModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationCnnIndirectAttentionModule.forward", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "jtmv1_iteration", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "jtmv1_add_batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "jtmv1_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "jtmv1_audio_anchor_size", "\n", "video_hidden_size", "=", "FLAGS", ".", "jtmv1_video_hidden", "\n", "audio_hidden_size", "=", "FLAGS", ".", "jtmv1_audio_hidden", "\n", "video_output_dim", "=", "FLAGS", ".", "jtmv1_video_output_dim", "\n", "audio_output_dim", "=", "FLAGS", ".", "jtmv1_audio_output_dim", "\n", "use_attention", "=", "FLAGS", ".", "jtmv1_use_attention", "\n", "use_relu", "=", "FLAGS", ".", "jtmv1_use_relu", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "iterations", ")", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_module", "=", "video_pooling_modules", ".", "TriangulationCnnIndirectAttentionModule", "(", "\n", "feature_size", "=", "1024", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "video_anchor_size", ",", "\n", "self_attention", "=", "use_attention", ",", "\n", "hidden_layer_size", "=", "video_hidden_size", ",", "\n", "output_dim", "=", "video_output_dim", ",", "\n", "add_relu", "=", "use_relu", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "audio_module", "=", "video_pooling_modules", ".", "TriangulationCnnIndirectAttentionModule", "(", "\n", "feature_size", "=", "128", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "audio_anchor_size", ",", "\n", "self_attention", "=", "use_attention", ",", "\n", "hidden_layer_size", "=", "audio_hidden_size", ",", "\n", "output_dim", "=", "audio_output_dim", ",", "\n", "add_relu", "=", "use_relu", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"video_triangulation_embedding\"", ")", ":", "\n", "            ", "video_feature", "=", "video_module", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "# -> (batch_size * max_frames) x video_output_dim", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_triangulation_embedding\"", ")", ":", "\n", "            ", "audio_feature", "=", "audio_module", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "# -> (batch_size * max_frames) x audio_output_dim", "\n", "\n", "", "activation", "=", "tf", ".", "concat", "(", "[", "video_feature", ",", "audio_feature", "]", ",", "1", ")", "\n", "\n", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"ClassLearningFourNnModel\"", ")", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.JuhanTestModelV2.create_model": [[187, 269], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationNsCnnIndirectAttentionModule", "video_pooling_modules.TriangulationNsCnnIndirectAttentionModule", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationNsCnnIndirectAttentionModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationNsCnnIndirectAttentionModule.forward", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "jtmv2_iteration", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "jtmv2_add_batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "jtmv2_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "jtmv2_audio_anchor_size", "\n", "video_hidden_size", "=", "FLAGS", ".", "jtmv2_video_hidden", "\n", "audio_hidden_size", "=", "FLAGS", ".", "jtmv2_audio_hidden", "\n", "video_kernel_size", "=", "FLAGS", ".", "jtmv2_video_kernel_size", "\n", "audio_kernel_size", "=", "FLAGS", ".", "jtmv2_audio_kernel_size", "\n", "video_output_dim", "=", "FLAGS", ".", "jtmv2_video_output_dim", "\n", "audio_output_dim", "=", "FLAGS", ".", "jtmv2_audio_output_dim", "\n", "use_attention", "=", "FLAGS", ".", "jtmv2_use_attention", "\n", "use_relu", "=", "FLAGS", ".", "jtmv2_use_relu", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "iterations", ")", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_module", "=", "video_pooling_modules", ".", "TriangulationNsCnnIndirectAttentionModule", "(", "\n", "feature_size", "=", "1024", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "video_anchor_size", ",", "\n", "self_attention", "=", "use_attention", ",", "\n", "hidden_layer_size", "=", "video_hidden_size", ",", "\n", "kernel_size", "=", "video_kernel_size", ",", "\n", "output_dim", "=", "video_output_dim", ",", "\n", "add_relu", "=", "use_relu", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "audio_module", "=", "video_pooling_modules", ".", "TriangulationNsCnnIndirectAttentionModule", "(", "\n", "feature_size", "=", "128", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "audio_anchor_size", ",", "\n", "self_attention", "=", "use_attention", ",", "\n", "hidden_layer_size", "=", "audio_hidden_size", ",", "\n", "kernel_size", "=", "audio_kernel_size", ",", "\n", "output_dim", "=", "audio_output_dim", ",", "\n", "add_relu", "=", "use_relu", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"video_triangulation_embedding\"", ")", ":", "\n", "            ", "video_feature", "=", "video_module", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "# -> (batch_size * max_frames) x video_output_dim", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_triangulation_embedding\"", ")", ":", "\n", "            ", "audio_feature", "=", "audio_module", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "# -> (batch_size * max_frames) x audio_output_dim", "\n", "\n", "", "activation", "=", "tf", ".", "concat", "(", "[", "video_feature", ",", "audio_feature", "]", ",", "1", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"final_activation_bn\"", ")", "\n", "\n", "", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"ClassLearningFourNnModel\"", ")", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.JuhanTestModelV3.create_model": [[303, 379], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationMagnitudeNsCnnIndirectAttentionModule", "video_pooling_modules.TriangulationMagnitudeNsCnnIndirectAttentionModule", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationMagnitudeNsCnnIndirectAttentionModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationMagnitudeNsCnnIndirectAttentionModule.forward", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "jtmv3_iteration", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "jtmv3_add_batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "jtmv3_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "jtmv3_audio_anchor_size", "\n", "video_hidden_size", "=", "FLAGS", ".", "jtmv3_video_hidden", "\n", "audio_hidden_size", "=", "FLAGS", ".", "jtmv3_audio_hidden", "\n", "video_kernel_size", "=", "FLAGS", ".", "jtmv3_video_kernel_size", "\n", "audio_kernel_size", "=", "FLAGS", ".", "jtmv3_audio_kernel_size", "\n", "video_output_dim", "=", "FLAGS", ".", "jtmv3_video_output_dim", "\n", "audio_output_dim", "=", "FLAGS", ".", "jtmv3_audio_output_dim", "\n", "use_attention", "=", "FLAGS", ".", "jtmv3_use_attention", "\n", "use_relu", "=", "FLAGS", ".", "jtmv3_use_relu", "\n", "video_level_model", "=", "FLAGS", ".", "jtmv3_video_level_model", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "iterations", ")", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_module", "=", "video_pooling_modules", ".", "TriangulationMagnitudeNsCnnIndirectAttentionModule", "(", "\n", "feature_size", "=", "1024", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "video_anchor_size", ",", "\n", "self_attention", "=", "use_attention", ",", "\n", "hidden_layer_size", "=", "video_hidden_size", ",", "\n", "kernel_size", "=", "video_kernel_size", ",", "\n", "output_dim", "=", "video_output_dim", ",", "\n", "add_relu", "=", "use_relu", ",", "\n", "add_norm", "=", "True", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "audio_module", "=", "video_pooling_modules", ".", "TriangulationMagnitudeNsCnnIndirectAttentionModule", "(", "\n", "feature_size", "=", "128", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "audio_anchor_size", ",", "\n", "self_attention", "=", "use_attention", ",", "\n", "hidden_layer_size", "=", "audio_hidden_size", ",", "\n", "kernel_size", "=", "audio_kernel_size", ",", "\n", "output_dim", "=", "audio_output_dim", ",", "\n", "add_norm", "=", "True", ",", "\n", "add_relu", "=", "use_relu", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"video_triangulation_embedding\"", ")", ":", "\n", "            ", "video_feature", "=", "video_module", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "# -> (batch_size * max_frames) x video_output_dim", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_triangulation_embedding\"", ")", ":", "\n", "            ", "audio_feature", "=", "audio_module", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "# -> (batch_size * max_frames) x audio_output_dim", "\n", "\n", "", "activation", "=", "tf", ".", "concat", "(", "[", "video_feature", ",", "audio_feature", "]", ",", "1", ")", "\n", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "video_level_model", ")", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.JuhanTestModelV4.create_model": [[412, 488], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationMagnitudeNsCnnNetVladModule", "video_pooling_modules.TriangulationMagnitudeNsCnnNetVladModule", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationMagnitudeNsCnnNetVladModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationMagnitudeNsCnnNetVladModule.forward", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "jtmv4_iteration", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "jtmv4_add_batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "jtmv4_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "jtmv4_audio_anchor_size", "\n", "video_hidden_size", "=", "FLAGS", ".", "jtmv4_video_hidden", "\n", "audio_hidden_size", "=", "FLAGS", ".", "jtmv4_audio_hidden", "\n", "video_kernel_size", "=", "FLAGS", ".", "jtmv4_video_kernel_size", "\n", "audio_kernel_size", "=", "FLAGS", ".", "jtmv4_audio_kernel_size", "\n", "video_output_dim", "=", "FLAGS", ".", "jtmv4_video_output_dim", "\n", "audio_output_dim", "=", "FLAGS", ".", "jtmv4_audio_output_dim", "\n", "use_attention", "=", "FLAGS", ".", "jtmv4_use_attention", "\n", "use_relu", "=", "FLAGS", ".", "jtmv4_use_relu", "\n", "video_level_model", "=", "FLAGS", ".", "jtmv3_video_level_model", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "iterations", ")", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_module", "=", "video_pooling_modules", ".", "TriangulationMagnitudeNsCnnNetVladModule", "(", "\n", "feature_size", "=", "1024", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "video_anchor_size", ",", "\n", "self_attention", "=", "use_attention", ",", "\n", "hidden_layer_size", "=", "video_hidden_size", ",", "\n", "kernel_size", "=", "video_kernel_size", ",", "\n", "output_dim", "=", "video_output_dim", ",", "\n", "add_relu", "=", "use_relu", ",", "\n", "add_norm", "=", "True", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "audio_module", "=", "video_pooling_modules", ".", "TriangulationMagnitudeNsCnnNetVladModule", "(", "\n", "feature_size", "=", "128", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "audio_anchor_size", ",", "\n", "self_attention", "=", "use_attention", ",", "\n", "hidden_layer_size", "=", "audio_hidden_size", ",", "\n", "kernel_size", "=", "audio_kernel_size", ",", "\n", "output_dim", "=", "audio_output_dim", ",", "\n", "add_norm", "=", "True", ",", "\n", "add_relu", "=", "use_relu", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"video_triangulation_embedding\"", ")", ":", "\n", "            ", "video_feature", "=", "video_module", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "# -> (batch_size * max_frames) x video_output_dim", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_triangulation_embedding\"", ")", ":", "\n", "            ", "audio_feature", "=", "audio_module", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "# -> (batch_size * max_frames) x audio_output_dim", "\n", "\n", "", "activation", "=", "tf", ".", "concat", "(", "[", "video_feature", ",", "audio_feature", "]", ",", "1", ")", "\n", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "video_level_model", ")", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.JuhanTestModelV5.create_model": [[516, 607], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationV5Module", "video_pooling_modules.TriangulationV5Module", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationV5Module.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationV5Module.forward", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "jtmv5_iteration", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "jtmv5_add_batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "jtmv5_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "jtmv5_audio_anchor_size", "\n", "video_kernel_size", "=", "FLAGS", ".", "jtmv5_video_kernel_size", "\n", "video_hidden_size", "=", "FLAGS", ".", "jtmv5_video_hidden", "\n", "audio_kernel_size", "=", "FLAGS", ".", "jtmv5_audio_kernel_size", "\n", "audio_hidden_size", "=", "FLAGS", ".", "jtmv5_audio_hidden", "\n", "video_output_dim", "=", "FLAGS", ".", "jtmv5_video_output_dim", "\n", "audio_output_dim", "=", "FLAGS", ".", "jtmv5_audio_output_dim", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "iterations", ")", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "# Obtain video & audio features.", "\n", "video_features", "=", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", "\n", "audio_features", "=", "reshaped_input", "[", ":", ",", "1024", ":", "]", "\n", "\n", "# Batch normalize video & audio inputs for fixing scales.", "\n", "if", "add_batch_norm", ":", "\n", "            ", "video_features", "=", "slim", ".", "batch_norm", "(", "\n", "video_features", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"video_bn\"", ")", "\n", "audio_features", "=", "slim", ".", "batch_norm", "(", "\n", "audio_features", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"audio_bn\"", ")", "\n", "\n", "", "video_module", "=", "video_pooling_modules", ".", "TriangulationV5Module", "(", "\n", "feature_size", "=", "1024", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "video_anchor_size", ",", "\n", "kernel_size", "=", "video_kernel_size", ",", "\n", "self_attention", "=", "False", ",", "\n", "hidden_layer_size", "=", "video_hidden_size", ",", "\n", "output_dim", "=", "video_output_dim", ",", "\n", "add_relu", "=", "True", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "audio_module", "=", "video_pooling_modules", ".", "TriangulationV5Module", "(", "\n", "feature_size", "=", "128", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "audio_anchor_size", ",", "\n", "kernel_size", "=", "audio_kernel_size", ",", "\n", "self_attention", "=", "False", ",", "\n", "hidden_layer_size", "=", "audio_hidden_size", ",", "\n", "output_dim", "=", "audio_output_dim", ",", "\n", "add_relu", "=", "True", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"video_triangulation_embedding\"", ")", ":", "\n", "            ", "video_feature", "=", "video_module", ".", "forward", "(", "video_features", ")", "\n", "# -> (batch_size * max_frames) x video_output_dim", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_triangulation_embedding\"", ")", ":", "\n", "            ", "audio_feature", "=", "audio_module", ".", "forward", "(", "audio_features", ")", "\n", "# -> (batch_size * max_frames) x audio_output_dim", "\n", "\n", "", "activation", "=", "tf", ".", "concat", "(", "[", "video_feature", ",", "audio_feature", "]", ",", "1", ")", "\n", "\n", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"FourLayerBatchNeuralModel\"", ")", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.JuhanTestModelV6.create_model": [[639, 734], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationV6Module", "video_pooling_modules.TriangulationV6Module", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationV6Module.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationV6Module.forward", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "jtmv6_iteration", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "jtmv6_add_batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "jtmv6_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "jtmv6_audio_anchor_size", "\n", "video_kernel_size", "=", "FLAGS", ".", "jtmv6_video_kernel_size", "\n", "video_hidden_size", "=", "FLAGS", ".", "jtmv6_video_hidden", "\n", "audio_kernel_size", "=", "FLAGS", ".", "jtmv6_audio_kernel_size", "\n", "audio_hidden_size", "=", "FLAGS", ".", "jtmv6_audio_hidden", "\n", "video_output_dim", "=", "FLAGS", ".", "jtmv6_video_output_dim", "\n", "audio_output_dim", "=", "FLAGS", ".", "jtmv6_audio_output_dim", "\n", "video_cluster_size", "=", "FLAGS", ".", "jtmv6_video_cluster_size", "\n", "audio_cluster_size", "=", "FLAGS", ".", "jtmv6_audio_cluster_size", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "iterations", ")", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "# Obtain video & audio features.", "\n", "video_features", "=", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", "\n", "audio_features", "=", "reshaped_input", "[", ":", ",", "1024", ":", "]", "\n", "\n", "# Batch normalize video & audio inputs for fixing scales.", "\n", "if", "add_batch_norm", ":", "\n", "            ", "video_features", "=", "slim", ".", "batch_norm", "(", "\n", "video_features", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"video_bn\"", ")", "\n", "audio_features", "=", "slim", ".", "batch_norm", "(", "\n", "audio_features", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"audio_bn\"", ")", "\n", "\n", "", "video_module", "=", "video_pooling_modules", ".", "TriangulationV6Module", "(", "\n", "feature_size", "=", "1024", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "video_anchor_size", ",", "\n", "kernel_size", "=", "video_kernel_size", ",", "\n", "self_attention", "=", "False", ",", "\n", "cluster_size", "=", "video_cluster_size", ",", "\n", "hidden_layer_size", "=", "video_hidden_size", ",", "\n", "output_dim", "=", "video_output_dim", ",", "\n", "add_relu", "=", "True", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "audio_module", "=", "video_pooling_modules", ".", "TriangulationV6Module", "(", "\n", "feature_size", "=", "128", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "anchor_size", "=", "audio_anchor_size", ",", "\n", "kernel_size", "=", "audio_kernel_size", ",", "\n", "self_attention", "=", "False", ",", "\n", "hidden_layer_size", "=", "audio_hidden_size", ",", "\n", "cluster_size", "=", "audio_cluster_size", ",", "\n", "output_dim", "=", "audio_output_dim", ",", "\n", "add_relu", "=", "True", ",", "\n", "batch_norm", "=", "add_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"video_triangulation_embedding\"", ")", ":", "\n", "            ", "video_feature", "=", "video_module", ".", "forward", "(", "video_features", ")", "\n", "# -> (batch_size * max_frames) x video_output_dim", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_triangulation_embedding\"", ")", ":", "\n", "            ", "audio_feature", "=", "audio_module", ".", "forward", "(", "audio_features", ")", "\n", "# -> (batch_size * max_frames) x audio_output_dim", "\n", "\n", "", "activation", "=", "tf", ".", "concat", "(", "[", "video_feature", ",", "audio_feature", "]", ",", "1", ")", "\n", "\n", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"FourLayerBatchNeuralModel\"", ")", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.TriangulationCnnClusterModel.create_model": [[758, 940], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationEmbedding", "video_pooling_modules.TriangulationEmbedding", "video_pooling_modules.TriangulationCnnModule", "video_pooling_modules.TriangulationCnnModule", "video_pooling_modules.TriangulationCnnModule", "video_pooling_modules.TriangulationCnnModule", "aggregation_modules.IndirectClusterMeanPoolModule", "aggregation_modules.MeanStdPoolModule", "video_pooling_modules.TriangulationTemporalEmbedding", "video_pooling_modules.TriangulationTemporalEmbedding", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "aggregation_modules.IndirectClusterMeanPoolModule.forward", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "aggregation_modules.MeanStdPoolModule.forward", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "aggregation_modules.IndirectClusterMeanPoolModule.forward", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "aggregation_modules.MeanStdPoolModule.forward", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.batch_norm.get_shape().as_list", "tensorflow.batch_norm.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationCnnModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationCnnModule.forward", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationCnnModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationCnnModule.forward", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape", "tensorflow.batch_norm.get_shape", "tensorflow.batch_norm.get_shape", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "tccm_iterations", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "tccm_add_batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "tccm_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "tccm_audio_anchor_size", "\n", "video_kernel_size", "=", "FLAGS", ".", "tccm_video_kernel_size", "\n", "audio_kernel_size", "=", "FLAGS", ".", "tccm_audio_kernel_size", "\n", "video_hidden_size", "=", "FLAGS", ".", "tccm_video_hidden", "\n", "audio_hidden_size", "=", "FLAGS", ".", "tccm_audio_hidden", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "iterations", ")", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_features", "=", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", "\n", "audio_features", "=", "reshaped_input", "[", ":", ",", "1024", ":", "]", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "video_features", "=", "slim", ".", "batch_norm", "(", "\n", "video_features", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"video_bn\"", ")", "\n", "audio_features", "=", "slim", ".", "batch_norm", "(", "\n", "audio_features", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"audio_bn\"", ")", "\n", "\n", "", "video_d_module", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "1024", ",", "\n", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_d_module", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "128", ",", "\n", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "\n", "video_d_cnn_module", "=", "video_pooling_modules", ".", "TriangulationCnnModule", "(", "1024", ",", "\n", "max_frames", ",", "\n", "video_kernel_size", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ",", "\n", "\"video_d\"", ")", "\n", "\n", "video_t_cnn_module", "=", "video_pooling_modules", ".", "TriangulationCnnModule", "(", "1024", ",", "\n", "max_frames", "-", "1", ",", "\n", "video_kernel_size", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ",", "\n", "\"video_t\"", ")", "\n", "\n", "audio_d_cnn_module", "=", "video_pooling_modules", ".", "TriangulationCnnModule", "(", "128", ",", "\n", "max_frames", ",", "\n", "audio_kernel_size", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ",", "\n", "\"audio_d\"", ")", "\n", "\n", "audio_t_cnn_module", "=", "video_pooling_modules", ".", "TriangulationCnnModule", "(", "128", ",", "\n", "max_frames", "-", "1", ",", "\n", "audio_kernel_size", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ",", "\n", "\"audio_t\"", ")", "\n", "\n", "ic_mean_pool", "=", "aggregation_modules", ".", "IndirectClusterMeanPoolModule", "(", "l2_normalize", "=", "False", ")", "\n", "mean_std_pool", "=", "aggregation_modules", ".", "MeanStdPoolModule", "(", "l2_normalize", "=", "False", ")", "\n", "\n", "video_t_module", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "1024", ",", "\n", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_t_module", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "128", ",", "\n", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"video_triangulation_embedding\"", ")", ":", "\n", "            ", "video_d", "=", "video_d_module", ".", "forward", "(", "video_features", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "with", "tf", ".", "variable_scope", "(", "\"video_d\"", ")", ":", "\n", "                ", "video_d_cnn", "=", "video_d_cnn_module", ".", "forward", "(", "video_d", ")", "\n", "# -> batch_size x max_frames x (anchor_size * num_filters)", "\n", "\n", "", "video_d_temp", "=", "tf", ".", "reshape", "(", "video_d", ",", "[", "-", "1", ",", "max_frames", ",", "1024", "*", "video_anchor_size", "]", ")", "\n", "agg_video_d", "=", "ic_mean_pool", ".", "forward", "(", "video_d_temp", ",", "video_d_cnn", ")", "\n", "# -> batch_size x (anchor_size * num_filters)", "\n", "\n", "video_t", "=", "video_t_module", ".", "forward", "(", "video_d", ")", "\n", "# -> batch_size x (max_frames - 1) x (feature_size * anchor_size)", "\n", "video_t", "=", "tf", ".", "reshape", "(", "video_t", ",", "[", "-", "1", ",", "1024", "*", "video_anchor_size", "]", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"video_t\"", ")", ":", "\n", "                ", "video_t_cnn", "=", "video_t_cnn_module", ".", "forward", "(", "video_t", ")", "\n", "# -> batch_size x (max_frames - 1) x (anchor_size * num_filters)", "\n", "", "agg_video_t", "=", "mean_std_pool", ".", "forward", "(", "video_t_cnn", ")", "\n", "\n", "agg_video", "=", "tf", ".", "concat", "(", "[", "agg_video_d", ",", "agg_video_t", "]", ",", "1", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "                ", "agg_video", "=", "slim", ".", "batch_norm", "(", "\n", "agg_video", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"agg_video_bn\"", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "\"audio_triangulation_embedding\"", ")", ":", "\n", "            ", "audio_d", "=", "audio_d_module", ".", "forward", "(", "audio_features", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "with", "tf", ".", "variable_scope", "(", "\"audio_d\"", ")", ":", "\n", "                ", "audio_d_cnn", "=", "audio_d_cnn_module", ".", "forward", "(", "audio_d", ")", "\n", "# -> batch_size x max_frames x (anchor_size * num_filters)", "\n", "\n", "", "audio_d_temp", "=", "tf", ".", "reshape", "(", "audio_d", ",", "[", "-", "1", ",", "max_frames", ",", "128", "*", "audio_anchor_size", "]", ")", "\n", "agg_audio_d", "=", "ic_mean_pool", ".", "forward", "(", "audio_d_temp", ",", "audio_d_cnn", ")", "\n", "# -> batch_size x (anchor_size * num_filters)", "\n", "\n", "audio_t", "=", "audio_t_module", ".", "forward", "(", "audio_d", ")", "\n", "# -> batch_size x (max_frames - 1) x (feature_size * anchor_size)", "\n", "audio_t", "=", "tf", ".", "reshape", "(", "audio_t", ",", "[", "-", "1", ",", "128", "*", "audio_anchor_size", "]", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"audio_t\"", ")", ":", "\n", "                ", "audio_t_cnn", "=", "audio_t_cnn_module", ".", "forward", "(", "audio_t", ")", "\n", "# -> batch_size x (max_frames - 1) x (anchor_size * num_filters)", "\n", "", "agg_audio_t", "=", "mean_std_pool", ".", "forward", "(", "audio_t_cnn", ")", "\n", "\n", "agg_audio", "=", "tf", ".", "concat", "(", "[", "agg_audio_d", ",", "agg_audio_t", "]", ",", "1", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "                ", "agg_audio", "=", "slim", ".", "batch_norm", "(", "\n", "agg_audio", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"agg_audio_bn\"", ")", "\n", "\n", "", "", "agg_video_dim", "=", "agg_video", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "video_hidden_weight", "=", "tf", ".", "get_variable", "(", "\"video_hidden\"", ",", "\n", "[", "agg_video_dim", ",", "video_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "video_hidden_size", ")", ")", ")", "\n", "video_activation", "=", "tf", ".", "matmul", "(", "agg_video", ",", "video_hidden_weight", ")", "\n", "\n", "agg_audio_dim", "=", "agg_audio", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "audio_hidden_weight", "=", "tf", ".", "get_variable", "(", "\"audio_hidden\"", ",", "\n", "[", "agg_audio_dim", ",", "audio_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "audio_hidden_size", ")", ")", ")", "\n", "audio_activation", "=", "tf", ".", "matmul", "(", "agg_audio", ",", "audio_hidden_weight", ")", "\n", "\n", "activation", "=", "tf", ".", "concat", "(", "[", "video_activation", ",", "audio_activation", "]", ",", "1", ")", "\n", "\n", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"ClassLearningFourNnModel\"", ")", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.SoftAttentionTriangulationModel.create_model": [[966, 1146], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationEmbedding", "video_pooling_modules.TriangulationEmbedding", "aggregation_modules.IndirectClusterMaxMeanPoolModule", "video_pooling_modules.TriangulationTemporalEmbedding", "video_pooling_modules.TriangulationTemporalEmbedding", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "aggregation_modules.IndirectClusterMaxMeanPoolModule.forward", "aggregation_modules.IndirectClusterMaxMeanPoolModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "aggregation_modules.IndirectClusterMaxMeanPoolModule.forward", "aggregation_modules.IndirectClusterMaxMeanPoolModule.forward", "aggregation_modules.IndirectClusterMaxMeanPoolModule.forward.get_shape().as_list", "aggregation_modules.IndirectClusterMaxMeanPoolModule.forward.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm.get_shape().as_list", "tensorflow.batch_norm.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape", "aggregation_modules.IndirectClusterMaxMeanPoolModule.forward.get_shape", "aggregation_modules.IndirectClusterMaxMeanPoolModule.forward.get_shape", "tensorflow.batch_norm.get_shape", "tensorflow.batch_norm.get_shape", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "sftm_iterations", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "sftm_add_batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "sftm_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "sftm_audio_anchor_size", "\n", "video_bottleneck", "=", "FLAGS", ".", "sftm_video_bottleneck", "\n", "audio_bottleneck", "=", "FLAGS", ".", "sftm_audio_bottleneck", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "iterations", ")", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_features", "=", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", "\n", "audio_features", "=", "reshaped_input", "[", ":", ",", "1024", ":", "]", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "video_features", "=", "slim", ".", "batch_norm", "(", "\n", "video_features", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"video_bn\"", ")", "\n", "audio_features", "=", "slim", ".", "batch_norm", "(", "\n", "audio_features", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"audio_bn\"", ")", "\n", "\n", "# Initialize all modules.", "\n", "", "video_d_module", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "1024", ",", "\n", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_d_module", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "128", ",", "\n", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "cluster_pool", "=", "aggregation_modules", ".", "IndirectClusterMaxMeanPoolModule", "(", "l2_normalize", "=", "False", ")", "\n", "video_t_module", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "1024", ",", "\n", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_t_module", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "128", ",", "\n", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"video_triangulation_embedding\"", ")", ":", "\n", "            ", "video_d", "=", "video_d_module", ".", "forward", "(", "video_features", ")", "\n", "# -> batch_size x max_frames x (feature_size * anchor_size)", "\n", "video_t", "=", "video_t_module", ".", "forward", "(", "video_d", ")", "\n", "\n", "# -> batch_size x max_frames x (feature_size * anchor_size)", "\n", "video_d", "=", "tf", ".", "reshape", "(", "video_d", ",", "[", "-", "1", ",", "max_frames", ",", "1024", "*", "video_anchor_size", "]", ")", "\n", "\n", "agg_video_d", "=", "cluster_pool", ".", "forward", "(", "video_d", ")", "\n", "agg_video_t", "=", "cluster_pool", ".", "forward", "(", "video_t", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_triangulation_embedding\"", ")", ":", "\n", "            ", "audio_d", "=", "audio_d_module", ".", "forward", "(", "audio_features", ")", "\n", "# -> batch_size x max_frames x (feature_size * anchor_size)", "\n", "audio_t", "=", "audio_t_module", ".", "forward", "(", "audio_d", ")", "\n", "\n", "# -> batch_size x max_frames x (feature_size * anchor_size)", "\n", "audio_d", "=", "tf", ".", "reshape", "(", "audio_d", ",", "[", "-", "1", ",", "max_frames", ",", "128", "*", "audio_anchor_size", "]", ")", "\n", "\n", "agg_audio_d", "=", "cluster_pool", ".", "forward", "(", "audio_d", ")", "\n", "agg_audio_t", "=", "cluster_pool", ".", "forward", "(", "audio_t", ")", "\n", "\n", "# Projection to a lower dimension space for better discrimination.", "\n", "", "agg_video_dim", "=", "agg_video_d", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "video_d_projection", "=", "tf", ".", "get_variable", "(", "\"video_d_projection\"", ",", "\n", "[", "agg_video_dim", ",", "video_bottleneck", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "video_bottleneck", ")", ")", ")", "\n", "video_t_projection", "=", "tf", ".", "get_variable", "(", "\"video_t_projection\"", ",", "\n", "[", "agg_video_dim", ",", "video_bottleneck", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "video_bottleneck", ")", ")", ")", "\n", "agg_audio_dim", "=", "agg_audio_d", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "audio_d_projection", "=", "tf", ".", "get_variable", "(", "\"audio_d_projection\"", ",", "\n", "[", "agg_audio_dim", ",", "audio_bottleneck", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "audio_bottleneck", ")", ")", ")", "\n", "audio_t_projection", "=", "tf", ".", "get_variable", "(", "\"audio_t_projection\"", ",", "\n", "[", "agg_audio_dim", ",", "audio_bottleneck", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "audio_bottleneck", ")", ")", ")", "\n", "\n", "video_d_activation", "=", "tf", ".", "matmul", "(", "agg_video_d", ",", "video_d_projection", ")", "\n", "video_t_activation", "=", "tf", ".", "matmul", "(", "agg_video_t", ",", "video_t_projection", ")", "\n", "audio_d_activation", "=", "tf", ".", "matmul", "(", "agg_audio_d", ",", "audio_d_projection", ")", "\n", "audio_t_activation", "=", "tf", ".", "matmul", "(", "agg_audio_t", ",", "audio_t_projection", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "video_d_activation", "=", "slim", ".", "batch_norm", "(", "\n", "video_d_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"video_d_activation_bn\"", ")", "\n", "video_t_activation", "=", "slim", ".", "batch_norm", "(", "\n", "video_t_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"video_t_activation_bn\"", ")", "\n", "audio_d_activation", "=", "slim", ".", "batch_norm", "(", "\n", "audio_d_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"audio_d_activation_bn\"", ")", "\n", "audio_t_activation", "=", "slim", ".", "batch_norm", "(", "\n", "audio_t_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"audio_t_activation_bn\"", ")", "\n", "\n", "# Fuse distribution and temporal features.", "\n", "", "video_activation", "=", "tf", ".", "concat", "(", "[", "video_d_activation", ",", "video_t_activation", "]", ",", "1", ")", "\n", "audio_activation", "=", "tf", ".", "concat", "(", "[", "audio_d_activation", ",", "audio_t_activation", "]", ",", "1", ")", "\n", "\n", "video_activation_dim", "=", "video_activation", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "video_activation_weights", "=", "tf", ".", "get_variable", "(", "\"video_projection\"", ",", "\n", "[", "video_activation_dim", ",", "video_bottleneck", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "video_bottleneck", ")", ")", ")", "\n", "audio_activation_dim", "=", "audio_activation", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "audio_activation_weights", "=", "tf", ".", "get_variable", "(", "\"audio_projection\"", ",", "\n", "[", "audio_activation_dim", ",", "audio_bottleneck", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "audio_bottleneck", ")", ")", ")", "\n", "\n", "video_activation", "=", "tf", ".", "matmul", "(", "video_activation", ",", "video_activation_weights", ")", "\n", "audio_activation", "=", "tf", ".", "matmul", "(", "audio_activation", ",", "audio_activation_weights", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "video_activation", "=", "slim", ".", "batch_norm", "(", "\n", "video_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"video_activation_bn\"", ")", "\n", "audio_activation", "=", "slim", ".", "batch_norm", "(", "\n", "audio_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"audio_activation_bn\"", ")", "\n", "\n", "# Fuse video and audio features.", "\n", "", "activation", "=", "tf", ".", "concat", "(", "[", "video_activation", ",", "audio_activation", "]", ",", "1", ")", "\n", "\n", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"ClassLearningFourNnModel\"", ")", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.RegularizedTriangulationModel.create_model": [[1149, 1308], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.WeightedTriangulationEmbedding", "video_pooling_modules.WeightedTriangulationEmbedding", "aggregation_modules.MaxMeanPoolingModule", "video_pooling_modules.TriangulationTemporalEmbedding", "video_pooling_modules.TriangulationTemporalEmbedding", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.WeightedTriangulationEmbedding.forward", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "aggregation_modules.MaxMeanPoolingModule.forward", "aggregation_modules.MaxMeanPoolingModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.WeightedTriangulationEmbedding.forward", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "aggregation_modules.MaxMeanPoolingModule.forward", "aggregation_modules.MaxMeanPoolingModule.forward", "aggregation_modules.MaxMeanPoolingModule.forward.get_shape().as_list", "aggregation_modules.MaxMeanPoolingModule.forward.get_shape().as_list", "tensorflow.concat.get_shape().as_list", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm.get_shape().as_list", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.l1_l2_regularizer", "tensorflow.l1_l2_regularizer", "tensorflow.l1_l2_regularizer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.l1_l2_regularizer", "tensorflow.l1_l2_regularizer", "tensorflow.l1_l2_regularizer", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape", "aggregation_modules.MaxMeanPoolingModule.forward.get_shape", "aggregation_modules.MaxMeanPoolingModule.forward.get_shape", "tensorflow.concat.get_shape", "tensorflow.concat.get_shape", "tensorflow.batch_norm.get_shape", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "iterations", "\n", "video_anchor_size", "=", "FLAGS", ".", "wtm_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "wtm_audio_anchor_size", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "\n", "iterations", ")", "\n", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_d_module", "=", "video_pooling_modules", ".", "WeightedTriangulationEmbedding", "(", "1024", ",", "\n", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_d_module", "=", "video_pooling_modules", ".", "WeightedTriangulationEmbedding", "(", "128", ",", "\n", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "mean_max_pool", "=", "aggregation_modules", ".", "MaxMeanPoolingModule", "(", "l2_normalize", "=", "False", ")", "\n", "video_t_module", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "1024", ",", "\n", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_t_module", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "128", ",", "\n", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "reshaped_input", "=", "slim", ".", "batch_norm", "(", "\n", "reshaped_input", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"input_bn\"", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"video_t_emb\"", ")", ":", "\n", "            ", "video_d", ",", "ortho_reg_v", "=", "video_d_module", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "# -> batch_size x max_frames x (feature_size * anchor_size)", "\n", "video_t", "=", "video_t_module", ".", "forward", "(", "video_d", ")", "\n", "\n", "agg_video_d", "=", "mean_max_pool", ".", "forward", "(", "video_d", ")", "\n", "agg_video_t", "=", "mean_max_pool", ".", "forward", "(", "video_t", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_t_emb\"", ")", ":", "\n", "            ", "audio_d", ",", "ortho_reg_a", "=", "audio_d_module", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "# -> batch_size x max_frames x (feature_size * anchor_size)", "\n", "video_t", "=", "audio_t_module", ".", "forward", "(", "audio_d", ")", "\n", "\n", "agg_audio_d", "=", "mean_max_pool", ".", "forward", "(", "audio_d", ")", "\n", "agg_audio_t", "=", "mean_max_pool", ".", "forward", "(", "video_t", ")", "\n", "\n", "", "orthogonal_reg", "=", "ortho_reg_v", "+", "ortho_reg_a", "\n", "\n", "# Video Distribution Projection.", "\n", "agg_video_d_dim", "=", "agg_video_d", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "video_projection_weight", "=", "tf", ".", "get_variable", "(", "\"video_projection\"", ",", "\n", "[", "agg_video_d_dim", ",", "1024", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "1024", ")", ")", ")", "\n", "video_projection_activation", "=", "tf", ".", "matmul", "(", "agg_video_d", ",", "video_projection_weight", ")", "\n", "video_projection_activation", "=", "slim", ".", "batch_norm", "(", "\n", "video_projection_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"video_projection_bn\"", ")", "\n", "\n", "# Audio Distribution Projection.", "\n", "agg_audio_d_dim", "=", "agg_audio_d", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "audio_projection_weights_1", "=", "tf", ".", "get_variable", "(", "\"audio_projection\"", ",", "\n", "[", "agg_audio_d_dim", ",", "128", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "128", ")", ")", ")", "\n", "audio_projection_activation", "=", "tf", ".", "matmul", "(", "agg_audio_d_dim", ",", "audio_projection_weights_1", ")", "\n", "audio_projection_activation", "=", "slim", ".", "batch_norm", "(", "\n", "audio_projection_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"audio_projection_bn\"", ")", "\n", "\n", "dis_projection_activation", "=", "tf", ".", "concat", "(", "[", "video_projection_activation", ",", "\n", "audio_projection_activation", "]", ",", "1", ")", "\n", "\n", "# Temporal Features Projection.", "\n", "agg_temp", "=", "tf", ".", "concat", "(", "[", "agg_video_t", ",", "agg_audio_t", "]", ",", "1", ")", "\n", "agg_temp_dim", "=", "agg_temp", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "temp_projection_weight", "=", "tf", ".", "get_variable", "(", "\"temp_projection_1\"", ",", "\n", "[", "agg_temp_dim", ",", "1152", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "1152", ")", ")", ")", "\n", "temp_projection_activation", "=", "tf", ".", "matmul", "(", "agg_temp", ",", "temp_projection_weight", ")", "\n", "temp_projection_activation", "=", "slim", ".", "batch_norm", "(", "\n", "temp_projection_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"temp_projection_bn\"", ")", "\n", "\n", "\n", "# Higher dimension projection.", "\n", "dis_projection_activation_dim", "=", "dis_projection_activation", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "dis_projection_weights", "=", "tf", ".", "get_variable", "(", "\"dis_projection_2\"", ",", "\n", "[", "dis_projection_activation_dim", ",", "2048", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "2048", ")", ")", ",", "\n", "regularizer", "=", "layers", ".", "l1_l2_regularizer", "(", "1e-5", ")", ")", "\n", "dis_activation", "=", "tf", ".", "matmul", "(", "dis_projection_activation", ",", "dis_projection_weights", ")", "\n", "dis_activation", "=", "slim", ".", "batch_norm", "(", "\n", "dis_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"dis_activation_bn\"", ")", "\n", "# dis_activation = tf.nn.leaky_relu(dis_activation)", "\n", "\n", "temp_projection_activation_dim", "=", "temp_projection_activation", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "temp_projection_weights_2", "=", "tf", ".", "get_variable", "(", "\"temp_projection_2\"", ",", "\n", "[", "temp_projection_activation_dim", ",", "2048", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "2048", ")", ")", ",", "\n", "regularizer", "=", "layers", ".", "l1_l2_regularizer", "(", "1e-5", ")", ")", "\n", "temp_activation", "=", "tf", ".", "matmul", "(", "temp_projection_activation", ",", "temp_projection_weights_2", ")", "\n", "temp_activation", "=", "slim", ".", "batch_norm", "(", "\n", "temp_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"temp_activation_bn\"", ")", "\n", "# temp_activation = tf.nn.leaky_relu(temp_activation)", "\n", "\n", "activation", "=", "tf", ".", "concat", "(", "[", "dis_activation", ",", "temp_activation", "]", ",", "1", ")", "\n", "\n", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"ClassLearningThreeNnModel\"", ")", "\n", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "ortho_reg", "=", "orthogonal_reg", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.WeightedTriangulationModel.create_model": [[1320, 1500], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.WeightedTriangulationEmbedding", "video_pooling_modules.WeightedTriangulationEmbedding", "aggregation_modules.SpocPoolingModule", "video_pooling_modules.TriangulationTemporalEmbedding", "video_pooling_modules.TriangulationTemporalEmbedding", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "getattr", "getattr.create_model", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.WeightedTriangulationEmbedding.forward", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "aggregation_modules.SpocPoolingModule.forward", "aggregation_modules.SpocPoolingModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.WeightedTriangulationEmbedding.forward", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "aggregation_modules.SpocPoolingModule.forward", "aggregation_modules.SpocPoolingModule.forward", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape", "tensorflow.concat.get_shape", "tensorflow.concat.get_shape", "tensorflow.concat.get_shape", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "iterations", "\n", "random_frames", "=", "sample_random_frames", "or", "FLAGS", ".", "sample_random_frames", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "wtm_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "wtm_audio_anchor_size", "\n", "\n", "if", "random_frames", ":", "\n", "            ", "num_frames_2", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames_2", ",", "\n", "iterations", ")", "\n", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_t_emb", "=", "video_pooling_modules", ".", "WeightedTriangulationEmbedding", "(", "1024", ",", "\n", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_t_emb", "=", "video_pooling_modules", ".", "WeightedTriangulationEmbedding", "(", "128", ",", "\n", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "\n", "mean_pool", "=", "aggregation_modules", ".", "SpocPoolingModule", "(", "l2_normalize", "=", "False", ")", "\n", "\n", "video_t_temp_emb", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "1024", ",", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_t_temp_emb", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "128", ",", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "reshaped_input", "=", "slim", ".", "batch_norm", "(", "\n", "reshaped_input", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"input_bn\"", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"video_t_emb\"", ")", ":", "\n", "            ", "t_emb_video", ",", "det_reg_v", "=", "video_t_emb", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "# -> batch_size x max_frames x (feature_size * cluster_size)", "\n", "t_emb_temp_video", "=", "video_t_temp_emb", ".", "forward", "(", "t_emb_video", ")", "\n", "\n", "v_distrib_pool", "=", "mean_pool", ".", "forward", "(", "t_emb_video", ")", "\n", "v_temp_pool", "=", "mean_pool", ".", "forward", "(", "t_emb_temp_video", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_t_emb\"", ")", ":", "\n", "            ", "t_emb_audio", ",", "det_reg_a", "=", "audio_t_emb", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "# -> batch_size x max_frames x (feature_size * cluster_size)", "\n", "t_emb_temp_audio", "=", "audio_t_temp_emb", ".", "forward", "(", "t_emb_audio", ")", "\n", "\n", "a_distrib_pool", "=", "mean_pool", ".", "forward", "(", "t_emb_audio", ")", "\n", "a_temp_pool", "=", "mean_pool", ".", "forward", "(", "t_emb_temp_audio", ")", "\n", "\n", "", "if", "det_reg_v", "is", "not", "None", "and", "det_reg_a", "is", "not", "None", ":", "\n", "            ", "det_reg", "=", "det_reg_v", "+", "det_reg_a", "\n", "", "else", ":", "\n", "            ", "det_reg", "=", "0", "\n", "\n", "", "video_concat", "=", "tf", ".", "concat", "(", "[", "v_distrib_pool", ",", "v_temp_pool", "]", ",", "1", ")", "\n", "\n", "video_concat_dim", "=", "video_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "video_hidden_1", "=", "tf", ".", "get_variable", "(", "\"video_hidden_1\"", ",", "\n", "[", "video_concat_dim", ",", "1024", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "1024", ")", ")", ")", "\n", "\n", "video_hidden_2", "=", "tf", ".", "get_variable", "(", "\"video_hidden_2\"", ",", "\n", "[", "1024", ",", "1024", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "1024", ")", ")", ")", "\n", "\n", "video_activation", "=", "tf", ".", "matmul", "(", "video_concat", ",", "video_hidden_1", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "video_activation", "=", "slim", ".", "batch_norm", "(", "\n", "video_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"video_activation_1_bn\"", ")", "\n", "", "video_activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "video_activation", ")", "\n", "\n", "video_activation", "=", "tf", ".", "matmul", "(", "video_activation", ",", "video_hidden_2", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "video_activation", "=", "slim", ".", "batch_norm", "(", "\n", "video_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"video_activation_2_bn\"", ")", "\n", "", "video_activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "video_activation", ")", "\n", "\n", "audio_concat", "=", "tf", ".", "concat", "(", "[", "a_distrib_pool", ",", "a_temp_pool", "]", ",", "1", ")", "\n", "\n", "audio_concat_dim", "=", "audio_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "audio_hidden_1", "=", "tf", ".", "get_variable", "(", "\"audio_hidden_1\"", ",", "\n", "[", "audio_concat_dim", ",", "128", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "128", ")", ")", ")", "\n", "\n", "audio_hidden_2", "=", "tf", ".", "get_variable", "(", "\"audio_hidden_2\"", ",", "\n", "[", "128", ",", "128", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "128", ")", ")", ")", "\n", "\n", "audio_activation", "=", "tf", ".", "matmul", "(", "audio_concat", ",", "audio_hidden_1", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "audio_activation", "=", "slim", ".", "batch_norm", "(", "\n", "audio_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"audio_activation_1_bn\"", ")", "\n", "", "audio_activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "audio_activation", ")", "\n", "\n", "audio_activation", "=", "tf", ".", "matmul", "(", "audio_activation", ",", "audio_hidden_2", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "audio_activation", "=", "slim", ".", "batch_norm", "(", "\n", "audio_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"audio_activation_2_bn\"", ")", "\n", "", "audio_activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "audio_activation", ")", "\n", "\n", "total_activation", "=", "tf", ".", "concat", "(", "[", "video_activation", ",", "audio_activation", "]", ",", "1", ")", "\n", "\n", "# Context Gating", "\n", "input_dim", "=", "total_activation", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "gating_weights", "=", "tf", ".", "get_variable", "(", "\"gating_weights\"", ",", "\n", "[", "input_dim", ",", "input_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "input_dim", ")", ")", ")", "\n", "\n", "gates", "=", "tf", ".", "matmul", "(", "total_activation", ",", "gating_weights", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "gates", "=", "slim", ".", "batch_norm", "(", "\n", "gates", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"gating_bn\"", ")", "\n", "", "else", ":", "\n", "            ", "gating_biases", "=", "tf", ".", "get_variable", "(", "\"gating_biases\"", ",", "\n", "[", "input_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "input_dim", ")", ")", ")", "\n", "gates", "+=", "gating_biases", "\n", "\n", "", "gates", "=", "tf", ".", "sigmoid", "(", "gates", ")", "\n", "activation", "=", "tf", ".", "multiply", "(", "total_activation", ",", "gates", ")", "\n", "\n", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"WillowMoeModel\"", ")", "\n", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "det_reg", "=", "det_reg", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.TriangulationRelationalModel.create_model": [[1512, 1631], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationEmbedding", "video_pooling_modules.TriangulationEmbedding", "rnn_modules.LstmLastHiddenModule", "rnn_modules.LstmLastHiddenModule", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "getattr", "getattr.create_model", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "rnn_modules.LstmLastHiddenModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "rnn_modules.LstmLastHiddenModule.forward", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape", "tensorflow.concat.get_shape", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "iterations", "\n", "random_frames", "=", "sample_random_frames", "or", "FLAGS", ".", "sample_random_frames", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "video_triangulation_anchor_size_v1", "\n", "audio_anchor_size", "=", "FLAGS", ".", "audio_triangulation_anchor_size_v1", "\n", "\n", "if", "random_frames", ":", "\n", "            ", "num_frames_2", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames_2", ",", "\n", "iterations", ")", "\n", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_t_emb", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "1024", ",", "\n", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_t_emb", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "128", ",", "\n", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "\n", "video_lstm", "=", "rnn_modules", ".", "LstmLastHiddenModule", "(", "lstm_size", "=", "1024", "*", "video_anchor_size", ",", "\n", "lstm_layers", "=", "1", ",", "\n", "output_dim", "=", "1024", "*", "video_anchor_size", ",", "\n", "num_frames", "=", "num_frames", ",", "\n", "scope_id", "=", "None", ")", "\n", "audio_lstm", "=", "rnn_modules", ".", "LstmLastHiddenModule", "(", "lstm_size", "=", "128", "*", "audio_anchor_size", ",", "\n", "lstm_layers", "=", "1", ",", "\n", "output_dim", "=", "128", "*", "audio_anchor_size", ",", "\n", "num_frames", "=", "num_frames", ",", "\n", "scope_id", "=", "None", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "reshaped_input", "=", "slim", ".", "batch_norm", "(", "\n", "reshaped_input", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"input_bn\"", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"video_t_emb\"", ")", ":", "\n", "            ", "t_emb_video", ",", "det_reg_v", "=", "video_t_emb", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * cluster_size)", "\n", "t_emb_video", "=", "tf", ".", "reshape", "(", "t_emb_video", ",", "[", "-", "1", ",", "max_frames", ",", "1024", "*", "video_anchor_size", "]", ")", "\n", "lstm_video_output", "=", "video_lstm", ".", "forward", "(", "t_emb_video", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_t_emb\"", ")", ":", "\n", "            ", "t_emb_audio", ",", "det_reg_a", "=", "audio_t_emb", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * cluster_size)", "\n", "t_emb_audio", "=", "tf", ".", "reshape", "(", "t_emb_audio", ",", "[", "-", "1", ",", "max_frames", ",", "128", "*", "audio_anchor_size", "]", ")", "\n", "lstm_audio_output", "=", "audio_lstm", ".", "forward", "(", "t_emb_audio", ")", "\n", "\n", "", "if", "det_reg_v", "is", "not", "None", "and", "det_reg_a", "is", "not", "None", ":", "\n", "            ", "det_reg", "=", "det_reg_a", "+", "det_reg_v", "\n", "", "else", ":", "\n", "            ", "det_reg", "=", "0", "\n", "\n", "", "lstm_output", "=", "tf", ".", "concat", "(", "[", "lstm_video_output", ",", "lstm_audio_output", "]", ",", "1", ")", "\n", "# -> batch_size * output_dim", "\n", "\n", "lstm_output_dim", "=", "lstm_output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "lstm_hidden_1", "=", "tf", ".", "get_variable", "(", "\"lstm_hidden_1\"", ",", "\n", "[", "lstm_output_dim", ",", "2048", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "2048", ")", ")", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "lstm_output", ",", "lstm_hidden_1", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"activation_1_bn\"", ")", "\n", "", "activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "activation", ")", "\n", "if", "is_training", ":", "\n", "            ", "activation", "=", "tf", ".", "nn", ".", "dropout", "(", "activation", ",", "keep_prob", "=", "0.5", ")", "\n", "\n", "", "lstm_hidden_2", "=", "tf", ".", "get_variable", "(", "\"lstm_hidden_2\"", ",", "\n", "[", "2048", ",", "2048", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "2048", ")", ")", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "activation", ",", "lstm_hidden_2", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"activation_2_bn\"", ")", "\n", "", "activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "activation", ")", "\n", "if", "is_training", ":", "\n", "            ", "activation", "=", "tf", ".", "nn", ".", "dropout", "(", "activation", ",", "keep_prob", "=", "0.5", ")", "\n", "\n", "", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"WillowMoeModel\"", ")", "\n", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "det_reg", "=", "det_reg", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.TembedModelV1.create_model": [[1654, 1810], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationEmbedding", "video_pooling_modules.TriangulationEmbedding", "aggregation_modules.SpocPoolingModule", "aggregation_modules.SpocPoolingModule", "video_pooling_modules.TriangulationTemporalEmbedding", "video_pooling_modules.TriangulationTemporalEmbedding", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames", "model_utils.SampleRandomSequence", "model_utils.SampleRandomSequence.get_shape().as_list", "model_utils.SampleRandomSequence.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "aggregation_modules.SpocPoolingModule.forward", "aggregation_modules.SpocPoolingModule.forward", "tensorflow.concat.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "aggregation_modules.SpocPoolingModule.forward", "aggregation_modules.SpocPoolingModule.forward", "tensorflow.concat.get_shape().as_list", "tensorflow.concat.get_shape().as_list", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "getattr.", "model_utils.SampleRandomSequence.get_shape", "model_utils.SampleRandomSequence.get_shape", "tensorflow.concat.get_shape", "tensorflow.concat.get_shape", "tensorflow.concat.get_shape", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomSequence", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "iterations", "\n", "random_frames", "=", "sample_random_frames", "or", "FLAGS", ".", "sample_random_frames", "\n", "gating", "=", "FLAGS", ".", "gating", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "tembed_v1_batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "tembed_v1_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "tembed_v1_audio_anchor_size", "\n", "video_concat_hidden_size", "=", "FLAGS", ".", "tembed_v1_video_concat_hidden_size", "\n", "audio_concat_hidden_size", "=", "FLAGS", ".", "tembed_v1_audio_concat_hidden_size", "\n", "full_concat_hidden_size", "=", "FLAGS", ".", "tembed_v1_full_concat_hidden_size", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "if", "random_frames", ":", "\n", "            ", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "\n", "num_frames", ",", "\n", "iterations", ")", "\n", "", "else", ":", "\n", "            ", "model_input", "=", "utils", ".", "SampleRandomSequence", "(", "model_input", ",", "\n", "num_frames", ",", "\n", "iterations", ")", "\n", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_t_emb", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "1024", ",", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_t_emb", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "128", ",", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "\n", "video_spoc_pooling", "=", "aggregation_modules", ".", "SpocPoolingModule", "(", "1024", ",", "max_frames", ")", "\n", "audio_spoc_pooling", "=", "aggregation_modules", ".", "SpocPoolingModule", "(", "128", ",", "max_frames", ")", "\n", "\n", "video_t_temp_emb", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "1024", ",", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_t_temp_emb", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "128", ",", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "reshaped_input", "=", "slim", ".", "batch_norm", "(", "\n", "reshaped_input", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"input_bn\"", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"video_t_emb\"", ")", ":", "\n", "            ", "t_emb_video", "=", "video_t_emb", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * cluster_size)", "\n", "t_emb_video", "=", "tf", ".", "reshape", "(", "t_emb_video", ",", "[", "-", "1", ",", "max_frames", ",", "1024", "*", "video_anchor_size", "]", ")", "\n", "t_temp_video", "=", "video_t_temp_emb", ".", "forward", "(", "t_emb_video", ")", "\n", "# -> batch_size x (max_frames - 1) x (feature_size * cluster_size)", "\n", "\n", "t_emb_video", "=", "video_spoc_pooling", ".", "forward", "(", "t_emb_video", ")", "\n", "t_temp_video", "=", "video_spoc_pooling", ".", "forward", "(", "t_temp_video", ")", "\n", "# -> batch_size x (feature_size * cluster_size)", "\n", "\n", "", "t_video_concat", "=", "tf", ".", "concat", "(", "[", "t_emb_video", ",", "t_temp_video", "]", ",", "1", ")", "\n", "# -> batch_size x (feature_size * cluster_size * 2)", "\n", "t_video_concat_dim", "=", "t_video_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "video_hidden_1", "=", "tf", ".", "get_variable", "(", "\"video_hidden_1\"", ",", "\n", "[", "t_video_concat_dim", ",", "video_concat_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "video_concat_hidden_size", ")", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "video_activation", "=", "tf", ".", "matmul", "(", "t_video_concat", ",", "video_hidden_1", ")", "\n", "video_activation", "=", "tf", ".", "nn", ".", "relu6", "(", "video_activation", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"audio_t_emb\"", ")", ":", "\n", "            ", "t_emb_audio", "=", "audio_t_emb", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * cluster_size)", "\n", "t_emb_audio", "=", "tf", ".", "reshape", "(", "t_emb_audio", ",", "[", "-", "1", ",", "max_frames", ",", "128", "*", "audio_anchor_size", "]", ")", "\n", "t_temp_audio", "=", "audio_t_temp_emb", ".", "forward", "(", "t_emb_audio", ")", "\n", "# -> batch_size x (max_frames - 1) x (feature_size * cluster_size)", "\n", "\n", "t_emb_audio", "=", "audio_spoc_pooling", ".", "forward", "(", "t_emb_audio", ")", "\n", "t_temp_audio", "=", "audio_spoc_pooling", ".", "forward", "(", "t_temp_audio", ")", "\n", "# -> batch_size x (feature_size * cluster_size)", "\n", "\n", "", "t_audio_concat", "=", "tf", ".", "concat", "(", "[", "t_emb_audio", ",", "t_temp_audio", "]", ",", "1", ")", "\n", "# -> batch_size x (feature_size * cluster_size * 2)", "\n", "t_audio_concat_dim", "=", "t_audio_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "audio_hidden_1", "=", "tf", ".", "get_variable", "(", "\"audio_hidden_1\"", ",", "\n", "[", "t_audio_concat_dim", ",", "audio_concat_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "audio_concat_hidden_size", ")", ")", ")", "\n", "audio_activation", "=", "tf", ".", "matmul", "(", "t_audio_concat", ",", "audio_hidden_1", ")", "\n", "audio_activation", "=", "tf", ".", "nn", ".", "relu6", "(", "audio_activation", ")", "\n", "\n", "video_audio_concat", "=", "tf", ".", "concat", "(", "[", "video_activation", ",", "audio_activation", "]", ",", "1", ")", "\n", "\n", "video_audio_concat_dim", "=", "video_audio_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "# -> batch_size x (feature_size * cluster_size)", "\n", "hidden1_weights", "=", "tf", ".", "get_variable", "(", "\"hidden_weights\"", ",", "\n", "[", "video_audio_concat_dim", ",", "full_concat_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "full_concat_hidden_size", ")", ")", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "video_audio_concat", ",", "hidden1_weights", ")", "\n", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"hidden1_bn\"", ")", "\n", "activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "activation", ")", "\n", "\n", "if", "gating", ":", "\n", "            ", "gating_weights", "=", "tf", ".", "get_variable", "(", "\"gating_weights_2\"", ",", "\n", "[", "full_concat_hidden_size", ",", "full_concat_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "full_concat_hidden_size", ")", ")", ")", "\n", "gates", "=", "tf", ".", "matmul", "(", "activation", ",", "gating_weights", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "                ", "gates", "=", "slim", ".", "batch_norm", "(", "\n", "gates", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"gating_bn\"", ")", "\n", "", "else", ":", "\n", "                ", "gating_biases", "=", "tf", ".", "get_variable", "(", "\"gating_biases\"", ",", "\n", "[", "full_concat_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "full_concat_hidden_size", ")", ")", ")", "\n", "gates", "+=", "gating_biases", "\n", "", "gates", "=", "tf", ".", "sigmoid", "(", "gates", ")", "\n", "activation", "=", "tf", ".", "multiply", "(", "activation", ",", "gates", ")", "\n", "\n", "", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"WillowMoeModel\"", ")", "\n", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.TembedModelV2.create_model": [[1833, 1986], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationEmbedding", "video_pooling_modules.TriangulationEmbedding", "aggregation_modules.SpocPoolingModule", "aggregation_modules.SpocPoolingModule", "video_pooling_modules.TriangulationTemporalEmbedding", "video_pooling_modules.TriangulationTemporalEmbedding", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames", "model_utils.SampleRandomSequence", "model_utils.SampleRandomSequence.get_shape().as_list", "model_utils.SampleRandomSequence.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "aggregation_modules.SpocPoolingModule.forward", "aggregation_modules.SpocPoolingModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "aggregation_modules.SpocPoolingModule.forward", "aggregation_modules.SpocPoolingModule.forward", "tensorflow.concat.get_shape().as_list", "tensorflow.concat.get_shape().as_list", "tensorflow.concat.get_shape().as_list", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "getattr.", "model_utils.SampleRandomSequence.get_shape", "model_utils.SampleRandomSequence.get_shape", "tensorflow.concat.get_shape", "tensorflow.concat.get_shape", "tensorflow.concat.get_shape", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomSequence", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "cluster_size", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "iterations", "\n", "random_frames", "=", "sample_random_frames", "or", "FLAGS", ".", "sample_random_frames", "\n", "gating", "=", "FLAGS", ".", "gating", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "tembed_v2_batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "tembed_v2_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "tembed_v2_audio_anchor_size", "\n", "distrib_concat_hidden_size", "=", "FLAGS", ".", "tembed_v2_distrib_concat_hidden_size", "\n", "temporal_concat_hidden_size", "=", "FLAGS", ".", "tembed_v2_temporal_concat_hidden_size", "\n", "full_concat_hidden_size", "=", "FLAGS", ".", "tembed_v2_full_concat_hidden_size", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "if", "random_frames", ":", "\n", "            ", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "\n", "iterations", ")", "\n", "", "else", ":", "\n", "            ", "model_input", "=", "utils", ".", "SampleRandomSequence", "(", "model_input", ",", "num_frames", ",", "\n", "iterations", ")", "\n", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_t_emb", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "1024", ",", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_t_emb", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "128", ",", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "\n", "video_spoc_pooling", "=", "aggregation_modules", ".", "SpocPoolingModule", "(", "1024", ",", "max_frames", ")", "\n", "audio_spoc_pooling", "=", "aggregation_modules", ".", "SpocPoolingModule", "(", "128", ",", "max_frames", ")", "\n", "\n", "video_t_temp_emb", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "1024", ",", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_t_temp_emb", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "128", ",", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "reshaped_input", "=", "slim", ".", "batch_norm", "(", "\n", "reshaped_input", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"input_bn\"", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"video_t_emb\"", ")", ":", "\n", "            ", "t_distrib_video", "=", "video_t_emb", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "t_distrib_video", "=", "tf", ".", "reshape", "(", "t_distrib_video", ",", "[", "-", "1", ",", "max_frames", ",", "1024", "*", "video_anchor_size", "]", ")", "\n", "t_temp_video", "=", "video_t_temp_emb", ".", "forward", "(", "t_distrib_video", ")", "\n", "# -> batch_size x (max_frames - 1) x (feature_size * anchor_size)", "\n", "\n", "t_distrib_video", "=", "video_spoc_pooling", ".", "forward", "(", "t_distrib_video", ")", "\n", "t_temp_video", "=", "video_spoc_pooling", ".", "forward", "(", "t_temp_video", ")", "\n", "# -> batch_size x (feature_size * cluster_size)", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_t_emb\"", ")", ":", "\n", "            ", "t_emb_audio", "=", "audio_t_emb", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * cluster_size)", "\n", "t_emb_audio", "=", "tf", ".", "reshape", "(", "t_emb_audio", ",", "[", "-", "1", ",", "max_frames", ",", "128", "*", "audio_anchor_size", "]", ")", "\n", "t_temp_audio", "=", "audio_t_temp_emb", ".", "forward", "(", "t_emb_audio", ")", "\n", "# -> batch_size x (max_frames - 1) x (feature_size * cluster_size)", "\n", "\n", "t_emb_audio", "=", "audio_spoc_pooling", ".", "forward", "(", "t_emb_audio", ")", "\n", "t_temp_audio", "=", "audio_spoc_pooling", ".", "forward", "(", "t_temp_audio", ")", "\n", "# -> batch_size x (feature_size * cluster_size)", "\n", "\n", "", "t_distrib_concat", "=", "tf", ".", "concat", "(", "[", "t_emb_video", ",", "t_emb_audio", "]", ",", "1", ")", "\n", "t_distrib_concat_dim", "=", "t_distrib_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "t_distrib_hidden", "=", "tf", ".", "get_variable", "(", "\"distrib_concat\"", ",", "\n", "[", "t_distrib_concat_dim", ",", "distrib_concat_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "distrib_concat_hidden_size", ")", ")", ")", "\n", "distrib_activation", "=", "tf", ".", "matmul", "(", "t_distrib_concat", ",", "t_distrib_hidden", ")", "\n", "distrib_activation", "=", "tf", ".", "nn", ".", "relu6", "(", "distrib_activation", ")", "\n", "\n", "t_temp_concat", "=", "tf", ".", "concat", "(", "[", "t_temp_video", ",", "t_temp_audio", "]", ",", "1", ")", "\n", "t_temp_concat_dim", "=", "t_temp_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "t_temp_hidden", "=", "tf", ".", "get_variable", "(", "\"temp_concat\"", ",", "\n", "[", "t_temp_concat_dim", ",", "temporal_concat_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "temporal_concat_hidden_size", ")", ")", ")", "\n", "temp_activation", "=", "tf", ".", "matmul", "(", "t_temp_concat", ",", "t_temp_hidden", ")", "\n", "temp_activation", "=", "tf", ".", "nn", ".", "relu6", "(", "temp_activation", ")", "\n", "\n", "t_concat", "=", "tf", ".", "concat", "(", "[", "distrib_activation", ",", "temp_activation", "]", ",", "1", ")", "\n", "t_concat_dim", "=", "t_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "concat_hidden_1", "=", "tf", ".", "get_variable", "(", "\"concat_hidden_1\"", ",", "\n", "[", "t_concat_dim", ",", "full_concat_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "full_concat_hidden_size", ")", ")", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "t_concat", ",", "concat_hidden_1", ")", "\n", "activation", "=", "tf", ".", "nn", ".", "relu6", "(", "activation", ")", "\n", "\n", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"hidden1_bn\"", ")", "\n", "activation", "=", "tf", ".", "nn", ".", "relu6", "(", "activation", ")", "\n", "\n", "if", "gating", ":", "\n", "            ", "gating_weights", "=", "tf", ".", "get_variable", "(", "\"gating_weights_2\"", ",", "\n", "[", "full_concat_hidden_size", ",", "full_concat_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "full_concat_hidden_size", ")", ")", ")", "\n", "gates", "=", "tf", ".", "matmul", "(", "activation", ",", "gating_weights", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "                ", "gates", "=", "slim", ".", "batch_norm", "(", "\n", "gates", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"gating_bn\"", ")", "\n", "", "else", ":", "\n", "                ", "gating_biases", "=", "tf", ".", "get_variable", "(", "\"gating_biases\"", ",", "\n", "[", "full_concat_hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "full_concat_hidden_size", ")", ")", ")", "\n", "gates", "+=", "gating_biases", "\n", "\n", "", "gates", "=", "tf", ".", "sigmoid", "(", "gates", ")", "\n", "activation", "=", "tf", ".", "multiply", "(", "activation", ",", "gates", ")", "\n", "\n", "", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"WillowMoeModel\"", ")", "\n", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.TriangulationModelV2.create_model": [[1998, 2192], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationEmbedding", "video_pooling_modules.TriangulationEmbedding", "aggregation_modules.SpocPoolingModule", "video_pooling_modules.TriangulationTemporalEmbedding", "video_pooling_modules.TriangulationTemporalEmbedding", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "getattr", "getattr.create_model", "model_input.get_shape().as_list", "model_input.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "aggregation_modules.SpocPoolingModule.forward", "aggregation_modules.SpocPoolingModule.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.TriangulationEmbedding.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.TriangulationTemporalEmbedding.forward", "aggregation_modules.SpocPoolingModule.forward", "aggregation_modules.SpocPoolingModule.forward", "aggregation_modules.SpocPoolingModule.forward.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "aggregation_modules.SpocPoolingModule.forward.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "aggregation_modules.SpocPoolingModule.forward.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "aggregation_modules.SpocPoolingModule.forward.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "getattr.", "model_input.get_shape", "model_input.get_shape", "aggregation_modules.SpocPoolingModule.forward.get_shape", "aggregation_modules.SpocPoolingModule.forward.get_shape", "aggregation_modules.SpocPoolingModule.forward.get_shape", "aggregation_modules.SpocPoolingModule.forward.get_shape", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "cluster_size", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "tembed_v3_batch_norm", "\n", "video_anchor_size", "=", "FLAGS", ".", "tembed_v4_video_anchor_size", "\n", "audio_anchor_size", "=", "FLAGS", ".", "tembed_v4_audio_anchor_size", "\n", "\n", "# Do not sub-sample frames in between.", "\n", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "# -> (batch_size * max_frames) x feature_size", "\n", "\n", "video_embedding", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "1024", ",", "\n", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_embedding", "=", "video_pooling_modules", ".", "TriangulationEmbedding", "(", "128", ",", "\n", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "\n", "mean_max_pool", "=", "aggregation_modules", ".", "SpocPoolingModule", "(", "l2_normalize", "=", "False", ")", "\n", "\n", "video_temp_embedding", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "1024", ",", "\n", "max_frames", ",", "\n", "video_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "audio_temp_embedding", "=", "video_pooling_modules", ".", "TriangulationTemporalEmbedding", "(", "128", ",", "\n", "max_frames", ",", "\n", "audio_anchor_size", ",", "\n", "add_batch_norm", ",", "\n", "is_training", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "reshaped_input", "=", "slim", ".", "batch_norm", "(", "\n", "reshaped_input", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"input_bn\"", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"video_t_emb\"", ")", ":", "\n", "            ", "v_distribution_embedding", "=", "video_embedding", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "# -> (batch_size * max_frames) x (1024 * anchor_size)", "\n", "v_distribution_embedding", "=", "tf", ".", "reshape", "(", "v_distribution_embedding", ",", "[", "-", "1", ",", "max_frames", ",", "1024", "*", "video_anchor_size", "]", ")", "\n", "v_temporal_embedding", "=", "video_temp_embedding", ".", "forward", "(", "v_distribution_embedding", ")", "\n", "# -> batch_size x (max_frames - 1) x (1024 * anchor_size)", "\n", "\n", "agg_v_temporal_embedding", "=", "mean_max_pool", ".", "forward", "(", "v_temporal_embedding", ")", "\n", "agg_v_distrib_embedding", "=", "mean_max_pool", ".", "forward", "(", "v_distribution_embedding", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_t_emb\"", ")", ":", "\n", "            ", "a_distribution_embedding", "=", "audio_embedding", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "# -> (batch_size * max_frames) x (128 * anchor_size)", "\n", "a_distribution_embedding", "=", "tf", ".", "reshape", "(", "a_distribution_embedding", ",", "[", "-", "1", ",", "max_frames", ",", "128", "*", "audio_anchor_size", "]", ")", "\n", "a_temporal_embedding", "=", "audio_temp_embedding", ".", "forward", "(", "a_distribution_embedding", ")", "\n", "# -> batch_size x (max_frames - 1) x (128 * cluster_size)", "\n", "\n", "agg_a_temporal_embedding", "=", "mean_max_pool", ".", "forward", "(", "a_temporal_embedding", ")", "\n", "agg_a_distrib_embedding", "=", "mean_max_pool", ".", "forward", "(", "a_distribution_embedding", ")", "\n", "\n", "# Aggregating video features.", "\n", "# 1. Temporal features.", "\n", "", "agg_v_temporal_embedding_dim", "=", "agg_v_temporal_embedding", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "video_temporal_hidden_weights", "=", "tf", ".", "get_variable", "(", "\"video_temporal_hidden\"", ",", "\n", "[", "agg_v_temporal_embedding_dim", ",", "1024", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "768", ")", ")", ")", "\n", "v_temp_activation", "=", "tf", ".", "matmul", "(", "agg_v_temporal_embedding", ",", "video_temporal_hidden_weights", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "v_temp_activation", "=", "slim", ".", "batch_norm", "(", "\n", "v_temp_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"v_temp_activation_bn\"", ")", "\n", "", "v_temp_activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "v_temp_activation", ")", "\n", "# if is_training:", "\n", "#     v_temp_activation = tf.nn.dropout(v_temp_activation, keep_prob=0.5)", "\n", "\n", "# 2. Distribution features.", "\n", "agg_v_distrib_embedding_dim", "=", "agg_v_distrib_embedding", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "video_distribution_hidden_weights", "=", "tf", ".", "get_variable", "(", "\"video_distribution_hidden\"", ",", "\n", "[", "agg_v_distrib_embedding_dim", ",", "1024", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "768", ")", ")", ")", "\n", "v_distrib_activation", "=", "tf", ".", "matmul", "(", "agg_v_distrib_embedding", ",", "video_distribution_hidden_weights", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "v_distrib_activation", "=", "slim", ".", "batch_norm", "(", "\n", "v_distrib_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"v_distrib_activation_bn\"", ")", "\n", "", "v_distrib_activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "v_distrib_activation", ")", "\n", "# if is_training:", "\n", "#     v_distrib_activation = tf.nn.dropout(v_distrib_activation, keep_prob=0.5)", "\n", "\n", "# Aggregating audio features.", "\n", "# 1. Temporal features.", "\n", "agg_a_temporal_embedding_dim", "=", "agg_a_temporal_embedding", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "audio_temporal_hidden_weights", "=", "tf", ".", "get_variable", "(", "\"audio_temporal_hidden\"", ",", "\n", "[", "agg_a_temporal_embedding_dim", ",", "128", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "128", ")", ")", ")", "\n", "a_temp_activation", "=", "tf", ".", "matmul", "(", "agg_a_temporal_embedding", ",", "audio_temporal_hidden_weights", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "a_temp_activation", "=", "slim", ".", "batch_norm", "(", "\n", "a_temp_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"a_temp_activation_bn\"", ")", "\n", "", "a_temp_activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "a_temp_activation", ")", "\n", "# if is_training:", "\n", "#     a_temp_activation = tf.nn.dropout(a_temp_activation, keep_prob=0.5)", "\n", "\n", "# 2. Distribution features.", "\n", "agg_a_distrib_embedding_dim", "=", "agg_a_distrib_embedding", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "audio_distribution_hidden_weights", "=", "tf", ".", "get_variable", "(", "\"audio_distribution_hidden\"", ",", "\n", "[", "agg_a_distrib_embedding_dim", ",", "128", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "128", ")", ")", ")", "\n", "a_distrib_activation", "=", "tf", ".", "matmul", "(", "agg_a_distrib_embedding", ",", "audio_distribution_hidden_weights", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "a_distrib_activation", "=", "slim", ".", "batch_norm", "(", "\n", "a_distrib_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"a_distrib_activation_bn\"", ")", "\n", "", "a_distrib_activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "a_distrib_activation", ")", "\n", "# if is_training:", "\n", "#     a_distrib_activation = tf.nn.dropout(a_distrib_activation, keep_prob=0.5)", "\n", "\n", "agg_video", "=", "tf", ".", "concat", "(", "[", "v_distrib_activation", ",", "v_temp_activation", "]", ",", "1", ")", "\n", "agg_audio", "=", "tf", ".", "concat", "(", "[", "a_distrib_activation", ",", "a_temp_activation", "]", ",", "1", ")", "\n", "\n", "agg_video_hidden_weights", "=", "tf", ".", "get_variable", "(", "\"aggregation_video_hidden\"", ",", "\n", "[", "2048", ",", "1024", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "1024", ")", ")", ")", "\n", "agg_audio_hidden_weights", "=", "tf", ".", "get_variable", "(", "\"aggregation_audio_hidden\"", ",", "\n", "[", "256", ",", "128", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "128", ")", ")", ")", "\n", "\n", "agg_video_activation", "=", "tf", ".", "matmul", "(", "agg_video", ",", "agg_video_hidden_weights", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "agg_video_activation", "=", "slim", ".", "batch_norm", "(", "\n", "agg_video_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"agg_video_activation_bn\"", ")", "\n", "", "agg_video_activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "agg_video_activation", ")", "\n", "# if is_training:", "\n", "#     agg_video_activation = tf.nn.dropout(agg_video_activation, keep_prob=0.5)", "\n", "\n", "agg_audio_activation", "=", "tf", ".", "matmul", "(", "agg_audio", ",", "agg_audio_hidden_weights", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "agg_audio_activation", "=", "slim", ".", "batch_norm", "(", "\n", "agg_audio_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"agg_audio_activation_bn\"", ")", "\n", "", "agg_audio_activation", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "agg_audio_activation", ")", "\n", "# if is_training:", "\n", "#     agg_audio_activation = tf.nn.dropout(agg_audio_activation, keep_prob=0.5)", "\n", "\n", "activation", "=", "tf", ".", "concat", "(", "[", "agg_video_activation", ",", "agg_audio_activation", "]", ",", "1", ")", "\n", "\n", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"NN\"", ")", "\n", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.NetVladV1.create_model": [[2224, 2378], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleUniformFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "frame_level_models.NetVLAD", "frame_level_models.NetVLAD", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleUniformFrames.get_shape().as_list", "model_utils.SampleUniformFrames.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "frame_level_models.NetVLAD.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "frame_level_models.NetVLAD.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "transformer_utils.TransformerEncoder", "transformer_utils.TransformerEncoder.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "transformer_utils.TransformerEncoder", "transformer_utils.TransformerEncoder.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.matrix_diag_part", "tensorflow.matrix_diag_part", "tensorflow.matrix_diag_part", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "getattr.", "model_utils.SampleUniformFrames.get_shape", "model_utils.SampleUniformFrames.get_shape", "tensorflow.concat.get_shape", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleUniformFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "cluster_size", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "iterations", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "netvlad_add_batch_norm", "\n", "random_frames", "=", "sample_random_frames", "or", "FLAGS", ".", "sample_random_frames", "\n", "cluster_size", "=", "cluster_size", "or", "FLAGS", ".", "netvlad_cluster_size", "\n", "hidden1_size", "=", "hidden_size", "or", "FLAGS", ".", "netvlad_hidden_size", "\n", "relu", "=", "FLAGS", ".", "netvlad_relu", "\n", "gating", "=", "FLAGS", ".", "gating", "\n", "remove_diag", "=", "FLAGS", ".", "gating_remove_diag", "\n", "\n", "\n", "#", "\n", "# New: sample frames uniformly", "\n", "#", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "# if random_frames:", "\n", "#     model_input = utils.SampleRandomFrames(model_input, num_frames,", "\n", "#                                            iterations)", "\n", "# else:", "\n", "#     model_input = utils.SampleRandomSequence(model_input, num_frames,", "\n", "#                                              iterations)", "\n", "model_input", "=", "utils", ".", "SampleUniformFrames", "(", "model_input", ",", "num_frames", ",", "iterations", ")", "# batch x frames x feature_size", "\n", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "# (batch * frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_NetVLAD", "=", "NetVLAD", "(", "1024", ",", "max_frames", ",", "cluster_size", ",", "\n", "add_batch_norm", ",", "is_training", ",", "\"netvlad_rgb_scope\"", ")", "\n", "audio_NetVLAD", "=", "NetVLAD", "(", "128", ",", "max_frames", ",", "cluster_size", "/", "4", ",", "\n", "add_batch_norm", ",", "is_training", ",", "\"netvlad_audio_scope\"", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "reshaped_input", "=", "slim", ".", "batch_norm", "(", "\n", "reshaped_input", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"input_bn\"", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"video_VLAD\"", ")", ":", "\n", "            ", "vlad_video", "=", "video_NetVLAD", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_VLAD\"", ")", ":", "\n", "            ", "vlad_audio", "=", "audio_NetVLAD", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "\n", "#", "\n", "# New: Compute attention based features, using NetVLAD global descriptors", "\n", "#", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"video_attention\"", ")", ":", "\n", "            ", "video_encoder_block", "=", "transformer_utils", ".", "TransformerEncoder", "(", "feature_size", "=", "1024", ",", "\n", "hidden_size", "=", "1024", ",", "\n", "num_heads", "=", "64", ",", "\n", "attention_dropout", "=", "0.1", ",", "\n", "ff_filter_size", "=", "4", "*", "1024", ",", "\n", "ff_relu_dropout", "=", "0.1", ",", "\n", "is_train", "=", "is_training", ",", "\n", "scope_id", "=", "\"encode1\"", ")", "\n", "vlad_video_attention", "=", "video_encoder_block", ".", "forward", "(", "vlad_video", ")", "\n", "vlad_video_attention", "=", "tf", ".", "reshape", "(", "vlad_video_attention", ",", "[", "-", "1", ",", "1024", "*", "cluster_size", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_attention\"", ")", ":", "\n", "            ", "audio_encoder_block", "=", "transformer_utils", ".", "TransformerEncoder", "(", "feature_size", "=", "128", ",", "\n", "hidden_size", "=", "128", ",", "\n", "num_heads", "=", "16", ",", "\n", "attention_dropout", "=", "0.1", ",", "\n", "ff_filter_size", "=", "4", "*", "128", ",", "\n", "ff_relu_dropout", "=", "0.1", ",", "\n", "is_train", "=", "is_training", ",", "\n", "scope_id", "=", "\"encode2\"", ")", "\n", "vlad_audio_attention", "=", "audio_encoder_block", ".", "forward", "(", "vlad_audio", ")", "\n", "vlad_audio_attention", "=", "tf", ".", "reshape", "(", "vlad_audio_attention", ",", "[", "-", "1", ",", "128", "*", "(", "cluster_size", "//", "4", ")", "]", ")", "\n", "\n", "#", "\n", "# New: Fuse attention-based video and audio features", "\n", "#", "\n", "", "vlad", "=", "tf", ".", "concat", "(", "[", "vlad_video_attention", ",", "vlad_audio_attention", "]", ",", "1", ")", "\n", "\n", "#", "\n", "# Project features to a lower space", "\n", "#", "\n", "vlad_dim", "=", "vlad", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "hidden1_weights", "=", "tf", ".", "get_variable", "(", "\"hidden1_weights\"", ",", "\n", "[", "vlad_dim", ",", "hidden1_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "cluster_size", ")", ")", ")", "\n", "\n", "activation", "=", "tf", ".", "matmul", "(", "vlad", ",", "hidden1_weights", ")", "\n", "\n", "if", "add_batch_norm", "and", "relu", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"hidden1_bn\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "hidden1_biases", "=", "tf", ".", "get_variable", "(", "\"hidden1_biases\"", ",", "\n", "[", "hidden1_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.01", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"hidden1_biases\"", ",", "hidden1_biases", ")", "\n", "activation", "+=", "hidden1_biases", "\n", "\n", "", "if", "relu", ":", "\n", "            ", "activation", "=", "tf", ".", "nn", ".", "relu6", "(", "activation", ")", "\n", "\n", "#", "\n", "# Perform context gating", "\n", "#", "\n", "", "if", "gating", ":", "\n", "            ", "gating_weights", "=", "tf", ".", "get_variable", "(", "\"gating_weights_2\"", ",", "\n", "[", "hidden1_size", ",", "hidden1_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "hidden1_size", ")", ")", ")", "\n", "gates", "=", "tf", ".", "matmul", "(", "activation", ",", "gating_weights", ")", "\n", "\n", "if", "remove_diag", ":", "\n", "# Removes diagonals coefficients", "\n", "                ", "diagonals", "=", "tf", ".", "matrix_diag_part", "(", "gating_weights", ")", "\n", "gates", "=", "gates", "-", "tf", ".", "multiply", "(", "diagonals", ",", "activation", ")", "\n", "\n", "", "if", "add_batch_norm", ":", "\n", "                ", "gates", "=", "slim", ".", "batch_norm", "(", "\n", "gates", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"gating_bn\"", ")", "\n", "", "else", ":", "\n", "                ", "gating_biases", "=", "tf", ".", "get_variable", "(", "\"gating_biases\"", ",", "\n", "[", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "feature_size", ")", ")", ")", "\n", "gates", "+=", "gating_biases", "\n", "\n", "", "gates", "=", "tf", ".", "sigmoid", "(", "gates", ")", "\n", "activation", "=", "tf", ".", "multiply", "(", "activation", ",", "gates", ")", "\n", "\n", "", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"MoeModel\"", ")", "\n", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.NetVladV2.create_model": [[2385, 2514], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleUniformFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.NetVladAttenCluster", "video_pooling_modules.NetVladAttenCluster", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleUniformFrames.get_shape().as_list", "model_utils.SampleUniformFrames.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.NetVladAttenCluster.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.NetVladAttenCluster.forward", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.matrix_diag_part", "tensorflow.matrix_diag_part", "tensorflow.matrix_diag_part", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "getattr.", "model_utils.SampleUniformFrames.get_shape", "model_utils.SampleUniformFrames.get_shape", "tensorflow.concat.get_shape", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleUniformFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "cluster_size", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "iterations", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "netvlad_add_batch_norm", "\n", "random_frames", "=", "sample_random_frames", "or", "FLAGS", ".", "sample_random_frames", "\n", "cluster_size", "=", "cluster_size", "or", "FLAGS", ".", "netvlad_cluster_size", "\n", "hidden1_size", "=", "hidden_size", "or", "FLAGS", ".", "netvlad_hidden_size", "\n", "relu", "=", "FLAGS", ".", "netvlad_relu", "\n", "gating", "=", "FLAGS", ".", "gating", "\n", "remove_diag", "=", "FLAGS", ".", "gating_remove_diag", "\n", "\n", "\n", "#", "\n", "# New: sample frames uniformly", "\n", "#", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "# if random_frames:", "\n", "#     model_input = utils.SampleRandomFrames(model_input, num_frames,", "\n", "#                                            iterations)", "\n", "# else:", "\n", "#     model_input = utils.SampleRandomSequence(model_input, num_frames,", "\n", "#                                              iterations)", "\n", "model_input", "=", "utils", ".", "SampleUniformFrames", "(", "model_input", ",", "num_frames", ",", "iterations", ")", "# batch x frames x feature_size", "\n", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "# (batch * frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "#", "\n", "# New: use of \"NetVladAttenCluster\"", "\n", "#", "\n", "video_NetVLAD", "=", "video_pooling_modules", ".", "NetVladAttenCluster", "(", "1024", ",", "max_frames", ",", "cluster_size", ",", "\n", "add_batch_norm", ",", "is_training", ",", "\"netvlad_rgb_scope\"", ")", "\n", "audio_NetVLAD", "=", "video_pooling_modules", ".", "NetVladAttenCluster", "(", "128", ",", "max_frames", ",", "cluster_size", "/", "4", ",", "\n", "add_batch_norm", ",", "is_training", ",", "\"netvlad_audio_scope\"", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "reshaped_input", "=", "slim", ".", "batch_norm", "(", "\n", "reshaped_input", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"input_bn\"", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"video_VLAD\"", ")", ":", "\n", "            ", "vlad_video", "=", "video_NetVLAD", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_VLAD\"", ")", ":", "\n", "            ", "vlad_audio", "=", "audio_NetVLAD", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "\n", "\n", "# Fuse video and audio features:", "\n", "", "vlad", "=", "tf", ".", "concat", "(", "[", "vlad_video", ",", "vlad_audio", "]", ",", "1", ")", "\n", "\n", "#", "\n", "# Project features to a lower space", "\n", "#", "\n", "vlad_dim", "=", "vlad", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "hidden1_weights", "=", "tf", ".", "get_variable", "(", "\"hidden1_weights\"", ",", "\n", "[", "vlad_dim", ",", "hidden1_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "cluster_size", ")", ")", ")", "\n", "\n", "activation", "=", "tf", ".", "matmul", "(", "vlad", ",", "hidden1_weights", ")", "\n", "\n", "if", "add_batch_norm", "and", "relu", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"hidden1_bn\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "hidden1_biases", "=", "tf", ".", "get_variable", "(", "\"hidden1_biases\"", ",", "\n", "[", "hidden1_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.01", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"hidden1_biases\"", ",", "hidden1_biases", ")", "\n", "activation", "+=", "hidden1_biases", "\n", "\n", "", "if", "relu", ":", "\n", "            ", "activation", "=", "tf", ".", "nn", ".", "relu6", "(", "activation", ")", "\n", "\n", "#", "\n", "# Perform context gating", "\n", "#", "\n", "", "if", "gating", ":", "\n", "            ", "gating_weights", "=", "tf", ".", "get_variable", "(", "\"gating_weights_2\"", ",", "\n", "[", "hidden1_size", ",", "hidden1_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "hidden1_size", ")", ")", ")", "\n", "gates", "=", "tf", ".", "matmul", "(", "activation", ",", "gating_weights", ")", "\n", "\n", "if", "remove_diag", ":", "\n", "# Removes diagonals coefficients", "\n", "                ", "diagonals", "=", "tf", ".", "matrix_diag_part", "(", "gating_weights", ")", "\n", "gates", "=", "gates", "-", "tf", ".", "multiply", "(", "diagonals", ",", "activation", ")", "\n", "\n", "", "if", "add_batch_norm", ":", "\n", "                ", "gates", "=", "slim", ".", "batch_norm", "(", "\n", "gates", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"gating_bn\"", ")", "\n", "", "else", ":", "\n", "                ", "gating_biases", "=", "tf", ".", "get_variable", "(", "\"gating_biases\"", ",", "\n", "[", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "feature_size", ")", ")", ")", "\n", "gates", "+=", "gating_biases", "\n", "\n", "", "gates", "=", "tf", ".", "sigmoid", "(", "gates", ")", "\n", "activation", "=", "tf", ".", "multiply", "(", "activation", ",", "gates", ")", "\n", "\n", "", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"MoeModel\"", ")", "\n", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.WillowModelReg.create_model": [[2518, 2636], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "video_pooling_modules.NetVladOrthoReg", "video_pooling_modules.NetVladOrthoReg", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames", "model_utils.SampleRandomSequence", "model_utils.SampleRandomSequence.get_shape().as_list", "model_utils.SampleRandomSequence.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.NetVladOrthoReg.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "video_pooling_modules.NetVladOrthoReg.forward", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.matrix_diag_part", "tensorflow.matrix_diag_part", "tensorflow.matrix_diag_part", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "getattr.", "model_utils.SampleRandomSequence.get_shape", "model_utils.SampleRandomSequence.get_shape", "tensorflow.concat.get_shape", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomSequence", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "cluster_size", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "iterations", "or", "FLAGS", ".", "iterations", "\n", "add_batch_norm", "=", "add_batch_norm", "or", "FLAGS", ".", "netvlad_add_batch_norm", "\n", "random_frames", "=", "sample_random_frames", "or", "FLAGS", ".", "sample_random_frames", "\n", "cluster_size", "=", "cluster_size", "or", "FLAGS", ".", "netvlad_cluster_size", "\n", "hidden1_size", "=", "hidden_size", "or", "FLAGS", ".", "netvlad_hidden_size", "\n", "relu", "=", "FLAGS", ".", "netvlad_relu", "\n", "gating", "=", "FLAGS", ".", "gating", "\n", "remove_diag", "=", "FLAGS", ".", "gating_remove_diag", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "if", "random_frames", ":", "\n", "            ", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "\n", "iterations", ")", "\n", "", "else", ":", "\n", "            ", "model_input", "=", "utils", ".", "SampleRandomSequence", "(", "model_input", ",", "num_frames", ",", "\n", "iterations", ")", "\n", "\n", "# model_input: batch_size x max_frames x feature_size", "\n", "", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# model_input: (batch_size * max_frames) x feature_size", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_NetVLAD", "=", "video_pooling_modules", ".", "NetVladOrthoReg", "(", "1024", ",", "max_frames", ",", "cluster_size", ",", "\n", "add_batch_norm", ",", "is_training", ",", "\n", "FLAGS", ".", "rgb_det_reg", ",", "\"netvlad_rgb_scope\"", ")", "\n", "audio_NetVLAD", "=", "video_pooling_modules", ".", "NetVladOrthoReg", "(", "128", ",", "max_frames", ",", "cluster_size", "/", "4", ",", "\n", "add_batch_norm", ",", "is_training", ",", "\n", "FLAGS", ".", "audio_det_reg", ",", "\"netvlad_audio_scope\"", ")", "\n", "if", "add_batch_norm", ":", "\n", "            ", "reshaped_input", "=", "slim", ".", "batch_norm", "(", "\n", "reshaped_input", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"input_bn\"", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"video_VLAD\"", ")", ":", "\n", "# (batch_size * max_frames) x 1024", "\n", "            ", "vlad_video", "=", "video_NetVLAD", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_VLAD\"", ")", ":", "\n", "            ", "vlad_audio", "=", "audio_NetVLAD", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "\n", "", "vlad", "=", "tf", ".", "concat", "(", "[", "vlad_video", ",", "vlad_audio", "]", ",", "1", ")", "\n", "\n", "vlad_dim", "=", "vlad", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "hidden1_weights", "=", "tf", ".", "get_variable", "(", "\"hidden1_weights\"", ",", "\n", "[", "vlad_dim", ",", "hidden1_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "cluster_size", ")", ")", ")", "\n", "\n", "activation", "=", "tf", ".", "matmul", "(", "vlad", ",", "hidden1_weights", ")", "\n", "\n", "if", "add_batch_norm", "and", "relu", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"hidden1_bn\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "hidden1_biases", "=", "tf", ".", "get_variable", "(", "\"hidden1_biases\"", ",", "\n", "[", "hidden1_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.01", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"hidden1_biases\"", ",", "hidden1_biases", ")", "\n", "activation", "+=", "hidden1_biases", "\n", "\n", "", "if", "relu", ":", "\n", "            ", "activation", "=", "tf", ".", "nn", ".", "relu6", "(", "activation", ")", "\n", "\n", "", "if", "gating", ":", "\n", "            ", "gating_weights", "=", "tf", ".", "get_variable", "(", "\"gating_weights_2\"", ",", "\n", "[", "hidden1_size", ",", "hidden1_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "hidden1_size", ")", ")", ")", "\n", "gates", "=", "tf", ".", "matmul", "(", "activation", ",", "gating_weights", ")", "\n", "\n", "if", "remove_diag", ":", "\n", "# Removes diagonals coefficients", "\n", "                ", "diagonals", "=", "tf", ".", "matrix_diag_part", "(", "gating_weights", ")", "\n", "gates", "=", "gates", "-", "tf", ".", "multiply", "(", "diagonals", ",", "activation", ")", "\n", "\n", "", "if", "add_batch_norm", ":", "\n", "                ", "gates", "=", "slim", ".", "batch_norm", "(", "\n", "gates", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"gating_bn\"", ")", "\n", "", "else", ":", "\n", "                ", "gating_biases", "=", "tf", ".", "get_variable", "(", "\"gating_biases\"", ",", "\n", "[", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "feature_size", ")", ")", ")", "\n", "gates", "+=", "gating_biases", "\n", "\n", "", "gates", "=", "tf", ".", "sigmoid", "(", "gates", ")", "\n", "activation", "=", "tf", ".", "multiply", "(", "activation", ",", "gates", ")", "\n", "\n", "", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"MoeModel\"", ")", "\n", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.NetVLADModelLF.create_model": [[2652, 2763], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "model_utils.SampleRandomFrames", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "fish_modules.LuckyFishModuleV2", "fish_modules.LuckyFishModuleV2", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "getattr", "getattr.create_model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "model_utils.SampleRandomFrames.get_shape().as_list", "model_utils.SampleRandomFrames.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "fish_modules.LuckyFishModuleV2.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "fish_modules.LuckyFishModuleV2.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "getattr.", "model_utils.SampleRandomFrames.get_shape", "model_utils.SampleRandomFrames.get_shape", "tensorflow.concat.get_shape", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "num_frames", ",", "\n", "iterations", "=", "None", ",", "\n", "add_batch_norm", "=", "None", ",", "\n", "sample_random_frames", "=", "None", ",", "\n", "cluster_size", "=", "None", ",", "\n", "hidden_size", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "iterations", "=", "30", "\n", "add_batch_norm", "=", "True", "\n", "cluster_size", "=", "256", "\n", "\n", "num_frames", "=", "tf", ".", "cast", "(", "tf", ".", "expand_dims", "(", "num_frames", ",", "1", ")", ",", "tf", ".", "float32", ")", "\n", "model_input", "=", "utils", ".", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "\n", "iterations", ")", "\n", "\n", "max_frames", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "feature_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "model_input", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "video_NetVLAD", "=", "fish_modules", ".", "LuckyFishModuleV2", "(", "feature_size", "=", "1024", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "cluster_size", "=", "256", ",", "\n", "add_batch_norm", "=", "True", ",", "\n", "shift_operation", "=", "False", ",", "\n", "dropout_rate", "=", "0.8", ",", "\n", "is_training", "=", "is_training", ")", "\n", "\n", "audio_NetVLAD", "=", "fish_modules", ".", "LuckyFishModuleV2", "(", "feature_size", "=", "128", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "cluster_size", "=", "32", ",", "\n", "add_batch_norm", "=", "True", ",", "\n", "dropout_rate", "=", "0.8", ",", "\n", "shift_operation", "=", "False", ",", "\n", "is_training", "=", "is_training", ")", "\n", "\n", "if", "add_batch_norm", ":", "# and not lightvlad:", "\n", "            ", "reshaped_input", "=", "slim", ".", "batch_norm", "(", "\n", "reshaped_input", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"input_bn\"", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"video_VLAD\"", ")", ":", "\n", "            ", "vlad_video", "=", "video_NetVLAD", ".", "forward", "(", "reshaped_input", "[", ":", ",", "0", ":", "1024", "]", ")", "\n", "vlad_video", "=", "tf", ".", "reshape", "(", "vlad_video", ",", "[", "-", "1", ",", "256", "*", "1024", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"audio_VLAD\"", ")", ":", "\n", "            ", "vlad_audio", "=", "audio_NetVLAD", ".", "forward", "(", "reshaped_input", "[", ":", ",", "1024", ":", "]", ")", "\n", "vlad_audio", "=", "tf", ".", "reshape", "(", "vlad_audio", ",", "[", "-", "1", ",", "32", "*", "128", "]", ")", "\n", "\n", "", "vlad", "=", "tf", ".", "concat", "(", "[", "vlad_video", ",", "vlad_audio", "]", ",", "1", ")", "\n", "\n", "vlad_dim", "=", "vlad", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "hidden1_weights", "=", "tf", ".", "get_variable", "(", "\"hidden1_weights\"", ",", "\n", "[", "vlad_dim", ",", "1024", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "cluster_size", ")", ")", ")", "\n", "\n", "activation", "=", "tf", ".", "matmul", "(", "vlad", ",", "hidden1_weights", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"hidden1_bn\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "hidden1_biases", "=", "tf", ".", "get_variable", "(", "\"hidden1_biases\"", ",", "\n", "[", "1024", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.01", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"hidden1_biases\"", ",", "hidden1_biases", ")", "\n", "activation", "+=", "hidden1_biases", "\n", "\n", "", "gating_weights", "=", "tf", ".", "get_variable", "(", "\"gating_weights_2\"", ",", "\n", "[", "1024", ",", "1024", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "1024", ")", ")", ")", "\n", "\n", "gates", "=", "tf", ".", "matmul", "(", "activation", ",", "gating_weights", ")", "\n", "\n", "if", "add_batch_norm", ":", "\n", "            ", "gates", "=", "slim", ".", "batch_norm", "(", "\n", "gates", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"gating_bn\"", ")", "\n", "", "else", ":", "\n", "            ", "gating_biases", "=", "tf", ".", "get_variable", "(", "\"gating_biases\"", ",", "\n", "[", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "feature_size", ")", ")", ")", "\n", "gates", "+=", "gating_biases", "\n", "\n", "", "gates", "=", "tf", ".", "sigmoid", "(", "gates", ")", "\n", "\n", "activation", "=", "tf", ".", "multiply", "(", "activation", ",", "gates", ")", "\n", "\n", "aggregated_model", "=", "getattr", "(", "video_level_models", ",", "\n", "\"MoeModel\"", ")", "\n", "\n", "return", "aggregated_model", "(", ")", ".", "create_model", "(", "\n", "model_input", "=", "activation", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "is_training", "=", "is_training", ",", "\n", "**", "unused_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.NetVLAD.__init__": [[2766, 2772], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "max_frames", ",", "cluster_size", ",", "add_batch_norm", ",", "is_training", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "add_batch_norm", "=", "add_batch_norm", "\n", "self", ".", "cluster_size", "=", "cluster_size", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.NetVLAD.forward": [[2773, 2825], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "reshaped_input", ")", ":", "\n", "\n", "        ", "cluster_weights", "=", "tf", ".", "get_variable", "(", "\"cluster_weights\"", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "feature_size", ")", ")", ")", "\n", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"cluster_weights\"", ",", "cluster_weights", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "reshaped_input", ",", "cluster_weights", ")", "\n", "\n", "if", "self", ".", "add_batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"cluster_bn\"", ")", "\n", "", "else", ":", "\n", "            ", "cluster_biases", "=", "tf", ".", "get_variable", "(", "\"cluster_biases\"", ",", "\n", "[", "self", ".", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "feature_size", ")", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"cluster_biases\"", ",", "cluster_biases", ")", "\n", "activation", "+=", "cluster_biases", "\n", "\n", "", "activation", "=", "tf", ".", "nn", ".", "softmax", "(", "activation", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"cluster_output\"", ",", "activation", ")", "\n", "\n", "activation", "=", "tf", ".", "reshape", "(", "activation", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "cluster_size", "]", ")", "\n", "\n", "a_sum", "=", "tf", ".", "reduce_sum", "(", "activation", ",", "-", "2", ",", "keep_dims", "=", "True", ")", "\n", "\n", "cluster_weights2", "=", "tf", ".", "get_variable", "(", "\"cluster_weights2\"", ",", "\n", "[", "1", ",", "self", ".", "feature_size", ",", "self", ".", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "feature_size", ")", ")", ")", "\n", "\n", "a", "=", "tf", ".", "multiply", "(", "a_sum", ",", "cluster_weights2", ")", "\n", "\n", "activation", "=", "tf", ".", "transpose", "(", "activation", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "reshaped_input", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "]", ")", "\n", "vlad", "=", "tf", ".", "matmul", "(", "activation", ",", "reshaped_input", ")", "\n", "vlad", "=", "tf", ".", "transpose", "(", "vlad", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "vlad", "=", "tf", ".", "subtract", "(", "vlad", ",", "a", ")", "\n", "\n", "vlad", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "vlad", ",", "1", ")", "\n", "\n", "vlad", "=", "tf", ".", "reshape", "(", "vlad", ",", "[", "-", "1", ",", "self", ".", "cluster_size", "*", "self", ".", "feature_size", "]", ")", "\n", "vlad", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "vlad", ",", "1", ")", "\n", "\n", "return", "vlad", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.LightVLAD.__init__": [[2828, 2834], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "max_frames", ",", "cluster_size", ",", "add_batch_norm", ",", "is_training", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "add_batch_norm", "=", "add_batch_norm", "\n", "self", ".", "cluster_size", "=", "cluster_size", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.frame_level_models.LightVLAD.forward": [[2835, 2878], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "reshaped_input", ")", ":", "\n", "\n", "        ", "cluster_weights", "=", "tf", ".", "get_variable", "(", "\"cluster_weights\"", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "feature_size", ")", ")", ")", "\n", "\n", "activation", "=", "tf", ".", "matmul", "(", "reshaped_input", ",", "cluster_weights", ")", "\n", "\n", "if", "self", ".", "add_batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"cluster_bn\"", ")", "\n", "", "else", ":", "\n", "            ", "cluster_biases", "=", "tf", ".", "get_variable", "(", "\"cluster_biases\"", ",", "\n", "[", "self", ".", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "feature_size", ")", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"cluster_biases\"", ",", "cluster_biases", ")", "\n", "activation", "+=", "cluster_biases", "\n", "\n", "", "activation", "=", "tf", ".", "nn", ".", "softmax", "(", "activation", ")", "\n", "\n", "activation", "=", "tf", ".", "reshape", "(", "activation", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "cluster_size", "]", ")", "\n", "\n", "activation", "=", "tf", ".", "transpose", "(", "activation", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "reshaped_input", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "]", ")", "\n", "vlad", "=", "tf", ".", "matmul", "(", "activation", ",", "reshaped_input", ")", "\n", "# batch x cluster x feature", "\n", "\n", "vlad", "=", "tf", ".", "transpose", "(", "vlad", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "# batch x cluster x feature", "\n", "\n", "vlad", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "vlad", ",", "1", ")", "\n", "\n", "vlad", "=", "tf", ".", "reshape", "(", "vlad", ",", "[", "-", "1", ",", "self", ".", "cluster_size", "*", "self", ".", "feature_size", "]", ")", "\n", "vlad", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "vlad", ",", "1", ")", "\n", "\n", "return", "vlad", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.__init__": [[64, 82], ["ValueError", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "top_n", "=", "None", ")", ":", "\n", "        ", "\"\"\"Construct an AveragePrecisionCalculator to calculate average precision.\n\n        This class is used to calculate the average precision for a single label.\n\n        Args:\n          top_n: A positive Integer specifying the average precision at n, or\n            None to use all provided data points.\n\n        Raises:\n          ValueError: An error occurred when the top_n is not a positive integer.\n        \"\"\"", "\n", "if", "not", "(", "(", "isinstance", "(", "top_n", ",", "int", ")", "and", "top_n", ">=", "0", ")", "or", "top_n", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"top_n must be a positive integer or None.\"", ")", "\n", "\n", "", "self", ".", "_top_n", "=", "top_n", "# average precision at n", "\n", "self", ".", "_total_positives", "=", "0", "# total number of positives have seen", "\n", "self", ".", "_heap", "=", "[", "]", "# max heap of (prediction, actual)", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.heap_size": [[83, 87], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "heap_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the heap size maintained in the class.\"\"\"", "\n", "return", "len", "(", "self", ".", "_heap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.num_accumulated_positives": [[88, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_accumulated_positives", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the number of positive samples that have been accumulated.\"\"\"", "\n", "return", "self", ".", "_total_positives", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.accumulate": [[93, 133], ["range", "len", "len", "ValueError", "numpy.size", "numpy.size", "ValueError", "numpy.where", "heapq.heappush", "isinstance", "len", "heapq.heappop", "heapq.heappush"], "methods", ["None"], ["", "def", "accumulate", "(", "self", ",", "predictions", ",", "actuals", ",", "num_positives", "=", "None", ")", ":", "\n", "        ", "\"\"\"Accumulate the predictions and their ground truth labels.\n\n        After the function call, we may call peek_ap_at_n to actually calculate\n        the average precision.\n        Note predictions and actuals must have the same shape.\n\n        Args:\n          predictions: a list storing the prediction scores.\n          actuals: a list storing the ground truth labels. Any value\n          larger than 0 will be treated as positives, otherwise as negatives.\n          num_positives = If the 'predictions' and 'actuals' inputs aren't complete,\n          then it's possible some true positives were missed in them. In that case,\n          you can provide 'num_positives' in order to accurately track recall.\n\n        Raises:\n          ValueError: An error occurred when the format of the input is not the\n          numpy 1-D array or the shape of predictions and actuals does not match.\n        \"\"\"", "\n", "if", "len", "(", "predictions", ")", "!=", "len", "(", "actuals", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"the shape of predictions and actuals does not match.\"", ")", "\n", "\n", "", "if", "not", "num_positives", "is", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "num_positives", ",", "numbers", ".", "Number", ")", "or", "num_positives", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"'num_positives' was provided but it wan't a nonzero number.\"", ")", "\n", "\n", "", "", "if", "not", "num_positives", "is", "None", ":", "\n", "            ", "self", ".", "_total_positives", "+=", "num_positives", "\n", "", "else", ":", "\n", "            ", "self", ".", "_total_positives", "+=", "numpy", ".", "size", "(", "numpy", ".", "where", "(", "actuals", ">", "0", ")", ")", "\n", "", "topk", "=", "self", ".", "_top_n", "\n", "heap", "=", "self", ".", "_heap", "\n", "\n", "for", "i", "in", "range", "(", "numpy", ".", "size", "(", "predictions", ")", ")", ":", "\n", "            ", "if", "topk", "is", "None", "or", "len", "(", "heap", ")", "<", "topk", ":", "\n", "                ", "heapq", ".", "heappush", "(", "heap", ",", "(", "predictions", "[", "i", "]", ",", "actuals", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "predictions", "[", "i", "]", ">", "heap", "[", "0", "]", "[", "0", "]", ":", "# heap[0] is the smallest", "\n", "                    ", "heapq", ".", "heappop", "(", "heap", ")", "\n", "heapq", ".", "heappush", "(", "heap", ",", "(", "predictions", "[", "i", "]", ",", "actuals", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.clear": [[134, 138], ["None"], "methods", ["None"], ["", "", "", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear the accumulated predictions.\"\"\"", "\n", "self", ".", "_heap", "=", "[", "]", "\n", "self", ".", "_total_positives", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.peek_ap_at_n": [[139, 156], ["numpy.array", "average_precision_calculator.AveragePrecisionCalculator.ap_at_n", "list", "zip"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.ap_at_n"], ["", "def", "peek_ap_at_n", "(", "self", ")", ":", "\n", "        ", "\"\"\"Peek the non-interpolated average precision at n.\n\n        Returns:\n          The non-interpolated average precision at n (default 0).\n          If n is larger than the length of the ranked list,\n          the average precision will be returned.\n        \"\"\"", "\n", "if", "self", ".", "heap_size", "<=", "0", ":", "\n", "            ", "return", "0", "\n", "", "predlists", "=", "numpy", ".", "array", "(", "list", "(", "zip", "(", "*", "self", ".", "_heap", ")", ")", ")", "\n", "\n", "ap", "=", "self", ".", "ap_at_n", "(", "predlists", "[", "0", "]", ",", "\n", "predlists", "[", "1", "]", ",", "\n", "n", "=", "self", ".", "_top_n", ",", "\n", "total_num_positives", "=", "self", ".", "_total_positives", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.ap": [[157, 178], ["average_precision_calculator.AveragePrecisionCalculator.ap_at_n"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.ap_at_n"], ["", "@", "staticmethod", "\n", "def", "ap", "(", "predictions", ",", "actuals", ")", ":", "\n", "        ", "\"\"\"Calculate the non-interpolated average precision.\n\n        Args:\n          predictions: a numpy 1-D array storing the sparse prediction scores.\n          actuals: a numpy 1-D array storing the ground truth labels. Any value\n          larger than 0 will be treated as positives, otherwise as negatives.\n\n        Returns:\n          The non-interpolated average precision at n.\n          If n is larger than the length of the ranked list,\n          the average precision will be returned.\n\n        Raises:\n          ValueError: An error occurred when the format of the input is not the\n          numpy 1-D array or the shape of predictions and actuals does not match.\n        \"\"\"", "\n", "return", "AveragePrecisionCalculator", ".", "ap_at_n", "(", "predictions", ",", "\n", "actuals", ",", "\n", "n", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.ap_at_n": [[179, 246], ["numpy.array", "numpy.array", "average_precision_calculator.AveragePrecisionCalculator._shuffle", "sorted", "len", "range", "len", "len", "ValueError", "range", "numpy.size", "min", "min", "ValueError", "len", "numpy.where", "isinstance"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator._shuffle"], ["", "@", "staticmethod", "\n", "def", "ap_at_n", "(", "predictions", ",", "actuals", ",", "n", "=", "20", ",", "total_num_positives", "=", "None", ")", ":", "\n", "        ", "\"\"\"Calculate the non-interpolated average precision.\n\n        Args:\n          predictions: a numpy 1-D array storing the sparse prediction scores.\n          actuals: a numpy 1-D array storing the ground truth labels. Any value\n          larger than 0 will be treated as positives, otherwise as negatives.\n          n: the top n items to be considered in ap@n.\n          total_num_positives : (optionally) you can specify the number of total\n            positive\n          in the list. If specified, it will be used in calculation.\n\n        Returns:\n          The non-interpolated average precision at n.\n          If n is larger than the length of the ranked list,\n          the average precision will be returned.\n\n        Raises:\n          ValueError: An error occurred when\n          1) the format of the input is not the numpy 1-D array;\n          2) the shape of predictions and actuals does not match;\n          3) the input n is not a positive integer.\n        \"\"\"", "\n", "if", "len", "(", "predictions", ")", "!=", "len", "(", "actuals", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"the shape of predictions and actuals does not match.\"", ")", "\n", "\n", "", "if", "n", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "n", ",", "int", ")", "or", "n", "<=", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"n must be 'None' or a positive integer.\"", "\n", "\" It was '%s'.\"", "%", "n", ")", "\n", "\n", "", "", "ap", "=", "0.0", "\n", "\n", "predictions", "=", "numpy", ".", "array", "(", "predictions", ")", "\n", "actuals", "=", "numpy", ".", "array", "(", "actuals", ")", "\n", "\n", "# add a shuffler to avoid overestimating the ap", "\n", "predictions", ",", "actuals", "=", "AveragePrecisionCalculator", ".", "_shuffle", "(", "predictions", ",", "\n", "actuals", ")", "\n", "sortidx", "=", "sorted", "(", "\n", "range", "(", "len", "(", "predictions", ")", ")", ",", "\n", "key", "=", "lambda", "k", ":", "predictions", "[", "k", "]", ",", "\n", "reverse", "=", "True", ")", "\n", "\n", "if", "total_num_positives", "is", "None", ":", "\n", "            ", "numpos", "=", "numpy", ".", "size", "(", "numpy", ".", "where", "(", "actuals", ">", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "numpos", "=", "total_num_positives", "\n", "\n", "", "if", "numpos", "==", "0", ":", "\n", "            ", "return", "0", "\n", "\n", "", "if", "n", "is", "not", "None", ":", "\n", "            ", "numpos", "=", "min", "(", "numpos", ",", "n", ")", "\n", "", "delta_recall", "=", "1.0", "/", "numpos", "\n", "poscount", "=", "0.0", "\n", "\n", "# calculate the ap", "\n", "r", "=", "len", "(", "sortidx", ")", "\n", "if", "n", "is", "not", "None", ":", "\n", "            ", "r", "=", "min", "(", "r", ",", "n", ")", "\n", "", "for", "i", "in", "range", "(", "r", ")", ":", "\n", "            ", "if", "actuals", "[", "sortidx", "[", "i", "]", "]", ">", "0", ":", "\n", "                ", "poscount", "+=", "1", "\n", "ap", "+=", "poscount", "/", "(", "i", "+", "1", ")", "*", "delta_recall", "\n", "", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator._shuffle": [[247, 254], ["random.seed", "random.sample", "range", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_shuffle", "(", "predictions", ",", "actuals", ")", ":", "\n", "        ", "random", ".", "seed", "(", "0", ")", "\n", "suffidx", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "predictions", ")", ")", ",", "len", "(", "predictions", ")", ")", "\n", "predictions", "=", "predictions", "[", "suffidx", "]", "\n", "actuals", "=", "actuals", "[", "suffidx", "]", "\n", "return", "predictions", ",", "actuals", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator._zero_one_normalize": [[255, 275], ["numpy.max", "numpy.min", "numpy.max", "numpy.min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_zero_one_normalize", "(", "predictions", ",", "epsilon", "=", "1e-7", ")", ":", "\n", "        ", "\"\"\"Normalize the predictions to the range between 0.0 and 1.0.\n\n        For some predictions like SVM predictions, we need to normalize them before\n        calculate the interpolated average precision. The normalization will not\n        change the rank in the original list and thus won't change the average\n        precision.\n\n        Args:\n          predictions: a numpy 1-D array storing the sparse prediction scores.\n          epsilon: a small constant to avoid denominator being zero.\n\n        Returns:\n          The normalized prediction.\n        \"\"\"", "\n", "denominator", "=", "numpy", ".", "max", "(", "predictions", ")", "-", "numpy", ".", "min", "(", "predictions", ")", "\n", "ret", "=", "(", "predictions", "-", "numpy", ".", "min", "(", "predictions", ")", ")", "/", "numpy", ".", "max", "(", "denominator", ",", "\n", "epsilon", ")", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.get_padding": [[24, 35], ["tensorflow.name_scope", "tensorflow.to_float", "tensorflow.equal"], "function", ["None"], ["def", "get_padding", "(", "x", ",", "padding_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return float tensor representing the padding values in x.\n      Args:\n        x: int tensor with any shape\n        padding_value: int value that\n      Returns:\n        flaot tensor with same shape as x containing values 0 or 1.\n          0 -> non-padding, 1 -> padding\n      \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"padding\"", ")", ":", "\n", "        ", "return", "tf", ".", "to_float", "(", "tf", ".", "equal", "(", "x", ",", "padding_value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.get_padding_bias": [[37, 53], ["tensorflow.name_scope", "module_utils.get_padding", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.get_padding"], ["", "", "def", "get_padding_bias", "(", "x", ")", ":", "\n", "    ", "\"\"\"Calculate bias tensor from padding values in tensor.\n      Bias tensor that is added to the pre-softmax multi-headed attention logits,\n      which has shape [batch_size, num_heads, length, length]. The tensor is zero at\n      non-padding locations, and -1e9 (negative infinity) at padding locations.\n      Args:\n        x: int tensor with shape [batch_size, length]\n      Returns:\n        Attention bias tensor of shape [batch_size, 1, 1, length].\n      \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"attention_bias\"", ")", ":", "\n", "        ", "padding", "=", "get_padding", "(", "x", ")", "\n", "attention_bias", "=", "padding", "*", "_NEG_INF", "\n", "attention_bias", "=", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "expand_dims", "(", "attention_bias", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "", "return", "attention_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.orthogonal_regularizer": [[55, 91], ["isinstance", "isinstance", "ValueError", "ValueError", "tensorflow.python.platform.tf_logging.info", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.nn.l2_normalize", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.eye", "tensorflow.subtract", "tensorflow.reduce_sum", "tensorflow.Print", "tensorflow.python.ops.standard_ops.multiply", "tensorflow.abs", "tensorflow.shape"], "function", ["None"], ["", "def", "orthogonal_regularizer", "(", "scale", ",", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\" Return a function that computes orthogonal regularization.\n    :param scale: A scalar multiplier `Tensor`. 0.0 disables the regularizer.\n    :param scope: An optional scope name.\n    :return: A function with signature `orthogonal_sum(weights)` that applies orthogonal regularization.\n    \"\"\"", "\n", "if", "isinstance", "(", "scale", ",", "numbers", ".", "Integral", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'scale cannot be an integer: %s'", "%", "(", "scale", ",", ")", ")", "\n", "", "if", "isinstance", "(", "scale", ",", "numbers", ".", "Real", ")", ":", "\n", "        ", "if", "scale", "<", "0.", ":", "\n", "            ", "raise", "ValueError", "(", "'Setting a scale less than 0 on a regularizer: %g.'", "%", "\n", "scale", ")", "\n", "", "if", "scale", "==", "0.", ":", "\n", "            ", "logging", ".", "info", "(", "'Scale of 0 disables regularizer.'", ")", "\n", "return", "lambda", "_", ":", "None", "\n", "\n", "", "", "def", "orthogonal_sum", "(", "weights", ")", ":", "\n", "        ", "\"\"\" Applies orthogonal regularization to weights. \"\"\"", "\n", "with", "ops", ".", "name_scope", "(", "scope", ",", "'orthogonal_regularizer'", ",", "[", "weights", "]", ")", "as", "name", ":", "\n", "            ", "tensor_scale", "=", "ops", ".", "convert_to_tensor", "(", "scale", ",", "\n", "dtype", "=", "weights", ".", "dtype", ".", "base_dtype", ",", "\n", "name", "=", "'scale'", ")", "\n", "\n", "norm_weights", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "weights", ",", "axis", "=", "1", ")", "\n", "anchor_weights_t", "=", "tf", ".", "transpose", "(", "norm_weights", ")", "\n", "det_reg", "=", "tf", ".", "matmul", "(", "anchor_weights_t", ",", "norm_weights", ")", "\n", "identity", "=", "tf", ".", "eye", "(", "tf", ".", "shape", "(", "det_reg", ")", "[", "0", "]", ")", "\n", "det_reg", "=", "tf", ".", "subtract", "(", "det_reg", ",", "identity", ")", "\n", "det_reg", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "det_reg", ")", ")", "\n", "\n", "# Print sum value before scaling", "\n", "det_reg", "=", "tf", ".", "Print", "(", "det_reg", ",", "[", "det_reg", "]", ",", "\"Orthogonal sum for \\\"{}\\\" :\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "return", "standard_ops", ".", "multiply", "(", "tensor_scale", ",", "det_reg", ",", "name", "=", "name", ")", "\n", "\n", "", "", "return", "orthogonal_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.reduce_var": [[93, 107], ["tensorflow.reduce_mean", "tensorflow.square", "tensorflow.reduce_mean"], "function", ["None"], ["", "def", "reduce_var", "(", "x", ",", "axis", "=", "None", ",", "keep_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\" Return variance of a tensor, alongside the specified axis.\n\n    Reference:\n    https://stackoverflow.com/questions/39354566/what-is-the-equivalent-of-np-std-in-tensorflow\n\n    :param x: Tensor or variable\n    :param axis: int\n    :param keep_dim: bool\n    :return: Tensor with the variance of elements of x\n    \"\"\"", "\n", "m", "=", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "axis", ",", "keep_dims", "=", "True", ")", "\n", "devs_squared", "=", "tf", ".", "square", "(", "x", "-", "m", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "devs_squared", ",", "axis", "=", "axis", ",", "keep_dims", "=", "keep_dim", ")", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.models.BaseModel.create_model": [[22, 24], ["NotImplementedError"], "methods", ["None"], ["def", "create_model", "(", "self", ",", "unused_model_input", ",", "**", "unused_params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.BaseReader.prepare_reader": [[63, 66], ["NotImplementedError"], "methods", ["None"], ["def", "prepare_reader", "(", "self", ",", "unused_filename_queue", ")", ":", "\n", "        ", "\"\"\"Create a thread for generating prediction and label tensors.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MAggregatedFeatureReader.__init__": [[76, 95], ["len", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", "=", "3862", ",", "\n", "feature_sizes", "=", "[", "1024", ",", "128", "]", ",", "\n", "feature_names", "=", "[", "\"mean_rgb\"", ",", "\"mean_audio\"", "]", ")", ":", "\n", "        ", "\"\"\"Construct a YT8MAggregatedFeatureReader.\n\n        Args:\n          num_classes: a positive integer for the number of classes.\n          feature_sizes: positive integer(s) for the feature dimensions as a list.\n          feature_names: the feature name(s) in the tensorflow record as a list.\n        \"\"\"", "\n", "\n", "assert", "len", "(", "feature_names", ")", "==", "len", "(", "feature_sizes", ")", ",", "\"length of feature_names (={}) != length of feature_sizes (={})\"", ".", "format", "(", "len", "(", "feature_names", ")", ",", "len", "(", "feature_sizes", ")", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feature_sizes", "=", "feature_sizes", "\n", "self", ".", "feature_names", "=", "feature_names", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MAggregatedFeatureReader.prepare_reader": [[96, 110], ["tensorflow.TFRecordReader", "tensorflow.TFRecordReader.read_up_to", "tensorflow.add_to_collection", "readers.YT8MAggregatedFeatureReader.prepare_serialized_examples"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.prepare_serialized_examples"], ["", "def", "prepare_reader", "(", "self", ",", "filename_queue", ",", "batch_size", "=", "1024", ")", ":", "\n", "        ", "\"\"\"Creates a single reader thread for pre-aggregated YouTube 8M Examples.\n\n        Args:\n          filename_queue: A tensorflow queue of filename locations.\n\n        Returns:\n          A tuple of video indexes, features, labels, and padding data.\n        \"\"\"", "\n", "reader", "=", "tf", ".", "TFRecordReader", "(", ")", "\n", "_", ",", "serialized_examples", "=", "reader", ".", "read_up_to", "(", "filename_queue", ",", "batch_size", ")", "\n", "\n", "tf", ".", "add_to_collection", "(", "\"serialized_examples\"", ",", "serialized_examples", ")", "\n", "return", "self", ".", "prepare_serialized_examples", "(", "serialized_examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MAggregatedFeatureReader.prepare_serialized_examples": [[111, 132], ["len", "range", "tensorflow.parse_example", "tensorflow.sparse_to_indicator", "tensorflow.sparse_to_indicator.set_shape", "tensorflow.concat", "len", "len", "len", "len", "tensorflow.FixedLenFeature", "tensorflow.VarLenFeature", "tensorflow.FixedLenFeature", "tensorflow.ones", "tensorflow.shape"], "methods", ["None"], ["", "def", "prepare_serialized_examples", "(", "self", ",", "serialized_examples", ")", ":", "\n", "# set the mapping from the fields to data types in the proto", "\n", "        ", "num_features", "=", "len", "(", "self", ".", "feature_names", ")", "\n", "assert", "num_features", ">", "0", ",", "\"self.feature_names is empty!\"", "\n", "assert", "len", "(", "self", ".", "feature_names", ")", "==", "len", "(", "self", ".", "feature_sizes", ")", ",", "\"length of feature_names (={}) != length of feature_sizes (={})\"", ".", "format", "(", "len", "(", "self", ".", "feature_names", ")", ",", "len", "(", "self", ".", "feature_sizes", ")", ")", "\n", "\n", "feature_map", "=", "{", "\"id\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "\"labels\"", ":", "tf", ".", "VarLenFeature", "(", "tf", ".", "int64", ")", "}", "\n", "for", "feature_index", "in", "range", "(", "num_features", ")", ":", "\n", "            ", "feature_map", "[", "self", ".", "feature_names", "[", "feature_index", "]", "]", "=", "tf", ".", "FixedLenFeature", "(", "\n", "[", "self", ".", "feature_sizes", "[", "feature_index", "]", "]", ",", "tf", ".", "float32", ")", "\n", "\n", "", "features", "=", "tf", ".", "parse_example", "(", "serialized_examples", ",", "features", "=", "feature_map", ")", "\n", "labels", "=", "tf", ".", "sparse_to_indicator", "(", "features", "[", "\"labels\"", "]", ",", "self", ".", "num_classes", ")", "\n", "labels", ".", "set_shape", "(", "[", "None", ",", "self", ".", "num_classes", "]", ")", "\n", "concatenated_features", "=", "tf", ".", "concat", "(", "[", "\n", "features", "[", "feature_name", "]", "for", "feature_name", "in", "self", ".", "feature_names", "]", ",", "1", ")", "\n", "\n", "return", "features", "[", "\"id\"", "]", ",", "concatenated_features", ",", "labels", ",", "tf", ".", "ones", "(", "[", "tf", ".", "shape", "(", "serialized_examples", ")", "[", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.__init__": [[143, 165], ["len", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", "=", "3862", ",", "\n", "feature_sizes", "=", "[", "1024", ",", "128", "]", ",", "\n", "feature_names", "=", "[", "\"rgb\"", ",", "\"audio\"", "]", ",", "\n", "max_frames", "=", "300", ")", ":", "\n", "        ", "\"\"\"Construct a YT8MFrameFeatureReader.\n\n        Args:\n          num_classes: a positive integer for the number of classes.\n          feature_sizes: positive integer(s) for the feature dimensions as a list.\n          feature_names: the feature name(s) in the tensorflow record as a list.\n          max_frames: the maximum number of frames to process.\n        \"\"\"", "\n", "\n", "assert", "len", "(", "feature_names", ")", "==", "len", "(", "feature_sizes", ")", ",", "\"length of feature_names (={}) != length of feature_sizes (={})\"", ".", "format", "(", "len", "(", "feature_names", ")", ",", "len", "(", "feature_sizes", ")", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feature_sizes", "=", "feature_sizes", "\n", "self", ".", "feature_names", "=", "feature_names", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.get_video_matrix": [[166, 195], ["tensorflow.reshape", "tensorflow.minimum", "utils.Dequantize", "readers.resize_axis", "tensorflow.cast", "tensorflow.decode_raw", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.Dequantize", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.resize_axis"], ["", "def", "get_video_matrix", "(", "self", ",", "\n", "features", ",", "\n", "feature_size", ",", "\n", "max_frames", ",", "\n", "max_quantized_value", ",", "\n", "min_quantized_value", ")", ":", "\n", "        ", "\"\"\"Decodes features from an input string and quantizes it.\n\n        Args:\n          features: raw feature values\n          feature_size: length of each frame feature vector\n          max_frames: number of frames (rows) in the output feature_matrix\n          max_quantized_value: the maximum of the quantized value.\n          min_quantized_value: the minimum of the quantized value.\n\n        Returns:\n          feature_matrix: matrix of all frame-features\n          num_frames: number of frames in the sequence\n        \"\"\"", "\n", "decoded_features", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "cast", "(", "tf", ".", "decode_raw", "(", "features", ",", "tf", ".", "uint8", ")", ",", "tf", ".", "float32", ")", ",", "\n", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "\n", "num_frames", "=", "tf", ".", "minimum", "(", "tf", ".", "shape", "(", "decoded_features", ")", "[", "0", "]", ",", "max_frames", ")", "\n", "feature_matrix", "=", "utils", ".", "Dequantize", "(", "decoded_features", ",", "\n", "max_quantized_value", ",", "\n", "min_quantized_value", ")", "\n", "feature_matrix", "=", "resize_axis", "(", "feature_matrix", ",", "0", ",", "max_frames", ")", "\n", "return", "feature_matrix", ",", "num_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.prepare_reader": [[196, 215], ["tensorflow.TFRecordReader", "tensorflow.TFRecordReader.read", "readers.YT8MFrameFeatureReader.prepare_serialized_examples"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.prepare_serialized_examples"], ["", "def", "prepare_reader", "(", "self", ",", "\n", "filename_queue", ",", "\n", "max_quantized_value", "=", "2", ",", "\n", "min_quantized_value", "=", "-", "2", ")", ":", "\n", "        ", "\"\"\"Creates a single reader thread for YouTube8M SequenceExamples.\n\n        Args:\n          filename_queue: A tensorflow queue of filename locations.\n          max_quantized_value: the maximum of the quantized value.\n          min_quantized_value: the minimum of the quantized value.\n\n        Returns:\n          A tuple of video indexes, video features, labels, and padding data.\n        \"\"\"", "\n", "reader", "=", "tf", ".", "TFRecordReader", "(", ")", "\n", "_", ",", "serialized_example", "=", "reader", ".", "read", "(", "filename_queue", ")", "\n", "\n", "return", "self", ".", "prepare_serialized_examples", "(", "serialized_example", ",", "\n", "max_quantized_value", ",", "min_quantized_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.prepare_serialized_examples": [[216, 272], ["tensorflow.parse_single_sequence_example", "tensorflow.cast", "len", "range", "tensorflow.minimum", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.sparse_to_dense", "len", "len", "len", "len", "readers.YT8MFrameFeatureReader.get_video_matrix", "tensorflow.assert_equal", "tensorflow.FixedLenFeature", "tensorflow.VarLenFeature", "tensorflow.FixedLenSequenceFeature"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.get_video_matrix"], ["", "def", "prepare_serialized_examples", "(", "self", ",", "serialized_example", ",", "\n", "max_quantized_value", "=", "2", ",", "min_quantized_value", "=", "-", "2", ")", ":", "\n", "\n", "        ", "contexts", ",", "features", "=", "tf", ".", "parse_single_sequence_example", "(", "\n", "serialized_example", ",", "\n", "context_features", "=", "{", "\"id\"", ":", "tf", ".", "FixedLenFeature", "(", "\n", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "\"labels\"", ":", "tf", ".", "VarLenFeature", "(", "tf", ".", "int64", ")", "}", ",", "\n", "sequence_features", "=", "{", "\n", "feature_name", ":", "tf", ".", "FixedLenSequenceFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "string", ")", "\n", "for", "feature_name", "in", "self", ".", "feature_names", "\n", "}", ")", "\n", "\n", "# read ground truth labels", "\n", "labels", "=", "(", "tf", ".", "cast", "(", "\n", "tf", ".", "sparse_to_dense", "(", "contexts", "[", "\"labels\"", "]", ".", "values", ",", "(", "self", ".", "num_classes", ",", ")", ",", "1", ",", "\n", "validate_indices", "=", "False", ")", ",", "\n", "tf", ".", "bool", ")", ")", "\n", "\n", "# loads (potentially) different types of features and concatenates them", "\n", "num_features", "=", "len", "(", "self", ".", "feature_names", ")", "\n", "assert", "num_features", ">", "0", ",", "\"No feature selected: feature_names is empty!\"", "\n", "\n", "assert", "len", "(", "self", ".", "feature_names", ")", "==", "len", "(", "self", ".", "feature_sizes", ")", ",", "\"length of feature_names (={}) != length of feature_sizes (={})\"", ".", "format", "(", "len", "(", "self", ".", "feature_names", ")", ",", "\n", "len", "(", "self", ".", "feature_sizes", ")", ")", "\n", "\n", "num_frames", "=", "-", "1", "# the number of frames in the video", "\n", "feature_matrices", "=", "[", "None", "]", "*", "num_features", "# an array of different features", "\n", "for", "feature_index", "in", "range", "(", "num_features", ")", ":", "\n", "            ", "feature_matrix", ",", "num_frames_in_this_feature", "=", "self", ".", "get_video_matrix", "(", "\n", "features", "[", "self", ".", "feature_names", "[", "feature_index", "]", "]", ",", "\n", "self", ".", "feature_sizes", "[", "feature_index", "]", ",", "\n", "self", ".", "max_frames", ",", "\n", "max_quantized_value", ",", "\n", "min_quantized_value", ")", "\n", "if", "num_frames", "==", "-", "1", ":", "\n", "                ", "num_frames", "=", "num_frames_in_this_feature", "\n", "", "else", ":", "\n", "                ", "tf", ".", "assert_equal", "(", "num_frames", ",", "num_frames_in_this_feature", ")", "\n", "\n", "", "feature_matrices", "[", "feature_index", "]", "=", "feature_matrix", "\n", "\n", "# cap the number of frames at self.max_frames", "\n", "", "num_frames", "=", "tf", ".", "minimum", "(", "num_frames", ",", "self", ".", "max_frames", ")", "\n", "\n", "# concatenate different features", "\n", "video_matrix", "=", "tf", ".", "concat", "(", "feature_matrices", ",", "1", ")", "\n", "\n", "# convert to batch format.", "\n", "batch_video_ids", "=", "tf", ".", "expand_dims", "(", "contexts", "[", "\"id\"", "]", ",", "0", ")", "\n", "batch_video_matrix", "=", "tf", ".", "expand_dims", "(", "video_matrix", ",", "0", ")", "\n", "batch_labels", "=", "tf", ".", "expand_dims", "(", "labels", ",", "0", ")", "\n", "batch_frames", "=", "tf", ".", "expand_dims", "(", "num_frames", ",", "0", ")", "\n", "\n", "return", "batch_video_ids", ",", "batch_video_matrix", ",", "batch_labels", ",", "batch_frames", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.resize_axis": [[23, 59], ["tensorflow.convert_to_tensor", "tensorflow.unstack", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.stack", "tensorflow.concat", "tf.convert_to_tensor.get_shape().as_list", "tf.concat.set_shape", "tensorflow.shape", "tensorflow.slice", "tensorflow.fill", "tf.convert_to_tensor.get_shape", "tensorflow.zeros_like", "tensorflow.stack", "tensorflow.cast"], "function", ["None"], ["def", "resize_axis", "(", "tensor", ",", "axis", ",", "new_size", ",", "fill_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"Truncates or pads a tensor to new_size on on a given axis.\n\n      Truncate or extend tensor such that tensor.shape[axis] == new_size. If the\n      size increases, the padding will be performed at the end, using fill_value.\n\n      Args:\n        tensor: The tensor to be resized.\n        axis: An integer representing the dimension to be sliced.\n        new_size: An integer or 0d tensor representing the new value for\n          tensor.shape[axis].\n        fill_value: Value to use to fill any new entries in the tensor. Will be\n          cast to the type of tensor.\n\n      Returns:\n        The resized tensor.\n      \"\"\"", "\n", "tensor", "=", "tf", ".", "convert_to_tensor", "(", "tensor", ")", "\n", "shape", "=", "tf", ".", "unstack", "(", "tf", ".", "shape", "(", "tensor", ")", ")", "\n", "\n", "pad_shape", "=", "shape", "[", ":", "]", "\n", "pad_shape", "[", "axis", "]", "=", "tf", ".", "maximum", "(", "0", ",", "new_size", "-", "shape", "[", "axis", "]", ")", "\n", "\n", "shape", "[", "axis", "]", "=", "tf", ".", "minimum", "(", "shape", "[", "axis", "]", ",", "new_size", ")", "\n", "shape", "=", "tf", ".", "stack", "(", "shape", ")", "\n", "\n", "resized", "=", "tf", ".", "concat", "(", "[", "\n", "tf", ".", "slice", "(", "tensor", ",", "tf", ".", "zeros_like", "(", "shape", ")", ",", "shape", ")", ",", "\n", "tf", ".", "fill", "(", "tf", ".", "stack", "(", "pad_shape", ")", ",", "tf", ".", "cast", "(", "fill_value", ",", "tensor", ".", "dtype", ")", ")", "\n", "]", ",", "axis", ")", "\n", "\n", "# Update shape.", "\n", "new_shape", "=", "tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "# A copy is being made.", "\n", "new_shape", "[", "axis", "]", "=", "new_size", "\n", "resized", ".", "set_shape", "(", "new_shape", ")", "\n", "return", "resized", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.export_model.ModelExporter.__init__": [[30, 39], ["tensorflow.Graph().as_default", "tensorflow.Graph().as_default", "export_model.ModelExporter.build_inputs_and_outputs", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.Graph", "tensorflow.Graph"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.export_model.ModelExporter.build_inputs_and_outputs"], ["    ", "def", "__init__", "(", "self", ",", "frame_features", ",", "model", ",", "reader", ")", ":", "\n", "        ", "self", ".", "frame_features", "=", "frame_features", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "reader", "=", "reader", "\n", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "graph", ":", "\n", "            ", "self", ".", "inputs", ",", "self", ".", "outputs", "=", "self", ".", "build_inputs_and_outputs", "(", ")", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "trainable_variables", "(", ")", ",", "sharded", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.export_model.ModelExporter.export_model": [[40, 61], ["export_model.ModelExporter.graph.as_default", "tensorflow.Session", "tensorflow.Session", "session.run", "export_model.ModelExporter.saver.restore", "tensorflow.python.saved_model.signature_def_utils.build_signature_def", "tensorflow.python.saved_model.signature_def_utils.build_signature_def", "tensorflow.python.saved_model.builder.SavedModelBuilder", "tensorflow.python.saved_model.builder.SavedModelBuilder", "tensorflow.python.saved_model.builder.SavedModelBuilder.add_meta_graph_and_variables", "tensorflow.python.saved_model.builder.SavedModelBuilder.save", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.ParameterServer.run"], ["", "", "def", "export_model", "(", "self", ",", "model_dir", ",", "global_step_val", ",", "last_checkpoint", ")", ":", "\n", "        ", "\"\"\"Exports the model so that it can used for batch predictions.\"\"\"", "\n", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "Session", "(", ")", "as", "session", ":", "\n", "                ", "session", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "saver", ".", "restore", "(", "session", ",", "last_checkpoint", ")", "\n", "\n", "signature", "=", "signature_def_utils", ".", "build_signature_def", "(", "\n", "inputs", "=", "self", ".", "inputs", ",", "\n", "outputs", "=", "self", ".", "outputs", ",", "\n", "method_name", "=", "signature_constants", ".", "PREDICT_METHOD_NAME", ")", "\n", "\n", "signature_map", "=", "{", "signature_constants", ".", "DEFAULT_SERVING_SIGNATURE_DEF_KEY", ":", "\n", "signature", "}", "\n", "\n", "model_builder", "=", "saved_model_builder", ".", "SavedModelBuilder", "(", "model_dir", ")", "\n", "model_builder", ".", "add_meta_graph_and_variables", "(", "session", ",", "\n", "tags", "=", "[", "tag_constants", ".", "SERVING", "]", ",", "\n", "signature_def_map", "=", "signature_map", ",", "\n", "clear_devices", "=", "True", ")", "\n", "model_builder", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.export_model.ModelExporter.build_inputs_and_outputs": [[62, 86], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.map_fn", "tensorflow.map_fn", "tensorflow.placeholder", "tensorflow.placeholder", "export_model.ModelExporter.build_prediction_graph", "tensorflow.python.saved_model.utils.build_tensor_info", "tensorflow.python.saved_model.utils.build_tensor_info", "tensorflow.python.saved_model.utils.build_tensor_info", "tensorflow.python.saved_model.utils.build_tensor_info", "tensorflow.python.saved_model.utils.build_tensor_info", "tensorflow.python.saved_model.utils.build_tensor_info", "tensorflow.python.saved_model.utils.build_tensor_info", "tensorflow.python.saved_model.utils.build_tensor_info", "export_model.ModelExporter.build_prediction_graph"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.export_model.ModelExporter.build_prediction_graph", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.export_model.ModelExporter.build_prediction_graph"], ["", "", "", "def", "build_inputs_and_outputs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frame_features", ":", "\n", "            ", "serialized_examples", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "fn", "=", "lambda", "x", ":", "self", ".", "build_prediction_graph", "(", "x", ")", "\n", "video_id_output", ",", "top_indices_output", ",", "top_predictions_output", "=", "(", "\n", "tf", ".", "map_fn", "(", "fn", ",", "serialized_examples", ",", "\n", "dtype", "=", "(", "tf", ".", "string", ",", "tf", ".", "int32", ",", "tf", ".", "float32", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "serialized_examples", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "video_id_output", ",", "top_indices_output", ",", "top_predictions_output", "=", "(", "\n", "self", ".", "build_prediction_graph", "(", "serialized_examples", ")", ")", "\n", "\n", "", "inputs", "=", "{", "\"example_bytes\"", ":", "\n", "saved_model_utils", ".", "build_tensor_info", "(", "serialized_examples", ")", "}", "\n", "\n", "outputs", "=", "{", "\n", "\"video_id\"", ":", "saved_model_utils", ".", "build_tensor_info", "(", "video_id_output", ")", ",", "\n", "\"class_indexes\"", ":", "saved_model_utils", ".", "build_tensor_info", "(", "top_indices_output", ")", ",", "\n", "\"predictions\"", ":", "saved_model_utils", ".", "build_tensor_info", "(", "top_predictions_output", ")", "}", "\n", "\n", "return", "inputs", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.export_model.ModelExporter.build_prediction_graph": [[87, 110], ["export_model.ModelExporter.reader.prepare_serialized_examples", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "len", "tensorflow.variable_scope", "tensorflow.variable_scope", "export_model.ModelExporter.model.create_model", "tensorflow.get_model_variables", "tensorflow.get_model_variables", "tensorflow.nn.top_k", "tensorflow.nn.top_k", "model_input_raw.get_shape", "tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.prepare_serialized_examples", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model"], ["", "def", "build_prediction_graph", "(", "self", ",", "serialized_examples", ")", ":", "\n", "        ", "video_id", ",", "model_input_raw", ",", "labels_batch", ",", "num_frames", "=", "(", "\n", "self", ".", "reader", ".", "prepare_serialized_examples", "(", "serialized_examples", ")", ")", "\n", "\n", "feature_dim", "=", "len", "(", "model_input_raw", ".", "get_shape", "(", ")", ")", "-", "1", "\n", "model_input", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "model_input_raw", ",", "feature_dim", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"tower\"", ")", ":", "\n", "            ", "result", "=", "self", ".", "model", ".", "create_model", "(", "\n", "model_input", ",", "\n", "num_frames", "=", "num_frames", ",", "\n", "vocab_size", "=", "self", ".", "reader", ".", "num_classes", ",", "\n", "labels", "=", "labels_batch", ",", "\n", "is_training", "=", "False", ")", "\n", "\n", "for", "variable", "in", "slim", ".", "get_model_variables", "(", ")", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "variable", ".", "op", ".", "name", ",", "variable", ")", "\n", "\n", "", "predictions", "=", "result", "[", "\"predictions\"", "]", "\n", "\n", "top_predictions", ",", "top_indices", "=", "tf", ".", "nn", ".", "top_k", "(", "predictions", ",", "\n", "_TOP_PREDICTIONS_IN_OUTPUT", ")", "\n", "", "return", "video_id", ",", "top_indices", ",", "top_predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.mean_average_precision_calculator.MeanAveragePrecisionCalculator.__init__": [[49, 71], ["range", "ValueError", "mean_average_precision_calculator.MeanAveragePrecisionCalculator._ap_calculators.append", "isinstance", "average_precision_calculator.AveragePrecisionCalculator"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "\"\"\"Construct a calculator to calculate the (macro) average precision.\n\n        Args:\n          num_class: A positive Integer specifying the number of classes.\n          top_n_array: A list of positive integers specifying the top n for each\n          class. The top n in each class will be used to calculate its average\n          precision at n.\n          The size of the array must be num_class.\n\n        Raises:\n          ValueError: An error occurred when num_class is not a positive integer;\n          or the top_n_array is not a list of positive integers.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "num_class", ",", "int", ")", "or", "num_class", "<=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"num_class must be a positive integer.\"", ")", "\n", "\n", "", "self", ".", "_ap_calculators", "=", "[", "]", "# member of AveragePrecisionCalculator", "\n", "self", ".", "_num_class", "=", "num_class", "# total number of classes", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "            ", "self", ".", "_ap_calculators", ".", "append", "(", "\n", "average_precision_calculator", ".", "AveragePrecisionCalculator", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.mean_average_precision_calculator.MeanAveragePrecisionCalculator.accumulate": [[72, 95], ["range", "len", "calculators[].accumulate"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.accumulate"], ["", "", "def", "accumulate", "(", "self", ",", "predictions", ",", "actuals", ",", "num_positives", "=", "None", ")", ":", "\n", "        ", "\"\"\"Accumulate the predictions and their ground truth labels.\n\n        Args:\n          predictions: A list of lists storing the prediction scores. The outer\n          dimension corresponds to classes.\n          actuals: A list of lists storing the ground truth labels. The dimensions\n          should correspond to the predictions input. Any value\n          larger than 0 will be treated as positives, otherwise as negatives.\n          num_positives: If provided, it is a list of numbers representing the\n          number of true positives for each class. If not provided, the number of\n          true positives will be inferred from the 'actuals' array.\n\n        Raises:\n          ValueError: An error occurred when the shape of predictions and actuals\n          does not match.\n        \"\"\"", "\n", "if", "not", "num_positives", ":", "\n", "            ", "num_positives", "=", "[", "None", "for", "i", "in", "predictions", ".", "shape", "[", "1", "]", "]", "\n", "\n", "", "calculators", "=", "self", ".", "_ap_calculators", "\n", "for", "i", "in", "range", "(", "len", "(", "predictions", ")", ")", ":", "\n", "            ", "calculators", "[", "i", "]", ".", "accumulate", "(", "predictions", "[", "i", "]", ",", "actuals", "[", "i", "]", ",", "num_positives", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.mean_average_precision_calculator.MeanAveragePrecisionCalculator.clear": [[96, 99], ["calculator.clear"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.clear"], ["", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "for", "calculator", "in", "self", ".", "_ap_calculators", ":", "\n", "            ", "calculator", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.mean_average_precision_calculator.MeanAveragePrecisionCalculator.is_empty": [[100, 103], ["range"], "methods", ["None"], ["", "", "def", "is_empty", "(", "self", ")", ":", "\n", "        ", "return", "(", "[", "calculator", ".", "heap_size", "for", "calculator", "in", "self", ".", "_ap_calculators", "]", "==", "\n", "[", "0", "for", "_", "in", "range", "(", "self", ".", "_num_class", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.mean_average_precision_calculator.MeanAveragePrecisionCalculator.peek_map_at_n": [[104, 114], ["mean_average_precision_calculator.MeanAveragePrecisionCalculator._ap_calculators[].peek_ap_at_n", "range"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.peek_ap_at_n"], ["", "def", "peek_map_at_n", "(", "self", ")", ":", "\n", "        ", "\"\"\"Peek the non-interpolated mean average precision at n.\n\n        Returns:\n          An array of non-interpolated average precision at n (default 0) for each\n          class.\n        \"\"\"", "\n", "aps", "=", "[", "self", ".", "_ap_calculators", "[", "i", "]", ".", "peek_ap_at_n", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_class", ")", "]", "\n", "return", "aps", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.OneFcAttention.__init__": [[23, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_frames", ",", "num_cluster", ",", "do_shift", "=", "True", ")", ":", "\n", "        ", "self", ".", "num_feature", "=", "num_features", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "num_cluster", "=", "num_cluster", "\n", "self", ".", "do_shift", "=", "do_shift", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.OneFcAttention.forward": [[29, 64], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.scalar_mul", "tensorflow.scalar_mul", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.scalar_mul", "tensorflow.scalar_mul", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "math.sqrt", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "attention_weights", "=", "tf", ".", "get_variable", "(", "\"one_fc_attention_weight\"", ",", "\n", "[", "self", ".", "num_feature", ",", "self", ".", "num_cluster", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "attention", "=", "tf", ".", "matmul", "(", "inputs", ",", "attention_weights", ")", "\n", "attention", "=", "tf", ".", "reshape", "(", "attention", ",", "[", "-", "1", ",", "self", ".", "num_frames", ",", "self", ".", "num_cluster", "]", ")", "\n", "attention", "=", "tf", ".", "scalar_mul", "(", "1", "/", "math", ".", "sqrt", "(", "self", ".", "num_feature", ")", ",", "attention", ")", "\n", "attention", "=", "tf", ".", "nn", ".", "softmax", "(", "attention", ",", "dim", "=", "1", ")", "\n", "\n", "reshaped_inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "num_frames", ",", "self", ".", "num_feature", "]", ")", "\n", "activation", "=", "tf", ".", "transpose", "(", "attention", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "activation", ",", "reshaped_inputs", ")", "\n", "# -> batch_size x num_cluster x feature_size", "\n", "\n", "reshaped_activation", "=", "tf", ".", "reshape", "(", "activation", ",", "[", "-", "1", ",", "self", ".", "num_feature", "]", ")", "\n", "\n", "if", "self", ".", "do_shift", ":", "\n", "            ", "alpha", "=", "tf", ".", "get_variable", "(", "\"alpha\"", ",", "\n", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1", ")", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "\"beta\"", ",", "\n", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.01", ")", ")", "\n", "\n", "reshaped_activation", "=", "alpha", "*", "reshaped_activation", "\n", "reshaped_activation", "=", "reshaped_activation", "+", "beta", "\n", "reshaped_activation", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "reshaped_activation", ",", "1", ")", "\n", "reshaped_activation", "=", "tf", ".", "scalar_mul", "(", "1", "/", "math", ".", "sqrt", "(", "self", ".", "num_cluster", ")", ",", "reshaped_activation", ")", "\n", "\n", "", "activation", "=", "tf", ".", "reshape", "(", "reshaped_activation", ",", "[", "-", "1", ",", "self", ".", "num_cluster", "*", "self", ".", "num_feature", "]", ")", "\n", "\n", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.MultiHeadAttention.__init__": [[67, 76], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_heads", ",", "num_units", ",", "max_frames", ",", "block_id", ")", ":", "\n", "        ", "\"\"\" Initialize MultiHeadAttention\n        :param num_heads: Number of self-attention modules\n        :param num_units: last dimension of Q, K, V\n        \"\"\"", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "block_id", "=", "block_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.MultiHeadAttention.self_attention": [[77, 101], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.cast", "tensorflow.cast", "tensorflow.divide", "tensorflow.divide", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.divide", "tensorflow.divide", "tensorflow.sqrt", "tensorflow.sqrt"], "methods", ["None"], ["", "def", "self_attention", "(", "self", ",", "inputs", ",", "scope_id", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"Block{}Layer{}\"", ".", "format", "(", "self", ".", "block_id", ",", "scope_id", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "# Calculate query, key, value pair", "\n", "            ", "Q", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "num_units", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "K", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "num_units", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "V", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "num_units", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "# Q, K, V: -> (batch_size * max_frames) x num_units", "\n", "\n", "# Reshape for self-attention calculation", "\n", "Q", "=", "tf", ".", "reshape", "(", "Q", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "num_units", "]", ")", "\n", "K", "=", "tf", ".", "reshape", "(", "K", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "num_units", "]", ")", "\n", "V", "=", "tf", ".", "reshape", "(", "V", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "num_units", "]", ")", "\n", "# Q, K, V: -> batch_size x max_frames x num_units", "\n", "\n", "# Self-attention", "\n", "attention", "=", "tf", ".", "matmul", "(", "Q", ",", "tf", ".", "transpose", "(", "K", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "# attention: -> batch_size x max_frames x max_frames", "\n", "float_cpy", "=", "tf", ".", "cast", "(", "self", ".", "num_units", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "attention", "=", "tf", ".", "divide", "(", "attention", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", "\n", "attention", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "divide", "(", "attention", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", ")", "\n", "\n", "output", "=", "tf", ".", "matmul", "(", "attention", ",", "V", ")", "\n", "# output: -> batch_size x max_frames x num_units", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.MultiHeadAttention.forward": [[102, 110], ["attention_modules.MultiHeadAttention.self_attention", "range", "tensorflow.identity", "tensorflow.identity", "attention_modules.MultiHeadAttention.self_attention", "tensorflow.concat", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionV2.self_attention", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionV2.self_attention"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "result", "=", "self", ".", "self_attention", "(", "inputs", ",", "scope_id", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_heads", ")", ":", "\n", "            ", "result", "=", "tf", ".", "identity", "(", "result", ")", "\n", "output", "=", "self", ".", "self_attention", "(", "inputs", ",", "scope_id", "=", "i", ")", "\n", "result", "=", "tf", ".", "concat", "(", "[", "result", ",", "output", "]", ",", "2", ")", "\n", "# result: -> batch_size x max_frames x (num_units * num_heads)", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.TransformerEncoderBlock.__init__": [[113, 125], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "is_training", ",", "num_units", ",", "max_frames", ",", "feature_size", ",", "num_heads", ",", "block_id", ")", ":", "\n", "        ", "\"\"\" Initialize Transformer Encoder block\n\n        :param is_training: bool\n        :param num_units: Number of hidden units of fully connected layers\n        \"\"\"", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "block_id", "=", "block_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.TransformerEncoderBlock.forward": [[126, 155], ["attention_modules.MultiHeadAttention", "attention_modules.MultiHeadAttention.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" One block of encoder containing one self-attention layer and one fully connected layer.\n        \"\"\"", "\n", "multi_head_layer", "=", "MultiHeadAttention", "(", "self", ".", "num_heads", ",", "self", ".", "num_units", ",", "self", ".", "max_frames", ",", "self", ".", "block_id", ")", "\n", "\n", "attention_output", "=", "multi_head_layer", ".", "forward", "(", "inputs", ")", "\n", "# output: -> batch_size x max_frames x (num_units * num_heads)", "\n", "\n", "attention_output", "=", "tf", ".", "reshape", "(", "attention_output", ",", "[", "-", "1", ",", "self", ".", "num_units", "*", "self", ".", "num_heads", "]", ")", "\n", "# output: -> (batch_size * max_frames) x (num_units * num_heads)", "\n", "\n", "attention_output", "=", "tf", ".", "layers", ".", "dense", "(", "attention_output", ",", "self", ".", "feature_size", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "# output: -> (batch_size * max_frames) x feature_size", "\n", "\n", "# Residual connection & Layer normalization", "\n", "attention_output", "+=", "inputs", "\n", "attention_output", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "attention_output", ")", "\n", "\n", "# 2 layers of 1 x 1 convolution", "\n", "output", "=", "tf", ".", "reshape", "(", "attention_output", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "]", ")", "\n", "output", "=", "tf", ".", "layers", ".", "conv1d", "(", "output", ",", "filters", "=", "4", "*", "self", ".", "num_units", ",", "kernel_size", "=", "1", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "use_bias", "=", "True", ")", "\n", "output", "=", "tf", ".", "layers", ".", "conv1d", "(", "output", ",", "filters", "=", "self", ".", "num_units", ",", "kernel_size", "=", "1", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ")", "\n", "\n", "# Residual connection & Layer normalization", "\n", "output", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "output", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "self", ".", "feature_size", "]", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.PnGateModule.__init__": [[158, 169], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "is_training", ",", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize class PnGateModule.\n        :param vocab_size: int\n            Size of the classes.\n        :param is_training: bool\n            True iff the model is being trained.\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "self", ".", "is_training", "=", "is_training", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.PnGateModule.forward": [[170, 198], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" PN Gate for correlation learning.\n        vocabularies -> P gate -> N gate -> output\n        :param inputs: batch_size x vocab_size\n        :return: batch_size x vocab_size\n        \"\"\"", "\n", "p_gating_weights", "=", "tf", ".", "get_variable", "(", "\"p_pn_gate\"", ",", "\n", "[", "self", ".", "vocab_size", ",", "self", ".", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "vocab_size", ")", ")", ")", "\n", "n_gating_weights", "=", "tf", ".", "get_variable", "(", "\"n_pn_gate\"", ",", "\n", "[", "self", ".", "vocab_size", ",", "self", ".", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "vocab_size", ")", ")", ")", "\n", "\n", "# batch_size x vocab_size, vocab_size x vocab_size --> batch_size x vocab_size", "\n", "p_activation", "=", "tf", ".", "matmul", "(", "inputs", ",", "p_gating_weights", ")", "\n", "p_activation", "=", "tf", ".", "nn", ".", "relu6", "(", "p_activation", ")", "\n", "p_gate", "=", "inputs", "+", "p_activation", "\n", "\n", "# batch_size x vocab_size, vocab_size x vocab_size --> batch_size x vocab_size", "\n", "n_activation", "=", "tf", ".", "matmul", "(", "p_gate", ",", "n_gating_weights", ")", "\n", "n_activation", "=", "-", "1", "*", "n_activation", "\n", "n_activation", "=", "tf", ".", "nn", ".", "relu6", "(", "n_activation", ")", "\n", "n_gate", "=", "p_gate", "+", "(", "-", "1", "*", "n_activation", ")", "\n", "\n", "output", "=", "tf", ".", "nn", ".", "softmax", "(", "n_gate", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.NpGateModule.__init__": [[201, 212], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "is_training", ",", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize class NpGateModule.\n        :param vocab_size: int\n            Size of the classes.\n        :param is_training: bool\n            True iff the model is being trained.\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "self", ".", "is_training", "=", "is_training", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.NpGateModule.forward": [[213, 241], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" PN Gate for correlation learning.\n        vocabularies -> N gate -> P gate -> output\n        :param inputs: batch_size x vocab_size\n        :return: batch_size x vocab_size\n        \"\"\"", "\n", "p_gating_weights", "=", "tf", ".", "get_variable", "(", "\"p_np_gate\"", ",", "\n", "[", "self", ".", "vocab_size", ",", "self", ".", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "vocab_size", ")", ")", ")", "\n", "n_gating_weights", "=", "tf", ".", "get_variable", "(", "\"n_np_gate\"", ",", "\n", "[", "self", ".", "vocab_size", ",", "self", ".", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "vocab_size", ")", ")", ")", "\n", "\n", "# batch_size x vocab_size, vocab_size x vocab_size --> batch_size x vocab_size", "\n", "n_activation", "=", "tf", ".", "matmul", "(", "inputs", ",", "n_gating_weights", ")", "\n", "n_activation", "=", "-", "1", "*", "n_activation", "\n", "n_activation", "=", "tf", ".", "nn", ".", "relu6", "(", "n_activation", ")", "\n", "n_gate", "=", "inputs", "+", "(", "-", "1", "*", "n_activation", ")", "\n", "\n", "# batch_size x vocab_size, vocab_size x vocab_size --> batch_size x vocab_size", "\n", "p_activation", "=", "tf", ".", "matmul", "(", "n_gate", ",", "p_gating_weights", ")", "\n", "p_activation", "=", "tf", ".", "nn", ".", "relu6", "(", "p_activation", ")", "\n", "p_gate", "=", "n_gate", "+", "p_activation", "\n", "output", "=", "tf", ".", "nn", ".", "softmax", "(", "p_gate", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.PGateModule.__init__": [[244, 255], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "is_training", ",", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize class PGateModule.\n        :param vocab_size: int\n            Size of the classes.\n        :param is_training: bool\n            True iff the model is being trained.\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "self", ".", "is_training", "=", "is_training", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.PGateModule.forward": [[256, 274], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu6", "tensorflow.nn.relu6", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" PN Gate for correlation learning.\n        vocabularies -> P gate -> output\n        :param inputs: batch_size x vocab_size\n        :return: batch_size x vocab_size\n        \"\"\"", "\n", "p_gating_weights", "=", "tf", ".", "get_variable", "(", "\"p_p_gate\"", ",", "\n", "[", "self", ".", "vocab_size", ",", "self", ".", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "vocab_size", ")", ")", ")", "\n", "\n", "# batch_size x vocab_size, vocab_size x vocab_size --> batch_size x vocab_size", "\n", "p_activation", "=", "tf", ".", "matmul", "(", "inputs", ",", "p_gating_weights", ")", "\n", "p_activation", "=", "tf", ".", "nn", ".", "relu6", "(", "p_activation", ")", "\n", "p_gate", "=", "inputs", "+", "p_activation", "\n", "output", "=", "tf", ".", "nn", ".", "softmax", "(", "p_gate", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.CorNNGateModule.__init__": [[277, 289], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "is_training", ",", "batch_norm", "=", "True", ",", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize a class CorNNGateModule.\n        :param vocab_size: int\n            Size of the classes.\n        :param is_training: bool\n        :param batch_norm: bool\n        :param scope_id: int\n        \"\"\"", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.CorNNGateModule.forward": [[290, 317], ["tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward function of CorNNGateModule.\n        :param inputs: batch_size x vocab_size\n        :return: batch_size x vocab_size\n        \"\"\"", "\n", "fc1_out", "=", "slim", ".", "fully_connected", "(", "\n", "inputs", "=", "inputs", ",", "\n", "num_outputs", "=", "self", ".", "vocab_size", ",", "\n", "activation_fn", "=", "nn", ".", "relu", ",", "\n", "scope", "=", "\"vocab_gate1_v1{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", "\n", ")", "\n", "\n", "fc2_out", "=", "slim", ".", "fully_connected", "(", "\n", "inputs", "=", "fc1_out", ",", "\n", "num_outputs", "=", "self", ".", "vocab_size", ",", "\n", "activation_fn", "=", "nn", ".", "relu", ",", "\n", "scope", "=", "\"vocab_gate2_v1{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", "\n", ")", "\n", "\n", "fc3_out", "=", "slim", ".", "fully_connected", "(", "\n", "inputs", "=", "fc2_out", ",", "\n", "num_outputs", "=", "self", ".", "vocab_size", ",", "\n", "activation_fn", "=", "nn", ".", "sigmoid", ",", "\n", "scope", "=", "\"vocab_gate3_v1{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", "\n", ")", "\n", "\n", "return", "fc3_out", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.ContextGateV1.__init__": [[324, 336], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "is_training", ",", "batch_norm", "=", "True", ",", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize a class ContextGateV1. The idea and implementation is adopted from WILLOW.\n        :param vocab_size: int\n            Size of the classes.\n        :param is_training: bool\n        :param batch_norm: bool\n        :param scope_id: int\n        \"\"\"", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.attention_modules.ContextGateV1.forward": [[337, 363], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.batch_norm", "tensorflow.batch_norm", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward function of ContextGateV1\n        :param inputs: batch_size x vocab_size\n        :return: batch_size x vocab_size\n        \"\"\"", "\n", "gating_weights", "=", "tf", ".", "get_variable", "(", "\"vocab_gate_v1{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "vocab_size", ",", "self", ".", "vocab_size", "]", ")", "\n", "\n", "# batch_size x vocab_size, vocab_size x vocab_size --> batch_size x vocab_size", "\n", "gates", "=", "tf", ".", "matmul", "(", "inputs", ",", "gating_weights", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "gates", "=", "slim", ".", "batch_norm", "(", "\n", "gates", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"vocab_gate_bn_v1{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ")", "\n", "\n", "", "gates", "=", "tf", ".", "sigmoid", "(", "gates", ")", "\n", "\n", "# batch_size x vocab_size, batch_size x vocab_size -> batch_size x vocab_size", "\n", "updated_inputs", "=", "tf", ".", "multiply", "(", "inputs", ",", "gates", ")", "\n", "\n", "# batch_size x vocab_size", "\n", "return", "updated_inputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomSequence": [[26, 52], ["tensorflow.tile", "tensorflow.maximum", "tensorflow.cast", "tensorflow.minimum", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.random_uniform", "tensorflow.cast", "tensorflow.range"], "function", ["None"], ["def", "SampleRandomSequence", "(", "model_input", ",", "num_frames", ",", "num_samples", ")", ":", "\n", "    ", "\"\"\" Samples a random sequence of frames of size num_samples.\n\n    Args:\n        model_input: A tensor of size batch_size x max_frames x feature_size\n        num_frames: A tensor of size batch_size x 1\n        num_samples: A scalar\n\n    Returns:\n        `model_input`: A tensor of size batch_size x num_samples x feature_size\n      \"\"\"", "\n", "\n", "batch_size", "=", "tf", ".", "shape", "(", "model_input", ")", "[", "0", "]", "\n", "frame_index_offset", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "num_samples", ")", ",", "0", ")", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "max_start_frame_index", "=", "tf", ".", "maximum", "(", "num_frames", "-", "num_samples", ",", "0", ")", "\n", "start_frame_index", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "multiply", "(", "\n", "tf", ".", "random_uniform", "(", "[", "batch_size", ",", "1", "]", ")", ",", "\n", "tf", ".", "cast", "(", "max_start_frame_index", "+", "1", ",", "tf", ".", "float32", ")", ")", ",", "tf", ".", "int32", ")", "\n", "frame_index", "=", "tf", ".", "minimum", "(", "start_frame_index", "+", "frame_index_offset", ",", "\n", "tf", ".", "cast", "(", "num_frames", "-", "1", ",", "tf", ".", "int32", ")", ")", "\n", "batch_index", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "batch_size", ")", ",", "1", ")", ",", "[", "1", ",", "num_samples", "]", ")", "\n", "index", "=", "tf", ".", "stack", "(", "[", "batch_index", ",", "frame_index", "]", ",", "2", ")", "\n", "return", "tf", ".", "gather_nd", "(", "model_input", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleRandomFrames": [[54, 74], ["tensorflow.cast", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.random_uniform", "tensorflow.tile", "tensorflow.range", "tensorflow.cast"], "function", ["None"], ["", "def", "SampleRandomFrames", "(", "model_input", ",", "num_frames", ",", "num_samples", ")", ":", "\n", "    ", "\"\"\" Samples a random set of frames of size num_samples.\n\n      Args:\n        model_input: A tensor of size batch_size x max_frames x feature_size\n        num_frames: A tensor of size batch_size x 1\n        num_samples: A scalar\n\n      Returns:\n        `model_input`: A tensor of size batch_size x num_samples x feature_size\n      \"\"\"", "\n", "batch_size", "=", "tf", ".", "shape", "(", "model_input", ")", "[", "0", "]", "\n", "frame_index", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "multiply", "(", "\n", "tf", ".", "random_uniform", "(", "[", "batch_size", ",", "num_samples", "]", ")", ",", "\n", "tf", ".", "tile", "(", "tf", ".", "cast", "(", "num_frames", ",", "tf", ".", "float32", ")", ",", "[", "1", ",", "num_samples", "]", ")", ")", ",", "tf", ".", "int32", ")", "\n", "batch_index", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "batch_size", ")", ",", "1", ")", ",", "[", "1", ",", "num_samples", "]", ")", "\n", "index", "=", "tf", ".", "stack", "(", "[", "batch_index", ",", "frame_index", "]", ",", "2", ")", "\n", "return", "tf", ".", "gather_nd", "(", "model_input", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.FramePooling": [[76, 100], ["tensorflow.reduce_mean", "tensorflow.reduce_max", "tensorflow.reshape", "ValueError", "frames.shape_as_list"], "function", ["None"], ["", "def", "FramePooling", "(", "frames", ",", "method", ",", "**", "unused_params", ")", ":", "\n", "    ", "\"\"\"Pools over the frames of a video.\n\n    Args:\n    frames: A tensor.\n    method: \"average\", \"max\", \"attention\", or \"none\".\n    Returns:\n    A tensor with shape [batch_size, feature_size] for average, max, or\n    attention pooling. A tensor with shape [batch_size*num_frames, feature_size]\n    for none pooling.\n\n    Raises:\n    ValueError: if method is other than \"average\", \"max\", \"attention\", or\n    \"none\".\n    \"\"\"", "\n", "if", "method", "==", "\"average\"", ":", "\n", "        ", "return", "tf", ".", "reduce_mean", "(", "frames", ",", "1", ")", "\n", "", "elif", "method", "==", "\"max\"", ":", "\n", "        ", "return", "tf", ".", "reduce_max", "(", "frames", ",", "1", ")", "\n", "", "elif", "method", "==", "\"none\"", ":", "\n", "        ", "feature_size", "=", "frames", ".", "shape_as_list", "(", ")", "[", "2", "]", "\n", "return", "tf", ".", "reshape", "(", "frames", ",", "[", "-", "1", ",", "feature_size", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unrecognized pooling method: %s\"", "%", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.model_utils.SampleUniformFrames": [[101, 123], ["tensorflow.expand_dims", "tensorflow.slice", "tensorflow.cast", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.linspace", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile", "tensorflow.range", "tensorflow.cast"], "function", ["None"], ["", "", "def", "SampleUniformFrames", "(", "model_input", ",", "num_frames", ",", "num_samples", ")", ":", "\n", "    ", "\"\"\" Uniformally samples (deterministically) a set of frames of size num_samples.\n\n          Args:\n            model_input: A tensor of size batch_size x max_frames x feature_size\n            num_frames: A tensor of size batch_size x 1\n            num_samples: A scalar\n\n          Returns:\n            `model_input`: A tensor of size batch_size x num_samples x feature_size\n          \"\"\"", "\n", "batch_size", "=", "tf", ".", "shape", "(", "model_input", ")", "[", "0", "]", "\n", "even_dist_samp", "=", "tf", ".", "expand_dims", "(", "tf", ".", "linspace", "(", "0.0", ",", "1.0", ",", "num_samples", "+", "1", ")", ",", "axis", "=", "0", ")", "\n", "even_dist_samp", "=", "tf", ".", "slice", "(", "even_dist_samp", ",", "[", "0", ",", "0", "]", ",", "[", "1", ",", "num_samples", "]", ")", "\n", "frame_index", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "multiply", "(", "\n", "tf", ".", "tile", "(", "even_dist_samp", ",", "[", "batch_size", ",", "1", "]", ")", ",", "\n", "tf", ".", "tile", "(", "tf", ".", "cast", "(", "num_frames", ",", "tf", ".", "float32", ")", ",", "[", "1", ",", "num_samples", "]", ")", ")", ",", "tf", ".", "int32", ")", "\n", "batch_index", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "batch_size", ")", ",", "1", ")", ",", "[", "1", ",", "num_samples", "]", ")", "\n", "index", "=", "tf", ".", "stack", "(", "[", "batch_index", ",", "frame_index", "]", ",", "2", ")", "\n", "return", "tf", ".", "gather_nd", "(", "model_input", ",", "index", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.modules.BaseModule.forward": [[22, 24], ["NotImplementedError"], "methods", ["None"], ["def", "forward", "(", "self", ",", "unused_module_input", ",", "**", "unused_params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval.find_class_by_name": [[67, 71], ["next", "getattr"], "function", ["None"], ["", "def", "find_class_by_name", "(", "name", ",", "modules", ")", ":", "\n", "    ", "\"\"\"Searches the provided modules for the named class and returns it.\"\"\"", "\n", "modules", "=", "[", "getattr", "(", "module", ",", "name", ",", "None", ")", "for", "module", "in", "modules", "]", "\n", "return", "next", "(", "a", "for", "a", "in", "modules", "if", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval.get_input_evaluation_tensors": [[73, 110], ["tensorflow.logging.info", "tensorflow.name_scope", "tensorflow.gfile.Glob", "tensorflow.logging.info", "tensorflow.train.string_input_producer", "tensorflow.train.batch_join", "IOError", "reader.prepare_reader", "str", "str", "range", "len"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.prepare_reader"], ["", "def", "get_input_evaluation_tensors", "(", "reader", ",", "\n", "data_pattern", ",", "\n", "batch_size", "=", "1024", ",", "\n", "num_readers", "=", "1", ")", ":", "\n", "    ", "\"\"\"Creates the section of the graph which reads the evaluation data.\n\n      Args:\n        reader: A class which parses the training data.\n        data_pattern: A 'glob' style path to the data files.\n        batch_size: How many examples to process at a time.\n        num_readers: How many I/O threads to use.\n\n      Returns:\n        A tuple containing the features tensor, labels tensor, and optionally a\n        tensor containing the number of frames per video. The exact dimensions\n        depend on the reader being used.\n\n      Raises:\n        IOError: If no files matching the given pattern were found.\n    \"\"\"", "\n", "logging", ".", "info", "(", "\"Using batch size of \"", "+", "str", "(", "batch_size", ")", "+", "\" for evaluation.\"", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"eval_input\"", ")", ":", "\n", "        ", "files", "=", "gfile", ".", "Glob", "(", "data_pattern", ")", "\n", "if", "not", "files", ":", "\n", "            ", "raise", "IOError", "(", "\"Unable to find the evaluation files.\"", ")", "\n", "", "logging", ".", "info", "(", "\"number of evaluation files: \"", "+", "str", "(", "len", "(", "files", ")", ")", ")", "\n", "filename_queue", "=", "tf", ".", "train", ".", "string_input_producer", "(", "\n", "files", ",", "shuffle", "=", "False", ",", "num_epochs", "=", "1", ")", "\n", "eval_data", "=", "[", "\n", "reader", ".", "prepare_reader", "(", "filename_queue", ")", "for", "_", "in", "range", "(", "num_readers", ")", "\n", "]", "\n", "return", "tf", ".", "train", ".", "batch_join", "(", "\n", "eval_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "capacity", "=", "3", "*", "batch_size", ",", "\n", "allow_smaller_final_batch", "=", "True", ",", "\n", "enqueue_many", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval.build_graph": [[112, 167], ["tensorflow.Variable", "eval.get_input_evaluation_tensors", "tensorflow.summary.histogram", "tensorflow.nn.l2_normalize", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "len", "tensorflow.variable_scope", "model.create_model", "tensorflow.summary.histogram", "tensorflow.cast", "tensorflow.summary.merge_all", "model_input_raw.get_shape", "model.create_model.keys", "label_loss_fn.calculate_loss"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.get_input_evaluation_tensors", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.losses.SoftmaxLoss.calculate_loss"], ["", "", "def", "build_graph", "(", "reader", ",", "\n", "model", ",", "\n", "eval_data_pattern", ",", "\n", "label_loss_fn", ",", "\n", "batch_size", "=", "1024", ",", "\n", "num_readers", "=", "1", ")", ":", "\n", "    ", "\"\"\"Creates the Tensorflow graph for evaluation.\n\n      Args:\n        reader: The data file reader. It should inherit from BaseReader.\n        model: The core model (e.g. logistic or neural net). It should inherit\n               from BaseModel.\n        eval_data_pattern: glob path to the evaluation data files.\n        label_loss_fn: What kind of loss to apply to the model. It should inherit\n                    from BaseLoss.\n        batch_size: How many examples to process at a time.\n        num_readers: How many threads to use for I/O operations.\n    \"\"\"", "\n", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "name", "=", "\"global_step\"", ")", "\n", "video_id_batch", ",", "model_input_raw", ",", "labels_batch", ",", "num_frames", "=", "get_input_evaluation_tensors", "(", "\n", "# pylint: disable=g-line-too-long", "\n", "reader", ",", "\n", "eval_data_pattern", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_readers", "=", "num_readers", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"model_input_raw\"", ",", "model_input_raw", ")", "\n", "\n", "feature_dim", "=", "len", "(", "model_input_raw", ".", "get_shape", "(", ")", ")", "-", "1", "\n", "\n", "# Normalize input features.", "\n", "model_input", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "model_input_raw", ",", "feature_dim", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"tower\"", ")", ":", "\n", "        ", "result", "=", "model", ".", "create_model", "(", "model_input", ",", "\n", "num_frames", "=", "num_frames", ",", "\n", "vocab_size", "=", "reader", ".", "num_classes", ",", "\n", "labels", "=", "labels_batch", ",", "\n", "is_training", "=", "False", ")", "\n", "predictions", "=", "result", "[", "\"predictions\"", "]", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"model_activations\"", ",", "predictions", ")", "\n", "if", "\"loss\"", "in", "result", ".", "keys", "(", ")", ":", "\n", "            ", "label_loss", "=", "result", "[", "\"loss\"", "]", "\n", "", "else", ":", "\n", "            ", "label_loss", "=", "label_loss_fn", ".", "calculate_loss", "(", "predictions", ",", "labels_batch", ")", "\n", "\n", "", "", "tf", ".", "add_to_collection", "(", "\"global_step\"", ",", "global_step", ")", "\n", "tf", ".", "add_to_collection", "(", "\"loss\"", ",", "label_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "\"predictions\"", ",", "predictions", ")", "\n", "tf", ".", "add_to_collection", "(", "\"input_batch\"", ",", "model_input", ")", "\n", "tf", ".", "add_to_collection", "(", "\"input_batch_raw\"", ",", "model_input_raw", ")", "\n", "tf", ".", "add_to_collection", "(", "\"video_id_batch\"", ",", "video_id_batch", ")", "\n", "tf", ".", "add_to_collection", "(", "\"num_frames\"", ",", "num_frames", ")", "\n", "tf", ".", "add_to_collection", "(", "\"labels\"", ",", "tf", ".", "cast", "(", "labels_batch", ",", "tf", ".", "float32", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "\"summary_op\"", ",", "tf", ".", "summary", ".", "merge_all", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval.get_latest_checkpoint": [[169, 184], ["tensorflow.python.lib.io.file_io.get_matching_files", "tensorflow.logging.debug", "os.path.join", "os.path.join", "sorted", "int", "[].split", "os.path.basename().split", "os.path.basename().split", "os.path.basename", "os.path.basename"], "function", ["None"], ["", "def", "get_latest_checkpoint", "(", ")", ":", "\n", "    ", "index_files", "=", "file_io", ".", "get_matching_files", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_dir", ",", "'model.ckpt-*.index'", ")", ")", "\n", "tf", ".", "logging", ".", "debug", "(", "\"Looking at {}\"", ".", "format", "(", "index_files", ")", ")", "\n", "\n", "# No files", "\n", "if", "not", "index_files", ":", "\n", "        ", "return", "None", "\n", "\n", "# Index file path with the maximum step size.", "\n", "", "latest_index_file", "=", "sorted", "(", "\n", "[", "(", "int", "(", "os", ".", "path", ".", "basename", "(", "f", ")", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", ",", "f", ")", "\n", "for", "f", "in", "index_files", "]", ")", "[", "-", "1", "]", "[", "1", "]", "\n", "\n", "# Chop off .index suffix and return", "\n", "return", "latest_index_file", "[", ":", "-", "6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval.evaluation_loop": [[186, 290], ["tensorflow.Session", "eval.get_latest_checkpoint", "print", "sess.run", "tensorflow.train.Coordinator", "tf.train.Coordinator.request_stop", "tf.train.Coordinator.join", "tensorflow.logging.info", "saver.restore", "saver.save", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.get_collection", "tensorflow.logging.info", "evl_metrics.clear", "os.path.basename().split", "os.path.basename().split", "os.path.join", "os.path.join", "tensorflow.local_variables_initializer", "threads.extend", "tf.train.Coordinator.should_stop", "time.time", "sess.run", "evl_metrics.accumulate", "utils.AddGlobalStepSummary", "tensorflow.logging.info", "tensorflow.logging.info", "evl_metrics.get", "summary_writer.add_summary", "utils.AddEpochSummary", "tensorflow.logging.info", "evl_metrics.clear", "tensorflow.logging.info", "tf.train.Coordinator.request_stop", "qr.create_threads", "time.time", "os.path.basename", "os.path.basename", "str"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.get_latest_checkpoint", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.ParameterServer.run", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.clear", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.ParameterServer.run", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.accumulate", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.AddGlobalStepSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.get", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.AddEpochSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.clear"], ["", "def", "evaluation_loop", "(", "video_id_batch", ",", "prediction_batch", ",", "label_batch", ",", "loss", ",", "\n", "summary_op", ",", "saver", ",", "summary_writer", ",", "evl_metrics", ",", "\n", "last_global_step_val", ")", ":", "\n", "    ", "\"\"\"Run the evaluation loop once.\n\n      Args:\n        video_id_batch: a tensor of video ids mini-batch.\n        prediction_batch: a tensor of predictions mini-batch.\n        label_batch: a tensor of label_batch mini-batch.\n        loss: a tensor of loss for the examples in the mini-batch.\n        summary_op: a tensor which runs the tensorboard summary operations.\n        saver: a tensorflow saver to restore the model.\n        summary_writer: a tensorflow summary_writer\n        evl_metrics: an EvaluationMetrics object.\n        last_global_step_val: the global step used in the previous evaluation.\n\n      Returns:\n        The global_step used in the latest model.\n    \"\"\"", "\n", "\n", "global_step_val", "=", "-", "1", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "latest_checkpoint", "=", "get_latest_checkpoint", "(", ")", "\n", "print", "(", "latest_checkpoint", ")", "\n", "if", "latest_checkpoint", ":", "\n", "            ", "logging", ".", "info", "(", "\"Loading checkpoint for eval: \"", "+", "latest_checkpoint", ")", "\n", "# Restores from checkpoint", "\n", "saver", ".", "restore", "(", "sess", ",", "latest_checkpoint", ")", "\n", "# Assuming model_checkpoint_path looks something like:", "\n", "# /my-favorite-path/yt8m_train/model.ckpt-0, extract global_step from it.", "\n", "global_step_val", "=", "os", ".", "path", ".", "basename", "(", "latest_checkpoint", ")", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", "\n", "\n", "# Save model", "\n", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_dir", ",", "\"inference_model\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\"No checkpoint file found.\"", ")", "\n", "return", "global_step_val", "\n", "\n", "", "if", "global_step_val", "==", "last_global_step_val", ":", "\n", "            ", "logging", ".", "info", "(", "\"skip this checkpoint global_step_val=%s \"", "\n", "\"(same as the previous one).\"", ",", "global_step_val", ")", "\n", "return", "global_step_val", "\n", "\n", "", "sess", ".", "run", "(", "[", "tf", ".", "local_variables_initializer", "(", ")", "]", ")", "\n", "\n", "# Start the queue runners.", "\n", "fetches", "=", "[", "video_id_batch", ",", "prediction_batch", ",", "label_batch", ",", "loss", ",", "summary_op", "]", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "try", ":", "\n", "            ", "threads", "=", "[", "]", "\n", "for", "qr", "in", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "QUEUE_RUNNERS", ")", ":", "\n", "                ", "threads", ".", "extend", "(", "qr", ".", "create_threads", "(", "\n", "sess", ",", "coord", "=", "coord", ",", "daemon", "=", "True", ",", "\n", "start", "=", "True", ")", ")", "\n", "", "logging", ".", "info", "(", "\"enter eval_once loop global_step_val = %s. \"", ",", "\n", "global_step_val", ")", "\n", "\n", "evl_metrics", ".", "clear", "(", ")", "\n", "\n", "examples_processed", "=", "0", "\n", "while", "not", "coord", ".", "should_stop", "(", ")", ":", "\n", "                ", "batch_start_time", "=", "time", ".", "time", "(", ")", "\n", "_", ",", "predictions_val", ",", "labels_val", ",", "loss_val", ",", "summary_val", "=", "sess", ".", "run", "(", "\n", "fetches", ")", "\n", "seconds_per_batch", "=", "time", ".", "time", "(", ")", "-", "batch_start_time", "\n", "example_per_second", "=", "labels_val", ".", "shape", "[", "0", "]", "/", "seconds_per_batch", "\n", "examples_processed", "+=", "labels_val", ".", "shape", "[", "0", "]", "\n", "\n", "iteration_info_dict", "=", "evl_metrics", ".", "accumulate", "(", "predictions_val", ",", "\n", "labels_val", ",", "loss_val", ")", "\n", "iteration_info_dict", "[", "\"examples_per_second\"", "]", "=", "example_per_second", "\n", "\n", "iterinfo", "=", "utils", ".", "AddGlobalStepSummary", "(", "\n", "summary_writer", ",", "\n", "global_step_val", ",", "\n", "iteration_info_dict", ",", "\n", "summary_scope", "=", "\"Eval\"", ")", "\n", "logging", ".", "info", "(", "\"examples_processed: %d | %s\"", ",", "examples_processed", ",", "\n", "iterinfo", ")", "\n", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", "as", "e", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "\"Done with batched inference. Now calculating global performance \"", "\n", "\"metrics.\"", ")", "\n", "# calculate the metrics for the entire epoch", "\n", "epoch_info_dict", "=", "evl_metrics", ".", "get", "(", ")", "\n", "epoch_info_dict", "[", "\"epoch_id\"", "]", "=", "global_step_val", "\n", "\n", "summary_writer", ".", "add_summary", "(", "summary_val", ",", "global_step_val", ")", "\n", "epochinfo", "=", "utils", ".", "AddEpochSummary", "(", "\n", "summary_writer", ",", "\n", "global_step_val", ",", "\n", "epoch_info_dict", ",", "\n", "summary_scope", "=", "\"Eval\"", ")", "\n", "logging", ".", "info", "(", "epochinfo", ")", "\n", "evl_metrics", ".", "clear", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "# pylint: disable=broad-except", "\n", "            ", "logging", ".", "info", "(", "\"Unexpected exception: \"", "+", "str", "(", "e", ")", ")", "\n", "coord", ".", "request_stop", "(", "e", ")", "\n", "\n", "", "coord", ".", "request_stop", "(", ")", "\n", "coord", ".", "join", "(", "threads", ",", "stop_grace_period_secs", "=", "10", ")", "\n", "\n", "return", "global_step_val", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval.evaluate": [[292, 350], ["tensorflow.set_random_seed", "os.path.join", "os.path.join", "json.loads", "tensorflow.python.lib.io.file_io.file_exists", "IOError", "tensorflow.python.lib.io.file_io.FileIO().read", "tensorflow.Graph().as_default", "utils.GetListOfFeatureNamesAndSizes", "eval.build_graph", "tensorflow.logging.info", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "eval_util.EvaluationMetrics", "readers.YT8MFrameFeatureReader", "readers.YT8MAggregatedFeatureReader", "eval.find_class_by_name", "eval.find_class_by_name", "IOError", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.global_variables", "eval.evaluation_loop", "tensorflow.python.lib.io.file_io.FileIO", "tensorflow.Graph", "tensorflow.get_default_graph"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.GetListOfFeatureNamesAndSizes", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.build_graph", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.find_class_by_name", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.find_class_by_name", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval.evaluation_loop"], ["", "", "def", "evaluate", "(", ")", ":", "\n", "    ", "tf", ".", "set_random_seed", "(", "0", ")", "# for reproducibility", "\n", "\n", "# Write json of flags", "\n", "model_flags_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_dir", ",", "\"model_flags.json\"", ")", "\n", "if", "not", "file_io", ".", "file_exists", "(", "model_flags_path", ")", ":", "\n", "        ", "raise", "IOError", "(", "(", "\"Cannot find file %s. Did you run train.py on the same \"", "\n", "\"--train_dir?\"", ")", "%", "model_flags_path", ")", "\n", "", "flags_dict", "=", "json", ".", "loads", "(", "file_io", ".", "FileIO", "(", "model_flags_path", ",", "mode", "=", "\"r\"", ")", ".", "read", "(", ")", ")", "\n", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "# convert feature_names and feature_sizes to lists of values", "\n", "        ", "feature_names", ",", "feature_sizes", "=", "utils", ".", "GetListOfFeatureNamesAndSizes", "(", "\n", "flags_dict", "[", "\"feature_names\"", "]", ",", "flags_dict", "[", "\"feature_sizes\"", "]", ")", "\n", "\n", "if", "flags_dict", "[", "\"frame_features\"", "]", ":", "\n", "            ", "reader", "=", "readers", ".", "YT8MFrameFeatureReader", "(", "feature_names", "=", "feature_names", ",", "\n", "feature_sizes", "=", "feature_sizes", ")", "\n", "", "else", ":", "\n", "            ", "reader", "=", "readers", ".", "YT8MAggregatedFeatureReader", "(", "feature_names", "=", "feature_names", ",", "\n", "feature_sizes", "=", "feature_sizes", ")", "\n", "\n", "", "model", "=", "find_class_by_name", "(", "flags_dict", "[", "\"model\"", "]", ",", "\n", "[", "frame_level_models", ",", "video_level_models", "]", ")", "(", ")", "\n", "label_loss_fn", "=", "find_class_by_name", "(", "flags_dict", "[", "\"label_loss\"", "]", ",", "[", "losses", "]", ")", "(", ")", "\n", "\n", "if", "FLAGS", ".", "eval_data_pattern", "is", "\"\"", ":", "\n", "            ", "raise", "IOError", "(", "\"'eval_data_pattern' was not specified. \"", "+", "\n", "\"Nothing to evaluate.\"", ")", "\n", "\n", "", "build_graph", "(", "\n", "reader", "=", "reader", ",", "\n", "model", "=", "model", ",", "\n", "eval_data_pattern", "=", "FLAGS", ".", "eval_data_pattern", ",", "\n", "label_loss_fn", "=", "label_loss_fn", ",", "\n", "num_readers", "=", "FLAGS", ".", "num_readers", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ")", "\n", "logging", ".", "info", "(", "\"built evaluation graph\"", ")", "\n", "video_id_batch", "=", "tf", ".", "get_collection", "(", "\"video_id_batch\"", ")", "[", "0", "]", "\n", "prediction_batch", "=", "tf", ".", "get_collection", "(", "\"predictions\"", ")", "[", "0", "]", "\n", "label_batch", "=", "tf", ".", "get_collection", "(", "\"labels\"", ")", "[", "0", "]", "\n", "loss", "=", "tf", ".", "get_collection", "(", "\"loss\"", ")", "[", "0", "]", "\n", "summary_op", "=", "tf", ".", "get_collection", "(", "\"summary_op\"", ")", "[", "0", "]", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ")", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "\n", "FLAGS", ".", "train_dir", ",", "graph", "=", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "\n", "evl_metrics", "=", "eval_util", ".", "EvaluationMetrics", "(", "reader", ".", "num_classes", ",", "FLAGS", ".", "top_k", ")", "\n", "\n", "last_global_step_val", "=", "-", "1", "\n", "while", "True", ":", "\n", "            ", "last_global_step_val", "=", "evaluation_loop", "(", "video_id_batch", ",", "prediction_batch", ",", "\n", "label_batch", ",", "loss", ",", "summary_op", ",", "\n", "saver", ",", "summary_writer", ",", "evl_metrics", ",", "\n", "last_global_step_val", ")", "\n", "if", "FLAGS", ".", "run_once", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval.main": [[352, 356], ["tensorflow.logging.set_verbosity", "print", "eval.evaluate"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.evaluate"], ["", "", "", "", "def", "main", "(", "unused_argv", ")", ":", "\n", "    ", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "print", "(", "\"tensorflow version: %s\"", "%", "tf", ".", "__version__", ")", "\n", "evaluate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.inference.format_lines": [[88, 97], ["len", "range", "sorted", "numpy.argpartition", "video_ids[].decode"], "function", ["None"], ["", "def", "format_lines", "(", "video_ids", ",", "predictions", ",", "top_k", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "video_ids", ")", "\n", "for", "video_index", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "top_indices", "=", "numpy", ".", "argpartition", "(", "predictions", "[", "video_index", "]", ",", "-", "top_k", ")", "[", "-", "top_k", ":", "]", "\n", "line", "=", "[", "(", "class_index", ",", "predictions", "[", "video_index", "]", "[", "class_index", "]", ")", "\n", "for", "class_index", "in", "top_indices", "]", "\n", "line", "=", "sorted", "(", "line", ",", "key", "=", "lambda", "p", ":", "-", "p", "[", "1", "]", ")", "\n", "yield", "video_ids", "[", "video_index", "]", ".", "decode", "(", "'utf-8'", ")", "+", "\",\"", "+", "\" \"", ".", "join", "(", "\n", "\"%i %g\"", "%", "(", "label", ",", "score", ")", "for", "(", "label", ",", "score", ")", "in", "line", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.inference.get_input_data_tensors": [[99, 133], ["tensorflow.name_scope", "tensorflow.gfile.Glob", "tensorflow.logging.info", "tensorflow.train.string_input_producer", "tensorflow.train.batch_join", "IOError", "reader.prepare_reader", "str", "range", "len"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.prepare_reader"], ["", "", "def", "get_input_data_tensors", "(", "reader", ",", "data_pattern", ",", "batch_size", ",", "num_readers", "=", "1", ")", ":", "\n", "    ", "\"\"\"Creates the section of the graph which reads the input data.\n\n      Args:\n        reader: A class which parses the input data.\n        data_pattern: A 'glob' style path to the data files.\n        batch_size: How many examples to process at a time.\n        num_readers: How many I/O threads to use.\n\n      Returns:\n        A tuple containing the features tensor, labels tensor, and optionally a\n        tensor containing the number of frames per video. The exact dimensions\n        depend on the reader being used.\n\n      Raises:\n        IOError: If no files matching the given pattern were found.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"input\"", ")", ":", "\n", "        ", "files", "=", "gfile", ".", "Glob", "(", "data_pattern", ")", "\n", "if", "not", "files", ":", "\n", "            ", "raise", "IOError", "(", "\"Unable to find input files. data_pattern='\"", "+", "\n", "data_pattern", "+", "\"'\"", ")", "\n", "", "logging", ".", "info", "(", "\"number of input files: \"", "+", "str", "(", "len", "(", "files", ")", ")", ")", "\n", "filename_queue", "=", "tf", ".", "train", ".", "string_input_producer", "(", "\n", "files", ",", "num_epochs", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "examples_and_labels", "=", "[", "reader", ".", "prepare_reader", "(", "filename_queue", ")", "\n", "for", "_", "in", "range", "(", "num_readers", ")", "]", "\n", "\n", "video_id_batch", ",", "video_batch", ",", "unused_labels", ",", "num_frames_batch", "=", "(", "\n", "tf", ".", "train", ".", "batch_join", "(", "examples_and_labels", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "allow_smaller_final_batch", "=", "True", ",", "\n", "enqueue_many", "=", "True", ")", ")", "\n", "return", "video_id_batch", ",", "video_batch", ",", "num_frames_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.inference.inference": [[135, 207], ["tensorflow.Session", "tensorflow.gfile.Open", "inference.get_input_data_tensors", "os.path.join", "os.path.join", "tensorflow.logging.info", "tensorflow.logging.info", "tf.train.import_meta_graph.restore", "sess.run", "tensorflow.train.Coordinator", "tensorflow.train.start_queue_runners", "time.time", "out_file.write", "tf.train.Coordinator.join", "sess.close", "tensorflow.gfile.Exists", "IOError", "tensorflow.python.lib.io.file_io.FileIO", "print", "tensorflow.device", "tensorflow.train.import_meta_graph", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "list", "init_op_list.append", "inference.inference.set_up_init_ops"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.get_input_data_tensors", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.ParameterServer.run"], ["", "", "def", "inference", "(", "reader", ",", "train_dir", ",", "data_pattern", ",", "out_file_location", ",", "batch_size", ",", "top_k", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", ")", "as", "sess", ",", "gfile", ".", "Open", "(", "out_file_location", ",", "\n", "\"w+\"", ")", "as", "out_file", ":", "\n", "        ", "video_id_batch", ",", "video_batch", ",", "num_frames_batch", "=", "get_input_data_tensors", "(", "reader", ",", "data_pattern", ",", "batch_size", ")", "\n", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_dir", ",", "\"inference_model\"", ")", "\n", "if", "not", "gfile", ".", "Exists", "(", "checkpoint_file", "+", "\".meta\"", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"Cannot find %s. Did you run eval.py?\"", "%", "checkpoint_file", ")", "\n", "", "meta_graph_location", "=", "checkpoint_file", "+", "\".meta\"", "\n", "logging", ".", "info", "(", "\"loading meta-graph: \"", "+", "meta_graph_location", ")", "\n", "\n", "if", "FLAGS", ".", "output_model_tgz", ":", "\n", "            ", "out_file_tgz", "=", "file_io", ".", "FileIO", "(", "FLAGS", ".", "output_model_tgz", ",", "\"w\"", ")", "\n", "with", "tarfile", ".", "open", "(", "fileobj", "=", "out_file_tgz", ",", "mode", "=", "\"w:gz\"", ")", "as", "tar", ":", "\n", "                ", "for", "model_file", "in", "file_io", ".", "get_matching_files", "(", "checkpoint_file", "+", "'.*'", ")", ":", "\n", "# tar.addfile(file_io.FileIO(model_file, \"r\"), arcname=os.path.basename(model_file))", "\n", "                    ", "tar", ".", "addfile", "(", "file_io", ".", "FileIO", "(", "model_file", ",", "\"r\"", ")", ")", "\n", "# tar.add(os.path.join(FLAGS.train_dir, \"model_flags.json\"),", "\n", "#         arcname=\"model_flags.json\")", "\n", "", "tar", ".", "addfile", "(", "file_io", ".", "FileIO", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_dir", ",", "\"model_flags.json\"", ")", ",", "\"r\"", ")", ")", "\n", "", "print", "(", "'Tarred model onto '", "+", "FLAGS", ".", "output_model_tgz", ")", "\n", "", "with", "tf", ".", "device", "(", "\"/gpu:0\"", ")", ":", "\n", "            ", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "meta_graph_location", ",", "clear_devices", "=", "True", ")", "\n", "", "logging", ".", "info", "(", "\"restoring variables from \"", "+", "checkpoint_file", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint_file", ")", "\n", "input_tensor", "=", "tf", ".", "get_collection", "(", "\"input_batch_raw\"", ")", "[", "0", "]", "\n", "num_frames_tensor", "=", "tf", ".", "get_collection", "(", "\"num_frames\"", ")", "[", "0", "]", "\n", "predictions_tensor", "=", "tf", ".", "get_collection", "(", "\"predictions\"", ")", "[", "0", "]", "\n", "\n", "# Workaround for num_epochs issue.", "\n", "def", "set_up_init_ops", "(", "variables", ")", ":", "\n", "            ", "init_op_list", "=", "[", "]", "\n", "for", "variable", "in", "list", "(", "variables", ")", ":", "\n", "                ", "if", "\"train_input\"", "in", "variable", ".", "name", ":", "\n", "                    ", "init_op_list", ".", "append", "(", "tf", ".", "assign", "(", "variable", ",", "1", ")", ")", "\n", "variables", ".", "remove", "(", "variable", ")", "\n", "", "", "init_op_list", ".", "append", "(", "tf", ".", "variables_initializer", "(", "variables", ")", ")", "\n", "return", "init_op_list", "\n", "\n", "# tf.get_default_graph().clear_collection(\"queue_runners\")", "\n", "# tf.get_default_graph().clear_collection(\"local_variables\")", "\n", "", "sess", ".", "run", "(", "set_up_init_ops", "(", "tf", ".", "get_collection_ref", "(", "\n", "tf", ".", "GraphKeys", ".", "LOCAL_VARIABLES", ")", ")", ")", "\n", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "threads", "=", "tf", ".", "train", ".", "start_queue_runners", "(", "sess", "=", "sess", ",", "coord", "=", "coord", ")", "\n", "num_examples_processed", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "out_file", ".", "write", "(", "\"VideoId,LabelConfidencePairs\\n\"", ")", "\n", "\n", "try", ":", "\n", "            ", "while", "not", "coord", ".", "should_stop", "(", ")", ":", "\n", "                ", "video_id_batch_val", ",", "video_batch_val", ",", "num_frames_batch_val", "=", "sess", ".", "run", "(", "\n", "[", "video_id_batch", ",", "video_batch", ",", "num_frames_batch", "]", ")", "\n", "predictions_val", ",", "=", "sess", ".", "run", "(", "[", "predictions_tensor", "]", ",", "feed_dict", "=", "{", "input_tensor", ":", "video_batch_val", ",", "\n", "num_frames_tensor", ":", "num_frames_batch_val", "}", ")", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "num_examples_processed", "+=", "len", "(", "video_batch_val", ")", "\n", "num_classes", "=", "predictions_val", ".", "shape", "[", "1", "]", "\n", "logging", ".", "info", "(", "\n", "\"num examples processed: \"", "+", "str", "(", "num_examples_processed", ")", "+", "\" elapsed seconds: \"", "+", "\"{0:.2f}\"", ".", "format", "(", "\n", "now", "-", "start_time", ")", ")", "\n", "for", "line", "in", "format_lines", "(", "video_id_batch_val", ",", "predictions_val", ",", "top_k", ")", ":", "\n", "                    ", "out_file", ".", "write", "(", "line", ")", "\n", "", "out_file", ".", "flush", "(", ")", "\n", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "logging", ".", "info", "(", "'Done with inference. The output file was written to '", "+", "out_file_location", ")", "\n", "", "finally", ":", "\n", "            ", "coord", ".", "request_stop", "(", ")", "\n", "\n", "", "coord", ".", "join", "(", "threads", ")", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.inference.main": [[209, 247], ["tensorflow.logging.set_verbosity", "os.path.join", "os.path.join", "json.loads", "utils.GetListOfFeatureNamesAndSizes", "inference.inference", "tarfile.open().extractall", "tensorflow.python.lib.io.file_io.file_exists", "IOError", "tensorflow.python.lib.io.file_io.FileIO().read", "readers.YT8MFrameFeatureReader", "readers.YT8MAggregatedFeatureReader", "ValueError", "ValueError", "ValueError", "tensorflow.python.lib.io.file_io.file_exists", "os.makedirs", "os.makedirs", "tarfile.open", "tensorflow.python.lib.io.file_io.FileIO"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.GetListOfFeatureNamesAndSizes", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.inference.inference"], ["", "", "def", "main", "(", "unused_argv", ")", ":", "\n", "    ", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "if", "FLAGS", ".", "input_model_tgz", ":", "\n", "        ", "if", "FLAGS", ".", "train_dir", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot supply --train_dir if supplying \"", "\n", "\"--input_model_tgz\"", ")", "\n", "# Untar.", "\n", "", "if", "not", "file_io", ".", "file_exists", "(", "FLAGS", ".", "untar_model_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "FLAGS", ".", "untar_model_dir", ")", "\n", "", "tarfile", ".", "open", "(", "FLAGS", ".", "input_model_tgz", ")", ".", "extractall", "(", "FLAGS", ".", "untar_model_dir", ")", "\n", "FLAGS", ".", "train_dir", "=", "FLAGS", ".", "untar_model_dir", "\n", "\n", "", "flags_dict_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_dir", ",", "\"model_flags.json\"", ")", "\n", "if", "not", "file_io", ".", "file_exists", "(", "flags_dict_file", ")", ":", "\n", "        ", "raise", "IOError", "(", "\"Cannot find %s. Did you run eval.py?\"", "%", "flags_dict_file", ")", "\n", "", "flags_dict", "=", "json", ".", "loads", "(", "file_io", ".", "FileIO", "(", "flags_dict_file", ",", "\"r\"", ")", ".", "read", "(", ")", ")", "\n", "\n", "# convert feature_names and feature_sizes to lists of values", "\n", "feature_names", ",", "feature_sizes", "=", "utils", ".", "GetListOfFeatureNamesAndSizes", "(", "\n", "flags_dict", "[", "\"feature_names\"", "]", ",", "flags_dict", "[", "\"feature_sizes\"", "]", ")", "\n", "\n", "if", "flags_dict", "[", "\"frame_features\"", "]", ":", "\n", "        ", "reader", "=", "readers", ".", "YT8MFrameFeatureReader", "(", "feature_names", "=", "feature_names", ",", "\n", "feature_sizes", "=", "feature_sizes", ")", "\n", "", "else", ":", "\n", "        ", "reader", "=", "readers", ".", "YT8MAggregatedFeatureReader", "(", "feature_names", "=", "feature_names", ",", "\n", "feature_sizes", "=", "feature_sizes", ")", "\n", "\n", "", "if", "FLAGS", ".", "output_file", "is", "\"\"", ":", "\n", "        ", "raise", "ValueError", "(", "\"'output_file' was not specified. \"", "\n", "\"Unable to continue with inference.\"", ")", "\n", "\n", "", "if", "FLAGS", ".", "input_data_pattern", "is", "\"\"", ":", "\n", "        ", "raise", "ValueError", "(", "\"'input_data_pattern' was not specified. \"", "\n", "\"Unable to continue with inference.\"", ")", "\n", "\n", "", "inference", "(", "reader", ",", "FLAGS", ".", "train_dir", ",", "FLAGS", ".", "input_data_pattern", ",", "\n", "FLAGS", ".", "output_file", ",", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "top_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.CrazyCluster.__init__": [[7, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "hidden_size", ",", "num_frames", ",", "last_layer", ",", "num_cluster", ",", "do_shift", "=", "True", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_cluster", "=", "num_cluster", "\n", "self", ".", "last_layer", "=", "last_layer", "\n", "self", ".", "do_shift", "=", "do_shift", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.CrazyCluster.normal_attention": [[15, 43], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.cast", "tensorflow.divide", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "tensorflow.cast", "tensorflow.divide", "tensorflow.sqrt", "tensorflow.sqrt", "str", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "normal_attention", "(", "self", ",", "inputs", ",", "cluster_id", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: batch_size x num_frames x feature_size\n        :param cluster_id:\n        :return:\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"cluster{}\"", ".", "format", "(", "str", "(", "cluster_id", ")", ")", ")", ":", "\n", "            ", "attention_weights", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "num_frames", ",", "activation", "=", "None", ",", "name", "=", "\"attention\"", ")", "\n", "float_cpy", "=", "tf", ".", "cast", "(", "self", ".", "feature_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "attention", "=", "tf", ".", "divide", "(", "attention_weights", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", "\n", "attention", "=", "tf", ".", "nn", ".", "softmax", "(", "attention", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "attention", ",", "inputs", ")", "\n", "output", "=", "tf", ".", "reduce_mean", "(", "output", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", "\n", "alpha", "=", "tf", ".", "get_variable", "(", "\"alpha\"", ",", "\n", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1", ")", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "\"beta\"", ",", "\n", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "activation", "=", "alpha", "*", "output", "\n", "activation", "=", "activation", "+", "beta", "\n", "activation", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "activation", ")", "\n", "float_cpy", "=", "tf", ".", "cast", "(", "self", ".", "num_cluster", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "activation", "=", "tf", ".", "divide", "(", "activation", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", "\n", "\n", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.CrazyCluster.forward": [[44, 50], ["transformer_utils.CrazyCluster.normal_attention", "range", "transformer_utils.CrazyCluster.normal_attention", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.OneFcAttentionV9.normal_attention", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.OneFcAttentionV9.normal_attention"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "result", "=", "self", ".", "normal_attention", "(", "inputs", ",", "cluster_id", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_cluster", ")", ":", "\n", "            ", "output", "=", "self", ".", "normal_attention", "(", "inputs", ",", "cluster_id", "=", "i", ")", "\n", "result", "=", "tf", ".", "concat", "(", "[", "result", ",", "output", "]", ",", "1", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.CrazyFeedForward.__init__": [[54, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "feature_size", ",", "filter_size", ",", "relu_dropout", ",", "\n", "is_train", ",", "scope_id", ")", ":", "\n", "        ", "\"\"\" Initialize class FeedForwardNetwork.\n        :param hidden_size: int\n        :param filter_size: int\n        :param relu_dropout: int\n        :param is_train: bool\n        :param scope_id: String\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "self", ".", "relu_dropout", "=", "relu_dropout", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.CrazyFeedForward.forward": [[69, 89], ["tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.contrib.layers.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for FeedForwardNetwork.\n        :param inputs: 3D Tensor with size 'batch_size x num_feature x feature_size'\n        :return: 3D Tensor with size 'batch_size x num_feature x hidden_size'\n        \"\"\"", "\n", "filter_output", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "filter_size", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "\"filter_output{}\"", ".", "format", "(", "self", ".", "scope_id", ")", ")", "\n", "# if self.is_train:", "\n", "#     filter_output = tf.nn.dropout(filter_output, 1.0 - self.relu_dropout)", "\n", "\n", "output", "=", "tf", ".", "layers", ".", "dense", "(", "filter_output", ",", "self", ".", "feature_size", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "\"ff_output{}\"", ".", "format", "(", "self", ".", "scope_id", ")", ")", "\n", "output", "=", "output", "+", "inputs", "\n", "output", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.CrazyMultiHead.__init__": [[92, 97], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "num_heads", ",", "max_frames", ",", "is_training", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "is_training", "=", "is_training", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.CrazyMultiHead.self_attention": [[98, 127], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.matmul", "tensorflow.cast", "tensorflow.divide", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "tensorflow.cast", "tensorflow.divide", "tensorflow.transpose", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "self_attention", "(", "self", ",", "inputs", ",", "head_id", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"head{}\"", ".", "format", "(", "head_id", ")", ")", ":", "\n", "            ", "Q", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "feature_size", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ")", "\n", "K", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "feature_size", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ")", "\n", "V", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "feature_size", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ")", "\n", "\n", "attention", "=", "tf", ".", "matmul", "(", "Q", ",", "tf", ".", "transpose", "(", "K", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "float_cpy", "=", "tf", ".", "cast", "(", "self", ".", "feature_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "attention", "=", "tf", ".", "divide", "(", "attention", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", "\n", "attention", "=", "tf", ".", "nn", ".", "softmax", "(", "attention", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "attention", ",", "V", ")", "\n", "# output: -> batch_size x max_frames x num_units", "\n", "\n", "alpha", "=", "tf", ".", "get_variable", "(", "\"alpha\"", ",", "\n", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1", ")", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "\"beta\"", ",", "\n", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "\n", "activation", "=", "activation", "*", "alpha", "\n", "activation", "=", "activation", "+", "beta", "\n", "activation", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "activation", ")", "\n", "float_cpy", "=", "tf", ".", "cast", "(", "self", ".", "num_heads", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "activation", "=", "tf", ".", "divide", "(", "activation", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", "\n", "\n", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.CrazyMultiHead.forward": [[128, 136], ["transformer_utils.CrazyMultiHead.self_attention", "range", "tensorflow.layers.dense", "tensorflow.contrib.layers.layer_norm", "transformer_utils.CrazyMultiHead.self_attention", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionV2.self_attention", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionV2.self_attention"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "result", "=", "self", ".", "self_attention", "(", "inputs", ",", "head_id", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_heads", ")", ":", "\n", "            ", "output", "=", "self", ".", "self_attention", "(", "inputs", ",", "head_id", "=", "i", ")", "\n", "result", "=", "tf", ".", "concat", "(", "[", "result", ",", "output", "]", ",", "2", ")", "\n", "", "output", "=", "tf", ".", "layers", ".", "dense", "(", "result", ",", "self", ".", "feature_size", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ")", "\n", "output", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.JuhanBlock.__init__": [[139, 171], ["transformer_utils.MultiHeadAttentionV2", "transformer_utils.FeedForwardNetwork", "transformer_utils.OneFcAttentionV9", "transformer_utils.FeedForwardNetwork"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "filter_size", ",", "num_cluster", ",", "num_units", ",", "max_frames", ",", "\n", "is_training", ",", "last_layer", ",", "block_id", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "self", ".", "num_cluster", "=", "num_cluster", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "last_layer", "=", "last_layer", "\n", "self", ".", "block_id", "=", "block_id", "\n", "\n", "self", ".", "multi_head", "=", "MultiHeadAttentionV2", "(", "feature_size", "=", "feature_size", ",", "\n", "num_heads", "=", "num_cluster", ",", "\n", "num_units", "=", "num_units", ",", "\n", "max_frames", "=", "max_frames", ",", "\n", "block_id", "=", "block_id", ")", "\n", "self", ".", "ff1", "=", "FeedForwardNetwork", "(", "feature_size", "=", "feature_size", ",", "\n", "filter_size", "=", "filter_size", ",", "\n", "relu_dropout", "=", "0.1", ",", "\n", "is_train", "=", "is_training", ",", "\n", "scope_id", "=", "block_id", ")", "\n", "self", ".", "attention_cluster", "=", "OneFcAttentionV9", "(", "feature_size", "=", "feature_size", ",", "\n", "hidden_size", "=", "num_units", ",", "\n", "num_frames", "=", "max_frames", ",", "\n", "num_cluster", "=", "num_cluster", ",", "\n", "last_layer", "=", "last_layer", ",", "\n", "do_shift", "=", "True", ")", "\n", "self", ".", "ff2", "=", "FeedForwardNetwork", "(", "feature_size", "=", "feature_size", ",", "\n", "filter_size", "=", "filter_size", ",", "\n", "relu_dropout", "=", "0.1", ",", "\n", "is_train", "=", "is_training", ",", "\n", "scope_id", "=", "block_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.JuhanBlock.forward": [[172, 191], ["tensorflow.variable_scope", "tensorflow.variable_scope", "transformer_utils.JuhanBlock.multi_head.forward", "tensorflow.variable_scope", "transformer_utils.JuhanBlock.ff1.forward", "tensorflow.variable_scope", "transformer_utils.JuhanBlock.attention_cluster.forward", "tensorflow.variable_scope", "transformer_utils.JuhanBlock.ff2.forward", "str"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method\n        :param inputs: 3D Tensor with size 'batch_size x max_frames x feature_size'\n        :return: 3D Tensor with size 'batch_size x num_cluster x feature_size'\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"block{}\"", ".", "format", "(", "str", "(", "self", ".", "block_id", ")", ")", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"multi_head\"", ")", ":", "\n", "                ", "mh_output", "=", "self", ".", "multi_head", ".", "forward", "(", "inputs", ")", "\n", "# -> batch_size x max_frames x feature_size", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"ff1\"", ")", ":", "\n", "                ", "ff1_output", "=", "self", ".", "ff1", ".", "forward", "(", "mh_output", ")", "\n", "# -> batch_size x max_frames x feature_size", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"one_attention\"", ")", ":", "\n", "                ", "mh2_output", "=", "self", ".", "attention_cluster", ".", "forward", "(", "ff1_output", ")", "\n", "# -> batch_size x cluster_size x feature_size", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"ff2\"", ")", ":", "\n", "                ", "ff2_output", "=", "self", ".", "ff2", ".", "forward", "(", "mh2_output", ")", "\n", "# -> batch_size x cluster_size x feature_size", "\n", "return", "ff2_output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionV2.__init__": [[194, 205], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "num_heads", ",", "num_units", ",", "max_frames", ",", "block_id", ")", ":", "\n", "        ", "\"\"\"\n\n        :param num_heads: Number of self-attention modules\n        :param num_units: last dimension of Q, K, V\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "block_id", "=", "block_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionV2.self_attention": [[206, 243], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "tensorflow.cast", "tensorflow.divide", "tensorflow.transpose", "tensorflow.divide", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "self_attention", "(", "self", ",", "inputs", ",", "scope_id", ")", ":", "\n", "        ", "\"\"\"\n        :param Q: batch_size x max_frames x num_units\n        :param K: batch_size x max_frames x num_units\n        :param V: batch_size x max_frames x num_units\n        :return:\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"Block{}Layer{}\"", ".", "format", "(", "self", ".", "block_id", ",", "scope_id", ")", ")", ":", "\n", "# Calculate query, key, value pair", "\n", "            ", "Q", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "num_units", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ")", "\n", "K", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "num_units", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ")", "\n", "V", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "num_units", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ")", "\n", "\n", "# Self-attention", "\n", "attention", "=", "tf", ".", "matmul", "(", "Q", ",", "tf", ".", "transpose", "(", "K", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "# attention: -> batch_size x max_frames x max_frames", "\n", "float_cpy", "=", "tf", ".", "cast", "(", "self", ".", "num_units", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "attention", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "divide", "(", "attention", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "attention", ",", "V", ")", "\n", "# output: -> batch_size x max_frames x num_units", "\n", "\n", "alpha", "=", "tf", ".", "get_variable", "(", "\"alpha\"", ",", "\n", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1", ")", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "\"beta\"", ",", "\n", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "\n", "reshaped_activation", "=", "alpha", "*", "output", "\n", "reshaped_activation", "=", "reshaped_activation", "+", "beta", "\n", "output", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "reshaped_activation", ")", "\n", "float_cpy", "=", "tf", ".", "cast", "(", "self", ".", "num_heads", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "output", "=", "tf", ".", "divide", "(", "output", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionV2.forward": [[244, 252], ["transformer_utils.MultiHeadAttentionV2.self_attention", "range", "tensorflow.layers.dense", "tensorflow.contrib.layers.layer_norm", "transformer_utils.MultiHeadAttentionV2.self_attention", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionV2.self_attention", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionV2.self_attention"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "result", "=", "self", ".", "self_attention", "(", "inputs", ",", "scope_id", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_heads", ")", ":", "\n", "            ", "output", "=", "self", ".", "self_attention", "(", "inputs", ",", "scope_id", "=", "i", ")", "\n", "result", "=", "tf", ".", "concat", "(", "[", "result", ",", "output", "]", ",", "2", ")", "\n", "", "output", "=", "tf", ".", "layers", ".", "dense", "(", "result", ",", "self", ".", "feature_size", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ")", "\n", "output", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.OneFcAttentionV9.__init__": [[255, 262], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "hidden_size", ",", "num_frames", ",", "last_layer", ",", "num_cluster", ",", "do_shift", "=", "True", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_cluster", "=", "num_cluster", "\n", "self", ".", "last_layer", "=", "last_layer", "\n", "self", ".", "do_shift", "=", "do_shift", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.OneFcAttentionV9.normal_attention": [[263, 296], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.cast", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "tensorflow.cast", "tensorflow.divide", "tensorflow.divide", "tensorflow.sqrt", "str", "tensorflow.sqrt", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "normal_attention", "(", "self", ",", "inputs", ",", "cluster_id", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: batch_size x num_frames x feature_size\n        :param cluster_id:\n        :return:\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"cluster{}\"", ".", "format", "(", "str", "(", "cluster_id", ")", ")", ")", ":", "\n", "            ", "keys", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "feature_size", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ",", "name", "=", "\"k\"", ")", "\n", "values", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "feature_size", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ",", "name", "=", "\"v\"", ")", "\n", "\n", "attention_weights", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "self", ".", "num_frames", ",", "activation", "=", "None", ",", "name", "=", "\"attention\"", ")", "\n", "float_cpy", "=", "tf", ".", "cast", "(", "self", ".", "feature_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "attention", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "divide", "(", "attention_weights", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "attention", ",", "values", ")", "\n", "output", "=", "tf", ".", "reduce_mean", "(", "output", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", "\n", "# output: -> batch_size x max_frames x num_units", "\n", "\n", "alpha", "=", "tf", ".", "get_variable", "(", "\"alpha\"", ",", "\n", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1", ")", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "\"beta\"", ",", "\n", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "\n", "reshaped_activation", "=", "alpha", "*", "output", "\n", "reshaped_activation", "=", "reshaped_activation", "+", "beta", "\n", "reshaped_activation", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "reshaped_activation", ")", "\n", "float_cpy", "=", "tf", ".", "cast", "(", "self", ".", "num_cluster", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "output", "=", "tf", ".", "divide", "(", "reshaped_activation", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.OneFcAttentionV9.forward": [[297, 305], ["transformer_utils.OneFcAttentionV9.normal_attention", "range", "tensorflow.layers.dense", "tensorflow.contrib.layers.layer_norm", "transformer_utils.OneFcAttentionV9.normal_attention", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.OneFcAttentionV9.normal_attention", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.OneFcAttentionV9.normal_attention"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "result", "=", "self", ".", "normal_attention", "(", "inputs", ",", "cluster_id", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_cluster", ")", ":", "\n", "            ", "output", "=", "self", ".", "normal_attention", "(", "inputs", ",", "cluster_id", "=", "i", ")", "\n", "result", "=", "tf", ".", "concat", "(", "[", "result", ",", "output", "]", ",", "1", ")", "\n", "", "output", "=", "tf", ".", "layers", ".", "dense", "(", "result", ",", "self", ".", "feature_size", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ")", "\n", "output", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.OneFcAttentionV3.__init__": [[308, 313], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "num_frames", ",", "num_cluster", ",", "do_shift", "=", "True", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "num_cluster", "=", "num_cluster", "\n", "self", ".", "do_shift", "=", "do_shift", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.OneFcAttentionV3.forward": [[314, 330], ["tensorflow.layers.dense", "tensorflow.cast", "tensorflow.divide", "tensorflow.nn.softmax", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.layers.dense", "tensorflow.nn.l2_normalize", "tensorflow.cast", "tensorflow.divide", "tensorflow.sqrt", "tensorflow.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "attention", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "num_cluster", ",", "activation", "=", "None", ")", "\n", "float_cpy", "=", "tf", ".", "cast", "(", "self", ".", "feature_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "attention", "=", "tf", ".", "divide", "(", "attention", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", "\n", "attention", "=", "tf", ".", "nn", ".", "softmax", "(", "attention", ")", "\n", "\n", "attention", "=", "tf", ".", "transpose", "(", "attention", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "attention", ",", "inputs", ")", "\n", "# -> batch_size x num_cluster x feature_size", "\n", "\n", "output", "=", "tf", ".", "layers", ".", "dense", "(", "activation", ",", "self", ".", "feature_size", ",", "activation", "=", "None", ")", "\n", "output", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output", ")", "\n", "float_cpy", "=", "tf", ".", "cast", "(", "self", ".", "num_cluster", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "output", "=", "tf", ".", "divide", "(", "output", ",", "tf", ".", "sqrt", "(", "float_cpy", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.TransformerEncoderBlockV2.__init__": [[333, 344], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "is_training", ",", "num_units", ",", "max_frames", ",", "feature_size", ",", "num_heads", ",", "block_id", ")", ":", "\n", "        ", "\"\"\"\n        :param is_training:\n        :param num_units: Number of hidden units of fully connected layers\n        \"\"\"", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "block_id", "=", "block_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.TransformerEncoderBlockV2.forward": [[345, 372], ["transformer_utils.MultiHeadAttentionV2", "transformer_utils.MultiHeadAttentionV2.forward", "tensorflow.reshape", "tensorflow.layers.dense", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\"\n        One block of encoder containing one self-attention layer and one fully connected layer.\n        :param inputs: (batch_size * max_frames) x feature_size\n        :param unused_params:\n        :return:\n        \"\"\"", "\n", "multi_head_layer", "=", "MultiHeadAttentionV2", "(", "self", ".", "num_heads", ",", "self", ".", "num_units", ",", "self", ".", "max_frames", ",", "self", ".", "block_id", ")", "\n", "\n", "attention_output", "=", "multi_head_layer", ".", "forward", "(", "inputs", ")", "\n", "# output: -> batch_size x max_frames x (num_units * num_heads)", "\n", "\n", "attention_output", "=", "tf", ".", "reshape", "(", "attention_output", ",", "[", "-", "1", ",", "self", ".", "num_units", "*", "self", ".", "num_heads", "]", ")", "\n", "# output: -> (batch_size * max_frames) x (num_units * num_heads)", "\n", "\n", "attention_output", "=", "tf", ".", "layers", ".", "dense", "(", "attention_output", ",", "self", ".", "feature_size", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "# output: -> (batch_size * max_frames) x feature_size", "\n", "\n", "# Residual connection & Layer normalization", "\n", "attention_output", "+=", "inputs", "\n", "attention_output", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "attention_output", ")", "\n", "\n", "# Residual connection & Layer normalization", "\n", "output", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "attention_output", ")", "\n", "# output = tf.reshape(output, [-1, self.feature_size])", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.TransformerEncoder.__init__": [[375, 398], ["transformer_utils.MultiHeadAttention", "transformer_utils.FeedForwardNetwork"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "hidden_size", ",", "num_heads", ",", "attention_dropout", ",", "\n", "ff_filter_size", ",", "ff_relu_dropout", ",", "\n", "is_train", ",", "scope_id", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "ff_filter_size", "=", "ff_filter_size", "\n", "self", ".", "ff_relu_dropout", "=", "ff_relu_dropout", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n", "self", ".", "multi_head_attention", "=", "MultiHeadAttention", "(", "feature_size", ",", "\n", "hidden_size", ",", "\n", "num_heads", ",", "\n", "attention_dropout", ",", "\n", "is_train", ")", "\n", "\n", "self", ".", "ff_network", "=", "FeedForwardNetwork", "(", "feature_size", ",", "\n", "ff_filter_size", ",", "\n", "ff_relu_dropout", ",", "\n", "is_train", ",", "\n", "self", ".", "scope_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.TransformerEncoder.forward": [[399, 414], ["transformer_utils.TransformerEncoder.multi_head_attention.forward", "tensorflow.contrib.layers.layer_norm", "transformer_utils.TransformerEncoder.ff_network.forward", "tensorflow.contrib.layers.layer_norm"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: [batch_size, input_length, hidden_size]\n        :param unused_params:\n        :return:\n        \"\"\"", "\n", "attention", "=", "self", ".", "multi_head_attention", ".", "forward", "(", "inputs", ",", "inputs", ")", "\n", "attention", "=", "attention", "+", "inputs", "\n", "attention", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "attention", ")", "\n", "\n", "ff_output", "=", "self", ".", "ff_network", ".", "forward", "(", "attention", ")", "\n", "ff_output", "=", "ff_output", "+", "attention", "\n", "ff_output", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "ff_output", ")", "\n", "\n", "return", "ff_output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.TransformerEncoderMod.__init__": [[416, 442], ["transformer_utils.MultiHeadAttentionBN", "transformer_utils.FeedForwardNetworkMod"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "hidden_size", ",", "num_heads", ",", "attention_dropout", ",", "\n", "ff_filter_size", ",", "ff_relu_dropout", ",", "\n", "is_train", ",", "scope_id", ",", "final_size", ")", ":", "\n", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "ff_filter_size", "=", "ff_filter_size", "\n", "self", ".", "ff_relu_dropout", "=", "ff_relu_dropout", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "self", ".", "final_size", "=", "final_size", "\n", "\n", "self", ".", "multi_head_attention", "=", "MultiHeadAttentionBN", "(", "feature_size", ",", "\n", "hidden_size", ",", "\n", "num_heads", ",", "\n", "attention_dropout", ",", "\n", "is_train", ")", "\n", "\n", "self", ".", "ff_network", "=", "FeedForwardNetworkMod", "(", "feature_size", ",", "\n", "ff_filter_size", ",", "\n", "ff_relu_dropout", ",", "\n", "is_train", ",", "\n", "self", ".", "scope_id", ",", "\n", "final_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.TransformerEncoderMod.forward": [[443, 458], ["transformer_utils.TransformerEncoderMod.multi_head_attention.forward", "tensorflow.layers.dropout", "tensorflow.contrib.layers.layer_norm", "transformer_utils.TransformerEncoderMod.ff_network.forward"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: [batch_size, input_length, hidden_size]\n        :param unused_params:\n        :return:\n        \"\"\"", "\n", "attention", "=", "self", ".", "multi_head_attention", ".", "forward", "(", "inputs", ",", "inputs", ")", "\n", "attention", "=", "tf", ".", "layers", ".", "dropout", "(", "attention", ",", "rate", "=", "1.0", "-", "self", ".", "attention_dropout", ",", "training", "=", "self", ".", "is_train", ")", "\n", "attention", "=", "attention", "+", "inputs", "\n", "\n", "# Final residual connection removed:", "\n", "attention", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "attention", ")", "\n", "ff_output", "=", "self", ".", "ff_network", ".", "forward", "(", "attention", ")", "\n", "\n", "return", "ff_output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.TransformerDecoder.__init__": [[460, 489], ["transformer_utils.MultiHeadAttention", "transformer_utils.MultiHeadAttention", "transformer_utils.FeedForwardNetwork"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "hidden_size", ",", "num_heads", ",", "attention_dropout", ",", "\n", "ff_filter_size", ",", "ff_relu_dropout", ",", "\n", "is_train", ",", "scope_id", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "ff_filter_size", "=", "ff_filter_size", "\n", "self", ".", "ff_relu_dropout", "=", "ff_relu_dropout", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n", "self", ".", "multi_head_attention1", "=", "MultiHeadAttention", "(", "feature_size", ",", "\n", "hidden_size", ",", "\n", "num_heads", ",", "\n", "attention_dropout", ",", "\n", "is_train", ")", "\n", "\n", "self", ".", "multi_head_attention2", "=", "MultiHeadAttention", "(", "feature_size", ",", "\n", "hidden_size", ",", "\n", "num_heads", ",", "\n", "attention_dropout", ",", "\n", "is_train", ")", "\n", "\n", "self", ".", "ff_network", "=", "FeedForwardNetwork", "(", "feature_size", ",", "\n", "ff_filter_size", ",", "\n", "ff_relu_dropout", ",", "\n", "is_train", ",", "\n", "scope_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.TransformerDecoder.forward": [[490, 505], ["transformer_utils.TransformerDecoder.ff_network.forward", "tensorflow.contrib.layers.layer_norm", "tensorflow.variable_scope", "transformer_utils.TransformerDecoder.multi_head_attention1.forward", "tensorflow.contrib.layers.layer_norm", "tensorflow.variable_scope", "transformer_utils.TransformerDecoder.multi_head_attention2.forward", "tensorflow.contrib.layers.layer_norm"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "encoder_inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"first_mha\"", ")", ":", "\n", "            ", "attention1", "=", "self", ".", "multi_head_attention1", ".", "forward", "(", "inputs", ",", "inputs", ")", "\n", "attention1", "=", "attention1", "+", "inputs", "\n", "attention1", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "attention1", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"second_mha\"", ")", ":", "\n", "            ", "attention2", "=", "self", ".", "multi_head_attention2", ".", "forward", "(", "attention1", ",", "encoder_inputs", ")", "\n", "attention2", "=", "attention2", "+", "attention1", "\n", "attention2", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "attention2", ")", "\n", "\n", "", "ff_output", "=", "self", ".", "ff_network", ".", "forward", "(", "attention2", ")", "\n", "ff_output", "=", "ff_output", "+", "attention2", "\n", "ff_output", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "ff_output", ")", "\n", "return", "ff_output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttention.__init__": [[508, 520], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "hidden_size", ",", "num_heads", ",", "attention_dropout", ",", "is_train", ")", ":", "\n", "        ", "\"\"\" Initialize class MultiHeadAttention.\n        :param hidden_size: int\n        :param num_heads: int\n        :param attention_dropout: float\n        :param is_train: bool\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttention.split_heads": [[521, 540], ["tensorflow.name_scope", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Split x into different heads, and transpose the resulting value.\n        The tensor is transposed to insure the inner dimensions hold the correct\n        values during the matrix multiplication.\n        :param inputs: 3D Tensor with shape 'batch_size x length x hidden_size'\n        :return:\n        \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"split_heads\"", ")", ":", "\n", "            ", "batch_size", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "length", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "1", "]", "\n", "\n", "# Calculate depth of last dimension after it has been split.", "\n", "depth", "=", "(", "self", ".", "hidden_size", "//", "self", ".", "num_heads", ")", "\n", "\n", "# Split the last dimension", "\n", "x", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "batch_size", ",", "length", ",", "self", ".", "num_heads", ",", "depth", "]", ")", "\n", "\n", "# Transpose the result", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttention.combine_heads": [[541, 551], ["tensorflow.name_scope", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "", "def", "combine_heads", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Combine tensor that has been split.\n        :param inputs: 4D Tensor with shape 'batch_size x num_heads, num_feature, hidden_size/num_heads'\n        :return: 3D Tensor with shape 'batch_size x length x hidden_size'\n        \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"combine_heads\"", ")", ":", "\n", "            ", "batch_size", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "length", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "2", "]", "\n", "x", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "# --> [batch, length, num_heads, depth]", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "batch_size", ",", "length", ",", "self", ".", "hidden_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttention.forward": [[552, 587], ["tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "transformer_utils.MultiHeadAttention.split_heads", "transformer_utils.MultiHeadAttention.split_heads", "transformer_utils.MultiHeadAttention.split_heads", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.matmul", "transformer_utils.MultiHeadAttention.combine_heads", "tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.split_heads", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.split_heads", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.split_heads", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.combine_heads"], ["", "", "def", "forward", "(", "self", ",", "queries", ",", "keys", ")", ":", "\n", "        ", "\"\"\" Forward method for MultiHeadAttention\n        :param queries: 3D Tensor with shape 'batch_size x length x hidden_size'\n        :param keys: 3D Tensor with shape 'batch_size x length x hidden_size'\n        :return:\n        \"\"\"", "\n", "# Layers for linearly projecting the queries, keys, and values.", "\n", "q", "=", "tf", ".", "layers", ".", "dense", "(", "queries", ",", "self", ".", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"q\"", ")", "\n", "k", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "self", ".", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"k\"", ")", "\n", "v", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "self", ".", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"v\"", ")", "\n", "\n", "# Split q, k, v into heads.", "\n", "q", "=", "self", ".", "split_heads", "(", "q", ")", "\n", "k", "=", "self", ".", "split_heads", "(", "k", ")", "\n", "v", "=", "self", ".", "split_heads", "(", "v", ")", "\n", "# -> [batch_size, num_heads, length, hidden_size/num_heads]", "\n", "\n", "# Scale q to prevent the dot product between q and k from growing too large.", "\n", "depth", "=", "(", "self", ".", "hidden_size", "//", "self", ".", "num_heads", ")", "\n", "q", "*=", "depth", "**", "-", "0.5", "\n", "\n", "logits", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "\n", "# if self.is_train:", "\n", "#     weights = tf.nn.dropout(weights, 1.0 - self.attention_dropout)", "\n", "attention_output", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "\n", "# -> batch_size x length x hidden_size]", "\n", "attention_output", "=", "self", ".", "combine_heads", "(", "attention_output", ")", "\n", "\n", "attention_output", "=", "tf", ".", "layers", ".", "dense", "(", "attention_output", ",", "\n", "self", ".", "feature_size", ",", "\n", "use_bias", "=", "True", ",", "name", "=", "\"output_transform\"", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.__init__": [[590, 602], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "hidden_size", ",", "num_heads", ",", "attention_dropout", ",", "is_train", ")", ":", "\n", "        ", "\"\"\" Initialize class MultiHeadAttention.\n        :param hidden_size: int\n        :param num_heads: int\n        :param attention_dropout: float\n        :param is_train: bool\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.split_heads": [[603, 622], ["tensorflow.name_scope", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.shape", "inputs.get_shape"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Split x into different heads, and transpose the resulting value.\n        The tensor is transposed to insure the inner dimensions hold the correct\n        values during the matrix multiplication.\n        :param inputs: 3D Tensor with shape 'batch_size x length x hidden_size'\n        :return:\n        \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"split_heads\"", ")", ":", "\n", "            ", "batch_size", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "length", "=", "(", "inputs", ".", "get_shape", "(", ")", ")", "[", "1", "]", "\n", "\n", "# Calculate depth of last dimension after it has been split.", "\n", "depth", "=", "(", "self", ".", "hidden_size", "//", "self", ".", "num_heads", ")", "\n", "\n", "# Split the last dimension", "\n", "x", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "batch_size", ",", "length", ",", "self", ".", "num_heads", ",", "depth", "]", ")", "\n", "\n", "# Transpose the result", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.combine_heads": [[623, 633], ["tensorflow.name_scope", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "", "def", "combine_heads", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Combine tensor that has been split.\n        :param inputs: 4D Tensor with shape 'batch_size x num_heads, num_feature, hidden_size/num_heads'\n        :return: 3D Tensor with shape 'batch_size x length x hidden_size'\n        \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"combine_heads\"", ")", ":", "\n", "            ", "batch_size", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "length", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "2", "]", "\n", "x", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "# --> [batch, length, num_heads, depth]", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "batch_size", ",", "length", ",", "self", ".", "hidden_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.forward": [[634, 678], ["tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "transformer_utils.MultiHeadAttentionBN.split_heads", "transformer_utils.MultiHeadAttentionBN.split_heads", "transformer_utils.MultiHeadAttentionBN.split_heads", "tensorflow.matmul", "slim.batch_norm", "tensorflow.nn.softmax", "tensorflow.matmul", "transformer_utils.MultiHeadAttentionBN.combine_heads", "slim.batch_norm", "tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.split_heads", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.split_heads", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.split_heads", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.MultiHeadAttentionBN.combine_heads"], ["", "", "def", "forward", "(", "self", ",", "queries", ",", "keys", ")", ":", "\n", "        ", "\"\"\" Forward method for MultiHeadAttention\n        :param queries: 3D Tensor with shape 'batch_size x length x hidden_size'\n        :param keys: 3D Tensor with shape 'batch_size x length x hidden_size'\n        :return:\n        \"\"\"", "\n", "# Layers for linearly projecting the queries, keys, and values.", "\n", "q", "=", "tf", ".", "layers", ".", "dense", "(", "queries", ",", "self", ".", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"q\"", ")", "\n", "k", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "self", ".", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"k\"", ")", "\n", "v", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "self", ".", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"v\"", ")", "\n", "\n", "# Split q, k, v into heads.", "\n", "q", "=", "self", ".", "split_heads", "(", "q", ")", "\n", "k", "=", "self", ".", "split_heads", "(", "k", ")", "\n", "v", "=", "self", ".", "split_heads", "(", "v", ")", "\n", "# -> [batch_size, num_heads, length, hidden_size/num_heads]", "\n", "\n", "# Batch norm logits instead of scaling \"q\":", "\n", "logits", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "logits", "=", "slim", ".", "batch_norm", "(", "\n", "logits", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_train", ",", "\n", "scope", "=", "\"logits_bn\"", ")", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "\n", "attention_output", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "\n", "# -> batch_size x length x hidden_size]", "\n", "attention_output", "=", "self", ".", "combine_heads", "(", "attention_output", ")", "\n", "\n", "attention_output", "=", "slim", ".", "batch_norm", "(", "\n", "attention_output", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_train", ",", "\n", "scope", "=", "\"attention_bn\"", ")", "\n", "\n", "attention_output", "=", "tf", ".", "layers", ".", "dense", "(", "attention_output", ",", "\n", "self", ".", "feature_size", ",", "\n", "use_bias", "=", "True", ",", "name", "=", "\"output_transform\"", ")", "\n", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.FeedForwardNetwork.__init__": [[681, 695], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "feature_size", ",", "filter_size", ",", "relu_dropout", ",", "\n", "is_train", ",", "scope_id", ")", ":", "\n", "        ", "\"\"\" Initialize class FeedForwardNetwork.\n        :param hidden_size: int\n        :param filter_size: int\n        :param relu_dropout: int\n        :param is_train: bool\n        :param scope_id: String\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "self", ".", "relu_dropout", "=", "relu_dropout", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.FeedForwardNetwork.forward": [[696, 716], ["tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.contrib.layers.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for FeedForwardNetwork.\n        :param inputs: 3D Tensor with size 'batch_size x num_feature x feature_size'\n        :return: 3D Tensor with size 'batch_size x num_feature x hidden_size'\n        \"\"\"", "\n", "filter_output", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "filter_size", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "\"filter_output{}\"", ".", "format", "(", "self", ".", "scope_id", ")", ")", "\n", "# if self.is_train:", "\n", "#     filter_output = tf.nn.dropout(filter_output, 1.0 - self.relu_dropout)", "\n", "\n", "output", "=", "tf", ".", "layers", ".", "dense", "(", "filter_output", ",", "self", ".", "feature_size", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "\"ff_output{}\"", ".", "format", "(", "self", ".", "scope_id", ")", ")", "\n", "output", "=", "output", "+", "inputs", "\n", "output", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.FeedForwardNetworkMod.__init__": [[721, 736], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "feature_size", ",", "filter_size", ",", "relu_dropout", ",", "\n", "is_train", ",", "scope_id", ",", "final_size", ")", ":", "\n", "        ", "\"\"\" Initialize class FeedForwardNetwork.\n        :param hidden_size: int\n        :param filter_size: int\n        :param relu_dropout: int\n        :param is_train: bool\n        :param scope_id: String\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "self", ".", "relu_dropout", "=", "relu_dropout", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "self", ".", "final_size", "=", "final_size", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.transformer_utils.FeedForwardNetworkMod.forward": [[737, 768], ["tensorflow.layers.dense", "slim.batch_norm", "tensorflow.layers.dense", "slim.batch_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for FeedForwardNetwork.\n        :param inputs: 3D Tensor with size 'batch_size x num_feature x feature_size'\n        :return: 3D Tensor with size 'batch_size x num_feature x hidden_size'\n        \"\"\"", "\n", "filter_output", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "filter_size", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "\"filter_output{}\"", ".", "format", "(", "self", ".", "scope_id", ")", ")", "\n", "\n", "filter_output", "=", "slim", ".", "batch_norm", "(", "\n", "filter_output", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_train", ",", "\n", "scope", "=", "\"filter_bn\"", ")", "\n", "\n", "output", "=", "tf", ".", "layers", ".", "dense", "(", "filter_output", ",", "\n", "self", ".", "final_size", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "\"ff_output{}\"", ".", "format", "(", "self", ".", "scope_id", ")", ")", "\n", "\n", "output", "=", "slim", ".", "batch_norm", "(", "\n", "output", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_train", ",", "\n", "scope", "=", "\"feed_output_bn\"", ")", "\n", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.MoeModel.create_model": [[51, 160], ["tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "model_input.get_shape().as_list", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matrix_diag_part", "tensorflow.matrix_diag_part", "model_input.get_shape", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "math.sqrt", "math.sqrt"], "methods", ["None"], ["def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "is_training", ",", "\n", "num_mixtures", "=", "None", ",", "\n", "l2_penalty", "=", "1e-8", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\"Creates a Mixture of (Logistic) Experts model.\n         It also includes the possibility of gating the probabilities\n         The model consists of a per-class softmax distribution over a\n         configurable number of logistic classifiers. One of the classifiers in the\n         mixture is not trained, and always predicts 0.\n        Args:\n          model_input: 'batch_size' x 'num_features' matrix of input features.\n          vocab_size: The number of classes in the dataset.\n          is_training: Is this the training phase ?\n          num_mixtures: The number of mixtures (excluding a dummy 'expert' that\n            always predicts the non-existence of an entity).\n          l2_penalty: How much to penalize the squared magnitudes of parameter\n            values.\n        Returns:\n          A dictionary with a tensor containing the probability predictions of the\n          model in the 'predictions' key. The dimensions of the tensor are\n          batch_size x num_classes.\n        \"\"\"", "\n", "num_mixtures", "=", "num_mixtures", "or", "FLAGS", ".", "moe_num_mixtures", "\n", "low_rank_gating", "=", "FLAGS", ".", "moe_low_rank_gating", "\n", "l2_penalty", "=", "FLAGS", ".", "moe_l2", "\n", "gating_probabilities", "=", "FLAGS", ".", "moe_prob_gating", "\n", "gating_input", "=", "FLAGS", ".", "moe_prob_gating_input", "\n", "\n", "input_size", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "remove_diag", "=", "FLAGS", ".", "gating_remove_diag", "\n", "\n", "if", "low_rank_gating", "==", "-", "1", ":", "\n", "            ", "gate_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "(", "num_mixtures", "+", "1", ")", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"gates\"", ")", "\n", "", "else", ":", "\n", "            ", "gate_activations1", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "low_rank_gating", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"gates1\"", ")", "\n", "gate_activations", "=", "slim", ".", "fully_connected", "(", "\n", "gate_activations1", ",", "\n", "vocab_size", "*", "(", "num_mixtures", "+", "1", ")", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"gates2\"", ")", "\n", "\n", "", "expert_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "num_mixtures", ",", "\n", "activation_fn", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"experts\"", ")", "\n", "\n", "gating_distribution", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reshape", "(", "\n", "gate_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "+", "1", "]", ")", ")", "# (Batch * #Labels) x (num_mixtures + 1)", "\n", "expert_distribution", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reshape", "(", "\n", "expert_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "]", ")", ")", "# (Batch * #Labels) x num_mixtures", "\n", "\n", "probabilities_by_class_and_batch", "=", "tf", ".", "reduce_sum", "(", "\n", "gating_distribution", "[", ":", ",", ":", "num_mixtures", "]", "*", "expert_distribution", ",", "1", ")", "\n", "probabilities", "=", "tf", ".", "reshape", "(", "probabilities_by_class_and_batch", ",", "\n", "[", "-", "1", ",", "vocab_size", "]", ")", "\n", "\n", "if", "gating_probabilities", ":", "\n", "            ", "if", "gating_input", "==", "'prob'", ":", "\n", "                ", "gating_weights", "=", "tf", ".", "get_variable", "(", "\"gating_prob_weights\"", ",", "\n", "[", "vocab_size", ",", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "vocab_size", ")", ")", ")", "\n", "gates", "=", "tf", ".", "matmul", "(", "probabilities", ",", "gating_weights", ")", "\n", "", "else", ":", "\n", "                ", "gating_weights", "=", "tf", ".", "get_variable", "(", "\"gating_prob_weights\"", ",", "\n", "[", "input_size", ",", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "vocab_size", ")", ")", ")", "\n", "\n", "gates", "=", "tf", ".", "matmul", "(", "model_input", ",", "gating_weights", ")", "\n", "\n", "", "if", "remove_diag", ":", "\n", "# removes diagonals coefficients", "\n", "                ", "diagonals", "=", "tf", ".", "matrix_diag_part", "(", "gating_weights", ")", "\n", "gates", "=", "gates", "-", "tf", ".", "multiply", "(", "diagonals", ",", "probabilities", ")", "\n", "\n", "", "gates", "=", "slim", ".", "batch_norm", "(", "\n", "gates", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"gating_prob_bn\"", ")", "\n", "\n", "gates", "=", "tf", ".", "sigmoid", "(", "gates", ")", "\n", "\n", "probabilities", "=", "tf", ".", "multiply", "(", "probabilities", ",", "gates", ")", "\n", "\n", "", "return", "{", "\"predictions\"", ":", "probabilities", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.FishMoeModel.create_model": [[165, 233], ["tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.layers.batch_normalization", "tensorflow.layers.batch_normalization", "fish_modules.FishGate", "fish_modules.FishGate.forward", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "is_training", ",", "\n", "num_mixtures", "=", "None", ",", "\n", "l2_penalty", "=", "1e-8", ",", "\n", "filter_size", "=", "2", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\"Creates a Mixture of (Logistic) Experts model.\n         It also includes the possibility of gating the probabilities\n         The model consists of a per-class softmax distribution over a\n         configurable number of logistic classifiers. One of the classifiers in the\n         mixture is not trained, and always predicts 0.\n        Args:\n          model_input: 'batch_size' x 'num_features' matrix of input features.\n          vocab_size: The number of classes in the dataset.\n          is_training: Is this the training phase ?\n          num_mixtures: The number of mixtures (excluding a dummy 'expert' that\n            always predicts the non-existence of an entity).\n          l2_penalty: How much to penalize the squared magnitudes of parameter\n            values.\n        Returns:\n          A dictionary with a tensor containing the probability predictions of the\n          model in the 'predictions' key. The dimensions of the tensor are\n          batch_size x num_classes.\n        \"\"\"", "\n", "num_mixtures", "=", "num_mixtures", "or", "FLAGS", ".", "moe_num_mixtures", "\n", "l2_penalty", "=", "FLAGS", ".", "moe_l2", "\n", "\n", "gate_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "(", "num_mixtures", "+", "1", ")", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"gates\"", ")", "\n", "\n", "expert_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "num_mixtures", ",", "\n", "activation_fn", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"experts\"", ")", "\n", "\n", "gating_distribution", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reshape", "(", "\n", "gate_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "+", "1", "]", ")", ")", "# (Batch * #Labels) x (num_mixtures + 1)", "\n", "expert_distribution", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reshape", "(", "\n", "expert_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "]", ")", ")", "# (Batch * #Labels) x num_mixtures", "\n", "\n", "probabilities_by_class_and_batch", "=", "tf", ".", "reduce_sum", "(", "\n", "gating_distribution", "[", ":", ",", ":", "num_mixtures", "]", "*", "expert_distribution", ",", "1", ")", "\n", "probabilities", "=", "tf", ".", "reshape", "(", "probabilities_by_class_and_batch", ",", "\n", "[", "-", "1", ",", "vocab_size", "]", ")", "\n", "probabilities", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "probabilities", ",", "training", "=", "is_training", ")", "\n", "\n", "fish_gate", "=", "fish_modules", ".", "FishGate", "(", "hidden_size", "=", "vocab_size", ",", "\n", "k", "=", "2", ",", "\n", "dropout_rate", "=", "0.9", ",", "\n", "is_training", "=", "is_training", ")", "\n", "\n", "probabilities", "=", "fish_gate", ".", "forward", "(", "probabilities", ")", "\n", "probabilities", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "probabilities", ")", "\n", "\n", "probabilities", "=", "tf", ".", "layers", ".", "dense", "(", "probabilities", ",", "vocab_size", ",", "use_bias", "=", "True", ",", "activation", "=", "tf", ".", "nn", ".", "softmax", ")", "\n", "\n", "return", "{", "\"predictions\"", ":", "probabilities", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.FishMoeModel2.create_model": [[238, 304], ["tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "fish_modules.FishGate", "fish_modules.FishGate.forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "is_training", ",", "\n", "num_mixtures", "=", "None", ",", "\n", "l2_penalty", "=", "1e-8", ",", "\n", "filter_size", "=", "2", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\"Creates a Mixture of (Logistic) Experts model.\n         It also includes the possibility of gating the probabilities\n         The model consists of a per-class softmax distribution over a\n         configurable number of logistic classifiers. One of the classifiers in the\n         mixture is not trained, and always predicts 0.\n        Args:\n          model_input: 'batch_size' x 'num_features' matrix of input features.\n          vocab_size: The number of classes in the dataset.\n          is_training: Is this the training phase ?\n          num_mixtures: The number of mixtures (excluding a dummy 'expert' that\n            always predicts the non-existence of an entity).\n          l2_penalty: How much to penalize the squared magnitudes of parameter\n            values.\n        Returns:\n          A dictionary with a tensor containing the probability predictions of the\n          model in the 'predictions' key. The dimensions of the tensor are\n          batch_size x num_classes.\n        \"\"\"", "\n", "num_mixtures", "=", "num_mixtures", "or", "FLAGS", ".", "moe_num_mixtures", "\n", "l2_penalty", "=", "FLAGS", ".", "moe_l2", "\n", "\n", "gate_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "(", "num_mixtures", "+", "1", ")", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"gates\"", ")", "\n", "\n", "expert_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "num_mixtures", ",", "\n", "activation_fn", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"experts\"", ")", "\n", "\n", "gating_distribution", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reshape", "(", "\n", "gate_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "+", "1", "]", ")", ")", "# (Batch * #Labels) x (num_mixtures + 1)", "\n", "expert_distribution", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reshape", "(", "\n", "expert_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "]", ")", ")", "# (Batch * #Labels) x num_mixtures", "\n", "\n", "probabilities_by_class_and_batch", "=", "tf", ".", "reduce_sum", "(", "\n", "gating_distribution", "[", ":", ",", ":", "num_mixtures", "]", "*", "expert_distribution", ",", "1", ")", "\n", "probabilities", "=", "tf", ".", "reshape", "(", "probabilities_by_class_and_batch", ",", "\n", "[", "-", "1", ",", "vocab_size", "]", ")", "\n", "\n", "fish_gate", "=", "fish_modules", ".", "FishGate", "(", "hidden_size", "=", "vocab_size", ",", "\n", "k", "=", "filter_size", ",", "\n", "dropout_rate", "=", "0.8", ",", "\n", "is_training", "=", "is_training", ")", "\n", "\n", "probabilities", "=", "fish_gate", ".", "forward", "(", "probabilities", ")", "\n", "\n", "# probabilities = tf.layers.dense(probabilities, vocab_size, use_bias=True, activation=tf.nn.softmax)", "\n", "\n", "return", "{", "\"predictions\"", ":", "probabilities", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.FishMoeModel4.create_model": [[309, 365], ["tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.batch_normalization", "tensorflow.layers.batch_normalization", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.batch_normalization", "tensorflow.layers.batch_normalization", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.batch_normalization", "tensorflow.layers.batch_normalization", "fish_modules.FishGate", "fish_modules.FishGate.forward", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "is_training", ",", "\n", "num_mixtures", "=", "None", ",", "\n", "l2_penalty", "=", "1e-8", ",", "\n", "filter_size", "=", "2", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\"Creates a Mixture of (Logistic) Experts model.\n         It also includes the possibility of gating the probabilities\n         The model consists of a per-class softmax distribution over a\n         configurable number of logistic classifiers. One of the classifiers in the\n         mixture is not trained, and always predicts 0.\n        Args:\n          model_input: 'batch_size' x 'num_features' matrix of input features.\n          vocab_size: The number of classes in the dataset.\n          is_training: Is this the training phase ?\n          num_mixtures: The number of mixtures (excluding a dummy 'expert' that\n            always predicts the non-existence of an entity).\n          l2_penalty: How much to penalize the squared magnitudes of parameter\n            values.\n        Returns:\n          A dictionary with a tensor containing the probability predictions of the\n          model in the 'predictions' key. The dimensions of the tensor are\n          batch_size x num_classes.\n        \"\"\"", "\n", "num_mixtures", "=", "num_mixtures", "or", "FLAGS", ".", "moe_num_mixtures", "\n", "l2_penalty", "=", "FLAGS", ".", "moe_l2", "\n", "\n", "fc1", "=", "tf", ".", "layers", ".", "dense", "(", "model_input", ",", "vocab_size", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "kernel_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ")", "\n", "fc1", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "fc1", ",", "training", "=", "is_training", ")", "\n", "if", "is_training", ":", "\n", "            ", "fc1", "=", "tf", ".", "nn", ".", "dropout", "(", "fc1", ",", "keep_prob", "=", "0.9", ")", "\n", "\n", "", "fc2", "=", "tf", ".", "layers", ".", "dense", "(", "fc1", ",", "vocab_size", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "kernel_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ")", "\n", "fc2", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "fc2", ",", "training", "=", "is_training", ")", "\n", "if", "is_training", ":", "\n", "            ", "fc2", "=", "tf", ".", "nn", ".", "dropout", "(", "fc2", ",", "keep_prob", "=", "0.9", ")", "\n", "\n", "", "fc3", "=", "tf", ".", "layers", ".", "dense", "(", "fc2", ",", "vocab_size", ",", "activation", "=", "tf", ".", "nn", ".", "sigmoid", ",", "\n", "kernel_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ")", "\n", "fc3", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "fc3", ",", "training", "=", "is_training", ")", "\n", "if", "is_training", ":", "\n", "            ", "fc3", "=", "tf", ".", "nn", ".", "dropout", "(", "fc3", ",", "keep_prob", "=", "0.9", ")", "\n", "\n", "", "fish_gate", "=", "fish_modules", ".", "FishGate", "(", "hidden_size", "=", "vocab_size", ",", "\n", "k", "=", "filter_size", ",", "\n", "dropout_rate", "=", "0.9", ",", "\n", "is_training", "=", "is_training", ")", "\n", "probabilities", "=", "fish_gate", ".", "forward", "(", "fc3", ")", "\n", "\n", "# probabilities = tf.layers.dense(probabilities, vocab_size, use_bias=True, activation=tf.nn.softmax)", "\n", "\n", "return", "{", "\"predictions\"", ":", "probabilities", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.FishMoeModel3.create_model": [[370, 439], ["tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.layers.batch_normalization", "tensorflow.layers.batch_normalization", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.batch_normalization", "tensorflow.layers.batch_normalization", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm", "tensorflow.layers.batch_normalization", "tensorflow.layers.batch_normalization", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.layers.dropout", "tensorflow.layers.dropout", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer"], "methods", ["None"], ["def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "is_training", ",", "\n", "num_mixtures", "=", "None", ",", "\n", "l2_penalty", "=", "1e-6", ",", "\n", "filter_size", "=", "2", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\"Creates a Mixture of (Logistic) Experts model.\n         It also includes the possibility of gating the probabilities\n         The model consists of a per-class softmax distribution over a\n         configurable number of logistic classifiers. One of the classifiers in the\n         mixture is not trained, and always predicts 0.\n        Args:\n          model_input: 'batch_size' x 'num_features' matrix of input features.\n          vocab_size: The number of classes in the dataset.\n          is_training: Is this the training phase ?\n          num_mixtures: The number of mixtures (excluding a dummy 'expert' that\n            always predicts the non-existence of an entity).\n          l2_penalty: How much to penalize the squared magnitudes of parameter\n            values.\n        Returns:\n          A dictionary with a tensor containing the probability predictions of the\n          model in the 'predictions' key. The dimensions of the tensor are\n          batch_size x num_classes.\n        \"\"\"", "\n", "num_mixtures", "=", "num_mixtures", "or", "FLAGS", ".", "moe_num_mixtures", "\n", "l2_penalty", "=", "FLAGS", ".", "moe_l2", "\n", "\n", "gate_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "(", "num_mixtures", "+", "1", ")", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"gates\"", ")", "\n", "\n", "expert_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "num_mixtures", ",", "\n", "activation_fn", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"experts\"", ")", "\n", "\n", "gating_distribution", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reshape", "(", "\n", "gate_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "+", "1", "]", ")", ")", "# (Batch * #Labels) x (num_mixtures + 1)", "\n", "expert_distribution", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reshape", "(", "\n", "expert_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "]", ")", ")", "# (Batch * #Labels) x num_mixtures", "\n", "\n", "probabilities_by_class_and_batch", "=", "tf", ".", "reduce_sum", "(", "\n", "gating_distribution", "[", ":", ",", ":", "num_mixtures", "]", "*", "expert_distribution", ",", "1", ")", "\n", "probabilities0", "=", "tf", ".", "reshape", "(", "probabilities_by_class_and_batch", ",", "\n", "[", "-", "1", ",", "vocab_size", "]", ")", "\n", "probabilities0", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "probabilities0", ",", "training", "=", "is_training", ")", "\n", "\n", "r_activation0", "=", "tf", ".", "layers", ".", "dense", "(", "probabilities0", ",", "vocab_size", "*", "filter_size", ",", "use_bias", "=", "True", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "r_activation0", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "r_activation0", ",", "training", "=", "is_training", ")", "\n", "if", "is_training", ":", "\n", "            ", "r_activation0", "=", "tf", ".", "layers", ".", "dropout", "(", "r_activation0", ",", "0.9", ")", "\n", "", "r_activation1", "=", "tf", ".", "layers", ".", "dense", "(", "r_activation0", ",", "vocab_size", ",", "use_bias", "=", "True", ",", "activation", "=", "None", ")", "\n", "\n", "probabilities1", "=", "probabilities0", "+", "r_activation1", "\n", "probabilities1", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "probabilities1", ")", "\n", "probabilities1", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "probabilities1", ",", "training", "=", "is_training", ")", "\n", "probabilities2", "=", "tf", ".", "layers", ".", "dense", "(", "probabilities1", ",", "vocab_size", ",", "use_bias", "=", "True", ",", "activation", "=", "tf", ".", "nn", ".", "softmax", ")", "\n", "\n", "return", "{", "\"predictions\"", ":", "probabilities2", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.MoeModel2.create_model": [[444, 542], ["tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.batch_normalization", "tensorflow.layers.batch_normalization", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.layers.batch_normalization", "tensorflow.layers.batch_normalization", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer"], "methods", ["None"], ["def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "is_training", ",", "\n", "num_mixtures", "=", "None", ",", "\n", "l2_penalty", "=", "1e-8", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\"Creates a Mixture of (Logistic) Experts model.\n         It also includes the possibility of gating the probabilities\n         The model consists of a per-class softmax distribution over a\n         configurable number of logistic classifiers. One of the classifiers in the\n         mixture is not trained, and always predicts 0.\n        Args:\n          model_input: 'batch_size' x 'num_features' matrix of input features.\n          vocab_size: The number of classes in the dataset.\n          is_training: Is this the training phase ?\n          num_mixtures: The number of mixtures (excluding a dummy 'expert' that\n            always predicts the non-existence of an entity).\n          l2_penalty: How much to penalize the squared magnitudes of parameter\n            values.\n        Returns:\n          A dictionary with a tensor containing the probability predictions of the\n          model in the 'predictions' key. The dimensions of the tensor are\n          batch_size x num_classes.\n        \"\"\"", "\n", "num_mixtures", "=", "3", "\n", "low_rank_gating", "=", "FLAGS", ".", "moe_low_rank_gating", "\n", "l2_penalty", "=", "FLAGS", ".", "moe_l2", "\n", "gating_probabilities", "=", "FLAGS", ".", "moe_prob_gating", "\n", "gating_input", "=", "FLAGS", ".", "moe_prob_gating_input", "\n", "\n", "if", "low_rank_gating", "==", "-", "1", ":", "\n", "            ", "gate_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "(", "num_mixtures", "+", "1", ")", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"gates\"", ")", "\n", "", "else", ":", "\n", "            ", "gate_activations1", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "low_rank_gating", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"gates1\"", ")", "\n", "gate_activations", "=", "slim", ".", "fully_connected", "(", "\n", "gate_activations1", ",", "\n", "vocab_size", "*", "(", "num_mixtures", "+", "1", ")", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"gates2\"", ")", "\n", "\n", "", "expert_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "num_mixtures", ",", "\n", "activation_fn", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"experts\"", ")", "\n", "\n", "gating_distribution", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reshape", "(", "\n", "gate_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "+", "1", "]", ")", ")", "# (Batch * #Labels) x (num_mixtures + 1)", "\n", "expert_distribution", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reshape", "(", "\n", "expert_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "]", ")", ")", "# (Batch * #Labels) x num_mixtures", "\n", "\n", "probabilities_by_class_and_batch", "=", "tf", ".", "reduce_sum", "(", "\n", "gating_distribution", "[", ":", ",", ":", "num_mixtures", "]", "*", "expert_distribution", ",", "1", ")", "\n", "probabilities", "=", "tf", ".", "reshape", "(", "probabilities_by_class_and_batch", ",", "\n", "[", "-", "1", ",", "vocab_size", "]", ")", "\n", "\n", "filter1", "=", "tf", ".", "layers", ".", "dense", "(", "probabilities", ",", "\n", "vocab_size", "*", "2", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "\"v-filter1\"", ")", "\n", "filter1", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "filter1", ",", "training", "=", "is_training", ")", "\n", "\n", "if", "is_training", ":", "\n", "            ", "filter1", "=", "tf", ".", "nn", ".", "dropout", "(", "filter1", ",", "0.8", ")", "\n", "\n", "", "filter2", "=", "tf", ".", "layers", ".", "dense", "(", "filter1", ",", "\n", "vocab_size", ",", "\n", "use_bias", "=", "False", ",", "\n", "activation", "=", "None", ",", "\n", "name", "=", "\"v-filter2\"", ")", "\n", "\n", "probabilities", "=", "probabilities", "+", "filter2", "\n", "probabilities", "=", "tf", ".", "nn", ".", "relu", "(", "probabilities", ")", "\n", "probabilities", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "probabilities", ",", "training", "=", "is_training", ")", "\n", "\n", "probabilities", "=", "tf", ".", "layers", ".", "dense", "(", "probabilities", ",", "vocab_size", ",", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "sigmoid", ",", "name", "=", "\"v-final_output\"", ")", "\n", "\n", "return", "{", "\"predictions\"", ":", "probabilities", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.JuhanMoeModel.create_model": [[547, 623], ["tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.batch_normalization", "tensorflow.layers.batch_normalization", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.layers.batch_normalization", "tensorflow.layers.batch_normalization", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer"], "methods", ["None"], ["def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "is_training", ",", "\n", "num_mixtures", "=", "None", ",", "\n", "l2_penalty", "=", "1e-8", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\"Creates a Mixture of (Logistic) Experts model.\n         The model consists of a per-class softmax distribution over a\n         configurable number of logistic classifiers. One of the classifiers in the\n         mixture is not trained, and always predicts 0.\n        Args:\n          model_input: 'batch_size' x 'num_features' matrix of input features.\n          vocab_size: The number of classes in the dataset.\n          num_mixtures: The number of mixtures (excluding a dummy 'expert' that\n            always predicts the non-existence of an entity).\n          l2_penalty: How much to penalize the squared magnitudes of parameter\n            values.\n        Returns:\n          A dictionary with a tensor containing the probability predictions of the\n          model in the 'predictions' key. The dimensions of the tensor are\n          batch_size x num_classes.\n        \"\"\"", "\n", "num_mixtures", "=", "3", "\n", "\n", "gate_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "(", "num_mixtures", "+", "1", ")", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"gates\"", ")", "\n", "expert_activations", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "\n", "vocab_size", "*", "num_mixtures", ",", "\n", "activation_fn", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ",", "\n", "scope", "=", "\"experts\"", ")", "\n", "\n", "gating_distribution", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reshape", "(", "\n", "gate_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "+", "1", "]", ")", ")", "# (Batch * #Labels) x (num_mixtures + 1)", "\n", "expert_distribution", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reshape", "(", "\n", "expert_activations", ",", "\n", "[", "-", "1", ",", "num_mixtures", "]", ")", ")", "# (Batch * #Labels) x num_mixtures", "\n", "\n", "final_probabilities_by_class_and_batch", "=", "tf", ".", "reduce_sum", "(", "\n", "gating_distribution", "[", ":", ",", ":", "num_mixtures", "]", "*", "expert_distribution", ",", "1", ")", "\n", "probabilities", "=", "tf", ".", "reshape", "(", "final_probabilities_by_class_and_batch", ",", "\n", "[", "-", "1", ",", "vocab_size", "]", ")", "\n", "if", "is_training", ":", "\n", "            ", "probabilities", "=", "tf", ".", "nn", ".", "dropout", "(", "probabilities", ",", "0.8", ")", "\n", "\n", "", "filter1", "=", "tf", ".", "layers", ".", "dense", "(", "probabilities", ",", "\n", "vocab_size", "*", "2", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "\n", "name", "=", "\"v-filter1\"", ")", "\n", "filter1", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "filter1", ",", "training", "=", "is_training", ")", "\n", "if", "is_training", ":", "\n", "            ", "filter1", "=", "tf", ".", "nn", ".", "dropout", "(", "filter1", ",", "0.8", ")", "\n", "\n", "", "filter2", "=", "tf", ".", "layers", ".", "dense", "(", "filter1", ",", "\n", "vocab_size", ",", "\n", "use_bias", "=", "False", ",", "\n", "activation", "=", "None", ",", "\n", "name", "=", "\"v-filter2\"", ")", "\n", "\n", "probabilities", "=", "probabilities", "+", "filter2", "\n", "probabilities", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "probabilities", ")", "\n", "probabilities", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "probabilities", ",", "training", "=", "is_training", ")", "\n", "\n", "probabilities", "=", "tf", ".", "layers", ".", "dense", "(", "probabilities", ",", "vocab_size", ",", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "sigmoid", ",", "name", "=", "\"v-final_output\"", ")", "\n", "\n", "return", "{", "\"predictions\"", ":", "probabilities", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.FourLayerBatchNeuralModel.create_model": [[626, 685], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.sigmoid", "tensorflow.sigmoid", "model_input.get_shape().as_list", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "model_input.get_shape"], "methods", ["None"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "is_training", ",", "\n", "l2_penalty", "=", "1e-7", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "model_input_dim", "=", "model_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "fc1_weights", "=", "tf", ".", "get_variable", "(", "\"fc1_weights\"", ",", "\n", "[", "model_input_dim", ",", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"fc1_weights\"", ",", "fc1_weights", ")", "\n", "fc1_activation", "=", "tf", ".", "matmul", "(", "model_input", ",", "fc1_weights", ")", "\n", "fc1_activation", "=", "tf", ".", "nn", ".", "relu", "(", "fc1_activation", ")", "\n", "fc1_activation", "=", "slim", ".", "batch_norm", "(", "\n", "fc1_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"fc1_activation_bn\"", ")", "\n", "\n", "fc2_weights", "=", "tf", ".", "get_variable", "(", "\"fc2_weights\"", ",", "\n", "[", "vocab_size", ",", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"fc2_weights\"", ",", "fc2_weights", ")", "\n", "fc2_activation", "=", "tf", ".", "matmul", "(", "fc1_activation", ",", "fc2_weights", ")", "\n", "fc2_activation", "=", "tf", ".", "nn", ".", "relu", "(", "fc2_activation", ")", "\n", "fc2_activation", "=", "slim", ".", "batch_norm", "(", "\n", "fc2_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"fc2_activation_bn\"", ")", "\n", "\n", "fc3_weights", "=", "tf", ".", "get_variable", "(", "\"fc3_weights\"", ",", "\n", "[", "vocab_size", ",", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"fc3_weights\"", ",", "fc3_weights", ")", "\n", "fc3_activation", "=", "tf", ".", "matmul", "(", "fc2_activation", ",", "fc3_weights", ")", "\n", "fc3_activation", "=", "tf", ".", "nn", ".", "relu", "(", "fc3_activation", ")", "\n", "fc3_activation", "=", "slim", ".", "batch_norm", "(", "\n", "fc3_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "\"fc3_activation_bn\"", ")", "\n", "\n", "fc4_weights", "=", "tf", ".", "get_variable", "(", "\"fc4_weights\"", ",", "\n", "[", "vocab_size", ",", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "fc4_activation", "=", "tf", ".", "matmul", "(", "fc3_activation", ",", "fc4_weights", ")", "\n", "cluster_biases", "=", "tf", ".", "get_variable", "(", "\"fc4_bias\"", ",", "\n", "[", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.01", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"fc4_bias\"", ",", "cluster_biases", ")", "\n", "fc4_activation", "+=", "cluster_biases", "\n", "\n", "fc4_activation", "=", "tf", ".", "sigmoid", "(", "fc4_activation", ")", "\n", "\n", "return", "{", "\"predictions\"", ":", "fc4_activation", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningThreeNnModel.create_model": [[688, 715], ["tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer"], "methods", ["None"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "is_training", ",", "\n", "l2_penalty", "=", "1e-8", ",", "\n", "ortho_reg", "=", "0", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "fc1", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "vocab_size", ",", "activation_fn", "=", "None", ",", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ")", "\n", "fc1", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "inputs", "=", "fc1", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ")", "\n", "if", "is_training", ":", "\n", "            ", "fc1", "=", "tf", ".", "nn", ".", "dropout", "(", "fc1", ",", "keep_prob", "=", "0.5", ")", "\n", "\n", "", "fc2", "=", "slim", ".", "fully_connected", "(", "\n", "fc1", ",", "vocab_size", ",", "activation_fn", "=", "None", ",", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ")", "\n", "fc2", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "inputs", "=", "fc2", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ")", "\n", "if", "is_training", ":", "\n", "            ", "fc2", "=", "tf", ".", "nn", ".", "dropout", "(", "fc2", ",", "keep_prob", "=", "0.5", ")", "\n", "\n", "", "fc3", "=", "slim", ".", "fully_connected", "(", "\n", "fc2", ",", "vocab_size", ",", "activation_fn", "=", "tf", ".", "nn", ".", "sigmoid", ",", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.1", ")", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ")", "\n", "\n", "return", "{", "\"predictions\"", ":", "fc3", ",", "\n", "\"regularization_loss\"", ":", "ortho_reg", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model": [[718, 750], ["tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer"], "methods", ["None"], ["    ", "def", "create_model", "(", "self", ",", "\n", "model_input", ",", "\n", "vocab_size", ",", "\n", "is_training", ",", "\n", "l2_penalty", "=", "1e-8", ",", "\n", "ortho_reg", "=", "0", ",", "\n", "**", "unused_params", ")", ":", "\n", "        ", "fc1", "=", "slim", ".", "fully_connected", "(", "\n", "model_input", ",", "vocab_size", ",", "activation_fn", "=", "None", ",", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ")", "\n", "fc1", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "inputs", "=", "fc1", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ")", "\n", "# if is_training:", "\n", "#     fc1 = tf.nn.dropout(fc1, keep_prob=0.5)", "\n", "\n", "fc2", "=", "slim", ".", "fully_connected", "(", "\n", "fc1", ",", "vocab_size", ",", "activation_fn", "=", "None", ",", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ")", "\n", "fc2", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "inputs", "=", "fc2", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ")", "\n", "# if is_training:", "\n", "#     fc2 = tf.nn.dropout(fc2, keep_prob=0.5)", "\n", "\n", "fc3", "=", "slim", ".", "fully_connected", "(", "\n", "fc2", ",", "vocab_size", ",", "activation_fn", "=", "None", ",", "biases_initializer", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ")", "\n", "fc3", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "inputs", "=", "fc3", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ")", "\n", "\n", "fc4", "=", "slim", ".", "fully_connected", "(", "\n", "fc3", ",", "vocab_size", ",", "activation_fn", "=", "tf", ".", "nn", ".", "sigmoid", ",", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.1", ")", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "l2_penalty", ")", ")", "\n", "\n", "return", "{", "\"predictions\"", ":", "fc4", ",", "\n", "\"regularization_loss\"", ":", "ortho_reg", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.__init__": [[351, 374], ["tensorflow.ConfigProto", "tensorflow.ConfigProto"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cluster", ",", "task", ",", "train_dir", ",", "model", ",", "reader", ",", "model_exporter", ",", "\n", "log_device_placement", "=", "True", ",", "max_steps", "=", "None", ",", "\n", "export_model_steps", "=", "1000", ")", ":", "\n", "        ", "\"\"\"\"Creates a Trainer.\n        Args:\n          cluster: A tf.train.ClusterSpec if the execution is distributed.\n            None otherwise.\n          task: A TaskSpec describing the job type and the task index.\n        \"\"\"", "\n", "\n", "self", ".", "cluster", "=", "cluster", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "is_master", "=", "(", "task", ".", "type", "==", "\"master\"", "and", "task", ".", "index", "==", "0", ")", "\n", "self", ".", "train_dir", "=", "train_dir", "\n", "self", ".", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "allow_soft_placement", "=", "True", ",", "log_device_placement", "=", "log_device_placement", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "reader", "=", "reader", "\n", "self", ".", "model_exporter", "=", "model_exporter", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "max_steps_reached", "=", "False", "\n", "self", ".", "export_model_steps", "=", "export_model_steps", "\n", "self", ".", "last_model_export_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.run": [[379, 499], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "train.Trainer.start_server_if_distributed", "train.Trainer.get_meta_filename", "tensorflow.train.Supervisor", "tensorflow.train.Supervisor", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.train.Supervisor.Stop", "train.Trainer.remove_training_directory", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "json.load", "tensorflow.Graph().as_default", "tensorflow.Graph().as_default", "train.task_as_string", "tensorflow.train.Supervisor.managed_session", "train.task_as_string", "open", "tensorflow.logging.error", "tensorflow.logging.error", "tensorflow.logging.error", "tensorflow.logging.error", "tensorflow.logging.error", "tensorflow.logging.error", "exit", "open", "fout.write", "train.Trainer.recover_model", "tensorflow.device", "tensorflow.device", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer", "tensorflow.logging.info", "tensorflow.logging.info", "str", "str", "json.dumps", "tensorflow.Graph", "tensorflow.Graph", "train.Trainer.build_model", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "train.task_as_string", "time.time", "sess.run", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.train.Supervisor.should_stop", "time.time", "time.time", "eval_util.calculate_hit_at_one", "eval_util.calculate_precision_at_equal_recall_rate", "eval_util.calculate_gap", "time.time", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.train.Supervisor.summary_writer.add_summary", "tensorflow.train.Supervisor.summary_writer.add_summary", "tensorflow.train.Supervisor.summary_writer.add_summary", "tensorflow.train.Supervisor.summary_writer.add_summary", "tensorflow.train.Supervisor.summary_writer.flush", "tensorflow.logging.info", "tensorflow.logging.info", "train.task_as_string", "utils.MakeSummary", "utils.MakeSummary", "utils.MakeSummary", "utils.MakeSummary", "train.Trainer.export_model", "str", "str"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.start_server_if_distributed", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.get_meta_filename", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.remove_training_directory", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.recover_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.build_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.ParameterServer.run", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.calculate_hit_at_one", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.calculate_precision_at_equal_recall_rate", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.calculate_gap", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.export_model"], ["", "def", "run", "(", "self", ",", "start_new_model", "=", "False", ")", ":", "\n", "        ", "\"\"\"Performs training on the currently defined Tensorflow graph.\n        Returns:\n          A tuple of the training Hit@1 and the training PERR.\n        \"\"\"", "\n", "if", "self", ".", "is_master", "and", "start_new_model", ":", "\n", "            ", "self", ".", "remove_training_directory", "(", "self", ".", "train_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "train_dir", ")", "\n", "\n", "", "model_flags_dict", "=", "{", "\n", "\"model\"", ":", "FLAGS", ".", "model", ",", "\n", "\"feature_sizes\"", ":", "FLAGS", ".", "feature_sizes", ",", "\n", "\"feature_names\"", ":", "FLAGS", ".", "feature_names", ",", "\n", "\"frame_features\"", ":", "FLAGS", ".", "frame_features", ",", "\n", "\"label_loss\"", ":", "FLAGS", ".", "label_loss", ",", "\n", "}", "\n", "flags_json_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_dir", ",", "\"model_flags.json\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "flags_json_path", ")", ":", "\n", "            ", "existing_flags", "=", "json", ".", "load", "(", "open", "(", "flags_json_path", ")", ")", "\n", "if", "existing_flags", "!=", "model_flags_dict", ":", "\n", "                ", "logging", ".", "error", "(", "\"Model flags do not match existing file %s. Please \"", "\n", "\"delete the file, change --train_dir, or pass flag \"", "\n", "\"--start_new_model\"", ",", "\n", "flags_json_path", ")", "\n", "logging", ".", "error", "(", "\"Ran model with flags: %s\"", ",", "str", "(", "model_flags_dict", ")", ")", "\n", "logging", ".", "error", "(", "\"Previously ran with flags: %s\"", ",", "str", "(", "existing_flags", ")", ")", "\n", "exit", "(", "1", ")", "\n", "", "", "else", ":", "\n", "# Write the file.", "\n", "            ", "with", "open", "(", "flags_json_path", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "fout", ".", "write", "(", "json", ".", "dumps", "(", "model_flags_dict", ")", ")", "\n", "\n", "", "", "target", ",", "device_fn", "=", "self", ".", "start_server_if_distributed", "(", ")", "\n", "\n", "meta_filename", "=", "self", ".", "get_meta_filename", "(", "start_new_model", ",", "self", ".", "train_dir", ")", "\n", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "graph", ":", "\n", "            ", "if", "meta_filename", ":", "\n", "                ", "saver", "=", "self", ".", "recover_model", "(", "meta_filename", ")", "\n", "\n", "", "with", "tf", ".", "device", "(", "device_fn", ")", ":", "\n", "                ", "if", "not", "meta_filename", ":", "\n", "                    ", "saver", "=", "self", ".", "build_model", "(", "self", ".", "model", ",", "self", ".", "reader", ")", "\n", "\n", "", "global_step", "=", "tf", ".", "get_collection", "(", "\"global_step\"", ")", "[", "0", "]", "\n", "loss", "=", "tf", ".", "get_collection", "(", "\"loss\"", ")", "[", "0", "]", "\n", "predictions", "=", "tf", ".", "get_collection", "(", "\"predictions\"", ")", "[", "0", "]", "\n", "labels", "=", "tf", ".", "get_collection", "(", "\"labels\"", ")", "[", "0", "]", "\n", "train_op", "=", "tf", ".", "get_collection", "(", "\"train_op\"", ")", "[", "0", "]", "\n", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "\n", "", "", "sv", "=", "tf", ".", "train", ".", "Supervisor", "(", "\n", "graph", ",", "\n", "logdir", "=", "self", ".", "train_dir", ",", "\n", "init_op", "=", "init_op", ",", "\n", "is_chief", "=", "self", ".", "is_master", ",", "\n", "global_step", "=", "global_step", ",", "\n", "save_model_secs", "=", "15", "*", "60", ",", "\n", "save_summaries_secs", "=", "120", ",", "\n", "saver", "=", "saver", ")", "\n", "\n", "logging", ".", "info", "(", "\"%s: Starting managed session.\"", ",", "task_as_string", "(", "self", ".", "task", ")", ")", "\n", "with", "sv", ".", "managed_session", "(", "target", ",", "config", "=", "self", ".", "config", ")", "as", "sess", ":", "\n", "            ", "try", ":", "\n", "                ", "logging", ".", "info", "(", "\"%s: Entering training loop.\"", ",", "task_as_string", "(", "self", ".", "task", ")", ")", "\n", "while", "(", "not", "sv", ".", "should_stop", "(", ")", ")", "and", "(", "not", "self", ".", "max_steps_reached", ")", ":", "\n", "                    ", "batch_start_time", "=", "time", ".", "time", "(", ")", "\n", "_", ",", "global_step_val", ",", "loss_val", ",", "predictions_val", ",", "labels_val", "=", "sess", ".", "run", "(", "\n", "[", "train_op", ",", "global_step", ",", "loss", ",", "predictions", ",", "labels", "]", ")", "\n", "seconds_per_batch", "=", "time", ".", "time", "(", ")", "-", "batch_start_time", "\n", "examples_per_second", "=", "labels_val", ".", "shape", "[", "0", "]", "/", "seconds_per_batch", "\n", "\n", "if", "self", ".", "max_steps", "and", "self", ".", "max_steps", "<=", "global_step_val", ":", "\n", "                        ", "self", ".", "max_steps_reached", "=", "True", "\n", "\n", "", "if", "self", ".", "is_master", "and", "global_step_val", "%", "10", "==", "0", "and", "self", ".", "train_dir", ":", "\n", "                        ", "eval_start_time", "=", "time", ".", "time", "(", ")", "\n", "hit_at_one", "=", "eval_util", ".", "calculate_hit_at_one", "(", "predictions_val", ",", "labels_val", ")", "\n", "perr", "=", "eval_util", ".", "calculate_precision_at_equal_recall_rate", "(", "predictions_val", ",", "\n", "labels_val", ")", "\n", "gap", "=", "eval_util", ".", "calculate_gap", "(", "predictions_val", ",", "labels_val", ")", "\n", "eval_end_time", "=", "time", ".", "time", "(", ")", "\n", "eval_time", "=", "eval_end_time", "-", "eval_start_time", "\n", "\n", "logging", ".", "info", "(", "\"training step \"", "+", "str", "(", "global_step_val", ")", "+", "\" | Loss: \"", "+", "(", "\"%.2f\"", "%", "loss_val", ")", "+", "\n", "\" Examples/sec: \"", "+", "(", "\"%.2f\"", "%", "examples_per_second", ")", "+", "\" | Hit@1: \"", "+", "\n", "(", "\"%.2f\"", "%", "hit_at_one", ")", "+", "\" PERR: \"", "+", "(", "\"%.2f\"", "%", "perr", ")", "+", "\n", "\" GAP: \"", "+", "(", "\"%.2f\"", "%", "gap", ")", ")", "\n", "\n", "sv", ".", "summary_writer", ".", "add_summary", "(", "\n", "utils", ".", "MakeSummary", "(", "\"model/Training_Hit@1\"", ",", "hit_at_one", ")", ",", "\n", "global_step_val", ")", "\n", "sv", ".", "summary_writer", ".", "add_summary", "(", "\n", "utils", ".", "MakeSummary", "(", "\"model/Training_Perr\"", ",", "perr", ")", ",", "global_step_val", ")", "\n", "sv", ".", "summary_writer", ".", "add_summary", "(", "\n", "utils", ".", "MakeSummary", "(", "\"model/Training_GAP\"", ",", "gap", ")", ",", "global_step_val", ")", "\n", "sv", ".", "summary_writer", ".", "add_summary", "(", "\n", "utils", ".", "MakeSummary", "(", "\"global_step/Examples/Second\"", ",", "\n", "examples_per_second", ")", ",", "global_step_val", ")", "\n", "sv", ".", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "# Exporting the model every x steps", "\n", "time_to_export", "=", "(", "(", "self", ".", "last_model_export_step", "==", "0", ")", "or", "\n", "(", "global_step_val", "-", "self", ".", "last_model_export_step", "\n", ">=", "self", ".", "export_model_steps", ")", ")", "\n", "\n", "if", "self", ".", "is_master", "and", "time_to_export", ":", "\n", "                            ", "self", ".", "export_model", "(", "global_step_val", ",", "sv", ".", "saver", ",", "sv", ".", "save_path", ",", "sess", ")", "\n", "self", ".", "last_model_export_step", "=", "global_step_val", "\n", "", "", "else", ":", "\n", "                        ", "logging", ".", "info", "(", "\"training step \"", "+", "str", "(", "global_step_val", ")", "+", "\" | Loss: \"", "+", "\n", "(", "\"%.2f\"", "%", "loss_val", ")", "+", "\" Examples/sec: \"", "+", "(", "\"%.2f\"", "%", "examples_per_second", ")", ")", "\n", "", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "                ", "logging", ".", "info", "(", "\"%s: Done training -- epoch limit reached.\"", ",", "\n", "task_as_string", "(", "self", ".", "task", ")", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"%s: Exited training loop.\"", ",", "task_as_string", "(", "self", ".", "task", ")", ")", "\n", "sv", ".", "Stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.export_model": [[501, 516], ["saver.save", "tensorflow.logging.info", "tensorflow.logging.info", "train.Trainer.model_exporter.export_model", "train.task_as_string"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.export_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string"], ["", "def", "export_model", "(", "self", ",", "global_step_val", ",", "saver", ",", "save_path", ",", "session", ")", ":", "\n", "# If the model has already been exported at this step, return.", "\n", "        ", "if", "global_step_val", "==", "self", ".", "last_model_export_step", ":", "\n", "            ", "return", "\n", "\n", "", "last_checkpoint", "=", "saver", ".", "save", "(", "session", ",", "save_path", ",", "global_step_val", ")", "\n", "\n", "model_dir", "=", "\"{0}/export/step_{1}\"", ".", "format", "(", "self", ".", "train_dir", ",", "global_step_val", ")", "\n", "logging", ".", "info", "(", "\"%s: Exporting the model at step %s to %s.\"", ",", "\n", "task_as_string", "(", "self", ".", "task", ")", ",", "global_step_val", ",", "model_dir", ")", "\n", "\n", "self", ".", "model_exporter", ".", "export_model", "(", "\n", "model_dir", "=", "model_dir", ",", "\n", "global_step_val", "=", "global_step_val", ",", "\n", "last_checkpoint", "=", "last_checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.start_server_if_distributed": [[518, 534], ["tensorflow.logging.info", "tensorflow.logging.info", "train.start_server", "tensorflow.train.replica_device_setter", "tensorflow.train.replica_device_setter", "train.task_as_string", "train.Trainer.cluster.as_dict"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.start_server", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string"], ["", "def", "start_server_if_distributed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Starts a server if the execution is distributed.\"\"\"", "\n", "\n", "if", "self", ".", "cluster", ":", "\n", "            ", "logging", ".", "info", "(", "\"%s: Starting trainer within cluster %s.\"", ",", "\n", "task_as_string", "(", "self", ".", "task", ")", ",", "self", ".", "cluster", ".", "as_dict", "(", ")", ")", "\n", "server", "=", "start_server", "(", "self", ".", "cluster", ",", "self", ".", "task", ")", "\n", "target", "=", "server", ".", "target", "\n", "device_fn", "=", "tf", ".", "train", ".", "replica_device_setter", "(", "\n", "ps_device", "=", "\"/job:ps\"", ",", "\n", "worker_device", "=", "\"/job:%s/task:%d\"", "%", "(", "self", ".", "task", ".", "type", ",", "self", ".", "task", ".", "index", ")", ",", "\n", "cluster", "=", "self", ".", "cluster", ")", "\n", "", "else", ":", "\n", "            ", "target", "=", "\"\"", "\n", "device_fn", "=", "\"\"", "\n", "", "return", "(", "target", ",", "device_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.remove_training_directory": [[535, 547], ["tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.gfile.DeleteRecursively", "tensorflow.gfile.DeleteRecursively", "train.task_as_string", "tensorflow.logging.error", "tensorflow.logging.error", "train.task_as_string"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string"], ["", "def", "remove_training_directory", "(", "self", ",", "train_dir", ")", ":", "\n", "        ", "\"\"\"Removes the training directory.\"\"\"", "\n", "try", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "\"%s: Removing existing train directory.\"", ",", "\n", "task_as_string", "(", "self", ".", "task", ")", ")", "\n", "gfile", ".", "DeleteRecursively", "(", "train_dir", ")", "\n", "", "except", ":", "\n", "            ", "logging", ".", "error", "(", "\n", "\"%s: Failed to delete directory \"", "+", "train_dir", "+", "\n", "\" when starting a new model. Please delete it manually and\"", "+", "\n", "\" try again.\"", ",", "task_as_string", "(", "self", ".", "task", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.get_meta_filename": [[548, 567], ["tensorflow.train.latest_checkpoint", "tensorflow.train.latest_checkpoint", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.gfile.Exists", "tensorflow.gfile.Exists", "tensorflow.logging.info", "tensorflow.logging.info", "train.task_as_string", "train.task_as_string", "train.task_as_string"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string"], ["", "", "def", "get_meta_filename", "(", "self", ",", "start_new_model", ",", "train_dir", ")", ":", "\n", "        ", "if", "start_new_model", ":", "\n", "            ", "logging", ".", "info", "(", "\"%s: Flag 'start_new_model' is set. Building a new model.\"", ",", "\n", "task_as_string", "(", "self", ".", "task", ")", ")", "\n", "return", "None", "\n", "\n", "", "latest_checkpoint", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "train_dir", ")", "\n", "if", "not", "latest_checkpoint", ":", "\n", "            ", "logging", ".", "info", "(", "\"%s: No checkpoint file found. Building a new model.\"", ",", "\n", "task_as_string", "(", "self", ".", "task", ")", ")", "\n", "return", "None", "\n", "\n", "", "meta_filename", "=", "latest_checkpoint", "+", "\".meta\"", "\n", "if", "not", "gfile", ".", "Exists", "(", "meta_filename", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"%s: No meta graph file found. Building a new model.\"", ",", "\n", "task_as_string", "(", "self", ".", "task", ")", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "meta_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.recover_model": [[568, 572], ["tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.train.import_meta_graph", "tensorflow.train.import_meta_graph", "train.task_as_string"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string"], ["", "", "def", "recover_model", "(", "self", ",", "meta_filename", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"%s: Restoring from meta graph file %s\"", ",", "\n", "task_as_string", "(", "self", ".", "task", ")", ",", "meta_filename", ")", "\n", "return", "tf", ".", "train", ".", "import_meta_graph", "(", "meta_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.Trainer.build_model": [[573, 594], ["train.find_class_by_name", "train.build_graph", "tensorflow.train.Saver", "tensorflow.train.Saver", "train.find_class_by_name"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.find_class_by_name", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.build_graph", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.find_class_by_name"], ["", "def", "build_model", "(", "self", ",", "model", ",", "reader", ")", ":", "\n", "        ", "\"\"\"Find the model and build the graph.\"\"\"", "\n", "\n", "label_loss_fn", "=", "find_class_by_name", "(", "FLAGS", ".", "label_loss", ",", "[", "losses", "]", ")", "(", ")", "\n", "optimizer_class", "=", "find_class_by_name", "(", "FLAGS", ".", "optimizer", ",", "[", "tf", ".", "train", "]", ")", "\n", "\n", "build_graph", "(", "reader", "=", "reader", ",", "\n", "model", "=", "model", ",", "\n", "optimizer_class", "=", "optimizer_class", ",", "\n", "clip_gradient_norm", "=", "FLAGS", ".", "clip_gradient_norm", ",", "\n", "train_data_pattern", "=", "FLAGS", ".", "train_data_pattern", ",", "\n", "label_loss_fn", "=", "label_loss_fn", ",", "\n", "base_learning_rate", "=", "FLAGS", ".", "base_learning_rate", ",", "\n", "learning_rate_decay", "=", "FLAGS", ".", "learning_rate_decay", ",", "\n", "learning_rate_decay_examples", "=", "FLAGS", ".", "learning_rate_decay_examples", ",", "\n", "regularization_penalty", "=", "FLAGS", ".", "regularization_penalty", ",", "\n", "num_readers", "=", "FLAGS", ".", "num_readers", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "num_epochs", "=", "FLAGS", ".", "num_epochs", ")", "\n", "\n", "return", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "0", ",", "keep_checkpoint_every_n_hours", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.ParameterServer.__init__": [[614, 624], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cluster", ",", "task", ")", ":", "\n", "        ", "\"\"\"Creates a ParameterServer.\n        Args:\n          cluster: A tf.train.ClusterSpec if the execution is distributed.\n            None otherwise.\n          task: A TaskSpec describing the job type and the task index.\n        \"\"\"", "\n", "\n", "self", ".", "cluster", "=", "cluster", "\n", "self", ".", "task", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.ParameterServer.run": [[625, 632], ["tensorflow.logging.info", "tensorflow.logging.info", "train.start_server", "start_server.join", "train.task_as_string", "train.ParameterServer.cluster.as_dict"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.start_server", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Starts the parameter server.\"\"\"", "\n", "\n", "logging", ".", "info", "(", "\"%s: Starting parameter server within cluster %s.\"", ",", "\n", "task_as_string", "(", "self", ".", "task", ")", ",", "self", ".", "cluster", ".", "as_dict", "(", ")", ")", "\n", "server", "=", "start_server", "(", "self", ".", "cluster", ",", "self", ".", "task", ")", "\n", "server", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.validate_class_name": [[115, 139], ["tensorflow.flags.FlagsError", "getattr", "issubclass", "tensorflow.flags.FlagsError"], "function", ["None"], ["", "def", "validate_class_name", "(", "flag_value", ",", "category", ",", "modules", ",", "expected_superclass", ")", ":", "\n", "    ", "\"\"\"Checks that the given string matches a class of the expected type.\n      Args:\n        flag_value: A string naming the class to instantiate.\n        category: A string used further describe the class in error messages\n                  (e.g. 'model', 'reader', 'loss').\n        modules: A list of modules to search for the given class.\n        expected_superclass: A class that the given class should inherit from.\n      Raises:\n        FlagsError: If the given class could not be found or if the first class\n        found with that name doesn't inherit from the expected superclass.\n      Returns:\n        True if a class was found that matches the given constraints.\n      \"\"\"", "\n", "candidates", "=", "[", "getattr", "(", "module", ",", "flag_value", ",", "None", ")", "for", "module", "in", "modules", "]", "\n", "for", "candidate", "in", "candidates", ":", "\n", "        ", "if", "not", "candidate", ":", "\n", "            ", "continue", "\n", "", "if", "not", "issubclass", "(", "candidate", ",", "expected_superclass", ")", ":", "\n", "            ", "raise", "flags", ".", "FlagsError", "(", "\"%s '%s' doesn't inherit from %s.\"", "%", "\n", "(", "category", ",", "flag_value", ",", "\n", "expected_superclass", ".", "__name__", ")", ")", "\n", "", "return", "True", "\n", "", "raise", "flags", ".", "FlagsError", "(", "\"Unable to find %s '%s'.\"", "%", "(", "category", ",", "flag_value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.get_input_data_tensors": [[141, 185], ["tensorflow.logging.info", "tensorflow.name_scope", "data_pattern.split", "list", "tensorflow.logging.info", "tensorflow.train.string_input_producer", "tensorflow.train.shuffle_batch_join", "tensorflow.gfile.Glob", "list.extend", "IOError", "str", "reader.prepare_reader", "str", "len", "range"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.prepare_reader"], ["", "def", "get_input_data_tensors", "(", "reader", ",", "\n", "data_pattern", ",", "\n", "batch_size", "=", "1000", ",", "\n", "num_epochs", "=", "None", ",", "\n", "num_readers", "=", "1", ")", ":", "\n", "    ", "\"\"\"Creates the section of the graph which reads the training data.\n      Args:\n        reader: A class which parses the training data.\n        data_pattern: A 'glob' style path to the data files.\n        batch_size: How many examples to process at a time.\n        num_epochs: How many passes to make over the training data. Set to 'None'\n                    to run indefinitely.\n        num_readers: How many I/O threads to use.\n      Returns:\n        A tuple containing the features tensor, labels tensor, and optionally a\n        tensor containing the number of frames per video. The exact dimensions\n        depend on the reader being used.\n      Raises:\n        IOError: If no files matching the given pattern were found.\n      \"\"\"", "\n", "logging", ".", "info", "(", "\"Using batch size of \"", "+", "str", "(", "batch_size", ")", "+", "\" for training.\"", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"train_input\"", ")", ":", "\n", "        ", "file_dirs", "=", "data_pattern", ".", "split", "(", "\",\"", ")", "\n", "files", "=", "list", "(", ")", "\n", "for", "f", "in", "file_dirs", ":", "\n", "            ", "cur_file", "=", "gfile", ".", "Glob", "(", "f", ")", "\n", "files", ".", "extend", "(", "cur_file", ")", "\n", "", "if", "not", "files", ":", "\n", "            ", "raise", "IOError", "(", "\"Unable to find training files. data_pattern='\"", "+", "\n", "data_pattern", "+", "\"'.\"", ")", "\n", "", "logging", ".", "info", "(", "\"Number of training files: %s.\"", ",", "str", "(", "len", "(", "files", ")", ")", ")", "\n", "filename_queue", "=", "tf", ".", "train", ".", "string_input_producer", "(", "\n", "files", ",", "num_epochs", "=", "num_epochs", ",", "shuffle", "=", "True", ")", "\n", "training_data", "=", "[", "\n", "reader", ".", "prepare_reader", "(", "filename_queue", ")", "for", "_", "in", "range", "(", "num_readers", ")", "\n", "]", "\n", "\n", "return", "tf", ".", "train", ".", "shuffle_batch_join", "(", "\n", "training_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "capacity", "=", "batch_size", "*", "5", ",", "\n", "min_after_dequeue", "=", "batch_size", ",", "\n", "allow_smaller_final_batch", "=", "True", ",", "\n", "enqueue_many", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.find_class_by_name": [[187, 191], ["next", "getattr"], "function", ["None"], ["", "", "def", "find_class_by_name", "(", "name", ",", "modules", ")", ":", "\n", "    ", "\"\"\"Searches the provided modules for the named class and returns it.\"\"\"", "\n", "modules", "=", "[", "getattr", "(", "module", ",", "name", ",", "None", ")", "for", "module", "in", "modules", "]", "\n", "return", "next", "(", "a", "for", "a", "in", "modules", "if", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.build_graph": [[193, 346], ["losses.CrossEntropyLoss", "tensorflow.Variable", "tensorflow.python.client.device_lib.list_local_devices", "len", "tensorflow.train.exponential_decay", "tensorflow.summary.scalar", "optimizer_class", "train.get_input_data_tensors", "tensorflow.summary.histogram", "tensorflow.nn.l2_normalize", "tensorflow.split", "tensorflow.split", "tensorflow.split", "range", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "utils.combine_gradients", "optimizer_class.apply_gradients", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.logging.info", "tensorflow.logging.info", "len", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.concat", "tensorflow.cast", "model_input_raw.get_shape", "tensorflow.device", "tensorflow.stack", "tensorflow.name_scope", "utils.clip_gradient_norms", "str", "tensorflow.variable_scope", "tensorflow.arg_scope", "model.create_model", "tensorflow.get_model_variables", "tower_predictions.append", "tensorflow.losses.get_regularization_losses", "tower_reg_losses.append", "tensorflow.get_collection", "tower_label_losses.append", "optimizer_class.compute_gradients", "tower_gradients.append", "tensorflow.summary.histogram", "model.create_model.keys", "label_loss_fn.calculate_loss", "model.create_model.keys", "tensorflow.constant", "tensorflow.add_n", "model.create_model.keys", "tensorflow.control_dependencies", "tensorflow.no_op", "tensorflow.control_dependencies", "tensorflow.identity"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.get_input_data_tensors", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.combine_gradients", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.clip_gradient_norms", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.losses.SoftmaxLoss.calculate_loss"], ["", "def", "build_graph", "(", "reader", ",", "\n", "model", ",", "\n", "train_data_pattern", ",", "\n", "label_loss_fn", "=", "losses", ".", "CrossEntropyLoss", "(", ")", ",", "\n", "batch_size", "=", "1000", ",", "\n", "base_learning_rate", "=", "0.01", ",", "\n", "learning_rate_decay_examples", "=", "1000000", ",", "\n", "learning_rate_decay", "=", "0.95", ",", "\n", "optimizer_class", "=", "tf", ".", "train", ".", "AdamOptimizer", ",", "\n", "clip_gradient_norm", "=", "1.0", ",", "\n", "regularization_penalty", "=", "1", ",", "\n", "num_readers", "=", "1", ",", "\n", "num_epochs", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates the Tensorflow graph.\n      This will only be called once in the life of\n      a training model, because after the graph is created the model will be\n      restored from a meta graph file rather than being recreated.\n      Args:\n        reader: The data file reader. It should inherit from BaseReader.\n        model: The core model (e.g. logistic or neural net). It should inherit\n               from BaseModel.\n        train_data_pattern: glob path to the training data files.\n        label_loss_fn: What kind of loss to apply to the model. It should inherit\n                    from BaseLoss.\n        batch_size: How many examples to process at a time.\n        base_learning_rate: What learning rate to initialize the optimizer with.\n        optimizer_class: Which optimization algorithm to use.\n        clip_gradient_norm: Magnitude of the gradient to clip to.\n        regularization_penalty: How much weight to give the regularization loss\n                                compared to the label loss.\n        num_readers: How many threads to use for I/O operations.\n        num_epochs: How many passes to make over the data. 'None' means an\n                    unlimited number of passes.\n      \"\"\"", "\n", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "name", "=", "\"global_step\"", ")", "\n", "\n", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "gpus", "=", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "gpus", "=", "gpus", "[", ":", "FLAGS", ".", "num_gpu", "]", "\n", "num_gpus", "=", "len", "(", "gpus", ")", "\n", "\n", "if", "num_gpus", ">", "0", ":", "\n", "        ", "logging", ".", "info", "(", "\"Using the following GPUs to train: \"", "+", "str", "(", "gpus", ")", ")", "\n", "num_towers", "=", "num_gpus", "\n", "device_string", "=", "'/gpu:%d'", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "\"No GPUs found. Training on CPU.\"", ")", "\n", "num_towers", "=", "1", "\n", "device_string", "=", "'/cpu:%d'", "\n", "\n", "", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "base_learning_rate", ",", "\n", "global_step", "*", "batch_size", "*", "num_towers", ",", "\n", "learning_rate_decay_examples", ",", "\n", "learning_rate_decay", ",", "\n", "staircase", "=", "True", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "learning_rate", ")", "\n", "\n", "optimizer", "=", "optimizer_class", "(", "learning_rate", ")", "\n", "unused_video_id", ",", "model_input_raw", ",", "labels_batch", ",", "num_frames", "=", "(", "\n", "get_input_data_tensors", "(", "\n", "reader", ",", "\n", "train_data_pattern", ",", "\n", "batch_size", "=", "batch_size", "*", "num_towers", ",", "\n", "num_readers", "=", "num_readers", ",", "\n", "num_epochs", "=", "num_epochs", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"model/input_raw\"", ",", "model_input_raw", ")", "\n", "\n", "feature_dim", "=", "len", "(", "model_input_raw", ".", "get_shape", "(", ")", ")", "-", "1", "\n", "\n", "model_input", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "model_input_raw", ",", "feature_dim", ")", "\n", "\n", "tower_inputs", "=", "tf", ".", "split", "(", "model_input", ",", "num_towers", ")", "\n", "tower_labels", "=", "tf", ".", "split", "(", "labels_batch", ",", "num_towers", ")", "\n", "tower_num_frames", "=", "tf", ".", "split", "(", "num_frames", ",", "num_towers", ")", "\n", "tower_gradients", "=", "[", "]", "\n", "tower_predictions", "=", "[", "]", "\n", "tower_label_losses", "=", "[", "]", "\n", "tower_reg_losses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_towers", ")", ":", "\n", "# For some reason these 'with' statements can't be combined onto the same", "\n", "# line. They have to be nested.", "\n", "        ", "with", "tf", ".", "device", "(", "device_string", "%", "i", ")", ":", "\n", "            ", "with", "(", "tf", ".", "variable_scope", "(", "(", "\"tower\"", ")", ",", "reuse", "=", "True", "if", "i", ">", "0", "else", "None", ")", ")", ":", "\n", "                ", "with", "(", "\n", "slim", ".", "arg_scope", "(", "[", "slim", ".", "model_variable", ",", "slim", ".", "variable", "]", ",", "device", "=", "\"/cpu:0\"", "if", "num_gpus", "!=", "1", "else", "\"/gpu:0\"", ")", ")", ":", "\n", "                    ", "result", "=", "model", ".", "create_model", "(", "\n", "tower_inputs", "[", "i", "]", ",", "\n", "num_frames", "=", "tower_num_frames", "[", "i", "]", ",", "\n", "vocab_size", "=", "reader", ".", "num_classes", ",", "\n", "labels", "=", "tower_labels", "[", "i", "]", ")", "\n", "for", "variable", "in", "slim", ".", "get_model_variables", "(", ")", ":", "\n", "                        ", "tf", ".", "summary", ".", "histogram", "(", "variable", ".", "op", ".", "name", ",", "variable", ")", "\n", "\n", "", "predictions", "=", "result", "[", "\"predictions\"", "]", "\n", "tower_predictions", ".", "append", "(", "predictions", ")", "\n", "\n", "if", "\"loss\"", "in", "result", ".", "keys", "(", ")", ":", "\n", "                        ", "label_loss", "=", "result", "[", "\"loss\"", "]", "\n", "", "else", ":", "\n", "                        ", "label_loss", "=", "label_loss_fn", ".", "calculate_loss", "(", "predictions", ",", "tower_labels", "[", "i", "]", ")", "\n", "\n", "", "if", "\"regularization_loss\"", "in", "result", ".", "keys", "(", ")", ":", "\n", "                        ", "reg_loss", "=", "result", "[", "\"regularization_loss\"", "]", "\n", "", "else", ":", "\n", "                        ", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "", "reg_losses", "=", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", "\n", "if", "reg_losses", ":", "\n", "                        ", "reg_loss", "+=", "tf", ".", "add_n", "(", "reg_losses", ")", "\n", "\n", "", "tower_reg_losses", ".", "append", "(", "reg_loss", ")", "\n", "\n", "# Adds update_ops (e.g., moving average updates in batch normalization) as", "\n", "# a dependency to the train_op.", "\n", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "if", "\"update_ops\"", "in", "result", ".", "keys", "(", ")", ":", "\n", "                        ", "update_ops", "+=", "result", "[", "\"update_ops\"", "]", "\n", "", "if", "update_ops", ":", "\n", "                        ", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "                            ", "barrier", "=", "tf", ".", "no_op", "(", "name", "=", "\"gradient_barrier\"", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "barrier", "]", ")", ":", "\n", "                                ", "label_loss", "=", "tf", ".", "identity", "(", "label_loss", ")", "\n", "\n", "", "", "", "tower_label_losses", ".", "append", "(", "label_loss", ")", "\n", "\n", "# Incorporate the L2 weight penalties etc.", "\n", "final_loss", "=", "regularization_penalty", "*", "reg_loss", "+", "label_loss", "\n", "gradients", "=", "optimizer", ".", "compute_gradients", "(", "final_loss", ",", "\n", "colocate_gradients_with_ops", "=", "False", ")", "\n", "tower_gradients", ".", "append", "(", "gradients", ")", "\n", "", "", "", "", "label_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "stack", "(", "tower_label_losses", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"label_loss\"", ",", "label_loss", ")", "\n", "if", "regularization_penalty", "!=", "0", ":", "\n", "        ", "reg_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "stack", "(", "tower_reg_losses", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"reg_loss\"", ",", "reg_loss", ")", "\n", "", "merged_gradients", "=", "utils", ".", "combine_gradients", "(", "tower_gradients", ")", "\n", "\n", "if", "clip_gradient_norm", ">", "0", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'clip_grads'", ")", ":", "\n", "            ", "merged_gradients", "=", "utils", ".", "clip_gradient_norms", "(", "merged_gradients", ",", "clip_gradient_norm", ")", "\n", "\n", "", "", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "merged_gradients", ",", "global_step", "=", "global_step", ")", "\n", "\n", "tf", ".", "add_to_collection", "(", "\"global_step\"", ",", "global_step", ")", "\n", "tf", ".", "add_to_collection", "(", "\"loss\"", ",", "label_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "\"predictions\"", ",", "tf", ".", "concat", "(", "tower_predictions", ",", "0", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "\"input_batch_raw\"", ",", "model_input_raw", ")", "\n", "tf", ".", "add_to_collection", "(", "\"input_batch\"", ",", "model_input", ")", "\n", "tf", ".", "add_to_collection", "(", "\"num_frames\"", ",", "num_frames", ")", "\n", "tf", ".", "add_to_collection", "(", "\"labels\"", ",", "tf", ".", "cast", "(", "labels_batch", ",", "tf", ".", "float32", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "\"train_op\"", ",", "train_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.get_reader": [[596, 609], ["utils.GetListOfFeatureNamesAndSizes", "readers.YT8MFrameFeatureReader", "readers.YT8MAggregatedFeatureReader"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.GetListOfFeatureNamesAndSizes"], ["", "", "def", "get_reader", "(", ")", ":", "\n", "# Convert feature_names and feature_sizes to lists of values.", "\n", "    ", "feature_names", ",", "feature_sizes", "=", "utils", ".", "GetListOfFeatureNamesAndSizes", "(", "\n", "FLAGS", ".", "feature_names", ",", "FLAGS", ".", "feature_sizes", ")", "\n", "\n", "if", "FLAGS", ".", "frame_features", ":", "\n", "        ", "reader", "=", "readers", ".", "YT8MFrameFeatureReader", "(", "\n", "feature_names", "=", "feature_names", ",", "feature_sizes", "=", "feature_sizes", ")", "\n", "", "else", ":", "\n", "        ", "reader", "=", "readers", ".", "YT8MAggregatedFeatureReader", "(", "\n", "feature_names", "=", "feature_names", ",", "feature_sizes", "=", "feature_sizes", ")", "\n", "\n", "", "return", "reader", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.start_server": [[634, 655], ["tensorflow.train.Server", "ValueError", "ValueError", "tensorflow.train.ClusterSpec", "train.task_as_string", "train.task_as_string"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string"], ["", "", "def", "start_server", "(", "cluster", ",", "task", ")", ":", "\n", "    ", "\"\"\"Creates a Server.\n      Args:\n        cluster: A tf.train.ClusterSpec if the execution is distributed.\n          None otherwise.\n        task: A TaskSpec describing the job type and the task index.\n      \"\"\"", "\n", "\n", "if", "not", "task", ".", "type", ":", "\n", "        ", "raise", "ValueError", "(", "\"%s: The task type must be specified.\"", "%", "\n", "task_as_string", "(", "task", ")", ")", "\n", "", "if", "task", ".", "index", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"%s: The task index must be specified.\"", "%", "\n", "task_as_string", "(", "task", ")", ")", "\n", "\n", "# Create and start a server.", "\n", "", "return", "tf", ".", "train", ".", "Server", "(", "\n", "tf", ".", "train", ".", "ClusterSpec", "(", "cluster", ")", ",", "\n", "protocol", "=", "\"grpc\"", ",", "\n", "job_name", "=", "task", ".", "type", ",", "\n", "task_index", "=", "task", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string": [[657, 659], ["None"], "function", ["None"], ["", "def", "task_as_string", "(", "task", ")", ":", "\n", "    ", "return", "\"/job:%s/task:%s\"", "%", "(", "task", ".", "type", ",", "task", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.main": [[661, 699], ["json.loads", "json.loads.get", "type", "tensorflow.logging.set_verbosity", "tensorflow.logging.info", "os.environ.get", "os.environ.get", "tensorflow.train.ClusterSpec", "json.loads.get", "train.task_as_string", "train.get_reader", "export_model.ModelExporter", "train.Trainer.run", "train.find_class_by_name", "train.ParameterServer.run", "ValueError", "train.Trainer", "train.ParameterServer", "train.task_as_string"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.get", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.get", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.get", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.get", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.get_reader", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.ParameterServer.run", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.find_class_by_name", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.ParameterServer.run", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.train.task_as_string"], ["", "def", "main", "(", "unused_argv", ")", ":", "\n", "# Load the environment.", "\n", "    ", "env", "=", "json", ".", "loads", "(", "os", ".", "environ", ".", "get", "(", "\"TF_CONFIG\"", ",", "\"{}\"", ")", ")", "\n", "\n", "# Load the cluster data from the environment.", "\n", "cluster_data", "=", "env", ".", "get", "(", "\"cluster\"", ",", "None", ")", "\n", "cluster", "=", "tf", ".", "train", ".", "ClusterSpec", "(", "cluster_data", ")", "if", "cluster_data", "else", "None", "\n", "\n", "# Load the task data from the environment.", "\n", "task_data", "=", "env", ".", "get", "(", "\"task\"", ",", "None", ")", "or", "{", "\"type\"", ":", "\"master\"", ",", "\"index\"", ":", "0", "}", "\n", "task", "=", "type", "(", "\"TaskSpec\"", ",", "(", "object", ",", ")", ",", "task_data", ")", "\n", "\n", "# Logging the version.", "\n", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "logging", ".", "info", "(", "\"%s: Tensorflow version: %s.\"", ",", "\n", "task_as_string", "(", "task", ")", ",", "tf", ".", "__version__", ")", "\n", "\n", "# Dispatch to a master, a worker, or a parameter server.", "\n", "if", "not", "cluster", "or", "task", ".", "type", "==", "\"master\"", "or", "task", ".", "type", "==", "\"worker\"", ":", "\n", "        ", "model", "=", "find_class_by_name", "(", "FLAGS", ".", "model", ",", "\n", "[", "frame_level_models", ",", "video_level_models", "]", ")", "(", ")", "\n", "\n", "reader", "=", "get_reader", "(", ")", "\n", "\n", "model_exporter", "=", "export_model", ".", "ModelExporter", "(", "\n", "frame_features", "=", "FLAGS", ".", "frame_features", ",", "\n", "model", "=", "model", ",", "\n", "reader", "=", "reader", ")", "\n", "\n", "Trainer", "(", "cluster", ",", "task", ",", "FLAGS", ".", "train_dir", ",", "model", ",", "reader", ",", "model_exporter", ",", "\n", "FLAGS", ".", "log_device_placement", ",", "FLAGS", ".", "max_steps", ",", "\n", "FLAGS", ".", "export_model_steps", ")", ".", "run", "(", "start_new_model", "=", "FLAGS", ".", "start_new_model", ")", "\n", "\n", "", "elif", "task", ".", "type", "==", "\"ps\"", ":", "\n", "        ", "ParameterServer", "(", "cluster", ",", "task", ")", ".", "run", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"%s: Invalid task_type: %s.\"", "%", "\n", "(", "task_as_string", "(", "task", ")", ",", "task", ".", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.__init__": [[140, 158], ["mean_average_precision_calculator.MeanAveragePrecisionCalculator", "average_precision_calculator.AveragePrecisionCalculator"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_class", ",", "top_k", ")", ":", "\n", "        ", "\"\"\"Construct an EvaluationMetrics object to store the evaluation metrics.\n\n        Args:\n          num_class: A positive integer specifying the number of classes.\n          top_k: A positive integer specifying how many predictions are considered per video.\n\n        Raises:\n          ValueError: An error occurred when MeanAveragePrecisionCalculator cannot\n            not be constructed.\n        \"\"\"", "\n", "self", ".", "sum_hit_at_one", "=", "0.0", "\n", "self", ".", "sum_perr", "=", "0.0", "\n", "self", ".", "sum_loss", "=", "0.0", "\n", "self", ".", "map_calculator", "=", "map_calculator", ".", "MeanAveragePrecisionCalculator", "(", "num_class", ")", "\n", "self", ".", "global_ap_calculator", "=", "ap_calculator", ".", "AveragePrecisionCalculator", "(", ")", "\n", "self", ".", "top_k", "=", "top_k", "\n", "self", ".", "num_examples", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.accumulate": [[159, 192], ["eval_util.calculate_hit_at_one", "eval_util.calculate_precision_at_equal_recall_rate", "numpy.mean", "eval_util.top_k_by_class", "eval_util.EvaluationMetrics.map_calculator.accumulate", "eval_util.EvaluationMetrics.global_ap_calculator.accumulate", "eval_util.flatten", "eval_util.flatten", "sum"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.calculate_hit_at_one", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.calculate_precision_at_equal_recall_rate", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.top_k_by_class", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.accumulate", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.accumulate", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.flatten", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.flatten"], ["", "def", "accumulate", "(", "self", ",", "predictions", ",", "labels", ",", "loss", ")", ":", "\n", "        ", "\"\"\"Accumulate the metrics calculated locally for this mini-batch.\n\n        Args:\n          predictions: A numpy matrix containing the outputs of the model.\n            Dimensions are 'batch' x 'num_classes'.\n          labels: A numpy matrix containing the ground truth labels.\n            Dimensions are 'batch' x 'num_classes'.\n          loss: A numpy array containing the loss for each sample.\n\n        Returns:\n          dictionary: A dictionary storing the metrics for the mini-batch.\n\n        Raises:\n          ValueError: An error occurred when the shape of predictions and actuals\n            does not match.\n        \"\"\"", "\n", "batch_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "mean_hit_at_one", "=", "calculate_hit_at_one", "(", "predictions", ",", "labels", ")", "\n", "mean_perr", "=", "calculate_precision_at_equal_recall_rate", "(", "predictions", ",", "labels", ")", "\n", "mean_loss", "=", "numpy", ".", "mean", "(", "loss", ")", "\n", "\n", "# Take the top 20 predictions.", "\n", "sparse_predictions", ",", "sparse_labels", ",", "num_positives", "=", "top_k_by_class", "(", "predictions", ",", "labels", ",", "self", ".", "top_k", ")", "\n", "self", ".", "map_calculator", ".", "accumulate", "(", "sparse_predictions", ",", "sparse_labels", ",", "num_positives", ")", "\n", "self", ".", "global_ap_calculator", ".", "accumulate", "(", "flatten", "(", "sparse_predictions", ")", ",", "flatten", "(", "sparse_labels", ")", ",", "sum", "(", "num_positives", ")", ")", "\n", "\n", "self", ".", "num_examples", "+=", "batch_size", "\n", "self", ".", "sum_hit_at_one", "+=", "mean_hit_at_one", "*", "batch_size", "\n", "self", ".", "sum_perr", "+=", "mean_perr", "*", "batch_size", "\n", "self", ".", "sum_loss", "+=", "mean_loss", "*", "batch_size", "\n", "\n", "return", "{", "\"hit_at_one\"", ":", "mean_hit_at_one", ",", "\"perr\"", ":", "mean_perr", ",", "\"loss\"", ":", "mean_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.get": [[193, 216], ["eval_util.EvaluationMetrics.map_calculator.peek_map_at_n", "eval_util.EvaluationMetrics.global_ap_calculator.peek_ap_at_n", "ValueError"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.mean_average_precision_calculator.MeanAveragePrecisionCalculator.peek_map_at_n", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.peek_ap_at_n"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate the evaluation metrics for the whole epoch.\n\n        Raises:\n          ValueError: If no examples were accumulated.\n\n        Returns:\n          dictionary: a dictionary storing the evaluation metrics for the epoch. The\n            dictionary has the fields: avg_hit_at_one, avg_perr, avg_loss, and\n            aps (default nan).\n        \"\"\"", "\n", "if", "self", ".", "num_examples", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"total_sample must be positive.\"", ")", "\n", "", "avg_hit_at_one", "=", "self", ".", "sum_hit_at_one", "/", "self", ".", "num_examples", "\n", "avg_perr", "=", "self", ".", "sum_perr", "/", "self", ".", "num_examples", "\n", "avg_loss", "=", "self", ".", "sum_loss", "/", "self", ".", "num_examples", "\n", "\n", "aps", "=", "self", ".", "map_calculator", ".", "peek_map_at_n", "(", ")", "\n", "gap", "=", "self", ".", "global_ap_calculator", ".", "peek_ap_at_n", "(", ")", "\n", "\n", "epoch_info_dict", "=", "{", "}", "\n", "return", "{", "\"avg_hit_at_one\"", ":", "avg_hit_at_one", ",", "\"avg_perr\"", ":", "avg_perr", ",", "\n", "\"avg_loss\"", ":", "avg_loss", ",", "\"aps\"", ":", "aps", ",", "\"gap\"", ":", "gap", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.clear": [[217, 225], ["eval_util.EvaluationMetrics.map_calculator.clear", "eval_util.EvaluationMetrics.global_ap_calculator.clear"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.clear", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear the evaluation metrics and reset the EvaluationMetrics object.\"\"\"", "\n", "self", ".", "sum_hit_at_one", "=", "0.0", "\n", "self", ".", "sum_perr", "=", "0.0", "\n", "self", ".", "sum_loss", "=", "0.0", "\n", "self", ".", "map_calculator", ".", "clear", "(", ")", "\n", "self", ".", "global_ap_calculator", ".", "clear", "(", ")", "\n", "self", ".", "num_examples", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.flatten": [[21, 24], ["None"], "function", ["None"], ["def", "flatten", "(", "l", ")", ":", "\n", "    ", "\"\"\" Merges a list of lists into a single list. \"\"\"", "\n", "return", "[", "item", "for", "sublist", "in", "l", "for", "item", "in", "sublist", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.calculate_hit_at_one": [[26, 41], ["numpy.argmax", "numpy.average", "numpy.arange"], "function", ["None"], ["", "def", "calculate_hit_at_one", "(", "predictions", ",", "actuals", ")", ":", "\n", "    ", "\"\"\"Performs a local (numpy) calculation of the hit at one.\n\n    Args:\n    predictions: Matrix containing the outputs of the model.\n      Dimensions are 'batch' x 'num_classes'.\n    actuals: Matrix containing the ground truth labels.\n      Dimensions are 'batch' x 'num_classes'.\n\n    Returns:\n    float: The average hit at one across the entire batch.\n    \"\"\"", "\n", "top_prediction", "=", "numpy", ".", "argmax", "(", "predictions", ",", "1", ")", "\n", "hits", "=", "actuals", "[", "numpy", ".", "arange", "(", "actuals", ".", "shape", "[", "0", "]", ")", ",", "top_prediction", "]", "\n", "return", "numpy", ".", "average", "(", "hits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.calculate_precision_at_equal_recall_rate": [[43, 69], ["numpy.arange", "int", "numpy.sum", "numpy.argpartition"], "function", ["None"], ["", "def", "calculate_precision_at_equal_recall_rate", "(", "predictions", ",", "actuals", ")", ":", "\n", "    ", "\"\"\"Performs a local (numpy) calculation of the PERR.\n\n    Args:\n    predictions: Matrix containing the outputs of the model.\n      Dimensions are 'batch' x 'num_classes'.\n    actuals: Matrix containing the ground truth labels.\n      Dimensions are 'batch' x 'num_classes'.\n\n    Returns:\n    float: The average precision at equal recall rate across the entire batch.\n    \"\"\"", "\n", "aggregated_precision", "=", "0.0", "\n", "num_videos", "=", "actuals", ".", "shape", "[", "0", "]", "\n", "for", "row", "in", "numpy", ".", "arange", "(", "num_videos", ")", ":", "\n", "        ", "num_labels", "=", "int", "(", "numpy", ".", "sum", "(", "actuals", "[", "row", "]", ")", ")", "\n", "top_indices", "=", "numpy", ".", "argpartition", "(", "predictions", "[", "row", "]", ",", "\n", "-", "num_labels", ")", "[", "-", "num_labels", ":", "]", "\n", "item_precision", "=", "0.0", "\n", "for", "label_index", "in", "top_indices", ":", "\n", "            ", "if", "predictions", "[", "row", "]", "[", "label_index", "]", ">", "0", ":", "\n", "                ", "item_precision", "+=", "actuals", "[", "row", "]", "[", "label_index", "]", "\n", "", "", "item_precision", "/=", "top_indices", ".", "size", "\n", "aggregated_precision", "+=", "item_precision", "\n", "", "aggregated_precision", "/=", "num_videos", "\n", "return", "aggregated_precision", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.calculate_gap": [[71, 90], ["average_precision_calculator.AveragePrecisionCalculator", "eval_util.top_k_by_class", "ap_calculator.AveragePrecisionCalculator.accumulate", "ap_calculator.AveragePrecisionCalculator.peek_ap_at_n", "eval_util.flatten", "eval_util.flatten", "sum"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.top_k_by_class", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.accumulate", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.average_precision_calculator.AveragePrecisionCalculator.peek_ap_at_n", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.flatten", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.flatten"], ["", "def", "calculate_gap", "(", "predictions", ",", "actuals", ",", "top_k", "=", "20", ")", ":", "\n", "    ", "\"\"\"Performs a local (numpy) calculation of the global average precision.\n\n    Only the top_k predictions are taken for each of the videos.\n\n    Args:\n    predictions: Matrix containing the outputs of the model.\n      Dimensions are 'batch' x 'num_classes'.\n    actuals: Matrix containing the ground truth labels.\n      Dimensions are 'batch' x 'num_classes'.\n    top_k: How many predictions to use per video.\n\n    Returns:\n    float: The global average precision.\n    \"\"\"", "\n", "gap_calculator", "=", "ap_calculator", ".", "AveragePrecisionCalculator", "(", ")", "\n", "sparse_predictions", ",", "sparse_labels", ",", "num_positives", "=", "top_k_by_class", "(", "predictions", ",", "actuals", ",", "top_k", ")", "\n", "gap_calculator", ".", "accumulate", "(", "flatten", "(", "sparse_predictions", ")", ",", "flatten", "(", "sparse_labels", ")", ",", "sum", "(", "num_positives", ")", ")", "\n", "return", "gap_calculator", ".", "peek_ap_at_n", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.top_k_by_class": [[92, 127], ["min", "range", "ValueError", "prediction_triplets.extend", "out_predictions[].append", "out_labels[].append", "numpy.sum", "eval_util.top_k_triplets", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.top_k_triplets"], ["", "def", "top_k_by_class", "(", "predictions", ",", "labels", ",", "k", "=", "20", ")", ":", "\n", "    ", "\"\"\"Extracts the top k predictions for each video, sorted by class.\n\n    Args:\n    predictions: A numpy matrix containing the outputs of the model.\n      Dimensions are 'batch' x 'num_classes'.\n    k: the top k non-zero entries to preserve in each prediction.\n\n    Returns:\n    A tuple (predictions,labels, true_positives). 'predictions' and 'labels'\n    are lists of lists of floats. 'true_positives' is a list of scalars. The\n    length of the lists are equal to the number of classes. The entries in the\n    predictions variable are probability predictions, and\n    the corresponding entries in the labels variable are the ground truth for\n    those predictions. The entries in 'true_positives' are the number of true\n    positives for each class in the ground truth.\n\n    Raises:\n    ValueError: An error occurred when the k is not a positive integer.\n    \"\"\"", "\n", "if", "k", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"k must be a positive integer.\"", ")", "\n", "", "k", "=", "min", "(", "k", ",", "predictions", ".", "shape", "[", "1", "]", ")", "\n", "num_classes", "=", "predictions", ".", "shape", "[", "1", "]", "\n", "prediction_triplets", "=", "[", "]", "\n", "for", "video_index", "in", "range", "(", "predictions", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "prediction_triplets", ".", "extend", "(", "top_k_triplets", "(", "predictions", "[", "video_index", "]", ",", "labels", "[", "video_index", "]", ",", "k", ")", ")", "\n", "", "out_predictions", "=", "[", "[", "]", "for", "v", "in", "range", "(", "num_classes", ")", "]", "\n", "out_labels", "=", "[", "[", "]", "for", "v", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "triplet", "in", "prediction_triplets", ":", "\n", "        ", "out_predictions", "[", "triplet", "[", "0", "]", "]", ".", "append", "(", "triplet", "[", "1", "]", ")", "\n", "out_labels", "[", "triplet", "[", "0", "]", "]", ".", "append", "(", "triplet", "[", "2", "]", ")", "\n", "", "out_true_positives", "=", "[", "numpy", ".", "sum", "(", "labels", "[", ":", ",", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "\n", "return", "out_predictions", ",", "out_labels", ",", "out_true_positives", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.top_k_triplets": [[129, 136], ["len", "min", "numpy.argpartition"], "function", ["None"], ["", "def", "top_k_triplets", "(", "predictions", ",", "labels", ",", "k", "=", "20", ")", ":", "\n", "    ", "\"\"\"Get the top_k for a 1-d numpy array. Returns a sparse list of tuples in\n    (prediction, class) format\"\"\"", "\n", "m", "=", "len", "(", "predictions", ")", "\n", "k", "=", "min", "(", "k", ",", "m", ")", "\n", "indices", "=", "numpy", ".", "argpartition", "(", "predictions", ",", "-", "k", ")", "[", "-", "k", ":", "]", "\n", "return", "[", "(", "index", ",", "predictions", "[", "index", "]", ",", "labels", "[", "index", "]", ")", "for", "index", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationV6Module.__init__": [[42, 80], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "feature_size", ",", "\n", "max_frames", ",", "\n", "anchor_size", ",", "\n", "self_attention", ",", "\n", "hidden_layer_size", ",", "\n", "kernel_size", ",", "\n", "output_dim", ",", "\n", "cluster_size", ",", "\n", "add_relu", ",", "\n", "batch_norm", ",", "\n", "is_training", ",", "\n", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize class TriangulationNsCnnIndirectAttentionModule.\n        :param feature_size: int\n        :param max_frames: max_frames x 1\n        :param anchor_size: int\n        :param self_attention: bool\n        :param hidden_layer_size: int\n        :param kernel_size: int\n        :param output_dim: int\n        :param add_relu: bool\n        :param batch_norm: bool\n        :param is_training: bool\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "anchor_size", "=", "anchor_size", "\n", "self", ".", "self_attention", "=", "self_attention", "\n", "self", ".", "hidden_layer_size", "=", "hidden_layer_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "add_relu", "=", "add_relu", "\n", "self", ".", "cluster_size", "=", "cluster_size", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationV6Module.forward": [[81, 139], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "attention_modules.OneFcAttention", "attention_modules.OneFcAttention.forward", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "str", "str"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for TriangulationNsCnnIndirectAttentionModule.\n        :param inputs: (batch_size * max_frames) x feature_size\n        :return: batch_size x output_dim\n        \"\"\"", "\n", "anchor_weights", "=", "tf", ".", "get_variable", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "\n", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "anchor_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "anchor_weights", ")", "\n", "\n", "# Transpose weights for proper subtraction.", "\n", "anchor_weights", "=", "tf", ".", "transpose", "(", "anchor_weights", ")", "\n", "anchor_weights", "=", "tf", ".", "reshape", "(", "anchor_weights", ",", "[", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "# Tile inputs to subtract them with all anchors.", "\n", "tiled_inputs", "=", "tf", ".", "tile", "(", "inputs", ",", "[", "1", ",", "self", ".", "anchor_size", "]", ")", "\n", "spatial", "=", "tf", ".", "subtract", "(", "tiled_inputs", ",", "anchor_weights", ")", "\n", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "\n", "# Normalize the inputs for each frame; Obtain normalized residual vectors.", "\n", "spatial", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "spatial", ",", "2", ")", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "spatial", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "spatial", ",", "1", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial", "=", "slim", ".", "batch_norm", "(", "\n", "spatial", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_bn\"", ")", "\n", "\n", "", "att", "=", "attention_modules", ".", "OneFcAttention", "(", "self", ".", "feature_size", "*", "self", ".", "anchor_size", ",", "self", ".", "max_frames", ",", "\n", "self", ".", "cluster_size", ",", "do_shift", "=", "True", ")", "\n", "activation", "=", "att", ".", "forward", "(", "spatial", ")", "\n", "\n", "hidden_weight", "=", "tf", ".", "get_variable", "(", "\"hidden_weight\"", ",", "\n", "[", "self", ".", "feature_size", "*", "self", ".", "cluster_size", "*", "self", ".", "anchor_size", ",", "\n", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "spatial_activation", "=", "tf", ".", "matmul", "(", "activation", ",", "hidden_weight", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial_activation", "=", "slim", ".", "batch_norm", "(", "\n", "spatial_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_pool2_bn\"", ")", "\n", "\n", "", "spatial_activation", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_activation", ")", "\n", "\n", "return", "spatial_activation", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationV5Module.__init__": [[145, 181], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "feature_size", ",", "\n", "max_frames", ",", "\n", "anchor_size", ",", "\n", "self_attention", ",", "\n", "hidden_layer_size", ",", "\n", "kernel_size", ",", "\n", "output_dim", ",", "\n", "add_relu", ",", "\n", "batch_norm", ",", "\n", "is_training", ",", "\n", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize class TriangulationNsCnnIndirectAttentionModule.\n        :param feature_size: int\n        :param max_frames: max_frames x 1\n        :param anchor_size: int\n        :param self_attention: bool\n        :param hidden_layer_size: int\n        :param kernel_size: int\n        :param output_dim: int\n        :param add_relu: bool\n        :param batch_norm: bool\n        :param is_training: bool\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "anchor_size", "=", "anchor_size", "\n", "self", ".", "self_attention", "=", "self_attention", "\n", "self", ".", "hidden_layer_size", "=", "hidden_layer_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "add_relu", "=", "add_relu", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationV5Module.forward": [[182, 374], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.norm", "tensorflow.norm", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.manip.roll", "tensorflow.manip.roll", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.stack", "tensorflow.stack", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.norm", "tensorflow.norm", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "module_utils.reduce_var", "module_utils.reduce_var", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm.get_shape().as_list", "tensorflow.batch_norm.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "str", "str", "str", "str", "tensorflow.batch_norm.get_shape", "tensorflow.batch_norm.get_shape", "tensorflow.concat.get_shape"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.reduce_var", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.reduce_var"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for TriangulationNsCnnIndirectAttentionModule.\n        :param inputs: (batch_size * max_frames) x feature_size\n        :return: batch_size x output_dim\n        \"\"\"", "\n", "####################################################################################", "\n", "# Get spatial features with t-embedding ############################################", "\n", "####################################################################################", "\n", "anchor_weights", "=", "tf", ".", "get_variable", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "\n", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "anchor_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "anchor_weights", ")", "\n", "\n", "# Transpose weights for proper subtraction.", "\n", "anchor_weights", "=", "tf", ".", "transpose", "(", "anchor_weights", ")", "\n", "anchor_weights", "=", "tf", ".", "reshape", "(", "anchor_weights", ",", "[", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "# Tile inputs to subtract them with all anchors.", "\n", "tiled_inputs", "=", "tf", ".", "tile", "(", "inputs", ",", "[", "1", ",", "self", ".", "anchor_size", "]", ")", "\n", "spatial", "=", "tf", ".", "subtract", "(", "tiled_inputs", ",", "anchor_weights", ")", "\n", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "spatial_norm", "=", "tf", ".", "norm", "(", "spatial", ",", "ord", "=", "2", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "\n", "# Normalize the inputs for each frame; Obtain normalized residual vectors.", "\n", "spatial", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "spatial", ",", "2", ")", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "####################################################################################", "\n", "\n", "####################################################################################", "\n", "# Get temporal features from frame-difference in t-embedded feature. ###############", "\n", "####################################################################################", "\n", "# Shift the input to the right (to subtract frame T-1 from frame T):", "\n", "cloned_spatial", "=", "tf", ".", "manip", ".", "roll", "(", "spatial", ",", "shift", "=", "1", ",", "axis", "=", "1", ")", "\n", "temporal", "=", "tf", ".", "subtract", "(", "spatial", ",", "cloned_spatial", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "# Eliminate the first row.", "\n", "stacks", "=", "tf", ".", "unstack", "(", "temporal", ",", "axis", "=", "1", ")", "\n", "del", "stacks", "[", "0", "]", "\n", "temporal", "=", "tf", ".", "stack", "(", "stacks", ",", "1", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "temporal_norm", "=", "tf", ".", "norm", "(", "temporal", ",", "ord", "=", "2", ",", "axis", "=", "2", ",", "keep_dims", "=", "False", ")", "\n", "temporal", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "temporal", ",", "2", ")", "\n", "\n", "# Both spatial, temporal have shape (batch_size * max_frames) x anchor_size x feature_size", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "\n", "spatial_norm", "=", "tf", ".", "reshape", "(", "spatial_norm", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "anchor_size", "]", ")", "\n", "temporal_norm", "=", "tf", ".", "reshape", "(", "temporal_norm", ",", "[", "-", "1", ",", "self", ".", "max_frames", "-", "1", ",", "self", ".", "anchor_size", "]", ")", "\n", "####################################################################################", "\n", "\n", "####################################################################################", "\n", "# Reduce the number of parameters with non-share CNN ###############################", "\n", "####################################################################################", "\n", "spatial_cnn_weights", "=", "tf", ".", "get_variable", "(", "\"spatial_cnn_weights{}\"", ".", "format", "(", "\"\"", "\n", "if", "self", ".", "scope_id", "is", "None", "\n", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "anchor_size", ",", "self", ".", "kernel_size", ",", "self", ".", "feature_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "temporal_cnn_weights", "=", "tf", ".", "get_variable", "(", "\"temporal_cnn_weights{}\"", ".", "format", "(", "\"\"", "\n", "if", "self", ".", "scope_id", "is", "None", "\n", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "anchor_size", ",", "self", ".", "kernel_size", ",", "self", ".", "feature_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "tp_spatial_cnn_weights", "=", "tf", ".", "transpose", "(", "spatial_cnn_weights", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "tp_temporal_cnn_weights", "=", "tf", ".", "transpose", "(", "temporal_cnn_weights", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "tp_spatial", "=", "tf", ".", "transpose", "(", "spatial", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "tp_temporal", "=", "tf", ".", "transpose", "(", "temporal", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "spatial_output", "=", "tf", ".", "matmul", "(", "tp_spatial", ",", "tp_spatial_cnn_weights", ")", "\n", "temporal_output", "=", "tf", ".", "matmul", "(", "tp_temporal", ",", "tp_temporal_cnn_weights", ")", "\n", "\n", "tp_spatial_output", "=", "tf", ".", "transpose", "(", "spatial_output", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "tp_temporal_output", "=", "tf", ".", "transpose", "(", "temporal_output", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "spatial_output", "=", "tf", ".", "reshape", "(", "tp_spatial_output", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "\n", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "temporal_output", "=", "tf", ".", "reshape", "(", "tp_temporal_output", ",", "[", "-", "1", ",", "self", ".", "max_frames", "-", "1", ",", "\n", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "spatial_output", "=", "tf", ".", "concat", "(", "[", "spatial_output", ",", "spatial_norm", "]", ",", "2", ")", "\n", "temporal_output", "=", "tf", ".", "concat", "(", "[", "temporal_output", ",", "temporal_norm", "]", ",", "2", ")", "\n", "\n", "spatial_mean", "=", "tf", ".", "reduce_mean", "(", "spatial_output", ",", "1", ")", "\n", "temporal_mean", "=", "tf", ".", "reduce_mean", "(", "temporal_output", ",", "1", ")", "\n", "\n", "spatial_variance", "=", "module_utils", ".", "reduce_var", "(", "spatial_output", ",", "1", ")", "\n", "temporal_variance", "=", "module_utils", ".", "reduce_var", "(", "temporal_output", ",", "1", ")", "\n", "\n", "spatial_pool", "=", "tf", ".", "concat", "(", "[", "spatial_mean", ",", "spatial_variance", "]", ",", "1", ")", "\n", "temporal_pool", "=", "tf", ".", "concat", "(", "[", "temporal_mean", ",", "temporal_variance", "]", ",", "1", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial_pool", "=", "slim", ".", "batch_norm", "(", "\n", "spatial_pool", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_pool_bn\"", ")", "\n", "temporal_pool", "=", "slim", ".", "batch_norm", "(", "\n", "temporal_pool", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"temporal_pool_bn\"", ")", "\n", "\n", "", "spatial_dim", "=", "spatial_pool", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "spatial_weights", "=", "tf", ".", "get_variable", "(", "\"spatial_hidden\"", ",", "\n", "[", "spatial_dim", ",", "self", ".", "hidden_layer_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "temporal_dim", "=", "temporal_pool", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "temporal_weights", "=", "tf", ".", "get_variable", "(", "\"temporal_hidden\"", ",", "\n", "[", "temporal_dim", ",", "self", ".", "hidden_layer_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "spatial_activation", "=", "tf", ".", "matmul", "(", "spatial_pool", ",", "spatial_weights", ")", "\n", "temporal_activation", "=", "tf", ".", "matmul", "(", "temporal_pool", ",", "temporal_weights", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial_activation", "=", "slim", ".", "batch_norm", "(", "\n", "spatial_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_activation_bn\"", ")", "\n", "\n", "temporal_activation", "=", "slim", ".", "batch_norm", "(", "\n", "temporal_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"temporal_activation_bn\"", ")", "\n", "\n", "", "spatial_activation", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_activation", ")", "\n", "temporal_activation", "=", "tf", ".", "nn", ".", "relu", "(", "temporal_activation", ")", "\n", "\n", "spatial_weights2", "=", "tf", ".", "get_variable", "(", "\"spatial_hidden2\"", ",", "\n", "[", "self", ".", "hidden_layer_size", ",", "self", ".", "hidden_layer_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "temporal_weights2", "=", "tf", ".", "get_variable", "(", "\"temporal_hidden2\"", ",", "\n", "[", "self", ".", "hidden_layer_size", ",", "self", ".", "hidden_layer_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "spatial_activation", "=", "tf", ".", "matmul", "(", "spatial_activation", ",", "spatial_weights2", ")", "\n", "temporal_activation", "=", "tf", ".", "matmul", "(", "temporal_activation", ",", "temporal_weights2", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial_activation", "=", "slim", ".", "batch_norm", "(", "\n", "spatial_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_pool2_bn\"", ")", "\n", "temporal_activation", "=", "slim", ".", "batch_norm", "(", "\n", "temporal_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"temporal_pool2_bn\"", ")", "\n", "\n", "", "spatial_activation", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_activation", ")", "\n", "temporal_activation", "=", "tf", ".", "nn", ".", "relu", "(", "temporal_activation", ")", "\n", "\n", "####################################################################################", "\n", "# Fuse spatial & temporal features #################################################", "\n", "####################################################################################", "\n", "spatial_temporal_concat", "=", "tf", ".", "concat", "(", "[", "spatial_activation", ",", "temporal_activation", "]", ",", "1", ")", "\n", "\n", "sp_dim", "=", "spatial_temporal_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "sp_weights", "=", "tf", ".", "get_variable", "(", "\"spa_temp_fusion\"", ",", "\n", "[", "sp_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "spatial_temporal_concat", ",", "sp_weights", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"st_fuse_activation_bn\"", ")", "\n", "\n", "", "activation", "=", "tf", ".", "nn", ".", "relu", "(", "activation", ")", "\n", "####################################################################################", "\n", "\n", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationEmbedding.__init__": [[382, 395], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "feature_size", ",", "\n", "max_frames", ",", "\n", "anchor_size", ",", "\n", "batch_norm", ",", "\n", "is_training", ",", "\n", "scope_id", "=", "None", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "anchor_size", "=", "anchor_size", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationEmbedding.forward": [[396, 429], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "str", "str", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for Triangulation Embedding.\n        :param inputs: (batch_size * max_frames) x feature_size\n        :return: (batch_size * max_frames) x (feature_size * anchor_size)\n        \"\"\"", "\n", "anchor_weights", "=", "tf", ".", "get_variable", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "anchor_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "anchor_size", ")", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "anchor_weights", ")", "\n", "\n", "# Normalize each columns.", "\n", "anchor_weights", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "anchor_weights", ",", "axis", "=", "0", ")", "\n", "\n", "# Transpose weights for proper subtraction; See investigation.", "\n", "anchor_weights", "=", "tf", ".", "transpose", "(", "anchor_weights", ")", "\n", "anchor_weights", "=", "tf", ".", "reshape", "(", "anchor_weights", ",", "[", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "# Tile inputs to subtract them with all anchors.", "\n", "tiled_inputs", "=", "tf", ".", "tile", "(", "inputs", ",", "[", "1", ",", "self", ".", "anchor_size", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "t_emb", "=", "tf", ".", "subtract", "(", "tiled_inputs", ",", "anchor_weights", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "\n", "t_emb", "=", "tf", ".", "reshape", "(", "t_emb", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "# Normalize the inputs for each frame.", "\n", "t_emb", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "t_emb", ",", "2", ")", "\n", "t_emb", "=", "tf", ".", "reshape", "(", "t_emb", ",", "[", "-", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "\n", "return", "t_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationCnnIndirectAttentionModule.__init__": [[434, 467], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "feature_size", ",", "\n", "max_frames", ",", "\n", "anchor_size", ",", "\n", "self_attention", ",", "\n", "hidden_layer_size", ",", "\n", "output_dim", ",", "\n", "add_relu", ",", "\n", "batch_norm", ",", "\n", "is_training", ",", "\n", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize class TriangulationIndirectAttentionModule.\n        :param feature_size: int\n        :param max_frames: max_frames x 1\n        :param anchor_size: int\n        :param self_attention: bool\n        :param hidden_layer_size: int\n        :param output_dim: int\n        :param add_relu: bool\n        :param batch_norm: bool\n        :param is_training: bool\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "anchor_size", "=", "anchor_size", "\n", "self", ".", "self_attention", "=", "self_attention", "\n", "self", ".", "hidden_layer_size", "=", "hidden_layer_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "add_relu", "=", "add_relu", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationCnnIndirectAttentionModule.forward": [[468, 632], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.identity", "tensorflow.identity", "tensorflow.manip.roll", "tensorflow.manip.roll", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.stack", "tensorflow.stack", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "module_utils.reduce_var", "module_utils.reduce_var", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.concat.get_shape().as_list", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "str", "str", "tensorflow.concat.get_shape", "tensorflow.concat.get_shape", "tensorflow.concat.get_shape", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.reduce_var", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.reduce_var"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for TriangulationCnnModule.\n        :param inputs: (batch_size * max_frames) x feature_size\n        :return: batch_size x output_dim\n        \"\"\"", "\n", "####################################################################################", "\n", "# Get spatial features with t-embedding ############################################", "\n", "####################################################################################", "\n", "anchor_weights", "=", "tf", ".", "get_variable", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "anchor_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "anchor_size", ")", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "anchor_weights", ")", "\n", "\n", "# Transpose weights for proper subtraction.", "\n", "anchor_weights", "=", "tf", ".", "transpose", "(", "anchor_weights", ")", "\n", "anchor_weights", "=", "tf", ".", "reshape", "(", "anchor_weights", ",", "[", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "# Tile inputs to subtract them with all anchors.", "\n", "tiled_inputs", "=", "tf", ".", "tile", "(", "inputs", ",", "[", "1", ",", "self", ".", "anchor_size", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "spatial", "=", "tf", ".", "subtract", "(", "tiled_inputs", ",", "anchor_weights", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "# Normalize the inputs for each frame; Obtain normalized residual vectors.", "\n", "spatial", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "spatial", ",", "2", ")", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "####################################################################################", "\n", "\n", "####################################################################################", "\n", "# Get temporal features from frame-difference in t-embedded feature. ###############", "\n", "####################################################################################", "\n", "cloned_spatial", "=", "tf", ".", "identity", "(", "spatial", ")", "\n", "# Shift the input to the right (to subtract frame T-1 from frame T):", "\n", "cloned_spatial", "=", "tf", ".", "manip", ".", "roll", "(", "cloned_spatial", ",", "shift", "=", "1", ",", "axis", "=", "1", ")", "\n", "temporal", "=", "tf", ".", "subtract", "(", "spatial", ",", "cloned_spatial", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "# Eliminate the first row.", "\n", "stacks", "=", "tf", ".", "unstack", "(", "temporal", ",", "axis", "=", "1", ")", "\n", "del", "stacks", "[", "0", "]", "\n", "temporal", "=", "tf", ".", "stack", "(", "stacks", ",", "1", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "# It becomes redundant & gives too much weight to main direction.", "\n", "# -> Whiten the representation.", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial", "=", "slim", ".", "batch_norm", "(", "\n", "spatial", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_bn\"", ")", "\n", "\n", "temporal", "=", "slim", ".", "batch_norm", "(", "\n", "temporal", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"temporal_bn\"", ")", "\n", "\n", "# Both spatial, temporal have shape (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "max_frames", "-", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "####################################################################################", "\n", "# Calculate weights for soft attention mechanism ###################################", "\n", "####################################################################################", "\n", "spatial_attention", "=", "tf", ".", "matmul", "(", "spatial", ",", "tf", ".", "transpose", "(", "spatial", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "temporal_attention", "=", "tf", ".", "matmul", "(", "temporal", ",", "tf", ".", "transpose", "(", "temporal", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "\n", "spatial_attention", "=", "tf", ".", "expand_dims", "(", "spatial_attention", ",", "-", "1", ")", "\n", "temporal_attention", "=", "tf", ".", "expand_dims", "(", "temporal_attention", ",", "-", "1", ")", "\n", "\n", "# Zero-out negative weight.", "\n", "spatial_attention", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_attention", ")", "\n", "temporal_attention", "=", "tf", ".", "nn", ".", "relu", "(", "temporal_attention", ")", "\n", "\n", "spatial_attention", "=", "tf", ".", "reduce_sum", "(", "spatial_attention", ",", "axis", "=", "2", ")", "\n", "temporal_attention", "=", "tf", ".", "reduce_sum", "(", "temporal_attention", ",", "axis", "=", "2", ")", "\n", "# -> batch_size x max_frames x 1", "\n", "\n", "spatial_attention_weight", "=", "tf", ".", "nn", ".", "softmax", "(", "spatial_attention", ",", "axis", "=", "1", ")", "\n", "temporal_attention_weight", "=", "tf", ".", "nn", ".", "softmax", "(", "temporal_attention", ",", "axis", "=", "1", ")", "\n", "####################################################################################", "\n", "\n", "####################################################################################", "\n", "# Reduce the number of parameters ##################################################", "\n", "####################################################################################", "\n", "if", "self", ".", "self_attention", ":", "\n", "            ", "spatial_mean", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "spatial", ",", "spatial_attention_weight", ")", ",", "1", ")", "\n", "temporal_mean", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "temporal", ",", "temporal_attention_weight", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "spatial_mean", "=", "tf", ".", "reduce_mean", "(", "spatial", ",", "1", ")", "\n", "temporal_mean", "=", "tf", ".", "reduce_mean", "(", "temporal", ",", "1", ")", "\n", "\n", "", "spatial_variance", "=", "module_utils", ".", "reduce_var", "(", "spatial", ",", "1", ")", "\n", "temporal_variance", "=", "module_utils", ".", "reduce_var", "(", "temporal", ",", "1", ")", "\n", "\n", "spatial_pool", "=", "tf", ".", "concat", "(", "[", "spatial_mean", ",", "spatial_variance", "]", ",", "1", ")", "\n", "temporal_pool", "=", "tf", ".", "concat", "(", "[", "temporal_mean", ",", "temporal_variance", "]", ",", "1", ")", "\n", "\n", "spatial_dim", "=", "spatial_pool", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "spatial_weights", "=", "tf", ".", "get_variable", "(", "\"spatial_hidden\"", ",", "\n", "[", "spatial_dim", ",", "self", ".", "hidden_layer_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "hidden_layer_size", ")", ")", ")", "\n", "\n", "temporal_dim", "=", "temporal_pool", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "temporal_weights", "=", "tf", ".", "get_variable", "(", "\"temporal_hidden\"", ",", "\n", "[", "temporal_dim", ",", "self", ".", "hidden_layer_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "hidden_layer_size", ")", ")", ")", "\n", "\n", "spatial_activation", "=", "tf", ".", "matmul", "(", "spatial_pool", ",", "spatial_weights", ")", "\n", "temporal_activation", "=", "tf", ".", "matmul", "(", "temporal_pool", ",", "temporal_weights", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial_activation", "=", "slim", ".", "batch_norm", "(", "\n", "spatial_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_activation_bn\"", ")", "\n", "\n", "temporal_activation", "=", "slim", ".", "batch_norm", "(", "\n", "temporal_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"temporal_activation_bn\"", ")", "\n", "\n", "", "if", "self", ".", "add_relu", ":", "\n", "            ", "spatial_activation", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_activation", ")", "\n", "temporal_activation", "=", "tf", ".", "nn", ".", "relu", "(", "temporal_activation", ")", "\n", "\n", "####################################################################################", "\n", "# Fuse spatial & temporal features #################################################", "\n", "####################################################################################", "\n", "", "spatial_temporal_concat", "=", "tf", ".", "concat", "(", "[", "spatial_activation", ",", "temporal_activation", "]", ",", "1", ")", "\n", "\n", "sp_dim", "=", "spatial_temporal_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "sp_weights", "=", "tf", ".", "get_variable", "(", "\"spa_temp_fusion\"", ",", "\n", "[", "sp_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "hidden_layer_size", ")", ")", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "spatial_temporal_concat", ",", "sp_weights", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"activation_bn\"", ")", "\n", "\n", "", "if", "self", ".", "add_relu", ":", "\n", "            ", "activation", "=", "tf", ".", "nn", ".", "relu", "(", "activation", ")", "\n", "####################################################################################", "\n", "\n", "", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationMagnitudeNsCnnIndirectAttentionModule.__init__": [[637, 675], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "feature_size", ",", "\n", "max_frames", ",", "\n", "anchor_size", ",", "\n", "self_attention", ",", "\n", "hidden_layer_size", ",", "\n", "kernel_size", ",", "\n", "output_dim", ",", "\n", "add_relu", ",", "\n", "add_norm", ",", "\n", "batch_norm", ",", "\n", "is_training", ",", "\n", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize class TriangulationMagnitudeNsCnnIndirectAttentionModule.\n        :param feature_size: int\n        :param max_frames: max_frames x 1\n        :param anchor_size: int\n        :param self_attention: bool\n        :param hidden_layer_size: int\n        :param kernel_size: int\n        :param output_dim: int\n        :param add_relu: bool\n        :param batch_norm: bool\n        :param is_training: bool\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "anchor_size", "=", "anchor_size", "\n", "self", ".", "self_attention", "=", "self_attention", "\n", "self", ".", "hidden_layer_size", "=", "hidden_layer_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "add_relu", "=", "add_relu", "\n", "self", ".", "add_norm", "=", "add_norm", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationMagnitudeNsCnnIndirectAttentionModule.forward": [[676, 889], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.norm", "tensorflow.norm", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.identity", "tensorflow.identity", "tensorflow.manip.roll", "tensorflow.manip.roll", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.stack", "tensorflow.stack", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.norm", "tensorflow.norm", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "module_utils.reduce_var", "module_utils.reduce_var", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm.get_shape().as_list", "tensorflow.batch_norm.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.orthogonal_initializer", "tensorflow.orthogonal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "str", "str", "str", "str", "tensorflow.batch_norm.get_shape", "tensorflow.batch_norm.get_shape", "tensorflow.concat.get_shape", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.reduce_var", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.reduce_var"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for TriangulationNsCnnIndirectAttentionModule.\n        :param inputs: (batch_size * max_frames) x feature_size\n        :return: batch_size x output_dim\n        \"\"\"", "\n", "####################################################################################", "\n", "# Get spatial features with t-embedding ############################################", "\n", "####################################################################################", "\n", "anchor_weights", "=", "tf", ".", "get_variable", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "anchor_size", "]", ",", "\n", "initializer", "=", "tf", ".", "orthogonal_initializer", "(", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "anchor_weights", ")", "\n", "\n", "# Transpose weights for proper subtraction.", "\n", "anchor_weights", "=", "tf", ".", "transpose", "(", "anchor_weights", ")", "\n", "anchor_weights", "=", "tf", ".", "reshape", "(", "anchor_weights", ",", "[", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "# Tile inputs to subtract them with all anchors.", "\n", "tiled_inputs", "=", "tf", ".", "tile", "(", "inputs", ",", "[", "1", ",", "self", ".", "anchor_size", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "spatial", "=", "tf", ".", "subtract", "(", "tiled_inputs", ",", "anchor_weights", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "spatial_norm", "=", "tf", ".", "norm", "(", "spatial", ",", "ord", "=", "2", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "\n", "# -> (batch_size * max_frames) x anchor_size", "\n", "\n", "# Normalize the inputs for each frame; Obtain normalized residual vectors.", "\n", "spatial", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "spatial", ",", "2", ")", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "spatial_norm", "=", "tf", ".", "reshape", "(", "spatial_norm", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "anchor_size", "]", ")", "\n", "# -> batch_size x max_frames x anchor_size", "\n", "####################################################################################", "\n", "\n", "####################################################################################", "\n", "# Get temporal features from frame-difference in t-embedded feature. ###############", "\n", "####################################################################################", "\n", "cloned_spatial", "=", "tf", ".", "identity", "(", "spatial", ")", "\n", "# Shift the input to the right (to subtract frame T-1 from frame T):", "\n", "cloned_spatial", "=", "tf", ".", "manip", ".", "roll", "(", "cloned_spatial", ",", "shift", "=", "1", ",", "axis", "=", "1", ")", "\n", "temporal", "=", "tf", ".", "subtract", "(", "spatial", ",", "cloned_spatial", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "# Eliminate the first row.", "\n", "stacks", "=", "tf", ".", "unstack", "(", "temporal", ",", "axis", "=", "1", ")", "\n", "del", "stacks", "[", "0", "]", "\n", "temporal", "=", "tf", ".", "stack", "(", "stacks", ",", "1", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "temporal_norm", "=", "tf", ".", "norm", "(", "temporal", ",", "ord", "=", "2", ",", "axis", "=", "2", ",", "keep_dims", "=", "False", ")", "\n", "# -> (batch_size * max_frames) x anchor_size", "\n", "temporal_norm", "=", "tf", ".", "reshape", "(", "temporal_norm", ",", "[", "-", "1", ",", "self", ".", "max_frames", "-", "1", ",", "self", ".", "anchor_size", "]", ")", "\n", "# -> batch_size x (max_frames - 1) x anchor_size", "\n", "\n", "# Normalize the inputs for each frame; Obtain normalized residual vectors.", "\n", "temporal", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "temporal", ",", "2", ")", "\n", "\n", "# Both spatial, temporal have shape (batch_size * max_frames) x anchor_size x feature_size", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "\n", "####################################################################################", "\n", "# Calculate weights for soft attention mechanism ###################################", "\n", "####################################################################################", "\n", "spatial_attention", "=", "tf", ".", "matmul", "(", "spatial", ",", "tf", ".", "transpose", "(", "spatial", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "temporal_attention", "=", "tf", ".", "matmul", "(", "temporal", ",", "tf", ".", "transpose", "(", "temporal", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "\n", "spatial_attention", "=", "tf", ".", "expand_dims", "(", "spatial_attention", ",", "-", "1", ")", "\n", "temporal_attention", "=", "tf", ".", "expand_dims", "(", "temporal_attention", ",", "-", "1", ")", "\n", "\n", "# Zero-out negative weight.", "\n", "spatial_attention", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_attention", ")", "\n", "temporal_attention", "=", "tf", ".", "nn", ".", "relu", "(", "temporal_attention", ")", "\n", "\n", "spatial_attention", "=", "tf", ".", "reduce_sum", "(", "spatial_attention", ",", "axis", "=", "2", ")", "\n", "temporal_attention", "=", "tf", ".", "reduce_sum", "(", "temporal_attention", ",", "axis", "=", "2", ")", "\n", "# -> batch_size x max_frames x 1", "\n", "\n", "spatial_attention_weight", "=", "tf", ".", "nn", ".", "softmax", "(", "spatial_attention", ",", "axis", "=", "1", ")", "\n", "temporal_attention_weight", "=", "tf", ".", "nn", ".", "softmax", "(", "temporal_attention", ",", "axis", "=", "1", ")", "\n", "####################################################################################", "\n", "\n", "####################################################################################", "\n", "# Reduce the number of parameters with non-share CNN ###############################", "\n", "####################################################################################", "\n", "spatial_cnn_weights", "=", "tf", ".", "get_variable", "(", "\"spatial_cnn_weights{}\"", ".", "format", "(", "\"\"", "\n", "if", "self", ".", "scope_id", "is", "None", "\n", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "anchor_size", ",", "self", ".", "kernel_size", ",", "self", ".", "feature_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "kernel_size", "*", "self", ".", "feature_size", ")", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "temporal_cnn_weights", "=", "tf", ".", "get_variable", "(", "\"temporal_cnn_weights{}\"", ".", "format", "(", "\"\"", "\n", "if", "self", ".", "scope_id", "is", "None", "\n", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "anchor_size", ",", "self", ".", "kernel_size", ",", "self", ".", "feature_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "kernel_size", "*", "self", ".", "feature_size", ")", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "tp_spatial_cnn_weights", "=", "tf", ".", "transpose", "(", "spatial_cnn_weights", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "tp_temporal_cnn_weights", "=", "tf", ".", "transpose", "(", "temporal_cnn_weights", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "tp_spatial", "=", "tf", ".", "transpose", "(", "spatial", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "tp_temporal", "=", "tf", ".", "transpose", "(", "temporal", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "spatial_output", "=", "tf", ".", "matmul", "(", "tp_spatial", ",", "tp_spatial_cnn_weights", ")", "\n", "temporal_output", "=", "tf", ".", "matmul", "(", "tp_temporal", ",", "tp_temporal_cnn_weights", ")", "\n", "\n", "tp_spatial_output", "=", "tf", ".", "transpose", "(", "spatial_output", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "tp_temporal_output", "=", "tf", ".", "transpose", "(", "temporal_output", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "# -> (batch_size * max_frames) x anchor_size x kernel_size", "\n", "\n", "# Apply rectified activation.", "\n", "spatial_output", "=", "tf", ".", "reshape", "(", "tp_spatial_output", ",", "[", "-", "1", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "temporal_output", "=", "tf", ".", "reshape", "(", "tp_temporal_output", ",", "[", "-", "1", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "spatial_output", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_output", ")", "\n", "temporal_output", "=", "tf", ".", "nn", ".", "relu", "(", "temporal_output", ")", "\n", "\n", "spatial_output", "=", "tf", ".", "reshape", "(", "spatial_output", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "temporal_output", "=", "tf", ".", "reshape", "(", "temporal_output", ",", "[", "-", "1", ",", "self", ".", "max_frames", "-", "1", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "if", "self", ".", "add_norm", ":", "\n", "            ", "spatial_output", "=", "tf", ".", "concat", "(", "[", "spatial_output", ",", "spatial_norm", "]", ",", "2", ")", "\n", "temporal_output", "=", "tf", ".", "concat", "(", "[", "temporal_output", ",", "temporal_norm", "]", ",", "2", ")", "\n", "\n", "", "if", "self", ".", "self_attention", ":", "\n", "            ", "spatial_mean", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "spatial_output", ",", "spatial_attention_weight", ")", ",", "1", ")", "\n", "temporal_mean", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "temporal_output", ",", "temporal_attention_weight", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "spatial_mean", "=", "tf", ".", "reduce_mean", "(", "spatial_output", ",", "1", ")", "\n", "temporal_mean", "=", "tf", ".", "reduce_mean", "(", "temporal_output", ",", "1", ")", "\n", "\n", "", "spatial_variance", "=", "module_utils", ".", "reduce_var", "(", "spatial_output", ",", "1", ")", "\n", "temporal_variance", "=", "module_utils", ".", "reduce_var", "(", "temporal_output", ",", "1", ")", "\n", "\n", "spatial_pool", "=", "tf", ".", "concat", "(", "[", "spatial_mean", ",", "spatial_variance", "]", ",", "1", ")", "\n", "temporal_pool", "=", "tf", ".", "concat", "(", "[", "temporal_mean", ",", "temporal_variance", "]", ",", "1", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial_pool", "=", "slim", ".", "batch_norm", "(", "\n", "spatial_pool", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_pool_bn\"", ")", "\n", "temporal_pool", "=", "slim", ".", "batch_norm", "(", "\n", "temporal_pool", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"temporal_pool_bn\"", ")", "\n", "\n", "", "spatial_dim", "=", "spatial_pool", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "spatial_weights", "=", "tf", ".", "get_variable", "(", "\"spatial_hidden\"", ",", "\n", "[", "spatial_dim", ",", "self", ".", "hidden_layer_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "hidden_layer_size", ")", ")", ")", "\n", "\n", "temporal_dim", "=", "temporal_pool", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "temporal_weights", "=", "tf", ".", "get_variable", "(", "\"temporal_hidden\"", ",", "\n", "[", "temporal_dim", ",", "self", ".", "hidden_layer_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "hidden_layer_size", ")", ")", ")", "\n", "\n", "spatial_activation", "=", "tf", ".", "matmul", "(", "spatial_pool", ",", "spatial_weights", ")", "\n", "temporal_activation", "=", "tf", ".", "matmul", "(", "temporal_pool", ",", "temporal_weights", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial_activation", "=", "slim", ".", "batch_norm", "(", "\n", "spatial_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_activation_bn\"", ")", "\n", "\n", "temporal_activation", "=", "slim", ".", "batch_norm", "(", "\n", "temporal_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"temporal_activation_bn\"", ")", "\n", "\n", "", "if", "self", ".", "add_relu", ":", "\n", "            ", "spatial_activation", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_activation", ")", "\n", "temporal_activation", "=", "tf", ".", "nn", ".", "relu", "(", "temporal_activation", ")", "\n", "\n", "####################################################################################", "\n", "# Fuse spatial & temporal features #################################################", "\n", "####################################################################################", "\n", "", "spatial_temporal_concat", "=", "tf", ".", "concat", "(", "[", "spatial_activation", ",", "temporal_activation", "]", ",", "1", ")", "\n", "\n", "sp_dim", "=", "spatial_temporal_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "sp_weights", "=", "tf", ".", "get_variable", "(", "\"spa_temp_fusion\"", ",", "\n", "[", "sp_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "output_dim", ")", ")", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "spatial_temporal_concat", ",", "sp_weights", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"activation_bn\"", ")", "\n", "\n", "", "if", "self", ".", "add_relu", ":", "\n", "            ", "activation", "=", "tf", ".", "nn", ".", "relu", "(", "activation", ")", "\n", "####################################################################################", "\n", "\n", "", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationMagnitudeNsCnnNetVladModule.__init__": [[894, 932], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "feature_size", ",", "\n", "max_frames", ",", "\n", "anchor_size", ",", "\n", "self_attention", ",", "\n", "hidden_layer_size", ",", "\n", "kernel_size", ",", "\n", "output_dim", ",", "\n", "add_relu", ",", "\n", "add_norm", ",", "\n", "batch_norm", ",", "\n", "is_training", ",", "\n", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize class TriangulationMagnitudeNsCnnIndirectAttentionModule.\n        :param feature_size: int\n        :param max_frames: max_frames x 1\n        :param anchor_size: int\n        :param self_attention: bool\n        :param hidden_layer_size: int\n        :param kernel_size: int\n        :param output_dim: int\n        :param add_relu: bool\n        :param batch_norm: bool\n        :param is_training: bool\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "anchor_size", "=", "anchor_size", "\n", "self", ".", "self_attention", "=", "self_attention", "\n", "self", ".", "hidden_layer_size", "=", "hidden_layer_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "add_relu", "=", "add_relu", "\n", "self", ".", "add_norm", "=", "add_norm", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationMagnitudeNsCnnNetVladModule.forward": [[933, 1106], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.norm", "tensorflow.norm", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.identity", "tensorflow.identity", "tensorflow.manip.roll", "tensorflow.manip.roll", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.stack", "tensorflow.stack", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.norm", "tensorflow.norm", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "loupe_modules.NetVLAD", "loupe_modules.NetVLAD", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape.get_shape().as_list", "tensorflow.reshape.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.variable_scope", "loupe_modules.NetVLAD.forward", "tensorflow.variable_scope", "tensorflow.variable_scope", "loupe_modules.NetVLAD.forward", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.orthogonal_initializer", "tensorflow.orthogonal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "str", "str", "str", "str", "tensorflow.reshape.get_shape", "tensorflow.reshape.get_shape", "tensorflow.concat.get_shape", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for TriangulationNsCnnIndirectAttentionModule.\n        :param inputs: (batch_size * max_frames) x feature_size\n        :return: batch_size x output_dim\n        \"\"\"", "\n", "####################################################################################", "\n", "# Get spatial features with t-embedding ############################################", "\n", "####################################################################################", "\n", "anchor_weights", "=", "tf", ".", "get_variable", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "anchor_size", "]", ",", "\n", "initializer", "=", "tf", ".", "orthogonal_initializer", "(", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "anchor_weights", ")", "\n", "\n", "# Transpose weights for proper subtraction.", "\n", "anchor_weights", "=", "tf", ".", "transpose", "(", "anchor_weights", ")", "\n", "anchor_weights", "=", "tf", ".", "reshape", "(", "anchor_weights", ",", "[", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "# Tile inputs to subtract them with all anchors.", "\n", "tiled_inputs", "=", "tf", ".", "tile", "(", "inputs", ",", "[", "1", ",", "self", ".", "anchor_size", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "spatial", "=", "tf", ".", "subtract", "(", "tiled_inputs", ",", "anchor_weights", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "spatial_norm", "=", "tf", ".", "norm", "(", "spatial", ",", "ord", "=", "2", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "\n", "# -> (batch_size * max_frames) x anchor_size", "\n", "\n", "# Normalize the inputs for each frame; Obtain normalized residual vectors.", "\n", "spatial", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "spatial", ",", "2", ")", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "spatial_norm", "=", "tf", ".", "reshape", "(", "spatial_norm", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "anchor_size", "]", ")", "\n", "# -> batch_size x max_frames x anchor_size", "\n", "####################################################################################", "\n", "\n", "####################################################################################", "\n", "# Get temporal features from frame-difference in t-embedded feature. ###############", "\n", "####################################################################################", "\n", "cloned_spatial", "=", "tf", ".", "identity", "(", "spatial", ")", "\n", "# Shift the input to the right (to subtract frame T-1 from frame T):", "\n", "cloned_spatial", "=", "tf", ".", "manip", ".", "roll", "(", "cloned_spatial", ",", "shift", "=", "1", ",", "axis", "=", "1", ")", "\n", "temporal", "=", "tf", ".", "subtract", "(", "spatial", ",", "cloned_spatial", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "# Eliminate the first row.", "\n", "stacks", "=", "tf", ".", "unstack", "(", "temporal", ",", "axis", "=", "1", ")", "\n", "del", "stacks", "[", "0", "]", "\n", "temporal", "=", "tf", ".", "stack", "(", "stacks", ",", "1", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "temporal_norm", "=", "tf", ".", "norm", "(", "temporal", ",", "ord", "=", "2", ",", "axis", "=", "2", ",", "keep_dims", "=", "False", ")", "\n", "# -> (batch_size * max_frames) x anchor_size", "\n", "temporal_norm", "=", "tf", ".", "reshape", "(", "temporal_norm", ",", "[", "-", "1", ",", "self", ".", "max_frames", "-", "1", ",", "self", ".", "anchor_size", "]", ")", "\n", "# -> batch_size x (max_frames - 1) x anchor_size", "\n", "\n", "# Normalize the inputs for each frame; Obtain normalized residual vectors.", "\n", "temporal", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "temporal", ",", "2", ")", "\n", "\n", "# Both spatial, temporal have shape (batch_size * max_frames) x anchor_size x feature_size", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "\n", "####################################################################################", "\n", "# Reduce the number of parameters with non-share CNN ###############################", "\n", "####################################################################################", "\n", "spatial_cnn_weights", "=", "tf", ".", "get_variable", "(", "\"spatial_cnn_weights{}\"", ".", "format", "(", "\"\"", "\n", "if", "self", ".", "scope_id", "is", "None", "\n", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "anchor_size", ",", "self", ".", "kernel_size", ",", "self", ".", "feature_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "kernel_size", "*", "self", ".", "feature_size", ")", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "temporal_cnn_weights", "=", "tf", ".", "get_variable", "(", "\"temporal_cnn_weights{}\"", ".", "format", "(", "\"\"", "\n", "if", "self", ".", "scope_id", "is", "None", "\n", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "anchor_size", ",", "self", ".", "kernel_size", ",", "self", ".", "feature_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "kernel_size", "*", "self", ".", "feature_size", ")", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "tp_spatial_cnn_weights", "=", "tf", ".", "transpose", "(", "spatial_cnn_weights", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "tp_temporal_cnn_weights", "=", "tf", ".", "transpose", "(", "temporal_cnn_weights", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "tp_spatial", "=", "tf", ".", "transpose", "(", "spatial", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "tp_temporal", "=", "tf", ".", "transpose", "(", "temporal", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "spatial_output", "=", "tf", ".", "matmul", "(", "tp_spatial", ",", "tp_spatial_cnn_weights", ")", "\n", "temporal_output", "=", "tf", ".", "matmul", "(", "tp_temporal", ",", "tp_temporal_cnn_weights", ")", "\n", "\n", "tp_spatial_output", "=", "tf", ".", "transpose", "(", "spatial_output", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "tp_temporal_output", "=", "tf", ".", "transpose", "(", "temporal_output", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "# -> (batch_size * max_frames) x anchor_size x kernel_size", "\n", "\n", "# Apply rectified activation.", "\n", "spatial_output", "=", "tf", ".", "reshape", "(", "tp_spatial_output", ",", "[", "-", "1", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "temporal_output", "=", "tf", ".", "reshape", "(", "tp_temporal_output", ",", "[", "-", "1", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "spatial_output", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_output", ")", "\n", "temporal_output", "=", "tf", ".", "nn", ".", "relu", "(", "temporal_output", ")", "\n", "\n", "spatial_output", "=", "tf", ".", "reshape", "(", "spatial_output", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "temporal_output", "=", "tf", ".", "reshape", "(", "temporal_output", ",", "[", "-", "1", ",", "self", ".", "max_frames", "-", "1", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "spatial_output", "=", "tf", ".", "concat", "(", "[", "spatial_output", ",", "spatial_norm", "]", ",", "2", ")", "\n", "temporal_output", "=", "tf", ".", "concat", "(", "[", "temporal_output", ",", "temporal_norm", "]", ",", "2", ")", "\n", "\n", "spatial_output", "=", "tf", ".", "reshape", "(", "spatial_output", ",", "[", "-", "1", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "+", "self", ".", "anchor_size", "]", ")", "\n", "temporal_output", "=", "tf", ".", "reshape", "(", "temporal_output", ",", "[", "-", "1", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "+", "self", ".", "anchor_size", "]", ")", "\n", "spatial_dim", "=", "spatial_output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "spatial_vlad", "=", "loupe_modules", ".", "NetVLAD", "(", "feature_size", "=", "spatial_dim", ",", "\n", "max_samples", "=", "self", ".", "max_frames", ",", "\n", "cluster_size", "=", "256", ",", "\n", "output_dim", "=", "self", ".", "hidden_layer_size", ",", "\n", "gating", "=", "False", ",", "\n", "add_batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "is_training", "=", "self", ".", "is_training", ")", "\n", "temporal_dim", "=", "temporal_output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "temporal_vlad", "=", "loupe_modules", ".", "NetVLAD", "(", "feature_size", "=", "temporal_dim", ",", "\n", "max_samples", "=", "self", ".", "max_frames", "-", "1", ",", "\n", "cluster_size", "=", "256", ",", "\n", "output_dim", "=", "self", ".", "hidden_layer_size", ",", "\n", "gating", "=", "False", ",", "\n", "add_batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "is_training", "=", "self", ".", "is_training", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"spatial_vlad\"", ")", ":", "\n", "            ", "spatial_agg", "=", "spatial_vlad", ".", "forward", "(", "spatial_output", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'temporal_vlad'", ")", ":", "\n", "            ", "temporal_agg", "=", "temporal_vlad", ".", "forward", "(", "temporal_output", ")", "\n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial_agg", "=", "slim", ".", "batch_norm", "(", "\n", "spatial_agg", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_activation_bn\"", ")", "\n", "\n", "temporal_agg", "=", "slim", ".", "batch_norm", "(", "\n", "temporal_agg", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"temporal_activation_bn\"", ")", "\n", "\n", "", "if", "self", ".", "add_relu", ":", "\n", "            ", "spatial_agg", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_agg", ")", "\n", "temporal_agg", "=", "tf", ".", "nn", ".", "relu", "(", "temporal_agg", ")", "\n", "\n", "####################################################################################", "\n", "# Fuse spatial & temporal features #################################################", "\n", "####################################################################################", "\n", "", "spatial_temporal_concat", "=", "tf", ".", "concat", "(", "[", "spatial_agg", ",", "temporal_agg", "]", ",", "1", ")", "\n", "\n", "sp_dim", "=", "spatial_temporal_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "sp_weights", "=", "tf", ".", "get_variable", "(", "\"spa_temp_fusion\"", ",", "\n", "[", "sp_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "output_dim", ")", ")", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "spatial_temporal_concat", ",", "sp_weights", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"activation_bn\"", ")", "\n", "\n", "", "if", "self", ".", "add_relu", ":", "\n", "            ", "activation", "=", "tf", ".", "nn", ".", "relu", "(", "activation", ")", "\n", "####################################################################################", "\n", "\n", "", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationNsCnnIndirectAttentionModule.__init__": [[1111, 1147], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "feature_size", ",", "\n", "max_frames", ",", "\n", "anchor_size", ",", "\n", "self_attention", ",", "\n", "hidden_layer_size", ",", "\n", "kernel_size", ",", "\n", "output_dim", ",", "\n", "add_relu", ",", "\n", "batch_norm", ",", "\n", "is_training", ",", "\n", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize class TriangulationNsCnnIndirectAttentionModule.\n        :param feature_size: int\n        :param max_frames: max_frames x 1\n        :param anchor_size: int\n        :param self_attention: bool\n        :param hidden_layer_size: int\n        :param kernel_size: int\n        :param output_dim: int\n        :param add_relu: bool\n        :param batch_norm: bool\n        :param is_training: bool\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "anchor_size", "=", "anchor_size", "\n", "self", ".", "self_attention", "=", "self_attention", "\n", "self", ".", "hidden_layer_size", "=", "hidden_layer_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "add_relu", "=", "add_relu", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationNsCnnIndirectAttentionModule.forward": [[1148, 1343], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.identity", "tensorflow.identity", "tensorflow.manip.roll", "tensorflow.manip.roll", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.stack", "tensorflow.stack", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "module_utils.reduce_var", "module_utils.reduce_var", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm.get_shape().as_list", "tensorflow.batch_norm.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.concat.get_shape().as_list", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.orthogonal_initializer", "tensorflow.orthogonal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "str", "str", "str", "str", "tensorflow.batch_norm.get_shape", "tensorflow.batch_norm.get_shape", "tensorflow.concat.get_shape", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.reduce_var", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.reduce_var"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for TriangulationNsCnnIndirectAttentionModule.\n        :param inputs: (batch_size * max_frames) x feature_size\n        :return: batch_size x output_dim\n        \"\"\"", "\n", "####################################################################################", "\n", "# Get spatial features with t-embedding ############################################", "\n", "####################################################################################", "\n", "anchor_weights", "=", "tf", ".", "get_variable", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "anchor_size", "]", ",", "\n", "initializer", "=", "tf", ".", "orthogonal_initializer", "(", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "anchor_weights", ")", "\n", "\n", "# Transpose weights for proper subtraction.", "\n", "anchor_weights", "=", "tf", ".", "transpose", "(", "anchor_weights", ")", "\n", "anchor_weights", "=", "tf", ".", "reshape", "(", "anchor_weights", ",", "[", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "# Tile inputs to subtract them with all anchors.", "\n", "tiled_inputs", "=", "tf", ".", "tile", "(", "inputs", ",", "[", "1", ",", "self", ".", "anchor_size", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "spatial", "=", "tf", ".", "subtract", "(", "tiled_inputs", ",", "anchor_weights", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "# Normalize the inputs for each frame; Obtain normalized residual vectors.", "\n", "spatial", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "spatial", ",", "2", ")", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "####################################################################################", "\n", "\n", "####################################################################################", "\n", "# Get temporal features from frame-difference in t-embedded feature. ###############", "\n", "####################################################################################", "\n", "cloned_spatial", "=", "tf", ".", "identity", "(", "spatial", ")", "\n", "# Shift the input to the right (to subtract frame T-1 from frame T):", "\n", "cloned_spatial", "=", "tf", ".", "manip", ".", "roll", "(", "cloned_spatial", ",", "shift", "=", "1", ",", "axis", "=", "1", ")", "\n", "temporal", "=", "tf", ".", "subtract", "(", "spatial", ",", "cloned_spatial", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "# Eliminate the first row.", "\n", "stacks", "=", "tf", ".", "unstack", "(", "temporal", ",", "axis", "=", "1", ")", "\n", "del", "stacks", "[", "0", "]", "\n", "temporal", "=", "tf", ".", "stack", "(", "stacks", ",", "1", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "# Both spatial, temporal have shape (batch_size * max_frames) x anchor_size x feature_size", "\n", "spatial", "=", "tf", ".", "reshape", "(", "spatial", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "temporal", "=", "tf", ".", "reshape", "(", "temporal", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "\n", "####################################################################################", "\n", "# Calculate weights for soft attention mechanism ###################################", "\n", "####################################################################################", "\n", "spatial_attention", "=", "tf", ".", "matmul", "(", "spatial", ",", "tf", ".", "transpose", "(", "spatial", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "temporal_attention", "=", "tf", ".", "matmul", "(", "temporal", ",", "tf", ".", "transpose", "(", "temporal", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "\n", "spatial_attention", "=", "tf", ".", "expand_dims", "(", "spatial_attention", ",", "-", "1", ")", "\n", "temporal_attention", "=", "tf", ".", "expand_dims", "(", "temporal_attention", ",", "-", "1", ")", "\n", "\n", "# Zero-out negative weight.", "\n", "spatial_attention", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_attention", ")", "\n", "temporal_attention", "=", "tf", ".", "nn", ".", "relu", "(", "temporal_attention", ")", "\n", "\n", "spatial_attention", "=", "tf", ".", "reduce_sum", "(", "spatial_attention", ",", "axis", "=", "2", ")", "\n", "temporal_attention", "=", "tf", ".", "reduce_sum", "(", "temporal_attention", ",", "axis", "=", "2", ")", "\n", "# -> batch_size x max_frames x 1", "\n", "\n", "spatial_attention_weight", "=", "tf", ".", "nn", ".", "softmax", "(", "spatial_attention", ",", "axis", "=", "1", ")", "\n", "temporal_attention_weight", "=", "tf", ".", "nn", ".", "softmax", "(", "temporal_attention", ",", "axis", "=", "1", ")", "\n", "####################################################################################", "\n", "\n", "####################################################################################", "\n", "# Reduce the number of parameters with non-share CNN ###############################", "\n", "####################################################################################", "\n", "spatial_cnn_weights", "=", "tf", ".", "get_variable", "(", "\"spatial_cnn_weights{}\"", ".", "format", "(", "\"\"", "\n", "if", "self", ".", "scope_id", "is", "None", "\n", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "anchor_size", ",", "self", ".", "kernel_size", ",", "self", ".", "feature_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "kernel_size", "*", "self", ".", "feature_size", ")", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "temporal_cnn_weights", "=", "tf", ".", "get_variable", "(", "\"temporal_cnn_weights{}\"", ".", "format", "(", "\"\"", "\n", "if", "self", ".", "scope_id", "is", "None", "\n", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "anchor_size", ",", "self", ".", "kernel_size", ",", "self", ".", "feature_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "kernel_size", "*", "self", ".", "feature_size", ")", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "tp_spatial_cnn_weights", "=", "tf", ".", "transpose", "(", "spatial_cnn_weights", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "tp_temporal_cnn_weights", "=", "tf", ".", "transpose", "(", "temporal_cnn_weights", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "\n", "tp_spatial", "=", "tf", ".", "transpose", "(", "spatial", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "tp_temporal", "=", "tf", ".", "transpose", "(", "temporal", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "\n", "spatial_output", "=", "tf", ".", "matmul", "(", "tp_spatial", ",", "tp_spatial_cnn_weights", ")", "\n", "temporal_output", "=", "tf", ".", "matmul", "(", "tp_temporal", ",", "tp_temporal_cnn_weights", ")", "\n", "\n", "\n", "tp_spatial_output", "=", "tf", ".", "transpose", "(", "spatial_output", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "tp_temporal_output", "=", "tf", ".", "transpose", "(", "temporal_output", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "\n", "spatial_output", "=", "tf", ".", "reshape", "(", "tp_spatial_output", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "temporal_output", "=", "tf", ".", "reshape", "(", "tp_temporal_output", ",", "[", "-", "1", ",", "self", ".", "max_frames", "-", "1", ",", "self", ".", "kernel_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "\n", "if", "self", ".", "self_attention", ":", "\n", "            ", "spatial_mean", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "spatial_output", ",", "spatial_attention_weight", ")", ",", "1", ")", "\n", "temporal_mean", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "temporal_output", ",", "temporal_attention_weight", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "spatial_mean", "=", "tf", ".", "reduce_mean", "(", "spatial_output", ",", "1", ")", "\n", "temporal_mean", "=", "tf", ".", "reduce_mean", "(", "temporal_output", ",", "1", ")", "\n", "\n", "", "spatial_variance", "=", "module_utils", ".", "reduce_var", "(", "spatial_output", ",", "1", ")", "\n", "temporal_variance", "=", "module_utils", ".", "reduce_var", "(", "temporal_output", ",", "1", ")", "\n", "\n", "spatial_pool", "=", "tf", ".", "concat", "(", "[", "spatial_mean", ",", "spatial_variance", "]", ",", "1", ")", "\n", "temporal_pool", "=", "tf", ".", "concat", "(", "[", "temporal_mean", ",", "temporal_variance", "]", ",", "1", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial_pool", "=", "slim", ".", "batch_norm", "(", "\n", "spatial_pool", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_pool_bn\"", ")", "\n", "temporal_pool", "=", "slim", ".", "batch_norm", "(", "\n", "temporal_pool", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"temporal_pool_bn\"", ")", "\n", "\n", "", "spatial_dim", "=", "spatial_pool", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "spatial_weights", "=", "tf", ".", "get_variable", "(", "\"spatial_hidden\"", ",", "\n", "[", "spatial_dim", ",", "self", ".", "hidden_layer_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "hidden_layer_size", ")", ")", ")", "\n", "\n", "temporal_dim", "=", "temporal_pool", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "temporal_weights", "=", "tf", ".", "get_variable", "(", "\"temporal_hidden\"", ",", "\n", "[", "temporal_dim", ",", "self", ".", "hidden_layer_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "hidden_layer_size", ")", ")", ")", "\n", "\n", "spatial_activation", "=", "tf", ".", "matmul", "(", "spatial_pool", ",", "spatial_weights", ")", "\n", "temporal_activation", "=", "tf", ".", "matmul", "(", "temporal_pool", ",", "temporal_weights", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "spatial_activation", "=", "slim", ".", "batch_norm", "(", "\n", "spatial_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"spatial_activation_bn\"", ")", "\n", "\n", "temporal_activation", "=", "slim", ".", "batch_norm", "(", "\n", "temporal_activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"temporal_activation_bn\"", ")", "\n", "\n", "", "if", "self", ".", "add_relu", ":", "\n", "            ", "spatial_activation", "=", "tf", ".", "nn", ".", "relu", "(", "spatial_activation", ")", "\n", "temporal_activation", "=", "tf", ".", "nn", ".", "relu", "(", "temporal_activation", ")", "\n", "\n", "####################################################################################", "\n", "# Fuse spatial & temporal features #################################################", "\n", "####################################################################################", "\n", "", "spatial_temporal_concat", "=", "tf", ".", "concat", "(", "[", "spatial_activation", ",", "temporal_activation", "]", ",", "1", ")", "\n", "\n", "sp_dim", "=", "spatial_temporal_concat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "sp_weights", "=", "tf", ".", "get_variable", "(", "\"spa_temp_fusion\"", ",", "\n", "[", "sp_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "output_dim", ")", ")", ")", "\n", "activation", "=", "tf", ".", "matmul", "(", "spatial_temporal_concat", ",", "sp_weights", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"activation_bn\"", ")", "\n", "\n", "", "if", "self", ".", "add_relu", ":", "\n", "            ", "activation", "=", "tf", ".", "nn", ".", "relu", "(", "activation", ")", "\n", "####################################################################################", "\n", "\n", "", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationCnnModule.__init__": [[1348, 1371], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "feature_size", ",", "\n", "max_frames", ",", "\n", "num_filters", ",", "\n", "anchor_size", ",", "\n", "batch_norm", ",", "\n", "is_training", ",", "\n", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize CNN module after T-Emb.\n        :param feature_size: int\n        :param max_frames: max_frame x 1\n        :param num_filters: int\n        :param batch_norm: bool\n        :param is_training: bool\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "num_filters", "=", "num_filters", "\n", "self", ".", "anchor_size", "=", "anchor_size", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationCnnModule.forward": [[1372, 1393], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for TriangulationCnnModule.\n        :param inputs: (batch_size * max_frames) x (feature_size * anchor_size)\n        :return: batch_size x max_frames x (anchor_size x num_filters)\n        \"\"\"", "\n", "# -> (batch_size * max_frames) x feature_size x anchor_size", "\n", "cnn_weights", "=", "tf", ".", "get_variable", "(", "\"cnn_weights\"", ",", "\n", "[", "self", ".", "anchor_size", ",", "self", ".", "num_filters", ",", "self", ".", "feature_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "num_filters", "*", "self", ".", "feature_size", ")", ")", ")", "\n", "\n", "cnn_weights", "=", "tf", ".", "transpose", "(", "cnn_weights", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "# -> anchor_size x feature_size x num_filters", "\n", "\n", "reshaped_inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "reshaped_inputs", "=", "tf", ".", "transpose", "(", "reshaped_inputs", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "reshaped_inputs", ",", "cnn_weights", ")", "\n", "output", "=", "tf", ".", "transpose", "(", "output", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "anchor_size", "*", "self", ".", "num_filters", "]", ")", "\n", "# -> batch_size x max_frames x (anchor * num_filters)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.WeightedTriangulationEmbedding.__init__": [[1401, 1416], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "feature_size", ",", "\n", "max_frames", ",", "\n", "anchor_size", ",", "\n", "batch_norm", ",", "\n", "is_training", ",", "\n", "scope_id", "=", "None", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "anchor_size", "=", "anchor_size", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "det_reg", "=", "True", "\n", "self", ".", "det_reg_lambda", "=", "1e-5", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.WeightedTriangulationEmbedding.forward": [[1417, 1460], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.identity", "tensorflow.identity", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.abs", "tensorflow.abs", "str", "str", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for Triangulation Embedding.\n        :param inputs: (batch_size * max_frames) x feature_size\n        :return: (batch_size * max_frames) x (feature_size * anchor_size)\n        \"\"\"", "\n", "# Anchor weights calculation.", "\n", "anchor_weights", "=", "tf", ".", "get_variable", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "anchor_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "anchor_size", ")", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"anchor_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "\n", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "anchor_weights", ")", "\n", "\n", "# Calculate orthogonal regularization.", "\n", "if", "self", ".", "det_reg", ":", "\n", "            ", "anchor_weights_t", "=", "tf", ".", "transpose", "(", "anchor_weights", ")", "\n", "det_reg", "=", "tf", ".", "matmul", "(", "anchor_weights_t", ",", "anchor_weights", ")", "\n", "identity", "=", "tf", ".", "identity", "(", "det_reg", ")", "\n", "det_reg", "=", "tf", ".", "subtract", "(", "det_reg", ",", "identity", ")", "\n", "det_reg", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "det_reg", ")", ")", "\n", "det_reg", "=", "det_reg", "*", "self", ".", "det_reg_lambda", "\n", "", "else", ":", "\n", "            ", "det_reg", "=", "None", "\n", "\n", "# Transpose weights for proper subtraction; See investigation report.", "\n", "", "anchor_weights", "=", "tf", ".", "transpose", "(", "anchor_weights", ")", "\n", "anchor_weights", "=", "tf", ".", "reshape", "(", "anchor_weights", ",", "[", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "# Tile inputs to subtract them with all anchors.", "\n", "tiled_inputs", "=", "tf", ".", "tile", "(", "inputs", ",", "[", "1", ",", "self", ".", "anchor_size", "]", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "t_emb", "=", "tf", ".", "subtract", "(", "tiled_inputs", ",", "anchor_weights", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "\n", "t_emb", "=", "tf", ".", "reshape", "(", "t_emb", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "# Normalize the inputs for each frame.", "\n", "t_emb", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "t_emb", ",", "2", ")", "\n", "t_emb", "=", "tf", ".", "reshape", "(", "t_emb", ",", "[", "-", "1", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "t_emb", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "t_emb", ",", "1", ")", "\n", "# -> (batch_size * max_frames) x (feature_size * anchor_size)", "\n", "t_emb", "=", "tf", ".", "reshape", "(", "t_emb", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "# t_emb = tf.multiply(assignment_activation, t_emb)", "\n", "return", "t_emb", ",", "det_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationTemporalEmbedding.__init__": [[1464, 1477], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "feature_size", ",", "\n", "max_frames", ",", "\n", "anchor_size", ",", "\n", "batch_norm", ",", "\n", "is_training", ",", "\n", "scope_id", "=", "None", ")", ":", "\n", "        ", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "anchor_size", "=", "anchor_size", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.TriangulationTemporalEmbedding.forward": [[1478, 1498], ["tensorflow.identity", "tensorflow.identity", "tensorflow.manip.roll", "tensorflow.manip.roll", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.stack", "tensorflow.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for TriangulationTemporalEmbedding.\n        :param inputs: (batch_size * max_frames) x (feature_size * anchor_size)\n        :return: batch_size x (max_frames - 1) x (feature_size * anchor_size)\n        \"\"\"", "\n", "cloned_inputs", "=", "tf", ".", "identity", "(", "inputs", ")", "\n", "# Shift the input to the right (to subtract frame T-1 from frame T):", "\n", "cloned_inputs", "=", "tf", ".", "manip", ".", "roll", "(", "cloned_inputs", ",", "shift", "=", "1", ",", "axis", "=", "1", ")", "\n", "temp_info", "=", "tf", ".", "subtract", "(", "inputs", ",", "cloned_inputs", ")", "\n", "\n", "temp_info_reshaped", "=", "tf", ".", "reshape", "(", "temp_info", ",", "[", "-", "1", ",", "self", ".", "anchor_size", ",", "self", ".", "feature_size", "]", ")", "\n", "# No normalization", "\n", "temp_info_reshaped", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "temp_info_reshaped", ",", "2", ")", "\n", "temp_info", "=", "tf", ".", "reshape", "(", "temp_info_reshaped", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "\n", "self", ".", "feature_size", "*", "self", ".", "anchor_size", "]", ")", "\n", "\n", "stacks", "=", "tf", ".", "unstack", "(", "temp_info", ",", "axis", "=", "1", ")", "\n", "del", "stacks", "[", "0", "]", "\n", "temp_info", "=", "tf", ".", "stack", "(", "stacks", ",", "1", ")", "\n", "return", "temp_info", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.NetVladOrthoReg.__init__": [[1501, 1519], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "feature_size", ",", "max_frames", ",", "cluster_size", ",", "batch_norm", ",", "is_training", ",", "\n", "det_reg", "=", "None", ",", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize NetVLAD with orthogonal regularization.\n        :param feature_size: int\n        :param max_frames: max_frames x 1\n        :param cluster_size: int\n        :param batch_norm: bool\n        :param is_training: bool\n        :param det_reg: float\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "cluster_size", "=", "cluster_size", "\n", "self", ".", "det_reg", "=", "det_reg", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.NetVladOrthoReg.forward": [[1520, 1587], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.batch_norm", "tensorflow.batch_norm", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "str", "str", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "module_utils.orthogonal_regularizer", "str", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.module_utils.orthogonal_regularizer"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for NetVladOrthoReg.\n        :param inputs: (batch_size * max_frames) x feature_size\n        :return: (batch_size * max_frames) x (feature_size * cluster_size)\n        \"\"\"", "\n", "cluster_weights", "=", "tf", ".", "get_variable", "(", "\"cluster_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "\n", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "feature_size", ")", ")", ")", "\n", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"cluster_weights{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "cluster_weights", ")", "\n", "\n", "activation", "=", "tf", ".", "matmul", "(", "inputs", ",", "cluster_weights", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "activation", "=", "slim", ".", "batch_norm", "(", "\n", "activation", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"cluster_bn\"", ")", "\n", "", "else", ":", "\n", "            ", "cluster_biases", "=", "tf", ".", "get_variable", "(", "\"cluster_biases{}\"", ".", "format", "(", "\"\"", "if", "self", ".", "scope_id", "is", "None", "\n", "else", "str", "(", "self", ".", "scope_id", ")", ")", ",", "\n", "[", "self", ".", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "feature_size", ")", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"cluster_biases\"", ",", "cluster_biases", ")", "\n", "activation", "+=", "cluster_biases", "\n", "\n", "", "activation", "=", "tf", ".", "nn", ".", "softmax", "(", "activation", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"cluster_output\"", ",", "activation", ")", "\n", "\n", "activation", "=", "tf", ".", "reshape", "(", "activation", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "cluster_size", "]", ")", "\n", "\n", "a_sum", "=", "tf", ".", "reduce_sum", "(", "activation", ",", "-", "2", ",", "keep_dims", "=", "True", ")", "\n", "\n", "if", "self", ".", "det_reg", "is", "None", ":", "\n", "            ", "cluster_weights2", "=", "tf", ".", "get_variable", "(", "\"cluster_weights2\"", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "feature_size", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "cluster_weights2", "=", "tf", ".", "get_variable", "(", "\"cluster_weights2\"", ",", "\n", "[", "self", ".", "feature_size", ",", "self", ".", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "feature_size", ")", ")", ",", "\n", "regularizer", "=", "module_utils", ".", "orthogonal_regularizer", "(", "self", ".", "det_reg", ",", "\n", "self", ".", "scope_id", ")", ")", "\n", "\n", "", "cluster_weights2", "=", "tf", ".", "expand_dims", "(", "cluster_weights2", ",", "axis", "=", "0", ")", "\n", "a", "=", "tf", ".", "multiply", "(", "a_sum", ",", "cluster_weights2", ")", "\n", "\n", "activation", "=", "tf", ".", "transpose", "(", "activation", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "]", ")", "\n", "vlad", "=", "tf", ".", "matmul", "(", "activation", ",", "reshaped_input", ")", "\n", "vlad", "=", "tf", ".", "transpose", "(", "vlad", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "vlad", "=", "tf", ".", "subtract", "(", "vlad", ",", "a", ")", "\n", "vlad", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "vlad", ",", "1", ")", "\n", "vlad", "=", "tf", ".", "reshape", "(", "vlad", ",", "[", "-", "1", ",", "self", ".", "cluster_size", "*", "self", ".", "feature_size", "]", ")", "\n", "vlad", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "vlad", ",", "1", ")", "\n", "\n", "# batch_size x (cluster_size * feature_size)", "\n", "return", "vlad", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.NetVladAttenCluster.__init__": [[1594, 1616], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "feature_size", ",", "max_frames", ",", "cluster_size", ",", "batch_norm", ",", "is_training", ",", "\n", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize NetVLAD with orthogonal regularization.\n        :param feature_size: int\n        :param max_frames: max_frames x 1\n        :param cluster_size: int\n        :param batch_norm: bool\n        :param is_training: bool\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "cluster_size", "=", "cluster_size", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n", "# Attention encoder parameters:", "\n", "self", ".", "encoder_hidden_size", "=", "feature_size", "\n", "self", ".", "num_heads", "=", "feature_size", "//", "16", "\n", "self", ".", "dropout_ratio", "=", "0.1", "\n", "self", ".", "filter_size", "=", "4", "*", "self", ".", "encoder_hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_pooling_modules.NetVladAttenCluster.forward": [[1617, 1664], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.variable_scope", "tensorflow.variable_scope", "transformer_utils.TransformerEncoderMod", "transformer_utils.TransformerEncoderMod.forward", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for NetVladOrthoReg.\n        :param inputs: (batch_size * max_frames) x feature_size\n        :return: (batch_size * max_frames) x (feature_size * cluster_size)\n        \"\"\"", "\n", "\n", "reshaped_input", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", "]", ")", "\n", "\n", "#", "\n", "# New: Compute attention-based cluster similarity weights:", "\n", "#", "\n", "with", "tf", ".", "variable_scope", "(", "\"cluster_attention\"", ")", ":", "\n", "            ", "encoder_block", "=", "transformer_utils", ".", "TransformerEncoderMod", "(", "feature_size", "=", "self", ".", "feature_size", ",", "\n", "hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "attention_dropout", "=", "self", ".", "dropout_ratio", ",", "\n", "ff_filter_size", "=", "self", ".", "filter_size", ",", "\n", "ff_relu_dropout", "=", "0.1", ",", "\n", "is_train", "=", "self", ".", "is_training", ",", "\n", "scope_id", "=", "\"encode\"", ",", "\n", "final_size", "=", "self", ".", "cluster_size", ")", "\n", "cluster_similarities", "=", "encoder_block", ".", "forward", "(", "reshaped_input", ")", "\n", "\n", "\n", "", "cluster_centres", "=", "tf", ".", "get_variable", "(", "\"cluster_centers\"", ",", "[", "self", ".", "feature_size", ",", "self", ".", "cluster_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "feature_size", ")", ")", ")", "\n", "\n", "# (xi - ck)", "\n", "reshaped_input", "=", "tf", ".", "expand_dims", "(", "reshaped_input", ",", "axis", "=", "3", ")", "# B x N x F x 1", "\n", "residuals", "=", "tf", ".", "subtract", "(", "reshaped_input", ",", "cluster_centres", ")", "# B x N x F x C", "\n", "\n", "# Sum of ak(xi) * (xi - ck)", "\n", "cluster_similarities", "=", "tf", ".", "expand_dims", "(", "cluster_similarities", ",", "axis", "=", "3", ")", "# B x N x C x 1", "\n", "weighted_residuals", "=", "tf", ".", "multiply", "(", "residuals", ",", "cluster_similarities", ")", "\n", "residual_sum", "=", "tf", ".", "reduce_sum", "(", "weighted_residuals", ",", "axis", "=", "1", ")", "# B x F x C", "\n", "\n", "# Normalization of flattened global descriptor:", "\n", "vlad", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "residual_sum", ",", "1", ")", "# Normalize per cluster", "\n", "vlad", "=", "tf", ".", "reshape", "(", "vlad", ",", "[", "-", "1", ",", "self", ".", "cluster_size", "*", "self", ".", "feature_size", "]", ")", "# Flatten", "\n", "vlad", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "vlad", ",", "1", ",", "\n", "name", "=", "self", ".", "scope_id", "+", "\"vlad_final\"", ")", "# Normalize global descriptor", "\n", "\n", "#vlad = tf.reshape(vlad, [-1, self.cluster_size, self.feature_size])         # Optional: output shape", "\n", "\n", "# batch_size x (cluster_size * feature_size)", "\n", "return", "vlad", "", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.IndirectClusterMeanPoolModule.__init__": [[25, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "l2_normalize", ")", ":", "\n", "        ", "\"\"\" Initialize IndirectClusterMaxMeanPoolModule\n        :param l2_normalize: bool\n        \"\"\"", "\n", "self", ".", "l2_normalize", "=", "l2_normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.IndirectClusterMeanPoolModule.forward": [[31, 54], ["tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t_inputs", ",", "c_inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for max & mean pooling with indirect clustering (self-attention).\n        :param t_inputs: batch_size x max_frames x num_features\n        :param c_inputs: batch_size x max_frames x num_features\n        :return: batch_size x feature_size\n        \"\"\"", "\n", "attention", "=", "tf", ".", "matmul", "(", "t_inputs", ",", "tf", ".", "transpose", "(", "t_inputs", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "# -> batch_size x max_frames x max_frames", "\n", "attention", "=", "tf", ".", "expand_dims", "(", "attention", ",", "-", "1", ")", "\n", "# Zero-out negative weight.", "\n", "attention", "=", "tf", ".", "nn", ".", "relu", "(", "attention", ")", "\n", "\n", "attention", "=", "tf", ".", "reduce_sum", "(", "attention", ",", "axis", "=", "2", ")", "\n", "# -> batch_size x max_frames x 1", "\n", "attention", "=", "tf", ".", "nn", ".", "softmax", "(", "attention", ",", "axis", "=", "1", ")", "\n", "\n", "mean_pool", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "c_inputs", ",", "attention", ")", ",", "axis", "=", "1", ")", "\n", "# -> batch_size x num_features", "\n", "\n", "if", "self", ".", "l2_normalize", ":", "\n", "            ", "mean_pool", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "mean_pool", ",", "1", ")", "\n", "\n", "", "return", "mean_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.MeanStdPoolModule.__init__": [[59, 64], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "l2_normalize", ")", ":", "\n", "        ", "\"\"\" Initialize Mean STD module.\n        :param l2_normalize:\n        \"\"\"", "\n", "self", ".", "l2_normalize", "=", "l2_normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.MeanStdPoolModule.forward": [[65, 72], ["tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for MeanStdPoolModule.\n        :param inputs: batch_size x max_frames x num_features\n        :return: batch_size x feature_size\n        \"\"\"", "\n", "moments", "=", "tf", ".", "reduce_mean", "(", "inputs", ",", "1", ")", "\n", "return", "moments", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.IndirectClusterMaxMeanPoolModule.__init__": [[78, 83], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "l2_normalize", ")", ":", "\n", "        ", "\"\"\" Initialize IndirectClusterMaxMeanPoolModule\n        :param l2_normalize: bool\n        \"\"\"", "\n", "self", ".", "l2_normalize", "=", "l2_normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.IndirectClusterMaxMeanPoolModule.forward": [[84, 109], ["tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for max & mean pooling with indirect clustering (self-attention).\n            Where\n        :param inputs: batch_size x max_frames x num_features\n        :return: batch_size x feature_size\n        \"\"\"", "\n", "attention", "=", "tf", ".", "matmul", "(", "inputs", ",", "tf", ".", "transpose", "(", "inputs", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "# -> batch_size x max_frames x max_frames", "\n", "attention", "=", "tf", ".", "expand_dims", "(", "attention", ",", "-", "1", ")", "\n", "attention", "=", "tf", ".", "nn", ".", "relu", "(", "attention", ")", "\n", "\n", "attention", "=", "tf", ".", "reduce_sum", "(", "attention", ",", "axis", "=", "2", ")", "\n", "# -> batch_size x max_frames x 1", "\n", "attention", "=", "tf", ".", "nn", ".", "softmax", "(", "attention", ",", "axis", "=", "1", ")", "\n", "\n", "mean_pool", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "inputs", ",", "attention", ")", ",", "axis", "=", "1", ")", "\n", "max_pool", "=", "tf", ".", "reduce_max", "(", "inputs", ",", "axis", "=", "1", ")", "\n", "# -> batch_size x num_features", "\n", "\n", "if", "self", ".", "l2_normalize", ":", "\n", "            ", "mean_pool", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "mean_pool", ",", "1", ")", "\n", "max_pool", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "max_pool", ",", "1", ")", "\n", "\n", "", "concat_pool", "=", "tf", ".", "concat", "(", "[", "mean_pool", ",", "max_pool", "]", ",", "1", ")", "\n", "return", "concat_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.MaxMeanPoolingModule.__init__": [[113, 118], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "l2_normalize", "=", "True", ")", ":", "\n", "        ", "\"\"\" Initialize MaxMeanPoolingModule.\n        :param l2_normalize: bool\n        \"\"\"", "\n", "self", ".", "l2_normalize", "=", "l2_normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.MaxMeanPoolingModule.forward": [[119, 134], ["tensorflow.reduce_max", "tensorflow.reduce_mean", "tensorflow.concat", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for mean & max pooling.\n        :param inputs: batch_size x max_frames x num_features\n        :return: batch_size x feature_size\n        \"\"\"", "\n", "max_pooled", "=", "tf", ".", "reduce_max", "(", "inputs", ",", "1", ")", "\n", "avg_pooled", "=", "tf", ".", "reduce_mean", "(", "inputs", ",", "1", ")", "\n", "\n", "if", "self", ".", "l2_normalize", ":", "\n", "            ", "max_pooled", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "max_pooled", ",", "1", ")", "\n", "avg_pooled", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "avg_pooled", ",", "1", ")", "\n", "# -> batch_size x num_features", "\n", "\n", "", "concat", "=", "tf", ".", "concat", "(", "[", "max_pooled", ",", "avg_pooled", "]", ",", "1", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.MaxPoolingModule.__init__": [[138, 143], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "l2_normalize", "=", "False", ")", ":", "\n", "        ", "\"\"\" Initialize MaxPoolingModule.\n        :param l2_normalize: bool\n        \"\"\"", "\n", "self", ".", "l2_normalize", "=", "l2_normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.MaxPoolingModule.forward": [[144, 150], ["tensorflow.reduce_max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for max pooling.\n        :param inputs: batch_size x max_frames x num_features\n        :return: batch_size x feature_size\n        \"\"\"", "\n", "return", "tf", ".", "reduce_max", "(", "inputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.MeanPooling.__init__": [[154, 159], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "l2_normalize", "=", "False", ")", ":", "\n", "        ", "\"\"\" Initialize MeanPooling.\n        :param l2_normalize: bool\n        \"\"\"", "\n", "self", ".", "l2_normalize", "=", "l2_normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.MeanPooling.forward": [[160, 166], ["tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for mean pooling.\n        :param inputs: batch_size x max_frames x num_features\n        :return: batch_size x feature_size\n        \"\"\"", "\n", "return", "tf", ".", "reduce_mean", "(", "inputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.GemPoolingModule.__init__": [[170, 176], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "l2_normalize", "=", "False", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\" Initialize GemPoolingModule.\n        :param l2_normalize: bool\n        \"\"\"", "\n", "self", ".", "l2_normalize", "=", "l2_normalize", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.aggregation_modules.GemPoolingModule.forward": [[178, 191], ["tensorflow.get_variable", "tensorflow.clip_by_value", "tensorflow.pow", "tensorflow.reduce_mean", "tensorflow.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for GeM pooling\n        :param inputs: batch_size x max_frames x num_features\n        :return: batch_size x feature_size\n        \"\"\"", "\n", "p", "=", "tf", ".", "get_variable", "(", "\"p\"", ",", "\n", "shape", "=", "[", "1", "]", ")", "\n", "# Clip some values.", "\n", "frames", "=", "tf", ".", "clip_by_value", "(", "inputs", ",", "clip_value_min", "=", "self", ".", "eps", ",", "clip_value_max", "=", "None", ")", "\n", "frames", "=", "tf", ".", "pow", "(", "frames", ",", "p", ")", "\n", "frames", "=", "tf", ".", "reduce_mean", "(", "frames", ",", "1", ")", "\n", "frames", "=", "tf", ".", "pow", "(", "frames", ",", "1.", "/", "p", ")", "\n", "return", "frames", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmLastHiddenModule.__init__": [[22, 35], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lstm_size", ",", "lstm_layers", ",", "num_frames", ",", "output_dim", ",", "scope_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize LSTM hidden module.\n        :param lstm_size: int\n        :param lstm_layers: int\n        :param num_frames: num_frames x 1\n        :param output_dim: int\n        :param scope_id: Object\n        \"\"\"", "\n", "self", ".", "lstm_size", "=", "lstm_size", "\n", "self", ".", "lstm_layers", "=", "lstm_layers", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "scope_id", "=", "scope_id", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmLastHiddenModule.forward": [[36, 54], ["tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.nn.dynamic_rnn", "tensorflow.contrib.rnn.BasicLSTMCell", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for LstmLastHiddenModule.\n        :param inputs: batch_size x max_frames x num_features\n        :return: batch_size x output_dim\n        \"\"\"", "\n", "stacked_lstm", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "\n", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "self", ".", "lstm_size", ",", "forget_bias", "=", "1.0", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "lstm_layers", ")", "\n", "\n", "]", ")", "\n", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "stacked_lstm", ",", "inputs", ",", "\n", "sequence_length", "=", "self", ".", "num_frames", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "# Only output the hidden state at the end.", "\n", "return", "state", "[", "-", "1", "]", ".", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.__init__": [[58, 67], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lstm_size", ",", "num_layers", ",", "max_frame", ")", ":", "\n", "        ", "\"\"\" Initialize LSTM average concatenation module.\n        :param lstm_size: int\n        :param num_layers: int\n        :param max_frame: num_frames x 1\n        \"\"\"", "\n", "self", ".", "lstm_size", "=", "lstm_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "max_frame", "=", "max_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.rnn_modules.LstmConcatAverageModule.forward": [[68, 89], ["tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.nn.dynamic_rnn", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.concat", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.contrib.rnn.BasicLSTMCell", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\" Forward method for LstmConcatAverageModule.\n        :param inputs: batch_size x max_frames x num_features\n        :return: batch_size x output_dim\n        \"\"\"", "\n", "stacked_lstm", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "\n", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "self", ".", "lstm_size", ",", "forget_bias", "=", "1.0", ",", "state_is_tuple", "=", "False", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_layers", ")", "\n", "]", ",", "state_is_tuple", "=", "False", ")", "\n", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "stacked_lstm", ",", "inputs", ",", "\n", "sequence_length", "=", "self", ".", "max_frame", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "context_memory", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "reduce_sum", "(", "outputs", ",", "axis", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "average_state", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "reduce_sum", "(", "inputs", ",", "axis", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "final_state", "=", "tf", ".", "concat", "(", "[", "context_memory", ",", "state", ",", "average_state", "]", ",", "1", ")", "\n", "\n", "return", "final_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.Dequantize": [[28, 44], ["None"], "function", ["None"], ["", "def", "Dequantize", "(", "feat_vector", ",", "max_quantized_value", "=", "2", ",", "min_quantized_value", "=", "-", "2", ")", ":", "\n", "    ", "\"\"\"Dequantize the feature from the byte format to the float format.\n\n      Args:\n        feat_vector: the input 1-d vector.\n        max_quantized_value: the maximum of the quantized value.\n        min_quantized_value: the minimum of the quantized value.\n\n      Returns:\n        A float vector which has the same shape as feat_vector.\n    \"\"\"", "\n", "assert", "max_quantized_value", ">", "min_quantized_value", "\n", "quantized_range", "=", "max_quantized_value", "-", "min_quantized_value", "\n", "scalar", "=", "quantized_range", "/", "255.0", "\n", "bias", "=", "(", "quantized_range", "/", "512.0", ")", "+", "min_quantized_value", "\n", "return", "feat_vector", "*", "scalar", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary": [[46, 53], ["tensorflow.Summary", "tf.Summary.value.add", "str", "float"], "function", ["None"], ["", "def", "MakeSummary", "(", "name", ",", "value", ")", ":", "\n", "    ", "\"\"\"Creates a tf.Summary proto with the given name and value.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "val", "=", "summary", ".", "value", ".", "add", "(", ")", "\n", "val", ".", "tag", "=", "str", "(", "name", ")", "\n", "val", ".", "simple_value", "=", "float", "(", "value", ")", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.AddGlobalStepSummary": [[55, 97], ["global_step_info_dict.get", "summary_writer.add_summary", "summary_writer.add_summary", "summary_writer.add_summary", "summary_writer.flush", "utils.MakeSummary", "utils.MakeSummary", "utils.MakeSummary", "summary_writer.add_summary", "utils.MakeSummary"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.eval_util.EvaluationMetrics.get", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary"], ["", "def", "AddGlobalStepSummary", "(", "summary_writer", ",", "\n", "global_step_val", ",", "\n", "global_step_info_dict", ",", "\n", "summary_scope", "=", "\"Eval\"", ")", ":", "\n", "    ", "\"\"\"Add the global_step summary to the Tensorboard.\n\n      Args:\n        summary_writer: Tensorflow summary_writer.\n        global_step_val: a int value of the global step.\n        global_step_info_dict: a dictionary of the evaluation metrics calculated for\n          a mini-batch.\n        summary_scope: Train or Eval.\n\n      Returns:\n        A string of this global_step summary\n    \"\"\"", "\n", "this_hit_at_one", "=", "global_step_info_dict", "[", "\"hit_at_one\"", "]", "\n", "this_perr", "=", "global_step_info_dict", "[", "\"perr\"", "]", "\n", "this_loss", "=", "global_step_info_dict", "[", "\"loss\"", "]", "\n", "examples_per_second", "=", "global_step_info_dict", ".", "get", "(", "\"examples_per_second\"", ",", "-", "1", ")", "\n", "\n", "summary_writer", ".", "add_summary", "(", "\n", "MakeSummary", "(", "\"GlobalStep/\"", "+", "summary_scope", "+", "\"_Hit@1\"", ",", "this_hit_at_one", ")", ",", "\n", "global_step_val", ")", "\n", "summary_writer", ".", "add_summary", "(", "\n", "MakeSummary", "(", "\"GlobalStep/\"", "+", "summary_scope", "+", "\"_Perr\"", ",", "this_perr", ")", ",", "\n", "global_step_val", ")", "\n", "summary_writer", ".", "add_summary", "(", "\n", "MakeSummary", "(", "\"GlobalStep/\"", "+", "summary_scope", "+", "\"_Loss\"", ",", "this_loss", ")", ",", "\n", "global_step_val", ")", "\n", "\n", "if", "examples_per_second", "!=", "-", "1", ":", "\n", "        ", "summary_writer", ".", "add_summary", "(", "\n", "MakeSummary", "(", "\"GlobalStep/\"", "+", "summary_scope", "+", "\"_Example_Second\"", ",", "\n", "examples_per_second", ")", ",", "global_step_val", ")", "\n", "\n", "", "summary_writer", ".", "flush", "(", ")", "\n", "info", "=", "(", "\"global_step {0} | Batch Hit@1: {1:.3f} | Batch PERR: {2:.3f} | Batch Loss: {3:.3f} \"", "\n", "\"| Examples_per_sec: {4:.3f}\"", ")", ".", "format", "(", "\n", "global_step_val", ",", "this_hit_at_one", ",", "this_perr", ",", "this_loss", ",", "\n", "examples_per_second", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.AddEpochSummary": [[99, 144], ["numpy.mean", "summary_writer.add_summary", "summary_writer.add_summary", "summary_writer.add_summary", "summary_writer.add_summary", "summary_writer.add_summary", "summary_writer.flush", "utils.MakeSummary", "utils.MakeSummary", "utils.MakeSummary", "utils.MakeSummary", "utils.MakeSummary"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.MakeSummary"], ["", "def", "AddEpochSummary", "(", "summary_writer", ",", "\n", "global_step_val", ",", "\n", "epoch_info_dict", ",", "\n", "summary_scope", "=", "\"Eval\"", ")", ":", "\n", "    ", "\"\"\"Add the epoch summary to the Tensorboard.\n\n      Args:\n        summary_writer: TensorFlow summary_writer.\n        global_step_val: a int value of the global step.\n        epoch_info_dict: a dictionary of the evaluation metrics calculated for the\n          whole epoch.\n        summary_scope: Train or Eval.\n\n      Returns:\n        A string of this global_step summary\n    \"\"\"", "\n", "epoch_id", "=", "epoch_info_dict", "[", "\"epoch_id\"", "]", "\n", "avg_hit_at_one", "=", "epoch_info_dict", "[", "\"avg_hit_at_one\"", "]", "\n", "avg_perr", "=", "epoch_info_dict", "[", "\"avg_perr\"", "]", "\n", "avg_loss", "=", "epoch_info_dict", "[", "\"avg_loss\"", "]", "\n", "aps", "=", "epoch_info_dict", "[", "\"aps\"", "]", "\n", "gap", "=", "epoch_info_dict", "[", "\"gap\"", "]", "\n", "mean_ap", "=", "numpy", ".", "mean", "(", "aps", ")", "\n", "\n", "summary_writer", ".", "add_summary", "(", "\n", "MakeSummary", "(", "\"Epoch/\"", "+", "summary_scope", "+", "\"_Avg_Hit@1\"", ",", "avg_hit_at_one", ")", ",", "\n", "global_step_val", ")", "\n", "summary_writer", ".", "add_summary", "(", "\n", "MakeSummary", "(", "\"Epoch/\"", "+", "summary_scope", "+", "\"_Avg_Perr\"", ",", "avg_perr", ")", ",", "\n", "global_step_val", ")", "\n", "summary_writer", ".", "add_summary", "(", "\n", "MakeSummary", "(", "\"Epoch/\"", "+", "summary_scope", "+", "\"_Avg_Loss\"", ",", "avg_loss", ")", ",", "\n", "global_step_val", ")", "\n", "summary_writer", ".", "add_summary", "(", "\n", "MakeSummary", "(", "\"Epoch/\"", "+", "summary_scope", "+", "\"_MAP\"", ",", "mean_ap", ")", ",", "\n", "global_step_val", ")", "\n", "summary_writer", ".", "add_summary", "(", "\n", "MakeSummary", "(", "\"Epoch/\"", "+", "summary_scope", "+", "\"_GAP\"", ",", "gap", ")", ",", "\n", "global_step_val", ")", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "info", "=", "(", "\"epoch/eval number {0} | Avg_Hit@1: {1:.3f} | Avg_PERR: {2:.3f} \"", "\n", "\"| MAP: {3:.3f} | GAP: {4:.3f} | Avg_Loss: {5:3f}\"", ")", ".", "format", "(", "\n", "epoch_id", ",", "avg_hit_at_one", ",", "avg_perr", ",", "mean_ap", ",", "gap", ",", "avg_loss", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.GetListOfFeatureNamesAndSizes": [[146, 168], ["feature_names.strip", "int", "len", "len", "tensorflow.logging.error", "feature_names.split", "feature_sizes.split", "str", "len", "str", "len"], "function", ["None"], ["", "def", "GetListOfFeatureNamesAndSizes", "(", "feature_names", ",", "feature_sizes", ")", ":", "\n", "    ", "\"\"\"Extract the list of feature names and the dimensionality of each feature\n         from string of comma separated values.\n\n      Args:\n        feature_names: string containing comma separated list of feature names\n        feature_sizes: string containing comma separated list of feature sizes\n\n      Returns:\n        List of the feature names and list of the dimensionality of each feature.\n        Elements in the first/second list are strings/integers.\n    \"\"\"", "\n", "list_of_feature_names", "=", "[", "\n", "feature_names", ".", "strip", "(", ")", "for", "feature_names", "in", "feature_names", ".", "split", "(", "','", ")", "]", "\n", "list_of_feature_sizes", "=", "[", "\n", "int", "(", "feature_sizes", ")", "for", "feature_sizes", "in", "feature_sizes", ".", "split", "(", "','", ")", "]", "\n", "if", "len", "(", "list_of_feature_names", ")", "!=", "len", "(", "list_of_feature_sizes", ")", ":", "\n", "        ", "logging", ".", "error", "(", "\"length of the feature names (=\"", "+", "\n", "str", "(", "len", "(", "list_of_feature_names", ")", ")", "+", "\") != length of feature \"", "\n", "\"sizes (=\"", "+", "str", "(", "len", "(", "list_of_feature_sizes", ")", ")", "+", "\")\"", ")", "\n", "\n", "", "return", "list_of_feature_names", ",", "list_of_feature_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.clip_gradient_norms": [[170, 190], ["clipped_grads_and_vars.append", "isinstance", "tensorflow.clip_by_norm", "tensorflow.IndexedSlices", "tensorflow.clip_by_norm"], "function", ["None"], ["", "def", "clip_gradient_norms", "(", "gradients_to_variables", ",", "max_norm", ")", ":", "\n", "    ", "\"\"\"Clips the gradients by the given value.\n\n      Args:\n        gradients_to_variables: A list of gradient to variable pairs (tuples).\n        max_norm: the maximum norm value.\n\n      Returns:\n        A list of clipped gradient to variable pairs.\n    \"\"\"", "\n", "clipped_grads_and_vars", "=", "[", "]", "\n", "for", "grad", ",", "var", "in", "gradients_to_variables", ":", "\n", "        ", "if", "grad", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "grad", ",", "tf", ".", "IndexedSlices", ")", ":", "\n", "                ", "tmp", "=", "tf", ".", "clip_by_norm", "(", "grad", ".", "values", ",", "max_norm", ")", "\n", "grad", "=", "tf", ".", "IndexedSlices", "(", "tmp", ",", "grad", ".", "indices", ",", "grad", ".", "dense_shape", ")", "\n", "", "else", ":", "\n", "                ", "grad", "=", "tf", ".", "clip_by_norm", "(", "grad", ",", "max_norm", ")", "\n", "", "", "clipped_grads_and_vars", ".", "append", "(", "(", "grad", ",", "var", ")", ")", "\n", "", "return", "clipped_grads_and_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.combine_gradients": [[192, 214], ["xrange", "len", "tensorflow.stack", "tensorflow.reduce_sum", "final_grads.append", "xrange", "len"], "function", ["None"], ["", "def", "combine_gradients", "(", "tower_grads", ")", ":", "\n", "    ", "\"\"\"Calculate the combined gradient for each shared variable across all towers.\n\n     Note that this function provides a synchronization point across all towers.\n\n     Args:\n       tower_grads: List of lists of (gradient, variable) tuples. The outer list\n         is over individual gradients. The inner list is over the gradient\n         calculation for each tower.\n     Returns:\n        List of pairs of (gradient, variable) where the gradient has been summed\n        across all towers.\n    \"\"\"", "\n", "filtered_grads", "=", "[", "[", "x", "for", "x", "in", "grad_list", "if", "x", "[", "0", "]", "is", "not", "None", "]", "for", "grad_list", "in", "tower_grads", "]", "\n", "final_grads", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "len", "(", "filtered_grads", "[", "0", "]", ")", ")", ":", "\n", "        ", "grads", "=", "[", "filtered_grads", "[", "t", "]", "[", "i", "]", "for", "t", "in", "xrange", "(", "len", "(", "filtered_grads", ")", ")", "]", "\n", "grad", "=", "tf", ".", "stack", "(", "[", "x", "[", "0", "]", "for", "x", "in", "grads", "]", ",", "0", ")", "\n", "grad", "=", "tf", ".", "reduce_sum", "(", "grad", ",", "0", ")", "\n", "final_grads", ".", "append", "(", "(", "grad", ",", "filtered_grads", "[", "0", "]", "[", "i", "]", "[", "1", "]", ",", ")", ")", "\n", "\n", "", "return", "final_grads", "\n", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.losses.BaseLoss.calculate_loss": [[24, 39], ["NotImplementedError"], "methods", ["None"], ["def", "calculate_loss", "(", "self", ",", "unused_predictions", ",", "unused_labels", ",", "**", "unused_params", ")", ":", "\n", "        ", "\"\"\"Calculates the average loss of the examples in a mini-batch.\n\n         Args:\n          unused_predictions: a 2-d tensor storing the prediction scores, in which\n            each row represents a sample in the mini-batch and each column\n            represents a class.\n          unused_labels: a 2-d tensor storing the labels, which has the same shape\n            as the unused_predictions. The labels must be in the range of 0 and 1.\n          unused_params: loss specific parameters.\n\n        Returns:\n          A scalar loss tensor.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.losses.CrossEntropyLoss.calculate_loss": [[44, 52], ["tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.cast", "tensorflow.negative", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.log"], "methods", ["None"], ["def", "calculate_loss", "(", "self", ",", "predictions", ",", "labels", ",", "**", "unused_params", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"loss_xent\"", ")", ":", "\n", "            ", "epsilon", "=", "10e-6", "\n", "float_labels", "=", "tf", ".", "cast", "(", "labels", ",", "tf", ".", "float32", ")", "\n", "cross_entropy_loss", "=", "float_labels", "*", "tf", ".", "log", "(", "predictions", "+", "epsilon", ")", "+", "(", "1", "-", "float_labels", ")", "*", "tf", ".", "log", "(", "1", "-", "predictions", "+", "epsilon", ")", "\n", "cross_entropy_loss", "=", "tf", ".", "negative", "(", "cross_entropy_loss", ")", "\n", "", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "cross_entropy_loss", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.losses.HingeLoss.calculate_loss": [[61, 70], ["tensorflow.name_scope", "tensorflow.cast", "tensorflow.zeros", "tensorflow.ones", "tensorflow.subtract", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.shape", "tensorflow.shape", "tensorflow.scalar_mul", "tensorflow.reduce_sum", "tensorflow.scalar_mul"], "methods", ["None"], ["def", "calculate_loss", "(", "self", ",", "predictions", ",", "labels", ",", "b", "=", "1.0", ",", "**", "unused_params", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"loss_hinge\"", ")", ":", "\n", "            ", "float_labels", "=", "tf", ".", "cast", "(", "labels", ",", "tf", ".", "float32", ")", "\n", "all_zeros", "=", "tf", ".", "zeros", "(", "tf", ".", "shape", "(", "float_labels", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "all_ones", "=", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "float_labels", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "sign_labels", "=", "tf", ".", "subtract", "(", "tf", ".", "scalar_mul", "(", "2", ",", "float_labels", ")", ",", "all_ones", ")", "\n", "hinge_loss", "=", "tf", ".", "maximum", "(", "\n", "all_zeros", ",", "tf", ".", "scalar_mul", "(", "b", ",", "all_ones", ")", "-", "sign_labels", "*", "predictions", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "hinge_loss", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.losses.SoftmaxLoss.calculate_loss": [[84, 97], ["tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.cast", "tensorflow.maximum", "tensorflow.div", "tensorflow.nn.softmax", "tensorflow.negative", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.log"], "methods", ["None"], ["def", "calculate_loss", "(", "self", ",", "predictions", ",", "labels", ",", "**", "unused_params", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"loss_softmax\"", ")", ":", "\n", "            ", "epsilon", "=", "10e-8", "\n", "float_labels", "=", "tf", ".", "cast", "(", "labels", ",", "tf", ".", "float32", ")", "\n", "# l1 normalization (labels are no less than 0)", "\n", "label_rowsum", "=", "tf", ".", "maximum", "(", "\n", "tf", ".", "reduce_sum", "(", "float_labels", ",", "1", ",", "keep_dims", "=", "True", ")", ",", "\n", "epsilon", ")", "\n", "norm_float_labels", "=", "tf", ".", "div", "(", "float_labels", ",", "label_rowsum", ")", "\n", "softmax_outputs", "=", "tf", ".", "nn", ".", "softmax", "(", "predictions", ")", "\n", "softmax_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "norm_float_labels", ",", "tf", ".", "log", "(", "softmax_outputs", ")", ")", ",", "1", ")", ")", "\n", "", "return", "tf", ".", "reduce_mean", "(", "softmax_loss", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.generate_gcloud_evaluation.main": [[33, 49], ["str"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "# Start by defining a job name.", "\n", "    ", "command", "=", "\"JOB_NAME=yt8m_eval_$(date +%Y%m%d_%H%M%S); \"", "\n", "command", "+=", "\"gcloud --verbosity=debug ml-engine jobs submit training $JOB_NAME \"", "\n", "command", "+=", "\"--package-path=youtube-8m --module-name=youtube-8m.eval \"", "\n", "command", "+=", "\"--staging-bucket=$BUCKET_NAME --region=us-east1 \"", "\n", "command", "+=", "\"--config=youtube-8m/cloudml_config/{} \"", ".", "format", "(", "CLOUD_GPU", ")", "\n", "if", "FRAME_LEVEL", ":", "\n", "        ", "command", "+=", "\"-- --eval_data_pattern='gs://youtube8m-ml-us-east1/2/frame/validate/validate*.tfrecord' \"", "\n", "command", "+=", "\"--frame_features=True \"", "\n", "", "else", ":", "\n", "        ", "command", "+=", "\"-- --eval_data_pattern='gs://youtube8m-ml-us-east1/2/video/validate/validate*.tfrecord \"", "\n", "command", "+=", "\"--frame_features=False \"", "\n", "", "command", "+=", "\"--train_dir=$BUCKET_NAME/{} \"", ".", "format", "(", "MODEL_NAME", "+", "str", "(", "MODEL_VERSION", ")", ")", "\n", "command", "+=", "\"--run_once=True\"", "\n", "return", "command", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.generate_gcloud_train.main": [[39, 61], ["str", "str", "str"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "# Start by defining a job name.", "\n", "    ", "command", "=", "\"JOB_NAME=yt8m_train_$(date +%Y%m%d_%H%M%S); \"", "\n", "command", "+=", "\"gcloud --verbosity=debug ml-engine jobs submit training $JOB_NAME \"", "\n", "command", "+=", "\"--package-path=youtube-8m --module-name=youtube-8m.train \"", "\n", "command", "+=", "\"--staging-bucket=$BUCKET_NAME --region=us-east1 \"", "\n", "command", "+=", "\"--config=youtube-8m/cloudml_config/{} \"", ".", "format", "(", "CLOUD_GPU", ")", "\n", "if", "FRAME_LEVEL", ":", "\n", "        ", "command", "+=", "\"-- --train_data_pattern='gs://youtube8m-ml-us-east1/2/frame/train/train*.tfrecord' \"", "\n", "command", "+=", "\"--frame_features=True \"", "\n", "", "else", ":", "\n", "        ", "command", "+=", "\"-- --train_data_pattern='gs://youtube8m-ml-us-east1/2/video/train/train*.tfrecord' \"", "\n", "command", "+=", "\"--frame_features=False \"", "\n", "", "command", "+=", "\"--model={} \"", ".", "format", "(", "MODEL_NAME", ")", "\n", "command", "+=", "\"--feature_names='{}' \"", ".", "format", "(", "FEATURES", ")", "\n", "command", "+=", "\"--feature_sizes='1024,128' \"", "\n", "command", "+=", "\"--batch_size={} \"", ".", "format", "(", "str", "(", "BATCH_SIZE", ")", ")", "\n", "command", "+=", "\"--train_dir=$BUCKET_NAME/{} \"", ".", "format", "(", "MODEL_NAME", "+", "str", "(", "MODEL_VERSION", ")", ")", "\n", "command", "+=", "\"--base_learning_rate={} \"", ".", "format", "(", "str", "(", "BASE_LEARNING_RATE", ")", ")", "\n", "if", "START_NEW_MODEL", ":", "\n", "        ", "command", "+=", "\"--start_new_model\"", "\n", "", "return", "command", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.generate_gcloud_inference.main": [[35, 51], ["str", "str"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "# Start by defining a job name.", "\n", "    ", "command", "=", "\"JOB_NAME=yt8m_inference_$(date +%Y%m%d_%H%M%S); \"", "\n", "command", "+=", "\"gcloud --verbosity=debug ml-engine jobs submit training $JOB_NAME \"", "\n", "command", "+=", "\"--package-path=youtube-8m --module-name=youtube-8m.inference \"", "\n", "command", "+=", "\"--staging-bucket=$BUCKET_NAME --region=us-east1 \"", "\n", "command", "+=", "\"--config=youtube-8m/cloudml_config/{} \"", ".", "format", "(", "CLOUD_GPU", ")", "\n", "if", "FRAME_LEVEL", ":", "\n", "        ", "command", "+=", "\"-- --input_data_pattern='gs://youtube8m-ml-us-east1/2/frame/test/test*.tfrecord' \"", "\n", "command", "+=", "\"--frame_features=True \"", "\n", "", "else", ":", "\n", "        ", "command", "+=", "\"-- --input_data_pattern='gs://youtube8m-ml-us-east1/2/video/test/test*.tfrecord \"", "\n", "command", "+=", "\"--frame_features=False \"", "\n", "", "command", "+=", "\"--train_dir=$BUCKET_NAME/{} \"", ".", "format", "(", "MODEL_NAME", "+", "str", "(", "MODEL_VERSION", ")", ")", "\n", "command", "+=", "\"--output_file=$BUCKET_NAME/{}/predictions.csv\"", ".", "format", "(", "MODEL_NAME", "+", "str", "(", "MODEL_VERSION", ")", ")", "\n", "return", "command", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.generate_gcloud_train_valid.main": [[49, 89], ["str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "# Start by defining a job name.", "\n", "    ", "local_command", "=", "\"gcloud ml-engine local train \"", "\n", "command", "=", "\"JOB_NAME=yt8m_train_$(date +%Y%m%d_%H%M%S); \"", "\n", "command", "+=", "\"gcloud --verbosity=debug ml-engine jobs submit training $JOB_NAME \"", "\n", "command", "+=", "\"--package-path=youtube-8m --module-name=youtube-8m.train \"", "\n", "local_command", "+=", "\"--package-path=youtube-8m --module-name=youtube-8m.train \"", "\n", "command", "+=", "\"--staging-bucket=$BUCKET_NAME --region=us-east1 \"", "\n", "command", "+=", "\"--config=youtube-8m/cloudml_config/{} \"", ".", "format", "(", "CLOUD_GPU", ")", "\n", "if", "FRAME_LEVEL", ":", "\n", "        ", "command", "+=", "\"-- --train_data_pattern='gs://youtube8m-ml-us-east1/2/frame/train/*.tfrecord' \"", "\n", "command", "+=", "\"--frame_features=True \"", "\n", "local_command", "+=", "\"-- --train_data_pattern='gs://youtube8m-ml-us-east1/2/frame/train/*.tfrecord' \"", "\n", "local_command", "+=", "\"--frame_features=True \"", "\n", "", "else", ":", "\n", "        ", "command", "+=", "\"-- --train_data_pattern='gs://youtube8m-ml-us-east1/2/video/train/*.tfrecord' \"", "\n", "command", "+=", "\"--frame_features=False \"", "\n", "local_command", "+=", "\"-- --train_data_pattern='gs://youtube8m-ml-us-east1/2/video/train/*.tfrecord' \"", "\n", "local_command", "+=", "\"--frame_features=False \"", "\n", "", "command", "+=", "\"--base_learning_rate={} \"", ".", "format", "(", "str", "(", "BASE_LEARNING_RATE", ")", ")", "\n", "local_command", "+=", "\"--base_learning_rate={} \"", ".", "format", "(", "str", "(", "BASE_LEARNING_RATE", ")", ")", "\n", "command", "+=", "\"--model={} \"", ".", "format", "(", "MODEL_NAME", ")", "\n", "local_command", "+=", "\"--model={} \"", ".", "format", "(", "MODEL_NAME", ")", "\n", "command", "+=", "\"--feature_names='{}' \"", ".", "format", "(", "FEATURES", ")", "\n", "local_command", "+=", "\"--feature_names='{}' \"", ".", "format", "(", "FEATURES", ")", "\n", "command", "+=", "\"--feature_sizes='1024,128' \"", "\n", "local_command", "+=", "\"--feature_sizes='1024,128' \"", "\n", "command", "+=", "\"--batch_size={} \"", ".", "format", "(", "str", "(", "BATCH_SIZE", ")", ")", "\n", "local_command", "+=", "\"--batch_size={} \"", ".", "format", "(", "str", "(", "BATCH_SIZE", ")", ")", "\n", "command", "+=", "\"--train_dir=$BUCKET_NAME/{} \"", ".", "format", "(", "MODEL_NAME", "+", "str", "(", "MODEL_VERSION", ")", ")", "\n", "local_command", "+=", "\"--train_dir=/tmp/yt8m_train \"", "\n", "command", "+=", "\"--base_learning_rate={} \"", ".", "format", "(", "str", "(", "BASE_LEARNING_RATE", ")", ")", "\n", "local_command", "+=", "\"--base_learning_rate={} \"", ".", "format", "(", "str", "(", "BASE_LEARNING_RATE", ")", ")", "\n", "if", "START_NEW_MODEL", ":", "\n", "        ", "command", "+=", "\"--start_new_model \"", "\n", "local_command", "+=", "\"--start_new_model \"", "\n", "", "local_command", "+=", "\"--runtime-version=1.8\"", "\n", "command", "+=", "EXTRA", "\n", "local_command", "+=", "EXTRA", "\n", "return", "command", ",", "local_command", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.find_class_by_name": [[38, 42], ["next", "getattr"], "function", ["None"], ["def", "find_class_by_name", "(", "name", ",", "modules", ")", ":", "\n", "    ", "\"\"\" Searches the provided modules for the named class and returns it. \"\"\"", "\n", "modules", "=", "[", "getattr", "(", "module", ",", "name", ",", "None", ")", "for", "module", "in", "modules", "]", "\n", "return", "next", "(", "a", "for", "a", "in", "modules", "if", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.get_input_evaluation_tensors": [[44, 81], ["tensorflow.logging.info", "tensorflow.name_scope", "tensorflow.gfile.Glob", "tensorflow.logging.info", "tensorflow.train.string_input_producer", "tensorflow.train.batch_join", "IOError", "reader.prepare_reader", "str", "str", "range", "len"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.readers.YT8MFrameFeatureReader.prepare_reader"], ["", "def", "get_input_evaluation_tensors", "(", "reader", ",", "\n", "data_pattern", ",", "\n", "batch_size", "=", "1024", ",", "\n", "num_readers", "=", "1", ")", ":", "\n", "    ", "\"\"\"Creates the section of the graph which reads the evaluation data.\n\n      Args:\n        reader: A class which parses the training data.\n        data_pattern: A 'glob' style path to the data files.\n        batch_size: How many examples to process at a time.\n        num_readers: How many I/O threads to use.\n\n      Returns:\n        A tuple containing the features tensor, labels tensor, and optionally a\n        tensor containing the number of frames per video. The exact dimensions\n        depend on the reader being used.\n\n      Raises:\n        IOError: If no files matching the given pattern were found.\n    \"\"\"", "\n", "logging", ".", "info", "(", "\"Using batch size of \"", "+", "str", "(", "batch_size", ")", "+", "\" for evaluation.\"", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"eval_input\"", ")", ":", "\n", "        ", "files", "=", "gfile", ".", "Glob", "(", "data_pattern", ")", "\n", "if", "not", "files", ":", "\n", "            ", "raise", "IOError", "(", "\"Unable to find the evaluation files.\"", ")", "\n", "", "logging", ".", "info", "(", "\"number of evaluation files: \"", "+", "str", "(", "len", "(", "files", ")", ")", ")", "\n", "filename_queue", "=", "tf", ".", "train", ".", "string_input_producer", "(", "\n", "files", ",", "shuffle", "=", "False", ",", "num_epochs", "=", "1", ")", "\n", "eval_data", "=", "[", "\n", "reader", ".", "prepare_reader", "(", "filename_queue", ")", "for", "_", "in", "range", "(", "num_readers", ")", "\n", "]", "\n", "return", "tf", ".", "train", ".", "batch_join", "(", "\n", "eval_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "capacity", "=", "3", "*", "batch_size", ",", "\n", "allow_smaller_final_batch", "=", "True", ",", "\n", "enqueue_many", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.build_graph": [[83, 138], ["tensorflow.Variable", "batch_evaluate.get_input_evaluation_tensors", "tensorflow.summary.histogram", "tensorflow.nn.l2_normalize", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "len", "tensorflow.variable_scope", "model.create_model", "tensorflow.summary.histogram", "tensorflow.cast", "tensorflow.summary.merge_all", "model_input_raw.get_shape", "model.create_model.keys", "label_loss_fn.calculate_loss"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.get_input_evaluation_tensors", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.video_level_models.ClassLearningFourNnModel.create_model", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.losses.SoftmaxLoss.calculate_loss"], ["", "", "def", "build_graph", "(", "reader", ",", "\n", "model", ",", "\n", "eval_data_pattern", ",", "\n", "label_loss_fn", ",", "\n", "batch_size", "=", "1024", ",", "\n", "num_readers", "=", "1", ")", ":", "\n", "    ", "\"\"\"Creates the Tensorflow graph for evaluation.\n\n      Args:\n        reader: The data file reader. It should inherit from BaseReader.\n        model: The core model (e.g. logistic or neural net). It should inherit\n               from BaseModel.\n        eval_data_pattern: glob path to the evaluation data files.\n        label_loss_fn: What kind of loss to apply to the model. It should inherit\n                    from BaseLoss.\n        batch_size: How many examples to process at a time.\n        num_readers: How many threads to use for I/O operations.\n    \"\"\"", "\n", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "name", "=", "\"global_step\"", ")", "\n", "video_id_batch", ",", "model_input_raw", ",", "labels_batch", ",", "num_frames", "=", "get_input_evaluation_tensors", "(", "\n", "# pylint: disable=g-line-too-long", "\n", "reader", ",", "\n", "eval_data_pattern", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_readers", "=", "num_readers", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"model_input_raw\"", ",", "model_input_raw", ")", "\n", "\n", "feature_dim", "=", "len", "(", "model_input_raw", ".", "get_shape", "(", ")", ")", "-", "1", "\n", "\n", "# Normalize input features.", "\n", "model_input", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "model_input_raw", ",", "feature_dim", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"tower\"", ")", ":", "\n", "        ", "result", "=", "model", ".", "create_model", "(", "model_input", ",", "\n", "num_frames", "=", "num_frames", ",", "\n", "vocab_size", "=", "reader", ".", "num_classes", ",", "\n", "labels", "=", "labels_batch", ",", "\n", "is_training", "=", "False", ")", "\n", "predictions", "=", "result", "[", "\"predictions\"", "]", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"model_activations\"", ",", "predictions", ")", "\n", "if", "\"loss\"", "in", "result", ".", "keys", "(", ")", ":", "\n", "            ", "label_loss", "=", "result", "[", "\"loss\"", "]", "\n", "", "else", ":", "\n", "            ", "label_loss", "=", "label_loss_fn", ".", "calculate_loss", "(", "predictions", ",", "labels_batch", ")", "\n", "\n", "", "", "tf", ".", "add_to_collection", "(", "\"global_step\"", ",", "global_step", ")", "\n", "tf", ".", "add_to_collection", "(", "\"loss\"", ",", "label_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "\"predictions\"", ",", "predictions", ")", "\n", "tf", ".", "add_to_collection", "(", "\"input_batch\"", ",", "model_input", ")", "\n", "tf", ".", "add_to_collection", "(", "\"input_batch_raw\"", ",", "model_input_raw", ")", "\n", "tf", ".", "add_to_collection", "(", "\"video_id_batch\"", ",", "video_id_batch", ")", "\n", "tf", ".", "add_to_collection", "(", "\"num_frames\"", ",", "num_frames", ")", "\n", "tf", ".", "add_to_collection", "(", "\"labels\"", ",", "tf", ".", "cast", "(", "labels_batch", ",", "tf", ".", "float32", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "\"summary_op\"", ",", "tf", ".", "summary", ".", "merge_all", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.get_latest_checkpoint": [[140, 155], ["tensorflow.python.lib.io.file_io.get_matching_files", "tensorflow.logging.debug", "os.path.join", "sorted", "int", "[].split", "os.path.basename().split", "os.path.basename"], "function", ["None"], ["", "def", "get_latest_checkpoint", "(", ")", ":", "\n", "    ", "index_files", "=", "file_io", ".", "get_matching_files", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_dir", ",", "'model.ckpt-*.index'", ")", ")", "\n", "tf", ".", "logging", ".", "debug", "(", "\"Looking at {}\"", ".", "format", "(", "index_files", ")", ")", "\n", "\n", "# No files", "\n", "if", "not", "index_files", ":", "\n", "        ", "return", "None", "\n", "\n", "# Index file path with the maximum step size.", "\n", "", "latest_index_file", "=", "sorted", "(", "\n", "[", "(", "int", "(", "os", ".", "path", ".", "basename", "(", "f", ")", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", ",", "f", ")", "\n", "for", "f", "in", "index_files", "]", ")", "[", "-", "1", "]", "[", "1", "]", "\n", "\n", "# Chop off .index suffix and return", "\n", "return", "latest_index_file", "[", ":", "-", "6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.evaluate": [[157, 200], ["tensorflow.set_random_seed", "os.path.join", "json.loads", "tensorflow.python.lib.io.file_io.file_exists", "IOError", "tensorflow.python.lib.io.file_io.FileIO().read", "tensorflow.Graph().as_default", "utils.GetListOfFeatureNamesAndSizes", "batch_evaluate.build_graph", "tensorflow.logging.info", "tensorflow.summary.FileWriter", "eval_util.EvaluationMetrics", "readers.YT8MFrameFeatureReader", "readers.YT8MAggregatedFeatureReader", "batch_evaluate.find_class_by_name", "batch_evaluate.find_class_by_name", "IOError", "tensorflow.python.lib.io.file_io.FileIO", "tensorflow.Graph", "tensorflow.get_default_graph"], "function", ["home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.None.utils.GetListOfFeatureNamesAndSizes", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.build_graph", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.find_class_by_name", "home.repos.pwc.inspect_result.pomonam_LearnablePoolingMethods.scripts.batch_evaluate.find_class_by_name"], ["", "def", "evaluate", "(", ")", ":", "\n", "    ", "tf", ".", "set_random_seed", "(", "0", ")", "# for reproducibility", "\n", "\n", "# Write json of flags", "\n", "model_flags_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_dir", ",", "\"model_flags.json\"", ")", "\n", "if", "not", "file_io", ".", "file_exists", "(", "model_flags_path", ")", ":", "\n", "        ", "raise", "IOError", "(", "(", "\"Cannot find file %s. Did you run train.py on the same \"", "\n", "\"--train_dir?\"", ")", "%", "model_flags_path", ")", "\n", "", "flags_dict", "=", "json", ".", "loads", "(", "file_io", ".", "FileIO", "(", "model_flags_path", ",", "mode", "=", "\"r\"", ")", ".", "read", "(", ")", ")", "\n", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "# convert feature_names and feature_sizes to lists of values", "\n", "        ", "feature_names", ",", "feature_sizes", "=", "utils", ".", "GetListOfFeatureNamesAndSizes", "(", "\n", "flags_dict", "[", "\"feature_names\"", "]", ",", "flags_dict", "[", "\"feature_sizes\"", "]", ")", "\n", "\n", "if", "flags_dict", "[", "\"frame_features\"", "]", ":", "\n", "            ", "reader", "=", "readers", ".", "YT8MFrameFeatureReader", "(", "feature_names", "=", "feature_names", ",", "\n", "feature_sizes", "=", "feature_sizes", ")", "\n", "", "else", ":", "\n", "            ", "reader", "=", "readers", ".", "YT8MAggregatedFeatureReader", "(", "feature_names", "=", "feature_names", ",", "\n", "feature_sizes", "=", "feature_sizes", ")", "\n", "\n", "", "model", "=", "find_class_by_name", "(", "flags_dict", "[", "\"model\"", "]", ",", "\n", "[", "frame_level_models", ",", "video_level_models", "]", ")", "(", ")", "\n", "label_loss_fn", "=", "find_class_by_name", "(", "flags_dict", "[", "\"label_loss\"", "]", ",", "[", "losses", "]", ")", "(", ")", "\n", "\n", "if", "FLAGS", ".", "eval_data_pattern", "is", "\"\"", ":", "\n", "            ", "raise", "IOError", "(", "\"'eval_data_pattern' was not specified. \"", "+", "\n", "\"Nothing to evaluate.\"", ")", "\n", "\n", "", "build_graph", "(", "\n", "reader", "=", "reader", ",", "\n", "model", "=", "model", ",", "\n", "eval_data_pattern", "=", "FLAGS", ".", "eval_data_pattern", ",", "\n", "label_loss_fn", "=", "label_loss_fn", ",", "\n", "num_readers", "=", "FLAGS", ".", "num_readers", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ")", "\n", "logging", ".", "info", "(", "\"built evaluation graph\"", ")", "\n", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "\n", "FLAGS", ".", "train_dir", ",", "graph", "=", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "\n", "evl_metrics", "=", "eval_util", ".", "EvaluationMetrics", "(", "reader", ".", "num_classes", ",", "FLAGS", ".", "top_k", ")", "\n", "", "", ""]]}