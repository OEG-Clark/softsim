{"home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.look_up_index": [[44, 51], ["range", "len"], "function", ["None"], ["def", "look_up_index", "(", "name", ")", ":", "\n", "\n", "  ", "for", "i", "in", "range", "(", "len", "(", "links", ")", ")", ":", "\n", "    ", "if", "name", "in", "links", "[", "i", "]", ":", "\n", "      ", "return", "i", "\n", "\n", "", "", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.index": [[72, 75], ["app.route", "flask.render_template"], "function", ["None"], ["@", "app", ".", "route", "(", "'/'", ")", "\n", "def", "index", "(", ")", ":", "\n", "  ", "return", "render_template", "(", "'index.html'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.add_to_file": [[77, 81], ["open", "myfile.write", "str"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["", "def", "add_to_file", "(", "player1", ",", "entrance_code", ",", "board", ",", "action", ",", "timestamp", ")", ":", "\n", "\n", "  ", "with", "open", "(", "\"log.txt\"", ",", "\"a\"", ")", "as", "myfile", ":", "\n", "    ", "myfile", ".", "write", "(", "player1", "+", "','", "+", "entrance_code", "+", "','", "+", "str", "(", "board", ")", "+", "','", "+", "action", "+", "','", "+", "timestamp", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.add_message": [[83, 100], ["app.route", "flask.request.get_json", "print", "app_nodb.add_to_file", "flask.jsonify", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.add_to_file"], ["", "", "@", "app", ".", "route", "(", "'/add_message'", ",", "methods", "=", "[", "'POST'", "]", ")", "\n", "def", "add_message", "(", ")", ":", "\n", "\n", "  ", "json_data", "=", "request", ".", "get_json", "(", "force", "=", "True", ")", "\n", "\n", "player1", "=", "json_data", "[", "\"a\"", "]", "\n", "message", "=", "json_data", "[", "\"action\"", "]", "\n", "\n", "# entrance code here:", "\n", "\n", "code", "=", "json_data", "[", "\"b\"", "]", "\n", "\n", "print", "(", "'adding'", ",", "player1", ",", "message", ")", "\n", "\n", "add_to_file", "(", "player1", ",", "code", ",", "message", ",", "'2'", ",", "str", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "\n", "return", "jsonify", "(", "result", "=", "{", "\"status\"", ":", "200", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.query_db": [[101, 116], ["Book.query.filter_by().first", "str", "Book.query.filter_by"], "function", ["None"], ["", "def", "query_db", "(", "player1", ",", "entrance_code", ",", "move", ")", ":", "\n", "\n", "    ", "player1", "=", "player1", "+", "'.'", "+", "entrance_code", "\n", "\n", "try", ":", "\n", "        ", "book", "=", "Book", ".", "query", ".", "filter_by", "(", "player1", "=", "player1", ",", "move", "=", "move", ")", ".", "first", "(", ")", "\n", "\n", "if", "book", "==", "None", ":", "\n", "          ", "return", "None", "\n", "", "else", ":", "\n", "          ", "return", "book", ".", "action", "\n", "\n", "#return jsonify(book.serialize())", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "      ", "return", "(", "str", "(", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.play": [[117, 125], ["app.route", "flask.request.args.get", "flask.request.args.get", "app_nodb.add_to_file", "flask.render_template", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.add_to_file"], ["", "", "@", "app", ".", "route", "(", "'/play'", ")", "\n", "def", "play", "(", ")", ":", "\n", "  ", "global", "name", "\n", "name", "=", "request", ".", "args", ".", "get", "(", "'username'", ")", "\n", "global", "code", "\n", "code", "=", "request", ".", "args", ".", "get", "(", "'code'", ")", "\n", "add_to_file", "(", "name", ",", "code", ",", "'NONE'", ",", "'0'", ",", "str", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "return", "render_template", "(", "'play_v4.html'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.instruction": [[126, 138], ["app.route", "flask.request.args.get", "flask.request.args.get", "flask.render_template", "flask.render_template"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get"], ["", "@", "app", ".", "route", "(", "'/instruction'", ")", "\n", "def", "instruction", "(", ")", ":", "\n", "  ", "global", "name", "\n", "global", "code", "\n", "name", "=", "request", ".", "args", ".", "get", "(", "'username'", ")", "\n", "code", "=", "request", ".", "args", ".", "get", "(", "'code'", ")", "\n", "\n", "if", "code", "in", "code_dict", "and", "code_dict", "[", "code", "]", "==", "'0'", ":", "\n", "    ", "code_dict", "[", "code", "]", "=", "'1'", "\n", "return", "render_template", "(", "'instruction.html'", ")", "\n", "", "else", ":", "\n", "    ", "return", "render_template", "(", "'invalid.html'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.demo": [[139, 146], ["app.route", "flask.request.args.get", "flask.request.args.get", "flask.render_template"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get"], ["", "", "@", "app", ".", "route", "(", "'/demo'", ")", "\n", "def", "demo", "(", ")", ":", "\n", "  ", "global", "name", "\n", "global", "code", "\n", "name", "=", "request", ".", "args", ".", "get", "(", "'username'", ")", "\n", "code", "=", "request", ".", "args", ".", "get", "(", "'code'", ")", "\n", "return", "render_template", "(", "'demo_v1.html'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.game_over": [[147, 152], ["app.route", "flask.request.args.get", "flask.render_template"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get"], ["", "@", "app", ".", "route", "(", "'/game_over'", ")", "\n", "def", "game_over", "(", ")", ":", "\n", "  ", "global", "name", "\n", "name", "=", "request", ".", "args", ".", "get", "(", "'username'", ")", "\n", "return", "render_template", "(", "'game_over.html'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.game_continue": [[153, 158], ["app.route", "flask.request.args.get", "flask.render_template"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get"], ["", "@", "app", ".", "route", "(", "'/game_continue'", ")", "\n", "def", "game_continue", "(", ")", ":", "\n", "  ", "global", "name", "\n", "name", "=", "request", ".", "args", ".", "get", "(", "'username'", ")", "\n", "return", "render_template", "(", "'game_continue.html'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.already_completed": [[159, 162], ["app.route", "flask.render_template"], "function", ["None"], ["", "@", "app", ".", "route", "(", "'/already_completed'", ")", "\n", "def", "already_completed", "(", ")", ":", "\n", "  ", "return", "render_template", "(", "'already_completed.html'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.create_symbol_color_maps": [[163, 205], ["range", "range", "isinstance", "isinstance", "isinstance", "isinstance", "str", "isinstance", "isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "def", "create_symbol_color_maps", "(", "temp", ")", ":", "\n", "\n", "  ", "count", "=", "0", "\n", "symbol_map", "=", "{", "}", "\n", "color_map", "=", "{", "}", "\n", "agent_loc", "=", "0", "\n", "\n", "for", "y", "in", "range", "(", "4", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "    ", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "\n", "      ", "symbs", "=", "'NONE'", "\n", "color", "=", "'None'", "\n", "\n", "for", "item", "in", "temp", "[", "x", "]", "[", "y", "]", ":", "\n", "        ", "if", "(", "isinstance", "(", "item", ",", "Block", ")", ")", ":", "\n", "          ", "symbs", "=", "symbs", "+", "''", "\n", "color", "=", "'Grey'", "\n", "", "elif", "(", "isinstance", "(", "item", ",", "Water", ")", ")", ":", "\n", "          ", "symbs", "=", "symbs", "+", "''", "\n", "color", "=", "'Blue'", "\n", "", "elif", "(", "isinstance", "(", "item", ",", "Switch", ")", ")", ":", "\n", "          ", "symbs", "=", "\"switch:\"", "+", "str", "(", "item", ".", "state", ")", "\n", "", "elif", "(", "isinstance", "(", "item", ",", "Door", ")", ")", ":", "\n", "          ", "if", "item", ".", "isopen", ":", "\n", "            ", "symbs", "=", "'NONE'", "\n", "", "else", ":", "\n", "            ", "symbs", "=", "'X'", "\n", "", "", "elif", "(", "isinstance", "(", "item", ",", "ResourceFont", ")", ")", ":", "\n", "          ", "symbs", "=", "item", ".", "str_id", "\n", "", "elif", "(", "isinstance", "(", "item", ",", "CraftingItem", ")", ")", ":", "\n", "          ", "symbs", "=", "item", ".", "str_id", "\n", "", "elif", "(", "isinstance", "(", "item", ",", "CraftingContainer", ")", ")", ":", "\n", "          ", "symbs", "=", "item", ".", "str_id", "\n", "", "elif", "(", "isinstance", "(", "item", ",", "agents", ".", "CraftingAgent", ")", ")", ":", "\n", "          ", "agent_loc", "=", "count", "\n", "#symbs = symbs + '(A)'", "\n", "\n", "", "", "symbol_map", "[", "count", "]", "=", "symbs", "\n", "color_map", "[", "count", "]", "=", "color", "\n", "\n", "count", "=", "count", "+", "1", "\n", "", "", "return", "symbol_map", ",", "color_map", ",", "agent_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.start_game": [[208, 278], ["app.route", "flask.request.get_json", "os.path.join", "mazebasev2.MazeGame", "games.MazeGame.observe", "app_nodb.add_to_file", "games.MazeGame.display", "app_nodb.create_symbol_color_maps", "flask.jsonify", "open", "yaml.load", "open", "flask.json.load", "mazebasev2.BasicKnowledgeGame", "str", "mazebasev2.lib.mazebase.games.featurizers.GridFeaturizer", "time.time", "random.uniform"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.add_to_file", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.display", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.create_symbol_color_maps", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["", "@", "app", ".", "route", "(", "'/start_game'", ",", "methods", "=", "[", "'GET'", ",", "'POST'", "]", ")", "\n", "def", "start_game", "(", ")", ":", "\n", "\n", "  ", "json_data", "=", "request", ".", "get_json", "(", "force", "=", "True", ")", "\n", "player1", "=", "json_data", "[", "\"a\"", "]", "\n", "entrance_code", "=", "json_data", "[", "\"b\"", "]", "\n", "\n", "if", "(", "player1", ",", "entrance_code", ")", "in", "game_count", ":", "\n", "\n", "    ", "if", "game_count", "[", "(", "player1", ",", "entrance_code", ")", "]", "==", "2", ":", "\n", "      ", "completed", "=", "True", "\n", "\n", "# otherwise, they have already done one. give the short task. ", "\n", "", "yaml_file", "=", "'mazebasev2/options/knowledge_planner/short_task.yaml'", "\n", "game_count", "[", "(", "player1", ",", "entrance_code", ")", "]", "=", "2", "\n", "\n", "", "elif", "player1", "not", "in", "users", ":", "\n", "    ", "users", "[", "player1", "]", "=", "1", "\n", "game_count", "[", "(", "player1", ",", "entrance_code", ")", "]", "=", "1", "\n", "yaml_file", "=", "'mazebasev2/options/knowledge_planner/short_task.yaml'", "\n", "\n", "", "else", ":", "\n", "#pick a long or short randomly and add to game_count accordingly. ", "\n", "    ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "0.4", ":", "\n", "      ", "yaml_file", "=", "'mazebasev2/options/knowledge_planner/long_task.yaml'", "\n", "game_count", "[", "(", "player1", ",", "entrance_code", ")", "]", "=", "2", "\n", "", "else", ":", "\n", "      ", "yaml_file", "=", "'mazebasev2/options/knowledge_planner/short_task.yaml'", "\n", "game_count", "[", "(", "player1", ",", "entrance_code", ")", "]", "=", "1", "\n", "\n", "", "", "with", "open", "(", "yaml_file", ",", "'r'", ")", "as", "handle", ":", "\n", "    ", "options", "=", "yaml", ".", "load", "(", "handle", ")", "\n", "\n", "# Get sub opts", "\n", "", "method_opt", "=", "options", "[", "'method'", "]", "\n", "env_opt", "=", "options", "[", "'env'", "]", "\n", "log_opt", "=", "options", "[", "'logs'", "]", "\n", "\n", "# Set up the mazebase environment", "\n", "knowledge_root", "=", "env_opt", "[", "'knowledge_root'", "]", "\n", "world_knowledge_file", "=", "os", ".", "path", ".", "join", "(", "'mazebasev2'", ",", "knowledge_root", ",", "env_opt", "[", "'world_knowledge'", "]", "[", "'train'", "]", ")", "\n", "with", "open", "(", "world_knowledge_file", ")", "as", "f", ":", "\n", "      ", "world_knowledge", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Make the world", "\n", "", "map_size", "=", "(", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ")", "\n", "all_games", "=", "[", "games", ".", "BasicKnowledgeGame", "(", "world_knowledge", "=", "world_knowledge", ",", "proposed_knowledge", "=", "[", "]", ",", "options", "=", "env_opt", ",", "load_items", "=", "None", ",", "map_size", "=", "map_size", ")", "]", "\n", "\n", "# Game wrapper", "\n", "game", "=", "games", ".", "MazeGame", "(", "\n", "all_games", ",", "\n", "featurizer", "=", "featurizers", ".", "GridFeaturizer", "(", ")", "\n", ")", "\n", "\n", "current_games", "[", "(", "player1", ",", "entrance_code", ")", "]", "=", "game", "\n", "\n", "game_observe", "=", "game", ".", "observe", "(", ")", "\n", "game_observe", "[", "\"extra_items\"", "]", "=", "game", ".", "game", ".", "extra_items", "\n", "game_observe", "[", "\"inventory\"", "]", "=", "game", ".", "game", ".", "inventory", "\n", "game_observe", "[", "\"goal\"", "]", "=", "game", ".", "game", ".", "goal", "\n", "game_observe", "[", "\"recipe\"", "]", "=", "game", ".", "game", ".", "recipe", "\n", "\n", "add_to_file", "(", "player1", ",", "entrance_code", ",", "game_observe", ",", "'1'", ",", "str", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "\n", "temp", "=", "game", ".", "display", "(", ")", "\n", "symbol_map", ",", "color_map", ",", "agent_loc", "=", "create_symbol_color_maps", "(", "temp", ")", "\n", "\n", "completed", "=", "False", "\n", "\n", "return", "jsonify", "(", "result", "=", "symbol_map", ",", "color", "=", "color_map", ",", "goal", "=", "game", ".", "game", ".", "goal", ",", "inventory", "=", "game", ".", "game", ".", "inventory", ",", "recipe", "=", "game", ".", "game", ".", "recipe", ",", "agent", "=", "agent_loc", ",", "links", "=", "link_lookup", ",", "already_complete", "=", "completed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.make_move": [[280, 331], ["app.route", "flask.request.get_json", "game.act", "game.display", "app_nodb.create_symbol_color_maps", "game.observe", "app_nodb.add_to_file", "flask.jsonify", "str", "random.randrange", "str", "game.is_over", "app_nodb.add_to_file", "time.time", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.display", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.create_symbol_color_maps", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.add_to_file", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.add_to_file"], ["", "@", "app", ".", "route", "(", "'/make_move'", ",", "methods", "=", "[", "'GET'", ",", "'POST'", "]", ")", "\n", "def", "make_move", "(", ")", ":", "\n", "\n", "#retrieve game given player usernames", "\n", "\n", "  ", "json_data", "=", "request", ".", "get_json", "(", "force", "=", "True", ")", "\n", "player1", "=", "json_data", "[", "\"a\"", "]", "\n", "entrance_code", "=", "json_data", "[", "\"b\"", "]", "\n", "\n", "game", "=", "current_games", "[", "(", "player1", ",", "entrance_code", ")", "]", "\n", "\n", "action", "=", "json_data", "[", "\"action\"", "]", "\n", "\n", "temp_action", "=", "action", "\n", "\n", "if", "action", "==", "\"open_door\"", ":", "\n", "    ", "action", "=", "\"toggle_switch\"", "\n", "\n", "", "game", ".", "act", "(", "action", ")", "\n", "\n", "temp", "=", "game", ".", "display", "(", ")", "\n", "symbol_map", ",", "color_map", ",", "agent_loc", "=", "create_symbol_color_maps", "(", "temp", ")", "\n", "\n", "current_games", "[", "(", "player1", ",", "entrance_code", ")", "]", "=", "game", "\n", "\n", "game_observe", "=", "game", ".", "observe", "(", ")", "\n", "game_observe", "[", "\"extra_items\"", "]", "=", "game", ".", "game", ".", "extra_items", "\n", "game_observe", "[", "\"inventory\"", "]", "=", "game", ".", "game", ".", "inventory", "\n", "game_observe", "[", "\"goal\"", "]", "=", "game", ".", "game", ".", "goal", "\n", "game_observe", "[", "\"recipe\"", "]", "=", "game", ".", "game", ".", "recipe", "\n", "\n", "add_to_file", "(", "player1", ",", "entrance_code", ",", "game_observe", ",", "'3'", ",", "str", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "\n", "is_complete", "=", "False", "\n", "rand_num", "=", "2", "\n", "\n", "if", "game_count", "[", "(", "player1", ",", "entrance_code", ")", "]", "==", "1", ":", "\n", "    ", "code", "=", "\"NONE\"", "\n", "", "else", ":", "\n", "# GENERATE CODE", "\n", "    ", "num", "=", "random", ".", "randrange", "(", "1", ",", "10", "**", "6", ")", "\n", "# using format of 6 digit number", "\n", "num_with_zeros", "=", "'{:06}'", ".", "format", "(", "num", ")", "\n", "code", "=", "str", "(", "num", ")", "\n", "\n", "", "if", "game", ".", "is_over", "(", ")", "or", "rand_num", "==", "1", ":", "\n", "    ", "is_complete", "=", "True", "\n", "add_to_file", "(", "player1", ",", "entrance_code", ",", "code", ",", "'5'", ",", "str", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "\n", "\n", "", "return", "jsonify", "(", "result", "=", "symbol_map", ",", "complete", "=", "is_complete", ",", "code", "=", "code", ",", "color", "=", "color_map", ",", "inventory", "=", "game", ".", "game", ".", "inventory", ",", "agent", "=", "agent_loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.restart_game": [[334, 344], ["app.route", "flask.request.get_json", "app_nodb.add_to_file", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.add_to_file"], ["", "@", "app", ".", "route", "(", "'/restart_game'", ",", "methods", "=", "[", "'GET'", ",", "'POST'", "]", ")", "\n", "def", "restart_game", "(", ")", ":", "\n", "\n", "#retrieve game given player usernames", "\n", "\n", "  ", "json_data", "=", "request", ".", "get_json", "(", "force", "=", "True", ")", "\n", "player1", "=", "json_data", "[", "\"a\"", "]", "\n", "entrance_code", "=", "json_data", "[", "\"b\"", "]", "\n", "\n", "add_to_file", "(", "player1", ",", "entrance_code", ",", "'NONE'", ",", "'4'", ",", "str", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebasev2.main.main": [[61, 418], ["parser.parse_args", "print", "pprint.pprint", "print", "pprint.pprint", "torch.manual_seed", "torch.set_num_threads", "random.seed", "numpy.random.seed", "os.path.join", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "os.path.join", "print", "logging.getLogger.debug", "lib.MazeGame", "lib.planning.KnowledgePlanner", "games.MazeGame.reset", "games.MazeGame.get_max_bounds", "dict", "list", "main.get_obs", "lib.planning.KnowledgePlanner.reset", "torch.cuda.is_available", "vars", "torch.cuda.manual_seed", "len", "os.path.isdir", "os.system", "open", "json.load", "os.path.join", "print", "logging.getLogger.debug", "lib.BasicKnowledgeGame", "len", "os.path.isfile", "torch.load", "lib.planning.KnowledgePlanner.load_state_dict", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "games.MazeGame.all_possible_features", "games.MazeGame.display", "time.sleep", "os.system", "time.time", "Exception", "open", "yaml.load", "[].split", "click.confirm", "open", "json.load", "Exception", "lib.mazebase.games.featurizers.GridFeaturizer", "os.path.join", "os.path.join", "Exception", "open", "yaml.dump", "open", "yaml.dump", "open", "yaml.dump", "open", "yaml.dump", "main.get_obs", "logging.getLogger.debug", "lib.planning.KnowledgePlanner.get_action", "games.MazeGame.act", "os.system", "os.path.basename().split", "os.path.join", "os.path.join", "vars", "os.path.join", "os.path.join", "os.path.join", "os.path.basename().split", "os.path.join", "os.path.join", "vars", "os.path.join", "os.path.join", "os.path.join", "enumerate", "games.MazeGame.display", "time.sleep", "os.system", "print", "games.MazeGame.is_over", "print", "time.time", "main.get_obs", "games.MazeGame.reset", "main.get_obs", "lib.planning.KnowledgePlanner.reset", "main.save_checkpoint", "time.time", "random.random", "json.load.append", "numpy.random.choice", "lib.knowledge.KnowledgeSubGraph", "list", "lib.knowledge.KnowledgeSubGraph.get_postconditions", "range", "set().union", "lib.knowledge.Rule", "json.load.append", "os.path.basename", "games.MazeGame.all_possible_features", "float", "abs", "range", "float", "abs", "lib.knowledge.Rule().create_triplet_corresp", "lib.knowledge.KnowledgeSubGraph.get_preconditions", "lib.knowledge.create_rule_from_triplets", "os.path.basename", "os.path.basename", "num_change_probs.split", "change_type_probs.split", "numpy.random.choice", "set", "set", "sum", "len", "sum", "lib.knowledge.Rule", "random.choice", "time.time", "range", "list.append", "changed.append", "len", "list.pop", "changed.pop", "random.choice", "random.choice", "any", "any", "random.choice", "list", "any", "range", "possible_actions.pop", "random.choice", "spawn_items.keys", "len", "possible_actions.index", "random.choice", "pdb.set_trace", "Exception", "list", "random.choice", "spawn_items.keys", "list", "spawn_items.keys"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.get_max_bounds", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebasev2.main.get_obs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.display", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebasev2.main.get_obs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.get_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.display", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebasev2.main.get_obs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebasev2.main.get_obs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebasev2.main.save_checkpoint", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_postconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.create_triplet_corresp", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.create_rule_from_triplets", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.index", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "args", ".", "vis", "=", "not", "args", ".", "no_vis", "\n", "\n", "# Set options", "\n", "if", "args", ".", "path_opt", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "path_opt", ",", "'r'", ")", "as", "handle", ":", "\n", "            ", "options", "=", "yaml", ".", "load", "(", "handle", ")", "\n", "", "", "print", "(", "'## args'", ")", ";", "pprint", "(", "vars", "(", "args", ")", ")", "\n", "print", "(", "'## options'", ")", ";", "pprint", "(", "options", ")", "\n", "\n", "# Get sub opts", "\n", "method_opt", "=", "options", "[", "'method'", "]", "\n", "env_opt", "=", "options", "[", "'env'", "]", "\n", "log_opt", "=", "options", "[", "'logs'", "]", "\n", "\n", "# Set seed - just make the seed the trial number", "\n", "seed", "=", "args", ".", "trial", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Logging", "\n", "logpath", "=", "os", ".", "path", ".", "join", "(", "log_opt", "[", "'log_base'", "]", ",", "method_opt", "[", "'mode'", "]", ",", "log_opt", "[", "'exp_name'", "]", ",", "env_opt", "[", "'world_knowledge'", "]", "[", "args", ".", "train_mode", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "'trial%d'", "%", "args", ".", "trial", ")", "\n", "if", "len", "(", "args", ".", "resume", ")", "==", "0", ":", "\n", "# Make directory, check before overwriting", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "logpath", ")", ":", "\n", "            ", "if", "click", ".", "confirm", "(", "'Logs directory already exists in {}. Erase?'", "\n", ".", "format", "(", "logpath", ",", "default", "=", "False", ")", ")", ":", "\n", "                ", "os", ".", "system", "(", "'rm -rf '", "+", "logpath", ")", "\n", "", "else", ":", "\n", "                ", "return", "\n", "", "", "os", ".", "system", "(", "'mkdir -p '", "+", "logpath", ")", "\n", "", "main_logger", "=", "logging", ".", "getLogger", "(", "'spam_application'", ")", "\n", "main_logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "logpath", "+", "'/main_%s_%f.log'", "%", "(", "args", ".", "train_mode", ",", "time", ".", "time", "(", ")", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "main_logger", ".", "addHandler", "(", "fh", ")", "\n", "main_logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# Set up the mazebase environment", "\n", "# Load the true world knowledge that we use to build the actual environment", "\n", "knowledge_root", "=", "env_opt", "[", "'knowledge_root'", "]", "\n", "world_knowledge_file", "=", "os", ".", "path", ".", "join", "(", "knowledge_root", ",", "env_opt", "[", "'world_knowledge'", "]", "[", "args", ".", "train_mode", "]", ")", "\n", "print", "(", "\"Loading world knowledge from %s\"", "%", "world_knowledge_file", ")", "\n", "main_logger", ".", "debug", "(", "\"Loading world knowledge from %s\"", "%", "world_knowledge_file", ")", "\n", "with", "open", "(", "world_knowledge_file", ")", "as", "f", ":", "\n", "        ", "world_knowledge", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Generate the proposed knowledge ", "\n", "# TODO - should move this out of main!", "\n", "", "if", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'source'", "]", "==", "'file'", ":", "\n", "        ", "proposed_knowledge_file", "=", "os", ".", "path", ".", "join", "(", "knowledge_root", ",", "env_opt", "[", "'proposed_knowledge'", "]", "[", "args", ".", "train_mode", "]", ")", "\n", "print", "(", "\"Loading proposed knowledge from %s\"", "%", "proposed_knowledge_file", ")", "\n", "main_logger", ".", "debug", "(", "\"Loading proposed knowledge from %s\"", "%", "proposed_knowledge_file", ")", "\n", "with", "open", "(", "proposed_knowledge_file", ")", "as", "f", ":", "\n", "            ", "proposed_knowledge", "=", "json", ".", "load", "(", "f", ")", "\n", "# Randomly break rules in a way that is consistent with spawn rules", "\n", "", "", "elif", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'source'", "]", "==", "'random_spawns'", ":", "\n", "# Mode has to be fixed spawns for this to make sense", "\n", "        ", "assert", "(", "env_opt", "[", "'spawn'", "]", "[", "'mode'", "]", "==", "'fixed_spawns'", ")", "\n", "\n", "# Start with true knowledge rules", "\n", "# TODO - right now assuming we keep same number and there's a 1-1 between every proposed rule and true rule", "\n", "proposed_knowledge", "=", "[", "]", "\n", "for", "true_rule", "in", "world_knowledge", "[", "'rules'", "]", ":", "\n", "# With some probability just keep the correct rule", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'true_prob'", "]", ":", "\n", "                ", "proposed_knowledge", ".", "append", "(", "true_rule", ")", "\n", "# If not, randomly choose how many things to change", "\n", "", "else", ":", "\n", "# Choose how many things we want to change", "\n", "                ", "num_change_probs", "=", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'change_num_probs'", "]", "\n", "num_change_probs", "=", "[", "float", "(", "p", ")", "for", "p", "in", "num_change_probs", ".", "split", "(", "','", ")", "]", "\n", "assert", "(", "abs", "(", "sum", "(", "num_change_probs", ")", "-", "1", ")", "<", "1e-6", ")", "\n", "num_change", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "1", ",", "len", "(", "num_change_probs", ")", "+", "1", ")", ",", "p", "=", "num_change_probs", ")", "\n", "\n", "# Choices are drop, add, or swap", "\n", "change_type_probs", "=", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'change_type_probs'", "]", "\n", "change_type_probs", "=", "[", "float", "(", "p", ")", "for", "p", "in", "change_type_probs", ".", "split", "(", "','", ")", "]", "\n", "assert", "(", "abs", "(", "sum", "(", "change_type_probs", ")", "-", "1", ")", "<", "1e-6", ")", "\n", "spawn_ind", "=", "true_rule", "[", "'spawn_ind'", "]", "\n", "spawn_items", "=", "world_knowledge", "[", "'spawns'", "]", "[", "spawn_ind", "]", "\n", "item_dict", "=", "world_knowledge", "[", "'objects'", "]", "\n", "\n", "# Randomly change one thing from the true knowledge", "\n", "tr_graph", "=", "KnowledgeSubGraph", "(", "Rule", "(", "true_rule", ")", ".", "create_triplet_corresp", "(", ")", ")", "\n", "preconds", "=", "list", "(", "tr_graph", ".", "get_preconditions", "(", ")", ")", "\n", "postconds", "=", "tr_graph", ".", "get_postconditions", "(", ")", "\n", "changed", "=", "[", "False", "for", "_", "in", "preconds", "]", "\n", "for", "_", "in", "range", "(", "num_change", ")", ":", "\n", "                    ", "change_success", "=", "False", "\n", "while", "not", "change_success", ":", "\n", "                        ", "change_type", "=", "np", ".", "random", ".", "choice", "(", "[", "'add'", ",", "'drop'", ",", "'swap'", "]", ",", "p", "=", "change_type_probs", ")", "\n", "\n", "# If it's drop, drop a random precondition, (but never action)", "\n", "if", "change_type", "==", "'drop'", ":", "\n", "                            ", "drop_ind", "=", "random", ".", "choice", "(", "range", "(", "len", "(", "preconds", ")", ")", ")", "\n", "if", "preconds", "[", "drop_ind", "]", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_ACTION", ":", "\n", "                                ", "continue", "\n", "", "elif", "changed", "[", "drop_ind", "]", ":", "\n", "                                ", "continue", "\n", "", "else", ":", "\n", "                                ", "preconds", ".", "pop", "(", "drop_ind", ")", "\n", "changed", ".", "pop", "(", "drop_ind", ")", "\n", "change_success", "=", "True", "\n", "# If it's add, add a random item or location from the spawn list corresponding to the correct rule ", "\n", "", "", "elif", "change_type", "==", "'add'", ":", "\n", "# TODO - this is again hardcoded to our particular precond types. Need to figure out a centralized way to do this", "\n", "# For now, we're going to make it always satisfiable, but we should actually loosen this constraint at some point", "\n", "                            ", "while", "True", ":", "\n", "# TODO - hardcoded 1", "\n", "                                ", "precond_type", "=", "random", ".", "choice", "(", "[", "TripletInfo", ".", "REQUIRES_ITEM_X", "%", "1", ",", "TripletInfo", ".", "REQUIRES_LOCATION", "]", ")", "\n", "item", "=", "random", ".", "choice", "(", "list", "(", "spawn_items", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# Make sure item type matches the condition type", "\n", "# TODO - remove this restriction later too", "\n", "if", "precond_type", "==", "TripletInfo", ".", "REQUIRES_ITEM_X", "%", "1", "and", "item_dict", "[", "item", "]", "!=", "'CraftingItem'", ":", "\n", "                                    ", "continue", "\n", "", "elif", "precond_type", "==", "TripletInfo", ".", "REQUIRES_LOCATION", "and", "item_dict", "[", "item", "]", "==", "'CraftingItem'", ":", "\n", "                                    ", "continue", "\n", "\n", "# Fails if that precondition already exists", "\n", "# TODO - actually, make it if it is in it at all (TODO - relax this later)", "\n", "", "if", "any", "(", "[", "precond", "[", "0", "]", "==", "precond_type", "and", "precond", "[", "1", "]", "==", "item", "for", "precond", "in", "preconds", "]", ")", ":", "\n", "                                    ", "continue", "\n", "# TODO TODO DEBUG", "\n", "", "if", "any", "(", "[", "precond", "[", "1", "]", "==", "item", "for", "precond", "in", "preconds", "]", ")", ":", "\n", "                                    ", "continue", "\n", "\n", "# TODO - force it to fail for location if we have a location precondition already", "\n", "# This helps prevent impossible preconds. Change this at some point to be okay?", "\n", "", "if", "precond_type", "==", "TripletInfo", ".", "REQUIRES_LOCATION", "and", "any", "(", "[", "precond", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_LOCATION", "for", "precond", "in", "preconds", "]", ")", ":", "\n", "                                    ", "continue", "\n", "", "break", "\n", "\n", "# If all this succeeds, now we can add it", "\n", "", "new_precond", "=", "(", "precond_type", ",", "item", ")", "\n", "preconds", ".", "append", "(", "new_precond", ")", "\n", "changed", ".", "append", "(", "True", ")", "\n", "change_success", "=", "True", "\n", "\n", "# If it's swap, choose an original precondition and change the item or action", "\n", "", "elif", "change_type", "==", "'swap'", ":", "\n", "# Choose which piece of knowledge to change", "\n", "                            ", "swap_ind", "=", "random", ".", "choice", "(", "range", "(", "len", "(", "preconds", ")", ")", ")", "\n", "if", "changed", "[", "swap_ind", "]", ":", "\n", "                                ", "continue", "\n", "", "precond", "=", "preconds", "[", "swap_ind", "]", "\n", "# Change the action", "\n", "if", "precond", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_ACTION", ":", "\n", "# TODO - again, this seems like this list should be somewhere else", "\n", "                                ", "possible_actions", "=", "[", "'mine'", ",", "'craft'", ",", "'grab'", ",", "'chop'", "]", "\n", "possible_actions", ".", "pop", "(", "possible_actions", ".", "index", "(", "precond", "[", "1", "]", ")", ")", "\n", "new_action", "=", "random", ".", "choice", "(", "possible_actions", ")", "\n", "new_precond", "=", "(", "precond", "[", "0", "]", ",", "new_action", ")", "\n", "# Change the item at location", "\n", "", "elif", "precond", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_LOCATION", ":", "\n", "                                ", "while", "True", ":", "\n", "                                    ", "item", "=", "random", ".", "choice", "(", "list", "(", "spawn_items", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# Make sure item type matches the condition type", "\n", "# TODO - remove this restriction later too", "\n", "if", "item_dict", "[", "item", "]", "==", "'CraftingItem'", ":", "\n", "                                        ", "continue", "\n", "# Also make sure it's a change", "\n", "", "elif", "item", "==", "precond", "[", "1", "]", ":", "\n", "                                        ", "continue", "\n", "", "else", ":", "\n", "                                        ", "break", "\n", "", "", "new_precond", "=", "(", "precond", "[", "0", "]", ",", "item", ")", "\n", "", "elif", "precond", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_ITEM_X", "%", "1", ":", "\n", "                                ", "while", "True", ":", "\n", "                                    ", "item", "=", "random", ".", "choice", "(", "list", "(", "spawn_items", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# Make sure item type matches the condition type", "\n", "# TODO - remove this restriction later too", "\n", "if", "item_dict", "[", "item", "]", "!=", "'CraftingItem'", ":", "\n", "                                        ", "continue", "\n", "", "else", ":", "\n", "                                        ", "break", "\n", "", "", "new_precond", "=", "(", "precond", "[", "0", "]", ",", "item", ")", "\n", "", "else", ":", "\n", "                                ", "pdb", ".", "set_trace", "(", ")", "\n", "raise", "Exception", "(", "\"Bad precond type\"", ")", "\n", "\n", "# Swap the precond", "\n", "", "preconds", "[", "swap_ind", "]", "=", "new_precond", "\n", "changed", "[", "swap_ind", "]", "=", "True", "\n", "change_success", "=", "True", "\n", "\n", "# Add the new rule to proposed_knowledge", "\n", "", "", "", "rule_name", "=", "true_rule", "[", "Rule", ".", "RULE_NAME", "]", "\n", "triplets", "=", "set", "(", "[", "(", "rule_name", ",", "pre", "[", "0", "]", ",", "pre", "[", "1", "]", ")", "for", "pre", "in", "preconds", "]", ")", ".", "union", "(", "[", "(", "rule_name", ",", "post", "[", "0", "]", ",", "post", "[", "1", "]", ")", "for", "post", "in", "postconds", "]", ")", "\n", "new_rule", "=", "Rule", "(", "create_rule_from_triplets", "(", "set", "(", "triplets", ")", ")", ")", "\n", "proposed_knowledge", ".", "append", "(", "new_rule", ".", "rule_dict", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"TODO - need to implement the random version of this where we randomly break the true knowledge\"", ")", "\n", "\n", "# Make the world", "\n", "", "map_size", "=", "(", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ")", "\n", "all_games", "=", "[", "games", ".", "BasicKnowledgeGame", "(", "world_knowledge", "=", "world_knowledge", ",", "proposed_knowledge", "=", "proposed_knowledge", ",", "options", "=", "env_opt", ",", "map_size", "=", "map_size", ")", "]", "\n", "\n", "# Game wrapper", "\n", "game", "=", "games", ".", "MazeGame", "(", "\n", "all_games", ",", "\n", "#featurizer=featurizers.SentenceFeaturesRelative(", "\n", "#   max_sentences=30, bounds=4)", "\n", "featurizer", "=", "featurizers", ".", "GridFeaturizer", "(", ")", "\n", ")", "\n", "\n", "# Create the knowledge planner", "\n", "# TODO - maybe game should not be passed in since it contains priviledged info", "\n", "# Shoud at least be careful. Definitely don't save game within KnowledgePlanner", "\n", "# TODO - should maybe make this more generic at some point to run baselines with this file too", "\n", "planner", "=", "KnowledgePlanner", "(", "game", ",", "method_opt", ",", "env_opt", ",", "proposed_knowledge", ",", "world_knowledge", "[", "'objects'", "]", ")", "\n", "\n", "# Load from checkpoint (if applicable)", "\n", "# Save options and git information", "\n", "if", "len", "(", "args", ".", "resume", ")", ">", "0", ":", "\n", "        ", "assert", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "logpath", ",", "args", ".", "resume", ")", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "logpath", ",", "args", ".", "resume", ")", ")", "\n", "\n", "# Get start episode", "\n", "if", "args", ".", "train_mode", "==", "'train'", ":", "\n", "            ", "start_episode", "=", "ckpt", "[", "'train_episode'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Training mode %s is not implemented right now'", "%", "args", ".", "train_mode", ")", "\n", "\n", "# Load planner models", "\n", "", "planner", ".", "load_state_dict", "(", "ckpt", "[", "'planner'", "]", ")", "\n", "\n", "# Save new options, args, and git", "\n", "option_savename", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "path_opt", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_%s_ep%d.yaml'", "%", "(", "args", ".", "train_mode", ",", "start_episode", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logpath", ",", "options_savename", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "options", ",", "f", ",", "default_flow_style", "=", "False", ")", "\n", "", "args_savename", "=", "'args_%s_ep%d.yaml'", "%", "(", "args", ".", "train_mode", ",", "start_episodes", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logpath", ",", "args_savename", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "vars", "(", "args", ")", ",", "f", ",", "default_flow_style", "=", "False", ")", "\n", "\n", "# Save git info as well", "\n", "", "os", ".", "system", "(", "'git status > %s'", "%", "os", ".", "path", ".", "join", "(", "logpath", ",", "'git_status_%s_ep%d.txt'", "%", "(", "args", ".", "train_mode", ",", "start_episode", ")", ")", ")", "\n", "os", ".", "system", "(", "'git diff > %s'", "%", "os", ".", "path", ".", "join", "(", "logpath", ",", "'git_diff_%s_ep%d.txt'", "%", "(", "args", ".", "train_mode", ",", "start_episode", ")", ")", ")", "\n", "os", ".", "system", "(", "'git show > %s'", "%", "os", ".", "path", ".", "join", "(", "logpath", ",", "'git_show_%s_ep%d.txt'", "%", "(", "args", ".", "train_mode", ",", "start_episode", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "start_episode", "=", "0", "\n", "\n", "# Save options and args", "\n", "option_savename", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "path_opt", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_%s.yaml'", "%", "args", ".", "train_mode", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logpath", ",", "os", ".", "path", ".", "basename", "(", "args", ".", "path_opt", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "options", ",", "f", ",", "default_flow_style", "=", "False", ")", "\n", "", "args_savename", "=", "'args_%s.yaml'", "%", "args", ".", "train_mode", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logpath", ",", "args_savename", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "vars", "(", "args", ")", ",", "f", ",", "default_flow_style", "=", "False", ")", "\n", "\n", "# Save git info as well", "\n", "", "os", ".", "system", "(", "'git status > %s'", "%", "os", ".", "path", ".", "join", "(", "logpath", ",", "'git_status_%s.txt'", "%", "args", ".", "train_mode", ")", ")", "\n", "os", ".", "system", "(", "'git diff > %s'", "%", "os", ".", "path", ".", "join", "(", "logpath", ",", "'git_diff_%s.txt'", "%", "args", ".", "train_mode", ")", ")", "\n", "os", ".", "system", "(", "'git show > %s'", "%", "os", ".", "path", ".", "join", "(", "logpath", ",", "'git_show_%s.txt'", "%", "args", ".", "train_mode", ")", ")", "\n", "\n", "# Reset the game", "\n", "", "game", ".", "reset", "(", ")", "\n", "max_w", ",", "max_h", "=", "game", ".", "get_max_bounds", "(", ")", "\n", "vocab", "=", "dict", "(", "[", "(", "b", ",", "a", ")", "for", "a", ",", "b", "in", "enumerate", "(", "game", ".", "all_possible_features", "(", ")", ")", "]", ")", "\n", "list_vocab", "=", "list", "(", "game", ".", "all_possible_features", "(", ")", ")", "\n", "\n", "# Reset the planner state", "\n", "first_obs", "=", "get_obs", "(", "game", ",", "vocab", ",", "list_vocab", ")", "\n", "planner", ".", "reset", "(", "None", ",", "first_obs", ")", "\n", "\n", "# Display the game, if show_game is on", "\n", "if", "args", ".", "show_game", ":", "\n", "        ", "game", ".", "display", "(", ")", "\n", "sleep", "(", ".1", ")", "\n", "system", "(", "'clear'", ")", "\n", "\n", "# TODO - add other training modes here when necessary", "\n", "", "if", "args", ".", "train_mode", "==", "'train'", ":", "\n", "# Main training loop", "\n", "        ", "frame", "=", "0", "\n", "episode_count", "=", "start_episode", "\n", "episode_start_time", "=", "time", ".", "time", "(", ")", "\n", "while", "episode_count", "<", "env_opt", "[", "'num_episodes'", "]", ":", "\n", "# TODO - figure out how we want to do logging", "\n", "# TODO - Log / print here", "\n", "#print(\"r: {}\\ttr: {} \\tguess: {}\".format(", "\n", "#    game.reward(), game.reward_so_far(), game.approx_best_reward()))", "\n", "\n", "# Get observation from environment", "\n", "            ", "obs", "=", "get_obs", "(", "game", ",", "vocab", ",", "list_vocab", ")", "\n", "\n", "# Display game (if in display mode)", "\n", "if", "args", ".", "show_game", ":", "\n", "                ", "game", ".", "display", "(", ")", "\n", "\n", "# Log the observation", "\n", "", "main_logger", ".", "debug", "(", "\"Episode %d, step %d\"", "%", "(", "episode_count", ",", "frame", ")", ")", "\n", "#main_logger.debug(obs['grid_obs'])", "\n", "#main_logger.debug(obs['side_info'])", "\n", "\n", "# Get action from planner       ", "\n", "#id = game.current_agent()", "\n", "# TODO - maybe obs doesn't contain the right stuff. Deal with this later", "\n", "# TODO - need to pass in game? (Try to avoid to prevent privildged information)", "\n", "action", "=", "planner", ".", "get_action", "(", "obs", ")", "\n", "\n", "# Log the action", "\n", "#main_logger.debug(action)", "\n", "\n", "# Take the planned action", "\n", "game", ".", "act", "(", "action", ")", "\n", "\n", "# Sleep and clear (if in display mode)", "\n", "if", "args", ".", "show_game", ":", "\n", "                ", "sleep", "(", ".1", ")", "\n", "system", "(", "'clear'", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n", "# Update frame and possibly do reset", "\n", "", "frame", "+=", "1", "\n", "if", "game", ".", "is_over", "(", ")", "or", "frame", ">", "env_opt", "[", "'episode_num_steps'", "]", ":", "\n", "                ", "print", "(", "\"Finished episode %d in %f seconds\"", "%", "(", "episode_count", "+", "1", ",", "time", ".", "time", "(", ")", "-", "episode_start_time", ")", ")", "\n", "episode_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Get the last observation", "\n", "last_obs", "=", "get_obs", "(", "game", ",", "vocab", ",", "list_vocab", ")", "\n", "\n", "# Update counters", "\n", "frame", "=", "0", "\n", "episode_count", "+=", "1", "\n", "\n", "# TODO - add / change print/logging here", "\n", "#print(\"Final reward is: {}, guess was {}\".format(", "\n", "#    game.reward_so_far(), game.approx_best_reward()))", "\n", "\n", "# TODO - uncomment this?", "\n", "#game.make_harder()", "\n", "\n", "# Reset game and planner", "\n", "game", ".", "reset", "(", ")", "\n", "first_obs", "=", "get_obs", "(", "game", ",", "vocab", ",", "list_vocab", ")", "\n", "planner", ".", "reset", "(", "last_obs", ",", "first_obs", ")", "\n", "\n", "# Save models", "\n", "save_checkpoint", "(", "logpath", ",", "planner", ",", "episode_count", ",", "args", ".", "save_every", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Training mode %s is not implemented right now'", "%", "args", ".", "train_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebasev2.main.get_obs": [[420, 432], ["game.observe", "lib.mazebase.games.featurizers.grid_one_hot", "lib.mazebase.games.featurizers.vocabify"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.grid_one_hot", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.vocabify"], ["", "", "def", "get_obs", "(", "game", ",", "vocab", ",", "list_vocab", ")", ":", "\n", "    ", "config", "=", "game", ".", "observe", "(", ")", "\n", "grid_obs", ",", "side_info", "=", "config", "[", "'observation'", "]", "\n", "one_hot", "=", "featurizers", ".", "grid_one_hot", "(", "game", ",", "grid_obs", ",", "np", ",", "vocab", ")", "\n", "one_hot_side", "=", "featurizers", ".", "vocabify", "(", "game", ",", "side_info", ",", "np", ",", "vocab", ")", "\n", "observation", "=", "{", "}", "\n", "observation", "[", "'grid_obs'", "]", "=", "grid_obs", "\n", "observation", "[", "'side_info'", "]", "=", "side_info", "\n", "observation", "[", "'grid_one_hot'", "]", "=", "one_hot", "\n", "observation", "[", "'side_one_hot'", "]", "=", "one_hot_side", "\n", "observation", "[", "'vocab'", "]", "=", "list_vocab", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebasev2.main.save_checkpoint": [[434, 452], ["planner.state_dict", "planner.state_dict", "os.path.join", "torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save"], ["", "def", "save_checkpoint", "(", "logpath", ",", "planner", ",", "episode_count", ",", "save_every", ",", "final", "=", "False", ")", ":", "\n", "# Get the checkpoint info", "\n", "    ", "ckpt", "=", "planner", ".", "state_dict", "(", ")", "\n", "ckpt", "[", "'train_episode'", "]", "=", "episode_count", "\n", "ckpt", "[", "'planner'", "]", "=", "planner", ".", "state_dict", "(", ")", "\n", "\n", "# Finally save the checkpoint", "\n", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "logpath", ",", "'ckpt.pth.tar'", ")", "\n", "torch", ".", "save", "(", "ckpt", ",", "ckpt_path", ")", "\n", "\n", "# Copy checkpoint if in save_every or final", "\n", "if", "final", ":", "\n", "        ", "final_path", "=", "os", ".", "path", ".", "join", "(", "logpath", ",", "'final_ckpt.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "ckpt_path", ",", "final_path", ")", "\n", "", "if", "episode_count", "%", "save_every", "==", "0", ":", "\n", "        ", "int_path", "=", "os", ".", "path", ".", "join", "(", "logpath", ",", "'ckpt_%d.pth.tar'", "%", "episode_count", ")", "\n", "shutil", ".", "copyfile", "(", "ckpt_path", ",", "int_path", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebasev2.main_modified.action_func": [[61, 71], ["print", "list", "range", "six.moves.input", "enumerate", "len", "int"], "function", ["None"], ["def", "action_func", "(", "actions", ")", ":", "\n", "    ", "print", "(", "list", "(", "enumerate", "(", "actions", ")", ")", ")", "\n", "ind", "=", "-", "1", "\n", "while", "ind", "not", "in", "range", "(", "len", "(", "actions", ")", ")", ":", "\n", "        ", "ind", "=", "input", "(", "\"Input number for action to take: \"", ")", "\n", "try", ":", "\n", "            ", "ind", "=", "int", "(", "ind", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "ind", "=", "-", "1", "\n", "", "", "return", "actions", "[", "ind", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebasev2.main_modified.main": [[73, 127], ["parser.parse_args", "os.path.join", "lib.MazeGame", "games.MazeGame.reset", "games.MazeGame.display", "time.sleep", "os.system", "open", "json.load", "lib.BasicKnowledgeGame", "games.MazeGame.display", "games.MazeGame.current_agent", "games.MazeGame.all_possible_actions", "main_modified.action_func", "games.MazeGame.act", "time.sleep", "os.system", "print", "open", "yaml.load", "lib.mazebase.games.featurizers.GridFeaturizer"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.display", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.display", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.current_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.all_possible_actions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.tools.crafting_test.action_func", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Set options", "\n", "if", "args", ".", "path_opt", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "path_opt", ",", "'r'", ")", "as", "handle", ":", "\n", "            ", "options", "=", "yaml", ".", "load", "(", "handle", ")", "\n", "#print('## args'); pprint(vars(args))", "\n", "#print('## options'); pprint(options)", "\n", "\n", "# Get sub opts", "\n", "", "", "method_opt", "=", "options", "[", "'method'", "]", "\n", "env_opt", "=", "options", "[", "'env'", "]", "\n", "log_opt", "=", "options", "[", "'logs'", "]", "\n", "\n", "# Set up the mazebase environment", "\n", "# Load the true world knowledge that we use to build the actual environment", "\n", "knowledge_root", "=", "env_opt", "[", "'knowledge_root'", "]", "\n", "world_knowledge_file", "=", "os", ".", "path", ".", "join", "(", "knowledge_root", ",", "env_opt", "[", "'world_knowledge'", "]", "[", "args", ".", "train_mode", "]", ")", "\n", "#print(\"Loading world knowledge from %s\" % world_knowledge_file)", "\n", "#main_logger.debug(\"Loading world knowledge from %s\" % world_knowledge_file) ", "\n", "with", "open", "(", "world_knowledge_file", ")", "as", "f", ":", "\n", "        ", "world_knowledge", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Make the world", "\n", "", "map_size", "=", "(", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ")", "\n", "all_games", "=", "[", "games", ".", "BasicKnowledgeGame", "(", "world_knowledge", "=", "world_knowledge", ",", "proposed_knowledge", "=", "[", "]", ",", "options", "=", "env_opt", ",", "map_size", "=", "map_size", ")", "]", "\n", "\n", "# Game wrapper", "\n", "game", "=", "games", ".", "MazeGame", "(", "\n", "all_games", ",", "\n", "#featurizer=featurizers.SentenceFeaturesRelative(", "\n", "#   max_sentences=30, bounds=4)", "\n", "featurizer", "=", "featurizers", ".", "GridFeaturizer", "(", ")", "\n", ")", "\n", "\n", "# Reset the game", "\n", "game", ".", "reset", "(", ")", "\n", "game", ".", "display", "(", ")", "\n", "sleep", "(", ".1", ")", "\n", "system", "(", "'clear'", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "game", ".", "display", "(", ")", "\n", "\n", "id", "=", "game", ".", "current_agent", "(", ")", "\n", "actions", "=", "game", ".", "all_possible_actions", "(", ")", "\n", "action", "=", "action_func", "(", "actions", ")", "\n", "game", ".", "act", "(", "action", ")", "\n", "\n", "sleep", "(", ".1", ")", "\n", "system", "(", "'clear'", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.add_merge_dicts": [[13, 23], ["None"], "function", ["None"], ["def", "add_merge_dicts", "(", "dict1", ",", "dict2", ")", ":", "\n", "    ", "merged_dict", "=", "{", "}", "\n", "for", "key", "in", "dict1", ":", "\n", "        ", "merged_dict", "[", "key", "]", "=", "dict1", "[", "key", "]", "\n", "", "for", "key", "in", "dict2", ":", "\n", "        ", "if", "key", "in", "merged_dict", ":", "\n", "            ", "merged_dict", "[", "key", "]", "+=", "dict2", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "merged_dict", "[", "key", "]", "=", "dict2", "[", "key", "]", "\n", "", "", "return", "merged_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.max_merge_dicts": [[25, 35], ["max"], "function", ["None"], ["", "def", "max_merge_dicts", "(", "dict1", ",", "dict2", ")", ":", "\n", "    ", "merged_dict", "=", "{", "}", "\n", "for", "key", "in", "dict1", ":", "\n", "        ", "merged_dict", "[", "key", "]", "=", "dict1", "[", "key", "]", "\n", "", "for", "key", "in", "dict2", ":", "\n", "        ", "if", "key", "in", "merged_dict", ":", "\n", "            ", "merged_dict", "[", "key", "]", "=", "max", "(", "merged_dict", "[", "key", "]", ",", "dict2", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "            ", "merged_dict", "[", "key", "]", "=", "dict2", "[", "key", "]", "\n", "", "", "return", "merged_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.diff_dicts": [[38, 61], ["set().union", "set", "set", "dict2.keys", "dict1.keys"], "function", ["None"], ["", "def", "diff_dicts", "(", "dict1", ",", "dict2", ",", "remove_zeros", "=", "False", ")", ":", "\n", "# Get all keys and add 0s to missing key locations", "\n", "    ", "diff_dict", "=", "{", "}", "\n", "all_keys", "=", "set", "(", "dict1", ".", "keys", "(", ")", ")", ".", "union", "(", "set", "(", "dict2", ".", "keys", "(", ")", ")", ")", "\n", "for", "key", "in", "all_keys", ":", "\n", "        ", "if", "key", "not", "in", "dict1", ":", "\n", "            ", "dict1", "[", "key", "]", "=", "0", "\n", "", "if", "key", "not", "in", "dict2", ":", "\n", "            ", "dict2", "[", "key", "]", "=", "0", "\n", "\n", "# Add every diff to diff_dict", "\n", "", "", "for", "key", "in", "all_keys", ":", "\n", "        ", "diff_dict", "[", "key", "]", "=", "dict1", "[", "key", "]", "-", "dict2", "[", "key", "]", "\n", "\n", "# If remove_zeros, delete keys that are canceled to 0", "\n", "", "if", "remove_zeros", ":", "\n", "        ", "new_diff_dict", "=", "{", "}", "\n", "for", "key", "in", "all_keys", ":", "\n", "            ", "if", "diff_dict", "[", "key", "]", "!=", "0", ":", "\n", "                ", "new_diff_dict", "[", "key", "]", "=", "diff_dict", "[", "key", "]", "\n", "", "", "diff_dict", "=", "new_diff_dict", "\n", "\n", "", "return", "diff_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.is_subset_of": [[63, 85], ["len", "len", "list", "list", "count_dict2.keys", "count_dict1.keys"], "function", ["None"], ["", "def", "is_subset_of", "(", "count_dict1", ",", "count_dict2", ")", ":", "\n", "# Check empty sets", "\n", "# Empty sets are subsets of all sets", "\n", "    ", "if", "len", "(", "list", "(", "count_dict2", ".", "keys", "(", ")", ")", ")", "==", "0", ":", "\n", "        ", "return", "True", "\n", "\n", "# If first set is empty, second set can't be a subset (unless it's also empty)", "\n", "", "if", "len", "(", "list", "(", "count_dict1", ".", "keys", "(", ")", ")", ")", "==", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "# Check set subset of just if dict2 has all the keys in dict1", "\n", "", "for", "key", "in", "count_dict1", ":", "\n", "        ", "if", "key", "not", "in", "count_dict2", ":", "\n", "            ", "return", "False", "\n", "\n", "# Check that the count of each key is greater in dict2", "\n", "", "", "for", "key", "in", "count_dict1", ":", "\n", "        ", "if", "count_dict1", "[", "key", "]", ">", "count_dict2", "[", "key", "]", ":", "\n", "            ", "return", "False", "\n", "\n", "# If all those checked out, it's a subset", "\n", "", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.AbsoluteLocationUtils._get_abs_loc_features": [[24, 31], ["set", "game.get_max_bounds", "itertools.product", "sorted", "range", "range", "set.add", "list", "mazeutils.AbsoluteLocationUtils._coords2loc"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.get_max_bounds", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeLocationMixin._coords2loc"], ["    ", "@", "staticmethod", "\n", "def", "_get_abs_loc_features", "(", "game", ")", ":", "\n", "        ", "fts", "=", "set", "(", ")", "\n", "max_w", ",", "max_h", "=", "game", ".", "get_max_bounds", "(", ")", "\n", "for", "x", ",", "y", "in", "product", "(", "range", "(", "max_w", ")", ",", "range", "(", "max_h", ")", ")", ":", "\n", "            ", "fts", ".", "add", "(", "AbsoluteLocationUtils", ".", "_coords2loc", "(", "x", ",", "y", ")", ")", "\n", "", "return", "sorted", "(", "list", "(", "fts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.AbsoluteLocationUtils._coords2loc": [[32, 35], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_coords2loc", "(", "x", ",", "y", ")", ":", "\n", "        ", "return", "\"{0}x{1}y\"", ".", "format", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs": [[10, 16], ["properties.items", "hasattr", "setattr"], "function", ["None"], ["def", "populate_kwargs", "(", "self", ",", "properties", ",", "kwargs", ")", ":", "\n", "    ", "''' Fills self based on keywords in properties '''", "\n", "for", "k", ",", "v", "in", "properties", ".", "items", "(", ")", ":", "\n", "        ", "value", "=", "kwargs", "[", "k", "]", "if", "k", "in", "kwargs", "else", "v", "\n", "if", "not", "hasattr", "(", "self", ",", "k", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.all_classes_of": [[18, 21], ["inspect.getmembers", "inspect.isclass"], "function", ["None"], ["", "", "", "def", "all_classes_of", "(", "mod", ")", ":", "\n", "    ", "return", "inspect", ".", "getmembers", "(", "mod", ",", "lambda", "member", ":", "inspect", ".", "isclass", "(", "member", ")", "and", "\n", "mod", ".", "__name__", "in", "member", ".", "__module__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice": [[42, 47], ["random.choice", "len", "mazeutils.MazeException"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice"], ["", "def", "choice", "(", "lst", ")", ":", "\n", "    ", "''' So mazebase can catch these exceptions '''", "\n", "if", "len", "(", "lst", ")", "==", "0", ":", "\n", "        ", "raise", "MazeException", "(", "\"Running choice on empty list\"", ")", "\n", "", "return", "random", ".", "choice", "(", "lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.sprinkle": [[12, 36], ["creationutils.empty_locations", "random.shuffle", "random.random", "ids.append", "game._add_item", "tile"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item"], ["def", "sprinkle", "(", "game", ",", "tiles", ",", "tilemask", "=", "None", ")", ":", "\n", "    ", "'''\n    Sprinkles blocks into a map. Tiles is given in the format like:\n        [(MazeItem, float), ...] ex.\n        [(Block, .5)]\n    where we sprinkle MazeItem with the percent chance given by the second arg.\n\n    Defaults to generating on empty tiles, but you can override this with\n    tilemask and specify a list of locations.\n\n    Returns list of item ids\n    '''", "\n", "if", "tilemask", "is", "None", ":", "\n", "        ", "tilemask", "=", "empty_locations", "(", "game", ")", "\n", "\n", "", "ids", "=", "[", "]", "\n", "for", "(", "x", ",", "y", ")", "in", "tilemask", ":", "\n", "        ", "shuffle", "(", "tiles", ")", "\n", "for", "tile", ",", "pct", "in", "tiles", ":", "\n", "            ", "if", "random", "(", ")", "<", "pct", ":", "\n", "                ", "ids", ".", "append", "(", "game", ".", "_add_item", "(", "tile", "(", "location", "=", "(", "x", ",", "y", ")", ")", ")", ")", "\n", "break", "\n", "\n", "", "", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations": [[38, 55], ["itertools.product", "range", "range", "mask", "empties.append", "empties.append", "any", "isinstance", "itertools.product"], "function", ["None"], ["", "def", "empty_locations", "(", "game", ",", "bad_blocks", "=", "None", ",", "mask", "=", "lambda", "x", ",", "y", ":", "True", ")", ":", "\n", "    ", "'''By default, finds empty locations in the map.\n    If bad_blocks is not none, then finds locations without any bad_blocks,\n    but maybe with other block types\n    mask is a function that provides valid coordinates\n    '''", "\n", "empties", "=", "[", "]", "\n", "for", "x", ",", "y", "in", "itertools", ".", "product", "(", "range", "(", "game", ".", "width", ")", ",", "range", "(", "game", ".", "height", ")", ")", ":", "\n", "        ", "if", "not", "mask", "(", "x", ",", "y", ")", ":", "\n", "            ", "continue", "\n", "", "itemlst", "=", "game", ".", "_map", "[", "x", "]", "[", "y", "]", "\n", "if", "bad_blocks", "is", "None", "and", "itemlst", "==", "[", "]", ":", "\n", "            ", "empties", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "", "elif", "bad_blocks", "is", "not", "None", "and", "not", "any", "(", "\n", "isinstance", "(", "item", ",", "typ", ")", "for", "item", ",", "typ", "in", "itertools", ".", "product", "(", "itemlst", ",", "bad_blocks", ")", ")", ":", "\n", "            ", "empties", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "", "", "return", "empties", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra": [[57, 92], ["collections.defaultdict", "set", "itertools.product", "set.intersection", "min", "set.remove", "movefunc", "range", "range", "collections.defaultdict.keys"], "function", ["None"], ["", "def", "dijkstra", "(", "game", ",", "initial", ",", "movefunc", ",", "weighted", "=", "False", ")", ":", "\n", "    ", "'''\n    Accepts:\n        game\n        initial: (x, y) tuple of start location\n        movefunc: f(loc) determines the locations you can move to from loc\n        weighted: use the _approx_reward_map instead of # of moves\n\n    Returns:\n        visited: dictionary of {location: distance} pairs\n        path: dictionary of {location: previous_location} pairs\n    '''", "\n", "visited", "=", "defaultdict", "(", "lambda", ":", "1e309", ")", "\n", "visited", "[", "initial", "]", "=", "0", "\n", "path", "=", "{", "}", "\n", "\n", "nodes", "=", "set", "(", "itertools", ".", "product", "(", "range", "(", "game", ".", "width", ")", ",", "range", "(", "game", ".", "height", ")", ")", ")", "\n", "while", "nodes", ":", "\n", "        ", "current", "=", "nodes", ".", "intersection", "(", "visited", ".", "keys", "(", ")", ")", "\n", "if", "not", "current", ":", "\n", "            ", "break", "\n", "", "min_node", "=", "min", "(", "current", ",", "key", "=", "visited", ".", "get", ")", "\n", "nodes", ".", "remove", "(", "min_node", ")", "\n", "current_weight", "=", "visited", "[", "min_node", "]", "\n", "x", ",", "y", "=", "min_node", "\n", "\n", "for", "edge", "in", "movefunc", "(", "game", ",", "min_node", ")", ":", "\n", "# Maximize reward by minimizing \"distance = - reward\"", "\n", "            ", "w", "=", "-", "game", ".", "_approx_reward_map", "[", "edge", "[", "0", "]", "]", "[", "edge", "[", "1", "]", "]", "if", "weighted", "else", "1", "\n", "weight", "=", "current_weight", "+", "w", "\n", "if", "edge", "not", "in", "visited", "or", "weight", "<", "visited", "[", "edge", "]", ":", "\n", "                ", "visited", "[", "edge", "]", "=", "weight", "\n", "path", "[", "edge", "]", "=", "min_node", "\n", "\n", "", "", "", "return", "visited", ",", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.__movefunc_helper": [[94, 104], ["movefunc_helper", "game._in_bounds", "res.append"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._in_bounds"], ["", "def", "__movefunc_helper", "(", "game", ",", "loc", ",", "movefunc_helper", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "x", ",", "y", "=", "loc", "\n", "for", "dx", ",", "dy", "in", "[", "(", "1", ",", "0", ")", ",", "(", "-", "1", ",", "0", ")", ",", "(", "0", ",", "1", ")", ",", "(", "0", ",", "-", "1", ")", "]", ":", "\n", "        ", "nx", ",", "ny", "=", "x", "+", "dx", ",", "y", "+", "dy", "\n", "if", "not", "game", ".", "_in_bounds", "(", "(", "nx", ",", "ny", ")", ")", ":", "\n", "            ", "continue", "\n", "", "if", "movefunc_helper", "(", "game", ",", "loc", ",", "(", "dx", ",", "dy", ")", ")", ":", "\n", "            ", "res", ".", "append", "(", "(", "nx", ",", "ny", ")", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.agent_movefunc": [[106, 115], ["creationutils.__movefunc_helper", "game._tile_get_block"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.__movefunc_helper", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block"], ["", "def", "agent_movefunc", "(", "game", ",", "loc", ")", ":", "\n", "    ", "''' Can move to non-block spaces '''", "\n", "def", "helper", "(", "game", ",", "loc", ",", "dloc", ")", ":", "\n", "        ", "x", ",", "y", "=", "loc", "\n", "dx", ",", "dy", "=", "dloc", "\n", "nx", ",", "ny", "=", "x", "+", "dx", ",", "y", "+", "dy", "\n", "return", "game", ".", "_tile_get_block", "(", "(", "nx", ",", "ny", ")", ",", "mi", ".", "Block", ")", "is", "None", "\n", "\n", "", "return", "__movefunc_helper", "(", "game", ",", "loc", ",", "helper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.pushblock_movefunc": [[117, 130], ["creationutils.__movefunc_helper", "game._in_bounds", "game._tile_get_block", "game._tile_get_block"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.__movefunc_helper", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._in_bounds", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block"], ["", "def", "pushblock_movefunc", "(", "game", ",", "loc", ")", ":", "\n", "    ", "''' Can move if tile behind and in front are not blocked (so agent can push\n    from behind) '''", "\n", "def", "helper", "(", "game", ",", "loc", ",", "dloc", ")", ":", "\n", "        ", "x", ",", "y", "=", "loc", "\n", "dx", ",", "dy", "=", "dloc", "\n", "tx", ",", "ty", "=", "x", "-", "dx", ",", "y", "-", "dy", "\n", "nx", ",", "ny", "=", "x", "+", "dx", ",", "y", "+", "dy", "\n", "return", "(", "game", ".", "_in_bounds", "(", "(", "tx", ",", "ty", ")", ")", "and", "\n", "game", ".", "_tile_get_block", "(", "(", "nx", ",", "ny", ")", ",", "mi", ".", "Block", ")", "is", "None", "and", "\n", "game", ".", "_tile_get_block", "(", "(", "tx", ",", "ty", ")", ",", "mi", ".", "Block", ")", "is", "None", ")", "\n", "\n", "", "return", "__movefunc_helper", "(", "game", ",", "loc", ",", "helper", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "nodes", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_node": [[9, 15], ["graph.Node", "pdb.set_trace"], "methods", ["None"], ["", "def", "add_node", "(", "self", ",", "name", ",", "data", ")", ":", "\n", "        ", "node", "=", "Node", "(", "name", ",", "data", ")", "\n", "if", "name", "in", "self", ".", "nodes", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "assert", "(", "name", "not", "in", "self", ".", "nodes", ")", "\n", "", "self", ".", "nodes", "[", "name", "]", "=", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_edge": [[17, 24], ["node1.outgoing.append", "node2.incoming.append"], "methods", ["None"], ["", "def", "add_edge", "(", "self", ",", "node1_key", ",", "node2_key", ")", ":", "\n", "        ", "assert", "(", "node1_key", "in", "self", ".", "nodes", ")", "\n", "node1", "=", "self", ".", "nodes", "[", "node1_key", "]", "\n", "assert", "(", "node2_key", "in", "self", ".", "nodes", ")", "\n", "node2", "=", "self", ".", "nodes", "[", "node2_key", "]", "\n", "node1", ".", "outgoing", ".", "append", "(", "node2", ")", "\n", "node2", ".", "incoming", ".", "append", "(", "node1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Node.__init__": [[26, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "key", ",", "data", ")", ":", "\n", "        ", "self", ".", "key", "=", "key", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "incoming", "=", "[", "]", "\n", "self", ".", "outgoing", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.HierarchyTree.__init__": [[35, 42], ["graph.Graph.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rules", ")", ":", "\n", "        ", "super", "(", "HierarchyTree", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# For all items with any connections, item is key", "\n", "# Value is dict with 'parents' and 'children' with list of other items", "\n", "\n", "# TODO - haven't implemented this part of knowledge", "\n", "hierarchy_tree", "=", "{", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.__init__": [[7, 80], ["mazebasev2.lib.knowledge.Graph.__init__", "mazebasev2.lib.knowledge.Rule", "all", "knowledgegraph.KnowledgeSubGraph.add_node", "set", "set", "mazebasev2.lib.knowledge.create_rule_from_triplets", "str", "knowledgegraph.KnowledgeSubGraph.add_node", "list", "knowledgegraph.KnowledgeSubGraph.precondition_triplets.add", "knowledgegraph.KnowledgeSubGraph.postcondition_triplets.add", "knowledgegraph.KnowledgeSubGraph.add_node", "knowledgegraph.KnowledgeSubGraph.add_edge", "knowledgegraph.KnowledgeSubGraph.add_edge", "knowledgegraph.KnowledgeSubGraph.add_edge", "knowledgegraph.KnowledgeSubGraph.add_edge", "knowledgegraph.KnowledgeSubGraph.nodes[].data[].append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_node", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.create_rule_from_triplets", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_node", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_node", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_edge", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_edge", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_edge", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_edge"], ["    ", "def", "__init__", "(", "self", ",", "triplets", ")", ":", "\n", "        ", "super", "(", "KnowledgeSubGraph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize all truth values with unknowns (None)", "\n", "# If the user of this class wishes, it can use these values to track", "\n", "# the truth prposisitions of the knowledge graph", "\n", "self", ".", "sufficient", "=", "None", "\n", "\n", "# First get triplets based on the input rule", "\n", "self", ".", "triplets", "=", "triplets", "\n", "\n", "# Get the rule", "\n", "self", ".", "rule", "=", "Rule", "(", "create_rule_from_triplets", "(", "self", ".", "triplets", ")", ")", "\n", "\n", "# Get the rule name and make it the root of the knowledge graph", "\n", "rule_name", "=", "list", "(", "self", ".", "triplets", ")", "[", "0", "]", "[", "0", "]", "\n", "assert", "(", "all", "(", "[", "triplet", "[", "0", "]", "==", "rule_name", "for", "triplet", "in", "self", ".", "triplets", "]", ")", ")", "\n", "self", ".", "rule_name", "=", "rule_name", "\n", "data", "=", "{", "}", "\n", "data", "[", "'type'", "]", "=", "'root'", "\n", "self", ".", "add_node", "(", "rule_name", ",", "data", ")", "\n", "\n", "# Add pre- and post-conditions", "\n", "self", ".", "precondition_triplets", "=", "set", "(", ")", "\n", "self", ".", "postcondition_triplets", "=", "set", "(", ")", "\n", "for", "triplet", "in", "self", ".", "triplets", ":", "\n", "# Is it a pre- or post- condition", "\n", "            ", "condition_type", "=", "triplet", "[", "1", "]", "\n", "if", "condition_type", "in", "TripletInfo", ".", "PRE_CONDITION_TYPES", ":", "\n", "                ", "self", ".", "precondition_triplets", ".", "add", "(", "triplet", ")", "\n", "concept_node_type", "=", "'precondition_concept'", "\n", "condition_node_type", "=", "'precondition'", "\n", "", "else", ":", "\n", "                ", "assert", "(", "condition_type", "in", "TripletInfo", ".", "POST_CONDITION_TYPES", ")", "\n", "self", ".", "postcondition_triplets", ".", "add", "(", "triplet", ")", "\n", "concept_node_type", "=", "'postcondition_concept'", "\n", "condition_node_type", "=", "'postcondition'", "\n", "\n", "# Add the concepts as nodes if not already there", "\n", "", "concept", "=", "triplet", "[", "2", "]", "\n", "if", "concept", "not", "in", "self", ".", "nodes", ":", "\n", "                ", "data", "=", "{", "}", "\n", "data", "[", "'type'", "]", "=", "[", "concept_node_type", "]", "\n", "self", ".", "add_node", "(", "concept", ",", "data", ")", "\n", "", "elif", "concept_node_type", "not", "in", "self", ".", "nodes", "[", "concept", "]", ".", "data", "[", "'type'", "]", ":", "\n", "                ", "self", ".", "nodes", "[", "concept", "]", ".", "data", "[", "'type'", "]", ".", "append", "(", "concept_node_type", ")", "\n", "\n", "# Add the precondition or postcondition node itself", "\n", "# It really acts like an edge, but this lets us put additional info in the node", "\n", "# And also easily search these", "\n", "", "condition_key", "=", "str", "(", "triplet", ")", "\n", "data", "=", "{", "}", "\n", "data", "[", "'type'", "]", "=", "condition_node_type", "\n", "data", "[", "'precond_type'", "]", "=", "condition_type", "\n", "data", "[", "'necessary'", "]", "=", "None", "# Don't know if it's necessary yet", "\n", "self", ".", "add_node", "(", "condition_key", ",", "data", ")", "\n", "\n", "# Add all the edges from the triplets", "\n", "# Preconditions go from concepts to rule name", "\n", "if", "condition_node_type", "==", "'precondition'", ":", "\n", "                ", "self", ".", "add_edge", "(", "concept", ",", "condition_key", ")", "\n", "self", ".", "add_edge", "(", "condition_key", ",", "self", ".", "rule_name", ")", "\n", "# Postconditions go from rule name to concepts", "\n", "", "else", ":", "\n", "                ", "self", ".", "add_edge", "(", "self", ".", "rule_name", ",", "condition_key", ")", "\n", "self", ".", "add_edge", "(", "condition_key", ",", "concept", ")", "\n", "\n", "# Set what the \"main effect\" is for this schema ", "\n", "", "", "self", ".", "main_effect", "=", "None", "\n", "for", "pc_triplet", "in", "self", ".", "postcondition_triplets", ":", "\n", "            ", "cond_type", "=", "pc_triplet", "[", "1", "]", "\n", "if", "cond_type", "in", "TripletInfo", ".", "MAIN_POST_TYPES", ":", "\n", "                ", "assert", "(", "self", ".", "main_effect", "is", "None", ")", "# Main effect must be unique in post condition set", "\n", "self", ".", "main_effect", "=", "pc_triplet", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_rule": [[82, 84], ["None"], "methods", ["None"], ["", "", "", "def", "get_rule", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rule", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions": [[86, 90], ["set", "type"], "methods", ["None"], ["", "def", "get_preconditions", "(", "self", ")", ":", "\n", "        ", "assert", "(", "type", "(", "self", ".", "precondition_triplets", ")", "==", "set", ")", "\n", "preconditions", "=", "set", "(", "[", "(", "triplet", "[", "1", "]", ",", "triplet", "[", "2", "]", ")", "for", "triplet", "in", "self", ".", "precondition_triplets", "]", ")", "\n", "return", "preconditions", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_postconditions": [[92, 96], ["set", "type"], "methods", ["None"], ["", "def", "get_postconditions", "(", "self", ")", ":", "\n", "        ", "assert", "(", "type", "(", "self", ".", "postcondition_triplets", ")", "==", "set", ")", "\n", "postconditions", "=", "set", "(", "[", "(", "triplet", "[", "1", "]", ",", "triplet", "[", "2", "]", ")", "for", "triplet", "in", "self", ".", "postcondition_triplets", "]", ")", "\n", "return", "postconditions", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_min_suff_rule": [[99, 105], ["knowledgegraph.KnowledgeSubGraph.get_min_suff_subgraph", "knowledgegraph.KnowledgeSubGraph.get_rule"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_min_suff_subgraph", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_rule"], ["", "def", "get_min_suff_rule", "(", "self", ")", ":", "\n", "# First get min sufficient subgraph", "\n", "        ", "min_suff_sub", "=", "self", ".", "get_min_suff_subgraph", "(", ")", "\n", "\n", "# Now just return rule for min sufficient subgraph", "\n", "return", "min_suff_sub", ".", "get_rule", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_min_suff_subgraph": [[107, 130], ["knowledgegraph.KnowledgeSubGraph", "len", "min_suff_triplets.append", "min_suff_triplets.append", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "get_min_suff_subgraph", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "sufficient", ")", "\n", "\n", "# Find preconditions that actually are necessary", "\n", "min_suff_triplets", "=", "[", "]", "\n", "for", "triplet", "in", "self", ".", "precondition_triplets", ":", "\n", "            ", "precond_node", "=", "self", ".", "nodes", "[", "str", "(", "triplet", ")", "]", "\n", "if", "precond_node", ".", "data", "[", "'necessary'", "]", "is", "None", "or", "precond_node", ".", "data", "[", "'necessary'", "]", ":", "\n", "                ", "min_suff_triplets", ".", "append", "(", "triplet", ")", "\n", "\n", "# Only include postconditions we know are true (marked as necessary here)", "\n", "", "", "for", "triplet", "in", "self", ".", "postcondition_triplets", ":", "\n", "            ", "postcond_node", "=", "self", ".", "nodes", "[", "str", "(", "triplet", ")", "]", "\n", "if", "postcond_node", ".", "data", "[", "'necessary'", "]", ":", "\n", "                ", "min_suff_triplets", ".", "append", "(", "triplet", ")", "\n", "\n", "# Return new KnowledgeGraph with just those triplets now", "\n", "", "", "assert", "(", "len", "(", "min_suff_triplets", ")", ">", "0", ")", "\n", "min_suff_subgraph", "=", "KnowledgeSubGraph", "(", "min_suff_triplets", ")", "\n", "for", "triplet", "in", "min_suff_triplets", ":", "\n", "            ", "min_suff_subgraph", ".", "nodes", "[", "str", "(", "triplet", ")", "]", ".", "data", "[", "'necessary'", "]", "=", "self", ".", "nodes", "[", "str", "(", "triplet", ")", "]", ".", "data", "[", "'necessary'", "]", "\n", "", "min_suff_subgraph", ".", "sufficient", "=", "self", ".", "sufficient", "\n", "return", "min_suff_subgraph", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.precond_set_equal": [[132, 135], ["knowledgegraph.KnowledgeSubGraph.get_preconditions", "K_other.get_preconditions"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions"], ["", "def", "precond_set_equal", "(", "self", ",", "K_other", ")", ":", "\n", "# Get the precondition sets for each", "\n", "        ", "return", "self", ".", "get_preconditions", "(", ")", "==", "K_other", ".", "get_preconditions", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.precond_is_subset": [[137, 148], ["K_other.get_preconditions", "knowledgegraph.KnowledgeSubGraph.get_preconditions", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions"], ["", "def", "precond_is_subset", "(", "self", ",", "K_other", ")", ":", "\n", "# Find set differences between edge lists for self and K_other", "\n", "# other - self", "\n", "        ", "sd_other_self", "=", "K_other", ".", "get_preconditions", "(", ")", "-", "self", ".", "get_preconditions", "(", ")", "\n", "\n", "# Only condition where it is true is if other-self is empty", "\n", "# Other may not be a proper subset (i.e. set equality)", "\n", "if", "len", "(", "sd_other_self", ")", "==", "0", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.schema_compatible": [[151, 174], ["knowledgegraph.KnowledgeSubGraph.precond_is_subset", "K_other.precond_is_subset", "knowledgegraph.KnowledgeSubGraph.get_preconditions", "K_other.get_preconditions"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.precond_is_subset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.precond_is_subset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions"], ["", "", "def", "schema_compatible", "(", "self", ",", "K_other", ")", ":", "\n", "# Check if one is a subset of another", "\n", "        ", "if", "self", ".", "precond_is_subset", "(", "K_other", ")", "or", "K_other", ".", "precond_is_subset", "(", "self", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "# Check for mutually incompatible preconditions", "\n", "", "our_unique_preconds", "=", "[", "precond", "for", "precond", "in", "self", ".", "get_preconditions", "(", ")", "if", "precond", "[", "0", "]", "in", "TripletInfo", ".", "SINGLETON_PRECONDITIONS", "]", "\n", "other_unique_preconds", "=", "[", "precond", "for", "precond", "in", "K_other", ".", "get_preconditions", "(", ")", "if", "precond", "[", "0", "]", "in", "TripletInfo", ".", "SINGLETON_PRECONDITIONS", "]", "\n", "\n", "# See if any of those unique preconditions are incompatible", "\n", "for", "our_precond", "in", "our_unique_preconds", ":", "\n", "            ", "for", "other_precond", "in", "other_unique_preconds", ":", "\n", "                ", "if", "our_precond", "[", "0", "]", "==", "other_precond", "[", "0", "]", "and", "our_precond", "[", "1", "]", "!=", "other_precond", "[", "1", "]", ":", "\n", "                    ", "return", "False", "\n", "\n", "# TODO - make sure there's no possible way that we have mutally incompatible necessary preconditions", "\n", "# Easy example is we could require iron pickaxe but could also use gold pickaxe", "\n", "# TODO TODO - for now, ignore this. Deal with this when we actually get to this", "\n", "\n", "# TODO - also maybe keep seperate schemas if they have slightly different effects?", "\n", "\n", "# If neither, return True", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.update_sufficiency": [[178, 211], ["str", "knowledgegraph.KnowledgeSubGraph.add_node", "knowledgegraph.KnowledgeSubGraph.add_edge", "knowledgegraph.KnowledgeSubGraph.add_edge", "knowledgegraph.KnowledgeSubGraph.add_node", "knowledgegraph.KnowledgeSubGraph.nodes[].data[].append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_node", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_edge", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_edge", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_node"], ["", "def", "update_sufficiency", "(", "self", ",", "postconditions", ")", ":", "\n", "# Add or confirm all the postcondition triplets", "\n", "        ", "self", ".", "sufficient", "=", "False", "\n", "for", "postcond", "in", "postconditions", ":", "\n", "            ", "cond_type", "=", "postcond", "[", "0", "]", "\n", "concept", "=", "postcond", "[", "1", "]", "\n", "if", "self", ".", "main_effect", "==", "concept", ":", "\n", "                ", "self", ".", "sufficient", "=", "True", "\n", "", "triplet", "=", "(", "self", ".", "rule_name", ",", "cond_type", ",", "concept", ")", "\n", "condition_key", "=", "str", "(", "triplet", ")", "\n", "# Confirm \"necessity\" of the post_condition", "\n", "if", "condition_key", "in", "self", ".", "nodes", ":", "\n", "                ", "self", ".", "nodes", "[", "condition_key", "]", ".", "data", "[", "'necessary'", "]", "=", "True", "\n", "# If not in it already, add it, and possibly connect it to a new/existing effect node", "\n", "", "else", ":", "\n", "# Add postcondition node", "\n", "                ", "data", "=", "{", "}", "\n", "data", "[", "'type'", "]", "=", "'postcondition'", "\n", "data", "[", "'precond_type'", "]", "=", "postcond", "[", "0", "]", "\n", "data", "[", "'necessary'", "]", "=", "True", "\n", "self", ".", "add_node", "(", "condition_key", ",", "data", ")", "\n", "\n", "# Add postcondition concept node if necessary", "\n", "if", "concept", "not", "in", "self", ".", "nodes", ":", "\n", "                    ", "data", "=", "{", "}", "\n", "data", "[", "'type'", "]", "=", "[", "'postcondition_concept'", "]", "\n", "self", ".", "add_node", "(", "concept", ",", "data", ")", "\n", "", "elif", "'postcondition_concept'", "not", "in", "self", ".", "nodes", "[", "concept", "]", ".", "data", "[", "'type'", "]", ":", "\n", "                    ", "self", ".", "nodes", "[", "concept", "]", ".", "data", "[", "'type'", "]", ".", "append", "(", "'postcondition_concept'", ")", "\n", "\n", "# Update connections ", "\n", "", "self", ".", "add_edge", "(", "self", ".", "rule_name", ",", "condition_key", ")", "\n", "self", ".", "add_edge", "(", "condition_key", ",", "concept", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.update_necessity": [[213, 252], ["knowledgegraph.KnowledgeSubGraph.transfer_necessity", "knowledgegraph.KnowledgeSubGraph.precond_is_subset", "knowledgegraph.KnowledgeSubGraph.schema_compatible", "knowledgegraph.KnowledgeSubGraph.get_preconditions", "K_other.get_preconditions", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.transfer_necessity", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.precond_is_subset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.schema_compatible", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions"], ["", "", "", "def", "update_necessity", "(", "self", ",", "K_other", ")", ":", "\n", "# If not compatible, don't do anything", "\n", "        ", "if", "not", "self", ".", "schema_compatible", "(", "K_other", ")", ":", "\n", "            ", "return", "\n", "\n", "# Transfer necessity ", "\n", "# Should only transfer these between compatible subgraphs", "\n", "", "self", ".", "transfer_necessity", "(", "K_other", ")", "\n", "\n", "# If this graph is sufficient, also update necessity of dropped preconditions", "\n", "if", "not", "self", ".", "sufficient", ":", "\n", "            ", "return", "\n", "\n", "# Get success", "\n", "", "assert", "(", "K_other", ".", "sufficient", "is", "not", "None", ")", "\n", "success", "=", "K_other", ".", "sufficient", "\n", "\n", "# Next, need to check whether it's actually a subset of this graph", "\n", "if", "self", ".", "precond_is_subset", "(", "K_other", ")", ":", "\n", "# Get set difference between two graphs preconditions", "\n", "            ", "preconditions_dropped", "=", "self", ".", "get_preconditions", "(", ")", "-", "K_other", ".", "get_preconditions", "(", ")", "\n", "triplets_dropped", "=", "[", "(", "self", ".", "rule_name", ",", "precond", "[", "0", "]", ",", "precond", "[", "1", "]", ")", "for", "precond", "in", "preconditions_dropped", "]", "\n", "\n", "# TODO - Perhaps a major assumption here", "\n", "# Assume that there are only first order necessity effects", "\n", "# i.e. necessity of one edge is independent of the other ones", "\n", "# So any edges that we removed", "\n", "if", "success", ":", "\n", "# If it still succeded, any edges in set difference are unnecessary by definition", "\n", "                ", "for", "triplet", "in", "triplets_dropped", ":", "\n", "                    ", "self", ".", "nodes", "[", "str", "(", "triplet", ")", "]", ".", "data", "[", "'necessary'", "]", "=", "False", "\n", "", "", "else", ":", "\n", "# We can only check necessary true when the difference is one edge,", "\n", "# or we already know the other edges are unnecessary", "\n", "\n", "# If we only dropped one and now it fails", "\n", "                ", "if", "len", "(", "triplets_dropped", ")", "==", "1", ":", "\n", "                    ", "triplet", "=", "triplets_dropped", "[", "0", "]", "\n", "self", ".", "nodes", "[", "str", "(", "triplet", ")", "]", ".", "data", "[", "'necessary'", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.transfer_necessity": [[254, 260], ["None"], "methods", ["None"], ["", "", "", "", "def", "transfer_necessity", "(", "self", ",", "K_other", ")", ":", "\n", "# Transfer necessity from K_other if we have them to this graph", "\n", "        ", "for", "node_name", "in", "K_other", ".", "nodes", ":", "\n", "            ", "other_node", "=", "K_other", ".", "nodes", "[", "node_name", "]", "\n", "if", "node_name", "in", "self", ".", "nodes", "and", "other_node", ".", "data", "[", "'type'", "]", "==", "'precondition'", "and", "other_node", ".", "data", "[", "'necessary'", "]", "is", "not", "None", ":", "\n", "                ", "self", ".", "nodes", "[", "node_name", "]", ".", "data", "[", "'necessary'", "]", "=", "other_node", ".", "data", "[", "'necessary'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.merge_other": [[262, 305], ["K_other.update_necessity", "knowledgegraph.KnowledgeSubGraph.update_necessity", "knowledgegraph.KnowledgeSubGraph.get_postconditions", "K_other.get_postconditions", "K_other.get_preconditions", "knowledgegraph.KnowledgeSubGraph.get_preconditions", "knowledgegraph.KnowledgeSubGraph.precondition_triplets.add", "str", "knowledgegraph.KnowledgeSubGraph.add_node", "knowledgegraph.KnowledgeSubGraph.add_edge", "knowledgegraph.KnowledgeSubGraph.add_edge", "knowledgegraph.KnowledgeSubGraph.add_node", "knowledgegraph.KnowledgeSubGraph.nodes[].data[].append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.update_necessity", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.update_necessity", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_postconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_postconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_node", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_edge", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_edge", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_node"], ["", "", "", "def", "merge_other", "(", "self", ",", "K_other", ")", ":", "\n", "# Assert postconditions are the same", "\n", "        ", "assert", "(", "self", ".", "get_postconditions", "(", ")", "==", "K_other", ".", "get_postconditions", "(", ")", ")", "\n", "\n", "# Update necessity between the two", "\n", "K_other", ".", "update_necessity", "(", "self", ")", "\n", "self", ".", "update_necessity", "(", "self", ")", "\n", "\n", "# Add any preconditions in K_other that are not in self", "\n", "missing_preconds", "=", "K_other", ".", "get_preconditions", "(", ")", "-", "self", ".", "get_preconditions", "(", ")", "\n", "for", "precond", "in", "missing_preconds", ":", "\n", "# Add the triplet", "\n", "            ", "condition_type", "=", "precond", "[", "0", "]", "\n", "concept", "=", "precond", "[", "1", "]", "\n", "triplet", "=", "(", "self", ".", "rule_name", ",", "condition_type", ",", "concept", ")", "\n", "other_triplet", "=", "(", "K_other", ".", "rule_name", ",", "condition_type", ",", "concept", ")", "\n", "assert", "(", "condition_type", "in", "TripletInfo", ".", "PRE_CONDITION_TYPES", ")", "\n", "self", ".", "precondition_triplets", ".", "add", "(", "triplet", ")", "\n", "\n", "# Add the concepts as nodes if not already there", "\n", "concept_node_type", "=", "'precondition_concept'", "\n", "condition_node_type", "=", "'precondition'", "\n", "if", "concept", "not", "in", "self", ".", "nodes", ":", "\n", "                ", "data", "=", "{", "}", "\n", "data", "[", "'type'", "]", "=", "[", "concept_node_type", "]", "\n", "self", ".", "add_node", "(", "concept", ",", "data", ")", "\n", "", "elif", "concept_node_type", "not", "in", "self", ".", "nodes", "[", "concept", "]", ".", "data", "[", "'type'", "]", ":", "\n", "                ", "self", ".", "nodes", "[", "concept", "]", ".", "data", "[", "'type'", "]", ".", "append", "(", "concept_node_type", ")", "\n", "\n", "# Add the precondition node itself", "\n", "# It really acts like an edge, but this lets us put additional info in the node", "\n", "# And also easily search these", "\n", "", "condition_key", "=", "str", "(", "triplet", ")", "\n", "data", "=", "{", "}", "\n", "data", "[", "'type'", "]", "=", "condition_node_type", "\n", "data", "[", "'precond_type'", "]", "=", "condition_type", "\n", "data", "[", "'necessary'", "]", "=", "K_other", ".", "nodes", "[", "condition_key", "]", ".", "data", "[", "'necessary'", "]", "\n", "self", ".", "add_node", "(", "condition_key", ",", "data", ")", "\n", "\n", "# Add all the edges from the triplets", "\n", "# Preconditions go from concepts to rule name", "\n", "self", ".", "add_edge", "(", "concept", ",", "condition_key", ")", "\n", "self", ".", "add_edge", "(", "condition_key", ",", "self", ".", "rule_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.check_rules_valid": [[48, 75], ["enumerate", "enumerate", "Exception", "list", "list", "rule1.rule_dict[].keys", "rule2.rule_dict[].keys"], "methods", ["None"], ["@", "classmethod", "\n", "# Checks that the crafting rules cannot be satisfied simultanously", "\n", "def", "check_rules_valid", "(", "cls", ",", "rules", ")", ":", "\n", "# Right now this just checks that the crafting rules can't possibly happen simultanously", "\n", "        ", "for", "i", ",", "rule1", "in", "enumerate", "(", "rules", ")", ":", "\n", "# Ignore non-crafting rules", "\n", "            ", "if", "Rule", ".", "ACTION", "not", "in", "rule1", ".", "rule_dict", "or", "rule1", ".", "rule_dict", "[", "Rule", ".", "ACTION", "]", "!=", "'craft'", ":", "\n", "                ", "continue", "\n", "\n", "# Go through each pair of rules", "\n", "", "for", "j", ",", "rule2", "in", "enumerate", "(", "rules", ")", ":", "\n", "                ", "if", "j", "<=", "i", ":", "\n", "                    ", "continue", "\n", "# Ignore non-crafting rules", "\n", "", "if", "Rule", ".", "ACTION", "not", "in", "rule1", ".", "rule_dict", "or", "rule1", ".", "rule_dict", "[", "Rule", ".", "ACTION", "]", "!=", "'craft'", ":", "\n", "                    ", "continue", "\n", "\n", "# If different location required, no problems", "\n", "# Assumes crafting rules all have one required location", "\n", "", "if", "rule1", ".", "rule_dict", "[", "Rule", ".", "LOCATION", "]", "!=", "rule2", ".", "rule_dict", "[", "Rule", ".", "LOCATION", "]", ":", "\n", "                    ", "continue", "\n", "\n", "# If it's same action at the same location, there's a chance both rules can be satisfied", "\n", "# So we will not allow this", "\n", "", "created1", "=", "list", "(", "rule1", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "created2", "=", "list", "(", "rule2", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "raise", "Exception", "(", "\"We have conflicting rules for rule %d creating %s and rule %d creating %s\"", "%", "(", "i", ",", "created1", ",", "j", ",", "created2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.__init__": [[76, 86], ["None"], "methods", ["None"], ["", "", "", "def", "__init__", "(", "self", ",", "rule_dict", ")", ":", "\n", "        ", "self", ".", "rule_dict", "=", "rule_dict", "\n", "\n", "# Make sure everthing in rule_dict is known ", "\n", "for", "key", "in", "rule_dict", ":", "\n", "            ", "assert", "(", "key", "in", "Rule", ".", "RULE_DICT_KEYS", ")", "\n", "\n", "# Make sure we have all required elements", "\n", "", "assert", "(", "Rule", ".", "ACTION", "in", "rule_dict", ")", "\n", "assert", "(", "Rule", ".", "RULE_NAME", "in", "rule_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.update_rule_name": [[88, 90], ["None"], "methods", ["None"], ["", "def", "update_rule_name", "(", "self", ",", "new_name", ")", ":", "\n", "        ", "self", ".", "rule_dict", "[", "Rule", ".", "RULE_NAME", "]", "=", "new_name", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_depleted_items": [[92, 98], ["mazebasev2.lib.utils.dictutils.add_merge_dicts"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.add_merge_dicts"], ["", "def", "get_required_depleted_items", "(", "self", ",", "required_items", "=", "None", ")", ":", "\n", "        ", "if", "required_items", "is", "None", ":", "\n", "            ", "required_items", "=", "{", "}", "\n", "", "if", "Rule", ".", "DEPLETED_ITEMS", "in", "self", ".", "rule_dict", ":", "\n", "            ", "required_items", "=", "dictutils", ".", "add_merge_dicts", "(", "required_items", ",", "self", ".", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", ")", "\n", "", "return", "required_items", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_nondepleted_items": [[100, 106], ["mazebasev2.lib.utils.dictutils.add_merge_dicts"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.add_merge_dicts"], ["", "def", "get_required_nondepleted_items", "(", "self", ",", "required_items", "=", "None", ")", ":", "\n", "        ", "if", "required_items", "is", "None", ":", "\n", "            ", "required_items", "=", "{", "}", "\n", "", "if", "Rule", ".", "NON_DEPLETED_ITEMS", "in", "self", ".", "rule_dict", ":", "\n", "            ", "required_items", "=", "dictutils", ".", "add_merge_dicts", "(", "required_items", ",", "self", ".", "rule_dict", "[", "Rule", ".", "NON_DEPLETED_ITEMS", "]", ")", "\n", "", "return", "required_items", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_items": [[108, 112], ["rules.Rule.get_required_depleted_items", "rules.Rule.get_required_nondepleted_items"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_depleted_items", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_nondepleted_items"], ["", "def", "get_required_items", "(", "self", ")", ":", "\n", "        ", "required_items", "=", "self", ".", "get_required_depleted_items", "(", ")", "\n", "required_items", "=", "self", ".", "get_required_nondepleted_items", "(", "required_items", ")", "\n", "return", "required_items", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_action": [[114, 116], ["None"], "methods", ["None"], ["", "def", "get_required_action", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rule_dict", "[", "Rule", ".", "ACTION", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.check_rule_satisfied": [[118, 137], ["rules.Rule.get_required_items"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_items"], ["", "def", "check_rule_satisfied", "(", "self", ",", "action", ",", "location_item", ",", "inventory", ")", ":", "\n", "# Make sure action satisfies rule", "\n", "        ", "if", "self", ".", "rule_dict", "[", "Rule", ".", "ACTION", "]", "!=", "action", ":", "\n", "            ", "return", "False", "\n", "\n", "# Make sure location satisfies rule", "\n", "", "if", "Rule", ".", "LOCATION", "in", "self", ".", "rule_dict", "and", "self", ".", "rule_dict", "[", "Rule", ".", "LOCATION", "]", "!=", "location_item", ".", "str_id", ":", "\n", "            ", "return", "False", "\n", "\n", "# Make sure inventory satisfies rule", "\n", "", "required_items", "=", "self", ".", "get_required_items", "(", ")", "\n", "for", "item", "in", "required_items", ":", "\n", "            ", "if", "item", "not", "in", "inventory", ":", "\n", "                ", "return", "False", "\n", "", "if", "inventory", "[", "item", "]", "<", "required_items", "[", "item", "]", ":", "\n", "                ", "return", "False", "\n", "\n", "# All is satisfied, return True", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.create_triplet_corresp": [[141, 185], ["rules.Rule.get_required_depleted_items", "rules.Rule.get_required_items", "set", "triplets.append", "triplets.append", "triplets.append", "triplets.append", "triplets.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_depleted_items", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_items"], ["", "def", "create_triplet_corresp", "(", "self", ")", ":", "\n", "        ", "triplets", "=", "[", "]", "\n", "\n", "# Get the name of the rule (ie. craft_pickaxe)", "\n", "rule_name", "=", "self", ".", "rule_dict", "[", "Rule", ".", "RULE_NAME", "]", "\n", "\n", "# Get post-conditions", "\n", "# Item creation", "\n", "if", "Rule", ".", "CREATED_ITEMS", "in", "self", ".", "rule_dict", ":", "\n", "            ", "for", "created_item", "in", "self", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", ":", "\n", "                ", "item_count", "=", "self", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", "[", "created_item", "]", "\n", "assert", "(", "item_count", "<=", "TripletInfo", ".", "MAX_CREATED_ITEMS", ")", "\n", "triplets", ".", "append", "(", "(", "rule_name", ",", "TripletInfo", ".", "CREATES_ITEM_X", "%", "item_count", ",", "created_item", ")", ")", "\n", "\n", "# Item destruction", "\n", "", "", "depleted_items", "=", "self", ".", "get_required_depleted_items", "(", ")", "\n", "for", "item", "in", "depleted_items", ":", "\n", "            ", "depleted_count", "=", "depleted_items", "[", "item", "]", "\n", "assert", "(", "depleted_count", "<=", "TripletInfo", ".", "MAX_CONSUMED_ITEMS", ")", "\n", "triplets", ".", "append", "(", "(", "rule_name", ",", "TripletInfo", ".", "DESTROYS_ITEM_X", "%", "depleted_count", ",", "item", ")", ")", "\n", "\n", "# Add pre-conditions ", "\n", "# Add action rule", "\n", "", "assert", "(", "Rule", ".", "ACTION", "in", "self", ".", "rule_dict", ")", "\n", "if", "Rule", ".", "ACTION", "in", "self", ".", "rule_dict", ":", "\n", "            ", "action_rule", "=", "(", "rule_name", ",", "TripletInfo", ".", "REQUIRES_ACTION", ",", "self", ".", "rule_dict", "[", "Rule", ".", "ACTION", "]", ")", "\n", "triplets", ".", "append", "(", "action_rule", ")", "\n", "\n", "# Add required location rule", "\n", "", "if", "Rule", ".", "LOCATION", "in", "self", ".", "rule_dict", ":", "\n", "            ", "location_rule", "=", "(", "rule_name", ",", "TripletInfo", ".", "REQUIRES_LOCATION", ",", "self", ".", "rule_dict", "[", "Rule", ".", "LOCATION", "]", ")", "\n", "triplets", ".", "append", "(", "location_rule", ")", "\n", "\n", "# Add required item rules", "\n", "# For this, depleted and nondepleted are identical actually", "\n", "", "required_items", "=", "self", ".", "get_required_items", "(", ")", "\n", "for", "item", "in", "required_items", ":", "\n", "            ", "item_count", "=", "required_items", "[", "item", "]", "\n", "assert", "(", "item_count", "<", "TripletInfo", ".", "MAX_REQUIRED_ITEMS", ")", "\n", "item_rule", "=", "(", "rule_name", ",", "TripletInfo", ".", "REQUIRES_ITEM_X", "%", "item_count", ",", "item", ")", "\n", "triplets", ".", "append", "(", "item_rule", ")", "\n", "\n", "# Returns a set of triplets (order is irrelevant, want to compare)", "\n", "", "return", "set", "(", "triplets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.is_crafting_rule": [[188, 190], ["None"], "methods", ["None"], ["", "def", "is_crafting_rule", "(", "self", ")", ":", "\n", "        ", "return", "'required_action'", "in", "self", ".", "rule_dict", "and", "self", ".", "rule_dict", "[", "Rule", ".", "ACTION", "]", "in", "[", "'mine'", ",", "'grab'", ",", "'mine'", ",", "'chop'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.create_rule_from_triplets": [[195, 262], ["all", "mazebasev2.lib.utils.dictutils.diff_dicts", "all", "list", "int", "int", "edge_type.split", "int", "edge_type.split", "edge_type.split", "Exception"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.diff_dicts"], ["", "", "def", "create_rule_from_triplets", "(", "triplets", ")", ":", "\n", "# Create rule dict that can be passed to Rule init from triplet input", "\n", "    ", "rule_dict", "=", "{", "}", "\n", "\n", "# Get the name of the rule", "\n", "rule_name", "=", "list", "(", "triplets", ")", "[", "0", "]", "[", "0", "]", "\n", "assert", "(", "all", "(", "[", "t", "[", "0", "]", "==", "rule_name", "for", "t", "in", "triplets", "]", ")", ")", "\n", "rule_dict", "[", "Rule", ".", "RULE_NAME", "]", "=", "rule_name", "\n", "\n", "# Go through triplets", "\n", "for", "triplet", "in", "triplets", ":", "\n", "        ", "edge_type", "=", "triplet", "[", "1", "]", "\n", "assert", "(", "edge_type", "in", "TripletInfo", ".", "TRIPLET_TYPES", ")", "\n", "\n", "# Get created item post-condition", "\n", "if", "edge_type", "in", "TripletInfo", ".", "CREATES_ITEM_POST_CONDITIONS", ":", "\n", "            ", "item_count", "=", "int", "(", "edge_type", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "item", "=", "triplet", "[", "2", "]", "\n", "\n", "# Update created item dictionary", "\n", "if", "Rule", ".", "CREATED_ITEMS", "not", "in", "rule_dict", ":", "\n", "                ", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", "=", "{", "}", "\n", "", "assert", "(", "item", "not", "in", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", ")", "\n", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", "[", "item", "]", "=", "item_count", "\n", "\n", "# Get destroy item post conditions", "\n", "", "elif", "edge_type", "in", "TripletInfo", ".", "DESTROYS_ITEM_POST_CONDITIONS", ":", "\n", "            ", "depleted_count", "=", "int", "(", "edge_type", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "depleted_item", "=", "triplet", "[", "2", "]", "\n", "\n", "# Update depleted item dictionary", "\n", "if", "Rule", ".", "DEPLETED_ITEMS", "not", "in", "rule_dict", ":", "\n", "                ", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", "=", "{", "}", "\n", "", "assert", "(", "depleted_item", "not", "in", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", ")", "\n", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", "[", "depleted_item", "]", "=", "depleted_count", "\n", "\n", "# Get item required pre-conditions", "\n", "# Add all required items as nondepleted, and later remove the ones that are actually in the depleted item list", "\n", "", "elif", "edge_type", "in", "TripletInfo", ".", "REQUIRES_ITEM_PRECONDITIONS", ":", "\n", "            ", "item_count", "=", "int", "(", "edge_type", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "item", "=", "triplet", "[", "2", "]", "\n", "\n", "# Update non-depleted item dictionary", "\n", "if", "Rule", ".", "NON_DEPLETED_ITEMS", "not", "in", "rule_dict", ":", "\n", "                ", "rule_dict", "[", "Rule", ".", "NON_DEPLETED_ITEMS", "]", "=", "{", "}", "\n", "", "assert", "(", "item", "not", "in", "rule_dict", "[", "Rule", ".", "NON_DEPLETED_ITEMS", "]", ")", "\n", "rule_dict", "[", "Rule", ".", "NON_DEPLETED_ITEMS", "]", "[", "item", "]", "=", "item_count", "\n", "\n", "# Update action required", "\n", "", "elif", "edge_type", "==", "TripletInfo", ".", "REQUIRES_ACTION", ":", "\n", "            ", "rule_dict", "[", "Rule", ".", "ACTION", "]", "=", "triplet", "[", "2", "]", "\n", "\n", "# Add required location", "\n", "", "elif", "edge_type", "==", "TripletInfo", ".", "REQUIRES_LOCATION", ":", "\n", "            ", "rule_dict", "[", "Rule", ".", "LOCATION", "]", "=", "triplet", "[", "2", "]", "\n", "\n", "# Else shouldn't happen", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unkown edge type %s\"", "%", "edge_type", ")", "\n", "\n", "# Make NON-DEPLETED to be REQUIRES - DEPLETED", "\n", "", "", "if", "Rule", ".", "NON_DEPLETED_ITEMS", "in", "rule_dict", "and", "Rule", ".", "DEPLETED_ITEMS", "in", "rule_dict", ":", "\n", "        ", "non_depleted_items", "=", "dictutils", ".", "diff_dicts", "(", "rule_dict", "[", "Rule", ".", "NON_DEPLETED_ITEMS", "]", ",", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", ",", "remove_zeros", "=", "True", ")", "\n", "assert", "(", "all", "(", "[", "non_depleted_items", "[", "key", "]", ">", "0", "for", "key", "in", "non_depleted_items", "]", ")", ")", "\n", "rule_dict", "[", "Rule", ".", "NON_DEPLETED_ITEMS", "]", "=", "non_depleted_items", "\n", "\n", "", "return", "rule_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.get_triplets": [[264, 267], ["set", "rule.create_triplet_corresp"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.create_triplet_corresp"], ["", "def", "get_triplets", "(", "rule_list", ")", ":", "\n", "    ", "triplets", "=", "set", "(", "[", "item", "for", "rule_triplet", "in", "[", "rule", ".", "create_triplet_corresp", "(", ")", "for", "rule", "in", "rule_list", "]", "for", "item", "in", "rule_triplet", "]", ")", "\n", "return", "triplets", "\n", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.craftinggraph.CraftingGraph.__init__": [[12, 59], ["mazebasev2.lib.knowledge.Graph.__init__", "craftinggraph.CraftingGraph.add_node", "craftinggraph.CraftingGraph.add_node", "list", "craftinggraph.CraftingGraph.add_edge", "rule.is_crafting_rule", "rule.get_required_items().keys", "craftinggraph.CraftingGraph.add_edge", "len", "list", "list", "rule.rule_dict[].keys", "rule.get_required_items", "rule.rule_dict[].values"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_node", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_node", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_edge", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.is_crafting_rule", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.graph.Graph.add_edge", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_items"], ["    ", "def", "__init__", "(", "self", ",", "rules", ",", "item_dict", ",", "max_craft_depth", ")", ":", "\n", "        ", "super", "(", "CraftingGraph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "item_dict", "=", "item_dict", "\n", "self", ".", "max_craft_depth", "=", "max_craft_depth", "\n", "self", ".", "rules", "=", "rules", "\n", "\n", "# Create nodes for rules", "\n", "for", "rule", "in", "rules", ":", "\n", "# Only use crafting rules", "\n", "            ", "if", "not", "rule", ".", "is_crafting_rule", "(", ")", ":", "\n", "                ", "continue", "\n", "\n", "# Create node", "\n", "", "name", "=", "rule", ".", "rule_dict", "[", "Rule", ".", "RULE_NAME", "]", "\n", "data", "=", "{", "}", "\n", "data", "[", "'type'", "]", "=", "'rule'", "\n", "data", "[", "'rule'", "]", "=", "rule", "\n", "self", ".", "add_node", "(", "name", ",", "data", ")", "\n", "\n", "# Create nodes for items", "\n", "", "for", "item", "in", "item_dict", ":", "\n", "            ", "if", "item_dict", "[", "item", "]", "!=", "'CraftingItem'", ":", "\n", "                ", "continue", "\n", "\n", "# Create node", "\n", "", "name", "=", "item", "\n", "data", "=", "{", "}", "\n", "data", "[", "'type'", "]", "=", "item", "\n", "self", ".", "add_node", "(", "name", ",", "data", ")", "\n", "\n", "# Go through each rule and update connections", "\n", "", "for", "rule", "in", "rules", ":", "\n", "            ", "rule_name", "=", "rule", ".", "rule_dict", "[", "Rule", ".", "RULE_NAME", "]", "\n", "if", "rule_name", "not", "in", "self", ".", "nodes", ":", "\n", "                ", "continue", "\n", "\n", "# Add edges from required items to rules", "\n", "", "required_items", "=", "list", "(", "rule", ".", "get_required_items", "(", ")", ".", "keys", "(", ")", ")", "\n", "for", "req_item", "in", "required_items", ":", "\n", "                ", "self", ".", "add_edge", "(", "req_item", ",", "rule_name", ")", "\n", "\n", "# Add edge from rule node to created items", "\n", "# TODO - again, assuming only one item is created per rule", "\n", "", "assert", "(", "len", "(", "rule", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", ")", "==", "1", ")", "\n", "assert", "(", "list", "(", "rule", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", ".", "values", "(", ")", ")", "[", "0", "]", "==", "1", ")", "\n", "created_item", "=", "list", "(", "rule", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "self", ".", "add_edge", "(", "rule_name", ",", "created_item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.craftinggraph.CraftingGraph.calculate_items": [[61, 194], ["set", "set", "mazebasev2.lib.utils.dictutils.add_merge_dicts", "craftinggraph.CraftingGraph.get_required_recursive", "mazebasev2.lib.utils.dictutils.is_subset_of", "list", "craftinggraph.CraftingGraph.get_required_recursive", "mazebasev2.lib.utils.dictutils.add_merge_dicts", "mazebasev2.lib.utils.dictutils.max_merge_dicts", "mazebasev2.lib.utils.dictutils.add_merge_dicts", "mazebasev2.lib.utils.dictutils.is_subset_of", "range", "mazebasev2.lib.utils.dictutils.add_merge_dicts", "mazebasev2.lib.utils.dictutils.max_merge_dicts", "mazebasev2.lib.utils.dictutils.add_merge_dicts", "craftinggraph.CraftingGraph.get_required_recursive", "mazebasev2.lib.utils.dictutils.add_merge_dicts", "mazebasev2.lib.utils.dictutils.max_merge_dicts", "mazebasev2.lib.utils.dictutils.add_merge_dicts", "mazebasev2.lib.utils.dictutils.is_subset_of", "rule.get_required_depleted_items().keys", "set", "len", "set", "set", "set.add", "random.random", "rule.get_required_depleted_items", "mazebasev2.lib.utils.dictutils.add_merge_dicts.keys", "mazebasev2.lib.utils.dictutils.max_merge_dicts.keys"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.add_merge_dicts", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.craftinggraph.CraftingGraph.get_required_recursive", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.is_subset_of", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.craftinggraph.CraftingGraph.get_required_recursive", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.add_merge_dicts", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.max_merge_dicts", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.add_merge_dicts", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.is_subset_of", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.add_merge_dicts", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.max_merge_dicts", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.add_merge_dicts", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.craftinggraph.CraftingGraph.get_required_recursive", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.add_merge_dicts", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.max_merge_dicts", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.add_merge_dicts", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.is_subset_of", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_depleted_items"], ["", "", "def", "calculate_items", "(", "self", ",", "end_items", ",", "visited_rules", ",", "distractor_rules", ",", "extra_items", ",", "inventory_chance", ")", ":", "\n", "# Return what should be in inventory, what should be on ground", "\n", "        ", "inventory_items", "=", "{", "}", "\n", "ground_items", "=", "{", "}", "\n", "\n", "# What containers to spawn", "\n", "containers", "=", "set", "(", ")", "\n", "\n", "# What fonts to spawn (and how much resource it should have)", "\n", "fonts", "=", "{", "}", "\n", "\n", "# Keep track of if we've used rules", "\n", "used_rules", "=", "set", "(", ")", "\n", "\n", "# Seperate required items into depleted and not", "\n", "# Need to add depleted but only max non-depleted", "\n", "req_depleted", "=", "{", "}", "\n", "req_nondepleted", "=", "{", "}", "\n", "\n", "# First calculate what we need for end items", "\n", "nondepleted_created", "=", "{", "}", "\n", "for", "item", "in", "end_items", ":", "\n", "            ", "item_count", "=", "end_items", "[", "item", "]", "\n", "node", "=", "self", ".", "nodes", "[", "item", "]", "\n", "new_req_depleted", ",", "new_req_nondepleted", ",", "new_req_fonts", ",", "new_containers", ",", "new_used_rules", ",", "nondepleted_created", ",", "depth_left", "=", "self", ".", "get_required_recursive", "(", "node", ",", "nondepleted_created", ",", "self", ".", "max_craft_depth", ")", "\n", "\n", "# Update required items", "\n", "for", "_", "in", "item_count", ":", "\n", "                ", "req_depleted", "=", "dictutils", ".", "add_merge_dicts", "(", "new_req_depleted", ",", "req_depleted", ")", "\n", "req_nondepleted", "=", "dictutils", ".", "max_merge_dicts", "(", "new_req_nondepleted", ",", "req_nondepleted", ")", "\n", "fonts", "=", "dictutils", ".", "add_merge_dicts", "(", "new_req_fonts", ",", "fonts", ")", "\n", "containers", "|=", "new_containers", "\n", "used_rules", "|=", "new_used_rules", "\n", "\n", "# Assert req_nondepleted is a subset of nondepleted_created", "\n", "", "assert", "(", "dictutils", ".", "is_subset_of", "(", "req_nondepleted", ",", "nondepleted_created", ")", ")", "\n", "\n", "# Now calculate for rules, if we haven't visited them yet", "\n", "", "for", "rule_name", "in", "visited_rules", ":", "\n", "# If we didn't incindentally visit the rule already", "\n", "            ", "if", "rule_name", "not", "in", "used_rules", ":", "\n", "                ", "node", "=", "self", ".", "nodes", "[", "rule_name", "]", "\n", "new_req_depleted", ",", "new_req_nondepleted", ",", "new_req_fonts", ",", "new_containers", ",", "new_used_rules", ",", "nondepleted_created", ",", "depth_left", "=", "self", ".", "get_required_recursive", "(", "node", ",", "nondepleted_created", ",", "self", ".", "max_craft_depth", ")", "\n", "\n", "# Update required items", "\n", "req_depleted", "=", "dictutils", ".", "add_merge_dicts", "(", "new_req_depleted", ",", "req_depleted", ")", "\n", "req_nondepleted", "=", "dictutils", ".", "max_merge_dicts", "(", "new_req_nondepleted", ",", "req_nondepleted", ")", "\n", "fonts", "=", "dictutils", ".", "add_merge_dicts", "(", "new_req_fonts", ",", "fonts", ")", "\n", "containers", "|=", "new_containers", "\n", "used_rules", "|=", "new_used_rules", "\n", "\n", "# Assert req_nondepleted is a subset of nondepleted_created", "\n", "assert", "(", "dictutils", ".", "is_subset_of", "(", "req_nondepleted", ",", "nondepleted_created", ")", ")", "\n", "\n", "# Now get items for our distractor rules", "\n", "# Check whether we actually share a common resource", "\n", "# Then give rest of ingredients", "\n", "", "", "for", "rule_name", "in", "distractor_rules", ":", "\n", "# Distractor must not have been visited already", "\n", "            ", "if", "rule_name", "in", "used_rules", ":", "\n", "                ", "continue", "\n", "\n", "# Distractor must consume a necessary resource", "\n", "", "node", "=", "self", ".", "nodes", "[", "rule_name", "]", "\n", "rule", "=", "node", ".", "data", "[", "'rule'", "]", "\n", "distractor_consumed", "=", "list", "(", "rule", ".", "get_required_depleted_items", "(", ")", ".", "keys", "(", ")", ")", "\n", "common_resources", "=", "set", "(", "distractor_consumed", ")", "&", "(", "set", "(", "req_depleted", ".", "keys", "(", ")", ")", "|", "set", "(", "req_nondepleted", ".", "keys", "(", ")", ")", ")", "\n", "if", "len", "(", "common_resources", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "# Get items needed", "\n", "", "new_req_depleted", ",", "new_req_nondepleted", ",", "new_req_fonts", ",", "new_containers", ",", "new_used_rules", ",", "nondepleted_created", ",", "depth_left", "=", "self", ".", "get_required_recursive", "(", "node", ",", "nondepleted_created", ",", "self", ".", "max_craft_depth", ")", "\n", "\n", "# Remove common resource items, and only add extra depleted items that aren't common resources", "\n", "proc_depleted", "=", "{", "}", "\n", "for", "key", "in", "new_req_depleted", ":", "\n", "                ", "if", "key", "not", "in", "common_resources", ":", "\n", "                    ", "proc_depleted", "[", "key", "]", "=", "new_req_depleted", "[", "key", "]", "\n", "\n", "# Update required", "\n", "", "", "req_depleted", "=", "dictutils", ".", "add_merge_dicts", "(", "proc_depleted", ",", "req_depleted", ")", "\n", "req_nondepleted", "=", "dictutils", ".", "max_merge_dicts", "(", "new_req_nondepleted", ",", "req_nondepleted", ")", "\n", "fonts", "=", "dictutils", ".", "add_merge_dicts", "(", "new_req_fonts", ",", "fonts", ")", "\n", "containers", "|=", "new_containers", "\n", "used_rules", "|=", "new_used_rules", "\n", "\n", "# Assert req_nondepleted is a subset of nondepleted_created", "\n", "assert", "(", "dictutils", ".", "is_subset_of", "(", "req_nondepleted", ",", "nondepleted_created", ")", ")", "\n", "\n", "# Add distractor items", "\n", "", "for", "item", "in", "extra_items", ":", "\n", "\n", "            ", "if", "item", "==", "'goal'", "or", "item", "==", "'recipe'", "or", "item", "==", "'count'", ":", "\n", "                ", "continue", "\n", "\n", "", "item_type", "=", "self", ".", "item_dict", "[", "item", "]", "\n", "item_count", "=", "extra_items", "[", "item", "]", "\n", "\n", "# Add to nondepleted required item list", "\n", "if", "self", ".", "item_dict", "[", "item", "]", "==", "'CraftingItem'", ":", "\n", "                ", "if", "item", "not", "in", "req_nondepleted", ":", "\n", "                    ", "req_nondepleted", "[", "item", "]", "=", "item_count", "\n", "", "else", ":", "\n", "                    ", "req_nondepleted", "[", "item", "]", "+=", "item_count", "\n", "\n", "# Add crafting containers not already in there", "\n", "", "", "elif", "self", ".", "item_dict", "[", "item", "]", "==", "'CraftingContainer'", ":", "\n", "                ", "containers", ".", "add", "(", "item", ")", "\n", "\n", "# Add font values", "\n", "", "elif", "self", ".", "item_dict", "[", "item", "]", "==", "'ResourceFont'", ":", "\n", "                ", "if", "item", "not", "in", "fonts", ":", "\n", "                    ", "fonts", "[", "item", "]", "=", "item_count", "\n", "", "else", ":", "\n", "                    ", "fonts", "[", "item", "]", "+=", "item_count", "\n", "\n", "# Put items in either ground items or inventory items", "\n", "", "", "", "all_items", "=", "dictutils", ".", "add_merge_dicts", "(", "req_depleted", ",", "req_nondepleted", ")", "\n", "for", "item", "in", "all_items", ":", "\n", "            ", "for", "i", "in", "range", "(", "all_items", "[", "item", "]", ")", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "inventory_chance", ":", "\n", "                    ", "if", "item", "in", "inventory_items", ":", "\n", "                        ", "inventory_items", "[", "item", "]", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "inventory_items", "[", "item", "]", "=", "1", "\n", "", "", "else", ":", "\n", "                    ", "if", "item", "in", "ground_items", ":", "\n", "                        ", "ground_items", "[", "item", "]", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "ground_items", "[", "item", "]", "=", "1", "\n", "\n", "# Return", "\n", "", "", "", "", "return", "inventory_items", ",", "ground_items", ",", "containers", ",", "fonts", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.craftinggraph.CraftingGraph.get_required_recursive": [[196, 309], ["set", "set", "set.add", "rule.get_required_depleted_items", "rule.get_required_nondepleted_items", "random.choice", "craftinggraph.CraftingGraph.get_required_recursive"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_depleted_items", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_nondepleted_items", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.craftinggraph.CraftingGraph.get_required_recursive"], ["", "def", "get_required_recursive", "(", "self", ",", "node", ",", "nondepleted_created", ",", "depth", ")", ":", "\n", "# Init return values", "\n", "        ", "req_depleted", "=", "{", "}", "\n", "req_nondepleted", "=", "{", "}", "\n", "fonts", "=", "{", "}", "\n", "containers", "=", "set", "(", ")", "\n", "used_rules", "=", "set", "(", ")", "\n", "\n", "# If node is rule, follow rules for updating", "\n", "if", "node", ".", "data", "[", "'type'", "]", "==", "'rule'", ":", "\n", "# If we're at a rule, decrement depth", "\n", "            ", "depth", "-=", "1", "\n", "\n", "# Add rule to used rules", "\n", "used_rules", ".", "add", "(", "node", ".", "key", ")", "\n", "rule", "=", "node", ".", "data", "[", "'rule'", "]", "\n", "\n", "# Get what is needed depleted/nondepleted for rule", "\n", "rule_req_depleted", "=", "rule", ".", "get_required_depleted_items", "(", ")", "\n", "rule_req_nondepleted", "=", "rule", ".", "get_required_nondepleted_items", "(", ")", "\n", "\n", "# Add the required location (font or container)", "\n", "if", "'required_location'", "in", "rule", ".", "rule_dict", ":", "\n", "                ", "location", "=", "rule", ".", "rule_dict", "[", "'required_location'", "]", "\n", "if", "self", ".", "item_dict", "[", "location", "]", "==", "'CraftingContainer'", ":", "\n", "                    ", "containers", ".", "add", "(", "location", ")", "\n", "", "elif", "self", ".", "item_dict", "[", "location", "]", "==", "'ResourceFont'", ":", "\n", "# Have font count 1. The traceback expects only 1 output item, so it will do the multiplication above in the stack", "\n", "                    ", "fonts", "[", "location", "]", "=", "1", "\n", "\n", "# If there are no required items, we're done (should only be fonts)", "\n", "", "", "if", "len", "(", "node", ".", "incoming", ")", "==", "0", ":", "\n", "                ", "pdb", ".", "set_tace", "(", ")", "\n", "# Should be font I think", "\n", "assert", "(", "self", ".", "item_dict", "[", "location", "]", "==", "'ResourceFont'", ")", "\n", "return", "req_depleted", ",", "req_nondepleted", ",", "fonts", ",", "containers", ",", "used_rules", ",", "nondepleted_created", ",", "depth", "\n", "# If there are required items left", "\n", "", "else", ":", "\n", "# If we're at the last depth, generate everything we need at this point", "\n", "                ", "if", "depth", "==", "0", ":", "\n", "                    ", "req_depleted", "=", "rule_req_depleted", "\n", "req_nondepleted", "=", "rule_req_nondepleted", "\n", "nondepleted_created", "=", "dictutils", ".", "max_merge_dicts", "(", "nondepleted_created", ",", "req_nondepleted", ")", "\n", "return", "req_depleted", ",", "req_nondepleted", ",", "fonts", ",", "containers", ",", "used_rules", ",", "nondepleted_created", ",", "depth", "\n", "# Make the recursive call to get all the required items", "\n", "", "else", ":", "\n", "# Recursive calls", "\n", "                    ", "depth_left", "=", "depth", "\n", "for", "item_node", "in", "node", ".", "incoming", ":", "\n", "# Figure out how many we need, and if its depleted or not", "\n", "                        ", "item_name", "=", "item_node", ".", "key", "\n", "\n", "# Get how many of the item we need that are depleted", "\n", "depl_count", "=", "0", "\n", "nondepl_count", "=", "0", "\n", "assert", "(", "item_name", "in", "rule_req_depleted", "or", "item", "in", "rule_req_nondepleted", ")", "\n", "if", "item_name", "in", "rule_req_depleted", ":", "\n", "                            ", "depl_count", "=", "rule_req_depleted", "[", "item_name", "]", "\n", "\n", "# Add nondepleted items", "\n", "", "if", "item_name", "in", "rule_req_nondepleted", ":", "\n", "# Don't create any more of the item if we've already created enough", "\n", "                            ", "if", "item_name", "in", "nondepleted_created", ":", "\n", "                                ", "nondepl_count", "=", "max", "(", "0", ",", "rule_req_nondepleted", "[", "item_name", "]", "-", "nondepleted_created", "[", "item_name", "]", ")", "\n", "", "else", ":", "\n", "                                ", "nondepl_count", "=", "rule_req_nondepleted", "[", "item_name", "]", "\n", "\n", "# Update nondepleted_created if this rule means we have to create more", "\n", "", "if", "nondepl_count", ">", "0", ":", "\n", "                                ", "nondepleted_created", "[", "item_name", "]", "=", "rule_req_nondepleted", "[", "item_name", "]", "\n", "\n", "# If item_count is 0 because we had a nondepleted item already, skip item", "\n", "", "", "item_count", "=", "depl_count", "+", "nondepl_count", "\n", "if", "item_count", "==", "0", ":", "\n", "                            ", "continue", "\n", "\n", "# If it's a terminal item, we need to add the item itself", "\n", "", "if", "len", "(", "item_node", "[", "'in'", "]", "==", "0", ")", ":", "\n", "                            ", "if", "item_name", "in", "rule_req_depleted", ":", "\n", "                                ", "item_req_depleted", "=", "{", "item_name", ":", "rule_req_depleted", "[", "item_name", "]", "}", "\n", "req_depleted", "=", "dictutils", ".", "add_merge_dicts", "(", "item_req_depleted", ",", "req_depleted", ")", "\n", "", "if", "item_name", "in", "rule_req_nondepleted", ":", "\n", "                                ", "item_req_nondepleted", "=", "{", "item_name", ":", "rule_req_nondepleted", "[", "item_name", "]", "}", "\n", "req_nondepleted", "=", "dictutils", ".", "max_merge_dicts", "(", "item_req_nondepleted", ",", "req_nondepleted", ")", "\n", "# Otherwise, we update based on what the item uses", "\n", "", "", "else", ":", "\n", "                            ", "item_req_depleted", ",", "item_req_nondepleted", ",", "item_fonts", ",", "item_containers", ",", "item_used_rules", ",", "item_depth_left", "=", "get_required_recursive", "(", "item_node", ",", "depth", ")", "\n", "\n", "# Update items and lists based on return from item", "\n", "for", "ind", "in", "range", "(", "item_count", ")", ":", "\n", "                                ", "req_depleted", "=", "dictutils", ".", "add_merge_dicts", "(", "item_req_depleted", ",", "req_depleted", ")", "\n", "fonts", "=", "dictutils", ".", "add_merge_dicts", "(", "item_fonts", ",", "fonts", ")", "\n", "", "req_nondepleted", "=", "dictutils", ".", "max_merge_dicts", "(", "item_req_nondepleted", ",", "req_nondepleted", ")", "\n", "containers", "=", "item_containers", "|", "containers", "\n", "used_rules", "=", "item_used_rules", "|", "used_rules", "\n", "depth_left", "=", "min", "(", "depth_left", ",", "item_depth_left", ")", "\n", "\n", "# Return", "\n", "", "", "return", "req_depleted", ",", "req_nondepleted", ",", "fonts", ",", "containers", ",", "used_rules", ",", "nondepleted_created", ",", "depth_left", "\n", "# Follow recursive rules for items", "\n", "", "", "", "else", ":", "\n", "            ", "assert", "(", "node", ".", "data", "[", "'type'", "]", "==", "'item'", ")", "\n", "\n", "# This should be handled in rule node", "\n", "if", "len", "(", "node", ".", "incoming", ")", "==", "0", ":", "\n", "                ", "assert", "(", "False", ")", "\n", "\n", "# If multiple rules, choose one to follow randomly", "\n", "# TODO - is this the right behavior actually? Can't think of a better way to do this", "\n", "", "rule_node", "=", "random", ".", "choice", "(", "node", ".", "incoming", ")", "\n", "\n", "# Follow the rule node", "\n", "return", "get_required_recursive", "(", "rule_node", ",", "depth", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.__init__": [[27, 48], ["object.__init__", "knowledgemodel.KnowledgeModel", "preconditionrl.PreconditionRLModule", "game.get_max_bounds", "game.actions"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.get_max_bounds", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.actions"], ["def", "__init__", "(", "self", ",", "game", ",", "method_opt", ",", "env_opt", ",", "Kp", ",", "item_dict", ")", ":", "\n", "        ", "super", "(", "KnowledgePlanner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "item_dict", "=", "item_dict", "\n", "self", ".", "Kp", "=", "Kp", "\n", "self", ".", "mode", "=", "method_opt", "[", "'mode'", "]", "\n", "self", ".", "max_precond_steps", "=", "method_opt", "[", "'max_precond_steps'", "]", "\n", "\n", "# Probability we try to verify a proposal first (if any left unverified)", "\n", "self", ".", "proposal_prob", "=", "method_opt", "[", "'proposal_prob'", "]", "\n", "self", ".", "necessity_prob", "=", "method_opt", "[", "'necessity_prob'", "]", "\n", "self", ".", "sufficient_prob", "=", "method_opt", "[", "'sufficient_prob'", "]", "\n", "\n", "# Create KnowledgeModel", "\n", "self", ".", "K_model", "=", "KnowledgeModel", "(", "method_opt", "[", "'knowledge'", "]", ",", "env_opt", ",", "Kp", ",", "item_dict", ")", "\n", "\n", "# Create an RL module for the precondition satisfaction part", "\n", "self", ".", "precond_rl", "=", "PreconditionRLModule", "(", "method_opt", "[", "'rl'", "]", ",", "env_opt", ",", "game", ".", "get_max_bounds", "(", ")", ",", "game", ".", "actions", "(", ")", ")", "\n", "\n", "# Initialize last_obs and last_action as empty", "\n", "self", ".", "last_obs", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.reset": [[50, 65], ["knowledgeplanner.KnowledgePlanner.make_plan", "knowledgeplanner.KnowledgePlanner.check_obs"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.make_plan", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.check_obs"], ["", "def", "reset", "(", "self", ",", "last_obs", ",", "first_obs", ")", ":", "\n", "# Resolve the last observation from before the reset (if relevant)", "\n", "        ", "if", "last_obs", "is", "not", "None", ":", "\n", "            ", "self", ".", "check_obs", "(", "last_obs", ",", "on_reset", "=", "True", ")", "\n", "\n", "# Reset plans we've tried before", "\n", "", "self", ".", "tried_plans", "=", "[", "]", "\n", "\n", "# Call make_plan", "\n", "# This makes a new plan for the current observation", "\n", "self", ".", "make_plan", "(", "first_obs", ")", "\n", "\n", "# Reset all the variables", "\n", "self", ".", "last_obs", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.parse_out_inv": [[67, 89], ["int", "item.split", "item.split"], "methods", ["None"], ["", "def", "parse_out_inv", "(", "self", ",", "obs", ")", ":", "\n", "        ", "cur_inv", "=", "{", "}", "\n", "side_info", "=", "obs", "[", "'side_info'", "]", "\n", "inventory_raw", "=", "None", "\n", "for", "row", "in", "side_info", ":", "\n", "            ", "assert", "(", "row", "[", "0", "]", "==", "'INFO'", ")", "\n", "if", "row", "[", "1", "]", "==", "'INVENTORY'", ":", "\n", "                ", "inventory_raw", "=", "row", "\n", "break", "\n", "", "", "assert", "(", "inventory_raw", "is", "not", "None", ")", "\n", "for", "item", "in", "inventory_raw", ":", "\n", "# Skip first two and break at empty", "\n", "            ", "if", "item", "in", "[", "'INFO'", ",", "'INVENTORY'", "]", ":", "\n", "                ", "continue", "\n", "", "if", "item", "==", "''", ":", "\n", "                ", "break", "\n", "\n", "# Parse item name and count", "\n", "", "item_name", "=", "item", ".", "split", "(", "'_count'", ")", "[", "0", "]", "\n", "item_count", "=", "int", "(", "item", ".", "split", "(", "'='", ")", "[", "-", "1", "]", ")", "\n", "cur_inv", "[", "item_name", "]", "=", "item_count", "\n", "", "return", "cur_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.check_post_conditions": [[91, 136], ["knowledgeplanner.KnowledgePlanner.parse_out_inv", "knowledgeplanner.KnowledgePlanner.parse_out_inv", "lib.utils.dictutils.diff_dicts", "len", "len", "post_conditions_satisfied.append", "list", "abs", "post_conditions_satisfied.append", "items_added.keys"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.parse_out_inv", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.parse_out_inv", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.diff_dicts"], ["", "def", "check_post_conditions", "(", "self", ",", "last_obs", ",", "obs", ")", ":", "\n", "# Right now only effect is one crafting item is created", "\n", "# TODO - add more effects", "\n", "        ", "post_conditions_satisfied", "=", "[", "]", "\n", "main_effect", "=", "None", "\n", "\n", "# Get previous and current inventories", "\n", "last_inventory", "=", "self", ".", "parse_out_inv", "(", "last_obs", ")", "\n", "cur_inventory", "=", "self", ".", "parse_out_inv", "(", "obs", ")", "\n", "\n", "# Find the difference between the inventories", "\n", "inventory_diff", "=", "dictutils", ".", "diff_dicts", "(", "cur_inventory", ",", "last_inventory", ")", "\n", "\n", "# Find items that were added", "\n", "items_added", "=", "{", "}", "\n", "for", "item", "in", "inventory_diff", ":", "\n", "            ", "if", "inventory_diff", "[", "item", "]", ">", "0", ":", "\n", "                ", "items_added", "[", "item", "]", "=", "inventory_diff", "[", "item", "]", "\n", "\n", "# We should never be in a situation where we add two or more new items to inventory", "\n", "# Items should no longer spawn in same square", "\n", "# Crafting rules should never be satisfiable at the same time", "\n", "", "", "assert", "(", "len", "(", "items_added", ")", "<=", "1", ")", "\n", "\n", "# Add item created post-condition", "\n", "if", "len", "(", "items_added", ")", "==", "1", ":", "\n", "            ", "item", "=", "list", "(", "items_added", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "# Create item created postcondition", "\n", "assert", "(", "items_added", "[", "item", "]", "<=", "TripletInfo", ".", "MAX_CREATED_ITEMS", ")", "\n", "post_condition_type", "=", "TripletInfo", ".", "CREATES_ITEM_X", "%", "items_added", "[", "item", "]", "\n", "created_post_condition", "=", "(", "post_condition_type", ",", "item", ")", "\n", "post_conditions_satisfied", ".", "append", "(", "created_post_condition", ")", "\n", "main_effect", "=", "item", "\n", "# TODO - maybe this main effect assumption is not necessary. It does make search easier", "\n", "\n", "# Add destroyed item post-conditions", "\n", "", "for", "item", "in", "inventory_diff", ":", "\n", "            ", "if", "inventory_diff", "[", "item", "]", "<", "0", ":", "\n", "                ", "num_destroyed", "=", "abs", "(", "inventory_diff", "[", "item", "]", ")", "\n", "assert", "(", "num_destroyed", "<=", "TripletInfo", ".", "MAX_CONSUMED_ITEMS", ")", "\n", "post_condition_type", "=", "TripletInfo", ".", "DESTROYS_ITEM_X", "%", "num_destroyed", "\n", "destroyed_post_condition", "=", "(", "post_condition_type", ",", "item", ")", "\n", "post_conditions_satisfied", ".", "append", "(", "destroyed_post_condition", ")", "\n", "\n", "", "", "return", "main_effect", ",", "post_conditions_satisfied", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.get_inventory_preconditions": [[138, 147], ["set", "range", "set.add"], "methods", ["None"], ["", "def", "get_inventory_preconditions", "(", "self", ",", "inventory", ")", ":", "\n", "        ", "inv_preconds", "=", "set", "(", ")", "\n", "for", "item", "in", "inventory", ":", "\n", "            ", "count", "=", "inventory", "[", "item", "]", "\n", "for", "i", "in", "range", "(", "count", ")", ":", "\n", "                ", "item_count", "=", "i", "+", "1", "\n", "assert", "(", "item_count", "<=", "TripletInfo", ".", "MAX_REQUIRED_ITEMS", ")", "\n", "inv_preconds", ".", "add", "(", "(", "TripletInfo", ".", "REQUIRES_ITEM_X", "%", "item_count", ",", "item", ")", ")", "\n", "", "", "return", "inv_preconds", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.get_location_preconditions": [[149, 154], ["set", "set"], "methods", ["None"], ["", "def", "get_location_preconditions", "(", "self", ",", "flat_environment", ")", ":", "\n", "# Get all the locations that are in flat_env", "\n", "        ", "locations", "=", "set", "(", "[", "location", "for", "location", "in", "flat_environment", "if", "location", "in", "self", ".", "item_dict", "]", ")", "\n", "location_preconds", "=", "set", "(", "(", "TripletInfo", ".", "REQUIRES_LOCATION", ",", "location", ")", "for", "location", "in", "locations", ")", "\n", "return", "location_preconds", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.sense_all_satisfied_preconds": [[156, 183], ["set", "set.union", "knowledgeplanner.KnowledgePlanner.parse_out_inv", "set.union", "set.add", "knowledgeplanner.KnowledgePlanner.get_location_preconditions", "knowledgeplanner.KnowledgePlanner.get_inventory_preconditions", "type", "pdb.set_trace"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.parse_out_inv", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.get_location_preconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.get_inventory_preconditions"], ["", "def", "sense_all_satisfied_preconds", "(", "self", ",", "obs", ",", "action", "=", "None", ")", ":", "\n", "        ", "all_satisfied_precond", "=", "set", "(", ")", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "all_satisfied_precond", ".", "add", "(", "(", "TripletInfo", ".", "REQUIRES_ACTION", ",", "action", ")", ")", "\n", "\n", "# Next, add the location based ones", "\n", "# Get the grid location of the agent", "\n", "", "grid_obs", "=", "obs", "[", "'grid_obs'", "]", "\n", "agent_grid", "=", "None", "\n", "for", "row", "in", "grid_obs", ":", "\n", "            ", "for", "tile", "in", "row", ":", "\n", "                ", "if", "type", "(", "tile", ")", "!=", "list", ":", "\n", "                    ", "pdb", ".", "set_trace", "(", ")", "\n", "", "if", "'Agent'", "in", "tile", ":", "\n", "                    ", "agent_grid", "=", "tile", "\n", "", "", "", "assert", "(", "agent_grid", "is", "not", "None", ")", "\n", "\n", "# Get all the relevant items in your grid and add them as conditions", "\n", "all_satisfied_precond", ".", "union", "(", "self", ".", "get_location_preconditions", "(", "agent_grid", ")", ")", "\n", "\n", "# Next, add the inventory ones", "\n", "# Just requires item and depletes item for every item and count we have", "\n", "# This gets pruned later based on items expended", "\n", "inventory", "=", "self", ".", "parse_out_inv", "(", "obs", ")", "\n", "all_satisfied_precond", ".", "union", "(", "self", ".", "get_inventory_preconditions", "(", "inventory", ")", ")", "\n", "\n", "return", "all_satisfied_precond", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.check_obs": [[186, 247], ["knowledgeplanner.KnowledgePlanner.sense_all_satisfied_preconds", "knowledgeplanner.KnowledgePlanner.check_post_conditions", "knowledgeplanner.KnowledgePlanner.sense_all_satisfied_preconds", "knowledgeplanner.KnowledgePlanner.K_model.update_knowledge", "knowledgeplanner.KnowledgePlanner.make_plan", "len", "knowledgeplanner.KnowledgePlanner.precond_rl.reset", "knowledgeplanner.KnowledgePlanner.update_plan", "knowledgeplanner.KnowledgePlanner.precond_rl.reset", "knowledgeplanner.KnowledgePlanner.update_plan", "knowledgeplanner.KnowledgePlanner.precond_rl.reset"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.sense_all_satisfied_preconds", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.check_post_conditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.sense_all_satisfied_preconds", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.KnowledgeModel.update_knowledge", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.make_plan", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.update_plan", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.update_plan", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset"], ["", "def", "check_obs", "(", "self", ",", "obs", ",", "on_reset", "=", "False", ")", ":", "\n", "# Check we have satisfied any post conditions", "\n", "        ", "if", "self", ".", "last_action", "is", "not", "None", ":", "\n", "# Check if any post condition was satisfied and see what preconditions were satisfied", "\n", "            ", "main_effect_satisfied", ",", "post_conditions_satisfied", "=", "self", ".", "check_post_conditions", "(", "self", ".", "last_obs", ",", "obs", ")", "\n", "last_preconds", "=", "self", ".", "sense_all_satisfied_preconds", "(", "self", ".", "last_obs", ",", "self", ".", "last_action", ")", "\n", "\n", "# TODO TODO - pickup", "\n", "# TODO - maybe get rid of this when we deal with multiple rules for same effect", "\n", "# TODO - would need to change pick up physics and not allow multiple items in same place first", "\n", "# TODO - otherwise we violate the one schema per timestep rule", "\n", "# Remove the \"pick up\" rules (just pick up an item to add it to dictionary)", "\n", "#if main_effect_satisfied is not None and any([main_effect_satisfied == precond[1] for precond in last_preconds]) and any([precond[1] == 'grab' for precond in last_preconds]):", "\n", "#    main_effect_satisfied = None", "\n", "\n", "# Update KnowledgeModel", "\n", "if", "self", ".", "plan_mode", "==", "KnowledgePlanner", ".", "TEST_MODE", ":", "\n", "                ", "test_intended", "=", "self", ".", "current_schema", ".", "main_effect", "\n", "", "else", ":", "\n", "                ", "test_intended", "=", "None", "\n", "\n", "# Check if we have anything to update", "\n", "# Only update if either some post condition was actually satisfied", "\n", "# Or if our preconditions satisfied was something we intented to test", "\n", "", "if", "main_effect_satisfied", "is", "not", "None", "or", "test_intended", "is", "not", "None", ":", "\n", "                ", "self", ".", "K_model", ".", "update_knowledge", "(", "main_effect_satisfied", ",", "test_intended", ",", "post_conditions_satisfied", ",", "last_preconds", ")", "\n", "\n", "# Possibly update plan if this was the thing we were trying to plan for", "\n", "", "if", "self", ".", "plan_mode", "==", "KnowledgePlanner", ".", "TEST_MODE", ":", "\n", "                ", "self", ".", "make_plan", "(", "obs", ")", "\n", "\n", "# Get the currently satisfied preconditions  ", "\n", "", "", "cur_satisfied_precond", "=", "self", ".", "sense_all_satisfied_preconds", "(", "obs", ")", "\n", "\n", "# Check if we've satisfied preconditions or exceded steps, change modes or current goal", "\n", "if", "self", ".", "plan_mode", "==", "KnowledgePlanner", ".", "PRECOND_MODE", ":", "\n", "# Check that thy're all satisfied", "\n", "            ", "if", "len", "(", "self", ".", "goal_preconds", "-", "cur_satisfied_precond", ")", "==", "0", ":", "\n", "# We shouldn't ever be in this situation because we should have checked if we have already", "\n", "# Satisfied before we start the RL precond", "\n", "                ", "assert", "(", "self", ".", "to_precond_steps", ">", "0", ")", "\n", "\n", "# Send reset signal to rl agent, telling it was successful", "\n", "self", ".", "precond_rl", ".", "reset", "(", "success", "=", "True", ")", "\n", "\n", "# Now update current plan given success", "\n", "self", ".", "update_plan", "(", "obs", ",", "success", "=", "True", ")", "\n", "\n", "# If we've exceeded our alloted steps, replan", "\n", "", "elif", "self", ".", "to_precond_steps", ">=", "self", ".", "max_precond_steps", ":", "\n", "# Sent reset to rl agent, but give failure", "\n", "                ", "self", ".", "precond_rl", ".", "reset", "(", "success", "=", "False", ")", "\n", "\n", "# Update current plan given that we have failed to satisfy the current precondition", "\n", "self", ".", "update_plan", "(", "obs", ",", "success", "=", "False", ")", "\n", "", "elif", "on_reset", ":", "\n", "# Sent reset to rl agent, but give failure", "\n", "                ", "self", ".", "precond_rl", ".", "reset", "(", "success", "=", "False", ")", "\n", "\n", "# Return the list of currently satisfied preconditions", "\n", "", "", "return", "cur_satisfied_precond", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.get_action": [[249, 279], ["knowledgeplanner.KnowledgePlanner.check_obs", "knowledgeplanner.KnowledgePlanner.precond_rl.get_action", "knowledgeplanner.KnowledgePlanner.current_schema.get_rule().get_required_action", "Exception", "knowledgeplanner.KnowledgePlanner.current_schema.get_rule"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.check_obs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.get_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.get_required_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_rule"], ["", "def", "get_action", "(", "self", ",", "obs", ")", ":", "\n", "        ", "action", "=", "None", "\n", "\n", "# First look at current obs and update states", "\n", "satisfied_preconds", "=", "self", ".", "check_obs", "(", "obs", ")", "\n", "\n", "# If we're still in precondition mode, try to satisfy", "\n", "# This is RL land", "\n", "if", "self", ".", "plan_mode", "==", "KnowledgePlanner", ".", "PRECOND_MODE", ":", "\n", "# Plan to current preconditions", "\n", "# Use precondition rl agent policy to decide action", "\n", "            ", "action", "=", "self", ".", "precond_rl", ".", "get_action", "(", "obs", ",", "satisfied_preconds", ")", "\n", "self", ".", "to_precond_steps", "+=", "1", "\n", "# If we're in test mode, just do the test action", "\n", "", "elif", "self", ".", "plan_mode", "==", "KnowledgePlanner", ".", "TEST_MODE", ":", "\n", "# Return the required action    ", "\n", "            ", "action", "=", "self", ".", "current_schema", ".", "get_rule", "(", ")", ".", "get_required_action", "(", ")", "\n", "# If in pass mode, action is pass (no-op)", "\n", "", "elif", "self", ".", "plan_mode", "==", "KnowledgePlanner", ".", "PASS_MODE", ":", "\n", "            ", "action", "=", "'pass'", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Current mode %s is invalid'", "%", "self", ".", "plan_mode", ")", "\n", "\n", "# Save the current obs and action as last_obs and action", "\n", "# Useful for checking post-conditions", "\n", "", "self", ".", "last_obs", "=", "obs", "\n", "self", ".", "last_action", "=", "action", "\n", "\n", "# Return action we want to take", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.update_rl_precond": [[281, 300], ["set", "knowledgeplanner.KnowledgePlanner.current_schema.get_preconditions", "knowledgeplanner.KnowledgePlanner.sense_all_satisfied_preconds", "len", "knowledgeplanner.KnowledgePlanner.precond_rl.init_mdp", "knowledgeplanner.KnowledgePlanner.goal_preconds.add"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.sense_all_satisfied_preconds", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.init_mdp"], ["", "def", "update_rl_precond", "(", "self", ",", "obs", ")", ":", "\n", "# Get the goal preconditions we want to satisfy", "\n", "        ", "self", ".", "goal_preconds", "=", "set", "(", ")", "\n", "for", "precond", "in", "self", ".", "current_schema", ".", "get_preconditions", "(", ")", ":", "\n", "            ", "if", "precond", "[", "0", "]", "!=", "TripletInfo", ".", "REQUIRES_ACTION", ":", "\n", "                ", "self", ".", "goal_preconds", ".", "add", "(", "precond", ")", "\n", "", "", "already_satisfied", "=", "self", ".", "sense_all_satisfied_preconds", "(", "obs", ")", "\n", "\n", "# If no non-action preconditions left, now go into testing mode", "\n", "if", "len", "(", "self", ".", "goal_preconds", "-", "already_satisfied", ")", "==", "0", ":", "\n", "            ", "self", ".", "plan_mode", "=", "KnowledgePlanner", ".", "TEST_MODE", "\n", "# Otherwise we have a precondition to satisfy, current step in plan is go and do that", "\n", "", "else", ":", "\n", "# Set mode and reset step timer", "\n", "            ", "self", ".", "plan_mode", "=", "KnowledgePlanner", ".", "PRECOND_MODE", "\n", "self", ".", "to_precond_steps", "=", "0", "\n", "\n", "# Init precondition mdp to current goal preconditions ", "\n", "self", ".", "precond_rl", ".", "init_mdp", "(", "self", ".", "goal_preconds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.update_plan": [[303, 318], ["knowledgeplanner.KnowledgePlanner.make_plan", "len", "knowledgeplanner.KnowledgePlanner.make_plan", "knowledgeplanner.KnowledgePlanner.schema_plan.pop", "knowledgeplanner.KnowledgePlanner.update_rl_precond"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.make_plan", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.make_plan", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.update_rl_precond"], ["", "", "def", "update_plan", "(", "self", ",", "obs", ",", "success", ")", ":", "\n", "# success=False means a precondition satisfaction step failed", "\n", "# May mean we need a new plan", "\n", "        ", "if", "not", "success", ":", "\n", "            ", "self", ".", "make_plan", "(", "obs", ",", "on_failure", "=", "True", ")", "\n", "return", "\n", "\n", "# If it was successful", "\n", "# If plan is through, make a new plan", "\n", "", "if", "len", "(", "self", ".", "schema_plan", ")", "==", "0", ":", "\n", "            ", "self", ".", "make_plan", "(", "obs", ")", "\n", "# Otherwise, update current schema to the next one in the plan and plan the preconditions", "\n", "", "else", ":", "\n", "            ", "self", ".", "current_schema", "=", "self", ".", "schema_plan", ".", "pop", "(", ")", "\n", "self", ".", "update_rl_precond", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.make_plan": [[321, 438], ["knowledgeplanner.KnowledgePlanner.schema_plan.pop", "knowledgeplanner.KnowledgePlanner.update_rl_precond", "knowledgeplanner.KnowledgePlanner.tried_plans.append", "random.random", "knowledgeplanner.KnowledgePlanner.schema_plan.append", "random.choice.get_preconditions", "knowledgeplanner.KnowledgePlanner.parse_out_inv", "random.choice", "Exception", "final_unsatisfied.append", "len", "len", "len", "Kt.precond_set_equal", "Kp_proposals.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.update_rl_precond", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_preconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.parse_out_inv", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.precond_set_equal"], ["", "", "def", "make_plan", "(", "self", ",", "obs", ",", "on_failure", "=", "False", ")", ":", "\n", "# If we're making a plan after failure, don't try the same thing again (duh)", "\n", "        ", "if", "on_failure", ":", "\n", "            ", "self", ".", "tried_plans", ".", "append", "(", "self", ".", "current_schema", ")", "\n", "\n", "# TODO - we're assuming full grounding, perception and no stochasticity right now", "\n", "# First, decide what knowledge we want to try to verify", "\n", "# 3 options. ", "\n", "# 1 - try to verify a Kp subgraph we haven't tried before", "\n", "# 2 - try to prune necessity for verified sufficient graphs", "\n", "# 3 - try to get a correct sufficient graph given we've tried Kp already and failed", "\n", "# For now, do it randomly", "\n", "\n", "# Get all the proposed schemas from Kp", "\n", "", "Kp_proposals", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "K_model", ".", "proposed_knowledge", ":", "\n", "            ", "for", "effect", "in", "self", ".", "K_model", ".", "proposed_knowledge", ":", "\n", "                ", "Ks_list", "=", "self", ".", "K_model", ".", "proposed_knowledge", "[", "effect", "]", "\n", "\n", "# Only look at Ks we haven't verified yet", "\n", "for", "Ks", "in", "Ks_list", ":", "\n", "                    ", "if", "Ks", ".", "sufficient", "is", "None", ":", "\n", "                        ", "Kp_proposals", ".", "append", "(", "Ks", ")", "\n", "\n", "# While loop, try plans until we come up with a realizable plan", "\n", "", "", "", "", "plan_made", "=", "False", "\n", "failure_count", "=", "0", "\n", "while", "not", "plan_made", ":", "\n", "            ", "failure_count", "+=", "1", "\n", "\n", "# Eventually, we should give up if we can't make a valid plan", "\n", "# This might be because we've tried all the plans", "\n", "if", "failure_count", ">", "1000", ":", "\n", "# If we have failed to much, clear our tried plans and be able to try them again", "\n", "                ", "if", "len", "(", "self", ".", "tried_plans", ")", ">", "0", ":", "\n", "                    ", "self", ".", "tried_plans", "=", "[", "]", "\n", "failure_count", "=", "0", "\n", "continue", "\n", "", "else", ":", "\n", "# TODO - maybe a better thing to do here, but for now, go to pass only mode", "\n", "                    ", "self", ".", "plan_mode", "=", "KnowledgePlanner", ".", "PASS_MODE", "\n", "return", "\n", "\n", "# We're going to start by only doing 1 until we get that working", "\n", "# Later this should choose between these three based on chance and what's actually possible", "\n", "", "", "prob_prop", "=", "random", ".", "random", "(", ")", "\n", "assert", "(", "self", ".", "proposal_prob", "==", "1", ")", "\n", "if", "prob_prop", "<", "self", ".", "proposal_prob", "and", "len", "(", "Kp_proposals", ")", ">", "0", ":", "\n", "# Randomly choose a Ks from Kp", "\n", "                ", "Ks", "=", "random", ".", "choice", "(", "Kp_proposals", ")", "\n", "\n", "# If it's already in tried plans, continue and try again", "\n", "for", "Kt", "in", "self", ".", "tried_plans", ":", "\n", "                    ", "if", "Kt", ".", "precond_set_equal", "(", "Ks", ")", ":", "\n", "                        ", "continue", "\n", "# TODO TODO TODO", "\n", "", "", "", "else", ":", "\n", "# TODO - maybe a more graceful way to do this?", "\n", "#pdb.set_trace()", "\n", "                ", "raise", "Exception", "(", "\"We've verified all the knowledge! Congrats!\"", ")", "\n", "\n", "# Make a schema stack ", "\n", "", "self", ".", "schema_plan", "=", "[", "]", "\n", "self", ".", "schema_plan", ".", "append", "(", "Ks", ")", "\n", "\n", "# Given Ks we want to test, get the preconditions we need", "\n", "final_preconditions", "=", "Ks", ".", "get_preconditions", "(", ")", "\n", "final_preconditions", "=", "[", "p", "for", "p", "in", "final_preconditions", "if", "p", "[", "0", "]", "!=", "TripletInfo", ".", "REQUIRES_ACTION", "]", "\n", "\n", "# Look at obs and see if we can satisfy all of them in the current environment", "\n", "final_unsatisfied", "=", "[", "]", "\n", "raw_grid", "=", "obs", "[", "'grid_obs'", "]", "\n", "flat_list", "=", "[", "item", "for", "sublist", "in", "raw_grid", "for", "item", "in", "sublist", "]", "\n", "flat_list", "=", "[", "item", "for", "sublist", "in", "flat_list", "for", "item", "in", "sublist", "]", "\n", "inventory", "=", "self", ".", "parse_out_inv", "(", "obs", ")", "\n", "for", "precond", "in", "final_preconditions", ":", "\n", "# It should be true that the second part of precondition is an item that exists in grid or inventory", "\n", "# Check if it's in grid", "\n", "                ", "if", "precond", "[", "1", "]", "in", "flat_list", ":", "\n", "                    ", "continue", "\n", "\n", "# Check if it's in inventory", "\n", "", "if", "precond", "[", "1", "]", "in", "inventory", ":", "\n", "                    ", "continue", "\n", "\n", "# If not in either, needs another rule to satisfy, or it's just not satisfiable", "\n", "", "final_unsatisfied", ".", "append", "(", "precond", ")", "\n", "\n", "", "'''# If there are some we cannot satisfy, use crafting graph to see if we can get those recursively\n            # TODO - I'm going to save this for later once we get the depth 1 working\n\n            # Get the crafting graph from knowledge model\n            crafting_graph = self.K_model.crafting_graph\n            \n            # TODO - should make new function here that like, given some initial items and things in the world does a forward propogation\n            # through the the known schemas in crafting graph and returns items we are able construct (and maybe those satisfy other preconditions)\n            # TODO - it needs to somehow deal with some of the end items actually being mutual exlusive somehow. TODO\n            possible_items = crafting_graph.forward(available_items)\n            # Use crafting graph and initial obs to figure out how/if we can satisfy those preconditions\n            # TODO - for now this is just items, but later, this might be switch states and such \n            \n            # TODO - also make sure no subset was in tried_plans\n            '''", "\n", "\n", "if", "len", "(", "final_unsatisfied", ")", ">", "0", ":", "\n", "                ", "continue", "# Try another schema", "\n", "# Will add the other rules we need to do by appending them to self.schema_plan", "\n", "\n", "# Pop the next schema from self.schema_plan            ", "\n", "", "plan_made", "=", "True", "\n", "\n", "# If that succeeded, figure out how to satisfy the current precondition we want to satisfy", "\n", "", "self", ".", "plan_mode", "=", "KnowledgePlanner", ".", "PRECOND_MODE", "\n", "\n", "# Pop current schema and start to execute the precondition satisfaction", "\n", "self", ".", "current_schema", "=", "self", ".", "schema_plan", ".", "pop", "(", ")", "\n", "self", ".", "update_rl_precond", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.load_state_dict": [[523, 530], ["knowledgeplanner.KnowledgePlanner.K_model.load_state_dict", "knowledgeplanner.KnowledgePlanner.precond_rl.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "ckpt", ")", ":", "\n", "# Kp should not have changed", "\n", "        ", "assert", "(", "ckpt", "[", "'Kp'", "]", "==", "self", ".", "Kp", ")", "\n", "\n", "# Load models for knowledge and rl", "\n", "self", ".", "K_model", ".", "load_state_dict", "(", "ckpt", "[", "'K_model'", "]", ")", "\n", "self", ".", "precond_rl", ".", "load_state_dict", "(", "ckpt", "[", "'precond_rl'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgeplanner.KnowledgePlanner.state_dict": [[532, 541], ["knowledgeplanner.KnowledgePlanner.K_model.state_dict", "knowledgeplanner.KnowledgePlanner.precond_rl.state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "ckpt", "=", "{", "}", "\n", "ckpt", "[", "'Kp'", "]", "=", "self", ".", "Kp", "\n", "\n", "# Get things to save", "\n", "ckpt", "[", "'K_model'", "]", "=", "self", ".", "K_model", ".", "state_dict", "(", ")", "\n", "ckpt", "[", "'precond_rl'", "]", "=", "self", ".", "precond_rl", ".", "state_dict", "(", ")", "\n", "\n", "return", "ckpt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.KnowledgeModel.__init__": [[16, 55], ["torch.Module.__init__", "lib.knowledge.CraftingGraph", "lib.knowledge.KnowledgeSubGraph", "knowledgemodel.KnowledgeModel.proposed_knowledge[].append", "Exception", "lib.knowledge.Rule().create_triplet_corresp", "lib.knowledge.Rule"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.create_triplet_corresp"], ["def", "__init__", "(", "self", ",", "opt", ",", "env_opt", ",", "Kp", ",", "item_dict", ")", ":", "\n", "        ", "super", "(", "KnowledgeModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "item_dict", "=", "item_dict", "\n", "self", ".", "max_craft_depth", "=", "env_opt", "[", "'max_craft_depth'", "]", "\n", "self", ".", "mode", "=", "opt", "[", "'mode'", "]", "\n", "\n", "# If in no_learning mode, this module just keeps track of confirmed knowledge and traverses through it", "\n", "if", "self", ".", "mode", "==", "'no_learning'", ":", "\n", "# Confirmed knowledge is every precondition set we've checked bevore", "\n", "            ", "self", ".", "confirmed_knowledge", "=", "{", "}", "\n", "\n", "# Sufficient knowledge is one precondition graph for each effect. Keeps the largest set possible", "\n", "self", ".", "sufficient_knowledge", "=", "{", "}", "\n", "\n", "# Crafting graph is a crafting graph constructed from known sufficient schemas", "\n", "self", ".", "crafting_graph", "=", "CraftingGraph", "(", "[", "]", ",", "self", ".", "item_dict", ",", "self", ".", "max_craft_depth", ")", "\n", "\n", "# Now add proposed knowledge", "\n", "self", ".", "proposed_knowledge", "=", "{", "}", "\n", "for", "proposed_K", "in", "Kp", ":", "\n", "# Make proposed knowledge subgraph", "\n", "                ", "proposed_K", "=", "KnowledgeSubGraph", "(", "Rule", "(", "proposed_K", ")", ".", "create_triplet_corresp", "(", ")", ")", "\n", "\n", "# Add to proposed_knowledge using effect as key to a list", "\n", "if", "proposed_K", ".", "main_effect", "not", "in", "self", ".", "proposed_knowledge", ":", "\n", "                    ", "self", ".", "proposed_knowledge", "[", "proposed_K", ".", "main_effect", "]", "=", "[", "]", "\n", "", "self", ".", "proposed_knowledge", "[", "proposed_K", ".", "main_effect", "]", ".", "append", "(", "proposed_K", ")", "\n", "\n", "# In this mode, the world is still grounded and deterministic, but we also learn graph networks to propose schemas", "\n", "", "", "elif", "self", ".", "mode", "==", "'grounded_deterministic_learned'", ":", "\n", "# Define all of the network modules here, including shared modules", "\n", "# e.g.", "\n", "# self.in_fc = nn.Linear(hid_sz, hid_sz)", "\n", "# TODO", "\n", "# TODO - make this conditional", "\n", "# Also maybe make GCN GGN an optional switch?", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Mode %s for knowledge not implemented\"", "%", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.KnowledgeModel.update_knowledge": [[57, 146], ["knowledgemodel.KnowledgeModel.sufficient_knowledge.keys", "lib.knowledge.CraftingGraph", "set", "lib.knowledge.KnowledgeSubGraph", "lib.knowledge.KnowledgeSubGraph.update_sufficiency", "knowledgemodel.KnowledgeModel.confirmed_knowledge[].append", "K.get_min_suff_rule", "K.get_min_suff_rule.update_rule_name", "min_suff_rules.append", "K.precond_set_equal", "K.precond_set_equal", "K.update_necessity", "lib.knowledge.KnowledgeSubGraph.update_necessity", "K_suff.update_necessity", "K.update_sufficiency", "K.schema_compatible", "knowledgemodel.KnowledgeModel.sufficient_knowledge[].append", "K.get_postconditions", "lib.knowledge.KnowledgeSubGraph.get_postconditions", "pdb.set_trace", "K.get_postconditions", "lib.knowledge.KnowledgeSubGraph.get_postconditions", "K.merge_other"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.update_sufficiency", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_min_suff_rule", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.update_rule_name", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.precond_set_equal", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.precond_set_equal", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.update_necessity", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.update_necessity", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.update_necessity", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.update_sufficiency", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.schema_compatible", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_postconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_postconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_postconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.get_postconditions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.knowledgegraph.KnowledgeSubGraph.merge_other"], ["", "", "def", "update_knowledge", "(", "self", ",", "main_effect_satisfied", ",", "test_intended", ",", "post_conditions_satisfied", ",", "all_satisfied_precond", ")", ":", "\n", "# TODO - update this when we make the learned version of this", "\n", "        ", "assert", "(", "self", ".", "mode", "==", "'no_learning'", ")", "\n", "assert", "(", "test_intended", "is", "not", "None", "or", "main_effect_satisfied", "is", "not", "None", ")", "\n", "\n", "# Get the effect names so we can find them in our knowledge      ", "\n", "if", "main_effect_satisfied", "is", "not", "None", "and", "test_intended", "is", "not", "None", "and", "main_effect_satisfied", "!=", "test_intended", ":", "\n", "            ", "effects", "=", "[", "main_effect_satisfied", ",", "test_intended", "]", "\n", "", "elif", "main_effect_satisfied", "is", "not", "None", ":", "\n", "            ", "effects", "=", "[", "main_effect_satisfied", "]", "\n", "", "else", ":", "\n", "            ", "effects", "=", "[", "test_intended", "]", "\n", "\n", "# Iterate through all relevant effects", "\n", "", "for", "effect", "in", "effects", ":", "\n", "# Make a temporary knowledge subgraph of what we actually tested and any post conditions we actually satisfied", "\n", "            ", "precondition_triplets", "=", "[", "(", "\"K_tested\"", ",", "precond", "[", "0", "]", ",", "precond", "[", "1", "]", ")", "for", "precond", "in", "all_satisfied_precond", "]", "\n", "postcondition_triplets", "=", "[", "(", "\"K_tested\"", ",", "postcond", "[", "0", "]", ",", "postcond", "[", "1", "]", ")", "for", "postcond", "in", "post_conditions_satisfied", "]", "\n", "new_triplets", "=", "set", "(", "precondition_triplets", "+", "postcondition_triplets", ")", "\n", "K_tested", "=", "KnowledgeSubGraph", "(", "new_triplets", ")", "\n", "K_tested", ".", "update_sufficiency", "(", "post_conditions_satisfied", ")", "\n", "\n", "# If it's exactly in proposed_knowledge, replace it", "\n", "# Now the graph it points to will have sufficient not None (thus tested)", "\n", "if", "effect", "in", "self", ".", "proposed_knowledge", ":", "\n", "                ", "for", "K", "in", "self", ".", "proposed_knowledge", "[", "effect", "]", ":", "\n", "# If it's the same graph, set proposed_knowledge", "\n", "                    ", "if", "K", ".", "precond_set_equal", "(", "K_tested", ")", ":", "\n", "                        ", "K", ".", "update_sufficiency", "(", "post_conditions_satisfied", ")", "\n", "\n", "# Now try to combine it somehow with already confirmed knowledgemodel", "\n", "", "", "", "if", "effect", "not", "in", "self", ".", "confirmed_knowledge", ":", "\n", "                ", "self", ".", "confirmed_knowledge", "[", "effect", "]", "=", "[", "K_tested", "]", "\n", "", "else", ":", "\n", "# Check total equality case", "\n", "                ", "for", "K", "in", "self", ".", "confirmed_knowledge", "[", "effect", "]", ":", "\n", "# Check and eliminate total equality case                 ", "\n", "                    ", "if", "K", ".", "precond_set_equal", "(", "K_tested", ")", ":", "\n", "# If they're identical, in deterministic fully grounded case,", "\n", "# the outcome better be the same. Nothing changes", "\n", "# TODO - this changes in non-deterministic case", "\n", "                        ", "assert", "(", "K", ".", "sufficient", "==", "K_tested", ".", "sufficient", ")", "\n", "# TODO - need to assert that the postcondition sets are the same ", "\n", "# (this might change if we end up with postconditions that are not caused by the agent)", "\n", "if", "K", ".", "get_postconditions", "(", ")", "!=", "K_tested", ".", "get_postconditions", "(", ")", ":", "\n", "                            ", "pdb", ".", "set_trace", "(", ")", "\n", "", "assert", "(", "K", ".", "get_postconditions", "(", ")", "==", "K_tested", ".", "get_postconditions", "(", ")", ")", "\n", "return", "\n", "\n", "# Update necessity between this graph and all the other graphs", "\n", "", "K", ".", "update_necessity", "(", "K_tested", ")", "\n", "K_tested", ".", "update_necessity", "(", "K", ")", "\n", "\n", "# Add K_tested to the confirmed knowledge", "\n", "", "self", ".", "confirmed_knowledge", "[", "effect", "]", ".", "append", "(", "K_tested", ")", "\n", "\n", "# Now update sufficient knowledge", "\n", "# Only do this when the knowledge is sufficient and update only on the right effect", "\n", "", "if", "K_tested", ".", "sufficient", "and", "K_tested", ".", "main_effect", "==", "effect", ":", "\n", "# This is first successful graph, so add it as the sufficient knowledge", "\n", "                ", "if", "effect", "not", "in", "self", ".", "sufficient_knowledge", ":", "\n", "                    ", "self", ".", "sufficient_knowledge", "[", "effect", "]", "=", "[", "K_tested", "]", "\n", "", "else", ":", "\n", "# Go through each sufficient schema and try to merge it", "\n", "                    ", "merged", "=", "False", "\n", "for", "K", "in", "self", ".", "sufficient_knowledge", "[", "effect", "]", ":", "\n", "                        ", "if", "K", ".", "schema_compatible", "(", "K_tested", ")", ":", "\n", "                            ", "K", ".", "merge_other", "(", "K_tested", ")", "\n", "\n", "# If the new schema is not compatible with any other, add it as a new sufficient knowledge rule", "\n", "", "", "if", "not", "merged", ":", "\n", "                        ", "self", ".", "sufficient_knowledge", "[", "effect", "]", ".", "append", "(", "K_tested", ")", "\n", "\n", "# Go back through the confirmed knowledge list again and update our sufficient knowledge", "\n", "", "", "", "", "if", "effect", "in", "self", ".", "sufficient_knowledge", ":", "\n", "            ", "for", "K", "in", "self", ".", "confirmed_knowledge", "[", "effect", "]", ":", "\n", "                ", "for", "K_suff", "in", "self", ".", "sufficient_knowledge", "[", "effect", "]", ":", "\n", "                    ", "K_suff", ".", "update_necessity", "(", "K", ")", "\n", "\n", "# Update crafting graph", "\n", "", "", "", "min_suff_rules", "=", "[", "]", "\n", "ind", "=", "1", "\n", "for", "effect", "in", "self", ".", "sufficient_knowledge", ".", "keys", "(", ")", ":", "\n", "            ", "for", "K", "in", "self", ".", "sufficient_knowledge", "[", "effect", "]", ":", "\n", "                ", "min_rule", "=", "K", ".", "get_min_suff_rule", "(", ")", "\n", "min_rule", ".", "update_rule_name", "(", "'Rule%d'", "%", "ind", ")", "\n", "ind", "+=", "1", "\n", "min_suff_rules", ".", "append", "(", "min_rule", ")", "\n", "", "", "self", ".", "crafting_graph", "=", "CraftingGraph", "(", "min_suff_rules", ",", "self", ".", "item_dict", ",", "self", ".", "max_craft_depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.KnowledgeModel.forward": [[148, 150], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "states", ",", "masks", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.KnowledgeModel.load_state_dict": [[164, 174], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "mode", "==", "'no_learning'", ")", "\n", "\n", "# Load the saved/tried knowledge", "\n", "ckpt", "=", "{", "}", "\n", "ckpt", "[", "'confirmed_knowledge'", "]", "=", "self", ".", "confirmed_knowledge", "\n", "ckpt", "[", "'sufficient_knowledge'", "]", "=", "self", ".", "sufficient_knowledge", "\n", "ckpt", "[", "'proposed_knowledge'", "]", "=", "self", ".", "proposed_knowledge", "\n", "ckpt", "[", "'crafting_graph'", "]", "=", "self", ".", "crafting_graph", "\n", "return", "ckpt", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.SufficiencyNetwork.__init__": [[179, 181], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "common_modules", "=", "None", ")", ":", "\n", "        ", "super", "(", "SufficiencyNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.SufficiencyNetwork.forward": [[185, 190], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# Takes in a graph-structured input which is the schema we want to test", "\n", "# Outputs a sigmoid 0/1 sufficiency prediction", "\n", "# Should be able to do this in batch", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.NecessityNetwork.__init__": [[195, 197], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "common_modules", "=", "None", ")", ":", "\n", "        ", "super", "(", "NecessityNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.NecessityNetwork.forward": [[201, 205], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# Takes in a graph-structured input which is the schema we want to test", "\n", "# Outputs sigmoid 0/1 for each node and/or edge for whether that precondition is necessary", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.MakeSufficientNetwork.__init__": [[211, 213], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "common_modules", "=", "None", ")", ":", "\n", "        ", "super", "(", "MakeSufficientNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.MakeSufficientNetwork.forward": [[217, 222], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# Takes in a graph-structured input which is the schema we want to make right", "\n", "# Outputs a sigmoid 0/1 on each edge for preconditions we want to eliminate", "\n", "# And a hidden state used by the edge comparitor network", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.EdgeComparitorNetwork.__init__": [[228, 230], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "common_modules", "=", "None", ")", ":", "\n", "        ", "super", "(", "EdgeComparitorNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.knowledgemodel.EdgeComparitorNetwork.forward": [[234, 238], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# Takes in an edge we want to maybe add and the hidden state of the make sufficient network", "\n", "# Outputs a sigmoid 0/1 for whether we want to add that edge", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.__init__": [[25, 94], ["object.__init__", "re.compile", "re.sub", "f.readline.split", "gym.spaces.Discrete", "lib.rl.storage.RolloutStorage", "Exception", "open", "f.readline", "len", "len", "lib.rl.model.DQNPolicy", "lib.DQN", "lib.rl.model.Policy", "os.path.join", "len", "len", "lib.A2C_ACKTR", "lib.PPO", "lib.A2C_ACKTR"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["def", "__init__", "(", "self", ",", "rl_opt", ",", "env_opt", ",", "game_bounds", ",", "possible_actions", ")", ":", "\n", "        ", "super", "(", "PreconditionRLModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Initialize arguments and other values", "\n", "self", ".", "use_gae", "=", "rl_opt", "[", "'alg'", "]", "[", "'use_gae'", "]", "\n", "self", ".", "tau", "=", "rl_opt", "[", "'alg'", "]", "[", "'gae_tau'", "]", "\n", "self", ".", "gamma", "=", "rl_opt", "[", "'env'", "]", "[", "'gamma'", "]", "\n", "self", ".", "num_steps_update", "=", "rl_opt", "[", "'alg'", "]", "[", "'num_steps'", "]", "\n", "self", ".", "goal_precond_reward", "=", "rl_opt", "[", "'env'", "]", "[", "'goal_precond_reward'", "]", "\n", "self", ".", "irrelevant_precond_reward", "=", "rl_opt", "[", "'env'", "]", "[", "'irrelevant_precond_reward'", "]", "\n", "self", ".", "finish_reward", "=", "rl_opt", "[", "'env'", "]", "[", "'finish_reward'", "]", "\n", "self", ".", "possible_actions", "=", "possible_actions", "\n", "self", ".", "total_steps", "=", "0", "\n", "self", ".", "total_episodes", "=", "0", "\n", "\n", "# Right now, expecting we have just one process", "\n", "# Env is outside of this module, essentially", "\n", "if", "rl_opt", "[", "'alg'", "]", "[", "'num_processes'", "]", "!=", "1", ":", "\n", "            ", "raise", "Exception", "(", "\"Right now we only have this happening online, so need to do other stuff for this to work for A2C for instance\"", ")", "\n", "\n", "# Get things in state that we put in obs as one-hot", "\n", "", "pattern", "=", "re", ".", "compile", "(", "r'\\s+'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "env_opt", "[", "'knowledge_root'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'obs_list'", "]", ")", ")", "as", "f", ":", "\n", "            ", "line", "=", "f", ".", "readline", "(", ")", "\n", "", "line", "=", "re", ".", "sub", "(", "pattern", ",", "''", ",", "line", ")", "\n", "self", ".", "constant_list", "=", "line", ".", "split", "(", "','", ")", "\n", "\n", "# Calculate input size", "\n", "# TODO - should we add inventory to state?", "\n", "# Input layer for each precondition type (except action)", "\n", "num_layers", "=", "len", "(", "self", ".", "constant_list", ")", "+", "len", "(", "TripletInfo", ".", "PRE_CONDITION_TYPES", ")", "-", "1", "\n", "self", ".", "obs_shape", "=", "(", "num_layers", ",", "game_bounds", "[", "0", "]", ",", "game_bounds", "[", "1", "]", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "len", "(", "possible_actions", ")", ")", "\n", "# TODO - right now allowing all actions here. Might make sense to limit this at some point to non-crafting and non-pass actions", "\n", "\n", "# Assume observation space is 3D", "\n", "assert", "(", "len", "(", "self", ".", "obs_shape", ")", "==", "3", ")", "\n", "\n", "# Make actor_critic policy agent", "\n", "if", "rl_opt", "[", "'alg'", "]", "[", "'alg_name'", "]", "==", "'dqn'", ":", "\n", "            ", "self", ".", "policy", "=", "DQNPolicy", "(", "self", ".", "obs_shape", ",", "self", ".", "action_space", ",", "rl_opt", "[", "'modle'", "]", ")", "\n", "self", ".", "agent", "=", "algo", ".", "DQN", "(", "self", ".", "policy", ",", "rl_opt", "[", "'env'", "]", "[", "'gamma'", "]", ",", "batch_size", "=", "rl_opt", "[", "'alg'", "]", "[", "'batch_size'", "]", ",", "target_update", "=", "rl_opt", "[", "'alg'", "]", "[", "'target_update'", "]", ",", "\n", "mem_capacity", "=", "rl_opt", "[", "'alg'", "]", "[", "'mem_capacity'", "]", ",", "lr", "=", "rl_opt", "[", "'optim'", "]", "[", "'lr'", "]", ",", "eps", "=", "rl_opt", "[", "'optim'", "]", "[", "'eps'", "]", ",", "\n", "max_grad_norm", "=", "rl_opt", "[", "'optim'", "]", "[", "'max_grad_norm'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "policy", "=", "Policy", "(", "self", ".", "obs_shape", ",", "self", ".", "action_space", ",", "\n", "base_kwargs", "=", "{", "'recurrent'", ":", "rl_opt", "[", "'model'", "]", "[", "'recurrent_policy'", "]", "}", ")", "\n", "if", "rl_opt", "[", "'alg'", "]", "[", "'alg_name'", "]", "==", "'a2c'", ":", "\n", "                ", "self", ".", "agent", "=", "algo", ".", "A2C_ACKTR", "(", "self", ".", "policy", ",", "rl_opt", "[", "'alg'", "]", "[", "'value_loss_coef'", "]", ",", "\n", "rl_opt", "[", "'alg'", "]", "[", "'entropy_coef'", "]", ",", "lr", "=", "rl_opt", "[", "'alg'", "]", "[", "'lr'", "]", ",", "\n", "eps", "=", "rl_opt", "[", "'optim'", "]", "[", "'eps'", "]", ",", "alpha", "=", "rl_opt", "[", "'optim'", "]", "[", "'alpha'", "]", ",", "\n", "max_grad_norm", "=", "rl_opt", "[", "'optim'", "]", "[", "'max_grad_norm'", "]", ")", "\n", "", "elif", "rl_opt", "[", "'alg'", "]", "[", "'alg_name'", "]", "==", "'ppo'", ":", "\n", "                ", "self", ".", "agent", "=", "algo", ".", "PPO", "(", "self", ".", "policy", ",", "rl_opt", "[", "'alg'", "]", "[", "'clip_param'", "]", ",", "rl_opt", "[", "'alg'", "]", "[", "'ppo_epoch'", "]", ",", "\n", "rl_opt", "[", "'alg'", "]", "[", "'num_mini_batch'", "]", ",", "rl_opt", "[", "'alg'", "]", "[", "'value_loss_coef'", "]", ",", "rl_opt", "[", "'alg'", "]", "[", "'entropy_coef'", "]", ",", "\n", "lr", "=", "rl_opt", "[", "'optim'", "]", "[", "'lr'", "]", ",", "eps", "=", "rl_opt", "[", "'optim'", "]", "[", "'eps'", "]", ",", "\n", "max_grad_norm", "=", "rl_opt", "[", "'optim'", "]", "[", "'max_grad_norm'", "]", ")", "\n", "", "elif", "rl_opt", "[", "'alg'", "]", "[", "'alg_name'", "]", "==", "'acktr'", ":", "\n", "                ", "self", ".", "agent", "=", "algo", ".", "A2C_ACKTR", "(", "self", ".", "policy", ",", "rl_opt", "[", "'alg'", "]", "[", "'value_loss_coef'", "]", ",", "\n", "rl_opt", "[", "'alg'", "]", "[", "'entropy_coef'", "]", ",", "acktr", "=", "True", ")", "\n", "\n", "# Make and initialize rollouts", "\n", "", "", "self", ".", "rollouts", "=", "RolloutStorage", "(", "self", ".", "num_steps_update", ",", "rl_opt", "[", "'alg'", "]", "[", "'num_processes'", "]", ",", "\n", "self", ".", "obs_shape", ",", "self", ".", "action_space", ",", "\n", "self", ".", "policy", ".", "recurrent_hidden_state_size", ")", "\n", "\n", "# Initialize (to None) the current goal for the RL agent", "\n", "self", ".", "goal_preconds", "=", "None", "\n", "self", ".", "last_preconds", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.reset": [[97, 111], ["float"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "success", ")", ":", "\n", "# Set last reward to be the success", "\n", "# When get_action is next called, the last reward will set to whether this was successful", "\n", "        ", "self", ".", "last_reward", "=", "self", ".", "finish_reward", "*", "float", "(", "success", ")", "\n", "\n", "# self.last_done is [True] since last things we recorded ended the episode", "\n", "self", ".", "last_done", "=", "[", "[", "True", "]", "]", "\n", "\n", "# Update episode counter", "\n", "self", ".", "total_episodes", "+=", "1", "\n", "\n", "# Reset goals and preconds to None", "\n", "self", ".", "goal_preconds", "=", "None", "\n", "self", ".", "last_preconds", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.init_mdp": [[113, 117], ["None"], "methods", ["None"], ["", "def", "init_mdp", "(", "self", ",", "goal_preconditions", ")", ":", "\n", "# Save the goal preconditions and the currently satisfied preconditions", "\n", "        ", "self", ".", "goal_preconds", "=", "goal_preconditions", "\n", "self", ".", "last_preconds", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.get_reward": [[119, 156], ["float", "len"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "last_preconds", ",", "cur_preconds", ")", ":", "\n", "# Init, get finished", "\n", "        ", "reward", "=", "float", "(", "0", ")", "\n", "finished", "=", "len", "(", "self", ".", "goal_preconds", "-", "cur_preconds", ")", "==", "0", "\n", "\n", "# Get set differences", "\n", "new_preconds", "=", "cur_preconds", "-", "last_preconds", "\n", "removed_preconds", "=", "last_preconds", "-", "cur_preconds", "\n", "\n", "for", "precond", "in", "new_preconds", ":", "\n", "# Ignore action precondition", "\n", "            ", "if", "precond", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_ACTION", ":", "\n", "                ", "continue", "\n", "\n", "# If we added a goal precondition, give a small positive reward here", "\n", "", "if", "precond", "in", "self", ".", "goal_preconditions", ":", "\n", "                ", "reward", "+=", "self", ".", "goal_precond_reward", "\n", "\n", "# If we added an irrelevant precondition, give a small negative reward here", "\n", "", "else", ":", "\n", "                ", "reward", "-=", "self", ".", "irrelevant_precond_reward", "\n", "\n", "", "", "for", "precond", "in", "removed_preconds", ":", "\n", "# Ignore action precondition", "\n", "            ", "if", "precond", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_ACTION", ":", "\n", "                ", "continue", "\n", "\n", "# If we removed a goal precondition, give a small negative reward here", "\n", "", "if", "precond", "in", "self", ".", "goal_preconditions", ":", "\n", "                ", "reward", "-=", "self", ".", "goal_preconditions", "\n", "\n", "# If we removed an irrelevant precondition, give a small positive reward here", "\n", "", "else", ":", "\n", "                ", "reward", "+=", "self", ".", "irrelevant_precond_reward", "\n", "\n", "# Return", "\n", "", "", "return", "reward", ",", "finished", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.get_action": [[158, 212], ["preconditionrl.PreconditionRLModule.get_obs_rep", "action.item", "preconditionrl.PreconditionRLModule.get_reward"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.get_obs_rep", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.get_reward"], ["", "def", "get_action", "(", "self", ",", "raw_obs_info", ",", "cur_satisfied_preconds", ")", ":", "\n", "# Get obs for network input", "\n", "        ", "obs", "=", "self", ".", "get_obs_rep", "(", "raw_obs_info", ",", "cur_satisfied_preconds", ")", "\n", "\n", "# If first step, last reward was set in reset", "\n", "if", "self", ".", "last_preconds", "is", "not", "None", ":", "\n", "# Get the reward and end condition from last time step, unless we're at a reset", "\n", "            ", "self", ".", "last_reward", ",", "finished", "=", "get_reward", "(", "self", ".", "last_preconds", ",", "cur_satisfied_preconds", ")", "\n", "\n", "# Finished should never be true here (should have checked this outside)", "\n", "assert", "(", "not", "finished", ")", "\n", "self", ".", "last_done", "=", "[", "[", "finished", "]", "]", "\n", "\n", "# At first ever step, need to init rollouts, and can't do insert for rollouts yet", "\n", "", "if", "self", ".", "total_steps", "==", "0", ":", "\n", "            ", "self", ".", "rollouts", ".", "obs", "[", "0", "]", ".", "copy_", "(", "obs", ")", "\n", "", "else", ":", "\n", "# First, do update from last step", "\n", "            ", "reward", "=", "torch", ".", "FloatTensor", "(", "[", "[", "self", ".", "last_reward", "]", "]", ")", "# TODO - is this conversion correct?", "\n", "masks", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0.0", "]", "if", "done_", "else", "[", "1.0", "]", "\n", "for", "done_", "in", "self", ".", "last_done", "]", ")", "\n", "rollouts", ".", "insert", "(", "obs", ",", "self", ".", "last_recurrent_hidden_states", ",", "self", ".", "last_action", ",", "self", ".", "last_action_log_prob", ",", "self", ".", "last_value", ",", "reward", ",", "masks", ")", "\n", "self", ".", "total_steps", "+=", "1", "\n", "\n", "# If we've filled up the rollouts, do an update", "\n", "if", "self", ".", "total_steps", "%", "self", ".", "num_steps_update", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "next_value", "=", "self", ".", "policy", ".", "get_value", "(", "rollouts", ".", "obs", "[", "-", "1", "]", ",", "\n", "rollouts", ".", "recurrent_hidden_states", "[", "-", "1", "]", ",", "\n", "rollouts", ".", "masks", "[", "-", "1", "]", ")", ".", "detach", "(", ")", "\n", "", "rollouts", ".", "compute_returns", "(", "next_value", ",", "args", ".", "use_gae", ",", "args", ".", "gamma", ",", "args", ".", "tau", ")", "\n", "value_loss", ",", "action_loss", ",", "dist_entropy", "=", "self", ".", "agent", ".", "update", "(", "rollouts", ")", "\n", "rollouts", ".", "after_update", "(", ")", "\n", "# TODO - log the losses somewhere probably?", "\n", "\n", "# Sample actions", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# TODO - I could have an off by one on steps here, the logic is kind of subtle. It seems right", "\n", "            ", "step", "=", "self", ".", "total_steps", "%", "self", ".", "num_steps_update", "\n", "value", ",", "action", ",", "action_log_prob", ",", "recurrent_hidden_states", "=", "self", ".", "policy", ".", "act", "(", "\n", "self", ".", "rollouts", ".", "obs", "[", "step", "]", ",", "\n", "self", ".", "rollouts", ".", "recurrent_hidden_states", "[", "step", "]", ",", "\n", "self", ".", "rollouts", ".", "masks", "[", "step", "]", ")", "\n", "self", ".", "last_value", "=", "value", "\n", "self", ".", "last_action", "=", "action", "\n", "self", ".", "last_action_log_prob", "=", "action_log_prob", "\n", "self", ".", "last_recurrent_hidden_states", "=", "recurrent_hidden_states", "\n", "\n", "# TODO - here we assume no parallel again", "\n", "", "action_ind", "=", "action", ".", "item", "(", ")", "\n", "action", "=", "self", ".", "possible_actions", "[", "action_ind", "]", "\n", "\n", "# Return action", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.get_obs_rep": [[216, 258], ["numpy.zeros", "enumerate", "torch.from_numpy().float", "vocab.index", "vocab.index", "torch.from_numpy", "lib.knowledge.TripletInfo.PRE_CONDITION_TYPES.index", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.index", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.index", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.index"], ["", "def", "get_obs_rep", "(", "self", ",", "obs", ",", "cur_preconds", ")", ":", "\n", "        ", "grid_obs", "=", "obs", "[", "'grid_obs'", "]", "\n", "side_info", "=", "obs", "[", "'side_info'", "]", "\n", "one_hot", "=", "obs", "[", "'grid_one_hot'", "]", "\n", "one_hot_side", "=", "obs", "[", "'side_one_hot'", "]", "\n", "vocab", "=", "obs", "[", "'vocab'", "]", "\n", "\n", "# Create initial input (all zeros)", "\n", "obs", "=", "np", ".", "zeros", "(", "self", ".", "obs_shape", ")", "\n", "\n", "# Lets say we're given a list of the items in the world we actually care about always", "\n", "# Should include things like Agent or ResourceFont, CraftingItem, CraftingContainer, Block and Water", "\n", "obs_onehots", "=", "[", "]", "\n", "for", "ind", ",", "item", "in", "enumerate", "(", "self", ".", "constant_list", ")", ":", "\n", "            ", "item_id", "=", "vocab", ".", "index", "(", "item", ")", "\n", "item_onehot", "=", "one_hot", "[", ":", ",", ":", ",", "item_id", "]", "\n", "obs", "[", "ind", "]", "=", "item_onehot", "\n", "\n", "# Go through each precondition we have yet to satisfy", "\n", "# Add the concept item locations ", "\n", "", "assert", "(", "TripletInfo", ".", "PRE_CONDITION_TYPES", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_ACTION", ")", "\n", "unsatisfied_preconds", "=", "self", ".", "goal_preconds", "-", "cur_preconds", "\n", "for", "precond", "in", "unsatisfied_preconds", ":", "\n", "# Should never have action here", "\n", "            ", "precond_type", "=", "precond", "[", "0", "]", "\n", "assert", "(", "precond_type", "!=", "TripletInfo", ".", "REQUIRES_ACTION", ")", "\n", "\n", "# Get the index where we put this precondition", "\n", "type_index", "=", "TripletInfo", ".", "PRE_CONDITION_TYPES", ".", "index", "(", "precond_type", ")", "+", "len", "(", "self", ".", "constant_list", ")", "-", "1", "\n", "\n", "# Get the location of all the relevant items and add to observation", "\n", "concept", "=", "precond", "[", "1", "]", "\n", "item_id", "=", "vocab", ".", "index", "(", "concept", ")", "\n", "item_onehot", "=", "one_hot", "[", ":", ",", ":", ",", "item_id", "]", "\n", "obs", "[", "type_index", "]", "+=", "item_onehot", "\n", "\n", "# Convert to pytorch", "\n", "", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", "\n", "\n", "# TODO - more processing?", "\n", "# Cuda here maybe?", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict": [[260, 263], ["preconditionrl.PreconditionRLModule.agent.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "ckpt", ")", ":", "\n", "        ", "self", ".", "total_episodes", "=", "ckpt", "[", "'total_episodes'", "]", "\n", "self", ".", "agent", ".", "load_state_dict", "(", "ckpt", "[", "'agent'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.state_dict": [[265, 270], ["preconditionrl.PreconditionRLModule.agent.state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "ckpt", "=", "{", "}", "\n", "ckpt", "[", "'total_episodes'", "]", "=", "self", ".", "total_episodes", "\n", "ckpt", "[", "'agent'", "]", "=", "self", ".", "agent", ".", "state_dict", "(", ")", "\n", "return", "ckpt", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase.termcolor.colored": [[89, 119], ["os.getenv"], "function", ["None"], ["def", "colored", "(", "text", ",", "color", "=", "None", ",", "on_color", "=", "None", ",", "attrs", "=", "None", ")", ":", "\n", "    ", "\"\"\"Colorize text.\n\n    Available text colors:\n        red, green, yellow, blue, magenta, cyan, white.\n\n    Available text highlights:\n        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white.\n\n    Available attributes:\n        bold, dark, underline, blink, reverse, concealed.\n\n    Example:\n        colored('Hello, World!', 'red', 'on_grey', ['blue', 'blink'])\n        colored('Hello, World!', 'green')\n    \"\"\"", "\n", "if", "os", ".", "getenv", "(", "'ANSI_COLORS_DISABLED'", ")", "is", "None", ":", "\n", "        ", "fmt_str", "=", "'\\033[%dm%s'", "\n", "if", "color", "is", "not", "None", ":", "\n", "            ", "text", "=", "fmt_str", "%", "(", "COLORS", "[", "color", "]", ",", "text", ")", "\n", "\n", "", "if", "on_color", "is", "not", "None", ":", "\n", "            ", "text", "=", "fmt_str", "%", "(", "HIGHLIGHTS", "[", "on_color", "]", ",", "text", ")", "\n", "\n", "", "if", "attrs", "is", "not", "None", ":", "\n", "            ", "for", "attr", "in", "attrs", ":", "\n", "                ", "text", "=", "fmt_str", "%", "(", "ATTRIBUTES", "[", "attr", "]", ",", "text", ")", "\n", "\n", "", "", "text", "+=", "RESET", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase.termcolor.cprint": [[121, 128], ["print", "termcolor.colored"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase.termcolor.colored"], ["", "def", "cprint", "(", "text", ",", "color", "=", "None", ",", "on_color", "=", "None", ",", "attrs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Print colorize text.\n\n    It accepts arguments of print function.\n    \"\"\"", "\n", "\n", "print", "(", "(", "colored", "(", "text", ",", "color", ",", "on_color", ",", "attrs", ")", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get": [[65, 68], ["None"], "methods", ["None"], ["def", "get", "(", "self", ")", ":", "\n", "        ", "'''Get current value of curriculum'''", "\n", "return", "self", ".", "current", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.make_easier": [[69, 72], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "make_easier", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.make_harder": [[73, 76], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "make_harder", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.make_hardest": [[77, 80], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "make_hardest", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.make_easiest": [[81, 84], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "make_easiest", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.NumericCurriculum.__init__": [[97, 106], ["callable"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "init", ",", "min", ",", "max", ",", "step", "=", "1", ")", ":", "\n", "        ", "assert", "min", "<=", "init", "<=", "max", ",", "\"NumericCurriculum must be initialized\"", "\"between min and max\"", "\n", "self", ".", "min", "=", "min", "\n", "self", ".", "max", "=", "max", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "current", "=", "init", "\n", "if", "not", "callable", "(", "self", ".", "step", ")", ":", "\n", "            ", "self", ".", "step", "=", "lambda", ":", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.NumericCurriculum.make_easier": [[107, 109], ["max", "curriculum.NumericCurriculum.step"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step"], ["", "", "def", "make_easier", "(", "self", ")", ":", "\n", "        ", "self", ".", "current", "=", "max", "(", "self", ".", "current", "-", "self", ".", "step", "(", ")", ",", "self", ".", "min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.NumericCurriculum.make_harder": [[110, 112], ["min", "curriculum.NumericCurriculum.step"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step"], ["", "def", "make_harder", "(", "self", ")", ":", "\n", "        ", "self", ".", "current", "=", "min", "(", "self", ".", "current", "+", "self", ".", "step", "(", ")", ",", "self", ".", "max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.NumericCurriculum.make_easiest": [[113, 115], ["None"], "methods", ["None"], ["", "def", "make_easiest", "(", "self", ")", ":", "\n", "        ", "self", ".", "current", "=", "self", ".", "min", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.NumericCurriculum.make_hardest": [[116, 118], ["None"], "methods", ["None"], ["", "def", "make_hardest", "(", "self", ")", ":", "\n", "        ", "self", ".", "current", "=", "self", ".", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.__init__": [[135, 142], ["list", "list", "list", "zip"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "init", ",", "min", ",", "max", ")", ":", "\n", "        ", "self", ".", "min", "=", "list", "(", "min", ")", "\n", "self", ".", "max", "=", "list", "(", "max", ")", "\n", "self", ".", "current", "=", "list", "(", "init", ")", "\n", "for", "init_v", ",", "max_v", ",", "min_v", "in", "zip", "(", "init", ",", "max", ",", "min", ")", ":", "\n", "            ", "assert", "min_v", "<=", "init_v", "<=", "max_v", ",", "\"Initial sizes must be between min and max in MapSizeCurriculum\"", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.__update": [[143, 160], ["random.choice", "min", "max", "range", "min", "max", "min", "max"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice"], ["", "", "def", "__update", "(", "self", ",", "delta", ")", ":", "\n", "        ", "ind", "=", "random", ".", "choice", "(", "range", "(", "4", ")", ")", "\n", "self", ".", "current", "[", "ind", "]", "=", "self", ".", "current", "[", "ind", "]", "+", "delta", "\n", "\n", "# Enforce that current never moves above the min and max", "\n", "self", ".", "current", "[", "ind", "]", "=", "min", "(", "self", ".", "current", "[", "ind", "]", ",", "self", ".", "max", "[", "ind", "]", ")", "\n", "self", ".", "current", "[", "ind", "]", "=", "max", "(", "self", ".", "current", "[", "ind", "]", ",", "self", ".", "min", "[", "ind", "]", ")", "\n", "\n", "# Enforce that min never moves above max and vice versa", "\n", "if", "ind", "==", "0", ":", "\n", "            ", "self", ".", "current", "[", "0", "]", "=", "min", "(", "self", ".", "current", "[", "0", "]", ",", "self", ".", "current", "[", "1", "]", ")", "\n", "", "if", "ind", "==", "1", ":", "\n", "            ", "self", ".", "current", "[", "1", "]", "=", "max", "(", "self", ".", "current", "[", "0", "]", ",", "self", ".", "current", "[", "1", "]", ")", "\n", "", "if", "ind", "==", "2", ":", "\n", "            ", "self", ".", "current", "[", "2", "]", "=", "min", "(", "self", ".", "current", "[", "2", "]", ",", "self", ".", "current", "[", "3", "]", ")", "\n", "", "if", "ind", "==", "3", ":", "\n", "            ", "self", ".", "current", "[", "3", "]", "=", "max", "(", "self", ".", "current", "[", "2", "]", ",", "self", ".", "current", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.make_easier": [[161, 163], ["curriculum.MapSizeCurriculum.__update"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.__update"], ["", "", "def", "make_easier", "(", "self", ")", ":", "\n", "        ", "self", ".", "__update", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.make_harder": [[164, 166], ["curriculum.MapSizeCurriculum.__update"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.__update"], ["", "def", "make_harder", "(", "self", ")", ":", "\n", "        ", "self", ".", "__update", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.make_easiest": [[167, 169], ["copy.copy"], "methods", ["None"], ["", "def", "make_easiest", "(", "self", ")", ":", "\n", "        ", "self", ".", "current", "=", "copy", ".", "copy", "(", "self", ".", "min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.make_hardest": [[170, 172], ["copy.copy"], "methods", ["None"], ["", "def", "make_hardest", "(", "self", ")", ":", "\n", "        ", "self", ".", "current", "=", "copy", ".", "copy", "(", "self", ".", "max", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumWrappedGame": [[12, 57], ["curriculums.items", "cls", "val.get", "random.choice().make_easier", "random.choice().make_harder", "max_bounds", "curriculums.items", "orig_reset", "setattr", "cur.make_easiest", "cur.make_hardest", "setattr", "types.MethodType", "random.choice", "random.choice", "val.get", "list", "list", "curriculums.values", "curriculums.values"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.make_easier", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.make_harder", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.make_easiest", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.MapSizeCurriculum.make_hardest", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get"], ["def", "CurriculumWrappedGame", "(", "cls", ",", "curriculums", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "'''Introduces a curriculum by wrapping games\n\n    Wraps a game and a set of keywords -> Curriculum mappings. By\n    implementing\n    custom curriculums, we can arbitrarily make games harder or easier.\n    '''", "\n", "curriculums", "=", "curriculums", "or", "{", "}", "\n", "for", "kw", ",", "val", "in", "curriculums", ".", "items", "(", ")", ":", "\n", "        ", "kwargs", "[", "kw", "]", "=", "val", ".", "get", "(", ")", "\n", "", "game", "=", "cls", "(", "**", "kwargs", ")", "\n", "\n", "def", "make_easier", "(", "self", ")", ":", "\n", "        ", "random", ".", "choice", "(", "list", "(", "curriculums", ".", "values", "(", ")", ")", ")", ".", "make_easier", "(", ")", "\n", "\n", "", "def", "make_harder", "(", "self", ")", ":", "\n", "        ", "random", ".", "choice", "(", "list", "(", "curriculums", ".", "values", "(", ")", ")", ")", ".", "make_harder", "(", ")", "\n", "\n", "", "def", "make_easiest", "(", "self", ")", ":", "\n", "        ", "for", "cur", "in", "curriculums", ":", "\n", "            ", "cur", ".", "make_easiest", "(", ")", "\n", "\n", "", "", "def", "make_hardest", "(", "self", ")", ":", "\n", "        ", "for", "cur", "in", "curriculums", ":", "\n", "            ", "cur", ".", "make_hardest", "(", ")", "\n", "\n", "", "", "max_bounds", "=", "game", ".", "get_max_bounds", "\n", "orig_reset", "=", "game", ".", "reset", "\n", "\n", "def", "get_max_bounds", "(", "self", ")", ":", "\n", "        ", "if", "'map_size'", "in", "curriculums", ":", "\n", "            ", "_", ",", "max_w", ",", "_", ",", "max_h", "=", "curriculums", "[", "'map_size'", "]", ".", "max", "\n", "return", "max_w", ",", "max_h", "\n", "", "return", "max_bounds", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "kw", ",", "val", "in", "curriculums", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "kw", ",", "val", ".", "get", "(", ")", ")", "\n", "", "orig_reset", "(", ")", "\n", "\n", "", "for", "func", "in", "[", "make_easier", ",", "make_harder", ",", "make_easiest", ",", "make_hardest", ",", "\n", "get_max_bounds", ",", "reset", "]", ":", "\n", "        ", "setattr", "(", "game", ",", "func", ".", "__name__", ",", "types", ".", "MethodType", "(", "func", ",", "game", ")", ")", "\n", "\n", "", "return", "game", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.MazeGame.__init__": [[30, 45], ["mazebasev2.lib.mazebase.games.featurizers.SentenceFeaturesRelative", "mazebasev2.lib.mazebase.games.featurizers.SentenceFeaturesRelative", "mazebasev2.lib.mazebase.games.featurizers.SentenceFeaturesRelative", "zip", "mazegame.MazeGame.reset", "max", "max", "game.reset", "game._set_featurizer", "game.get_max_bounds"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._set_featurizer", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.get_max_bounds"], ["def", "__init__", "(", "self", ",", "games", ",", "\n", "featurizer", "=", "featurizers", ".", "SentenceFeaturesRelative", "(", "bounds", "=", "5", ")", ")", ":", "\n", "        ", "self", ".", "featurizer", "=", "featurizer", "\n", "self", ".", "games", "=", "games", "\n", "\n", "# Get a union of the map sizes", "\n", "max_w", ",", "max_h", "=", "zip", "(", "*", "[", "game", ".", "get_max_bounds", "(", ")", "for", "game", "in", "games", "]", ")", "\n", "self", ".", "__max_bounds", "=", "(", "max", "(", "max_w", ")", ",", "max", "(", "max_h", ")", ")", "\n", "\n", "# Overwrite the featurizer with our current one", "\n", "# Also call reset on the games", "\n", "for", "game", "in", "self", ".", "games", ":", "\n", "            ", "game", ".", "reset", "(", ")", "\n", "game", ".", "_set_featurizer", "(", "self", ".", "featurizer", ")", "\n", "", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.MazeGame.__getattr__": [[46, 48], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "game", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.MazeGame.all_possible_features": [[49, 54], ["set", "set.update", "game.all_possible_features"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features"], ["", "def", "all_possible_features", "(", "self", ")", ":", "\n", "        ", "feats", "=", "set", "(", ")", "\n", "for", "game", "in", "self", ".", "games", ":", "\n", "            ", "feats", ".", "update", "(", "game", ".", "all_possible_features", "(", ")", ")", "\n", "", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.MazeGame.all_possible_actions": [[55, 60], ["set", "list", "set.update", "sorted", "game.all_possible_actions"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.all_possible_actions"], ["", "def", "all_possible_actions", "(", "self", ")", ":", "\n", "        ", "actions", "=", "set", "(", ")", "\n", "for", "game", "in", "self", ".", "games", ":", "\n", "            ", "actions", ".", "update", "(", "game", ".", "all_possible_actions", "(", ")", ")", "\n", "", "return", "list", "(", "sorted", "(", "actions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.MazeGame.get_max_bounds": [[61, 63], ["None"], "methods", ["None"], ["", "def", "get_max_bounds", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__max_bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.MazeGame.reset": [[64, 67], ["random.choice", "mazegame.MazeGame.game.reset"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "game", "=", "random", ".", "choice", "(", "self", ".", "games", ")", "\n", "self", ".", "game", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.MazeGame.save": [[68, 70], ["mazegame.MazeGame.game.save"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "game", ".", "save", "(", ")", "\n", "#return pickle.dumps(self.game)", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.MazeGame.all_features": [[73, 76], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "all_features", "(", "cls", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.__init__": [[124, 135], ["mazebasev2.populate_kwargs", "mazebasev2.populate_kwargs", "mazebasev2.populate_kwargs", "object.__init__", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        kwargs:\n            featurizer: featurizer to use when doing observe()\n            map_size: (x_min, x_max, y_min, y_max), draw uniformly and randomly\n        '''", "\n", "mazeutils", ".", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "super", "(", "BaseMazeGame", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "game_name", "=", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "self", ".", "__all_possible_features", "=", "None", "\n", "self", ".", "__reward", "=", "0", "\n", "#self.reset()", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.display": [[141, 181], ["None"], "methods", ["None"], ["", "def", "display", "(", "self", ")", ":", "\n", "\n", "# for y in range(5):", "\n", "#     for x in range(5):", "\n", "#         for item in self._map[x][y]:", "\n", "#             try:", "\n", "#                 print(item.str_id)", "\n", "#             except:", "\n", "#                 print(\"no id\")", "\n", "#         #print(self._map[x][y])", "\n", "#     print(\"--\")", "\n", "\n", "        ", "''' Displays the game map for visualization '''", "\n", "'''\n        cprint(' ' * (self.width + 2) * 3, None, 'on_white')\n        for y in reversed(range(self.height)):\n            cprint('   ', None, 'on_white', end=\"\")\n            for x in range(self.width):\n                itemlst = sorted(filter(lambda x: x.visible, self._map[x][y]),\n                                 key=lambda x: x.PRIO)\n                disp = [u'   ', None, None, None]\n                for item in itemlst:\n                    config = item._get_display_symbol()\n                    for i, v in list(enumerate(config))[1:]:\n                        if v is not None:\n                            disp[i] = v\n                    s = config[0]\n                    if s is None:\n                        continue\n                    d = list(disp[0])\n                    for i, char in enumerate(s):\n                        if char != ' ':\n                            d[i] = char\n                    disp[0] = \"\".join(d)\n                text, color, bg, attrs = disp\n                cprint(text, color, bg, attrs, end=\"\")\n            cprint('   ', None, 'on_white')\n        cprint(' ' * (self.width + 2) * 3, None, 'on_white')\n        '''", "\n", "return", "self", ".", "_map", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe": [[182, 193], ["mazegame.BaseMazeGame.current_agent", "mazegame.BaseMazeGame._featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.current_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.SentenceFeaturesRelative._featurize"], ["", "def", "observe", "(", "self", ")", ":", "\n", "        ", "'''\n        Returns:\n            id: id of current agent to make an action\n            observation: featurized version of map\n        '''", "\n", "id", "=", "self", ".", "current_agent", "(", ")", "\n", "return", "{", "\n", "'id'", ":", "id", ",", "\n", "'reward'", ":", "self", ".", "__reward", ",", "\n", "'observation'", ":", "self", ".", "_featurize", "(", "id", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over": [[195, 197], ["mazegame.BaseMazeGame._finished"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._finished"], ["", "def", "is_over", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_finished", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.reward": [[198, 202], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ")", ":", "\n", "        ", "''' Reward experienced by the last action taken. 0 if no action has\n        been taken.'''", "\n", "return", "self", ".", "__reward", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.reward_so_far": [[203, 205], ["None"], "methods", ["None"], ["", "def", "reward_so_far", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__reward_so_far", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.approx_best_reward": [[206, 208], ["None"], "methods", ["None"], ["", "def", "approx_best_reward", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__approx_best", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.reset": [[209, 264], ["range", "RuntimeError", "collections.OrderedDict", "random.randint", "random.randint", "dict", "mazegame.BaseMazeGame._reset", "mazegame.BaseMazeGame._step", "mazegame.BaseMazeGame._accumulate_approximate_rewards", "mazegame.BaseMazeGame._calculate_approximate_reward", "mazegame.BaseMazeGame._finished", "mazegame.BaseMazeGame._add_item", "mazegame.BaseMazeGame.current_agent", "mazegame.BaseMazeGame._get_reward", "logging.exception", "range", "range", "mazebasev2.Corner", "mazebasev2.Corner", "mazebasev2.Corner", "mazegame.BaseMazeGame.__reward_history.get", "range", "range"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._accumulate_approximate_rewards", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._finished", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.current_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._get_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "'''\n        Wrapper to try 100 times, since sometimes the random generation\n        screws up. Calls _reset to reset the map to a random initial state.\n        Override _reset when creating a new game. Reset logic is in here\n        so every subclass has access to reset variables correctly.\n        '''", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "uid", "=", "0", "\n", "self", ".", "_acting", "=", "None", "\n", "\n", "# All items in the map, inluding agents", "\n", "self", ".", "_items", "=", "{", "}", "\n", "# Agents and their current speed.", "\n", "# An agent moves when it reaches 0 speed", "\n", "self", ".", "_agents", "=", "OrderedDict", "(", ")", "\n", "# All actions available. (agent_id, action_id): function", "\n", "self", ".", "_actions", "=", "{", "}", "\n", "\n", "min_x", ",", "max_x", ",", "min_y", ",", "max_y", "=", "self", ".", "map_size", "\n", "self", ".", "width", "=", "random", ".", "randint", "(", "min_x", ",", "max_x", ")", "\n", "self", ".", "height", "=", "random", ".", "randint", "(", "min_y", ",", "max_y", ")", "\n", "self", ".", "_map", "=", "[", "[", "[", "]", "for", "x", "in", "range", "(", "self", ".", "height", ")", "]", "\n", "for", "y", "in", "range", "(", "self", ".", "width", ")", "]", "\n", "\n", "# For estimating best possible reward", "\n", "self", ".", "_approx_reward_map", "=", "[", "[", "-", "self", ".", "turn_penalty", "\n", "for", "x", "in", "range", "(", "self", ".", "height", ")", "]", "\n", "for", "y", "in", "range", "(", "self", ".", "width", ")", "]", "\n", "self", ".", "__reward_history", "=", "dict", "(", ")", "\n", "self", ".", "__reward_so_far", "=", "0", "\n", "\n", "self", ".", "_reset", "(", ")", "\n", "cornerlocs", "=", "[", "(", "0", ",", "0", ")", ",", "\n", "(", "0", ",", "self", ".", "height", "-", "1", ")", ",", "\n", "(", "self", ".", "width", "-", "1", ",", "0", ")", ",", "\n", "(", "self", ".", "width", "-", "1", ",", "self", ".", "height", "-", "1", ")", ",", "\n", "]", "\n", "for", "loc", "in", "cornerlocs", ":", "\n", "                    ", "self", ".", "_add_item", "(", "mi", ".", "Corner", "(", "location", "=", "loc", ")", ")", "\n", "", "self", ".", "_step", "(", ")", "\n", "self", ".", "_accumulate_approximate_rewards", "(", ")", "\n", "self", ".", "__approx_best", "=", "self", ".", "_calculate_approximate_reward", "(", ")", "\n", "\n", "if", "self", ".", "_finished", "(", ")", ":", "\n", "                    ", "actor", "=", "self", ".", "current_agent", "(", ")", "\n", "self", ".", "__reward", "=", "self", ".", "_get_reward", "(", "actor", ")", "\n", "self", ".", "__reward_history", "[", "actor", "]", "=", "self", ".", "__reward_history", ".", "get", "(", "\n", "actor", ",", "0", ")", "+", "self", ".", "__reward", "\n", "self", ".", "__reward_so_far", "=", "self", ".", "__reward_history", "[", "actor", "]", "\n", "", "return", "\n", "", "except", "mazeutils", ".", "MazeException", ":", "\n", "                ", "logging", ".", "exception", "(", "\"Failed to create map because: \"", ")", "\n", "", "", "raise", "RuntimeError", "(", "\"Failed to create map after 100 tries! Your map\"", "\n", "\"size is probably too small\"", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._set_featurizer": [[266, 269], ["None"], "methods", ["None"], ["", "def", "_set_featurizer", "(", "self", ",", "featurizer", ")", ":", "\n", "        ", "'''Helper function for wrappers'''", "\n", "self", ".", "featurizer", "=", "featurizer", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.get_max_bounds": [[270, 274], ["None"], "methods", ["None"], ["", "def", "get_max_bounds", "(", "self", ")", ":", "\n", "        ", "'''Get maximum width and height across all random initializations'''", "\n", "_", ",", "max_w", ",", "_", ",", "max_h", "=", "self", ".", "map_size", "\n", "return", "max_w", ",", "max_h", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._reset": [[275, 282], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "'''\n        Resets a map to an initial state. Subclass and override this function\n        to create new games.\n        '''", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._finished": [[283, 286], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._get_reward": [[287, 291], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_get_reward", "(", "self", ",", "id", ")", ":", "\n", "        ", "reward", "=", "-", "self", ".", "turn_penalty", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._accumulate_approximate_rewards": [[292, 298], ["None"], "methods", ["None"], ["", "def", "_accumulate_approximate_rewards", "(", "self", ")", ":", "\n", "        ", "'''\n        Accumulates approximate reward of landing on a square. Used only for\n        estimating best possible reward\n        '''", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._calculate_approximate_reward": [[299, 305], ["None"], "methods", ["None"], ["", "def", "_calculate_approximate_reward", "(", "self", ")", ":", "\n", "        ", "'''\n        Accumulates approximate reward of landing on a square. Used only for\n        estimating best possible reward\n        '''", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._in_bounds": [[306, 310], ["None"], "methods", ["None"], ["", "def", "_in_bounds", "(", "self", ",", "location", ")", ":", "\n", "# Checks whether a location is in the maze", "\n", "        ", "x", ",", "y", "=", "location", "\n", "return", "0", "<=", "x", "<", "self", ".", "width", "and", "0", "<=", "y", "<", "self", ".", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block": [[311, 316], ["mazegame.BaseMazeGame._get_items", "isinstance"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._get_items"], ["", "def", "_tile_get_block", "(", "self", ",", "loc", ",", "typ", ")", ":", "\n", "        ", "for", "block", "in", "self", ".", "_get_items", "(", "loc", ")", ":", "\n", "            ", "if", "isinstance", "(", "block", ",", "typ", ")", ":", "\n", "                ", "return", "block", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._featurize": [[317, 319], ["mazegame.BaseMazeGame.featurizer.featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "_featurize", "(", "self", ",", "id", ")", ":", "\n", "        ", "return", "self", ".", "featurizer", ".", "featurize", "(", "self", ",", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._side_info": [[320, 326], ["mazegame.BaseMazeGame._side_information", "lst.insert"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.insert"], ["", "def", "_side_info", "(", "self", ")", ":", "\n", "        ", "'''Override _side_information instead'''", "\n", "info", "=", "self", ".", "_side_information", "(", ")", "\n", "for", "lst", "in", "info", ":", "\n", "            ", "lst", ".", "insert", "(", "0", ",", "'INFO'", ")", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._side_information": [[327, 335], ["type"], "methods", ["None"], ["", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "'''Side information about the game. Shouldn't change too much and\n        and encode information about the goals of the game. This list is\n        _ordered_, with the information from the superclasses appearing first.\n\n        This is the equivalent of info from mazebase1.0\n        '''", "\n", "return", "[", "[", "'GAME'", ",", "type", "(", "self", ")", ".", "__name__", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.all_possible_features": [[340, 356], ["set", "set.update", "list", "mazebasev2.all_classes_of", "mazebasev2.all_classes_of", "mazebasev2.all_classes_of", "mazegame.BaseMazeGame.featurizer.all_possible_features", "sorted", "set.update", "cls.all_features"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.all_classes_of", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.all_classes_of", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.all_classes_of", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.all_features"], ["", "def", "all_possible_features", "(", "self", ")", ":", "\n", "        ", "'''\n        All possible features in the game. Call this to generate a vocabulary\n        '''", "\n", "if", "self", ".", "__all_possible_features", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "__all_possible_features", "\n", "# Circular dependencies", "\n", "", "import", "lib", ".", "mazebase", ".", "games", "as", "games", "\n", "features", "=", "set", "(", ")", "\n", "modules", "=", "[", "mi", ",", "mi", ".", "agents", ",", "games", "]", "\n", "for", "mod", "in", "modules", ":", "\n", "            ", "for", "name", ",", "cls", "in", "mazeutils", ".", "all_classes_of", "(", "mod", ")", ":", "\n", "                ", "features", ".", "update", "(", "cls", ".", "all_features", "(", ")", ")", "\n", "", "", "features", ".", "update", "(", "self", ".", "featurizer", ".", "all_possible_features", "(", "self", ")", ")", "\n", "self", ".", "__all_possible_features", "=", "list", "(", "sorted", "(", "features", ")", ")", "\n", "return", "self", ".", "__all_possible_features", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.all_features": [[357, 365], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "all_features", "(", "cls", ")", ":", "\n", "        ", "'''\n        All new features for this game. Usually just the Map Name, and\n        you don't need to touch this. If your map implements new features for\n        side_info, then define a classmethod with the new features only.\n        '''", "\n", "return", "[", "'GAME'", ",", "'INFO'", ",", "cls", ".", "__name__", ",", "''", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._get_items": [[366, 372], ["mazegame.BaseMazeGame._in_bounds"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._in_bounds"], ["", "def", "_get_items", "(", "self", ",", "location", ")", ":", "\n", "# Get item list at a location in the maze, empty if out of buonds", "\n", "        ", "x", ",", "y", "=", "location", "\n", "if", "not", "self", ".", "_in_bounds", "(", "location", ")", ":", "\n", "            ", "return", "[", "]", "\n", "", "return", "self", ".", "_map", "[", "x", "]", "[", "y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item": [[373, 387], ["[].append", "isinstance", "str"], "methods", ["None"], ["", "def", "_add_item", "(", "self", ",", "item", ",", "id", "=", "None", ")", ":", "\n", "        ", "assert", "id", "is", "None", "or", "isinstance", "(", "id", ",", "six", ".", "string_types", ")", "or", "'|'", "in", "id", ",", "\"Item id must be a string without | characters\"", "\n", "self", ".", "uid", "+=", "1", "\n", "id", "=", "self", ".", "game_name", "+", "'|'", "+", "(", "str", "(", "self", ".", "uid", ")", "+", "'|'", "if", "id", "is", "None", "else", "id", ")", "\n", "assert", "id", "not", "in", "self", ".", "_items", ",", "\"Item {0} already in map...\"", ".", "format", "(", "id", ")", "\n", "self", ".", "_items", "[", "id", "]", "=", "item", "\n", "\n", "item", ".", "game", "=", "self", "\n", "item", ".", "id", "=", "id", "\n", "\n", "x", ",", "y", "=", "item", ".", "location", "\n", "self", ".", "_map", "[", "x", "]", "[", "y", "]", ".", "append", "(", "item", ")", "\n", "return", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._move_item": [[388, 397], ["[].remove", "[].append", "mazegame.BaseMazeGame._in_bounds"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._in_bounds"], ["", "def", "_move_item", "(", "self", ",", "id", ",", "location", ")", ":", "\n", "        ", "nx", ",", "ny", "=", "location", "\n", "if", "not", "self", ".", "_in_bounds", "(", "location", ")", ":", "\n", "            ", "return", "\n", "", "item", "=", "self", ".", "_items", "[", "id", "]", "\n", "x", ",", "y", "=", "item", ".", "location", "\n", "self", ".", "_map", "[", "x", "]", "[", "y", "]", ".", "remove", "(", "item", ")", "\n", "self", ".", "_map", "[", "nx", "]", "[", "ny", "]", ".", "append", "(", "item", ")", "\n", "item", ".", "location", "=", "(", "nx", ",", "ny", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._remove_item": [[398, 403], ["[].remove", "mazegame.BaseMazeGame._items.pop"], "methods", ["None"], ["", "def", "_remove_item", "(", "self", ",", "id", ")", ":", "\n", "        ", "item", "=", "self", ".", "_items", "[", "id", "]", "\n", "x", ",", "y", "=", "item", ".", "location", "\n", "self", ".", "_map", "[", "x", "]", "[", "y", "]", ".", "remove", "(", "item", ")", "\n", "self", ".", "_items", ".", "pop", "(", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.all_possible_actions": [[408, 417], ["set", "mazebasev2.all_classes_of", "mazebasev2.all_classes_of", "mazebasev2.all_classes_of", "list", "set.update", "sorted", "cls().actions.keys", "cls"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.all_classes_of", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.all_classes_of", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.all_classes_of", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update"], ["", "@", "staticmethod", "\n", "def", "all_possible_actions", "(", ")", ":", "\n", "        ", "'''\n        Returns all possible actions an agent can take\n        '''", "\n", "actions", "=", "set", "(", ")", "\n", "for", "name", ",", "cls", "in", "mazeutils", ".", "all_classes_of", "(", "agents", ")", ":", "\n", "            ", "actions", ".", "update", "(", "cls", "(", ")", ".", "actions", ".", "keys", "(", ")", ")", "\n", "", "return", "list", "(", "sorted", "(", "actions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.actions": [[418, 422], ["sorted", "mazegame.BaseMazeGame._actions.keys", "mazegame.BaseMazeGame.current_agent"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.current_agent"], ["", "def", "actions", "(", "self", ")", ":", "\n", "        ", "''' All possible actions for current agent '''", "\n", "return", "sorted", "(", "[", "action", "for", "agent", ",", "action", "in", "self", ".", "_actions", ".", "keys", "(", ")", "\n", "if", "agent", "==", "self", ".", "current_agent", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.current_agent": [[423, 439], ["isinstance", "min", "mazegame.BaseMazeGame._agents.items", "mazegame.BaseMazeGame.act", "mazegame.BaseMazeGame.current_agent", "mazegame.BaseMazeGame._agents.values", "mazegame.BaseMazeGame._items[].get_npc_action"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.current_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.NPC.get_npc_action"], ["", "def", "current_agent", "(", "self", ")", ":", "\n", "        ", "'''\n        Resets which Agent is doing an action next. We use a countdown model,\n        where each agent starts with a speed, and the game ticks down until\n        the speed is 0. Then, the agent moves and its speed is reset.\n        '''", "\n", "if", "self", ".", "_acting", "is", "None", ":", "\n", "            ", "m", "=", "min", "(", "self", ".", "_agents", ".", "values", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_agents", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_agents", "[", "k", "]", "=", "v", "-", "m", "\n", "if", "v", "==", "m", ":", "\n", "                    ", "self", ".", "_acting", "=", "k", "\n", "", "", "", "if", "isinstance", "(", "self", ".", "_items", "[", "self", ".", "_acting", "]", ",", "agents", ".", "NPC", ")", ":", "\n", "            ", "self", ".", "act", "(", "self", ".", "_items", "[", "self", ".", "_acting", "]", ".", "get_npc_action", "(", ")", ")", "\n", "return", "self", ".", "current_agent", "(", ")", "\n", "", "return", "self", ".", "_acting", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.act": [[440, 458], ["mazegame.BaseMazeGame._finished", "mazegame.BaseMazeGame.current_agent", "mazegame.BaseMazeGame._step", "mazegame.BaseMazeGame._get_reward", "logging.debug", "mazegame.BaseMazeGame._actions.get", "mazegame.BaseMazeGame.__reward_history.get"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._finished", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.current_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._get_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.curriculum.CurriculumBase.get"], ["", "def", "act", "(", "self", ",", "action", ")", ":", "\n", "        ", "''' Performs an action for current agent '''", "\n", "self", ".", "_acting", "=", "None", "\n", "if", "self", ".", "_finished", "(", ")", ":", "\n", "            ", "return", "\n", "", "actor", "=", "self", ".", "current_agent", "(", ")", "\n", "\n", "# Do nothing if action isn't supported", "\n", "def", "noop", "(", ")", ":", "\n", "            ", "logging", ".", "debug", "(", "\"Action isn't supported! Passing instead\"", ")", "\n", "", "self", ".", "_actions", ".", "get", "(", "(", "actor", ",", "action", ")", ",", "noop", ")", "(", ")", "\n", "self", ".", "_step", "(", ")", "\n", "self", ".", "_agents", "[", "actor", "]", "=", "self", ".", "_items", "[", "actor", "]", ".", "speed", "\n", "\n", "self", ".", "__reward", "=", "self", ".", "_get_reward", "(", "actor", ")", "\n", "self", ".", "__reward_history", "[", "actor", "]", "=", "self", ".", "__reward_history", ".", "get", "(", "actor", ",", "0", ")", "+", "self", ".", "__reward", "\n", "self", ".", "__reward_so_far", "=", "self", ".", "__reward_history", "[", "actor", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent": [[459, 470], ["mazegame.BaseMazeGame._add_item", "mazegame.BaseMazeGame._actions.update", "dict", "agent.actions.items"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update"], ["", "def", "_add_agent", "(", "self", ",", "agent", ",", "id", ")", ":", "\n", "        ", "'''\n        Agents are controllable by the player. Non-playing agents should be\n        considered items. Agents must have an id to be stable between resets.\n        '''", "\n", "assert", "id", "is", "not", "None", ",", "\"Agent must have an id\"", "\n", "id", "=", "self", ".", "_add_item", "(", "agent", ",", "id", ")", "\n", "self", ".", "_agents", "[", "id", "]", "=", "agent", ".", "speed", "\n", "self", ".", "_actions", ".", "update", "(", "dict", "(", "(", "(", "id", ",", "k", ")", ",", "v", ")", "for", "\n", "k", ",", "v", "in", "agent", ".", "actions", ".", "items", "(", ")", ")", ")", "\n", "return", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._step": [[471, 474], ["None"], "methods", ["None"], ["", "def", "_step", "(", "self", ")", ":", "\n", "        ", "'''Hook that is called every time an agent acts'''", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.WithWaterAndBlocksMixin.__init__": [[484, 487], ["mazebasev2.populate_kwargs", "mazebasev2.populate_kwargs", "mazebasev2.populate_kwargs", "mazegame.BaseMazeGame.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "mazeutils", ".", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "super", "(", "WithWaterAndBlocksMixin", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.WithWaterAndBlocksMixin._reset": [[488, 492], ["mazegame.BaseMazeGame._reset", "mazebasev2.lib.mazebase.utils.creationutils.sprinkle", "mazebasev2.lib.mazebase.utils.creationutils.sprinkle", "mazebasev2.lib.mazebase.utils.creationutils.sprinkle"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.sprinkle", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.sprinkle", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.sprinkle"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "WithWaterAndBlocksMixin", ",", "self", ")", ".", "_reset", "(", ")", "\n", "creationutils", ".", "sprinkle", "(", "self", ",", "[", "(", "mi", ".", "Block", ",", "self", ".", "blockpct", ")", ",", "\n", "(", "mi", ".", "Water", ",", "self", ".", "waterpct", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.WithWaterAndBlocksMixin._get_reward": [[493, 498], ["mazegame.BaseMazeGame._get_reward", "mazegame.WithWaterAndBlocksMixin._tile_get_block"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._get_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block"], ["", "def", "_get_reward", "(", "self", ",", "id", ")", ":", "\n", "        ", "reward", "=", "super", "(", "WithWaterAndBlocksMixin", ",", "self", ")", ".", "_get_reward", "(", "id", ")", "\n", "if", "self", ".", "_tile_get_block", "(", "self", ".", "_items", "[", "id", "]", ".", "location", ",", "mi", ".", "Water", ")", "is", "not", "None", ":", "\n", "            ", "reward", "+=", "-", "self", ".", "water_penalty", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.WithWaterAndBlocksMixin._accumulate_approximate_rewards": [[499, 504], ["mazegame.BaseMazeGame._accumulate_approximate_rewards", "itertools.product", "range", "range", "mazegame.WithWaterAndBlocksMixin._tile_get_block"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._accumulate_approximate_rewards", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block"], ["", "def", "_accumulate_approximate_rewards", "(", "self", ")", ":", "\n", "        ", "super", "(", "WithWaterAndBlocksMixin", ",", "self", ")", ".", "_accumulate_approximate_rewards", "(", ")", "\n", "for", "x", ",", "y", "in", "product", "(", "range", "(", "self", ".", "width", ")", ",", "range", "(", "self", ".", "height", ")", ")", ":", "\n", "            ", "if", "self", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "Water", ")", "is", "not", "None", ":", "\n", "                ", "self", ".", "_approx_reward_map", "[", "x", "]", "[", "y", "]", "+=", "-", "self", ".", "water_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.RewardOnEndMixin.__init__": [[516, 519], ["mazebasev2.populate_kwargs", "mazebasev2.populate_kwargs", "mazebasev2.populate_kwargs", "mazegame.BaseMazeGame.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "mazeutils", ".", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "super", "(", "RewardOnEndMixin", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.RewardOnEndMixin._get_reward": [[520, 526], ["mazegame.BaseMazeGame._get_reward", "mazegame.RewardOnEndMixin._finished"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._get_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._finished"], ["", "def", "_get_reward", "(", "self", ",", "id", ")", ":", "\n", "        ", "reward", "=", "super", "(", "RewardOnEndMixin", ",", "self", ")", ".", "_get_reward", "(", "id", ")", "\n", "if", "self", ".", "_finished", "(", ")", ":", "\n", "            ", "reward", "=", "self", ".", "goal_reward", "\n", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.RewardOnEndMixin._calculate_approximate_reward": [[527, 530], ["mazegame.BaseMazeGame._calculate_approximate_reward"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward"], ["", "def", "_calculate_approximate_reward", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "RewardOnEndMixin", ",", "self", ")", ".", "_calculate_approximate_reward", "(", ")", "+", "self", ".", "goal_reward", "+", "self", ".", "turn_penalty", "\n", "# last turn penalty not counted", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseVocabulary.__init__": [[538, 541], ["mazegame.BaseVocabulary.BaseVocabStore", "mazegame.BaseMazeGame.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "FEATURE", "=", "self", ".", "BaseVocabStore", "(", ")", "\n", "super", "(", "BaseVocabulary", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseVocabulary.all_features": [[563, 574], ["cls.BaseVocabStore", "dir", "mazegame.BaseMazeGame.all_features", "getattr", "lst.extend", "lst.append", "type"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.all_features"], ["", "", "@", "classmethod", "\n", "def", "all_features", "(", "cls", ")", ":", "\n", "        ", "'''Feature mixins have to call the parent'''", "\n", "vocab", "=", "cls", ".", "BaseVocabStore", "(", ")", "\n", "lst", "=", "[", "]", "\n", "# flatten lists", "\n", "for", "var_name", "in", "dir", "(", "vocab", ")", ":", "\n", "            ", "if", "var_name", "[", "0", "]", "!=", "'_'", ":", "\n", "                ", "v", "=", "getattr", "(", "vocab", ",", "var_name", ")", "\n", "lst", ".", "extend", "(", "v", ")", "if", "type", "(", "v", ")", "==", "list", "else", "lst", ".", "append", "(", "v", ")", "\n", "", "", "return", "lst", "+", "super", "(", "BaseVocabulary", ",", "cls", ")", ".", "all_features", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.AbsoluteLocationVocabulary.all_possible_features": [[578, 582], ["list", "sorted", "itertools.chain", "super().all_possible_features", "mazegame.AbsoluteLocationVocabulary._get_abs_loc_features"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.AbsoluteLocationUtils._get_abs_loc_features"], ["def", "all_possible_features", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "sorted", "(", "chain", "(", "\n", "super", "(", "AbsoluteLocationVocabulary", ",", "self", ")", ".", "all_possible_features", "(", ")", ",", "\n", "self", ".", "_get_abs_loc_features", "(", "self", ")", "\n", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BaseRuleGame.__init__": [[36, 46], ["BaseVocabulary.__init__", "enumerate", "mazebasev2.lib.knowledge.Rule"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rules_json", ",", "**", "kwargs", ")", ":", "\n", "#populate_kwargs(self, self.__class__.__properties, kwargs)", "\n", "        ", "super", "(", "BaseRuleGame", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "# Give names to rules (for later comparisons, no real meaning)", "\n", "for", "i", ",", "rule", "in", "enumerate", "(", "rules_json", ")", ":", "\n", "            ", "rules_json", "[", "i", "]", "[", "Rule", ".", "RULE_NAME", "]", "=", "'Rule%d'", "%", "(", "i", "+", "1", ")", "\n", "\n", "# Create the rules", "\n", "", "self", ".", "rules", "=", "[", "Rule", "(", "j", ")", "for", "j", "in", "rules_json", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame.__init__": [[61, 86], ["mazebasev2.lib.mazebase.utils.mazeutils.populate_kwargs", "crafting_based_games.BaseRuleGame.__init__", "mazebasev2.lib.knowledge.HierarchyTree", "crafting_based_games.CraftingGame.update_item_dict", "mazebasev2.lib.knowledge.CraftingGraph", "mazebasev2.lib.knowledge.Rule.check_rules_valid", "other_items.copy"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame.update_item_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.check_rules_valid"], ["def", "__init__", "(", "self", ",", "rules_json", ",", "other_items", ",", "load_items", ",", "**", "kwargs", ")", ":", "\n", "        ", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "super", "(", "CraftingGame", ",", "self", ")", ".", "__init__", "(", "rules_json", ",", "**", "kwargs", ")", "\n", "\n", "# List of bad blocks we can't double generate on", "\n", "self", ".", "bad_blocks", "=", "[", "mi", ".", "Block", ",", "mi", ".", "ResourceFont", ",", "mi", ".", "CraftingContainer", ",", "mi", ".", "CraftingItem", ",", "mi", ".", "Switch", ",", "mi", ".", "Door", "]", "\n", "\n", "# Create subclass tree - which items inherit from which items", "\n", "self", ".", "hierarchy_tree", "=", "HierarchyTree", "(", "self", ".", "rules", ")", "\n", "\n", "# Create a dictionary of items and their types for each item that appears in our rules", "\n", "if", "other_items", "is", "None", ":", "\n", "            ", "self", ".", "item_dict", "=", "{", "}", "\n", "", "else", ":", "\n", "# We might want to add distractor items that do not appear in the rules", "\n", "            ", "self", ".", "item_dict", "=", "other_items", ".", "copy", "(", ")", "\n", "", "self", ".", "update_item_dict", "(", ")", "# Goes through rules and updates item dict", "\n", "\n", "# Creates a graph of items and rules that lets us decide item placements", "\n", "self", ".", "crafting_graph", "=", "CraftingGraph", "(", "self", ".", "rules", ",", "self", ".", "item_dict", ",", "self", ".", "max_craft_depth", ")", "\n", "\n", "# Check for rule conflicts", "\n", "Rule", ".", "check_rules_valid", "(", "self", ".", "rules", ")", "\n", "\n", "self", ".", "load_items", "=", "load_items", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame.all_possible_features": [[89, 101], ["super().all_possible_features", "list", "list", "crafting_based_games.CraftingGame.item_dict.keys", "itertools.product", "list", "str", "six.moves.range"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features"], ["", "def", "all_possible_features", "(", "self", ")", ":", "\n", "# Call super to get features", "\n", "        ", "all_features", "=", "super", "(", "CraftingGame", ",", "self", ")", ".", "all_possible_features", "(", ")", "\n", "\n", "# Get all the possible named items in the world", "\n", "all_features", "+=", "list", "(", "self", ".", "item_dict", ".", "keys", "(", ")", ")", "\n", "\n", "# Get all the possible inventories", "\n", "crafting_items", "=", "[", "key", "for", "key", "in", "self", ".", "item_dict", "if", "self", ".", "item_dict", "[", "key", "]", "==", "mi", ".", "CraftingItem", ".", "__name__", "]", "\n", "all_combs", "=", "list", "(", "product", "(", "crafting_items", ",", "list", "(", "range", "(", "1", ",", "CraftingGame", ".", "MAX_INVENTORY_COUNT", ")", ")", ")", ")", "\n", "all_features", "+=", "[", "x", "[", "0", "]", "+", "'_count='", "+", "str", "(", "x", "[", "1", "]", ")", "for", "x", "in", "all_combs", "]", "\n", "return", "all_features", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame.add_vertical_wall": [[102, 117], ["mazebasev2.lib.mazebase.utils.mazeutils.choice", "random.randint", "random.randint", "six.moves.range", "crafting_based_games.CraftingGame._add_item", "mazebasev2.Block"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item"], ["", "def", "add_vertical_wall", "(", "self", ")", ":", "\n", "        ", "size", "=", "(", "5", ",", "5", ")", "\n", "dim", "=", "choice", "(", "[", "0", ",", "1", "]", ")", "\n", "line", "=", "randint", "(", "1", ",", "size", "[", "1", "-", "dim", "]", "-", "2", ")", "\n", "opening", "=", "randint", "(", "0", ",", "size", "[", "dim", "]", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "size", "[", "dim", "]", ")", ":", "\n", "            ", "if", "i", "!=", "opening", ":", "\n", "                ", "loc", "=", "[", "line", ",", "line", "]", "\n", "loc", "[", "dim", "]", "=", "i", "\n", "self", ".", "_add_item", "(", "mi", ".", "Block", "(", "location", "=", "loc", ")", ")", "\n", "\n", "", "", "loc", "=", "[", "line", ",", "line", "]", "\n", "loc", "[", "dim", "]", "=", "opening", "\n", "\n", "return", "loc", ",", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._reset": [[119, 212], ["crafting_based_games.CraftingGame._set_active_rule_states", "crafting_based_games.CraftingGame.add_vertical_wall", "mazebasev2.Door", "crafting_based_games.CraftingGame._add_item", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "random.choice", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.lib.mazebase.items.agents.CraftingAgent", "crafting_based_games.CraftingGame._add_agent", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "crafting_based_games.CraftingGame.crafting_graph.calculate_items", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.Switch", "crafting_based_games.CraftingGame._add_item", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.Key", "crafting_based_games.CraftingGame._add_item", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException", "crafting_based_games.CraftingGame._create_item_in_inventory", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "crafting_based_games.CraftingGame._add_item", "six.moves.range", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.CraftingContainer", "random.randint", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "crafting_based_games.CraftingGame._add_item", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "crafting_based_games.CraftingGame._add_item", "six.moves.range", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.ResourceFont", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.CraftingItem"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame._set_active_rule_states", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.add_vertical_wall", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.craftinggraph.CraftingGraph.calculate_items", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._create_item_in_inventory", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "#super(CraftingGame, self)._reset()", "\n", "\n", "# Implimented in inheriting classes", "\n", "# Sets spawn environment with", "\n", "# self.end_items - items we want to make possible to create", "\n", "# self.visited_rules - rules we want our agent to be able to use", "\n", "# self.distractor_rules - rules we want to make possible to add that use necessary resources for other rules", "\n", "# self.extra_items - extra items to spawn in environment that aren't related", "\n", "        ", "self", ".", "_set_active_rule_states", "(", ")", "\n", "\n", "self", ".", "inventory", "=", "{", "}", "\n", "self", ".", "switch_states", "=", "2", "\n", "\n", "hole", ",", "dim", "=", "self", ".", "add_vertical_wall", "(", ")", "\n", "\n", "# Add the door", "\n", "self", ".", "door", "=", "mi", ".", "Door", "(", "location", "=", "hole", ",", "\n", "state", "=", "choice", "(", "range", "(", "1", ",", "self", ".", "switch_states", ")", ")", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "door", ")", "\n", "\n", "# Add additional blocks and waters", "\n", "#super(CraftingGame, self)._reset()", "\n", "\n", "# Add agent and switch", "\n", "side", "=", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "def", "mask_func", "(", "x", ",", "y", ")", ":", "\n", "            ", "return", "side", "*", "(", "(", "x", ",", "y", ")", "[", "1", "-", "dim", "]", "-", "hole", "[", "1", "-", "dim", "]", ")", ">", "0", "\n", "\n", "\n", "#EITHER A SWITCH OR A KEY!!", "\n", "\n", "", "self", ".", "isSwitch", "=", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ")", "\n", "\n", "if", "self", ".", "isSwitch", ":", "\n", "            ", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "\n", "self", ",", "bad_blocks", "=", "[", "mi", ".", "Block", ",", "mi", ".", "Door", "]", ",", "mask", "=", "mask_func", ")", ")", "\n", "self", ".", "sw", "=", "mi", ".", "Switch", "(", "location", "=", "loc", ",", "nstates", "=", "self", ".", "switch_states", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "sw", ")", "\n", "", "else", ":", "\n", "            ", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "\n", "self", ",", "bad_blocks", "=", "[", "mi", ".", "Block", ",", "mi", ".", "Door", "]", ",", "mask", "=", "mask_func", ")", ")", "\n", "self", ".", "sw", "=", "mi", ".", "Key", "(", "location", "=", "loc", ",", "str_id", "=", "\"key\"", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "sw", ")", "\n", "\n", "\n", "", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "\n", "self", ",", "bad_blocks", "=", "[", "mi", ".", "Block", ",", "mi", ".", "Door", "]", ",", "mask", "=", "mask_func", ")", ")", "\n", "self", ".", "agent", "=", "agents", ".", "CraftingAgent", "(", "location", "=", "loc", ")", "\n", "self", ".", "agent", ".", "inventory", "=", "self", ".", "inventory", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"CraftingAgent\"", ")", "\n", "\n", "visited", ",", "_", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "loc", ",", "\n", "creationutils", ".", "agent_movefunc", ")", "\n", "if", "self", ".", "sw", ".", "location", "not", "in", "visited", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to goal\"", ")", "\n", "\n", "# Figure our what we want to spawn", "\n", "", "inventory_items", ",", "ground_items", ",", "containers", ",", "fonts", "=", "self", ".", "crafting_graph", ".", "calculate_items", "(", "self", ".", "end_items", ",", "self", ".", "visited_rules", ",", "self", ".", "distractor_rules", ",", "self", ".", "extra_items", ",", "self", ".", "inventory_chance", ")", "\n", "\n", "# Create inventory objects", "\n", "for", "item", "in", "inventory_items", ":", "\n", "            ", "assert", "(", "self", ".", "item_dict", "[", "item", "]", "==", "mi", ".", "CraftingItem", ".", "__name__", ")", "\n", "item_count", "=", "inventory_items", "[", "item", "]", "\n", "self", ".", "_create_item_in_inventory", "(", "self", ",", "item", ",", "item_count", ")", "\n", "\n", "# Add containers", "\n", "", "for", "container_name", "in", "containers", ":", "\n", "            ", "assert", "(", "self", ".", "item_dict", "[", "container_name", "]", "==", "mi", ".", "CraftingContainer", ".", "__name__", ")", "\n", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "bad_blocks", "=", "self", ".", "bad_blocks", ")", ")", "\n", "self", ".", "_add_item", "(", "mi", ".", "CraftingContainer", "(", "container_name", ",", "location", "=", "loc", ")", ")", "\n", "\n", "# Add fonts", "\n", "", "for", "font_name", "in", "fonts", ":", "\n", "            ", "assert", "(", "self", ".", "item_dict", "[", "font_name", "]", "==", "mi", ".", "ResourceFont", ".", "__name__", ")", "\n", "font_item_count", "=", "fonts", "[", "font_name", "]", "\n", "\n", "# Randomly split into fonts with no more than 10 resources per font", "\n", "while", "font_item_count", ">", "0", ":", "\n", "# Make font of random size", "\n", "                ", "cur_sz", "=", "randint", "(", "1", ",", "10", ")", "\n", "if", "cur_sz", ">", "font_item_count", ":", "\n", "                    ", "cur_sz", "=", "font_item_count", "\n", "\n", "# Add font to environment", "\n", "", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "bad_blocks", "=", "self", ".", "bad_blocks", ")", ")", "\n", "self", ".", "_add_item", "(", "mi", ".", "ResourceFont", "(", "font_name", ",", "resource_count", "=", "cur_sz", ",", "location", "=", "loc", ")", ")", "\n", "font_item_count", "-=", "cur_sz", "\n", "\n", "# Add ground items", "\n", "", "", "for", "item", "in", "ground_items", ":", "\n", "            ", "assert", "(", "self", ".", "item_dict", "[", "item", "]", "==", "mi", ".", "CraftingItem", ".", "__name__", ")", "\n", "item_count", "=", "ground_items", "[", "item", "]", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._create_item_in_inventory": [[214, 222], ["None"], "methods", ["None"], ["                ", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "bad_blocks", "=", "self", ".", "bad_blocks", ")", ")", "\n", "self", ".", "_add_item", "(", "mi", ".", "CraftingItem", "(", "item", ",", "location", "=", "loc", ")", ")", "\n", "\n", "# Create an item and add to inventory", "\n", "", "", "", "def", "_create_item_in_inventory", "(", "self", ",", "target_item", ",", "target_item_count", "=", "1", ")", ":", "\n", "# For now, let's just treat inventory items as just a dictionary of items", "\n", "        ", "assert", "(", "self", ".", "item_dict", "[", "target_item", "]", "==", "mi", ".", "CraftingItem", ".", "__name__", ")", "\n", "if", "target_item", "in", "self", ".", "inventory", ":", "\n", "            ", "self", ".", "inventory", "[", "target_item", "]", "+=", "target_item_count", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._destroy_from_inventory": [[224, 231], ["None"], "methods", ["None"], ["            ", "self", ".", "inventory", "[", "target_item", "]", "=", "target_item_count", "\n", "\n", "# Destroy an object in the inventory", "\n", "", "", "def", "_destroy_from_inventory", "(", "self", ",", "depleted_item", ",", "depleted_count", ")", ":", "\n", "# Check we actually have the item and correct count", "\n", "        ", "assert", "(", "depleted_item", "in", "self", ".", "inventory", ")", "\n", "assert", "(", "self", ".", "inventory", "[", "depleted_item", "]", ">=", "depleted_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._move_item_to_inventory": [[233, 246], ["crafting_based_games.CraftingGame._remove_item"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._remove_item"], ["self", ".", "inventory", "[", "depleted_item", "]", "-=", "depleted_count", "\n", "\n", "# Take item out of environment and put in inventory", "\n", "", "def", "_move_item_to_inventory", "(", "self", ",", "item_id", ")", ":", "\n", "# Get name of item", "\n", "        ", "item", "=", "self", ".", "_items", "[", "item_id", "]", "\n", "name", "=", "item", ".", "str_id", "\n", "\n", "# Destroy item from world", "\n", "self", ".", "_remove_item", "(", "item_id", ")", "\n", "\n", "# Add to inventory", "\n", "if", "name", "in", "self", ".", "inventory", ":", "\n", "            ", "self", ".", "inventory", "[", "name", "]", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame.update_item_dict": [[249, 297], ["set", "set", "set", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add"], "methods", ["None"], ["\n", "# Update the dictionary of items with the type", "\n", "# TODO - This might not actually be necessary", "\n", "", "", "def", "update_item_dict", "(", "self", ")", ":", "\n", "# Find items in rules", "\n", "        ", "craft_items", "=", "set", "(", ")", "\n", "fonts", "=", "set", "(", ")", "\n", "craft_containers", "=", "set", "(", ")", "\n", "# TODO - get rid of string literals for actions at some point", "\n", "for", "rule", "in", "self", ".", "rules", ":", "\n", "            ", "if", "Rule", ".", "ACTION", "not", "in", "rule", ".", "rule_dict", ":", "\n", "                ", "continue", "\n", "", "elif", "rule", ".", "rule_dict", "[", "Rule", ".", "ACTION", "]", "==", "'craft'", ":", "\n", "                ", "if", "Rule", ".", "LOCATION", "in", "rule", ".", "rule_dict", ":", "\n", "                    ", "craft_containers", ".", "add", "(", "rule", ".", "rule_dict", "[", "Rule", ".", "LOCATION", "]", ")", "\n", "", "if", "Rule", ".", "DEPLETED_ITEMS", "in", "rule", ".", "rule_dict", ":", "\n", "                    ", "for", "item", "in", "rule", ".", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", ":", "\n", "                        ", "craft_items", ".", "add", "(", "item", ")", "\n", "", "", "if", "Rule", ".", "NON_DEPLETED_ITEMS", "in", "rule", ".", "rule_dict", ":", "\n", "                    ", "for", "item", "in", "rule", ".", "rule_dict", "[", "Rule", ".", "NON_DEPLETED_ITEMS", "]", ":", "\n", "                        ", "craft_items", ".", "add", "(", "item", ")", "\n", "", "", "for", "item", "in", "rule", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", ":", "\n", "                    ", "craft_items", ".", "add", "(", "item", ")", "\n", "", "", "elif", "rule", ".", "rule_dict", "[", "Rule", ".", "ACTION", "]", "in", "[", "'grab'", ",", "'mine'", ",", "'chop'", "]", ":", "\n", "                ", "if", "Rule", ".", "LOCATION", "in", "rule", ".", "rule_dict", ":", "\n", "                    ", "fonts", ".", "add", "(", "rule", ".", "rule_dict", "[", "Rule", ".", "LOCATION", "]", ")", "\n", "", "if", "Rule", ".", "NON_DEPLETED_ITEMS", "in", "rule", ".", "rule_dict", ":", "\n", "                    ", "for", "item", "in", "rule", ".", "rule_dict", "[", "Rule", ".", "NON_DEPLETED_ITEMS", "]", ":", "\n", "                        ", "craft_items", ".", "add", "(", "item", ")", "\n", "", "", "for", "item", "in", "rule", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", ":", "\n", "                    ", "craft_items", ".", "add", "(", "item", ")", "\n", "\n", "\n", "# Update self.item_dict", "\n", "", "", "", "for", "ci", "in", "craft_items", ":", "\n", "            ", "if", "ci", "in", "self", ".", "item_dict", ":", "\n", "                ", "assert", "(", "self", ".", "item_dict", "[", "ci", "]", "==", "mi", ".", "CraftingItem", ".", "__name__", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "item_dict", "[", "ci", "]", "=", "mi", ".", "CraftingItem", ".", "__name__", "\n", "", "", "for", "cc", "in", "craft_containers", ":", "\n", "            ", "if", "cc", "in", "self", ".", "item_dict", ":", "\n", "                ", "assert", "(", "self", ".", "item_dict", "[", "cc", "]", "==", "mi", ".", "CraftingContainer", ".", "__name__", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "item_dict", "[", "cc", "]", "=", "mi", ".", "CraftingContainer", ".", "__name__", "\n", "", "", "for", "f", "in", "fonts", ":", "\n", "            ", "if", "f", "in", "self", ".", "item_dict", ":", "\n", "                ", "assert", "(", "self", ".", "item_dict", "[", "f", "]", "==", "mi", ".", "ResourceFont", ".", "__name__", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "item_dict", "[", "f", "]", "=", "mi", ".", "ResourceFont", ".", "__name__", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._side_information": [[299, 308], ["inventory_features.append", "super()._side_information", "str"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information"], ["\n", "# Add inventory as side information", "\n", "", "", "", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "inventory_features", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "inventory", ":", "\n", "            ", "feature", "=", "item", "+", "'_count='", "+", "str", "(", "self", ".", "inventory", "[", "item", "]", ")", "\n", "assert", "(", "self", ".", "inventory", "[", "item", "]", "<=", "CraftingGame", ".", "MAX_INVENTORY_COUNT", ")", "\n", "inventory_features", ".", "append", "(", "feature", ")", "\n", "\n", "", "return", "super", "(", "CraftingGame", ",", "self", ")", ".", "_side_information", "(", ")", "+"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._set_active_rule_states": [[310, 313], ["None"], "methods", ["None"], ["\n", "# Abstract method. Inheriting classes need to define for each rule how it wants things to be generated", "\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_set_active_rule_states", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.__init__": [[319, 333], ["crafting_based_games.CraftingGame.__init__", "mazebasev2.lib.knowledge.get_triplets", "mazebasev2.lib.knowledge.get_triplets", "mazebasev2.lib.knowledge.Rule"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.get_triplets", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.get_triplets"], ["", "", "class", "BasicKnowledgeGame", "(", "CraftingGame", ")", ":", "\n", "# Init function", "\n", "    ", "def", "__init__", "(", "self", ",", "world_knowledge", ",", "proposed_knowledge", ",", "options", ",", "load_items", ",", "**", "kwargs", ")", ":", "\n", "#populate_kwargs(self, self.__class__.__properties, kwargs)", "\n", "\n", "        ", "super", "(", "BasicKnowledgeGame", ",", "self", ")", ".", "__init__", "(", "world_knowledge", "[", "'rules'", "]", ",", "world_knowledge", "[", "'objects'", "]", ",", "load_items", ",", "max_craft_depth", "=", "options", "[", "'max_craft_depth'", "]", ",", "inventory_chance", "=", "options", "[", "'inventory_chance'", "]", ",", "**", "kwargs", ")", "\n", "self", ".", "options", "=", "options", "\n", "if", "'spawns'", "in", "world_knowledge", ":", "\n", "            ", "self", ".", "spawns", "=", "world_knowledge", "[", "'spawns'", "]", "\n", "\n", "# Create the triplet version of the knowledge (world and proposed)", "\n", "", "self", ".", "proposed_rules", "=", "[", "Rule", "(", "d", ")", "for", "d", "in", "proposed_knowledge", "]", "\n", "self", ".", "proposed_knowledge", "=", "get_triplets", "(", "self", ".", "proposed_rules", ")", "\n", "self", ".", "world_rules", "=", "self", ".", "rules", "\n", "self", ".", "world_knowledge", "=", "get_triplets", "(", "self", ".", "world_rules", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save": [[334, 336], ["pickle.dumps"], "methods", ["None"], ["self", ".", "load_items", "=", "load_items", "\n", "\n", "", "def", "save", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame._set_active_rule_states": [[340, 384], ["numpy.random.choice", "six.moves.range", "len", "crafting_based_games.BasicKnowledgeGame.visited_rules.append", "random.choice", "mazebasev2.lib.utils.dictutils.add_merge_dicts", "Exception", "list", "random.choice", "crafting_based_games.BasicKnowledgeGame.extra_items.items", "crafting_based_games.BasicKnowledgeGame.item_dict.keys"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.dictutils.add_merge_dicts", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice"], ["# In this simplest environment, it's always just the first rule we care about", "\n", "# This is the same every reset, so we just do the logic in init", "\n", "", "def", "_set_active_rule_states", "(", "self", ")", ":", "\n", "# Init", "\n", "        ", "self", ".", "end_items", "=", "{", "}", "\n", "self", ".", "extra_items", "=", "{", "}", "\n", "self", ".", "visited_rules", "=", "[", "]", "\n", "self", ".", "distractor_rules", "=", "[", "]", "\n", "\n", "# Randomly init environment, depending on options", "\n", "# Randomly choose rules and distractor rules", "\n", "if", "self", ".", "options", "[", "'spawn'", "]", "[", "'mode'", "]", "==", "'random_rules'", ":", "\n", "# Randomly choose the rules to follow", "\n", "            ", "rule_idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "world_rules", ")", ",", "self", ".", "options", "[", "'spawn'", "]", "[", "'num_rules'", "]", ",", "replace", "=", "False", ")", "\n", "for", "idx", "in", "rule_idx", ":", "\n", "                ", "self", ".", "visited_rules", ".", "append", "(", "self", ".", "world_rules", "[", "idx", "]", ".", "rule_dict", "[", "'name'", "]", ")", "\n", "# TODO - Distractor rules is not implimented right now. Not actually sure what to do with it", "\n", "# TODO - Also, it only spawns itesms for world rules, not the proposed rules", "\n", "\n", "# Choose a random number of other items and add them to spawn", "\n", "", "for", "_", "in", "range", "(", "self", ".", "options", "[", "'spawn'", "]", "[", "'num_distractor_items'", "]", ")", ":", "\n", "                ", "item", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "item_dict", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "extra_items", "=", "dictutils", ".", "add_merge_dicts", "(", "self", ".", "extra_items", ",", "{", "item", ":", "1", "}", ")", "\n", "", "", "elif", "self", ".", "options", "[", "'spawn'", "]", "[", "'mode'", "]", "==", "'fixed_spawns'", ":", "\n", "# Choose randomly from a list of possible spawns", "\n", "# All items to be spawned are specifically enumerated", "\n", "\n", "            ", "if", "self", ".", "load_items", "!=", "None", ":", "\n", "                ", "self", ".", "extra_items", "=", "self", ".", "load_items", "[", "\"extra_items\"", "]", "\n", "self", ".", "goal", "=", "self", ".", "load_items", "[", "\"goal\"", "]", "\n", "self", ".", "recipe", "=", "self", ".", "load_items", "[", "\"recipe\"", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "extra_items", "=", "random", ".", "choice", "(", "self", ".", "spawns", ")", "\n", "\n", "self", ".", "goal", "=", "'temp'", "\n", "self", ".", "recipe", "=", "'temp'", "\n", "\n", "for", "key", ",", "value", "in", "self", ".", "extra_items", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", "==", "'goal'", ":", "\n", "                        ", "self", ".", "goal", "=", "value", "\n", "", "elif", "key", "==", "'recipe'", ":", "\n", "                        ", "self", ".", "recipe", "=", "value", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Have not implemented spawn mode %s'", "%", "self", ".", "options", "[", "'spawn'", "]", "[", "'num_distractor_items'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame._reset": [[388, 391], ["crafting_based_games.BasicKnowledgeGame._set_active_rule_states", "crafting_based_games.CraftingGame._reset"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame._set_active_rule_states", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset"], ["", "", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_set_active_rule_states", "(", ")", "\n", "super", "(", "BasicKnowledgeGame", ",", "self", ")", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame._finished": [[393, 412], ["goal.split", "s.find", "str", "s.find"], "methods", ["None"], ["", "def", "_finished", "(", "self", ")", ":", "\n", "\n", "#modified this part to check if the goal statement is satisfied, assume that making one thing first.", "\n", "\n", "        ", "import", "re", "\n", "\n", "s", "=", "self", ".", "goal", "\n", "goal", "=", "s", "[", "s", ".", "find", "(", "\"(\"", ")", "+", "1", ":", "s", ".", "find", "(", "\")\"", ")", "]", "\n", "goal_split", "=", "goal", ".", "split", "(", "\"=\"", ")", "\n", "item", "=", "goal_split", "[", "0", "]", "\n", "value", "=", "goal_split", "[", "1", "]", "\n", "\n", "#print(item, value, self.inventory)", "\n", "\n", "\n", "if", "item", "in", "self", ".", "inventory", ":", "\n", "            ", "if", "str", "(", "self", ".", "inventory", "[", "item", "]", ")", "==", "value", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "return", "False", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame._get_reward": [[414, 417], ["None"], "methods", ["None"], ["# Return 0 always", "\n", "", "def", "_get_reward", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "assert", "(", "self", ".", "agent", ".", "id", "==", "agent_id", ")", "\n", "return", "0", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame._step": [[420, 441], ["crafting_based_games.BasicKnowledgeGame.door.open", "crafting_based_games.BasicKnowledgeGame.door.close"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.close"], ["# World and inventory item management should all be handled in action functions", "\n", "", "def", "_step", "(", "self", ")", ":", "\n", "\n", "# print(self.agent.location)", "\n", "# print(self.sw.location)", "\n", "# print(self.door.location)", "\n", "\n", "# print(self.inventory)", "\n", "\n", "# depending on the setting, check the locations? ", "\n", "\n", "\n", "#will be handled by action?? ", "\n", "\n", "#self.door.close()", "\n", "\n", "# Hook the door up to the switch", "\n", "        ", "if", "self", ".", "isSwitch", ":", "\n", "            ", "if", "self", ".", "sw", ".", "state", "==", "self", ".", "door", ".", "state", ":", "\n", "               ", "self", ".", "door", ".", "open", "(", ")", "\n", "", "else", ":", "\n", "               ", "self", ".", "door", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.Featurizer.featurize": [[21, 24], ["None"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "featurize", "(", "self", ",", "game", ",", "id", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.Featurizer.all_possible_features": [[25, 29], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "all_possible_features", "(", "self", ",", "game", ")", ":", "\n", "        ", "'''Extra features added by the featurizer'''", "\n", "return", "[", "''", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.BaseGridFeaturizer.__init__": [[33, 36], ["kwargs.pop", "kwargs.pop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "max_info_length", "=", "kwargs", ".", "pop", "(", "'max_info_length'", ",", "10", ")", "\n", "self", ".", "max_infos", "=", "kwargs", ".", "pop", "(", "'max_infos'", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.BaseGridFeaturizer.featurize": [[37, 41], ["featurizers.BaseGridFeaturizer._featurize_grid", "featurizers.BaseGridFeaturizer._featurize_side_info"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer._featurize_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.BaseGridFeaturizer._featurize_side_info"], ["", "def", "featurize", "(", "self", ",", "game", ",", "id", ")", ":", "\n", "        ", "features", "=", "(", "self", ".", "_featurize_grid", "(", "game", ",", "id", ")", ",", "\n", "self", ".", "_featurize_side_info", "(", "game", ",", "id", ")", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.BaseGridFeaturizer._featurize_side_info": [[42, 52], ["game._side_info", "len", "Exception", "range", "len", "Exception", "len", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._side_info"], ["", "def", "_featurize_side_info", "(", "self", ",", "game", ",", "id", ")", ":", "\n", "        ", "features", "=", "game", ".", "_side_info", "(", ")", "\n", "if", "len", "(", "features", ")", ">", "self", ".", "max_info_length", ":", "\n", "            ", "raise", "Exception", "(", "\"Too much side info too long to featurize\"", ")", "\n", "", "features", "+=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "max_infos", "-", "len", "(", "features", ")", ")", "]", "\n", "for", "feat", "in", "features", ":", "\n", "            ", "if", "len", "(", "feat", ")", ">", "self", ".", "max_info_length", ":", "\n", "                ", "raise", "Exception", "(", "\"Info feature too long\"", ")", "\n", "", "feat", "+=", "[", "\"\"", "]", "*", "(", "self", ".", "max_info_length", "-", "len", "(", "feat", ")", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.BaseGridFeaturizer._featurize_grid": [[53, 56], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_featurize_grid", "(", "self", ",", "game", ",", "id", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.SentenceFeaturizer.__init__": [[61, 64], ["kwargs.pop", "kwargs.pop"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "max_sentence_length", "=", "kwargs", ".", "pop", "(", "'max_sentence_length'", ",", "10", ")", "\n", "self", ".", "max_sentences", "=", "kwargs", ".", "pop", "(", "'max_sentences'", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.SentenceFeaturizer.featurize": [[65, 76], ["featurizers.SentenceFeaturizer._featurize", "game._side_info", "len", "Exception", "range", "len", "Exception", "len", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.SentenceFeaturesRelative._featurize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._side_info"], ["", "def", "featurize", "(", "self", ",", "game", ",", "id", ")", ":", "\n", "        ", "features", "=", "self", ".", "_featurize", "(", "game", ",", "id", ")", "+", "game", ".", "_side_info", "(", ")", "\n", "if", "len", "(", "features", ")", ">", "self", ".", "max_sentences", ":", "\n", "            ", "raise", "Exception", "(", "\"Too many objects to featurize\"", ")", "\n", "# Do padding for features", "\n", "", "features", "+=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "max_sentences", "-", "len", "(", "features", ")", ")", "]", "\n", "for", "feat", "in", "features", ":", "\n", "            ", "if", "len", "(", "feat", ")", ">", "self", ".", "max_sentence_length", ":", "\n", "                ", "raise", "Exception", "(", "\"Sentence feature too long\"", ")", "\n", "", "feat", "+=", "[", "\"\"", "]", "*", "(", "self", ".", "max_sentence_length", "-", "len", "(", "feat", ")", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.SentenceFeaturizer._featurize": [[77, 80], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_featurize", "(", "self", ",", "game", ",", "id", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.AbsoluteLocationMixin.all_possible_features": [[84, 86], ["featurizers.AbsoluteLocationMixin._get_abs_loc_features"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.AbsoluteLocationUtils._get_abs_loc_features"], ["def", "all_possible_features", "(", "self", ",", "game", ")", ":", "\n", "        ", "return", "self", ".", "_get_abs_loc_features", "(", "game", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeLocationMixin.__init__": [[91, 94], ["kwargs.pop", "object.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "bounds", "=", "kwargs", ".", "pop", "(", "'bounds'", ",", "5", ")", "\n", "super", "(", "RelativeLocationMixin", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeLocationMixin.all_possible_features": [[95, 102], ["set", "itertools.product", "list", "super().all_possible_features", "range", "range", "set.add", "sorted", "featurizers.RelativeLocationMixin._coords2loc"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeLocationMixin._coords2loc"], ["", "def", "all_possible_features", "(", "self", ",", "game", ")", ":", "\n", "        ", "fts", "=", "set", "(", "super", "(", "RelativeLocationMixin", ",", "self", ")", "\n", ".", "all_possible_features", "(", "game", ")", ")", "\n", "for", "x", ",", "y", "in", "itertools", ".", "product", "(", "range", "(", "-", "self", ".", "bounds", ",", "self", ".", "bounds", ")", ",", "\n", "range", "(", "-", "self", ".", "bounds", ",", "self", ".", "bounds", ")", ")", ":", "\n", "            ", "fts", ".", "add", "(", "self", ".", "_coords2loc", "(", "x", ",", "y", ")", ")", "\n", "", "return", "list", "(", "sorted", "(", "fts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeLocationMixin._coords2loc": [[103, 106], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_coords2loc", "(", "x", ",", "y", ")", ":", "\n", "        ", "return", "\"d{0}x{1}y\"", ".", "format", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.GridFeaturizer._featurize_grid": [[124, 136], ["game.get_max_bounds", "itertools.product", "range", "range", "range", "item.featurize", "range"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.get_max_bounds", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["def", "_featurize_grid", "(", "self", ",", "game", ",", "id", ")", ":", "\n", "        ", "max_w", ",", "max_h", "=", "game", ".", "get_max_bounds", "(", ")", "\n", "features", "=", "[", "[", "[", "]", "for", "y", "in", "range", "(", "max_w", ")", "]", "\n", "for", "x", "in", "range", "(", "max_h", ")", "]", "\n", "for", "(", "x", ",", "y", ")", "in", "itertools", ".", "product", "(", "range", "(", "game", ".", "width", ")", ",", "range", "(", "game", ".", "height", ")", ")", ":", "\n", "            ", "itemlst", "=", "game", ".", "_map", "[", "x", "]", "[", "y", "]", "\n", "for", "item", "in", "itemlst", ":", "\n", "                ", "if", "not", "item", ".", "visible", ":", "\n", "                    ", "continue", "\n", "", "features", "[", "x", "]", "[", "y", "]", "+=", "item", ".", "featurize", "(", ")", "\n", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.GridFeaturizer.all_possible_features": [[137, 139], ["featurizers.Featurizer.all_possible_features"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features"], ["", "def", "all_possible_features", "(", "self", ",", "game", ")", ":", "\n", "        ", "return", "super", "(", "GridFeaturizer", ",", "self", ")", ".", "all_possible_features", "(", "game", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.__init__": [[156, 160], ["kwargs.pop", "kwargs.pop", "mazebasev2.lib.mazebase.utils.mazeutils.AbsoluteLocationUtils.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "bounds", "=", "kwargs", ".", "pop", "(", "'bounds'", ",", "5", ")", "\n", "self", ".", "notify", "=", "kwargs", ".", "pop", "(", "'notify'", ",", "False", ")", "\n", "super", "(", "RelativeGridFeaturizer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer._featurize_grid": [[161, 181], ["game.get_max_bounds", "[].append", "itertools.product", "featurizers.RelativeGridFeaturizer._coords2loc", "range", "range", "range", "item.featurize", "range", "[].append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.get_max_bounds", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeLocationMixin._coords2loc", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "_featurize_grid", "(", "self", ",", "game", ",", "id", ")", ":", "\n", "        ", "tx", ",", "ty", "=", "game", ".", "_items", "[", "id", "]", ".", "location", "\n", "max_w", ",", "max_h", "=", "game", ".", "get_max_bounds", "(", ")", "\n", "features", "=", "[", "[", "[", "]", "for", "y", "in", "range", "(", "2", "*", "self", ".", "bounds", "-", "1", ")", "]", "\n", "for", "x", "in", "range", "(", "2", "*", "self", ".", "bounds", "-", "1", ")", "]", "\n", "center", "=", "self", ".", "bounds", "-", "1", "\n", "features", "[", "center", "]", "[", "center", "]", ".", "append", "(", "self", ".", "_coords2loc", "(", "tx", ",", "ty", ")", ")", "\n", "for", "(", "x", ",", "y", ")", "in", "itertools", ".", "product", "(", "range", "(", "2", "*", "self", ".", "bounds", "-", "1", ")", ",", "\n", "range", "(", "2", "*", "self", ".", "bounds", "-", "1", ")", ")", ":", "\n", "            ", "nx", ",", "ny", "=", "tx", "+", "x", "-", "center", ",", "ty", "+", "y", "-", "center", "\n", "if", "not", "(", "0", "<=", "nx", "<", "game", ".", "width", "and", "0", "<=", "ny", "<", "game", ".", "height", ")", ":", "\n", "                ", "if", "self", ".", "notify", ":", "features", "[", "x", "]", "[", "y", "]", ".", "append", "(", "\"OUT_OF_BOUNDS\"", ")", "\n", "continue", "\n", "", "itemlst", "=", "game", ".", "_map", "[", "nx", "]", "[", "ny", "]", "\n", "for", "item", "in", "itemlst", ":", "\n", "                ", "if", "not", "item", ".", "visible", ":", "\n", "                    ", "continue", "\n", "", "features", "[", "x", "]", "[", "y", "]", "+=", "item", ".", "featurize", "(", ")", "\n", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features": [[182, 186], ["featurizers.AbsoluteLocationMixin.all_possible_features", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features"], ["", "def", "all_possible_features", "(", "self", ",", "game", ")", ":", "\n", "        ", "fts", "=", "super", "(", "RelativeGridFeaturizer", ",", "self", ")", ".", "all_possible_features", "(", "game", ")", "\n", "fts", "+=", "[", "\"OUT_OF_BOUNDS\"", "]", "\n", "return", "list", "(", "sorted", "(", "fts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.SentenceFeaturesAbsolute.__init__": [[198, 200], ["mazebasev2.lib.mazebase.utils.mazeutils.AbsoluteLocationUtils.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SentenceFeaturesAbsolute", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.SentenceFeaturesAbsolute._featurize": [[201, 212], ["game.get_max_bounds", "game._items.items", "item.featurize", "featurizers.SentenceFeaturesAbsolute._coords2loc", "features.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.get_max_bounds", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeLocationMixin._coords2loc"], ["", "def", "_featurize", "(", "self", ",", "game", ",", "id", ")", ":", "\n", "        ", "max_w", ",", "max_h", "=", "game", ".", "get_max_bounds", "(", ")", "\n", "features", "=", "[", "]", "\n", "for", "id", ",", "item", "in", "game", ".", "_items", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "item", ".", "visible", ":", "\n", "                ", "continue", "\n", "", "feat", "=", "item", ".", "featurize", "(", ")", "\n", "location_feature", "=", "self", ".", "_coords2loc", "(", "*", "item", ".", "location", ")", "\n", "features", ".", "append", "(", "[", "location_feature", "]", "+", "feat", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.SentenceFeaturesRelative._featurize": [[226, 243], ["game.get_max_bounds", "game._items.items", "item.featurize", "featurizers.SentenceFeaturesRelative._coords2loc", "features.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.get_max_bounds", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeLocationMixin._coords2loc"], ["def", "_featurize", "(", "self", ",", "game", ",", "id", ")", ":", "\n", "        ", "tx", ",", "ty", "=", "game", ".", "_items", "[", "id", "]", ".", "location", "\n", "max_w", ",", "max_h", "=", "game", ".", "get_max_bounds", "(", ")", "\n", "features", "=", "[", "]", "\n", "for", "id", ",", "item", "in", "game", ".", "_items", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "item", ".", "visible", ":", "\n", "                ", "continue", "\n", "", "x", ",", "y", "=", "item", ".", "location", "\n", "dx", ",", "dy", "=", "tx", "-", "x", ",", "ty", "-", "y", "\n", "if", "not", "(", "-", "self", ".", "bounds", "<", "dx", "<", "self", ".", "bounds", "and", "\n", "-", "self", ".", "bounds", "<", "dy", "<", "self", ".", "bounds", ")", ":", "\n", "                ", "continue", "\n", "", "feat", "=", "item", ".", "featurize", "(", ")", "\n", "location_feature", "=", "self", ".", "_coords2loc", "(", "dx", ",", "dy", ")", "\n", "features", ".", "append", "(", "[", "location_feature", "]", "+", "feat", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.vocabify": [[249, 270], ["dict", "np.zeros", "itertools.product", "enumerate", "len", "len", "range", "range", "enumerate", "game.all_possible_features"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features"], ["", "", "def", "vocabify", "(", "game", ",", "observation", ",", "np", "=", "None", ",", "vocab", "=", "None", ")", ":", "\n", "    ", "'''\n    Changes the outputs of SentenceFeaturizer subclasses to a numerical\n    representation. Also works on side_info.\n\n    Pass in numpy module to np to use it instead of lists.\n    '''", "\n", "if", "vocab", "is", "None", ":", "\n", "        ", "vocab", "=", "dict", "(", "[", "(", "b", ",", "a", ")", "for", "a", ",", "b", "in", "\n", "enumerate", "(", "game", ".", "all_possible_features", "(", ")", ")", "]", ")", "\n", "", "if", "np", "is", "None", ":", "\n", "        ", "for", "sent", "in", "observation", ":", "\n", "            ", "for", "i", ",", "word", "in", "enumerate", "(", "sent", ")", ":", "\n", "                ", "sent", "[", "i", "]", "=", "vocab", "[", "word", "]", "\n", "", "", "return", "observation", "\n", "", "else", ":", "\n", "        ", "shape", "=", "(", "len", "(", "observation", ")", ",", "len", "(", "observation", "[", "0", "]", ")", ")", "\n", "arr", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "for", "x", ",", "y", "in", "itertools", ".", "product", "(", "range", "(", "shape", "[", "0", "]", ")", ",", "range", "(", "shape", "[", "1", "]", ")", ")", ":", "\n", "            ", "arr", "[", "x", "]", "[", "y", "]", "=", "vocab", "[", "observation", "[", "x", "]", "[", "y", "]", "]", "\n", "", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.grid_one_hot": [[272, 301], ["dict", "enumerate", "np.zeros", "itertools.product", "enumerate", "len", "len", "len", "range", "range", "enumerate", "game.all_possible_features"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features"], ["", "", "def", "grid_one_hot", "(", "game", ",", "observation", ",", "np", "=", "None", ",", "vocab", "=", "None", ")", ":", "\n", "    ", "'''\n    THIS ISN'T ACTUALLY ONE HOT, IT IS FEW HOT\n\n    In place transformation:\n    Changes the outputs of GridFeaturizers to a few hot representation,\n    with feature plane size `x \\\\times y \\\\times nfeatures`.\n\n    pass in the numpy module to np to return a numpy array,\n    which is far more efficient than using lists.\n    '''", "\n", "if", "vocab", "is", "None", ":", "\n", "        ", "vocab", "=", "dict", "(", "[", "(", "b", ",", "a", ")", "for", "a", ",", "b", "in", "\n", "enumerate", "(", "game", ".", "all_possible_features", "(", ")", ")", "]", ")", "\n", "", "if", "np", "is", "None", ":", "\n", "        ", "for", "x", ",", "col", "in", "enumerate", "(", "observation", ")", ":", "\n", "            ", "for", "y", ",", "lst", "in", "enumerate", "(", "col", ")", ":", "\n", "                ", "features", "=", "[", "0", "for", "w", "in", "vocab", "]", "\n", "for", "feat", "in", "lst", ":", "\n", "                    ", "features", "[", "vocab", "[", "feat", "]", "]", "=", "1", "\n", "", "observation", "[", "x", "]", "[", "y", "]", "=", "features", "\n", "", "", "return", "observation", "\n", "", "else", ":", "\n", "        ", "xm", ",", "ym", ",", "zm", "=", "len", "(", "observation", "[", "0", "]", ")", ",", "len", "(", "observation", "[", "1", "]", ")", ",", "len", "(", "vocab", ")", "\n", "arr", "=", "np", ".", "zeros", "(", "(", "xm", ",", "ym", ",", "zm", ")", ")", "\n", "for", "x", ",", "y", "in", "itertools", ".", "product", "(", "range", "(", "xm", ")", ",", "range", "(", "ym", ")", ")", ":", "\n", "            ", "for", "feat", "in", "observation", "[", "x", "]", "[", "y", "]", ":", "\n", "                ", "arr", "[", "x", "]", "[", "y", "]", "[", "vocab", "[", "feat", "]", "]", "=", "1", "\n", "", "", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.grid_one_hot_sparse": [[303, 320], ["dict", "enumerate", "enumerate", "enumerate", "res.append", "game.all_possible_features"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeGridFeaturizer.all_possible_features"], ["", "", "def", "grid_one_hot_sparse", "(", "game", ",", "observation", ",", "np", "=", "None", ")", ":", "\n", "    ", "'''\n    No longer in place.\n\n    Returns a sparse list of (x, y, vocab_i), but otherwise same as above.\n\n    Mostly used for python-lua bridge, since the communication costs\n    there are relatively high\n    '''", "\n", "vocab", "=", "dict", "(", "[", "(", "b", ",", "a", ")", "for", "a", ",", "b", "in", "\n", "enumerate", "(", "game", ".", "all_possible_features", "(", ")", ")", "]", ")", "\n", "res", "=", "[", "]", "\n", "for", "x", ",", "col", "in", "enumerate", "(", "observation", ")", ":", "\n", "        ", "for", "y", ",", "lst", "in", "enumerate", "(", "col", ")", ":", "\n", "            ", "for", "feat", "in", "lst", ":", "\n", "                ", "res", ".", "append", "(", "(", "x", ",", "y", ",", "vocab", "[", "feat", "]", ")", ")", "\n", "", "", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.PushBlock._reset": [[55, 80], ["super()._reset", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.Switch", "blocks_switches_games.PushBlock._add_item", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.Pushable", "blocks_switches_games.PushBlock._add_item", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "blocks_switches_games.pbwps", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "blocks_switches_games.PushBlockAgent", "blocks_switches_games.PushBlock._add_agent", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.pbwps", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations"], ["def", "_reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "PushBlock", ",", "self", ")", ".", "_reset", "(", ")", "\n", "\n", "self", ".", "sw_loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ")", ")", "\n", "self", ".", "sw", "=", "mi", ".", "Switch", "(", "location", "=", "self", ".", "sw_loc", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "sw", ")", "\n", "\n", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ")", ")", "\n", "self", ".", "pushable", "=", "mi", ".", "Pushable", "(", "location", "=", "(", "x", ",", "y", ")", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "pushable", ")", "\n", "\n", "visited", ",", "p", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "(", "x", ",", "y", ")", ",", "\n", "creationutils", ".", "pushblock_movefunc", ")", "\n", "if", "self", ".", "sw_loc", "not", "in", "visited", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to sw\"", ")", "\n", "", "self", ".", "waypoints", "=", "pbwps", "(", "p", ",", "self", ".", "pushable", ".", "location", ",", "self", ".", "sw", ".", "location", ")", "\n", "\n", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "\n", "bad_blocks", "=", "[", "mi", ".", "Block", "]", ")", ")", "\n", "self", ".", "agent", "=", "PushBlockAgent", "(", "location", "=", "(", "x", ",", "y", ")", ")", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"PushBlockAgent\"", ")", "\n", "visited", ",", "_", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "(", "x", ",", "y", ")", ",", "\n", "creationutils", ".", "agent_movefunc", ")", "\n", "if", "self", ".", "waypoints", "[", "0", "]", "not", "in", "visited", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to pushblock\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.PushBlock._side_information": [[81, 86], ["super()._side_information", "blocks_switches_games.PushBlock.sw.featurize", "blocks_switches_games.PushBlock.pushable.featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "PushBlock", ",", "self", ")", ".", "_side_information", "(", ")", "+", "[", "[", "self", ".", "FEATURE", ".", "PUSH", "]", "+", "\n", "self", ".", "pushable", ".", "featurize", "(", ")", "+", "\n", "self", ".", "sw", ".", "featurize", "(", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.PushBlock._finished": [[88, 90], ["None"], "methods", ["None"], ["", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pushable", ".", "location", "==", "self", ".", "sw_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.PushBlock._calculate_approximate_reward": [[91, 99], ["blocks_switches_games._est", "super()._calculate_approximate_reward"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward"], ["", "def", "_calculate_approximate_reward", "(", "self", ")", ":", "\n", "        ", "'''Approximation used: Agent can move through push-block '''", "\n", "cur", "=", "self", ".", "agent", ".", "location", "\n", "r", "=", "0", "\n", "for", "loc", "in", "self", ".", "waypoints", ":", "\n", "            ", "r", "+=", "_est", "(", "self", ",", "cur", ",", "loc", ")", "\n", "cur", "=", "loc", "\n", "", "return", "super", "(", "PushBlock", ",", "self", ")", ".", "_calculate_approximate_reward", "(", ")", "+", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.PushBlockCardinal._reset": [[104, 135], ["super()._reset", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.Pushable", "blocks_switches_games.PushBlockCardinal._add_item", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "min", "blocks_switches_games.pbwps", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "blocks_switches_games.PushBlockAgent", "blocks_switches_games.PushBlockCardinal._add_agent", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "set", "any", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "set", "set", "range", "set", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.pbwps", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations"], ["def", "_reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "PushBlockCardinal", ",", "self", ")", ".", "_reset", "(", ")", "\n", "\n", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ")", ")", "\n", "self", ".", "pushable", "=", "mi", ".", "Pushable", "(", "location", "=", "(", "x", ",", "y", ")", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "pushable", ")", "\n", "self", ".", "direction", "=", "choice", "(", "[", "self", ".", "FEATURE", ".", "UP", ",", "\n", "self", ".", "FEATURE", ".", "DOWN", ",", "\n", "self", ".", "FEATURE", ".", "LEFT", ",", "\n", "self", ".", "FEATURE", ".", "RIGHT", ",", "\n", "]", ")", "\n", "if", "self", ".", "direction", "==", "self", ".", "FEATURE", ".", "UP", ":", "\n", "            ", "self", ".", "goals", "=", "set", "(", "(", "i", ",", "self", ".", "height", ")", "for", "i", "in", "range", "(", "self", ".", "width", ")", ")", "\n", "", "elif", "self", ".", "direction", "==", "self", ".", "FEATURE", ".", "DOWN", ":", "\n", "            ", "self", ".", "goals", "=", "set", "(", "(", "i", ",", "0", ")", "for", "i", "in", "range", "(", "self", ".", "width", ")", ")", "\n", "", "elif", "self", ".", "direction", "==", "self", ".", "FEATURE", ".", "LEFT", ":", "\n", "            ", "self", ".", "goals", "=", "set", "(", "(", "0", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "height", ")", ")", "\n", "", "elif", "self", ".", "direction", "==", "self", ".", "FEATURE", ".", "RIGHT", ":", "\n", "            ", "self", ".", "goals", "=", "set", "(", "(", "self", ".", "width", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "height", ")", ")", "\n", "\n", "", "visited", ",", "p", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "(", "x", ",", "y", ")", ",", "\n", "creationutils", ".", "pushblock_movefunc", ")", "\n", "if", "not", "any", "(", "x", "in", "visited", "for", "x", "in", "self", ".", "goals", ")", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to goal\"", ")", "\n", "", "closest", "=", "min", "(", "self", ".", "goals", ",", "key", "=", "lambda", "loc", ":", "visited", "[", "loc", "]", ")", "\n", "self", ".", "waypoints", "=", "pbwps", "(", "p", ",", "self", ".", "pushable", ".", "location", ",", "closest", ")", "\n", "\n", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "\n", "bad_blocks", "=", "[", "mi", ".", "Block", "]", ")", ")", "\n", "self", ".", "agent", "=", "PushBlockAgent", "(", "location", "=", "(", "x", ",", "y", ")", ")", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"PushBlockCardinalAgent\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.PushBlockCardinal._side_information": [[136, 139], ["super()._side_information", "blocks_switches_games.PushBlockCardinal.pushable.featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "PushBlockCardinal", ",", "self", ")", ".", "_side_information", "(", ")", "+", "[", "[", "self", ".", "FEATURE", ".", "PUSH", ",", "self", ".", "direction", "]", "+", "self", ".", "pushable", ".", "featurize", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.PushBlockCardinal._finished": [[140, 142], ["any"], "methods", ["None"], ["", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "return", "any", "(", "x", "==", "self", ".", "pushable", ".", "location", "for", "x", "in", "self", ".", "goals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.PushBlockCardinal._calculate_approximate_reward": [[143, 156], ["blocks_switches_games._est", "super()._calculate_approximate_reward"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward"], ["", "def", "_calculate_approximate_reward", "(", "self", ")", ":", "\n", "        ", "'''\n        Approximation used:\n            Agent can move through push-block\n            The point on the wall to move block to is the one closest to block\n        '''", "\n", "cur", "=", "self", ".", "agent", ".", "location", "\n", "r", "=", "0", "\n", "for", "loc", "in", "self", ".", "waypoints", ":", "\n", "            ", "r", "+=", "_est", "(", "self", ",", "cur", ",", "loc", ")", "\n", "cur", "=", "loc", "\n", "", "return", "super", "(", "PushBlockCardinal", ",", "\n", "self", ")", ".", "_calculate_approximate_reward", "(", ")", "+", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.Switches.__init__": [[166, 169], ["mazebasev2.lib.mazebase.utils.mazeutils.populate_kwargs", "mazebasev2.lib.mazebase.games.RewardOnEndMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "super", "(", "Switches", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.Switches._reset": [[170, 191], ["super()._reset", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "blocks_switches_games.SwitchesAgent", "blocks_switches_games.Switches._add_agent", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "range", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "blocks_switches_games.Switches._switches.append", "blocks_switches_games.Switches._add_item", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.Switch", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "range"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "Switches", ",", "self", ")", ".", "_reset", "(", ")", "\n", "\n", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "bad_blocks", "=", "[", "mi", ".", "Block", "]", ")", ")", "\n", "self", ".", "agent", "=", "SwitchesAgent", "(", "location", "=", "loc", ")", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"SwitchesAgent\"", ")", "\n", "\n", "visited", ",", "_", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "loc", ",", "\n", "creationutils", ".", "agent_movefunc", ")", "\n", "\n", "self", ".", "_switches", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "n_switches", ")", ":", "\n", "            ", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ")", ")", "\n", "self", ".", "_switches", ".", "append", "(", "mi", ".", "Switch", "(", "\n", "location", "=", "loc", ",", "\n", "nstates", "=", "self", ".", "switch_states", ",", "\n", "start_state", "=", "choice", "(", "range", "(", "self", ".", "switch_states", ")", ")", ",", "\n", ")", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "_switches", "[", "-", "1", "]", ")", "\n", "if", "loc", "not", "in", "visited", ":", "\n", "                ", "raise", "MazeException", "(", "\"No path to goal\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.Switches._finished": [[192, 194], ["len", "set"], "methods", ["None"], ["", "", "", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "set", "(", "x", ".", "state", "for", "x", "in", "self", ".", "_switches", ")", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.Switches._side_information": [[195, 200], ["super()._side_information"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information"], ["", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "Switches", ",", "self", ")", ".", "_side_information", "(", ")", "+", "[", "[", "self", ".", "FEATURE", ".", "SWITCH", ",", "\n", "self", ".", "FEATURE", ".", "STATE", ",", "\n", "self", ".", "FEATURE", ".", "SAME", ",", "\n", "]", "]", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.Switches._calculate_approximate_reward": [[202, 224], ["print", "enumerate", "enumerate", "min", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "min", "to_visit.remove", "sum", "enumerate", "super()._calculate_approximate_reward"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward"], ["", "def", "_calculate_approximate_reward", "(", "self", ")", ":", "\n", "        ", "'''Greedy solution that visits each switch in turn'''", "\n", "best", "=", "1e100", "\n", "sw_colors", "=", "[", "sw", ".", "state", "for", "sw", "in", "self", ".", "_switches", "]", "\n", "print", "(", "sw_colors", ")", "\n", "for", "i", ",", "sw", "in", "enumerate", "(", "self", ".", "_switches", ")", ":", "\n", "            ", "tmp", "=", "[", "(", "sw", ".", "state", "-", "c", ")", "%", "self", ".", "switch_states", "for", "c", "in", "sw_colors", "]", "\n", "# Heuristic for perferring not needing to flip switches", "\n", "best", "=", "min", "(", "best", ",", "sum", "(", "x", "if", "x", ">", "0", "else", "-", "2", "for", "x", "in", "tmp", ")", ")", "\n", "\n", "", "to_visit", "=", "[", "sw", ".", "location", "for", "sw", "in", "self", ".", "_switches", "]", "\n", "loc", "=", "self", ".", "agent", ".", "location", "\n", "r", "=", "0", "\n", "for", "i", ",", "sw", "in", "enumerate", "(", "self", ".", "_switches", ")", ":", "\n", "            ", "visited", ",", "path", "=", "creationutils", ".", "dijkstra", "(", "\n", "self", ",", "loc", ",", "creationutils", ".", "agent_movefunc", ",", "True", ")", "\n", "ind", ",", "loc", "=", "min", "(", "enumerate", "(", "to_visit", ")", ",", "key", "=", "lambda", "x", ":", "visited", "[", "x", "[", "1", "]", "]", ")", "\n", "r", "-=", "visited", "[", "loc", "]", "# Reward is negative of path", "\n", "to_visit", ".", "remove", "(", "loc", ")", "\n", "", "return", "super", "(", "Switches", ",", "\n", "self", ")", ".", "_calculate_approximate_reward", "(", ")", "+", "r", "-", "best", "*", "self", ".", "turn_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.LightKey.__init__": [[249, 252], ["mazebasev2.lib.mazebase.utils.mazeutils.populate_kwargs", "mazebasev2.lib.mazebase.games.RewardOnEndMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "super", "(", "LightKey", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.LightKey._reset": [[253, 288], ["blocks_switches_games.add_vertical_wall", "mazebasev2.Door", "blocks_switches_games.LightKey._add_item", "super()._reset", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.Goal", "blocks_switches_games.LightKey._add_item", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.Switch", "blocks_switches_games.LightKey._add_item", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "blocks_switches_games.SwitchesAgent", "blocks_switches_games.LightKey._add_agent", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "range"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.add_vertical_wall", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "hole", ",", "dim", "=", "add_vertical_wall", "(", "self", ")", "\n", "\n", "# Add the door", "\n", "self", ".", "door", "=", "mi", ".", "Door", "(", "location", "=", "hole", ",", "\n", "state", "=", "choice", "(", "range", "(", "1", ",", "self", ".", "switch_states", ")", ")", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "door", ")", "\n", "\n", "# Add additional blocks and waters", "\n", "super", "(", "LightKey", ",", "self", ")", ".", "_reset", "(", ")", "\n", "\n", "# Add the goal, agent, and switch", "\n", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "\n", "self", ",", "bad_blocks", "=", "[", "mi", ".", "Block", ",", "mi", ".", "Door", "]", ")", ")", "\n", "self", ".", "goal", "=", "mi", ".", "Goal", "(", "location", "=", "loc", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "goal", ")", "\n", "side", "=", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "def", "mask_func", "(", "x", ",", "y", ")", ":", "\n", "            ", "return", "side", "*", "(", "(", "x", ",", "y", ")", "[", "1", "-", "dim", "]", "-", "hole", "[", "1", "-", "dim", "]", ")", ">", "0", "\n", "\n", "", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "\n", "self", ",", "bad_blocks", "=", "[", "mi", ".", "Block", ",", "mi", ".", "Door", ",", "mi", ".", "Goal", "]", ",", "mask", "=", "mask_func", ")", ")", "\n", "self", ".", "sw", "=", "mi", ".", "Switch", "(", "location", "=", "loc", ",", "nstates", "=", "self", ".", "switch_states", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "sw", ")", "\n", "\n", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "\n", "self", ",", "bad_blocks", "=", "[", "mi", ".", "Block", ",", "mi", ".", "Door", "]", ",", "mask", "=", "mask_func", ")", ")", "\n", "self", ".", "agent", "=", "SwitchesAgent", "(", "location", "=", "loc", ")", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"LightKeyAgent\"", ")", "\n", "\n", "visited", ",", "_", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "loc", ",", "\n", "creationutils", ".", "agent_movefunc", ")", "\n", "if", "self", ".", "goal", ".", "location", "not", "in", "visited", "or", "self", ".", "sw", ".", "location", "not", "in", "visited", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to goal\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.LightKey._step": [[289, 295], ["blocks_switches_games.LightKey.door.open", "blocks_switches_games.LightKey.door.close"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.close"], ["", "", "def", "_step", "(", "self", ")", ":", "\n", "# Hook the door up to the switch", "\n", "        ", "if", "self", ".", "sw", ".", "state", "==", "self", ".", "door", ".", "state", ":", "\n", "            ", "self", ".", "door", ".", "open", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "door", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.LightKey._finished": [[296, 298], ["None"], "methods", ["None"], ["", "", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "agent", ".", "location", "==", "self", ".", "goal", ".", "location", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.LightKey._side_information": [[299, 302], ["super()._side_information", "blocks_switches_games.LightKey.goal.featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "LightKey", ",", "self", ")", ".", "_side_information", "(", ")", "+", "[", "[", "self", ".", "FEATURE", ".", "GOTO", "]", "+", "self", ".", "goal", ".", "featurize", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.LightKey._calculate_approximate_reward": [[303, 313], ["blocks_switches_games._est", "super()._calculate_approximate_reward", "blocks_switches_games._est", "blocks_switches_games._est"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est"], ["", "def", "_calculate_approximate_reward", "(", "self", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "door", ".", "location", "\n", "saved", "=", "self", ".", "_approx_reward_map", "[", "x", "]", "[", "y", "]", "\n", "self", ".", "_approx_reward_map", "[", "x", "]", "[", "y", "]", "=", "-", "1e100", "\n", "r", "=", "_est", "(", "self", ",", "self", ".", "agent", ".", "location", ",", "self", ".", "goal", ".", "location", ")", "\n", "if", "r", "<", "-", "1e90", ":", "\n", "            ", "self", ".", "_approx_reward_map", "[", "x", "]", "[", "y", "]", "=", "saved", "\n", "r", "=", "_est", "(", "self", ",", "self", ".", "agent", ".", "location", ",", "self", ".", "sw", ".", "location", ")", "+", "_est", "(", "self", ",", "self", ".", "sw", ".", "location", ",", "self", ".", "goal", ".", "location", ")", "\n", "", "return", "super", "(", "LightKey", ",", "self", ")", ".", "_calculate_approximate_reward", "(", ")", "+", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.BlockedDoor._reset": [[318, 345], ["blocks_switches_games.add_vertical_wall", "mazebasev2.Pushable", "blocks_switches_games.BlockedDoor._add_item", "super()._reset", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.Goal", "blocks_switches_games.BlockedDoor._add_item", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "blocks_switches_games.PushBlockAgent", "blocks_switches_games.BlockedDoor._add_agent", "blocks_switches_games.BlockedDoor._remove_item", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "blocks_switches_games.BlockedDoor._add_item", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.add_vertical_wall", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._remove_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations"], ["def", "_reset", "(", "self", ")", ":", "\n", "        ", "hole", ",", "dim", "=", "add_vertical_wall", "(", "self", ")", "\n", "\n", "# Add the pushblock", "\n", "self", ".", "pushable", "=", "mi", ".", "Pushable", "(", "location", "=", "hole", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "pushable", ")", "\n", "\n", "# Add additional blocks and waters", "\n", "super", "(", "BlockedDoor", ",", "self", ")", ".", "_reset", "(", ")", "\n", "\n", "# Add the goal, and agent", "\n", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "\n", "self", ",", "bad_blocks", "=", "[", "mi", ".", "Block", ",", "mi", ".", "Door", "]", ")", ")", "\n", "self", ".", "goal", "=", "mi", ".", "Goal", "(", "location", "=", "loc", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "goal", ")", "\n", "\n", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "\n", "self", ",", "bad_blocks", "=", "[", "mi", ".", "Block", ",", "mi", ".", "Door", "]", ")", ")", "\n", "self", ".", "agent", "=", "PushBlockAgent", "(", "location", "=", "loc", ")", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"BlockedDoorAgent\"", ")", "\n", "\n", "self", ".", "_remove_item", "(", "self", ".", "pushable", ".", "id", ")", "\n", "visited", ",", "_", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "loc", ",", "\n", "creationutils", ".", "agent_movefunc", ")", "\n", "if", "self", ".", "goal", ".", "location", "not", "in", "visited", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to goal\"", ")", "\n", "", "self", ".", "_add_item", "(", "self", ".", "pushable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.BlockedDoor._finished": [[346, 348], ["None"], "methods", ["None"], ["", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "agent", ".", "location", "==", "self", ".", "goal", ".", "location", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.BlockedDoor._side_information": [[349, 352], ["super()._side_information", "blocks_switches_games.BlockedDoor.goal.featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "BlockedDoor", ",", "self", ")", ".", "_side_information", "(", ")", "+", "[", "[", "self", ".", "FEATURE", ".", "GOTO", "]", "+", "self", ".", "goal", ".", "featurize", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.BlockedDoor._calculate_approximate_reward": [[353, 361], ["blocks_switches_games._est", "blocks_switches_games.BlockedDoor._remove_item", "blocks_switches_games._est", "blocks_switches_games.BlockedDoor._add_item", "super()._calculate_approximate_reward"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._remove_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward"], ["", "def", "_calculate_approximate_reward", "(", "self", ")", ":", "\n", "        ", "r", "=", "_est", "(", "self", ",", "self", ".", "agent", ".", "location", ",", "self", ".", "goal", ".", "location", ")", "\n", "if", "r", "<", "-", "1e90", ":", "\n", "            ", "self", ".", "_remove_item", "(", "self", ".", "pushable", ".", "id", ")", "\n", "r", "=", "_est", "(", "self", ",", "self", ".", "agent", ".", "location", ",", "self", ".", "goal", ".", "location", ")", "\n", "r", "-=", "4", "*", "self", ".", "turn_penalty", "# Heuristic for pushing block", "\n", "self", ".", "_add_item", "(", "self", ".", "pushable", ")", "\n", "", "return", "super", "(", "BlockedDoor", ",", "self", ")", ".", "_calculate_approximate_reward", "(", ")", "+", "r", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games._est": [[32, 37], ["mazebasev2.lib.mazebase.utils.creationutils.dijkstra"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra"], ["", "def", "_est", "(", "game", ",", "s", ",", "e", ")", ":", "\n", "    ", "'''shorthand to estimate reward for an agent to move from s to e'''", "\n", "visited", ",", "path", "=", "creationutils", ".", "dijkstra", "(", "\n", "game", ",", "s", ",", "creationutils", ".", "agent_movefunc", ",", "True", ")", "\n", "return", "-", "visited", "[", "e", "]", "# Returns distance, which is negation of reward", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.pbwps": [[39, 50], ["path.reverse", "zip", "path.append", "waypoints.append"], "function", ["None"], ["", "def", "pbwps", "(", "p", ",", "start", ",", "end", ")", ":", "\n", "    ", "path", "=", "[", "end", "]", "\n", "while", "path", "[", "-", "1", "]", "!=", "start", ":", "\n", "        ", "path", ".", "append", "(", "p", "[", "path", "[", "-", "1", "]", "]", ")", "\n", "", "waypoints", "=", "[", "]", "\n", "path", ".", "reverse", "(", ")", "\n", "for", "i", ",", "j", "in", "zip", "(", "path", "[", ":", "-", "1", "]", ",", "path", "[", "1", ":", "]", ")", ":", "\n", "        ", "x", ",", "y", "=", "i", "\n", "nx", ",", "ny", "=", "j", "\n", "waypoints", ".", "append", "(", "(", "2", "*", "x", "-", "nx", ",", "2", "*", "y", "-", "ny", ")", ")", "\n", "", "return", "waypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.blocks_switches_games.add_vertical_wall": [[226, 241], ["mazebasev2.lib.mazebase.utils.mazeutils.choice", "random.randint", "random.randint", "range", "game._add_item", "mazebasev2.Block"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item"], ["", "", "def", "add_vertical_wall", "(", "game", ")", ":", "\n", "    ", "size", "=", "(", "game", ".", "width", ",", "game", ".", "height", ")", "\n", "dim", "=", "choice", "(", "[", "0", ",", "1", "]", ")", "\n", "line", "=", "randint", "(", "1", ",", "size", "[", "1", "-", "dim", "]", "-", "2", ")", "\n", "opening", "=", "randint", "(", "0", ",", "size", "[", "dim", "]", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "size", "[", "dim", "]", ")", ":", "\n", "        ", "if", "i", "!=", "opening", ":", "\n", "            ", "loc", "=", "[", "line", ",", "line", "]", "\n", "loc", "[", "dim", "]", "=", "i", "\n", "game", ".", "_add_item", "(", "mi", ".", "Block", "(", "location", "=", "loc", ")", ")", "\n", "\n", "", "", "loc", "=", "[", "line", ",", "line", "]", "\n", "loc", "[", "dim", "]", "=", "opening", "\n", "\n", "return", "loc", ",", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.SingleGoalApproximateRewardMixin._calculate_approximate_reward": [[40, 44], ["goal_based_games._est", "super()._calculate_approximate_reward"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward"], ["    ", "def", "_calculate_approximate_reward", "(", "self", ")", ":", "\n", "        ", "r", "=", "_est", "(", "self", ",", "self", ".", "agent", ".", "location", ",", "self", ".", "goal", ".", "location", ")", "\n", "return", "super", "(", "SingleGoalApproximateRewardMixin", ",", "\n", "self", ")", ".", "_calculate_approximate_reward", "(", ")", "+", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.SingleGoal._reset": [[49, 64], ["super()._reset", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.Goal", "goal_based_games.SingleGoal._add_item", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "goal_based_games.MovingAgent", "goal_based_games.SingleGoal._add_agent", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations"], ["def", "_reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "SingleGoal", ",", "self", ")", ".", "_reset", "(", ")", "\n", "\n", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ")", ")", "\n", "self", ".", "goal", "=", "mi", ".", "Goal", "(", "location", "=", "loc", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "goal", ")", "\n", "\n", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "bad_blocks", "=", "[", "mi", ".", "Block", "]", ")", ")", "\n", "self", ".", "agent", "=", "MovingAgent", "(", "location", "=", "loc", ")", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"SingleGoalAgent\"", ")", "\n", "\n", "visited", ",", "_", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "loc", ",", "\n", "creationutils", ".", "agent_movefunc", ")", "\n", "if", "self", ".", "goal", ".", "location", "not", "in", "visited", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to goal\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.SingleGoal._side_information": [[65, 68], ["super()._side_information", "goal_based_games.SingleGoal.goal.featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "SingleGoal", ",", "self", ")", ".", "_side_information", "(", ")", "+", "[", "[", "self", ".", "FEATURE", ".", "GOTO", "]", "+", "self", ".", "goal", ".", "featurize", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.SingleGoal._finished": [[69, 71], ["None"], "methods", ["None"], ["", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "agent", ".", "location", "==", "self", ".", "goal", ".", "location", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.MultiGoals.__init__": [[81, 84], ["mazebasev2.lib.mazebase.utils.mazeutils.populate_kwargs", "RewardOnEndMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "super", "(", "MultiGoals", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.MultiGoals._reset": [[85, 105], ["super()._reset", "six.moves.range", "random.shuffle", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "goal_based_games.MovingAgent", "goal_based_games.MultiGoals._add_agent", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "goal_based_games.MultiGoals.goals.append", "goal_based_games.MultiGoals._add_item", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "all", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.Goal"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "MultiGoals", ",", "self", ")", ".", "_reset", "(", ")", "\n", "\n", "self", ".", "goals", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_goals", ")", ":", "\n", "            ", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ")", ")", "\n", "self", ".", "goals", ".", "append", "(", "mi", ".", "Goal", "(", "location", "=", "(", "x", ",", "y", ")", ",", "id", "=", "i", ")", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "goals", "[", "i", "]", ")", "\n", "", "shuffle", "(", "self", ".", "goals", ")", "\n", "self", ".", "v", "=", "0", "\n", "\n", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "\n", "bad_blocks", "=", "[", "mi", ".", "Block", "]", ")", ")", "\n", "self", ".", "agent", "=", "MovingAgent", "(", "location", "=", "(", "x", ",", "y", ")", ")", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"MultiGoalsAgent\"", ")", "\n", "\n", "visited", ",", "_", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "(", "x", ",", "y", ")", ",", "\n", "creationutils", ".", "agent_movefunc", ")", "\n", "if", "not", "all", "(", "goal", ".", "location", "in", "visited", "for", "goal", "in", "self", ".", "goals", ")", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to goal\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.MultiGoals._side_information": [[106, 110], ["super()._side_information", "x.featurize", "enumerate"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "MultiGoals", ",", "self", ")", ".", "_side_information", "(", ")", "+", "[", "[", "self", ".", "FEATURE", ".", "ORDERED_OBJ", "[", "i", "]", ",", "self", ".", "FEATURE", ".", "GOTO", "]", "+", "x", ".", "featurize", "(", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "goals", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.MultiGoals._step": [[111, 114], ["None"], "methods", ["None"], ["", "def", "_step", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "agent", ".", "location", "==", "self", ".", "goals", "[", "self", ".", "v", "]", ".", "location", ":", "\n", "            ", "self", ".", "v", "=", "self", ".", "v", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.MultiGoals._finished": [[115, 117], ["None"], "methods", ["None"], ["", "", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "v", "==", "self", ".", "n_goals", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.MultiGoals._calculate_approximate_reward": [[118, 122], ["sum", "super()._calculate_approximate_reward", "goal_based_games._est", "zip"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est"], ["", "def", "_calculate_approximate_reward", "(", "self", ")", ":", "\n", "        ", "locs", "=", "[", "self", ".", "agent", ".", "location", "]", "+", "[", "g", ".", "location", "for", "g", "in", "self", ".", "goals", "]", "\n", "r", "=", "sum", "(", "_est", "(", "self", ",", "l1", ",", "l2", ")", "for", "l1", ",", "l2", "in", "zip", "(", "locs", "[", ":", "-", "1", "]", ",", "locs", "[", "1", ":", "]", ")", ")", "\n", "return", "super", "(", "MultiGoals", ",", "self", ")", ".", "_calculate_approximate_reward", "(", ")", "+", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.ConditionedGoals.__init__": [[138, 141], ["mazebasev2.lib.mazebase.utils.mazeutils.populate_kwargs", "RewardOnEndMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "super", "(", "ConditionedGoals", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.ConditionedGoals._reset": [[142, 172], ["super()._reset", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.Switch", "goal_based_games.ConditionedGoals._add_item", "six.moves.range", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "goal_based_games.TogglingAgent", "goal_based_games.ConditionedGoals._add_agent", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "goal_based_games.ConditionedGoals.goals.append", "goal_based_games.ConditionedGoals._add_item", "random.randint", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.Goal", "any", "six.moves.range", "set"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConditionedGoals", ",", "self", ")", ".", "_reset", "(", ")", "\n", "\n", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ")", ")", "\n", "self", ".", "sw", "=", "mi", ".", "Switch", "(", "\n", "location", "=", "(", "x", ",", "y", ")", ",", "\n", "nstates", "=", "self", ".", "n_colors", ",", "\n", "start_state", "=", "choice", "(", "range", "(", "self", ".", "n_colors", ")", ")", ",", "\n", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "sw", ")", "\n", "\n", "self", ".", "goals", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_goals", ")", ":", "\n", "            ", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ")", ")", "\n", "self", ".", "goals", ".", "append", "(", "mi", ".", "Goal", "(", "location", "=", "(", "x", ",", "y", ")", ",", "id", "=", "i", ")", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "goals", "[", "i", "]", ")", "\n", "", "self", ".", "conditions", "=", "[", "randint", "(", "0", ",", "self", ".", "n_goals", "-", "1", ")", "for", "_", "in", "self", ".", "goals", "]", "\n", "\n", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "\n", "bad_blocks", "=", "[", "mi", ".", "Block", "]", ")", ")", "\n", "self", ".", "agent", "=", "TogglingAgent", "(", "location", "=", "(", "x", ",", "y", ")", ")", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"ConditionedGoalsAgent\"", ")", "\n", "\n", "visited", ",", "_", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "(", "x", ",", "y", ")", ",", "\n", "creationutils", ".", "agent_movefunc", ")", "\n", "\n", "if", "(", "self", ".", "sw", ".", "location", "not", "in", "visited", "or", "\n", "not", "any", "(", "self", ".", "goals", "[", "i", "]", ".", "location", "in", "visited", "\n", "for", "i", "in", "set", "(", "self", ".", "conditions", ")", ")", ")", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to goal\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.ConditionedGoals._get_reward": [[173, 183], ["super()._get_reward", "set", "len", "set.remove"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._get_reward"], ["", "", "def", "_get_reward", "(", "self", ",", "id", ")", ":", "\n", "        ", "reward", "=", "super", "(", "ConditionedGoals", ",", "self", ")", ".", "_get_reward", "(", "id", ")", "\n", "forbiddens", "=", "set", "(", "g", ".", "location", "for", "g", "in", "self", ".", "goals", ")", "\n", "if", "self", ".", "sw", ".", "state", "<", "len", "(", "self", ".", "conditions", ")", ":", "\n", "            ", "forbiddens", ".", "remove", "(", "\n", "self", ".", "goals", "[", "self", ".", "conditions", "[", "self", ".", "sw", ".", "state", "]", "]", ".", "location", ")", "\n", "", "if", "self", ".", "agent", ".", "location", "in", "forbiddens", ":", "\n", "            ", "reward", "-=", "self", ".", "goal_penalty", "\n", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.ConditionedGoals._finished": [[184, 189], ["len"], "methods", ["None"], ["", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "sw", ".", "state", ">=", "len", "(", "self", ".", "conditions", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "self", ".", "agent", ".", "location", "==", "self", ".", "goals", "[", "self", ".", "conditions", "[", "self", ".", "sw", ".", "state", "]", "]", ".", "location", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.ConditionedGoals._side_information": [[190, 200], ["super()._side_information", "goal_based_games.ConditionedGoals.goals[].featurize", "enumerate", "mazebasev2.Switch().featurize", "mazebasev2.Switch"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "_side_information", "(", "self", ")", ":", "\n", "# Featurize the goals, and add it to the features of some dummy", "\n", "# switches in the right state", "\n", "        ", "return", "super", "(", "ConditionedGoals", ",", "self", ")", ".", "_side_information", "(", ")", "+", "[", "\n", "[", "self", ".", "FEATURE", ".", "IF", "]", "+", "\n", "mi", ".", "Switch", "(", "nstates", "=", "self", ".", "n_goals", ",", "start_state", "=", "i", ")", ".", "featurize", "(", ")", "+", "\n", "[", "self", ".", "FEATURE", ".", "GOTO", "]", "+", "\n", "self", ".", "goals", "[", "st", "]", ".", "featurize", "(", ")", "\n", "for", "i", ",", "st", "in", "enumerate", "(", "self", ".", "conditions", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.ConditionedGoals._calculate_approximate_reward": [[201, 217], ["goal_based_games._est", "six.moves.range", "len", "goal_based_games._est", "min", "max", "super()._calculate_approximate_reward", "goal_based_games._est"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est"], ["", "def", "_calculate_approximate_reward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "sw", ".", "state", ">=", "len", "(", "self", ".", "conditions", ")", ":", "\n", "            ", "best", "=", "-", "1e100", "\n", "", "else", ":", "\n", "            ", "best", "=", "_est", "(", "self", ",", "self", ".", "agent", ".", "location", ",", "\n", "self", ".", "goals", "[", "self", ".", "conditions", "[", "self", ".", "sw", ".", "state", "]", "]", ".", "location", ")", "\n", "", "sw_dist", "=", "_est", "(", "self", ",", "self", ".", "agent", ".", "location", ",", "self", ".", "sw", ".", "location", ")", "\n", "for", "i", "in", "range", "(", "min", "(", "self", ".", "n_goals", ",", "self", ".", "n_colors", ")", ")", ":", "\n", "            ", "goal_loc", "=", "self", ".", "goals", "[", "self", ".", "conditions", "[", "i", "]", "]", ".", "location", "\n", "best", "=", "max", "(", "\n", "best", ",", "\n", "_est", "(", "self", ",", "self", ".", "sw", ".", "location", ",", "goal_loc", ")", "-", "\n", "(", "(", "i", "-", "self", ".", "sw", ".", "state", ")", "%", "self", ".", "n_colors", ")", "*", "self", ".", "turn_penalty", "+", "\n", "sw_dist", ")", "\n", "", "return", "super", "(", "ConditionedGoals", ",", "self", ")", ".", "_calculate_approximate_reward", "(", ")", "+", "best", "+", "self", ".", "goal_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.ConditionedGoals._accumulate_approximate_rewards": [[218, 223], ["super()._accumulate_approximate_rewards", "itertools.product", "six.moves.range", "six.moves.range", "goal_based_games.ConditionedGoals._tile_get_block"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._accumulate_approximate_rewards", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block"], ["", "def", "_accumulate_approximate_rewards", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConditionedGoals", ",", "self", ")", ".", "_accumulate_approximate_rewards", "(", ")", "\n", "for", "x", ",", "y", "in", "product", "(", "range", "(", "self", ".", "width", ")", ",", "range", "(", "self", ".", "height", ")", ")", ":", "\n", "            ", "if", "self", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "Goal", ")", "is", "not", "None", ":", "\n", "                ", "self", ".", "_approx_reward_map", "[", "x", "]", "[", "y", "]", "+=", "-", "self", ".", "goal_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion.__init__": [[235, 238], ["mazebasev2.lib.mazebase.utils.mazeutils.populate_kwargs", "RewardOnEndMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "super", "(", "Exclusion", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._reset": [[239, 268], ["super()._reset", "list", "random.shuffle", "random.randint", "dict", "six.moves.range", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "goal_based_games.TogglingAgent", "goal_based_games.Exclusion._add_agent", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException", "six.moves.range", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "goal_based_games.Exclusion.goals.append", "goal_based_games.Exclusion._add_item", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "all", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.Goal"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "Exclusion", ",", "self", ")", ".", "_reset", "(", ")", "\n", "if", "self", ".", "visit_min", "<", "1", ":", "\n", "            ", "raise", "MazeException", "(", "\"visit_min is not >= 1\"", ")", "\n", "", "if", "self", ".", "visit_max", "==", "-", "1", ":", "\n", "            ", "self", ".", "visit_max", "=", "self", ".", "n_goals", "\n", "", "self", ".", "visit", "=", "list", "(", "range", "(", "self", ".", "n_goals", ")", ")", "\n", "shuffle", "(", "self", ".", "visit", ")", "\n", "to_visit", "=", "randint", "(", "self", ".", "visit_min", ",", "self", ".", "visit_max", ")", "\n", "self", ".", "exclude", "=", "self", ".", "visit", "[", "to_visit", ":", "]", "\n", "self", ".", "visit", "=", "self", ".", "visit", "[", ":", "to_visit", "]", "\n", "self", ".", "visit", "=", "dict", "(", "(", "x", ",", "False", ")", "for", "x", "in", "self", ".", "visit", ")", "\n", "\n", "self", ".", "goals", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_goals", ")", ":", "\n", "            ", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ")", ")", "\n", "self", ".", "goals", ".", "append", "(", "mi", ".", "Goal", "(", "location", "=", "(", "x", ",", "y", ")", ",", "id", "=", "i", ")", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "goals", "[", "i", "]", ")", "\n", "\n", "", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "\n", "bad_blocks", "=", "[", "mi", ".", "Block", "]", ")", ")", "\n", "self", ".", "agent", "=", "TogglingAgent", "(", "location", "=", "(", "x", ",", "y", ")", ")", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"ExclusionAgent\"", ")", "\n", "\n", "visited", ",", "_", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "(", "x", ",", "y", ")", ",", "\n", "creationutils", ".", "agent_movefunc", ")", "\n", "\n", "if", "not", "all", "(", "goal", ".", "location", "in", "visited", "for", "goal", "in", "self", ".", "goals", ")", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to goal\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._step": [[269, 273], ["goal_based_games.Exclusion.visit.keys"], "methods", ["None"], ["", "", "def", "_step", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "self", ".", "visit", ".", "keys", "(", ")", ":", "\n", "            ", "if", "self", ".", "agent", ".", "location", "==", "self", ".", "goals", "[", "i", "]", ".", "location", ":", "\n", "                ", "self", ".", "visit", "[", "i", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._finished": [[274, 276], ["all", "goal_based_games.Exclusion.visit.values"], "methods", ["None"], ["", "", "", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "return", "all", "(", "self", ".", "visit", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._side_information": [[277, 283], ["super()._side_information", "goal_based_games.Exclusion.goals[].featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "Exclusion", ",", "self", ")", ".", "_side_information", "(", ")", "+", "[", "[", "self", ".", "FEATURE", ".", "GOTO", ",", "self", ".", "FEATURE", ".", "ALL", "]", "]", "+", "[", "[", "self", ".", "FEATURE", ".", "AVOID", "]", "+", "\n", "self", ".", "goals", "[", "i", "]", ".", "featurize", "(", ")", "\n", "for", "i", "in", "self", ".", "exclude", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._get_reward": [[284, 291], ["super()._get_reward"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._get_reward"], ["", "def", "_get_reward", "(", "self", ",", "id", ")", ":", "\n", "        ", "reward", "=", "super", "(", "Exclusion", ",", "self", ")", ".", "_get_reward", "(", "id", ")", "\n", "for", "i", "in", "self", ".", "exclude", ":", "\n", "            ", "if", "self", ".", "agent", ".", "location", "==", "self", ".", "goals", "[", "i", "]", ".", "location", ":", "\n", "                ", "reward", "-=", "self", ".", "goal_penalty", "\n", "\n", "", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward": [[292, 308], ["dict", "super()._calculate_approximate_reward", "goal_based_games._est", "dict.items"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._calculate_approximate_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est"], ["", "def", "_calculate_approximate_reward", "(", "self", ")", ":", "\n", "        ", "prev", "=", "self", ".", "agent", ".", "location", "\n", "visited", "=", "dict", "(", "(", "x", ",", "False", ")", "for", "x", "in", "self", ".", "visit", ")", "\n", "so_far", "=", "0", "\n", "for", "_", "in", "self", ".", "visit", ":", "\n", "            ", "best_n", "=", "None", "\n", "best", "=", "-", "1e100", "\n", "for", "g", "in", "[", "g", "for", "g", ",", "b", "in", "visited", ".", "items", "(", ")", "if", "not", "b", "]", ":", "\n", "                ", "t", "=", "_est", "(", "self", ",", "prev", ",", "self", ".", "goals", "[", "g", "]", ".", "location", ")", "\n", "if", "t", ">", "best", ":", "\n", "                    ", "best", "=", "t", "\n", "best_n", "=", "g", "\n", "", "", "prev", "=", "self", ".", "goals", "[", "best_n", "]", ".", "location", "\n", "so_far", "+=", "best", "\n", "visited", "[", "best_n", "]", "=", "True", "\n", "", "return", "super", "(", "Exclusion", ",", "self", ")", ".", "_calculate_approximate_reward", "(", ")", "+", "so_far", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._accumulate_approximate_rewards": [[309, 315], ["super()._accumulate_approximate_rewards", "itertools.product", "six.moves.range", "six.moves.range"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Exclusion._accumulate_approximate_rewards"], ["", "def", "_accumulate_approximate_rewards", "(", "self", ")", ":", "\n", "        ", "super", "(", "Exclusion", ",", "self", ")", ".", "_accumulate_approximate_rewards", "(", ")", "\n", "excludes", "=", "[", "self", ".", "goals", "[", "i", "]", ".", "location", "for", "i", "in", "self", ".", "exclude", "]", "\n", "for", "x", ",", "y", "in", "product", "(", "range", "(", "self", ".", "width", ")", ",", "range", "(", "self", ".", "height", ")", ")", ":", "\n", "            ", "if", "(", "x", ",", "y", ")", "in", "excludes", ":", "\n", "                ", "self", ".", "_approx_reward_map", "[", "x", "]", "[", "y", "]", "+=", "-", "self", ".", "goal_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Goto._reset": [[326, 342], ["super()._reset", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.Goal", "goal_based_games.Goto._add_item", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "goal_based_games.MovingAgent", "goal_based_games.Goto._add_agent", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations"], ["def", "_reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "Goto", ",", "self", ")", ".", "_reset", "(", ")", "\n", "\n", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ")", ")", "\n", "self", ".", "goal", "=", "mi", ".", "Goal", "(", "location", "=", "loc", ",", "visible", "=", "False", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "goal", ")", "\n", "\n", "loc", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "\n", "bad_blocks", "=", "[", "mi", ".", "Block", "]", ")", ")", "\n", "self", ".", "agent", "=", "MovingAgent", "(", "location", "=", "loc", ")", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"GotoAgent\"", ")", "\n", "\n", "visited", ",", "_", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "loc", ",", "\n", "creationutils", ".", "agent_movefunc", ")", "\n", "if", "self", ".", "goal", ".", "location", "not", "in", "visited", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to goal\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Goto._side_information": [[343, 346], ["super()._side_information", "goal_based_games.Goto._coords2loc"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeLocationMixin._coords2loc"], ["", "", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "Goto", ",", "self", ")", ".", "_side_information", "(", ")", "+", "[", "[", "self", ".", "FEATURE", ".", "GOTO", ",", "self", ".", "_coords2loc", "(", "*", "self", ".", "goal", ".", "location", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.Goto._finished": [[347, 349], ["None"], "methods", ["None"], ["", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "agent", ".", "location", "==", "self", ".", "goal", ".", "location", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden.__init__": [[359, 362], ["mazebasev2.lib.mazebase.utils.mazeutils.populate_kwargs", "BaseMazeGame.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "super", "(", "GotoHidden", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset": [[363, 383], ["super()._reset", "six.moves.range", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "goal_based_games.MovingAgent", "goal_based_games.GotoHidden._add_agent", "mazebasev2.lib.mazebase.utils.creationutils.dijkstra", "mazebasev2.lib.mazebase.utils.mazeutils.choice", "goal_based_games.GotoHidden.goals.append", "goal_based_games.GotoHidden._add_item", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.lib.mazebase.utils.mazeutils.MazeException", "mazebasev2.lib.mazebase.utils.creationutils.empty_locations", "mazebasev2.Goal"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_agent", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.empty_locations"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "GotoHidden", ",", "self", ")", ".", "_reset", "(", ")", "\n", "\n", "self", ".", "goals", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_goals", ")", ":", "\n", "            ", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ")", ")", "\n", "self", ".", "goals", ".", "append", "(", "mi", ".", "Goal", "(", "location", "=", "(", "x", ",", "y", ")", ",", "id", "=", "i", ",", "visible", "=", "False", ")", ")", "\n", "self", ".", "_add_item", "(", "self", ".", "goals", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "goal", "=", "choice", "(", "self", ".", "goals", ")", "\n", "\n", "x", ",", "y", "=", "choice", "(", "creationutils", ".", "empty_locations", "(", "self", ",", "\n", "bad_blocks", "=", "[", "mi", ".", "Block", "]", ")", ")", "\n", "self", ".", "agent", "=", "MovingAgent", "(", "location", "=", "(", "x", ",", "y", ")", ")", "\n", "self", ".", "_add_agent", "(", "self", ".", "agent", ",", "\"GotoHiddenAgent\"", ")", "\n", "\n", "visited", ",", "_", "=", "creationutils", ".", "dijkstra", "(", "self", ",", "(", "x", ",", "y", ")", ",", "\n", "creationutils", ".", "agent_movefunc", ")", "\n", "if", "self", ".", "goal", ".", "location", "not", "in", "visited", ":", "\n", "            ", "raise", "MazeException", "(", "\"No path to goal\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information": [[384, 389], ["super()._side_information", "goal_based_games.GotoHidden.goal.featurize", "goal.featurize", "goal_based_games.GotoHidden._coords2loc"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._side_information", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.featurizers.RelativeLocationMixin._coords2loc"], ["", "", "def", "_side_information", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "GotoHidden", ",", "self", ")", ".", "_side_information", "(", ")", "+", "[", "[", "self", ".", "_coords2loc", "(", "*", "goal", ".", "location", ")", "]", "+", "goal", ".", "featurize", "(", ")", "\n", "for", "goal", "in", "self", ".", "goals", "]", "+", "[", "[", "self", ".", "FEATURE", ".", "GOTO", "]", "+", "self", ".", "goal", ".", "featurize", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games.GotoHidden._finished": [[390, 392], ["None"], "methods", ["None"], ["", "def", "_finished", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "agent", ".", "location", "==", "self", ".", "goal", ".", "location", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.goal_based_games._est": [[32, 37], ["mazebasev2.lib.mazebase.utils.creationutils.dijkstra"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.creationutils.dijkstra"], ["", "def", "_est", "(", "game", ",", "s", ",", "e", ")", ":", "\n", "    ", "'''shorthand to estimate reward for an agent to move from s to e'''", "\n", "visited", ",", "path", "=", "creationutils", ".", "dijkstra", "(", "\n", "game", ",", "s", ",", "creationutils", ".", "agent_movefunc", ",", "True", ")", "\n", "return", "-", "visited", "[", "e", "]", "# Returns distance, which is negation of reward", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.HasStatesMixin.all_features": [[14, 17], ["super().all_features"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.all_features"], ["@", "classmethod", "\n", "def", "all_features", "(", "cls", ")", ":", "\n", "        ", "return", "super", "(", "HasStatesMixin", ",", "cls", ")", ".", "all_features", "(", ")", "+", "cls", ".", "STATE_FEATURE", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Block.__init__": [[20, 22], ["mazebasev2.lib.mazebase.items.MazeItem.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", "passable", "=", "False", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Block._get_display_symbol": [[23, 25], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "None", ",", "None", ",", "'on_white'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Water.__init__": [[28, 31], ["mazebasev2.lib.mazebase.items.MazeItem.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Water", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "PRIO", "=", "-", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Water._get_display_symbol": [[32, 34], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "None", ",", "None", ",", "'on_blue'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Corner.__init__": [[38, 40], ["mazebasev2.lib.mazebase.items.MazeItem.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Corner", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Corner._get_display_symbol": [[41, 43], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "u'   '", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Goal.__init__": [[49, 55], ["mazebasev2.lib.mazebase.items.MazeItem.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "id", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Goal", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "goal_id", "=", "id", "\n", "assert", "self", ".", "goal_id", "<", "self", ".", "__MAX_GOAL_IDS", ",", "\"cannot create goal with id >{0}\"", ".", "format", "(", "\n", "self", ".", "__MAX_GOAL_IDS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Goal._get_display_symbol": [[56, 58], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "u'*{0}*'", ".", "format", "(", "self", ".", "goal_id", ")", ",", "'red'", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Goal.featurize": [[59, 62], ["super().featurize", "str"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "featurize", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "Goal", ",", "self", ")", ".", "featurize", "(", ")", "+", "[", "\"goal_id\"", "+", "str", "(", "self", ".", "goal_id", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Goal.all_features": [[63, 67], ["super().all_features", "str", "range"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.all_features"], ["", "@", "classmethod", "\n", "def", "all_features", "(", "cls", ")", ":", "\n", "        ", "return", "super", "(", "Goal", ",", "cls", ")", ".", "all_features", "(", ")", "+", "[", "\"goal_id\"", "+", "str", "(", "k", ")", "for", "k", "in", "range", "(", "cls", ".", "__MAX_GOAL_IDS", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Breadcrumb.__init__": [[70, 73], ["mazebasev2.lib.mazebase.items.MazeItem.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Breadcrumb", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "PRIO", "=", "-", "50", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Breadcrumb._get_display_symbol": [[74, 76], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "u' . '", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Pushable.__init__": [[79, 81], ["terrain.Block.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Pushable", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Pushable._get_display_symbol": [[82, 84], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "None", ",", "None", ",", "'on_green'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Switch.__init__": [[88, 95], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "start_state", "=", "0", ",", "nstates", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Switch", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "state", "=", "start_state", "\n", "self", ".", "nstates", "=", "nstates", "\n", "assert", "self", ".", "nstates", "<", "HasStatesMixin", ".", "_MAX_STATES", ",", "\"cannot create switches with >{0} states\"", ".", "format", "(", "\n", "self", ".", "__MAX_SWITCH_STATES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Switch._get_display_symbol": [[96, 98], ["str().rjust", "str"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "str", "(", "self", ".", "state", ")", ".", "rjust", "(", "3", ")", ",", "'cyan'", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Switch.toggle": [[99, 101], ["None"], "methods", ["None"], ["", "def", "toggle", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "(", "self", ".", "state", "+", "1", ")", "%", "self", ".", "nstates", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Switch.featurize": [[102, 105], ["super().featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "featurize", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "Switch", ",", "self", ")", ".", "featurize", "(", ")", "+", "[", "self", ".", "STATE_FEATURE", "[", "self", ".", "state", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.__init__": [[108, 112], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "open", "=", "False", ",", "state", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Door", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "isopen", "=", "open", "\n", "self", ".", "state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door._get_display_symbol": [[113, 116], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "None", "if", "self", ".", "isopen", "else", "u'\\u2588{0}\\u2588'", ".", "format", "(", "self", ".", "state", ")", ",", "\n", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open": [[117, 119], ["None"], "methods", ["None"], ["", "def", "open", "(", "self", ")", ":", "\n", "        ", "self", ".", "isopen", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.close": [[120, 122], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "isopen", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.toggle": [[123, 125], ["None"], "methods", ["None"], ["", "def", "toggle", "(", "self", ")", ":", "\n", "        ", "self", ".", "isopen", "=", "not", "self", ".", "isopen", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.featurize": [[126, 129], ["super().featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "featurize", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "Door", ",", "self", ")", ".", "featurize", "(", ")", "+", "[", "\"open\"", "if", "self", ".", "isopen", "else", "\"closed\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.all_features": [[130, 134], ["terrain.HasStatesMixin.all_features"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.all_features"], ["", "@", "classmethod", "\n", "def", "all_features", "(", "cls", ")", ":", "\n", "        ", "return", "super", "(", "Door", ",", "cls", ")", ".", "all_features", "(", ")", "+", "[", "\"open\"", ",", "\"closed\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.NamedItem.__init__": [[137, 142], ["mazebasev2.lib.mazebase.items.MazeItem.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "str_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NamedItem", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "# String id", "\n", "self", ".", "str_id", "=", "str_id", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.NamedItem.featurize": [[143, 146], ["super().featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "featurize", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "NamedItem", ",", "self", ")", ".", "featurize", "(", ")", "+", "[", "self", ".", "str_id", "]", "\n", "# TODO - this might need to be rethought depending on the actual state representation we end up with", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.LimitedResourceFont.__init__": [[155, 160], ["terrain.NamedItem.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "str_id", ",", "resource_count", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LimitedResourceFont", ",", "self", ")", ".", "__init__", "(", "str_id", ",", "**", "kwargs", ")", "\n", "\n", "# Count of how much resource is in the font", "\n", "self", ".", "resource_count", "=", "resource_count", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.LimitedResourceFont._get_display_symbol": [[162, 164], ["str().rjust", "str"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "str", "(", "self", ".", "resource_count", ")", ".", "rjust", "(", "3", ")", ",", "'yellow'", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.LimitedResourceFont.deplete": [[166, 169], ["None"], "methods", ["None"], ["", "def", "deplete", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "resource_count", ">=", "1", ")", "\n", "self", ".", "resource_count", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.LimitedResourceFont.featurize": [[171, 174], ["terrain.NamedItem.featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "featurize", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "LimitedResourceFont", ",", "self", ")", ".", "featurize", "(", ")", "+", "[", "self", ".", "STATE_FEATURE", "[", "self", ".", "resource_count", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.LimitedResourceFont.all_features": [[175, 178], ["super().all_features"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.all_features"], ["", "@", "classmethod", "\n", "def", "all_features", "(", "cls", ")", ":", "\n", "        ", "return", "super", "(", "LimitedResourceFont", ",", "cls", ")", ".", "all_features", "(", ")", "+", "cls", ".", "STATE_FEATURE", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.ResourceFont.__init__": [[181, 184], ["terrain.NamedItem.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "str_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResourceFont", ",", "self", ")", ".", "__init__", "(", "str_id", ",", "**", "kwargs", ")", "\n", "self", ".", "resource_count", "=", "float", "(", "inf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.ResourceFont._get_display_symbol": [[185, 187], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "\" F \"", ",", "'yellow'", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.ResourceFont.deplete": [[189, 191], ["None"], "methods", ["None"], ["", "def", "deplete", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.ResourceFont.featurize": [[193, 195], ["terrain.NamedItem.featurize"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize"], ["", "def", "featurize", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "ResourceFont", ",", "self", ")", ".", "featurize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.ResourceFont.all_features": [[196, 199], ["super().all_features"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.all_features"], ["", "@", "classmethod", "\n", "def", "all_features", "(", "cls", ")", ":", "\n", "        ", "return", "super", "(", "ResourceFont", ",", "cls", ")", ".", "all_features", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.CraftingContainer.__init__": [[202, 204], ["terrain.NamedItem.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "str_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CraftingContainer", ",", "self", ")", ".", "__init__", "(", "str_id", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.CraftingContainer._get_display_symbol": [[206, 208], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "\" C \"", ",", "'green'", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.CraftingItem.__init__": [[211, 213], ["terrain.NamedItem.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "str_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CraftingItem", ",", "self", ")", ".", "__init__", "(", "str_id", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.CraftingItem._get_display_symbol": [[216, 218], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "\" I \"", ",", "'yellow'", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Key.__init__": [[220, 222], ["terrain.CraftingItem.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "str_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Key", ",", "self", ")", ".", "__init__", "(", "str_id", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Key._get_display_symbol": [[225, 227], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "\" K \"", ",", "'yellow'", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.__init__": [[27, 32], ["mazebasev2.lib.mazebase.utils.mazeutils.populate_kwargs"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "\n", "self", ".", "game", "=", "None", "\n", "self", ".", "PRIO", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem._get_display_symbol": [[33, 43], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "'''\n        -> (text, foreground, background, attributes)\n\n        text: should be 3 characters\n        foreground: see termcolor.py\n        background: see termcolor.py\n        attributes: see termcolor.py\n        '''", "\n", "return", "(", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone": [[44, 46], ["copy.deepcopy"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "return", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.featurize": [[47, 50], ["type"], "methods", ["None"], ["", "def", "featurize", "(", "self", ")", ":", "\n", "        ", "''' Return a list of the features for this item '''", "\n", "return", "[", "type", "(", "self", ")", ".", "__name__", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.all_features": [[51, 58], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "all_features", "(", "cls", ")", ":", "\n", "        ", "'''\n        All possible features for this item.\n        Must implement if subclass implements featurize()\n        '''", "\n", "return", "[", "cls", ".", "__name__", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.__init__": [[35, 43], ["mazebasev2.lib.mazebase.utils.mazeutils.populate_kwargs", "mazebasev2.MazeItem.__init__", "mazebasev2.lib.mazebase.utils.mazeutils.all_classes_of"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.populate_kwargs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.all_classes_of"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "mazeutils", ".", "populate_kwargs", "(", "self", ",", "self", ".", "__class__", ".", "__properties", ",", "kwargs", ")", "\n", "super", "(", "Agent", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "actions", "=", "{", "'pass'", ":", "self", ".", "_pass", "}", "\n", "self", ".", "PRIO", "=", "100", "\n", "self", ".", "_all_agents", "=", "[", "x", "[", "1", "]", "for", "x", "in", "\n", "mazeutils", ".", "all_classes_of", "(", "sys", ".", "modules", "[", "__name__", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._pass": [[44, 46], ["None"], "methods", ["None"], ["", "def", "_pass", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action": [[47, 50], ["None"], "methods", ["None"], ["", "def", "_add_action", "(", "self", ",", "id", ",", "func", ")", ":", "\n", "        ", "assert", "id", "not", "in", "self", ".", "actions", ",", "\"Duplicate action id\"", "\n", "self", ".", "actions", "[", "id", "]", "=", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.featurize": [[51, 54], ["list", "set", "agents.Agent.__get_all_superclasses"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.__get_all_superclasses"], ["", "def", "featurize", "(", "self", ")", ":", "\n", "        ", "features", "=", "list", "(", "set", "(", "self", ".", "__get_all_superclasses", "(", "self", ".", "__class__", ")", ")", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.__get_all_superclasses": [[55, 62], ["all_superclasses.extend", "all_superclasses.append", "agents.Agent.__get_all_superclasses"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent.__get_all_superclasses"], ["", "def", "__get_all_superclasses", "(", "self", ",", "cls", ")", ":", "\n", "        ", "all_superclasses", "=", "[", "]", "\n", "for", "superclass", "in", "cls", ".", "__bases__", ":", "\n", "            ", "if", "superclass", "in", "self", ".", "_all_agents", ":", "\n", "                ", "all_superclasses", ".", "append", "(", "superclass", ".", "__name__", ")", "\n", "", "all_superclasses", ".", "extend", "(", "self", ".", "__get_all_superclasses", "(", "superclass", ")", ")", "\n", "", "return", "all_superclasses", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._get_display_symbol": [[63, 65], ["None"], "methods", ["None"], ["", "def", "_get_display_symbol", "(", "self", ")", ":", "\n", "        ", "return", "(", "u' A '", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.NPC.get_npc_action": [[68, 70], ["random.choice"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice"], ["def", "get_npc_action", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "id", ",", "choice", "(", "self", ".", "actions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.SingleTileMovable.__init__": [[73, 79], ["agents.Agent.__init__", "agents.SingleTileMovable._add_action", "agents.SingleTileMovable._add_action", "agents.SingleTileMovable._add_action", "agents.SingleTileMovable._add_action"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SingleTileMovable", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_add_action", "(", "\"up\"", ",", "self", ".", "__up", ")", "\n", "self", ".", "_add_action", "(", "\"down\"", ",", "self", ".", "__down", ")", "\n", "self", ".", "_add_action", "(", "\"left\"", ",", "self", ".", "__left", ")", "\n", "self", ".", "_add_action", "(", "\"right\"", ",", "self", ".", "__right", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.SingleTileMovable.__dmove": [[80, 89], ["agents.SingleTileMovable.game._move_item", "agents.SingleTileMovable.game._tile_get_block", "agents.SingleTileMovable.game._tile_get_block", "agents.SingleTileMovable.game._tile_get_block", "agents.SingleTileMovable.game._tile_get_block"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._move_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block"], ["", "def", "__dmove", "(", "self", ",", "dx", ",", "dy", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "location", "\n", "nloc", "=", "x", "+", "dx", ",", "y", "+", "dy", "\n", "# Cannot walk into blocks, agents, or closed doors", "\n", "if", "(", "self", ".", "game", ".", "_tile_get_block", "(", "nloc", ",", "mi", ".", "Block", ")", "is", "None", "and", "\n", "self", ".", "game", ".", "_tile_get_block", "(", "nloc", ",", "Agent", ")", "is", "None", "and", "\n", "(", "not", "self", ".", "game", ".", "_tile_get_block", "(", "nloc", ",", "mi", ".", "Door", ")", "or", "\n", "self", ".", "game", ".", "_tile_get_block", "(", "nloc", ",", "mi", ".", "Door", ")", ".", "isopen", ")", ")", ":", "\n", "            ", "self", ".", "game", ".", "_move_item", "(", "self", ".", "id", ",", "location", "=", "nloc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.SingleTileMovable.__up": [[90, 92], ["agents.SingleTileMovable.__dmove"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__dmove"], ["", "", "def", "__up", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dmove", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.SingleTileMovable.__down": [[93, 95], ["agents.SingleTileMovable.__dmove"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__dmove"], ["", "def", "__down", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dmove", "(", "0", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.SingleTileMovable.__left": [[96, 98], ["agents.SingleTileMovable.__dmove"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__dmove"], ["", "def", "__left", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dmove", "(", "-", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.SingleTileMovable.__right": [[99, 101], ["agents.SingleTileMovable.__dmove"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__dmove"], ["", "def", "__right", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dmove", "(", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.BreadcrumbDropping.__init__": [[104, 107], ["agents.Agent.__init__", "agents.BreadcrumbDropping._add_action"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BreadcrumbDropping", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_add_action", "(", "\"breadcrumb\"", ",", "self", ".", "__drop_crumb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.BreadcrumbDropping.__drop_crumb": [[108, 111], ["agents.BreadcrumbDropping.game._tile_get_block", "agents.BreadcrumbDropping.game._add_item", "mazebasev2.Breadcrumb"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._add_item"], ["", "def", "__drop_crumb", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "game", ".", "_tile_get_block", "(", "self", ".", "location", ",", "mi", ".", "Breadcrumb", ")", "is", "None", ":", "\n", "            ", "self", ".", "game", ".", "_add_item", "(", "mi", ".", "Breadcrumb", "(", "location", "=", "self", ".", "location", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Pushing.__init__": [[117, 123], ["agents.Agent.__init__", "agents.Pushing._add_action", "agents.Pushing._add_action", "agents.Pushing._add_action", "agents.Pushing._add_action"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Pushing", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_add_action", "(", "\"push_up\"", ",", "self", ".", "__push_up", ")", "\n", "self", ".", "_add_action", "(", "\"push_down\"", ",", "self", ".", "__push_down", ")", "\n", "self", ".", "_add_action", "(", "\"push_left\"", ",", "self", ".", "__push_left", ")", "\n", "self", ".", "_add_action", "(", "\"push_right\"", ",", "self", ".", "__push_right", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Pushing.__dpush": [[124, 135], ["agents.Pushing.game._tile_get_block", "agents.Pushing.game._move_item", "agents.Pushing.game._tile_get_block", "agents.Pushing.game._tile_get_block"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._move_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block"], ["", "def", "__dpush", "(", "self", ",", "dx", ",", "dy", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "location", "\n", "tx", ",", "ty", "=", "x", "+", "dx", ",", "y", "+", "dy", "\n", "nx", ",", "ny", "=", "tx", "+", "dx", ",", "ty", "+", "dy", "\n", "\n", "# Cannot push into other blocks or agents", "\n", "block", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "tx", ",", "ty", ")", ",", "mi", ".", "Pushable", ")", "\n", "if", "(", "block", "is", "not", "None", "and", "\n", "self", ".", "game", ".", "_tile_get_block", "(", "(", "nx", ",", "ny", ")", ",", "Agent", ")", "is", "None", "and", "\n", "self", ".", "game", ".", "_tile_get_block", "(", "(", "nx", ",", "ny", ")", ",", "mi", ".", "Block", ")", "is", "None", ")", ":", "\n", "            ", "self", ".", "game", ".", "_move_item", "(", "block", ".", "id", ",", "location", "=", "(", "nx", ",", "ny", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Pushing.__push_up": [[136, 138], ["agents.Pushing.__dpush"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Pushing.__dpush"], ["", "", "def", "__push_up", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dpush", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Pushing.__push_down": [[139, 141], ["agents.Pushing.__dpush"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Pushing.__dpush"], ["", "def", "__push_down", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dpush", "(", "0", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Pushing.__push_left": [[142, 144], ["agents.Pushing.__dpush"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Pushing.__dpush"], ["", "def", "__push_left", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dpush", "(", "-", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Pushing.__push_right": [[145, 147], ["agents.Pushing.__dpush"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Pushing.__dpush"], ["", "def", "__push_right", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dpush", "(", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Toggling.__init__": [[150, 153], ["agents.Agent.__init__", "agents.Toggling._add_action"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Toggling", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_add_action", "(", "\"toggle_switch\"", ",", "self", ".", "__toggle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Toggling.__toggle": [[154, 165], ["agents.Toggling.game._tile_get_block", "agents.Toggling.toggle", "agents.Toggling.game.door.open", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.toggle", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["", "def", "__toggle", "(", "self", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "location", "\n", "switch", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "Switch", ")", "\n", "if", "switch", "is", "not", "None", ":", "\n", "            ", "switch", ".", "toggle", "(", ")", "\n", "", "else", ":", "\n", "#CHECK THE LOCATION, also get location of the door. ", "\n", "            ", "door_loc", "=", "self", ".", "game", ".", "door", ".", "location", "\n", "if", "'key'", "in", "self", ".", "inventory", ":", "\n", "                ", "if", "(", "abs", "(", "door_loc", "[", "0", "]", "-", "x", ")", "==", "1", "and", "door_loc", "[", "1", "]", "==", "y", ")", "or", "(", "abs", "(", "door_loc", "[", "1", "]", "-", "y", ")", "==", "1", "and", "door_loc", "[", "0", "]", "==", "x", ")", ":", "\n", "                    ", "self", ".", "game", ".", "door", ".", "open", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Crafting.__init__": [[169, 177], ["agents.Agent.__init__", "agents.Crafting._add_action", "agents.Crafting._add_action", "agents.Crafting._add_action", "agents.Crafting._add_action"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Crafting", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_add_action", "(", "\"grab\"", ",", "self", ".", "__grab", ")", "\n", "self", ".", "_add_action", "(", "\"mine\"", ",", "self", ".", "__mine", ")", "\n", "self", ".", "_add_action", "(", "\"chop\"", ",", "self", ".", "__chop", ")", "\n", "self", ".", "_add_action", "(", "\"craft\"", ",", "self", ".", "__craft", ")", "\n", "self", ".", "last_action", "=", "None", "\n", "self", ".", "location_item", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Crafting.__grab": [[179, 199], ["agents.Crafting.game._tile_get_block", "agents.Crafting.__usefont", "agents.Crafting.game._tile_get_block", "agents.Crafting.game._move_item_to_inventory", "agents.Crafting.game._tile_get_block"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__usefont", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._move_item_to_inventory", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block"], ["", "def", "__grab", "(", "self", ")", ":", "\n", "\n", "        ", "print", "(", "\"INVENTORY\"", ")", "\n", "for", "item", "in", "self", ".", "inventory", ":", "\n", "            ", "feature", "=", "item", "+", "'_count='", "+", "str", "(", "self", ".", "inventory", "[", "item", "]", ")", "\n", "print", "(", "feature", ")", "\n", "\n", "", "x", ",", "y", "=", "self", ".", "location", "\n", "\n", "# See if the font lets you do a grab", "\n", "font", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "ResourceFont", ")", "\n", "if", "font", "is", "not", "None", ":", "\n", "            ", "self", ".", "__usefont", "(", "'grab'", ")", "\n", "", "else", ":", "\n", "# Grab all the items on the space", "\n", "            ", "item", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "CraftingItem", ")", "\n", "while", "item", "is", "not", "None", ":", "\n", "                ", "self", ".", "game", ".", "_move_item_to_inventory", "(", "item", ".", "id", ")", "\n", "item", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "CraftingItem", ")", "\n", "", "", "self", ".", "last_action", "=", "'grab'", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Crafting.__mine": [[201, 204], ["agents.Crafting.__usefont"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__usefont"], ["", "def", "__mine", "(", "self", ")", ":", "\n", "        ", "self", ".", "__usefont", "(", "'mine'", ")", "\n", "self", ".", "last_action", "=", "'mine'", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Crafting.__chop": [[206, 209], ["agents.Crafting.__usefont"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__usefont"], ["", "def", "__chop", "(", "self", ")", ":", "\n", "        ", "self", ".", "__usefont", "(", "'chop'", ")", "\n", "self", ".", "last_action", "=", "'chop'", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Crafting.__usefont": [[212, 263], ["agents.Crafting.game._tile_get_block", "rule.check_rule_satisfied", "len", "Exception", "satisfied_rules.append", "len", "agents.Crafting.deplete", "agents.Crafting.game._remove_item", "agents.Crafting.game._create_item_in_inventory"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.check_rule_satisfied", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.ResourceFont.deplete", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._remove_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._create_item_in_inventory"], ["", "def", "__usefont", "(", "self", ",", "action", ")", ":", "\n", "\n", "        ", "x", ",", "y", "=", "self", ".", "location", "\n", "\n", "# Next see if the font lets you chop", "\n", "font", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "ResourceFont", ")", "\n", "\n", "# Save inputs to rule check for checking in _step()", "\n", "self", ".", "location_item", "=", "font", "\n", "\n", "## CHECK INVENTORY SIZE HERE FIRST:", "\n", "total_count", "=", "0", "\n", "for", "key", "in", "self", ".", "inventory", ":", "\n", "\n", "            ", "if", "self", ".", "inventory", "[", "key", "]", "==", "5", ":", "\n", "                ", "return", "\n", "", "total_count", "=", "total_count", "+", "self", ".", "inventory", "[", "key", "]", "\n", "\n", "", "if", "total_count", "==", "10", ":", "\n", "            ", "return", "\n", "\n", "# Check rules", "\n", "", "if", "font", "is", "not", "None", ":", "\n", "# Find relevant rule(s)", "\n", "            ", "satisfied_rules", "=", "[", "]", "\n", "for", "rule", "in", "self", ".", "game", ".", "rules", ":", "\n", "                ", "if", "rule", ".", "check_rule_satisfied", "(", "action", ",", "font", ",", "self", ".", "inventory", ")", ":", "\n", "                    ", "satisfied_rules", ".", "append", "(", "rule", ")", "\n", "\n", "# Check rules to see if we are using the correct action and have all pre-requisite items", "\n", "", "", "if", "len", "(", "satisfied_rules", ")", ">", "1", ":", "\n", "# TODO - this doesn't make sense for resource fonts to have more than one relevant rule", "\n", "                ", "raise", "Exception", "(", "\"We shouldn't have more than one satisfied rule right now\"", ")", "\n", "", "elif", "len", "(", "satisfied_rules", ")", "==", "1", ":", "\n", "                ", "rule", "=", "satisfied_rules", "[", "0", "]", "\n", "\n", "# Should not be any depleted items in resource gathering", "\n", "#assert(Rule.DEPLETED_ITEMS not in rule.rule_dict)", "\n", "\n", "# Deplete font by one and add item to inventory", "\n", "font", ".", "deplete", "(", ")", "\n", "\n", "# If font is empty, remove it", "\n", "if", "font", ".", "resource_count", "==", "0", ":", "\n", "                    ", "self", ".", "game", ".", "_remove_item", "(", "font", ".", "id", ")", "\n", "\n", "# Create target items and add to inventory", "\n", "", "target_items", "=", "rule", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", "\n", "for", "target_item", "in", "target_items", ":", "\n", "                    ", "target_item_count", "=", "target_items", "[", "target_item", "]", "\n", "self", ".", "game", ".", "_create_item_in_inventory", "(", "target_item", ",", "target_item_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Crafting.__craft": [[265, 319], ["agents.Crafting.game._tile_get_block", "rule.check_rule_satisfied", "len", "set", "satisfied_rules.append", "len", "set", "len", "agents.Crafting.game._destroy_from_inventory", "agents.Crafting.game._create_item_in_inventory", "rule.rule_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.check_rule_satisfied", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._destroy_from_inventory", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._create_item_in_inventory"], ["", "", "", "", "def", "__craft", "(", "self", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "location", "\n", "\n", "# Get crafting container at location", "\n", "craft_container", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "CraftingContainer", ")", "\n", "\n", "# Save inputs to rule check for checking in _step()", "\n", "self", ".", "location_item", "=", "craft_container", "\n", "\n", "## CHECK INVENTORY SIZE HERE FIRST:", "\n", "total_count", "=", "0", "\n", "for", "key", "in", "self", ".", "inventory", ":", "\n", "\n", "            ", "total_count", "=", "total_count", "+", "self", ".", "inventory", "[", "key", "]", "\n", "\n", "", "if", "total_count", "==", "10", ":", "\n", "            ", "return", "\n", "\n", "\n", "# Check and resolve rules", "\n", "", "if", "craft_container", "is", "not", "None", ":", "\n", "# Find relevant rule(s)", "\n", "            ", "satisfied_rules", "=", "[", "]", "\n", "for", "rule", "in", "self", ".", "game", ".", "rules", ":", "\n", "                ", "if", "rule", ".", "check_rule_satisfied", "(", "'craft'", ",", "craft_container", ",", "self", ".", "inventory", ")", ":", "\n", "                    ", "satisfied_rules", ".", "append", "(", "rule", ")", "\n", "\n", "# Check and make sure that rules do not consume common resource", "\n", "", "", "if", "len", "(", "satisfied_rules", ")", ">", "1", ":", "\n", "                ", "depleted_union", "=", "set", "(", ")", "\n", "sum_set_els", "=", "0", "\n", "for", "rule", "in", "satisfied_rules", ":", "\n", "                    ", "sum_set_els", "+=", "len", "(", "rule", ".", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", ")", "\n", "depleted_union", "|=", "set", "(", "rule", ".", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", ".", "keys", "(", ")", ")", "\n", "", "assert", "(", "len", "(", "depleted_union", ")", "==", "sum_set_els", ")", "\n", "# TODO - this might need to be revisited later", "\n", "\n", "# Go through each rule and do the crafting", "\n", "", "for", "rule", "in", "satisfied_rules", ":", "\n", "                ", "depleted_items", "=", "rule", ".", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", "\n", "target_items", "=", "rule", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", "\n", "\n", "# Destroy depleted items", "\n", "for", "depleted_item", "in", "depleted_items", ":", "\n", "                    ", "depleted_count", "=", "depleted_items", "[", "depleted_item", "]", "\n", "self", ".", "game", ".", "_destroy_from_inventory", "(", "depleted_item", ",", "depleted_count", ")", "\n", "\n", "# Create target items and add to inventory", "\n", "", "for", "target_item", "in", "target_items", ":", "\n", "                    ", "target_item_count", "=", "target_items", "[", "target_item", "]", "\n", "self", ".", "game", ".", "_create_item_in_inventory", "(", "target_item", ",", "target_item_count", ")", "\n", "\n", "# Set last action to craft", "\n", "", "", "", "self", ".", "last_action", "=", "'craft'", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__init__": [[322, 335], ["agents.Agent.__init__", "agents.CraftingAgent._add_action", "agents.CraftingAgent._add_action", "agents.CraftingAgent._add_action", "agents.CraftingAgent._add_action", "agents.CraftingAgent._add_action", "agents.CraftingAgent._add_action", "agents.CraftingAgent._add_action", "agents.CraftingAgent._add_action", "agents.CraftingAgent._add_action"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.Agent._add_action"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CraftingAgent", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_add_action", "(", "\"up\"", ",", "self", ".", "__up", ")", "\n", "self", ".", "_add_action", "(", "\"down\"", ",", "self", ".", "__down", ")", "\n", "self", ".", "_add_action", "(", "\"left\"", ",", "self", ".", "__left", ")", "\n", "self", ".", "_add_action", "(", "\"right\"", ",", "self", ".", "__right", ")", "\n", "self", ".", "_add_action", "(", "\"grab\"", ",", "self", ".", "__grab", ")", "\n", "self", ".", "_add_action", "(", "\"mine\"", ",", "self", ".", "__mine", ")", "\n", "self", ".", "_add_action", "(", "\"chop\"", ",", "self", ".", "__chop", ")", "\n", "self", ".", "_add_action", "(", "\"craft\"", ",", "self", ".", "__craft", ")", "\n", "self", ".", "_add_action", "(", "\"toggle_switch\"", ",", "self", ".", "__toggle", ")", "\n", "self", ".", "last_action", "=", "None", "\n", "self", ".", "location_item", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__dmove": [[336, 345], ["agents.CraftingAgent.game._move_item", "agents.CraftingAgent.game._tile_get_block", "agents.CraftingAgent.game._tile_get_block", "agents.CraftingAgent.game._tile_get_block", "agents.CraftingAgent.game._tile_get_block"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._move_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block"], ["", "def", "__dmove", "(", "self", ",", "dx", ",", "dy", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "location", "\n", "nloc", "=", "x", "+", "dx", ",", "y", "+", "dy", "\n", "# Cannot walk into blocks, agents, or closed doors", "\n", "if", "(", "self", ".", "game", ".", "_tile_get_block", "(", "nloc", ",", "mi", ".", "Block", ")", "is", "None", "and", "\n", "self", ".", "game", ".", "_tile_get_block", "(", "nloc", ",", "Agent", ")", "is", "None", "and", "\n", "(", "not", "self", ".", "game", ".", "_tile_get_block", "(", "nloc", ",", "mi", ".", "Door", ")", "or", "\n", "self", ".", "game", ".", "_tile_get_block", "(", "nloc", ",", "mi", ".", "Door", ")", ".", "isopen", ")", ")", ":", "\n", "            ", "self", ".", "game", ".", "_move_item", "(", "self", ".", "id", ",", "location", "=", "nloc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__up": [[346, 348], ["agents.CraftingAgent.__dmove"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__dmove"], ["", "", "def", "__up", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dmove", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__down": [[349, 351], ["agents.CraftingAgent.__dmove"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__dmove"], ["", "def", "__down", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dmove", "(", "0", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__left": [[352, 354], ["agents.CraftingAgent.__dmove"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__dmove"], ["", "def", "__left", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dmove", "(", "-", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__right": [[355, 357], ["agents.CraftingAgent.__dmove"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__dmove"], ["", "def", "__right", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dmove", "(", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__grab": [[359, 379], ["agents.CraftingAgent.game._tile_get_block", "agents.CraftingAgent.__usefont", "agents.CraftingAgent.game._tile_get_block", "agents.CraftingAgent.game._move_item_to_inventory", "agents.CraftingAgent.game._tile_get_block"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__usefont", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._move_item_to_inventory", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block"], ["", "def", "__grab", "(", "self", ")", ":", "\n", "\n", "        ", "print", "(", "\"INVENTORY\"", ")", "\n", "for", "item", "in", "self", ".", "inventory", ":", "\n", "            ", "feature", "=", "item", "+", "'_count='", "+", "str", "(", "self", ".", "inventory", "[", "item", "]", ")", "\n", "print", "(", "feature", ")", "\n", "\n", "", "x", ",", "y", "=", "self", ".", "location", "\n", "\n", "# See if the font lets you do a grab", "\n", "font", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "ResourceFont", ")", "\n", "if", "font", "is", "not", "None", ":", "\n", "            ", "self", ".", "__usefont", "(", "'grab'", ")", "\n", "", "else", ":", "\n", "# Grab all the items on the space", "\n", "            ", "item", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "CraftingItem", ")", "\n", "while", "item", "is", "not", "None", ":", "\n", "                ", "self", ".", "game", ".", "_move_item_to_inventory", "(", "item", ".", "id", ")", "\n", "item", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "CraftingItem", ")", "\n", "", "", "self", ".", "last_action", "=", "'grab'", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__mine": [[381, 384], ["agents.CraftingAgent.__usefont"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__usefont"], ["", "def", "__mine", "(", "self", ")", ":", "\n", "        ", "self", ".", "__usefont", "(", "'mine'", ")", "\n", "self", ".", "last_action", "=", "'mine'", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__chop": [[386, 389], ["agents.CraftingAgent.__usefont"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__usefont"], ["", "def", "__chop", "(", "self", ")", ":", "\n", "        ", "self", ".", "__usefont", "(", "'chop'", ")", "\n", "self", ".", "last_action", "=", "'chop'", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__usefont": [[392, 443], ["agents.CraftingAgent.game._tile_get_block", "rule.check_rule_satisfied", "len", "Exception", "satisfied_rules.append", "len", "agents.CraftingAgent.deplete", "agents.CraftingAgent.game._remove_item", "agents.CraftingAgent.game._create_item_in_inventory"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.check_rule_satisfied", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.ResourceFont.deplete", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._remove_item", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._create_item_in_inventory"], ["", "def", "__usefont", "(", "self", ",", "action", ")", ":", "\n", "\n", "        ", "x", ",", "y", "=", "self", ".", "location", "\n", "\n", "# Next see if the font lets you chop", "\n", "font", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "ResourceFont", ")", "\n", "\n", "# Save inputs to rule check for checking in _step()", "\n", "self", ".", "location_item", "=", "font", "\n", "\n", "## CHECK INVENTORY SIZE HERE FIRST:", "\n", "total_count", "=", "0", "\n", "for", "key", "in", "self", ".", "inventory", ":", "\n", "\n", "            ", "if", "self", ".", "inventory", "[", "key", "]", "==", "5", ":", "\n", "                ", "return", "\n", "", "total_count", "=", "total_count", "+", "self", ".", "inventory", "[", "key", "]", "\n", "\n", "", "if", "total_count", "==", "10", ":", "\n", "            ", "return", "\n", "\n", "# Check rules", "\n", "", "if", "font", "is", "not", "None", ":", "\n", "# Find relevant rule(s)", "\n", "            ", "satisfied_rules", "=", "[", "]", "\n", "for", "rule", "in", "self", ".", "game", ".", "rules", ":", "\n", "                ", "if", "rule", ".", "check_rule_satisfied", "(", "action", ",", "font", ",", "self", ".", "inventory", ")", ":", "\n", "                    ", "satisfied_rules", ".", "append", "(", "rule", ")", "\n", "\n", "# Check rules to see if we are using the correct action and have all pre-requisite items", "\n", "", "", "if", "len", "(", "satisfied_rules", ")", ">", "1", ":", "\n", "# TODO - this doesn't make sense for resource fonts to have more than one relevant rule", "\n", "                ", "raise", "Exception", "(", "\"We shouldn't have more than one satisfied rule right now\"", ")", "\n", "", "elif", "len", "(", "satisfied_rules", ")", "==", "1", ":", "\n", "                ", "rule", "=", "satisfied_rules", "[", "0", "]", "\n", "\n", "# Should not be any depleted items in resource gathering", "\n", "#assert(Rule.DEPLETED_ITEMS not in rule.rule_dict)", "\n", "\n", "# Deplete font by one and add item to inventory", "\n", "font", ".", "deplete", "(", ")", "\n", "\n", "# If font is empty, remove it", "\n", "if", "font", ".", "resource_count", "==", "0", ":", "\n", "                    ", "self", ".", "game", ".", "_remove_item", "(", "font", ".", "id", ")", "\n", "\n", "# Create target items and add to inventory", "\n", "", "target_items", "=", "rule", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", "\n", "for", "target_item", "in", "target_items", ":", "\n", "                    ", "target_item_count", "=", "target_items", "[", "target_item", "]", "\n", "self", ".", "game", ".", "_create_item_in_inventory", "(", "target_item", ",", "target_item_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__craft": [[445, 499], ["agents.CraftingAgent.game._tile_get_block", "rule.check_rule_satisfied", "len", "set", "satisfied_rules.append", "len", "set", "len", "agents.CraftingAgent.game._destroy_from_inventory", "agents.CraftingAgent.game._create_item_in_inventory", "rule.rule_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.knowledge.rules.Rule.check_rule_satisfied", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._destroy_from_inventory", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.CraftingGame._create_item_in_inventory"], ["", "", "", "", "def", "__craft", "(", "self", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "location", "\n", "\n", "# Get crafting container at location", "\n", "craft_container", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "CraftingContainer", ")", "\n", "\n", "# Save inputs to rule check for checking in _step()", "\n", "self", ".", "location_item", "=", "craft_container", "\n", "\n", "## CHECK INVENTORY SIZE HERE FIRST:", "\n", "total_count", "=", "0", "\n", "for", "key", "in", "self", ".", "inventory", ":", "\n", "\n", "            ", "total_count", "=", "total_count", "+", "self", ".", "inventory", "[", "key", "]", "\n", "\n", "", "if", "total_count", "==", "10", ":", "\n", "            ", "return", "\n", "\n", "\n", "# Check and resolve rules", "\n", "", "if", "craft_container", "is", "not", "None", ":", "\n", "# Find relevant rule(s)", "\n", "            ", "satisfied_rules", "=", "[", "]", "\n", "for", "rule", "in", "self", ".", "game", ".", "rules", ":", "\n", "                ", "if", "rule", ".", "check_rule_satisfied", "(", "'craft'", ",", "craft_container", ",", "self", ".", "inventory", ")", ":", "\n", "                    ", "satisfied_rules", ".", "append", "(", "rule", ")", "\n", "\n", "# Check and make sure that rules do not consume common resource", "\n", "", "", "if", "len", "(", "satisfied_rules", ")", ">", "1", ":", "\n", "                ", "depleted_union", "=", "set", "(", ")", "\n", "sum_set_els", "=", "0", "\n", "for", "rule", "in", "satisfied_rules", ":", "\n", "                    ", "sum_set_els", "+=", "len", "(", "rule", ".", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", ")", "\n", "depleted_union", "|=", "set", "(", "rule", ".", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", ".", "keys", "(", ")", ")", "\n", "", "assert", "(", "len", "(", "depleted_union", ")", "==", "sum_set_els", ")", "\n", "# TODO - this might need to be revisited later", "\n", "\n", "# Go through each rule and do the crafting", "\n", "", "for", "rule", "in", "satisfied_rules", ":", "\n", "                ", "depleted_items", "=", "rule", ".", "rule_dict", "[", "Rule", ".", "DEPLETED_ITEMS", "]", "\n", "target_items", "=", "rule", ".", "rule_dict", "[", "Rule", ".", "CREATED_ITEMS", "]", "\n", "\n", "# Destroy depleted items", "\n", "for", "depleted_item", "in", "depleted_items", ":", "\n", "                    ", "depleted_count", "=", "depleted_items", "[", "depleted_item", "]", "\n", "self", ".", "game", ".", "_destroy_from_inventory", "(", "depleted_item", ",", "depleted_count", ")", "\n", "\n", "# Create target items and add to inventory", "\n", "", "for", "target_item", "in", "target_items", ":", "\n", "                    ", "target_item_count", "=", "target_items", "[", "target_item", "]", "\n", "self", ".", "game", ".", "_create_item_in_inventory", "(", "target_item", ",", "target_item_count", ")", "\n", "\n", "# Set last action to craft", "\n", "", "", "", "self", ".", "last_action", "=", "'craft'", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.agents.CraftingAgent.__toggle": [[500, 511], ["agents.CraftingAgent.game._tile_get_block", "agents.CraftingAgent.toggle", "agents.CraftingAgent.game.door.open", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame._tile_get_block", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.toggle", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["", "def", "__toggle", "(", "self", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "location", "\n", "switch", "=", "self", ".", "game", ".", "_tile_get_block", "(", "(", "x", ",", "y", ")", ",", "mi", ".", "Switch", ")", "\n", "if", "switch", "is", "not", "None", ":", "\n", "            ", "switch", ".", "toggle", "(", ")", "\n", "", "else", ":", "\n", "#CHECK THE LOCATION, also get location of the door. ", "\n", "            ", "door_loc", "=", "self", ".", "game", ".", "door", ".", "location", "\n", "if", "'key'", "in", "self", ".", "inventory", ":", "\n", "                ", "if", "(", "abs", "(", "door_loc", "[", "0", "]", "-", "x", ")", "==", "1", "and", "door_loc", "[", "1", "]", "==", "y", ")", "or", "(", "abs", "(", "door_loc", "[", "1", "]", "-", "y", ")", "==", "1", "and", "door_loc", "[", "0", "]", "==", "x", ")", ":", "\n", "                    ", "self", ".", "game", ".", "door", ".", "open", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.tools.mazebase_test.action_func": [[172, 185], ["random.choice", "print", "list", "range", "six.moves.input", "enumerate", "len", "int"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice"], ["def", "action_func", "(", "actions", ")", ":", "\n", "    ", "if", "not", "player_mode", ":", "\n", "        ", "return", "choice", "(", "actions", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "list", "(", "enumerate", "(", "actions", ")", ")", ")", "\n", "ind", "=", "-", "1", "\n", "while", "ind", "not", "in", "range", "(", "len", "(", "actions", ")", ")", ":", "\n", "            ", "ind", "=", "input", "(", "\"Input number for action to take: \"", ")", "\n", "try", ":", "\n", "                ", "ind", "=", "int", "(", "ind", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "ind", "=", "-", "1", "\n", "", "", "return", "actions", "[", "ind", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.tools.crafting_test.action_func": [[93, 106], ["random.choice", "print", "list", "range", "six.moves.input", "enumerate", "len", "int"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.utils.mazeutils.choice"], ["def", "action_func", "(", "actions", ")", ":", "\n", "    ", "if", "not", "player_mode", ":", "\n", "        ", "return", "choice", "(", "actions", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "list", "(", "enumerate", "(", "actions", ")", ")", ")", "\n", "ind", "=", "-", "1", "\n", "while", "ind", "not", "in", "range", "(", "len", "(", "actions", ")", ")", ":", "\n", "            ", "ind", "=", "input", "(", "\"Input number for action to take: \"", ")", "\n", "try", ":", "\n", "                ", "ind", "=", "int", "(", "ind", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "ind", "=", "-", "1", "\n", "", "", "return", "actions", "[", "ind", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.generate_individual_labeled_images": [[14, 59], ["matplotlib.rcParams.update", "print", "matplotlib.imread", "matplotlib.imshow", "item.split", "plt.imshow.axes.get_yaxis().set_visible", "plt.imshow.axes.spines[].set_visible", "plt.imshow.axes.spines[].set_visible", "plt.imshow.axes.spines[].set_visible", "plt.imshow.axes.spines[].set_visible", "matplotlib.tick_params", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.close", "plt.imshow.axes.get_yaxis"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.close"], ["def", "generate_individual_labeled_images", "(", ")", ":", "\n", "\n", "\t", "plt", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "50", "}", ")", "\n", "\n", "#for item in df[df['Type'] == 'Wool']['Item Created']:", "\n", "#for item in df['Item Created']:", "\n", "\n", "for", "item", "in", "[", "'Cobblestone Stash'", "]", ":", "\n", "\t\t", "print", "(", "item", ")", "\n", "\n", "if", "item", "==", "\"NONE\"", ":", "\n", "\t\t\t", "continue", "\n", "\n", "", "img", "=", "mpimg", ".", "imread", "(", "'generated_images/base_images/store.png'", ")", "\n", "\n", "fig", "=", "plt", ".", "imshow", "(", "img", ")", "\n", "#name = item", "\n", "name", "=", "\"\"", "\n", "spaced", "=", "item", ".", "split", "(", "' '", ")", "\n", "for", "s", "in", "spaced", ":", "\n", "\t\t\t", "if", "name", "==", "\"\"", ":", "\n", "\t\t\t\t", "name", "=", "s", "\n", "", "else", ":", "\n", "\t\t\t\t", "name", "=", "name", "+", "'\\n'", "+", "s", "\n", "\n", "\n", "", "", "fig", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "\n", "fig", ".", "axes", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "axes", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "axes", ".", "spines", "[", "'bottom'", "]", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "axes", ".", "spines", "[", "'left'", "]", ".", "set_visible", "(", "False", ")", "\n", "\n", "plt", ".", "tick_params", "(", "\n", "axis", "=", "'x'", ",", "# changes apply to the x-axis", "\n", "which", "=", "'both'", ",", "# both major and minor ticks are affected", "\n", "bottom", "=", "False", ",", "# ticks along the bottom edge are off", "\n", "top", "=", "False", ",", "# ticks along the top edge are off", "\n", "labelbottom", "=", "False", ")", "\n", "\n", "plt", ".", "xlabel", "(", "name", ")", "\n", "\n", "\n", "plt", ".", "savefig", "(", "'generated_images/labeled_images/'", "+", "item", "+", "'.png'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.recurse_recipe": [[67, 241], ["map", "PIL.Image.new", "map", "PIL.Image.new", "map", "PIL.Image.new", "image_generator.recurse_recipe", "image_generator.recurse_recipe", "PIL.Image.new", "Image.new.paste", "Image.new.paste", "Image.new.paste", "map", "PIL.Image.new", "image_generator.recurse_recipe", "PIL.Image.new", "Image.new.paste", "Image.new.paste", "im.resize.resize", "Image.new.paste", "im.resize.resize", "Image.new.paste", "im.resize.resize", "Image.new.paste", "im.resize.resize", "Image.new.paste"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.recurse_recipe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.recurse_recipe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.recurse_recipe"], ["", "", "def", "recurse_recipe", "(", "item", ")", ":", "\n", "\n", "# get index of this item..", "\n", "\t", "idx", "=", "df", ".", "index", "[", "df", "[", "'Item Created'", "]", "==", "item", "]", "\n", "row", "=", "df", ".", "iloc", "[", "idx", "[", "0", "]", "]", "\n", "# print(row)", "\n", "\n", "#raw ingredient", "\n", "if", "row", "[", "'Required Item'", "]", "==", "row", "[", "'Required Item'", "]", ":", "\n", "\t\t", "if", "row", "[", "'Required Item'", "]", "==", "'NONE'", ":", "\n", "#print(row['Location Required'] + \" \" + row['Action Required'] + \" \" + item)", "\n", "\n", "## HAS 3 ITEMS, plus 1 filler.", "\n", "\n", "\t\t\t", "loc_item_image", "=", "'generated_images/labeled_images/'", "+", "row", "[", "'Location Required'", "]", "+", "'.png'", "\n", "\n", "action_image", "=", "'generated_images/base_images/'", "+", "row", "[", "'Action Required'", "]", "+", "'.jpg'", "\n", "\n", "filler_image", "=", "'generated_images/base_images/blank.png'", "\n", "\n", "item_image", "=", "'generated_images/labeled_images/'", "+", "item", "+", "'.png'", "\n", "\n", "\n", "images", "=", "map", "(", "Image", ".", "open", ",", "[", "filler_image", ",", "filler_image", ",", "loc_item_image", ",", "action_image", ",", "item_image", "]", ")", "\n", "\n", "\n", "total_width", "=", "500", "\n", "\n", "max_height", "=", "120", "\n", "\n", "new_im", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "total_width", ",", "max_height", ")", ")", "\n", "\n", "x_offset", "=", "0", "\n", "for", "im", "in", "images", ":", "\n", "\t\t\t  ", "im", "=", "im", ".", "resize", "(", "(", "100", ",", "120", ")", ")", "\n", "new_im", ".", "paste", "(", "im", ",", "(", "x_offset", ",", "0", ")", ")", "\n", "x_offset", "+=", "im", ".", "size", "[", "0", "]", "\n", "\n", "# new_im.save('generated_images/recipe_images/'+item+'.png')", "\n", "\n", "", "return", "1", ",", "new_im", "\n", "\n", "", "else", ":", "\n", "\n", "## HAS 4 ITEMS", "\n", "\n", "\t\t\t", "loc_item_image", "=", "'generated_images/labeled_images/'", "+", "row", "[", "'Location Required'", "]", "+", "'.png'", "\n", "req_item_image", "=", "'generated_images/labeled_images/'", "+", "row", "[", "'Required Item'", "]", "+", "'.png'", "\n", "\n", "action_image", "=", "'generated_images/base_images/'", "+", "row", "[", "'Action Required'", "]", "+", "'.jpg'", "\n", "\n", "item_image", "=", "'generated_images/labeled_images/'", "+", "item", "+", "'.png'", "\n", "\n", "filler_image", "=", "'generated_images/base_images/blank.png'", "\n", "\n", "\n", "images", "=", "map", "(", "Image", ".", "open", ",", "[", "filler_image", ",", "loc_item_image", ",", "req_item_image", ",", "action_image", ",", "item_image", "]", ")", "\n", "\n", "\n", "total_width", "=", "500", "\n", "\n", "max_height", "=", "120", "\n", "\n", "new_im", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "total_width", ",", "max_height", ")", ")", "\n", "\n", "x_offset", "=", "0", "\n", "for", "im", "in", "images", ":", "\n", "\t\t\t  ", "im", "=", "im", ".", "resize", "(", "(", "100", ",", "120", ")", ")", "\n", "new_im", ".", "paste", "(", "im", ",", "(", "x_offset", ",", "0", ")", ")", "\n", "x_offset", "+=", "im", ".", "size", "[", "0", "]", "\n", "\n", "#new_im.save('generated_images/recipe_images/'+item+'.png')", "\n", "\n", "#print(row['Required Item'] + ' + ' + row['Location Required'] + \" \" + row['Action Required'] + \" \" + item)", "\n", "", "return", "1", ",", "new_im", "\n", "\n", "#2 ingredients", "\n", "", "", "elif", "row", "[", "'Ingredient 2'", "]", "==", "row", "[", "'Ingredient 2'", "]", ":", "\n", "\n", "\n", "#print(row['Ingredient 1'] + ' + ' + row['Ingredient 2'] + \" \" + row['Action Required'] + \" \" + item)", "\n", "\n", "## ADD THE LOCATION!", "\n", "\n", "\t\t", "loc_item_image", "=", "'generated_images/labeled_images/'", "+", "item", "+", "' Station.png'", "\n", "\n", "ingred_item1_image", "=", "'generated_images/labeled_images/'", "+", "row", "[", "'Ingredient 1'", "]", "+", "'.png'", "\n", "\n", "ingred_item2_image", "=", "'generated_images/labeled_images/'", "+", "row", "[", "'Ingredient 2'", "]", "+", "'.png'", "\n", "\n", "action_image", "=", "'generated_images/base_images/'", "+", "row", "[", "'Action Required'", "]", "+", "'.jpg'", "\n", "\n", "item_image", "=", "'generated_images/labeled_images/'", "+", "item", "+", "'.png'", "\n", "\n", "\n", "images", "=", "map", "(", "Image", ".", "open", ",", "[", "loc_item_image", ",", "ingred_item1_image", ",", "ingred_item2_image", ",", "action_image", ",", "item_image", "]", ")", "\n", "\n", "\n", "total_width", "=", "500", "\n", "\n", "max_height", "=", "120", "\n", "\n", "new_im", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "total_width", ",", "max_height", ")", ")", "\n", "\n", "x_offset", "=", "0", "\n", "for", "im", "in", "images", ":", "\n", "\t\t  ", "im", "=", "im", ".", "resize", "(", "(", "100", ",", "120", ")", ")", "\n", "new_im", ".", "paste", "(", "im", ",", "(", "x_offset", ",", "0", ")", ")", "\n", "x_offset", "+=", "im", ".", "size", "[", "0", "]", "\n", "\n", "\n", "", "count", ",", "temp", "=", "recurse_recipe", "(", "row", "[", "'Ingredient 1'", "]", ")", "\n", "count1", ",", "temp1", "=", "recurse_recipe", "(", "row", "[", "'Ingredient 2'", "]", ")", "\n", "\n", "total", "=", "count", "+", "count1", "+", "1", "\n", "\n", "if", "total", ">", "6", ":", "\n", "\t\t\t", "return", "6", ",", "None", "\n", "\n", "## Stitch images", "\n", "\n", "", "new_height", "=", "total", "*", "120", "\n", "stitched_image", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "total_width", ",", "new_height", ")", ")", "\n", "\n", "stitched_image", ".", "paste", "(", "new_im", ",", "(", "0", ",", "0", ")", ")", "\n", "stitched_image", ".", "paste", "(", "temp", ",", "(", "0", ",", "new_im", ".", "size", "[", "1", "]", ")", ")", "\n", "stitched_image", ".", "paste", "(", "temp1", ",", "(", "0", ",", "new_im", ".", "size", "[", "1", "]", "+", "temp", ".", "size", "[", "1", "]", ")", ")", "\n", "\n", "return", "total", ",", "stitched_image", "\n", "\n", "#1 ingredient", "\n", "", "else", ":", "\n", "#print(row['Ingredient 1'] + \" \" + row['Action Required'] + \" \" + item)", "\n", "\n", "## ADD THE LOCATION!", "\n", "\n", "\t\t", "loc_item_image", "=", "'generated_images/labeled_images/'", "+", "item", "+", "' Station.png'", "\n", "\n", "ingred_item1_image", "=", "'generated_images/labeled_images/'", "+", "row", "[", "'Ingredient 1'", "]", "+", "'.png'", "\n", "\n", "action_image", "=", "'generated_images/base_images/'", "+", "row", "[", "'Action Required'", "]", "+", "'.jpg'", "\n", "\n", "item_image", "=", "'generated_images/labeled_images/'", "+", "item", "+", "'.png'", "\n", "\n", "filler_image", "=", "'generated_images/base_images/blank.png'", "\n", "\n", "images", "=", "map", "(", "Image", ".", "open", ",", "[", "filler_image", ",", "loc_item_image", ",", "ingred_item1_image", ",", "action_image", ",", "item_image", "]", ")", "\n", "\n", "total_width", "=", "500", "\n", "\n", "max_height", "=", "120", "\n", "\n", "new_im", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "total_width", ",", "max_height", ")", ")", "\n", "\n", "x_offset", "=", "0", "\n", "for", "im", "in", "images", ":", "\n", "\t\t  ", "im", "=", "im", ".", "resize", "(", "(", "100", ",", "120", ")", ")", "\n", "new_im", ".", "paste", "(", "im", ",", "(", "x_offset", ",", "0", ")", ")", "\n", "x_offset", "+=", "im", ".", "size", "[", "0", "]", "\n", "\n", "", "count", ",", "temp", "=", "recurse_recipe", "(", "row", "[", "'Ingredient 1'", "]", ")", "\n", "total", "=", "count", "+", "1", "\n", "\n", "if", "total", ">", "6", ":", "\n", "\t\t\t", "return", "6", ",", "None", "\n", "\n", "## stitch images", "\n", "\n", "", "new_height", "=", "total", "*", "120", "\n", "stitched_image", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "total_width", ",", "new_height", ")", ")", "\n", "stitched_image", ".", "paste", "(", "new_im", ",", "(", "0", ",", "0", ")", ")", "\n", "stitched_image", ".", "paste", "(", "temp", ",", "(", "0", ",", "new_im", ".", "size", "[", "1", "]", ")", ")", "\n", "\n", "return", "total", ",", "stitched_image", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.create_recipes": [[243, 282], ["df.iterrows", "print", "image_generator.recurse_recipe", "map", "PIL.Image.new", "im.resize.resize", "Image.new.paste", "PIL.Image.new", "Image.new.paste", "range", "Image.new.save", "Image.new.paste"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.recurse_recipe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save"], ["", "", "def", "create_recipes", "(", ")", ":", "\n", "\n", "\t", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "\n", "\t\t", "item", "=", "row", "[", "'Item Created'", "]", "\n", "\n", "print", "(", "item", ")", "\n", "\n", "count", ",", "image", "=", "recurse_recipe", "(", "item", ")", "\n", "\n", "filler_image", "=", "'generated_images/base_images/blank.png'", "\n", "\n", "images", "=", "map", "(", "Image", ".", "open", ",", "[", "filler_image", ",", "filler_image", ",", "filler_image", ",", "filler_image", ",", "filler_image", "]", ")", "\n", "\n", "total_width", "=", "500", "\n", "\n", "max_height", "=", "120", "\n", "\n", "new_im", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "total_width", ",", "max_height", ")", ")", "\n", "\n", "x_offset", "=", "0", "\n", "for", "im", "in", "images", ":", "\n", "\t\t  ", "im", "=", "im", ".", "resize", "(", "(", "100", ",", "120", ")", ")", "\n", "new_im", ".", "paste", "(", "im", ",", "(", "x_offset", ",", "0", ")", ")", "\n", "x_offset", "+=", "im", ".", "size", "[", "0", "]", "\n", "\n", "", "if", "count", "<", "6", ":", "\n", "\n", "## PAD THE BOTTOM OF RECIPES THAT ARE < 5.", "\n", "\t\t\t", "stitched_image", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "total_width", ",", "600", ")", ")", "\n", "stitched_image", ".", "paste", "(", "image", ",", "(", "0", ",", "0", ")", ")", "\n", "y_offset", "=", "image", ".", "size", "[", "1", "]", "\n", "\n", "for", "i", "in", "range", "(", "5", "-", "count", ")", ":", "\n", "\t\t\t\t", "stitched_image", ".", "paste", "(", "new_im", ",", "(", "0", ",", "y_offset", ")", ")", "\n", "y_offset", "=", "y_offset", "+", "120", "\n", "\n", "# print(count)", "\n", "", "stitched_image", ".", "save", "(", "'generated_images/recipe_images_v2/'", "+", "item", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.add_ingred": [[286, 291], ["None"], "function", ["None"], ["def", "add_ingred", "(", "item", ")", ":", "\n", "\t", "if", "item", "in", "ingreds", ":", "\n", "\t\t", "ingreds", "[", "item", "]", "=", "ingreds", "[", "item", "]", "+", "1", "\n", "", "else", ":", "\n", "\t\t", "ingreds", "[", "item", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.return_spawns": [[293, 336], ["image_generator.add_ingred", "image_generator.add_ingred", "image_generator.add_ingred", "image_generator.return_spawns", "image_generator.return_spawns", "image_generator.add_ingred", "image_generator.return_spawns"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.add_ingred", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.add_ingred", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.add_ingred", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.return_spawns", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.return_spawns", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.add_ingred", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.return_spawns"], ["", "", "def", "return_spawns", "(", "item", ")", ":", "\n", "\n", "# get index of this item..", "\n", "\t", "idx", "=", "df", ".", "index", "[", "df", "[", "'Item Created'", "]", "==", "item", "]", "\n", "row", "=", "df", ".", "iloc", "[", "idx", "[", "0", "]", "]", "\n", "# print(row)", "\n", "\n", "#raw ingredient", "\n", "if", "row", "[", "'Required Item'", "]", "==", "row", "[", "'Required Item'", "]", ":", "\n", "\n", "\t\t", "add_ingred", "(", "row", "[", "'Item Created'", "]", ")", "\n", "\n", "## WHAT WOULD HAPPEN TO THIS.. ", "\n", "if", "row", "[", "'Required Item'", "]", "==", "'NONE'", ":", "\n", "\n", "\t\t\t", "return", "1", ",", "[", "row", "[", "'Location Required'", "]", "]", ",", "[", "row", "[", "'Item Created'", "]", "]", "\n", "\n", "", "else", ":", "\n", "\n", "\t\t\t", "return", "1", ",", "[", "row", "[", "'Location Required'", "]", ",", "row", "[", "'Required Item'", "]", "]", ",", "[", "row", "[", "'Item Created'", "]", "]", "\n", "\n", "#2 ingredients", "\n", "", "", "elif", "row", "[", "'Ingredient 2'", "]", "==", "row", "[", "'Ingredient 2'", "]", ":", "\n", "\n", "\t\t", "add_ingred", "(", "row", "[", "'Ingredient 1'", "]", ")", "\n", "add_ingred", "(", "row", "[", "'Ingredient 2'", "]", ")", "\n", "\n", "count", ",", "temp", ",", "blah", "=", "return_spawns", "(", "row", "[", "'Ingredient 1'", "]", ")", "\n", "count1", ",", "temp1", ",", "blah1", "=", "return_spawns", "(", "row", "[", "'Ingredient 2'", "]", ")", "\n", "\n", "total", "=", "count", "+", "count1", "+", "1", "\n", "\n", "return", "total", ",", "[", "item", "+", "' Station'", "]", "+", "temp", "+", "temp1", ",", "[", "row", "[", "'Item Created'", "]", "]", "+", "blah", "+", "blah1", "\n", "\n", "#1 ingredient", "\n", "", "else", ":", "\n", "\n", "\t\t", "add_ingred", "(", "row", "[", "'Ingredient 1'", "]", ")", "\n", "\n", "count", ",", "temp", ",", "blah", "=", "return_spawns", "(", "row", "[", "'Ingredient 1'", "]", ")", "\n", "total", "=", "count", "+", "1", "\n", "\n", "return", "total", ",", "[", "item", "+", "' Station'", "]", "+", "temp", ",", "[", "row", "[", "'Item Created'", "]", "]", "+", "blah", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.misc.image_generator.look_up_index": [[354, 361], ["range", "len"], "function", ["None"], ["def", "look_up_index", "(", "name", ")", ":", "\n", "\n", "\t", "for", "i", "in", "range", "(", "len", "(", "links", ")", ")", ":", "\n", "\t\t", "if", "name", "in", "links", "[", "i", "]", ":", "\n", "\t\t\t", "return", "i", "\n", "\n", "", "", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_summed_embedding": [[42, 51], ["phrase.split.split", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.zeros", "p.lower"], "function", ["None"], ["def", "get_summed_embedding", "(", "phrase", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "    ", "phrase", "=", "phrase", ".", "split", "(", "' '", ")", "\n", "phrase_vector", "=", "torch", ".", "from_numpy", "(", "np", ".", "zeros", "(", "(", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "for", "p", "in", "phrase", ":", "\n", "        ", "phrase_vector", "+=", "glove", ".", "vectors", "[", "glove", ".", "stoi", "[", "p", ".", "lower", "(", ")", "]", "]", "\n", "\n", "", "return", "phrase_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_inventory_embedding": [[52, 69], ["numpy.zeros", "test_models.get_summed_embedding", "test_models.get_summed_embedding"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "\n", "    ", "inventory_embedding", "=", "np", ".", "zeros", "(", "(", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "first", "=", "True", "\n", "for", "item", "in", "inventory", ":", "\n", "\n", "        ", "if", "inventory", "[", "item", "]", ">", "0", ":", "\n", "\n", "            ", "if", "first", ":", "\n", "                ", "inventory_embedding", "=", "get_summed_embedding", "(", "item", ",", "glove", ",", "embed_size", ")", "\n", "first", "=", "False", "\n", "", "else", ":", "\n", "                ", "inventory_embedding", "=", "inventory_embedding", "+", "get_summed_embedding", "(", "item", ",", "glove", ",", "embed_size", ")", "\n", "\n", "", "", "", "return", "inventory_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_grid_embedding": [[70, 82], ["numpy.zeros", "range", "range", "enumerate", "test_models.get_summed_embedding"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_grid_embedding", "(", "batch_grid", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "    ", "goal_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "            ", "for", "index", ",", "item", "in", "enumerate", "(", "batch_grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "                ", "if", "item", "==", "\"ResourceFont\"", "or", "item", "==", "\"CraftingContainer\"", "or", "item", "==", "\"CraftingItem\"", ":", "\n", "                    ", "goal_embedding_array", "[", "x", "]", "[", "y", "]", "=", "get_summed_embedding", "(", "batch_grid", "[", "x", "]", "[", "y", "]", "[", "index", "+", "1", "]", ",", "glove", ",", "embed_size", ")", "\n", "\n", "", "", "", "", "return", "goal_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_goal_embedding": [[83, 98], ["numpy.zeros", "goal.split.split", "goal[].lower", "goal[].lower"], "function", ["None"], ["", "def", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "#currently all crafts are 2 word phrases", "\n", "# goal in the format of \"Make Diamond Boots (Diamond Boots=1)\" --> just extract diamond boots part", "\n", "\n", "    ", "goal_embedding", "=", "np", ".", "zeros", "(", "(", "1", ",", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "goal", "=", "goal", ".", "split", "(", "' '", ")", "\n", "\n", "item1_vec", "=", "glove", ".", "vectors", "[", "glove", ".", "stoi", "[", "goal", "[", "1", "]", ".", "lower", "(", ")", "]", "]", "\n", "item2_vec", "=", "glove", ".", "vectors", "[", "glove", ".", "stoi", "[", "goal", "[", "2", "]", ".", "lower", "(", ")", "]", "]", "\n", "\n", "goal_embedding", "[", "0", "]", "=", "item1_vec", "+", "item2_vec", "\n", "\n", "return", "goal_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.one_hot_grid": [[99, 124], ["numpy.zeros", "range", "range", "enumerate"], "function", ["None"], ["", "def", "one_hot_grid", "(", "grid", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "    ", "grid_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "            ", "for", "index", ",", "item", "in", "enumerate", "(", "grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "\n", "                ", "if", "item", "==", "'Corner'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "0", "]", "=", "1", "\n", "", "elif", "item", "==", "'Agent'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "1", "]", "=", "1", "\n", "", "elif", "'Door'", "in", "item", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "2", "]", "=", "1", "\n", "", "elif", "item", "==", "'Key'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "3", "]", "=", "1", "\n", "", "elif", "item", "==", "'Switch'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "4", "]", "=", "1", "\n", "", "elif", "item", "==", "'Block'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "5", "]", "=", "1", "\n", "", "elif", "item", "==", "'closed'", ":", "# door closed", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "6", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "grid_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game": [[127, 157], ["os.path.join", "mazebasev2.MazeGame", "open", "yaml.load", "open", "json.load", "mazebasev2.BasicKnowledgeGame", "mazebasev2.lib.mazebase.games.featurizers.GridFeaturizer"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["", "def", "generate_new_game", "(", ")", ":", "\n", "\n", "    ", "yaml_file", "=", "'mazebasev2/options/knowledge_planner/'", "+", "filename", "\n", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length12task_distractor.yaml'", "\n", "with", "open", "(", "yaml_file", ",", "'r'", ")", "as", "handle", ":", "\n", "        ", "options", "=", "yaml", ".", "load", "(", "handle", ")", "\n", "\n", "# Get sub opts", "\n", "", "method_opt", "=", "options", "[", "'method'", "]", "\n", "env_opt", "=", "options", "[", "'env'", "]", "\n", "log_opt", "=", "options", "[", "'logs'", "]", "\n", "\n", "# Set up the mazebase environment", "\n", "knowledge_root", "=", "env_opt", "[", "'knowledge_root'", "]", "\n", "world_knowledge_file", "=", "os", ".", "path", ".", "join", "(", "'mazebasev2'", ",", "knowledge_root", ",", "env_opt", "[", "'world_knowledge'", "]", "[", "'train'", "]", ")", "\n", "with", "open", "(", "world_knowledge_file", ")", "as", "f", ":", "\n", "      ", "world_knowledge", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Make the world", "\n", "", "map_size", "=", "(", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ")", "\n", "all_games", "=", "[", "games", ".", "BasicKnowledgeGame", "(", "world_knowledge", "=", "world_knowledge", ",", "proposed_knowledge", "=", "[", "]", ",", "options", "=", "env_opt", ",", "load_items", "=", "None", ",", "map_size", "=", "map_size", ")", "]", "\n", "\n", "# Game wrapper", "\n", "game", "=", "games", ".", "MazeGame", "(", "\n", "all_games", ",", "\n", "featurizer", "=", "featurizers", ".", "GridFeaturizer", "(", ")", "\n", ")", "\n", "\n", "return", "game", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_action_name": [[158, 178], ["None"], "function", ["None"], ["", "def", "get_action_name", "(", "action", ")", ":", "\n", "\n", "    ", "if", "action", "==", "1", ":", "\n", "        ", "return", "'up'", "\n", "", "elif", "action", "==", "2", ":", "\n", "        ", "return", "'down'", "\n", "", "elif", "action", "==", "3", ":", "\n", "        ", "return", "'left'", "\n", "", "elif", "action", "==", "4", ":", "\n", "        ", "return", "'right'", "\n", "", "elif", "action", "==", "5", ":", "\n", "        ", "return", "'toggle_switch'", "\n", "", "elif", "action", "==", "6", ":", "\n", "        ", "return", "'grab'", "\n", "", "elif", "action", "==", "7", ":", "\n", "        ", "return", "'mine'", "\n", "", "elif", "action", "==", "0", ":", "\n", "        ", "return", "'craft'", "\n", "", "elif", "action", "==", "8", ":", "\n", "        ", "return", "'stop'", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_lang": [[181, 234], ["test_models.generate_new_game", "print", "torchtext.GloVe", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "states_onehot.to.to", "states_embedding.to.to", "goal.to.to", "inventory.to.to", "model.sample", "print", "torchtext.GloVe", "generate_new_game.is_over", "numpy.array", "numpy.array", "test_models.get_goal_embedding", "numpy.array", "sampled_caption.append", "generate_new_game.observe", "test_models.get_grid_embedding", "test_models.one_hot_grid", "test_models.get_inventory_embedding"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv3.sample", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding"], ["", "", "def", "generate_lang", "(", "model", ",", "glove", ",", "embed_size", ",", "vocab", ",", "device", ")", ":", "\n", "\n", "#deterministic in that if you get stuck somewhere, then your prediction will stay the same.", "\n", "\n", "    ", "if", "embed_size", "==", "300", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "", "elif", "embed_size", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "\n", "", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "\n", "print", "(", "game", ".", "game", ".", "goal", ")", "\n", "\n", "past_moves", "=", "[", "]", "\n", "\n", "while", "not", "game", ".", "is_over", "(", ")", "or", "count", "==", "250", ":", "\n", "\n", "        ", "count", "=", "count", "+", "1", "\n", "state", "=", "game", ".", "observe", "(", ")", "[", "'observation'", "]", "[", "0", "]", "\n", "goal", "=", "game", ".", "game", ".", "goal", "\n", "inventory", "=", "game", ".", "game", ".", "inventory", "\n", "\n", "states_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "get_grid_embedding", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "states_onehot", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "one_hot_grid", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "goal", "=", "torch", ".", "from_numpy", "(", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ")", "\n", "#inventory = torch.from_numpy(get_inventory_embedding(inventory))", "\n", "#inventory = torch.Tensor(get_inventory_embedding(inventory, glove, embed_size))", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "#print(inventory)", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "\n", "#if count % 10:", "\n", "\n", "sampled_ids", "=", "model", ".", "sample", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "vocab", ")", "\n", "#sampled_ids = sampled_ids[0].cpu().numpy() ", "\n", "\n", "#also convert to words:", "\n", "sampled_caption", "=", "[", "]", "\n", "for", "word_id", "in", "sampled_ids", ":", "\n", "            ", "word", "=", "vocab", ".", "idx2word", "[", "word_id", "]", "\n", "sampled_caption", ".", "append", "(", "word", ")", "\n", "if", "word", "==", "'<end>'", ":", "\n", "                ", "break", "\n", "", "", "sentence", "=", "' '", ".", "join", "(", "sampled_caption", ")", "\n", "print", "(", "sentence", ")", "\n", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game": [[241, 291], ["test_models.generate_new_game", "generate_new_game.is_over", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "states_onehot.to.to", "states_embedding.to.to", "goal.to.to", "inventory.view.to", "inventory.view.view", "model", "outputs[].max", "test_models.get_action_name", "generate_new_game.act", "generate_new_game.observe", "generate_new_game.is_over", "len", "print", "len", "numpy.array", "numpy.array", "test_models.get_goal_embedding", "test_models.get_inventory_embedding", "indices.item", "generate_new_game.observe", "test_models.get_grid_embedding", "test_models.one_hot_grid"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_action_name", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid"], ["", "", "def", "play_game", "(", "model", ",", "glove", ",", "embed_size", ",", "device", ")", ":", "\n", "\n", "    ", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "state", "=", "game", ".", "observe", "(", ")", "[", "'observation'", "]", "[", "0", "]", "\n", "#print(state)", "\n", "\n", "#print(game.game.goal)", "\n", "\n", "past_moves", "=", "[", "]", "\n", "\n", "last_inv_size", "=", "0", "\n", "\n", "while", "not", "game", ".", "is_over", "(", ")", "and", "count", "<", "250", ":", "\n", "\n", "        ", "count", "=", "count", "+", "1", "\n", "state", "=", "game", ".", "observe", "(", ")", "[", "'observation'", "]", "[", "0", "]", "\n", "goal", "=", "game", ".", "game", ".", "goal", "\n", "inventory", "=", "game", ".", "game", ".", "inventory", "\n", "\n", "if", "len", "(", "inventory", ")", "!=", "last_inv_size", ":", "\n", "            ", "print", "(", "inventory", ")", "\n", "last_inv_size", "=", "len", "(", "inventory", ")", "\n", "\n", "", "states_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "get_grid_embedding", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "states_onehot", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "one_hot_grid", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "goal", "=", "torch", ".", "from_numpy", "(", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ")", "\n", "#inventory = torch.from_numpy(get_inventory_embedding(inventory))", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", ")", "\n", "#print(inventory)", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "inventory", "=", "inventory", ".", "view", "(", "1", ",", "embed_size", ")", "\n", "\n", "outputs", "=", "model", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ")", "\n", "\n", "values", ",", "indices", "=", "outputs", "[", "0", "]", ".", "max", "(", "0", ")", "\n", "\n", "#action = get_action_name(random.randint(0,8))", "\n", "action", "=", "get_action_name", "(", "indices", ".", "item", "(", ")", ")", "\n", "\n", "game", ".", "act", "(", "action", ")", "\n", "\n", "#print(\"--------\")", "\n", "\n", "", "return", "game", ".", "is_over", "(", ")", "\n", "#print(count < 100)", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game_w_language": [[293, 333], ["test_models.generate_new_game", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "states_onehot.to.to", "states_embedding.to.to", "goal.to.to", "inventory.view.to", "inventory.view.view", "model.sample", "model1", "outputs[].max", "test_models.get_action_name", "generate_new_game.act", "generate_new_game.is_over", "numpy.array", "numpy.array", "test_models.get_goal_embedding", "test_models.get_inventory_embedding", "indices.item", "generate_new_game.observe", "test_models.get_grid_embedding", "test_models.one_hot_grid"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv3.sample", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_action_name", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid"], ["", "def", "play_game_w_language", "(", "model", ",", "model1", ",", "glove", ",", "embed_size", ",", "vocab", ",", "device", ")", ":", "\n", "\n", "    ", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "\n", "#print(game.game.goal)", "\n", "\n", "past_moves", "=", "[", "]", "\n", "\n", "while", "not", "game", ".", "is_over", "(", ")", "and", "count", "<", "150", ":", "\n", "\n", "        ", "count", "=", "count", "+", "1", "\n", "state", "=", "game", ".", "observe", "(", ")", "[", "'observation'", "]", "[", "0", "]", "\n", "goal", "=", "game", ".", "game", ".", "goal", "\n", "inventory", "=", "game", ".", "game", ".", "inventory", "\n", "\n", "states_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "get_grid_embedding", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "states_onehot", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "one_hot_grid", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "goal", "=", "torch", ".", "from_numpy", "(", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ")", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", ")", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "inventory", "=", "inventory", ".", "view", "(", "1", ",", "embed_size", ")", "\n", "\n", "sampled_ids", ",", "hidden_layer", "=", "model", ".", "sample", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ")", "\n", "\n", "outputs", "=", "model1", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "hidden_layer", ")", "\n", "\n", "values", ",", "indices", "=", "outputs", "[", "0", "]", ".", "max", "(", "0", ")", "\n", "\n", "action", "=", "get_action_name", "(", "indices", ".", "item", "(", ")", ")", "\n", "\n", "game", ".", "act", "(", "action", ")", "\n", "\n", "\n", "", "return", "count", "<", "150", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game_w_language_glove": [[334, 377], ["test_models.generate_new_game", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "states_onehot.to.to", "states_embedding.to.to", "goal.to.to", "inventory.view.to", "inventory.view.view", "model.get_hidden_state_new", "model1", "outputs[].max", "test_models.get_action_name", "generate_new_game.act", "generate_new_game.is_over", "generate_new_game.is_over", "numpy.array", "numpy.array", "test_models.get_goal_embedding", "test_models.get_inventory_embedding", "indices.item", "generate_new_game.observe", "test_models.get_grid_embedding", "test_models.one_hot_grid"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.get_hidden_state_new", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_action_name", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid"], ["", "def", "play_game_w_language_glove", "(", "model", ",", "model1", ",", "glove", ",", "embed_size", ",", "vocab", ",", "glove_dict", ",", "device", ")", ":", "\n", "\n", "    ", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "\n", "past_moves", "=", "[", "]", "\n", "last_action", "=", "'first'", "\n", "hdn_layer", "=", "None", "\n", "sentences", "=", "[", "]", "\n", "\n", "last_inv_size", "=", "0", "\n", "\n", "while", "not", "game", ".", "is_over", "(", ")", "and", "count", "<", "150", ":", "\n", "\n", "        ", "count", "=", "count", "+", "1", "\n", "state", "=", "game", ".", "observe", "(", ")", "[", "'observation'", "]", "[", "0", "]", "\n", "goal", "=", "game", ".", "game", ".", "goal", "\n", "inventory", "=", "game", ".", "game", ".", "inventory", "\n", "\n", "states_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "get_grid_embedding", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "states_onehot", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "one_hot_grid", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "goal", "=", "torch", ".", "from_numpy", "(", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ")", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", ")", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "inventory", "=", "inventory", ".", "view", "(", "1", ",", "10", ",", "embed_size", ")", "\n", "\n", "# this needs to be written ahhh...", "\n", "seqs", ",", "hiddens", "=", "model", ".", "get_hidden_state_new", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "vocab", ",", "glove_dict", ")", "\n", "outputs", "=", "model1", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "hiddens", ")", "\n", "\n", "values", ",", "indices", "=", "outputs", "[", "0", "]", ".", "max", "(", "0", ")", "\n", "\n", "action", "=", "get_action_name", "(", "indices", ".", "item", "(", ")", ")", "\n", "last_action", "=", "action", "\n", "\n", "game", ".", "act", "(", "action", ")", "\n", "\n", "", "return", "game", ".", "is_over", "(", ")", ",", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game_w_language_v3": [[379, 429], ["test_models.generate_new_game", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "states_onehot.to.to", "states_embedding.to.to", "goal.to.to", "inventory.view.to", "inventory.view.view", "model.get_hidden_state_new", "model1", "outputs[].max", "test_models.get_action_name", "generate_new_game.act", "generate_new_game.is_over", "generate_new_game.is_over", "numpy.array", "numpy.array", "test_models.get_goal_embedding", "test_models.get_inventory_embedding", "indices.item", "generate_new_game.observe", "test_models.get_grid_embedding", "test_models.one_hot_grid"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.get_hidden_state_new", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_action_name", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid"], ["", "def", "play_game_w_language_v3", "(", "model", ",", "model1", ",", "glove", ",", "embed_size", ",", "vocab", ",", "device", ")", ":", "\n", "\n", "    ", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "\n", "past_moves", "=", "[", "]", "\n", "last_action", "=", "'first'", "\n", "hdn_layer", "=", "None", "\n", "sentences", "=", "[", "]", "\n", "\n", "last_inv_size", "=", "0", "\n", "\n", "while", "not", "game", ".", "is_over", "(", ")", "and", "count", "<", "250", ":", "\n", "\n", "        ", "count", "=", "count", "+", "1", "\n", "state", "=", "game", ".", "observe", "(", ")", "[", "'observation'", "]", "[", "0", "]", "\n", "goal", "=", "game", ".", "game", ".", "goal", "\n", "inventory", "=", "game", ".", "game", ".", "inventory", "\n", "\n", "# if len(inventory) > 0:", "\n", "#     print(inventory)", "\n", "\n", "#if len(inventory) != last_inv_size:", "\n", "#    print(inventory)", "\n", "#    last_inv_size = len(inventory)", "\n", "\n", "states_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "get_grid_embedding", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "states_onehot", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "one_hot_grid", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "goal", "=", "torch", ".", "from_numpy", "(", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ")", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", ")", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "#inventory = inventory.view(1, 10, embed_size)", "\n", "inventory", "=", "inventory", ".", "view", "(", "1", ",", "embed_size", ")", "\n", "\n", "seqs", ",", "hiddens", "=", "model", ".", "get_hidden_state_new", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "vocab", ")", "\n", "outputs", "=", "model1", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "hiddens", ")", "\n", "\n", "values", ",", "indices", "=", "outputs", "[", "0", "]", ".", "max", "(", "0", ")", "\n", "\n", "action", "=", "get_action_name", "(", "indices", ".", "item", "(", ")", ")", "\n", "last_action", "=", "action", "\n", "\n", "game", ".", "act", "(", "action", ")", "\n", "\n", "", "return", "game", ".", "is_over", "(", ")", ",", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game_w_language_v2": [[430, 514], ["test_models.generate_new_game", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "states_onehot.to.to", "states_embedding.to.to", "goal.to.to", "inventory.view.to", "inventory.view.view", "model.get_hidden_state", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "bow_ids.to.long", "bow_ids.to.to", "model1", "outputs[].max", "test_models.get_action_name", "generate_new_game.act", "generate_new_game.is_over", "generate_new_game.is_over", "numpy.array", "numpy.array", "test_models.get_goal_embedding", "test_models.get_inventory_embedding", "indices.item", "generate_new_game.observe", "test_models.get_grid_embedding", "test_models.one_hot_grid", "len", "len"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttention.get_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_action_name", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid"], ["", "def", "play_game_w_language_v2", "(", "model", ",", "model1", ",", "glove", ",", "embed_size", ",", "vocab", ",", "device", ")", ":", "\n", "\n", "    ", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "\n", "past_moves", "=", "[", "]", "\n", "last_action", "=", "'first'", "\n", "hdn_layer", "=", "None", "\n", "sentences", "=", "[", "]", "\n", "\n", "last_inv_size", "=", "0", "\n", "\n", "while", "not", "game", ".", "is_over", "(", ")", "and", "count", "<", "250", ":", "\n", "\n", "        ", "count", "=", "count", "+", "1", "\n", "state", "=", "game", ".", "observe", "(", ")", "[", "'observation'", "]", "[", "0", "]", "\n", "goal", "=", "game", ".", "game", ".", "goal", "\n", "inventory", "=", "game", ".", "game", ".", "inventory", "\n", "\n", "# if len(inventory) > 0:", "\n", "#     print(inventory)", "\n", "\n", "#if len(inventory) != last_inv_size:", "\n", "#    print(inventory)", "\n", "#    last_inv_size = len(inventory)", "\n", "\n", "states_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "get_grid_embedding", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "states_onehot", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "one_hot_grid", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "goal", "=", "torch", ".", "from_numpy", "(", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ")", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", ")", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "inventory", "=", "inventory", ".", "view", "(", "1", ",", "10", ",", "embed_size", ")", "\n", "\n", "#if sample again or never sampled before.", "\n", "#if last_action == 'stop' or last_action == 'first': HOW TO INCORPORATE TEHE STOP?", "\n", "bow_ids", "=", "[", "]", "\n", "\n", "# sample", "\n", "all_sampled_ids", "=", "model", ".", "get_hidden_state", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "vocab", ")", "\n", "\n", "# turn it into BOW", "\n", "'''\n        for sampled_ids in all_sampled_ids:\n\n            bow_id = [0]*len(vocab)\n\n            for s_id in sampled_ids:\n                bow_id[s_id] += 1\n\n            bow_ids.append(bow_id)\n        '''", "\n", "\n", "bow_ids", "=", "[", "sent", "+", "[", "len", "(", "vocab", ")", "]", "*", "(", "20", "-", "len", "(", "sent", ")", ")", "for", "sent", "in", "all_sampled_ids", "]", "\n", "\n", "\n", "#FOR BOW", "\n", "bow_ids", "=", "torch", ".", "Tensor", "(", "bow_ids", ")", "\n", "bow_ids", "=", "bow_ids", ".", "long", "(", ")", "\n", "bow_ids", "=", "bow_ids", ".", "to", "(", "device", ")", "\n", "\n", "outputs", "=", "model1", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "bow_ids", ")", "\n", "\n", "\n", "# for GRU/LSTM", "\n", "#lengths = [len(sampled_ids)]", "\n", "#targets = torch.Tensor(sampled_ids)", "\n", "#targets = targets.long()", "\n", "#targets = targets.to(device)", "\n", "#targets = targets.view(1, targets.size(0))", "\n", "#outputs = model1(states_embedding, states_onehot, inventory, goal, targets, lengths)", "\n", "\n", "values", ",", "indices", "=", "outputs", "[", "0", "]", ".", "max", "(", "0", ")", "\n", "\n", "action", "=", "get_action_name", "(", "indices", ".", "item", "(", ")", ")", "\n", "last_action", "=", "action", "\n", "\n", "game", ".", "act", "(", "action", ")", "\n", "\n", "", "return", "game", ".", "is_over", "(", ")", ",", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.load_model_play_game": [[515, 554], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "train_models.StateGoalNetv1", "train_models.StateGoalNetv1.to", "train_models.StateGoalNetv1.load_state_dict", "train_models.StateGoalNetv1.eval", "range", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchtext.GloVe", "torchtext.GloVe", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "test_models.play_game", "print"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game"], ["", "def", "load_model_play_game", "(", ")", ":", "\n", "\n", "# load model", "\n", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "\"using cuda\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"using cpu\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "name", "=", "\"compiled_dataset_08131950\"", "#add 50 back in", "\n", "embed_dim", "=", "300", "# switch this later!!", "\n", "embed_size", "=", "embed_dim", "\n", "\n", "if", "embed_dim", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "\n", "# or do the all obs. ", "\n", "#action_model = AllObsPredict(embed_dim)", "\n", "", "action_model", "=", "StateGoalNetv1", "(", "embed_dim", ")", "\n", "action_model", ".", "to", "(", "device", ")", "\n", "#action_model.load_state_dict(torch.load(\"TRAINED_MODELS/TRAINED_MODELS/StateGoalNetv1_300.pt\"))", "\n", "action_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"TRAINED_MODELS/TRAINED_MODELS/StateGoalNetv1_300_10per.pt\"", ")", ")", "\n", "action_model", ".", "eval", "(", ")", "\n", "\n", "# play x number of games:", "\n", "tot_games", "=", "100", "\n", "tot_win", "=", "0", "\n", "for", "i", "in", "range", "(", "tot_games", ")", ":", "\n", "        ", "print", "(", "i", ")", "\n", "res", "=", "play_game", "(", "action_model", ",", "glove", ",", "embed_size", ",", "device", ")", "\n", "tot_win", "=", "tot_win", "+", "res", "\n", "print", "(", "tot_win", ",", "i", "+", "1", ")", "\n", "\n", "", "print", "(", "tot_win", ",", "tot_games", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.load_model_play_game_with_lang": [[555, 624], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "build_vocab.build_vocabulary", "vocab.add_word", "vocab.add_word", "vocab.add_word", "vocab.add_word", "numpy.zeros", "numpy.random.uniform().astype", "numpy.concatenate", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "train_models.LanguageWithAttentionSUM", "train_models.LanguageWithAttentionSUM.to", "train_models.LanguageWithAttentionSUM.load_state_dict", "train_models.LanguageWithAttentionSUM.eval", "train_models.SimpleNetwork", "train_models.SimpleNetwork.to", "train_models.SimpleNetwork.load_state_dict", "train_models.SimpleNetwork.eval", "range", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchtext.GloVe", "torchtext.GloVe", "open", "pickle.load", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "test_models.play_game_w_language_v3", "print", "numpy.random.uniform", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.build_vocabulary", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game_w_language_v3"], ["", "def", "load_model_play_game_with_lang", "(", ")", ":", "\n", "\n", "# load model", "\n", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "\"using cuda\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"using cpu\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "name", "=", "\"compiled_dataset_08131950\"", "#add 50 back in", "\n", "embed_dim", "=", "300", "# switch this later!!", "\n", "embed_size", "=", "embed_dim", "\n", "\n", "if", "embed_dim", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "", "with", "open", "(", "'data/'", "+", "name", "+", "'_all_instructions'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "all_instructions", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "vocab", ",", "vocab_weights", "=", "build_vocabulary", "(", "all_instructions", ",", "name", ",", "embed_dim", ")", "\n", "\n", "vocab", ".", "add_word", "(", "'<pad>'", ")", "\n", "vocab", ".", "add_word", "(", "'<start>'", ")", "\n", "vocab", ".", "add_word", "(", "'<end>'", ")", "\n", "vocab", ".", "add_word", "(", "'<unk>'", ")", "\n", "\n", "temp", "=", "np", ".", "zeros", "(", "(", "1", ",", "300", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "temp1", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.01", ",", "0.01", ",", "(", "1", ",", "300", ")", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n", "vocab_weights", "=", "np", ".", "concatenate", "(", "(", "vocab_weights", ",", "temp", ")", ",", "axis", "=", "0", ")", "\n", "\n", "vocab_weights", "=", "torch", ".", "Tensor", "(", "vocab_weights", ")", ".", "to", "(", "device", ")", "\n", "\n", "#language_model = LanguageWithAttention(len(vocab), embed_dim, vocab_weights, training=False)", "\n", "language_model", "=", "LanguageWithAttentionSUM", "(", "len", "(", "vocab", ")", ",", "embed_dim", ",", "vocab_weights", ",", "training", "=", "False", ")", "\n", "language_model", ".", "to", "(", "device", ")", "\n", "#language_model.load_state_dict(torch.load(\"TRAINED_MODELS/LanguageWithAttention_both.pt\"))", "\n", "language_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"TRAINED_MODELS/LanguageWithAttentionSUM_missing10per.pt\"", ")", ")", "\n", "language_model", ".", "eval", "(", ")", "\n", "\n", "# or do the all obs. ", "\n", "#action_model = AllObsPredictAtten(embed_dim, vocab_weights, vocab_words=vocab)", "\n", "action_model", "=", "SimpleNetwork", "(", "embed_dim", ")", "\n", "action_model", ".", "to", "(", "device", ")", "\n", "#action_model.load_state_dict(torch.load(\"TRAINED_MODELS/AllObsPredictAtten_both.pt\"))", "\n", "action_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"TRAINED_MODELS/SimpleNetwork_missing10per.pt\"", ")", ")", "\n", "action_model", ".", "eval", "(", ")", "\n", "\n", "#action_model = CNNAction(embed_dim, vocab, vocab_weights)", "\n", "#action_model.to(device)", "\n", "#action_model.load_state_dict(torch.load(\"TRAINED_MODELS/CNNAction_8epochs_nllsoftmax.pt\"))", "\n", "#action_model.eval()", "\n", "\n", "# play x number of games:", "\n", "tot_games", "=", "100", "\n", "tot_win", "=", "0", "\n", "for", "i", "in", "range", "(", "tot_games", ")", ":", "\n", "#print(i)", "\n", "        ", "res", ",", "sentences", "=", "play_game_w_language_v3", "(", "language_model", ",", "action_model", ",", "glove", ",", "embed_size", ",", "vocab", ",", "device", ")", "\n", "#print(res)", "\n", "#print(sentences)", "\n", "tot_win", "=", "tot_win", "+", "res", "\n", "print", "(", "tot_win", ",", "i", "+", "1", ")", "\n", "\n", "", "print", "(", "tot_win", ",", "tot_games", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.load_model_play_game_with_lang_glove": [[625, 690], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "build_vocab.build_vocabulary", "vocab.add_word", "vocab.add_word", "vocab.add_word", "vocab.add_word", "numpy.zeros", "numpy.random.uniform().astype", "numpy.concatenate", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "train_models.LanguageWithAttentionGLOVE", "train_models.LanguageWithAttentionGLOVE.to", "train_models.LanguageWithAttentionGLOVE.load_state_dict", "train_models.LanguageWithAttentionGLOVE.eval", "train_models.AllObsPredictAtten", "train_models.AllObsPredictAtten.to", "train_models.AllObsPredictAtten.load_state_dict", "train_models.AllObsPredictAtten.eval", "range", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchtext.GloVe", "torchtext.GloVe", "open", "pickle.load", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "test_models.play_game_w_language_glove", "print", "numpy.random.uniform", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.build_vocabulary", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game_w_language_glove"], ["", "def", "load_model_play_game_with_lang_glove", "(", ")", ":", "\n", "\n", "# load model", "\n", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "\"using cuda\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"using cpu\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "name", "=", "\"compiled_dataset_08131950\"", "#add 50 back in", "\n", "embed_dim", "=", "300", "# switch this later!!", "\n", "embed_size", "=", "embed_dim", "\n", "\n", "if", "embed_dim", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "", "with", "open", "(", "'data/'", "+", "name", "+", "'_all_instructions'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "all_instructions", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "vocab", ",", "vocab_weights", "=", "build_vocabulary", "(", "all_instructions", ",", "name", ",", "embed_dim", ")", "\n", "\n", "vocab", ".", "add_word", "(", "'<pad>'", ")", "\n", "vocab", ".", "add_word", "(", "'<start>'", ")", "\n", "vocab", ".", "add_word", "(", "'<end>'", ")", "\n", "vocab", ".", "add_word", "(", "'<unk>'", ")", "\n", "\n", "temp", "=", "np", ".", "zeros", "(", "(", "1", ",", "300", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "temp1", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.01", ",", "0.01", ",", "(", "1", ",", "300", ")", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n", "vocab_weights", "=", "np", ".", "concatenate", "(", "(", "vocab_weights", ",", "temp", ")", ",", "axis", "=", "0", ")", "\n", "\n", "vocab_weights", "=", "torch", ".", "Tensor", "(", "vocab_weights", ")", ".", "to", "(", "device", ")", "\n", "\n", "language_model", "=", "LanguageWithAttentionGLOVE", "(", "len", "(", "vocab", ")", ",", "embed_dim", ",", "vocab_weights", ",", "training", "=", "False", ")", "\n", "language_model", ".", "to", "(", "device", ")", "\n", "language_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"TRAINED_MODELS/LanguageWithAttentionGLOVE_clipped.pt\"", ")", ")", "\n", "language_model", ".", "eval", "(", ")", "\n", "\n", "# or do the all obs. ", "\n", "action_model", "=", "AllObsPredictAtten", "(", "embed_dim", ",", "vocab_weights", ",", "vocab_words", "=", "vocab", ")", "\n", "action_model", ".", "to", "(", "device", ")", "\n", "action_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"TRAINED_MODELS/AllObsPredictAtten_both.pt\"", ")", ")", "\n", "action_model", ".", "eval", "(", ")", "\n", "\n", "#action_model = CNNAction(embed_dim, vocab, vocab_weights)", "\n", "#action_model.to(device)", "\n", "#action_model.load_state_dict(torch.load(\"TRAINED_MODELS/CNNAction_8epochs_nllsoftmax.pt\"))", "\n", "#action_model.eval()", "\n", "\n", "# play x number of games:", "\n", "tot_games", "=", "20", "\n", "tot_win", "=", "0", "\n", "for", "i", "in", "range", "(", "tot_games", ")", ":", "\n", "#print(i)", "\n", "        ", "res", ",", "sentences", "=", "play_game_w_language_glove", "(", "language_model", ",", "action_model", ",", "glove", ",", "embed_size", ",", "vocab", ",", "vocab_weights", ",", "device", ")", "\n", "#print(res)", "\n", "#print(sentences)", "\n", "tot_win", "=", "tot_win", "+", "res", "\n", "print", "(", "tot_win", ",", "i", "+", "1", ")", "\n", "\n", "", "print", "(", "tot_win", ",", "tot_games", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game_by_hand": [[691, 799], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "build_vocab.build_vocabulary", "vocab.add_word", "vocab.add_word", "vocab.add_word", "vocab.add_word", "train_models.LanguageWithAttentionSUM", "train_models.LanguageWithAttentionSUM.to", "train_models.LanguageWithAttentionSUM.load_state_dict", "test_models.generate_new_game", "test_models.generate_new_game", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "open", "pickle.load", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torchtext.GloVe", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "states_onehot.to.to", "states_embedding.to.to", "goal.to.to", "inventory.view.to", "inventory.view.view", "train_models.LanguageWithAttentionSUM.get_hidden_state_new", "print", "print", "input", "test_models.get_action_name", "generate_new_game.act", "torchtext.GloVe", "generate_new_game.is_over", "print", "numpy.array", "numpy.array", "test_models.get_goal_embedding", "test_models.get_inventory_embedding", "sampled_caption.append", "int", "generate_new_game.observe", "test_models.get_grid_embedding", "test_models.one_hot_grid"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.build_vocabulary", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.get_hidden_state_new", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_action_name", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid"], ["", "def", "play_game_by_hand", "(", ")", ":", "\n", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "\"using cuda\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"using cpu\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "name", "=", "\"compiled_dataset_08131950\"", "#add 50 back in", "\n", "embed_dim", "=", "300", "# switch this later!!", "\n", "embed_size", "=", "embed_dim", "\n", "\n", "with", "open", "(", "'data/'", "+", "name", "+", "'_all_instructions'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "all_instructions", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "vocab", ",", "vocab_weights", "=", "build_vocabulary", "(", "all_instructions", ",", "name", ",", "embed_dim", ")", "\n", "\n", "vocab", ".", "add_word", "(", "'<pad>'", ")", "\n", "vocab", ".", "add_word", "(", "'<start>'", ")", "\n", "vocab", ".", "add_word", "(", "'<end>'", ")", "\n", "vocab", ".", "add_word", "(", "'<unk>'", ")", "\n", "\n", "lstm_embed_dim", "=", "16", "\n", "\n", "#model = LanguageNetv1(len(vocab), lstm_embed_dim)", "\n", "#model = LanguageNetv2(len(vocab), embed_dim, vocab_weights, training=False)", "\n", "#model = LanguageWithAttention(len(vocab), embed_dim, vocab_weights, training=False)", "\n", "model", "=", "LanguageWithAttentionSUM", "(", "len", "(", "vocab", ")", ",", "embed_dim", ",", "vocab_weights", ",", "training", "=", "False", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"TRAINED_MODELS/LanguageWithAttentionSUM_adam.pt\"", ")", ")", "\n", "#model.load_state_dict(torch.load(\"TRAINED_MODELS/LanguageWithAttentionSUM_missing10per.pt\"))    ", "\n", "#model.load_state_dict(torch.load(\"TRAINED_MODELS/LanguageWithAttention_both1.pt\"))", "\n", "#model.load_state_dict(torch.load(\"TRAINED_MODELS/LanguageWithAttention.pt\")) # trained with embeddings", "\n", "\n", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "\n", "if", "embed_size", "==", "300", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "", "elif", "embed_size", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "\n", "", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "\n", "print", "(", "game", ".", "game", ".", "goal", ")", "\n", "\n", "past_moves", "=", "[", "]", "\n", "\n", "while", "not", "game", ".", "is_over", "(", ")", "or", "count", "==", "250", ":", "\n", "\n", "        ", "count", "=", "count", "+", "1", "\n", "state", "=", "game", ".", "observe", "(", ")", "[", "'observation'", "]", "[", "0", "]", "\n", "\n", "#fix this printing so it is easier.. ", "\n", "for", "line", "in", "state", ":", "\n", "            ", "print", "(", "line", ")", "\n", "\n", "", "goal", "=", "game", ".", "game", ".", "goal", "\n", "inventory", "=", "game", ".", "game", ".", "inventory", "\n", "\n", "states_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "get_grid_embedding", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "states_onehot", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "one_hot_grid", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "goal", "=", "torch", ".", "from_numpy", "(", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ")", "\n", "#inventory = torch.from_numpy(get_inventory_embedding(inventory))", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", ")", "\n", "#inventory = torch.Tensor(np.array([get_inventory_embedding(inventory, glove, embed_size)]))", "\n", "\n", "#print(inventory)", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "inventory", "=", "inventory", ".", "view", "(", "1", ",", "embed_size", ")", "\n", "\n", "#if count % 10:", "\n", "\n", "sampled_ids", ",", "hiddens", "=", "model", ".", "get_hidden_state_new", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "vocab", ")", "\n", "#sampled_ids = model.sample(states_embedding, states_onehot, inventory, goal, device, vocab)", "\n", "#sampled_ids = sampled_ids[0].cpu().numpy() ", "\n", "\n", "#also convert to words:", "\n", "# for i in range(5):", "\n", "#     sampled_caption = []", "\n", "#     for word_id in sampled_ids[i]:", "\n", "#         word = vocab.idx2word[word_id]", "\n", "#         sampled_caption.append(word)", "\n", "#         if word == '<end>':", "\n", "#             break", "\n", "#     sentence = ' '.join(sampled_caption) ", "\n", "#     print(sentence, scores[i])", "\n", "sampled_caption", "=", "[", "]", "\n", "for", "word_id", "in", "sampled_ids", "[", "0", "]", ":", "\n", "            ", "word", "=", "vocab", ".", "idx2word", "[", "word_id", "]", "\n", "sampled_caption", ".", "append", "(", "word", ")", "\n", "if", "word", "==", "'<end>'", ":", "\n", "                ", "break", "\n", "", "", "sentence", "=", "' '", ".", "join", "(", "sampled_caption", ")", "\n", "print", "(", "sentence", ")", "\n", "\n", "print", "(", "'1:up, 2:down, 3:left, 4:right, 5:toggle, 6:grab, 7:mine, 0: craft'", ")", "\n", "\n", "a", "=", "input", "(", "\"Enter a move: \"", ")", "\n", "action", "=", "get_action_name", "(", "int", "(", "a", ")", ")", "\n", "game", ".", "act", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game_by_hand_test": [[800, 894], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "build_vocab.build_vocabulary", "vocab.add_word", "vocab.add_word", "vocab.add_word", "vocab.add_word", "train_models.LanguageWithAttention", "train_models.LanguageWithAttention.to", "train_models.LanguageWithAttention.load_state_dict", "test_models.generate_new_game", "test_models.generate_new_game", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "open", "pickle.load", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torchtext.GloVe", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "states_onehot.to.to", "states_embedding.to.to", "goal.to.to", "inventory.to.to", "train_models.LanguageWithAttention.get_hidden_state_new1", "print", "print", "input", "test_models.get_action_name", "generate_new_game.act", "torchtext.GloVe", "generate_new_game.is_over", "print", "numpy.array", "numpy.array", "test_models.get_goal_embedding", "numpy.array", "sampled_caption.append", "int", "generate_new_game.observe", "words.append", "test_models.get_grid_embedding", "test_models.one_hot_grid", "test_models.get_inventory_embedding"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.build_vocabulary", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention.get_hidden_state_new1", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_action_name", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding"], ["", "", "def", "play_game_by_hand_test", "(", ")", ":", "\n", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "\"using cuda\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"using cpu\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "name", "=", "\"compiled_dataset_08131950\"", "#add 50 back in", "\n", "embed_dim", "=", "300", "# switch this later!!", "\n", "embed_size", "=", "embed_dim", "\n", "\n", "with", "open", "(", "'data/'", "+", "name", "+", "'_all_instructions'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "all_instructions", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "vocab", ",", "vocab_weights", "=", "build_vocabulary", "(", "all_instructions", ",", "name", ",", "embed_dim", ")", "\n", "\n", "vocab", ".", "add_word", "(", "'<pad>'", ")", "\n", "vocab", ".", "add_word", "(", "'<start>'", ")", "\n", "vocab", ".", "add_word", "(", "'<end>'", ")", "\n", "vocab", ".", "add_word", "(", "'<unk>'", ")", "\n", "\n", "lstm_embed_dim", "=", "16", "\n", "\n", "#model = LanguageNetv1(len(vocab), lstm_embed_dim)", "\n", "#model = LanguageNetv2(len(vocab), embed_dim, vocab_weights, training=False)", "\n", "model", "=", "LanguageWithAttention", "(", "len", "(", "vocab", ")", ",", "embed_dim", ",", "vocab_weights", ",", "training", "=", "False", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"TRAINED_MODELS/LanguageWithAttention_both1.pt\"", ")", ")", "\n", "#model.load_state_dict(torch.load(\"TRAINED_MODELS/LanguageWithAttention.pt\")) # trained with embeddings", "\n", "\n", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "\n", "if", "embed_size", "==", "300", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "", "elif", "embed_size", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "\n", "", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "\n", "print", "(", "game", ".", "game", ".", "goal", ")", "\n", "\n", "past_moves", "=", "[", "]", "\n", "\n", "while", "not", "game", ".", "is_over", "(", ")", "or", "count", "==", "250", ":", "\n", "\n", "        ", "count", "=", "count", "+", "1", "\n", "state", "=", "game", ".", "observe", "(", ")", "[", "'observation'", "]", "[", "0", "]", "\n", "\n", "#fix this printing so it is easier.. ", "\n", "for", "line", "in", "state", ":", "\n", "            ", "print", "(", "line", ")", "\n", "\n", "", "goal", "=", "game", ".", "game", ".", "goal", "\n", "inventory", "=", "game", ".", "game", ".", "inventory", "\n", "\n", "states_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "get_grid_embedding", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "states_onehot", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "one_hot_grid", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "goal", "=", "torch", ".", "from_numpy", "(", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ")", "\n", "#inventory = torch.from_numpy(get_inventory_embedding(inventory))", "\n", "#inventory = torch.Tensor(get_inventory_embedding(inventory, glove, embed_size))", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "#print(inventory)", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "sampled_ids", ",", "hiddens", "=", "model", ".", "get_hidden_state_new1", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "vocab", ")", "\n", "#sampled_ids = model.sample(states_embedding, states_onehot, inventory, goal, device, vocab)", "\n", "#sampled_ids = sampled_ids[0].cpu().numpy() ", "\n", "\n", "sampled_caption", "=", "[", "]", "\n", "for", "word_ids", "in", "sampled_ids", "[", "1", ":", "]", ":", "\n", "            ", "words", "=", "[", "]", "\n", "for", "word_id", "in", "word_ids", "[", "0", "]", ":", "\n", "                ", "word", "=", "vocab", ".", "idx2word", "[", "word_id", "]", "\n", "words", ".", "append", "(", "word", ")", "\n", "if", "word", "==", "'<end>'", ":", "\n", "                    ", "break", "\n", "", "", "sampled_caption", ".", "append", "(", "words", ")", "\n", "#sentence = ' '.join(sampled_caption) ", "\n", "", "print", "(", "sampled_caption", ")", "\n", "\n", "\n", "print", "(", "'1:up, 2:down, 3:left, 4:right, 5:toggle, 6:grab, 7:mine, 0: craft'", ")", "\n", "\n", "a", "=", "input", "(", "\"Enter a move: \"", ")", "\n", "action", "=", "get_action_name", "(", "int", "(", "a", ")", ")", "\n", "game", ".", "act", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game_by_hand_glove": [[895, 982], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "build_vocab.build_vocabulary", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "vocab.add_word", "vocab.add_word", "vocab.add_word", "vocab.add_word", "train_models.LanguageWithAttentionGLOVE", "train_models.LanguageWithAttentionGLOVE.to", "train_models.LanguageWithAttentionGLOVE.load_state_dict", "test_models.generate_new_game", "test_models.generate_new_game", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "open", "pickle.load", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torchtext.GloVe", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "states_onehot.to.to", "states_embedding.to.to", "goal.to.to", "inventory.to.to", "train_models.LanguageWithAttentionGLOVE.get_hidden_state_new", "print", "print", "input", "test_models.get_action_name", "generate_new_game.act", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torchtext.GloVe", "generate_new_game.is_over", "print", "numpy.array", "numpy.array", "test_models.get_goal_embedding", "numpy.array", "sampled_caption.append", "int", "generate_new_game.observe", "test_models.get_grid_embedding", "test_models.one_hot_grid", "test_models.get_inventory_embedding"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.build_vocabulary", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.generate_new_game", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.get_hidden_state_new", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.get_action_name", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding"], ["", "", "def", "play_game_by_hand_glove", "(", ")", ":", "\n", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "\"using cuda\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"using cpu\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "name", "=", "\"compiled_dataset_08131950\"", "#add 50 back in", "\n", "embed_dim", "=", "300", "# switch this later!!", "\n", "embed_size", "=", "embed_dim", "\n", "\n", "with", "open", "(", "'data/'", "+", "name", "+", "'_all_instructions'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "all_instructions", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "vocab", ",", "vocab_weights", "=", "build_vocabulary", "(", "all_instructions", ",", "name", ",", "embed_dim", ")", "\n", "\n", "vocab_weights", "=", "torch", ".", "from_numpy", "(", "vocab_weights", ")", ".", "to", "(", "device", ")", "\n", "\n", "vocab", ".", "add_word", "(", "'<pad>'", ")", "\n", "vocab", ".", "add_word", "(", "'<start>'", ")", "\n", "vocab", ".", "add_word", "(", "'<end>'", ")", "\n", "vocab", ".", "add_word", "(", "'<unk>'", ")", "\n", "\n", "lstm_embed_dim", "=", "16", "\n", "\n", "#model = LanguageNetv1(len(vocab), lstm_embed_dim)", "\n", "#model = LanguageNetv2(len(vocab), embed_dim, vocab_weights, training=False)", "\n", "#model = LanguageWithAttention(len(vocab), embed_dim, vocab_weights, training=False)", "\n", "model", "=", "LanguageWithAttentionGLOVE", "(", "len", "(", "vocab", ")", ",", "embed_dim", ",", "vocab_weights", ",", "training", "=", "False", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"TRAINED_MODELS/LanguageWithAttentionGLOVE_01RMSProp.pt\"", ")", ")", "\n", "\n", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "\n", "if", "embed_size", "==", "300", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "", "elif", "embed_size", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "\n", "", "count", "=", "0", "\n", "game", "=", "generate_new_game", "(", ")", "\n", "\n", "print", "(", "game", ".", "game", ".", "goal", ")", "\n", "\n", "past_moves", "=", "[", "]", "\n", "\n", "while", "not", "game", ".", "is_over", "(", ")", "or", "count", "==", "250", ":", "\n", "\n", "        ", "count", "=", "count", "+", "1", "\n", "state", "=", "game", ".", "observe", "(", ")", "[", "'observation'", "]", "[", "0", "]", "\n", "\n", "#fix this printing so it is easier.. ", "\n", "for", "line", "in", "state", ":", "\n", "            ", "print", "(", "line", ")", "\n", "\n", "", "goal", "=", "game", ".", "game", ".", "goal", "\n", "inventory", "=", "game", ".", "game", ".", "inventory", "\n", "\n", "states_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "get_grid_embedding", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "states_onehot", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "one_hot_grid", "(", "state", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "goal", "=", "torch", ".", "from_numpy", "(", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ")", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", "]", ")", ")", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "sampled_ids", ",", "hiddens", "=", "model", ".", "get_hidden_state_new", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "vocab", ",", "vocab_weights", ")", "\n", "\n", "sampled_caption", "=", "[", "]", "\n", "for", "word_id", "in", "sampled_ids", "[", "0", "]", ":", "\n", "            ", "word", "=", "vocab", ".", "idx2word", "[", "word_id", "]", "\n", "sampled_caption", ".", "append", "(", "word", ")", "\n", "if", "word", "==", "'<end>'", ":", "\n", "                ", "break", "\n", "", "", "sentence", "=", "' '", ".", "join", "(", "sampled_caption", ")", "\n", "print", "(", "sentence", ")", "\n", "\n", "print", "(", "'1:up, 2:down, 3:left, 4:right, 5:toggle, 6:grab, 7:mine, 0: craft'", ")", "\n", "\n", "a", "=", "input", "(", "\"Enter a move: \"", ")", "\n", "action", "=", "get_action_name", "(", "int", "(", "a", ")", ")", "\n", "game", ".", "act", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.main_pretrain.main": [[28, 217], ["pytorchppo.a2c_ppo_acktr.arguments.get_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "os.path.expanduser", "pytorchppo.a2c_ppo_acktr.utils.cleanup_log_dir", "pytorchppo.a2c_ppo_acktr.utils.cleanup_log_dir", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "build_vocab.build_vocabulary", "vocab.add_word", "vocab.add_word", "vocab.add_word", "vocab.add_word", "envs.make_vec_envs", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "actor_critic.to", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage", "envs.make_vec_envs.reset", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage.obs[].copy_", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage.to", "collections.deque", "time.time", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "open", "pickle.load", "pytorchppo.a2c_ppo_acktr.algo.A2C_ACKTR", "gail.Discriminator", "os.path.join", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage.compute_returns", "algo.A2C_ACKTR.update", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage.after_update", "pytorchppo.a2c_ppo_acktr.algo.PPO", "len", "gail.ExpertDataset", "int", "pytorchppo.a2c_ppo_acktr.utils.update_linear_schedule", "envs.make_vec_envs.step", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage.insert", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "actor_critic.get_value().detach", "range", "range", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "print", "pytorchppo.evaluation.evaluate", "pytorchppo.a2c_ppo_acktr.algo.A2C_ACKTR", "[].lower", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "actor_critic.act", "envs.make_vec_envs.venv.eval", "gail.Discriminator.update", "gail.Discriminator.predict_reward", "os.makedirs", "os.path.join", "len", "len", "pytorchppo.a2c_ppo_acktr.utils.get_vec_normalize", "info.keys", "collections.deque.append", "actor_critic.get_value", "getattr", "int", "len", "numpy.mean", "numpy.median", "numpy.min", "numpy.max", "pytorchppo.a2c_ppo_acktr.utils.get_vec_normalize", "pytorchppo.a2c_ppo_acktr.utils.get_vec_normalize", "pytorchppo.a2c_ppo_acktr.arguments.get_args.env_name.split", "info.keys"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.arguments.get_args", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.cleanup_log_dir", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.cleanup_log_dir", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.build_vocabulary", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.make_vec_envs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.compute_returns", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.after_update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.update_linear_schedule", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.insert", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.pytorchppo.evaluation.evaluate", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.gail.Discriminator.predict_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_vec_normalize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.get_value", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_vec_normalize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_vec_normalize"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n", "if", "args", ".", "cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda_deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "", "log_dir", "=", "os", ".", "path", ".", "expanduser", "(", "args", ".", "log_dir", ")", "\n", "eval_log_dir", "=", "log_dir", "+", "\"_eval\"", "\n", "utils", ".", "cleanup_log_dir", "(", "log_dir", ")", "\n", "utils", ".", "cleanup_log_dir", "(", "eval_log_dir", ")", "\n", "\n", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n", "\n", "name", "=", "\"compiled_dataset_08131950\"", "\n", "embed_dim", "=", "300", "\n", "embed_size", "=", "embed_dim", "\n", "\n", "with", "open", "(", "'data/'", "+", "name", "+", "'_all_instructions'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "all_instructions", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "vocab", ",", "vocab_weights", "=", "build_vocabulary", "(", "all_instructions", ",", "name", ",", "embed_dim", ")", "\n", "\n", "vocab", ".", "add_word", "(", "'<pad>'", ")", "\n", "vocab", ".", "add_word", "(", "'<start>'", ")", "\n", "vocab", ".", "add_word", "(", "'<end>'", ")", "\n", "vocab", ".", "add_word", "(", "'<unk>'", ")", "\n", "\n", "envs", "=", "make_vec_envs", "(", "args", ".", "env_name", ",", "args", ".", "seed", ",", "args", ".", "num_processes", ",", "\n", "args", ".", "gamma", ",", "args", ".", "log_dir", ",", "device", ",", "False", ",", "vocabulary", "=", "vocab", ")", "\n", "\n", "#actor_critic = Policy(", "\n", "#    envs.observation_space.shape,", "\n", "#    envs.action_space,", "\n", "#    base_kwargs={'recurrent': args.recurrent_policy})", "\n", "\n", "actor_critic", ",", "ob_rms", "=", "torch", ".", "load", "(", "args", ".", "load_dir", "+", "\".pt\"", ")", "\n", "actor_critic", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "algo", "==", "'a2c'", ":", "\n", "        ", "agent", "=", "algo", ".", "A2C_ACKTR", "(", "\n", "actor_critic", ",", "\n", "args", ".", "value_loss_coef", ",", "\n", "args", ".", "entropy_coef", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "eps", "=", "args", ".", "eps", ",", "\n", "alpha", "=", "args", ".", "alpha", ",", "\n", "max_grad_norm", "=", "args", ".", "max_grad_norm", ")", "\n", "", "elif", "args", ".", "algo", "==", "'ppo'", ":", "\n", "        ", "agent", "=", "algo", ".", "PPO", "(", "\n", "actor_critic", ",", "\n", "args", ".", "clip_param", ",", "\n", "args", ".", "ppo_epoch", ",", "\n", "args", ".", "num_mini_batch", ",", "\n", "args", ".", "value_loss_coef", ",", "\n", "args", ".", "entropy_coef", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "eps", "=", "args", ".", "eps", ",", "\n", "max_grad_norm", "=", "args", ".", "max_grad_norm", ")", "\n", "", "elif", "args", ".", "algo", "==", "'acktr'", ":", "\n", "        ", "agent", "=", "algo", ".", "A2C_ACKTR", "(", "\n", "actor_critic", ",", "args", ".", "value_loss_coef", ",", "args", ".", "entropy_coef", ",", "acktr", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "gail", ":", "\n", "        ", "assert", "len", "(", "envs", ".", "observation_space", ".", "shape", ")", "==", "1", "\n", "discr", "=", "gail", ".", "Discriminator", "(", "\n", "envs", ".", "observation_space", ".", "shape", "[", "0", "]", "+", "envs", ".", "action_space", ".", "shape", "[", "0", "]", ",", "100", ",", "\n", "device", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "gail_experts_dir", ",", "\"trajs_{}.pt\"", ".", "format", "(", "\n", "args", ".", "env_name", ".", "split", "(", "'-'", ")", "[", "0", "]", ".", "lower", "(", ")", ")", ")", "\n", "\n", "gail_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "gail", ".", "ExpertDataset", "(", "\n", "file_name", ",", "num_trajectories", "=", "4", ",", "subsample_frequency", "=", "20", ")", ",", "\n", "batch_size", "=", "args", ".", "gail_batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "#print(args.num_env_steps)", "\n", "", "rollouts", "=", "RolloutStorage", "(", "args", ".", "num_steps", ",", "args", ".", "num_processes", ",", "\n", "envs", ".", "observation_space", ".", "shape", ",", "envs", ".", "action_space", ",", "\n", "actor_critic", ".", "recurrent_hidden_state_size", ")", "\n", "\n", "obs", "=", "envs", ".", "reset", "(", ")", "\n", "rollouts", ".", "obs", "[", "0", "]", ".", "copy_", "(", "obs", ")", "\n", "rollouts", ".", "to", "(", "device", ")", "\n", "\n", "episode_rewards", "=", "deque", "(", "maxlen", "=", "10", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "num_updates", "=", "int", "(", "\n", "args", ".", "num_env_steps", ")", "//", "args", ".", "num_steps", "//", "args", ".", "num_processes", "\n", "\n", "#print(num_updates)", "\n", "for", "j", "in", "range", "(", "num_updates", ")", ":", "\n", "\n", "        ", "if", "args", ".", "use_linear_lr_decay", ":", "\n", "# decrease learning rate linearly", "\n", "            ", "utils", ".", "update_linear_schedule", "(", "\n", "agent", ".", "optimizer", ",", "j", ",", "num_updates", ",", "\n", "agent", ".", "optimizer", ".", "lr", "if", "args", ".", "algo", "==", "\"acktr\"", "else", "args", ".", "lr", ")", "\n", "\n", "", "for", "step", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "# Sample actions", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "value", ",", "action", ",", "action_log_prob", ",", "recurrent_hidden_states", "=", "actor_critic", ".", "act", "(", "\n", "rollouts", ".", "obs", "[", "step", "]", ",", "rollouts", ".", "recurrent_hidden_states", "[", "step", "]", ",", "\n", "rollouts", ".", "masks", "[", "step", "]", ")", "\n", "\n", "# Obser reward and next obs", "\n", "", "obs", ",", "reward", ",", "done", ",", "infos", "=", "envs", ".", "step", "(", "action", ")", "\n", "\n", "for", "info", "in", "infos", ":", "\n", "                ", "if", "'episode'", "in", "info", ".", "keys", "(", ")", ":", "\n", "                    ", "episode_rewards", ".", "append", "(", "info", "[", "'episode'", "]", "[", "'r'", "]", ")", "\n", "\n", "# If done then clean the history of observations.", "\n", "", "", "masks", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "[", "0.0", "]", "if", "done_", "else", "[", "1.0", "]", "for", "done_", "in", "done", "]", ")", "\n", "bad_masks", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "[", "0.0", "]", "if", "'bad_transition'", "in", "info", ".", "keys", "(", ")", "else", "[", "1.0", "]", "\n", "for", "info", "in", "infos", "]", ")", "\n", "rollouts", ".", "insert", "(", "obs", ",", "recurrent_hidden_states", ",", "action", ",", "\n", "action_log_prob", ",", "value", ",", "reward", ",", "masks", ",", "bad_masks", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_value", "=", "actor_critic", ".", "get_value", "(", "\n", "rollouts", ".", "obs", "[", "-", "1", "]", ",", "rollouts", ".", "recurrent_hidden_states", "[", "-", "1", "]", ",", "\n", "rollouts", ".", "masks", "[", "-", "1", "]", ")", ".", "detach", "(", ")", "\n", "\n", "", "if", "args", ".", "gail", ":", "\n", "            ", "if", "j", ">=", "10", ":", "\n", "                ", "envs", ".", "venv", ".", "eval", "(", ")", "\n", "\n", "", "gail_epoch", "=", "args", ".", "gail_epoch", "\n", "if", "j", "<", "10", ":", "\n", "                ", "gail_epoch", "=", "100", "# Warm up", "\n", "", "for", "_", "in", "range", "(", "gail_epoch", ")", ":", "\n", "                ", "discr", ".", "update", "(", "gail_train_loader", ",", "rollouts", ",", "\n", "utils", ".", "get_vec_normalize", "(", "envs", ")", ".", "_obfilt", ")", "\n", "\n", "", "for", "step", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "                ", "rollouts", ".", "rewards", "[", "step", "]", "=", "discr", ".", "predict_reward", "(", "\n", "rollouts", ".", "obs", "[", "step", "]", ",", "rollouts", ".", "actions", "[", "step", "]", ",", "args", ".", "gamma", ",", "\n", "rollouts", ".", "masks", "[", "step", "]", ")", "\n", "\n", "", "", "rollouts", ".", "compute_returns", "(", "next_value", ",", "args", ".", "use_gae", ",", "args", ".", "gamma", ",", "\n", "args", ".", "gae_lambda", ",", "args", ".", "use_proper_time_limits", ")", "\n", "\n", "value_loss", ",", "action_loss", ",", "dist_entropy", "=", "agent", ".", "update", "(", "rollouts", ")", "\n", "\n", "rollouts", ".", "after_update", "(", ")", "\n", "\n", "# save for every interval-th episode or for the last epoch", "\n", "if", "(", "j", "%", "args", ".", "save_interval", "==", "0", "\n", "or", "j", "==", "num_updates", "-", "1", ")", "and", "args", ".", "save_dir", "!=", "\"\"", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "algo", ")", "\n", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "except", "OSError", ":", "\n", "                ", "pass", "\n", "\n", "", "torch", ".", "save", "(", "[", "\n", "actor_critic", ",", "\n", "getattr", "(", "utils", ".", "get_vec_normalize", "(", "envs", ")", ",", "'ob_rms'", ",", "None", ")", "\n", "]", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "args", ".", "model_name", "+", "\".pt\"", ")", ")", "\n", "\n", "", "if", "j", "%", "args", ".", "log_interval", "==", "0", "and", "len", "(", "episode_rewards", ")", ">", "1", ":", "\n", "            ", "total_num_steps", "=", "(", "j", "+", "1", ")", "*", "args", ".", "num_processes", "*", "args", ".", "num_steps", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Updates {}, num timesteps {}, FPS {} \\n Last {} training episodes: mean/median reward {:.1f}/{:.1f}, min/max reward {:.1f}/{:.1f}\\n\"", "\n", ".", "format", "(", "j", ",", "total_num_steps", ",", "\n", "int", "(", "total_num_steps", "/", "(", "end", "-", "start", ")", ")", ",", "\n", "len", "(", "episode_rewards", ")", ",", "np", ".", "mean", "(", "episode_rewards", ")", ",", "\n", "np", ".", "median", "(", "episode_rewards", ")", ",", "np", ".", "min", "(", "episode_rewards", ")", ",", "\n", "np", ".", "max", "(", "episode_rewards", ")", ",", "dist_entropy", ",", "value_loss", ",", "\n", "action_loss", ")", ")", "\n", "\n", "", "if", "(", "args", ".", "eval_interval", "is", "not", "None", "and", "len", "(", "episode_rewards", ")", ">", "1", "\n", "and", "j", "%", "args", ".", "eval_interval", "==", "0", ")", ":", "\n", "            ", "ob_rms", "=", "utils", ".", "get_vec_normalize", "(", "envs", ")", ".", "ob_rms", "\n", "evaluate", "(", "actor_critic", ",", "ob_rms", ",", "args", ".", "env_name", ",", "args", ".", "seed", ",", "\n", "args", ".", "num_processes", ",", "eval_log_dir", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.main.main": [[33, 270], ["pytorchppo.a2c_ppo_acktr.arguments.get_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "os.path.expanduser", "pytorchppo.a2c_ppo_acktr.utils.cleanup_log_dir", "pytorchppo.a2c_ppo_acktr.utils.cleanup_log_dir", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "build_vocab.build_vocabulary", "vocab.add_word", "vocab.add_word", "vocab.add_word", "vocab.add_word", "envs.make_vec_envs", "pytorchppo.a2c_ppo_acktr.model.Policy", "pytorchppo.a2c_ppo_acktr.model.Policy.to", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage", "envs.make_vec_envs.reset", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage.obs[].copy_", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage.to", "collections.deque", "time.time", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "open", "pickle.load", "pytorchppo.a2c_ppo_acktr.algo.A2C_ACKTR", "gail.Discriminator", "os.path.join", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage.compute_returns", "algo.A2C_ACKTR.update", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage.after_update", "pytorchppo.a2c_ppo_acktr.algo.PPO", "len", "gail.ExpertDataset", "int", "pytorchppo.a2c_ppo_acktr.utils.update_linear_schedule", "envs.make_vec_envs.step", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "pytorchppo.a2c_ppo_acktr.storage.RolloutStorage.insert", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pytorchppo.a2c_ppo_acktr.model.Policy.get_value().detach", "range", "range", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "print", "envs.make_vec_envs", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "envs.make_vec_envs.reset", "range", "os.path.exists", "open", "open.write", "open.write", "open.close", "pytorchppo.a2c_ppo_acktr.algo.A2C_ACKTR", "[].lower", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pytorchppo.a2c_ppo_acktr.model.Policy.act", "envs.make_vec_envs.venv.eval", "gail.Discriminator.update", "gail.Discriminator.predict_reward", "os.makedirs", "os.path.join", "len", "len", "obs[].item", "range", "os.path.join", "info.keys", "collections.deque.append", "pytorchppo.a2c_ppo_acktr.model.Policy.get_value", "getattr", "int", "len", "numpy.mean", "numpy.median", "numpy.min", "numpy.max", "envs.make_vec_envs.step", "envs.make_vec_envs.reset", "str", "str", "pytorchppo.a2c_ppo_acktr.utils.get_vec_normalize", "pytorchppo.a2c_ppo_acktr.utils.get_vec_normalize", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pytorchppo.a2c_ppo_acktr.model.Policy.act", "pytorchppo.a2c_ppo_acktr.arguments.get_args.env_name.split", "info.keys"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.arguments.get_args", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.cleanup_log_dir", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.cleanup_log_dir", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.build_vocabulary", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.make_vec_envs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.compute_returns", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.after_update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.update_linear_schedule", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.insert", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.make_vec_envs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.close", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.gail.Discriminator.predict_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.get_value", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_vec_normalize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_vec_normalize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act"], ["parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Script for training our knowledge agent'", ")", "\n", "\n", "##################################################", "\n", "# yaml options file contains all default choices #", "\n", "parser", ".", "add_argument", "(", "'--path_opt'", ",", "default", "=", "'options/knowledge_planner/default.yaml'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to a yaml options file'", ")", "\n", "\n", "##################################################", "\n", "parser", ".", "add_argument", "(", "'--trial'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'keep track of what trial you are on'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-vis'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables visdom visualization'", ")", "\n", "parser", ".", "add_argument", "(", "'--show-game'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'prints game to terminal if option is selected'", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "\n", "help", "=", "'port to run the server on (default: 8097)'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'if true, print step logs'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "\n", "help", "=", "'name of checkpoint to resume'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-mode'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "\n", "help", "=", "'training/eval mode we are in'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-every'", ",", "default", "=", "1000000000", ",", "type", "=", "int", ",", "\n", "help", "=", "'how often to save our models permanently'", ")", "\n", "\n", "# Main function", "\n", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "args", ".", "vis", "=", "not", "args", ".", "no_vis", "\n", "\n", "# Set options", "\n", "if", "args", ".", "path_opt", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "path_opt", ",", "'r'", ")", "as", "handle", ":", "\n", "            ", "options", "=", "yaml", ".", "load", "(", "handle", ")", "\n", "", "", "print", "(", "'## args'", ")", ";", "pprint", "(", "vars", "(", "args", ")", ")", "\n", "print", "(", "'## options'", ")", ";", "pprint", "(", "options", ")", "\n", "\n", "# Get sub opts", "\n", "method_opt", "=", "options", "[", "'method'", "]", "\n", "env_opt", "=", "options", "[", "'env'", "]", "\n", "log_opt", "=", "options", "[", "'logs'", "]", "\n", "\n", "# Set seed - just make the seed the trial number", "\n", "seed", "=", "args", ".", "trial", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Logging", "\n", "logpath", "=", "os", ".", "path", ".", "join", "(", "log_opt", "[", "'log_base'", "]", ",", "method_opt", "[", "'mode'", "]", ",", "log_opt", "[", "'exp_name'", "]", ",", "env_opt", "[", "'world_knowledge'", "]", "[", "args", ".", "train_mode", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "'trial%d'", "%", "args", ".", "trial", ")", "\n", "if", "len", "(", "args", ".", "resume", ")", "==", "0", ":", "\n", "# Make directory, check before overwriting", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "logpath", ")", ":", "\n", "            ", "if", "click", ".", "confirm", "(", "'Logs directory already exists in {}. Erase?'", "\n", ".", "format", "(", "logpath", ",", "default", "=", "False", ")", ")", ":", "\n", "                ", "os", ".", "system", "(", "'rm -rf '", "+", "logpath", ")", "\n", "", "else", ":", "\n", "                ", "return", "\n", "", "", "os", ".", "system", "(", "'mkdir -p '", "+", "logpath", ")", "\n", "", "main_logger", "=", "logging", ".", "getLogger", "(", "'spam_application'", ")", "\n", "main_logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "logpath", "+", "'/main_%s_%f.log'", "%", "(", "args", ".", "train_mode", ",", "time", ".", "time", "(", ")", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "main_logger", ".", "addHandler", "(", "fh", ")", "\n", "main_logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# Set up the mazebase environment", "\n", "# Load the true world knowledge that we use to build the actual environment", "\n", "knowledge_root", "=", "env_opt", "[", "'knowledge_root'", "]", "\n", "world_knowledge_file", "=", "os", ".", "path", ".", "join", "(", "knowledge_root", ",", "env_opt", "[", "'world_knowledge'", "]", "[", "args", ".", "train_mode", "]", ")", "\n", "print", "(", "\"Loading world knowledge from %s\"", "%", "world_knowledge_file", ")", "\n", "main_logger", ".", "debug", "(", "\"Loading world knowledge from %s\"", "%", "world_knowledge_file", ")", "\n", "with", "open", "(", "world_knowledge_file", ")", "as", "f", ":", "\n", "        ", "world_knowledge", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Generate the proposed knowledge ", "\n", "# TODO - should move this out of main!", "\n", "", "if", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'source'", "]", "==", "'file'", ":", "\n", "        ", "proposed_knowledge_file", "=", "os", ".", "path", ".", "join", "(", "knowledge_root", ",", "env_opt", "[", "'proposed_knowledge'", "]", "[", "args", ".", "train_mode", "]", ")", "\n", "print", "(", "\"Loading proposed knowledge from %s\"", "%", "proposed_knowledge_file", ")", "\n", "main_logger", ".", "debug", "(", "\"Loading proposed knowledge from %s\"", "%", "proposed_knowledge_file", ")", "\n", "with", "open", "(", "proposed_knowledge_file", ")", "as", "f", ":", "\n", "            ", "proposed_knowledge", "=", "json", ".", "load", "(", "f", ")", "\n", "# Randomly break rules in a way that is consistent with spawn rules", "\n", "", "", "elif", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'source'", "]", "==", "'random_spawns'", ":", "\n", "# Mode has to be fixed spawns for this to make sense", "\n", "        ", "assert", "(", "env_opt", "[", "'spawn'", "]", "[", "'mode'", "]", "==", "'fixed_spawns'", ")", "\n", "\n", "# Start with true knowledge rules", "\n", "# TODO - right now assuming we keep same number and there's a 1-1 between every proposed rule and true rule", "\n", "proposed_knowledge", "=", "[", "]", "\n", "for", "true_rule", "in", "world_knowledge", "[", "'rules'", "]", ":", "\n", "# With some probability just keep the correct rule", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'true_prob'", "]", ":", "\n", "                ", "proposed_knowledge", ".", "append", "(", "true_rule", ")", "\n", "# If not, randomly choose how many things to change", "\n", "", "else", ":", "\n", "# Choose how many things we want to change", "\n", "                ", "num_change_probs", "=", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'change_num_probs'", "]", "\n", "num_change_probs", "=", "[", "float", "(", "p", ")", "for", "p", "in", "num_change_probs", ".", "split", "(", "','", ")", "]", "\n", "assert", "(", "abs", "(", "sum", "(", "num_change_probs", ")", "-", "1", ")", "<", "1e-6", ")", "\n", "num_change", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "1", ",", "len", "(", "num_change_probs", ")", "+", "1", ")", ",", "p", "=", "num_change_probs", ")", "\n", "\n", "# Choices are drop, add, or swap", "\n", "change_type_probs", "=", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'change_type_probs'", "]", "\n", "change_type_probs", "=", "[", "float", "(", "p", ")", "for", "p", "in", "change_type_probs", ".", "split", "(", "','", ")", "]", "\n", "assert", "(", "abs", "(", "sum", "(", "change_type_probs", ")", "-", "1", ")", "<", "1e-6", ")", "\n", "spawn_ind", "=", "true_rule", "[", "'spawn_ind'", "]", "\n", "spawn_items", "=", "world_knowledge", "[", "'spawns'", "]", "[", "spawn_ind", "]", "\n", "item_dict", "=", "world_knowledge", "[", "'objects'", "]", "\n", "\n", "# Randomly change one thing from the true knowledge", "\n", "tr_graph", "=", "KnowledgeSubGraph", "(", "Rule", "(", "true_rule", ")", ".", "create_triplet_corresp", "(", ")", ")", "\n", "preconds", "=", "list", "(", "tr_graph", ".", "get_preconditions", "(", ")", ")", "\n", "postconds", "=", "tr_graph", ".", "get_postconditions", "(", ")", "\n", "changed", "=", "[", "False", "for", "_", "in", "preconds", "]", "\n", "for", "_", "in", "range", "(", "num_change", ")", ":", "\n", "                    ", "change_success", "=", "False", "\n", "while", "not", "change_success", ":", "\n", "                        ", "change_type", "=", "np", ".", "random", ".", "choice", "(", "[", "'add'", ",", "'drop'", ",", "'swap'", "]", ",", "p", "=", "change_type_probs", ")", "\n", "\n", "# If it's drop, drop a random precondition, (but never action)", "\n", "if", "change_type", "==", "'drop'", ":", "\n", "                            ", "drop_ind", "=", "random", ".", "choice", "(", "range", "(", "len", "(", "preconds", ")", ")", ")", "\n", "if", "preconds", "[", "drop_ind", "]", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_ACTION", ":", "\n", "                                ", "continue", "\n", "", "elif", "changed", "[", "drop_ind", "]", ":", "\n", "                                ", "continue", "\n", "", "else", ":", "\n", "                                ", "preconds", ".", "pop", "(", "drop_ind", ")", "\n", "changed", ".", "pop", "(", "drop_ind", ")", "\n", "change_success", "=", "True", "\n", "# If it's add, add a random item or location from the spawn list corresponding to the correct rule ", "\n", "", "", "elif", "change_type", "==", "'add'", ":", "\n", "# TODO - this is again hardcoded to our particular precond types. Need to figure out a centralized way to do this", "\n", "# For now, we're going to make it always satisfiable, but we should actually loosen this constraint at some point", "\n", "                            ", "while", "True", ":", "\n", "# TODO - hardcoded 1", "\n", "                                ", "precond_type", "=", "random", ".", "choice", "(", "[", "TripletInfo", ".", "REQUIRES_ITEM_X", "%", "1", ",", "TripletInfo", ".", "REQUIRES_LOCATION", "]", ")", "\n", "item", "=", "random", ".", "choice", "(", "list", "(", "spawn_items", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# Make sure item type matches the condition type", "\n", "# TODO - remove this restriction later too", "\n", "if", "precond_type", "==", "TripletInfo", ".", "REQUIRES_ITEM_X", "%", "1", "and", "item_dict", "[", "item", "]", "!=", "'CraftingItem'", ":", "\n", "                                    ", "continue", "\n", "", "elif", "precond_type", "==", "TripletInfo", ".", "REQUIRES_LOCATION", "and", "item_dict", "[", "item", "]", "==", "'CraftingItem'", ":", "\n", "                                    ", "continue", "\n", "\n", "# Fails if that precondition already exists", "\n", "# TODO - actually, make it if it is in it at all (TODO - relax this later)", "\n", "", "if", "any", "(", "[", "precond", "[", "0", "]", "==", "precond_type", "and", "precond", "[", "1", "]", "==", "item", "for", "precond", "in", "preconds", "]", ")", ":", "\n", "                                    ", "continue", "\n", "# TODO TODO DEBUG", "\n", "", "if", "any", "(", "[", "precond", "[", "1", "]", "==", "item", "for", "precond", "in", "preconds", "]", ")", ":", "\n", "                                    ", "continue", "\n", "\n", "# TODO - force it to fail for location if we have a location precondition already", "\n", "# This helps prevent impossible preconds. Change this at some point to be okay?", "\n", "", "if", "precond_type", "==", "TripletInfo", ".", "REQUIRES_LOCATION", "and", "any", "(", "[", "precond", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_LOCATION", "for", "precond", "in", "preconds", "]", ")", ":", "\n", "                                    ", "continue", "\n", "", "break", "\n", "\n", "# If all this succeeds, now we can add it", "\n", "", "new_precond", "=", "(", "precond_type", ",", "item", ")", "\n", "preconds", ".", "append", "(", "new_precond", ")", "\n", "changed", ".", "append", "(", "True", ")", "\n", "change_success", "=", "True", "\n", "\n", "# If it's swap, choose an original precondition and change the item or action", "\n", "", "elif", "change_type", "==", "'swap'", ":", "\n", "# Choose which piece of knowledge to change", "\n", "                            ", "swap_ind", "=", "random", ".", "choice", "(", "range", "(", "len", "(", "preconds", ")", ")", ")", "\n", "if", "changed", "[", "swap_ind", "]", ":", "\n", "                                ", "continue", "\n", "", "precond", "=", "preconds", "[", "swap_ind", "]", "\n", "# Change the action", "\n", "if", "precond", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_ACTION", ":", "\n", "# TODO - again, this seems like this list should be somewhere else", "\n", "                                ", "possible_actions", "=", "[", "'mine'", ",", "'craft'", ",", "'grab'", ",", "'chop'", "]", "\n", "possible_actions", ".", "pop", "(", "possible_actions", ".", "index", "(", "precond", "[", "1", "]", ")", ")", "\n", "new_action", "=", "random", ".", "choice", "(", "possible_actions", ")", "\n", "new_precond", "=", "(", "precond", "[", "0", "]", ",", "new_action", ")", "\n", "# Change the item at location", "\n", "", "elif", "precond", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_LOCATION", ":", "\n", "                                ", "while", "True", ":", "\n", "                                    ", "item", "=", "random", ".", "choice", "(", "list", "(", "spawn_items", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# Make sure item type matches the condition type", "\n", "# TODO - remove this restriction later too", "\n", "if", "item_dict", "[", "item", "]", "==", "'CraftingItem'", ":", "\n", "                                        ", "continue", "\n", "# Also make sure it's a change", "\n", "", "elif", "item", "==", "precond", "[", "1", "]", ":", "\n", "                                        ", "continue", "\n", "", "else", ":", "\n", "                                        ", "break", "\n", "", "", "new_precond", "=", "(", "precond", "[", "0", "]", ",", "item", ")", "\n", "", "elif", "precond", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_ITEM_X", "%", "1", ":", "\n", "                                ", "while", "True", ":", "\n", "                                    ", "item", "=", "random", ".", "choice", "(", "list", "(", "spawn_items", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# Make sure item type matches the condition type", "\n", "# TODO - remove this restriction later too", "\n", "if", "item_dict", "[", "item", "]", "!=", "'CraftingItem'", ":", "\n", "                                        ", "continue", "\n", "", "else", ":", "\n", "                                        ", "break", "\n", "", "", "new_precond", "=", "(", "precond", "[", "0", "]", ",", "item", ")", "\n", "", "else", ":", "\n", "                                ", "pdb", ".", "set_trace", "(", ")", "\n", "raise", "Exception", "(", "\"Bad precond type\"", ")", "\n", "\n", "# Swap the precond", "\n", "", "preconds", "[", "swap_ind", "]", "=", "new_precond", "\n", "changed", "[", "swap_ind", "]", "=", "True", "\n", "change_success", "=", "True", "\n", "\n", "# Add the new rule to proposed_knowledge", "\n", "", "", "", "rule_name", "=", "true_rule", "[", "Rule", ".", "RULE_NAME", "]", "\n", "triplets", "=", "set", "(", "[", "(", "rule_name", ",", "pre", "[", "0", "]", ",", "pre", "[", "1", "]", ")", "for", "pre", "in", "preconds", "]", ")", ".", "union", "(", "[", "(", "rule_name", ",", "post", "[", "0", "]", ",", "post", "[", "1", "]", ")", "for", "post", "in", "postconds", "]", ")", "\n", "new_rule", "=", "Rule", "(", "create_rule_from_triplets", "(", "set", "(", "triplets", ")", ")", ")", "\n", "proposed_knowledge", ".", "append", "(", "new_rule", ".", "rule_dict", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"TODO - need to implement the random version of this where we randomly break the true knowledge\"", ")", "\n", "\n", "# Make the world", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.TimeLimitMask.step": [[117, 123], ["envs.TimeLimitMask.env.step"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step"], ["    ", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "done", "and", "self", ".", "env", ".", "_max_episode_steps", "==", "self", ".", "env", ".", "_elapsed_steps", ":", "\n", "            ", "info", "[", "'bad_transition'", "]", "=", "True", "\n", "\n", "", "return", "obs", ",", "rew", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.TimeLimitMask.reset": [[124, 126], ["envs.TimeLimitMask.env.reset"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.MaskGoal.observation": [[130, 134], ["None"], "methods", ["None"], ["    ", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "if", "self", ".", "env", ".", "_elapsed_steps", ">", "0", ":", "\n", "            ", "observation", "[", "-", "2", ":", "0", "]", "=", "0", "\n", "", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.TransposeObs.__init__": [[137, 142], ["gym.ObservationWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Transpose observation space (base class)\n        \"\"\"", "\n", "super", "(", "TransposeObs", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.TransposeImage.__init__": [[145, 160], ["envs.TransposeObs.__init__", "gym.spaces.box.Box", "len", "str"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ",", "op", "=", "[", "2", ",", "0", ",", "1", "]", ")", ":", "\n", "        ", "\"\"\"\n        Transpose observation space for images\n        \"\"\"", "\n", "super", "(", "TransposeImage", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "assert", "len", "(", "op", ")", "==", "3", ",", "f\"Error: Operation, {str(op)}, must be dim3\"", "\n", "self", ".", "op", "=", "op", "\n", "obs_shape", "=", "self", ".", "observation_space", ".", "shape", "\n", "self", ".", "observation_space", "=", "Box", "(", "\n", "self", ".", "observation_space", ".", "low", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "self", ".", "observation_space", ".", "high", "[", "0", ",", "0", ",", "0", "]", ",", "[", "\n", "obs_shape", "[", "self", ".", "op", "[", "0", "]", "]", ",", "obs_shape", "[", "self", ".", "op", "[", "1", "]", "]", ",", "\n", "obs_shape", "[", "self", ".", "op", "[", "2", "]", "]", "\n", "]", ",", "\n", "dtype", "=", "self", ".", "observation_space", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.TransposeImage.observation": [[161, 163], ["ob.transpose"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "ob", ")", ":", "\n", "        ", "return", "ob", ".", "transpose", "(", "self", ".", "op", "[", "0", "]", ",", "self", ".", "op", "[", "1", "]", ",", "self", ".", "op", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecPyTorch.__init__": [[166, 170], ["baselines.common.vec_env.VecEnvWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "venv", ",", "device", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "super", "(", "VecPyTorch", ",", "self", ")", ".", "__init__", "(", "venv", ")", "\n", "self", ".", "device", "=", "device", "\n", "# TODO: Fix data types", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecPyTorch.reset": [[172, 176], ["envs.VecPyTorch.venv.reset", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecPyTorch.step_async": [[177, 183], ["isinstance", "actions.squeeze.squeeze.cpu().numpy", "envs.VecPyTorch.venv.step_async", "actions.squeeze.squeeze.squeeze", "actions.squeeze.squeeze.cpu"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorch.step_async"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "if", "isinstance", "(", "actions", ",", "torch", ".", "LongTensor", ")", ":", "\n", "# Squeeze the dimension for discrete actions", "\n", "            ", "actions", "=", "actions", ".", "squeeze", "(", "1", ")", "\n", "", "actions", "=", "actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "venv", ".", "step_async", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecPyTorch.step_wait": [[184, 189], ["envs.VecPyTorch.venv.step_wait", "torch.from_numpy().float().to", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().float", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.step_wait", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "reward", "=", "torch", ".", "from_numpy", "(", "reward", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecNormalize.__init__": [[193, 196], ["baselines.common.vec_env.vec_normalize.VecNormalize.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VecNormalize", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecNormalize._obfilt": [[197, 207], ["numpy.clip", "envs.VecNormalize.ob_rms.update", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update"], ["", "def", "_obfilt", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "ob_rms", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "ob_rms", ".", "update", "(", "obs", ")", "\n", "", "obs", "=", "np", ".", "clip", "(", "(", "obs", "-", "self", ".", "ob_rms", ".", "mean", ")", "/", "\n", "np", ".", "sqrt", "(", "self", ".", "ob_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "\n", "-", "self", ".", "clipob", ",", "self", ".", "clipob", ")", "\n", "return", "obs", "\n", "", "else", ":", "\n", "            ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecNormalize.train": [[208, 210], ["None"], "methods", ["None"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecNormalize.eval": [[211, 213], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecPyTorchFrameStack.__init__": [[218, 236], ["numpy.repeat", "numpy.repeat", "torch.zeros().to", "gym.spaces.Box", "baselines.common.vec_env.VecEnvWrapper.__init__", "torch.device", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "venv", ",", "nstack", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "self", ".", "nstack", "=", "nstack", "\n", "\n", "wos", "=", "venv", ".", "observation_space", "# wrapped ob space", "\n", "self", ".", "shape_dim0", "=", "wos", ".", "shape", "[", "0", "]", "\n", "\n", "low", "=", "np", ".", "repeat", "(", "wos", ".", "low", ",", "self", ".", "nstack", ",", "axis", "=", "0", ")", "\n", "high", "=", "np", ".", "repeat", "(", "wos", ".", "high", ",", "self", ".", "nstack", ",", "axis", "=", "0", ")", "\n", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "self", ".", "stacked_obs", "=", "torch", ".", "zeros", "(", "(", "venv", ".", "num_envs", ",", ")", "+", "\n", "low", ".", "shape", ")", ".", "to", "(", "device", ")", "\n", "\n", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "venv", ".", "observation_space", ".", "dtype", ")", "\n", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ",", "observation_space", "=", "observation_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecPyTorchFrameStack.step_wait": [[237, 246], ["envs.VecPyTorchFrameStack.venv.step_wait", "enumerate"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.step_wait"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "rews", ",", "news", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "self", ".", "stacked_obs", "[", ":", ",", ":", "-", "self", ".", "shape_dim0", "]", "=", "self", ".", "stacked_obs", "[", ":", ",", "self", ".", "shape_dim0", ":", "]", "\n", "for", "(", "i", ",", "new", ")", "in", "enumerate", "(", "news", ")", ":", "\n", "            ", "if", "new", ":", "\n", "                ", "self", ".", "stacked_obs", "[", "i", "]", "=", "0", "\n", "", "", "self", ".", "stacked_obs", "[", ":", ",", "-", "self", ".", "shape_dim0", ":", "]", "=", "obs", "\n", "return", "self", ".", "stacked_obs", ",", "rews", ",", "news", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecPyTorchFrameStack.reset": [[247, 255], ["envs.VecPyTorchFrameStack.venv.reset", "torch.zeros", "envs.VecPyTorchFrameStack.stacked_obs.zero_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "if", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", ":", "\n", "            ", "self", ".", "stacked_obs", "=", "torch", ".", "zeros", "(", "self", ".", "stacked_obs", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "stacked_obs", ".", "zero_", "(", ")", "\n", "", "self", ".", "stacked_obs", "[", ":", ",", "-", "self", ".", "shape_dim0", ":", "]", "=", "obs", "\n", "return", "self", ".", "stacked_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.VecPyTorchFrameStack.close": [[256, 258], ["envs.VecPyTorchFrameStack.venv.close"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "venv", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.make_env": [[33, 76], ["env_id.startswith", "bench.Monitor.seed", "env_id.split", "dm_control2gym.make", "gym.make", "hasattr", "isinstance", "baselines.common.atari_wrappers.make_atari", "str().find", "envs.TimeLimitMask", "baselines.bench.Monitor", "os.path.join", "str", "str"], "function", ["None"], ["", "def", "make_env", "(", "env_id", ",", "seed", ",", "rank", ",", "log_dir", ",", "allow_early_resets", ",", "lang_model", ",", "device", ",", "vocabulary", ",", "vocab_weights", ")", ":", "\n", "    ", "def", "_thunk", "(", ")", ":", "\n", "        ", "if", "env_id", ".", "startswith", "(", "\"dm\"", ")", ":", "\n", "            ", "_", ",", "domain", ",", "task", "=", "env_id", ".", "split", "(", "'.'", ")", "\n", "env", "=", "dm_control2gym", ".", "make", "(", "domain_name", "=", "domain", ",", "task_name", "=", "task", ")", "\n", "", "else", ":", "\n", "            ", "env", "=", "gym", ".", "make", "(", "env_id", ",", "lang_model", "=", "lang_model", ",", "device", "=", "device", ",", "vocabulary", "=", "vocabulary", ",", "vocab_weights", "=", "vocab_weights", ")", "\n", "\n", "", "is_atari", "=", "hasattr", "(", "gym", ".", "envs", ",", "'atari'", ")", "and", "isinstance", "(", "\n", "env", ".", "unwrapped", ",", "gym", ".", "envs", ".", "atari", ".", "atari_env", ".", "AtariEnv", ")", "\n", "if", "is_atari", ":", "\n", "            ", "env", "=", "make_atari", "(", "env_id", ")", "\n", "\n", "", "env", ".", "seed", "(", "seed", "+", "rank", ")", "\n", "\n", "obs_shape", "=", "env", ".", "observation_space", ".", "shape", "\n", "\n", "if", "str", "(", "env", ".", "__class__", ".", "__name__", ")", ".", "find", "(", "'TimeLimit'", ")", ">=", "0", ":", "\n", "            ", "env", "=", "TimeLimitMask", "(", "env", ")", "\n", "\n", "", "if", "log_dir", "is", "not", "None", ":", "\n", "            ", "env", "=", "bench", ".", "Monitor", "(", "\n", "env", ",", "\n", "os", ".", "path", ".", "join", "(", "log_dir", ",", "str", "(", "rank", ")", ")", ",", "\n", "allow_early_resets", "=", "allow_early_resets", ")", "\n", "", "'''\n        if is_atari:\n            if len(env.observation_space.shape) == 3:\n                env = wrap_deepmind(env)\n        elif len(env.observation_space.shape) == 3:\n            raise NotImplementedError(\n                \"CNN models work only for atari,\\n\"\n                \"please use a custom wrapper for a custom pixel input env.\\n\"\n                \"See wrap_deepmind for an example.\")\n\n        # If the input has shape (W,H,3), wrap for PyTorch convolutions\n        obs_shape = env.observation_space.shape\n        if len(obs_shape) == 3 and obs_shape[2] in [1, 3]:\n            env = TransposeImage(env, op=[2, 0, 1])\n        '''", "\n", "return", "env", "\n", "\n", "", "return", "_thunk", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.envs.make_vec_envs": [[78, 113], ["envs.VecPyTorch", "envs.make_env", "len", "baselines.common.vec_env.shmem_vec_env.ShmemVecEnv", "baselines.common.vec_env.dummy_vec_env.DummyVecEnv", "envs.VecPyTorchFrameStack", "range", "len", "envs.VecPyTorchFrameStack"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.make_env"], ["", "def", "make_vec_envs", "(", "env_name", ",", "\n", "seed", ",", "\n", "num_processes", ",", "\n", "gamma", ",", "\n", "log_dir", ",", "\n", "device", ",", "\n", "allow_early_resets", ",", "\n", "lang_model", "=", "None", ",", "\n", "vocabulary", "=", "None", ",", "\n", "vocab_weights", "=", "None", ",", "\n", "num_frame_stack", "=", "None", ")", ":", "\n", "    ", "envs", "=", "[", "\n", "make_env", "(", "env_name", ",", "seed", ",", "i", ",", "log_dir", ",", "allow_early_resets", ",", "lang_model", ",", "device", ",", "vocabulary", ",", "vocab_weights", ")", "\n", "for", "i", "in", "range", "(", "num_processes", ")", "\n", "]", "\n", "\n", "if", "len", "(", "envs", ")", ">", "1", ":", "\n", "        ", "envs", "=", "ShmemVecEnv", "(", "envs", ",", "context", "=", "'fork'", ")", "\n", "", "else", ":", "\n", "        ", "envs", "=", "DummyVecEnv", "(", "envs", ")", "\n", "\n", "#if len(envs.observation_space.shape) == 1:", "\n", "#    if gamma is None:", "\n", "#        envs = VecNormalize(envs, ret=False)", "\n", "#    else:", "\n", "#        envs = VecNormalize(envs, gamma=gamma)", "\n", "\n", "", "envs", "=", "VecPyTorch", "(", "envs", ",", "device", ")", "\n", "\n", "if", "num_frame_stack", "is", "not", "None", ":", "\n", "        ", "envs", "=", "VecPyTorchFrameStack", "(", "envs", ",", "num_frame_stack", ",", "device", ")", "\n", "", "elif", "len", "(", "envs", ".", "observation_space", ".", "shape", ")", "==", "3", ":", "\n", "        ", "envs", "=", "VecPyTorchFrameStack", "(", "envs", ",", "4", ",", "device", ")", "\n", "\n", "", "return", "envs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.CraftingDataset.__init__": [[42, 69], ["print", "print", "print", "print", "print", "torchtext.GloVe", "torchtext.GloVe", "train_hierarchy.CraftingDataset.get_grid_embedding", "train_hierarchy.CraftingDataset.one_hot_grid", "train_hierarchy.CraftingDataset.one_hot_actions", "train_hierarchy.CraftingDataset.get_goal_embedding", "train_hierarchy.CraftingDataset.get_inventory_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.one_hot_actions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "train_states", ",", "train_inventories", ",", "train_actions", ",", "train_goals", ",", "train_instructions", ",", "vocab", ",", "transform", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "train_instructions", "=", "train_instructions", "\n", "\n", "self", ".", "train_states", "=", "train_states", "\n", "self", ".", "train_inventories", "=", "train_inventories", "\n", "self", ".", "train_actions", "=", "train_actions", "\n", "self", ".", "train_goals", "=", "train_goals", "\n", "\n", "if", "self", ".", "embed_dim", "==", "50", ":", "\n", "            ", "self", ".", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "", "self", ".", "train_states_embedding", "=", "[", "self", ".", "get_grid_embedding", "(", "state", ")", "for", "state", "in", "self", ".", "train_states", "]", "\n", "print", "(", "\"embedding loaded\"", ")", "\n", "self", ".", "train_states_onehot", "=", "[", "self", ".", "one_hot_grid", "(", "state", ")", "for", "state", "in", "self", ".", "train_states", "]", "\n", "print", "(", "\"one hot loaded\"", ")", "\n", "self", ".", "train_actions_onehot", "=", "[", "self", ".", "one_hot_actions", "(", "action", ")", "for", "action", "in", "self", ".", "train_actions", "]", "\n", "print", "(", "\"actions loaded\"", ")", "\n", "self", ".", "train_goals_embedding", "=", "[", "self", ".", "get_goal_embedding", "(", "goal", ")", "for", "goal", "in", "self", ".", "train_goals", "]", "\n", "print", "(", "\"goals loaded\"", ")", "\n", "self", ".", "train_inventory_embedding", "=", "[", "self", ".", "get_inventory_embedding", "(", "inventory", ")", "for", "inventory", "in", "self", ".", "train_inventories", "]", "\n", "print", "(", "\"done loading dataset\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.CraftingDataset.get_summed_embedding": [[73, 84], ["phrase.split.split.split", "numpy.zeros", "train_hierarchy.CraftingDataset.glove.vectors[].data.cpu().numpy", "train_hierarchy.CraftingDataset.glove.vectors[].data.cpu", "p.lower"], "methods", ["None"], ["", "def", "get_summed_embedding", "(", "self", ",", "phrase", ")", ":", "\n", "\n", "        ", "phrase", "=", "phrase", ".", "split", "(", "' '", ")", "\n", "#phrase_vector = torch.from_numpy(np.zeros((self.embed_dim), dtype=np.float32))", "\n", "\n", "phrase_vector", "=", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "p", "in", "phrase", ":", "\n", "            ", "phrase_vector", "+=", "self", ".", "glove", ".", "vectors", "[", "self", ".", "glove", ".", "stoi", "[", "p", ".", "lower", "(", ")", "]", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "phrase_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.CraftingDataset.get_grid_embedding": [[87, 99], ["numpy.zeros", "range", "range", "enumerate", "train_hierarchy.CraftingDataset.get_summed_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_grid_embedding", "(", "self", ",", "batch_grid", ")", ":", "\n", "\n", "        ", "goal_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "                ", "for", "index", ",", "item", "in", "enumerate", "(", "batch_grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "                    ", "if", "item", "==", "\"ResourceFont\"", "or", "item", "==", "\"CraftingContainer\"", "or", "item", "==", "\"CraftingItem\"", ":", "\n", "                        ", "goal_embedding_array", "[", "x", "]", "[", "y", "]", "=", "self", ".", "get_summed_embedding", "(", "batch_grid", "[", "x", "]", "[", "y", "]", "[", "index", "+", "1", "]", ")", "\n", "\n", "", "", "", "", "return", "goal_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.CraftingDataset.get_goal_embedding": [[100, 115], ["numpy.zeros", "goal.split.split.split", "train_hierarchy.CraftingDataset.glove.vectors[].data.cpu().numpy", "train_hierarchy.CraftingDataset.glove.vectors[].data.cpu().numpy", "train_hierarchy.CraftingDataset.glove.vectors[].data.cpu", "train_hierarchy.CraftingDataset.glove.vectors[].data.cpu", "goal[].lower", "goal[].lower"], "methods", ["None"], ["", "def", "get_goal_embedding", "(", "self", ",", "goal", ")", ":", "\n", "\n", "#currently all crafts are 2 word phrases", "\n", "# goal in the format of \"Make Diamond Boots (Diamond Boots=1)\" --> just extract diamond boots part", "\n", "\n", "            ", "goal_embedding", "=", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "goal", "=", "goal", ".", "split", "(", "' '", ")", "\n", "\n", "item1_vec", "=", "self", ".", "glove", ".", "vectors", "[", "self", ".", "glove", ".", "stoi", "[", "goal", "[", "1", "]", ".", "lower", "(", ")", "]", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "item2_vec", "=", "self", ".", "glove", ".", "vectors", "[", "self", ".", "glove", ".", "stoi", "[", "goal", "[", "2", "]", ".", "lower", "(", ")", "]", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "goal_embedding", "=", "item1_vec", "+", "item2_vec", "\n", "\n", "return", "goal_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.CraftingDataset.get_inventory_embedding": [[116, 134], ["numpy.zeros", "train_hierarchy.CraftingDataset.get_summed_embedding", "train_hierarchy.CraftingDataset.get_summed_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_inventory_embedding", "(", "self", ",", "inventory", ")", ":", "\n", "\n", "\n", "#summed inventory", "\n", "        ", "inventory_embedding", "=", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "first", "=", "True", "\n", "for", "item", "in", "inventory", ":", "\n", "\n", "            ", "if", "inventory", "[", "item", "]", ">", "0", ":", "\n", "\n", "                ", "if", "first", ":", "\n", "                    ", "inventory_embedding", "=", "self", ".", "get_summed_embedding", "(", "item", ")", "\n", "first", "=", "False", "\n", "", "else", ":", "\n", "                    ", "inventory_embedding", "=", "inventory_embedding", "+", "self", ".", "get_summed_embedding", "(", "item", ")", "\n", "\n", "", "", "", "return", "inventory_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.CraftingDataset.one_hot_actions": [[135, 155], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "one_hot_actions", "(", "self", ",", "action", ")", ":", "\n", "\n", "        ", "if", "action", "==", "'up'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "1", "]", ")", "\n", "", "elif", "action", "==", "'down'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "2", "]", ")", "\n", "", "elif", "action", "==", "'left'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "3", "]", ")", "\n", "", "elif", "action", "==", "'right'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "4", "]", ")", "\n", "", "elif", "action", "==", "'toggle_switch'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "5", "]", ")", "\n", "", "elif", "action", "==", "'grab'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "6", "]", ")", "\n", "", "elif", "action", "==", "'mine'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "7", "]", ")", "\n", "", "elif", "action", "==", "'craft'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "", "elif", "action", "==", "'stop'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "8", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.CraftingDataset.one_hot_grid": [[156, 181], ["numpy.zeros", "range", "range", "enumerate"], "methods", ["None"], ["", "", "def", "one_hot_grid", "(", "self", ",", "grid", ")", ":", "\n", "\n", "        ", "grid_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "                ", "for", "index", ",", "item", "in", "enumerate", "(", "grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "\n", "                    ", "if", "item", "==", "'Corner'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "0", "]", "=", "1", "\n", "", "elif", "item", "==", "'Agent'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "1", "]", "=", "1", "\n", "", "elif", "'Door'", "in", "item", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "2", "]", "=", "1", "\n", "", "elif", "item", "==", "'Key'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "3", "]", "=", "1", "\n", "", "elif", "item", "==", "'Switch'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "4", "]", "=", "1", "\n", "", "elif", "item", "==", "'Block'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "5", "]", "=", "1", "\n", "", "if", "'closed'", "in", "item", ":", "# door closed", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "6", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "grid_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.CraftingDataset.__getitem__": [[183, 218], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "instruction.append", "instruction.extend", "instruction.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "vocab", "vocab", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "instruction.append", "instruction.extend", "instruction.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "train_hierarchy.CraftingDataset.vocab", "vocab", "vocab", "train_hierarchy.CraftingDataset.vocab"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "states_embedding", "=", "torch", ".", "Tensor", "(", "self", ".", "train_states_embedding", "[", "index", "]", ")", "\n", "states_onehot", "=", "torch", ".", "Tensor", "(", "self", ".", "train_states_onehot", "[", "index", "]", ")", "\n", "action", "=", "torch", ".", "Tensor", "(", "self", ".", "train_actions_onehot", "[", "index", "]", ")", "\n", "goal", "=", "torch", ".", "Tensor", "(", "self", ".", "train_goals_embedding", "[", "index", "]", ")", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "self", ".", "train_inventory_embedding", "[", "index", "]", ")", "\n", "\n", "temp_instruction", "=", "self", ".", "train_instructions", "[", "index", "]", "\n", "\n", "try", ":", "\n", "            ", "instruction", "=", "[", "]", "\n", "instruction", ".", "append", "(", "vocab", "(", "'<start>'", ")", ")", "\n", "instruction", ".", "extend", "(", "[", "self", ".", "vocab", "(", "token", ")", "for", "token", "in", "temp_instruction", "]", ")", "\n", "instruction", ".", "append", "(", "vocab", "(", "'<end>'", ")", ")", "\n", "target", "=", "torch", ".", "Tensor", "(", "instruction", ")", "\n", "", "except", ":", "\n", "\n", "            ", "index", "=", "index", "+", "10", "# try using the neighboring example instead.. let's see if this breaks. ", "\n", "\n", "states_embedding", "=", "torch", ".", "Tensor", "(", "self", ".", "train_states_embedding", "[", "index", "]", ")", "\n", "states_onehot", "=", "torch", ".", "Tensor", "(", "self", ".", "train_states_onehot", "[", "index", "]", ")", "\n", "action", "=", "torch", ".", "Tensor", "(", "self", ".", "train_actions_onehot", "[", "index", "]", ")", "\n", "goal", "=", "torch", ".", "Tensor", "(", "self", ".", "train_goals_embedding", "[", "index", "]", ")", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "self", ".", "train_inventory_embedding", "[", "index", "]", ")", "\n", "\n", "temp_instruction", "=", "self", ".", "train_instructions", "[", "index", "]", "\n", "\n", "instruction", "=", "[", "]", "\n", "instruction", ".", "append", "(", "vocab", "(", "'<start>'", ")", ")", "\n", "instruction", ".", "extend", "(", "[", "self", ".", "vocab", "(", "token", ")", "for", "token", "in", "temp_instruction", "]", ")", "\n", "instruction", ".", "append", "(", "vocab", "(", "'<end>'", ")", ")", "\n", "target", "=", "torch", ".", "Tensor", "(", "instruction", ")", "\n", "\n", "", "return", "states_onehot", ",", "states_embedding", ",", "inventory", ",", "action", ",", "goal", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.CraftingDataset.__len__": [[219, 221], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_states", ")", "\n", "#return self.train_states.shape[0]", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.collate_fn": [[223, 246], ["data.sort", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "enumerate", "len", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "max"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "\n", "    ", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "5", "]", ")", ",", "reverse", "=", "True", ")", "\n", "states_onehot", ",", "states_embedding", ",", "inventory_embedding", ",", "action", ",", "goal", ",", "captions", "=", "zip", "(", "*", "data", ")", "\n", "\n", "states_onehot", "=", "torch", ".", "stack", "(", "states_onehot", ",", "0", ")", "\n", "states_embedding", "=", "torch", ".", "stack", "(", "states_embedding", ",", "0", ")", "\n", "action", "=", "torch", ".", "stack", "(", "action", ",", "0", ")", "\n", "goal", "=", "torch", ".", "stack", "(", "goal", ",", "0", ")", "\n", "inventory_embedding", "=", "torch", ".", "stack", "(", "inventory_embedding", ",", "0", ")", "\n", "\n", "\n", "# Merge captions (from tuple of 1D tensor to 2D tensor).", "\n", "lengths", "=", "[", "len", "(", "cap", ")", "for", "cap", "in", "captions", "]", "\n", "#targets = torch.zeros(len(captions), max(lengths)).long()", "\n", "targets", "=", "torch", ".", "ones", "(", "len", "(", "captions", ")", ",", "max", "(", "lengths", ")", ")", ".", "long", "(", ")", "*", "216", "\n", "\n", "for", "i", ",", "cap", "in", "enumerate", "(", "captions", ")", ":", "\n", "\n", "        ", "end", "=", "lengths", "[", "i", "]", "\n", "targets", "[", "i", ",", ":", "end", "]", "=", "cap", "[", ":", "end", "]", "\n", "\n", "", "return", "states_onehot", ",", "states_embedding", ",", "inventory_embedding", ",", "action", ",", "goal", ",", "targets", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.train_step_both": [[314, 390], ["model.train", "model1.train", "enumerate", "train_loss.append", "train_loss1.append", "states_onehot.to.to", "states_embedding.to.to", "action.squeeze.to", "action.squeeze.squeeze", "goal.to.to", "inventory.to.to", "instructions.to.to", "optimizer.zero_grad", "optimizer1.zero_grad", "model", "criterion", "torch.utils.clip_grad_norm_", "optimizer1.zero_grad", "model1", "criterion1", "total_loss.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "optimizer1.step", "criterion.item", "criterion1.item", "numpy.mean", "numpy.mean", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "all_losses.append", "all_losses1.append", "print", "alphas.sum"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step"], ["def", "train_step_both", "(", "epoch", ")", ":", "\n", "\n", "    ", "log_size", "=", "500", "\n", "\n", "model", ".", "train", "(", ")", "\n", "model1", ".", "train", "(", ")", "\n", "\n", "all_losses", "=", "[", "]", "\n", "all_losses1", "=", "[", "]", "\n", "\n", "running_loss", "=", "0.0", "\n", "running_loss1", "=", "0.0", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ",", "0", ")", ":", "\n", "\n", "        ", "states_onehot", ",", "states_embedding", ",", "inventory", ",", "action", ",", "goal", ",", "instructions", ",", "lengths", "=", "data", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "action", "=", "action", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "action", "=", "action", ".", "squeeze", "(", "1", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "instructions", "=", "instructions", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer1", ".", "zero_grad", "(", ")", "\n", "\n", "scores", ",", "encoded_captions", ",", "decode_lengths", ",", "alphas", ",", "hiddens", "=", "model", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "instructions", ",", "lengths", ",", "device", ")", "\n", "\n", "targets", "=", "instructions", "[", ":", ",", "1", ":", "]", "\n", "scores", "=", "pack_padded_sequence", "(", "scores", ",", "decode_lengths", ",", "batch_first", "=", "True", ")", "[", "0", "]", "\n", "targets", "=", "pack_padded_sequence", "(", "targets", ",", "decode_lengths", ",", "batch_first", "=", "True", ")", "[", "0", "]", "\n", "\n", "# Calculate loss", "\n", "lang_loss", "=", "criterion", "(", "scores", ",", "targets", ")", "\n", "lang_loss", "+=", "1.", "*", "(", "(", "1.", "-", "alphas", ".", "sum", "(", "dim", "=", "1", ")", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "parameters1", ",", "max_norm", "=", "3", ")", "\n", "\n", "\n", "optimizer1", ".", "zero_grad", "(", ")", "\n", "\n", "#train action component", "\n", "#scores, encoded_captions, decode_lengths, alphas, hiddens = model(states_embedding, states_onehot, inventory, goal, instructions, lengths, device)         ", "\n", "outputs", "=", "model1", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "hiddens", ")", "\n", "\n", "#backprop action loss", "\n", "action_loss", "=", "criterion1", "(", "outputs", ",", "action", ")", "\n", "\n", "#action_loss.backward()", "\n", "\n", "total_loss", "=", "lang_loss", "+", "action_loss", "\n", "total_loss", ".", "backward", "(", ")", "\n", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "parameters", ",", "max_norm", "=", "3", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer1", ".", "step", "(", ")", "\n", "\n", "running_loss", "+=", "lang_loss", ".", "item", "(", ")", "\n", "running_loss1", "+=", "action_loss", ".", "item", "(", ")", "\n", "\n", "if", "i", "%", "log_size", "==", "log_size", "-", "1", ":", "\n", "\n", "            ", "all_losses", ".", "append", "(", "running_loss", "/", "log_size", ")", "\n", "all_losses1", ".", "append", "(", "running_loss1", "/", "log_size", ")", "\n", "\n", "print", "(", "'[%d, %5d] lang loss: %.3f action loss: %.3f'", "%", "\n", "(", "epoch", "+", "1", ",", "i", "+", "1", ",", "running_loss", "/", "log_size", ",", "running_loss1", "/", "log_size", ")", ")", "\n", "\n", "running_loss", "=", "0.0", "\n", "running_loss1", "=", "0.0", "\n", "\n", "", "", "train_loss", ".", "append", "(", "np", ".", "mean", "(", "all_losses", ")", ")", "\n", "train_loss1", ".", "append", "(", "np", ".", "mean", "(", "all_losses1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_hierarchy.validate_game_play": [[391, 408], ["model.eval", "model1.eval", "range", "print", "sum", "torchtext.GloVe", "torchtext.GloVe", "test_models.play_game_w_language_v3", "results.append", "sum"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game_w_language_v3"], ["", "def", "validate_game_play", "(", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "model1", ".", "eval", "(", ")", "\n", "\n", "if", "embed_dim", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "        ", "res", ",", "sentences", "=", "play_game_w_language_v3", "(", "model", ",", "model1", ",", "glove", ",", "embed_dim", ",", "vocab", ",", "device", ")", "\n", "results", ".", "append", "(", "res", ")", "\n", "\n", "", "print", "(", "sum", "(", "results", ")", ",", "100", ")", "\n", "return", "sum", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.CraftingDataset.__init__": [[43, 70], ["print", "print", "print", "print", "print", "torchtext.GloVe", "torchtext.GloVe", "train_autoencoder.CraftingDataset.get_grid_embedding", "train_autoencoder.CraftingDataset.one_hot_grid", "train_autoencoder.CraftingDataset.one_hot_actions", "train_autoencoder.CraftingDataset.get_goal_embedding", "train_autoencoder.CraftingDataset.get_inventory_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.one_hot_actions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "train_states", ",", "train_inventories", ",", "train_actions", ",", "train_goals", ",", "train_instructions", ",", "vocab", ",", "transform", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "train_instructions", "=", "train_instructions", "\n", "\n", "self", ".", "train_states", "=", "train_states", "\n", "self", ".", "train_inventories", "=", "train_inventories", "\n", "self", ".", "train_actions", "=", "train_actions", "\n", "self", ".", "train_goals", "=", "train_goals", "\n", "\n", "if", "self", ".", "embed_dim", "==", "50", ":", "\n", "            ", "self", ".", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "", "self", ".", "train_states_embedding", "=", "[", "self", ".", "get_grid_embedding", "(", "state", ")", "for", "state", "in", "self", ".", "train_states", "]", "\n", "print", "(", "\"embedding loaded\"", ")", "\n", "self", ".", "train_states_onehot", "=", "[", "self", ".", "one_hot_grid", "(", "state", ")", "for", "state", "in", "self", ".", "train_states", "]", "\n", "print", "(", "\"one hot loaded\"", ")", "\n", "self", ".", "train_actions_onehot", "=", "[", "self", ".", "one_hot_actions", "(", "action", ")", "for", "action", "in", "self", ".", "train_actions", "]", "\n", "print", "(", "\"actions loaded\"", ")", "\n", "self", ".", "train_goals_embedding", "=", "[", "self", ".", "get_goal_embedding", "(", "goal", ")", "for", "goal", "in", "self", ".", "train_goals", "]", "\n", "print", "(", "\"goals loaded\"", ")", "\n", "self", ".", "train_inventory_embedding", "=", "[", "self", ".", "get_inventory_embedding", "(", "inventory", ")", "for", "inventory", "in", "self", ".", "train_inventories", "]", "\n", "print", "(", "\"done loading dataset\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.CraftingDataset.get_summed_embedding": [[73, 84], ["phrase.split.split.split", "numpy.zeros", "train_autoencoder.CraftingDataset.glove.vectors[].data.cpu().numpy", "train_autoencoder.CraftingDataset.glove.vectors[].data.cpu", "p.lower"], "methods", ["None"], ["", "def", "get_summed_embedding", "(", "self", ",", "phrase", ")", ":", "\n", "\n", "        ", "phrase", "=", "phrase", ".", "split", "(", "' '", ")", "\n", "#phrase_vector = torch.from_numpy(np.zeros((self.embed_dim), dtype=np.float32))", "\n", "\n", "phrase_vector", "=", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "p", "in", "phrase", ":", "\n", "            ", "phrase_vector", "+=", "self", ".", "glove", ".", "vectors", "[", "self", ".", "glove", ".", "stoi", "[", "p", ".", "lower", "(", ")", "]", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "phrase_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.CraftingDataset.get_grid_embedding": [[87, 99], ["numpy.zeros", "range", "range", "enumerate", "train_autoencoder.CraftingDataset.get_summed_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_grid_embedding", "(", "self", ",", "batch_grid", ")", ":", "\n", "\n", "        ", "goal_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "                ", "for", "index", ",", "item", "in", "enumerate", "(", "batch_grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "                    ", "if", "item", "==", "\"ResourceFont\"", "or", "item", "==", "\"CraftingContainer\"", "or", "item", "==", "\"CraftingItem\"", ":", "\n", "                        ", "goal_embedding_array", "[", "x", "]", "[", "y", "]", "=", "self", ".", "get_summed_embedding", "(", "batch_grid", "[", "x", "]", "[", "y", "]", "[", "index", "+", "1", "]", ")", "\n", "\n", "", "", "", "", "return", "goal_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.CraftingDataset.get_goal_embedding": [[100, 115], ["numpy.zeros", "goal.split.split.split", "train_autoencoder.CraftingDataset.glove.vectors[].data.cpu().numpy", "train_autoencoder.CraftingDataset.glove.vectors[].data.cpu().numpy", "train_autoencoder.CraftingDataset.glove.vectors[].data.cpu", "train_autoencoder.CraftingDataset.glove.vectors[].data.cpu", "goal[].lower", "goal[].lower"], "methods", ["None"], ["", "def", "get_goal_embedding", "(", "self", ",", "goal", ")", ":", "\n", "\n", "#currently all crafts are 2 word phrases", "\n", "# goal in the format of \"Make Diamond Boots (Diamond Boots=1)\" --> just extract diamond boots part", "\n", "\n", "            ", "goal_embedding", "=", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "goal", "=", "goal", ".", "split", "(", "' '", ")", "\n", "\n", "item1_vec", "=", "self", ".", "glove", ".", "vectors", "[", "self", ".", "glove", ".", "stoi", "[", "goal", "[", "1", "]", ".", "lower", "(", ")", "]", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "item2_vec", "=", "self", ".", "glove", ".", "vectors", "[", "self", ".", "glove", ".", "stoi", "[", "goal", "[", "2", "]", ".", "lower", "(", ")", "]", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "goal_embedding", "=", "item1_vec", "+", "item2_vec", "\n", "\n", "return", "goal_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.CraftingDataset.get_inventory_embedding": [[116, 132], ["numpy.zeros", "train_autoencoder.CraftingDataset.get_summed_embedding", "train_autoencoder.CraftingDataset.get_summed_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_inventory_embedding", "(", "self", ",", "inventory", ")", ":", "\n", "\n", "        ", "inventory_embedding", "=", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "first", "=", "True", "\n", "for", "item", "in", "inventory", ":", "\n", "\n", "            ", "if", "inventory", "[", "item", "]", ">", "0", ":", "\n", "\n", "                ", "if", "first", ":", "\n", "                    ", "inventory_embedding", "=", "self", ".", "get_summed_embedding", "(", "item", ")", "\n", "first", "=", "False", "\n", "", "else", ":", "\n", "                    ", "inventory_embedding", "=", "inventory_embedding", "+", "self", ".", "get_summed_embedding", "(", "item", ")", "\n", "\n", "", "", "", "return", "inventory_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.CraftingDataset.one_hot_actions": [[134, 154], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "one_hot_actions", "(", "self", ",", "action", ")", ":", "\n", "\n", "        ", "if", "action", "==", "'up'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "1", "]", ")", "\n", "", "elif", "action", "==", "'down'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "2", "]", ")", "\n", "", "elif", "action", "==", "'left'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "3", "]", ")", "\n", "", "elif", "action", "==", "'right'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "4", "]", ")", "\n", "", "elif", "action", "==", "'toggle_switch'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "5", "]", ")", "\n", "", "elif", "action", "==", "'grab'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "6", "]", ")", "\n", "", "elif", "action", "==", "'mine'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "7", "]", ")", "\n", "", "elif", "action", "==", "'craft'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "", "elif", "action", "==", "'stop'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "8", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.CraftingDataset.one_hot_grid": [[155, 180], ["numpy.zeros", "range", "range", "enumerate"], "methods", ["None"], ["", "", "def", "one_hot_grid", "(", "self", ",", "grid", ")", ":", "\n", "\n", "        ", "grid_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "                ", "for", "index", ",", "item", "in", "enumerate", "(", "grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "\n", "                    ", "if", "item", "==", "'Corner'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "0", "]", "=", "1", "\n", "", "elif", "item", "==", "'Agent'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "1", "]", "=", "1", "\n", "", "elif", "'Door'", "in", "item", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "2", "]", "=", "1", "\n", "", "elif", "item", "==", "'Key'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "3", "]", "=", "1", "\n", "", "elif", "item", "==", "'Switch'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "4", "]", "=", "1", "\n", "", "elif", "item", "==", "'Block'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "5", "]", "=", "1", "\n", "", "if", "'closed'", "in", "item", ":", "# door closed", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "6", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "grid_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.CraftingDataset.__getitem__": [[182, 217], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "instruction.append", "instruction.extend", "instruction.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "vocab", "vocab", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "instruction.append", "instruction.extend", "instruction.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "train_autoencoder.CraftingDataset.vocab", "vocab", "vocab", "train_autoencoder.CraftingDataset.vocab"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "states_embedding", "=", "torch", ".", "Tensor", "(", "self", ".", "train_states_embedding", "[", "index", "]", ")", "\n", "states_onehot", "=", "torch", ".", "Tensor", "(", "self", ".", "train_states_onehot", "[", "index", "]", ")", "\n", "action", "=", "torch", ".", "Tensor", "(", "self", ".", "train_actions_onehot", "[", "index", "]", ")", "\n", "goal", "=", "torch", ".", "Tensor", "(", "self", ".", "train_goals_embedding", "[", "index", "]", ")", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "self", ".", "train_inventory_embedding", "[", "index", "]", ")", "\n", "\n", "temp_instruction", "=", "self", ".", "train_instructions", "[", "index", "]", "\n", "\n", "try", ":", "\n", "            ", "instruction", "=", "[", "]", "\n", "instruction", ".", "append", "(", "vocab", "(", "'<start>'", ")", ")", "\n", "instruction", ".", "extend", "(", "[", "self", ".", "vocab", "(", "token", ")", "for", "token", "in", "temp_instruction", "]", ")", "\n", "instruction", ".", "append", "(", "vocab", "(", "'<end>'", ")", ")", "\n", "target", "=", "torch", ".", "Tensor", "(", "instruction", ")", "\n", "", "except", ":", "\n", "\n", "            ", "index", "=", "index", "+", "10", "# in case there is an error", "\n", "\n", "states_embedding", "=", "torch", ".", "Tensor", "(", "self", ".", "train_states_embedding", "[", "index", "]", ")", "\n", "states_onehot", "=", "torch", ".", "Tensor", "(", "self", ".", "train_states_onehot", "[", "index", "]", ")", "\n", "action", "=", "torch", ".", "Tensor", "(", "self", ".", "train_actions_onehot", "[", "index", "]", ")", "\n", "goal", "=", "torch", ".", "Tensor", "(", "self", ".", "train_goals_embedding", "[", "index", "]", ")", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "self", ".", "train_inventory_embedding", "[", "index", "]", ")", "\n", "\n", "temp_instruction", "=", "self", ".", "train_instructions", "[", "index", "]", "\n", "\n", "instruction", "=", "[", "]", "\n", "instruction", ".", "append", "(", "vocab", "(", "'<start>'", ")", ")", "\n", "instruction", ".", "extend", "(", "[", "self", ".", "vocab", "(", "token", ")", "for", "token", "in", "temp_instruction", "]", ")", "\n", "instruction", ".", "append", "(", "vocab", "(", "'<end>'", ")", ")", "\n", "target", "=", "torch", ".", "Tensor", "(", "instruction", ")", "\n", "\n", "", "return", "states_onehot", ",", "states_embedding", ",", "inventory", ",", "action", ",", "goal", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.CraftingDataset.__len__": [[218, 220], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.collate_fn": [[221, 247], ["data.sort", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "enumerate", "len", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "max"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "\n", "    ", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "5", "]", ")", ",", "reverse", "=", "True", ")", "\n", "states_onehot", ",", "states_embedding", ",", "inventory_embedding", ",", "action", ",", "goal", ",", "captions", "=", "zip", "(", "*", "data", ")", "\n", "\n", "# Merge images (from tuple of 3D tensor to 4D tensor).", "\n", "#images = torch.stack(images, 0)", "\n", "\n", "states_onehot", "=", "torch", ".", "stack", "(", "states_onehot", ",", "0", ")", "\n", "states_embedding", "=", "torch", ".", "stack", "(", "states_embedding", ",", "0", ")", "\n", "action", "=", "torch", ".", "stack", "(", "action", ",", "0", ")", "\n", "goal", "=", "torch", ".", "stack", "(", "goal", ",", "0", ")", "\n", "inventory_embedding", "=", "torch", ".", "stack", "(", "inventory_embedding", ",", "0", ")", "\n", "\n", "\n", "# Merge captions (from tuple of 1D tensor to 2D tensor).", "\n", "lengths", "=", "[", "len", "(", "cap", ")", "for", "cap", "in", "captions", "]", "\n", "#targets = torch.zeros(len(captions), max(lengths)).long()", "\n", "targets", "=", "torch", ".", "ones", "(", "len", "(", "captions", ")", ",", "max", "(", "lengths", ")", ")", ".", "long", "(", ")", "*", "216", "\n", "\n", "for", "i", ",", "cap", "in", "enumerate", "(", "captions", ")", ":", "\n", "\n", "        ", "end", "=", "lengths", "[", "i", "]", "\n", "targets", "[", "i", ",", ":", "end", "]", "=", "cap", "[", ":", "end", "]", "\n", "\n", "", "return", "states_onehot", ",", "states_embedding", ",", "inventory_embedding", ",", "action", ",", "goal", ",", "targets", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.train_step_bothautoencoder": [[314, 376], ["model1.train", "model2.train", "enumerate", "train_loss.append", "train_loss1.append", "states_onehot.to.to", "states_embedding.to.to", "action.squeeze.to", "action.squeeze.squeeze", "goal.to.to", "inventory.to.to", "instructions.to.to", "optimizer1.zero_grad", "optimizer2.zero_grad", "model2", "criterion2", "model1", "criterion1", "total_loss.backward", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "optimizer1.step", "optimizer2.step", "criterion2.item", "criterion1.item", "numpy.mean", "numpy.mean", "all_losses.append", "all_losses1.append", "print"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step"], ["def", "train_step_bothautoencoder", "(", "epoch", ")", ":", "\n", "\n", "    ", "model1", ".", "train", "(", ")", "\n", "model2", ".", "train", "(", ")", "\n", "\n", "log_size", "=", "500", "\n", "\n", "all_losses", "=", "[", "]", "\n", "all_losses1", "=", "[", "]", "\n", "\n", "running_loss", "=", "0.0", "\n", "running_loss1", "=", "0.0", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ",", "0", ")", ":", "\n", "\n", "        ", "states_onehot", ",", "states_embedding", ",", "inventory", ",", "action", ",", "goal", ",", "instructions", ",", "lengths", "=", "data", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "action", "=", "action", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "action", "=", "action", ".", "squeeze", "(", "1", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "instructions", "=", "instructions", ".", "to", "(", "device", ")", "\n", "\n", "optimizer1", ".", "zero_grad", "(", ")", "\n", "optimizer2", ".", "zero_grad", "(", ")", "\n", "\n", "state_encoding", ",", "hidden", ",", "reconstruction", "=", "model2", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ")", "\n", "\n", "recon_loss", "=", "criterion2", "(", "reconstruction", ",", "state_encoding", ")", "\n", "\n", "outputs", "=", "model1", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "hidden", ")", "\n", "\n", "action_loss", "=", "criterion1", "(", "outputs", ",", "action", ")", "\n", "\n", "total_loss", "=", "recon_loss", "+", "action_loss", "\n", "total_loss", ".", "backward", "(", ")", "\n", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "parameters", ",", "max_norm", "=", "3", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "parameters2", ",", "max_norm", "=", "3", ")", "\n", "\n", "optimizer1", ".", "step", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "running_loss", "+=", "recon_loss", ".", "item", "(", ")", "\n", "running_loss1", "+=", "action_loss", ".", "item", "(", ")", "\n", "\n", "if", "i", "%", "log_size", "==", "log_size", "-", "1", ":", "\n", "\n", "            ", "all_losses", ".", "append", "(", "running_loss", "/", "log_size", ")", "\n", "all_losses1", ".", "append", "(", "running_loss1", "/", "log_size", ")", "\n", "\n", "print", "(", "'[%d, %5d] lang loss: %.3f action loss: %.3f'", "%", "\n", "(", "epoch", "+", "1", ",", "i", "+", "1", ",", "running_loss", "/", "log_size", ",", "running_loss1", "/", "log_size", ")", ")", "\n", "\n", "running_loss", "=", "0.0", "\n", "running_loss1", "=", "0.0", "\n", "\n", "", "", "train_loss", ".", "append", "(", "np", ".", "mean", "(", "all_losses", ")", ")", "\n", "train_loss1", ".", "append", "(", "np", ".", "mean", "(", "all_losses1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_autoencoder.validate_game_play": [[377, 394], ["model2.eval", "model1.eval", "range", "print", "sum", "torchtext.GloVe", "torchtext.GloVe", "test_models.play_game_w_language_auto", "results.append", "sum"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval"], ["", "def", "validate_game_play", "(", ")", ":", "\n", "\n", "    ", "model2", ".", "eval", "(", ")", "\n", "model1", ".", "eval", "(", ")", "\n", "\n", "if", "embed_dim", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "        ", "res", "=", "play_game_w_language_auto", "(", "model2", ",", "model1", ",", "glove", ",", "embed_dim", ",", "vocab", ",", "device", ")", "\n", "results", ".", "append", "(", "res", ")", "\n", "\n", "", "print", "(", "sum", "(", "results", ")", ",", "100", ")", "\n", "return", "sum", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.CraftingDataset.__init__": [[43, 70], ["print", "print", "print", "print", "print", "torchtext.GloVe", "torchtext.GloVe", "train_bc.CraftingDataset.get_grid_embedding", "train_bc.CraftingDataset.one_hot_grid", "train_bc.CraftingDataset.one_hot_actions", "train_bc.CraftingDataset.get_goal_embedding", "train_bc.CraftingDataset.get_inventory_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.one_hot_actions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "train_states", ",", "train_inventories", ",", "train_actions", ",", "train_goals", ",", "train_instructions", ",", "vocab", ",", "transform", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "train_instructions", "=", "train_instructions", "\n", "\n", "self", ".", "train_states", "=", "train_states", "\n", "self", ".", "train_inventories", "=", "train_inventories", "\n", "self", ".", "train_actions", "=", "train_actions", "\n", "self", ".", "train_goals", "=", "train_goals", "\n", "\n", "if", "self", ".", "embed_dim", "==", "50", ":", "\n", "            ", "self", ".", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "", "self", ".", "train_states_embedding", "=", "[", "self", ".", "get_grid_embedding", "(", "state", ")", "for", "state", "in", "self", ".", "train_states", "]", "\n", "print", "(", "\"embedding loaded\"", ")", "\n", "self", ".", "train_states_onehot", "=", "[", "self", ".", "one_hot_grid", "(", "state", ")", "for", "state", "in", "self", ".", "train_states", "]", "\n", "print", "(", "\"one hot loaded\"", ")", "\n", "self", ".", "train_actions_onehot", "=", "[", "self", ".", "one_hot_actions", "(", "action", ")", "for", "action", "in", "self", ".", "train_actions", "]", "\n", "print", "(", "\"actions loaded\"", ")", "\n", "self", ".", "train_goals_embedding", "=", "[", "self", ".", "get_goal_embedding", "(", "goal", ")", "for", "goal", "in", "self", ".", "train_goals", "]", "\n", "print", "(", "\"goals loaded\"", ")", "\n", "self", ".", "train_inventory_embedding", "=", "[", "self", ".", "get_inventory_embedding", "(", "inventory", ")", "for", "inventory", "in", "self", ".", "train_inventories", "]", "\n", "print", "(", "\"done loading dataset\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.CraftingDataset.get_summed_embedding": [[74, 88], ["phrase.split.split.split", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.zeros", "p.lower"], "methods", ["None"], ["", "def", "get_summed_embedding", "(", "self", ",", "phrase", ")", ":", "\n", "\n", "        ", "phrase", "=", "phrase", ".", "split", "(", "' '", ")", "\n", "phrase_vector", "=", "torch", ".", "from_numpy", "(", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "for", "p", "in", "phrase", ":", "\n", "            ", "try", ":", "\n", "                ", "phrase_vector", "+=", "self", ".", "glove", ".", "vectors", "[", "self", ".", "glove", ".", "stoi", "[", "p", ".", "lower", "(", ")", "]", "]", "\n", "\n", "# MAKE THIS ALL zeros?", "\n", "", "except", ":", "\n", "                ", "phrase_vector", "+=", "self", ".", "glove", ".", "vectors", "[", "self", ".", "glove", ".", "stoi", "[", "'unknown'", "]", "]", "#replace this later??", "\n", "\n", "", "", "return", "phrase_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.CraftingDataset.get_grid_embedding": [[91, 103], ["numpy.zeros", "range", "range", "enumerate", "train_bc.CraftingDataset.get_summed_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_grid_embedding", "(", "self", ",", "batch_grid", ")", ":", "\n", "\n", "        ", "goal_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "                ", "for", "index", ",", "item", "in", "enumerate", "(", "batch_grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "                    ", "if", "item", "==", "\"ResourceFont\"", "or", "item", "==", "\"CraftingContainer\"", "or", "item", "==", "\"CraftingItem\"", ":", "\n", "                        ", "goal_embedding_array", "[", "x", "]", "[", "y", "]", "=", "self", ".", "get_summed_embedding", "(", "batch_grid", "[", "x", "]", "[", "y", "]", "[", "index", "+", "1", "]", ")", "\n", "\n", "", "", "", "", "return", "goal_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.CraftingDataset.get_goal_embedding": [[104, 121], ["numpy.zeros", "goal.split.split.split", "train_bc.CraftingDataset.get_summed_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_goal_embedding", "(", "self", ",", "goal", ")", ":", "\n", "\n", "#currently all crafts are 2 word phrases", "\n", "# goal in the format of \"Make Diamond Boots (Diamond Boots=1)\" --> just extract diamond boots part", "\n", "\n", "            ", "goal_embedding", "=", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "goal", "=", "goal", ".", "split", "(", "' '", ")", "\n", "\n", "#item1_vec = self.glove.vectors[self.glove.stoi[goal[1].lower()]]", "\n", "#item2_vec = self.glove.vectors[self.glove.stoi[goal[2].lower()]]", "\n", "\n", "#goal_embedding = item1_vec+item2_vec", "\n", "\n", "goal_embedding", "=", "self", ".", "get_summed_embedding", "(", "goal", "[", "1", "]", "+", "' '", "+", "goal", "[", "2", "]", ")", "\n", "\n", "return", "goal_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.CraftingDataset.get_inventory_embedding": [[122, 140], ["numpy.zeros", "train_bc.CraftingDataset.get_summed_embedding", "train_bc.CraftingDataset.get_summed_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_inventory_embedding", "(", "self", ",", "inventory", ")", ":", "\n", "\n", "\n", "#summed inventory", "\n", "        ", "inventory_embedding", "=", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "first", "=", "True", "\n", "for", "item", "in", "inventory", ":", "\n", "\n", "            ", "if", "inventory", "[", "item", "]", ">", "0", ":", "\n", "\n", "                ", "if", "first", ":", "\n", "                    ", "inventory_embedding", "=", "self", ".", "get_summed_embedding", "(", "item", ")", "\n", "first", "=", "False", "\n", "", "else", ":", "\n", "                    ", "inventory_embedding", "=", "inventory_embedding", "+", "self", ".", "get_summed_embedding", "(", "item", ")", "\n", "\n", "", "", "", "return", "inventory_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.CraftingDataset.one_hot_actions": [[141, 162], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "print"], "methods", ["None"], ["", "def", "one_hot_actions", "(", "self", ",", "action", ")", ":", "\n", "\n", "        ", "if", "action", "==", "'up'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "1", "]", ")", "\n", "", "elif", "action", "==", "'down'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "2", "]", ")", "\n", "", "elif", "action", "==", "'left'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "3", "]", ")", "\n", "", "elif", "action", "==", "'right'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "4", "]", ")", "\n", "", "elif", "action", "==", "'toggle_switch'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "5", "]", ")", "\n", "", "elif", "action", "==", "'grab'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "6", "]", ")", "\n", "", "elif", "action", "==", "'mine'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "7", "]", ")", "\n", "", "elif", "action", "==", "'craft'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "action", ")", "\n", "print", "(", "\"HEREEE\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.CraftingDataset.one_hot_grid": [[163, 190], ["numpy.zeros", "range", "range", "enumerate"], "methods", ["None"], ["", "", "def", "one_hot_grid", "(", "self", ",", "grid", ")", ":", "\n", "\n", "        ", "grid_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "## ADD information about switch and door opening!!", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "                ", "for", "index", ",", "item", "in", "enumerate", "(", "grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "\n", "                    ", "if", "item", "==", "'Corner'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "0", "]", "=", "1", "\n", "", "elif", "item", "==", "'Agent'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "1", "]", "=", "1", "\n", "", "elif", "item", "==", "'Door'", "or", "item", "==", "'Door_opened'", "or", "item", "==", "'Door_closed'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "2", "]", "=", "1", "\n", "", "elif", "item", "==", "'Key'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "3", "]", "=", "1", "\n", "", "elif", "item", "==", "'Switch'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "4", "]", "=", "1", "\n", "", "elif", "item", "==", "'Block'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "5", "]", "=", "1", "\n", "", "elif", "item", "==", "'Door_closed'", ":", "\n", "                         ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "6", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "grid_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.CraftingDataset.__getitem__": [[192, 216], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "instruction.append", "instruction.extend", "instruction.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "vocab", "vocab", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "train_bc.CraftingDataset.vocab", "train_bc.CraftingDataset.vocab"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "states_embedding", "=", "torch", ".", "Tensor", "(", "self", ".", "train_states_embedding", "[", "index", "]", ")", "\n", "states_onehot", "=", "torch", ".", "Tensor", "(", "self", ".", "train_states_onehot", "[", "index", "]", ")", "\n", "action", "=", "torch", ".", "Tensor", "(", "self", ".", "train_actions_onehot", "[", "index", "]", ")", "\n", "goal", "=", "torch", ".", "Tensor", "(", "self", ".", "train_goals_embedding", "[", "index", "]", ")", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "self", ".", "train_inventory_embedding", "[", "index", "]", ")", "\n", "\n", "temp_instruction", "=", "self", ".", "train_instructions", "[", "index", "]", "\n", "\n", "try", ":", "\n", "            ", "instruction", "=", "[", "]", "\n", "instruction", ".", "append", "(", "vocab", "(", "'<start>'", ")", ")", "\n", "instruction", ".", "extend", "(", "[", "self", ".", "vocab", "(", "token", ")", "for", "token", "in", "temp_instruction", "]", ")", "\n", "instruction", ".", "append", "(", "vocab", "(", "'<end>'", ")", ")", "\n", "target", "=", "torch", ".", "Tensor", "(", "instruction", ")", "\n", "", "except", ":", "\n", "#print(index)", "\n", "            ", "instruction", "=", "[", "self", ".", "vocab", "(", "'<unk>'", ")", "]", "\n", "target", "=", "torch", ".", "Tensor", "(", "instruction", ")", "\n", "\n", "#print(states_onehot.size(), states_embedding.size(), action.size(), goal.size())", "\n", "\n", "", "return", "states_onehot", ",", "states_embedding", ",", "inventory", ",", "action", ",", "goal", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.CraftingDataset.__len__": [[217, 219], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_states", ")", "\n", "#return self.train_states.shape[0]", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.collate_fn": [[221, 243], ["data.sort", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "enumerate", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "max"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "\n", "    ", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "5", "]", ")", ",", "reverse", "=", "True", ")", "\n", "states_onehot", ",", "states_embedding", ",", "inventory_embedding", ",", "action", ",", "goal", ",", "captions", "=", "zip", "(", "*", "data", ")", "\n", "\n", "states_onehot", "=", "torch", ".", "stack", "(", "states_onehot", ",", "0", ")", "\n", "states_embedding", "=", "torch", ".", "stack", "(", "states_embedding", ",", "0", ")", "\n", "action", "=", "torch", ".", "stack", "(", "action", ",", "0", ")", "\n", "goal", "=", "torch", ".", "stack", "(", "goal", ",", "0", ")", "\n", "inventory_embedding", "=", "torch", ".", "stack", "(", "inventory_embedding", ",", "0", ")", "\n", "\n", "\n", "# Merge captions (from tuple of 1D tensor to 2D tensor).", "\n", "lengths", "=", "[", "len", "(", "cap", ")", "for", "cap", "in", "captions", "]", "\n", "targets", "=", "torch", ".", "zeros", "(", "len", "(", "captions", ")", ",", "max", "(", "lengths", ")", ")", ".", "long", "(", ")", "\n", "\n", "for", "i", ",", "cap", "in", "enumerate", "(", "captions", ")", ":", "\n", "\n", "        ", "end", "=", "lengths", "[", "i", "]", "\n", "targets", "[", "i", ",", ":", "end", "]", "=", "cap", "[", ":", "end", "]", "\n", "\n", "", "return", "states_onehot", ",", "states_embedding", ",", "inventory_embedding", ",", "action", ",", "goal", ",", "targets", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.train_step": [[298, 346], ["model.train", "enumerate", "train_loss.append", "states_onehot.to.to", "states_embedding.to.to", "action.squeeze.to", "action.squeeze.squeeze", "goal.to.to", "inventory.to.to", "instructions.to.to", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "numpy.mean", "all_losses.append", "print", "open", "myfile.write"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["def", "train_step", "(", "epoch", ")", ":", "\n", "\n", "    ", "log_size", "=", "500", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "all_losses", "=", "[", "]", "\n", "\n", "running_loss", "=", "0.0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ",", "0", ")", ":", "\n", "\n", "        ", "states_onehot", ",", "states_embedding", ",", "inventory", ",", "action", ",", "goal", ",", "instructions", ",", "lengths", "=", "data", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "action", "=", "action", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "action", "=", "action", ".", "squeeze", "(", "1", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "instructions", "=", "instructions", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "outputs", "=", "model", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ")", "\n", "\n", "#outputs = model(states_embedding, states_onehot, inventory, goal, instructions, lengths)", "\n", "\n", "loss", "=", "criterion", "(", "outputs", ",", "action", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "i", "%", "log_size", "==", "log_size", "-", "1", ":", "\n", "\n", "            ", "all_losses", ".", "append", "(", "running_loss", "/", "log_size", ")", "\n", "\n", "#writer.add_scalar('Loss/train', np.random.random(), n_iter)", "\n", "print", "(", "'[%d, %5d] loss: %.3f'", "%", "\n", "(", "epoch", "+", "1", ",", "i", "+", "1", ",", "running_loss", "/", "log_size", ")", ")", "\n", "with", "open", "(", "\"loss.txt\"", ",", "\"a\"", ")", "as", "myfile", ":", "\n", "                ", "myfile", ".", "write", "(", "'[%d, %5d] loss: %.3f \\n'", "%", "\n", "(", "epoch", "+", "1", ",", "i", "+", "1", ",", "running_loss", "/", "log_size", ")", ")", "\n", "\n", "", "running_loss", "=", "0.0", "\n", "\n", "", "", "train_loss", ".", "append", "(", "np", ".", "mean", "(", "all_losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_bc.validate_game": [[348, 365], ["model.eval", "range", "print", "sum", "torchtext.GloVe", "torchtext.GloVe", "test_models.play_game", "results.append", "sum"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.test_models.play_game"], ["", "def", "validate_game", "(", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "if", "embed_dim", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "15", ")", ":", "\n", "        ", "res", "=", "play_game", "(", "model", ",", "glove", ",", "embed_dim", ",", "device", ")", "\n", "results", ".", "append", "(", "res", ")", "\n", "\n", "", "print", "(", "sum", "(", "results", ")", ")", "\n", "return", "sum", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.__init__": [[42, 70], ["print", "print", "print", "print", "print", "torchtext.GloVe", "torchtext.GloVe", "train_stateprediction.CraftingDataset.get_grid_embedding", "train_stateprediction.CraftingDataset.one_hot_grid", "train_stateprediction.CraftingDataset.one_hot_actions", "train_stateprediction.CraftingDataset.get_goal_embedding", "train_stateprediction.CraftingDataset.get_inventory_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.one_hot_actions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "train_states", ",", "train_inventories", ",", "train_actions", ",", "train_goals", ",", "train_past", ",", "train_instructions", ",", "vocab", ",", "transform", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "train_instructions", "=", "train_instructions", "\n", "\n", "self", ".", "train_states", "=", "train_states", "\n", "self", ".", "train_inventories", "=", "train_inventories", "\n", "self", ".", "train_actions", "=", "train_actions", "\n", "self", ".", "train_goals", "=", "train_goals", "\n", "self", ".", "train_past", "=", "train_past", "\n", "\n", "if", "self", ".", "embed_dim", "==", "50", ":", "\n", "            ", "self", ".", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "", "self", ".", "train_states_embedding", "=", "[", "self", ".", "get_grid_embedding", "(", "state", ")", "for", "state", "in", "self", ".", "train_states", "]", "\n", "print", "(", "\"embedding loaded\"", ")", "\n", "self", ".", "train_states_onehot", "=", "[", "self", ".", "one_hot_grid", "(", "state", ")", "for", "state", "in", "self", ".", "train_states", "]", "\n", "print", "(", "\"one hot loaded\"", ")", "\n", "self", ".", "train_actions_onehot", "=", "[", "self", ".", "one_hot_actions", "(", "action", ")", "for", "action", "in", "self", ".", "train_actions", "]", "\n", "print", "(", "\"actions loaded\"", ")", "\n", "self", ".", "train_goals_embedding", "=", "[", "self", ".", "get_goal_embedding", "(", "goal", ")", "for", "goal", "in", "self", ".", "train_goals", "]", "\n", "print", "(", "\"goals loaded\"", ")", "\n", "self", ".", "train_inventory_embedding", "=", "[", "self", ".", "get_inventory_embedding", "(", "inventory", ")", "for", "inventory", "in", "self", ".", "train_inventories", "]", "\n", "print", "(", "\"done loading dataset\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.get_summed_embedding": [[74, 85], ["phrase.split.split.split", "numpy.zeros", "train_stateprediction.CraftingDataset.glove.vectors[].data.cpu().numpy", "train_stateprediction.CraftingDataset.glove.vectors[].data.cpu", "p.lower"], "methods", ["None"], ["", "def", "get_summed_embedding", "(", "self", ",", "phrase", ")", ":", "\n", "\n", "        ", "phrase", "=", "phrase", ".", "split", "(", "' '", ")", "\n", "#phrase_vector = torch.from_numpy(np.zeros((self.embed_dim), dtype=np.float32))", "\n", "\n", "phrase_vector", "=", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "p", "in", "phrase", ":", "\n", "            ", "phrase_vector", "+=", "self", ".", "glove", ".", "vectors", "[", "self", ".", "glove", ".", "stoi", "[", "p", ".", "lower", "(", ")", "]", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "phrase_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.get_grid_embedding": [[88, 100], ["numpy.zeros", "range", "range", "enumerate", "train_stateprediction.CraftingDataset.get_summed_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_grid_embedding", "(", "self", ",", "batch_grid", ")", ":", "\n", "\n", "        ", "goal_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "                ", "for", "index", ",", "item", "in", "enumerate", "(", "batch_grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "                    ", "if", "item", "==", "\"ResourceFont\"", "or", "item", "==", "\"CraftingContainer\"", "or", "item", "==", "\"CraftingItem\"", ":", "\n", "                        ", "goal_embedding_array", "[", "x", "]", "[", "y", "]", "=", "self", ".", "get_summed_embedding", "(", "batch_grid", "[", "x", "]", "[", "y", "]", "[", "index", "+", "1", "]", ")", "\n", "\n", "", "", "", "", "return", "goal_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.get_goal_embedding": [[101, 116], ["numpy.zeros", "goal.split.split.split", "train_stateprediction.CraftingDataset.glove.vectors[].data.cpu().numpy", "train_stateprediction.CraftingDataset.glove.vectors[].data.cpu().numpy", "train_stateprediction.CraftingDataset.glove.vectors[].data.cpu", "train_stateprediction.CraftingDataset.glove.vectors[].data.cpu", "goal[].lower", "goal[].lower"], "methods", ["None"], ["", "def", "get_goal_embedding", "(", "self", ",", "goal", ")", ":", "\n", "\n", "#currently all crafts are 2 word phrases", "\n", "# goal in the format of \"Make Diamond Boots (Diamond Boots=1)\" --> just extract diamond boots part", "\n", "\n", "            ", "goal_embedding", "=", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "goal", "=", "goal", ".", "split", "(", "' '", ")", "\n", "\n", "item1_vec", "=", "self", ".", "glove", ".", "vectors", "[", "self", ".", "glove", ".", "stoi", "[", "goal", "[", "1", "]", ".", "lower", "(", ")", "]", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "item2_vec", "=", "self", ".", "glove", ".", "vectors", "[", "self", ".", "glove", ".", "stoi", "[", "goal", "[", "2", "]", ".", "lower", "(", ")", "]", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "goal_embedding", "=", "item1_vec", "+", "item2_vec", "\n", "\n", "return", "goal_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.get_inventory_embedding": [[117, 146], ["numpy.zeros", "train_stateprediction.CraftingDataset.get_summed_embedding", "train_stateprediction.CraftingDataset.get_summed_embedding"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_inventory_embedding", "(", "self", ",", "inventory", ")", ":", "\n", "\n", "\n", "#summed inventory", "\n", "        ", "inventory_embedding", "=", "np", ".", "zeros", "(", "(", "self", ".", "embed_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "first", "=", "True", "\n", "for", "item", "in", "inventory", ":", "\n", "\n", "            ", "if", "inventory", "[", "item", "]", ">", "0", ":", "\n", "\n", "                ", "if", "first", ":", "\n", "                    ", "inventory_embedding", "=", "self", ".", "get_summed_embedding", "(", "item", ")", "\n", "first", "=", "False", "\n", "", "else", ":", "\n", "                    ", "inventory_embedding", "=", "inventory_embedding", "+", "self", ".", "get_summed_embedding", "(", "item", ")", "\n", "\n", "", "", "", "return", "inventory_embedding", "\n", "'''\n\n        inventory_embedding = np.zeros((10,self.embed_dim), dtype=np.float32)\n\n        count = 0\n        for item in inventory:\n            if inventory[item] > 0:\n                inventory_embedding[count] = self.get_summed_embedding(item)\n                count = count + 1\n        return inventory_embedding\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.one_hot_actions": [[149, 169], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "one_hot_actions", "(", "self", ",", "action", ")", ":", "\n", "\n", "        ", "if", "action", "==", "'up'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "1", "]", ")", "\n", "", "elif", "action", "==", "'down'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "2", "]", ")", "\n", "", "elif", "action", "==", "'left'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "3", "]", ")", "\n", "", "elif", "action", "==", "'right'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "4", "]", ")", "\n", "", "elif", "action", "==", "'toggle_switch'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "5", "]", ")", "\n", "", "elif", "action", "==", "'grab'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "6", "]", ")", "\n", "", "elif", "action", "==", "'mine'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "7", "]", ")", "\n", "", "elif", "action", "==", "'craft'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "", "elif", "action", "==", "'stop'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "8", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.one_hot_grid": [[170, 195], ["numpy.zeros", "range", "range", "enumerate"], "methods", ["None"], ["", "", "def", "one_hot_grid", "(", "self", ",", "grid", ")", ":", "\n", "\n", "        ", "grid_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "                ", "for", "index", ",", "item", "in", "enumerate", "(", "grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "\n", "                    ", "if", "item", "==", "'Corner'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "0", "]", "=", "1", "\n", "", "elif", "item", "==", "'Agent'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "1", "]", "=", "1", "\n", "", "elif", "'Door'", "in", "item", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "2", "]", "=", "1", "\n", "", "elif", "item", "==", "'Key'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "3", "]", "=", "1", "\n", "", "elif", "item", "==", "'Switch'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "4", "]", "=", "1", "\n", "", "elif", "item", "==", "'Block'", ":", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "5", "]", "=", "1", "\n", "", "if", "'closed'", "in", "item", ":", "# door closed", "\n", "                        ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "6", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "grid_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.__getitem__": [[197, 221], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "action", "=", "torch", ".", "Tensor", "(", "self", ".", "train_actions_onehot", "[", "index", "]", ")", "\n", "\n", "states_embedding", "=", "[", "]", "\n", "states_onehot", "=", "[", "]", "\n", "goal", "=", "[", "]", "\n", "inventory", "=", "[", "]", "\n", "\n", "temp_indices", "=", "self", ".", "train_past", "[", "index", "]", "\n", "#temp_indices.append(index)", "\n", "\n", "for", "ind", "in", "temp_indices", ":", "\n", "            ", "states_embedding", ".", "append", "(", "self", ".", "train_states_embedding", "[", "index", "]", ")", "\n", "states_onehot", ".", "append", "(", "self", ".", "train_states_onehot", "[", "index", "]", ")", "\n", "goal", ".", "append", "(", "self", ".", "train_goals_embedding", "[", "index", "]", ")", "\n", "inventory", ".", "append", "(", "self", ".", "train_inventory_embedding", "[", "index", "]", ")", "\n", "\n", "", "states_embedding", "=", "torch", ".", "Tensor", "(", "states_embedding", ")", "\n", "states_onehot", "=", "torch", ".", "Tensor", "(", "states_onehot", ")", "\n", "goal", "=", "torch", ".", "Tensor", "(", "goal", ")", "\n", "inventory", "=", "torch", ".", "Tensor", "(", "inventory", ")", "\n", "\n", "return", "states_onehot", ",", "states_embedding", ",", "inventory", ",", "action", ",", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.CraftingDataset.__len__": [[222, 224], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_states", ")", "\n", "#return self.train_states.shape[0]", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.collate_fn": [[226, 252], ["data.sort", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "enumerate", "len", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "max"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "\n", "    ", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "5", "]", ")", ",", "reverse", "=", "True", ")", "\n", "states_onehot", ",", "states_embedding", ",", "inventory_embedding", ",", "action", ",", "goal", ",", "captions", "=", "zip", "(", "*", "data", ")", "\n", "\n", "# Merge images (from tuple of 3D tensor to 4D tensor).", "\n", "#images = torch.stack(images, 0)", "\n", "\n", "states_onehot", "=", "torch", ".", "stack", "(", "states_onehot", ",", "0", ")", "\n", "states_embedding", "=", "torch", ".", "stack", "(", "states_embedding", ",", "0", ")", "\n", "action", "=", "torch", ".", "stack", "(", "action", ",", "0", ")", "\n", "goal", "=", "torch", ".", "stack", "(", "goal", ",", "0", ")", "\n", "inventory_embedding", "=", "torch", ".", "stack", "(", "inventory_embedding", ",", "0", ")", "\n", "\n", "\n", "# Merge captions (from tuple of 1D tensor to 2D tensor).", "\n", "lengths", "=", "[", "len", "(", "cap", ")", "for", "cap", "in", "captions", "]", "\n", "#targets = torch.zeros(len(captions), max(lengths)).long()", "\n", "targets", "=", "torch", ".", "ones", "(", "len", "(", "captions", ")", ",", "max", "(", "lengths", ")", ")", ".", "long", "(", ")", "*", "216", "\n", "\n", "for", "i", ",", "cap", "in", "enumerate", "(", "captions", ")", ":", "\n", "\n", "        ", "end", "=", "lengths", "[", "i", "]", "\n", "targets", "[", "i", ",", ":", "end", "]", "=", "cap", "[", ":", "end", "]", "\n", "\n", "", "return", "states_onehot", ",", "states_embedding", ",", "inventory_embedding", ",", "action", ",", "goal", ",", "targets", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.train_step_bothautoencoder": [[320, 388], ["model1.train", "model2.train", "enumerate", "train_loss.append", "train_loss1.append", "states_onehot.to.to", "states_embedding.to.to", "action.squeeze.to", "action.squeeze.squeeze", "goal.to.to", "inventory.to.to", "optimizer1.zero_grad", "optimizer2.zero_grad", "model2", "model2.get_state_encoding_new", "criterion2", "model1", "criterion1", "total_loss.backward", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "optimizer1.step", "optimizer2.step", "criterion2.item", "criterion1.item", "numpy.mean", "numpy.mean", "all_losses.append", "all_losses1.append", "print"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step"], ["def", "train_step_bothautoencoder", "(", "epoch", ")", ":", "\n", "\n", "    ", "model1", ".", "train", "(", ")", "\n", "model2", ".", "train", "(", ")", "\n", "\n", "log_size", "=", "500", "\n", "\n", "all_losses", "=", "[", "]", "\n", "all_losses1", "=", "[", "]", "\n", "\n", "running_loss", "=", "0.0", "\n", "running_loss1", "=", "0.0", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ",", "0", ")", ":", "\n", "\n", "        ", "states_onehot", ",", "states_embedding", ",", "inventory", ",", "action", ",", "goal", "=", "data", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "action", "=", "action", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "action", "=", "action", ".", "squeeze", "(", "1", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "# action = action.to(device, dtype=torch.int64)", "\n", "# action = action.squeeze(1)", "\n", "# states_onehot = [item.to(device) for item in states_onehot]", "\n", "# states_embedding = [item.to(device) for item in states_embedding]", "\n", "# goal = [item.to(device) for item in goal]", "\n", "# inventory = [item.to(device) for item in inventory]", "\n", "\n", "optimizer1", ".", "zero_grad", "(", ")", "\n", "optimizer2", ".", "zero_grad", "(", ")", "\n", "\n", "reconstruction", ",", "hidden", "=", "model2", "(", "states_embedding", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", ",", ":", "]", ",", "states_onehot", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", ",", ":", "]", ",", "inventory", "[", ":", ",", "0", ":", "3", ",", ":", "]", ",", "goal", "[", ":", ",", "0", ":", "3", ",", ":", "]", ",", "device", ")", "\n", "state_encoding", "=", "model2", ".", "get_state_encoding_new", "(", "states_embedding", "[", ":", ",", "3", ",", ":", ",", ":", ",", ":", "]", ",", "states_onehot", "[", ":", ",", "3", ",", ":", ",", ":", ",", ":", "]", ",", "inventory", "[", ":", ",", "3", ",", ":", "]", ",", "goal", "[", ":", ",", "3", ",", ":", "]", ")", "\n", "\n", "recon_loss", "=", "criterion2", "(", "reconstruction", ",", "state_encoding", ")", "\n", "\n", "outputs", "=", "model1", "(", "states_embedding", "[", ":", ",", "3", ",", ":", ",", ":", ",", ":", "]", ",", "states_onehot", "[", ":", ",", "3", ",", ":", ",", ":", ",", ":", "]", ",", "inventory", "[", ":", ",", "3", ",", ":", "]", ",", "goal", "[", ":", ",", "3", ",", ":", "]", ",", "hidden", ")", "\n", "\n", "action_loss", "=", "criterion1", "(", "outputs", ",", "action", ")", "\n", "\n", "total_loss", "=", "recon_loss", "+", "action_loss", "\n", "total_loss", ".", "backward", "(", ")", "\n", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "parameters", ",", "max_norm", "=", "3", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "parameters2", ",", "max_norm", "=", "3", ")", "\n", "\n", "optimizer1", ".", "step", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "running_loss", "+=", "recon_loss", ".", "item", "(", ")", "\n", "running_loss1", "+=", "action_loss", ".", "item", "(", ")", "\n", "\n", "if", "i", "%", "log_size", "==", "log_size", "-", "1", ":", "\n", "\n", "            ", "all_losses", ".", "append", "(", "running_loss", "/", "log_size", ")", "\n", "all_losses1", ".", "append", "(", "running_loss1", "/", "log_size", ")", "\n", "\n", "print", "(", "'[%d, %5d] lang loss: %.3f action loss: %.3f'", "%", "\n", "(", "epoch", "+", "1", ",", "i", "+", "1", ",", "running_loss", "/", "log_size", ",", "running_loss1", "/", "log_size", ")", ")", "\n", "\n", "running_loss", "=", "0.0", "\n", "running_loss1", "=", "0.0", "\n", "\n", "", "", "train_loss", ".", "append", "(", "np", ".", "mean", "(", "all_losses", ")", ")", "\n", "train_loss1", ".", "append", "(", "np", ".", "mean", "(", "all_losses1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.validate_step": [[389, 451], ["model.eval", "model1.eval", "enumerate", "val_loss.append", "val_loss1.append", "states_onehot.to.to", "states_embedding.to.to", "action.squeeze.to", "action.squeeze.squeeze", "goal.to.to", "inventory.to.to", "instructions.to.to", "model", "criterion", "hidden_layer.detach.detach", "print", "model1", "criterion1", "criterion.item", "criterion1.item", "numpy.mean", "numpy.mean", "torch.nn.utils.rnn.pack_padded_sequence", "hidden_layer.detach.size", "all_losses.append", "all_losses1.append", "print"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to"], ["", "def", "validate_step", "(", "epoch", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "model1", ".", "eval", "(", ")", "\n", "\n", "log_size", "=", "100", "\n", "\n", "all_losses", "=", "[", "]", "\n", "all_losses1", "=", "[", "]", "\n", "\n", "running_loss", "=", "0.0", "\n", "running_loss1", "=", "0.0", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "val_loader", ",", "0", ")", ":", "\n", "\n", "#states_onehot, states_embedding, action, goal = data", "\n", "\n", "        ", "states_onehot", ",", "states_embedding", ",", "inventory", ",", "action", ",", "goal", "=", "data", "\n", "\n", "states_onehot", "=", "states_onehot", ".", "to", "(", "device", ")", "\n", "states_embedding", "=", "states_embedding", ".", "to", "(", "device", ")", "\n", "action", "=", "action", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "action", "=", "action", ".", "squeeze", "(", "1", ")", "\n", "goal", "=", "goal", ".", "to", "(", "device", ")", "\n", "inventory", "=", "inventory", ".", "to", "(", "device", ")", "\n", "\n", "instructions", "=", "instructions", ".", "to", "(", "device", ")", "\n", "targets", "=", "pack_padded_sequence", "(", "instructions", ",", "lengths", ",", "batch_first", "=", "True", ")", "[", "0", "]", "\n", "\n", "outputs", ",", "hidden_layer", "=", "model", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "instructions", ",", "lengths", ")", "\n", "\n", "lang_loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "hidden_layer", "=", "hidden_layer", ".", "detach", "(", ")", "\n", "\n", "print", "(", "hidden_layer", ".", "size", "(", ")", ")", "\n", "\n", "#train action component         ", "\n", "outputs", "=", "model1", "(", "states_embedding", ",", "states_onehot", ",", "inventory", ",", "goal", ",", "hidden_layer", ")", "\n", "\n", "action_loss", "=", "criterion1", "(", "outputs", ",", "action", ")", "\n", "\n", "running_loss", "+=", "lang_loss", ".", "item", "(", ")", "\n", "running_loss1", "+=", "action_loss", ".", "item", "(", ")", "\n", "\n", "if", "i", "%", "log_size", "==", "log_size", "-", "1", ":", "\n", "\n", "            ", "all_losses", ".", "append", "(", "running_loss", "/", "log_size", ")", "\n", "all_losses1", ".", "append", "(", "running_loss1", "/", "log_size", ")", "\n", "\n", "#writer.add_scalar('Loss/train', np.random.random(), n_iter)", "\n", "print", "(", "'VAL [%d, %5d] lang loss: %.3f action loss: %.3f'", "%", "\n", "(", "epoch", "+", "1", ",", "i", "+", "1", ",", "running_loss", "/", "log_size", ",", "running_loss1", "/", "log_size", ")", ")", "\n", "# with open(\"loss.txt\", \"a\") as myfile:", "\n", "#     myfile.write('[%d, %5d] loss: %.3f \\n' %", "\n", "#       (epoch + 1, i + 1, running_loss / log_size))", "\n", "\n", "running_loss", "=", "0.0", "\n", "running_loss1", "=", "0.0", "\n", "\n", "", "", "val_loss", ".", "append", "(", "np", ".", "mean", "(", "all_losses", ")", ")", "\n", "val_loss1", ".", "append", "(", "np", ".", "mean", "(", "all_losses1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_stateprediction.validate_game_play": [[452, 469], ["model2.eval", "model1.eval", "range", "print", "sum", "torchtext.GloVe", "torchtext.GloVe", "test_models.play_game_w_language_state", "results.append", "sum"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval"], ["", "def", "validate_game_play", "(", ")", ":", "\n", "\n", "    ", "model2", ".", "eval", "(", ")", "\n", "model1", ".", "eval", "(", ")", "\n", "\n", "if", "embed_dim", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "        ", "res", "=", "play_game_w_language_state", "(", "model2", ",", "model1", ",", "glove", ",", "embed_dim", ",", "vocab", ",", "device", ")", "\n", "results", ".", "append", "(", "res", ")", "\n", "\n", "", "print", "(", "sum", "(", "results", ")", ",", "100", ")", "\n", "return", "sum", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.build_vocab.Vocabulary.__init__": [[15, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2idx", "=", "{", "}", "\n", "self", ".", "idx2word", "=", "{", "}", "\n", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.build_vocab.Vocabulary.add_word": [[20, 25], ["None"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "word2idx", ":", "\n", "            ", "self", ".", "word2idx", "[", "word", "]", "=", "self", ".", "idx", "\n", "self", ".", "idx2word", "[", "self", ".", "idx", "]", "=", "word", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.build_vocab.Vocabulary.__call__": [[26, 30], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "word2idx", ":", "\n", "            ", "return", "self", ".", "word2idx", "[", "'<unk>'", "]", "\n", "", "return", "self", ".", "word2idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.build_vocab.Vocabulary.__len__": [[31, 33], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.build_vocab.build_vocabulary": [[34, 103], ["enumerate", "numpy.random.uniform().astype", "build_vocab.Vocabulary", "enumerate", "print", "torchtext.GloVe", "instruction_size.append", "instruction_joined.lower", "word_sizes.append", "torchtext.GloVe", "len", "numpy.random.uniform", "numpy.array", "len", "vec_string.split", "build_vocab.Vocabulary.add_word"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word"], ["", "", "def", "build_vocabulary", "(", "train_instructions", ",", "save_name", ",", "embed_dim", ")", ":", "\n", "\n", "    ", "freqs", "=", "{", "}", "\n", "\n", "if", "embed_dim", "==", "300", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "#maybe switch this out!", "\n", "", "elif", "embed_dim", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "\n", "", "instruction_size", "=", "[", "]", "\n", "instructs", "=", "{", "}", "\n", "\n", "for", "instruction", "in", "train_instructions", ":", "\n", "\n", "        ", "instruction_joined", "=", "\" \"", ".", "join", "(", "instruction", ")", "\n", "instruction_size", ".", "append", "(", "len", "(", "instruction", ")", ")", "\n", "inst_lower", "=", "instruction_joined", ".", "lower", "(", ")", "\n", "\n", "if", "inst_lower", "in", "instructs", ":", "\n", "            ", "instructs", "[", "inst_lower", "]", "=", "instructs", "[", "inst_lower", "]", "+", "1", "\n", "", "else", ":", "\n", "            ", "instructs", "[", "inst_lower", "]", "=", "1", "\n", "\n", "\n", "", "for", "word", "in", "instruction", ":", "\n", "\n", "            ", "try", ":", "\n", "                ", "vec", "=", "glove", ".", "vectors", "[", "glove", ".", "stoi", "[", "word", "]", "]", "\n", "if", "word", "in", "freqs", ":", "\n", "                    ", "freqs", "[", "word", "]", "=", "freqs", "[", "word", "]", "+", "1", "\n", "", "else", ":", "\n", "                    ", "freqs", "[", "word", "]", "=", "1", "\n", "", "", "except", ":", "\n", "                ", "if", "'UNK'", "in", "freqs", ":", "\n", "                    ", "freqs", "[", "'UNK'", "]", "=", "freqs", "[", "'UNK'", "]", "+", "1", "\n", "", "else", ":", "\n", "                    ", "freqs", "[", "'UNK'", "]", "=", "1", "\n", "\n", "", "", "", "", "vocab_size", "=", "0", "\n", "word_sizes", "=", "[", "]", "\n", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "freqs", ")", ":", "\n", "\n", "        ", "word_sizes", ".", "append", "(", "freqs", "[", "key", "]", ")", "\n", "\n", "if", "'UNK'", "!=", "key", "and", "freqs", "[", "key", "]", ">", "10", ":", "\n", "            ", "vocab_size", "=", "vocab_size", "+", "1", "\n", "\n", "\n", "", "", "vocab_weights", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.01", ",", "0.01", ",", "(", "vocab_size", "+", "4", ",", "embed_dim", ")", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "#vocab_weights = np.zeros((vocab_size+4, embed_dim), dtype=np.float32)", "\n", "vocab", "=", "Vocabulary", "(", ")", "\n", "\n", "count", "=", "0", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "freqs", ")", ":", "\n", "\n", "        ", "if", "'UNK'", "==", "key", ":", "\n", "            ", "vec_string", "=", "'0.22418134 -0.28881392 0.13854356 0.00365387 -0.12870757 0.10243822 0.061626635 0.07318011 -0.061350107 -1.3477012 0.42037755 -0.063593924 -0.09683349 0.18086134 0.23704372 0.014126852 0.170096 -1.1491593 0.31497982 0.06622181 0.024687296 0.076693475 0.13851812 0.021302193 -0.06640582 -0.010336159 0.13523154 -0.042144544 -0.11938788 0.006948221 0.13333307 -0.18276379 0.052385733 0.008943111 -0.23957317 0.08500333 -0.006894406 0.0015864656 0.063391194 0.19177166 -0.13113557 -0.11295479 -0.14276934 0.03413971 -0.034278486 -0.051366422 0.18891625 -0.16673574 -0.057783455 0.036823478 0.08078679 0.022949161 0.033298038 0.011784158 0.05643189 -0.042776518 0.011959623 0.011552498 -0.0007971594 0.11300405 -0.031369694 -0.0061559738 -0.009043574 -0.415336 -0.18870236 0.13708843 0.005911723 -0.113035575 -0.030096142 -0.23908928 -0.05354085 -0.044904727 -0.20228513 0.0065645403 -0.09578946 -0.07391877 -0.06487607 0.111740574 -0.048649278 -0.16565254 -0.052037314 -0.078968436 0.13684988 0.0757494 -0.006275573 0.28693774 0.52017444 -0.0877165 -0.33010918 -0.1359622 0.114895485 -0.09744406 0.06269521 0.12118575 -0.08026362 0.35256687 -0.060017522 -0.04889904 -0.06828978 0.088740796 0.003964443 -0.0766291 0.1263925 0.07809314 -0.023164088 -0.5680669 -0.037892066 -0.1350967 -0.11351585 -0.111434504 -0.0905027 0.25174105 -0.14841858 0.034635577 -0.07334565 0.06320108 -0.038343467 -0.05413284 0.042197507 -0.090380974 -0.070528865 -0.009174437 0.009069661 0.1405178 0.02958134 -0.036431845 -0.08625681 0.042951006 0.08230793 0.0903314 -0.12279937 -0.013899368 0.048119213 0.08678239 -0.14450377 -0.04424887 0.018319942 0.015026873 -0.100526 0.06021201 0.74059093 -0.0016333034 -0.24960588 -0.023739101 0.016396184 0.11928964 0.13950661 -0.031624354 -0.01645025 0.14079992 -0.0002824564 -0.08052984 -0.0021310581 -0.025350995 0.086938225 0.14308536 0.17146006 -0.13943303 0.048792403 0.09274929 -0.053167373 0.031103406 0.012354865 0.21057427 0.32618305 0.18015954 -0.15881181 0.15322933 -0.22558987 -0.04200665 0.0084689725 0.038156632 0.15188617 0.13274793 0.113756925 -0.095273495 -0.049490947 -0.10265804 -0.27064866 -0.034567792 -0.018810693 -0.0010360252 0.10340131 0.13883452 0.21131058 -0.01981019 0.1833468 -0.10751636 -0.03128868 0.02518242 0.23232952 0.042052146 0.11731903 -0.15506615 0.0063580726 -0.15429358 0.1511722 0.12745973 0.2576985 -0.25486213 -0.0709463 0.17983761 0.054027 -0.09884228 -0.24595179 -0.093028545 -0.028203879 0.094398156 0.09233813 0.029291354 0.13110267 0.15682974 -0.016919162 0.23927948 -0.1343307 -0.22422817 0.14634751 -0.064993896 0.4703685 -0.027190214 0.06224946 -0.091360025 0.21490277 -0.19562101 -0.10032754 -0.09056772 -0.06203493 -0.18876675 -0.10963594 -0.27734384 0.12616494 -0.02217992 -0.16058226 -0.080475815 0.026953284 0.110732645 0.014894041 0.09416802 0.14299914 -0.1594008 -0.066080004 -0.007995227 -0.11668856 -0.13081996 -0.09237365 0.14741232 0.09180138 0.081735 0.3211204 -0.0036552632 -0.047030564 -0.02311798 0.048961394 0.08669574 -0.06766279 -0.50028914 -0.048515294 0.14144728 -0.032994404 -0.11954345 -0.14929578 -0.2388355 -0.019883996 -0.15917352 -0.052084364 0.2801028 -0.0029121689 -0.054581646 -0.47385484 0.17112483 -0.12066923 -0.042173345 0.1395337 0.26115036 0.012869649 0.009291686 -0.0026459037 -0.075331464 0.017840583 -0.26869613 -0.21820338 -0.17084768 -0.1022808 -0.055290595 0.13513643 0.12362477 -0.10980586 0.13980341 -0.20233242 0.08813751 0.3849736 -0.10653763 -0.06199595 0.028849555 0.03230154 0.023856193 0.069950655 0.19310954 -0.077677034 -0.144811'", "\n", "average_glove_vector", "=", "np", ".", "array", "(", "vec_string", ".", "split", "(", "\" \"", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "freqs", "[", "key", "]", ">", "10", ":", "\n", "                ", "vocab_weights", "[", "count", "]", "=", "glove", ".", "vectors", "[", "glove", ".", "stoi", "[", "key", "]", "]", "\n", "count", "=", "count", "+", "1", "\n", "vocab", ".", "add_word", "(", "key", ")", "\n", "\n", "", "", "", "print", "(", "\"Total vocabulary size: {}\"", ".", "format", "(", "len", "(", "vocab", ")", ")", ")", "\n", "\n", "return", "vocab", ",", "vocab_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.build_vocab.load_vocabulary": [[104, 112], ["numpy.load", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["", "def", "load_vocabulary", "(", "load_name", ")", ":", "\n", "\n", "    ", "with", "open", "(", "load_name", "+", "'_vocab'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "vocab", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "weights", "=", "np", ".", "load", "(", "load_name", "+", "\"_vocab_weights.npy\"", ")", "\n", "\n", "return", "weights", ",", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.build_vocab.main": [[113, 120], ["build_vocab", "print", "print", "open", "pickle.dump", "len"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "vocab", "=", "build_vocab", "(", "json", "=", "args", ".", "caption_path", ",", "threshold", "=", "args", ".", "threshold", ")", "\n", "vocab_path", "=", "args", ".", "vocab_path", "\n", "with", "open", "(", "vocab_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "vocab", ",", "f", ")", "\n", "", "print", "(", "\"Total vocabulary size: {}\"", ".", "format", "(", "len", "(", "vocab", ")", ")", ")", "\n", "print", "(", "\"Saved the vocabulary wrapper to '{}'\"", ".", "format", "(", "vocab_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttentionSUM.__init__": [[38, 95], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "train_models.Attention", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "train_models.LanguageWithAttentionSUM.embedding.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "LanguageWithAttentionSUM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder_dim", "=", "128", "\n", "self", ".", "encoder_dim", "=", "encoder_dim", "\n", "attention_dim", "=", "encoder_dim", "\n", "embed_dim", "=", "embedding_dim", "\n", "decoder_dim", "=", "32", "\n", "\n", "#self.embed = nn.Embedding(vocab_size, embedding_dim) # vocab size, 300", "\n", "\n", "#if training:", "\n", "#    self.embed.load_state_dict({'weight': embed_weights})", "\n", "#    self.embed.weight.requires_grad = False", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "encoder_dim", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "#self.fc_cat = nn.Linear(25*15+25*15+10*15+15, encoder_dim)", "\n", "\n", "'''\n        self.fc1 = nn.Linear(embedding_dim, 150)\n        self.fc2 = nn.Linear(7, 20)\n        self.fc3 = nn.Linear(170, 90)\n        self.fc4 = nn.Linear(embedding_dim, 150) \n        self.fc5 = nn.Linear(2250+150, 512)\n        self.fc_inv = nn.Linear(embedding_dim, 50) \n        self.fc55 = nn.Linear(512+50, embedding_dim)\n        '''", "\n", "\n", "#self.encoding = nn.LSTM(embedding_dim, 32, num_layers=1)", "\n", "#self.linear = nn.Linear(32, vocab_size)", "\n", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n", "# new stuff...", "\n", "self", ".", "attention", "=", "Attention", "(", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", "# attention network", "\n", "#self.attention = AttentionSmall(encoder_dim, decoder_dim)", "\n", "#self.embedding = nn.Embedding(vocab_size, embed_dim)  # embedding layer", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", "+", "1", ",", "embed_dim", ",", "vocab_size", ")", "# embedding layer", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decode_step", "=", "nn", ".", "LSTMCell", "(", "embed_dim", "+", "encoder_dim", ",", "decoder_dim", ",", "bias", "=", "True", ")", "# decoding LSTMCell", "\n", "self", ".", "init_h", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial hidden state of LSTMCell", "\n", "self", ".", "init_c", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial cell state of LSTMCell", "\n", "self", ".", "f_beta", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "encoder_dim", ")", "# linear layer to create a sigmoid-activated gate", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "vocab_size", ")", "# linear layer to find scores over vocabulary", "\n", "#self.init_weights()", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttentionSUM.init_weights": [[97, 104], ["train_models.LanguageWithAttentionSUM.embedding.weight.data.uniform_", "train_models.LanguageWithAttentionSUM.fc.bias.data.fill_", "train_models.LanguageWithAttentionSUM.fc.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializes some parameters with values from the uniform distribution, for easier convergence.\n        \"\"\"", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttentionSUM.init_hidden_state": [[105, 115], ["encoder_out.mean", "train_models.LanguageWithAttentionSUM.init_h", "train_models.LanguageWithAttentionSUM.init_c"], "methods", ["None"], ["", "def", "init_hidden_state", "(", "self", ",", "encoder_out", ")", ":", "\n", "        ", "\"\"\"\n        Creates the initial hidden and cell states for the decoder's LSTM based on the encoded images.\n        :param encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim)\n        :return: hidden state, cell state\n        \"\"\"", "\n", "mean_encoder_out", "=", "encoder_out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "init_h", "(", "mean_encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "c", "=", "self", ".", "init_c", "(", "mean_encoder_out", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttentionSUM.forward": [[116, 168], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "inventory.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "train_models.LanguageWithAttentionSUM.embedding", "train_models.LanguageWithAttentionSUM.init_hidden_state", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "h.clone", "range", "train_models.LanguageWithAttentionSUM.fc_embed", "train_models.LanguageWithAttentionSUM.fc_onehot", "train_models.LanguageWithAttentionSUM.fc_inv", "train_models.LanguageWithAttentionSUM.fc_goal", "max", "sum", "train_models.LanguageWithAttentionSUM.attention", "train_models.LanguageWithAttentionSUM.sigmoid", "train_models.LanguageWithAttentionSUM.decode_step", "h.clone", "train_models.LanguageWithAttentionSUM.fc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "train_models.LanguageWithAttentionSUM.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_models.LanguageWithAttentionSUM.dropout", "max", "max"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "encoded_captions", ",", "caption_lengths", ",", "device", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "inventory", "=", "inventory", ".", "view", "(", "-", "1", ",", "1", ",", "300", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "unsqueeze", "(", "1", ")", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "# DECODER", "\n", "batch_size", "=", "encoder_out", ".", "size", "(", "0", ")", "\n", "vocab_size", "=", "self", ".", "vocab_size", "\n", "\n", "num_pixels", "=", "encoder_out", ".", "size", "(", "1", ")", "\n", "\n", "# Embedding", "\n", "embeddings", "=", "self", ".", "embedding", "(", "encoded_captions", ")", "# (batch_size, max_caption_length, embed_dim)", "\n", "\n", "# Initialize LSTM state", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "\n", "# We won't decode at the <end> position, since we've finished generating as soon as we generate <end>", "\n", "# So, decoding lengths are actual lengths - 1", "\n", "decode_lengths", "=", "[", "caption_length", "-", "1", "for", "caption_length", "in", "caption_lengths", "]", "\n", "#decode_lengths = (caption_lengths - 1).tolist()", "\n", "\n", "# Create tensors to hold word predicion scores and alphas", "\n", "predictions", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max", "(", "decode_lengths", ")", ",", "vocab_size", ")", ".", "to", "(", "device", ")", "\n", "alphas", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max", "(", "decode_lengths", ")", ",", "num_pixels", ")", ".", "to", "(", "device", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# At each time-step, decode by", "\n", "# attention-weighing the encoder's output based on the decoder's previous hidden state output", "\n", "# then generate a new word in the decoder with the previous word and the attention weighted encoding", "\n", "for", "t", "in", "range", "(", "max", "(", "decode_lengths", ")", ")", ":", "\n", "            ", "batch_size_t", "=", "sum", "(", "[", "l", ">", "t", "for", "l", "in", "decode_lengths", "]", ")", "\n", "attention_weighted_encoding", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", "[", ":", "batch_size_t", "]", ",", "\n", "h", "[", ":", "batch_size_t", "]", ")", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", "[", ":", "batch_size_t", "]", ")", ")", "# gating scalar, (batch_size_t, encoder_dim)", "\n", "attention_weighted_encoding", "=", "gate", "*", "attention_weighted_encoding", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "\n", "torch", ".", "cat", "(", "[", "embeddings", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", ",", "attention_weighted_encoding", "]", ",", "dim", "=", "1", ")", ",", "\n", "(", "h", "[", ":", "batch_size_t", "]", ",", "c", "[", ":", "batch_size_t", "]", ")", ")", "# (batch_size_t, decoder_dim)", "\n", "hiddens", "[", ":", "batch_size_t", "]", "=", "h", ".", "clone", "(", ")", "## ADDED!", "\n", "preds", "=", "self", ".", "fc", "(", "self", ".", "dropout", "(", "h", ")", ")", "# (batch_size_t, vocab_size)", "\n", "predictions", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", "=", "preds", "\n", "alphas", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", "=", "alpha", "\n", "\n", "", "return", "predictions", ",", "encoded_captions", ",", "decode_lengths", ",", "alphas", ",", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttentionSUM.get_hidden_state_new": [[170, 246], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "train_models.LanguageWithAttentionSUM.init_hidden_state", "h.clone", "train_models.LanguageWithAttentionSUM.fc_embed", "train_models.LanguageWithAttentionSUM.fc_onehot", "train_models.LanguageWithAttentionSUM.fc_inv", "train_models.LanguageWithAttentionSUM.fc_goal", "train_models.LanguageWithAttentionSUM.embedding().squeeze", "train_models.LanguageWithAttentionSUM.attention", "train_models.LanguageWithAttentionSUM.sigmoid", "train_models.LanguageWithAttentionSUM.decode_step", "h.clone", "train_models.LanguageWithAttentionSUM.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.max", "range", "indices[].unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "train_models.LanguageWithAttentionSUM.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "indices.size", "len", "complete_seqs[].append", "len", "train_models.LanguageWithAttentionSUM.embedding", "indices.size", "temp.append", "indices.data.tolist"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "get_hidden_state_new", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "k", "=", "encoder_out", ".", "size", "(", "0", ")", "#batch size", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "torch", ".", "LongTensor", "(", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "]", "*", "k", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "torch", ".", "zeros", "(", "k", ",", "1", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "incomplete_inds", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "# used to keep track of original index in complete_seqs", "\n", "\n", "#complete_seqs_scores = list()", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "awe", "=", "gate", "*", "awe", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "hiddens", "[", "incomplete_inds", "]", "=", "h", ".", "clone", "(", ")", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "values", ",", "indices", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "assert", "(", "indices", ".", "size", "(", "0", ")", "==", "len", "(", "incomplete_inds", ")", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "complete_seqs", "[", "incomplete_inds", "[", "i", "]", "]", ".", "append", "(", "indices", ".", "data", ".", "tolist", "(", ")", "[", "i", "]", ")", "\n", "if", "indices", "[", "i", "]", "==", "word_map", ".", "word2idx", "[", "'<end>'", "]", ":", "\n", "                    ", "del", "incomplete_inds", "[", "i", "]", "\n", "#incomplete_inds.remove(i)", "\n", "", "else", ":", "\n", "#not finished", "\n", "                    ", "temp", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "incomplete_inds", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "#subset the ones that aren't finished.", "\n", "", "h", "=", "h", "[", "temp", "]", "\n", "c", "=", "c", "[", "temp", "]", "\n", "encoder_out", "=", "encoder_out", "[", "temp", "]", "\n", "k_prev_words", "=", "indices", "[", "temp", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "20", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "return", "complete_seqs", ",", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.SimpleNetwork.__init__": [[249, 264], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "    ", "super", "(", "SimpleNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "48", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "48", "+", "32", ",", "48", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.SimpleNetwork.forward": [[266, 291], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.SimpleNetwork.fc7", "train_models.SimpleNetwork.fc1", "train_models.SimpleNetwork.fc2", "train_models.SimpleNetwork.fc3", "train_models.SimpleNetwork.fc4", "train_models.SimpleNetwork.fc5", "train_models.SimpleNetwork.fc_inv", "train_models.SimpleNetwork.fc55", "train_models.SimpleNetwork.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "hidden", ")", ":", "\n", "\n", "#encode features", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "\n", "all_comb", "=", "torch", ".", "cat", "(", "(", "features", ",", "hidden", ")", ",", "dim", "=", "1", ")", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "all_comb", ")", ")", "# updated with new embedding size.", "\n", "c7", "=", "self", ".", "fc7", "(", "c6", ")", "\n", "#c8 = F.relu(self.fc8(c7))", "\n", "\n", "return", "c7", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.CNNAction.__init__": [[295, 328], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "train_models.CNNAction.embedding.weight.data.copy_", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "vocab", ",", "vocab_weights", ")", ":", "\n", "        ", "super", "(", "CNNAction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "32", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "320", ",", "48", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "48", ",", "48", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "8", ")", "\n", "\n", "self", ".", "WORD_DIM", "=", "300", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "len", "(", "vocab", ")", "+", "1", ",", "\n", "embedding_dim", "=", "self", ".", "WORD_DIM", ",", "padding_idx", "=", "len", "(", "vocab", ")", ")", "\n", "#self.embedding.load_state_dict({'weight': vocab_weights})", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "copy_", "(", "vocab_weights", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "self", ".", "FILTER_NUM", "=", "100", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "1", ",", "self", ".", "FILTER_NUM", ",", "self", ".", "WORD_DIM", "*", "2", ",", "stride", "=", "self", ".", "WORD_DIM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "1", ",", "self", ".", "FILTER_NUM", ",", "self", ".", "WORD_DIM", "*", "3", ",", "stride", "=", "self", ".", "WORD_DIM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "1", ",", "self", ".", "FILTER_NUM", ",", "self", ".", "WORD_DIM", "*", "4", ",", "stride", "=", "self", ".", "WORD_DIM", ")", "\n", "\n", "#self.fc = nn.Linear(sum(self.FILTER_NUM), 8)", "\n", "\n", "self", ".", "fc_comb", "=", "nn", ".", "Linear", "(", "48", "+", "300", ",", "8", ")", "\n", "self", ".", "max_len", "=", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.CNNAction.forward": [[332, 378], ["train_models.CNNAction.embedding", "torch.dropout.view", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "x1.view.view.view", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "x2.view.view.view", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "x3.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "temp_inv.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.CNNAction.fc1", "train_models.CNNAction.fc2", "train_models.CNNAction.fc3", "train_models.CNNAction.fc4", "train_models.CNNAction.fc5", "train_models.CNNAction.fc_inv", "train_models.CNNAction.fc55", "train_models.CNNAction.fc_comb", "train_models.CNNAction.conv1", "train_models.CNNAction.conv2", "train_models.CNNAction.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "language", ")", ":", "\n", "        ", "x", "=", "self", ".", "embedding", "(", "language", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1", ",", "300", "*", "self", ".", "max_len", ")", "\n", "\n", "x1", "=", "F", ".", "max_pool1d", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "self", ".", "max_len", "-", "2", "+", "1", ")", "\n", "x1", "=", "x1", ".", "view", "(", "-", "1", ",", "self", ".", "FILTER_NUM", ")", "\n", "x2", "=", "F", ".", "max_pool1d", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", ",", "self", ".", "max_len", "-", "3", "+", "1", ")", "\n", "x2", "=", "x2", ".", "view", "(", "-", "1", ",", "self", ".", "FILTER_NUM", ")", "\n", "x3", "=", "F", ".", "max_pool1d", "(", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", ",", "self", ".", "max_len", "-", "4", "+", "1", ")", "\n", "x3", "=", "x3", ".", "view", "(", "-", "1", ",", "self", ".", "FILTER_NUM", ")", "\n", "\n", "conv_results", "=", "[", "x1", ",", "x2", ",", "x3", "]", "\n", "\n", "#F.max_pool1d(F.relu(self.get_conv(i)(x)), self.MAX_SENT_LEN - self.FILTERS[i] + 1).view(-1, self.FILTER_NUM[i])", "\n", "\n", "#conv_results = [", "\n", "#    F.max_pool1d(F.relu(self.get_conv(i)(x)), 20 - self.FILTERS[i] + 1).view(-1, self.FILTER_NUM[i]) for i in range(len(self.FILTERS))]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "conv_results", ",", "1", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "\n", "#changing inventory.. ", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "temp_inv", "=", "temp_inv", ".", "view", "(", "-", "1", ",", "10", "*", "32", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "#c6 = F.relu(self.fc6(features)) # updated with new embedding size.", "\n", "#c7 = self.fc7(c6)", "\n", "\n", "comb_lang_feat", "=", "torch", ".", "cat", "(", "(", "features", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "output", "=", "F", ".", "log_softmax", "(", "self", ".", "fc_comb", "(", "comb_lang_feat", ")", ",", "dim", "=", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.BOW.__init__": [[383, 396], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "train_models.BOW.embedding.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "embed_weights", ",", "emb_size", ")", ":", "\n", "        ", "super", "(", "BOW", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "#self.embedding = nn.Embedding(num_embeddings=len(self.vocab),", "\n", "#                              embedding_dim=emb_size)", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "len", "(", "self", ".", "vocab", ")", "+", "1", ",", "\n", "embedding_dim", "=", "emb_size", ",", "padding_idx", "=", "len", "(", "self", ".", "vocab", ")", ")", "\n", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "300", ",", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.BOW.forward": [[397, 402], ["train_models.BOW.embedding", "output.sum.sum.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "embedding", "(", "input", ")", "\n", "output", "=", "output", ".", "sum", "(", "1", ")", "#try mean?", "\n", "#output = F.relu(self.linear(output))", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.GRU.__init__": [[423, 436], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "train_models.GRU.embedding.load_state_dict", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "len", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "embed_weights", ",", "emb_size", ",", "hidden_size", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", "GRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "len", "(", "self", ".", "vocab", ")", "+", "1", ",", "\n", "embedding_dim", "=", "emb_size", ",", "\n", "padding_idx", "=", "len", "(", "self", ".", "vocab", ")", ")", "\n", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_size", "=", "emb_size", ",", "hidden_size", "=", "hidden_size", ",", "num_layers", "=", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.GRU.forward": [[437, 444], ["train_models.process_lengths", "train_models.GRU.embedding", "train_models.GRU.rnn.flatten_parameters", "train_models.GRU.rnn", "train_models.select_last"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.process_lengths", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.select_last"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "lengths", "=", "process_lengths", "(", "input", ")", "\n", "x", "=", "self", ".", "embedding", "(", "input", ")", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "output", ",", "hn", "=", "self", ".", "rnn", "(", "x", ")", "\n", "output", "=", "select_last", "(", "output", ",", "lengths", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.AllObsPredictAtten.__init__": [[451, 508], ["torch.Module.__init__", "train_models.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "train_models.SwitchModule", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "net_input_sizes.append", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "vocab_weights", ",", "with_pred", "=", "False", ",", "init_fn", "=", "None", ",", "opt", "=", "None", ",", "env_vocab", "=", "None", ",", "vocab_words", "=", "None", ",", "max_bounds", "=", "None", ",", "num_stack", "=", "1", ",", "add_net_pred", "=", "False", ",", "pred_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AllObsPredictAtten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Set state vars", "\n", "self", ".", "hid_sz", "=", "32", "\n", "self", ".", "use_dropout", "=", "False", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "# Make seq2vec model for statement -- might have to change this!", "\n", "seq2vec_opt", "=", "{", "}", "\n", "seq2vec_opt", "[", "'arch'", "]", "=", "'bow'", "\n", "seq2vec_opt", "[", "'dropout'", "]", "=", "False", "\n", "seq2vec_opt", "[", "'emb_size'", "]", "=", "32", "\n", "seq2vec_opt", "[", "'hidden_size'", "]", "=", "32", "\n", "#self.seq2vec = BOW(vocab_words, vocab_weights, 300)", "\n", "self", ".", "seq2vec", "=", "GRU", "(", "vocab_words", ",", "vocab_weights", ",", "embed_dim", ",", "32", ",", "1", ")", "\n", "\n", "#fc layers", "\n", "self", ".", "fc_gridembed", "=", "nn", ".", "Linear", "(", "25", "*", "embed_dim", ",", "32", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "25", "*", "7", ",", "32", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "10", "*", "embed_dim", ",", "32", ")", "# 10 inventory slots", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "32", ")", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "300", ",", "32", ")", "# compress too much??", "\n", "self", ".", "fc_onehot_embed", "=", "nn", ".", "Linear", "(", "7", ",", "32", ")", "\n", "self", ".", "fc_comb", "=", "nn", ".", "Linear", "(", "25", "*", "32", ",", "32", ")", "\n", "self", ".", "fc_inv_first", "=", "nn", ".", "Linear", "(", "300", ",", "32", ")", "\n", "self", ".", "fc_inv_second", "=", "nn", ".", "Linear", "(", "32", "*", "10", ",", "32", ")", "\n", "\n", "# Decide what inputs go in net and key", "\n", "\n", "# key is for attention", "\n", "key_sz", "=", "32", "# 32 for GRU and 300 for BOW", "\n", "self", ".", "key_inputs", "=", "[", "'wids'", "]", "\n", "\n", "# net is for regular input", "\n", "#self.net_inputs = ['grid_embed', 'grid_onehot', 'inv', 'goal']", "\n", "self", ".", "net_inputs", "=", "[", "'grid_comb'", ",", "'inv'", ",", "'goal'", "]", "\n", "net_input_sizes", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_input_sizes", ".", "append", "(", "self", ".", "hid_sz", ")", "\n", "\n", "# Make batch modules", "\n", "", "module_opt", "=", "{", "}", "\n", "module_opt", "[", "'num_modules'", "]", "=", "12", "#16", "\n", "module_opt", "[", "'switch_sz'", "]", "=", "key_sz", "\n", "module_opt", "[", "'hid_sz'", "]", "=", "self", ".", "hid_sz", "\n", "module_opt", "[", "'num_layer'", "]", "=", "2", "\n", "self", ".", "batch_modules", "=", "SwitchModule", "(", "net_input_sizes", ",", "len", "(", "net_input_sizes", ")", ",", "module_opt", ")", "\n", "\n", "# Transfer layers", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "self", ".", "fc_final", "=", "nn", ".", "Linear", "(", "32", ",", "8", ")", "# was 9", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.AllObsPredictAtten.forward": [[510, 571], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_models.AllObsPredictAtten.batch_modules", "train_models.AllObsPredictAtten.fc_final", "train_models.AllObsPredictAtten.fc_embed", "train_models.AllObsPredictAtten.fc_onehot_embed", "train_models.AllObsPredictAtten.fc_comb", "train_models.AllObsPredictAtten.fc_inv_first", "train_models.AllObsPredictAtten.fc_inv_second", "train_models.AllObsPredictAtten.fc_goal", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "train_models.AllObsPredictAtten.drop", "train_models.AllObsPredictAtten.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "statement", ")", ":", "\n", "\n", "#encode environment observation", "\n", "        ", "'''\n        grid_embedding = grid_embedding.view(-1, 25*self.embed_dim)\n        grid_embed = self.tanh(self.fc_gridembed(grid_embedding))\n        grid_onehot = grid_onehot.view(-1, 25*7)\n        grid_1hot_embed = self.tanh(self.fc_onehot(grid_onehot))\n        inventory = inventory.view(-1, 10*self.embed_dim)\n        inv_embed = F.relu(self.fc_inv(inventory))\n        goal_embed = F.relu(self.fc_goal(goal))\n        '''", "\n", "\n", "#combined grid embedding", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot_embed", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", "*", "self", ".", "hid_sz", ")", "\n", "grid_comb", "=", "F", ".", "relu", "(", "self", ".", "fc_comb", "(", "grid_comb", ")", ")", "\n", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv_first", "(", "inventory", ")", ")", "\n", "inventory", "=", "c3", ".", "view", "(", "-", "1", ",", "10", "*", "self", ".", "hid_sz", ")", "\n", "inv_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_inv_second", "(", "inventory", ")", ")", "\n", "goal_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "\n", "# Encode sequence", "\n", "#statement = self.seq2vec(statement) # just BOW", "\n", "#statement = self.seq2vec(statement, lengths) # for GRU/LSTM", "\n", "\n", "# Get key and net inputs", "\n", "key", "=", "[", "]", "\n", "if", "'wids'", "in", "self", ".", "key_inputs", ":", "\n", "            ", "key", ".", "append", "(", "statement", ")", "\n", "", "key", "=", "torch", ".", "cat", "(", "key", ",", "1", ")", "\n", "\n", "net_inputs", "=", "(", ")", "\n", "if", "'grid_comb'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_comb", ",", ")", "\n", "", "if", "'grid_embed'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_embed", ",", ")", "\n", "", "if", "'grid_onehot'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_1hot_embed", ",", ")", "\n", "", "if", "'inv'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "inv_embed", ",", ")", "\n", "", "if", "'goal'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "goal_embed", ",", ")", "\n", "\n", "# Forward through module net", "\n", "", "x", "=", "self", ".", "batch_modules", "(", "(", "net_inputs", ",", "key", ")", ")", "\n", "\n", "# Optionally add dropout", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "#add final layer in", "\n", "#x = self.softmax(self.fc_final(x))", "\n", "#x = F.log_softmax(self.fc_final(x), dim=1) ", "\n", "", "x", "=", "self", ".", "fc_final", "(", "self", ".", "dropout", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.SwitchModule.__init__": [[577, 600], ["torch.Module.__init__", "train_models.ListModule", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "len", "train_models.BatchMLP", "train_models.SwitchModule.batch_modules.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_sz", ",", "num_inputs", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SwitchModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Get parameters", "\n", "self", ".", "input_sz", "=", "input_sz", "\n", "self", ".", "num_inputs", "=", "num_inputs", "\n", "self", ".", "num_modules", "=", "opt", "[", "'num_modules'", "]", "\n", "self", ".", "hid_sz", "=", "opt", "[", "'hid_sz'", "]", "\n", "num_layer", "=", "opt", "[", "'num_layer'", "]", "\n", "assert", "(", "len", "(", "self", ".", "input_sz", ")", "==", "num_inputs", ")", "\n", "assert", "(", "self", ".", "num_modules", "%", "num_inputs", "==", "0", ")", "\n", "\n", "# Make batch modules", "\n", "self", ".", "batch_modules", "=", "[", "]", "\n", "for", "module_in_size", "in", "self", ".", "input_sz", ":", "\n", "            ", "bm_input", "=", "BatchMLP", "(", "module_in_size", ",", "self", ".", "hid_sz", ",", "num_layer", ",", "self", ".", "num_modules", "//", "num_inputs", ")", "\n", "self", ".", "batch_modules", ".", "append", "(", "bm_input", ")", "\n", "", "self", ".", "batch_modules", "=", "ListModule", "(", "*", "self", ".", "batch_modules", ")", "\n", "\n", "# Make soft attention network components (if applicible)", "\n", "self", ".", "switch_sz", "=", "opt", "[", "'switch_sz'", "]", "\n", "self", ".", "att_in", "=", "nn", ".", "Linear", "(", "self", ".", "switch_sz", ",", "self", ".", "num_modules", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.SwitchModule.forward": [[602, 623], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_models.SwitchModule.softmax", "selection.repeat.repeat.unsqueeze", "selection.repeat.repeat.repeat", "module_outs.sum.sum.sum", "len", "net_input.unsqueeze().expand", "all_module_outs.append", "train_models.SwitchModule.att_in", "module_outs.sum.sum.size", "net_input.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "net_inputs", "=", "inputs", "[", "0", "]", "\n", "\n", "# Compute batch module output", "\n", "assert", "(", "len", "(", "net_inputs", ")", "==", "self", ".", "num_inputs", ")", "\n", "all_module_outs", "=", "[", "]", "\n", "for", "i", ",", "net_input", "in", "enumerate", "(", "net_inputs", ")", ":", "\n", "            ", "batch_inputs", "=", "net_input", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "-", "1", ",", "self", ".", "num_modules", "//", "self", ".", "num_inputs", ",", "-", "1", "]", ")", "\n", "module_outs", "=", "self", ".", "batch_modules", "[", "i", "]", "(", "batch_inputs", ")", "# module_outs is bs x nm//ni x out_sz", "\n", "all_module_outs", ".", "append", "(", "module_outs", ")", "\n", "", "module_outs", "=", "torch", ".", "cat", "(", "all_module_outs", ",", "1", ")", "\n", "\n", "# Soft attention on output", "\n", "switch_input", "=", "inputs", "[", "1", "]", "\n", "selection", "=", "self", ".", "softmax", "(", "self", ".", "att_in", "(", "switch_input", ")", ")", "\n", "selection", "=", "selection", ".", "unsqueeze", "(", "2", ")", "\n", "selection", "=", "selection", ".", "repeat", "(", "[", "1", ",", "1", ",", "module_outs", ".", "size", "(", "2", ")", "]", ")", "\n", "module_outs", "*=", "selection", "\n", "module_outs", "=", "module_outs", ".", "sum", "(", "1", ")", "\n", "\n", "return", "module_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.BatchMLP.__init__": [[627, 640], ["torch.Module.__init__", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "train_models.BatchLinear", "range", "train_models.ListModule", "train_models.BatchLinear", "train_models.BatchLinear", "hid_layers.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_sz", ",", "hid_sz", ",", "num_layer", ",", "num_modules", ")", ":", "\n", "        ", "super", "(", "BatchMLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Make network values", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "in_fc", "=", "BatchLinear", "(", "input_sz", ",", "hid_sz", ",", "num_modules", ")", "\n", "assert", "(", "num_layer", ">=", "2", ")", "# If num_layer is 2, actually no hidden layers technically", "\n", "hid_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_layer", "-", "2", ")", ":", "\n", "            ", "hid_fc", "=", "BatchLinear", "(", "hid_sz", ",", "hid_sz", ",", "num_modules", ")", "\n", "hid_layers", ".", "append", "(", "hid_fc", ")", "\n", "", "self", ".", "hid_layers", "=", "ListModule", "(", "*", "hid_layers", ")", "\n", "self", ".", "out_fc", "=", "BatchLinear", "(", "hid_sz", ",", "hid_sz", ",", "num_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.BatchMLP.forward": [[643, 651], ["train_models.BatchMLP.in_fc", "train_models.BatchMLP.tanh", "train_models.BatchMLP.out_fc", "hid_fc", "train_models.BatchMLP.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "in_fc", "(", "input", ")", "\n", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "for", "hid_fc", "in", "self", ".", "hid_layers", ":", "\n", "            ", "x", "=", "hid_fc", "(", "x", ")", "\n", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "", "x", "=", "self", ".", "out_fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.ListModule.__init__": [[654, 660], ["torch.Module.__init__", "train_models.ListModule.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "ListModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "idx", "=", "0", "\n", "for", "module", "in", "args", ":", "\n", "            ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.ListModule.__getitem__": [[661, 668], ["iter", "range", "next", "IndexError", "train_models.ListModule._modules.values", "next", "len"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "<", "0", "or", "idx", ">=", "len", "(", "self", ".", "_modules", ")", ":", "\n", "            ", "raise", "IndexError", "(", "'index {} is out of range'", ".", "format", "(", "idx", ")", ")", "\n", "", "it", "=", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "idx", ")", ":", "\n", "            ", "next", "(", "it", ")", "\n", "", "return", "next", "(", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.ListModule.__iter__": [[669, 671], ["iter", "train_models.ListModule._modules.values"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.ListModule.__len__": [[672, 674], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.BatchLinear.__init__": [[679, 690], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "train_models.BatchLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "train_models.BatchLinear.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.BatchLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "num_modules", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "BatchLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "num_modules", "=", "num_modules", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_modules", ",", "out_features", ",", "in_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_modules", ",", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.BatchLinear.reset_parameters": [[691, 696], ["train_models.BatchLinear.weight.data.uniform_", "math.sqrt", "train_models.BatchLinear.bias.data.uniform_", "train_models.BatchLinear.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.BatchLinear.forward": [[699, 719], ["input.transpose().transpose.transpose().transpose.size", "input.transpose().transpose.transpose().transpose.size", "input.transpose().transpose.transpose().transpose.transpose().transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.transpose().transpose.transpose().transpose.transpose().transpose", "input.transpose().transpose.transpose().transpose.size", "train_models.BatchLinear.bias.unsqueeze().expand().contiguous", "input.transpose().transpose.transpose().transpose.transpose", "output.transpose().transpose.transpose().transpose.transpose", "train_models.BatchLinear.bias.unsqueeze().expand", "train_models.BatchLinear.bias.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Get sizes", "\n", "        ", "bs", "=", "input", ".", "size", "(", "0", ")", "\n", "nm", "=", "input", ".", "size", "(", "1", ")", "\n", "assert", "(", "input", ".", "size", "(", "2", ")", "==", "self", ".", "in_features", ")", "\n", "\n", "# Transpose input to correct shape", "\n", "input", "=", "input", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# nm x in_sz x bs", "\n", "\n", "# Compute matrix multiply", "\n", "output", "=", "torch", ".", "bmm", "(", "self", ".", "weight", ",", "input", ")", "\n", "\n", "# Add bias", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output", "+=", "self", ".", "bias", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "[", "-", "1", ",", "-", "1", ",", "bs", "]", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Transpose back to bs x nm x out_sz", "\n", "", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.BatchLinear.extra_repr": [[720, 723], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.Attention.__init__": [[730, 742], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", ":", "\n", "        ", "\"\"\"\n        :param encoder_dim: feature size of encoded images\n        :param decoder_dim: size of decoder's RNN\n        :param attention_dim: size of the attention network\n        \"\"\"", "\n", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder_att", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "attention_dim", ")", "# linear layer to transform encoded image", "\n", "self", ".", "decoder_att", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "attention_dim", ")", "# linear layer to transform decoder's output", "\n", "self", ".", "full_att", "=", "nn", ".", "Linear", "(", "attention_dim", ",", "1", ")", "# linear layer to calculate values to be softmax-ed", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "# softmax layer to calculate weights", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.Attention.forward": [[743, 756], ["train_models.Attention.encoder_att", "train_models.Attention.decoder_att", "train_models.Attention.full_att().squeeze", "train_models.Attention.softmax", "train_models.Attention.full_att", "train_models.Attention.relu", "train_models.Attention.unsqueeze", "train_models.Attention.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoder_out", ",", "decoder_hidden", ")", ":", "\n", "        ", "\"\"\"\n        Forward propagation.\n        :param encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim)\n        :param decoder_hidden: previous decoder output, a tensor of dimension (batch_size, decoder_dim)\n        :return: attention weighted encoding, weights\n        \"\"\"", "\n", "att1", "=", "self", ".", "encoder_att", "(", "encoder_out", ")", "# (batch_size, num_pixels, attention_dim)", "\n", "att2", "=", "self", ".", "decoder_att", "(", "decoder_hidden", ")", "# (batch_size, attention_dim)", "\n", "att", "=", "self", ".", "full_att", "(", "self", ".", "relu", "(", "att1", "+", "att2", ".", "unsqueeze", "(", "1", ")", ")", ")", ".", "squeeze", "(", "2", ")", "# (batch_size, num_pixels)", "\n", "alpha", "=", "self", ".", "softmax", "(", "att", ")", "# (batch_size, num_pixels)", "\n", "attention_weighted_encoding", "=", "(", "encoder_out", "*", "alpha", ".", "unsqueeze", "(", "2", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "# (batch_size, encoder_dim)", "\n", "return", "attention_weighted_encoding", ",", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttentionGLOVE.__init__": [[759, 793], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "train_models.Attention", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "train_models.LanguageWithAttentionGLOVE.embedding.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "LanguageWithAttentionGLOVE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder_dim", "=", "128", "\n", "self", ".", "encoder_dim", "=", "encoder_dim", "\n", "attention_dim", "=", "encoder_dim", "\n", "embed_dim", "=", "embedding_dim", "\n", "decoder_dim", "=", "32", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "encoder_dim", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n", "self", ".", "attention", "=", "Attention", "(", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", "# attention network", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", "+", "1", ",", "embed_dim", ",", "padding_idx", "=", "vocab_size", ")", "# embedding layer", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decode_step", "=", "nn", ".", "LSTMCell", "(", "embed_dim", "+", "encoder_dim", ",", "decoder_dim", ",", "bias", "=", "True", ")", "# decoding LSTMCell", "\n", "self", ".", "init_h", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial hidden state of LSTMCell", "\n", "self", ".", "init_c", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial cell state of LSTMCell", "\n", "self", ".", "f_beta", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "encoder_dim", ")", "# linear layer to create a sigmoid-activated gate", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "embed_dim", ")", "# linear layer to find scores over vocabulary", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttentionGLOVE.init_hidden_state": [[794, 804], ["encoder_out.mean", "train_models.LanguageWithAttentionGLOVE.init_h", "train_models.LanguageWithAttentionGLOVE.init_c"], "methods", ["None"], ["", "def", "init_hidden_state", "(", "self", ",", "encoder_out", ")", ":", "\n", "        ", "\"\"\"\n        Creates the initial hidden and cell states for the decoder's LSTM based on the encoded images.\n        :param encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim)\n        :return: hidden state, cell state\n        \"\"\"", "\n", "mean_encoder_out", "=", "encoder_out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "init_h", "(", "mean_encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "c", "=", "self", ".", "init_c", "(", "mean_encoder_out", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttentionGLOVE.forward": [[805, 859], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "train_models.LanguageWithAttentionGLOVE.embedding", "train_models.LanguageWithAttentionGLOVE.clone", "train_models.LanguageWithAttentionGLOVE.init_hidden_state", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "h.clone", "range", "train_models.LanguageWithAttentionGLOVE.fc_embed", "train_models.LanguageWithAttentionGLOVE.fc_onehot", "train_models.LanguageWithAttentionGLOVE.fc_inv", "train_models.LanguageWithAttentionGLOVE.fc_goal", "max", "sum", "train_models.LanguageWithAttentionGLOVE.attention", "train_models.LanguageWithAttentionGLOVE.sigmoid", "train_models.LanguageWithAttentionGLOVE.decode_step", "h.clone", "train_models.LanguageWithAttentionGLOVE.fc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "train_models.LanguageWithAttentionGLOVE.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_models.LanguageWithAttentionGLOVE.dropout", "max", "max"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "encoded_captions", ",", "caption_lengths", ",", "device", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\n", "#encode features", "\n", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "unsqueeze", "(", "1", ")", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "# DECODER", "\n", "batch_size", "=", "encoder_out", ".", "size", "(", "0", ")", "\n", "vocab_size", "=", "self", ".", "vocab_size", "\n", "\n", "num_pixels", "=", "encoder_out", ".", "size", "(", "1", ")", "\n", "\n", "# Embedding", "\n", "embeddings", "=", "self", ".", "embedding", "(", "encoded_captions", ")", "# (batch_size, max_caption_length, embed_dim)", "\n", "embeddings_copy", "=", "embeddings", ".", "clone", "(", ")", "\n", "\n", "# Initialize LSTM state", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "\n", "# We won't decode at the <end> position, since we've finished generating as soon as we generate <end>", "\n", "# So, decoding lengths are actual lengths - 1", "\n", "decode_lengths", "=", "[", "caption_length", "-", "1", "for", "caption_length", "in", "caption_lengths", "]", "\n", "#decode_lengths = (caption_lengths - 1).tolist()", "\n", "\n", "# Create tensors to hold word predicion scores and alphas", "\n", "predictions", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max", "(", "decode_lengths", ")", ",", "self", ".", "embedding_dim", ")", ".", "to", "(", "device", ")", "\n", "alphas", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max", "(", "decode_lengths", ")", ",", "num_pixels", ")", ".", "to", "(", "device", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# At each time-step, decode by", "\n", "# attention-weighing the encoder's output based on the decoder's previous hidden state output", "\n", "# then generate a new word in the decoder with the previous word and the attention weighted encoding", "\n", "for", "t", "in", "range", "(", "max", "(", "decode_lengths", ")", ")", ":", "\n", "            ", "batch_size_t", "=", "sum", "(", "[", "l", ">", "t", "for", "l", "in", "decode_lengths", "]", ")", "\n", "attention_weighted_encoding", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", "[", ":", "batch_size_t", "]", ",", "\n", "h", "[", ":", "batch_size_t", "]", ")", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", "[", ":", "batch_size_t", "]", ")", ")", "# gating scalar, (batch_size_t, encoder_dim)", "\n", "attention_weighted_encoding", "=", "gate", "*", "attention_weighted_encoding", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "\n", "torch", ".", "cat", "(", "[", "embeddings", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", ",", "attention_weighted_encoding", "]", ",", "dim", "=", "1", ")", ",", "\n", "(", "h", "[", ":", "batch_size_t", "]", ",", "c", "[", ":", "batch_size_t", "]", ")", ")", "# (batch_size_t, decoder_dim)", "\n", "hiddens", "[", ":", "batch_size_t", "]", "=", "h", ".", "clone", "(", ")", "## ADDED!", "\n", "preds", "=", "self", ".", "fc", "(", "self", ".", "dropout", "(", "h", ")", ")", "# (batch_size_t, vocab_size)", "\n", "predictions", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", "=", "preds", "\n", "alphas", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", "=", "alpha", "\n", "\n", "", "return", "predictions", ",", "encoded_captions", ",", "decode_lengths", ",", "alphas", ",", "hiddens", ",", "embeddings_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttentionGLOVE.get_hidden_state_new": [[860, 956], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "train_models.LanguageWithAttentionGLOVE.init_hidden_state", "h.clone", "train_models.LanguageWithAttentionGLOVE.fc_embed", "train_models.LanguageWithAttentionGLOVE.fc_onehot", "train_models.LanguageWithAttentionGLOVE.fc_inv", "train_models.LanguageWithAttentionGLOVE.fc_goal", "train_models.LanguageWithAttentionGLOVE.embedding().squeeze", "train_models.LanguageWithAttentionGLOVE.attention", "train_models.LanguageWithAttentionGLOVE.sigmoid", "train_models.LanguageWithAttentionGLOVE.decode_step", "h.clone", "train_models.LanguageWithAttentionGLOVE.fc", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "train_models.LanguageWithAttentionGLOVE.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_models.LanguageWithAttentionGLOVE.size", "range", "torch.LongTensor().to.size", "torch.LongTensor().to.size", "torch.LongTensor().to.size", "torch.LongTensor().to.size", "len", "complete_seqs[].append", "len", "train_models.LanguageWithAttentionGLOVE.embedding", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "glove_tensor.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.LongTensor().to.size", "torch.LongTensor().to.size", "torch.LongTensor().to.size", "torch.LongTensor().to.size", "temp.append", "torch.LongTensor().to.data.tolist", "torch.LongTensor().to.data.tolist", "torch.LongTensor().to.data.tolist", "torch.LongTensor().to.data.tolist"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to"], ["", "def", "get_hidden_state_new", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "word_map", ",", "glove_tensor", ",", "states", "=", "None", ")", ":", "\n", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "10", ",", "self", ".", "encoder_dim", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "k", "=", "encoder_out", ".", "size", "(", "0", ")", "#batch size", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "torch", ".", "LongTensor", "(", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "]", "*", "k", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "torch", ".", "zeros", "(", "k", ",", "1", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "incomplete_inds", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "# used to keep track of original index in complete_seqs", "\n", "\n", "#complete_seqs_scores = list()", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "awe", "=", "gate", "*", "awe", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "hiddens", "[", "incomplete_inds", "]", "=", "h", ".", "clone", "(", ")", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "#scores = F.log_softmax(scores, dim=1)", "\n", "#values, indices = scores.max(dim=1) ", "\n", "\n", "indices", "=", "torch", ".", "LongTensor", "(", "[", "[", "0", "]", "]", "*", "k", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Find nearest Glove neighbor:", "\n", "for", "i", "in", "range", "(", "scores", ".", "size", "(", "0", ")", ")", ":", "\n", "\n", "                ", "min_key", "=", "None", "\n", "min_dist", "=", "None", "\n", "for", "y", "in", "range", "(", "glove_tensor", ".", "size", "(", "0", ")", ")", ":", "\n", "                    ", "dist", "=", "torch", ".", "norm", "(", "glove_tensor", "[", "y", "]", "-", "scores", "[", "i", "]", ",", "2", ")", "\n", "if", "min_key", "==", "None", ":", "\n", "                        ", "min_key", "=", "y", "\n", "min_dist", "=", "dist", "\n", "", "elif", "dist", "<", "min_dist", ":", "\n", "                        ", "min_key", "=", "y", "\n", "min_dist", "=", "dist", "\n", "\n", "", "", "indices", "[", "i", "]", "=", "min_key", "\n", "#print(word_map.idx2word[min_key])", "\n", "\n", "# End finding glove neighbor", "\n", "\n", "", "assert", "(", "indices", ".", "size", "(", "0", ")", "==", "len", "(", "incomplete_inds", ")", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "complete_seqs", "[", "incomplete_inds", "[", "i", "]", "]", ".", "append", "(", "indices", ".", "data", ".", "tolist", "(", ")", "[", "i", "]", "[", "0", "]", ")", "\n", "if", "indices", "[", "i", "]", "==", "word_map", ".", "word2idx", "[", "'<end>'", "]", ":", "\n", "                    ", "del", "incomplete_inds", "[", "i", "]", "\n", "#incomplete_inds.remove(i)", "\n", "", "else", ":", "\n", "#not finished", "\n", "                    ", "temp", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "incomplete_inds", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "#subset the ones that aren't finished.", "\n", "", "h", "=", "h", "[", "temp", "]", "\n", "c", "=", "c", "[", "temp", "]", "\n", "encoder_out", "=", "encoder_out", "[", "temp", "]", "\n", "k_prev_words", "=", "indices", "[", "temp", "]", "#.unsqueeze(1)", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "20", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "return", "complete_seqs", ",", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention.__init__": [[960, 1017], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "train_models.Attention", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "train_models.LanguageWithAttention.embedding.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "LanguageWithAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder_dim", "=", "128", "\n", "self", ".", "encoder_dim", "=", "encoder_dim", "\n", "attention_dim", "=", "encoder_dim", "\n", "embed_dim", "=", "embedding_dim", "\n", "decoder_dim", "=", "32", "\n", "\n", "#self.embed = nn.Embedding(vocab_size, embedding_dim) # vocab size, 300", "\n", "\n", "#if training:", "\n", "#    self.embed.load_state_dict({'weight': embed_weights})", "\n", "#    self.embed.weight.requires_grad = False", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "encoder_dim", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "#self.fc_cat = nn.Linear(25*15+25*15+10*15+15, encoder_dim)", "\n", "\n", "'''\n        self.fc1 = nn.Linear(embedding_dim, 150)\n        self.fc2 = nn.Linear(7, 20)\n        self.fc3 = nn.Linear(170, 90)\n        self.fc4 = nn.Linear(embedding_dim, 150) \n        self.fc5 = nn.Linear(2250+150, 512)\n        self.fc_inv = nn.Linear(embedding_dim, 50) \n        self.fc55 = nn.Linear(512+50, embedding_dim)\n        '''", "\n", "\n", "#self.encoding = nn.LSTM(embedding_dim, 32, num_layers=1)", "\n", "#self.linear = nn.Linear(32, vocab_size)", "\n", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n", "# new stuff...", "\n", "self", ".", "attention", "=", "Attention", "(", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", "# attention network", "\n", "#self.attention = AttentionSmall(encoder_dim, decoder_dim)", "\n", "#self.embedding = nn.Embedding(vocab_size, embed_dim)  # embedding layer", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", "+", "1", ",", "embed_dim", ",", "vocab_size", ")", "# embedding layer", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decode_step", "=", "nn", ".", "LSTMCell", "(", "embed_dim", "+", "encoder_dim", ",", "decoder_dim", ",", "bias", "=", "True", ")", "# decoding LSTMCell", "\n", "self", ".", "init_h", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial hidden state of LSTMCell", "\n", "self", ".", "init_c", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial cell state of LSTMCell", "\n", "self", ".", "f_beta", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "encoder_dim", ")", "# linear layer to create a sigmoid-activated gate", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "vocab_size", ")", "# linear layer to find scores over vocabulary", "\n", "#self.init_weights()", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention.init_weights": [[1019, 1026], ["train_models.LanguageWithAttention.embedding.weight.data.uniform_", "train_models.LanguageWithAttention.fc.bias.data.fill_", "train_models.LanguageWithAttention.fc.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializes some parameters with values from the uniform distribution, for easier convergence.\n        \"\"\"", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention.init_hidden_state": [[1027, 1037], ["encoder_out.mean", "train_models.LanguageWithAttention.init_h", "train_models.LanguageWithAttention.init_c"], "methods", ["None"], ["", "def", "init_hidden_state", "(", "self", ",", "encoder_out", ")", ":", "\n", "        ", "\"\"\"\n        Creates the initial hidden and cell states for the decoder's LSTM based on the encoded images.\n        :param encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim)\n        :return: hidden state, cell state\n        \"\"\"", "\n", "mean_encoder_out", "=", "encoder_out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "init_h", "(", "mean_encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "c", "=", "self", ".", "init_c", "(", "mean_encoder_out", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention.forward": [[1038, 1146], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "train_models.LanguageWithAttention.embedding", "train_models.LanguageWithAttention.init_hidden_state", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "h.clone", "range", "train_models.LanguageWithAttention.fc_embed", "train_models.LanguageWithAttention.fc_onehot", "train_models.LanguageWithAttention.fc_inv", "train_models.LanguageWithAttention.fc_goal", "max", "sum", "train_models.LanguageWithAttention.attention", "train_models.LanguageWithAttention.sigmoid", "train_models.LanguageWithAttention.decode_step", "h.clone", "train_models.LanguageWithAttention.fc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "train_models.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_models.LanguageWithAttention.dropout", "max", "max"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "encoded_captions", ",", "caption_lengths", ",", "device", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\n", "#encode features", "\n", "        ", "'''\n        c1 = F.relu(self.fc1(grid_embedding))\n        c2 = F.relu(self.fc2(grid_onehot))\n        c1 = c1.view(-1, 25,150)\n        c2 = c2.view(-1, 25,20)\n        combined_grids = torch.cat((c1, c2), dim=2)\n        c3 = F.relu(self.fc3(combined_grids)) \n        c3 = c3.view(-1, 25*90)\n        c4 = F.relu(self.fc4(goal))\n        combined_grid_goal = torch.cat((c3, c4), dim=1)\n        c6 = F.relu(self.fc5(combined_grid_goal))\n        temp_inv = F.relu(self.fc_inv(inventory))\n        combined_inventory = torch.cat((c6, temp_inv), dim=1)\n        encoder_out = F.relu(self.fc55(combined_inventory))\n        '''", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "unsqueeze", "(", "1", ")", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "# DECODER", "\n", "batch_size", "=", "encoder_out", ".", "size", "(", "0", ")", "\n", "vocab_size", "=", "self", ".", "vocab_size", "\n", "\n", "num_pixels", "=", "encoder_out", ".", "size", "(", "1", ")", "\n", "\n", "# Embedding", "\n", "embeddings", "=", "self", ".", "embedding", "(", "encoded_captions", ")", "# (batch_size, max_caption_length, embed_dim)", "\n", "\n", "# Initialize LSTM state", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "\n", "# We won't decode at the <end> position, since we've finished generating as soon as we generate <end>", "\n", "# So, decoding lengths are actual lengths - 1", "\n", "decode_lengths", "=", "[", "caption_length", "-", "1", "for", "caption_length", "in", "caption_lengths", "]", "\n", "#decode_lengths = (caption_lengths - 1).tolist()", "\n", "\n", "# Create tensors to hold word predicion scores and alphas", "\n", "predictions", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max", "(", "decode_lengths", ")", ",", "vocab_size", ")", ".", "to", "(", "device", ")", "\n", "alphas", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max", "(", "decode_lengths", ")", ",", "num_pixels", ")", ".", "to", "(", "device", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# At each time-step, decode by", "\n", "# attention-weighing the encoder's output based on the decoder's previous hidden state output", "\n", "# then generate a new word in the decoder with the previous word and the attention weighted encoding", "\n", "for", "t", "in", "range", "(", "max", "(", "decode_lengths", ")", ")", ":", "\n", "            ", "batch_size_t", "=", "sum", "(", "[", "l", ">", "t", "for", "l", "in", "decode_lengths", "]", ")", "\n", "attention_weighted_encoding", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", "[", ":", "batch_size_t", "]", ",", "\n", "h", "[", ":", "batch_size_t", "]", ")", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", "[", ":", "batch_size_t", "]", ")", ")", "# gating scalar, (batch_size_t, encoder_dim)", "\n", "attention_weighted_encoding", "=", "gate", "*", "attention_weighted_encoding", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "\n", "torch", ".", "cat", "(", "[", "embeddings", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", ",", "attention_weighted_encoding", "]", ",", "dim", "=", "1", ")", ",", "\n", "(", "h", "[", ":", "batch_size_t", "]", ",", "c", "[", ":", "batch_size_t", "]", ")", ")", "# (batch_size_t, decoder_dim)", "\n", "hiddens", "[", ":", "batch_size_t", "]", "=", "h", ".", "clone", "(", ")", "## ADDED!", "\n", "preds", "=", "self", ".", "fc", "(", "self", ".", "dropout", "(", "h", ")", ")", "# (batch_size_t, vocab_size)", "\n", "predictions", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", "=", "preds", "\n", "alphas", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", "=", "alpha", "\n", "\n", "", "return", "predictions", ",", "encoded_captions", ",", "decode_lengths", ",", "alphas", ",", "hiddens", "\n", "\n", "'''\n        #decoder...\n        batch_size = encoder_out.size(0)\n        vocab_size = self.vocab_size\n\n        # Embedding\n        embeddings = self.embedding(encoded_captions)  # (batch_size, max_caption_length, embed_dim)\n\n        # Initialize LSTM state\n        h, c = self.init_hidden_state(encoder_out)  # (batch_size, decoder_dim)\n\n        # We won't decode at the <end> position, since we've finished generating as soon as we generate <end>\n        # So, decoding lengths are actual lengths - 1\n        decode_lengths = [caption_length-1 for caption_length in caption_lengths]\n        #decode_lengths = (caption_lengths - 1).tolist()\n\n        # Create tensors to hold word predicion scores and alphas\n        predictions = torch.zeros(batch_size, max(decode_lengths), vocab_size).to(device)\n        alphas = torch.zeros(batch_size, max(decode_lengths), self.encoder_dim).to(device)\n\n        # At each time-step, decode by\n        # attention-weighing the encoder's output based on the decoder's previous hidden state output\n        # then generate a new word in the decoder with the previous word and the attention weighted encoding\n        for t in range(max(decode_lengths)):\n            batch_size_t = sum([l > t for l in decode_lengths])\n            attention_weighted_encoding, alpha = self.attention(encoder_out[:batch_size_t],\n                                                                h[:batch_size_t])\n            gate = self.sigmoid(self.f_beta(h[:batch_size_t]))  # gating scalar, (batch_size_t, encoder_dim)\n            attention_weighted_encoding = gate * attention_weighted_encoding\n            h, c = self.decode_step(\n                torch.cat([embeddings[:batch_size_t, t, :], attention_weighted_encoding], dim=1),\n                (h[:batch_size_t], c[:batch_size_t]))  # (batch_size_t, decoder_dim)\n            preds = self.fc(h)\n            #preds = self.fc(self.dropout(h))  # (batch_size_t, vocab_size)\n            predictions[:batch_size_t, t, :] = preds\n            alphas[:batch_size_t, t, :] = alpha\n\n        return predictions, encoded_captions, decode_lengths, alphas\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention.sample": [[1148, 1269], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "encoder_out.expand.expand.size", "encoder_out.expand.expand.expand", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "list", "list", "train_models.LanguageWithAttention.init_hidden_state", "list.index", "train_models.LanguageWithAttention.fc_embed", "train_models.LanguageWithAttention.fc_onehot", "train_models.LanguageWithAttention.fc_inv", "train_models.LanguageWithAttention.fc_goal", "train_models.LanguageWithAttention.embedding().squeeze", "train_models.LanguageWithAttention.attention", "train_models.LanguageWithAttention.sigmoid", "train_models.LanguageWithAttention.decode_step", "train_models.LanguageWithAttention.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "top_k_scores[].unsqueeze", "next_word_inds[].unsqueeze", "max", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "train_models.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "top_k_scores[].unsqueeze.expand_as", "scores[].topk", "torch.log_softmax.view().topk", "len", "list.extend", "list.extend", "train_models.LanguageWithAttention.embedding", "next_word_inds.unsqueeze", "enumerate", "set", "set", "seqs[].tolist", "torch.log_softmax.view", "range", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.index"], ["", "def", "sample", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate captions for given image features using greedy search.\"\"\"", "\n", "\n", "#encode features", "\n", "'''\n        c1 = F.relu(self.fc1(grid_embedding))\n        c2 = F.relu(self.fc2(grid_onehot))\n        c1 = c1.view(-1, 25,150)\n        c2 = c2.view(-1, 25,20)\n        combined_grids = torch.cat((c1, c2), dim=2)\n        c3 = F.relu(self.fc3(combined_grids)) \n        c3 = c3.view(-1, 25*90)\n        c4 = F.relu(self.fc4(goal))\n        combined_grid_goal = torch.cat((c3, c4), dim=1)\n        c6 = F.relu(self.fc5(combined_grid_goal))\n        temp_inv = F.relu(self.fc_inv(inventory))\n        temp_inv = temp_inv.view(-1, 50)\n        combined_inventory = torch.cat((c6, temp_inv), dim=1)\n        encoder_out = F.relu(self.fc55(combined_inventory))\n        '''", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "num_pixels", "=", "encoder_out", ".", "size", "(", "1", ")", "\n", "k", "=", "5", "\n", "\n", "# We'll treat the problem as having a batch size of k", "\n", "encoder_out", "=", "encoder_out", ".", "expand", "(", "k", ",", "num_pixels", ",", "self", ".", "encoder_dim", ")", "# (k, num_pixels, encoder_dim)", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "torch", ".", "LongTensor", "(", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "]", "*", "k", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "torch", ".", "zeros", "(", "k", ",", "1", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "list", "(", ")", "\n", "complete_seqs_scores", "=", "list", "(", ")", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "\n", "awe", "=", "gate", "*", "awe", "\n", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "# Add", "\n", "scores", "=", "top_k_scores", ".", "expand_as", "(", "scores", ")", "+", "scores", "# (s, vocab_size)", "\n", "\n", "# For the first step, all k points will have the same scores (since same k previous words, h, c)", "\n", "if", "step", "==", "1", ":", "\n", "                ", "top_k_scores", ",", "top_k_words", "=", "scores", "[", "0", "]", ".", "topk", "(", "k", ",", "0", ",", "True", ",", "True", ")", "# (s)", "\n", "", "else", ":", "\n", "# Unroll and find top scores, and their unrolled indices", "\n", "                ", "top_k_scores", ",", "top_k_words", "=", "scores", ".", "view", "(", "-", "1", ")", ".", "topk", "(", "k", ",", "0", ",", "True", ",", "True", ")", "# (s)", "\n", "\n", "# Convert unrolled indices to actual indices of scores", "\n", "", "prev_word_inds", "=", "top_k_words", "/", "self", ".", "vocab_size", "# (s)", "\n", "next_word_inds", "=", "top_k_words", "%", "self", ".", "vocab_size", "# (s)", "\n", "\n", "# Add new words to sequences, alphas", "\n", "seqs", "=", "torch", ".", "cat", "(", "[", "seqs", "[", "prev_word_inds", "]", ",", "next_word_inds", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "# (s, step+1)", "\n", "\n", "# Which sequences are incomplete (didn't reach <end>)?", "\n", "incomplete_inds", "=", "[", "ind", "for", "ind", ",", "next_word", "in", "enumerate", "(", "next_word_inds", ")", "if", "\n", "next_word", "!=", "word_map", ".", "word2idx", "[", "'<end>'", "]", "]", "\n", "complete_inds", "=", "list", "(", "set", "(", "range", "(", "len", "(", "next_word_inds", ")", ")", ")", "-", "set", "(", "incomplete_inds", ")", ")", "\n", "\n", "# Set aside complete sequences", "\n", "if", "len", "(", "complete_inds", ")", ">", "0", ":", "\n", "                ", "complete_seqs", ".", "extend", "(", "seqs", "[", "complete_inds", "]", ".", "tolist", "(", ")", ")", "\n", "#complete_seqs_alpha.extend(seqs_alpha[complete_inds].tolist())", "\n", "complete_seqs_scores", ".", "extend", "(", "top_k_scores", "[", "complete_inds", "]", ")", "\n", "", "k", "-=", "len", "(", "complete_inds", ")", "# reduce beam length accordingly", "\n", "\n", "#print(len(incomplete_inds), len(complete_inds))", "\n", "\n", "# Proceed with incomplete sequences", "\n", "if", "k", "==", "0", ":", "\n", "                ", "break", "\n", "", "seqs", "=", "seqs", "[", "incomplete_inds", "]", "\n", "h", "=", "h", "[", "prev_word_inds", "[", "incomplete_inds", "]", "]", "\n", "c", "=", "c", "[", "prev_word_inds", "[", "incomplete_inds", "]", "]", "\n", "encoder_out", "=", "encoder_out", "[", "prev_word_inds", "[", "incomplete_inds", "]", "]", "\n", "top_k_scores", "=", "top_k_scores", "[", "incomplete_inds", "]", ".", "unsqueeze", "(", "1", ")", "\n", "k_prev_words", "=", "next_word_inds", "[", "incomplete_inds", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "50", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "i", "=", "complete_seqs_scores", ".", "index", "(", "max", "(", "complete_seqs_scores", ")", ")", "\n", "seq", "=", "complete_seqs", "[", "i", "]", "\n", "#print(seq)", "\n", "#return seq", "\n", "return", "complete_seqs", "\n", "#return complete_seqs, complete_seqs_scores", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention.sample_new": [[1272, 1400], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "encoder_out.expand.expand.size", "encoder_out.expand.expand.expand", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "list", "list", "train_models.LanguageWithAttention.init_hidden_state", "list.index", "train_models.LanguageWithAttention.fc_embed", "train_models.LanguageWithAttention.fc_onehot", "train_models.LanguageWithAttention.fc_inv", "train_models.LanguageWithAttention.fc_goal", "train_models.LanguageWithAttention.embedding().squeeze", "train_models.LanguageWithAttention.attention", "train_models.LanguageWithAttention.sigmoid", "train_models.LanguageWithAttention.decode_step", "train_models.LanguageWithAttention.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "top_k_scores[].unsqueeze", "next_word_inds[].unsqueeze", "max", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "train_models.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "top_k_scores[].unsqueeze.expand_as", "scores[].topk", "torch.log_softmax.view().topk", "len", "list.extend", "list.extend", "train_models.LanguageWithAttention.embedding", "next_word_inds.unsqueeze", "enumerate", "set", "set", "seqs[].tolist", "torch.log_softmax.view", "range", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-datacollection.app_nodb.index"], ["", "def", "sample_new", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate captions for given image features using greedy search.\"\"\"", "\n", "\n", "#encode features", "\n", "'''\n        c1 = F.relu(self.fc1(grid_embedding))\n        c2 = F.relu(self.fc2(grid_onehot))\n        c1 = c1.view(-1, 25,150)\n        c2 = c2.view(-1, 25,20)\n        combined_grids = torch.cat((c1, c2), dim=2)\n        c3 = F.relu(self.fc3(combined_grids)) \n        c3 = c3.view(-1, 25*90)\n        c4 = F.relu(self.fc4(goal))\n        combined_grid_goal = torch.cat((c3, c4), dim=1)\n        c6 = F.relu(self.fc5(combined_grid_goal))\n        temp_inv = F.relu(self.fc_inv(inventory))\n        temp_inv = temp_inv.view(-1, 50)\n        combined_inventory = torch.cat((c6, temp_inv), dim=1)\n        encoder_out = F.relu(self.fc55(combined_inventory))\n        '''", "\n", "#encode features", "\n", "# c1 = F.relu(self.fc_embed(grid_embedding))", "\n", "# c2 = F.relu(self.fc_onehot(grid_onehot))", "\n", "# grid_comb = c1 + c2 ", "\n", "# grid_comb = grid_comb.view(-1,25,self.encoder_dim)", "\n", "# c3 = F.relu(self.fc_inv(inventory)) # maybe change inventory back to sum later..", "\n", "# c3 = c3.view(-1, 10, self.encoder_dim)", "\n", "# c4 = F.relu(self.fc_goal(goal))", "\n", "# c4 = c4.view(-1, 1, self.encoder_dim)", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "unsqueeze", "(", "1", ")", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "num_pixels", "=", "encoder_out", ".", "size", "(", "1", ")", "\n", "k", "=", "5", "\n", "\n", "# We'll treat the problem as having a batch size of k", "\n", "encoder_out", "=", "encoder_out", ".", "expand", "(", "k", ",", "num_pixels", ",", "self", ".", "encoder_dim", ")", "# (k, num_pixels, encoder_dim)", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "torch", ".", "LongTensor", "(", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "]", "*", "k", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "torch", ".", "zeros", "(", "k", ",", "1", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "list", "(", ")", "\n", "complete_seqs_scores", "=", "list", "(", ")", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "\n", "awe", "=", "gate", "*", "awe", "\n", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "# Add", "\n", "scores", "=", "top_k_scores", ".", "expand_as", "(", "scores", ")", "+", "scores", "# (s, vocab_size)", "\n", "\n", "# For the first step, all k points will have the same scores (since same k previous words, h, c)", "\n", "if", "step", "==", "1", ":", "\n", "                ", "top_k_scores", ",", "top_k_words", "=", "scores", "[", "0", "]", ".", "topk", "(", "k", ",", "0", ",", "True", ",", "True", ")", "# (s)", "\n", "", "else", ":", "\n", "# Unroll and find top scores, and their unrolled indices", "\n", "                ", "top_k_scores", ",", "top_k_words", "=", "scores", ".", "view", "(", "-", "1", ")", ".", "topk", "(", "k", ",", "0", ",", "True", ",", "True", ")", "# (s)", "\n", "\n", "# Convert unrolled indices to actual indices of scores", "\n", "", "prev_word_inds", "=", "top_k_words", "/", "self", ".", "vocab_size", "# (s)", "\n", "next_word_inds", "=", "top_k_words", "%", "self", ".", "vocab_size", "# (s)", "\n", "\n", "# Add new words to sequences, alphas", "\n", "seqs", "=", "torch", ".", "cat", "(", "[", "seqs", "[", "prev_word_inds", "]", ",", "next_word_inds", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "# (s, step+1)", "\n", "\n", "# Which sequences are incomplete (didn't reach <end>)?", "\n", "incomplete_inds", "=", "[", "ind", "for", "ind", ",", "next_word", "in", "enumerate", "(", "next_word_inds", ")", "if", "\n", "next_word", "!=", "word_map", ".", "word2idx", "[", "'<end>'", "]", "]", "\n", "complete_inds", "=", "list", "(", "set", "(", "range", "(", "len", "(", "next_word_inds", ")", ")", ")", "-", "set", "(", "incomplete_inds", ")", ")", "\n", "\n", "# Set aside complete sequences", "\n", "if", "len", "(", "complete_inds", ")", ">", "0", ":", "\n", "                ", "complete_seqs", ".", "extend", "(", "seqs", "[", "complete_inds", "]", ".", "tolist", "(", ")", ")", "\n", "#complete_seqs_alpha.extend(seqs_alpha[complete_inds].tolist())", "\n", "complete_seqs_scores", ".", "extend", "(", "top_k_scores", "[", "complete_inds", "]", ")", "\n", "", "k", "-=", "len", "(", "complete_inds", ")", "# reduce beam length accordingly", "\n", "\n", "#print(len(incomplete_inds), len(complete_inds))", "\n", "\n", "# Proceed with incomplete sequences", "\n", "if", "k", "==", "0", ":", "\n", "                ", "break", "\n", "", "seqs", "=", "seqs", "[", "incomplete_inds", "]", "\n", "h", "=", "h", "[", "prev_word_inds", "[", "incomplete_inds", "]", "]", "\n", "c", "=", "c", "[", "prev_word_inds", "[", "incomplete_inds", "]", "]", "\n", "encoder_out", "=", "encoder_out", "[", "prev_word_inds", "[", "incomplete_inds", "]", "]", "\n", "top_k_scores", "=", "top_k_scores", "[", "incomplete_inds", "]", ".", "unsqueeze", "(", "1", ")", "\n", "k_prev_words", "=", "next_word_inds", "[", "incomplete_inds", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "50", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "i", "=", "complete_seqs_scores", ".", "index", "(", "max", "(", "complete_seqs_scores", ")", ")", "\n", "seq", "=", "complete_seqs", "[", "i", "]", "\n", "#print(seq)", "\n", "return", "seq", "\n", "#return complete_seqs, complete_seqs_scores", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention.get_hidden_state": [[1404, 1480], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "train_models.LanguageWithAttention.init_hidden_state", "train_models.LanguageWithAttention.fc_embed", "train_models.LanguageWithAttention.fc_onehot", "train_models.LanguageWithAttention.fc_inv", "train_models.LanguageWithAttention.fc_goal", "train_models.LanguageWithAttention.embedding().squeeze", "train_models.LanguageWithAttention.attention", "train_models.LanguageWithAttention.sigmoid", "train_models.LanguageWithAttention.decode_step", "train_models.LanguageWithAttention.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.max", "range", "indices[].unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "train_models.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "indices.size", "len", "complete_seqs[].append", "len", "train_models.LanguageWithAttention.embedding", "indices.size", "temp.append", "indices.data.tolist"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state"], ["", "def", "get_hidden_state", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "10", ",", "self", ".", "encoder_dim", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "k", "=", "encoder_out", ".", "size", "(", "0", ")", "#batch size", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "torch", ".", "LongTensor", "(", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "]", "*", "k", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "torch", ".", "zeros", "(", "k", ",", "1", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "incomplete_inds", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "# used to keep track of original index in complete_seqs", "\n", "\n", "#complete_seqs_scores = list()", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "#hiddens = h.clone()", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "awe", "=", "gate", "*", "awe", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "#hiddens[incomplete_inds] = h.clone()", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "values", ",", "indices", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "assert", "(", "indices", ".", "size", "(", "0", ")", "==", "len", "(", "incomplete_inds", ")", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "complete_seqs", "[", "incomplete_inds", "[", "i", "]", "]", ".", "append", "(", "indices", ".", "data", ".", "tolist", "(", ")", "[", "i", "]", ")", "\n", "if", "indices", "[", "i", "]", "==", "word_map", ".", "word2idx", "[", "'<end>'", "]", ":", "\n", "                    ", "del", "incomplete_inds", "[", "i", "]", "\n", "#incomplete_inds.remove(i)", "\n", "", "else", ":", "\n", "#not finished", "\n", "                    ", "temp", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "incomplete_inds", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "#subset the ones that aren't finished.", "\n", "", "h", "=", "h", "[", "temp", "]", "\n", "c", "=", "c", "[", "temp", "]", "\n", "encoder_out", "=", "encoder_out", "[", "temp", "]", "\n", "k_prev_words", "=", "indices", "[", "temp", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "20", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "return", "complete_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention.get_hidden_state_new": [[1481, 1557], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "train_models.LanguageWithAttention.init_hidden_state", "h.clone", "train_models.LanguageWithAttention.fc_embed", "train_models.LanguageWithAttention.fc_onehot", "train_models.LanguageWithAttention.fc_inv", "train_models.LanguageWithAttention.fc_goal", "train_models.LanguageWithAttention.embedding().squeeze", "train_models.LanguageWithAttention.attention", "train_models.LanguageWithAttention.sigmoid", "train_models.LanguageWithAttention.decode_step", "h.clone", "train_models.LanguageWithAttention.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.max", "range", "indices[].unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "train_models.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "indices.size", "len", "complete_seqs[].append", "len", "train_models.LanguageWithAttention.embedding", "indices.size", "temp.append", "indices.data.tolist"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "get_hidden_state_new", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "10", ",", "self", ".", "encoder_dim", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "k", "=", "encoder_out", ".", "size", "(", "0", ")", "#batch size", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "torch", ".", "LongTensor", "(", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "]", "*", "k", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "torch", ".", "zeros", "(", "k", ",", "1", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "incomplete_inds", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "# used to keep track of original index in complete_seqs", "\n", "\n", "#complete_seqs_scores = list()", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "awe", "=", "gate", "*", "awe", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "hiddens", "[", "incomplete_inds", "]", "=", "h", ".", "clone", "(", ")", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "values", ",", "indices", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "assert", "(", "indices", ".", "size", "(", "0", ")", "==", "len", "(", "incomplete_inds", ")", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "complete_seqs", "[", "incomplete_inds", "[", "i", "]", "]", ".", "append", "(", "indices", ".", "data", ".", "tolist", "(", ")", "[", "i", "]", ")", "\n", "if", "indices", "[", "i", "]", "==", "word_map", ".", "word2idx", "[", "'<end>'", "]", ":", "\n", "                    ", "del", "incomplete_inds", "[", "i", "]", "\n", "#incomplete_inds.remove(i)", "\n", "", "else", ":", "\n", "#not finished", "\n", "                    ", "temp", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "incomplete_inds", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "#subset the ones that aren't finished.", "\n", "", "h", "=", "h", "[", "temp", "]", "\n", "c", "=", "c", "[", "temp", "]", "\n", "encoder_out", "=", "encoder_out", "[", "temp", "]", "\n", "k_prev_words", "=", "indices", "[", "temp", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "20", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "return", "complete_seqs", ",", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention.get_hidden_state_new1": [[1558, 1644], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "train_models.LanguageWithAttention.init_hidden_state", "h.clone", "train_models.LanguageWithAttention.fc_embed", "train_models.LanguageWithAttention.fc_onehot", "train_models.LanguageWithAttention.fc_inv", "train_models.LanguageWithAttention.fc_goal", "train_models.LanguageWithAttention.embedding().squeeze", "train_models.LanguageWithAttention.attention", "train_models.LanguageWithAttention.sigmoid", "train_models.LanguageWithAttention.decode_step", "h.clone", "train_models.LanguageWithAttention.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "indices.data.tolist", "complete_seqs.append", "torch.log_softmax.max", "range", "indices[].unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "train_models.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "train_models.LanguageWithAttention.embedding", "indices.size", "temp.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "get_hidden_state_new1", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "device", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "10", ",", "self", ".", "encoder_dim", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "k", "=", "encoder_out", ".", "size", "(", "0", ")", "#batch size", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "torch", ".", "LongTensor", "(", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "]", "*", "k", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "torch", ".", "zeros", "(", "k", ",", "1", ")", ".", "to", "(", "device", ")", "# (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "incomplete_inds", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "# used to keep track of original index in complete_seqs", "\n", "\n", "#complete_seqs_scores = list()", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "awe", "=", "gate", "*", "awe", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "hiddens", "[", "incomplete_inds", "]", "=", "h", ".", "clone", "(", ")", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "#values, indices = scores.max(dim=1) ", "\n", "values", ",", "indices", "=", "torch", ".", "topk", "(", "scores", ",", "5", ",", "dim", "=", "1", ")", "\n", "\n", "#assert(indices.size(0) == len(incomplete_inds))", "\n", "\n", "top5", "=", "indices", ".", "data", ".", "tolist", "(", ")", "\n", "\n", "complete_seqs", ".", "append", "(", "top5", ")", "\n", "\n", "#if word_map.word2idx['<end>'] in top5:", "\n", "#    break", "\n", "\n", "values", ",", "indices", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "#complete_seqs[incomplete_inds[i]].append(indices.data.tolist()[i])", "\n", "                ", "if", "indices", "[", "i", "]", "==", "word_map", ".", "word2idx", "[", "'<end>'", "]", ":", "\n", "                    ", "del", "incomplete_inds", "[", "i", "]", "\n", "#incomplete_inds.remove(i)", "\n", "", "else", ":", "\n", "#not finished", "\n", "                    ", "temp", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "incomplete_inds", ")", "==", "0", ":", "\n", "                 ", "break", "\n", "\n", "#subset the ones that aren't finished.", "\n", "", "h", "=", "h", "[", "temp", "]", "\n", "c", "=", "c", "[", "temp", "]", "\n", "encoder_out", "=", "encoder_out", "[", "temp", "]", "\n", "k_prev_words", "=", "indices", "[", "temp", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "20", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "return", "complete_seqs", ",", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention1.__init__": [[1648, 1675], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "AttentionSmall", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "train_models.LanguageWithAttention1.embed.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "LanguageWithAttention1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "# vocab size, 300", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embed", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embed", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "#if not trainable.", "\n", "#self.emb_layer.weight.requires_grad = False # try this too?", "\n", "\n", "", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "embedding_dim", ")", "\n", "\n", "self", ".", "attention", "=", "AttentionSmall", "(", "embedding_dim", ",", "32", ",", "128", ")", "\n", "self", ".", "f_beta", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "encoder_dim", ")", "# linear layer to create a sigmoid-activated gate", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "encoding", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "32", ",", "num_layers", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "32", ",", "num_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention1.init_hidden_state": [[1676, 1687], ["train_models.LanguageWithAttention1.init_h", "train_models.LanguageWithAttention1.init_c"], "methods", ["None"], ["", "def", "init_hidden_state", "(", "self", ",", "encoder_out", ")", ":", "\n", "        ", "\"\"\"\n        Creates the initial hidden and cell states for the decoder's LSTM based on the encoded images.\n        :param encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim)\n        :return: hidden state, cell state\n        \"\"\"", "\n", "#mean_encoder_out = encoder_out.mean(dim=1)", "\n", "#print(mean_encoder_out.size())", "\n", "h", "=", "self", ".", "init_h", "(", "encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "c", "=", "self", ".", "init_c", "(", "encoder_out", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageWithAttention1.forward": [[1688, 1740], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.size", "train_models.LanguageWithAttention1.embedding", "train_models.LanguageWithAttention1.init_hidden_state", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "train_models.LanguageWithAttention1.fc1", "train_models.LanguageWithAttention1.fc2", "train_models.LanguageWithAttention1.fc3", "train_models.LanguageWithAttention1.fc4", "train_models.LanguageWithAttention1.fc5", "train_models.LanguageWithAttention1.fc_inv", "train_models.LanguageWithAttention1.fc55", "max", "sum", "train_models.LanguageWithAttention1.attention", "train_models.LanguageWithAttention1.sigmoid", "train_models.LanguageWithAttention1.decode_step", "train_models.LanguageWithAttention1.fc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "train_models.LanguageWithAttention1.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_models.LanguageWithAttention1.dropout", "max"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "encoded_captions", ",", "caption_lengths", ",", "device", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\n", "#encode features", "\n", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "encoder_out", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "#decoder...", "\n", "batch_size", "=", "encoder_out", ".", "size", "(", "0", ")", "\n", "vocab_size", "=", "self", ".", "vocab_size", "\n", "\n", "# Embedding", "\n", "embeddings", "=", "self", ".", "embedding", "(", "encoded_captions", ")", "# (batch_size, max_caption_length, embed_dim)", "\n", "\n", "# Initialize LSTM state", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "\n", "# We won't decode at the <end> position, since we've finished generating as soon as we generate <end>", "\n", "# So, decoding lengths are actual lengths - 1", "\n", "decode_lengths", "=", "[", "caption_length", "-", "1", "for", "caption_length", "in", "caption_lengths", "]", "\n", "#decode_lengths = (caption_lengths - 1).tolist()", "\n", "\n", "# Create tensors to hold word predicion scores and alphas", "\n", "predictions", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max", "(", "decode_lengths", ")", ",", "vocab_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "# At each time-step, decode by", "\n", "# attention-weighing the encoder's output based on the decoder's previous hidden state output", "\n", "# then generate a new word in the decoder with the previous word and the attention weighted encoding", "\n", "for", "t", "in", "range", "(", "max", "(", "decode_lengths", ")", ")", ":", "\n", "            ", "batch_size_t", "=", "sum", "(", "[", "l", ">", "t", "for", "l", "in", "decode_lengths", "]", ")", "\n", "attention_weighted_encoding", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", "[", ":", "batch_size_t", "]", ",", "\n", "h", "[", ":", "batch_size_t", "]", ")", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", "[", ":", "batch_size_t", "]", ")", ")", "# gating scalar, (batch_size_t, encoder_dim)", "\n", "attention_weighted_encoding", "=", "gate", "*", "attention_weighted_encoding", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "\n", "torch", ".", "cat", "(", "[", "embeddings", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", ",", "attention_weighted_encoding", "]", ",", "dim", "=", "1", ")", ",", "\n", "(", "h", "[", ":", "batch_size_t", "]", ",", "c", "[", ":", "batch_size_t", "]", ")", ")", "# (batch_size_t, decoder_dim)", "\n", "preds", "=", "self", ".", "fc", "(", "self", ".", "dropout", "(", "h", ")", ")", "# (batch_size_t, vocab_size)", "\n", "predictions", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", "=", "preds", "\n", "\n", "", "return", "predictions", ",", "encoded_captions", ",", "decode_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.StateGoalNet.__init__": [[1743, 1753], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "StateGoalNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "528", ")", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "528", ",", "128", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "128", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.StateGoalNet.forward": [[1754, 1769], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.StateGoalNet.fc7", "train_models.StateGoalNet.fc1", "train_models.StateGoalNet.fc2", "train_models.StateGoalNet.fc3", "train_models.StateGoalNet.fc4", "train_models.StateGoalNet.fc5", "train_models.StateGoalNet.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "goal", ")", ":", "\n", "\n", "    ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c5", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "c5", ")", ")", "\n", "c7", "=", "self", ".", "fc7", "(", "c6", ")", "\n", "return", "c7", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.StateGoalNetv1.__init__": [[1772, 1787], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "    ", "super", "(", "StateGoalNetv1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "48", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "48", ",", "48", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.StateGoalNetv1.forward": [[1789, 1811], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.StateGoalNetv1.fc7", "train_models.StateGoalNetv1.fc1", "train_models.StateGoalNetv1.fc2", "train_models.StateGoalNetv1.fc3", "train_models.StateGoalNetv1.fc4", "train_models.StateGoalNetv1.fc5", "train_models.StateGoalNetv1.fc_inv", "train_models.StateGoalNetv1.fc55", "train_models.StateGoalNetv1.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ")", ":", "\n", "\n", "#encode features", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "features", ")", ")", "# updated with new embedding size.", "\n", "c7", "=", "self", ".", "fc7", "(", "c6", ")", "\n", "#c8 = F.relu(self.fc8(c7))", "\n", "\n", "return", "c7", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.StateGoalNetv2.__init__": [[1815, 1828], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "    ", "super", "(", "StateGoalNetv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# saying that 50 is the embedding size", "\n", "# saying that 32 is the hidden size.  ", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "fc_gridembed", "=", "nn", ".", "Linear", "(", "25", "*", "embed_dim", ",", "32", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "25", "*", "6", ",", "32", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "32", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "32", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "32", ",", "32", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "32", ",", "8", ")", "\n", "#self.fc6 = nn.Linear(300, 50)", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.StateGoalNetv2.forward": [[1831, 1847], ["grid_embedding.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_onehot.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.StateGoalNetv2.fc_gridembed", "train_models.StateGoalNetv2.fc_onehot", "train_models.StateGoalNetv2.fc_inv", "train_models.StateGoalNetv2.fc_goal", "train_models.StateGoalNetv2.fc1", "train_models.StateGoalNetv2.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ")", ":", "\n", "\n", "#reshape grid embeddings, also try Tanh", "\n", "    ", "grid_embedding", "=", "grid_embedding", ".", "view", "(", "-", "1", ",", "25", "*", "self", ".", "embed_dim", ")", "\n", "grid_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_gridembed", "(", "grid_embedding", ")", ")", "\n", "grid_onehot", "=", "grid_onehot", ".", "view", "(", "-", "1", ",", "25", "*", "6", ")", "\n", "grid_1hot_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "inv_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "goal_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "\n", "total", "=", "grid_embed", "+", "grid_1hot_embed", "+", "inv_embed", "+", "goal_embed", "\n", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "total", ")", ")", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "output", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.StateGoalInstructionNet.__init__": [[1867, 1887], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ")", ":", "\n", "    ", "super", "(", "StateGoalInstructionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#num_embeddings, embedding_dim = embed_weights.size()", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "# vocab size, 300", "\n", "#self.embed.load_state_dict({'weight': embed_weights})", "\n", "\n", "#if not trainable.", "\n", "#self.emb_layer.weight.requires_grad = False # try this too?", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "528", ")", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "528", "+", "512", ",", "128", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Linear", "(", "64", ",", "9", ")", "# CHANGE THIS BACK TO 8!!", "\n", "self", ".", "encoding", "=", "nn", ".", "LSTM", "(", "256", ",", "512", ",", "num_layers", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.StateGoalInstructionNet.forward": [[1888, 1915], ["train_models.StateGoalInstructionNet.embed", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "train_models.StateGoalInstructionNet.encoding", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.StateGoalInstructionNet.fc1", "train_models.StateGoalInstructionNet.fc2", "train_models.StateGoalInstructionNet.fc3", "train_models.StateGoalInstructionNet.fc4", "train_models.StateGoalInstructionNet.fc5", "train_models.StateGoalInstructionNet.fc6", "train_models.StateGoalInstructionNet.fc7", "train_models.StateGoalInstructionNet.fc8"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "goal", ",", "instruction", ",", "lengths", ")", ":", "\n", "\n", "    ", "emb", "=", "self", ".", "embed", "(", "instruction", ")", "\n", "\n", "packed", "=", "pack_padded_sequence", "(", "emb", ",", "lengths", ",", "batch_first", "=", "True", ")", "\n", "\n", "output", ",", "hdn", "=", "self", ".", "encoding", "(", "packed", ")", "\n", "\n", "#print(hdn[0][0].size())", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c5", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "#print(c5.size())", "\n", "combined_instruction", "=", "torch", ".", "cat", "(", "(", "c5", ",", "hdn", "[", "0", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "combined_instruction", ")", ")", "\n", "c7", "=", "F", ".", "relu", "(", "self", ".", "fc7", "(", "c6", ")", ")", "\n", "c8", "=", "F", ".", "relu", "(", "self", ".", "fc8", "(", "c7", ")", ")", "\n", "\n", "return", "c8", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.StateGoalInstructionv1Net.__init__": [[1918, 1938], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ")", ":", "\n", "    ", "super", "(", "StateGoalInstructionv1Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#num_embeddings, embedding_dim = embed_weights.size()", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "# vocab size, 300", "\n", "#self.embed.load_state_dict({'weight': embed_weights})", "\n", "\n", "#if not trainable.", "\n", "#self.emb_layer.weight.requires_grad = False # try this too?", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "528", ")", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "528", "+", "512", ",", "128", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "128", "+", "300", ",", "64", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Linear", "(", "64", ",", "9", ")", "\n", "self", ".", "encoding", "=", "nn", ".", "LSTM", "(", "256", ",", "512", ",", "num_layers", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.StateGoalInstructionv1Net.forward": [[1939, 1967], ["train_models.StateGoalInstructionv1Net.embed", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "train_models.StateGoalInstructionv1Net.encoding", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.StateGoalInstructionv1Net.fc1", "train_models.StateGoalInstructionv1Net.fc2", "train_models.StateGoalInstructionv1Net.fc3", "train_models.StateGoalInstructionv1Net.fc4", "train_models.StateGoalInstructionv1Net.fc5", "train_models.StateGoalInstructionv1Net.fc6", "train_models.StateGoalInstructionv1Net.fc7", "train_models.StateGoalInstructionv1Net.fc8"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "instruction", ",", "lengths", ")", ":", "\n", "\n", "    ", "emb", "=", "self", ".", "embed", "(", "instruction", ")", "\n", "\n", "packed", "=", "pack_padded_sequence", "(", "emb", ",", "lengths", ",", "batch_first", "=", "True", ")", "\n", "\n", "output", ",", "hdn", "=", "self", ".", "encoding", "(", "packed", ")", "\n", "\n", "#print(hdn[0][0].size())", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c5", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "#print(c5.size())", "\n", "combined_instruction", "=", "torch", ".", "cat", "(", "(", "c5", ",", "hdn", "[", "0", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "combined_instruction", ")", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "inventory", ")", ",", "dim", "=", "1", ")", "\n", "c7", "=", "F", ".", "relu", "(", "self", ".", "fc7", "(", "combined_inventory", ")", ")", "\n", "c8", "=", "F", ".", "relu", "(", "self", ".", "fc8", "(", "c7", ")", ")", "\n", "\n", "return", "c8", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNet.__init__": [[1970, 1997], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["\t", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\t    ", "super", "(", "LanguageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#num_embeddings is the vocab size", "\n", "\n", "#num_embeddings, embedding_dim = embed_weights.size()", "\n", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "# vocab size, 300", "\n", "#self.embed.load_state_dict({'weight': embed_weights})", "\n", "\n", "#if not trainable.", "\n", "#self.emb_layer.weight.requires_grad = False # try this too?", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "embedding_dim", ")", "# have to end up with embed_size", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "528", "+", "512", ",", "128", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Linear", "(", "64", ",", "9", ")", "\n", "self", ".", "encoding", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "512", ",", "num_layers", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNet.forward": [[1998, 2021], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.LanguageNet.embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "train_models.LanguageNet.encoding", "train_models.LanguageNet.linear", "train_models.LanguageNet.fc1", "train_models.LanguageNet.fc2", "train_models.LanguageNet.fc3", "train_models.LanguageNet.fc4", "train_models.LanguageNet.fc5", "torch.relu.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "instruction", ",", "lengths", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\n", "#encode features", "\n", "\t    ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "#256", "\n", "\n", "#encode caption", "\n", "embeddings", "=", "self", ".", "embed", "(", "instruction", ")", "\n", "embeddings", "=", "torch", ".", "cat", "(", "(", "features", ".", "unsqueeze", "(", "1", ")", ",", "embeddings", ")", ",", "1", ")", "\n", "packed", "=", "pack_padded_sequence", "(", "embeddings", ",", "lengths", ",", "batch_first", "=", "True", ")", "\n", "#output, hdn = self.encoding(packed)", "\n", "hiddens", ",", "hdn", "=", "self", ".", "encoding", "(", "packed", ")", "\n", "outputs", "=", "self", ".", "linear", "(", "hiddens", "[", "0", "]", ")", "\n", "\n", "return", "outputs", ",", "hdn", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNet.sample": [[2023, 2036], ["features.unsqueeze", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "train_models.LanguageNet.lstm", "train_models.LanguageNet.linear", "train_models.LanguageNet.max", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "train_models.LanguageNet.embed", "inputs.unsqueeze.unsqueeze.unsqueeze", "hiddens.squeeze"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "goal", ")", ":", "\n", "\t\t", "\"\"\"Generate captions for given image features using greedy search.\"\"\"", "\n", "sampled_ids", "=", "[", "]", "\n", "inputs", "=", "features", ".", "unsqueeze", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "max_seg_length", ")", ":", "\n", "\t\t\t", "hiddens", ",", "states", "=", "self", ".", "lstm", "(", "inputs", ",", "states", ")", "# hiddens: (batch_size, 1, hidden_size)", "\n", "outputs", "=", "self", ".", "linear", "(", "hiddens", ".", "squeeze", "(", "1", ")", ")", "# outputs:  (batch_size, vocab_size)", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "# predicted: (batch_size)", "\n", "sampled_ids", ".", "append", "(", "predicted", ")", "\n", "inputs", "=", "self", ".", "embed", "(", "predicted", ")", "# inputs: (batch_size, embed_size)", "\n", "inputs", "=", "inputs", ".", "unsqueeze", "(", "1", ")", "# inputs: (batch_size, 1, embed_size)", "\n", "", "sampled_ids", "=", "torch", ".", "stack", "(", "sampled_ids", ",", "1", ")", "# sampled_ids: (batch_size, max_seq_length)", "\n", "return", "sampled_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.ActionNet.__init__": [[2039, 2066], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["\t", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\t    ", "super", "(", "ActionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#num_embeddings is the vocab size", "\n", "\n", "#num_embeddings, embedding_dim = embed_weights.size()", "\n", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "# vocab size, 300", "\n", "#self.embed.load_state_dict({'weight': embed_weights})", "\n", "\n", "#if not trainable.", "\n", "#self.emb_layer.weight.requires_grad = False # try this too?", "\n", "\n", "self", ".", "max_seg_length", "=", "max_seq_length", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "embedding_dim", ")", "# have to end up with embed_size", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "256", "+", "512", ",", "128", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Linear", "(", "64", ",", "9", ")", "\n", "self", ".", "encoding", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "512", ",", "num_layers", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.ActionNet.forward": [[2067, 2088], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.ActionNet.fc1", "train_models.ActionNet.fc2", "train_models.ActionNet.fc3", "train_models.ActionNet.fc4", "train_models.ActionNet.fc5", "train_models.ActionNet.fc6", "train_models.ActionNet.fc7", "train_models.ActionNet.fc8"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "instruction_embedding", ")", ":", "\n", "\n", "#encode features", "\n", "\t    ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "\n", "combined_instruction", "=", "torch", ".", "cat", "(", "(", "features", ",", "instruction_embedding", ")", ",", "dim", "=", "1", ")", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "combined_instruction", ")", ")", "\n", "c7", "=", "F", ".", "relu", "(", "self", ".", "fc7", "(", "c6", ")", ")", "\n", "c8", "=", "F", ".", "relu", "(", "self", ".", "fc8", "(", "c7", ")", ")", "\n", "\n", "return", "c8", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv1.__init__": [[2091, 2118], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "max_seq_length", "=", "20", ")", ":", "\n", "        ", "super", "(", "LanguageNetv1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#num_embeddings is the vocab size", "\n", "\n", "#num_embeddings, embedding_dim = embed_weights.size()", "\n", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "# vocab size, 300", "\n", "#self.embed.load_state_dict({'weight': embed_weights})", "\n", "\n", "#if not trainable.", "\n", "#self.emb_layer.weight.requires_grad = False # try this too?", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "embedding_dim", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "embedding_dim", ")", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "528", "+", "512", ",", "128", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Linear", "(", "64", ",", "9", ")", "\n", "self", ".", "encoding", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "embedding_dim", "*", "2", ",", "num_layers", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "embedding_dim", "*", "2", ",", "num_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv1.forward": [[2119, 2145], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.LanguageNetv1.embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "train_models.LanguageNetv1.encoding", "train_models.LanguageNetv1.linear", "train_models.LanguageNetv1.fc1", "train_models.LanguageNetv1.fc2", "train_models.LanguageNetv1.fc3", "train_models.LanguageNetv1.fc4", "train_models.LanguageNetv1.fc5", "features.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "instruction", ",", "lengths", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\n", "#encode features", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "features", "=", "c6", "\n", "#inventory_emb = F.relu(self.fc_inv(inventory))", "\n", "#combined_inventory = torch.cat((c6, inventory_emb), dim=1)", "\n", "#features = F.relu(self.fc55(combined_inventory))", "\n", "\n", "#encode caption", "\n", "embeddings", "=", "self", ".", "embed", "(", "instruction", ")", "\n", "embeddings", "=", "torch", ".", "cat", "(", "(", "features", ".", "unsqueeze", "(", "1", ")", ",", "embeddings", ")", ",", "1", ")", "# try adding these???", "\n", "packed", "=", "pack_padded_sequence", "(", "embeddings", ",", "lengths", ",", "batch_first", "=", "True", ")", "\n", "hiddens", ",", "hdn", "=", "self", ".", "encoding", "(", "packed", ")", "\n", "outputs", "=", "self", ".", "linear", "(", "hiddens", "[", "0", "]", ")", "\n", "\n", "return", "outputs", ",", "hdn", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv1.sample": [[2147, 2187], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "features.unsqueeze", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "train_models.LanguageNetv1.fc1", "train_models.LanguageNetv1.fc2", "train_models.LanguageNetv1.fc3", "train_models.LanguageNetv1.fc4", "train_models.LanguageNetv1.fc5", "train_models.LanguageNetv1.encoding", "train_models.LanguageNetv1.linear", "train_models.LanguageNetv1.max", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "train_models.LanguageNetv1.embed", "inputs.unsqueeze.unsqueeze.unsqueeze", "hiddens.squeeze"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "states", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate captions for given image features using greedy search.\"\"\"", "\n", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "features", "=", "c6", "\n", "\n", "sampled_ids", "=", "[", "]", "\n", "inputs", "=", "features", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "hdn", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_seq_length", ")", ":", "\n", "            ", "hiddens", ",", "states", "=", "self", ".", "encoding", "(", "inputs", ",", "states", ")", "# hiddens: (batch_size, 1, hidden_size)", "\n", "outputs", "=", "self", ".", "linear", "(", "hiddens", ".", "squeeze", "(", "1", ")", ")", "# outputs:  (batch_size, vocab_size)", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "# predicted: (batch_size)", "\n", "\n", "#print(predicted)", "\n", "\n", "#if predicted == 8: # Check this value", "\n", "#    hdn = torch.Tensor(states[0][0])", "\n", "\n", "sampled_ids", ".", "append", "(", "predicted", ")", "\n", "inputs", "=", "self", ".", "embed", "(", "predicted", ")", "# inputs: (batch_size, embed_size)", "\n", "inputs", "=", "inputs", ".", "unsqueeze", "(", "1", ")", "# inputs: (batch_size, 1, embed_size)", "\n", "", "sampled_ids", "=", "torch", ".", "stack", "(", "sampled_ids", ",", "1", ")", "# sampled_ids: (batch_size, max_seq_length)", "\n", "\n", "if", "hdn", "==", "None", ":", "\n", "            ", "hdn", "=", "states", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "return", "sampled_ids", ",", "hdn", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv2.__init__": [[2191, 2223], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "train_models.LanguageNetv2.embed.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "LanguageNetv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "# vocab size, 300", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embed", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embed", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "#if not trainable.", "\n", "#self.emb_layer.weight.requires_grad = False # try this too?", "\n", "\n", "", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "15", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "15", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "15", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "15", ")", "\n", "self", ".", "fc_cat", "=", "nn", ".", "Linear", "(", "25", "*", "15", "+", "25", "*", "15", "+", "10", "*", "15", "+", "15", ",", "encoder_dim", ")", "\n", "\n", "'''\n        self.fc1 = nn.Linear(embedding_dim, 150)\n        self.fc2 = nn.Linear(7, 20)\n        self.fc3 = nn.Linear(170, 90)\n        self.fc4 = nn.Linear(embedding_dim, 150) \n        self.fc5 = nn.Linear(2250+150, 512)\n        self.fc_inv = nn.Linear(embedding_dim, 50) \n        self.fc55 = nn.Linear(512+50, embedding_dim)\n        '''", "\n", "\n", "self", ".", "encoding", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "32", ",", "num_layers", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "32", ",", "num_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv2.forward": [[2224, 2260], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c2.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.LanguageNetv2.embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "train_models.LanguageNetv2.encoding", "train_models.LanguageNetv2.linear", "train_models.LanguageNetv2.fc_embed", "train_models.LanguageNetv2.fc_onehot", "train_models.LanguageNetv2.fc_inv", "train_models.LanguageNetv2.fc_goal", "train_models.LanguageNetv2.fc_cat", "features.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "instruction", ",", "lengths", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\n", "#encode features", "\n", "        ", "'''\n        c1 = F.relu(self.fc1(grid_embedding))\n        c2 = F.relu(self.fc2(grid_onehot))\n        c1 = c1.view(-1, 25,150)\n        c2 = c2.view(-1, 25,20)\n        combined_grids = torch.cat((c1, c2), dim=2)\n        c3 = F.relu(self.fc3(combined_grids)) \n        c3 = c3.view(-1, 25*90)\n        c4 = F.relu(self.fc4(goal))\n        combined_grid_goal = torch.cat((c3, c4), dim=1)\n        c6 = F.relu(self.fc5(combined_grid_goal))\n        temp_inv = F.relu(self.fc_inv(inventory))\n        combined_inventory = torch.cat((c6, temp_inv), dim=1)\n        features = F.relu(self.fc55(combined_inventory))\n        '''", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", "*", "15", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", "*", "15", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "10", "*", "15", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "encoder_out", "=", "F", ".", "relu", "(", "self", ".", "fc_cat", "(", "combined", ")", ")", "\n", "\n", "#encode caption", "\n", "embeddings", "=", "self", ".", "embed", "(", "instruction", ")", "\n", "embeddings", "=", "torch", ".", "cat", "(", "(", "features", ".", "unsqueeze", "(", "1", ")", ",", "embeddings", ")", ",", "1", ")", "# try adding these???", "\n", "packed", "=", "pack_padded_sequence", "(", "embeddings", ",", "lengths", ",", "batch_first", "=", "True", ")", "\n", "hiddens", ",", "hdn", "=", "self", ".", "encoding", "(", "packed", ")", "\n", "outputs", "=", "self", ".", "linear", "(", "hiddens", "[", "0", "]", ")", "\n", "\n", "return", "outputs", ",", "hdn", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv2.sample": [[2262, 2317], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c2.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "features.unsqueeze", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "train_models.LanguageNetv2.fc_embed", "train_models.LanguageNetv2.fc_onehot", "train_models.LanguageNetv2.fc_inv", "train_models.LanguageNetv2.fc_goal", "train_models.LanguageNetv2.fc_cat", "train_models.LanguageNetv2.encoding", "train_models.LanguageNetv2.linear", "train_models.LanguageNetv2.max", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "train_models.LanguageNetv2.embed", "inputs.unsqueeze.unsqueeze.unsqueeze", "hiddens.squeeze"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "states", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate captions for given image features using greedy search.\"\"\"", "\n", "\n", "#encode features", "\n", "'''\n        c1 = F.relu(self.fc1(grid_embedding))\n        c2 = F.relu(self.fc2(grid_onehot))\n        c1 = c1.view(-1, 25,150)\n        c2 = c2.view(-1, 25,20)\n        combined_grids = torch.cat((c1, c2), dim=2)\n        c3 = F.relu(self.fc3(combined_grids)) \n        c3 = c3.view(-1, 25*90)\n        c4 = F.relu(self.fc4(goal))\n        combined_grid_goal = torch.cat((c3, c4), dim=1)\n        c6 = F.relu(self.fc5(combined_grid_goal))\n        temp_inv = F.relu(self.fc_inv(inventory))\n        temp_inv = temp_inv.view(-1, 50)\n        combined_inventory = torch.cat((c6, temp_inv), dim=1)\n        features = F.relu(self.fc55(combined_inventory))\n        '''", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", "*", "15", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", "*", "15", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "10", "*", "15", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "encoder_out", "=", "F", ".", "relu", "(", "self", ".", "fc_cat", "(", "combined", ")", ")", "\n", "\n", "sampled_ids", "=", "[", "]", "\n", "inputs", "=", "features", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "hdn", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_seq_length", ")", ":", "\n", "            ", "hiddens", ",", "states", "=", "self", ".", "encoding", "(", "inputs", ",", "states", ")", "# hiddens: (batch_size, 1, hidden_size)", "\n", "outputs", "=", "self", ".", "linear", "(", "hiddens", ".", "squeeze", "(", "1", ")", ")", "# outputs:  (batch_size, vocab_size)", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "# predicted: (batch_size)", "\n", "\n", "#print(predicted)", "\n", "\n", "#if predicted == 8: # Check this value", "\n", "#    hdn = torch.Tensor(states[0][0])", "\n", "\n", "sampled_ids", ".", "append", "(", "predicted", ")", "\n", "inputs", "=", "self", ".", "embed", "(", "predicted", ")", "# inputs: (batch_size, embed_size)", "\n", "inputs", "=", "inputs", ".", "unsqueeze", "(", "1", ")", "# inputs: (batch_size, 1, embed_size)", "\n", "", "sampled_ids", "=", "torch", ".", "stack", "(", "sampled_ids", ",", "1", ")", "# sampled_ids: (batch_size, max_seq_length)", "\n", "\n", "if", "hdn", "==", "None", ":", "\n", "            ", "hdn", "=", "states", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "return", "sampled_ids", ",", "hdn", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv2OLD.__init__": [[2321, 2346], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "train_models.LanguageNetv2OLD.embed.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "LanguageNetv2OLD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "# vocab size, 300", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embed", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embed", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "#if not trainable.", "\n", "#self.emb_layer.weight.requires_grad = False # try this too?", "\n", "\n", "", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "embedding_dim", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "embedding_dim", ")", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "528", "+", "512", ",", "128", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Linear", "(", "64", ",", "9", ")", "\n", "self", ".", "encoding", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "32", ",", "num_layers", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "32", ",", "num_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv2OLD.forward": [[2347, 2373], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.LanguageNetv2OLD.embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "train_models.LanguageNetv2OLD.encoding", "train_models.LanguageNetv2OLD.linear", "train_models.LanguageNetv2OLD.fc1", "train_models.LanguageNetv2OLD.fc2", "train_models.LanguageNetv2OLD.fc3", "train_models.LanguageNetv2OLD.fc4", "train_models.LanguageNetv2OLD.fc5", "features.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "instruction", ",", "lengths", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\n", "#encode features", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "features", "=", "c6", "\n", "#inventory_emb = F.relu(self.fc_inv(inventory))", "\n", "#combined_inventory = torch.cat((c6, inventory_emb), dim=1)", "\n", "#features = F.relu(self.fc55(combined_inventory))", "\n", "\n", "#encode caption", "\n", "embeddings", "=", "self", ".", "embed", "(", "instruction", ")", "\n", "embeddings", "=", "torch", ".", "cat", "(", "(", "features", ".", "unsqueeze", "(", "1", ")", ",", "embeddings", ")", ",", "1", ")", "# try adding these???", "\n", "packed", "=", "pack_padded_sequence", "(", "embeddings", ",", "lengths", ",", "batch_first", "=", "True", ")", "\n", "hiddens", ",", "hdn", "=", "self", ".", "encoding", "(", "packed", ")", "\n", "outputs", "=", "self", ".", "linear", "(", "hiddens", "[", "0", "]", ")", "\n", "\n", "return", "outputs", ",", "hdn", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv2OLD.sample": [[2375, 2415], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "features.unsqueeze", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "train_models.LanguageNetv2OLD.fc1", "train_models.LanguageNetv2OLD.fc2", "train_models.LanguageNetv2OLD.fc3", "train_models.LanguageNetv2OLD.fc4", "train_models.LanguageNetv2OLD.fc5", "train_models.LanguageNetv2OLD.encoding", "train_models.LanguageNetv2OLD.linear", "train_models.LanguageNetv2OLD.max", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "train_models.LanguageNetv2OLD.embed", "inputs.unsqueeze.unsqueeze.unsqueeze", "hiddens.squeeze"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "states", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate captions for given image features using greedy search.\"\"\"", "\n", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "features", "=", "c6", "\n", "\n", "sampled_ids", "=", "[", "]", "\n", "inputs", "=", "features", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "hdn", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_seq_length", ")", ":", "\n", "            ", "hiddens", ",", "states", "=", "self", ".", "encoding", "(", "inputs", ",", "states", ")", "# hiddens: (batch_size, 1, hidden_size)", "\n", "outputs", "=", "self", ".", "linear", "(", "hiddens", ".", "squeeze", "(", "1", ")", ")", "# outputs:  (batch_size, vocab_size)", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "# predicted: (batch_size)", "\n", "\n", "#print(predicted)", "\n", "\n", "#if predicted == 8: # Check this value", "\n", "#    hdn = torch.Tensor(states[0][0])", "\n", "\n", "sampled_ids", ".", "append", "(", "predicted", ")", "\n", "inputs", "=", "self", ".", "embed", "(", "predicted", ")", "# inputs: (batch_size, embed_size)", "\n", "inputs", "=", "inputs", ".", "unsqueeze", "(", "1", ")", "# inputs: (batch_size, 1, embed_size)", "\n", "", "sampled_ids", "=", "torch", ".", "stack", "(", "sampled_ids", ",", "1", ")", "# sampled_ids: (batch_size, max_seq_length)", "\n", "\n", "if", "hdn", "==", "None", ":", "\n", "            ", "hdn", "=", "states", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "return", "sampled_ids", ",", "hdn", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.ActionNetv1.__init__": [[2419, 2452], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "max_seq_length", "=", "20", ")", ":", "\n", "        ", "super", "(", "ActionNetv1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#num_embeddings is the vocab size", "\n", "\n", "#num_embeddings, embedding_dim = embed_weights.size()", "\n", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "# vocab size, 300", "\n", "#self.embed.load_state_dict({'weight': embed_weights})", "\n", "\n", "#if not trainable.", "\n", "#self.emb_layer.weight.requires_grad = False # try this too?", "\n", "\n", "self", ".", "max_seg_length", "=", "max_seq_length", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "# have to end up with embed_size", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "300", ",", "embedding_dim", ")", "\n", "\n", "# self.fc6 = nn.Linear(256+512, 128)", "\n", "# self.fc7 = nn.Linear(128, 64)", "\n", "# self.fc8 = nn.Linear(64,9) ", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "48", ",", "64", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "9", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Linear", "(", "64", ",", "9", ")", "\n", "\n", "self", ".", "encoding", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "512", ",", "num_layers", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.ActionNetv1.forward": [[2453, 2476], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.ActionNetv1.fc1", "train_models.ActionNetv1.fc2", "train_models.ActionNetv1.fc3", "train_models.ActionNetv1.fc4", "train_models.ActionNetv1.fc5", "train_models.ActionNetv1.fc55", "train_models.ActionNetv1.fc6", "train_models.ActionNetv1.fc7"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "instruction_embedding", ")", ":", "\n", "\n", "#encode features", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "inventory", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "combined_instruction", "=", "torch", ".", "cat", "(", "(", "features", ",", "instruction_embedding", ")", ",", "dim", "=", "1", ")", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "combined_instruction", ")", ")", "# updated with new embedding size.", "\n", "c7", "=", "F", ".", "relu", "(", "self", ".", "fc7", "(", "c6", ")", ")", "\n", "#c8 = F.relu(self.fc8(c7))", "\n", "\n", "return", "c7", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv3.__init__": [[2480, 2508], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "max_seq_length", "=", "20", ")", ":", "\n", "        ", "super", "(", "LanguageNetv3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#num_embeddings is the vocab size", "\n", "\n", "#num_embeddings, embedding_dim = embed_weights.size()", "\n", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "# vocab size, 300", "\n", "#self.embed.load_state_dict({'weight': embed_weights})", "\n", "\n", "#if not trainable.", "\n", "#self.emb_layer.weight.requires_grad = False # try this too?", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "150", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "300", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "embedding_dim", ")", "\n", "#self.fc5 = nn.Linear(2250+150, 512) ", "\n", "#self.fc55 = nn.Linear(512+300, embedding_dim)", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "528", "+", "512", ",", "128", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Linear", "(", "64", ",", "9", ")", "\n", "self", ".", "encoding", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "512", ",", "num_layers", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv3.forward": [[2509, 2537], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.LanguageNetv3.embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "train_models.LanguageNetv3.encoding", "train_models.LanguageNetv3.linear", "train_models.LanguageNetv3.fc1", "train_models.LanguageNetv3.fc2", "train_models.LanguageNetv3.fc3", "train_models.LanguageNetv3.fc4", "train_models.LanguageNetv3.fc5", "features.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "instruction", ",", "lengths", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\n", "#encode features", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "#combined_grids = torch.cat((c1, c2), dim=2)", "\n", "combined_grids", "=", "c1", "+", "c2", "\n", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "features", "=", "c6", "\n", "#combined_inventory = torch.cat((c6, inventory), dim=1)", "\n", "#features = F.relu(self.fc55(combined_inventory))", "\n", "\n", "#encode caption", "\n", "embeddings", "=", "self", ".", "embed", "(", "instruction", ")", "\n", "embeddings", "=", "torch", ".", "cat", "(", "(", "features", ".", "unsqueeze", "(", "1", ")", ",", "embeddings", ")", ",", "1", ")", "\n", "packed", "=", "pack_padded_sequence", "(", "embeddings", ",", "lengths", ",", "batch_first", "=", "True", ")", "\n", "#output, hdn = self.encoding(packed)", "\n", "hiddens", ",", "hdn", "=", "self", ".", "encoding", "(", "packed", ")", "\n", "outputs", "=", "self", ".", "linear", "(", "hiddens", "[", "0", "]", ")", "\n", "\n", "return", "outputs", ",", "hdn", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv3.sample": [[2539, 2564], ["features.unsqueeze", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "train_models.LanguageNetv3.lstm", "train_models.LanguageNetv3.linear", "train_models.LanguageNetv3.max", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "train_models.LanguageNetv3.embed", "inputs.unsqueeze.unsqueeze.unsqueeze", "hiddens.squeeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "goal", ")", ":", "\n", "## SWAP THIS OUT!!!", "\n", "\n", "        ", "sampled_ids", "=", "[", "]", "\n", "inputs", "=", "features", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "hdn", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_seg_length", ")", ":", "\n", "            ", "hiddens", ",", "states", "=", "self", ".", "lstm", "(", "inputs", ",", "states", ")", "# hiddens: (batch_size, 1, hidden_size)", "\n", "outputs", "=", "self", ".", "linear", "(", "hiddens", ".", "squeeze", "(", "1", ")", ")", "# outputs:  (batch_size, vocab_size)", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "# predicted: (batch_size)", "\n", "\n", "if", "predicted", "==", "8", ":", "# Check this value", "\n", "                ", "hdn", "=", "torch", ".", "Tensor", "(", "states", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "", "sampled_ids", ".", "append", "(", "predicted", ")", "\n", "inputs", "=", "self", ".", "embed", "(", "predicted", ")", "# inputs: (batch_size, embed_size)", "\n", "inputs", "=", "inputs", ".", "unsqueeze", "(", "1", ")", "# inputs: (batch_size, 1, embed_size)", "\n", "", "sampled_ids", "=", "torch", ".", "stack", "(", "sampled_ids", ",", "1", ")", "# sampled_ids: (batch_size, max_seq_length)", "\n", "\n", "if", "hdn", "==", "None", ":", "\n", "            ", "hdn", "=", "states", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "return", "sampled_ids", ",", "hdn", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.ActionNet_Allobs.__init__": [[2569, 2591], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "train_models.SwitchModule", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "net_input_sizes.append", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "max_seq_length", "=", "20", ")", ":", "\n", "        ", "super", "(", "ActionNet_Allobs", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "hid_sz", "=", "32", "\n", "\n", "### INPUTS:", "\n", "self", ".", "fc_gridembed", "=", "nn", ".", "Linear", "(", "25", "*", "embed_dim", ",", "32", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "25", "*", "6", ",", "32", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "32", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "32", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "32", ",", "32", ")", "# not using this right now.", "\n", "\n", "net_input_sizes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "# now 5. ", "\n", "            ", "net_input_sizes", ".", "append", "(", "self", ".", "hid_sz", ")", "\n", "\n", "", "self", ".", "batch_modules", "=", "SwitchModule", "(", "net_input_sizes", ",", "len", "(", "net_input_sizes", ")", ")", "\n", "\n", "self", ".", "fc_final", "=", "nn", ".", "Linear", "(", "32", ",", "9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.ActionNet_Allobs.forward": [[2592, 2623], ["grid_embedding.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_onehot.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_models.ActionNet_Allobs.batch_modules", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_models.ActionNet_Allobs.fc_gridembed", "train_models.ActionNet_Allobs.fc_onehot", "train_models.ActionNet_Allobs.fc_inv", "train_models.ActionNet_Allobs.fc_goal", "train_models.ActionNet_Allobs.fc_final"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "instruction_embedding", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "grid_embedding", ".", "view", "(", "-", "1", ",", "25", "*", "self", ".", "embed_dim", ")", "\n", "grid_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_gridembed", "(", "grid_embedding", ")", ")", "\n", "grid_onehot", "=", "grid_onehot", ".", "view", "(", "-", "1", ",", "25", "*", "6", ")", "\n", "grid_1hot_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "inv_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "goal_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "\n", "net_inputs", "=", "(", ")", "\n", "net_inputs", "+=", "(", "grid_embed", ",", ")", "\n", "net_inputs", "+=", "(", "grid_1hot_embed", ",", ")", "\n", "net_inputs", "+=", "(", "inv_embed", ",", ")", "\n", "net_inputs", "+=", "(", "goal_embed", ",", ")", "\n", "net_inputs", "+=", "(", "instruction_embedding", ",", ")", "\n", "\n", "key", "=", "[", "]", "\n", "key", ".", "append", "(", "grid_embed", ")", "\n", "key", ".", "append", "(", "grid_1hot_embed", ")", "\n", "key", ".", "append", "(", "inv_embed", ")", "\n", "key", ".", "append", "(", "goal_embed", ")", "\n", "key", ".", "append", "(", "instruction_embedding", ")", "\n", "key", "=", "torch", ".", "cat", "(", "key", ",", "1", ")", "\n", "\n", "#batch modules", "\n", "\n", "output", "=", "self", ".", "batch_modules", "(", "(", "net_inputs", ",", "key", ")", ")", "\n", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc_final", "(", "output", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.select_last": [[403, 413], ["x.sum().view.size", "x.sum().view.size", "x.sum().view.data.new().resize_as_().fill_", "range", "torch.autograd.Variable", "x.sum().view.mul", "x.sum().view.sum().view", "[].fill_", "x.sum().view.size", "x.sum().view.data.new().resize_as_", "x.sum().view.sum", "x.sum().view.data.new"], "function", ["None"], ["", "", "def", "select_last", "(", "x", ",", "lengths", ")", ":", "\n", "    ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "seq_length", "=", "x", ".", "size", "(", "1", ")", "\n", "mask", "=", "x", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "x", ".", "data", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "mask", "[", "i", "]", "[", "lengths", "[", "i", "]", "-", "1", "]", ".", "fill_", "(", "1", ")", "\n", "", "mask", "=", "Variable", "(", "mask", ")", "\n", "x", "=", "x", ".", "mul", "(", "mask", ")", "\n", "x", "=", "x", ".", "sum", "(", "1", ")", ".", "view", "(", "batch_size", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.process_lengths": [[414, 421], ["input.size", "input.size", "list", "input.data.eq().sum().squeeze", "input.data.eq().sum().squeeze", "input.data.eq().sum", "input.data.eq().sum", "input.data.eq", "input.data.eq"], "function", ["None"], ["", "def", "process_lengths", "(", "input", ")", ":", "\n", "    ", "max_length", "=", "input", ".", "size", "(", "1", ")", "\n", "if", "input", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "        ", "lengths", "=", "[", "max_length", "-", "input", ".", "data", ".", "eq", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "]", "\n", "", "else", ":", "\n", "        ", "lengths", "=", "list", "(", "max_length", "-", "input", ".", "data", ".", "eq", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", ")", "\n", "", "return", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.3statemazebase.MazebaseGame.__init__": [[134, 209], ["os.path.join", "os.path.join", "3statemazebase.MazebaseGame.reset", "gym.spaces.Discrete", "gym.spaces.Box", "torchtext.GloVe", "torchtext.GloVe", "open", "yaml.load", "open", "flask.json.load", "mazebasev2.BasicKnowledgeGame", "open", "flask.json.load", "mazebasev2.BasicKnowledgeGame", "torchtext.GloVe.vectors[].data.cpu().numpy", "print", "word.lower", "torchtext.GloVe.vectors[].data.cpu", "word.lower"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["def", "__init__", "(", "self", ",", "lang_model", ",", "device", ",", "vocabulary", ",", "vocab_weights", ")", ":", "\n", "\n", "\t\t", "self", ".", "embed_size", "=", "300", "\n", "if", "self", ".", "embed_size", "==", "50", ":", "\n", "\t\t\t", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "\t\t\t", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "", "vocab", "=", "[", "'Gold'", ",", "'Ore'", ",", "'Vein'", ",", "'Key'", ",", "\"Pickaxe\"", ",", "\"Iron\"", ",", "\"Diamond\"", ",", "\"Boots\"", ",", "\"Station\"", ",", "\"Brick\"", ",", "\"Stairs\"", ",", "\"Station\"", ",", "\"Factory\"", ",", "\"Cobblestone\"", ",", "\"Stash\"", ",", "\"Sword\"", ",", "\"Ingot\"", ",", "\"Coal\"", ",", "\"Leggins\"", ",", "\"Leggings\"", ",", "\"Leather\"", ",", "\"Rabbit\"", ",", "\"Hide\"", ",", "\"Chestplate\"", ",", "\"Helmet\"", ",", "\"Wood\"", ",", "\"Plank\"", ",", "\"Door\"", ",", "\"Tree\"", ",", "\"Wooden\"", ",", "\"Axe\"", ",", "\"Stick\"", ",", "\"Stone\"", "]", "\n", "\n", "self", ".", "glove", "=", "{", "}", "\n", "\n", "for", "word", "in", "vocab", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "self", ".", "glove", "[", "word", ".", "lower", "(", ")", "]", "=", "glove", ".", "vectors", "[", "glove", ".", "stoi", "[", "word", ".", "lower", "(", ")", "]", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "except", ":", "\n", "\t\t\t\t", "print", "(", "word", ",", "\"not found\"", ")", "\n", "\n", "#initialize the game here#", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/minimum_viable_rl.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length12task.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length123task.yaml'", "\n", "", "", "yaml_file", "=", "'mazebasev2/options/knowledge_planner/length12345task.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length12345task_missing.yaml'", "\n", "\n", "# only 3 and only 5 tasks..", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length35task.yaml'", "\n", "#yaml_file = 'mazebasev2/ptions/knowledge_planner/length2task.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length1task.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length3task.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length45common.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/unseen_tasks.yaml'", "\n", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length12task_distractor.yaml'", "\n", "\n", "with", "open", "(", "yaml_file", ",", "'r'", ")", "as", "handle", ":", "\n", "\t\t\t", "options", "=", "yaml", ".", "load", "(", "handle", ")", "\n", "\n", "# Get sub opts", "\n", "", "method_opt", "=", "options", "[", "'method'", "]", "\n", "env_opt", "=", "options", "[", "'env'", "]", "\n", "log_opt", "=", "options", "[", "'logs'", "]", "\n", "\n", "# Set up the mazebase environment", "\n", "knowledge_root", "=", "env_opt", "[", "'knowledge_root'", "]", "\n", "world_knowledge_file", "=", "os", ".", "path", ".", "join", "(", "'mazebasev2'", ",", "knowledge_root", ",", "env_opt", "[", "'world_knowledge'", "]", "[", "'train'", "]", ")", "\n", "with", "open", "(", "world_knowledge_file", ")", "as", "f", ":", "\n", "\t\t  ", "world_knowledge", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Make the world", "\n", "", "map_size", "=", "(", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ")", "\n", "self", ".", "all_games", "=", "[", "games", ".", "BasicKnowledgeGame", "(", "world_knowledge", "=", "world_knowledge", ",", "proposed_knowledge", "=", "[", "]", ",", "options", "=", "env_opt", ",", "load_items", "=", "None", ",", "map_size", "=", "map_size", ")", "]", "\n", "\n", "# For 1 step tasks!", "\n", "knowledge_root", "=", "env_opt", "[", "'knowledge_root'", "]", "\n", "world_knowledge_file1", "=", "os", ".", "path", ".", "join", "(", "'mazebasev2'", ",", "knowledge_root", ",", "'data_1.json'", ")", "\n", "with", "open", "(", "world_knowledge_file1", ")", "as", "f", ":", "\n", "\t\t  ", "world_knowledge1", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "games1", "=", "[", "games", ".", "BasicKnowledgeGame", "(", "world_knowledge", "=", "world_knowledge1", ",", "proposed_knowledge", "=", "[", "]", ",", "options", "=", "env_opt", ",", "load_items", "=", "None", ",", "map_size", "=", "map_size", ")", "]", "\n", "\n", "\n", "\n", "#self.lang_model = lang_model.to(device)", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "vocabulary", "=", "vocabulary", "\n", "self", ".", "vocab_weights", "=", "vocab_weights", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "8", ")", "\n", "#dims = self.state.shape ", "\n", "dims", "=", "self", ".", "combined_states", ".", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "dims", ")", ")", "\n", "\n", "self", ".", "queue", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.3statemazebase.MazebaseGame.step": [[213, 298], ["3statemazebase.MazebaseGame.game.act", "3statemazebase.MazebaseGame.game.is_over", "3statemazebase.MazebaseGame.game.observe", "3statemazebase.get_grid_embedding", "3statemazebase.one_hot_grid", "3statemazebase.get_goal_embedding", "3statemazebase.get_inventory_embedding", "numpy.array", "numpy.concatenate", "numpy.concatenate", "len", "3statemazebase.MazebaseGame.queue.append", "numpy.array.flatten", "get_grid_embedding.flatten", "one_hot_grid.flatten", "get_goal_embedding.flatten", "get_inventory_embedding.flatten"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "\n", "\t\t", "self", ".", "count", "=", "self", ".", "count", "+", "1", "\n", "\n", "if", "action", "==", "0", ":", "\n", "\t\t\t", "action", "=", "'up'", "\n", "", "elif", "action", "==", "1", ":", "\n", "\t\t\t", "action", "=", "'down'", "\n", "", "elif", "action", "==", "2", ":", "\n", "\t\t\t", "action", "=", "'right'", "\n", "", "elif", "action", "==", "3", ":", "\n", "\t\t\t", "action", "=", "'left'", "\n", "", "elif", "action", "==", "4", ":", "\n", "\t\t\t", "action", "=", "'toggle_switch'", "\n", "", "elif", "action", "==", "5", ":", "\n", "\t\t\t", "action", "=", "'grab'", "\n", "", "elif", "action", "==", "6", ":", "\n", "\t\t\t", "action", "=", "'mine'", "\n", "", "elif", "action", "==", "7", ":", "\n", "\t\t\t", "action", "=", "'craft'", "\n", "\n", "\n", "#execute action", "\n", "", "self", ".", "game", ".", "act", "(", "action", ")", "\n", "\n", "#print(self.game.game.inventory)", "\n", "\n", "## more rewards -- if has pickaxe, and nearby the item to mine.", "\n", "\n", "hasPickaxe", "=", "False", "\n", "for", "item", "in", "self", ".", "game", ".", "game", ".", "inventory", ":", "\n", "\t\t\t", "if", "item", "==", "'Pickaxe'", ":", "\n", "\t\t\t\t", "hasPickaxe", "=", "True", "\n", "\n", "#calculate reward", "\n", "", "", "if", "self", ".", "game", ".", "is_over", "(", ")", ":", "\n", "\t\t\t", "self", ".", "reward", "=", "5", "\n", "self", ".", "done", "=", "True", "\n", "self", ".", "count", "=", "0", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "reward", "=", "0", "\n", "self", ".", "done", "=", "False", "\n", "\n", "#extra info", "\n", "", "self", ".", "add", "=", "{", "}", "\n", "#self.add['episode'] = self.game.game.inventory", "\n", "self", ".", "add", "[", "'episode'", "]", "=", "{", "'l'", ":", "self", ".", "count", ",", "'r'", ":", "self", ".", "reward", "}", "\n", "\n", "\n", "#get observation", "\n", "config", "=", "self", ".", "game", ".", "observe", "(", ")", "\n", "grid_obs", ",", "side_info", "=", "config", "[", "'observation'", "]", "\n", "\n", "inventory", "=", "self", ".", "game", ".", "game", ".", "inventory", "\n", "goal", "=", "self", ".", "game", ".", "game", ".", "goal", "\n", "\n", "obs", "=", "(", "grid_obs", ",", "inventory", ",", "goal", ")", "\n", "\n", "state", ",", "inventory", ",", "goal", "=", "obs", "\n", "\n", "states_embedding", "=", "get_grid_embedding", "(", "state", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "states_onehot", "=", "one_hot_grid", "(", "state", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "goal", "=", "get_goal_embedding", "(", "goal", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "inventory", "=", "get_inventory_embedding", "(", "inventory", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "\n", "#k_prev_words = np.array([[self.vocabulary.word2idx['<start>']]])", "\n", "#top_k_scores = np.zeros((1, 1))", "\n", "#self.state = np.concatenate((k_prev_words.flatten(), top_k_scores.flatten(), states_embedding.flatten(), states_onehot.flatten(), goal.flatten(), inventory.flatten()))", "\n", "\n", "counts", "=", "np", ".", "array", "(", "[", "self", ".", "game", ".", "game", ".", "count", "]", ")", "\n", "self", ".", "state", "=", "np", ".", "concatenate", "(", "(", "counts", ".", "flatten", "(", ")", ",", "states_embedding", ".", "flatten", "(", ")", ",", "states_onehot", ".", "flatten", "(", ")", ",", "goal", ".", "flatten", "(", ")", ",", "inventory", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "#print(\"Here??\", self.state.shape)", "\n", "\n", "if", "len", "(", "self", ".", "queue", ")", "==", "0", ":", "\n", "\t\t\t", "self", ".", "queue", "=", "[", "self", ".", "state", ",", "self", ".", "state", ",", "self", ".", "state", "]", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "queue", "=", "self", ".", "queue", "[", "1", ":", "]", "\n", "self", ".", "queue", ".", "append", "(", "self", ".", "state", ")", "\n", "\n", "\n", "", "self", ".", "commbined_states", "=", "np", ".", "concatenate", "(", "(", "self", ".", "queue", "[", "0", "]", ",", "self", ".", "queue", "[", "1", "]", ",", "self", ".", "queue", "[", "2", "]", ")", ")", "\n", "\n", "return", "[", "self", ".", "commbined_states", ",", "self", ".", "reward", ",", "self", ".", "done", ",", "self", ".", "add", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.3statemazebase.MazebaseGame.reset": [[301, 338], ["mazebasev2.MazeGame", "3statemazebase.MazebaseGame.game.observe", "3statemazebase.get_grid_embedding", "3statemazebase.one_hot_grid", "3statemazebase.get_goal_embedding", "3statemazebase.get_inventory_embedding", "numpy.array", "numpy.concatenate", "numpy.concatenate", "mazebasev2.lib.mazebase.games.featurizers.GridFeaturizer", "numpy.array.flatten", "get_grid_embedding.flatten", "one_hot_grid.flatten", "get_goal_embedding.flatten", "get_inventory_embedding.flatten"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "\t\t", "self", ".", "count", "=", "0", "\n", "\n", "self", ".", "queue", "=", "[", "]", "\n", "\n", "# Game wrapper", "\n", "self", ".", "game", "=", "games", ".", "MazeGame", "(", "\n", "self", ".", "all_games", ",", "\n", "featurizer", "=", "featurizers", ".", "GridFeaturizer", "(", ")", "\n", ")", "\n", "\n", "#get observation", "\n", "config", "=", "self", ".", "game", ".", "observe", "(", ")", "\n", "grid_obs", ",", "side_info", "=", "config", "[", "'observation'", "]", "\n", "\n", "inventory", "=", "self", ".", "game", ".", "game", ".", "inventory", "\n", "goal", "=", "self", ".", "game", ".", "game", ".", "goal", "\n", "\n", "#print(goal)", "\n", "\n", "obs", "=", "(", "grid_obs", ",", "inventory", ",", "goal", ")", "\n", "\n", "state", ",", "inventory", ",", "goal", "=", "obs", "\n", "\n", "states_embedding", "=", "get_grid_embedding", "(", "state", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "states_onehot", "=", "one_hot_grid", "(", "state", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "goal", "=", "get_goal_embedding", "(", "goal", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "inventory", "=", "get_inventory_embedding", "(", "inventory", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "counts", "=", "np", ".", "array", "(", "[", "self", ".", "game", ".", "game", ".", "count", "]", ")", "\n", "self", ".", "state", "=", "np", ".", "concatenate", "(", "(", "counts", ".", "flatten", "(", ")", ",", "states_embedding", ".", "flatten", "(", ")", ",", "states_onehot", ".", "flatten", "(", ")", ",", "goal", ".", "flatten", "(", ")", ",", "inventory", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "#print(self.state.shape)", "\n", "\n", "self", ".", "combined_states", "=", "np", ".", "concatenate", "(", "(", "self", ".", "state", ",", "self", ".", "state", ",", "self", ".", "state", ")", ")", "\n", "\n", "return", "self", ".", "combined_states", "\n", "#return self.state", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.3statemazebase.get_summed_embedding": [[37, 46], ["phrase.split.split", "numpy.zeros", "p.lower"], "function", ["None"], ["def", "get_summed_embedding", "(", "phrase", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "    ", "phrase", "=", "phrase", ".", "split", "(", "' '", ")", "\n", "phrase_vector", "=", "np", ".", "zeros", "(", "(", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "p", "in", "phrase", ":", "\n", "        ", "phrase_vector", "+=", "glove", "[", "p", ".", "lower", "(", ")", "]", "\n", "\n", "", "return", "phrase_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.3statemazebase.get_inventory_embedding": [[47, 72], ["numpy.zeros", "3statemazebase.get_summed_embedding", "3statemazebase.get_summed_embedding"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "    ", "inventory_embedding", "=", "np", ".", "zeros", "(", "(", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "first", "=", "True", "\n", "for", "item", "in", "inventory", ":", "\n", "\n", "        ", "if", "first", ":", "\n", "            ", "inventory_embedding", "=", "get_summed_embedding", "(", "item", ",", "glove", ",", "embed_size", ")", "\n", "first", "=", "False", "\n", "", "else", ":", "\n", "            ", "inventory_embedding", "=", "inventory_embedding", "+", "get_summed_embedding", "(", "item", ",", "glove", ",", "embed_size", ")", "\n", "\n", "", "", "return", "inventory_embedding", "\n", "'''\n\n\tinventory_embedding = np.zeros((10,embed_size), dtype=np.float32)\n\n\tcount = 0\n\tfor item in inventory:\n\t    if inventory[item] > 0:\n\t        inventory_embedding[count] = get_summed_embedding(item, glove, embed_size)\n\t        count = count + 1\n\treturn inventory_embedding\n\t'''", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.3statemazebase.get_grid_embedding": [[75, 87], ["numpy.zeros", "range", "range", "enumerate", "3statemazebase.get_summed_embedding"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_grid_embedding", "(", "batch_grid", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "    ", "goal_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "            ", "for", "index", ",", "item", "in", "enumerate", "(", "batch_grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "                ", "if", "item", "==", "\"ResourceFont\"", "or", "item", "==", "\"CraftingContainer\"", "or", "item", "==", "\"CraftingItem\"", ":", "\n", "                    ", "goal_embedding_array", "[", "x", "]", "[", "y", "]", "=", "get_summed_embedding", "(", "batch_grid", "[", "x", "]", "[", "y", "]", "[", "index", "+", "1", "]", ",", "glove", ",", "embed_size", ")", "\n", "\n", "", "", "", "", "return", "goal_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.3statemazebase.get_goal_embedding": [[88, 104], ["numpy.zeros", "goal.split.split", "goal[].lower", "goal[].lower"], "function", ["None"], ["", "def", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "#currently all crafts are 2 word phrases", "\n", "# goal in the format of \"Make Diamond Boots (Diamond Boots=1)\" --> just extract diamond boots part", "\n", "\n", "    ", "goal_embedding", "=", "np", ".", "zeros", "(", "(", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "goal", "=", "goal", ".", "split", "(", "' '", ")", "\n", "\n", "\n", "item1_vec", "=", "glove", "[", "goal", "[", "1", "]", ".", "lower", "(", ")", "]", "\n", "item2_vec", "=", "glove", "[", "goal", "[", "2", "]", ".", "lower", "(", ")", "]", "\n", "\n", "goal_embedding", "=", "item1_vec", "+", "item2_vec", "\n", "\n", "return", "goal_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.3statemazebase.one_hot_grid": [[105, 130], ["numpy.zeros", "range", "range", "enumerate"], "function", ["None"], ["", "def", "one_hot_grid", "(", "grid", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "    ", "grid_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "            ", "for", "index", ",", "item", "in", "enumerate", "(", "grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "\n", "                ", "if", "item", "==", "'Corner'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "0", "]", "=", "1", "\n", "", "elif", "item", "==", "'Agent'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "1", "]", "=", "1", "\n", "", "elif", "'Door'", "in", "item", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "2", "]", "=", "1", "\n", "", "elif", "item", "==", "'Key'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "3", "]", "=", "1", "\n", "", "elif", "item", "==", "'Switch'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "4", "]", "=", "1", "\n", "", "elif", "item", "==", "'Block'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "5", "]", "=", "1", "\n", "", "elif", "item", "==", "'closed'", ":", "# door closed", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "6", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "grid_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.MazebaseGame.__init__": [[134, 205], ["os.path.join", "os.path.join", "mazebase.MazebaseGame.reset", "gym.spaces.Discrete", "gym.spaces.Box", "torchtext.GloVe", "torchtext.GloVe", "open", "yaml.load", "open", "flask.json.load", "mazebasev2.BasicKnowledgeGame", "open", "flask.json.load", "mazebasev2.BasicKnowledgeGame", "torchtext.GloVe.vectors[].data.cpu().numpy", "print", "word.lower", "torchtext.GloVe.vectors[].data.cpu", "word.lower"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["def", "__init__", "(", "self", ",", "lang_model", ",", "device", ",", "vocabulary", ",", "vocab_weights", ")", ":", "\n", "\n", "\t\t", "self", ".", "embed_size", "=", "300", "\n", "if", "self", ".", "embed_size", "==", "50", ":", "\n", "\t\t\t", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "", "else", ":", "\n", "\t\t\t", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "\n", "\n", "", "vocab", "=", "[", "'Gold'", ",", "'Ore'", ",", "'Vein'", ",", "'Key'", ",", "\"Pickaxe\"", ",", "\"Iron\"", ",", "\"Diamond\"", ",", "\"Boots\"", ",", "\"Station\"", ",", "\"Brick\"", ",", "\"Stairs\"", ",", "\"Station\"", ",", "\"Factory\"", ",", "\"Cobblestone\"", ",", "\"Stash\"", ",", "\"Sword\"", ",", "\"Ingot\"", ",", "\"Coal\"", ",", "\"Leggins\"", ",", "\"Leggings\"", ",", "\"Leather\"", ",", "\"Rabbit\"", ",", "\"Hide\"", ",", "\"Chestplate\"", ",", "\"Helmet\"", ",", "\"Wood\"", ",", "\"Plank\"", ",", "\"Door\"", ",", "\"Tree\"", ",", "\"Wooden\"", ",", "\"Axe\"", ",", "\"Stick\"", ",", "\"Stone\"", "]", "\n", "\n", "self", ".", "glove", "=", "{", "}", "\n", "\n", "for", "word", "in", "vocab", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "self", ".", "glove", "[", "word", ".", "lower", "(", ")", "]", "=", "glove", ".", "vectors", "[", "glove", ".", "stoi", "[", "word", ".", "lower", "(", ")", "]", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "except", ":", "\n", "\t\t\t\t", "print", "(", "word", ",", "\"not found\"", ")", "\n", "\n", "#initialize the game here#", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/minimum_viable_rl.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length12task.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length123task.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length12345task.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length12345task_missing.yaml'", "\n", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length35task.yaml'", "\n", "#yaml_file = 'mazebasev2/ptions/knowledge_planner/length2task.yaml'", "\n", "", "", "yaml_file", "=", "'mazebasev2/options/knowledge_planner/length1task.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length3task.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length45common.yaml'", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/unseen_tasks.yaml'", "\n", "\n", "#yaml_file = 'mazebasev2/options/knowledge_planner/length12task_distractor.yaml'", "\n", "\n", "with", "open", "(", "yaml_file", ",", "'r'", ")", "as", "handle", ":", "\n", "\t\t\t", "options", "=", "yaml", ".", "load", "(", "handle", ")", "\n", "\n", "# Get sub opts", "\n", "", "method_opt", "=", "options", "[", "'method'", "]", "\n", "env_opt", "=", "options", "[", "'env'", "]", "\n", "log_opt", "=", "options", "[", "'logs'", "]", "\n", "\n", "# Set up the mazebase environment", "\n", "knowledge_root", "=", "env_opt", "[", "'knowledge_root'", "]", "\n", "world_knowledge_file", "=", "os", ".", "path", ".", "join", "(", "'mazebasev2'", ",", "knowledge_root", ",", "env_opt", "[", "'world_knowledge'", "]", "[", "'train'", "]", ")", "\n", "with", "open", "(", "world_knowledge_file", ")", "as", "f", ":", "\n", "\t\t  ", "world_knowledge", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Make the world", "\n", "", "map_size", "=", "(", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'w'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ",", "env_opt", "[", "'state_rep'", "]", "[", "'h'", "]", ")", "\n", "self", ".", "all_games", "=", "[", "games", ".", "BasicKnowledgeGame", "(", "world_knowledge", "=", "world_knowledge", ",", "proposed_knowledge", "=", "[", "]", ",", "options", "=", "env_opt", ",", "load_items", "=", "None", ",", "map_size", "=", "map_size", ")", "]", "\n", "\n", "# For 1 step tasks!", "\n", "knowledge_root", "=", "env_opt", "[", "'knowledge_root'", "]", "\n", "world_knowledge_file1", "=", "os", ".", "path", ".", "join", "(", "'mazebasev2'", ",", "knowledge_root", ",", "'data_1.json'", ")", "\n", "with", "open", "(", "world_knowledge_file1", ")", "as", "f", ":", "\n", "\t\t  ", "world_knowledge1", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "games1", "=", "[", "games", ".", "BasicKnowledgeGame", "(", "world_knowledge", "=", "world_knowledge1", ",", "proposed_knowledge", "=", "[", "]", ",", "options", "=", "env_opt", ",", "load_items", "=", "None", ",", "map_size", "=", "map_size", ")", "]", "\n", "\n", "\n", "\n", "#self.lang_model = lang_model.to(device)", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "vocabulary", "=", "vocabulary", "\n", "self", ".", "vocab_weights", "=", "vocab_weights", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "8", ")", "\n", "dims", "=", "self", ".", "state", ".", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "dims", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.MazebaseGame.step": [[209, 303], ["mazebase.MazebaseGame.game.act", "mazebase.MazebaseGame.game.is_over", "mazebase.MazebaseGame.game.observe", "mazebase.get_grid_embedding", "mazebase.one_hot_grid", "mazebase.get_goal_embedding", "mazebase.get_inventory_embedding", "numpy.array", "numpy.concatenate", "numpy.array.flatten", "get_grid_embedding.flatten", "one_hot_grid.flatten", "get_goal_embedding.flatten", "get_inventory_embedding.flatten"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.is_over", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "\n", "\t\t", "self", ".", "count", "=", "self", ".", "count", "+", "1", "\n", "\n", "if", "action", "==", "0", ":", "\n", "\t\t\t", "action", "=", "'up'", "\n", "", "elif", "action", "==", "1", ":", "\n", "\t\t\t", "action", "=", "'down'", "\n", "", "elif", "action", "==", "2", ":", "\n", "\t\t\t", "action", "=", "'right'", "\n", "", "elif", "action", "==", "3", ":", "\n", "\t\t\t", "action", "=", "'left'", "\n", "", "elif", "action", "==", "4", ":", "\n", "\t\t\t", "action", "=", "'toggle_switch'", "\n", "", "elif", "action", "==", "5", ":", "\n", "\t\t\t", "action", "=", "'grab'", "\n", "", "elif", "action", "==", "6", ":", "\n", "\t\t\t", "action", "=", "'mine'", "\n", "", "elif", "action", "==", "7", ":", "\n", "\t\t\t", "action", "=", "'craft'", "\n", "\n", "\n", "#execute action", "\n", "", "self", ".", "game", ".", "act", "(", "action", ")", "\n", "\n", "#print(self.game.game.inventory)", "\n", "\n", "## more rewards -- if has pickaxe, and nearby the item to mine.", "\n", "\n", "hasPickaxe", "=", "False", "\n", "for", "item", "in", "self", ".", "game", ".", "game", ".", "inventory", ":", "\n", "\t\t\t", "if", "item", "==", "'Pickaxe'", ":", "\n", "\t\t\t\t", "hasPickaxe", "=", "True", "\n", "\n", "#calculate reward", "\n", "", "", "if", "self", ".", "game", ".", "is_over", "(", ")", ":", "\n", "\t\t\t", "self", ".", "reward", "=", "5", "\n", "self", ".", "done", "=", "True", "\n", "self", ".", "count", "=", "0", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "reward", "=", "0", "\n", "self", ".", "done", "=", "False", "\n", "\n", "#extra info", "\n", "", "self", ".", "add", "=", "{", "}", "\n", "#self.add['episode'] = self.game.game.inventory", "\n", "self", ".", "add", "[", "'episode'", "]", "=", "{", "'l'", ":", "self", ".", "count", ",", "'r'", ":", "self", ".", "reward", "}", "\n", "\n", "\n", "#get observation", "\n", "config", "=", "self", ".", "game", ".", "observe", "(", ")", "\n", "grid_obs", ",", "side_info", "=", "config", "[", "'observation'", "]", "\n", "\n", "inventory", "=", "self", ".", "game", ".", "game", ".", "inventory", "\n", "goal", "=", "self", ".", "game", ".", "game", ".", "goal", "\n", "\n", "obs", "=", "(", "grid_obs", ",", "inventory", ",", "goal", ")", "\n", "\n", "state", ",", "inventory", ",", "goal", "=", "obs", "\n", "\n", "states_embedding", "=", "get_grid_embedding", "(", "state", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "states_onehot", "=", "one_hot_grid", "(", "state", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "goal", "=", "get_goal_embedding", "(", "goal", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "inventory", "=", "get_inventory_embedding", "(", "inventory", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "\n", "#k_prev_words = np.array([[self.vocabulary.word2idx['<start>']]])", "\n", "#top_k_scores = np.zeros((1, 1))", "\n", "#self.state = np.concatenate((k_prev_words.flatten(), top_k_scores.flatten(), states_embedding.flatten(), states_onehot.flatten(), goal.flatten(), inventory.flatten()))", "\n", "\n", "counts", "=", "np", ".", "array", "(", "[", "self", ".", "game", ".", "game", ".", "count", "]", ")", "\n", "self", ".", "state", "=", "np", ".", "concatenate", "(", "(", "counts", ".", "flatten", "(", ")", ",", "states_embedding", ".", "flatten", "(", ")", ",", "states_onehot", ".", "flatten", "(", ")", ",", "goal", ".", "flatten", "(", ")", ",", "inventory", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "#self.state = np.concatenate((states_embedding.flatten(), states_onehot.flatten(), goal.flatten(), inventory.flatten()))", "\n", "\n", "# all_sampled_ids = self.lang_model.get_hidden_state(states_embedding, states_onehot, inventory, goal, self.device, self.vocabulary)", "\n", "# bow_ids = [sent + [len(vocab)] * (20 - len(sent)) for sent in all_sampled_ids]", "\n", "# bow_ids = torch.Tensor(bow_ids)", "\n", "# bow_ids = bow_ids.long()", "\n", "# sampled_ids = bow_ids.to(self.device)", "\n", "\n", "#sampled_ids, hidden_state = self.lang_model.get_hidden_state(states_embedding, states_onehot, inventory, goal, self.device, self.vocabulary)\t\t", "\n", "#sampled_ids = sampled_ids + [-1]*(32-len(sampled_ids))", "\n", "#sampled_ids = np.array(sampled_ids)", "\n", "#hidden_state = hidden_state.data.numpy()", "\n", "#self.state = np.concatenate((sampled_ids.flatten(), states_embedding.flatten(), states_onehot.flatten(), goal.flatten(), inventory.flatten()))", "\n", "\n", "#get observation", "\n", "# config = self.game.observe()", "\n", "# grid_obs, side_info = config['observation']", "\n", "# vocab = dict([(b, a) for a, b in enumerate(self.game.all_possible_features())])", "\n", "# one_hot = featurizers.grid_one_hot(self.game, grid_obs, np, vocab)", "\n", "# self.state = one_hot.flatten()", "\n", "\n", "return", "[", "self", ".", "state", ",", "self", ".", "reward", ",", "self", ".", "done", ",", "self", ".", "add", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.MazebaseGame.reset": [[304, 362], ["mazebasev2.MazeGame", "mazebase.MazebaseGame.game.observe", "print", "mazebase.get_grid_embedding", "mazebase.one_hot_grid", "mazebase.get_goal_embedding", "mazebase.get_inventory_embedding", "numpy.array", "numpy.concatenate", "mazebasev2.lib.mazebase.games.featurizers.GridFeaturizer", "numpy.array.flatten", "get_grid_embedding.flatten", "one_hot_grid.flatten", "get_goal_embedding.flatten", "get_inventory_embedding.flatten"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.mazegame.BaseMazeGame.observe", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "\t\t", "self", ".", "count", "=", "0", "\n", "\n", "# Game wrapper", "\n", "self", ".", "game", "=", "games", ".", "MazeGame", "(", "\n", "self", ".", "all_games", ",", "\n", "featurizer", "=", "featurizers", ".", "GridFeaturizer", "(", ")", "\n", ")", "\n", "\n", "#get observation", "\n", "config", "=", "self", ".", "game", ".", "observe", "(", ")", "\n", "grid_obs", ",", "side_info", "=", "config", "[", "'observation'", "]", "\n", "\n", "inventory", "=", "self", ".", "game", ".", "game", ".", "inventory", "\n", "goal", "=", "self", ".", "game", ".", "game", ".", "goal", "\n", "\n", "print", "(", "goal", ")", "\n", "\n", "obs", "=", "(", "grid_obs", ",", "inventory", ",", "goal", ")", "\n", "\n", "state", ",", "inventory", ",", "goal", "=", "obs", "\n", "\n", "states_embedding", "=", "get_grid_embedding", "(", "state", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "states_onehot", "=", "one_hot_grid", "(", "state", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "goal", "=", "get_goal_embedding", "(", "goal", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "inventory", "=", "get_inventory_embedding", "(", "inventory", ",", "self", ".", "glove", ",", "self", ".", "embed_size", ")", "\n", "counts", "=", "np", ".", "array", "(", "[", "self", ".", "game", ".", "game", ".", "count", "]", ")", "\n", "self", ".", "state", "=", "np", ".", "concatenate", "(", "(", "counts", ".", "flatten", "(", ")", ",", "states_embedding", ".", "flatten", "(", ")", ",", "states_onehot", ".", "flatten", "(", ")", ",", "goal", ".", "flatten", "(", ")", ",", "inventory", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "#k_prev_words = np.array([[self.vocabulary.word2idx['<start>']]])", "\n", "#top_k_scores = np.zeros((1, 1))", "\n", "\n", "#print(top_k_scores)", "\n", "\n", "#print(k_prev_words.flatten())", "\n", "#print(top_k_scores.flatten())", "\n", "\n", "#no language:", "\n", "#self.state = np.concatenate((k_prev_words.flatten(), top_k_scores.flatten(), states_embedding.flatten(), states_onehot.flatten(), goal.flatten(), inventory.flatten()))", "\n", "\n", "#temp_embedding = torch.Tensor(states_embedding).to(self.device)", "\n", "#temp_onehot = torch.Tensor(states_onehot).to(self.device)", "\n", "#temp_inv = torch.Tensor(inventory).to(self.device)", "\n", "#temp_goal = torch.Tensor(goal).to(self.device)", "\n", "\n", "# ADD LANGUAGE MODEL STUFF!!", "\n", "#all_sampled_ids = self.lang_model.get_hidden_state(temp_embedding, temp_onehot, temp_inv, temp_goal, self.device, self.vocabulary)", "\n", "#bow_ids = [sent + [len(self.vocabulary)] * (20 - len(sent)) for sent in all_sampled_ids]", "\n", "#bow_ids = np.array(bow_ids)", "\n", "\n", "#sampled_ids, hidden_state = self.lang_model.get_hidden_state(states_embedding, states_onehot, inventory, goal, self.device, self.vocabulary)", "\n", "#sampled_ids = sampled_ids + [-1]*(32-len(sampled_ids))", "\n", "#sampled_ids = np.array(sampled_ids)", "\n", "#hidden_state = hidden_state.data.numpy()", "\n", "#self.state = np.concatenate((bow_ids.flatten(), states_embedding.flatten(), states_onehot.flatten(), goal.flatten(), inventory.flatten()))", "\n", "\n", "return", "self", ".", "state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding": [[37, 46], ["phrase.split.split", "numpy.zeros", "p.lower"], "function", ["None"], ["def", "get_summed_embedding", "(", "phrase", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "    ", "phrase", "=", "phrase", ".", "split", "(", "' '", ")", "\n", "phrase_vector", "=", "np", ".", "zeros", "(", "(", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "p", "in", "phrase", ":", "\n", "        ", "phrase_vector", "+=", "glove", "[", "p", ".", "lower", "(", ")", "]", "\n", "\n", "", "return", "phrase_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_inventory_embedding": [[47, 72], ["numpy.zeros", "mazebase.get_summed_embedding", "mazebase.get_summed_embedding"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_inventory_embedding", "(", "inventory", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "    ", "inventory_embedding", "=", "np", ".", "zeros", "(", "(", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "first", "=", "True", "\n", "for", "item", "in", "inventory", ":", "\n", "\n", "        ", "if", "first", ":", "\n", "            ", "inventory_embedding", "=", "get_summed_embedding", "(", "item", ",", "glove", ",", "embed_size", ")", "\n", "first", "=", "False", "\n", "", "else", ":", "\n", "            ", "inventory_embedding", "=", "inventory_embedding", "+", "get_summed_embedding", "(", "item", ",", "glove", ",", "embed_size", ")", "\n", "\n", "", "", "return", "inventory_embedding", "\n", "'''\n\n\tinventory_embedding = np.zeros((10,embed_size), dtype=np.float32)\n\n\tcount = 0\n\tfor item in inventory:\n\t    if inventory[item] > 0:\n\t        inventory_embedding[count] = get_summed_embedding(item, glove, embed_size)\n\t        count = count + 1\n\treturn inventory_embedding\n\t'''", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_grid_embedding": [[75, 87], ["numpy.zeros", "range", "range", "enumerate", "mazebase.get_summed_embedding"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_summed_embedding"], ["", "def", "get_grid_embedding", "(", "batch_grid", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "    ", "goal_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "            ", "for", "index", ",", "item", "in", "enumerate", "(", "batch_grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "                ", "if", "item", "==", "\"ResourceFont\"", "or", "item", "==", "\"CraftingContainer\"", "or", "item", "==", "\"CraftingItem\"", ":", "\n", "                    ", "goal_embedding_array", "[", "x", "]", "[", "y", "]", "=", "get_summed_embedding", "(", "batch_grid", "[", "x", "]", "[", "y", "]", "[", "index", "+", "1", "]", ",", "glove", ",", "embed_size", ")", "\n", "\n", "", "", "", "", "return", "goal_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.get_goal_embedding": [[88, 104], ["numpy.zeros", "goal.split.split", "goal[].lower", "goal[].lower"], "function", ["None"], ["", "def", "get_goal_embedding", "(", "goal", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "#currently all crafts are 2 word phrases", "\n", "# goal in the format of \"Make Diamond Boots (Diamond Boots=1)\" --> just extract diamond boots part", "\n", "\n", "    ", "goal_embedding", "=", "np", ".", "zeros", "(", "(", "embed_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "goal", "=", "goal", ".", "split", "(", "' '", ")", "\n", "\n", "\n", "item1_vec", "=", "glove", "[", "goal", "[", "1", "]", ".", "lower", "(", ")", "]", "\n", "item2_vec", "=", "glove", "[", "goal", "[", "2", "]", ".", "lower", "(", ")", "]", "\n", "\n", "goal_embedding", "=", "item1_vec", "+", "item2_vec", "\n", "\n", "return", "goal_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.envs.mazebase.one_hot_grid": [[105, 130], ["numpy.zeros", "range", "range", "enumerate"], "function", ["None"], ["", "def", "one_hot_grid", "(", "grid", ",", "glove", ",", "embed_size", ")", ":", "\n", "\n", "    ", "grid_embedding_array", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "5", ")", ":", "\n", "\n", "            ", "for", "index", ",", "item", "in", "enumerate", "(", "grid", "[", "x", "]", "[", "y", "]", ")", ":", "\n", "\n", "                ", "if", "item", "==", "'Corner'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "0", "]", "=", "1", "\n", "", "elif", "item", "==", "'Agent'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "1", "]", "=", "1", "\n", "", "elif", "'Door'", "in", "item", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "2", "]", "=", "1", "\n", "", "elif", "item", "==", "'Key'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "3", "]", "=", "1", "\n", "", "elif", "item", "==", "'Switch'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "4", "]", "=", "1", "\n", "", "elif", "item", "==", "'Block'", ":", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "5", "]", "=", "1", "\n", "", "elif", "item", "==", "'closed'", ":", "# door closed", "\n", "                    ", "grid_embedding_array", "[", "x", "]", "[", "y", "]", "[", "6", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "grid_embedding_array", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.pytorchppo.main.main": [[23, 193], ["a2c_ppo_acktr.arguments.get_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "os.path.expanduser", "a2c_ppo_acktr.utils.cleanup_log_dir", "a2c_ppo_acktr.utils.cleanup_log_dir", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.device", "torch.device", "torch.device", "torch.device", "a2c_ppo_acktr.envs.make_vec_envs", "a2c_ppo_acktr.model.Policy", "a2c_ppo_acktr.model.Policy.to", "a2c_ppo_acktr.storage.RolloutStorage", "a2c_ppo_acktr.envs.make_vec_envs.reset", "a2c_ppo_acktr.storage.RolloutStorage.obs[].copy_", "a2c_ppo_acktr.storage.RolloutStorage.to", "collections.deque", "time.time", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "a2c_ppo_acktr.algo.A2C_ACKTR", "gail.Discriminator", "os.path.join", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "a2c_ppo_acktr.storage.RolloutStorage.compute_returns", "algo.A2C_ACKTR.update", "a2c_ppo_acktr.storage.RolloutStorage.after_update", "a2c_ppo_acktr.algo.PPO", "len", "gail.ExpertDataset", "int", "a2c_ppo_acktr.utils.update_linear_schedule", "a2c_ppo_acktr.envs.make_vec_envs.step", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "a2c_ppo_acktr.storage.RolloutStorage.insert", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "a2c_ppo_acktr.model.Policy.get_value().detach", "range", "range", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "print", "evaluation.evaluate", "a2c_ppo_acktr.algo.A2C_ACKTR", "[].lower", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "a2c_ppo_acktr.model.Policy.act", "a2c_ppo_acktr.envs.make_vec_envs.venv.eval", "gail.Discriminator.update", "gail.Discriminator.predict_reward", "os.makedirs", "os.path.join", "len", "len", "a2c_ppo_acktr.utils.get_vec_normalize", "info.keys", "collections.deque.append", "a2c_ppo_acktr.model.Policy.get_value", "getattr", "int", "len", "numpy.mean", "numpy.median", "numpy.min", "numpy.max", "a2c_ppo_acktr.utils.get_vec_normalize", "a2c_ppo_acktr.utils.get_vec_normalize", "a2c_ppo_acktr.arguments.get_args.env_name.split", "info.keys"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.arguments.get_args", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.cleanup_log_dir", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.cleanup_log_dir", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.make_vec_envs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.compute_returns", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.after_update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.update_linear_schedule", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.insert", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.pytorchppo.evaluation.evaluate", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.gail.Discriminator.predict_reward", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_vec_normalize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.get_value", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_vec_normalize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_vec_normalize"], ["\n", "from", "lib", ".", "planning", "import", "KnowledgePlanner", "\n", "\n", "from", "lib", ".", "knowledge", "import", "KnowledgeSubGraph", ",", "TripletInfo", ",", "Rule", ",", "create_rule_from_triplets", "\n", "\n", "import", "logging", "\n", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "\n", "# Get Input Arguments", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Script for training our knowledge agent'", ")", "\n", "\n", "##################################################", "\n", "# yaml options file contains all default choices #", "\n", "parser", ".", "add_argument", "(", "'--path_opt'", ",", "default", "=", "'options/knowledge_planner/default.yaml'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to a yaml options file'", ")", "\n", "\n", "##################################################", "\n", "parser", ".", "add_argument", "(", "'--trial'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'keep track of what trial you are on'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-vis'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables visdom visualization'", ")", "\n", "parser", ".", "add_argument", "(", "'--show-game'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'prints game to terminal if option is selected'", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "\n", "help", "=", "'port to run the server on (default: 8097)'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'if true, print step logs'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "\n", "help", "=", "'name of checkpoint to resume'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-mode'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "\n", "help", "=", "'training/eval mode we are in'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-every'", ",", "default", "=", "1000000000", ",", "type", "=", "int", ",", "\n", "help", "=", "'how often to save our models permanently'", ")", "\n", "\n", "# Main function", "\n", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "args", ".", "vis", "=", "not", "args", ".", "no_vis", "\n", "\n", "# Set options", "\n", "if", "args", ".", "path_opt", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "path_opt", ",", "'r'", ")", "as", "handle", ":", "\n", "            ", "options", "=", "yaml", ".", "load", "(", "handle", ")", "\n", "", "", "print", "(", "'## args'", ")", ";", "pprint", "(", "vars", "(", "args", ")", ")", "\n", "print", "(", "'## options'", ")", ";", "pprint", "(", "options", ")", "\n", "\n", "# Get sub opts", "\n", "method_opt", "=", "options", "[", "'method'", "]", "\n", "env_opt", "=", "options", "[", "'env'", "]", "\n", "log_opt", "=", "options", "[", "'logs'", "]", "\n", "\n", "# Set seed - just make the seed the trial number", "\n", "seed", "=", "args", ".", "trial", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Logging", "\n", "logpath", "=", "os", ".", "path", ".", "join", "(", "log_opt", "[", "'log_base'", "]", ",", "method_opt", "[", "'mode'", "]", ",", "log_opt", "[", "'exp_name'", "]", ",", "env_opt", "[", "'world_knowledge'", "]", "[", "args", ".", "train_mode", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "'trial%d'", "%", "args", ".", "trial", ")", "\n", "if", "len", "(", "args", ".", "resume", ")", "==", "0", ":", "\n", "# Make directory, check before overwriting", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "logpath", ")", ":", "\n", "            ", "if", "click", ".", "confirm", "(", "'Logs directory already exists in {}. Erase?'", "\n", ".", "format", "(", "logpath", ",", "default", "=", "False", ")", ")", ":", "\n", "                ", "os", ".", "system", "(", "'rm -rf '", "+", "logpath", ")", "\n", "", "else", ":", "\n", "                ", "return", "\n", "", "", "os", ".", "system", "(", "'mkdir -p '", "+", "logpath", ")", "\n", "", "main_logger", "=", "logging", ".", "getLogger", "(", "'spam_application'", ")", "\n", "main_logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "logpath", "+", "'/main_%s_%f.log'", "%", "(", "args", ".", "train_mode", ",", "time", ".", "time", "(", ")", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "main_logger", ".", "addHandler", "(", "fh", ")", "\n", "main_logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# Set up the mazebase environment", "\n", "# Load the true world knowledge that we use to build the actual environment", "\n", "knowledge_root", "=", "env_opt", "[", "'knowledge_root'", "]", "\n", "world_knowledge_file", "=", "os", ".", "path", ".", "join", "(", "knowledge_root", ",", "env_opt", "[", "'world_knowledge'", "]", "[", "args", ".", "train_mode", "]", ")", "\n", "print", "(", "\"Loading world knowledge from %s\"", "%", "world_knowledge_file", ")", "\n", "main_logger", ".", "debug", "(", "\"Loading world knowledge from %s\"", "%", "world_knowledge_file", ")", "\n", "with", "open", "(", "world_knowledge_file", ")", "as", "f", ":", "\n", "        ", "world_knowledge", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Generate the proposed knowledge ", "\n", "# TODO - should move this out of main!", "\n", "", "if", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'source'", "]", "==", "'file'", ":", "\n", "        ", "proposed_knowledge_file", "=", "os", ".", "path", ".", "join", "(", "knowledge_root", ",", "env_opt", "[", "'proposed_knowledge'", "]", "[", "args", ".", "train_mode", "]", ")", "\n", "print", "(", "\"Loading proposed knowledge from %s\"", "%", "proposed_knowledge_file", ")", "\n", "main_logger", ".", "debug", "(", "\"Loading proposed knowledge from %s\"", "%", "proposed_knowledge_file", ")", "\n", "with", "open", "(", "proposed_knowledge_file", ")", "as", "f", ":", "\n", "            ", "proposed_knowledge", "=", "json", ".", "load", "(", "f", ")", "\n", "# Randomly break rules in a way that is consistent with spawn rules", "\n", "", "", "elif", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'source'", "]", "==", "'random_spawns'", ":", "\n", "# Mode has to be fixed spawns for this to make sense", "\n", "        ", "assert", "(", "env_opt", "[", "'spawn'", "]", "[", "'mode'", "]", "==", "'fixed_spawns'", ")", "\n", "\n", "# Start with true knowledge rules", "\n", "# TODO - right now assuming we keep same number and there's a 1-1 between every proposed rule and true rule", "\n", "proposed_knowledge", "=", "[", "]", "\n", "for", "true_rule", "in", "world_knowledge", "[", "'rules'", "]", ":", "\n", "# With some probability just keep the correct rule", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'true_prob'", "]", ":", "\n", "                ", "proposed_knowledge", ".", "append", "(", "true_rule", ")", "\n", "# If not, randomly choose how many things to change", "\n", "", "else", ":", "\n", "# Choose how many things we want to change", "\n", "                ", "num_change_probs", "=", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'change_num_probs'", "]", "\n", "num_change_probs", "=", "[", "float", "(", "p", ")", "for", "p", "in", "num_change_probs", ".", "split", "(", "','", ")", "]", "\n", "assert", "(", "abs", "(", "sum", "(", "num_change_probs", ")", "-", "1", ")", "<", "1e-6", ")", "\n", "num_change", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "1", ",", "len", "(", "num_change_probs", ")", "+", "1", ")", ",", "p", "=", "num_change_probs", ")", "\n", "\n", "# Choices are drop, add, or swap", "\n", "change_type_probs", "=", "env_opt", "[", "'proposed_knowledge'", "]", "[", "'change_type_probs'", "]", "\n", "change_type_probs", "=", "[", "float", "(", "p", ")", "for", "p", "in", "change_type_probs", ".", "split", "(", "','", ")", "]", "\n", "assert", "(", "abs", "(", "sum", "(", "change_type_probs", ")", "-", "1", ")", "<", "1e-6", ")", "\n", "spawn_ind", "=", "true_rule", "[", "'spawn_ind'", "]", "\n", "spawn_items", "=", "world_knowledge", "[", "'spawns'", "]", "[", "spawn_ind", "]", "\n", "item_dict", "=", "world_knowledge", "[", "'objects'", "]", "\n", "\n", "# Randomly change one thing from the true knowledge", "\n", "tr_graph", "=", "KnowledgeSubGraph", "(", "Rule", "(", "true_rule", ")", ".", "create_triplet_corresp", "(", ")", ")", "\n", "preconds", "=", "list", "(", "tr_graph", ".", "get_preconditions", "(", ")", ")", "\n", "postconds", "=", "tr_graph", ".", "get_postconditions", "(", ")", "\n", "changed", "=", "[", "False", "for", "_", "in", "preconds", "]", "\n", "for", "_", "in", "range", "(", "num_change", ")", ":", "\n", "                    ", "change_success", "=", "False", "\n", "while", "not", "change_success", ":", "\n", "                        ", "change_type", "=", "np", ".", "random", ".", "choice", "(", "[", "'add'", ",", "'drop'", ",", "'swap'", "]", ",", "p", "=", "change_type_probs", ")", "\n", "\n", "# If it's drop, drop a random precondition, (but never action)", "\n", "if", "change_type", "==", "'drop'", ":", "\n", "                            ", "drop_ind", "=", "random", ".", "choice", "(", "range", "(", "len", "(", "preconds", ")", ")", ")", "\n", "if", "preconds", "[", "drop_ind", "]", "[", "0", "]", "==", "TripletInfo", ".", "REQUIRES_ACTION", ":", "\n", "                                ", "continue", "\n", "", "elif", "changed", "[", "drop_ind", "]", ":", "\n", "                                ", "continue", "\n", "", "else", ":", "\n", "                                ", "preconds", ".", "pop", "(", "drop_ind", ")", "\n", "changed", ".", "pop", "(", "drop_ind", ")", "\n", "change_success", "=", "True", "\n", "# If it's add, add a random item or location from the spawn list corresponding to the correct rule ", "\n", "", "", "elif", "change_type", "==", "'add'", ":", "\n", "# TODO - this is again hardcoded to our particular precond types. Need to figure out a centralized way to do this", "\n", "# For now, we're going to make it always satisfiable, but we should actually loosen this constraint at some point", "\n", "                            ", "while", "True", ":", "\n", "# TODO - hardcoded 1", "\n", "                                ", "precond_type", "=", "random", ".", "choice", "(", "[", "TripletInfo", ".", "REQUIRES_ITEM_X", "%", "1", ",", "TripletInfo", ".", "REQUIRES_LOCATION", "]", ")", "\n", "item", "=", "random", ".", "choice", "(", "list", "(", "spawn_items", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# Make sure item type matches the condition type", "\n", "# TODO - remove this restriction later too", "\n", "if", "precond_type", "==", "TripletInfo", ".", "REQUIRES_ITEM_X", "%", "1", "and", "item_dict", "[", "item", "]", "!=", "'CraftingItem'", ":", "\n", "                                    ", "continue", "\n", "", "elif", "precond_type", "==", "TripletInfo", ".", "REQUIRES_LOCATION", "and", "item_dict", "[", "item", "]", "==", "'CraftingItem'", ":", "\n", "                                    ", "continue", "\n", "\n", "# Fails if that precondition already exists", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.pytorchppo.evaluation.evaluate": [[8, 49], ["pytorchppo.a2c_ppo_acktr.envs.make_vec_envs", "pytorchppo.a2c_ppo_acktr.utils.get_vec_normalize", "pytorchppo.a2c_ppo_acktr.envs.make_vec_envs.reset", "torch.zeros", "torch.zeros", "pytorchppo.a2c_ppo_acktr.envs.make_vec_envs.close", "print", "utils.get_vec_normalize.eval", "len", "pytorchppo.a2c_ppo_acktr.envs.make_vec_envs.step", "torch.tensor", "torch.no_grad", "actor_critic.act", "len", "numpy.mean", "info.keys", "eval_episode_rewards.append"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.make_vec_envs", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_vec_normalize", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.close", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act"], ["def", "evaluate", "(", "actor_critic", ",", "ob_rms", ",", "env_name", ",", "seed", ",", "num_processes", ",", "eval_log_dir", ",", "\n", "device", ")", ":", "\n", "    ", "eval_envs", "=", "make_vec_envs", "(", "env_name", ",", "seed", "+", "num_processes", ",", "num_processes", ",", "\n", "None", ",", "eval_log_dir", ",", "device", ",", "True", ")", "\n", "\n", "vec_norm", "=", "utils", ".", "get_vec_normalize", "(", "eval_envs", ")", "\n", "if", "vec_norm", "is", "not", "None", ":", "\n", "        ", "vec_norm", ".", "eval", "(", ")", "\n", "vec_norm", ".", "ob_rms", "=", "ob_rms", "\n", "\n", "", "eval_episode_rewards", "=", "[", "]", "\n", "\n", "obs", "=", "eval_envs", ".", "reset", "(", ")", "\n", "eval_recurrent_hidden_states", "=", "torch", ".", "zeros", "(", "\n", "num_processes", ",", "actor_critic", ".", "recurrent_hidden_state_size", ",", "device", "=", "device", ")", "\n", "eval_masks", "=", "torch", ".", "zeros", "(", "num_processes", ",", "1", ",", "device", "=", "device", ")", "\n", "\n", "while", "len", "(", "eval_episode_rewards", ")", "<", "10", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "action", ",", "_", ",", "eval_recurrent_hidden_states", "=", "actor_critic", ".", "act", "(", "\n", "obs", ",", "\n", "eval_recurrent_hidden_states", ",", "\n", "eval_masks", ",", "\n", "deterministic", "=", "True", ")", "\n", "\n", "# Obser reward and next obs", "\n", "", "obs", ",", "_", ",", "done", ",", "infos", "=", "eval_envs", ".", "step", "(", "action", ")", "\n", "\n", "eval_masks", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "0.0", "]", "if", "done_", "else", "[", "1.0", "]", "for", "done_", "in", "done", "]", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "device", ")", "\n", "\n", "for", "info", "in", "infos", ":", "\n", "            ", "if", "'episode'", "in", "info", ".", "keys", "(", ")", ":", "\n", "                ", "eval_episode_rewards", ".", "append", "(", "info", "[", "'episode'", "]", "[", "'r'", "]", ")", "\n", "\n", "", "", "", "eval_envs", ".", "close", "(", ")", "\n", "\n", "print", "(", "\" Evaluation using {} episodes: mean reward {:.5f}\\n\"", ".", "format", "(", "\n", "len", "(", "eval_episode_rewards", ")", ",", "np", ".", "mean", "(", "eval_episode_rewards", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.arguments.get_args": [[6, 170], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'RL'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--algo'", ",", "default", "=", "'a2c'", ",", "help", "=", "'algorithm to use: a2c | ppo | acktr'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gail'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'do imitation learning with gail'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gail-experts-dir'", ",", "\n", "default", "=", "'./gail_experts'", ",", "\n", "help", "=", "'directory that contains expert demonstrations for gail'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gail-batch-size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "128", ",", "\n", "help", "=", "'gail batch size (default: 128)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gail-epoch'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'gail epochs (default: 5)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "7e-4", ",", "help", "=", "'learning rate (default: 7e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eps'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1e-5", ",", "\n", "help", "=", "'RMSprop optimizer epsilon (default: 1e-5)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--alpha'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.99", ",", "\n", "help", "=", "'RMSprop optimizer apha (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gamma'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.99", ",", "\n", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--use-gae'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'use generalized advantage estimation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gae-lambda'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.95", ",", "\n", "help", "=", "'gae lambda parameter (default: 0.95)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--entropy-coef'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.01", ",", "\n", "help", "=", "'entropy term coefficient (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--value-loss-coef'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'value loss coefficient (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max-grad-norm'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'max norm of gradients (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cuda-deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"sets flags for determinism when using CUDA (potentially slow!)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-processes'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "16", ",", "\n", "help", "=", "'how many training CPU processes to use (default: 16)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-steps'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ",", "\n", "help", "=", "'number of forward steps in A2C (default: 5)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--ppo-epoch'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "'number of ppo epochs (default: 4)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-mini-batch'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", "help", "=", "'number of batches for ppo (default: 32)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--clip-param'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.2", ",", "\n", "help", "=", "'ppo clip parameter (default: 0.2)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--log-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n updates (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'save interval, one save per n updates (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'eval interval, one eval per n updates (default: None)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-env-steps'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10e6", ",", "\n", "help", "=", "'number of environment steps to train (default: 10e6)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--env-name'", ",", "\n", "default", "=", "'PongNoFrameskip-v4'", ",", "\n", "help", "=", "'environment to train on (default: PongNoFrameskip-v4)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--log-dir'", ",", "\n", "default", "=", "'/tmp/gym/'", ",", "\n", "help", "=", "'directory to save agent logs (default: /tmp/gym)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save-dir'", ",", "\n", "default", "=", "'./trained_models/'", ",", "\n", "help", "=", "'directory to save agent logs (default: ./trained_models/)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-cuda'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--use-proper-time-limits'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'compute returns taking into account time limits'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--recurrent-policy'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'use a recurrent policy'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--use-linear-lr-decay'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'use a linear schedule on the learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--model-name'", ",", "\n", "default", "=", "'blah'", ",", "\n", "help", "=", "'use a linear schedule on the learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--load-dir'", ",", "\n", "default", "=", "'scratch/kdmarino/trained_models/'", ",", "\n", "help", "=", "'directory to save agent logs (default: ./trained_models/)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "assert", "args", ".", "algo", "in", "[", "'a2c'", ",", "'ppo'", ",", "'acktr'", "]", "\n", "if", "args", ".", "recurrent_policy", ":", "\n", "        ", "assert", "args", ".", "algo", "in", "[", "'a2c'", ",", "'ppo'", "]", ",", "'Recurrent policy is not implemented for ACKTR'", "\n", "\n", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.TimeLimitMask.step": [[115, 121], ["envs.TimeLimitMask.env.step"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step"], ["# Checks whether done was caused my timit limits or not", "\n", "", "class", "TimeLimitMask", "(", "gym", ".", "Wrapper", ")", ":", "\n", "    ", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "done", "and", "self", ".", "env", ".", "_max_episode_steps", "==", "self", ".", "env", ".", "_elapsed_steps", ":", "\n", "            ", "info", "[", "'bad_transition'", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.TimeLimitMask.reset": [[122, 124], ["envs.TimeLimitMask.env.reset"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset"], ["", "return", "obs", ",", "rew", ",", "done", ",", "info", "\n", "\n", "", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.MaskGoal.observation": [[128, 132], ["None"], "methods", ["None"], ["# Can be used to test recurrent policies for Reacher-v2", "\n", "", "", "class", "MaskGoal", "(", "gym", ".", "ObservationWrapper", ")", ":", "\n", "    ", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "if", "self", ".", "env", ".", "_elapsed_steps", ">", "0", ":", "\n", "            ", "observation", "[", "-", "2", ":", "0", "]", "=", "0", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.TransposeObs.__init__": [[135, 140], ["gym.ObservationWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["\n", "", "", "class", "TransposeObs", "(", "gym", ".", "ObservationWrapper", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Transpose observation space (base class)\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.TransposeImage.__init__": [[143, 158], ["envs.TransposeObs.__init__", "gym.spaces.box.Box", "len", "str"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["\n", "", "", "class", "TransposeImage", "(", "TransposeObs", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ",", "op", "=", "[", "2", ",", "0", ",", "1", "]", ")", ":", "\n", "        ", "\"\"\"\n        Transpose observation space for images\n        \"\"\"", "\n", "super", "(", "TransposeImage", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "assert", "len", "(", "op", ")", "==", "3", ",", "f\"Error: Operation, {str(op)}, must be dim3\"", "\n", "self", ".", "op", "=", "op", "\n", "obs_shape", "=", "self", ".", "observation_space", ".", "shape", "\n", "self", ".", "observation_space", "=", "Box", "(", "\n", "self", ".", "observation_space", ".", "low", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "self", ".", "observation_space", ".", "high", "[", "0", ",", "0", ",", "0", "]", ",", "[", "\n", "obs_shape", "[", "self", ".", "op", "[", "0", "]", "]", ",", "obs_shape", "[", "self", ".", "op", "[", "1", "]", "]", ",", "\n", "obs_shape", "[", "self", ".", "op", "[", "2", "]", "]", "\n", "]", ",", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.TransposeImage.observation": [[159, 161], ["ob.transpose"], "methods", ["None"], ["dtype", "=", "self", ".", "observation_space", ".", "dtype", ")", "\n", "\n", "", "def", "observation", "(", "self", ",", "ob", ")", ":", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorch.__init__": [[164, 168], ["baselines.common.vec_env.VecEnvWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["\n", "", "", "class", "VecPyTorch", "(", "VecEnvWrapper", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "venv", ",", "device", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "super", "(", "VecPyTorch", ",", "self", ")", ".", "__init__", "(", "venv", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorch.reset": [[170, 174], ["envs.VecPyTorch.venv.reset", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to"], ["# TODO: Fix data types", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorch.step_async": [[175, 181], ["isinstance", "actions.squeeze.squeeze.cpu().numpy", "envs.VecPyTorch.venv.step_async", "actions.squeeze.squeeze.squeeze", "actions.squeeze.squeeze.cpu"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorch.step_async"], ["return", "obs", "\n", "\n", "", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "if", "isinstance", "(", "actions", ",", "torch", ".", "LongTensor", ")", ":", "\n", "# Squeeze the dimension for discrete actions", "\n", "            ", "actions", "=", "actions", ".", "squeeze", "(", "1", ")", "\n", "", "actions", "=", "actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorch.step_wait": [[182, 187], ["envs.VecPyTorch.venv.step_wait", "torch.from_numpy().float().to", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().float", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.step_wait", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to"], ["self", ".", "venv", ".", "step_async", "(", "actions", ")", "\n", "\n", "", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "reward", "=", "torch", ".", "from_numpy", "(", "reward", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "float", "(", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.__init__": [[190, 193], ["baselines.common.vec_env.vec_normalize.VecNormalize.__init__"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["\n", "\n", "", "", "class", "VecNormalize", "(", "VecNormalize_", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize._obfilt": [[194, 204], ["numpy.clip", "envs.VecNormalize.ob_rms.update", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update"], ["        ", "super", "(", "VecNormalize", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "training", "=", "True", "\n", "\n", "", "def", "_obfilt", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "ob_rms", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "ob_rms", ".", "update", "(", "obs", ")", "\n", "", "obs", "=", "np", ".", "clip", "(", "(", "obs", "-", "self", ".", "ob_rms", ".", "mean", ")", "/", "\n", "np", ".", "sqrt", "(", "self", ".", "ob_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "\n", "-", "self", ".", "clipob", ",", "self", ".", "clipob", ")", "\n", "return", "obs", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train": [[205, 207], ["None"], "methods", ["None"], ["", "else", ":", "\n", "            ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval": [[208, 210], ["None"], "methods", ["None"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.__init__": [[215, 233], ["numpy.repeat", "numpy.repeat", "torch.zeros().to", "gym.spaces.Box", "baselines.common.vec_env.VecEnvWrapper.__init__", "torch.device", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["# Derived from", "\n", "# https://github.com/openai/baselines/blob/master/baselines/common/vec_env/vec_frame_stack.py", "\n", "", "", "class", "VecPyTorchFrameStack", "(", "VecEnvWrapper", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "venv", ",", "nstack", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "self", ".", "nstack", "=", "nstack", "\n", "\n", "wos", "=", "venv", ".", "observation_space", "# wrapped ob space", "\n", "self", ".", "shape_dim0", "=", "wos", ".", "shape", "[", "0", "]", "\n", "\n", "low", "=", "np", ".", "repeat", "(", "wos", ".", "low", ",", "self", ".", "nstack", ",", "axis", "=", "0", ")", "\n", "high", "=", "np", ".", "repeat", "(", "wos", ".", "high", ",", "self", ".", "nstack", ",", "axis", "=", "0", ")", "\n", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "self", ".", "stacked_obs", "=", "torch", ".", "zeros", "(", "(", "venv", ".", "num_envs", ",", ")", "+", "\n", "low", ".", "shape", ")", ".", "to", "(", "device", ")", "\n", "\n", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.step_wait": [[234, 243], ["envs.VecPyTorchFrameStack.venv.step_wait", "enumerate"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.step_wait"], ["low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "venv", ".", "observation_space", ".", "dtype", ")", "\n", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ",", "observation_space", "=", "observation_space", ")", "\n", "\n", "", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "rews", ",", "news", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "self", ".", "stacked_obs", "[", ":", ",", ":", "-", "self", ".", "shape_dim0", "]", "=", "self", ".", "stacked_obs", "[", ":", ",", "self", ".", "shape_dim0", ":", "]", "\n", "for", "(", "i", ",", "new", ")", "in", "enumerate", "(", "news", ")", ":", "\n", "            ", "if", "new", ":", "\n", "                ", "self", ".", "stacked_obs", "[", "i", "]", "=", "0", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset": [[244, 252], ["envs.VecPyTorchFrameStack.venv.reset", "torch.zeros", "envs.VecPyTorchFrameStack.stacked_obs.zero_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.reset"], ["", "", "self", ".", "stacked_obs", "[", ":", ",", "-", "self", ".", "shape_dim0", ":", "]", "=", "obs", "\n", "return", "self", ".", "stacked_obs", ",", "rews", ",", "news", ",", "infos", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "if", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", ":", "\n", "            ", "self", ".", "stacked_obs", "=", "torch", ".", "zeros", "(", "self", ".", "stacked_obs", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "stacked_obs", ".", "zero_", "(", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.close": [[253, 255], ["envs.VecPyTorchFrameStack.venv.close"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecPyTorchFrameStack.close"], ["", "self", ".", "stacked_obs", "[", ":", ",", "-", "self", ".", "shape_dim0", ":", "]", "=", "obs", "\n", "return", "self", ".", "stacked_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.make_env": [[32, 75], ["env_id.startswith", "baselines.common.atari_wrappers.wrap_deepmind.seed", "env_id.split", "dm_control2gym.make", "gym.make", "hasattr", "isinstance", "baselines.common.atari_wrappers.make_atari", "str().find", "envs.TimeLimitMask", "baselines.bench.Monitor", "envs.TransposeImage", "os.path.join", "len", "baselines.common.atari_wrappers.wrap_deepmind", "len", "NotImplementedError", "len", "str", "str"], "function", ["None"], ["\n", "", "def", "make_env", "(", "env_id", ",", "seed", ",", "rank", ",", "log_dir", ",", "allow_early_resets", ",", "lang_model", ",", "device", ",", "vocabulary", ",", "vocab_weights", ")", ":", "\n", "    ", "def", "_thunk", "(", ")", ":", "\n", "        ", "if", "env_id", ".", "startswith", "(", "\"dm\"", ")", ":", "\n", "            ", "_", ",", "domain", ",", "task", "=", "env_id", ".", "split", "(", "'.'", ")", "\n", "env", "=", "dm_control2gym", ".", "make", "(", "domain_name", "=", "domain", ",", "task_name", "=", "task", ")", "\n", "", "else", ":", "\n", "            ", "env", "=", "gym", ".", "make", "(", "env_id", ",", "lang_model", "=", "lang_model", ",", "device", "=", "device", ",", "vocabulary", "=", "vocabulary", ",", "vocab_weights", "=", "vocab_weights", ")", "\n", "\n", "", "is_atari", "=", "hasattr", "(", "gym", ".", "envs", ",", "'atari'", ")", "and", "isinstance", "(", "\n", "env", ".", "unwrapped", ",", "gym", ".", "envs", ".", "atari", ".", "atari_env", ".", "AtariEnv", ")", "\n", "if", "is_atari", ":", "\n", "            ", "env", "=", "make_atari", "(", "env_id", ")", "\n", "\n", "", "env", ".", "seed", "(", "seed", "+", "rank", ")", "\n", "\n", "obs_shape", "=", "env", ".", "observation_space", ".", "shape", "\n", "\n", "if", "str", "(", "env", ".", "__class__", ".", "__name__", ")", ".", "find", "(", "'TimeLimit'", ")", ">=", "0", ":", "\n", "            ", "env", "=", "TimeLimitMask", "(", "env", ")", "\n", "\n", "", "if", "log_dir", "is", "not", "None", ":", "\n", "            ", "env", "=", "bench", ".", "Monitor", "(", "\n", "env", ",", "\n", "os", ".", "path", ".", "join", "(", "log_dir", ",", "str", "(", "rank", ")", ")", ",", "\n", "allow_early_resets", "=", "allow_early_resets", ")", "\n", "", "'''\n        if is_atari:\n            if len(env.observation_space.shape) == 3:\n                env = wrap_deepmind(env)\n        elif len(env.observation_space.shape) == 3:\n            raise NotImplementedError(\n                \"CNN models work only for atari,\\n\"\n                \"please use a custom wrapper for a custom pixel input env.\\n\"\n                \"See wrap_deepmind for an example.\")\n\n        # If the input has shape (W,H,3), wrap for PyTorch convolutions\n        obs_shape = env.observation_space.shape\n        if len(obs_shape) == 3 and obs_shape[2] in [1, 3]:\n            env = TransposeImage(env, op=[2, 0, 1])\n        '''", "\n", "return", "env", "\n", "\n", "", "return", "_thunk", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.make_vec_envs": [[77, 111], ["print", "envs.VecPyTorch", "envs.make_env", "len", "baselines.common.vec_env.shmem_vec_env.ShmemVecEnv", "baselines.common.vec_env.dummy_vec_env.DummyVecEnv", "len", "envs.VecPyTorchFrameStack", "range", "envs.VecNormalize", "envs.VecNormalize", "len", "envs.VecPyTorchFrameStack"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.make_env"], ["\n", "", "def", "make_vec_envs", "(", "env_name", ",", "\n", "seed", ",", "\n", "num_processes", ",", "\n", "gamma", ",", "\n", "log_dir", ",", "\n", "device", ",", "\n", "allow_early_resets", ",", "\n", "lang_model", "=", "None", ",", "\n", "vocabulary", "=", "None", ",", "\n", "vocab_weights", "=", "None", ",", "\n", "num_frame_stack", "=", "None", ")", ":", "\n", "    ", "envs", "=", "[", "\n", "make_env", "(", "env_name", ",", "seed", ",", "i", ",", "log_dir", ",", "allow_early_resets", ",", "lang_model", ",", "device", ",", "vocabulary", ",", "vocab_weights", ")", "\n", "for", "i", "in", "range", "(", "num_processes", ")", "\n", "]", "\n", "\n", "if", "len", "(", "envs", ")", ">", "1", ":", "\n", "        ", "envs", "=", "ShmemVecEnv", "(", "envs", ",", "context", "=", "'fork'", ")", "\n", "", "else", ":", "\n", "        ", "envs", "=", "DummyVecEnv", "(", "envs", ")", "\n", "\n", "#if len(envs.observation_space.shape) == 1:", "\n", "#    if gamma is None:", "\n", "#        envs = VecNormalize(envs, ret=False)", "\n", "#    else:", "\n", "#        envs = VecNormalize(envs, gamma=gamma)", "\n", "\n", "", "envs", "=", "VecPyTorch", "(", "envs", ",", "device", ")", "\n", "\n", "if", "num_frame_stack", "is", "not", "None", ":", "\n", "        ", "envs", "=", "VecPyTorchFrameStack", "(", "envs", ",", "num_frame_stack", ",", "device", ")", "\n", "", "elif", "len", "(", "envs", ".", "observation_space", ".", "shape", ")", "==", "3", ":", "\n", "        ", "envs", "=", "VecPyTorchFrameStack", "(", "envs", ",", "4", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Vocabulary.__init__": [[19, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2idx", "=", "{", "}", "\n", "self", ".", "idx2word", "=", "{", "}", "\n", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Vocabulary.add_word": [[24, 29], ["None"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "word2idx", ":", "\n", "            ", "self", ".", "word2idx", "[", "word", "]", "=", "self", ".", "idx", "\n", "self", ".", "idx2word", "[", "self", ".", "idx", "]", "=", "word", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Vocabulary.__call__": [[30, 34], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "word2idx", ":", "\n", "            ", "return", "self", ".", "word2idx", "[", "'<unk>'", "]", "\n", "", "return", "self", ".", "word2idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Vocabulary.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Flatten.forward": [[40, 42], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Policy.__init__": [[45, 70], ["torch.Module.__init__", "base", "pytorchppo.a2c_ppo_acktr.distributions.Categorical", "pytorchppo.a2c_ppo_acktr.distributions.DiagGaussian", "pytorchppo.a2c_ppo_acktr.distributions.Bernoulli"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obs_shape", ",", "action_space", ",", "base", "=", "None", ",", "base_kwargs", "=", "None", ")", ":", "\n", "        ", "super", "(", "Policy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_kwargs", "is", "None", ":", "\n", "            ", "base_kwargs", "=", "{", "}", "\n", "", "if", "base", "is", "None", ":", "\n", "            ", "base", "=", "MazeBaseBase", "\n", "#if len(obs_shape) == 3:", "\n", "#    base = CNNBase", "\n", "#elif len(obs_shape) == 1:", "\n", "#    base = MLPBase", "\n", "#else:", "\n", "#    raise NotImplementedError", "\n", "", "self", ".", "base", "=", "base", "(", "obs_shape", "[", "0", "]", ",", "**", "base_kwargs", ")", "\n", "\n", "if", "action_space", ".", "__class__", ".", "__name__", "==", "\"Discrete\"", ":", "\n", "            ", "num_outputs", "=", "action_space", ".", "n", "\n", "self", ".", "dist", "=", "Categorical", "(", "self", ".", "base", ".", "output_size", ",", "num_outputs", ")", "\n", "", "elif", "action_space", ".", "__class__", ".", "__name__", "==", "\"Box\"", ":", "\n", "            ", "num_outputs", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "dist", "=", "DiagGaussian", "(", "self", ".", "base", ".", "output_size", ",", "num_outputs", ")", "\n", "", "elif", "action_space", ".", "__class__", ".", "__name__", "==", "\"MultiBinary\"", ":", "\n", "            ", "num_outputs", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "dist", "=", "Bernoulli", "(", "self", ".", "base", ".", "output_size", ",", "num_outputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Policy.is_recurrent": [[71, 74], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_recurrent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base", ".", "is_recurrent", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Policy.recurrent_hidden_state_size": [[75, 79], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_hidden_state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Size of rnn_hx.\"\"\"", "\n", "return", "self", ".", "base", ".", "recurrent_hidden_state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Policy.forward": [[80, 82], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Policy.act": [[83, 96], ["3statemodel.Policy.base", "3statemodel.Policy.dist", "3statemodel.Policy.log_probs", "3statemodel.Policy.entropy().mean", "3statemodel.Policy.mode", "3statemodel.Policy.sample", "3statemodel.Policy.entropy"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv3.sample"], ["", "def", "act", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "action", "=", "dist", ".", "mode", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "dist_entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "value", ",", "action", ",", "action_log_probs", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Policy.get_value": [[97, 100], ["3statemodel.Policy.base"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "value", ",", "_", ",", "_", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Policy.evaluate_actions": [[101, 109], ["3statemodel.Policy.base", "3statemodel.Policy.dist", "3statemodel.Policy.log_probs", "3statemodel.Policy.entropy().mean", "3statemodel.Policy.entropy"], "methods", ["None"], ["", "def", "evaluate_actions", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "action", ")", ":", "\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "dist_entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "value", ",", "action_log_probs", ",", "dist_entropy", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.NNBase.__init__": [[112, 125], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU", "3statemodel.NNBase.gru.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "recurrent", ",", "recurrent_input_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "NNBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_hidden_size", "=", "hidden_size", "\n", "self", ".", "_recurrent", "=", "recurrent", "\n", "\n", "if", "recurrent", ":", "\n", "            ", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "recurrent_input_size", ",", "hidden_size", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "gru", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.NNBase.is_recurrent": [[126, 129], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "is_recurrent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_recurrent", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.NNBase.recurrent_hidden_state_size": [[130, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_hidden_state_size", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_recurrent", ":", "\n", "            ", "return", "self", ".", "_hidden_size", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.NNBase.output_size": [[136, 139], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.NNBase._forward_gru": [[140, 196], ["x.view.view.size", "hxs.squeeze.squeeze.size", "3statemodel.NNBase.gru", "x.view.view.squeeze", "hxs.squeeze.squeeze.squeeze", "hxs.squeeze.squeeze.size", "int", "x.view.view.view", "masks.view.view.view", "hxs.squeeze.squeeze.unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view.view.view", "hxs.squeeze.squeeze.squeeze", "x.view.view.unsqueeze", "x.view.view.size", "has_zeros.dim", "3statemodel.NNBase.gru", "outputs.append", "x.view.view.size", "len", "has_zeros.item", "masks[].view"], "methods", ["None"], ["", "def", "_forward_gru", "(", "self", ",", "x", ",", "hxs", ",", "masks", ")", ":", "\n", "        ", "if", "x", ".", "size", "(", "0", ")", "==", "hxs", ".", "size", "(", "0", ")", ":", "\n", "            ", "x", ",", "hxs", "=", "self", ".", "gru", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "(", "hxs", "*", "masks", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "x", "=", "x", ".", "squeeze", "(", "0", ")", "\n", "hxs", "=", "hxs", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "# x is a (T, N, -1) tensor that has been flatten to (T * N, -1)", "\n", "            ", "N", "=", "hxs", ".", "size", "(", "0", ")", "\n", "T", "=", "int", "(", "x", ".", "size", "(", "0", ")", "/", "N", ")", "\n", "\n", "# unflatten", "\n", "x", "=", "x", ".", "view", "(", "T", ",", "N", ",", "x", ".", "size", "(", "1", ")", ")", "\n", "\n", "# Same deal with masks", "\n", "masks", "=", "masks", ".", "view", "(", "T", ",", "N", ")", "\n", "\n", "# Let's figure out which steps in the sequence have a zero for any agent", "\n", "# We will always assume t=0 has a zero in it as that makes the logic cleaner", "\n", "has_zeros", "=", "(", "(", "masks", "[", "1", ":", "]", "==", "0.0", ")", ".", "any", "(", "dim", "=", "-", "1", ")", "\n", ".", "nonzero", "(", ")", "\n", ".", "squeeze", "(", ")", "\n", ".", "cpu", "(", ")", ")", "\n", "\n", "# +1 to correct the masks[1:]", "\n", "if", "has_zeros", ".", "dim", "(", ")", "==", "0", ":", "\n", "# Deal with scalar", "\n", "                ", "has_zeros", "=", "[", "has_zeros", ".", "item", "(", ")", "+", "1", "]", "\n", "", "else", ":", "\n", "                ", "has_zeros", "=", "(", "has_zeros", "+", "1", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# add t=0 and t=T to the list", "\n", "", "has_zeros", "=", "[", "0", "]", "+", "has_zeros", "+", "[", "T", "]", "\n", "\n", "hxs", "=", "hxs", ".", "unsqueeze", "(", "0", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "has_zeros", ")", "-", "1", ")", ":", "\n", "# We can now process steps that don't have any zeros in masks together!", "\n", "# This is much faster", "\n", "                ", "start_idx", "=", "has_zeros", "[", "i", "]", "\n", "end_idx", "=", "has_zeros", "[", "i", "+", "1", "]", "\n", "\n", "rnn_scores", ",", "hxs", "=", "self", ".", "gru", "(", "\n", "x", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "hxs", "*", "masks", "[", "start_idx", "]", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "\n", "outputs", ".", "append", "(", "rnn_scores", ")", "\n", "\n", "# assert len(outputs) == T", "\n", "# x is a (T, N, -1) tensor", "\n", "", "x", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "T", "*", "N", ",", "-", "1", ")", "\n", "hxs", "=", "hxs", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "return", "x", ",", "hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.CNNBase.__init__": [[199, 217], ["3statemodel.NNBase.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "init_", "3statemodel.CNNBase.train", "pytorchppo.a2c_ppo_acktr.utils.init", "init_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "init_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "init_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "3statemodel.Flatten", "init_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "pytorchppo.a2c_ppo_acktr.utils.init", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "recurrent", "=", "False", ",", "hidden_size", "=", "512", ")", ":", "\n", "        ", "super", "(", "CNNBase", ",", "self", ")", ".", "__init__", "(", "recurrent", ",", "hidden_size", ",", "hidden_size", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ",", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "num_inputs", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "stride", "=", "1", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "Flatten", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "32", "*", "7", "*", "7", ",", "hidden_size", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ")", "\n", "\n", "self", ".", "critic_linear", "=", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.CNNBase.forward": [[218, 225], ["3statemodel.CNNBase.main", "3statemodel.CNNBase._forward_gru", "3statemodel.CNNBase.critic_linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.gail_experts.convert_to_pytorch.main", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.NNBase._forward_gru"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "x", "=", "self", ".", "main", "(", "inputs", "/", "255.0", ")", "\n", "\n", "if", "self", ".", "is_recurrent", ":", "\n", "            ", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ",", "masks", ")", "\n", "\n", "", "return", "self", ".", "critic_linear", "(", "x", ")", ",", "x", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.MazeBaseNet.__init__": [[227, 241], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "MazeBaseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "300", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "500", ",", "128", ")", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "128", ",", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.MazeBaseNet.forward": [[242, 267], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "3statemodel.MazeBaseNet.fc1", "3statemodel.MazeBaseNet.fc2", "3statemodel.MazeBaseNet.fc3", "3statemodel.MazeBaseNet.fc4", "3statemodel.MazeBaseNet.fc5", "3statemodel.MazeBaseNet.fc_inv", "3statemodel.MazeBaseNet.fc55", "3statemodel.MazeBaseNet.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "#temp_inv = temp_inv.view(-1, 50*10)", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "features", ")", ")", "\n", "\n", "return", "c6", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.GRU.__init__": [[288, 301], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "3statemodel.GRU.embedding.load_state_dict", "torch.GRU", "torch.GRU", "torch.GRU", "len", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "embed_weights", ",", "emb_size", ",", "hidden_size", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", "GRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "len", "(", "self", ".", "vocab", ")", "+", "1", ",", "\n", "embedding_dim", "=", "emb_size", ",", "\n", "padding_idx", "=", "len", "(", "self", ".", "vocab", ")", ")", "\n", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_size", "=", "emb_size", ",", "hidden_size", "=", "hidden_size", ",", "num_layers", "=", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.GRU.forward": [[302, 309], ["3statemodel.process_lengths", "3statemodel.GRU.embedding", "3statemodel.GRU.rnn.flatten_parameters", "3statemodel.GRU.rnn", "3statemodel.select_last"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.process_lengths", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.select_last"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "lengths", "=", "process_lengths", "(", "input", ")", "\n", "x", "=", "self", ".", "embedding", "(", "input", ")", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "output", ",", "hn", "=", "self", ".", "rnn", "(", "x", ")", "\n", "output", "=", "select_last", "(", "output", ",", "lengths", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.AllObsPredictAtten.__init__": [[311, 372], ["torch.Module.__init__", "3statemodel.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "3statemodel.SwitchModule", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "net_input_sizes.append", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "vocab_words", ",", "vocab_weights", ",", "with_pred", "=", "False", ",", "init_fn", "=", "None", ",", "opt", "=", "None", ",", "env_vocab", "=", "None", ",", "max_bounds", "=", "None", ",", "num_stack", "=", "1", ",", "add_net_pred", "=", "False", ",", "pred_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AllObsPredictAtten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#self.lang_model = lang_model", "\n", "\n", "# Set state vars", "\n", "self", ".", "hid_sz", "=", "32", "\n", "self", ".", "use_dropout", "=", "False", "\n", "self", ".", "embed_dim", "=", "300", "\n", "embed_dim", "=", "300", "\n", "\n", "self", ".", "vocab", "=", "vocab_words", "\n", "\n", "seq2vec_opt", "=", "{", "}", "\n", "seq2vec_opt", "[", "'arch'", "]", "=", "'bow'", "\n", "seq2vec_opt", "[", "'dropout'", "]", "=", "False", "\n", "seq2vec_opt", "[", "'emb_size'", "]", "=", "32", "\n", "seq2vec_opt", "[", "'hidden_size'", "]", "=", "32", "\n", "#self.seq2vec = BOW(vocab_words, vocab_weights, 300)", "\n", "self", ".", "seq2vec", "=", "GRU", "(", "vocab_words", ",", "vocab_weights", ",", "embed_dim", ",", "32", ",", "1", ")", "\n", "\n", "#fc layers", "\n", "self", ".", "fc_gridembed", "=", "nn", ".", "Linear", "(", "25", "*", "embed_dim", ",", "32", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "25", "*", "7", ",", "32", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "10", "*", "embed_dim", ",", "32", ")", "# 10 inventory slots", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "32", ")", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "300", ",", "32", ")", "\n", "self", ".", "fc_onehot_embed", "=", "nn", ".", "Linear", "(", "7", ",", "32", ")", "\n", "self", ".", "fc_comb", "=", "nn", ".", "Linear", "(", "25", "*", "32", ",", "32", ")", "\n", "self", ".", "fc_inv_first", "=", "nn", ".", "Linear", "(", "300", ",", "32", ")", "\n", "self", ".", "fc_inv_second", "=", "nn", ".", "Linear", "(", "32", "*", "10", ",", "32", ")", "\n", "\n", "# Decide what inputs go in net and key", "\n", "\n", "# key is for attention", "\n", "key_sz", "=", "32", "# 32 for GRU and 300 for BOW", "\n", "self", ".", "key_inputs", "=", "[", "'wids'", "]", "\n", "\n", "# net is for regular input", "\n", "#self.net_inputs = ['grid_embed', 'grid_onehot', 'inv', 'goal']", "\n", "self", ".", "net_inputs", "=", "[", "'grid_comb'", ",", "'inv'", ",", "'goal'", "]", "\n", "net_input_sizes", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_input_sizes", ".", "append", "(", "self", ".", "hid_sz", ")", "\n", "\n", "# Make batch modules", "\n", "", "module_opt", "=", "{", "}", "\n", "module_opt", "[", "'num_modules'", "]", "=", "12", "#16", "\n", "module_opt", "[", "'switch_sz'", "]", "=", "key_sz", "\n", "module_opt", "[", "'hid_sz'", "]", "=", "self", ".", "hid_sz", "\n", "module_opt", "[", "'num_layer'", "]", "=", "2", "\n", "self", ".", "batch_modules", "=", "SwitchModule", "(", "net_input_sizes", ",", "len", "(", "net_input_sizes", ")", ",", "module_opt", ")", "\n", "\n", "# Transfer layers", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "self", ".", "fc_final", "=", "nn", ".", "Linear", "(", "32", ",", "8", ")", "# was 9", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.AllObsPredictAtten.forward": [[374, 423], ["x[].reshape", "x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "3statemodel.AllObsPredictAtten.batch_modules", "3statemodel.AllObsPredictAtten.drop", "3statemodel.AllObsPredictAtten.fc_embed", "3statemodel.AllObsPredictAtten.fc_onehot_embed", "3statemodel.AllObsPredictAtten.fc_comb", "3statemodel.AllObsPredictAtten.fc_inv_first", "3statemodel.AllObsPredictAtten.fc_inv_second", "3statemodel.AllObsPredictAtten.fc_goal", "torch.cat.append", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hiddens", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "10", ",", "300", ")", ")", "\n", "\n", "# seqs, hiddens = lang_model.get_hidden_state_new(grid_embedding, grid_onehot, inventory, goal, self.vocab)         ", "\n", "\n", "#combined grid embedding", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot_embed", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", "*", "self", ".", "hid_sz", ")", "\n", "grid_comb", "=", "F", ".", "relu", "(", "self", ".", "fc_comb", "(", "grid_comb", ")", ")", "\n", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv_first", "(", "inventory", ")", ")", "\n", "inventory", "=", "c3", ".", "view", "(", "-", "1", ",", "10", "*", "self", ".", "hid_sz", ")", "\n", "inv_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_inv_second", "(", "inventory", ")", ")", "\n", "goal_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "\n", "# Get key and net inputs", "\n", "key", "=", "[", "]", "\n", "if", "'wids'", "in", "self", ".", "key_inputs", ":", "\n", "            ", "key", ".", "append", "(", "hiddens", ")", "\n", "", "key", "=", "torch", ".", "cat", "(", "key", ",", "1", ")", "\n", "\n", "net_inputs", "=", "(", ")", "\n", "if", "'grid_comb'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_comb", ",", ")", "\n", "", "if", "'grid_embed'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_embed", ",", ")", "\n", "", "if", "'grid_onehot'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_1hot_embed", ",", ")", "\n", "", "if", "'inv'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "inv_embed", ",", ")", "\n", "", "if", "'goal'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "goal_embed", ",", ")", "\n", "\n", "# Forward through module net", "\n", "", "x", "=", "self", ".", "batch_modules", "(", "(", "net_inputs", ",", "key", ")", ")", "\n", "\n", "# Optionally add dropout", "\n", "#if self.use_dropout:", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.MazeBaseNetLang.__init__": [[427, 481], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "3statemodel.MazeBaseNetLang.embedding.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "3statemodel.SwitchModule", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "net_input_sizes.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "lang_model", ",", "vocab_words", ",", "vocab_weights", ")", ":", "\n", "        ", "super", "(", "MazeBaseNetLang", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lang_model", "=", "lang_model", "\n", "\n", "# Set state vars", "\n", "self", ".", "embed_dim", "=", "300", "\n", "self", ".", "hid_sz", "=", "hidden_size", "\n", "self", ".", "use_dropout", "=", "False", "\n", "\n", "#self.seq2vec = BOW(vocab_words, vocab_weights, 300)", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "len", "(", "vocab_words", ")", "+", "1", ",", "\n", "embedding_dim", "=", "self", ".", "embed_dim", ",", "padding_idx", "=", "len", "(", "vocab_words", ")", ")", "\n", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "vocab_weights", "}", ")", "\n", "\n", "self", ".", "vocab", "=", "vocab_words", "\n", "\n", "#fc layers", "\n", "self", ".", "fc_gridembed", "=", "nn", ".", "Linear", "(", "25", "*", "self", ".", "embed_dim", ",", "32", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "25", "*", "7", ",", "32", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "10", "*", "self", ".", "embed_dim", ",", "32", ")", "# 10 inventory slots", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "32", ")", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "300", ",", "32", ")", "\n", "self", ".", "fc_onehot_embed", "=", "nn", ".", "Linear", "(", "7", ",", "32", ")", "\n", "self", ".", "fc_comb", "=", "nn", ".", "Linear", "(", "25", "*", "32", ",", "32", ")", "\n", "self", ".", "fc_inv_first", "=", "nn", ".", "Linear", "(", "300", ",", "32", ")", "\n", "self", ".", "fc_inv_second", "=", "nn", ".", "Linear", "(", "32", "*", "10", ",", "32", ")", "\n", "\n", "# Decide what inputs go in net and key", "\n", "\n", "# key is for attention", "\n", "key_sz", "=", "300", "\n", "self", ".", "key_inputs", "=", "[", "'wids'", "]", "\n", "\n", "# net is for regular input", "\n", "self", ".", "net_inputs", "=", "[", "'grid_embed'", ",", "'grid_onehot'", ",", "'inv'", ",", "'goal'", "]", "\n", "#self.net_inputs = ['grid_comb', 'inv', 'goal']", "\n", "net_input_sizes", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_input_sizes", ".", "append", "(", "self", ".", "hid_sz", ")", "\n", "\n", "# Make batch modules", "\n", "", "module_opt", "=", "{", "}", "\n", "module_opt", "[", "'num_modules'", "]", "=", "12", "#16", "\n", "module_opt", "[", "'switch_sz'", "]", "=", "key_sz", "\n", "module_opt", "[", "'hid_sz'", "]", "=", "self", ".", "hid_sz", "\n", "module_opt", "[", "'num_layer'", "]", "=", "2", "\n", "self", ".", "batch_modules", "=", "SwitchModule", "(", "net_input_sizes", ",", "len", "(", "net_input_sizes", ")", ",", "module_opt", ")", "\n", "\n", "# Transfer layers", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.MazeBaseNetLang.forward": [[482, 543], ["x[].reshape", "x[].reshape", "x[].reshape", "3statemodel.MazeBaseNetLang.lang_model.get_hidden_state", "numpy.asarray", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "3statemodel.MazeBaseNetLang.embedding", "3statemodel.MazeBaseNetLang.sum", "grid_embedding.view.view.view", "torch.relu", "torch.relu", "torch.relu", "grid_onehot.view.view.view", "torch.relu", "torch.relu", "torch.relu", "inventory.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "3statemodel.MazeBaseNetLang.batch_modules", "numpy.array", "3statemodel.MazeBaseNetLang.fc_gridembed", "3statemodel.MazeBaseNetLang.fc_onehot", "3statemodel.MazeBaseNetLang.fc_inv", "3statemodel.MazeBaseNetLang.fc_goal", "torch.cat.append", "torch.cat.append", "torch.cat.append", "3statemodel.MazeBaseNetLang.drop", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttention.get_hidden_state"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "#grid_embedding = x[:,:5*5*300].reshape((x.shape[0], 5,5,300))", "\n", "#grid_onehot = x[:, 5*5*300:(5*5*300)+(5*5*7)].reshape((x.shape[0], 5,5,7))", "\n", "#goal = x[:, (5*5*300)+(5*5*7) : (5*5*300)+(5*5*7)+300]", "\n", "#inventory = x[:, (5*5*300)+(5*5*7)+300:].reshape((x.shape[0], 10, 300))", "\n", "\n", "        ", "k_prev", "=", "x", "[", ":", ",", "0", "]", "\n", "top_k", "=", "x", "[", ":", ",", "1", "]", "\n", "\n", "grid_embedding", "=", "x", "[", ":", ",", "2", ":", "2", "+", "(", "5", "*", "5", "*", "300", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "2", "+", "(", "5", "*", "5", "*", "300", ")", ":", "2", "+", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "2", "+", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "2", "+", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "2", "+", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "10", ",", "300", ")", ")", "\n", "\n", "#get language here!", "\n", "all_sampled_ids", "=", "self", ".", "lang_model", ".", "get_hidden_state", "(", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "k_prev", ",", "top_k", ",", "self", ".", "vocab", ")", "\n", "bow_ids", "=", "[", "np", ".", "array", "(", "sent", "+", "[", "len", "(", "self", ".", "vocab", ")", "]", "*", "(", "20", "-", "len", "(", "sent", ")", ")", ")", "for", "sent", "in", "all_sampled_ids", "]", "\n", "bow_ids", "=", "np", ".", "asarray", "(", "bow_ids", ",", "dtype", "=", "int", ")", "\n", "bow_ids", "=", "torch", ".", "from_numpy", "(", "bow_ids", ")", ".", "cuda", "(", ")", "\n", "\n", "# Encode sequence", "\n", "output", "=", "self", ".", "embedding", "(", "bow_ids", ")", "\n", "statement", "=", "output", ".", "sum", "(", "1", ")", "\n", "#statement = self.seq2vec(bow_ids)", "\n", "\n", "grid_embedding", "=", "grid_embedding", ".", "view", "(", "-", "1", ",", "25", "*", "self", ".", "embed_dim", ")", "\n", "grid_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_gridembed", "(", "grid_embedding", ")", ")", "\n", "grid_onehot", "=", "grid_onehot", ".", "view", "(", "-", "1", ",", "25", "*", "7", ")", "\n", "grid_1hot_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "inventory", "=", "inventory", ".", "view", "(", "-", "1", ",", "10", "*", "self", ".", "embed_dim", ")", "\n", "inv_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "goal_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "\n", "\n", "# Get key and net inputs", "\n", "key", "=", "[", "]", "\n", "if", "'wids'", "in", "self", ".", "key_inputs", ":", "\n", "            ", "key", ".", "append", "(", "statement", ")", "\n", "", "key", "=", "torch", ".", "cat", "(", "key", ",", "1", ")", "\n", "\n", "net_inputs", "=", "(", ")", "\n", "if", "'grid_comb'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_comb", ",", ")", "\n", "", "if", "'grid_embed'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_embed", ",", ")", "\n", "", "if", "'grid_onehot'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_1hot_embed", ",", ")", "\n", "", "if", "'inv'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "inv_embed", ",", ")", "\n", "", "if", "'goal'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "goal_embed", ",", ")", "\n", "\n", "# Forward through module net", "\n", "", "x", "=", "self", ".", "batch_modules", "(", "(", "net_inputs", ",", "key", ")", ")", "\n", "\n", "# Optionally add dropout", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.SwitchModule.__init__": [[549, 572], ["torch.Module.__init__", "3statemodel.ListModule", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax", "len", "3statemodel.BatchMLP", "3statemodel.SwitchModule.batch_modules.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_sz", ",", "num_inputs", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SwitchModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Get parameters", "\n", "self", ".", "input_sz", "=", "input_sz", "\n", "self", ".", "num_inputs", "=", "num_inputs", "\n", "self", ".", "num_modules", "=", "opt", "[", "'num_modules'", "]", "\n", "self", ".", "hid_sz", "=", "opt", "[", "'hid_sz'", "]", "\n", "num_layer", "=", "opt", "[", "'num_layer'", "]", "\n", "assert", "(", "len", "(", "self", ".", "input_sz", ")", "==", "num_inputs", ")", "\n", "assert", "(", "self", ".", "num_modules", "%", "num_inputs", "==", "0", ")", "\n", "\n", "# Make batch modules", "\n", "self", ".", "batch_modules", "=", "[", "]", "\n", "for", "module_in_size", "in", "self", ".", "input_sz", ":", "\n", "            ", "bm_input", "=", "BatchMLP", "(", "module_in_size", ",", "self", ".", "hid_sz", ",", "num_layer", ",", "self", ".", "num_modules", "//", "num_inputs", ")", "\n", "self", ".", "batch_modules", ".", "append", "(", "bm_input", ")", "\n", "", "self", ".", "batch_modules", "=", "ListModule", "(", "*", "self", ".", "batch_modules", ")", "\n", "\n", "# Make soft attention network components (if applicible)", "\n", "self", ".", "switch_sz", "=", "opt", "[", "'switch_sz'", "]", "\n", "self", ".", "att_in", "=", "nn", ".", "Linear", "(", "self", ".", "switch_sz", ",", "self", ".", "num_modules", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.SwitchModule.forward": [[574, 594], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "3statemodel.SwitchModule.softmax", "selection.repeat.repeat.unsqueeze", "selection.repeat.repeat.repeat", "module_outs.sum.sum.sum", "len", "net_input.unsqueeze().expand", "all_module_outs.append", "3statemodel.SwitchModule.att_in", "module_outs.sum.sum.size", "net_input.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "net_inputs", "=", "inputs", "[", "0", "]", "\n", "# Compute batch module output", "\n", "assert", "(", "len", "(", "net_inputs", ")", "==", "self", ".", "num_inputs", ")", "\n", "all_module_outs", "=", "[", "]", "\n", "for", "i", ",", "net_input", "in", "enumerate", "(", "net_inputs", ")", ":", "\n", "            ", "batch_inputs", "=", "net_input", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "-", "1", ",", "self", ".", "num_modules", "//", "self", ".", "num_inputs", ",", "-", "1", "]", ")", "\n", "module_outs", "=", "self", ".", "batch_modules", "[", "i", "]", "(", "batch_inputs", ")", "# module_outs is bs x nm//ni x out_sz", "\n", "all_module_outs", ".", "append", "(", "module_outs", ")", "\n", "", "module_outs", "=", "torch", ".", "cat", "(", "all_module_outs", ",", "1", ")", "\n", "\n", "# Soft attention on output", "\n", "switch_input", "=", "inputs", "[", "1", "]", "\n", "selection", "=", "self", ".", "softmax", "(", "self", ".", "att_in", "(", "switch_input", ")", ")", "\n", "selection", "=", "selection", ".", "unsqueeze", "(", "2", ")", "\n", "selection", "=", "selection", ".", "repeat", "(", "[", "1", ",", "1", ",", "module_outs", ".", "size", "(", "2", ")", "]", ")", "\n", "module_outs", "*=", "selection", "\n", "module_outs", "=", "module_outs", ".", "sum", "(", "1", ")", "\n", "\n", "return", "module_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.BatchMLP.__init__": [[598, 611], ["torch.Module.__init__", "torch.Tanh", "torch.Tanh", "torch.Tanh", "3statemodel.BatchLinear", "range", "3statemodel.ListModule", "3statemodel.BatchLinear", "3statemodel.BatchLinear", "hid_layers.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_sz", ",", "hid_sz", ",", "num_layer", ",", "num_modules", ")", ":", "\n", "        ", "super", "(", "BatchMLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Make network values", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "in_fc", "=", "BatchLinear", "(", "input_sz", ",", "hid_sz", ",", "num_modules", ")", "\n", "assert", "(", "num_layer", ">=", "2", ")", "# If num_layer is 2, actually no hidden layers technically", "\n", "hid_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_layer", "-", "2", ")", ":", "\n", "            ", "hid_fc", "=", "BatchLinear", "(", "hid_sz", ",", "hid_sz", ",", "num_modules", ")", "\n", "hid_layers", ".", "append", "(", "hid_fc", ")", "\n", "", "self", ".", "hid_layers", "=", "ListModule", "(", "*", "hid_layers", ")", "\n", "self", ".", "out_fc", "=", "BatchLinear", "(", "hid_sz", ",", "hid_sz", ",", "num_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.BatchMLP.forward": [[614, 622], ["3statemodel.BatchMLP.in_fc", "3statemodel.BatchMLP.tanh", "3statemodel.BatchMLP.out_fc", "hid_fc", "3statemodel.BatchMLP.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "in_fc", "(", "input", ")", "\n", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "for", "hid_fc", "in", "self", ".", "hid_layers", ":", "\n", "            ", "x", "=", "hid_fc", "(", "x", ")", "\n", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "", "x", "=", "self", ".", "out_fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.ListModule.__init__": [[625, 631], ["torch.Module.__init__", "3statemodel.ListModule.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "ListModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "idx", "=", "0", "\n", "for", "module", "in", "args", ":", "\n", "            ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.ListModule.__getitem__": [[632, 639], ["iter", "range", "next", "IndexError", "3statemodel.ListModule._modules.values", "next", "len"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "<", "0", "or", "idx", ">=", "len", "(", "self", ".", "_modules", ")", ":", "\n", "            ", "raise", "IndexError", "(", "'index {} is out of range'", ".", "format", "(", "idx", ")", ")", "\n", "", "it", "=", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "idx", ")", ":", "\n", "            ", "next", "(", "it", ")", "\n", "", "return", "next", "(", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.ListModule.__iter__": [[640, 642], ["iter", "3statemodel.ListModule._modules.values"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.ListModule.__len__": [[643, 645], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.BatchLinear.__init__": [[650, 661], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "3statemodel.BatchLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "3statemodel.BatchLinear.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.BatchLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "num_modules", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "BatchLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "num_modules", "=", "num_modules", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_modules", ",", "out_features", ",", "in_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_modules", ",", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.BatchLinear.reset_parameters": [[662, 667], ["3statemodel.BatchLinear.weight.data.uniform_", "math.sqrt", "3statemodel.BatchLinear.bias.data.uniform_", "3statemodel.BatchLinear.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.BatchLinear.forward": [[670, 707], ["input.transpose().transpose.transpose().transpose.size", "input.transpose().transpose.transpose().transpose.size", "input.transpose().transpose.transpose().transpose.transpose().transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.transpose().transpose.transpose().transpose.transpose().transpose", "input.transpose().transpose.transpose().transpose.size", "3statemodel.BatchLinear.bias.unsqueeze().expand().contiguous", "input.transpose().transpose.transpose().transpose.transpose", "output.transpose().transpose.transpose().transpose.transpose", "3statemodel.BatchLinear.bias.unsqueeze().expand", "3statemodel.BatchLinear.bias.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Get sizes", "\n", "        ", "bs", "=", "input", ".", "size", "(", "0", ")", "\n", "nm", "=", "input", ".", "size", "(", "1", ")", "\n", "assert", "(", "input", ".", "size", "(", "2", ")", "==", "self", ".", "in_features", ")", "\n", "\n", "# Transpose input to correct shape", "\n", "input", "=", "input", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# nm x in_sz x bs", "\n", "\n", "# Compute matrix multiply", "\n", "output", "=", "torch", ".", "bmm", "(", "self", ".", "weight", ",", "input", ")", "\n", "\n", "# Add bias", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output", "+=", "self", ".", "bias", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "[", "-", "1", ",", "-", "1", ",", "bs", "]", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Transpose back to bs x nm x out_sz", "\n", "", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# Reshape to proper matrices", "\n", "#if self.W is None or self.W.size(0) != bs:", "\n", "#    self.W = self.weight.unsqueeze(0).expand([bs, -1, -1, -1]).contiguous().view(nm*bs, self.out_features, self.in_features)", "\n", "#input = input.contiguous().view(nm*bs, self.in_features, 1)", "\n", "\n", "# Compute matrix multiply and add bias (if applicable)", "\n", "#output = torch.bmm(self.W, input)", "\n", "\n", "# Add the bias", "\n", "#if self.bias is not None:", "\n", "#    if self.b is None or self.b.size(0) != bs:", "\n", "#        self.b = self.bias.unsqueeze(0).expand([bs, -1, -1]).contiguous().view(nm*bs, self.out_features, 1)", "\n", "#    output += self.b", "\n", "\n", "# Reshape output", "\n", "#output = output.view(bs, nm, self.out_features)", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.BatchLinear.extra_repr": [[708, 711], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Attention.__init__": [[718, 730], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", ":", "\n", "        ", "\"\"\"\n        :param encoder_dim: feature size of encoded images\n        :param decoder_dim: size of decoder's RNN\n        :param attention_dim: size of the attention network\n        \"\"\"", "\n", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder_att", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "attention_dim", ")", "# linear layer to transform encoded image", "\n", "self", ".", "decoder_att", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "attention_dim", ")", "# linear layer to transform decoder's output", "\n", "self", ".", "full_att", "=", "nn", ".", "Linear", "(", "attention_dim", ",", "1", ")", "# linear layer to calculate values to be softmax-ed", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "# softmax layer to calculate weights", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.Attention.forward": [[731, 744], ["3statemodel.Attention.encoder_att", "3statemodel.Attention.decoder_att", "3statemodel.Attention.full_att().squeeze", "3statemodel.Attention.softmax", "3statemodel.Attention.full_att", "3statemodel.Attention.relu", "3statemodel.Attention.unsqueeze", "3statemodel.Attention.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoder_out", ",", "decoder_hidden", ")", ":", "\n", "        ", "\"\"\"\n        Forward propagation.\n        :param encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim)\n        :param decoder_hidden: previous decoder output, a tensor of dimension (batch_size, decoder_dim)\n        :return: attention weighted encoding, weights\n        \"\"\"", "\n", "att1", "=", "self", ".", "encoder_att", "(", "encoder_out", ")", "# (batch_size, num_pixels, attention_dim)", "\n", "att2", "=", "self", ".", "decoder_att", "(", "decoder_hidden", ")", "# (batch_size, attention_dim)", "\n", "att", "=", "self", ".", "full_att", "(", "self", ".", "relu", "(", "att1", "+", "att2", ".", "unsqueeze", "(", "1", ")", ")", ")", ".", "squeeze", "(", "2", ")", "# (batch_size, num_pixels)", "\n", "alpha", "=", "self", ".", "softmax", "(", "att", ")", "# (batch_size, num_pixels)", "\n", "attention_weighted_encoding", "=", "(", "encoder_out", "*", "alpha", ".", "unsqueeze", "(", "2", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "# (batch_size, encoder_dim)", "\n", "return", "attention_weighted_encoding", ",", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.LanguageWithAttention.__init__": [[747, 804], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "3statemodel.Attention", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "3statemodel.LanguageWithAttention.embedding.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "LanguageWithAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder_dim", "=", "128", "\n", "self", ".", "encoder_dim", "=", "encoder_dim", "\n", "attention_dim", "=", "encoder_dim", "\n", "embed_dim", "=", "embedding_dim", "\n", "decoder_dim", "=", "32", "\n", "\n", "#self.embed = nn.Embedding(vocab_size, embedding_dim) # vocab size, 300", "\n", "\n", "#if training:", "\n", "#    self.embed.load_state_dict({'weight': embed_weights})", "\n", "#    self.embed.weight.requires_grad = False", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "encoder_dim", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "#self.fc_cat = nn.Linear(25*15+25*15+10*15+15, encoder_dim)", "\n", "\n", "'''\n        self.fc1 = nn.Linear(embedding_dim, 150)\n        self.fc2 = nn.Linear(7, 20)\n        self.fc3 = nn.Linear(170, 90)\n        self.fc4 = nn.Linear(embedding_dim, 150) \n        self.fc5 = nn.Linear(2250+150, 512)\n        self.fc_inv = nn.Linear(embedding_dim, 50) \n        self.fc55 = nn.Linear(512+50, embedding_dim)\n        '''", "\n", "\n", "#self.encoding = nn.LSTM(embedding_dim, 32, num_layers=1)", "\n", "#self.linear = nn.Linear(32, vocab_size)", "\n", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n", "# new stuff...", "\n", "self", ".", "attention", "=", "Attention", "(", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", "# attention network", "\n", "#self.attention = AttentionSmall(encoder_dim, decoder_dim)", "\n", "#self.embedding = nn.Embedding(vocab_size, embed_dim)  # embedding layer", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", "+", "1", ",", "embed_dim", ",", "vocab_size", ")", "# embedding layer", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decode_step", "=", "nn", ".", "LSTMCell", "(", "embed_dim", "+", "encoder_dim", ",", "decoder_dim", ",", "bias", "=", "True", ")", "# decoding LSTMCell", "\n", "self", ".", "init_h", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial hidden state of LSTMCell", "\n", "self", ".", "init_c", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial cell state of LSTMCell", "\n", "self", ".", "f_beta", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "encoder_dim", ")", "# linear layer to create a sigmoid-activated gate", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "vocab_size", ")", "# linear layer to find scores over vocabulary", "\n", "#self.init_weights()", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.LanguageWithAttention.init_weights": [[807, 814], ["3statemodel.LanguageWithAttention.embedding.weight.data.uniform_", "3statemodel.LanguageWithAttention.fc.bias.data.fill_", "3statemodel.LanguageWithAttention.fc.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializes some parameters with values from the uniform distribution, for easier convergence.\n        \"\"\"", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.LanguageWithAttention.init_hidden_state": [[815, 825], ["encoder_out.mean", "3statemodel.LanguageWithAttention.init_h", "3statemodel.LanguageWithAttention.init_c"], "methods", ["None"], ["", "def", "init_hidden_state", "(", "self", ",", "encoder_out", ")", ":", "\n", "        ", "\"\"\"\n        Creates the initial hidden and cell states for the decoder's LSTM based on the encoded images.\n        :param encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim)\n        :return: hidden state, cell state\n        \"\"\"", "\n", "mean_encoder_out", "=", "encoder_out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "init_h", "(", "mean_encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "c", "=", "self", ".", "init_c", "(", "mean_encoder_out", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.LanguageWithAttention.forward": [[826, 934], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "3statemodel.LanguageWithAttention.embedding", "3statemodel.LanguageWithAttention.init_hidden_state", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "h.clone", "range", "3statemodel.LanguageWithAttention.fc_embed", "3statemodel.LanguageWithAttention.fc_onehot", "3statemodel.LanguageWithAttention.fc_inv", "3statemodel.LanguageWithAttention.fc_goal", "max", "sum", "3statemodel.LanguageWithAttention.attention", "3statemodel.LanguageWithAttention.sigmoid", "3statemodel.LanguageWithAttention.decode_step", "h.clone", "3statemodel.LanguageWithAttention.fc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "3statemodel.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "3statemodel.LanguageWithAttention.dropout", "max", "max"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "encoded_captions", ",", "caption_lengths", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\n", "#encode features", "\n", "        ", "'''\n        c1 = F.relu(self.fc1(grid_embedding))\n        c2 = F.relu(self.fc2(grid_onehot))\n        c1 = c1.view(-1, 25,150)\n        c2 = c2.view(-1, 25,20)\n        combined_grids = torch.cat((c1, c2), dim=2)\n        c3 = F.relu(self.fc3(combined_grids)) \n        c3 = c3.view(-1, 25*90)\n        c4 = F.relu(self.fc4(goal))\n        combined_grid_goal = torch.cat((c3, c4), dim=1)\n        c6 = F.relu(self.fc5(combined_grid_goal))\n        temp_inv = F.relu(self.fc_inv(inventory))\n        combined_inventory = torch.cat((c6, temp_inv), dim=1)\n        encoder_out = F.relu(self.fc55(combined_inventory))\n        '''", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "unsqueeze", "(", "1", ")", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "# DECODER", "\n", "batch_size", "=", "encoder_out", ".", "size", "(", "0", ")", "\n", "vocab_size", "=", "self", ".", "vocab_size", "\n", "\n", "num_pixels", "=", "encoder_out", ".", "size", "(", "1", ")", "\n", "\n", "# Embedding", "\n", "embeddings", "=", "self", ".", "embedding", "(", "encoded_captions", ")", "# (batch_size, max_caption_length, embed_dim)", "\n", "\n", "# Initialize LSTM state", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "\n", "# We won't decode at the <end> position, since we've finished generating as soon as we generate <end>", "\n", "# So, decoding lengths are actual lengths - 1", "\n", "decode_lengths", "=", "[", "caption_length", "-", "1", "for", "caption_length", "in", "caption_lengths", "]", "\n", "#decode_lengths = (caption_lengths - 1).tolist()", "\n", "\n", "# Create tensors to hold word predicion scores and alphas", "\n", "predictions", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max", "(", "decode_lengths", ")", ",", "vocab_size", ")", ".", "cuda", "(", ")", "\n", "alphas", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max", "(", "decode_lengths", ")", ",", "num_pixels", ")", ".", "cuda", "(", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# At each time-step, decode by", "\n", "# attention-weighing the encoder's output based on the decoder's previous hidden state output", "\n", "# then generate a new word in the decoder with the previous word and the attention weighted encoding", "\n", "for", "t", "in", "range", "(", "max", "(", "decode_lengths", ")", ")", ":", "\n", "            ", "batch_size_t", "=", "sum", "(", "[", "l", ">", "t", "for", "l", "in", "decode_lengths", "]", ")", "\n", "attention_weighted_encoding", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", "[", ":", "batch_size_t", "]", ",", "\n", "h", "[", ":", "batch_size_t", "]", ")", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", "[", ":", "batch_size_t", "]", ")", ")", "# gating scalar, (batch_size_t, encoder_dim)", "\n", "attention_weighted_encoding", "=", "gate", "*", "attention_weighted_encoding", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "\n", "torch", ".", "cat", "(", "[", "embeddings", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", ",", "attention_weighted_encoding", "]", ",", "dim", "=", "1", ")", ",", "\n", "(", "h", "[", ":", "batch_size_t", "]", ",", "c", "[", ":", "batch_size_t", "]", ")", ")", "# (batch_size_t, decoder_dim)", "\n", "hiddens", "[", ":", "batch_size_t", "]", "=", "h", ".", "clone", "(", ")", "## ADDED!", "\n", "preds", "=", "self", ".", "fc", "(", "self", ".", "dropout", "(", "h", ")", ")", "# (batch_size_t, vocab_size)", "\n", "predictions", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", "=", "preds", "\n", "alphas", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", "=", "alpha", "\n", "\n", "", "return", "predictions", ",", "encoded_captions", ",", "decode_lengths", ",", "alphas", ",", "hiddens", "\n", "\n", "'''\n        #decoder...\n        batch_size = encoder_out.size(0)\n        vocab_size = self.vocab_size\n\n        # Embedding\n        embeddings = self.embedding(encoded_captions)  # (batch_size, max_caption_length, embed_dim)\n\n        # Initialize LSTM state\n        h, c = self.init_hidden_state(encoder_out)  # (batch_size, decoder_dim)\n\n        # We won't decode at the <end> position, since we've finished generating as soon as we generate <end>\n        # So, decoding lengths are actual lengths - 1\n        decode_lengths = [caption_length-1 for caption_length in caption_lengths]\n        #decode_lengths = (caption_lengths - 1).tolist()\n\n        # Create tensors to hold word predicion scores and alphas\n        predictions = torch.zeros(batch_size, max(decode_lengths), vocab_size).to(device)\n        alphas = torch.zeros(batch_size, max(decode_lengths), self.encoder_dim).to(device)\n\n        # At each time-step, decode by\n        # attention-weighing the encoder's output based on the decoder's previous hidden state output\n        # then generate a new word in the decoder with the previous word and the attention weighted encoding\n        for t in range(max(decode_lengths)):\n            batch_size_t = sum([l > t for l in decode_lengths])\n            attention_weighted_encoding, alpha = self.attention(encoder_out[:batch_size_t],\n                                                                h[:batch_size_t])\n            gate = self.sigmoid(self.f_beta(h[:batch_size_t]))  # gating scalar, (batch_size_t, encoder_dim)\n            attention_weighted_encoding = gate * attention_weighted_encoding\n            h, c = self.decode_step(\n                torch.cat([embeddings[:batch_size_t, t, :], attention_weighted_encoding], dim=1),\n                (h[:batch_size_t], c[:batch_size_t]))  # (batch_size_t, decoder_dim)\n            preds = self.fc(h)\n            #preds = self.fc(self.dropout(h))  # (batch_size_t, vocab_size)\n            predictions[:batch_size_t, t, :] = preds\n            alphas[:batch_size_t, t, :] = alpha\n\n        return predictions, encoded_captions, decode_lengths, alphas\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.LanguageWithAttention.get_hidden_state_new": [[936, 1017], ["x[].reshape", "x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c4.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "3statemodel.LanguageWithAttention.init_hidden_state", "h.clone", "3statemodel.LanguageWithAttention.fc_embed", "3statemodel.LanguageWithAttention.fc_onehot", "3statemodel.LanguageWithAttention.fc_inv", "3statemodel.LanguageWithAttention.fc_goal", "3statemodel.LanguageWithAttention.embedding().squeeze", "3statemodel.LanguageWithAttention.attention", "3statemodel.LanguageWithAttention.sigmoid", "3statemodel.LanguageWithAttention.decode_step", "h.clone", "3statemodel.LanguageWithAttention.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.max", "range", "indices[].unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "3statemodel.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "indices.size", "len", "complete_seqs[].append", "len", "3statemodel.LanguageWithAttention.embedding", "indices.size", "temp.append", "indices.data.tolist"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "get_hidden_state_new", "(", "self", ",", "x", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "10", ",", "300", ")", ")", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "10", ",", "self", ".", "encoder_dim", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "k", "=", "encoder_out", ".", "size", "(", "0", ")", "#batch size", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "torch", ".", "LongTensor", "(", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "]", "*", "k", ")", ".", "cuda", "(", ")", "#.to(device)  # (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "torch", ".", "zeros", "(", "k", ",", "1", ")", ".", "cuda", "(", ")", "#.to(device)  # (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "incomplete_inds", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "# used to keep track of original index in complete_seqs", "\n", "\n", "#complete_seqs_scores = list()", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "awe", "=", "gate", "*", "awe", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "hiddens", "[", "incomplete_inds", "]", "=", "h", ".", "clone", "(", ")", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "values", ",", "indices", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "assert", "(", "indices", ".", "size", "(", "0", ")", "==", "len", "(", "incomplete_inds", ")", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "complete_seqs", "[", "incomplete_inds", "[", "i", "]", "]", ".", "append", "(", "indices", ".", "data", ".", "tolist", "(", ")", "[", "i", "]", ")", "\n", "if", "indices", "[", "i", "]", "==", "word_map", ".", "word2idx", "[", "'<end>'", "]", ":", "\n", "                    ", "del", "incomplete_inds", "[", "i", "]", "\n", "#incomplete_inds.remove(i)", "\n", "", "else", ":", "\n", "#not finished", "\n", "                    ", "temp", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "incomplete_inds", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "#subset the ones that aren't finished.", "\n", "", "h", "=", "h", "[", "temp", "]", "\n", "c", "=", "c", "[", "temp", "]", "\n", "encoder_out", "=", "encoder_out", "[", "temp", "]", "\n", "k_prev_words", "=", "indices", "[", "temp", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "20", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "return", "complete_seqs", ",", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.LanguageWithAttention.get_hidden_state": [[1019, 1139], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c4.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "k_prev.long().unsqueeze", "top_k.unsqueeze", "3statemodel.LanguageWithAttention.init_hidden_state", "3statemodel.LanguageWithAttention.fc_embed", "3statemodel.LanguageWithAttention.fc_onehot", "3statemodel.LanguageWithAttention.fc_inv", "3statemodel.LanguageWithAttention.fc_goal", "3statemodel.LanguageWithAttention.embedding().squeeze", "3statemodel.LanguageWithAttention.attention", "3statemodel.LanguageWithAttention.sigmoid", "3statemodel.LanguageWithAttention.decode_step", "3statemodel.LanguageWithAttention.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.max", "range", "indices[].unsqueeze", "k_prev.long", "range", "range", "3statemodel.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "indices.size", "len", "complete_seqs[].append", "len", "3statemodel.LanguageWithAttention.embedding", "indices.size", "temp.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state"], ["", "def", "get_hidden_state", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "k_prev", ",", "top_k", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate captions for given image features using greedy search.\"\"\"", "\n", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "10", ",", "self", ".", "encoder_dim", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "k", "=", "encoder_out", ".", "size", "(", "0", ")", "#batch size", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "k_prev", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", "#torch.LongTensor(k_prev)#.to(device)  # (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "top_k", ".", "unsqueeze", "(", "1", ")", "#torch.zeros(k, 1) #.to(device)  # (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "incomplete_inds", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "# used to keep track of original index in complete_seqs", "\n", "\n", "#complete_seqs_scores = list()", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "awe", "=", "gate", "*", "awe", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "values", ",", "indices", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "assert", "(", "indices", ".", "size", "(", "0", ")", "==", "len", "(", "incomplete_inds", ")", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "complete_seqs", "[", "incomplete_inds", "[", "i", "]", "]", ".", "append", "(", "indices", ".", "data", "[", "i", "]", ")", "\n", "if", "indices", "[", "i", "]", "==", "word_map", ".", "word2idx", "[", "'<end>'", "]", ":", "\n", "                    ", "del", "incomplete_inds", "[", "i", "]", "\n", "#incomplete_inds.remove(i)", "\n", "", "else", ":", "\n", "#not finished", "\n", "                    ", "temp", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "incomplete_inds", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "#subset the ones that aren't finished.", "\n", "", "h", "=", "h", "[", "temp", "]", "\n", "c", "=", "c", "[", "temp", "]", "\n", "encoder_out", "=", "encoder_out", "[", "temp", "]", "\n", "k_prev_words", "=", "indices", "[", "temp", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "#incomplete_inds = [i for i in range(indices.size(0)) if indices[i] != word_map.word2idx['<end>']]", "\n", "#complete_inds = [i for i in range(indices.size(0)) if indices[i] == word_map.word2idx['<end>']]", "\n", "\n", "# Add", "\n", "#scores = top_k_scores.expand_as(scores) + scores  # (s, vocab_size)", "\n", "\n", "# For the first step, all k points will have the same scores (since same k previous words, h, c)", "\n", "#if step == 1:", "\n", "#    top_k_scores, top_k_words = scores[0].topk(k, 0, True, True)  # (s)", "\n", "#else:", "\n", "#    # Unroll and find top scores, and their unrolled indices", "\n", "#    top_k_scores, top_k_words = scores.view(-1).topk(k, 0, True, True)  # (s)", "\n", "\n", "# Convert unrolled indices to actual indices of scores", "\n", "#prev_word_inds = top_k_words / self.vocab_size  # (s)", "\n", "#next_word_inds = top_k_words % self.vocab_size  # (s)", "\n", "\n", "# Add new words to sequences, alphas", "\n", "#seqs = torch.cat([seqs[prev_word_inds], next_word_inds.unsqueeze(1)], dim=1)  # (s, step+1)", "\n", "\n", "# Which sequences are incomplete (didn't reach <end>)?", "\n", "#incomplete_inds = [ind for ind, next_word in enumerate(next_word_inds) if", "\n", "#                   next_word != word_map.word2idx['<end>']]", "\n", "#complete_inds = list(set(range(len(next_word_inds))) - set(incomplete_inds))", "\n", "\n", "# Set aside complete sequences", "\n", "#if len(complete_inds) > 0:", "\n", "#    complete_seqs.extend(seqs[complete_inds].tolist())", "\n", "#    complete_seqs_scores.extend(top_k_scores[complete_inds])", "\n", "#k -= len(complete_inds)  # reduce beam length accordingly", "\n", "\n", "# Proceed with incomplete sequences", "\n", "#if k == 0:", "\n", "#    break", "\n", "\n", "#seqs = seqs[incomplete_inds]", "\n", "\n", "#subset things out...", "\n", "#h = h[prev_word_inds[incomplete_inds]]", "\n", "#c = c[prev_word_inds[incomplete_inds]]", "\n", "#encoder_out = encoder_out[prev_word_inds[incomplete_inds]]", "\n", "#top_k_scores = top_k_scores[incomplete_inds].unsqueeze(1)", "\n", "#k_prev_words = next_word_inds[incomplete_inds].unsqueeze(1)", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "50", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "return", "complete_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.LanguageWithAttentionSUM.__init__": [[1142, 1199], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "3statemodel.Attention", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "3statemodel.LanguageWithAttentionSUM.embedding.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "LanguageWithAttentionSUM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder_dim", "=", "128", "\n", "self", ".", "encoder_dim", "=", "encoder_dim", "\n", "attention_dim", "=", "encoder_dim", "\n", "embed_dim", "=", "embedding_dim", "\n", "decoder_dim", "=", "32", "\n", "\n", "#self.embed = nn.Embedding(vocab_size, embedding_dim) # vocab size, 300", "\n", "\n", "#if training:", "\n", "#    self.embed.load_state_dict({'weight': embed_weights})", "\n", "#    self.embed.weight.requires_grad = False", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "encoder_dim", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "#self.fc_cat = nn.Linear(25*15+25*15+10*15+15, encoder_dim)", "\n", "\n", "'''\n        self.fc1 = nn.Linear(embedding_dim, 150)\n        self.fc2 = nn.Linear(7, 20)\n        self.fc3 = nn.Linear(170, 90)\n        self.fc4 = nn.Linear(embedding_dim, 150) \n        self.fc5 = nn.Linear(2250+150, 512)\n        self.fc_inv = nn.Linear(embedding_dim, 50) \n        self.fc55 = nn.Linear(512+50, embedding_dim)\n        '''", "\n", "\n", "#self.encoding = nn.LSTM(embedding_dim, 32, num_layers=1)", "\n", "#self.linear = nn.Linear(32, vocab_size)", "\n", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n", "# new stuff...", "\n", "self", ".", "attention", "=", "Attention", "(", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", "# attention network", "\n", "#self.attention = AttentionSmall(encoder_dim, decoder_dim)", "\n", "#self.embedding = nn.Embedding(vocab_size, embed_dim)  # embedding layer", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", "+", "1", ",", "embed_dim", ",", "vocab_size", ")", "# embedding layer", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decode_step", "=", "nn", ".", "LSTMCell", "(", "embed_dim", "+", "encoder_dim", ",", "decoder_dim", ",", "bias", "=", "True", ")", "# decoding LSTMCell", "\n", "self", ".", "init_h", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial hidden state of LSTMCell", "\n", "self", ".", "init_c", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial cell state of LSTMCell", "\n", "self", ".", "f_beta", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "encoder_dim", ")", "# linear layer to create a sigmoid-activated gate", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "vocab_size", ")", "# linear layer to find scores over vocabulary", "\n", "#self.init_weights()", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.LanguageWithAttentionSUM.init_weights": [[1201, 1208], ["3statemodel.LanguageWithAttentionSUM.embedding.weight.data.uniform_", "3statemodel.LanguageWithAttentionSUM.fc.bias.data.fill_", "3statemodel.LanguageWithAttentionSUM.fc.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializes some parameters with values from the uniform distribution, for easier convergence.\n        \"\"\"", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.LanguageWithAttentionSUM.init_hidden_state": [[1209, 1219], ["encoder_out.mean", "3statemodel.LanguageWithAttentionSUM.init_h", "3statemodel.LanguageWithAttentionSUM.init_c"], "methods", ["None"], ["", "def", "init_hidden_state", "(", "self", ",", "encoder_out", ")", ":", "\n", "        ", "\"\"\"\n        Creates the initial hidden and cell states for the decoder's LSTM based on the encoded images.\n        :param encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim)\n        :return: hidden state, cell state\n        \"\"\"", "\n", "mean_encoder_out", "=", "encoder_out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "init_h", "(", "mean_encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "c", "=", "self", ".", "init_c", "(", "mean_encoder_out", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.LanguageWithAttentionSUM.get_hidden_state_new": [[1221, 1302], ["x[].reshape", "x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c4.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "3statemodel.LanguageWithAttentionSUM.init_hidden_state", "h.clone", "3statemodel.LanguageWithAttentionSUM.fc_embed", "3statemodel.LanguageWithAttentionSUM.fc_onehot", "3statemodel.LanguageWithAttentionSUM.fc_inv", "3statemodel.LanguageWithAttentionSUM.fc_goal", "3statemodel.LanguageWithAttentionSUM.embedding().squeeze", "3statemodel.LanguageWithAttentionSUM.attention", "3statemodel.LanguageWithAttentionSUM.sigmoid", "3statemodel.LanguageWithAttentionSUM.decode_step", "h.clone", "3statemodel.LanguageWithAttentionSUM.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.max", "range", "indices[].unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "3statemodel.LanguageWithAttentionSUM.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "indices.size", "len", "complete_seqs[].append", "len", "3statemodel.LanguageWithAttentionSUM.embedding", "indices.size", "temp.append", "indices.data.tolist"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "get_hidden_state_new", "(", "self", ",", "x", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "300", ")", ")", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "k", "=", "encoder_out", ".", "size", "(", "0", ")", "#batch size", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "torch", ".", "LongTensor", "(", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "]", "*", "k", ")", ".", "cuda", "(", ")", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "torch", ".", "zeros", "(", "k", ",", "1", ")", ".", "cuda", "(", ")", "# (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "incomplete_inds", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "# used to keep track of original index in complete_seqs", "\n", "\n", "#complete_seqs_scores = list()", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "awe", "=", "gate", "*", "awe", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "hiddens", "[", "incomplete_inds", "]", "=", "h", ".", "clone", "(", ")", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "values", ",", "indices", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "assert", "(", "indices", ".", "size", "(", "0", ")", "==", "len", "(", "incomplete_inds", ")", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "complete_seqs", "[", "incomplete_inds", "[", "i", "]", "]", ".", "append", "(", "indices", ".", "data", ".", "tolist", "(", ")", "[", "i", "]", ")", "\n", "if", "indices", "[", "i", "]", "==", "word_map", ".", "word2idx", "[", "'<end>'", "]", ":", "\n", "                    ", "del", "incomplete_inds", "[", "i", "]", "\n", "#incomplete_inds.remove(i)", "\n", "", "else", ":", "\n", "#not finished", "\n", "                    ", "temp", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "incomplete_inds", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "#subset the ones that aren't finished.", "\n", "", "h", "=", "h", "[", "temp", "]", "\n", "c", "=", "c", "[", "temp", "]", "\n", "encoder_out", "=", "encoder_out", "[", "temp", "]", "\n", "k_prev_words", "=", "indices", "[", "temp", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "20", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "return", "complete_seqs", ",", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.StatePredictorNetwork.__init__": [[1305, 1341], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "3statemodel.Attention", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "3statemodel.StatePredictorNetwork.embedding.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "StatePredictorNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder_dim", "=", "128", "\n", "self", ".", "encoder_dim", "=", "encoder_dim", "\n", "attention_dim", "=", "encoder_dim", "\n", "embed_dim", "=", "embedding_dim", "\n", "decoder_dim", "=", "32", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "encoder_dim", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n", "# new stuff...", "\n", "self", ".", "attention", "=", "Attention", "(", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", "# attention network", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", "+", "1", ",", "embed_dim", ",", "vocab_size", ")", "# embedding layer", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decode_step", "=", "nn", ".", "LSTMCell", "(", "embed_dim", ",", "decoder_dim", ",", "bias", "=", "True", ")", "# decoding LSTMCell", "\n", "self", ".", "init_h", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial hidden state of LSTMCell", "\n", "self", ".", "init_c", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial cell state of LSTMCell", "\n", "self", ".", "f_beta", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "encoder_dim", ")", "# linear layer to create a sigmoid-activated gate", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "embed_dim", ")", "# linear layer to find scores over vocabulary", "\n", "self", ".", "fc_last", "=", "nn", ".", "Linear", "(", "27", "*", "128", ",", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.StatePredictorNetwork.get_state_encoding": [[1343, 1361], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "inventory.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "3statemodel.StatePredictorNetwork.fc_embed", "3statemodel.StatePredictorNetwork.fc_onehot", "3statemodel.StatePredictorNetwork.fc_inv", "3statemodel.StatePredictorNetwork.fc_goal", "3statemodel.StatePredictorNetwork.fc_last"], "methods", ["None"], ["", "def", "get_state_encoding", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ")", ":", "\n", "\n", "#print(grid_embedding.size(), grid_onehot.size(), inventory.size(), goal.size())", "\n", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "inventory", "=", "inventory", ".", "view", "(", "-", "1", ",", "1", ",", "300", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "encoder_out", "=", "encoder_out", ".", "view", "(", "-", "1", ",", "27", "*", "128", ")", "\n", "encoder_out", "=", "F", ".", "relu", "(", "self", ".", "fc_last", "(", "encoder_out", ")", ")", "\n", "\n", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.StatePredictorNetwork.forward": [[1362, 1393], ["x.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.clone", "torch.zeros().cuda.clone", "torch.zeros().cuda.clone", "range", "x[].reshape", "x[].reshape", "x[].reshape", "3statemodel.StatePredictorNetwork.get_state_encoding", "3statemodel.StatePredictorNetwork.decode_step", "torch.zeros().cuda.clone", "torch.zeros().cuda.clone", "torch.zeros().cuda.clone", "3statemodel.StatePredictorNetwork.fc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.StatePredictorNetwork.get_state_encoding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# Initialize to zero", "\n", "h", "=", "torch", ".", "zeros", "(", "batch_size", ",", "32", ")", ".", "cuda", "(", ")", "# (batch_size, decoder_dim) # ", "\n", "c", "=", "torch", ".", "zeros", "(", "batch_size", ",", "32", ")", ".", "cuda", "(", ")", "\n", "\n", "# Create tensors to hold state prediction", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "for", "t", "in", "range", "(", "3", ")", ":", "\n", "\n", "            ", "x", "=", "x", "[", ":", ",", "1", ":", "]", "\n", "\n", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "+", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "300", ")", ")", "\n", "\n", "#print(grid_embedding.size(), grid_onehot.size(), goal.size(), inventory.size())", "\n", "\n", "state_encodings", "=", "self", ".", "get_state_encoding", "(", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ")", "\n", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "state_encodings", ",", "(", "h", "[", ":", "]", ",", "c", "[", ":", "]", ")", ")", "\n", "hiddens", "[", ":", "]", "=", "h", ".", "clone", "(", ")", "\n", "preds", "=", "self", ".", "fc", "(", "h", ")", "\n", "\n", "x", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "+", "300", ":", "]", "\n", "\n", "", "return", "preds", ",", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.SimpleNetworkNoState.__init__": [[1396, 1411], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "    ", "super", "(", "SimpleNetworkNoState", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "48", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "32", ",", "48", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.SimpleNetworkNoState.forward": [[1413, 1444], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "3statemodel.SimpleNetworkNoState.fc1", "3statemodel.SimpleNetworkNoState.fc2", "3statemodel.SimpleNetworkNoState.fc3", "3statemodel.SimpleNetworkNoState.fc4", "3statemodel.SimpleNetworkNoState.fc5", "3statemodel.SimpleNetworkNoState.fc_inv", "3statemodel.SimpleNetworkNoState.fc55", "3statemodel.SimpleNetworkNoState.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hidden", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "all_comb", "=", "torch", ".", "cat", "(", "(", "features", ",", "hidden", ")", ",", "dim", "=", "1", ")", "\n", "\n", "#c6 = F.relu(self.fc6(all_comb)) # updated with new embedding size.", "\n", "#c7 = self.fc7(c6)", "\n", "#c8 = F.relu(self.fc8(c7))", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "hidden", ")", ")", "# updated with new embedding size.", "\n", "\n", "return", "c6", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.SimpleNetworkOnlyGoal.__init__": [[1446, 1461], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "    ", "super", "(", "SimpleNetworkOnlyGoal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "48", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "48", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.SimpleNetworkOnlyGoal.forward": [[1463, 1493], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "3statemodel.SimpleNetworkOnlyGoal.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "#encode features", "\n", "# c1 = F.relu(self.fc1(grid_embedding))", "\n", "# c2 = F.relu(self.fc2(grid_onehot))", "\n", "# c1 = c1.view(-1, 25,150)", "\n", "# c2 = c2.view(-1, 25,20)", "\n", "# combined_grids = torch.cat((c1, c2), dim=2)", "\n", "# c3 = F.relu(self.fc3(combined_grids)) ", "\n", "# c3 = c3.view(-1, 25*90)", "\n", "# c4 = F.relu(self.fc4(goal))", "\n", "# combined_grid_goal = torch.cat((c3, c4), dim=1)", "\n", "# c6 = F.relu(self.fc5(combined_grid_goal))", "\n", "# temp_inv = F.relu(self.fc_inv(inventory))", "\n", "# combined_inventory = torch.cat((c6, temp_inv), dim=1)", "\n", "# features = F.relu(self.fc55(combined_inventory))", "\n", "\n", "# all_comb = torch.cat((features, hidden), dim=1)", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "goal", ")", ")", "# updated with new embedding size.", "\n", "#c6 = F.relu(self.fc6(all_comb)) # updated with new embedding size.", "\n", "#c7 = self.fc7(c6)", "\n", "#c8 = F.relu(self.fc8(c7))", "\n", "\n", "return", "c6", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.StateAutoencoder.__init__": [[1495, 1510], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StateAutoencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "128", ",", "27", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "27", "*", "27", ",", "32", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "32", ",", "27", "*", "27", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "27", ",", "128", ")", "\n", "\n", "embedding_dim", "=", "300", "\n", "encoder_dim", "=", "128", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "encoder_dim", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.StateAutoencoder.forward": [[1511, 1538], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "inventory.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "3statemodel.StateAutoencoder.fc_embed", "3statemodel.StateAutoencoder.fc_onehot", "3statemodel.StateAutoencoder.fc_inv", "3statemodel.StateAutoencoder.fc_goal", "3statemodel.StateAutoencoder.fc1", "3statemodel.StateAutoencoder.fc2", "3statemodel.StateAutoencoder.fc3", "3statemodel.StateAutoencoder.fc4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "128", ")", "\n", "inventory", "=", "inventory", ".", "view", "(", "-", "1", ",", "1", ",", "300", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "unsqueeze", "(", "1", ")", "\n", "state_encoding", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "# state_encoding is (batch, 25+1+1, encoder_dim)", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "state_encoding", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "27", "*", "27", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "c1", ")", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "c2", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "27", ",", "27", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "c3", ")", ")", "\n", "\n", "return", "state_encoding", ",", "c2", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.SimpleNetwork.__init__": [[1540, 1555], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "    ", "super", "(", "SimpleNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "48", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "48", "+", "32", ",", "48", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.SimpleNetwork.forward": [[1557, 1590], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "3statemodel.SimpleNetwork.fc1", "3statemodel.SimpleNetwork.fc2", "3statemodel.SimpleNetwork.fc3", "3statemodel.SimpleNetwork.fc4", "3statemodel.SimpleNetwork.fc5", "3statemodel.SimpleNetwork.fc_inv", "3statemodel.SimpleNetwork.fc55", "3statemodel.SimpleNetwork.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hidden", ")", ":", "\n", "\n", "        ", "x", "=", "x", "[", ":", ",", "-", "8275", ":", "]", "\n", "\n", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "#print(grid_embedding.size(), grid_onehot.size(), goal.size(), inventory.size())", "\n", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "all_comb", "=", "torch", ".", "cat", "(", "(", "features", ",", "hidden", ")", ",", "dim", "=", "1", ")", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "all_comb", ")", ")", "# updated with new embedding size.", "\n", "#c7 = self.fc7(c6)", "\n", "#c8 = F.relu(self.fc8(c7))", "\n", "\n", "return", "c6", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.StateGoalNetv1.__init__": [[1648, 1663], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "    ", "super", "(", "StateGoalNetv1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "48", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "48", ",", "48", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.StateGoalNetv1.forward": [[1665, 1692], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "3statemodel.StateGoalNetv1.fc1", "3statemodel.StateGoalNetv1.fc2", "3statemodel.StateGoalNetv1.fc3", "3statemodel.StateGoalNetv1.fc4", "3statemodel.StateGoalNetv1.fc5", "3statemodel.StateGoalNetv1.fc_inv", "3statemodel.StateGoalNetv1.fc55", "3statemodel.StateGoalNetv1.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "features", ")", ")", "# updated with new embedding size.", "\n", "#c7 = self.fc7(c6)", "\n", "#c8 = F.relu(self.fc8(c7))", "\n", "\n", "return", "c6", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.MazeBaseBase.__init__": [[1694, 1870], ["3statemodel.NNBase.__init__", "3statemodel.build_vocabulary", "vocab.add_word", "vocab.add_word", "vocab.add_word", "vocab.add_word", "numpy.zeros", "numpy.concatenate", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "3statemodel.StatePredictorNetwork", "3statemodel.MazeBaseBase.lang_model.load_state_dict", "3statemodel.MazeBaseBase.lang_model.eval", "3statemodel.MazeBaseBase.lang_model.parameters", "3statemodel.SimpleNetwork", "3statemodel.MazeBaseBase.actor.load_state_dict", "3statemodel.SimpleNetwork", "3statemodel.MazeBaseBase.critic.load_state_dict", "init_", "3statemodel.MazeBaseBase.train", "pytorchppo.a2c_ppo_acktr.utils.init", "open", "pickle.load", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.Linear", "torch.Linear", "torch.Linear", "numpy.sqrt", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.build_vocabulary", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "recurrent", "=", "False", ",", "hidden_size", "=", "48", ",", "vocab", "=", "None", ",", "vocab_weights", "=", "None", ")", ":", "\n", "        ", "super", "(", "MazeBaseBase", ",", "self", ")", ".", "__init__", "(", "recurrent", ",", "num_inputs", ",", "hidden_size", ")", "\n", "\n", "if", "recurrent", ":", "\n", "            ", "num_inputs", "=", "hidden_size", "\n", "\n", "", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "\n", "#no language:", "\n", "#self.actor = MazeBaseNet(hidden_size)", "\n", "#self.critic = MazeBaseNet(hidden_size)", "\n", "\n", "\n", "#pre-trained model:", "\n", "#hidden size 48, summed inventory", "\n", "\n", "# self.actor = SimpleNetworkOnlyGoal(300)", "\n", "# self.actor.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/AllObsPredictAttenGLOVE_onlygoal.pt\")) # trained with embeddings", "\n", "\n", "# self.critic = SimpleNetworkOnlyGoal(300)", "\n", "# self.critic.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/AllObsPredictAttenGLOVE_onlygoal.pt\")) # trained with embeddings", "\n", "\n", "\n", "#self.actor = StateGoalNetv1(300)", "\n", "#self.actor.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/StateGoalNetv1_300_05per.pt\")) # trained with embeddings", "\n", "\n", "#self.critic = StateGoalNetv1(300)", "\n", "#self.critic.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/StateGoalNetv1_300_05per.pt\")) # trained with embeddings", "\n", "\n", "### Start State Predictor ###", "\n", "\n", "name", "=", "\"compiled_dataset_08131950\"", "#add 50 back in", "\n", "embed_dim", "=", "300", "# switch this later!!", "\n", "embed_size", "=", "embed_dim", "\n", "\n", "with", "open", "(", "'/home/kdmarino/Mazebase_gym_environ/mazebaseenv/data/'", "+", "name", "+", "'_all_instructions'", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "all_instructions", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "vocab", ",", "vocab_weights", "=", "build_vocabulary", "(", "all_instructions", ",", "name", ",", "embed_dim", ")", "\n", "\n", "vocab", ".", "add_word", "(", "'<pad>'", ")", "\n", "vocab", ".", "add_word", "(", "'<start>'", ")", "\n", "vocab", ".", "add_word", "(", "'<end>'", ")", "\n", "vocab", ".", "add_word", "(", "'<unk>'", ")", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "temp", "=", "np", ".", "zeros", "(", "(", "1", ",", "300", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vocab_weights", "=", "np", ".", "concatenate", "(", "(", "vocab_weights", ",", "temp", ")", ",", "axis", "=", "0", ")", "\n", "vocab_weights", "=", "torch", ".", "Tensor", "(", "vocab_weights", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "lang_model", "=", "StatePredictorNetwork", "(", "len", "(", "vocab", ")", ",", "embed_dim", ",", "vocab_weights", ")", "\n", "self", ".", "lang_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/StatePredictor_both.pt\"", ")", ")", "# trained with embeddings , map_location=lambda storage, loc: storage        ", "\n", "self", ".", "lang_model", ".", "eval", "(", ")", "\n", "for", "params", "in", "self", ".", "lang_model", ".", "parameters", "(", ")", ":", "\n", "            ", "params", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "actor", "=", "SimpleNetwork", "(", "300", ")", "\n", "self", ".", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/SimpleNetwork_statepred.pt\"", ")", ")", "# trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "self", ".", "critic", "=", "SimpleNetwork", "(", "300", ")", "\n", "self", ".", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/SimpleNetwork_statepred.pt\"", ")", ")", "# trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "### Start State Predictor  ###", "\n", "\n", "\n", "### Start Autoencoder ###", "\n", "# self.lang_model = StateAutoencoder()", "\n", "# self.lang_model.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/StateAutoencoder_both1.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage        ", "\n", "# self.lang_model.eval()", "\n", "# for params in self.lang_model.parameters():", "\n", "#     params.requires_grad = False", "\n", "\n", "# self.actor = SimpleNetwork(300)", "\n", "# self.actor.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/SimpleNetwork_autoencoder1.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "# self.critic = SimpleNetwork(300)", "\n", "# self.critic.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/SimpleNetwork_autoencoder1.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "### Start CORRECT language ###", "\n", "\n", "# hidden size 32", "\n", "\n", "# name = \"compiled_dataset_08131950\" #add 50 back in", "\n", "# embed_dim = 300 # switch this later!!", "\n", "# embed_size = embed_dim", "\n", "\n", "# with open('/home/kdmarino/Mazebase_gym_environ/mazebaseenv/data/'+name+'_all_instructions', 'rb') as f:", "\n", "#     all_instructions = pickle.load(f)", "\n", "\n", "# vocab, vocab_weights = build_vocabulary(all_instructions, name, embed_dim)", "\n", "\n", "# vocab.add_word('<pad>')", "\n", "# vocab.add_word('<start>')", "\n", "# vocab.add_word('<end>')", "\n", "# vocab.add_word('<unk>')", "\n", "\n", "# self.vocab = vocab", "\n", "# temp = np.zeros((1,300), dtype=np.float32)", "\n", "# vocab_weights = np.concatenate((vocab_weights, temp), axis=0)", "\n", "# vocab_weights = torch.Tensor(vocab_weights).cuda()", "\n", "\n", "# self.lang_model = LanguageWithAttentionSUM(len(vocab), embed_dim, vocab_weights, training=False)", "\n", "# self.lang_model.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/LanguageWithAttentionSUM_nostate.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage        ", "\n", "# #self.lang_model.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/LanguageWithAttentionSUM_adam.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage        ", "\n", "# #self.lang_model.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/LanguageWithAttentionSUM_75per.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage        ", "\n", "# #self.lang_model.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/LanguageWithAttentionSUM_missing10per.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "# self.lang_model.eval()", "\n", "# for params in self.lang_model.parameters():", "\n", "#     params.requires_grad = False", "\n", "\n", "# self.actor = SimpleNetworkNoState(300)", "\n", "# self.actor.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/AllObsPredictAttenGLOVE_nostate.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "# self.critic = SimpleNetworkNoState(300)", "\n", "# self.critic.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/AllObsPredictAttenGLOVE_nostate.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "# #self.actor = SimpleNetwork(300)", "\n", "# #self.actor.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/SimpleNetwork_adam.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "# #self.actor.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/SimpleNetwork_75per.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "# #self.actor.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/SimpleNetwork_missing10per.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "# #self.critic = SimpleNetwork(300)", "\n", "# #self.actor.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/SimpleNetwork_adam.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage        ", "\n", "# #self.critic.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/SimpleNetwork_75per.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "# #self.critic.load_state_dict(torch.load(\"/scratch/kdmarino/Mazebase_dialog/TRAINED_MODELS/SimpleNetwork_missing10per.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "### End CORRECT language ###", "\n", "\n", "\n", "### Start language ###", "\n", "\n", "# hidden size 32", "\n", "\n", "# name = \"compiled_dataset_08131950\" #add 50 back in", "\n", "# embed_dim = 300 # switch this later!!", "\n", "# embed_size = embed_dim", "\n", "\n", "# with open('/home/kdmarino/Mazebase_gym_environ/mazebaseenv/data/'+name+'_all_instructions', 'rb') as f:", "\n", "#     all_instructions = pickle.load(f)", "\n", "\n", "# vocab, vocab_weights = build_vocabulary(all_instructions, name, embed_dim)", "\n", "\n", "# vocab.add_word('<pad>')", "\n", "# vocab.add_word('<start>')", "\n", "# vocab.add_word('<end>')", "\n", "# vocab.add_word('<unk>')", "\n", "\n", "# self.vocab = vocab", "\n", "# temp = np.zeros((1,300), dtype=np.float32)", "\n", "# vocab_weights = np.concatenate((vocab_weights, temp), axis=0)", "\n", "# vocab_weights = torch.Tensor(vocab_weights).cuda()", "\n", "\n", "# self.lang_model = LanguageWithAttention(len(vocab), embed_dim, vocab_weights)", "\n", "# self.lang_model.load_state_dict(torch.load(\"/home/kdmarino/Mazebase_gym_environ/mazebaseenv/TRAINED_MODELS/LanguageWithAttention_both.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "# self.lang_model.eval()", "\n", "\n", "# self.actor = AllObsPredictAtten(hidden_size, vocab, vocab_weights)", "\n", "# self.actor.load_state_dict(torch.load(\"/home/kdmarino/Mazebase_gym_environ/mazebaseenv/TRAINED_MODELS/AllObsPredictAtten_both.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "# self.critic = AllObsPredictAtten(hidden_size, vocab, vocab_weights)", "\n", "# self.critic.load_state_dict(torch.load(\"/home/kdmarino/Mazebase_gym_environ/mazebaseenv/TRAINED_MODELS/AllObsPredictAtten_both.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "### End language ###", "\n", "\n", "#self.actor = nn.Sequential(", "\n", "#    init_(nn.Linear(num_inputs, hidden_size)), nn.Tanh(),", "\n", "#    init_(nn.Linear(hidden_size, hidden_size)), nn.Tanh())", "\n", "\n", "#self.critic = nn.Sequential(", "\n", "#    init_(nn.Linear(num_inputs, hidden_size)), nn.Tanh(),", "\n", "#    init_(nn.Linear(hidden_size, hidden_size)), nn.Tanh())", "\n", "\n", "self", ".", "critic_linear", "=", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.MazeBaseBase.forward": [[1871, 1912], ["3statemodel.MazeBaseBase.lang_model", "3statemodel.MazeBaseBase.critic", "3statemodel.MazeBaseBase.actor", "3statemodel.MazeBaseBase._forward_gru", "3statemodel.MazeBaseBase.critic_linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.NNBase._forward_gru"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "#x = x[:, 1:] #if includes count ... ???", "\n", "\n", "if", "self", ".", "is_recurrent", ":", "\n", "            ", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ",", "masks", ")", "\n", "\n", "### Language start", "\n", "#seqs, lang_hidden = self.lang_model.get_hidden_state_new(x, self.vocab)", "\n", "\n", "# #for debugging / explaining language", "\n", "# for sampled_ids in seqs:", "\n", "#     sampled_caption = []", "\n", "#     for word_id in sampled_ids:", "\n", "#         word = self.vocab.idx2word[word_id]", "\n", "#         sampled_caption.append(word)", "\n", "#         if word == '<end>':", "\n", "#             break", "\n", "#     sentence = ' '.join(sampled_caption) ", "\n", "#     print(sentence)", "\n", "\n", "#hidden_critic = self.critic(x, lang_hidden)", "\n", "#hidden_actor = self.actor(x, lang_hidden)", "\n", "### Language end", "\n", "\n", "\n", "### Autoencoder start", "\n", "\n", "", "reconstruction", ",", "hidden", "=", "self", ".", "lang_model", "(", "x", ")", "# state predictor", "\n", "#state_encoding, hidden, reconstruction = self.lang_model(x)", "\n", "hidden_critic", "=", "self", ".", "critic", "(", "x", ",", "hidden", ")", "\n", "hidden_actor", "=", "self", ".", "actor", "(", "x", ",", "hidden", ")", "\n", "\n", "### Autoencoder end", "\n", "\n", "\n", "#hidden_critic = self.critic(x)", "\n", "#hidden_actor = self.actor(x)", "\n", "\n", "return", "self", ".", "critic_linear", "(", "hidden_critic", ")", ",", "hidden_actor", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.MLPBase.__init__": [[1915, 1935], ["3statemodel.NNBase.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "init_", "3statemodel.MLPBase.train", "pytorchppo.a2c_ppo_acktr.utils.init", "init_", "torch.Tanh", "torch.Tanh", "torch.Tanh", "init_", "torch.Tanh", "torch.Tanh", "torch.Tanh", "init_", "torch.Tanh", "torch.Tanh", "torch.Tanh", "init_", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "numpy.sqrt", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "recurrent", "=", "False", ",", "hidden_size", "=", "64", ")", ":", "\n", "        ", "super", "(", "MLPBase", ",", "self", ")", ".", "__init__", "(", "recurrent", ",", "num_inputs", ",", "hidden_size", ")", "\n", "\n", "if", "recurrent", ":", "\n", "            ", "num_inputs", "=", "hidden_size", "\n", "\n", "", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "\n", "self", ".", "actor", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "self", ".", "critic", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "self", ".", "critic_linear", "=", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.MLPBase.forward": [[1936, 1946], ["3statemodel.MLPBase.critic", "3statemodel.MLPBase.actor", "3statemodel.MLPBase._forward_gru", "3statemodel.MLPBase.critic_linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.NNBase._forward_gru"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "if", "self", ".", "is_recurrent", ":", "\n", "            ", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ",", "masks", ")", "\n", "\n", "", "hidden_critic", "=", "self", ".", "critic", "(", "x", ")", "\n", "hidden_actor", "=", "self", ".", "actor", "(", "x", ")", "\n", "\n", "return", "self", ".", "critic_linear", "(", "hidden_critic", ")", ",", "hidden_actor", ",", "rnn_hxs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.select_last": [[268, 278], ["x.sum().view.size", "x.sum().view.size", "x.sum().view.data.new().resize_as_().fill_", "range", "Variable", "x.sum().view.mul", "x.sum().view.sum().view", "[].fill_", "x.sum().view.size", "x.sum().view.data.new().resize_as_", "x.sum().view.sum", "x.sum().view.data.new"], "function", ["None"], ["", "", "def", "select_last", "(", "x", ",", "lengths", ")", ":", "\n", "    ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "seq_length", "=", "x", ".", "size", "(", "1", ")", "\n", "mask", "=", "x", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "x", ".", "data", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "mask", "[", "i", "]", "[", "lengths", "[", "i", "]", "-", "1", "]", ".", "fill_", "(", "1", ")", "\n", "", "mask", "=", "Variable", "(", "mask", ")", "\n", "x", "=", "x", ".", "mul", "(", "mask", ")", "\n", "x", "=", "x", ".", "sum", "(", "1", ")", ".", "view", "(", "batch_size", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.process_lengths": [[279, 286], ["input.size", "input.size", "list", "input.data.eq().sum().squeeze", "input.data.eq().sum().squeeze", "input.data.eq().sum", "input.data.eq().sum", "input.data.eq", "input.data.eq"], "function", ["None"], ["", "def", "process_lengths", "(", "input", ")", ":", "\n", "    ", "max_length", "=", "input", ".", "size", "(", "1", ")", "\n", "if", "input", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "        ", "lengths", "=", "[", "max_length", "-", "input", ".", "data", ".", "eq", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "]", "\n", "", "else", ":", "\n", "        ", "lengths", "=", "list", "(", "max_length", "-", "input", ".", "data", ".", "eq", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", ")", "\n", "", "return", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.3statemodel.build_vocabulary": [[1591, 1646], ["enumerate", "numpy.random.uniform().astype", "3statemodel.Vocabulary", "enumerate", "print", "torchtext.GloVe", "torchtext.GloVe", "numpy.random.uniform", "numpy.array", "len", "vec_string.split", "3statemodel.Vocabulary.add_word"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word"], ["", "", "def", "build_vocabulary", "(", "train_instructions", ",", "save_name", ",", "embed_dim", ")", ":", "\n", "\n", "    ", "freqs", "=", "{", "}", "\n", "\n", "if", "embed_dim", "==", "300", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "#maybe switch this out!", "\n", "", "elif", "embed_dim", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "\n", "", "for", "instruction", "in", "train_instructions", ":", "\n", "\n", "        ", "for", "word", "in", "instruction", ":", "\n", "\n", "            ", "try", ":", "\n", "                ", "vec", "=", "glove", ".", "vectors", "[", "glove", ".", "stoi", "[", "word", "]", "]", "\n", "if", "word", "in", "freqs", ":", "\n", "                    ", "freqs", "[", "word", "]", "=", "freqs", "[", "word", "]", "+", "1", "\n", "", "else", ":", "\n", "                    ", "freqs", "[", "word", "]", "=", "1", "\n", "", "", "except", ":", "\n", "                ", "if", "'UNK'", "in", "freqs", ":", "\n", "                    ", "freqs", "[", "'UNK'", "]", "=", "freqs", "[", "'UNK'", "]", "+", "1", "\n", "", "else", ":", "\n", "                    ", "freqs", "[", "'UNK'", "]", "=", "1", "\n", "\n", "", "", "", "", "vocab_size", "=", "0", "\n", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "freqs", ")", ":", "\n", "        ", "if", "'UNK'", "!=", "key", "and", "freqs", "[", "key", "]", ">", "10", ":", "\n", "            ", "vocab_size", "=", "vocab_size", "+", "1", "\n", "\n", "\n", "", "", "vocab_weights", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.01", ",", "0.01", ",", "(", "vocab_size", "+", "4", ",", "embed_dim", ")", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "#vocab_weights = np.zeros((vocab_size+4, embed_dim), dtype=np.float32)", "\n", "vocab", "=", "Vocabulary", "(", ")", "\n", "\n", "count", "=", "0", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "freqs", ")", ":", "\n", "\n", "## ENFORCE THAT IF < THRESHOLD, DON'T INCLUDE!! ", "\n", "# NOT USING i  and key correctly... ?? ", "\n", "\n", "        ", "if", "'UNK'", "==", "key", ":", "\n", "            ", "vec_string", "=", "'0.22418134 -0.28881392 0.13854356 0.00365387 -0.12870757 0.10243822 0.061626635 0.07318011 -0.061350107 -1.3477012 0.42037755 -0.063593924 -0.09683349 0.18086134 0.23704372 0.014126852 0.170096 -1.1491593 0.31497982 0.06622181 0.024687296 0.076693475 0.13851812 0.021302193 -0.06640582 -0.010336159 0.13523154 -0.042144544 -0.11938788 0.006948221 0.13333307 -0.18276379 0.052385733 0.008943111 -0.23957317 0.08500333 -0.006894406 0.0015864656 0.063391194 0.19177166 -0.13113557 -0.11295479 -0.14276934 0.03413971 -0.034278486 -0.051366422 0.18891625 -0.16673574 -0.057783455 0.036823478 0.08078679 0.022949161 0.033298038 0.011784158 0.05643189 -0.042776518 0.011959623 0.011552498 -0.0007971594 0.11300405 -0.031369694 -0.0061559738 -0.009043574 -0.415336 -0.18870236 0.13708843 0.005911723 -0.113035575 -0.030096142 -0.23908928 -0.05354085 -0.044904727 -0.20228513 0.0065645403 -0.09578946 -0.07391877 -0.06487607 0.111740574 -0.048649278 -0.16565254 -0.052037314 -0.078968436 0.13684988 0.0757494 -0.006275573 0.28693774 0.52017444 -0.0877165 -0.33010918 -0.1359622 0.114895485 -0.09744406 0.06269521 0.12118575 -0.08026362 0.35256687 -0.060017522 -0.04889904 -0.06828978 0.088740796 0.003964443 -0.0766291 0.1263925 0.07809314 -0.023164088 -0.5680669 -0.037892066 -0.1350967 -0.11351585 -0.111434504 -0.0905027 0.25174105 -0.14841858 0.034635577 -0.07334565 0.06320108 -0.038343467 -0.05413284 0.042197507 -0.090380974 -0.070528865 -0.009174437 0.009069661 0.1405178 0.02958134 -0.036431845 -0.08625681 0.042951006 0.08230793 0.0903314 -0.12279937 -0.013899368 0.048119213 0.08678239 -0.14450377 -0.04424887 0.018319942 0.015026873 -0.100526 0.06021201 0.74059093 -0.0016333034 -0.24960588 -0.023739101 0.016396184 0.11928964 0.13950661 -0.031624354 -0.01645025 0.14079992 -0.0002824564 -0.08052984 -0.0021310581 -0.025350995 0.086938225 0.14308536 0.17146006 -0.13943303 0.048792403 0.09274929 -0.053167373 0.031103406 0.012354865 0.21057427 0.32618305 0.18015954 -0.15881181 0.15322933 -0.22558987 -0.04200665 0.0084689725 0.038156632 0.15188617 0.13274793 0.113756925 -0.095273495 -0.049490947 -0.10265804 -0.27064866 -0.034567792 -0.018810693 -0.0010360252 0.10340131 0.13883452 0.21131058 -0.01981019 0.1833468 -0.10751636 -0.03128868 0.02518242 0.23232952 0.042052146 0.11731903 -0.15506615 0.0063580726 -0.15429358 0.1511722 0.12745973 0.2576985 -0.25486213 -0.0709463 0.17983761 0.054027 -0.09884228 -0.24595179 -0.093028545 -0.028203879 0.094398156 0.09233813 0.029291354 0.13110267 0.15682974 -0.016919162 0.23927948 -0.1343307 -0.22422817 0.14634751 -0.064993896 0.4703685 -0.027190214 0.06224946 -0.091360025 0.21490277 -0.19562101 -0.10032754 -0.09056772 -0.06203493 -0.18876675 -0.10963594 -0.27734384 0.12616494 -0.02217992 -0.16058226 -0.080475815 0.026953284 0.110732645 0.014894041 0.09416802 0.14299914 -0.1594008 -0.066080004 -0.007995227 -0.11668856 -0.13081996 -0.09237365 0.14741232 0.09180138 0.081735 0.3211204 -0.0036552632 -0.047030564 -0.02311798 0.048961394 0.08669574 -0.06766279 -0.50028914 -0.048515294 0.14144728 -0.032994404 -0.11954345 -0.14929578 -0.2388355 -0.019883996 -0.15917352 -0.052084364 0.2801028 -0.0029121689 -0.054581646 -0.47385484 0.17112483 -0.12066923 -0.042173345 0.1395337 0.26115036 0.012869649 0.009291686 -0.0026459037 -0.075331464 0.017840583 -0.26869613 -0.21820338 -0.17084768 -0.1022808 -0.055290595 0.13513643 0.12362477 -0.10980586 0.13980341 -0.20233242 0.08813751 0.3849736 -0.10653763 -0.06199595 0.028849555 0.03230154 0.023856193 0.069950655 0.19310954 -0.077677034 -0.144811'", "\n", "average_glove_vector", "=", "np", ".", "array", "(", "vec_string", ".", "split", "(", "\" \"", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "freqs", "[", "key", "]", ">", "10", ":", "\n", "                ", "vocab_weights", "[", "count", "]", "=", "glove", ".", "vectors", "[", "glove", ".", "stoi", "[", "key", "]", "]", "\n", "count", "=", "count", "+", "1", "\n", "vocab", ".", "add_word", "(", "key", ")", "\n", "\n", "", "", "", "print", "(", "\"Total vocabulary size: {}\"", ".", "format", "(", "len", "(", "vocab", ")", ")", ")", "\n", "\n", "return", "vocab", ",", "vocab_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.__init__": [[19, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2idx", "=", "{", "}", "\n", "self", ".", "idx2word", "=", "{", "}", "\n", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word": [[24, 29], ["None"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "word2idx", ":", "\n", "            ", "self", ".", "word2idx", "[", "word", "]", "=", "self", ".", "idx", "\n", "self", ".", "idx2word", "[", "self", ".", "idx", "]", "=", "word", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.__call__": [[30, 34], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "word2idx", ":", "\n", "            ", "return", "self", ".", "word2idx", "[", "'<unk>'", "]", "\n", "", "return", "self", ".", "word2idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Flatten.forward": [[40, 42], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.__init__": [[45, 70], ["torch.Module.__init__", "base", "pytorchppo.a2c_ppo_acktr.distributions.Categorical", "pytorchppo.a2c_ppo_acktr.distributions.DiagGaussian", "pytorchppo.a2c_ppo_acktr.distributions.Bernoulli"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obs_shape", ",", "action_space", ",", "base", "=", "None", ",", "base_kwargs", "=", "None", ")", ":", "\n", "        ", "super", "(", "Policy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_kwargs", "is", "None", ":", "\n", "            ", "base_kwargs", "=", "{", "}", "\n", "", "if", "base", "is", "None", ":", "\n", "            ", "base", "=", "MazeBaseBase", "\n", "#if len(obs_shape) == 3:", "\n", "#    base = CNNBase", "\n", "#elif len(obs_shape) == 1:", "\n", "#    base = MLPBase", "\n", "#else:", "\n", "#    raise NotImplementedError", "\n", "", "self", ".", "base", "=", "base", "(", "obs_shape", "[", "0", "]", ",", "**", "base_kwargs", ")", "\n", "\n", "if", "action_space", ".", "__class__", ".", "__name__", "==", "\"Discrete\"", ":", "\n", "            ", "num_outputs", "=", "action_space", ".", "n", "\n", "self", ".", "dist", "=", "Categorical", "(", "self", ".", "base", ".", "output_size", ",", "num_outputs", ")", "\n", "", "elif", "action_space", ".", "__class__", ".", "__name__", "==", "\"Box\"", ":", "\n", "            ", "num_outputs", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "dist", "=", "DiagGaussian", "(", "self", ".", "base", ".", "output_size", ",", "num_outputs", ")", "\n", "", "elif", "action_space", ".", "__class__", ".", "__name__", "==", "\"MultiBinary\"", ":", "\n", "            ", "num_outputs", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "dist", "=", "Bernoulli", "(", "self", ".", "base", ".", "output_size", ",", "num_outputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.is_recurrent": [[71, 74], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_recurrent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base", ".", "is_recurrent", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.recurrent_hidden_state_size": [[75, 79], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_hidden_state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Size of rnn_hx.\"\"\"", "\n", "return", "self", ".", "base", ".", "recurrent_hidden_state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.forward": [[80, 82], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.act": [[83, 96], ["model.Policy.base", "model.Policy.dist", "model.Policy.log_probs", "model.Policy.entropy().mean", "model.Policy.mode", "model.Policy.sample", "model.Policy.entropy"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.mazebase-training.train_models.LanguageNetv3.sample"], ["", "def", "act", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "action", "=", "dist", ".", "mode", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "dist_entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "value", ",", "action", ",", "action_log_probs", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.get_value": [[97, 100], ["model.Policy.base"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "value", ",", "_", ",", "_", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.evaluate_actions": [[101, 109], ["model.Policy.base", "model.Policy.dist", "model.Policy.log_probs", "model.Policy.entropy().mean", "model.Policy.entropy"], "methods", ["None"], ["", "def", "evaluate_actions", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "action", ")", ":", "\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "dist_entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "value", ",", "action_log_probs", ",", "dist_entropy", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.NNBase.__init__": [[112, 125], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU", "model.NNBase.gru.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "recurrent", ",", "recurrent_input_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "NNBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_hidden_size", "=", "hidden_size", "\n", "self", ".", "_recurrent", "=", "recurrent", "\n", "\n", "if", "recurrent", ":", "\n", "            ", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "recurrent_input_size", ",", "hidden_size", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "gru", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.NNBase.is_recurrent": [[126, 129], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "is_recurrent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_recurrent", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.NNBase.recurrent_hidden_state_size": [[130, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_hidden_state_size", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_recurrent", ":", "\n", "            ", "return", "self", ".", "_hidden_size", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.NNBase.output_size": [[136, 139], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.NNBase._forward_gru": [[140, 196], ["x.view.view.size", "hxs.squeeze.squeeze.size", "model.NNBase.gru", "x.view.view.squeeze", "hxs.squeeze.squeeze.squeeze", "hxs.squeeze.squeeze.size", "int", "x.view.view.view", "masks.view.view.view", "hxs.squeeze.squeeze.unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view.view.view", "hxs.squeeze.squeeze.squeeze", "x.view.view.unsqueeze", "x.view.view.size", "has_zeros.dim", "model.NNBase.gru", "outputs.append", "x.view.view.size", "len", "has_zeros.item", "masks[].view"], "methods", ["None"], ["", "def", "_forward_gru", "(", "self", ",", "x", ",", "hxs", ",", "masks", ")", ":", "\n", "        ", "if", "x", ".", "size", "(", "0", ")", "==", "hxs", ".", "size", "(", "0", ")", ":", "\n", "            ", "x", ",", "hxs", "=", "self", ".", "gru", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "(", "hxs", "*", "masks", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "x", "=", "x", ".", "squeeze", "(", "0", ")", "\n", "hxs", "=", "hxs", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "# x is a (T, N, -1) tensor that has been flatten to (T * N, -1)", "\n", "            ", "N", "=", "hxs", ".", "size", "(", "0", ")", "\n", "T", "=", "int", "(", "x", ".", "size", "(", "0", ")", "/", "N", ")", "\n", "\n", "# unflatten", "\n", "x", "=", "x", ".", "view", "(", "T", ",", "N", ",", "x", ".", "size", "(", "1", ")", ")", "\n", "\n", "# Same deal with masks", "\n", "masks", "=", "masks", ".", "view", "(", "T", ",", "N", ")", "\n", "\n", "# Let's figure out which steps in the sequence have a zero for any agent", "\n", "# We will always assume t=0 has a zero in it as that makes the logic cleaner", "\n", "has_zeros", "=", "(", "(", "masks", "[", "1", ":", "]", "==", "0.0", ")", ".", "any", "(", "dim", "=", "-", "1", ")", "\n", ".", "nonzero", "(", ")", "\n", ".", "squeeze", "(", ")", "\n", ".", "cpu", "(", ")", ")", "\n", "\n", "# +1 to correct the masks[1:]", "\n", "if", "has_zeros", ".", "dim", "(", ")", "==", "0", ":", "\n", "# Deal with scalar", "\n", "                ", "has_zeros", "=", "[", "has_zeros", ".", "item", "(", ")", "+", "1", "]", "\n", "", "else", ":", "\n", "                ", "has_zeros", "=", "(", "has_zeros", "+", "1", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# add t=0 and t=T to the list", "\n", "", "has_zeros", "=", "[", "0", "]", "+", "has_zeros", "+", "[", "T", "]", "\n", "\n", "hxs", "=", "hxs", ".", "unsqueeze", "(", "0", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "has_zeros", ")", "-", "1", ")", ":", "\n", "# We can now process steps that don't have any zeros in masks together!", "\n", "# This is much faster", "\n", "                ", "start_idx", "=", "has_zeros", "[", "i", "]", "\n", "end_idx", "=", "has_zeros", "[", "i", "+", "1", "]", "\n", "\n", "rnn_scores", ",", "hxs", "=", "self", ".", "gru", "(", "\n", "x", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "hxs", "*", "masks", "[", "start_idx", "]", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "\n", "outputs", ".", "append", "(", "rnn_scores", ")", "\n", "\n", "# assert len(outputs) == T", "\n", "# x is a (T, N, -1) tensor", "\n", "", "x", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "T", "*", "N", ",", "-", "1", ")", "\n", "hxs", "=", "hxs", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "return", "x", ",", "hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.CNNBase.__init__": [[199, 217], ["model.NNBase.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "init_", "model.CNNBase.train", "pytorchppo.a2c_ppo_acktr.utils.init", "init_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "init_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "init_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.Flatten", "init_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "pytorchppo.a2c_ppo_acktr.utils.init", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "recurrent", "=", "False", ",", "hidden_size", "=", "512", ")", ":", "\n", "        ", "super", "(", "CNNBase", ",", "self", ")", ".", "__init__", "(", "recurrent", ",", "hidden_size", ",", "hidden_size", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ",", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "num_inputs", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "stride", "=", "1", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "Flatten", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "32", "*", "7", "*", "7", ",", "hidden_size", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ")", "\n", "\n", "self", ".", "critic_linear", "=", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.CNNBase.forward": [[218, 225], ["model.CNNBase.main", "model.CNNBase._forward_gru", "model.CNNBase.critic_linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.gail_experts.convert_to_pytorch.main", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.NNBase._forward_gru"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "x", "=", "self", ".", "main", "(", "inputs", "/", "255.0", ")", "\n", "\n", "if", "self", ".", "is_recurrent", ":", "\n", "            ", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ",", "masks", ")", "\n", "\n", "", "return", "self", ".", "critic_linear", "(", "x", ")", ",", "x", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.MazeBaseNet.__init__": [[227, 241], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "MazeBaseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "300", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "500", ",", "128", ")", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "128", ",", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.MazeBaseNet.forward": [[242, 267], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.MazeBaseNet.fc1", "model.MazeBaseNet.fc2", "model.MazeBaseNet.fc3", "model.MazeBaseNet.fc4", "model.MazeBaseNet.fc5", "model.MazeBaseNet.fc_inv", "model.MazeBaseNet.fc55", "model.MazeBaseNet.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "#temp_inv = temp_inv.view(-1, 50*10)", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "features", ")", ")", "\n", "\n", "return", "c6", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.GRU.__init__": [[288, 301], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "model.GRU.embedding.load_state_dict", "torch.GRU", "torch.GRU", "torch.GRU", "len", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "embed_weights", ",", "emb_size", ",", "hidden_size", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", "GRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "len", "(", "self", ".", "vocab", ")", "+", "1", ",", "\n", "embedding_dim", "=", "emb_size", ",", "\n", "padding_idx", "=", "len", "(", "self", ".", "vocab", ")", ")", "\n", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_size", "=", "emb_size", ",", "hidden_size", "=", "hidden_size", ",", "num_layers", "=", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.GRU.forward": [[302, 309], ["model.process_lengths", "model.GRU.embedding", "model.GRU.rnn.flatten_parameters", "model.GRU.rnn", "model.select_last"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.process_lengths", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.select_last"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "lengths", "=", "process_lengths", "(", "input", ")", "\n", "x", "=", "self", ".", "embedding", "(", "input", ")", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "output", ",", "hn", "=", "self", ".", "rnn", "(", "x", ")", "\n", "output", "=", "select_last", "(", "output", ",", "lengths", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.AllObsPredictAtten.__init__": [[311, 372], ["torch.Module.__init__", "model.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.SwitchModule", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "net_input_sizes.append", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "vocab_words", ",", "vocab_weights", ",", "with_pred", "=", "False", ",", "init_fn", "=", "None", ",", "opt", "=", "None", ",", "env_vocab", "=", "None", ",", "max_bounds", "=", "None", ",", "num_stack", "=", "1", ",", "add_net_pred", "=", "False", ",", "pred_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AllObsPredictAtten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#self.lang_model = lang_model", "\n", "\n", "# Set state vars", "\n", "self", ".", "hid_sz", "=", "32", "\n", "self", ".", "use_dropout", "=", "False", "\n", "self", ".", "embed_dim", "=", "300", "\n", "embed_dim", "=", "300", "\n", "\n", "self", ".", "vocab", "=", "vocab_words", "\n", "\n", "seq2vec_opt", "=", "{", "}", "\n", "seq2vec_opt", "[", "'arch'", "]", "=", "'bow'", "\n", "seq2vec_opt", "[", "'dropout'", "]", "=", "False", "\n", "seq2vec_opt", "[", "'emb_size'", "]", "=", "32", "\n", "seq2vec_opt", "[", "'hidden_size'", "]", "=", "32", "\n", "#self.seq2vec = BOW(vocab_words, vocab_weights, 300)", "\n", "self", ".", "seq2vec", "=", "GRU", "(", "vocab_words", ",", "vocab_weights", ",", "embed_dim", ",", "32", ",", "1", ")", "\n", "\n", "#fc layers", "\n", "self", ".", "fc_gridembed", "=", "nn", ".", "Linear", "(", "25", "*", "embed_dim", ",", "32", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "25", "*", "7", ",", "32", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "10", "*", "embed_dim", ",", "32", ")", "# 10 inventory slots", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "32", ")", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "300", ",", "32", ")", "\n", "self", ".", "fc_onehot_embed", "=", "nn", ".", "Linear", "(", "7", ",", "32", ")", "\n", "self", ".", "fc_comb", "=", "nn", ".", "Linear", "(", "25", "*", "32", ",", "32", ")", "\n", "self", ".", "fc_inv_first", "=", "nn", ".", "Linear", "(", "300", ",", "32", ")", "\n", "self", ".", "fc_inv_second", "=", "nn", ".", "Linear", "(", "32", "*", "10", ",", "32", ")", "\n", "\n", "# Decide what inputs go in net and key", "\n", "\n", "# key is for attention", "\n", "key_sz", "=", "32", "# 32 for GRU and 300 for BOW", "\n", "self", ".", "key_inputs", "=", "[", "'wids'", "]", "\n", "\n", "# net is for regular input", "\n", "#self.net_inputs = ['grid_embed', 'grid_onehot', 'inv', 'goal']", "\n", "self", ".", "net_inputs", "=", "[", "'grid_comb'", ",", "'inv'", ",", "'goal'", "]", "\n", "net_input_sizes", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_input_sizes", ".", "append", "(", "self", ".", "hid_sz", ")", "\n", "\n", "# Make batch modules", "\n", "", "module_opt", "=", "{", "}", "\n", "module_opt", "[", "'num_modules'", "]", "=", "12", "#16", "\n", "module_opt", "[", "'switch_sz'", "]", "=", "key_sz", "\n", "module_opt", "[", "'hid_sz'", "]", "=", "self", ".", "hid_sz", "\n", "module_opt", "[", "'num_layer'", "]", "=", "2", "\n", "self", ".", "batch_modules", "=", "SwitchModule", "(", "net_input_sizes", ",", "len", "(", "net_input_sizes", ")", ",", "module_opt", ")", "\n", "\n", "# Transfer layers", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "self", ".", "fc_final", "=", "nn", ".", "Linear", "(", "32", ",", "8", ")", "# was 9", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.AllObsPredictAtten.forward": [[374, 423], ["x[].reshape", "x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.AllObsPredictAtten.batch_modules", "model.AllObsPredictAtten.drop", "model.AllObsPredictAtten.fc_embed", "model.AllObsPredictAtten.fc_onehot_embed", "model.AllObsPredictAtten.fc_comb", "model.AllObsPredictAtten.fc_inv_first", "model.AllObsPredictAtten.fc_inv_second", "model.AllObsPredictAtten.fc_goal", "torch.cat.append", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hiddens", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "10", ",", "300", ")", ")", "\n", "\n", "# seqs, hiddens = lang_model.get_hidden_state_new(grid_embedding, grid_onehot, inventory, goal, self.vocab)         ", "\n", "\n", "#combined grid embedding", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot_embed", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", "*", "self", ".", "hid_sz", ")", "\n", "grid_comb", "=", "F", ".", "relu", "(", "self", ".", "fc_comb", "(", "grid_comb", ")", ")", "\n", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv_first", "(", "inventory", ")", ")", "\n", "inventory", "=", "c3", ".", "view", "(", "-", "1", ",", "10", "*", "self", ".", "hid_sz", ")", "\n", "inv_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_inv_second", "(", "inventory", ")", ")", "\n", "goal_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "\n", "# Get key and net inputs", "\n", "key", "=", "[", "]", "\n", "if", "'wids'", "in", "self", ".", "key_inputs", ":", "\n", "            ", "key", ".", "append", "(", "hiddens", ")", "\n", "", "key", "=", "torch", ".", "cat", "(", "key", ",", "1", ")", "\n", "\n", "net_inputs", "=", "(", ")", "\n", "if", "'grid_comb'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_comb", ",", ")", "\n", "", "if", "'grid_embed'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_embed", ",", ")", "\n", "", "if", "'grid_onehot'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_1hot_embed", ",", ")", "\n", "", "if", "'inv'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "inv_embed", ",", ")", "\n", "", "if", "'goal'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "goal_embed", ",", ")", "\n", "\n", "# Forward through module net", "\n", "", "x", "=", "self", ".", "batch_modules", "(", "(", "net_inputs", ",", "key", ")", ")", "\n", "\n", "# Optionally add dropout", "\n", "#if self.use_dropout:", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.MazeBaseNetLang.__init__": [[427, 481], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "model.MazeBaseNetLang.embedding.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.SwitchModule", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "net_input_sizes.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "lang_model", ",", "vocab_words", ",", "vocab_weights", ")", ":", "\n", "        ", "super", "(", "MazeBaseNetLang", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lang_model", "=", "lang_model", "\n", "\n", "# Set state vars", "\n", "self", ".", "embed_dim", "=", "300", "\n", "self", ".", "hid_sz", "=", "hidden_size", "\n", "self", ".", "use_dropout", "=", "False", "\n", "\n", "#self.seq2vec = BOW(vocab_words, vocab_weights, 300)", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "len", "(", "vocab_words", ")", "+", "1", ",", "\n", "embedding_dim", "=", "self", ".", "embed_dim", ",", "padding_idx", "=", "len", "(", "vocab_words", ")", ")", "\n", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "vocab_weights", "}", ")", "\n", "\n", "self", ".", "vocab", "=", "vocab_words", "\n", "\n", "#fc layers", "\n", "self", ".", "fc_gridembed", "=", "nn", ".", "Linear", "(", "25", "*", "self", ".", "embed_dim", ",", "32", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "25", "*", "7", ",", "32", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "10", "*", "self", ".", "embed_dim", ",", "32", ")", "# 10 inventory slots", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "32", ")", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "300", ",", "32", ")", "\n", "self", ".", "fc_onehot_embed", "=", "nn", ".", "Linear", "(", "7", ",", "32", ")", "\n", "self", ".", "fc_comb", "=", "nn", ".", "Linear", "(", "25", "*", "32", ",", "32", ")", "\n", "self", ".", "fc_inv_first", "=", "nn", ".", "Linear", "(", "300", ",", "32", ")", "\n", "self", ".", "fc_inv_second", "=", "nn", ".", "Linear", "(", "32", "*", "10", ",", "32", ")", "\n", "\n", "# Decide what inputs go in net and key", "\n", "\n", "# key is for attention", "\n", "key_sz", "=", "300", "\n", "self", ".", "key_inputs", "=", "[", "'wids'", "]", "\n", "\n", "# net is for regular input", "\n", "self", ".", "net_inputs", "=", "[", "'grid_embed'", ",", "'grid_onehot'", ",", "'inv'", ",", "'goal'", "]", "\n", "#self.net_inputs = ['grid_comb', 'inv', 'goal']", "\n", "net_input_sizes", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_input_sizes", ".", "append", "(", "self", ".", "hid_sz", ")", "\n", "\n", "# Make batch modules", "\n", "", "module_opt", "=", "{", "}", "\n", "module_opt", "[", "'num_modules'", "]", "=", "12", "#16", "\n", "module_opt", "[", "'switch_sz'", "]", "=", "key_sz", "\n", "module_opt", "[", "'hid_sz'", "]", "=", "self", ".", "hid_sz", "\n", "module_opt", "[", "'num_layer'", "]", "=", "2", "\n", "self", ".", "batch_modules", "=", "SwitchModule", "(", "net_input_sizes", ",", "len", "(", "net_input_sizes", ")", ",", "module_opt", ")", "\n", "\n", "# Transfer layers", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.MazeBaseNetLang.forward": [[482, 543], ["x[].reshape", "x[].reshape", "x[].reshape", "model.MazeBaseNetLang.lang_model.get_hidden_state", "numpy.asarray", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "model.MazeBaseNetLang.embedding", "model.MazeBaseNetLang.sum", "grid_embedding.view.view.view", "torch.relu", "torch.relu", "torch.relu", "grid_onehot.view.view.view", "torch.relu", "torch.relu", "torch.relu", "inventory.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MazeBaseNetLang.batch_modules", "numpy.array", "model.MazeBaseNetLang.fc_gridembed", "model.MazeBaseNetLang.fc_onehot", "model.MazeBaseNetLang.fc_inv", "model.MazeBaseNetLang.fc_goal", "torch.cat.append", "torch.cat.append", "torch.cat.append", "model.MazeBaseNetLang.drop", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "len"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttention.get_hidden_state"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "#grid_embedding = x[:,:5*5*300].reshape((x.shape[0], 5,5,300))", "\n", "#grid_onehot = x[:, 5*5*300:(5*5*300)+(5*5*7)].reshape((x.shape[0], 5,5,7))", "\n", "#goal = x[:, (5*5*300)+(5*5*7) : (5*5*300)+(5*5*7)+300]", "\n", "#inventory = x[:, (5*5*300)+(5*5*7)+300:].reshape((x.shape[0], 10, 300))", "\n", "\n", "        ", "k_prev", "=", "x", "[", ":", ",", "0", "]", "\n", "top_k", "=", "x", "[", ":", ",", "1", "]", "\n", "\n", "grid_embedding", "=", "x", "[", ":", ",", "2", ":", "2", "+", "(", "5", "*", "5", "*", "300", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "2", "+", "(", "5", "*", "5", "*", "300", ")", ":", "2", "+", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "2", "+", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "2", "+", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "2", "+", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "10", ",", "300", ")", ")", "\n", "\n", "#get language here!", "\n", "all_sampled_ids", "=", "self", ".", "lang_model", ".", "get_hidden_state", "(", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "k_prev", ",", "top_k", ",", "self", ".", "vocab", ")", "\n", "bow_ids", "=", "[", "np", ".", "array", "(", "sent", "+", "[", "len", "(", "self", ".", "vocab", ")", "]", "*", "(", "20", "-", "len", "(", "sent", ")", ")", ")", "for", "sent", "in", "all_sampled_ids", "]", "\n", "bow_ids", "=", "np", ".", "asarray", "(", "bow_ids", ",", "dtype", "=", "int", ")", "\n", "bow_ids", "=", "torch", ".", "from_numpy", "(", "bow_ids", ")", ".", "cuda", "(", ")", "\n", "\n", "# Encode sequence", "\n", "output", "=", "self", ".", "embedding", "(", "bow_ids", ")", "\n", "statement", "=", "output", ".", "sum", "(", "1", ")", "\n", "#statement = self.seq2vec(bow_ids)", "\n", "\n", "grid_embedding", "=", "grid_embedding", ".", "view", "(", "-", "1", ",", "25", "*", "self", ".", "embed_dim", ")", "\n", "grid_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_gridembed", "(", "grid_embedding", ")", ")", "\n", "grid_onehot", "=", "grid_onehot", ".", "view", "(", "-", "1", ",", "25", "*", "7", ")", "\n", "grid_1hot_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "inventory", "=", "inventory", ".", "view", "(", "-", "1", ",", "10", "*", "self", ".", "embed_dim", ")", "\n", "inv_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "goal_embed", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "\n", "\n", "# Get key and net inputs", "\n", "key", "=", "[", "]", "\n", "if", "'wids'", "in", "self", ".", "key_inputs", ":", "\n", "            ", "key", ".", "append", "(", "statement", ")", "\n", "", "key", "=", "torch", ".", "cat", "(", "key", ",", "1", ")", "\n", "\n", "net_inputs", "=", "(", ")", "\n", "if", "'grid_comb'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_comb", ",", ")", "\n", "", "if", "'grid_embed'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_embed", ",", ")", "\n", "", "if", "'grid_onehot'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "grid_1hot_embed", ",", ")", "\n", "", "if", "'inv'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "inv_embed", ",", ")", "\n", "", "if", "'goal'", "in", "self", ".", "net_inputs", ":", "\n", "            ", "net_inputs", "+=", "(", "goal_embed", ",", ")", "\n", "\n", "# Forward through module net", "\n", "", "x", "=", "self", ".", "batch_modules", "(", "(", "net_inputs", ",", "key", ")", ")", "\n", "\n", "# Optionally add dropout", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.SwitchModule.__init__": [[549, 572], ["torch.Module.__init__", "model.ListModule", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax", "len", "model.BatchMLP", "model.SwitchModule.batch_modules.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_sz", ",", "num_inputs", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SwitchModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Get parameters", "\n", "self", ".", "input_sz", "=", "input_sz", "\n", "self", ".", "num_inputs", "=", "num_inputs", "\n", "self", ".", "num_modules", "=", "opt", "[", "'num_modules'", "]", "\n", "self", ".", "hid_sz", "=", "opt", "[", "'hid_sz'", "]", "\n", "num_layer", "=", "opt", "[", "'num_layer'", "]", "\n", "assert", "(", "len", "(", "self", ".", "input_sz", ")", "==", "num_inputs", ")", "\n", "assert", "(", "self", ".", "num_modules", "%", "num_inputs", "==", "0", ")", "\n", "\n", "# Make batch modules", "\n", "self", ".", "batch_modules", "=", "[", "]", "\n", "for", "module_in_size", "in", "self", ".", "input_sz", ":", "\n", "            ", "bm_input", "=", "BatchMLP", "(", "module_in_size", ",", "self", ".", "hid_sz", ",", "num_layer", ",", "self", ".", "num_modules", "//", "num_inputs", ")", "\n", "self", ".", "batch_modules", ".", "append", "(", "bm_input", ")", "\n", "", "self", ".", "batch_modules", "=", "ListModule", "(", "*", "self", ".", "batch_modules", ")", "\n", "\n", "# Make soft attention network components (if applicible)", "\n", "self", ".", "switch_sz", "=", "opt", "[", "'switch_sz'", "]", "\n", "self", ".", "att_in", "=", "nn", ".", "Linear", "(", "self", ".", "switch_sz", ",", "self", ".", "num_modules", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.SwitchModule.forward": [[574, 594], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.SwitchModule.softmax", "selection.repeat.repeat.unsqueeze", "selection.repeat.repeat.repeat", "module_outs.sum.sum.sum", "len", "net_input.unsqueeze().expand", "all_module_outs.append", "model.SwitchModule.att_in", "module_outs.sum.sum.size", "net_input.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "net_inputs", "=", "inputs", "[", "0", "]", "\n", "# Compute batch module output", "\n", "assert", "(", "len", "(", "net_inputs", ")", "==", "self", ".", "num_inputs", ")", "\n", "all_module_outs", "=", "[", "]", "\n", "for", "i", ",", "net_input", "in", "enumerate", "(", "net_inputs", ")", ":", "\n", "            ", "batch_inputs", "=", "net_input", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "-", "1", ",", "self", ".", "num_modules", "//", "self", ".", "num_inputs", ",", "-", "1", "]", ")", "\n", "module_outs", "=", "self", ".", "batch_modules", "[", "i", "]", "(", "batch_inputs", ")", "# module_outs is bs x nm//ni x out_sz", "\n", "all_module_outs", ".", "append", "(", "module_outs", ")", "\n", "", "module_outs", "=", "torch", ".", "cat", "(", "all_module_outs", ",", "1", ")", "\n", "\n", "# Soft attention on output", "\n", "switch_input", "=", "inputs", "[", "1", "]", "\n", "selection", "=", "self", ".", "softmax", "(", "self", ".", "att_in", "(", "switch_input", ")", ")", "\n", "selection", "=", "selection", ".", "unsqueeze", "(", "2", ")", "\n", "selection", "=", "selection", ".", "repeat", "(", "[", "1", ",", "1", ",", "module_outs", ".", "size", "(", "2", ")", "]", ")", "\n", "module_outs", "*=", "selection", "\n", "module_outs", "=", "module_outs", ".", "sum", "(", "1", ")", "\n", "\n", "return", "module_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.BatchMLP.__init__": [[598, 611], ["torch.Module.__init__", "torch.Tanh", "torch.Tanh", "torch.Tanh", "model.BatchLinear", "range", "model.ListModule", "model.BatchLinear", "model.BatchLinear", "hid_layers.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_sz", ",", "hid_sz", ",", "num_layer", ",", "num_modules", ")", ":", "\n", "        ", "super", "(", "BatchMLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Make network values", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "in_fc", "=", "BatchLinear", "(", "input_sz", ",", "hid_sz", ",", "num_modules", ")", "\n", "assert", "(", "num_layer", ">=", "2", ")", "# If num_layer is 2, actually no hidden layers technically", "\n", "hid_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_layer", "-", "2", ")", ":", "\n", "            ", "hid_fc", "=", "BatchLinear", "(", "hid_sz", ",", "hid_sz", ",", "num_modules", ")", "\n", "hid_layers", ".", "append", "(", "hid_fc", ")", "\n", "", "self", ".", "hid_layers", "=", "ListModule", "(", "*", "hid_layers", ")", "\n", "self", ".", "out_fc", "=", "BatchLinear", "(", "hid_sz", ",", "hid_sz", ",", "num_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.BatchMLP.forward": [[614, 622], ["model.BatchMLP.in_fc", "model.BatchMLP.tanh", "model.BatchMLP.out_fc", "hid_fc", "model.BatchMLP.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "in_fc", "(", "input", ")", "\n", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "for", "hid_fc", "in", "self", ".", "hid_layers", ":", "\n", "            ", "x", "=", "hid_fc", "(", "x", ")", "\n", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "", "x", "=", "self", ".", "out_fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.ListModule.__init__": [[625, 631], ["torch.Module.__init__", "model.ListModule.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "ListModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "idx", "=", "0", "\n", "for", "module", "in", "args", ":", "\n", "            ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.ListModule.__getitem__": [[632, 639], ["iter", "range", "next", "IndexError", "model.ListModule._modules.values", "next", "len"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "<", "0", "or", "idx", ">=", "len", "(", "self", ".", "_modules", ")", ":", "\n", "            ", "raise", "IndexError", "(", "'index {} is out of range'", ".", "format", "(", "idx", ")", ")", "\n", "", "it", "=", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "idx", ")", ":", "\n", "            ", "next", "(", "it", ")", "\n", "", "return", "next", "(", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.ListModule.__iter__": [[640, 642], ["iter", "model.ListModule._modules.values"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.ListModule.__len__": [[643, 645], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.BatchLinear.__init__": [[650, 661], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model.BatchLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model.BatchLinear.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.BatchLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "num_modules", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "BatchLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "num_modules", "=", "num_modules", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_modules", ",", "out_features", ",", "in_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_modules", ",", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.BatchLinear.reset_parameters": [[662, 667], ["model.BatchLinear.weight.data.uniform_", "math.sqrt", "model.BatchLinear.bias.data.uniform_", "model.BatchLinear.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.BatchLinear.forward": [[670, 707], ["input.transpose().transpose.transpose().transpose.size", "input.transpose().transpose.transpose().transpose.size", "input.transpose().transpose.transpose().transpose.transpose().transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.transpose().transpose.transpose().transpose.transpose().transpose", "input.transpose().transpose.transpose().transpose.size", "model.BatchLinear.bias.unsqueeze().expand().contiguous", "input.transpose().transpose.transpose().transpose.transpose", "output.transpose().transpose.transpose().transpose.transpose", "model.BatchLinear.bias.unsqueeze().expand", "model.BatchLinear.bias.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Get sizes", "\n", "        ", "bs", "=", "input", ".", "size", "(", "0", ")", "\n", "nm", "=", "input", ".", "size", "(", "1", ")", "\n", "assert", "(", "input", ".", "size", "(", "2", ")", "==", "self", ".", "in_features", ")", "\n", "\n", "# Transpose input to correct shape", "\n", "input", "=", "input", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# nm x in_sz x bs", "\n", "\n", "# Compute matrix multiply", "\n", "output", "=", "torch", ".", "bmm", "(", "self", ".", "weight", ",", "input", ")", "\n", "\n", "# Add bias", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output", "+=", "self", ".", "bias", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "[", "-", "1", ",", "-", "1", ",", "bs", "]", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Transpose back to bs x nm x out_sz", "\n", "", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# Reshape to proper matrices", "\n", "#if self.W is None or self.W.size(0) != bs:", "\n", "#    self.W = self.weight.unsqueeze(0).expand([bs, -1, -1, -1]).contiguous().view(nm*bs, self.out_features, self.in_features)", "\n", "#input = input.contiguous().view(nm*bs, self.in_features, 1)", "\n", "\n", "# Compute matrix multiply and add bias (if applicable)", "\n", "#output = torch.bmm(self.W, input)", "\n", "\n", "# Add the bias", "\n", "#if self.bias is not None:", "\n", "#    if self.b is None or self.b.size(0) != bs:", "\n", "#        self.b = self.bias.unsqueeze(0).expand([bs, -1, -1]).contiguous().view(nm*bs, self.out_features, 1)", "\n", "#    output += self.b", "\n", "\n", "# Reshape output", "\n", "#output = output.view(bs, nm, self.out_features)", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.BatchLinear.extra_repr": [[708, 711], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Attention.__init__": [[718, 730], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", ":", "\n", "        ", "\"\"\"\n        :param encoder_dim: feature size of encoded images\n        :param decoder_dim: size of decoder's RNN\n        :param attention_dim: size of the attention network\n        \"\"\"", "\n", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder_att", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "attention_dim", ")", "# linear layer to transform encoded image", "\n", "self", ".", "decoder_att", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "attention_dim", ")", "# linear layer to transform decoder's output", "\n", "self", ".", "full_att", "=", "nn", ".", "Linear", "(", "attention_dim", ",", "1", ")", "# linear layer to calculate values to be softmax-ed", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "# softmax layer to calculate weights", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Attention.forward": [[731, 744], ["model.Attention.encoder_att", "model.Attention.decoder_att", "model.Attention.full_att().squeeze", "model.Attention.softmax", "model.Attention.full_att", "model.Attention.relu", "model.Attention.unsqueeze", "model.Attention.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoder_out", ",", "decoder_hidden", ")", ":", "\n", "        ", "\"\"\"\n        Forward propagation.\n        :param encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim)\n        :param decoder_hidden: previous decoder output, a tensor of dimension (batch_size, decoder_dim)\n        :return: attention weighted encoding, weights\n        \"\"\"", "\n", "att1", "=", "self", ".", "encoder_att", "(", "encoder_out", ")", "# (batch_size, num_pixels, attention_dim)", "\n", "att2", "=", "self", ".", "decoder_att", "(", "decoder_hidden", ")", "# (batch_size, attention_dim)", "\n", "att", "=", "self", ".", "full_att", "(", "self", ".", "relu", "(", "att1", "+", "att2", ".", "unsqueeze", "(", "1", ")", ")", ")", ".", "squeeze", "(", "2", ")", "# (batch_size, num_pixels)", "\n", "alpha", "=", "self", ".", "softmax", "(", "att", ")", "# (batch_size, num_pixels)", "\n", "attention_weighted_encoding", "=", "(", "encoder_out", "*", "alpha", ".", "unsqueeze", "(", "2", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "# (batch_size, encoder_dim)", "\n", "return", "attention_weighted_encoding", ",", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttention.__init__": [[747, 804], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.Attention", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "model.LanguageWithAttention.embedding.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "LanguageWithAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder_dim", "=", "128", "\n", "self", ".", "encoder_dim", "=", "encoder_dim", "\n", "attention_dim", "=", "encoder_dim", "\n", "embed_dim", "=", "embedding_dim", "\n", "decoder_dim", "=", "32", "\n", "\n", "#self.embed = nn.Embedding(vocab_size, embedding_dim) # vocab size, 300", "\n", "\n", "#if training:", "\n", "#    self.embed.load_state_dict({'weight': embed_weights})", "\n", "#    self.embed.weight.requires_grad = False", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "encoder_dim", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "#self.fc_cat = nn.Linear(25*15+25*15+10*15+15, encoder_dim)", "\n", "\n", "'''\n        self.fc1 = nn.Linear(embedding_dim, 150)\n        self.fc2 = nn.Linear(7, 20)\n        self.fc3 = nn.Linear(170, 90)\n        self.fc4 = nn.Linear(embedding_dim, 150) \n        self.fc5 = nn.Linear(2250+150, 512)\n        self.fc_inv = nn.Linear(embedding_dim, 50) \n        self.fc55 = nn.Linear(512+50, embedding_dim)\n        '''", "\n", "\n", "#self.encoding = nn.LSTM(embedding_dim, 32, num_layers=1)", "\n", "#self.linear = nn.Linear(32, vocab_size)", "\n", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n", "# new stuff...", "\n", "self", ".", "attention", "=", "Attention", "(", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", "# attention network", "\n", "#self.attention = AttentionSmall(encoder_dim, decoder_dim)", "\n", "#self.embedding = nn.Embedding(vocab_size, embed_dim)  # embedding layer", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", "+", "1", ",", "embed_dim", ",", "vocab_size", ")", "# embedding layer", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decode_step", "=", "nn", ".", "LSTMCell", "(", "embed_dim", "+", "encoder_dim", ",", "decoder_dim", ",", "bias", "=", "True", ")", "# decoding LSTMCell", "\n", "self", ".", "init_h", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial hidden state of LSTMCell", "\n", "self", ".", "init_c", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial cell state of LSTMCell", "\n", "self", ".", "f_beta", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "encoder_dim", ")", "# linear layer to create a sigmoid-activated gate", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "vocab_size", ")", "# linear layer to find scores over vocabulary", "\n", "#self.init_weights()", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttention.init_weights": [[807, 814], ["model.LanguageWithAttention.embedding.weight.data.uniform_", "model.LanguageWithAttention.fc.bias.data.fill_", "model.LanguageWithAttention.fc.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializes some parameters with values from the uniform distribution, for easier convergence.\n        \"\"\"", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttention.init_hidden_state": [[815, 825], ["encoder_out.mean", "model.LanguageWithAttention.init_h", "model.LanguageWithAttention.init_c"], "methods", ["None"], ["", "def", "init_hidden_state", "(", "self", ",", "encoder_out", ")", ":", "\n", "        ", "\"\"\"\n        Creates the initial hidden and cell states for the decoder's LSTM based on the encoded images.\n        :param encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim)\n        :return: hidden state, cell state\n        \"\"\"", "\n", "mean_encoder_out", "=", "encoder_out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "init_h", "(", "mean_encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "c", "=", "self", ".", "init_c", "(", "mean_encoder_out", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttention.forward": [[826, 934], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "model.LanguageWithAttention.embedding", "model.LanguageWithAttention.init_hidden_state", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "h.clone", "range", "model.LanguageWithAttention.fc_embed", "model.LanguageWithAttention.fc_onehot", "model.LanguageWithAttention.fc_inv", "model.LanguageWithAttention.fc_goal", "max", "sum", "model.LanguageWithAttention.attention", "model.LanguageWithAttention.sigmoid", "model.LanguageWithAttention.decode_step", "h.clone", "model.LanguageWithAttention.fc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.LanguageWithAttention.dropout", "max", "max"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "forward", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "encoded_captions", ",", "caption_lengths", ",", "max_seq_length", "=", "20", ")", ":", "\n", "\n", "#encode features", "\n", "        ", "'''\n        c1 = F.relu(self.fc1(grid_embedding))\n        c2 = F.relu(self.fc2(grid_onehot))\n        c1 = c1.view(-1, 25,150)\n        c2 = c2.view(-1, 25,20)\n        combined_grids = torch.cat((c1, c2), dim=2)\n        c3 = F.relu(self.fc3(combined_grids)) \n        c3 = c3.view(-1, 25*90)\n        c4 = F.relu(self.fc4(goal))\n        combined_grid_goal = torch.cat((c3, c4), dim=1)\n        c6 = F.relu(self.fc5(combined_grid_goal))\n        temp_inv = F.relu(self.fc_inv(inventory))\n        combined_inventory = torch.cat((c6, temp_inv), dim=1)\n        encoder_out = F.relu(self.fc55(combined_inventory))\n        '''", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "unsqueeze", "(", "1", ")", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "# DECODER", "\n", "batch_size", "=", "encoder_out", ".", "size", "(", "0", ")", "\n", "vocab_size", "=", "self", ".", "vocab_size", "\n", "\n", "num_pixels", "=", "encoder_out", ".", "size", "(", "1", ")", "\n", "\n", "# Embedding", "\n", "embeddings", "=", "self", ".", "embedding", "(", "encoded_captions", ")", "# (batch_size, max_caption_length, embed_dim)", "\n", "\n", "# Initialize LSTM state", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "\n", "# We won't decode at the <end> position, since we've finished generating as soon as we generate <end>", "\n", "# So, decoding lengths are actual lengths - 1", "\n", "decode_lengths", "=", "[", "caption_length", "-", "1", "for", "caption_length", "in", "caption_lengths", "]", "\n", "#decode_lengths = (caption_lengths - 1).tolist()", "\n", "\n", "# Create tensors to hold word predicion scores and alphas", "\n", "predictions", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max", "(", "decode_lengths", ")", ",", "vocab_size", ")", ".", "cuda", "(", ")", "\n", "alphas", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max", "(", "decode_lengths", ")", ",", "num_pixels", ")", ".", "cuda", "(", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# At each time-step, decode by", "\n", "# attention-weighing the encoder's output based on the decoder's previous hidden state output", "\n", "# then generate a new word in the decoder with the previous word and the attention weighted encoding", "\n", "for", "t", "in", "range", "(", "max", "(", "decode_lengths", ")", ")", ":", "\n", "            ", "batch_size_t", "=", "sum", "(", "[", "l", ">", "t", "for", "l", "in", "decode_lengths", "]", ")", "\n", "attention_weighted_encoding", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", "[", ":", "batch_size_t", "]", ",", "\n", "h", "[", ":", "batch_size_t", "]", ")", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", "[", ":", "batch_size_t", "]", ")", ")", "# gating scalar, (batch_size_t, encoder_dim)", "\n", "attention_weighted_encoding", "=", "gate", "*", "attention_weighted_encoding", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "\n", "torch", ".", "cat", "(", "[", "embeddings", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", ",", "attention_weighted_encoding", "]", ",", "dim", "=", "1", ")", ",", "\n", "(", "h", "[", ":", "batch_size_t", "]", ",", "c", "[", ":", "batch_size_t", "]", ")", ")", "# (batch_size_t, decoder_dim)", "\n", "hiddens", "[", ":", "batch_size_t", "]", "=", "h", ".", "clone", "(", ")", "## ADDED!", "\n", "preds", "=", "self", ".", "fc", "(", "self", ".", "dropout", "(", "h", ")", ")", "# (batch_size_t, vocab_size)", "\n", "predictions", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", "=", "preds", "\n", "alphas", "[", ":", "batch_size_t", ",", "t", ",", ":", "]", "=", "alpha", "\n", "\n", "", "return", "predictions", ",", "encoded_captions", ",", "decode_lengths", ",", "alphas", ",", "hiddens", "\n", "\n", "'''\n        #decoder...\n        batch_size = encoder_out.size(0)\n        vocab_size = self.vocab_size\n\n        # Embedding\n        embeddings = self.embedding(encoded_captions)  # (batch_size, max_caption_length, embed_dim)\n\n        # Initialize LSTM state\n        h, c = self.init_hidden_state(encoder_out)  # (batch_size, decoder_dim)\n\n        # We won't decode at the <end> position, since we've finished generating as soon as we generate <end>\n        # So, decoding lengths are actual lengths - 1\n        decode_lengths = [caption_length-1 for caption_length in caption_lengths]\n        #decode_lengths = (caption_lengths - 1).tolist()\n\n        # Create tensors to hold word predicion scores and alphas\n        predictions = torch.zeros(batch_size, max(decode_lengths), vocab_size).to(device)\n        alphas = torch.zeros(batch_size, max(decode_lengths), self.encoder_dim).to(device)\n\n        # At each time-step, decode by\n        # attention-weighing the encoder's output based on the decoder's previous hidden state output\n        # then generate a new word in the decoder with the previous word and the attention weighted encoding\n        for t in range(max(decode_lengths)):\n            batch_size_t = sum([l > t for l in decode_lengths])\n            attention_weighted_encoding, alpha = self.attention(encoder_out[:batch_size_t],\n                                                                h[:batch_size_t])\n            gate = self.sigmoid(self.f_beta(h[:batch_size_t]))  # gating scalar, (batch_size_t, encoder_dim)\n            attention_weighted_encoding = gate * attention_weighted_encoding\n            h, c = self.decode_step(\n                torch.cat([embeddings[:batch_size_t, t, :], attention_weighted_encoding], dim=1),\n                (h[:batch_size_t], c[:batch_size_t]))  # (batch_size_t, decoder_dim)\n            preds = self.fc(h)\n            #preds = self.fc(self.dropout(h))  # (batch_size_t, vocab_size)\n            predictions[:batch_size_t, t, :] = preds\n            alphas[:batch_size_t, t, :] = alpha\n\n        return predictions, encoded_captions, decode_lengths, alphas\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttention.get_hidden_state_new": [[936, 1017], ["x[].reshape", "x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c4.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.LanguageWithAttention.init_hidden_state", "h.clone", "model.LanguageWithAttention.fc_embed", "model.LanguageWithAttention.fc_onehot", "model.LanguageWithAttention.fc_inv", "model.LanguageWithAttention.fc_goal", "model.LanguageWithAttention.embedding().squeeze", "model.LanguageWithAttention.attention", "model.LanguageWithAttention.sigmoid", "model.LanguageWithAttention.decode_step", "h.clone", "model.LanguageWithAttention.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.max", "range", "indices[].unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "model.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "indices.size", "len", "complete_seqs[].append", "len", "model.LanguageWithAttention.embedding", "indices.size", "temp.append", "indices.data.tolist"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "get_hidden_state_new", "(", "self", ",", "x", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "10", ",", "300", ")", ")", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "10", ",", "self", ".", "encoder_dim", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "k", "=", "encoder_out", ".", "size", "(", "0", ")", "#batch size", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "torch", ".", "LongTensor", "(", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "]", "*", "k", ")", ".", "cuda", "(", ")", "#.to(device)  # (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "torch", ".", "zeros", "(", "k", ",", "1", ")", ".", "cuda", "(", ")", "#.to(device)  # (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "incomplete_inds", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "# used to keep track of original index in complete_seqs", "\n", "\n", "#complete_seqs_scores = list()", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "awe", "=", "gate", "*", "awe", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "hiddens", "[", "incomplete_inds", "]", "=", "h", ".", "clone", "(", ")", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "values", ",", "indices", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "assert", "(", "indices", ".", "size", "(", "0", ")", "==", "len", "(", "incomplete_inds", ")", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "complete_seqs", "[", "incomplete_inds", "[", "i", "]", "]", ".", "append", "(", "indices", ".", "data", ".", "tolist", "(", ")", "[", "i", "]", ")", "\n", "if", "indices", "[", "i", "]", "==", "word_map", ".", "word2idx", "[", "'<end>'", "]", ":", "\n", "                    ", "del", "incomplete_inds", "[", "i", "]", "\n", "#incomplete_inds.remove(i)", "\n", "", "else", ":", "\n", "#not finished", "\n", "                    ", "temp", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "incomplete_inds", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "#subset the ones that aren't finished.", "\n", "", "h", "=", "h", "[", "temp", "]", "\n", "c", "=", "c", "[", "temp", "]", "\n", "encoder_out", "=", "encoder_out", "[", "temp", "]", "\n", "k_prev_words", "=", "indices", "[", "temp", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "20", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "return", "complete_seqs", ",", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttention.get_hidden_state": [[1019, 1139], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c4.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "k_prev.long().unsqueeze", "top_k.unsqueeze", "model.LanguageWithAttention.init_hidden_state", "model.LanguageWithAttention.fc_embed", "model.LanguageWithAttention.fc_onehot", "model.LanguageWithAttention.fc_inv", "model.LanguageWithAttention.fc_goal", "model.LanguageWithAttention.embedding().squeeze", "model.LanguageWithAttention.attention", "model.LanguageWithAttention.sigmoid", "model.LanguageWithAttention.decode_step", "model.LanguageWithAttention.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.max", "range", "indices[].unsqueeze", "k_prev.long", "range", "range", "model.LanguageWithAttention.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "indices.size", "len", "complete_seqs[].append", "len", "model.LanguageWithAttention.embedding", "indices.size", "temp.append"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state"], ["", "def", "get_hidden_state", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ",", "k_prev", ",", "top_k", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate captions for given image features using greedy search.\"\"\"", "\n", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "10", ",", "self", ".", "encoder_dim", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "k", "=", "encoder_out", ".", "size", "(", "0", ")", "#batch size", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "k_prev", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", "#torch.LongTensor(k_prev)#.to(device)  # (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "top_k", ".", "unsqueeze", "(", "1", ")", "#torch.zeros(k, 1) #.to(device)  # (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "incomplete_inds", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "# used to keep track of original index in complete_seqs", "\n", "\n", "#complete_seqs_scores = list()", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "awe", "=", "gate", "*", "awe", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "values", ",", "indices", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "assert", "(", "indices", ".", "size", "(", "0", ")", "==", "len", "(", "incomplete_inds", ")", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "complete_seqs", "[", "incomplete_inds", "[", "i", "]", "]", ".", "append", "(", "indices", ".", "data", "[", "i", "]", ")", "\n", "if", "indices", "[", "i", "]", "==", "word_map", ".", "word2idx", "[", "'<end>'", "]", ":", "\n", "                    ", "del", "incomplete_inds", "[", "i", "]", "\n", "#incomplete_inds.remove(i)", "\n", "", "else", ":", "\n", "#not finished", "\n", "                    ", "temp", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "incomplete_inds", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "#subset the ones that aren't finished.", "\n", "", "h", "=", "h", "[", "temp", "]", "\n", "c", "=", "c", "[", "temp", "]", "\n", "encoder_out", "=", "encoder_out", "[", "temp", "]", "\n", "k_prev_words", "=", "indices", "[", "temp", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "#incomplete_inds = [i for i in range(indices.size(0)) if indices[i] != word_map.word2idx['<end>']]", "\n", "#complete_inds = [i for i in range(indices.size(0)) if indices[i] == word_map.word2idx['<end>']]", "\n", "\n", "# Add", "\n", "#scores = top_k_scores.expand_as(scores) + scores  # (s, vocab_size)", "\n", "\n", "# For the first step, all k points will have the same scores (since same k previous words, h, c)", "\n", "#if step == 1:", "\n", "#    top_k_scores, top_k_words = scores[0].topk(k, 0, True, True)  # (s)", "\n", "#else:", "\n", "#    # Unroll and find top scores, and their unrolled indices", "\n", "#    top_k_scores, top_k_words = scores.view(-1).topk(k, 0, True, True)  # (s)", "\n", "\n", "# Convert unrolled indices to actual indices of scores", "\n", "#prev_word_inds = top_k_words / self.vocab_size  # (s)", "\n", "#next_word_inds = top_k_words % self.vocab_size  # (s)", "\n", "\n", "# Add new words to sequences, alphas", "\n", "#seqs = torch.cat([seqs[prev_word_inds], next_word_inds.unsqueeze(1)], dim=1)  # (s, step+1)", "\n", "\n", "# Which sequences are incomplete (didn't reach <end>)?", "\n", "#incomplete_inds = [ind for ind, next_word in enumerate(next_word_inds) if", "\n", "#                   next_word != word_map.word2idx['<end>']]", "\n", "#complete_inds = list(set(range(len(next_word_inds))) - set(incomplete_inds))", "\n", "\n", "# Set aside complete sequences", "\n", "#if len(complete_inds) > 0:", "\n", "#    complete_seqs.extend(seqs[complete_inds].tolist())", "\n", "#    complete_seqs_scores.extend(top_k_scores[complete_inds])", "\n", "#k -= len(complete_inds)  # reduce beam length accordingly", "\n", "\n", "# Proceed with incomplete sequences", "\n", "#if k == 0:", "\n", "#    break", "\n", "\n", "#seqs = seqs[incomplete_inds]", "\n", "\n", "#subset things out...", "\n", "#h = h[prev_word_inds[incomplete_inds]]", "\n", "#c = c[prev_word_inds[incomplete_inds]]", "\n", "#encoder_out = encoder_out[prev_word_inds[incomplete_inds]]", "\n", "#top_k_scores = top_k_scores[incomplete_inds].unsqueeze(1)", "\n", "#k_prev_words = next_word_inds[incomplete_inds].unsqueeze(1)", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "50", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "return", "complete_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.__init__": [[1142, 1199], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.Attention", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "model.LanguageWithAttentionSUM.embedding.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "LanguageWithAttentionSUM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder_dim", "=", "128", "\n", "self", ".", "encoder_dim", "=", "encoder_dim", "\n", "attention_dim", "=", "encoder_dim", "\n", "embed_dim", "=", "embedding_dim", "\n", "decoder_dim", "=", "32", "\n", "\n", "#self.embed = nn.Embedding(vocab_size, embedding_dim) # vocab size, 300", "\n", "\n", "#if training:", "\n", "#    self.embed.load_state_dict({'weight': embed_weights})", "\n", "#    self.embed.weight.requires_grad = False", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "encoder_dim", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "#self.fc_cat = nn.Linear(25*15+25*15+10*15+15, encoder_dim)", "\n", "\n", "'''\n        self.fc1 = nn.Linear(embedding_dim, 150)\n        self.fc2 = nn.Linear(7, 20)\n        self.fc3 = nn.Linear(170, 90)\n        self.fc4 = nn.Linear(embedding_dim, 150) \n        self.fc5 = nn.Linear(2250+150, 512)\n        self.fc_inv = nn.Linear(embedding_dim, 50) \n        self.fc55 = nn.Linear(512+50, embedding_dim)\n        '''", "\n", "\n", "#self.encoding = nn.LSTM(embedding_dim, 32, num_layers=1)", "\n", "#self.linear = nn.Linear(32, vocab_size)", "\n", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n", "# new stuff...", "\n", "self", ".", "attention", "=", "Attention", "(", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", "# attention network", "\n", "#self.attention = AttentionSmall(encoder_dim, decoder_dim)", "\n", "#self.embedding = nn.Embedding(vocab_size, embed_dim)  # embedding layer", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", "+", "1", ",", "embed_dim", ",", "vocab_size", ")", "# embedding layer", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decode_step", "=", "nn", ".", "LSTMCell", "(", "embed_dim", "+", "encoder_dim", ",", "decoder_dim", ",", "bias", "=", "True", ")", "# decoding LSTMCell", "\n", "self", ".", "init_h", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial hidden state of LSTMCell", "\n", "self", ".", "init_c", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial cell state of LSTMCell", "\n", "self", ".", "f_beta", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "encoder_dim", ")", "# linear layer to create a sigmoid-activated gate", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "vocab_size", ")", "# linear layer to find scores over vocabulary", "\n", "#self.init_weights()", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_weights": [[1201, 1208], ["model.LanguageWithAttentionSUM.embedding.weight.data.uniform_", "model.LanguageWithAttentionSUM.fc.bias.data.fill_", "model.LanguageWithAttentionSUM.fc.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializes some parameters with values from the uniform distribution, for easier convergence.\n        \"\"\"", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state": [[1209, 1219], ["encoder_out.mean", "model.LanguageWithAttentionSUM.init_h", "model.LanguageWithAttentionSUM.init_c"], "methods", ["None"], ["", "def", "init_hidden_state", "(", "self", ",", "encoder_out", ")", ":", "\n", "        ", "\"\"\"\n        Creates the initial hidden and cell states for the decoder's LSTM based on the encoded images.\n        :param encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim)\n        :return: hidden state, cell state\n        \"\"\"", "\n", "mean_encoder_out", "=", "encoder_out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "init_h", "(", "mean_encoder_out", ")", "# (batch_size, decoder_dim)", "\n", "c", "=", "self", ".", "init_c", "(", "mean_encoder_out", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.get_hidden_state_new": [[1221, 1302], ["x[].reshape", "x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "c4.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.LanguageWithAttentionSUM.init_hidden_state", "h.clone", "model.LanguageWithAttentionSUM.fc_embed", "model.LanguageWithAttentionSUM.fc_onehot", "model.LanguageWithAttentionSUM.fc_inv", "model.LanguageWithAttentionSUM.fc_goal", "model.LanguageWithAttentionSUM.embedding().squeeze", "model.LanguageWithAttentionSUM.attention", "model.LanguageWithAttentionSUM.sigmoid", "model.LanguageWithAttentionSUM.decode_step", "h.clone", "model.LanguageWithAttentionSUM.fc", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.max", "range", "indices[].unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "model.LanguageWithAttentionSUM.f_beta", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "indices.size", "len", "complete_seqs[].append", "len", "model.LanguageWithAttentionSUM.embedding", "indices.size", "temp.append", "indices.data.tolist"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.init_hidden_state", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "get_hidden_state_new", "(", "self", ",", "x", ",", "word_map", ",", "states", "=", "None", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "300", ")", ")", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "encoder_dim", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "k", "=", "encoder_out", ".", "size", "(", "0", ")", "#batch size", "\n", "\n", "# Tensor to store top k previous words at each step; now they're just <start>", "\n", "k_prev_words", "=", "torch", ".", "LongTensor", "(", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "]", "*", "k", ")", ".", "cuda", "(", ")", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences; now they're just <start>", "\n", "seqs", "=", "k_prev_words", "# (k, 1)", "\n", "\n", "# Tensor to store top k sequences' scores; now they're just 0", "\n", "top_k_scores", "=", "torch", ".", "zeros", "(", "k", ",", "1", ")", ".", "cuda", "(", ")", "# (k, 1)", "\n", "\n", "# Lists to store completed sequences, their alphas and scores", "\n", "complete_seqs", "=", "[", "[", "word_map", ".", "word2idx", "[", "'<start>'", "]", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "incomplete_inds", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "# used to keep track of original index in complete_seqs", "\n", "\n", "#complete_seqs_scores = list()", "\n", "\n", "# Start decoding", "\n", "step", "=", "1", "\n", "h", ",", "c", "=", "self", ".", "init_hidden_state", "(", "encoder_out", ")", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "# s is a number less than or equal to k, because sequences are removed from this process once they hit <end>", "\n", "while", "True", ":", "\n", "\n", "            ", "embeddings", "=", "self", ".", "embedding", "(", "k_prev_words", ")", ".", "squeeze", "(", "1", ")", "# (s, embed_dim)", "\n", "awe", ",", "alpha", "=", "self", ".", "attention", "(", "encoder_out", ",", "h", ")", "# (s, encoder_dim), (s, num_pixels)", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "f_beta", "(", "h", ")", ")", "# gating scalar, (s, encoder_dim)", "\n", "awe", "=", "gate", "*", "awe", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "torch", ".", "cat", "(", "[", "embeddings", ",", "awe", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "# (s, decoder_dim)", "\n", "hiddens", "[", "incomplete_inds", "]", "=", "h", ".", "clone", "(", ")", "\n", "scores", "=", "self", ".", "fc", "(", "h", ")", "# (s, vocab_size)", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "values", ",", "indices", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "assert", "(", "indices", ".", "size", "(", "0", ")", "==", "len", "(", "incomplete_inds", ")", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "complete_seqs", "[", "incomplete_inds", "[", "i", "]", "]", ".", "append", "(", "indices", ".", "data", ".", "tolist", "(", ")", "[", "i", "]", ")", "\n", "if", "indices", "[", "i", "]", "==", "word_map", ".", "word2idx", "[", "'<end>'", "]", ":", "\n", "                    ", "del", "incomplete_inds", "[", "i", "]", "\n", "#incomplete_inds.remove(i)", "\n", "", "else", ":", "\n", "#not finished", "\n", "                    ", "temp", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "incomplete_inds", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "#subset the ones that aren't finished.", "\n", "", "h", "=", "h", "[", "temp", "]", "\n", "c", "=", "c", "[", "temp", "]", "\n", "encoder_out", "=", "encoder_out", "[", "temp", "]", "\n", "k_prev_words", "=", "indices", "[", "temp", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Break if things have been going on too long", "\n", "if", "step", ">", "20", ":", "\n", "                ", "break", "\n", "", "step", "+=", "1", "\n", "\n", "", "return", "complete_seqs", ",", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.StatePredictorNetwork.__init__": [[1305, 1341], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.Attention", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.StatePredictorNetwork.embedding.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "embed_weights", ",", "max_seq_length", "=", "20", ",", "training", "=", "True", ")", ":", "\n", "        ", "super", "(", "StatePredictorNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder_dim", "=", "128", "\n", "self", ".", "encoder_dim", "=", "encoder_dim", "\n", "attention_dim", "=", "encoder_dim", "\n", "embed_dim", "=", "embedding_dim", "\n", "decoder_dim", "=", "32", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "encoder_dim", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n", "# new stuff...", "\n", "self", ".", "attention", "=", "Attention", "(", "encoder_dim", ",", "decoder_dim", ",", "attention_dim", ")", "# attention network", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", "+", "1", ",", "embed_dim", ",", "vocab_size", ")", "# embedding layer", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "embedding", ".", "load_state_dict", "(", "{", "'weight'", ":", "embed_weights", "}", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decode_step", "=", "nn", ".", "LSTMCell", "(", "embed_dim", ",", "decoder_dim", ",", "bias", "=", "True", ")", "# decoding LSTMCell", "\n", "self", ".", "init_h", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial hidden state of LSTMCell", "\n", "self", ".", "init_c", "=", "nn", ".", "Linear", "(", "encoder_dim", ",", "decoder_dim", ")", "# linear layer to find initial cell state of LSTMCell", "\n", "self", ".", "f_beta", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "encoder_dim", ")", "# linear layer to create a sigmoid-activated gate", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "decoder_dim", ",", "embed_dim", ")", "# linear layer to find scores over vocabulary", "\n", "self", ".", "fc_last", "=", "nn", ".", "Linear", "(", "27", "*", "128", ",", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.StatePredictorNetwork.get_state_encoding": [[1343, 1361], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "inventory.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c4.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "model.StatePredictorNetwork.fc_embed", "model.StatePredictorNetwork.fc_onehot", "model.StatePredictorNetwork.fc_inv", "model.StatePredictorNetwork.fc_goal", "model.StatePredictorNetwork.fc_last"], "methods", ["None"], ["", "def", "get_state_encoding", "(", "self", ",", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ")", ":", "\n", "\n", "#print(grid_embedding.size(), grid_onehot.size(), inventory.size(), goal.size())", "\n", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "self", ".", "encoder_dim", ")", "\n", "inventory", "=", "inventory", ".", "view", "(", "-", "1", ",", "1", ",", "300", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "encoder_out", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "encoder_out", "=", "encoder_out", ".", "view", "(", "-", "1", ",", "27", "*", "128", ")", "\n", "encoder_out", "=", "F", ".", "relu", "(", "self", ".", "fc_last", "(", "encoder_out", ")", ")", "\n", "\n", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.StatePredictorNetwork.forward": [[1362, 1395], ["print", "x.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.clone", "torch.zeros().cuda.clone", "torch.zeros().cuda.clone", "range", "x[].reshape", "x[].reshape", "x[].reshape", "model.StatePredictorNetwork.get_state_encoding", "model.StatePredictorNetwork.decode_step", "torch.zeros().cuda.clone", "torch.zeros().cuda.clone", "torch.zeros().cuda.clone", "model.StatePredictorNetwork.fc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.StatePredictorNetwork.get_state_encoding", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "print", "(", "x", ".", "shape", ")", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# Initialize to zero", "\n", "h", "=", "torch", ".", "zeros", "(", "batch_size", ",", "32", ")", ".", "cuda", "(", ")", "# (batch_size, decoder_dim) # ", "\n", "c", "=", "torch", ".", "zeros", "(", "batch_size", ",", "32", ")", ".", "cuda", "(", ")", "\n", "\n", "# Create tensors to hold state prediction", "\n", "hiddens", "=", "h", ".", "clone", "(", ")", "\n", "\n", "for", "t", "in", "range", "(", "3", ")", ":", "\n", "\n", "            ", "x", "=", "x", "[", ":", ",", "1", ":", "]", "\n", "\n", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "+", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "300", ")", ")", "\n", "\n", "#print(grid_embedding.size(), grid_onehot.size(), goal.size(), inventory.size())", "\n", "\n", "state_encodings", "=", "self", ".", "get_state_encoding", "(", "grid_embedding", ",", "grid_onehot", ",", "inventory", ",", "goal", ")", "\n", "\n", "h", ",", "c", "=", "self", ".", "decode_step", "(", "state_encodings", ",", "(", "h", "[", ":", "]", ",", "c", "[", ":", "]", ")", ")", "\n", "hiddens", "[", ":", "]", "=", "h", ".", "clone", "(", ")", "\n", "preds", "=", "self", ".", "fc", "(", "h", ")", "\n", "\n", "x", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "+", "300", ":", "]", "\n", "\n", "", "return", "preds", ",", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.SimpleNetworkNoState.__init__": [[1398, 1413], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "    ", "super", "(", "SimpleNetworkNoState", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "48", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "32", ",", "48", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.SimpleNetworkNoState.forward": [[1415, 1446], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "model.SimpleNetworkNoState.fc1", "model.SimpleNetworkNoState.fc2", "model.SimpleNetworkNoState.fc3", "model.SimpleNetworkNoState.fc4", "model.SimpleNetworkNoState.fc5", "model.SimpleNetworkNoState.fc_inv", "model.SimpleNetworkNoState.fc55", "model.SimpleNetworkNoState.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hidden", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "all_comb", "=", "torch", ".", "cat", "(", "(", "features", ",", "hidden", ")", ",", "dim", "=", "1", ")", "\n", "\n", "#c6 = F.relu(self.fc6(all_comb)) # updated with new embedding size.", "\n", "#c7 = self.fc7(c6)", "\n", "#c8 = F.relu(self.fc8(c7))", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "hidden", ")", ")", "# updated with new embedding size.", "\n", "\n", "return", "c6", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.SimpleNetworkOnlyGoal.__init__": [[1448, 1463], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "    ", "super", "(", "SimpleNetworkOnlyGoal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "48", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "48", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.SimpleNetworkOnlyGoal.forward": [[1465, 1495], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "model.SimpleNetworkOnlyGoal.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "#encode features", "\n", "# c1 = F.relu(self.fc1(grid_embedding))", "\n", "# c2 = F.relu(self.fc2(grid_onehot))", "\n", "# c1 = c1.view(-1, 25,150)", "\n", "# c2 = c2.view(-1, 25,20)", "\n", "# combined_grids = torch.cat((c1, c2), dim=2)", "\n", "# c3 = F.relu(self.fc3(combined_grids)) ", "\n", "# c3 = c3.view(-1, 25*90)", "\n", "# c4 = F.relu(self.fc4(goal))", "\n", "# combined_grid_goal = torch.cat((c3, c4), dim=1)", "\n", "# c6 = F.relu(self.fc5(combined_grid_goal))", "\n", "# temp_inv = F.relu(self.fc_inv(inventory))", "\n", "# combined_inventory = torch.cat((c6, temp_inv), dim=1)", "\n", "# features = F.relu(self.fc55(combined_inventory))", "\n", "\n", "# all_comb = torch.cat((features, hidden), dim=1)", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "goal", ")", ")", "# updated with new embedding size.", "\n", "#c6 = F.relu(self.fc6(all_comb)) # updated with new embedding size.", "\n", "#c7 = self.fc7(c6)", "\n", "#c8 = F.relu(self.fc8(c7))", "\n", "\n", "return", "c6", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.StateAutoencoder.__init__": [[1497, 1512], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StateAutoencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "128", ",", "27", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "27", "*", "27", ",", "32", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "32", ",", "27", "*", "27", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "27", ",", "128", ")", "\n", "\n", "embedding_dim", "=", "300", "\n", "encoder_dim", "=", "128", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_onehot", "=", "nn", ".", "Linear", "(", "7", ",", "encoder_dim", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "self", ".", "fc_goal", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "encoder_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.StateAutoencoder.forward": [[1513, 1540], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "grid_comb.view.view.view", "inventory.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "model.StateAutoencoder.fc_embed", "model.StateAutoencoder.fc_onehot", "model.StateAutoencoder.fc_inv", "model.StateAutoencoder.fc_goal", "model.StateAutoencoder.fc1", "model.StateAutoencoder.fc2", "model.StateAutoencoder.fc3", "model.StateAutoencoder.fc4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc_embed", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc_onehot", "(", "grid_onehot", ")", ")", "\n", "grid_comb", "=", "c1", "+", "c2", "\n", "grid_comb", "=", "grid_comb", ".", "view", "(", "-", "1", ",", "25", ",", "128", ")", "\n", "inventory", "=", "inventory", ".", "view", "(", "-", "1", ",", "1", ",", "300", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "# maybe change inventory back to sum later..", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc_goal", "(", "goal", ")", ")", "\n", "c4", "=", "c4", ".", "unsqueeze", "(", "1", ")", "\n", "state_encoding", "=", "torch", ".", "cat", "(", "(", "grid_comb", ",", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "# (batch, 25+10+1, encoder_dim)", "\n", "\n", "# state_encoding is (batch, 25+1+1, encoder_dim)", "\n", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "state_encoding", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "27", "*", "27", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "c1", ")", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "c2", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "27", ",", "27", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "c3", ")", ")", "\n", "\n", "return", "state_encoding", ",", "c2", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.SimpleNetwork.__init__": [[1542, 1557], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "    ", "super", "(", "SimpleNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "48", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "48", "+", "32", ",", "48", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.SimpleNetwork.forward": [[1559, 1590], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "model.SimpleNetwork.fc1", "model.SimpleNetwork.fc2", "model.SimpleNetwork.fc3", "model.SimpleNetwork.fc4", "model.SimpleNetwork.fc5", "model.SimpleNetwork.fc_inv", "model.SimpleNetwork.fc55", "model.SimpleNetwork.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hidden", ")", ":", "\n", "\n", "        ", "x", "=", "x", "[", ":", ",", "-", "8275", ":", "]", "# if state predictor?", "\n", "\n", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "all_comb", "=", "torch", ".", "cat", "(", "(", "features", ",", "hidden", ")", ",", "dim", "=", "1", ")", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "all_comb", ")", ")", "# updated with new embedding size.", "\n", "#c7 = self.fc7(c6)", "\n", "#c8 = F.relu(self.fc8(c7))", "\n", "\n", "return", "c6", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.StateGoalNetv1.__init__": [[1648, 1663], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "    ", "super", "(", "StateGoalNetv1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "7", ",", "20", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "170", ",", "90", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "150", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2250", "+", "150", ",", "512", ")", "\n", "self", ".", "fc_inv", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "50", ")", "\n", "self", ".", "fc55", "=", "nn", ".", "Linear", "(", "512", "+", "50", ",", "48", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "48", ",", "48", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "48", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.StateGoalNetv1.forward": [[1665, 1692], ["x[].reshape", "x[].reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "c1.view.view.view", "c2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "c3.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.StateGoalNetv1.fc1", "model.StateGoalNetv1.fc2", "model.StateGoalNetv1.fc3", "model.StateGoalNetv1.fc4", "model.StateGoalNetv1.fc5", "model.StateGoalNetv1.fc_inv", "model.StateGoalNetv1.fc55", "model.StateGoalNetv1.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "grid_embedding", "=", "x", "[", ":", ",", ":", "5", "*", "5", "*", "300", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "300", ")", ")", "\n", "grid_onehot", "=", "x", "[", ":", ",", "5", "*", "5", "*", "300", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "]", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "5", ",", "5", ",", "7", ")", ")", "\n", "goal", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", ":", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", "]", "\n", "inventory", "=", "x", "[", ":", ",", "(", "5", "*", "5", "*", "300", ")", "+", "(", "5", "*", "5", "*", "7", ")", "+", "300", ":", "]", "#.reshape((x.shape[0], 10, 300))", "\n", "\n", "#encode features", "\n", "c1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "grid_embedding", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "grid_onehot", ")", ")", "\n", "c1", "=", "c1", ".", "view", "(", "-", "1", ",", "25", ",", "150", ")", "\n", "c2", "=", "c2", ".", "view", "(", "-", "1", ",", "25", ",", "20", ")", "\n", "combined_grids", "=", "torch", ".", "cat", "(", "(", "c1", ",", "c2", ")", ",", "dim", "=", "2", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "combined_grids", ")", ")", "\n", "c3", "=", "c3", ".", "view", "(", "-", "1", ",", "25", "*", "90", ")", "\n", "c4", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "goal", ")", ")", "\n", "combined_grid_goal", "=", "torch", ".", "cat", "(", "(", "c3", ",", "c4", ")", ",", "dim", "=", "1", ")", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc5", "(", "combined_grid_goal", ")", ")", "\n", "temp_inv", "=", "F", ".", "relu", "(", "self", ".", "fc_inv", "(", "inventory", ")", ")", "\n", "combined_inventory", "=", "torch", ".", "cat", "(", "(", "c6", ",", "temp_inv", ")", ",", "dim", "=", "1", ")", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "fc55", "(", "combined_inventory", ")", ")", "\n", "\n", "c6", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "features", ")", ")", "# updated with new embedding size.", "\n", "#c7 = self.fc7(c6)", "\n", "#c8 = F.relu(self.fc8(c7))", "\n", "\n", "return", "c6", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.MazeBaseBase.__init__": [[1694, 1806], ["model.NNBase.__init__", "model.build_vocabulary", "vocab.add_word", "vocab.add_word", "vocab.add_word", "vocab.add_word", "numpy.zeros", "numpy.concatenate", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "model.LanguageWithAttentionSUM", "model.MazeBaseBase.lang_model.load_state_dict", "model.MazeBaseBase.lang_model.eval", "model.MazeBaseBase.lang_model.parameters", "model.SimpleNetwork", "model.MazeBaseBase.actor.load_state_dict", "model.SimpleNetwork", "model.MazeBaseBase.actor.load_state_dict", "init_", "model.MazeBaseBase.train", "pytorchppo.a2c_ppo_acktr.utils.init", "open", "pickle.load", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.Linear", "torch.Linear", "torch.Linear", "numpy.sqrt", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.build_vocabulary", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.planning.preconditionrl.PreconditionRLModule.load_state_dict", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.terrain.Door.open"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "recurrent", "=", "False", ",", "hidden_size", "=", "48", ",", "vocab", "=", "None", ",", "vocab_weights", "=", "None", ")", ":", "\n", "        ", "super", "(", "MazeBaseBase", ",", "self", ")", ".", "__init__", "(", "recurrent", ",", "num_inputs", ",", "hidden_size", ")", "\n", "\n", "if", "recurrent", ":", "\n", "            ", "num_inputs", "=", "hidden_size", "\n", "\n", "", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "\n", "network", "=", "'ours'", "\n", "self", ".", "network", "=", "network", "\n", "\n", "### This is where you'd load pre-trained models from IL.", "\n", "\n", "# ## Start IL-RL ###", "\n", "# #hidden size 48", "\n", "\n", "# self.actor = StateGoalNetv1(300)", "\n", "# self.actor.load_state_dict(torch.load(\"StateGoalNetv1_300_05per.pt\")) # trained with embeddings", "\n", "\n", "# self.critic = StateGoalNetv1(300)", "\n", "# self.critic.load_state_dict(torch.load(\"StateGoalNetv1_300_05per.pt\")) # trained with embeddings", "\n", "\n", "# ## End IL-RL ###", "\n", "\n", "# # Start State Predictor ###  #Need to load ", "\n", "\n", "# name = \"compiled_dataset_08131950\" #add 50 back in", "\n", "# embed_dim = 300 # switch this later!!", "\n", "# embed_size = embed_dim", "\n", "\n", "# with open('/home/kdmarino/Mazebase_gym_environ/mazebaseenv/data/'+name+'_all_instructions', 'rb') as f:", "\n", "#     all_instructions = pickle.load(f)", "\n", "\n", "# vocab, vocab_weights = build_vocabulary(all_instructions, name, embed_dim)", "\n", "\n", "# vocab.add_word('<pad>')", "\n", "# vocab.add_word('<start>')", "\n", "# vocab.add_word('<end>')", "\n", "# vocab.add_word('<unk>')", "\n", "\n", "# self.vocab = vocab", "\n", "# temp = np.zeros((1,300), dtype=np.float32)", "\n", "# vocab_weights = np.concatenate((vocab_weights, temp), axis=0)", "\n", "# vocab_weights = torch.Tensor(vocab_weights).cuda()", "\n", "\n", "# self.lang_model = StatePredictorNetwork(len(vocab), embed_dim, vocab_weights)", "\n", "# self.lang_model.load_state_dict(torch.load(\"StatePredictor_both.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage        ", "\n", "# self.lang_model.eval()", "\n", "# for params in self.lang_model.parameters():", "\n", "#     params.requires_grad = False", "\n", "\n", "# self.actor = SimpleNetwork(300)", "\n", "# self.actor.load_state_dict(torch.load(\"SimpleNetwork_statepred.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "# self.critic = SimpleNetwork(300)", "\n", "# self.critic.load_state_dict(torch.load(\"SimpleNetwork_statepred.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "# ## End State Predictor  ###", "\n", "\n", "# ## Start Autoencoder ###", "\n", "# self.lang_model = StateAutoencoder()", "\n", "# self.lang_model.load_state_dict(torch.load(\"StateAutoencoder_both1.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage        ", "\n", "# self.lang_model.eval()", "\n", "# for params in self.lang_model.parameters():", "\n", "#     params.requires_grad = False", "\n", "\n", "# self.actor = SimpleNetwork(300)", "\n", "# self.actor.load_state_dict(torch.load(\"SimpleNetwork_autoencoder1.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "# self.critic = SimpleNetwork(300)", "\n", "# self.critic.load_state_dict(torch.load(\"SimpleNetwork_autoencoder1.pt\")) # trained with embeddings , map_location=lambda storage, loc: storage", "\n", "# ## End State Autoencoder  ###", "\n", "\n", "\n", "## Start OUR MODEL ###        ", "\n", "name", "=", "\"compiled_dataset_08131950\"", "#add 50 back in", "\n", "embed_dim", "=", "300", "# switch this later!!", "\n", "embed_size", "=", "embed_dim", "\n", "\n", "with", "open", "(", "'/home/kdmarino/Mazebase_gym_environ/mazebaseenv/data/'", "+", "name", "+", "'_all_instructions'", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "all_instructions", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "vocab", ",", "vocab_weights", "=", "build_vocabulary", "(", "all_instructions", ",", "name", ",", "embed_dim", ")", "\n", "\n", "vocab", ".", "add_word", "(", "'<pad>'", ")", "\n", "vocab", ".", "add_word", "(", "'<start>'", ")", "\n", "vocab", ".", "add_word", "(", "'<end>'", ")", "\n", "vocab", ".", "add_word", "(", "'<unk>'", ")", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "temp", "=", "np", ".", "zeros", "(", "(", "1", ",", "300", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vocab_weights", "=", "np", ".", "concatenate", "(", "(", "vocab_weights", ",", "temp", ")", ",", "axis", "=", "0", ")", "\n", "vocab_weights", "=", "torch", ".", "Tensor", "(", "vocab_weights", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "lang_model", "=", "LanguageWithAttentionSUM", "(", "len", "(", "vocab", ")", ",", "embed_dim", ",", "vocab_weights", ",", "training", "=", "False", ")", "\n", "self", ".", "lang_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"LanguageWithAttentionSUM_model.pt\"", ")", ")", "# trained with embeddings , map_location=lambda storage, loc: storage        ", "\n", "self", ".", "lang_model", ".", "eval", "(", ")", "\n", "for", "params", "in", "self", ".", "lang_model", ".", "parameters", "(", ")", ":", "\n", "            ", "params", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "actor", "=", "SimpleNetwork", "(", "300", ")", "\n", "self", ".", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"SimpleNetwork_model.pt\"", ")", ")", "# trained with embeddings , map_location=lambda storage, loc: storage", "\n", "\n", "self", ".", "critic", "=", "SimpleNetwork", "(", "300", ")", "\n", "self", ".", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"SimpleNetwork_model.pt\"", ")", ")", "# trained with embeddings , map_location=lambda storage, loc: storage        ", "\n", "\n", "## End OUR MODEL###", "\n", "\n", "self", ".", "critic_linear", "=", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.MazeBaseBase.forward": [[1807, 1854], ["model.MazeBaseBase.lang_model.get_hidden_state_new", "model.MazeBaseBase.critic", "model.MazeBaseBase.actor", "model.MazeBaseBase._forward_gru", "model.MazeBaseBase.critic_linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.LanguageWithAttentionSUM.get_hidden_state_new", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.NNBase._forward_gru"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "if", "self", ".", "is_recurrent", ":", "\n", "            ", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ",", "masks", ")", "\n", "\n", "##Start OUR model ##", "\n", "", "x", "=", "x", "[", ":", ",", "1", ":", "]", "\n", "\n", "seqs", ",", "lang_hidden", "=", "self", ".", "lang_model", ".", "get_hidden_state_new", "(", "x", ",", "self", ".", "vocab", ")", "\n", "\n", "# debugging / explaining language", "\n", "# for sampled_ids in seqs:", "\n", "#     sampled_caption = []", "\n", "#     for word_id in sampled_ids:", "\n", "#         word = self.vocab.idx2word[word_id]", "\n", "#         sampled_caption.append(word)", "\n", "#         if word == '<end>':", "\n", "#             break", "\n", "#     sentence = ' '.join(sampled_caption) ", "\n", "#     print(sentence)", "\n", "\n", "hidden_critic", "=", "self", ".", "critic", "(", "x", ",", "lang_hidden", ")", "\n", "hidden_actor", "=", "self", ".", "actor", "(", "x", ",", "lang_hidden", ")", "\n", "##End OUR model ## ", "\n", "\n", "# ## Start Autoencoder ###", "\n", "# x = x[:, 1:] ", "\n", "# state_encoding, hidden, reconstruction = self.lang_model(x)", "\n", "# hidden_critic = self.critic(x, hidden)", "\n", "# hidden_actor = self.actor(x, hidden)", "\n", "# ## End Autoencoder ###", "\n", "\n", "\n", "# # Start State Predictor ###", "\n", "# reconstruction, hidden = self.lang_model(x) # state predictor (change simple network)", "\n", "# hidden_critic = self.critic(x, hidden)", "\n", "# hidden_actor = self.actor(x, hidden)", "\n", "# ## End State Predictor ###", "\n", "\n", "### Start ILRL or RL model ###", "\n", "# x = x[:, 1:] ", "\n", "# hidden_critic = self.critic(x)", "\n", "# hidden_actor = self.actor(x)", "\n", "### End ILRL or RL model", "\n", "\n", "return", "self", ".", "critic_linear", "(", "hidden_critic", ")", ",", "hidden_actor", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.MLPBase.__init__": [[1857, 1877], ["model.NNBase.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "init_", "model.MLPBase.train", "pytorchppo.a2c_ppo_acktr.utils.init", "init_", "torch.Tanh", "torch.Tanh", "torch.Tanh", "init_", "torch.Tanh", "torch.Tanh", "torch.Tanh", "init_", "torch.Tanh", "torch.Tanh", "torch.Tanh", "init_", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "numpy.sqrt", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "recurrent", "=", "False", ",", "hidden_size", "=", "64", ")", ":", "\n", "        ", "super", "(", "MLPBase", ",", "self", ")", ".", "__init__", "(", "recurrent", ",", "num_inputs", ",", "hidden_size", ")", "\n", "\n", "if", "recurrent", ":", "\n", "            ", "num_inputs", "=", "hidden_size", "\n", "\n", "", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "\n", "self", ".", "actor", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "self", ".", "critic", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "self", ".", "critic_linear", "=", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.MLPBase.forward": [[1878, 1888], ["model.MLPBase.critic", "model.MLPBase.actor", "model.MLPBase._forward_gru", "model.MLPBase.critic_linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.NNBase._forward_gru"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "if", "self", ".", "is_recurrent", ":", "\n", "            ", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ",", "masks", ")", "\n", "\n", "", "hidden_critic", "=", "self", ".", "critic", "(", "x", ")", "\n", "hidden_actor", "=", "self", ".", "actor", "(", "x", ")", "\n", "\n", "return", "self", ".", "critic_linear", "(", "hidden_critic", ")", ",", "hidden_actor", ",", "rnn_hxs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.select_last": [[268, 278], ["x.sum().view.size", "x.sum().view.size", "x.sum().view.data.new().resize_as_().fill_", "range", "Variable", "x.sum().view.mul", "x.sum().view.sum().view", "[].fill_", "x.sum().view.size", "x.sum().view.data.new().resize_as_", "x.sum().view.sum", "x.sum().view.data.new"], "function", ["None"], ["", "", "def", "select_last", "(", "x", ",", "lengths", ")", ":", "\n", "    ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "seq_length", "=", "x", ".", "size", "(", "1", ")", "\n", "mask", "=", "x", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "x", ".", "data", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "mask", "[", "i", "]", "[", "lengths", "[", "i", "]", "-", "1", "]", ".", "fill_", "(", "1", ")", "\n", "", "mask", "=", "Variable", "(", "mask", ")", "\n", "x", "=", "x", ".", "mul", "(", "mask", ")", "\n", "x", "=", "x", ".", "sum", "(", "1", ")", ".", "view", "(", "batch_size", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.process_lengths": [[279, 286], ["input.size", "input.size", "list", "input.data.eq().sum().squeeze", "input.data.eq().sum().squeeze", "input.data.eq().sum", "input.data.eq().sum", "input.data.eq", "input.data.eq"], "function", ["None"], ["", "def", "process_lengths", "(", "input", ")", ":", "\n", "    ", "max_length", "=", "input", ".", "size", "(", "1", ")", "\n", "if", "input", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "        ", "lengths", "=", "[", "max_length", "-", "input", ".", "data", ".", "eq", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "]", "\n", "", "else", ":", "\n", "        ", "lengths", "=", "list", "(", "max_length", "-", "input", ".", "data", ".", "eq", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", ")", "\n", "", "return", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.build_vocabulary": [[1591, 1646], ["enumerate", "numpy.random.uniform().astype", "model.Vocabulary", "enumerate", "print", "torchtext.GloVe", "torchtext.GloVe", "numpy.random.uniform", "numpy.array", "len", "vec_string.split", "model.Vocabulary.add_word"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Vocabulary.add_word"], ["", "", "def", "build_vocabulary", "(", "train_instructions", ",", "save_name", ",", "embed_dim", ")", ":", "\n", "\n", "    ", "freqs", "=", "{", "}", "\n", "\n", "if", "embed_dim", "==", "300", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'840B'", ",", "dim", "=", "300", ")", "#maybe switch this out!", "\n", "", "elif", "embed_dim", "==", "50", ":", "\n", "        ", "glove", "=", "vocabtorch", ".", "GloVe", "(", "name", "=", "'6B'", ",", "dim", "=", "50", ")", "\n", "\n", "", "for", "instruction", "in", "train_instructions", ":", "\n", "\n", "        ", "for", "word", "in", "instruction", ":", "\n", "\n", "            ", "try", ":", "\n", "                ", "vec", "=", "glove", ".", "vectors", "[", "glove", ".", "stoi", "[", "word", "]", "]", "\n", "if", "word", "in", "freqs", ":", "\n", "                    ", "freqs", "[", "word", "]", "=", "freqs", "[", "word", "]", "+", "1", "\n", "", "else", ":", "\n", "                    ", "freqs", "[", "word", "]", "=", "1", "\n", "", "", "except", ":", "\n", "                ", "if", "'UNK'", "in", "freqs", ":", "\n", "                    ", "freqs", "[", "'UNK'", "]", "=", "freqs", "[", "'UNK'", "]", "+", "1", "\n", "", "else", ":", "\n", "                    ", "freqs", "[", "'UNK'", "]", "=", "1", "\n", "\n", "", "", "", "", "vocab_size", "=", "0", "\n", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "freqs", ")", ":", "\n", "        ", "if", "'UNK'", "!=", "key", "and", "freqs", "[", "key", "]", ">", "10", ":", "\n", "            ", "vocab_size", "=", "vocab_size", "+", "1", "\n", "\n", "\n", "", "", "vocab_weights", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.01", ",", "0.01", ",", "(", "vocab_size", "+", "4", ",", "embed_dim", ")", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "#vocab_weights = np.zeros((vocab_size+4, embed_dim), dtype=np.float32)", "\n", "vocab", "=", "Vocabulary", "(", ")", "\n", "\n", "count", "=", "0", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "freqs", ")", ":", "\n", "\n", "## ENFORCE THAT IF < THRESHOLD, DON'T INCLUDE!! ", "\n", "# NOT USING i  and key correctly... ?? ", "\n", "\n", "        ", "if", "'UNK'", "==", "key", ":", "\n", "            ", "vec_string", "=", "'0.22418134 -0.28881392 0.13854356 0.00365387 -0.12870757 0.10243822 0.061626635 0.07318011 -0.061350107 -1.3477012 0.42037755 -0.063593924 -0.09683349 0.18086134 0.23704372 0.014126852 0.170096 -1.1491593 0.31497982 0.06622181 0.024687296 0.076693475 0.13851812 0.021302193 -0.06640582 -0.010336159 0.13523154 -0.042144544 -0.11938788 0.006948221 0.13333307 -0.18276379 0.052385733 0.008943111 -0.23957317 0.08500333 -0.006894406 0.0015864656 0.063391194 0.19177166 -0.13113557 -0.11295479 -0.14276934 0.03413971 -0.034278486 -0.051366422 0.18891625 -0.16673574 -0.057783455 0.036823478 0.08078679 0.022949161 0.033298038 0.011784158 0.05643189 -0.042776518 0.011959623 0.011552498 -0.0007971594 0.11300405 -0.031369694 -0.0061559738 -0.009043574 -0.415336 -0.18870236 0.13708843 0.005911723 -0.113035575 -0.030096142 -0.23908928 -0.05354085 -0.044904727 -0.20228513 0.0065645403 -0.09578946 -0.07391877 -0.06487607 0.111740574 -0.048649278 -0.16565254 -0.052037314 -0.078968436 0.13684988 0.0757494 -0.006275573 0.28693774 0.52017444 -0.0877165 -0.33010918 -0.1359622 0.114895485 -0.09744406 0.06269521 0.12118575 -0.08026362 0.35256687 -0.060017522 -0.04889904 -0.06828978 0.088740796 0.003964443 -0.0766291 0.1263925 0.07809314 -0.023164088 -0.5680669 -0.037892066 -0.1350967 -0.11351585 -0.111434504 -0.0905027 0.25174105 -0.14841858 0.034635577 -0.07334565 0.06320108 -0.038343467 -0.05413284 0.042197507 -0.090380974 -0.070528865 -0.009174437 0.009069661 0.1405178 0.02958134 -0.036431845 -0.08625681 0.042951006 0.08230793 0.0903314 -0.12279937 -0.013899368 0.048119213 0.08678239 -0.14450377 -0.04424887 0.018319942 0.015026873 -0.100526 0.06021201 0.74059093 -0.0016333034 -0.24960588 -0.023739101 0.016396184 0.11928964 0.13950661 -0.031624354 -0.01645025 0.14079992 -0.0002824564 -0.08052984 -0.0021310581 -0.025350995 0.086938225 0.14308536 0.17146006 -0.13943303 0.048792403 0.09274929 -0.053167373 0.031103406 0.012354865 0.21057427 0.32618305 0.18015954 -0.15881181 0.15322933 -0.22558987 -0.04200665 0.0084689725 0.038156632 0.15188617 0.13274793 0.113756925 -0.095273495 -0.049490947 -0.10265804 -0.27064866 -0.034567792 -0.018810693 -0.0010360252 0.10340131 0.13883452 0.21131058 -0.01981019 0.1833468 -0.10751636 -0.03128868 0.02518242 0.23232952 0.042052146 0.11731903 -0.15506615 0.0063580726 -0.15429358 0.1511722 0.12745973 0.2576985 -0.25486213 -0.0709463 0.17983761 0.054027 -0.09884228 -0.24595179 -0.093028545 -0.028203879 0.094398156 0.09233813 0.029291354 0.13110267 0.15682974 -0.016919162 0.23927948 -0.1343307 -0.22422817 0.14634751 -0.064993896 0.4703685 -0.027190214 0.06224946 -0.091360025 0.21490277 -0.19562101 -0.10032754 -0.09056772 -0.06203493 -0.18876675 -0.10963594 -0.27734384 0.12616494 -0.02217992 -0.16058226 -0.080475815 0.026953284 0.110732645 0.014894041 0.09416802 0.14299914 -0.1594008 -0.066080004 -0.007995227 -0.11668856 -0.13081996 -0.09237365 0.14741232 0.09180138 0.081735 0.3211204 -0.0036552632 -0.047030564 -0.02311798 0.048961394 0.08669574 -0.06766279 -0.50028914 -0.048515294 0.14144728 -0.032994404 -0.11954345 -0.14929578 -0.2388355 -0.019883996 -0.15917352 -0.052084364 0.2801028 -0.0029121689 -0.054581646 -0.47385484 0.17112483 -0.12066923 -0.042173345 0.1395337 0.26115036 0.012869649 0.009291686 -0.0026459037 -0.075331464 0.017840583 -0.26869613 -0.21820338 -0.17084768 -0.1022808 -0.055290595 0.13513643 0.12362477 -0.10980586 0.13980341 -0.20233242 0.08813751 0.3849736 -0.10653763 -0.06199595 0.028849555 0.03230154 0.023856193 0.069950655 0.19310954 -0.077677034 -0.144811'", "\n", "average_glove_vector", "=", "np", ".", "array", "(", "vec_string", ".", "split", "(", "\" \"", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "freqs", "[", "key", "]", ">", "10", ":", "\n", "                ", "vocab_weights", "[", "count", "]", "=", "glove", ".", "vectors", "[", "glove", ".", "stoi", "[", "key", "]", "]", "\n", "count", "=", "count", "+", "1", "\n", "vocab", ".", "add_word", "(", "key", ")", "\n", "\n", "", "", "", "print", "(", "\"Total vocabulary size: {}\"", ".", "format", "(", "len", "(", "vocab", ")", ")", ")", "\n", "\n", "return", "vocab", ",", "vocab_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.distributions.Categorical.__init__": [[55, 65], ["torch.Module.__init__", "init_", "pytorchppo.a2c_ppo_acktr.utils.init", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", "Categorical", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "\n", "m", ",", "\n", "nn", ".", "init", ".", "orthogonal_", ",", "\n", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", ",", "\n", "gain", "=", "0.01", ")", "\n", "\n", "self", ".", "linear", "=", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.distributions.Categorical.forward": [[66, 69], ["distributions.Categorical.linear", "FixedCategorical"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "FixedCategorical", "(", "logits", "=", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.distributions.DiagGaussian.__init__": [[72, 80], ["torch.Module.__init__", "init_", "pytorchppo.a2c_ppo_acktr.utils.AddBias", "pytorchppo.a2c_ppo_acktr.utils.init", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", "DiagGaussian", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ")", "\n", "\n", "self", ".", "fc_mean", "=", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "num_outputs", ")", ")", "\n", "self", ".", "logstd", "=", "AddBias", "(", "torch", ".", "zeros", "(", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.distributions.DiagGaussian.forward": [[81, 91], ["distributions.DiagGaussian.fc_mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "distributions.DiagGaussian.logstd", "FixedNormal", "distributions.DiagGaussian.size", "zeros.cuda.cuda.cuda", "distributions.DiagGaussian.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "action_mean", "=", "self", ".", "fc_mean", "(", "x", ")", "\n", "\n", "#  An ugly hack for my KFAC implementation.", "\n", "zeros", "=", "torch", ".", "zeros", "(", "action_mean", ".", "size", "(", ")", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "zeros", "=", "zeros", ".", "cuda", "(", ")", "\n", "\n", "", "action_logstd", "=", "self", ".", "logstd", "(", "zeros", ")", "\n", "return", "FixedNormal", "(", "action_mean", ",", "action_logstd", ".", "exp", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.distributions.Bernoulli.__init__": [[94, 101], ["torch.Module.__init__", "init_", "pytorchppo.a2c_ppo_acktr.utils.init", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", "Bernoulli", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ")", "\n", "\n", "self", ".", "linear", "=", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.distributions.Bernoulli.forward": [[102, 105], ["distributions.Bernoulli.linear", "FixedBernoulli"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "FixedBernoulli", "(", "logits", "=", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.__init__": [[10, 34], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "storage.RolloutStorage.actions.long"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_steps", ",", "num_processes", ",", "obs_shape", ",", "action_space", ",", "\n", "recurrent_hidden_state_size", ")", ":", "\n", "        ", "self", ".", "obs", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "*", "obs_shape", ")", "\n", "self", ".", "recurrent_hidden_states", "=", "torch", ".", "zeros", "(", "\n", "num_steps", "+", "1", ",", "num_processes", ",", "recurrent_hidden_state_size", ")", "\n", "self", ".", "rewards", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "value_preds", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "returns", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "action_log_probs", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "if", "action_space", ".", "__class__", ".", "__name__", "==", "'Discrete'", ":", "\n", "            ", "action_shape", "=", "1", "\n", "", "else", ":", "\n", "            ", "action_shape", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "", "self", ".", "actions", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "action_shape", ")", "\n", "if", "action_space", ".", "__class__", ".", "__name__", "==", "'Discrete'", ":", "\n", "            ", "self", ".", "actions", "=", "self", ".", "actions", ".", "long", "(", ")", "\n", "", "self", ".", "masks", "=", "torch", ".", "ones", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "\n", "# Masks that indicate whether it's a true terminal state", "\n", "# or time limit end state", "\n", "self", ".", "bad_masks", "=", "torch", ".", "ones", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to": [[35, 45], ["storage.RolloutStorage.obs.to", "storage.RolloutStorage.recurrent_hidden_states.to", "storage.RolloutStorage.rewards.to", "storage.RolloutStorage.value_preds.to", "storage.RolloutStorage.returns.to", "storage.RolloutStorage.action_log_probs.to", "storage.RolloutStorage.actions.to", "storage.RolloutStorage.masks.to", "storage.RolloutStorage.bad_masks.to"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "obs", "=", "self", ".", "obs", ".", "to", "(", "device", ")", "\n", "self", ".", "recurrent_hidden_states", "=", "self", ".", "recurrent_hidden_states", ".", "to", "(", "device", ")", "\n", "self", ".", "rewards", "=", "self", ".", "rewards", ".", "to", "(", "device", ")", "\n", "self", ".", "value_preds", "=", "self", ".", "value_preds", ".", "to", "(", "device", ")", "\n", "self", ".", "returns", "=", "self", ".", "returns", ".", "to", "(", "device", ")", "\n", "self", ".", "action_log_probs", "=", "self", ".", "action_log_probs", ".", "to", "(", "device", ")", "\n", "self", ".", "actions", "=", "self", ".", "actions", ".", "to", "(", "device", ")", "\n", "self", ".", "masks", "=", "self", ".", "masks", ".", "to", "(", "device", ")", "\n", "self", ".", "bad_masks", "=", "self", ".", "bad_masks", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.insert": [[46, 59], ["storage.RolloutStorage.obs[].copy_", "storage.RolloutStorage.recurrent_hidden_states[].copy_", "storage.RolloutStorage.actions[].copy_", "storage.RolloutStorage.action_log_probs[].copy_", "storage.RolloutStorage.value_preds[].copy_", "storage.RolloutStorage.rewards[].copy_", "storage.RolloutStorage.masks[].copy_", "storage.RolloutStorage.bad_masks[].copy_"], "methods", ["None"], ["", "def", "insert", "(", "self", ",", "obs", ",", "recurrent_hidden_states", ",", "actions", ",", "action_log_probs", ",", "\n", "value_preds", ",", "rewards", ",", "masks", ",", "bad_masks", ")", ":", "\n", "        ", "self", ".", "obs", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "obs", ")", "\n", "self", ".", "recurrent_hidden_states", "[", "self", ".", "step", "+", "\n", "1", "]", ".", "copy_", "(", "recurrent_hidden_states", ")", "\n", "self", ".", "actions", "[", "self", ".", "step", "]", ".", "copy_", "(", "actions", ")", "\n", "self", ".", "action_log_probs", "[", "self", ".", "step", "]", ".", "copy_", "(", "action_log_probs", ")", "\n", "self", ".", "value_preds", "[", "self", ".", "step", "]", ".", "copy_", "(", "value_preds", ")", "\n", "self", ".", "rewards", "[", "self", ".", "step", "]", ".", "copy_", "(", "rewards", ")", "\n", "self", ".", "masks", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "masks", ")", "\n", "self", ".", "bad_masks", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "bad_masks", ")", "\n", "\n", "self", ".", "step", "=", "(", "self", ".", "step", "+", "1", ")", "%", "self", ".", "num_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.after_update": [[60, 65], ["storage.RolloutStorage.obs[].copy_", "storage.RolloutStorage.recurrent_hidden_states[].copy_", "storage.RolloutStorage.masks[].copy_", "storage.RolloutStorage.bad_masks[].copy_"], "methods", ["None"], ["", "def", "after_update", "(", "self", ")", ":", "\n", "        ", "self", ".", "obs", "[", "0", "]", ".", "copy_", "(", "self", ".", "obs", "[", "-", "1", "]", ")", "\n", "self", ".", "recurrent_hidden_states", "[", "0", "]", ".", "copy_", "(", "self", ".", "recurrent_hidden_states", "[", "-", "1", "]", ")", "\n", "self", ".", "masks", "[", "0", "]", ".", "copy_", "(", "self", ".", "masks", "[", "-", "1", "]", ")", "\n", "self", ".", "bad_masks", "[", "0", "]", ".", "copy_", "(", "self", ".", "bad_masks", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.compute_returns": [[66, 106], ["reversed", "reversed", "reversed", "reversed", "range", "range", "range", "range", "storage.RolloutStorage.rewards.size", "storage.RolloutStorage.rewards.size", "storage.RolloutStorage.rewards.size", "storage.RolloutStorage.rewards.size"], "methods", ["None"], ["", "def", "compute_returns", "(", "self", ",", "\n", "next_value", ",", "\n", "use_gae", ",", "\n", "gamma", ",", "\n", "gae_lambda", ",", "\n", "use_proper_time_limits", "=", "True", ")", ":", "\n", "        ", "if", "use_proper_time_limits", ":", "\n", "            ", "if", "use_gae", ":", "\n", "                ", "self", ".", "value_preds", "[", "-", "1", "]", "=", "next_value", "\n", "gae", "=", "0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                    ", "delta", "=", "self", ".", "rewards", "[", "step", "]", "+", "gamma", "*", "self", ".", "value_preds", "[", "\n", "step", "+", "1", "]", "*", "self", ".", "masks", "[", "step", "+", "\n", "1", "]", "-", "self", ".", "value_preds", "[", "step", "]", "\n", "gae", "=", "delta", "+", "gamma", "*", "gae_lambda", "*", "self", ".", "masks", "[", "step", "+", "\n", "1", "]", "*", "gae", "\n", "gae", "=", "gae", "*", "self", ".", "bad_masks", "[", "step", "+", "1", "]", "\n", "self", ".", "returns", "[", "step", "]", "=", "gae", "+", "self", ".", "value_preds", "[", "step", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "returns", "[", "-", "1", "]", "=", "next_value", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                    ", "self", ".", "returns", "[", "step", "]", "=", "(", "self", ".", "returns", "[", "step", "+", "1", "]", "*", "gamma", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "+", "self", ".", "rewards", "[", "step", "]", ")", "*", "self", ".", "bad_masks", "[", "step", "+", "1", "]", "+", "(", "1", "-", "self", ".", "bad_masks", "[", "step", "+", "1", "]", ")", "*", "self", ".", "value_preds", "[", "step", "]", "\n", "", "", "", "else", ":", "\n", "            ", "if", "use_gae", ":", "\n", "                ", "self", ".", "value_preds", "[", "-", "1", "]", "=", "next_value", "\n", "gae", "=", "0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                    ", "delta", "=", "self", ".", "rewards", "[", "step", "]", "+", "gamma", "*", "self", ".", "value_preds", "[", "\n", "step", "+", "1", "]", "*", "self", ".", "masks", "[", "step", "+", "\n", "1", "]", "-", "self", ".", "value_preds", "[", "step", "]", "\n", "gae", "=", "delta", "+", "gamma", "*", "gae_lambda", "*", "self", ".", "masks", "[", "step", "+", "\n", "1", "]", "*", "gae", "\n", "self", ".", "returns", "[", "step", "]", "=", "gae", "+", "self", ".", "value_preds", "[", "step", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "returns", "[", "-", "1", "]", "=", "next_value", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                    ", "self", ".", "returns", "[", "step", "]", "=", "self", ".", "returns", "[", "step", "+", "1", "]", "*", "gamma", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "+", "self", ".", "rewards", "[", "step", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.feed_forward_generator": [[107, 144], ["torch.utils.data.sampler.BatchSampler", "storage.RolloutStorage.rewards.size", "torch.utils.data.sampler.SubsetRandomSampler", "range", "storage.RolloutStorage.obs[].view", "storage.RolloutStorage.recurrent_hidden_states[].view", "storage.RolloutStorage.actions.view", "storage.RolloutStorage.value_preds[].view", "storage.RolloutStorage.returns[].view", "storage.RolloutStorage.masks[].view", "storage.RolloutStorage.action_log_probs.view", "storage.RolloutStorage.recurrent_hidden_states.size", "storage.RolloutStorage.actions.size", "advantages.view", "storage.RolloutStorage.obs.size"], "methods", ["None"], ["", "", "", "", "def", "feed_forward_generator", "(", "self", ",", "\n", "advantages", ",", "\n", "num_mini_batch", "=", "None", ",", "\n", "mini_batch_size", "=", "None", ")", ":", "\n", "        ", "num_steps", ",", "num_processes", "=", "self", ".", "rewards", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "batch_size", "=", "num_processes", "*", "num_steps", "\n", "\n", "if", "mini_batch_size", "is", "None", ":", "\n", "            ", "assert", "batch_size", ">=", "num_mini_batch", ",", "(", "\n", "\"PPO requires the number of processes ({}) \"", "\n", "\"* number of steps ({}) = {} \"", "\n", "\"to be greater than or equal to the number of PPO mini batches ({}).\"", "\n", "\"\"", ".", "format", "(", "num_processes", ",", "num_steps", ",", "num_processes", "*", "num_steps", ",", "\n", "num_mini_batch", ")", ")", "\n", "mini_batch_size", "=", "batch_size", "//", "num_mini_batch", "\n", "", "sampler", "=", "BatchSampler", "(", "\n", "SubsetRandomSampler", "(", "range", "(", "batch_size", ")", ")", ",", "\n", "mini_batch_size", ",", "\n", "drop_last", "=", "True", ")", "\n", "for", "indices", "in", "sampler", ":", "\n", "            ", "obs_batch", "=", "self", ".", "obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "*", "self", ".", "obs", ".", "size", "(", ")", "[", "2", ":", "]", ")", "[", "indices", "]", "\n", "recurrent_hidden_states_batch", "=", "self", ".", "recurrent_hidden_states", "[", ":", "-", "1", "]", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "recurrent_hidden_states", ".", "size", "(", "-", "1", ")", ")", "[", "indices", "]", "\n", "actions_batch", "=", "self", ".", "actions", ".", "view", "(", "-", "1", ",", "\n", "self", ".", "actions", ".", "size", "(", "-", "1", ")", ")", "[", "indices", "]", "\n", "value_preds_batch", "=", "self", ".", "value_preds", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "return_batch", "=", "self", ".", "returns", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "masks_batch", "=", "self", ".", "masks", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "old_action_log_probs_batch", "=", "self", ".", "action_log_probs", ".", "view", "(", "-", "1", ",", "\n", "1", ")", "[", "indices", "]", "\n", "if", "advantages", "is", "None", ":", "\n", "                ", "adv_targ", "=", "None", "\n", "", "else", ":", "\n", "                ", "adv_targ", "=", "advantages", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "\n", "", "yield", "obs_batch", ",", "recurrent_hidden_states_batch", ",", "actions_batch", ",", "value_preds_batch", ",", "return_batch", ",", "masks_batch", ",", "old_action_log_probs_batch", ",", "adv_targ", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.recurrent_generator": [[145, 203], ["storage.RolloutStorage.rewards.size", "torch.randperm", "range", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().view", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "_flatten_helper.append", "torch.stack().view.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage._flatten_helper", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage._flatten_helper", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage._flatten_helper", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage._flatten_helper", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage._flatten_helper", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage._flatten_helper", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage._flatten_helper"], ["", "", "def", "recurrent_generator", "(", "self", ",", "advantages", ",", "num_mini_batch", ")", ":", "\n", "        ", "num_processes", "=", "self", ".", "rewards", ".", "size", "(", "1", ")", "\n", "assert", "num_processes", ">=", "num_mini_batch", ",", "(", "\n", "\"PPO requires the number of processes ({}) \"", "\n", "\"to be greater than or equal to the number of \"", "\n", "\"PPO mini batches ({}).\"", ".", "format", "(", "num_processes", ",", "num_mini_batch", ")", ")", "\n", "num_envs_per_batch", "=", "num_processes", "//", "num_mini_batch", "\n", "perm", "=", "torch", ".", "randperm", "(", "num_processes", ")", "\n", "for", "start_ind", "in", "range", "(", "0", ",", "num_processes", ",", "num_envs_per_batch", ")", ":", "\n", "            ", "obs_batch", "=", "[", "]", "\n", "recurrent_hidden_states_batch", "=", "[", "]", "\n", "actions_batch", "=", "[", "]", "\n", "value_preds_batch", "=", "[", "]", "\n", "return_batch", "=", "[", "]", "\n", "masks_batch", "=", "[", "]", "\n", "old_action_log_probs_batch", "=", "[", "]", "\n", "adv_targ", "=", "[", "]", "\n", "\n", "for", "offset", "in", "range", "(", "num_envs_per_batch", ")", ":", "\n", "                ", "ind", "=", "perm", "[", "start_ind", "+", "offset", "]", "\n", "obs_batch", ".", "append", "(", "self", ".", "obs", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "recurrent_hidden_states_batch", ".", "append", "(", "\n", "self", ".", "recurrent_hidden_states", "[", "0", ":", "1", ",", "ind", "]", ")", "\n", "actions_batch", ".", "append", "(", "self", ".", "actions", "[", ":", ",", "ind", "]", ")", "\n", "value_preds_batch", ".", "append", "(", "self", ".", "value_preds", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "return_batch", ".", "append", "(", "self", ".", "returns", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "masks_batch", ".", "append", "(", "self", ".", "masks", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "old_action_log_probs_batch", ".", "append", "(", "\n", "self", ".", "action_log_probs", "[", ":", ",", "ind", "]", ")", "\n", "adv_targ", ".", "append", "(", "advantages", "[", ":", ",", "ind", "]", ")", "\n", "\n", "", "T", ",", "N", "=", "self", ".", "num_steps", ",", "num_envs_per_batch", "\n", "# These are all tensors of size (T, N, -1)", "\n", "obs_batch", "=", "torch", ".", "stack", "(", "obs_batch", ",", "1", ")", "\n", "actions_batch", "=", "torch", ".", "stack", "(", "actions_batch", ",", "1", ")", "\n", "value_preds_batch", "=", "torch", ".", "stack", "(", "value_preds_batch", ",", "1", ")", "\n", "return_batch", "=", "torch", ".", "stack", "(", "return_batch", ",", "1", ")", "\n", "masks_batch", "=", "torch", ".", "stack", "(", "masks_batch", ",", "1", ")", "\n", "old_action_log_probs_batch", "=", "torch", ".", "stack", "(", "\n", "old_action_log_probs_batch", ",", "1", ")", "\n", "adv_targ", "=", "torch", ".", "stack", "(", "adv_targ", ",", "1", ")", "\n", "\n", "# States is just a (N, -1) tensor", "\n", "recurrent_hidden_states_batch", "=", "torch", ".", "stack", "(", "\n", "recurrent_hidden_states_batch", ",", "1", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "\n", "# Flatten the (T, N, ...) tensors to (T * N, ...)", "\n", "obs_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "obs_batch", ")", "\n", "actions_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "actions_batch", ")", "\n", "value_preds_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "value_preds_batch", ")", "\n", "return_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "return_batch", ")", "\n", "masks_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "masks_batch", ")", "\n", "old_action_log_probs_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "old_action_log_probs_batch", ")", "\n", "adv_targ", "=", "_flatten_helper", "(", "T", ",", "N", ",", "adv_targ", ")", "\n", "\n", "yield", "obs_batch", ",", "recurrent_hidden_states_batch", ",", "actions_batch", ",", "value_preds_batch", ",", "return_batch", ",", "masks_batch", ",", "old_action_log_probs_batch", ",", "adv_targ", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage._flatten_helper": [[5, 7], ["_tensor.view", "_tensor.size"], "function", ["None"], ["def", "_flatten_helper", "(", "T", ",", "N", ",", "_tensor", ")", ":", "\n", "    ", "return", "_tensor", ".", "view", "(", "T", "*", "N", ",", "*", "_tensor", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.AddBias.__init__": [[33, 36], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "bias.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bias", ")", ":", "\n", "        ", "super", "(", "AddBias", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_bias", "=", "nn", ".", "Parameter", "(", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.AddBias.forward": [[37, 44], ["x.dim", "utils.AddBias._bias.t().view", "utils.AddBias._bias.t().view", "utils.AddBias._bias.t", "utils.AddBias._bias.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "bias", "=", "self", ".", "_bias", ".", "t", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "bias", "=", "self", ".", "_bias", ".", "t", "(", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "x", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_render_func": [[11, 20], ["hasattr", "hasattr", "utils.get_render_func", "hasattr", "utils.get_render_func"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_render_func", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_render_func"], ["def", "get_render_func", "(", "venv", ")", ":", "\n", "    ", "if", "hasattr", "(", "venv", ",", "'envs'", ")", ":", "\n", "        ", "return", "venv", ".", "envs", "[", "0", "]", ".", "render", "\n", "", "elif", "hasattr", "(", "venv", ",", "'venv'", ")", ":", "\n", "        ", "return", "get_render_func", "(", "venv", ".", "venv", ")", "\n", "", "elif", "hasattr", "(", "venv", ",", "'env'", ")", ":", "\n", "        ", "return", "get_render_func", "(", "venv", ".", "env", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_vec_normalize": [[22, 29], ["isinstance", "hasattr", "utils.get_vec_normalize"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.get_vec_normalize"], ["", "def", "get_vec_normalize", "(", "venv", ")", ":", "\n", "    ", "if", "isinstance", "(", "venv", ",", "VecNormalize", ")", ":", "\n", "        ", "return", "venv", "\n", "", "elif", "hasattr", "(", "venv", ",", "'venv'", ")", ":", "\n", "        ", "return", "get_vec_normalize", "(", "venv", ".", "venv", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.update_linear_schedule": [[46, 51], ["float"], "function", ["None"], ["", "", "def", "update_linear_schedule", "(", "optimizer", ",", "epoch", ",", "total_num_epochs", ",", "initial_lr", ")", ":", "\n", "    ", "\"\"\"Decreases the learning rate linearly\"\"\"", "\n", "lr", "=", "initial_lr", "-", "(", "initial_lr", "*", "(", "epoch", "/", "float", "(", "total_num_epochs", ")", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.init": [[53, 57], ["weight_init", "bias_init"], "function", ["None"], ["", "", "def", "init", "(", "module", ",", "weight_init", ",", "bias_init", ",", "gain", "=", "1", ")", ":", "\n", "    ", "weight_init", "(", "module", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "bias_init", "(", "module", ".", "bias", ".", "data", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.utils.cleanup_log_dir": [[59, 66], ["os.makedirs", "glob.glob", "os.path.join", "os.remove"], "function", ["None"], ["", "def", "cleanup_log_dir", "(", "log_dir", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'*.monitor.csv'", ")", ")", "\n", "for", "f", "in", "files", ":", "\n", "            ", "os", ".", "remove", "(", "f", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.SplitBias.__init__": [[75, 80], ["torch.Module.__init__", "pytorchppo.a2c_ppo_acktr.utils.AddBias"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "super", "(", "SplitBias", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "add_bias", "=", "AddBias", "(", "module", ".", "bias", ".", "data", ")", "\n", "self", ".", "module", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.SplitBias.forward": [[81, 85], ["kfac.SplitBias.module", "kfac.SplitBias.add_bias"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "module", "(", "input", ")", "\n", "x", "=", "self", ".", "add_bias", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.__init__": [[88, 143], ["dict", "kfac.KFACOptimizer.__init__.split_bias"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "lr", "=", "0.25", ",", "\n", "momentum", "=", "0.9", ",", "\n", "stat_decay", "=", "0.99", ",", "\n", "kl_clip", "=", "0.001", ",", "\n", "damping", "=", "1e-2", ",", "\n", "weight_decay", "=", "0", ",", "\n", "fast_cnn", "=", "False", ",", "\n", "Ts", "=", "1", ",", "\n", "Tf", "=", "10", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", ")", "\n", "\n", "def", "split_bias", "(", "module", ")", ":", "\n", "            ", "for", "mname", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "child", ",", "'bias'", ")", "and", "child", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "_modules", "[", "mname", "]", "=", "SplitBias", "(", "child", ")", "\n", "", "else", ":", "\n", "                    ", "split_bias", "(", "child", ")", "\n", "\n", "", "", "", "split_bias", "(", "model", ")", "\n", "\n", "super", "(", "KFACOptimizer", ",", "self", ")", ".", "__init__", "(", "model", ".", "parameters", "(", ")", ",", "defaults", ")", "\n", "\n", "self", ".", "known_modules", "=", "{", "'Linear'", ",", "'Conv2d'", ",", "'AddBias'", "}", "\n", "\n", "self", ".", "modules", "=", "[", "]", "\n", "self", ".", "grad_outputs", "=", "{", "}", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "_prepare_model", "(", ")", "\n", "\n", "self", ".", "steps", "=", "0", "\n", "\n", "self", ".", "m_aa", ",", "self", ".", "m_gg", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "Q_a", ",", "self", ".", "Q_g", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "d_a", ",", "self", ".", "d_g", "=", "{", "}", ",", "{", "}", "\n", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "stat_decay", "=", "stat_decay", "\n", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "kl_clip", "=", "kl_clip", "\n", "self", ".", "damping", "=", "damping", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n", "self", ".", "fast_cnn", "=", "fast_cnn", "\n", "\n", "self", ".", "Ts", "=", "Ts", "\n", "self", ".", "Tf", "=", "Tf", "\n", "\n", "self", ".", "optim", "=", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr", "*", "(", "1", "-", "self", ".", "momentum", ")", ",", "\n", "momentum", "=", "self", ".", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer._save_input": [[144, 160], ["torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "kfac.compute_cov_a", "kfac.update_running_stat", "compute_cov_a.clone"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.compute_cov_a", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.update_running_stat", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "def", "_save_input", "(", "self", ",", "module", ",", "input", ")", ":", "\n", "        ", "if", "torch", ".", "is_grad_enabled", "(", ")", "and", "self", ".", "steps", "%", "self", ".", "Ts", "==", "0", ":", "\n", "            ", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "layer_info", "=", "None", "\n", "if", "classname", "==", "'Conv2d'", ":", "\n", "                ", "layer_info", "=", "(", "module", ".", "kernel_size", ",", "module", ".", "stride", ",", "\n", "module", ".", "padding", ")", "\n", "\n", "", "aa", "=", "compute_cov_a", "(", "input", "[", "0", "]", ".", "data", ",", "classname", ",", "layer_info", ",", "\n", "self", ".", "fast_cnn", ")", "\n", "\n", "# Initialize buffers", "\n", "if", "self", ".", "steps", "==", "0", ":", "\n", "                ", "self", ".", "m_aa", "[", "module", "]", "=", "aa", ".", "clone", "(", ")", "\n", "\n", "", "update_running_stat", "(", "aa", ",", "self", ".", "m_aa", "[", "module", "]", ",", "self", ".", "stat_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer._save_grad_output": [[161, 178], ["kfac.compute_cov_g", "kfac.update_running_stat", "compute_cov_g.clone"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.compute_cov_g", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.update_running_stat", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone"], ["", "", "def", "_save_grad_output", "(", "self", ",", "module", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "# Accumulate statistics for Fisher matrices", "\n", "        ", "if", "self", ".", "acc_stats", ":", "\n", "            ", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "layer_info", "=", "None", "\n", "if", "classname", "==", "'Conv2d'", ":", "\n", "                ", "layer_info", "=", "(", "module", ".", "kernel_size", ",", "module", ".", "stride", ",", "\n", "module", ".", "padding", ")", "\n", "\n", "", "gg", "=", "compute_cov_g", "(", "grad_output", "[", "0", "]", ".", "data", ",", "classname", ",", "layer_info", ",", "\n", "self", ".", "fast_cnn", ")", "\n", "\n", "# Initialize buffers", "\n", "if", "self", ".", "steps", "==", "0", ":", "\n", "                ", "self", ".", "m_gg", "[", "module", "]", "=", "gg", ".", "clone", "(", ")", "\n", "\n", "", "update_running_stat", "(", "gg", ",", "self", ".", "m_gg", "[", "module", "]", ",", "self", ".", "stat_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer._prepare_model": [[179, 189], ["kfac.KFACOptimizer.model.modules", "kfac.KFACOptimizer.modules.append", "module.register_forward_pre_hook", "module.register_backward_hook"], "methods", ["None"], ["", "", "def", "_prepare_model", "(", "self", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "            ", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "if", "classname", "in", "self", ".", "known_modules", ":", "\n", "                ", "assert", "not", "(", "(", "classname", "in", "[", "'Linear'", ",", "'Conv2d'", "]", ")", "and", "module", ".", "bias", "is", "not", "None", ")", ",", "\"You must have a bias as a separate layer\"", "\n", "\n", "self", ".", "modules", ".", "append", "(", "module", ")", "\n", "module", ".", "register_forward_pre_hook", "(", "self", ".", "_save_input", ")", "\n", "module", ".", "register_backward_hook", "(", "self", ".", "_save_grad_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step": [[190, 243], ["enumerate", "kfac.KFACOptimizer.model.parameters", "min", "kfac.KFACOptimizer.model.parameters", "kfac.KFACOptimizer.optim.step", "kfac.KFACOptimizer.model.parameters", "next", "v.view.view.view", "math.sqrt", "next.grad.data.copy_", "next.grad.data.mul_", "next.grad.data.add_", "len", "m.parameters", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "kfac.KFACOptimizer.d_a[].mul_", "kfac.KFACOptimizer.d_g[].mul_", "next.grad.data.view", "kfac.KFACOptimizer.Q_a[].t", "next.grad.data.size", "list", "next.grad.data.size", "kfac.KFACOptimizer.Q_g[].t", "m.parameters", "kfac.KFACOptimizer.d_g[].unsqueeze", "kfac.KFACOptimizer.d_a[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step"], ["", "", "", "def", "step", "(", "self", ")", ":", "\n", "# Add weight decay", "\n", "        ", "if", "self", ".", "weight_decay", ">", "0", ":", "\n", "            ", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "grad", ".", "data", ".", "add_", "(", "self", ".", "weight_decay", ",", "p", ".", "data", ")", "\n", "\n", "", "", "updates", "=", "{", "}", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "modules", ")", ":", "\n", "            ", "assert", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", ")", "==", "1", ",", "\"Can handle only one parameter at the moment\"", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "p", "=", "next", "(", "m", ".", "parameters", "(", ")", ")", "\n", "\n", "la", "=", "self", ".", "damping", "+", "self", ".", "weight_decay", "\n", "\n", "if", "self", ".", "steps", "%", "self", ".", "Tf", "==", "0", ":", "\n", "# My asynchronous implementation exists, I will add it later.", "\n", "# Experimenting with different ways to this in PyTorch.", "\n", "                ", "self", ".", "d_a", "[", "m", "]", ",", "self", ".", "Q_a", "[", "m", "]", "=", "torch", ".", "symeig", "(", "\n", "self", ".", "m_aa", "[", "m", "]", ",", "eigenvectors", "=", "True", ")", "\n", "self", ".", "d_g", "[", "m", "]", ",", "self", ".", "Q_g", "[", "m", "]", "=", "torch", ".", "symeig", "(", "\n", "self", ".", "m_gg", "[", "m", "]", ",", "eigenvectors", "=", "True", ")", "\n", "\n", "self", ".", "d_a", "[", "m", "]", ".", "mul_", "(", "(", "self", ".", "d_a", "[", "m", "]", ">", "1e-6", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "d_g", "[", "m", "]", ".", "mul_", "(", "(", "self", ".", "d_g", "[", "m", "]", ">", "1e-6", ")", ".", "float", "(", ")", ")", "\n", "\n", "", "if", "classname", "==", "'Conv2d'", ":", "\n", "                ", "p_grad_mat", "=", "p", ".", "grad", ".", "data", ".", "view", "(", "p", ".", "grad", ".", "data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "p_grad_mat", "=", "p", ".", "grad", ".", "data", "\n", "\n", "", "v1", "=", "self", ".", "Q_g", "[", "m", "]", ".", "t", "(", ")", "@", "p_grad_mat", "@", "self", ".", "Q_a", "[", "m", "]", "\n", "v2", "=", "v1", "/", "(", "\n", "self", ".", "d_g", "[", "m", "]", ".", "unsqueeze", "(", "1", ")", "*", "self", ".", "d_a", "[", "m", "]", ".", "unsqueeze", "(", "0", ")", "+", "la", ")", "\n", "v", "=", "self", ".", "Q_g", "[", "m", "]", "@", "v2", "@", "self", ".", "Q_a", "[", "m", "]", ".", "t", "(", ")", "\n", "\n", "v", "=", "v", ".", "view", "(", "p", ".", "grad", ".", "data", ".", "size", "(", ")", ")", "\n", "updates", "[", "p", "]", "=", "v", "\n", "\n", "", "vg_sum", "=", "0", "\n", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "v", "=", "updates", "[", "p", "]", "\n", "vg_sum", "+=", "(", "v", "*", "p", ".", "grad", ".", "data", "*", "self", ".", "lr", "*", "self", ".", "lr", ")", ".", "sum", "(", ")", "\n", "\n", "", "nu", "=", "min", "(", "1", ",", "math", ".", "sqrt", "(", "self", ".", "kl_clip", "/", "vg_sum", ")", ")", "\n", "\n", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "v", "=", "updates", "[", "p", "]", "\n", "p", ".", "grad", ".", "data", ".", "copy_", "(", "v", ")", "\n", "p", ".", "grad", ".", "data", ".", "mul_", "(", "nu", ")", "\n", "\n", "", "self", ".", "optim", ".", "step", "(", ")", "\n", "self", ".", "steps", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac._extract_patches": [[16, 27], ["x.view.unfold", "x.view.unfold", "x.view.transpose_().transpose_().contiguous", "x.view.view", "x.view.size", "x.view.size", "x.view.size", "torch.pad", "x.view.transpose_().transpose_", "x.view.size", "x.view.size", "x.view.size", "x.view.transpose_"], "function", ["None"], ["def", "_extract_patches", "(", "x", ",", "kernel_size", ",", "stride", ",", "padding", ")", ":", "\n", "    ", "if", "padding", "[", "0", "]", "+", "padding", "[", "1", "]", ">", "0", ":", "\n", "        ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "padding", "[", "1", "]", ",", "padding", "[", "1", "]", ",", "padding", "[", "0", "]", ",", "\n", "padding", "[", "0", "]", ")", ")", ".", "data", "# Actually check dims", "\n", "", "x", "=", "x", ".", "unfold", "(", "2", ",", "kernel_size", "[", "0", "]", ",", "stride", "[", "0", "]", ")", "\n", "x", "=", "x", ".", "unfold", "(", "3", ",", "kernel_size", "[", "1", "]", ",", "stride", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "transpose_", "(", "1", ",", "2", ")", ".", "transpose_", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "\n", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ",", "\n", "x", ".", "size", "(", "3", ")", "*", "x", ".", "size", "(", "4", ")", "*", "x", ".", "size", "(", "5", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.compute_cov_a": [[29, 47], ["a.cuda.size", "a.cuda.t", "kfac._extract_patches", "a.cuda.view", "a.cuda.mean", "kfac._extract_patches", "a.cuda.view().div_().div_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "a.cuda.size", "a.cuda.size", "a.cuda.size", "a.cuda.size", "a.cuda.cuda", "a.cuda.view().div_", "a.cuda.size", "a.cuda.view", "a.cuda.size"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac._extract_patches", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac._extract_patches"], ["", "def", "compute_cov_a", "(", "a", ",", "classname", ",", "layer_info", ",", "fast_cnn", ")", ":", "\n", "    ", "batch_size", "=", "a", ".", "size", "(", "0", ")", "\n", "\n", "if", "classname", "==", "'Conv2d'", ":", "\n", "        ", "if", "fast_cnn", ":", "\n", "            ", "a", "=", "_extract_patches", "(", "a", ",", "*", "layer_info", ")", "\n", "a", "=", "a", ".", "view", "(", "a", ".", "size", "(", "0", ")", ",", "-", "1", ",", "a", ".", "size", "(", "-", "1", ")", ")", "\n", "a", "=", "a", ".", "mean", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "a", "=", "_extract_patches", "(", "a", ",", "*", "layer_info", ")", "\n", "a", "=", "a", ".", "view", "(", "-", "1", ",", "a", ".", "size", "(", "-", "1", ")", ")", ".", "div_", "(", "a", ".", "size", "(", "1", ")", ")", ".", "div_", "(", "a", ".", "size", "(", "2", ")", ")", "\n", "", "", "elif", "classname", "==", "'AddBias'", ":", "\n", "        ", "is_cuda", "=", "a", ".", "is_cuda", "\n", "a", "=", "torch", ".", "ones", "(", "a", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "if", "is_cuda", ":", "\n", "            ", "a", "=", "a", ".", "cuda", "(", ")", "\n", "\n", "", "", "return", "a", ".", "t", "(", ")", "@", "(", "a", "/", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.compute_cov_g": [[49, 65], ["g.sum.size", "g_.t", "g.sum.view", "g.sum.sum", "g.sum.transpose().transpose().contiguous", "g.sum.view().mul_().mul_", "g.sum.view", "g.sum.sum", "g.sum.size", "g.sum.size", "g.sum.size", "g.sum.size", "g.sum.size", "g.sum.size", "g.sum.transpose().transpose", "g.sum.view().mul_", "g.sum.size", "g.sum.transpose", "g.sum.view", "g.sum.size"], "function", ["None"], ["", "def", "compute_cov_g", "(", "g", ",", "classname", ",", "layer_info", ",", "fast_cnn", ")", ":", "\n", "    ", "batch_size", "=", "g", ".", "size", "(", "0", ")", "\n", "\n", "if", "classname", "==", "'Conv2d'", ":", "\n", "        ", "if", "fast_cnn", ":", "\n", "            ", "g", "=", "g", ".", "view", "(", "g", ".", "size", "(", "0", ")", ",", "g", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "g", "=", "g", ".", "sum", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "g", "=", "g", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "g", "=", "g", ".", "view", "(", "-", "1", ",", "g", ".", "size", "(", "-", "1", ")", ")", ".", "mul_", "(", "g", ".", "size", "(", "1", ")", ")", ".", "mul_", "(", "g", ".", "size", "(", "2", ")", ")", "\n", "", "", "elif", "classname", "==", "'AddBias'", ":", "\n", "        ", "g", "=", "g", ".", "view", "(", "g", ".", "size", "(", "0", ")", ",", "g", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "g", "=", "g", ".", "sum", "(", "-", "1", ")", "\n", "\n", "", "g_", "=", "g", "*", "batch_size", "\n", "return", "g_", ".", "t", "(", ")", "@", "(", "g_", "/", "g", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.update_running_stat": [[67, 72], ["None"], "function", ["None"], ["", "def", "update_running_stat", "(", "aa", ",", "m_aa", ",", "momentum", ")", ":", "\n", "# Do the trick to keep aa unchanged and not create any additional tensors", "\n", "    ", "m_aa", "*=", "momentum", "/", "(", "1", "-", "momentum", ")", "\n", "m_aa", "+=", "aa", "\n", "m_aa", "*=", "(", "1", "-", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.gail.Discriminator.__init__": [[13, 29], ["torch.Module.__init__", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "gail.Discriminator.trunk.train", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "baselines.common.running_mean_std.RunningMeanStd", "gail.Discriminator.trunk.parameters", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "device", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "trunk", ".", "train", "(", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "trunk", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "returns", "=", "None", "\n", "self", ".", "ret_rms", "=", "RunningMeanStd", "(", "shape", "=", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.gail.Discriminator.compute_grad_pen": [[30, 57], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "alpha.expand_as().to.expand_as().to.expand_as().to", "gail.Discriminator.trunk", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "expert_state.size", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "alpha.expand_as().to.expand_as().to.expand_as", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "gail.Discriminator.size", "grad.norm"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to"], ["", "def", "compute_grad_pen", "(", "self", ",", "\n", "expert_state", ",", "\n", "expert_action", ",", "\n", "policy_state", ",", "\n", "policy_action", ",", "\n", "lambda_", "=", "10", ")", ":", "\n", "        ", "alpha", "=", "torch", ".", "rand", "(", "expert_state", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "expert_data", "=", "torch", ".", "cat", "(", "[", "expert_state", ",", "expert_action", "]", ",", "dim", "=", "1", ")", "\n", "policy_data", "=", "torch", ".", "cat", "(", "[", "policy_state", ",", "policy_action", "]", ",", "dim", "=", "1", ")", "\n", "\n", "alpha", "=", "alpha", ".", "expand_as", "(", "expert_data", ")", ".", "to", "(", "expert_data", ".", "device", ")", "\n", "\n", "mixup_data", "=", "alpha", "*", "expert_data", "+", "(", "1", "-", "alpha", ")", "*", "policy_data", "\n", "mixup_data", ".", "requires_grad", "=", "True", "\n", "\n", "disc", "=", "self", ".", "trunk", "(", "mixup_data", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "disc", ".", "size", "(", ")", ")", ".", "to", "(", "disc", ".", "device", ")", "\n", "grad", "=", "autograd", ".", "grad", "(", "\n", "outputs", "=", "disc", ",", "\n", "inputs", "=", "mixup_data", ",", "\n", "grad_outputs", "=", "ones", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "grad_pen", "=", "lambda_", "*", "(", "grad", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "return", "grad_pen", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.gail.Discriminator.update": [[58, 97], ["gail.Discriminator.train", "rollouts.feed_forward_generator", "zip", "gail.Discriminator.trunk", "obsfilt", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "expert_action.to.to.to", "gail.Discriminator.trunk", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "gail.Discriminator.compute_grad_pen", "gail.Discriminator.optimizer.zero_grad", "gail.Discriminator.optimizer.step", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.FloatTensor().to.numpy", "torch.FloatTensor().to.numpy", "torch.FloatTensor().to.numpy", "torch.FloatTensor().to.numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "gail.Discriminator.size", "gail.Discriminator.size"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.train", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.feed_forward_generator", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.gail.Discriminator.compute_grad_pen", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.to"], ["", "def", "update", "(", "self", ",", "expert_loader", ",", "rollouts", ",", "obsfilt", "=", "None", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n", "policy_data_generator", "=", "rollouts", ".", "feed_forward_generator", "(", "\n", "None", ",", "mini_batch_size", "=", "expert_loader", ".", "batch_size", ")", "\n", "\n", "loss", "=", "0", "\n", "n", "=", "0", "\n", "for", "expert_batch", ",", "policy_batch", "in", "zip", "(", "expert_loader", ",", "\n", "policy_data_generator", ")", ":", "\n", "            ", "policy_state", ",", "policy_action", "=", "policy_batch", "[", "0", "]", ",", "policy_batch", "[", "2", "]", "\n", "policy_d", "=", "self", ".", "trunk", "(", "\n", "torch", ".", "cat", "(", "[", "policy_state", ",", "policy_action", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "expert_state", ",", "expert_action", "=", "expert_batch", "\n", "expert_state", "=", "obsfilt", "(", "expert_state", ".", "numpy", "(", ")", ",", "update", "=", "False", ")", "\n", "expert_state", "=", "torch", ".", "FloatTensor", "(", "expert_state", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "expert_action", "=", "expert_action", ".", "to", "(", "self", ".", "device", ")", "\n", "expert_d", "=", "self", ".", "trunk", "(", "\n", "torch", ".", "cat", "(", "[", "expert_state", ",", "expert_action", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "expert_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "expert_d", ",", "\n", "torch", ".", "ones", "(", "expert_d", ".", "size", "(", ")", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "policy_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "policy_d", ",", "\n", "torch", ".", "zeros", "(", "policy_d", ".", "size", "(", ")", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "gail_loss", "=", "expert_loss", "+", "policy_loss", "\n", "grad_pen", "=", "self", ".", "compute_grad_pen", "(", "expert_state", ",", "expert_action", ",", "\n", "policy_state", ",", "policy_action", ")", "\n", "\n", "loss", "+=", "(", "gail_loss", "+", "grad_pen", ")", ".", "item", "(", ")", "\n", "n", "+=", "1", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "gail_loss", "+", "grad_pen", ")", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "return", "loss", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.gail.Discriminator.predict_reward": [[98, 112], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "gail.Discriminator.eval", "gail.Discriminator.trunk", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid.log", "torch.sigmoid.log", "torch.sigmoid.log", "torch.sigmoid.log", "reward.clone", "gail.Discriminator.ret_rms.update", "numpy.sqrt", "gail.Discriminator.returns.cpu().numpy", "gail.Discriminator.returns.cpu"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.envs.VecNormalize.eval", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.items.MazeItem.MazeItem.clone", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update"], ["", "def", "predict_reward", "(", "self", ",", "state", ",", "action", ",", "gamma", ",", "masks", ",", "update_rms", "=", "True", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "d", "=", "self", ".", "trunk", "(", "torch", ".", "cat", "(", "[", "state", ",", "action", "]", ",", "dim", "=", "1", ")", ")", "\n", "s", "=", "torch", ".", "sigmoid", "(", "d", ")", "\n", "reward", "=", "s", ".", "log", "(", ")", "-", "(", "1", "-", "s", ")", ".", "log", "(", ")", "\n", "if", "self", ".", "returns", "is", "None", ":", "\n", "                ", "self", ".", "returns", "=", "reward", ".", "clone", "(", ")", "\n", "\n", "", "if", "update_rms", ":", "\n", "                ", "self", ".", "returns", "=", "self", ".", "returns", "*", "masks", "*", "gamma", "+", "reward", "\n", "self", ".", "ret_rms", ".", "update", "(", "self", ".", "returns", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "return", "reward", "/", "np", ".", "sqrt", "(", "self", ".", "ret_rms", ".", "var", "[", "0", "]", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.gail.ExpertDataset.__init__": [[115, 158], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "gail.ExpertDataset.trajectories[].sum().item", "range", "all_trajectories[].size", "gail.ExpertDataset.get_idx.append", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "gail.ExpertDataset.trajectories[].sum", "[].item", "[].item", "samples.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "num_trajectories", "=", "4", ",", "subsample_frequency", "=", "20", ")", ":", "\n", "        ", "all_trajectories", "=", "torch", ".", "load", "(", "file_name", ")", "\n", "\n", "perm", "=", "torch", ".", "randperm", "(", "all_trajectories", "[", "'states'", "]", ".", "size", "(", "0", ")", ")", "\n", "idx", "=", "perm", "[", ":", "num_trajectories", "]", "\n", "\n", "self", ".", "trajectories", "=", "{", "}", "\n", "\n", "# See https://github.com/pytorch/pytorch/issues/14886", "\n", "# .long() for fixing bug in torch v0.4.1", "\n", "start_idx", "=", "torch", ".", "randint", "(", "\n", "0", ",", "subsample_frequency", ",", "size", "=", "(", "num_trajectories", ",", ")", ")", ".", "long", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "all_trajectories", ".", "items", "(", ")", ":", "\n", "            ", "data", "=", "v", "[", "idx", "]", "\n", "\n", "if", "k", "!=", "'lengths'", ":", "\n", "                ", "samples", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_trajectories", ")", ":", "\n", "                    ", "samples", ".", "append", "(", "data", "[", "i", ",", "start_idx", "[", "i", "]", ":", ":", "subsample_frequency", "]", ")", "\n", "", "self", ".", "trajectories", "[", "k", "]", "=", "torch", ".", "stack", "(", "samples", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "trajectories", "[", "k", "]", "=", "data", "//", "subsample_frequency", "\n", "\n", "", "", "self", ".", "i2traj_idx", "=", "{", "}", "\n", "self", ".", "i2i", "=", "{", "}", "\n", "\n", "self", ".", "length", "=", "self", ".", "trajectories", "[", "'lengths'", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "traj_idx", "=", "0", "\n", "i", "=", "0", "\n", "\n", "self", ".", "get_idx", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "length", ")", ":", "\n", "\n", "            ", "while", "self", ".", "trajectories", "[", "'lengths'", "]", "[", "traj_idx", "]", ".", "item", "(", ")", "<=", "i", ":", "\n", "                ", "i", "-=", "self", ".", "trajectories", "[", "'lengths'", "]", "[", "traj_idx", "]", ".", "item", "(", ")", "\n", "traj_idx", "+=", "1", "\n", "\n", "", "self", ".", "get_idx", ".", "append", "(", "(", "traj_idx", ",", "i", ")", ")", "\n", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.gail.ExpertDataset.__len__": [[160, 162], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.gail.ExpertDataset.__getitem__": [[163, 168], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "traj_idx", ",", "i", "=", "self", ".", "get_idx", "[", "i", "]", "\n", "\n", "return", "self", ".", "trajectories", "[", "'states'", "]", "[", "traj_idx", "]", "[", "i", "]", ",", "self", ".", "trajectories", "[", "\n", "'actions'", "]", "[", "traj_idx", "]", "[", "i", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.a2c_acktr.A2C_ACKTR.__init__": [[9, 32], ["pytorchppo.a2c_ppo_acktr.algo.kfac.KFACOptimizer", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "actor_critic.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "actor_critic", ",", "\n", "value_loss_coef", ",", "\n", "entropy_coef", ",", "\n", "lr", "=", "None", ",", "\n", "eps", "=", "None", ",", "\n", "alpha", "=", "None", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "acktr", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "actor_critic", "=", "actor_critic", "\n", "self", ".", "acktr", "=", "acktr", "\n", "\n", "self", ".", "value_loss_coef", "=", "value_loss_coef", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "\n", "if", "acktr", ":", "\n", "            ", "self", ".", "optimizer", "=", "KFACOptimizer", "(", "actor_critic", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "RMSprop", "(", "\n", "actor_critic", ".", "parameters", "(", ")", ",", "lr", ",", "eps", "=", "eps", ",", "alpha", "=", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.a2c_acktr.A2C_ACKTR.update": [[33, 81], ["rollouts.rewards.size", "a2c_acktr.A2C_ACKTR.actor_critic.evaluate_actions", "values.view.view.view", "action_log_probs.view.view.view", "advantages.pow().mean", "a2c_acktr.A2C_ACKTR.optimizer.zero_grad", "a2c_acktr.A2C_ACKTR.optimizer.step", "rollouts.obs.size", "rollouts.actions.size", "rollouts.obs[].view", "rollouts.recurrent_hidden_states[].view", "rollouts.masks[].view", "rollouts.actions.view", "a2c_acktr.A2C_ACKTR.actor_critic.zero_grad", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "fisher_loss.backward", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "advantages.pow().mean.item", "action_loss.item", "dist_entropy.item", "advantages.pow", "action_log_probs.view.view.mean", "values.view.view.size", "value_noise.cuda.cuda.cuda", "a2c_acktr.A2C_ACKTR.actor_critic.parameters", "advantages.detach", "sample_values.detach"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.evaluate_actions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step"], ["", "", "def", "update", "(", "self", ",", "rollouts", ")", ":", "\n", "        ", "obs_shape", "=", "rollouts", ".", "obs", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "action_shape", "=", "rollouts", ".", "actions", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "num_steps", ",", "num_processes", ",", "_", "=", "rollouts", ".", "rewards", ".", "size", "(", ")", "\n", "\n", "values", ",", "action_log_probs", ",", "dist_entropy", ",", "_", "=", "self", ".", "actor_critic", ".", "evaluate_actions", "(", "\n", "rollouts", ".", "obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "*", "obs_shape", ")", ",", "\n", "rollouts", ".", "recurrent_hidden_states", "[", "0", "]", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "actor_critic", ".", "recurrent_hidden_state_size", ")", ",", "\n", "rollouts", ".", "masks", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "rollouts", ".", "actions", ".", "view", "(", "-", "1", ",", "action_shape", ")", ")", "\n", "\n", "values", "=", "values", ".", "view", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "action_log_probs", "=", "action_log_probs", ".", "view", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "\n", "advantages", "=", "rollouts", ".", "returns", "[", ":", "-", "1", "]", "-", "values", "\n", "value_loss", "=", "advantages", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "action_loss", "=", "-", "(", "advantages", ".", "detach", "(", ")", "*", "action_log_probs", ")", ".", "mean", "(", ")", "\n", "\n", "if", "self", ".", "acktr", "and", "self", ".", "optimizer", ".", "steps", "%", "self", ".", "optimizer", ".", "Ts", "==", "0", ":", "\n", "# Sampled fisher, see Martens 2014", "\n", "            ", "self", ".", "actor_critic", ".", "zero_grad", "(", ")", "\n", "pg_fisher_loss", "=", "-", "action_log_probs", ".", "mean", "(", ")", "\n", "\n", "value_noise", "=", "torch", ".", "randn", "(", "values", ".", "size", "(", ")", ")", "\n", "if", "values", ".", "is_cuda", ":", "\n", "                ", "value_noise", "=", "value_noise", ".", "cuda", "(", ")", "\n", "\n", "", "sample_values", "=", "values", "+", "value_noise", "\n", "vf_fisher_loss", "=", "-", "(", "values", "-", "sample_values", ".", "detach", "(", ")", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "fisher_loss", "=", "pg_fisher_loss", "+", "vf_fisher_loss", "\n", "self", ".", "optimizer", ".", "acc_stats", "=", "True", "\n", "fisher_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "acc_stats", "=", "False", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "value_loss", "*", "self", ".", "value_loss_coef", "+", "action_loss", "-", "\n", "dist_entropy", "*", "self", ".", "entropy_coef", ")", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "acktr", "==", "False", ":", "\n", "            ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "actor_critic", ".", "parameters", "(", ")", ",", "\n", "self", ".", "max_grad_norm", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "value_loss", ".", "item", "(", ")", ",", "action_loss", ".", "item", "(", ")", ",", "dist_entropy", ".", "item", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.__init__": [[8, 33], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "actor_critic.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "actor_critic", ",", "\n", "clip_param", ",", "\n", "ppo_epoch", ",", "\n", "num_mini_batch", ",", "\n", "value_loss_coef", ",", "\n", "entropy_coef", ",", "\n", "lr", "=", "None", ",", "\n", "eps", "=", "None", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "use_clipped_value_loss", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "actor_critic", "=", "actor_critic", "\n", "\n", "self", ".", "clip_param", "=", "clip_param", "\n", "self", ".", "ppo_epoch", "=", "ppo_epoch", "\n", "self", ".", "num_mini_batch", "=", "num_mini_batch", "\n", "\n", "self", ".", "value_loss_coef", "=", "value_loss_coef", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "use_clipped_value_loss", "=", "use_clipped_value_loss", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "actor_critic", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "eps", "=", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.ppo.PPO.update": [[34, 97], ["range", "advantages.mean", "advantages.std", "rollouts.recurrent_generator", "rollouts.feed_forward_generator", "ppo.PPO.actor_critic.evaluate_actions", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "ppo.PPO.optimizer.zero_grad", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "ppo.PPO.optimizer.step", "value_loss.item", "action_loss.item", "dist_entropy.item", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "ppo.PPO.actor_critic.parameters", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.recurrent_generator", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.storage.RolloutStorage.feed_forward_generator", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.a2c_ppo_acktr.model.Policy.evaluate_actions", "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.algo.kfac.KFACOptimizer.step"], ["", "def", "update", "(", "self", ",", "rollouts", ")", ":", "\n", "        ", "advantages", "=", "rollouts", ".", "returns", "[", ":", "-", "1", "]", "-", "rollouts", ".", "value_preds", "[", ":", "-", "1", "]", "\n", "advantages", "=", "(", "advantages", "-", "advantages", ".", "mean", "(", ")", ")", "/", "(", "\n", "advantages", ".", "std", "(", ")", "+", "1e-5", ")", "\n", "\n", "value_loss_epoch", "=", "0", "\n", "action_loss_epoch", "=", "0", "\n", "dist_entropy_epoch", "=", "0", "\n", "\n", "for", "e", "in", "range", "(", "self", ".", "ppo_epoch", ")", ":", "\n", "            ", "if", "self", ".", "actor_critic", ".", "is_recurrent", ":", "\n", "                ", "data_generator", "=", "rollouts", ".", "recurrent_generator", "(", "\n", "advantages", ",", "self", ".", "num_mini_batch", ")", "\n", "", "else", ":", "\n", "                ", "data_generator", "=", "rollouts", ".", "feed_forward_generator", "(", "\n", "advantages", ",", "self", ".", "num_mini_batch", ")", "\n", "\n", "", "for", "sample", "in", "data_generator", ":", "\n", "                ", "obs_batch", ",", "recurrent_hidden_states_batch", ",", "actions_batch", ",", "value_preds_batch", ",", "return_batch", ",", "masks_batch", ",", "old_action_log_probs_batch", ",", "adv_targ", "=", "sample", "\n", "\n", "# Reshape to do in a single forward pass for all steps", "\n", "values", ",", "action_log_probs", ",", "dist_entropy", ",", "_", "=", "self", ".", "actor_critic", ".", "evaluate_actions", "(", "\n", "obs_batch", ",", "recurrent_hidden_states_batch", ",", "masks_batch", ",", "\n", "actions_batch", ")", "\n", "\n", "ratio", "=", "torch", ".", "exp", "(", "action_log_probs", "-", "\n", "old_action_log_probs_batch", ")", "\n", "surr1", "=", "ratio", "*", "adv_targ", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratio", ",", "1.0", "-", "self", ".", "clip_param", ",", "\n", "1.0", "+", "self", ".", "clip_param", ")", "*", "adv_targ", "\n", "action_loss", "=", "-", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "\n", "if", "self", ".", "use_clipped_value_loss", ":", "\n", "                    ", "value_pred_clipped", "=", "value_preds_batch", "+", "(", "values", "-", "value_preds_batch", ")", ".", "clamp", "(", "-", "self", ".", "clip_param", ",", "self", ".", "clip_param", ")", "\n", "value_losses", "=", "(", "values", "-", "return_batch", ")", ".", "pow", "(", "2", ")", "\n", "value_losses_clipped", "=", "(", "\n", "value_pred_clipped", "-", "return_batch", ")", ".", "pow", "(", "2", ")", "\n", "value_loss", "=", "0.5", "*", "torch", ".", "max", "(", "value_losses", ",", "\n", "value_losses_clipped", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "value_loss", "=", "0.5", "*", "(", "return_batch", "-", "values", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "value_loss", "*", "self", ".", "value_loss_coef", "+", "action_loss", "-", "\n", "dist_entropy", "*", "self", ".", "entropy_coef", ")", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "actor_critic", ".", "parameters", "(", ")", ",", "\n", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "value_loss_epoch", "+=", "value_loss", ".", "item", "(", ")", "\n", "action_loss_epoch", "+=", "action_loss", ".", "item", "(", ")", "\n", "dist_entropy_epoch", "+=", "dist_entropy", ".", "item", "(", ")", "\n", "\n", "", "", "num_updates", "=", "self", ".", "ppo_epoch", "*", "self", ".", "num_mini_batch", "\n", "\n", "value_loss_epoch", "/=", "num_updates", "\n", "action_loss_epoch", "/=", "num_updates", "\n", "dist_entropy_epoch", "/=", "num_updates", "\n", "\n", "return", "value_loss_epoch", ",", "action_loss_epoch", ",", "dist_entropy_epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valeriechen_ask-your-humans.gail_experts.convert_to_pytorch.main": [[10, 49], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.save", "h5py.File", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "os.path.splitext", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.valeriechen_ask-your-humans.games.crafting_based_games.BasicKnowledgeGame.save"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "'Converts expert trajectories from h5 to pt format.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--h5-file'", ",", "\n", "default", "=", "'trajs_halfcheetah.h5'", ",", "\n", "help", "=", "'input h5 file'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pt-file'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'output pt file, by default replaces file extension with pt'", ",", "\n", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "pt_file", "is", "None", ":", "\n", "        ", "args", ".", "pt_file", "=", "os", ".", "path", ".", "splitext", "(", "args", ".", "h5_file", ")", "[", "0", "]", "+", "'.pt'", "\n", "\n", "", "with", "h5py", ".", "File", "(", "args", ".", "h5_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "dataset_size", "=", "f", "[", "'obs_B_T_Do'", "]", ".", "shape", "[", "0", "]", "# full dataset size", "\n", "\n", "states", "=", "f", "[", "'obs_B_T_Do'", "]", "[", ":", "dataset_size", ",", "...", "]", "[", "...", "]", "\n", "actions", "=", "f", "[", "'a_B_T_Da'", "]", "[", ":", "dataset_size", ",", "...", "]", "[", "...", "]", "\n", "rewards", "=", "f", "[", "'r_B_T'", "]", "[", ":", "dataset_size", ",", "...", "]", "[", "...", "]", "\n", "lens", "=", "f", "[", "'len_B'", "]", "[", ":", "dataset_size", ",", "...", "]", "[", "...", "]", "\n", "\n", "states", "=", "torch", ".", "from_numpy", "(", "states", ")", ".", "float", "(", ")", "\n", "actions", "=", "torch", ".", "from_numpy", "(", "actions", ")", ".", "float", "(", ")", "\n", "rewards", "=", "torch", ".", "from_numpy", "(", "rewards", ")", ".", "float", "(", ")", "\n", "lens", "=", "torch", ".", "from_numpy", "(", "lens", ")", ".", "long", "(", ")", "\n", "\n", "", "data", "=", "{", "\n", "'states'", ":", "states", ",", "\n", "'actions'", ":", "actions", ",", "\n", "'rewards'", ":", "rewards", ",", "\n", "'lengths'", ":", "lens", "\n", "}", "\n", "\n", "torch", ".", "save", "(", "data", ",", "args", ".", "pt_file", ")", "\n", "\n"]]}