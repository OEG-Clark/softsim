{"home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.convert_bgr2rgb": [[14, 16], ["cv2.cvtColor"], "function", ["None"], ["def", "convert_bgr2rgb", "(", "img_bgr", ")", ":", "\n", "    ", "return", "cv2", ".", "cvtColor", "(", "img_bgr", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.convert_rgb2bgr": [[17, 19], ["cv2.cvtColor"], "function", ["None"], ["", "def", "convert_rgb2bgr", "(", "img_rgb", ")", ":", "\n", "    ", "return", "cv2", ".", "cvtColor", "(", "img_rgb", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.normalize_v": [[20, 41], ["len", "len", "Exception"], "function", ["None"], ["", "def", "normalize_v", "(", "v", ")", ":", "\n", "# normalization of velocities from whatever to [-1, 1] range", "\n", "    ", "v_x_range", "=", "[", "-", "1", ",", "7", "]", "\n", "v_y_range", "=", "[", "-", "3", ",", "3", "]", "\n", "v_z_range", "=", "[", "-", "3", ",", "3", "]", "\n", "v_yaw_range", "=", "[", "-", "1", ",", "1", "]", "\n", "if", "len", "(", "v", ".", "shape", ")", "==", "1", ":", "\n", "# means that it's a 1D vector of velocities", "\n", "        ", "v", "[", "0", "]", "=", "2.0", "*", "(", "v", "[", "0", "]", "-", "v_x_range", "[", "0", "]", ")", "/", "(", "v_x_range", "[", "1", "]", "-", "v_x_range", "[", "0", "]", ")", "-", "1.0", "\n", "v", "[", "1", "]", "=", "2.0", "*", "(", "v", "[", "1", "]", "-", "v_y_range", "[", "0", "]", ")", "/", "(", "v_y_range", "[", "1", "]", "-", "v_y_range", "[", "0", "]", ")", "-", "1.0", "\n", "v", "[", "2", "]", "=", "2.0", "*", "(", "v", "[", "2", "]", "-", "v_z_range", "[", "0", "]", ")", "/", "(", "v_z_range", "[", "1", "]", "-", "v_z_range", "[", "0", "]", ")", "-", "1.0", "\n", "v", "[", "3", "]", "=", "2.0", "*", "(", "v", "[", "3", "]", "-", "v_yaw_range", "[", "0", "]", ")", "/", "(", "v_yaw_range", "[", "1", "]", "-", "v_yaw_range", "[", "0", "]", ")", "-", "1.0", "\n", "", "elif", "len", "(", "v", ".", "shape", ")", "==", "2", ":", "\n", "# means that it's a 2D vector of velocities", "\n", "        ", "v", "[", ":", ",", "0", "]", "=", "2.0", "*", "(", "v", "[", ":", ",", "0", "]", "-", "v_x_range", "[", "0", "]", ")", "/", "(", "v_x_range", "[", "1", "]", "-", "v_x_range", "[", "0", "]", ")", "-", "1.0", "\n", "v", "[", ":", ",", "1", "]", "=", "2.0", "*", "(", "v", "[", ":", ",", "1", "]", "-", "v_y_range", "[", "0", "]", ")", "/", "(", "v_y_range", "[", "1", "]", "-", "v_y_range", "[", "0", "]", ")", "-", "1.0", "\n", "v", "[", ":", ",", "2", "]", "=", "2.0", "*", "(", "v", "[", ":", ",", "2", "]", "-", "v_z_range", "[", "0", "]", ")", "/", "(", "v_z_range", "[", "1", "]", "-", "v_z_range", "[", "0", "]", ")", "-", "1.0", "\n", "v", "[", ":", ",", "3", "]", "=", "2.0", "*", "(", "v", "[", ":", ",", "3", "]", "-", "v_yaw_range", "[", "0", "]", ")", "/", "(", "v_yaw_range", "[", "1", "]", "-", "v_yaw_range", "[", "0", "]", ")", "-", "1.0", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Error in data format of V shape: {}'", ".", "format", "(", "v", ".", "shape", ")", ")", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.de_normalize_v": [[42, 63], ["len", "len", "Exception"], "function", ["None"], ["", "def", "de_normalize_v", "(", "v", ")", ":", "\n", "# normalization of velocities from [-1, 1] range to whatever", "\n", "    ", "v_x_range", "=", "[", "-", "1", ",", "7", "]", "\n", "v_y_range", "=", "[", "-", "3", ",", "3", "]", "\n", "v_z_range", "=", "[", "-", "3", ",", "3", "]", "\n", "v_yaw_range", "=", "[", "-", "1", ",", "1", "]", "\n", "if", "len", "(", "v", ".", "shape", ")", "==", "1", ":", "\n", "# means that it's a 1D vector of velocities", "\n", "        ", "v", "[", "0", "]", "=", "(", "v", "[", "0", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "v_x_range", "[", "1", "]", "-", "v_x_range", "[", "0", "]", ")", "+", "v_x_range", "[", "0", "]", "\n", "v", "[", "1", "]", "=", "(", "v", "[", "1", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "v_y_range", "[", "1", "]", "-", "v_y_range", "[", "0", "]", ")", "+", "v_y_range", "[", "0", "]", "\n", "v", "[", "2", "]", "=", "(", "v", "[", "2", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "v_z_range", "[", "1", "]", "-", "v_z_range", "[", "0", "]", ")", "+", "v_z_range", "[", "0", "]", "\n", "v", "[", "3", "]", "=", "(", "v", "[", "3", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "v_yaw_range", "[", "1", "]", "-", "v_yaw_range", "[", "0", "]", ")", "+", "v_yaw_range", "[", "0", "]", "\n", "", "elif", "len", "(", "v", ".", "shape", ")", "==", "2", ":", "\n", "# means that it's a 2D vector of velocities", "\n", "        ", "v", "[", ":", ",", "0", "]", "=", "(", "v", "[", ":", ",", "0", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "v_x_range", "[", "1", "]", "-", "v_x_range", "[", "0", "]", ")", "+", "v_x_range", "[", "0", "]", "\n", "v", "[", ":", ",", "1", "]", "=", "(", "v", "[", ":", ",", "1", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "v_y_range", "[", "1", "]", "-", "v_y_range", "[", "0", "]", ")", "+", "v_y_range", "[", "0", "]", "\n", "v", "[", ":", ",", "2", "]", "=", "(", "v", "[", ":", ",", "2", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "v_z_range", "[", "1", "]", "-", "v_z_range", "[", "0", "]", ")", "+", "v_z_range", "[", "0", "]", "\n", "v", "[", ":", ",", "3", "]", "=", "(", "v", "[", ":", ",", "3", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "v_yaw_range", "[", "1", "]", "-", "v_yaw_range", "[", "0", "]", ")", "+", "v_yaw_range", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Error in data format of V shape: {}'", ".", "format", "(", "v", ".", "shape", ")", ")", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.normalize_gate": [[64, 88], ["len", "len", "Exception", "numpy.np.float32"], "function", ["None"], ["", "def", "normalize_gate", "(", "pose", ")", ":", "\n", "# normalization of velocities from whatever to [-1, 1] range", "\n", "    ", "r_range", "=", "[", "0.1", ",", "20", "]", "\n", "cam_fov", "=", "90", "*", "0.85", "# in degrees -- needs to be a bit smaller than 90 in fact because of cone vs. square", "\n", "alpha", "=", "cam_fov", "/", "180.0", "*", "np", ".", "pi", "/", "2.0", "# alpha is half of fov angle", "\n", "theta_range", "=", "[", "-", "alpha", ",", "alpha", "]", "\n", "psi_range", "=", "[", "np", ".", "pi", "/", "2", "-", "alpha", ",", "np", ".", "pi", "/", "2", "+", "alpha", "]", "\n", "eps", "=", "0.0", "\n", "phi_rel_range", "=", "[", "-", "np", ".", "pi", "+", "eps", ",", "0", "-", "eps", "]", "\n", "if", "len", "(", "pose", ".", "shape", ")", "==", "1", ":", "\n", "# means that it's a 1D vector of velocities", "\n", "        ", "pose", "[", "0", "]", "=", "2.0", "*", "(", "pose", "[", "0", "]", "-", "r_range", "[", "0", "]", ")", "/", "(", "r_range", "[", "1", "]", "-", "r_range", "[", "0", "]", ")", "-", "1.0", "\n", "pose", "[", "1", "]", "=", "2.0", "*", "(", "pose", "[", "1", "]", "-", "theta_range", "[", "0", "]", ")", "/", "(", "theta_range", "[", "1", "]", "-", "theta_range", "[", "0", "]", ")", "-", "1.0", "\n", "pose", "[", "2", "]", "=", "2.0", "*", "(", "pose", "[", "2", "]", "-", "psi_range", "[", "0", "]", ")", "/", "(", "psi_range", "[", "1", "]", "-", "psi_range", "[", "0", "]", ")", "-", "1.0", "\n", "pose", "[", "3", "]", "=", "2.0", "*", "(", "pose", "[", "3", "]", "-", "phi_rel_range", "[", "0", "]", ")", "/", "(", "phi_rel_range", "[", "1", "]", "-", "phi_rel_range", "[", "0", "]", ")", "-", "1.0", "\n", "", "elif", "len", "(", "pose", ".", "shape", ")", "==", "2", ":", "\n", "# means that it's a 2D vector of velocities", "\n", "        ", "pose", "[", ":", ",", "0", "]", "=", "2.0", "*", "(", "pose", "[", ":", ",", "0", "]", "-", "r_range", "[", "0", "]", ")", "/", "(", "r_range", "[", "1", "]", "-", "r_range", "[", "0", "]", ")", "-", "1.0", "\n", "pose", "[", ":", ",", "1", "]", "=", "2.0", "*", "(", "pose", "[", ":", ",", "1", "]", "-", "theta_range", "[", "0", "]", ")", "/", "(", "theta_range", "[", "1", "]", "-", "theta_range", "[", "0", "]", ")", "-", "1.0", "\n", "pose", "[", ":", ",", "2", "]", "=", "2.0", "*", "(", "pose", "[", ":", ",", "2", "]", "-", "psi_range", "[", "0", "]", ")", "/", "(", "psi_range", "[", "1", "]", "-", "psi_range", "[", "0", "]", ")", "-", "1.0", "\n", "pose", "[", ":", ",", "3", "]", "=", "2.0", "*", "(", "pose", "[", ":", ",", "3", "]", "-", "phi_rel_range", "[", "0", "]", ")", "/", "(", "phi_rel_range", "[", "1", "]", "-", "phi_rel_range", "[", "0", "]", ")", "-", "1.0", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Error in data format of V shape: {}'", ".", "format", "(", "pose", ".", "shape", ")", ")", "\n", "", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.de_normalize_gate": [[89, 113], ["len", "len", "Exception"], "function", ["None"], ["", "def", "de_normalize_gate", "(", "pose", ")", ":", "\n", "# normalization of velocities from [-1, 1] range to whatever", "\n", "    ", "r_range", "=", "[", "0.1", ",", "20", "]", "\n", "cam_fov", "=", "90", "*", "0.85", "# in degrees -- needs to be a bit smaller than 90 in fact because of cone vs. square", "\n", "alpha", "=", "cam_fov", "/", "180.0", "*", "np", ".", "pi", "/", "2.0", "# alpha is half of fov angle", "\n", "theta_range", "=", "[", "-", "alpha", ",", "alpha", "]", "\n", "psi_range", "=", "[", "np", ".", "pi", "/", "2", "-", "alpha", ",", "np", ".", "pi", "/", "2", "+", "alpha", "]", "\n", "eps", "=", "0.0", "\n", "phi_rel_range", "=", "[", "-", "np", ".", "pi", "+", "eps", ",", "0", "-", "eps", "]", "\n", "if", "len", "(", "pose", ".", "shape", ")", "==", "1", ":", "\n", "# means that it's a 1D vector of velocities", "\n", "        ", "pose", "[", "0", "]", "=", "(", "pose", "[", "0", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "r_range", "[", "1", "]", "-", "r_range", "[", "0", "]", ")", "+", "r_range", "[", "0", "]", "\n", "pose", "[", "1", "]", "=", "(", "pose", "[", "1", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "theta_range", "[", "1", "]", "-", "theta_range", "[", "0", "]", ")", "+", "theta_range", "[", "0", "]", "\n", "pose", "[", "2", "]", "=", "(", "pose", "[", "2", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "psi_range", "[", "1", "]", "-", "psi_range", "[", "0", "]", ")", "+", "psi_range", "[", "0", "]", "\n", "pose", "[", "3", "]", "=", "(", "pose", "[", "3", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "phi_rel_range", "[", "1", "]", "-", "phi_rel_range", "[", "0", "]", ")", "+", "phi_rel_range", "[", "0", "]", "\n", "", "elif", "len", "(", "pose", ".", "shape", ")", "==", "2", ":", "\n", "# means that it's a 2D vector of velocities", "\n", "        ", "pose", "[", ":", ",", "0", "]", "=", "(", "pose", "[", ":", ",", "0", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "r_range", "[", "1", "]", "-", "r_range", "[", "0", "]", ")", "+", "r_range", "[", "0", "]", "\n", "pose", "[", ":", ",", "1", "]", "=", "(", "pose", "[", ":", ",", "1", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "theta_range", "[", "1", "]", "-", "theta_range", "[", "0", "]", ")", "+", "theta_range", "[", "0", "]", "\n", "pose", "[", ":", ",", "2", "]", "=", "(", "pose", "[", ":", ",", "2", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "psi_range", "[", "1", "]", "-", "psi_range", "[", "0", "]", ")", "+", "psi_range", "[", "0", "]", "\n", "pose", "[", ":", ",", "3", "]", "=", "(", "pose", "[", ":", ",", "3", "]", "+", "1.0", ")", "/", "2.0", "*", "(", "phi_rel_range", "[", "1", "]", "-", "phi_rel_range", "[", "0", "]", ")", "+", "phi_rel_range", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Error in data format of V shape: {}'", ".", "format", "(", "pose", ".", "shape", ")", ")", "\n", "", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.read_images": [[114, 143], ["print", "glob.glob", "print", "glob.glob.sort", "print", "numpy.zeros().astype", "print", "print", "os.path.join", "os.path.join", "len", "cv2.imread", "cv2.resize", "numpy.zeros", "print"], "function", ["None"], ["", "def", "read_images", "(", "data_dir", ",", "res", ",", "max_size", "=", "None", ")", ":", "\n", "    ", "print", "(", "'Going to read image file list'", ")", "\n", "files_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'images/*.png'", ")", ")", "\n", "print", "(", "'Done. Starting sorting.'", ")", "\n", "files_list", ".", "sort", "(", ")", "# make sure we're reading the images in order later", "\n", "print", "(", "'Done. Before images_np init'", ")", "\n", "if", "max_size", "is", "not", "None", ":", "\n", "        ", "size_data", "=", "max_size", "\n", "", "else", ":", "\n", "        ", "size_data", "=", "len", "(", "files_list", ")", "\n", "", "images_np", "=", "np", ".", "zeros", "(", "(", "size_data", ",", "res", ",", "res", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "print", "(", "'Done. Going to read images.'", ")", "\n", "idx", "=", "0", "\n", "for", "img_name", "in", "files_list", ":", "\n", "# read data in BGR format by default!!!", "\n", "# notice that model is going to be trained in BGR", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "img_name", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "res", ",", "res", ")", ")", "\n", "im", "=", "im", "/", "255.0", "*", "2.0", "-", "1.0", "\n", "images_np", "[", "idx", ",", ":", "]", "=", "im", "\n", "if", "idx", "%", "10000", "==", "0", ":", "\n", "            ", "print", "(", "'image idx = {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "idx", "=", "idx", "+", "1", "\n", "if", "idx", "==", "size_data", ":", "\n", "# reached the last point -- exit loop of images", "\n", "            ", "break", "\n", "\n", "", "", "print", "(", "'Done reading {} images.'", ".", "format", "(", "images_np", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "images_np", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.create_dataset_csv": [[144, 199], ["print", "glob.glob", "print", "glob.glob.sort", "print", "numpy.zeros().astype", "print", "print", "numpy.loadtxt", "normalize_gate.astype", "print", "print", "print", "print", "print", "dataset_utils.normalize_gate", "sklearn.model_selection.train_test_split", "tensorflow.data.Dataset.from_tensor_slices().batch", "tensorflow.data.Dataset.from_tensor_slices().batch", "os.path.join", "os.path.join", "len", "cv2.imread", "cv2.resize", "Exception", "numpy.zeros", "print", "numpy.mean", "numpy.median", "numpy.std", "numpy.max", "numpy.min", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.normalize_gate"], ["", "def", "create_dataset_csv", "(", "data_dir", ",", "batch_size", ",", "res", ",", "max_size", "=", "None", ")", ":", "\n", "    ", "print", "(", "'Going to read file list'", ")", "\n", "files_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'images/*.png'", ")", ")", "\n", "print", "(", "'Done. Starting sorting.'", ")", "\n", "files_list", ".", "sort", "(", ")", "# make sure we're reading the images in order later", "\n", "print", "(", "'Done. Before images_np init'", ")", "\n", "if", "max_size", "is", "not", "None", ":", "\n", "        ", "size_data", "=", "max_size", "\n", "", "else", ":", "\n", "        ", "size_data", "=", "len", "(", "files_list", ")", "\n", "", "images_np", "=", "np", ".", "zeros", "(", "(", "size_data", ",", "res", ",", "res", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "print", "(", "'Done. Going to read images.'", ")", "\n", "idx", "=", "0", "\n", "for", "file", "in", "files_list", ":", "\n", "# read data in BGR format by default!!!", "\n", "# notice that model is going to be trained in BGR", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "file", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "res", ",", "res", ")", ")", "\n", "im", "=", "im", "/", "255.0", "*", "2.0", "-", "1.0", "\n", "images_np", "[", "idx", ",", ":", "]", "=", "im", "\n", "if", "idx", "%", "10000", "==", "0", ":", "\n", "            ", "print", "(", "'image idx = {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "idx", "=", "idx", "+", "1", "\n", "if", "idx", "==", "size_data", ":", "\n", "# reached the last point -- exit loop of images", "\n", "            ", "break", "\n", "\n", "", "", "print", "(", "'Going to read csv file.'", ")", "\n", "# prepare gate R THETA PSI PHI as np array reading from a file", "\n", "raw_table", "=", "np", ".", "loadtxt", "(", "data_dir", "+", "'/gate_training_data.csv'", ",", "delimiter", "=", "' '", ")", "\n", "raw_table", "=", "raw_table", "[", ":", "size_data", ",", ":", "]", "\n", "\n", "# sanity check", "\n", "if", "raw_table", ".", "shape", "[", "0", "]", "!=", "images_np", ".", "shape", "[", "0", "]", ":", "\n", "        ", "raise", "Exception", "(", "'Number of images ({}) different than number of entries in table ({}): '", ".", "format", "(", "images_np", ".", "shape", "[", "0", "]", ",", "raw_table", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "raw_table", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# print some useful statistics", "\n", "print", "(", "\"Average gate values: {}\"", ".", "format", "(", "np", ".", "mean", "(", "raw_table", ",", "axis", "=", "0", ")", ")", ")", "\n", "print", "(", "\"Median  gate values: {}\"", ".", "format", "(", "np", ".", "median", "(", "raw_table", ",", "axis", "=", "0", ")", ")", ")", "\n", "print", "(", "\"STD of  gate values: {}\"", ".", "format", "(", "np", ".", "std", "(", "raw_table", ",", "axis", "=", "0", ")", ")", ")", "\n", "print", "(", "\"Max of  gate values: {}\"", ".", "format", "(", "np", ".", "max", "(", "raw_table", ",", "axis", "=", "0", ")", ")", ")", "\n", "print", "(", "\"Min of  gate values: {}\"", ".", "format", "(", "np", ".", "min", "(", "raw_table", ",", "axis", "=", "0", ")", ")", ")", "\n", "\n", "# normalize distances to gate to [-1, 1] range", "\n", "raw_table", "=", "normalize_gate", "(", "raw_table", ")", "\n", "\n", "img_train", ",", "img_test", ",", "dist_train", ",", "dist_test", "=", "train_test_split", "(", "images_np", ",", "raw_table", ",", "test_size", "=", "0.1", ",", "random_state", "=", "42", ")", "\n", "\n", "# convert to tf format dataset and prepare batches", "\n", "ds_train", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "img_train", ",", "dist_train", ")", ")", ".", "batch", "(", "batch_size", ")", "\n", "ds_test", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "img_test", ",", "dist_test", ")", ")", ".", "batch", "(", "batch_size", ")", "\n", "\n", "return", "ds_train", ",", "ds_test", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.create_unsup_dataset_multiple_sources": [[200, 216], ["numpy.empty().astype", "print", "sklearn.model_selection.train_test_split", "tensorflow.data.Dataset.from_tensor_slices().batch", "tensorflow.data.Dataset.from_tensor_slices().batch", "dataset_utils.read_images", "numpy.concatenate", "numpy.empty", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.read_images"], ["", "def", "create_unsup_dataset_multiple_sources", "(", "data_dir_list", ",", "batch_size", ",", "res", ")", ":", "\n", "# load all the images in one single large dataset", "\n", "    ", "images_np", "=", "np", ".", "empty", "(", "(", "0", ",", "res", ",", "res", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "data_dir", "in", "data_dir_list", ":", "\n", "        ", "img_array", "=", "read_images", "(", "data_dir", ",", "res", ",", "max_size", "=", "None", ")", "\n", "images_np", "=", "np", ".", "concatenate", "(", "(", "images_np", ",", "img_array", ")", ",", "axis", "=", "0", ")", "\n", "# make fake distances to gate as -1", "\n", "", "num_items", "=", "images_np", ".", "shape", "[", "0", "]", "\n", "print", "(", "'Real_life dataset has {} images total'", ".", "format", "(", "num_items", ")", ")", "\n", "raw_table", "=", "(", "-", "1.0", "*", "np", ".", "ones", "(", "(", "num_items", ",", "4", ")", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# separate the actual dataset:", "\n", "img_train", ",", "img_test", ",", "dist_train", ",", "dist_test", "=", "train_test_split", "(", "images_np", ",", "raw_table", ",", "test_size", "=", "0.1", ",", "random_state", "=", "42", ")", "\n", "# convert to tf format dataset and prepare batches", "\n", "ds_train", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "img_train", ",", "dist_train", ")", ")", ".", "batch", "(", "batch_size", ")", "\n", "ds_test", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "img_test", ",", "dist_test", ")", ")", ".", "batch", "(", "batch_size", ")", "\n", "return", "ds_train", ",", "ds_test", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.create_test_dataset_csv": [[217, 254], ["print", "glob.glob", "print", "glob.glob.sort", "print", "numpy.zeros().astype", "print", "numpy.loadtxt", "np.loadtxt.astype", "print", "print", "print", "print", "print", "os.path.join", "os.path.join", "cv2.imread", "cv2.resize", "Exception", "numpy.zeros", "numpy.mean", "numpy.median", "numpy.std", "numpy.max", "numpy.min", "len"], "function", ["None"], ["", "def", "create_test_dataset_csv", "(", "data_dir", ",", "res", ",", "read_table", "=", "True", ")", ":", "\n", "# prepare image dataset from a folder", "\n", "    ", "print", "(", "'Going to read file list'", ")", "\n", "files_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'images/*.png'", ")", ")", "\n", "print", "(", "'Done. Starting sorting.'", ")", "\n", "files_list", ".", "sort", "(", ")", "# make sure we're reading the images in order later", "\n", "print", "(", "'Done. Before images_np init'", ")", "\n", "images_np", "=", "np", ".", "zeros", "(", "(", "len", "(", "files_list", ")", ",", "res", ",", "res", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "print", "(", "'After images_np init'", ")", "\n", "idx", "=", "0", "\n", "for", "file", "in", "files_list", ":", "\n", "# read data in BGR format by default!!!", "\n", "# notice that model was trained in BGR", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "file", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "res", ",", "res", ")", ")", "\n", "im", "=", "im", "/", "255.0", "*", "2.0", "-", "1.0", "\n", "images_np", "[", "idx", ",", ":", "]", "=", "im", "\n", "idx", "=", "idx", "+", "1", "\n", "\n", "", "if", "not", "read_table", ":", "\n", "        ", "return", "images_np", ",", "None", "\n", "\n", "# prepare gate R THETA PSI PHI as np array reading from a file", "\n", "", "raw_table", "=", "np", ".", "loadtxt", "(", "data_dir", "+", "'/gate_training_data.csv'", ",", "delimiter", "=", "' '", ")", "\n", "# sanity check", "\n", "if", "raw_table", ".", "shape", "[", "0", "]", "!=", "images_np", ".", "shape", "[", "0", "]", ":", "\n", "        ", "raise", "Exception", "(", "'Number of images ({}) different than number of entries in table ({}): '", ".", "format", "(", "images_np", ".", "shape", "[", "0", "]", ",", "raw_table", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "raw_table", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# print some useful statistics", "\n", "print", "(", "\"Average gate values: {}\"", ".", "format", "(", "np", ".", "mean", "(", "raw_table", ",", "axis", "=", "0", ")", ")", ")", "\n", "print", "(", "\"Median  gate values: {}\"", ".", "format", "(", "np", ".", "median", "(", "raw_table", ",", "axis", "=", "0", ")", ")", ")", "\n", "print", "(", "\"STD of  gate values: {}\"", ".", "format", "(", "np", ".", "std", "(", "raw_table", ",", "axis", "=", "0", ")", ")", ")", "\n", "print", "(", "\"Max of  gate values: {}\"", ".", "format", "(", "np", ".", "max", "(", "raw_table", ",", "axis", "=", "0", ")", ")", ")", "\n", "print", "(", "\"Min of  gate values: {}\"", ".", "format", "(", "np", ".", "min", "(", "raw_table", ",", "axis", "=", "0", ")", ")", ")", "\n", "\n", "return", "images_np", ",", "raw_table", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.create_dataset_txt": [[255, 304], ["numpy.loadtxt().astype", "len", "numpy.zeros().astype", "print", "print", "print", "print", "print", "print", "dataset_utils.normalize_v", "sklearn.model_selection.train_test_split", "open", "f.read().splitlines", "len", "Exception", "cv2.imread", "cv2.resize", "tensorflow.data.Dataset.from_tensor_slices().batch", "tensorflow.data.Dataset.from_tensor_slices().batch", "numpy.loadtxt", "numpy.zeros", "img_name.replace.replace", "print", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "f.read", "len", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.normalize_v"], ["", "def", "create_dataset_txt", "(", "data_dir", ",", "batch_size", ",", "res", ",", "data_mode", "=", "'train'", ",", "base_path", "=", "None", ")", ":", "\n", "    ", "vel_table", "=", "np", ".", "loadtxt", "(", "data_dir", "+", "'/proc_vel.txt'", ",", "delimiter", "=", "','", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "with", "open", "(", "data_dir", "+", "'/proc_images.txt'", ")", "as", "f", ":", "\n", "        ", "img_table", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "# sanity check", "\n", "", "if", "vel_table", ".", "shape", "[", "0", "]", "!=", "len", "(", "img_table", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Number of images ({}) different than number of entries in table ({}): '", ".", "format", "(", "len", "(", "img_table", ")", ",", "vel_table", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "size_data", "=", "len", "(", "img_table", ")", "\n", "images_np", "=", "np", ".", "zeros", "(", "(", "size_data", ",", "res", ",", "res", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "print", "(", "'Done. Going to read images.'", ")", "\n", "idx", "=", "0", "\n", "for", "img_name", "in", "img_table", ":", "\n", "        ", "if", "base_path", "is", "not", "None", ":", "\n", "            ", "img_name", "=", "img_name", ".", "replace", "(", "'/home/rb/data'", ",", "base_path", ")", "\n", "# read data in BGR format by default!!!", "\n", "# notice that model is going to be trained in BGR", "\n", "", "im", "=", "cv2", ".", "imread", "(", "img_name", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "res", ",", "res", ")", ")", "\n", "im", "=", "im", "/", "255.0", "*", "2.0", "-", "1.0", "\n", "images_np", "[", "idx", ",", ":", "]", "=", "im", "\n", "if", "idx", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'image idx = {} out of {} images'", ".", "format", "(", "idx", ",", "size_data", ")", ")", "\n", "", "idx", "=", "idx", "+", "1", "\n", "if", "idx", "==", "size_data", ":", "\n", "# reached the last point -- exit loop of images", "\n", "            ", "break", "\n", "\n", "# print some useful statistics and normalize distances", "\n", "", "", "print", "(", "\"Num samples: {}\"", ".", "format", "(", "vel_table", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "\"Average vx: {}\"", ".", "format", "(", "np", ".", "mean", "(", "vel_table", "[", ":", ",", "0", "]", ")", ")", ")", "\n", "print", "(", "\"Average vy: {}\"", ".", "format", "(", "np", ".", "mean", "(", "vel_table", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "print", "(", "\"Average vz: {}\"", ".", "format", "(", "np", ".", "mean", "(", "vel_table", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "print", "(", "\"Average vyaw: {}\"", ".", "format", "(", "np", ".", "mean", "(", "vel_table", "[", ":", ",", "3", "]", ")", ")", ")", "\n", "\n", "# normalize the values of velocities to the [-1, 1] range", "\n", "vel_table", "=", "normalize_v", "(", "vel_table", ")", "\n", "\n", "img_train", ",", "img_test", ",", "v_train", ",", "v_test", "=", "train_test_split", "(", "images_np", ",", "vel_table", ",", "test_size", "=", "0.1", ",", "random_state", "=", "42", ")", "\n", "\n", "if", "data_mode", "==", "'train'", ":", "\n", "# convert to tf format dataset and prepare batches", "\n", "        ", "ds_train", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "img_train", ",", "v_train", ")", ")", ".", "batch", "(", "batch_size", ")", "\n", "ds_test", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "img_test", ",", "v_test", ")", ")", ".", "batch", "(", "batch_size", ")", "\n", "return", "ds_train", ",", "ds_test", "\n", "", "elif", "data_mode", "==", "'test'", ":", "\n", "        ", "return", "img_test", ",", "v_test", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.create_dataset_multiple_sources": [[305, 322], ["numpy.empty().astype", "numpy.empty().astype", "sklearn.model_selection.train_test_split", "dataset_utils.create_dataset_txt", "numpy.concatenate", "numpy.concatenate", "tensorflow.data.Dataset.from_tensor_slices().batch", "tensorflow.data.Dataset.from_tensor_slices().batch", "numpy.empty", "numpy.empty", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.create_dataset_txt"], ["", "", "def", "create_dataset_multiple_sources", "(", "data_dir_list", ",", "batch_size", ",", "res", ",", "data_mode", "=", "'train'", ",", "base_path", "=", "None", ")", ":", "\n", "# load all the images and velocities in one single large dataset", "\n", "    ", "images_np", "=", "np", ".", "empty", "(", "(", "0", ",", "res", ",", "res", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "vel_table", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "data_dir", "in", "data_dir_list", ":", "\n", "        ", "img_array", ",", "v_array", "=", "create_dataset_txt", "(", "data_dir", ",", "batch_size", ",", "res", ",", "data_mode", "=", "'test'", ",", "base_path", "=", "base_path", ")", "\n", "images_np", "=", "np", ".", "concatenate", "(", "(", "images_np", ",", "img_array", ")", ",", "axis", "=", "0", ")", "\n", "vel_table", "=", "np", ".", "concatenate", "(", "(", "vel_table", ",", "v_array", ")", ",", "axis", "=", "0", ")", "\n", "# separate the actual dataset:", "\n", "", "img_train", ",", "img_test", ",", "v_train", ",", "v_test", "=", "train_test_split", "(", "images_np", ",", "vel_table", ",", "test_size", "=", "0.1", ",", "random_state", "=", "42", ")", "\n", "if", "data_mode", "==", "'train'", ":", "\n", "# convert to tf format dataset and prepare batches", "\n", "        ", "ds_train", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "img_train", ",", "v_train", ")", ")", ".", "batch", "(", "batch_size", ")", "\n", "ds_test", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "img_test", ",", "v_test", ")", ")", ".", "batch", "(", "batch_size", ")", "\n", "return", "ds_train", ",", "ds_test", "\n", "", "elif", "data_mode", "==", "'test'", ":", "\n", "        ", "return", "img_test", ",", "v_test", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.stats_utils.calculate_gate_stats": [[5, 53], ["numpy.mean", "numpy.mean", "print", "numpy.abs", "numpy.mean", "print", "print", "numpy.max", "print", "matplotlib.subplots", "axs[].hist", "axs[].hist", "axs[].hist", "axs[].hist", "range", "axs[].set_title", "axs[].set_title", "axs[].set_title", "axs[].set_title", "axs[].set_xlabel", "axs[].set_xlabel", "axs[].set_xlabel", "axs[].set_xlabel", "axs[].set_ylabel", "matplotlib.show", "print", "numpy.std", "numpy.sqrt", "numpy.ones", "len", "axs[].yaxis.set_major_formatter", "len", "matplotlib.ticker.PercentFormatter"], "function", ["None"], ["def", "calculate_gate_stats", "(", "predictions", ",", "poses", ")", ":", "\n", "# display averages", "\n", "    ", "mean_pred", "=", "np", ".", "mean", "(", "predictions", ",", "axis", "=", "0", ")", "\n", "mean_pose", "=", "np", ".", "mean", "(", "poses", ",", "axis", "=", "0", ")", "\n", "print", "(", "'Means (prediction, GT) : R({} , {}) Theta({} , {}) Psi({} , {}) Phi_rel({} , {})'", ".", "format", "(", "\n", "mean_pred", "[", "0", "]", ",", "mean_pose", "[", "0", "]", ",", "mean_pred", "[", "1", "]", ",", "mean_pose", "[", "1", "]", ",", "mean_pred", "[", "2", "]", ",", "mean_pose", "[", "2", "]", ",", "mean_pred", "[", "3", "]", ",", "mean_pose", "[", "3", "]", ")", ")", "\n", "# display mean absolute error", "\n", "abs_diff", "=", "np", ".", "abs", "(", "predictions", "-", "poses", ")", "\n", "mae", "=", "np", ".", "mean", "(", "abs_diff", ",", "axis", "=", "0", ")", "\n", "mae", "[", "1", ":", "]", "=", "mae", "[", "1", ":", "]", "*", "180", "/", "np", ".", "pi", "\n", "print", "(", "'MAE : R({}) Theta({}) Psi({}) Phi_rel({})'", ".", "format", "(", "mae", "[", "0", "]", ",", "mae", "[", "1", "]", ",", "mae", "[", "2", "]", ",", "mae", "[", "3", "]", ")", ")", "\n", "# display standard deviation of error", "\n", "std", "=", "np", ".", "std", "(", "abs_diff", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "abs_diff", ".", "shape", "[", "0", "]", ")", "\n", "std", "[", "1", ":", "]", "=", "std", "[", "1", ":", "]", "*", "180", "/", "np", ".", "pi", "\n", "print", "(", "'Standard error: R({}) Theta({}) Psi({}) Phi_rel({})'", ".", "format", "(", "std", "[", "0", "]", ",", "std", "[", "1", "]", ",", "std", "[", "2", "]", ",", "std", "[", "3", "]", ")", ")", "\n", "# display max errors", "\n", "max_diff", "=", "np", ".", "max", "(", "abs_diff", ",", "axis", "=", "0", ")", "\n", "print", "(", "'Max error : R({}) Theta({}) Psi({}) Phi_rel({})'", ".", "format", "(", "max_diff", "[", "0", "]", ",", "max_diff", "[", "1", "]", ",", "max_diff", "[", "2", "]", ",", "max_diff", "[", "3", "]", ")", ")", "\n", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "1", ",", "4", ",", "tight_layout", "=", "True", ")", "\n", "weights", "=", "np", ".", "ones", "(", "len", "(", "abs_diff", "[", ":", ",", "0", "]", ")", ")", "/", "len", "(", "abs_diff", "[", ":", ",", "0", "]", ")", "\n", "\n", "axs", "[", "0", "]", ".", "hist", "(", "abs_diff", "[", ":", ",", "0", "]", ",", "bins", "=", "30", ",", "range", "=", "(", "0", ",", "2.0", ")", ",", "weights", "=", "weights", ",", "density", "=", "False", ")", "\n", "axs", "[", "1", "]", ".", "hist", "(", "abs_diff", "[", ":", ",", "1", "]", "*", "180", "/", "np", ".", "pi", ",", "bins", "=", "30", ",", "range", "=", "(", "0", ",", "np", ".", "pi", "/", "20", "*", "180", "/", "np", ".", "pi", ")", ",", "weights", "=", "weights", ",", "density", "=", "False", ")", "\n", "axs", "[", "2", "]", ".", "hist", "(", "abs_diff", "[", ":", ",", "2", "]", "*", "180", "/", "np", ".", "pi", ",", "bins", "=", "30", ",", "range", "=", "(", "0", ",", "np", ".", "pi", "/", "20", "*", "180", "/", "np", ".", "pi", ")", ",", "weights", "=", "weights", ",", "density", "=", "False", ")", "\n", "axs", "[", "3", "]", ".", "hist", "(", "abs_diff", "[", ":", ",", "3", "]", "*", "180", "/", "np", ".", "pi", ",", "bins", "=", "50", ",", "range", "=", "(", "0", ",", "np", ".", "pi", "/", "4", "*", "180", "/", "np", ".", "pi", ")", ",", "weights", "=", "weights", ",", "density", "=", "False", ")", "\n", "\n", "for", "idx", "in", "range", "(", "4", ")", ":", "\n", "        ", "axs", "[", "idx", "]", ".", "yaxis", ".", "set_major_formatter", "(", "PercentFormatter", "(", "xmax", "=", "1", ")", ")", "\n", "\n", "", "axs", "[", "0", "]", ".", "set_title", "(", "r'$r$'", ")", "\n", "axs", "[", "1", "]", ".", "set_title", "(", "r'$\\theta$'", ")", "\n", "axs", "[", "2", "]", ".", "set_title", "(", "r'$\\phi$'", ")", "\n", "axs", "[", "3", "]", ".", "set_title", "(", "r'$\\psi$'", ")", "\n", "\n", "axs", "[", "0", "]", ".", "set_xlabel", "(", "'[m]'", ")", "\n", "axs", "[", "1", "]", ".", "set_xlabel", "(", "r'[deg]'", ")", "\n", "axs", "[", "2", "]", ".", "set_xlabel", "(", "r'[deg]'", ")", "\n", "axs", "[", "3", "]", ".", "set_xlabel", "(", "r'[deg]'", ")", "\n", "# axs[1].set_xlabel(r'[$^{\\circ}$]')", "\n", "# axs[2].set_xlabel(r'[$^{\\circ}$]')", "\n", "# axs[3].set_xlabel(r'[$^{\\circ}$]')", "\n", "\n", "axs", "[", "0", "]", ".", "set_ylabel", "(", "'Error Density'", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "print", "(", "'bla'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.stats_utils.calculate_v_stats": [[71, 96], ["numpy.mean", "numpy.mean", "print", "numpy.abs", "numpy.mean", "print", "numpy.max", "print", "matplotlib.title", "matplotlib.hist", "matplotlib.show", "matplotlib.title", "matplotlib.hist", "matplotlib.show", "matplotlib.title", "matplotlib.hist", "matplotlib.show", "matplotlib.title", "matplotlib.hist", "matplotlib.show", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace"], "function", ["None"], ["", "def", "calculate_v_stats", "(", "predictions", ",", "v_gt", ")", ":", "\n", "# display averages", "\n", "    ", "mean_pred", "=", "np", ".", "mean", "(", "predictions", ",", "axis", "=", "0", ")", "\n", "mean_v", "=", "np", ".", "mean", "(", "v_gt", ",", "axis", "=", "0", ")", "\n", "print", "(", "'Means (prediction, GT) : R({} , {}) Theta({} , {}) Psi({} , {}) Phi_rel({} , {})'", ".", "format", "(", "\n", "mean_pred", "[", "0", "]", ",", "mean_v", "[", "0", "]", ",", "mean_pred", "[", "1", "]", ",", "mean_v", "[", "1", "]", ",", "mean_pred", "[", "2", "]", ",", "mean_v", "[", "2", "]", ",", "mean_pred", "[", "3", "]", ",", "mean_v", "[", "3", "]", ")", ")", "\n", "# display mean absolute error", "\n", "abs_diff", "=", "np", ".", "abs", "(", "predictions", "-", "v_gt", ")", "\n", "mae", "=", "np", ".", "mean", "(", "abs_diff", ",", "axis", "=", "0", ")", "\n", "print", "(", "'Absolute errors : Vx({}) Vy({}) Vz({}) Vyaw({})'", ".", "format", "(", "mae", "[", "0", "]", ",", "mae", "[", "1", "]", ",", "mae", "[", "2", "]", ",", "mae", "[", "3", "]", ")", ")", "\n", "# display max errors", "\n", "max_diff", "=", "np", ".", "max", "(", "abs_diff", ",", "axis", "=", "0", ")", "\n", "print", "(", "'Max error : Vx({}) Vy({}) Vz({}) Vyaw({})'", ".", "format", "(", "max_diff", "[", "0", "]", ",", "max_diff", "[", "1", "]", ",", "max_diff", "[", "2", "]", ",", "max_diff", "[", "3", "]", ")", ")", "\n", "plt", ".", "title", "(", "\"Vx Absolute Error histogram\"", ")", "\n", "_", "=", "plt", ".", "hist", "(", "abs_diff", "[", ":", ",", "0", "]", ",", "np", ".", "linspace", "(", "0.0", ",", "10.0", ",", "num", "=", "1000", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "title", "(", "\"Vy Absolute Error histogram\"", ")", "\n", "_", "=", "plt", ".", "hist", "(", "abs_diff", "[", ":", ",", "1", "]", ",", "np", ".", "linspace", "(", "0.0", ",", "3", ",", "num", "=", "1000", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "title", "(", "\"Vz Absolute Error histogram\"", ")", "\n", "_", "=", "plt", ".", "hist", "(", "abs_diff", "[", ":", ",", "2", "]", ",", "np", ".", "linspace", "(", "0.0", ",", "3", ",", "num", "=", "1000", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "title", "(", "\"Vyaw Absolute Error histogram\"", ")", "\n", "_", "=", "plt", ".", "hist", "(", "abs_diff", "[", ":", ",", "3", "]", ",", "np", ".", "linspace", "(", "0.0", ",", "3", ",", "num", "=", "1000", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.MoveCheckeredGates": [[11, 16], ["sorted", "airsimdroneracingvae.types.Pose", "client.simListSceneObjects", "airsimdroneracingvae.types.Vector3r", "airsimdroneracingvae.types.Quaternionr", "client.simSetObjectPose"], "function", ["None"], ["def", "MoveCheckeredGates", "(", "client", ")", ":", "\n", "    ", "gate_names_sorted", "=", "sorted", "(", "client", ".", "simListSceneObjects", "(", "\"Gate.*\"", ")", ")", "\n", "pose_far", "=", "Pose", "(", "Vector3r", "(", "0", ",", "0", ",", "1", ")", ",", "Quaternionr", "(", ")", ")", "\n", "for", "gate", "in", "gate_names_sorted", ":", "\n", "        ", "client", ".", "simSetObjectPose", "(", "gate", ",", "pose_far", ")", "\n", "# time.sleep(0.05)", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.AllGatesDestroyer": [[18, 22], ["client.simListSceneObjects", "client.simDestroyObject", "time.sleep"], "function", ["None"], ["", "", "def", "AllGatesDestroyer", "(", "client", ")", ":", "\n", "    ", "for", "gate_object", "in", "client", ".", "simListSceneObjects", "(", "\".*[Gg]ate.*\"", ")", ":", "\n", "        ", "client", ".", "simDestroyObject", "(", "gate_object", ")", "\n", "time", ".", "sleep", "(", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.RedGateSpawner": [[23, 32], ["range", "airsimdroneracingvae.types.Pose", "client.simSpawnObject", "gate_poses.append", "time.sleep", "airsimdroneracingvae.types.Vector3r", "airsimdroneracingvae.types.Quaternionr", "numpy.random.random", "str"], "function", ["None"], ["", "", "def", "RedGateSpawner", "(", "client", ",", "num_gates", ",", "noise_amp", ")", ":", "\n", "    ", "gate_poses", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "num_gates", ")", ":", "\n", "        ", "noise", "=", "(", "np", ".", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "noise_amp", "\n", "pose", "=", "Pose", "(", "Vector3r", "(", "10", "+", "idx", "*", "9", ",", "noise", "*", "5.0", ",", "10.0", ")", ",", "Quaternionr", "(", "0.0", ",", "0.0", ",", "0.707", ",", "0.707", ")", ")", "\n", "client", ".", "simSpawnObject", "(", "\"gate_\"", "+", "str", "(", "idx", ")", ",", "\"RedGate16x16\"", ",", "pose", ",", "1.5", ")", "\n", "gate_poses", ".", "append", "(", "pose", ")", "\n", "time", ".", "sleep", "(", "0.05", ")", "\n", "", "return", "gate_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.RedGateSpawnerCircle": [[33, 39], ["trajectory_utils.generate_gate_poses", "range", "client.simSpawnObject", "time.sleep", "str"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.generate_gate_poses"], ["", "def", "RedGateSpawnerCircle", "(", "client", ",", "num_gates", ",", "radius", ",", "radius_noise", ",", "height_range", ",", "track_offset", "=", "[", "0", ",", "0", ",", "0", "]", ")", ":", "\n", "    ", "track", "=", "generate_gate_poses", "(", "num_gates", "=", "num_gates", ",", "race_course_radius", "=", "radius", ",", "radius_noise", "=", "radius_noise", ",", "height_range", "=", "height_range", ",", "direction", "=", "0", ",", "offset", "=", "track_offset", ")", "\n", "for", "idx", "in", "range", "(", "num_gates", ")", ":", "\n", "# client.simSpawnObject(\"gate_\" + str(idx), \"RedGate16x16\", track[idx], 1.5)", "\n", "        ", "client", ".", "simSpawnObject", "(", "\"gate_\"", "+", "str", "(", "idx", ")", ",", "\"RedGate16x16\"", ",", "track", "[", "idx", "]", ",", "0.75", ")", "\n", "time", ".", "sleep", "(", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.RedGateSpawnerTrack": [[40, 56], ["trajectory_utils.generate_gate_poses", "trajectory_utils.generate_gate_poses", "range", "range", "sum", "sum", "zip", "zip", "client.simSpawnObject", "time.sleep", "client.simSpawnObject", "time.sleep", "str", "str"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.generate_gate_poses", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.generate_gate_poses"], ["", "", "def", "RedGateSpawnerTrack", "(", "client", ",", "num_gates", ",", "radius", ",", "radius_noise", ",", "height_range", ",", "num_ignore", "=", "0", ",", "track_offset", "=", "[", "0", ",", "0", ",", "0", "]", ")", ":", "\n", "    ", "offset_0", "=", "[", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "track_offset", ",", "[", "radius", ",", "0", ",", "0", "]", ")", "]", "\n", "track_0", "=", "generate_gate_poses", "(", "num_gates", "=", "num_gates", ",", "race_course_radius", "=", "radius", ",", "radius_noise", "=", "radius_noise", ",", "height_range", "=", "height_range", ",", "direction", "=", "0", ",", "offset", "=", "offset_0", ")", "\n", "offset_1", "=", "[", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "track_offset", ",", "[", "-", "radius", ",", "0", ",", "0", "]", ")", "]", "\n", "track_1", "=", "generate_gate_poses", "(", "num_gates", "=", "num_gates", ",", "race_course_radius", "=", "radius", ",", "radius_noise", "=", "radius_noise", ",", "\n", "height_range", "=", "height_range", ",", "direction", "=", "0", ",", "offset", "=", "offset_1", ")", "\n", "list_to_ignore_0", "=", "[", "0", ",", "1", ",", "7", "]", "\n", "for", "idx", "in", "range", "(", "num_gates", ")", ":", "\n", "        ", "if", "idx", "not", "in", "list_to_ignore_0", ":", "\n", "            ", "client", ".", "simSpawnObject", "(", "\"gate_\"", "+", "str", "(", "idx", ")", "+", "\"track_0\"", ",", "\"RedGate16x16\"", ",", "track_0", "[", "idx", "]", ",", "0.75", ")", "\n", "time", ".", "sleep", "(", "0.05", ")", "\n", "", "", "list_to_ignore_1", "=", "[", "3", ",", "4", ",", "5", "]", "\n", "for", "idx", "in", "range", "(", "num_gates", ")", ":", "\n", "        ", "if", "idx", "not", "in", "list_to_ignore_1", ":", "\n", "            ", "client", ".", "simSpawnObject", "(", "\"gate_\"", "+", "str", "(", "idx", ")", "+", "\"track_1\"", ",", "\"RedGate16x16\"", ",", "track_1", "[", "idx", "]", ",", "0.75", ")", "\n", "time", ".", "sleep", "(", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.generate_gate_poses": [[57, 68], ["tuple", "airsimdroneracingvae.Pose", "airsimdroneracingvae.Pose", "trajectory_utils.generate_circle", "airsimdroneracingvae.Vector3r", "airsimdroneracingvae.Vector3r", "trajectory_utils.quaternionFromUnitGradient", "range", "range", "random.uniform"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.generate_circle", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.quaternionFromUnitGradient"], ["", "", "", "def", "generate_gate_poses", "(", "num_gates", ",", "race_course_radius", ",", "radius_noise", ",", "height_range", ",", "direction", ",", "offset", "=", "[", "0", ",", "0", ",", "0", "]", ",", "type_of_segment", "=", "\"circle\"", ")", ":", "\n", "    ", "if", "type_of_segment", "==", "\"circle\"", ":", "\n", "        ", "(", "x_t", ",", "y_t", ",", "z_t", ")", "=", "tuple", "(", "[", "generate_circle", "(", "i", ",", "num_gates", ",", "race_course_radius", ",", "radius_noise", ",", "direction", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "# airsimdroneracingvae.Vector3r((x_t[t_i][0] - x_t[0][0]), (y_t[t_i][0] - y_t[0][0]), random.uniform(height_range[0], height_range[1])), \\", "\n", "gate_poses", "=", "[", "airsimdroneracingvae", ".", "Pose", "(", "airsimdroneracingvae", ".", "Vector3r", "(", "(", "x_t", "[", "t_i", "]", "[", "0", "]", "+", "offset", "[", "0", "]", ")", ",", "\n", "(", "y_t", "[", "t_i", "]", "[", "0", "]", "+", "offset", "[", "1", "]", ")", ",", "\n", "random", ".", "uniform", "(", "height_range", "[", "0", "]", ",", "height_range", "[", "1", "]", ")", "+", "offset", "[", "2", "]", ")", ",", "\n", "quaternionFromUnitGradient", "(", "x_t", "[", "t_i", "]", "[", "1", "]", ",", "y_t", "[", "t_i", "]", "[", "1", "]", ",", "z_t", "[", "t_i", "]", "[", "1", "]", ")", ")", "\n", "for", "t_i", "in", "range", "(", "num_gates", ")", "]", "\n", "# elif type_of_segment == \"cubic\":", "\n", "", "return", "gate_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.quaternionFromUnitGradient": [[69, 88], ["airsimdroneracingvae.Quaternionr", "airsimdroneracingvae.Quaternionr", "airsimdroneracingvae.Quaternionr.get_length", "type", "dict", "math.sqrt"], "function", ["None"], ["", "def", "quaternionFromUnitGradient", "(", "dx_dt", ",", "dy_dt", ",", "dz_dt", ")", ":", "\n", "    ", "default_gate_facing_vector", "=", "type", "(", "\"\"", ",", "(", ")", ",", "dict", "(", "x", "=", "0", ",", "y", "=", "1", ",", "z", "=", "0", ")", ")", "(", ")", "\n", "r0", "=", "default_gate_facing_vector", "\n", "q", "=", "airsimdroneracingvae", ".", "Quaternionr", "(", "\n", "r0", ".", "y", "*", "dz_dt", "-", "r0", ".", "z", "*", "dy_dt", ",", "\n", "r0", ".", "z", "*", "dx_dt", "-", "r0", ".", "x", "*", "dz_dt", ",", "\n", "r0", ".", "x", "*", "dy_dt", "-", "r0", ".", "y", "*", "dx_dt", ",", "\n", "math", ".", "sqrt", "(", "(", "r0", ".", "x", "**", "2", "+", "r0", ".", "y", "**", "2", "+", "r0", ".", "z", "**", "2", ")", "*", "(", "dx_dt", "**", "2", "+", "dy_dt", "**", "2", "+", "dz_dt", "**", "2", ")", ")", "+", "(", "r0", ".", "x", "*", "dx_dt", "+", "r0", ".", "y", "*", "dy_dt", "+", "r0", ".", "z", "*", "dz_dt", ")", "\n", ")", "\n", "# Normalize", "\n", "length", "=", "q", ".", "get_length", "(", ")", "\n", "if", "(", "length", "==", "0.0", ")", ":", "\n", "        ", "q", ".", "w_val", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "q", ".", "w_val", "/=", "length", "\n", "q", ".", "x_val", "/=", "length", "\n", "q", ".", "y_val", "/=", "length", "\n", "q", ".", "z_val", "/=", "length", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.generate_circle": [[89, 128], ["list", "random.uniform", "enumerate", "zip", "range", "enumerate", "enumerate", "numpy.clip", "numpy.clip", "math.cos", "math.sin", "numpy.clip", "numpy.clip", "math.sin", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin"], "function", ["None"], ["", "def", "generate_circle", "(", "i", ",", "num_gates", ",", "race_course_radius", ",", "radius_amp", ",", "direction", ")", ":", "\n", "    ", "ts", "=", "[", "t", "/", "(", "num_gates", ")", "for", "t", "in", "range", "(", "0", ",", "num_gates", ")", "]", "\n", "samples", "=", "[", "0", "for", "t", "in", "ts", "]", "\n", "derivatives", "=", "[", "0", "for", "t", "in", "ts", "]", "\n", "min_radius", "=", "race_course_radius", "+", "radius_amp", "\n", "max_radius", "=", "race_course_radius", "-", "radius_amp", "\n", "max_radius_delta", "=", "5.0", "\n", "radius_list", "=", "[", "random", ".", "uniform", "(", "min_radius", ",", "max_radius", ")", "for", "t", "in", "ts", "]", "\n", "# not a circle, but hey it's random-ish. and the wrong derivative actually make the track challenging", "\n", "# come back again later.", "\n", "if", "i", "==", "0", ":", "\n", "        ", "for", "(", "idx", ",", "t", ")", "in", "enumerate", "(", "ts", ")", ":", "\n", "            ", "radius", "=", "radius_list", "[", "idx", "]", "\n", "if", "idx", ">", "0", ":", "\n", "                ", "radius", "=", "np", ".", "clip", "(", "radius", ",", "radius_list", "[", "idx", "-", "1", "]", "-", "max_radius_delta", ",", "radius_list", "[", "idx", "-", "1", "]", "+", "max_radius_delta", ")", "\n", "radius", "=", "np", ".", "clip", "(", "radius", ",", "0.0", ",", "radius", ")", "\n", "", "if", "direction", "==", "0", ":", "\n", "                ", "samples", "[", "idx", "]", "=", "radius", "*", "math", ".", "cos", "(", "2.", "*", "math", ".", "pi", "*", "t", ")", "\n", "derivatives", "[", "idx", "]", "=", "radius", "*", "-", "math", ".", "sin", "(", "2.", "*", "math", ".", "pi", "*", "t", ")", "\n", "", "else", ":", "\n", "                ", "samples", "[", "idx", "]", "=", "radius", "*", "math", ".", "sin", "(", "2.", "*", "math", ".", "pi", "*", "t", ")", "\n", "derivatives", "[", "idx", "]", "=", "radius", "*", "-", "math", ".", "cos", "(", "2.", "*", "math", ".", "pi", "*", "t", ")", "\n", "", "", "", "elif", "i", "==", "1", ":", "\n", "        ", "for", "(", "idx", ",", "t", ")", "in", "enumerate", "(", "ts", ")", ":", "\n", "            ", "radius", "=", "radius_list", "[", "idx", "]", "\n", "if", "idx", ">", "0", ":", "\n", "                ", "radius", "=", "np", ".", "clip", "(", "radius", ",", "radius_list", "[", "idx", "-", "1", "]", "-", "max_radius_delta", ",", "radius_list", "[", "idx", "-", "1", "]", "+", "max_radius_delta", ")", "\n", "radius", "=", "np", ".", "clip", "(", "radius", ",", "0.0", ",", "radius", ")", "\n", "", "if", "direction", "==", "0", ":", "\n", "                ", "samples", "[", "idx", "]", "=", "radius", "*", "math", ".", "sin", "(", "2.", "*", "math", ".", "pi", "*", "t", ")", "\n", "derivatives", "[", "idx", "]", "=", "radius", "*", "math", ".", "cos", "(", "2.", "*", "math", ".", "pi", "*", "t", ")", "\n", "", "else", ":", "\n", "                ", "samples", "[", "idx", "]", "=", "radius", "*", "math", ".", "cos", "(", "2.", "*", "math", ".", "pi", "*", "t", ")", "\n", "derivatives", "[", "idx", "]", "=", "radius", "*", "math", ".", "sin", "(", "2.", "*", "math", ".", "pi", "*", "t", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "(", "idx", ",", "t", ")", "in", "enumerate", "(", "ts", ")", ":", "\n", "            ", "samples", "[", "idx", "]", "=", "0.", "\n", "derivatives", "[", "idx", "]", "=", "0.", "\n", "", "", "return", "list", "(", "zip", "(", "samples", ",", "derivatives", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.interp_vector": [[9, 16], ["range", "numpy.asarray", "list_vecs.append"], "function", ["None"], ["def", "interp_vector", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "delta", "=", "(", "b", "-", "a", ")", "/", "(", "n", "-", "1", ")", "\n", "list_vecs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "new_vec", "=", "a", "+", "delta", "*", "i", "\n", "list_vecs", ".", "append", "(", "new_vec", ")", "\n", "", "return", "np", ".", "asarray", "(", "list_vecs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomQuadPose": [[17, 29], ["geom_utils.randomSample", "geom_utils.randomSample", "geom_utils.randomSample", "geom_utils.randomSample", "geom_utils.randomSample", "geom_utils.randomSample", "scipy.spatial.transform.Rotation.from_euler", "q.as_quat.as_quat", "airsimdroneracingvae.types.Vector3r", "airsimdroneracingvae.types.Quaternionr", "airsimdroneracingvae.types.Pose"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomSample", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomSample", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomSample", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomSample", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomSample", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomSample"], ["", "def", "randomQuadPose", "(", "x_range", ",", "y_range", ",", "z_range", ",", "yaw_range", ",", "pitch_range", ",", "roll_range", ")", ":", "\n", "    ", "x", "=", "randomSample", "(", "x_range", ")", "\n", "y", "=", "randomSample", "(", "y_range", ")", "\n", "z", "=", "randomSample", "(", "z_range", ")", "\n", "yaw", "=", "randomSample", "(", "yaw_range", ")", "\n", "pitch", "=", "randomSample", "(", "pitch_range", ")", "\n", "roll", "=", "randomSample", "(", "roll_range", ")", "\n", "q", "=", "Rotation", ".", "from_euler", "(", "'ZYX'", ",", "[", "yaw", ",", "pitch", ",", "roll", "]", ")", "# capital letters denote intrinsic rotation (lower case would be extrinsic)", "\n", "q", "=", "q", ".", "as_quat", "(", ")", "\n", "t_o_b", "=", "Vector3r", "(", "x", ",", "y", ",", "z", ")", "\n", "q_o_b", "=", "Quaternionr", "(", "q", "[", "0", "]", ",", "q", "[", "1", "]", ",", "q", "[", "2", "]", ",", "q", "[", "3", "]", ")", "\n", "return", "Pose", "(", "t_o_b", ",", "q_o_b", ")", ",", "yaw", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomSample": [[30, 32], ["numpy.random.random"], "function", ["None"], ["", "def", "randomSample", "(", "value_range", ")", ":", "\n", "    ", "return", "(", "value_range", "[", "1", "]", "-", "value_range", "[", "0", "]", ")", "*", "np", ".", "random", ".", "random", "(", ")", "+", "value_range", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomGatePose": [[33, 70], ["geom_utils.randomSample", "geom_utils.randomSample", "numpy.arctan", "geom_utils.polarTranslation", "geom_utils.convert_t_body_2_world", "geom_utils.randomSample", "geom_utils.get_yaw_base", "scipy.spatial.transform.Rotation.from_euler", "Rotation.from_euler.as_quat", "airsimdroneracingvae.types.Pose", "numpy.cos", "geom_utils.randomSample", "airsimdroneracingvae.types.Quaternionr", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomSample", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomSample", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.polarTranslation", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.convert_t_body_2_world", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomSample", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.get_yaw_base", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomSample"], ["", "def", "randomGatePose", "(", "p_o_b", ",", "phi_base", ",", "r_range", ",", "cam_fov", ",", "correction", ")", ":", "\n", "    ", "gate_ok", "=", "False", "\n", "while", "not", "gate_ok", ":", "\n", "# create translation of gate", "\n", "        ", "r", "=", "randomSample", "(", "r_range", ")", "\n", "alpha", "=", "cam_fov", "/", "180.0", "*", "np", ".", "pi", "/", "2.0", "# alpha is half of fov angle", "\n", "theta_range", "=", "[", "-", "alpha", ",", "alpha", "]", "\n", "theta", "=", "randomSample", "(", "theta_range", ")", "\n", "# need to make projection on geodesic curve! not equal FOV in theta and psi", "\n", "alpha_prime", "=", "np", ".", "arctan", "(", "np", ".", "cos", "(", "np", ".", "abs", "(", "theta", ")", ")", ")", "\n", "psi_range", "=", "[", "-", "alpha_prime", ",", "alpha_prime", "]", "\n", "psi_range", "=", "[", "x", "*", "correction", "for", "x", "in", "psi_range", "]", "\n", "psi", "=", "randomSample", "(", "psi_range", ")", "+", "np", ".", "pi", "/", "2.0", "\n", "# get relative vector in the base frame coordinates", "\n", "t_b_g_body", "=", "polarTranslation", "(", "r", ",", "theta", ",", "psi", ")", "\n", "\n", "# transform relative vector from base frame to the world frame", "\n", "t_b_g", "=", "convert_t_body_2_world", "(", "t_b_g_body", ",", "p_o_b", ".", "orientation", ")", "\n", "\n", "# get the gate coord in world coordinates from origin", "\n", "t_o_g", "=", "p_o_b", ".", "position", "+", "t_b_g", "\n", "\n", "# check if gate is at least half outside the ground", "\n", "if", "t_o_g", ".", "z_val", ">=", "0.0", ":", "\n", "            ", "continue", "\n", "\n", "# create rotation of gate", "\n", "", "eps", "=", "0", "# np.pi/15.0", "\n", "phi_rel_range", "=", "[", "-", "np", ".", "pi", "+", "eps", ",", "0", "-", "eps", "]", "\n", "phi_rel", "=", "randomSample", "(", "phi_rel_range", ")", "\n", "phi_quad_ref", "=", "get_yaw_base", "(", "p_o_b", ")", "\n", "phi_gate", "=", "phi_quad_ref", "+", "phi_rel", "\n", "rot_gate", "=", "Rotation", ".", "from_euler", "(", "'ZYX'", ",", "[", "phi_gate", ",", "0", ",", "0", "]", ")", "\n", "q", "=", "rot_gate", ".", "as_quat", "(", ")", "\n", "p_o_g", "=", "Pose", "(", "t_o_g", ",", "Quaternionr", "(", "q", "[", "0", "]", ",", "q", "[", "1", "]", ",", "q", "[", "2", "]", ",", "q", "[", "3", "]", ")", ")", "\n", "\n", "return", "p_o_g", ",", "r", ",", "theta", ",", "psi", ",", "phi_rel", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.debugRelativeOrientation": [[71, 78], ["geom_utils.get_yaw_base", "scipy.spatial.transform.Rotation.from_euler", "Rotation.from_euler.as_quat", "airsimdroneracingvae.types.Pose", "airsimdroneracingvae.types.Quaternionr"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.get_yaw_base"], ["", "", "def", "debugRelativeOrientation", "(", "p_o_b", ",", "p_o_g", ",", "phi_rel", ")", ":", "\n", "    ", "phi_quad_ref", "=", "get_yaw_base", "(", "p_o_b", ")", "\n", "phi_gate", "=", "phi_quad_ref", "+", "phi_rel", "\n", "rot_gate", "=", "Rotation", ".", "from_euler", "(", "'ZYX'", ",", "[", "phi_gate", ",", "0", ",", "0", "]", ")", "\n", "q", "=", "rot_gate", ".", "as_quat", "(", ")", "\n", "p_o_g", "=", "Pose", "(", "p_o_g", ".", "position", ",", "Quaternionr", "(", "q", "[", "0", "]", ",", "q", "[", "1", "]", ",", "q", "[", "2", "]", ",", "q", "[", "3", "]", ")", ")", "\n", "return", "p_o_g", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.debugGatePoses": [[79, 95], ["geom_utils.polarTranslation", "geom_utils.convert_t_body_2_world", "numpy.arctan2", "scipy.spatial.transform.Rotation.from_euler", "Rotation.from_euler.as_quat", "airsimdroneracingvae.types.Pose", "airsimdroneracingvae.types.Quaternionr"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.polarTranslation", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.convert_t_body_2_world"], ["", "def", "debugGatePoses", "(", "p_o_b", ",", "r", ",", "theta", ",", "psi", ")", ":", "\n", "# get relative vector in the base frame coordinates", "\n", "    ", "t_b_g_body", "=", "polarTranslation", "(", "r", ",", "theta", ",", "psi", ")", "\n", "# transform relative vector from base frame to the world frame", "\n", "t_b_g", "=", "convert_t_body_2_world", "(", "t_b_g_body", ",", "p_o_b", ".", "orientation", ")", "\n", "# get the gate coord in world coordinates from origin", "\n", "t_o_g", "=", "p_o_b", ".", "position", "+", "t_b_g", "\n", "# check if gate is at least half outside the ground", "\n", "# create rotation of gate", "\n", "phi_quad_ref", "=", "np", ".", "arctan2", "(", "p_o_b", ".", "position", ".", "y_val", ",", "p_o_b", ".", "position", ".", "x_val", ")", "\n", "phi_rel", "=", "np", ".", "pi", "/", "2", "\n", "phi_gate", "=", "phi_quad_ref", "+", "phi_rel", "\n", "rot_gate", "=", "Rotation", ".", "from_euler", "(", "'ZYX'", ",", "[", "phi_gate", ",", "0", ",", "0", "]", ")", "\n", "q", "=", "rot_gate", ".", "as_quat", "(", ")", "\n", "p_o_g", "=", "Pose", "(", "t_o_g", ",", "Quaternionr", "(", "q", "[", "0", "]", ",", "q", "[", "1", "]", ",", "q", "[", "2", "]", ",", "q", "[", "3", "]", ")", ")", "\n", "return", "p_o_g", ",", "r", ",", "theta", ",", "psi", ",", "phi_rel", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.polarTranslation": [[96, 105], ["airsimdroneracingvae.types.Vector3r", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "polarTranslation", "(", "r", ",", "theta", ",", "psi", ")", ":", "\n", "# follow math convention for polar coordinates", "\n", "# r: radius", "\n", "# theta: azimuth (horizontal)", "\n", "# psi: vertical", "\n", "    ", "x", "=", "r", "*", "np", ".", "cos", "(", "theta", ")", "*", "np", ".", "sin", "(", "psi", ")", "\n", "y", "=", "r", "*", "np", ".", "sin", "(", "theta", ")", "*", "np", ".", "sin", "(", "psi", ")", "\n", "z", "=", "r", "*", "np", ".", "cos", "(", "psi", ")", "\n", "return", "Vector3r", "(", "x", ",", "y", ",", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.convert_t_body_2_world": [[106, 112], ["scipy.spatial.transform.Rotation.from_quat", "Rotation.from_quat.apply", "airsimdroneracingvae.types.Vector3r"], "function", ["None"], ["", "def", "convert_t_body_2_world", "(", "t_body", ",", "q_o_b", ")", ":", "\n", "    ", "rotation", "=", "Rotation", ".", "from_quat", "(", "[", "q_o_b", ".", "x_val", ",", "q_o_b", ".", "y_val", ",", "q_o_b", ".", "z_val", ",", "q_o_b", ".", "w_val", "]", ")", "\n", "t_body_np", "=", "[", "t_body", ".", "x_val", ",", "t_body", ".", "y_val", ",", "t_body", ".", "z_val", "]", "\n", "t_world_np", "=", "rotation", ".", "apply", "(", "t_body_np", ")", "\n", "t_world", "=", "Vector3r", "(", "t_world_np", "[", "0", "]", ",", "t_world_np", "[", "1", "]", ",", "t_world_np", "[", "2", "]", ")", "\n", "return", "t_world", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.get_yaw_base": [[113, 118], ["scipy.spatial.transform.Rotation.from_quat", "Rotation.from_quat.as_euler"], "function", ["None"], ["", "def", "get_yaw_base", "(", "p_o_b", ")", ":", "\n", "    ", "q_o_b", "=", "p_o_b", ".", "orientation", "\n", "rotation", "=", "Rotation", ".", "from_quat", "(", "[", "q_o_b", ".", "x_val", ",", "q_o_b", ".", "y_val", ",", "q_o_b", ".", "z_val", ",", "q_o_b", ".", "w_val", "]", ")", "\n", "euler_angles", "=", "rotation", ".", "as_euler", "(", "'ZYX'", ")", "\n", "return", "euler_angles", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.get_gate_facing_vector_from_quaternion": [[121, 142], ["numpy.array", "numpy.dot", "math.sqrt", "numpy.outer", "numpy.array", "airsimdroneracingvae.Vector3r", "airsimdroneracingvae.Vector3r", "numpy.finfo", "airsimdroneracingvae.Vector3r", "airsimdroneracingvae.Vector3r"], "function", ["None"], ["", "def", "get_gate_facing_vector_from_quaternion", "(", "airsim_quat", ",", "direction", ",", "scale", "=", "1.0", ",", ")", ":", "\n", "# convert gate quaternion to rotation matrix. ", "\n", "# ref: https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion; https://www.lfd.uci.edu/~gohlke/code/transformations.py.html", "\n", "    ", "q", "=", "np", ".", "array", "(", "[", "airsim_quat", ".", "w_val", ",", "airsim_quat", ".", "x_val", ",", "airsim_quat", ".", "y_val", ",", "airsim_quat", ".", "z_val", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "n", "=", "np", ".", "dot", "(", "q", ",", "q", ")", "\n", "if", "n", "<", "np", ".", "finfo", "(", "float", ")", ".", "eps", ":", "\n", "        ", "if", "direction", "==", "0", ":", "\n", "            ", "return", "airsimdroneracingvae", ".", "Vector3r", "(", "0.0", ",", "1.0", ",", "0.0", ")", "\n", "", "else", ":", "\n", "            ", "return", "airsimdroneracingvae", ".", "Vector3r", "(", "0.0", ",", "-", "1.0", ",", "0.0", ")", "\n", "\n", "", "", "q", "*=", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", "\n", "q", "=", "np", ".", "outer", "(", "q", ",", "q", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "1.0", "-", "q", "[", "2", ",", "2", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "1", ",", "2", "]", "-", "q", "[", "3", ",", "0", "]", ",", "q", "[", "1", ",", "3", "]", "+", "q", "[", "2", ",", "0", "]", "]", ",", "\n", "[", "q", "[", "1", ",", "2", "]", "+", "q", "[", "3", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "2", ",", "3", "]", "-", "q", "[", "1", ",", "0", "]", "]", ",", "\n", "[", "q", "[", "1", ",", "3", "]", "-", "q", "[", "2", ",", "0", "]", ",", "q", "[", "2", ",", "3", "]", "+", "q", "[", "1", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "2", ",", "2", "]", "]", "]", ")", "\n", "gate_facing_vector", "=", "rotation_matrix", "[", ":", ",", "1", "]", "\n", "if", "direction", "==", "0", ":", "\n", "        ", "return", "airsimdroneracingvae", ".", "Vector3r", "(", "scale", "*", "gate_facing_vector", "[", "0", "]", ",", "scale", "*", "gate_facing_vector", "[", "1", "]", ",", "scale", "*", "gate_facing_vector", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "airsimdroneracingvae", ".", "Vector3r", "(", "-", "scale", "*", "gate_facing_vector", "[", "0", "]", ",", "-", "scale", "*", "gate_facing_vector", "[", "1", "]", ",", "scale", "*", "gate_facing_vector", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.getGatePoseWorld": [[143, 157], ["geom_utils.polarTranslation", "geom_utils.convert_t_body_2_world", "geom_utils.get_yaw_base", "scipy.spatial.transform.Rotation.from_euler", "Rotation.from_euler.as_quat", "airsimdroneracingvae.types.Pose", "airsimdroneracingvae.types.Quaternionr"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.polarTranslation", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.convert_t_body_2_world", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.get_yaw_base"], ["", "", "def", "getGatePoseWorld", "(", "p_o_b", ",", "r", ",", "theta", ",", "psi", ",", "phi_rel", ")", ":", "\n", "# get relative vector in the base frame coordinates", "\n", "    ", "t_b_g_body", "=", "polarTranslation", "(", "r", ",", "theta", ",", "psi", ")", "\n", "# transform relative vector from base frame to the world frame", "\n", "t_b_g", "=", "convert_t_body_2_world", "(", "t_b_g_body", ",", "p_o_b", ".", "orientation", ")", "\n", "# get the gate coord in world coordinates from origin", "\n", "t_o_g", "=", "p_o_b", ".", "position", "+", "t_b_g", "\n", "# create rotation of gate", "\n", "phi_quad_ref", "=", "get_yaw_base", "(", "p_o_b", ")", "\n", "phi_gate", "=", "phi_quad_ref", "+", "phi_rel", "\n", "rot_gate", "=", "Rotation", ".", "from_euler", "(", "'ZYX'", ",", "[", "phi_gate", ",", "0", ",", "0", "]", ")", "\n", "q", "=", "rot_gate", ".", "as_quat", "(", ")", "\n", "p_o_g", "=", "Pose", "(", "t_o_g", ",", "Quaternionr", "(", "q", "[", "0", "]", ",", "q", "[", "1", "]", ",", "q", "[", "2", "]", ",", "q", "[", "3", "]", ")", ")", "\n", "return", "p_o_g", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.cmvae.train_cmvae.calc_weighted_loss_img": [[24, 33], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.math.squared_difference", "tensorflow.reduce_sum", "tensorflow.math.exp", "tensorflow.reduce_sum", "tensorflow.math.exp"], "function", ["None"], ["@", "tf", ".", "function", "\n", "def", "calc_weighted_loss_img", "(", "img_recon", ",", "images_np", ")", ":", "\n", "    ", "flat_pred", "=", "tf", ".", "reshape", "(", "img_recon", ",", "[", "-", "1", "]", ")", "\n", "flat_gt", "=", "tf", ".", "reshape", "(", "images_np", ",", "[", "-", "1", "]", ")", "\n", "error_sq", "=", "tf", ".", "math", ".", "squared_difference", "(", "flat_gt", ",", "flat_pred", ")", "\n", "softmax_weights", "=", "tf", ".", "math", ".", "exp", "(", "error_sq", ")", "/", "tf", ".", "reduce_sum", "(", "tf", ".", "math", ".", "exp", "(", "error_sq", ")", ")", "\n", "weighted_error_sq", "=", "error_sq", "*", "softmax_weights", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "weighted_error_sq", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.cmvae.train_cmvae.reset_metrics": [[34, 41], ["train_loss_rec_img.reset_states", "train_loss_rec_gate.reset_states", "train_loss_kl.reset_states", "test_loss_rec_img.reset_states", "test_loss_rec_gate.reset_states", "test_loss_kl.reset_states"], "function", ["None"], ["", "def", "reset_metrics", "(", ")", ":", "\n", "    ", "train_loss_rec_img", ".", "reset_states", "(", ")", "\n", "train_loss_rec_gate", ".", "reset_states", "(", ")", "\n", "train_loss_kl", ".", "reset_states", "(", ")", "\n", "test_loss_rec_img", ".", "reset_states", "(", ")", "\n", "test_loss_rec_gate", ".", "reset_states", "(", ")", "\n", "test_loss_kl", ".", "reset_states", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.cmvae.train_cmvae.regulate_weights": [[42, 68], ["None"], "function", ["None"], ["", "@", "tf", ".", "function", "\n", "def", "regulate_weights", "(", "epoch", ")", ":", "\n", "# for beta", "\n", "    ", "if", "epoch", "<", "10.0", ":", "\n", "        ", "beta", "=", "8.0", "\n", "", "else", ":", "\n", "        ", "beta", "=", "8.0", "\n", "# t = 10", "\n", "# beta_min = 0.0  #0.000001", "\n", "# beta_max = 1.0  #0.0001", "\n", "# if epoch < t:", "\n", "#     # beta = beta_min + epoch/t*(beta_max-beta_min)", "\n", "#     beta = beta_max * 0.95**(t-epoch)  # ranges from 0.00592052922 to 0.95", "\n", "# else:", "\n", "#     beta = beta_max", "\n", "# for w_img", "\n", "", "if", "epoch", "<", "100", ":", "\n", "        ", "w_img", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "w_img", "=", "1.0", "\n", "# for w_gate", "\n", "", "if", "epoch", "<", "100", ":", "\n", "        ", "w_gate", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "w_gate", "=", "1.0", "\n", "", "return", "beta", ",", "w_img", ",", "w_gate", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.cmvae.train_cmvae.compute_loss_unsupervised": [[69, 86], ["tensorflow.losses.mean_squared_error", "tensorflow.losses.mean_squared_error", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.math.exp", "tensorflow.math.pow"], "function", ["None"], ["", "@", "tf", ".", "function", "\n", "def", "compute_loss_unsupervised", "(", "img_gt", ",", "gate_gt", ",", "img_recon", ",", "gate_recon", ",", "means", ",", "stddev", ",", "mode", ")", ":", "\n", "# compute reconstruction loss", "\n", "    ", "if", "mode", "==", "0", ":", "\n", "        ", "img_loss", "=", "tf", ".", "losses", ".", "mean_squared_error", "(", "img_gt", ",", "img_recon", ")", "\n", "# img_loss = tf.losses.mean_absolute_error(img_gt, img_recon)", "\n", "gate_loss", "=", "tf", ".", "losses", ".", "mean_squared_error", "(", "gate_gt", ",", "gate_recon", ")", "\n", "kl_loss", "=", "-", "0.5", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "(", "1", "+", "stddev", "-", "tf", ".", "math", ".", "pow", "(", "means", ",", "2", ")", "-", "tf", ".", "math", ".", "exp", "(", "stddev", ")", ")", ",", "axis", "=", "1", ")", ")", "\n", "# elif mode == 1:", "\n", "#     # labels = tf.reshape(labels, predictions.shape)", "\n", "#     # recon_loss = tf.losses.mean_squared_error(labels, predictions)", "\n", "#     # recon_loss = loss_object(labels, predictions)", "\n", "# print('Predictions: {}'.format(predictions))", "\n", "# print('Labels: {}'.format(labels))", "\n", "# print('Lrec: {}'.format(recon_loss))", "\n", "# copute KL loss: D_KL(Q(z|X,y) || P(z|X))", "\n", "", "return", "img_loss", ",", "gate_loss", ",", "kl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.cmvae.train_cmvae.train": [[87, 125], ["tape.gradient", "optimizer.apply_gradients", "tensorflow.GradientTape", "model", "train_cmvae.compute_loss_unsupervised", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "train_cmvae.regulate_weights", "zip", "train_loss_rec_img.update_state", "train_loss_rec_gate.update_state", "train_loss_kl.update_state"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.cmvae.train_cmvae.compute_loss_unsupervised", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.cmvae.train_cmvae.regulate_weights"], ["", "@", "tf", ".", "function", "\n", "def", "train", "(", "img_gt", ",", "gate_gt", ",", "epoch", ",", "mode", ")", ":", "\n", "# freeze the non-utilized weights", "\n", "# if mode == 0:", "\n", "#     model.q_img.trainable = True", "\n", "#     model.p_img.trainable = True", "\n", "#     model.p_gate.trainable = True", "\n", "# elif mode == 1:", "\n", "#     model.q_img.trainable = True", "\n", "#     model.p_img.trainable = True", "\n", "#     model.p_gate.trainable = False", "\n", "# elif mode == 2:", "\n", "#     model.q_img.trainable = True", "\n", "#     model.p_img.trainable = False", "\n", "#     model.p_gate.trainable = True", "\n", "    ", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "        ", "img_recon", ",", "gate_recon", ",", "means", ",", "stddev", ",", "z", "=", "model", "(", "img_gt", ",", "mode", ")", "\n", "img_loss", ",", "gate_loss", ",", "kl_loss", "=", "compute_loss_unsupervised", "(", "img_gt", ",", "gate_gt", ",", "img_recon", ",", "gate_recon", ",", "means", ",", "stddev", ",", "mode", ")", "\n", "img_loss", "=", "tf", ".", "reduce_mean", "(", "img_loss", ")", "\n", "gate_loss", "=", "tf", ".", "reduce_mean", "(", "gate_loss", ")", "\n", "beta", ",", "w_img", ",", "w_gate", "=", "regulate_weights", "(", "epoch", ")", "\n", "# weighted_loss_img = calc_weighted_loss_img(img_recon, img_gt)", "\n", "if", "mode", "==", "0", ":", "\n", "            ", "total_loss", "=", "w_img", "*", "img_loss", "+", "w_gate", "*", "gate_loss", "+", "beta", "*", "kl_loss", "\n", "# total_loss = w_img * img_loss + beta * kl_loss", "\n", "# total_loss = weighted_loss_img + gate_loss + beta * kl_loss", "\n", "# total_loss = img_loss", "\n", "train_loss_rec_img", ".", "update_state", "(", "img_loss", ")", "\n", "train_loss_rec_gate", ".", "update_state", "(", "gate_loss", ")", "\n", "train_loss_kl", ".", "update_state", "(", "kl_loss", ")", "\n", "# TODO: later create structure for other training modes -- for now just training everything together", "\n", "# elif mode==1:", "\n", "#     total_loss = img_loss + beta*kl_loss", "\n", "#     train_kl_loss_m1(kl_loss)", "\n", "# elif mode==2:", "\n", "#     total_loss = gate_loss + beta*kl_loss", "\n", "", "", "gradients", "=", "tape", ".", "gradient", "(", "total_loss", ",", "model", ".", "trainable_variables", ")", "\n", "optimizer", ".", "apply_gradients", "(", "zip", "(", "gradients", ",", "model", ".", "trainable_variables", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.cmvae.train_cmvae.test": [[126, 136], ["model", "train_cmvae.compute_loss_unsupervised", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "test_loss_rec_img.update_state", "test_loss_rec_gate.update_state", "test_loss_kl.update_state"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.cmvae.train_cmvae.compute_loss_unsupervised"], ["", "@", "tf", ".", "function", "\n", "def", "test", "(", "img_gt", ",", "gate_gt", ",", "mode", ")", ":", "\n", "    ", "img_recon", ",", "gate_recon", ",", "means", ",", "stddev", ",", "z", "=", "model", "(", "img_gt", ",", "mode", ")", "\n", "img_loss", ",", "gate_loss", ",", "kl_loss", "=", "compute_loss_unsupervised", "(", "img_gt", ",", "gate_gt", ",", "img_recon", ",", "gate_recon", ",", "means", ",", "stddev", ",", "mode", ")", "\n", "img_loss", "=", "tf", ".", "reduce_mean", "(", "img_loss", ")", "\n", "gate_loss", "=", "tf", ".", "reduce_mean", "(", "gate_loss", ")", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "test_loss_rec_img", ".", "update_state", "(", "img_loss", ")", "\n", "test_loss_rec_gate", ".", "update_state", "(", "gate_loss", ")", "\n", "test_loss_kl", ".", "update_state", "(", "kl_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.imitation_learning.vel_regressor.VelRegressor.__init__": [[17, 38], ["racing_models.bc_full.BcFull", "vel_regressor.VelRegressor.bc_model.load_weights", "vel_regressor.VelRegressor.cmvae_model.load_weights", "racing_models.bc_latent.BcLatent", "vel_regressor.VelRegressor.bc_model.load_weights", "racing_models.cmvae.CmvaeDirect", "racing_models.cmvae.Cmvae", "racing_models.dronet.Dronet", "vel_regressor.VelRegressor.reg_model.load_weights", "racing_models.bc_latent.BcLatent", "vel_regressor.VelRegressor.bc_model.load_weights"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "regressor_type", ",", "bc_weights_path", ",", "feature_weights_path", "=", "None", ",", "latent_space_constraints", "=", "True", ")", ":", "\n", "        ", "self", ".", "regressor_type", "=", "regressor_type", "\n", "\n", "# create models", "\n", "if", "self", ".", "regressor_type", "==", "'full'", ":", "\n", "            ", "self", ".", "bc_model", "=", "racing_models", ".", "bc_full", ".", "BcFull", "(", ")", "\n", "self", ".", "bc_model", ".", "load_weights", "(", "bc_weights_path", ")", "\n", "", "elif", "self", ".", "regressor_type", "==", "'latent'", ":", "\n", "# create model", "\n", "            ", "if", "latent_space_constraints", "is", "True", ":", "\n", "                ", "self", ".", "cmvae_model", "=", "racing_models", ".", "cmvae", ".", "CmvaeDirect", "(", "n_z", "=", "10", ",", "gate_dim", "=", "4", ",", "res", "=", "64", ",", "trainable_model", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "cmvae_model", "=", "racing_models", ".", "cmvae", ".", "Cmvae", "(", "n_z", "=", "10", ",", "gate_dim", "=", "4", ",", "res", "=", "64", ",", "trainable_model", "=", "False", ")", "\n", "", "self", ".", "cmvae_model", ".", "load_weights", "(", "feature_weights_path", ")", "\n", "self", ".", "bc_model", "=", "racing_models", ".", "bc_latent", ".", "BcLatent", "(", ")", "\n", "self", ".", "bc_model", ".", "load_weights", "(", "bc_weights_path", ")", "\n", "", "elif", "self", ".", "regressor_type", "==", "'reg'", ":", "\n", "            ", "self", ".", "reg_model", "=", "racing_models", ".", "dronet", ".", "Dronet", "(", "num_outputs", "=", "4", ",", "include_top", "=", "True", ")", "\n", "self", ".", "reg_model", ".", "load_weights", "(", "feature_weights_path", ")", "\n", "self", ".", "bc_model", "=", "racing_models", ".", "bc_latent", ".", "BcLatent", "(", ")", "\n", "self", ".", "bc_model", ".", "load_weights", "(", "bc_weights_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.imitation_learning.vel_regressor.VelRegressor.predict_velocities": [[39, 54], ["vel_regressor.VelRegressor.numpy", "racing_utils.dataset_utils.de_normalize_v", "racing_utils.geom_utils.convert_t_body_2_world", "numpy.array", "vel_regressor.VelRegressor.bc_model", "airsimdroneracingvae.Vector3r", "vel_regressor.VelRegressor.cmvae_model.encode", "vel_regressor.VelRegressor.bc_model", "vel_regressor.VelRegressor.reg_model", "vel_regressor.VelRegressor.bc_model"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.dataset_utils.de_normalize_v", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.convert_t_body_2_world", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.CmvaeDirect.encode"], ["", "", "def", "predict_velocities", "(", "self", ",", "img", ",", "p_o_b", ")", ":", "\n", "        ", "img", "=", "(", "img", "/", "255.0", ")", "*", "2", "-", "1.0", "\n", "if", "self", ".", "regressor_type", "==", "'full'", ":", "\n", "            ", "predictions", "=", "self", ".", "bc_model", "(", "img", ")", "\n", "", "elif", "self", ".", "regressor_type", "==", "'latent'", ":", "\n", "            ", "z", ",", "_", ",", "_", "=", "self", ".", "cmvae_model", ".", "encode", "(", "img", ")", "\n", "predictions", "=", "self", ".", "bc_model", "(", "z", ")", "\n", "", "elif", "self", ".", "regressor_type", "==", "'reg'", ":", "\n", "            ", "z", "=", "self", ".", "reg_model", "(", "img", ")", "\n", "predictions", "=", "self", ".", "bc_model", "(", "z", ")", "\n", "", "predictions", "=", "predictions", ".", "numpy", "(", ")", "\n", "predictions", "=", "racing_utils", ".", "dataset_utils", ".", "de_normalize_v", "(", "predictions", ")", "\n", "# print('Predicted body vel: \\n {}'.format(predictions[0]))", "\n", "v_xyz_world", "=", "racing_utils", ".", "geom_utils", ".", "convert_t_body_2_world", "(", "airsimdroneracingvae", ".", "Vector3r", "(", "predictions", "[", "0", ",", "0", "]", ",", "predictions", "[", "0", ",", "1", "]", ",", "predictions", "[", "0", ",", "2", "]", ")", ",", "p_o_b", ".", "orientation", ")", "\n", "return", "np", ".", "array", "(", "[", "v_xyz_world", ".", "x_val", ",", "v_xyz_world", ".", "y_val", ",", "v_xyz_world", ".", "z_val", ",", "predictions", "[", "0", ",", "3", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.imitation_learning.train_bc.reset_metrics": [[43, 47], ["train_loss_rec_v.reset_states", "test_loss_rec_v.reset_states"], "function", ["None"], ["@", "tf", ".", "function", "\n", "def", "reset_metrics", "(", ")", ":", "\n", "    ", "train_loss_rec_v", ".", "reset_states", "(", ")", "\n", "test_loss_rec_v", ".", "reset_states", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.imitation_learning.train_bc.compute_loss": [[49, 53], ["tensorflow.losses.mean_squared_error"], "function", ["None"], ["", "@", "tf", ".", "function", "\n", "def", "compute_loss", "(", "labels", ",", "predictions", ")", ":", "\n", "    ", "recon_loss", "=", "tf", ".", "losses", ".", "mean_squared_error", "(", "labels", ",", "predictions", ")", "\n", "return", "recon_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.imitation_learning.train_bc.train": [[55, 70], ["tape.gradient", "optimizer.apply_gradients", "train_loss_rec_v", "tensorflow.GradientTape", "tensorflow.reduce_mean", "zip", "bc_model", "train_bc.compute_loss", "cmvae_model.encode", "bc_model", "reg_model", "bc_model"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.imitation_learning.train_bc.compute_loss", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.CmvaeDirect.encode"], ["", "@", "tf", ".", "function", "\n", "def", "train", "(", "images", ",", "labels", ",", "epoch", ",", "training_mode", ")", ":", "\n", "    ", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "        ", "if", "training_mode", "==", "'full'", ":", "\n", "            ", "predictions", "=", "bc_model", "(", "images", ")", "\n", "", "elif", "training_mode", "==", "'latent'", ":", "\n", "            ", "z", ",", "_", ",", "_", "=", "cmvae_model", ".", "encode", "(", "images", ")", "\n", "predictions", "=", "bc_model", "(", "z", ")", "\n", "", "elif", "training_mode", "==", "'reg'", ":", "\n", "            ", "z", "=", "reg_model", "(", "images", ")", "\n", "predictions", "=", "bc_model", "(", "z", ")", "\n", "", "recon_loss", "=", "tf", ".", "reduce_mean", "(", "compute_loss", "(", "labels", ",", "predictions", ")", ")", "\n", "", "gradients", "=", "tape", ".", "gradient", "(", "recon_loss", ",", "bc_model", ".", "trainable_variables", ")", "\n", "optimizer", ".", "apply_gradients", "(", "zip", "(", "gradients", ",", "bc_model", ".", "trainable_variables", ")", ")", "\n", "train_loss_rec_v", "(", "recon_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.imitation_learning.train_bc.test": [[72, 84], ["tensorflow.reduce_mean", "test_loss_rec_v", "bc_model", "train_bc.compute_loss", "cmvae_model.encode", "bc_model", "reg_model", "bc_model"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.imitation_learning.train_bc.compute_loss", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.CmvaeDirect.encode"], ["", "@", "tf", ".", "function", "\n", "def", "test", "(", "images", ",", "labels", ",", "training_mode", ")", ":", "\n", "    ", "if", "training_mode", "==", "'full'", ":", "\n", "        ", "predictions", "=", "bc_model", "(", "images", ")", "\n", "", "elif", "training_mode", "==", "'latent'", ":", "\n", "        ", "z", ",", "_", ",", "_", "=", "cmvae_model", ".", "encode", "(", "images", ")", "\n", "predictions", "=", "bc_model", "(", "z", ")", "\n", "", "elif", "training_mode", "==", "'reg'", ":", "\n", "        ", "z", "=", "reg_model", "(", "images", ")", "\n", "predictions", "=", "bc_model", "(", "z", ")", "\n", "", "recon_loss", "=", "tf", ".", "reduce_mean", "(", "compute_loss", "(", "labels", ",", "predictions", ")", ")", "\n", "test_loss_rec_v", "(", "recon_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.imitation_learning.bc_navigation.process_image": [[31, 40], ["numpy.fromstring", "np.fromstring.reshape", "cv2.resize().astype", "numpy.array", "client.simGetImages", "cv2.resize", "airsimdroneracingvae.ImageRequest", "airsimdroneracingvae.ImageRequest", "airsimdroneracingvae.ImageRequest"], "function", ["None"], ["def", "process_image", "(", "client", ",", "img_res", ")", ":", "\n", "    ", "image_response", "=", "client", ".", "simGetImages", "(", "[", "airsimdroneracingvae", ".", "ImageRequest", "(", "'0'", ",", "airsimdroneracingvae", ".", "ImageType", ".", "Scene", ",", "False", ",", "False", ")", "]", ")", "[", "0", "]", "\n", "img_1d", "=", "np", ".", "fromstring", "(", "image_response", ".", "image_data_uint8", ",", "dtype", "=", "np", ".", "uint8", ")", "# get numpy array", "\n", "img_bgr", "=", "img_1d", ".", "reshape", "(", "image_response", ".", "height", ",", "image_response", ".", "width", ",", "3", ")", "# reshape array to 4 channel image array H X W X 3", "\n", "img_resized", "=", "cv2", ".", "resize", "(", "img_bgr", ",", "(", "img_res", ",", "img_res", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_batch_1", "=", "np", ".", "array", "(", "[", "img_resized", "]", ")", "\n", "cam_pos", "=", "image_response", ".", "camera_position", "\n", "cam_orientation", "=", "image_response", ".", "camera_orientation", "\n", "return", "img_batch_1", ",", "cam_pos", ",", "cam_orientation", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.imitation_learning.bc_navigation.move_drone": [[42, 50], ["airsimdroneracingvae.YawMode", "airsimdroneracingvae.YawMode", "airsimdroneracingvae.YawMode", "client.moveByVelocityAsync"], "function", ["None"], ["", "def", "move_drone", "(", "client", ",", "vel_cmd", ")", ":", "\n", "# good multipliers originally: 0.4 for vel, 0.8 for yaw", "\n", "# good multipliers new policies: 0.8 for vel, 0.8 for yaw", "\n", "    ", "vel_cmd", "[", "0", ":", "2", "]", "=", "vel_cmd", "[", "0", ":", "2", "]", "*", "1.0", "# usually base speed is 3/ms", "\n", "vel_cmd", "[", "3", "]", "=", "vel_cmd", "[", "3", "]", "*", "1.0", "\n", "# yaw rate is given in deg/s!! not rad/s", "\n", "yaw_mode", "=", "airsimdroneracingvae", ".", "YawMode", "(", "is_rate", "=", "True", ",", "yaw_or_rate", "=", "vel_cmd", "[", "3", "]", "*", "180.0", "/", "np", ".", "pi", ")", "\n", "client", ".", "moveByVelocityAsync", "(", "vel_cmd", "[", "0", "]", ",", "vel_cmd", "[", "1", "]", ",", "vel_cmd", "[", "2", "]", ",", "duration", "=", "0.1", ",", "yaw_mode", "=", "yaw_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.get_quat": [[16, 23], ["numpy.array"], "function", ["None"], ["def", "get_quat", "(", "dict", ")", ":", "\n", "    ", "q_x", "=", "dict", "[", "'odom.quaternion.x'", "]", "\n", "q_y", "=", "dict", "[", "'odom.quaternion.y'", "]", "\n", "q_z", "=", "dict", "[", "'odom.quaternion.z'", "]", "\n", "q_w", "=", "dict", "[", "'odom.quaternion.w'", "]", "\n", "q", "=", "np", ".", "array", "(", "[", "q_x", ",", "q_y", ",", "q_z", ",", "q_w", "]", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.get_vel": [[24, 30], ["numpy.array"], "function", ["None"], ["", "def", "get_vel", "(", "dict", ")", ":", "\n", "    ", "v_x", "=", "dict", "[", "'vx'", "]", "\n", "v_y", "=", "dict", "[", "'vy'", "]", "\n", "v_z", "=", "dict", "[", "'vz'", "]", "\n", "v_vec", "=", "np", ".", "array", "(", "[", "v_x", ",", "v_y", ",", "v_z", "]", ")", "\n", "return", "v_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.get_abspath": [[31, 34], ["os.path.abspath", "os.path.join", "os.path.dirname"], "function", ["None"], ["", "def", "get_abspath", "(", "filename", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'./{}'", ".", "format", "(", "filename", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.create_image_path": [[36, 38], ["os.path.abspath", "os.path.join"], "function", ["None"], ["", "def", "create_image_path", "(", "image_file_name", ",", "image_folder_path", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "image_folder_path", ",", "image_file_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.create_suffixed_file": [[40, 43], ["os.path.splitext"], "function", ["None"], ["", "def", "create_suffixed_file", "(", "file_path", ",", "suffix", ")", ":", "\n", "    ", "_path", ",", "_format", "=", "os", ".", "path", ".", "splitext", "(", "file_path", ")", "\n", "return", "'{}_{}{}'", ".", "format", "(", "_path", ",", "suffix", ",", "_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.interpolate": [[45, 47], ["round"], "function", ["None"], ["", "def", "interpolate", "(", "v0", ",", "v1", ",", "t", ")", ":", "\n", "    ", "return", "round", "(", "(", "1", "-", "t", ")", "*", "v0", "+", "t", "*", "v1", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.normalize": [[49, 52], ["None"], "function", ["None"], ["", "def", "normalize", "(", "v0", ",", "v1", ",", "x", ")", ":", "\n", "# makes value between 0 and 1", "\n", "    ", "return", "(", "x", "-", "v0", ")", "/", "(", "v1", "-", "v0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.interpolate_record": [[54, 87], ["data_processor.normalize", "data_processor.get_quat", "data_processor.get_quat", "scipy.spatial.transform.Rotation.from_quat", "scipy.spatial.transform.Slerp", "scipy.spatial.transform.Slerp.", "data_processor.get_vel", "data_processor.interpolate", "slerp.apply"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.normalize", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.get_quat", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.get_quat", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.get_vel", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.interpolate"], ["", "def", "interpolate_record", "(", "record1", ",", "record2", ",", "image_record", ")", ":", "\n", "    ", "\"\"\"\n    Returns result record with interpolated values\n    \"\"\"", "\n", "# interpolate velocities", "\n", "interpolated_vel_record", "=", "{", "}", "\n", "t", "=", "normalize", "(", "record1", "[", "TIME_COLUMN", "]", ",", "record2", "[", "TIME_COLUMN", "]", ",", "image_record", "[", "TIME_COLUMN", "]", ")", "\n", "for", "col", "in", "INTERPOLABLE_VEL_COLUMNS", ":", "\n", "        ", "interpolated_vel_record", "[", "col", "]", "=", "interpolate", "(", "record1", "[", "col", "]", ",", "record2", "[", "col", "]", ",", "t", ")", "\n", "\n", "# interpolate rotations of the body frame", "\n", "", "q0", "=", "get_quat", "(", "record1", ")", "\n", "q1", "=", "get_quat", "(", "record2", ")", "\n", "key_rots", "=", "R", ".", "from_quat", "(", "[", "q0", ",", "q1", "]", ")", "\n", "key_times", "=", "[", "0", ",", "1", "]", "\n", "time_interp", "=", "[", "t", "]", "\n", "slerp", "=", "Slerp", "(", "key_times", ",", "key_rots", ")", "\n", "interp_rot", "=", "slerp", "(", "time_interp", ")", "\n", "\n", "v_world", "=", "get_vel", "(", "interpolated_vel_record", ")", "\n", "# apply rotation to the velocity vector", "\n", "# needs to be inverse because we interpolated the rotation matrix from body -> world", "\n", "# and what we're doing here is going from world -> body", "\n", "v_body", "=", "interp_rot", ".", "apply", "(", "v_world", ",", "inverse", "=", "True", ")", "[", "0", "]", "\n", "\n", "# put everything back in dict in body coords", "\n", "interpolated_vel_body", "=", "{", "}", "\n", "interpolated_vel_body", "[", "'vx'", "]", "=", "v_body", "[", "0", "]", "\n", "interpolated_vel_body", "[", "'vy'", "]", "=", "v_body", "[", "1", "]", "\n", "interpolated_vel_body", "[", "'vz'", "]", "=", "v_body", "[", "2", "]", "\n", "interpolated_vel_body", "[", "'vyaw'", "]", "=", "interpolated_vel_record", "[", "'vyaw'", "]", "\n", "\n", "return", "interpolated_vel_body", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.find_closest_rows": [[88, 101], ["None"], "function", ["None"], ["", "def", "find_closest_rows", "(", "value", ",", "iterator", ")", ":", "\n", "    ", "v1", ",", "v2", "=", "None", ",", "None", "\n", "r1", ",", "r2", "=", "None", ",", "None", "\n", "for", "current", "in", "iterator", ":", "\n", "        ", "curr_value", "=", "current", "[", "1", "]", "\n", "if", "curr_value", "[", "TIME_COLUMN", "]", "<=", "value", ":", "\n", "            ", "v1", "=", "curr_value", "\n", "", "elif", "v1", "is", "not", "None", "and", "curr_value", "[", "TIME_COLUMN", "]", ">=", "value", ":", "\n", "            ", "v2", "=", "curr_value", "\n", "break", "\n", "", "elif", "v1", "is", "None", "and", "curr_value", "[", "TIME_COLUMN", "]", ">=", "value", ":", "\n", "            ", "break", "\n", "", "", "return", "v1", ",", "v2", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.split_test_training_data": [[102, 121], ["int", "open", "open", "open", "open.readlines", "open.close", "open.close", "open.close", "os.remove", "data_processor.create_suffixed_file", "data_processor.create_suffixed_file", "open.writelines", "open.writelines"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.create_suffixed_file", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.create_suffixed_file"], ["", "def", "split_test_training_data", "(", "file_paths", ",", "lines_number", ",", "test_split", "=", "0.2", ")", ":", "\n", "    ", "test_number", "=", "int", "(", "lines_number", "*", "test_split", ")", "\n", "for", "file_path", "in", "file_paths", ":", "\n", "        ", "f", "=", "open", "(", "file_path", ",", "'r'", ")", "\n", "f_test", "=", "open", "(", "create_suffixed_file", "(", "file_path", ",", "'test'", ")", ",", "'w'", ")", "\n", "f_train", "=", "open", "(", "create_suffixed_file", "(", "file_path", ",", "'train'", ")", ",", "'w'", ")", "\n", "\n", "i", "=", "0", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "if", "i", "<=", "test_number", ":", "\n", "                ", "f_test", ".", "writelines", "(", "line", ")", "\n", "", "else", ":", "\n", "                ", "f_train", ".", "writelines", "(", "line", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "f_train", ".", "close", "(", ")", "\n", "f_test", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.process": [[122, 172], ["velocities.iterrows", "open", "open", "csv.DictWriter", "csv.DictWriter", "images.iterrows", "print", "print", "open.close", "open.close", "data_processor.find_closest_rows", "data_processor.interpolate_record", "data_processor.create_image_path", "csv.DictWriter.writerow", "csv.DictWriter.writerow", "print", "os.path.isfile"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.find_closest_rows", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.interpolate_record", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.create_image_path"], ["", "", "def", "process", "(", "\n", "velocities", ",", "\n", "images", ",", "\n", "result_velocities_file_path", ",", "\n", "result_images_file_path", ",", "\n", "images_folder_path", ")", ":", "\n", "    ", "\"\"\"\n    Process velocities and images frames.\n    For each row in images:\n        1) Match 2 closest by timestamp velocities rows to the image record.\n        2) Calculate normalized parameter t: image_time - vt1 / vt2 - vt1.\n           vt1, vt2: velocity records timestamps\n        3) Interpolate velocities values using t.\n        4) Create new row using image timestamp, image and interpolated values.\n    \"\"\"", "\n", "velocity_iterator", "=", "velocities", ".", "iterrows", "(", ")", "\n", "f_velocities", "=", "open", "(", "result_velocities_file_path", ",", "'w+'", ")", "\n", "f_images", "=", "open", "(", "result_images_file_path", ",", "'w+'", ")", "\n", "writer_v", "=", "csv", ".", "DictWriter", "(", "f_velocities", ",", "RESULT_COLUMNS", ",", "delimiter", "=", "','", ")", "\n", "writer_i", "=", "csv", ".", "DictWriter", "(", "f_images", ",", "[", "'ImageFile'", "]", ",", "delimiter", "=", "','", ")", "\n", "row_counter", ",", "missed", "=", "0", ",", "0", "\n", "\n", "for", "_", ",", "image_row", "in", "images", ".", "iterrows", "(", ")", ":", "\n", "        ", "if", "row_counter", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'{} out of {} images processed -> {}%'", ".", "format", "(", "row_counter", ",", "images", ".", "shape", "[", "0", "]", ",", "100.0", "*", "row_counter", "/", "images", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "v1", ",", "v2", "=", "find_closest_rows", "(", "image_row", "[", "TIME_COLUMN", "]", ",", "velocity_iterator", ")", "\n", "# print('{}'.format(v1['TimeStamp'] - image_row[TIME_COLUMN]))", "\n", "if", "v1", "is", "None", "or", "v2", "is", "None", ":", "\n", "            ", "continue", "\n", "", "interpolated", "=", "interpolate_record", "(", "v1", ",", "v2", ",", "image_row", ")", "\n", "row_counter", "+=", "1", "\n", "\n", "image_path", "=", "create_image_path", "(", "\n", "image_row", "[", "'ImageFile'", "]", ",", "\n", "images_folder_path", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "image_path", ")", ":", "\n", "            ", "missed", "+=", "1", "\n", "continue", "\n", "\n", "", "writer_v", ".", "writerow", "(", "interpolated", ")", "\n", "writer_i", ".", "writerow", "(", "{", "\n", "'ImageFile'", ":", "image_path", "\n", "}", ")", "\n", "\n", "", "print", "(", "'--------------------------------'", ")", "\n", "print", "(", "'Missed files: {}'", ".", "format", "(", "missed", ")", ")", "\n", "f_velocities", ".", "close", "(", ")", "\n", "f_images", ".", "close", "(", ")", "\n", "# split_test_training_data([result_velocities_file_path, result_images_file_path], row_counter)", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.run": [[174, 193], ["pandas.read_csv", "pandas.read_csv", "data_processor.process", "print", "print"], "function", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.data_processor.process"], ["", "def", "run", "(", "\n", "velocities_file_path", ",", "\n", "images_file_path", ",", "\n", "result_velocities_file_path", ",", "\n", "result_images_file_path", ",", "\n", "images_folder_path", ")", ":", "\n", "    ", "velocities", "=", "pd", ".", "read_csv", "(", "velocities_file_path", ",", "delimiter", "=", "', '", ")", "\n", "images", "=", "pd", ".", "read_csv", "(", "\n", "images_file_path", ",", "delimiter", "=", "', '", ")", "\n", "# sys.exit()", "\n", "process", "(", "\n", "velocities", ",", "\n", "images", ",", "\n", "result_velocities_file_path", ",", "\n", "result_images_file_path", ",", "\n", "images_folder_path", "\n", ")", "\n", "print", "(", "'------------------------------------'", ")", "\n", "print", "(", "'Successfully created the results!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.__init__": [[33, 80], ["airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "soccer_datagen.DroneRacingDataGenerator.client.confirmConnection", "soccer_datagen.DroneRacingDataGenerator.client.enableApiControl", "time.sleep", "threading.Thread"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "drone_name", ",", "\n", "gate_passed_thresh", ",", "\n", "race_course_radius", ",", "\n", "radius_noise", ",", "\n", "height_range", ",", "\n", "direction", ",", "\n", "perpendicular", ",", "\n", "odom_loop_rate_sec", ",", "\n", "vel_max", ",", "\n", "acc_max", ")", ":", "\n", "\n", "        ", "self", ".", "curr_track_gate_poses", "=", "None", "\n", "self", ".", "next_track_gate_poses", "=", "None", "\n", "self", ".", "gate_object_names_sorted", "=", "None", "\n", "self", ".", "num_training_laps", "=", "None", "\n", "\n", "# gate idx trackers", "\n", "self", ".", "gate_passed_thresh", "=", "gate_passed_thresh", "\n", "self", ".", "last_gate_passed_idx", "=", "-", "1", "\n", "self", ".", "last_gate_idx_moveOnSpline_was_called_on", "=", "-", "1", "\n", "self", ".", "next_gate_idx", "=", "0", "\n", "self", ".", "next_next_gate_idx", "=", "1", "\n", "self", ".", "train_lap_idx", "=", "0", "\n", "\n", "# should be same as settings.json", "\n", "self", ".", "drone_name", "=", "drone_name", "\n", "# training params", "\n", "self", ".", "race_course_radius", "=", "race_course_radius", "\n", "self", ".", "radius_noise", "=", "radius_noise", "\n", "self", ".", "height_range", "=", "height_range", "\n", "self", ".", "direction", "=", "direction", "\n", "self", ".", "perpendicular", "=", "perpendicular", "\n", "\n", "self", ".", "vel_max", "=", "vel_max", "\n", "self", ".", "acc_max", "=", "acc_max", "\n", "\n", "# todo encapsulate in function", "\n", "self", ".", "client", "=", "airsimdroneracingvae", ".", "MultirotorClient", "(", ")", "\n", "self", ".", "client", ".", "confirmConnection", "(", ")", "\n", "self", ".", "client", ".", "enableApiControl", "(", "True", ",", "vehicle_name", "=", "self", ".", "drone_name", ")", "\n", "time", ".", "sleep", "(", "0.05", ")", "\n", "\n", "# threading stuff", "\n", "self", ".", "got_odom", "=", "False", "\n", "self", ".", "is_expert_planner_controller_thread_active", "=", "False", "\n", "self", ".", "expert_planner_controller_thread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "repeat_timer_expert", ",", "args", "=", "(", "self", ".", "expert_planner_controller_callback", ",", "odom_loop_rate_sec", ")", ")", "\n", "# self.image_loop = threading.Thread(target=self.repeat_timer, args=(self.image_callback, 0.05))", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.repeat_timer_expert": [[85, 89], ["task", "time.sleep"], "methods", ["None"], ["", "def", "repeat_timer_expert", "(", "self", ",", "task", ",", "period", ")", ":", "\n", "        ", "while", "self", ".", "is_expert_planner_controller_thread_active", ":", "\n", "            ", "task", "(", ")", "\n", "time", ".", "sleep", "(", "period", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.load_level": [[95, 109], ["soccer_datagen.DroneRacingDataGenerator.client.simLoadLevel", "time.sleep", "soccer_datagen.DroneRacingDataGenerator.set_current_track_gate_poses_from_default_track_in_binary", "soccer_datagen.DroneRacingDataGenerator.get_next_generated_track", "range", "soccer_datagen.DroneRacingDataGenerator.set_current_track_gate_poses_from_default_track_in_binary", "soccer_datagen.DroneRacingDataGenerator.get_next_generated_track", "len", "print", "soccer_datagen.DroneRacingDataGenerator.client.simSetObjectPose", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.set_current_track_gate_poses_from_default_track_in_binary", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.get_next_generated_track", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.set_current_track_gate_poses_from_default_track_in_binary", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.get_next_generated_track"], ["", "", "def", "load_level", "(", "self", ",", "level_name", "=", "'Soccer_Field_Easy'", ")", ":", "\n", "        ", "self", ".", "client", ".", "simLoadLevel", "(", "level_name", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "\n", "self", ".", "set_current_track_gate_poses_from_default_track_in_binary", "(", ")", "\n", "self", ".", "next_track_gate_poses", "=", "self", ".", "get_next_generated_track", "(", ")", "\n", "\n", "for", "gate_idx", "in", "range", "(", "len", "(", "self", ".", "gate_object_names_sorted", ")", ")", ":", "\n", "            ", "print", "(", "self", ".", "next_track_gate_poses", "[", "gate_idx", "]", ".", "position", ".", "x_val", ",", "self", ".", "next_track_gate_poses", "[", "gate_idx", "]", ".", "position", ".", "y_val", ",", "self", ".", "next_track_gate_poses", "[", "gate_idx", "]", ".", "position", ".", "z_val", ")", "\n", "self", ".", "client", ".", "simSetObjectPose", "(", "self", ".", "gate_object_names_sorted", "[", "gate_idx", "]", ",", "self", ".", "next_track_gate_poses", "[", "gate_idx", "]", ")", "\n", "time", ".", "sleep", "(", "0.05", ")", "\n", "\n", "", "self", ".", "set_current_track_gate_poses_from_default_track_in_binary", "(", ")", "\n", "self", ".", "next_track_gate_poses", "=", "self", ".", "get_next_generated_track", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.set_current_track_gate_poses_from_default_track_in_binary": [[110, 136], ["sorted", "sorted", "soccer_datagen.DroneRacingDataGenerator.client.simListSceneObjects", "soccer_datagen.DroneRacingDataGenerator.get_next_generated_track", "range", "soccer_datagen.DroneRacingDataGenerator.client.simListSceneObjects", "int", "range", "soccer_datagen.DroneRacingDataGenerator.client.simGetObjectPose", "soccer_datagen.DroneRacingDataGenerator.client.simDestroyObject", "time.sleep", "len", "soccer_datagen.DroneRacingDataGenerator.client.simSpawnObject", "time.sleep", "len", "gate_name.split"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.get_next_generated_track"], ["", "def", "set_current_track_gate_poses_from_default_track_in_binary", "(", "self", ")", ":", "\n", "        ", "gate_names_sorted_bad", "=", "sorted", "(", "self", ".", "client", ".", "simListSceneObjects", "(", "\"Gate.*\"", ")", ")", "\n", "# gate_names_sorted_bad is ['Gate0', 'Gate10_21', 'Gate11_23', 'Gate1_3', 'Gate2_5', 'Gate3_7', 'Gate4_9', 'Gate5_11', 'Gate6_13', 'Gate7_15', 'Gate8_17', 'Gate9_19']", "\n", "# number after underscore is unreal garbage. also leading zeros are not there. ", "\n", "gate_indices_bad", "=", "[", "int", "(", "gate_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "[", "4", ":", "]", ")", "for", "gate_name", "in", "gate_names_sorted_bad", "]", "\n", "gate_indices_correct", "=", "sorted", "(", "range", "(", "len", "(", "gate_indices_bad", ")", ")", ",", "key", "=", "lambda", "k", ":", "gate_indices_bad", "[", "k", "]", ")", "\n", "self", ".", "gate_object_names_sorted", "=", "[", "gate_names_sorted_bad", "[", "gate_idx", "]", "for", "gate_idx", "in", "gate_indices_correct", "]", "\n", "\n", "# limit the number of gates in the track", "\n", "self", ".", "gate_object_names_sorted", "=", "self", ".", "gate_object_names_sorted", "[", ":", "num_gates_track", "]", "\n", "\n", "self", ".", "curr_track_gate_poses", "=", "[", "self", ".", "client", ".", "simGetObjectPose", "(", "gate_name", ")", "for", "gate_name", "in", "self", ".", "gate_object_names_sorted", "]", "\n", "\n", "# destroy all previous gates in map", "\n", "for", "gate_object", "in", "self", ".", "client", ".", "simListSceneObjects", "(", "\".*[Gg]ate.*\"", ")", ":", "\n", "            ", "self", ".", "client", ".", "simDestroyObject", "(", "gate_object", ")", "\n", "time", ".", "sleep", "(", "0.05", ")", "\n", "\n", "# generate track with correct number of gates", "\n", "", "self", ".", "next_track_gate_poses", "=", "self", ".", "get_next_generated_track", "(", ")", "\n", "self", ".", "curr_track_gate_poses", "=", "self", ".", "next_track_gate_poses", "\n", "\n", "# create red gates in their places", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "gate_object_names_sorted", ")", ")", ":", "\n", "            ", "self", ".", "client", ".", "simSpawnObject", "(", "self", ".", "gate_object_names_sorted", "[", "idx", "]", ",", "\"RedGate16x16\"", ",", "self", ".", "next_track_gate_poses", "[", "idx", "]", ",", "0.75", ")", "\n", "time", ".", "sleep", "(", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.takeoff_with_moveOnSpline": [[140, 147], ["soccer_datagen.DroneRacingDataGenerator.client.moveOnSplineAsync().join", "soccer_datagen.DroneRacingDataGenerator.client.moveOnSplineAsync", "airsimdroneracingvae.Vector3r", "airsimdroneracingvae.Vector3r", "airsimdroneracingvae.Vector3r", "airsimdroneracingvae.Vector3r", "airsimdroneracingvae.Vector3r", "airsimdroneracingvae.Vector3r", "airsimdroneracingvae.Vector3r", "airsimdroneracingvae.Vector3r", "airsimdroneracingvae.Vector3r"], "methods", ["None"], ["", "", "def", "takeoff_with_moveOnSpline", "(", "self", ",", "takeoff_height", ",", "vel_max", ",", "acc_max", ")", ":", "\n", "        ", "self", ".", "client", ".", "moveOnSplineAsync", "(", "path", "=", "[", "airsimdroneracingvae", ".", "Vector3r", "(", "4", ",", "-", "2", ",", "takeoff_height", ")", "]", ",", "\n", "vel_max", "=", "vel_max", ",", "acc_max", "=", "acc_max", ",", "\n", "add_curr_odom_position_constraint", "=", "True", ",", "\n", "add_curr_odom_velocity_constraint", "=", "True", ",", "\n", "viz_traj", "=", "viz_traj", ",", "\n", "vehicle_name", "=", "self", ".", "drone_name", ")", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.expert_planner_controller_callback": [[148, 197], ["soccer_datagen.DroneRacingDataGenerator.client.getMultirotorState", "math.sqrt", "soccer_datagen.DroneRacingDataGenerator.fly_to_next_gate_with_moveOnSpline", "soccer_datagen.DroneRacingDataGenerator.set_pose_of_gate_passed_before_the_last_one", "len", "print", "soccer_datagen.DroneRacingDataGenerator.get_next_generated_track", "soccer_datagen.DroneRacingDataGenerator.fly_to_next_gate_with_moveOnSpline", "len", "soccer_datagen.DroneRacingDataGenerator.stop_expert_planner_controller_thread"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.fly_to_next_gate_with_moveOnSpline", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.set_pose_of_gate_passed_before_the_last_one", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.get_next_generated_track", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.fly_to_next_gate_with_moveOnSpline", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.stop_expert_planner_controller_thread"], ["", "def", "expert_planner_controller_callback", "(", "self", ")", ":", "\n", "        ", "self", ".", "curr_multirotor_state", "=", "self", ".", "client", ".", "getMultirotorState", "(", ")", "\n", "airsim_xyz", "=", "self", ".", "curr_multirotor_state", ".", "kinematics_estimated", ".", "position", "\n", "self", ".", "curr_xyz", "=", "[", "airsim_xyz", ".", "x_val", ",", "airsim_xyz", ".", "y_val", ",", "airsim_xyz", ".", "z_val", "]", "\n", "self", ".", "got_odom", "=", "True", "\n", "\n", "if", "(", "(", "self", ".", "train_lap_idx", "==", "0", ")", "and", "(", "self", ".", "last_gate_passed_idx", "==", "-", "1", ")", ")", ":", "\n", "            ", "if", "(", "self", ".", "last_gate_idx_moveOnSpline_was_called_on", "==", "-", "1", ")", ":", "\n", "                ", "self", ".", "fly_to_next_gate_with_moveOnSpline", "(", ")", "\n", "self", ".", "last_gate_idx_moveOnSpline_was_called_on", "=", "0", "\n", "return", "\n", "\n", "# todo transcribe hackathon shitshow of lists to np arrays", "\n", "# todo this NOT foolproof. future self: check for passing inside or outside of gate.", "\n", "", "", "if", "(", "self", ".", "curr_track_gate_poses", "is", "not", "None", ")", ":", "\n", "            ", "dist_from_next_gate", "=", "math", ".", "sqrt", "(", "(", "self", ".", "curr_xyz", "[", "0", "]", "-", "self", ".", "curr_track_gate_poses", "[", "self", ".", "next_gate_idx", "]", ".", "position", ".", "x_val", ")", "**", "2", "\n", "+", "(", "self", ".", "curr_xyz", "[", "1", "]", "-", "self", ".", "curr_track_gate_poses", "[", "self", ".", "next_gate_idx", "]", ".", "position", ".", "y_val", ")", "**", "2", "\n", "+", "(", "self", ".", "curr_xyz", "[", "2", "]", "-", "self", ".", "curr_track_gate_poses", "[", "self", ".", "next_gate_idx", "]", ".", "position", ".", "z_val", ")", "**", "2", ")", "\n", "\n", "# print(self.last_gate_passed_idx, self.next_gate_idx, dist_from_next_gate)", "\n", "\n", "if", "dist_from_next_gate", "<", "self", ".", "gate_passed_thresh", ":", "\n", "                ", "self", ".", "last_gate_passed_idx", "+=", "1", "\n", "self", ".", "next_gate_idx", "+=", "1", "\n", "self", ".", "next_next_gate_idx", "+=", "1", "\n", "# self.set_pose_of_gate_just_passed()", "\n", "self", ".", "set_pose_of_gate_passed_before_the_last_one", "(", ")", "\n", "\n", "if", "self", ".", "next_next_gate_idx", ">=", "len", "(", "self", ".", "curr_track_gate_poses", ")", ":", "\n", "                    ", "self", ".", "next_next_gate_idx", "=", "0", "\n", "\n", "# if current lap is complete, generate next track", "\n", "", "if", "(", "self", ".", "last_gate_passed_idx", "==", "len", "(", "self", ".", "curr_track_gate_poses", ")", "-", "1", ")", ":", "\n", "                    ", "print", "(", "\"Generating next track\"", ")", "\n", "self", ".", "last_gate_passed_idx", "=", "-", "1", "\n", "self", ".", "next_gate_idx", "=", "0", "\n", "self", ".", "curr_track_gate_poses", "=", "self", ".", "next_track_gate_poses", "\n", "self", ".", "next_track_gate_poses", "=", "self", ".", "get_next_generated_track", "(", ")", "\n", "self", ".", "train_lap_idx", "+=", "1", "\n", "\n", "# if last gate of last training lap was just passed, chill out and stop the expert thread!", "\n", "# todo stopping thread from callback seems pretty stupid. watchdog?", "\n", "if", "(", "self", ".", "train_lap_idx", "==", "self", ".", "num_training_laps", "-", "1", ")", ":", "\n", "                        ", "self", ".", "stop_expert_planner_controller_thread", "(", ")", "\n", "\n", "# todo this is pretty ugly", "\n", "", "", "if", "(", "not", "(", "self", ".", "last_gate_idx_moveOnSpline_was_called_on", "==", "self", ".", "next_gate_idx", ")", ")", ":", "\n", "                    ", "self", ".", "fly_to_next_gate_with_moveOnSpline", "(", ")", "\n", "self", ".", "last_gate_idx_moveOnSpline_was_called_on", "=", "self", ".", "next_gate_idx", "\n", "# self.fly_to_next_gate_with_learner()", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.fly_to_next_gate_with_moveOnSpline": [[200, 219], ["soccer_datagen.DroneRacingDataGenerator.client.moveOnSplineAsync", "racing_utils.geom_utils.get_gate_facing_vector_from_quaternion", "soccer_datagen.DroneRacingDataGenerator.client.moveOnSplineVelConstraintsAsync"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.get_gate_facing_vector_from_quaternion"], ["", "", "", "", "def", "fly_to_next_gate_with_moveOnSpline", "(", "self", ")", ":", "\n", "# print(self.curr_track_gate_poses[self.next_gate_idx].position)", "\n", "# print(self.curr_track_gate_poses[self.next_next_gate_idx].position)", "\n", "        ", "if", "not", "self", ".", "perpendicular", ":", "\n", "            ", "self", ".", "last_future", "=", "self", ".", "client", ".", "moveOnSplineAsync", "(", "[", "self", ".", "curr_track_gate_poses", "[", "self", ".", "next_gate_idx", "]", ".", "position", "]", ",", "\n", "vel_max", "=", "self", ".", "vel_max", ",", "acc_max", "=", "self", ".", "acc_max", ",", "\n", "add_curr_odom_position_constraint", "=", "True", ",", "\n", "add_curr_odom_velocity_constraint", "=", "True", ",", "\n", "viz_traj", "=", "viz_traj", ",", "\n", "vehicle_name", "=", "self", ".", "drone_name", ")", "\n", "", "else", ":", "\n", "            ", "gate_vector", "=", "racing_utils", ".", "geom_utils", ".", "get_gate_facing_vector_from_quaternion", "(", "self", ".", "curr_track_gate_poses", "[", "self", ".", "next_gate_idx", "]", ".", "orientation", ",", "self", ".", "direction", ",", "scale", "=", "vel_max", "/", "1.5", ")", "\n", "self", ".", "last_future", "=", "self", ".", "client", ".", "moveOnSplineVelConstraintsAsync", "(", "[", "self", ".", "curr_track_gate_poses", "[", "self", ".", "next_gate_idx", "]", ".", "position", "]", ",", "\n", "[", "gate_vector", "]", ",", "\n", "vel_max", "=", "self", ".", "vel_max", ",", "acc_max", "=", "self", ".", "acc_max", ",", "\n", "add_curr_odom_position_constraint", "=", "True", ",", "\n", "add_curr_odom_velocity_constraint", "=", "True", ",", "\n", "viz_traj", "=", "viz_traj", ",", "\n", "vehicle_name", "=", "self", ".", "drone_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.join_all_pending_futures": [[221, 223], ["soccer_datagen.DroneRacingDataGenerator.last_future.join"], "methods", ["None"], ["", "", "def", "join_all_pending_futures", "(", "self", ")", ":", "\n", "        ", "self", ".", "last_future", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.get_next_generated_track": [[224, 233], ["racing_utils.trajectory_utils.generate_gate_poses", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.trajectory_utils.generate_gate_poses"], ["", "def", "get_next_generated_track", "(", "self", ")", ":", "\n", "# todo enable gate spawning in neurips environments for variable number of gates in training laps", "\n", "# self.next_track_gate_poses = self.track_generator.generate_gate_poses(num_gates=random.randint(6,10), race_course_radius=30.0, type_of_segment = \"circle\")", "\n", "        ", "return", "racing_utils", ".", "trajectory_utils", ".", "generate_gate_poses", "(", "num_gates", "=", "len", "(", "self", ".", "curr_track_gate_poses", ")", ",", "\n", "race_course_radius", "=", "self", ".", "race_course_radius", ",", "\n", "radius_noise", "=", "self", ".", "radius_noise", ",", "\n", "height_range", "=", "self", ".", "height_range", ",", "\n", "direction", "=", "self", ".", "direction", ",", "\n", "type_of_segment", "=", "\"circle\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.set_pose_of_gate_just_passed": [[234, 242], ["soccer_datagen.DroneRacingDataGenerator.client.simSetObjectPose", "time.sleep"], "methods", ["None"], ["", "def", "set_pose_of_gate_just_passed", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "last_gate_passed_idx", "==", "-", "1", ")", ":", "\n", "            ", "return", "\n", "", "self", ".", "client", ".", "simSetObjectPose", "(", "self", ".", "gate_object_names_sorted", "[", "self", ".", "last_gate_passed_idx", "]", ",", "self", ".", "next_track_gate_poses", "[", "self", ".", "last_gate_passed_idx", "]", ")", "\n", "# todo unhardcode 100+, ensure unique object ids or just set all non-gate objects to 0, and gates to range(self.next_track_gate_poses)... not needed for hackathon", "\n", "# self.client.simSetSegmentationObjectID(self.gate_object_names_sorted[self.last_gate_passed_idx], 100+self.last_gate_passed_idx);", "\n", "# todo do we really need this sleep", "\n", "time", ".", "sleep", "(", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.set_pose_of_gate_passed_before_the_last_one": [[243, 269], ["time.sleep", "print", "soccer_datagen.DroneRacingDataGenerator.client.simSetObjectPose", "print", "soccer_datagen.DroneRacingDataGenerator.client.simSetObjectPose", "print", "soccer_datagen.DroneRacingDataGenerator.client.simSetObjectPose"], "methods", ["None"], ["", "def", "set_pose_of_gate_passed_before_the_last_one", "(", "self", ")", ":", "\n", "        ", "gate_idx_to_move", "=", "self", ".", "last_gate_passed_idx", "-", "1", "\n", "\n", "# if last_gate passed was -1 or 0, it means the \"next\" track is already the \"current\" track. ", "\n", "\n", "if", "(", "self", ".", "train_lap_idx", ">", "0", ")", ":", "\n", "            ", "if", "(", "self", ".", "last_gate_passed_idx", "in", "[", "-", "1", ",", "0", "]", ")", ":", "\n", "                ", "print", "(", "\"last_gate_passed_idx\"", ",", "self", ".", "last_gate_passed_idx", ",", "\"moving gate idx from CURRENT track\"", ",", "gate_idx_to_move", ")", "\n", "self", ".", "client", ".", "simSetObjectPose", "(", "self", ".", "gate_object_names_sorted", "[", "gate_idx_to_move", "]", ",", "self", ".", "curr_track_gate_poses", "[", "gate_idx_to_move", "]", ")", "\n", "return", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"last_gate_passed_idx\"", ",", "self", ".", "last_gate_passed_idx", ",", "\"moving gate idx from NEXT track\"", ",", "gate_idx_to_move", ")", "\n", "self", ".", "client", ".", "simSetObjectPose", "(", "self", ".", "gate_object_names_sorted", "[", "gate_idx_to_move", "]", ",", "self", ".", "next_track_gate_poses", "[", "gate_idx_to_move", "]", ")", "\n", "return", "\n", "\n", "", "", "if", "(", "self", ".", "train_lap_idx", "==", "0", ")", ":", "\n", "            ", "if", "(", "self", ".", "last_gate_passed_idx", "in", "[", "-", "1", ",", "0", "]", ")", ":", "\n", "                ", "return", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"last_gate_passed_idx\"", ",", "self", ".", "last_gate_passed_idx", ",", "\"moving gate idx from NEXT track\"", ",", "gate_idx_to_move", ")", "\n", "self", ".", "client", ".", "simSetObjectPose", "(", "self", ".", "gate_object_names_sorted", "[", "gate_idx_to_move", "]", ",", "self", ".", "next_track_gate_poses", "[", "gate_idx_to_move", "]", ")", "\n", "\n", "# todo unhardcode 100+, ensure unique object ids or just set all non-gate objects to 0, and gates to range(self.next_track_gate_poses)... not needed for hackathon", "\n", "# self.client.simSetSegmentationObjectID(self.gate_object_names_sorted[self.last_gate_passed_idx], 100+self.last_gate_passed_idx);", "\n", "# todo do we really need this sleep", "\n", "", "", "time", ".", "sleep", "(", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.start_expert_planner_controller_thread": [[270, 275], ["soccer_datagen.DroneRacingDataGenerator.expert_planner_controller_thread.start", "print"], "methods", ["None"], ["", "def", "start_expert_planner_controller_thread", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_expert_planner_controller_thread_active", ":", "\n", "            ", "self", ".", "is_expert_planner_controller_thread_active", "=", "True", "\n", "self", ".", "expert_planner_controller_thread", ".", "start", "(", ")", "\n", "print", "(", "\"Started expert_planner_controller thread\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.stop_expert_planner_controller_thread": [[276, 281], ["soccer_datagen.DroneRacingDataGenerator.expert_planner_controller_thread.join", "print"], "methods", ["None"], ["", "", "def", "stop_expert_planner_controller_thread", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_expert_planner_controller_thread_active", ":", "\n", "            ", "self", ".", "is_expert_planner_controller_thread_active", "=", "False", "\n", "self", ".", "expert_planner_controller_thread", ".", "join", "(", ")", "\n", "print", "(", "\"Stopped expert_planner_controller thread\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.set_num_training_laps": [[282, 284], ["None"], "methods", ["None"], ["", "", "def", "set_num_training_laps", "(", "self", ",", "num_training_laps", ")", ":", "\n", "        ", "self", ".", "num_training_laps", "=", "num_training_laps", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.start_training_data_generator": [[285, 297], ["soccer_datagen.DroneRacingDataGenerator.load_level", "soccer_datagen.DroneRacingDataGenerator.client.enableApiControl", "time.sleep", "soccer_datagen.DroneRacingDataGenerator.client.armDisarm", "time.sleep", "soccer_datagen.DroneRacingDataGenerator.client.setTrajectoryTrackerGains", "time.sleep", "soccer_datagen.DroneRacingDataGenerator.takeoff_with_moveOnSpline", "soccer_datagen.DroneRacingDataGenerator.set_num_training_laps", "soccer_datagen.DroneRacingDataGenerator.start_expert_planner_controller_thread", "airsimdroneracingvae.TrajectoryTrackerGains().to_list", "airsimdroneracingvae.TrajectoryTrackerGains().to_list", "airsimdroneracingvae.TrajectoryTrackerGains().to_list", "airsimdroneracingvae.TrajectoryTrackerGains().to_list", "airsimdroneracingvae.TrajectoryTrackerGains().to_list", "airsimdroneracingvae.TrajectoryTrackerGains().to_list", "airsimdroneracingvae.TrajectoryTrackerGains().to_list", "airsimdroneracingvae.TrajectoryTrackerGains().to_list", "airsimdroneracingvae.TrajectoryTrackerGains().to_list", "airsimdroneracingvae.TrajectoryTrackerGains", "airsimdroneracingvae.TrajectoryTrackerGains", "airsimdroneracingvae.TrajectoryTrackerGains", "airsimdroneracingvae.TrajectoryTrackerGains", "airsimdroneracingvae.TrajectoryTrackerGains", "airsimdroneracingvae.TrajectoryTrackerGains", "airsimdroneracingvae.TrajectoryTrackerGains", "airsimdroneracingvae.TrajectoryTrackerGains", "airsimdroneracingvae.TrajectoryTrackerGains"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.load_level", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.takeoff_with_moveOnSpline", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.set_num_training_laps", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.action_generator.soccer_datagen.DroneRacingDataGenerator.start_expert_planner_controller_thread"], ["", "def", "start_training_data_generator", "(", "self", ",", "num_training_laps", "=", "100", ",", "level_name", "=", "'Soccer_Field_Easy'", ")", ":", "\n", "        ", "self", ".", "load_level", "(", "level_name", ")", "\n", "# todo encapsulate in functions", "\n", "self", ".", "client", ".", "enableApiControl", "(", "True", ",", "vehicle_name", "=", "self", ".", "drone_name", ")", "\n", "time", ".", "sleep", "(", "0.01", ")", "\n", "self", ".", "client", ".", "armDisarm", "(", "True", ",", "vehicle_name", "=", "self", ".", "drone_name", ")", "\n", "time", ".", "sleep", "(", "0.01", ")", "\n", "self", ".", "client", ".", "setTrajectoryTrackerGains", "(", "airsimdroneracingvae", ".", "TrajectoryTrackerGains", "(", ")", ".", "to_list", "(", ")", ",", "vehicle_name", "=", "self", ".", "drone_name", ")", "\n", "time", ".", "sleep", "(", "0.01", ")", "\n", "self", ".", "takeoff_with_moveOnSpline", "(", "takeoff_height", "=", "-", "2", ",", "vel_max", "=", "self", ".", "vel_max", ",", "acc_max", "=", "self", ".", "acc_max", ")", "\n", "self", ".", "set_num_training_laps", "(", "num_training_laps", ")", "\n", "self", ".", "start_expert_planner_controller_thread", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.img_generator.pose_sampler.PoseSampler.__init__": [[37, 50], ["os.path.join", "airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "pose_sampler.PoseSampler.client.confirmConnection", "pose_sampler.PoseSampler.client.simLoadLevel", "time.sleep", "airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "airsimdroneracingvae.MultirotorClient", "pose_sampler.PoseSampler.configureEnvironment"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.img_generator.pose_sampler.PoseSampler.configureEnvironment"], ["    ", "def", "__init__", "(", "self", ",", "num_samples", ",", "dataset_path", ",", "with_gate", "=", "True", ")", ":", "\n", "        ", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "base_path", "=", "dataset_path", "\n", "self", ".", "csv_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_path", ",", "'gate_training_data.csv'", ")", "\n", "self", ".", "curr_idx", "=", "0", "\n", "self", ".", "with_gate", "=", "with_gate", "\n", "self", ".", "client", "=", "airsim", ".", "MultirotorClient", "(", ")", "\n", "\n", "self", ".", "client", ".", "confirmConnection", "(", ")", "\n", "self", ".", "client", ".", "simLoadLevel", "(", "'Soccer_Field_Easy'", ")", "\n", "time", ".", "sleep", "(", "4", ")", "\n", "self", ".", "client", "=", "airsim", ".", "MultirotorClient", "(", ")", "\n", "self", ".", "configureEnvironment", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.img_generator.pose_sampler.PoseSampler.update": [[51, 76], ["racing_utils.geom_utils.randomQuadPose", "pose_sampler.PoseSampler.client.simSetVehiclePose", "racing_utils.geom_utils.randomGatePose", "pose_sampler.PoseSampler.writeImgToFile", "pose_sampler.PoseSampler.writePosToFile", "pose_sampler.PoseSampler.client.simSetObjectPose", "pose_sampler.PoseSampler.client.simGetImages", "airsimdroneracingvae.ImageRequest", "airsimdroneracingvae.ImageRequest", "airsimdroneracingvae.ImageRequest"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomQuadPose", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_utils.geom_utils.randomGatePose", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.img_generator.pose_sampler.PoseSampler.writeImgToFile", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.img_generator.pose_sampler.PoseSampler.writePosToFile"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "'''\n        convetion of names:\n        p_a_b: pose of frame b relative to frame a\n        t_a_b: translation vector from a to b\n        q_a_b: rotation quaternion from a to b\n        o: origin\n        b: UAV body frame\n        g: gate frame\n        '''", "\n", "# create and set pose for the quad", "\n", "p_o_b", ",", "phi_base", "=", "racing_utils", ".", "geom_utils", ".", "randomQuadPose", "(", "UAV_X_RANGE", ",", "UAV_Y_RANGE", ",", "UAV_Z_RANGE", ",", "UAV_YAW_RANGE", ",", "UAV_PITCH_RANGE", ",", "UAV_ROLL_RANGE", ")", "\n", "self", ".", "client", ".", "simSetVehiclePose", "(", "p_o_b", ",", "True", ")", "\n", "# create and set gate pose relative to the quad", "\n", "p_o_g", ",", "r", ",", "theta", ",", "psi", ",", "phi_rel", "=", "racing_utils", ".", "geom_utils", ".", "randomGatePose", "(", "p_o_b", ",", "phi_base", ",", "R_RANGE", ",", "CAM_FOV", ",", "correction", ")", "\n", "# self.client.simSetObjectPose(self.tgt_name, p_o_g_new, True)", "\n", "if", "self", ".", "with_gate", ":", "\n", "            ", "self", ".", "client", ".", "simSetObjectPose", "(", "self", ".", "tgt_name", ",", "p_o_g", ",", "True", ")", "\n", "# self.client.plot_tf([p_o_g], duration=20.0)", "\n", "# request quad img from AirSim", "\n", "", "image_response", "=", "self", ".", "client", ".", "simGetImages", "(", "[", "airsim", ".", "ImageRequest", "(", "'0'", ",", "airsim", ".", "ImageType", ".", "Scene", ",", "False", ",", "False", ")", "]", ")", "[", "0", "]", "\n", "# save all the necessary information to file", "\n", "self", ".", "writeImgToFile", "(", "image_response", ")", "\n", "self", ".", "writePosToFile", "(", "r", ",", "theta", ",", "psi", ",", "phi_rel", ")", "\n", "self", ".", "curr_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.img_generator.pose_sampler.PoseSampler.configureEnvironment": [[77, 91], ["pose_sampler.PoseSampler.client.simListSceneObjects", "os.path.exists", "pose_sampler.PoseSampler.client.simDestroyObject", "time.sleep", "pose_sampler.PoseSampler.client.simSpawnObject", "open", "open", "airsimdroneracingvae.types.Pose", "airsimdroneracingvae.types.Pose", "airsimdroneracingvae.types.Pose", "airsimdroneracingvae.types.Vector3r", "airsimdroneracingvae.types.Vector3r", "airsimdroneracingvae.types.Vector3r"], "methods", ["None"], ["", "def", "configureEnvironment", "(", "self", ")", ":", "\n", "        ", "for", "gate_object", "in", "self", ".", "client", ".", "simListSceneObjects", "(", "\".*[Gg]ate.*\"", ")", ":", "\n", "            ", "self", ".", "client", ".", "simDestroyObject", "(", "gate_object", ")", "\n", "time", ".", "sleep", "(", "0.05", ")", "\n", "", "if", "self", ".", "with_gate", ":", "\n", "            ", "self", ".", "tgt_name", "=", "self", ".", "client", ".", "simSpawnObject", "(", "\"gate\"", ",", "\"RedGate16x16\"", ",", "Pose", "(", "position_val", "=", "Vector3r", "(", "0", ",", "0", ",", "15", ")", ")", ",", "0.75", ")", "\n", "# self.tgt_name = self.client.simSpawnObject(\"gate\", \"CheckeredGate16x16\", Pose(position_val=Vector3r(0,0,15)))", "\n", "", "else", ":", "\n", "            ", "self", ".", "tgt_name", "=", "\"empty_target\"", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "csv_path", ")", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "self", ".", "csv_path", ",", "\"a\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "self", ".", "csv_path", ",", "\"w\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.img_generator.pose_sampler.PoseSampler.writeImgToFile": [[93, 100], ["len", "numpy.fromstring", "numpy.fromstring.reshape", "cv2.imwrite", "print", "os.path.join", "str().zfill", "len", "str", "str"], "methods", ["None"], ["", "", "def", "writeImgToFile", "(", "self", ",", "image_response", ")", ":", "\n", "        ", "if", "len", "(", "image_response", ".", "image_data_uint8", ")", "==", "image_response", ".", "width", "*", "image_response", ".", "height", "*", "3", ":", "\n", "            ", "img1d", "=", "np", ".", "fromstring", "(", "image_response", ".", "image_data_uint8", ",", "dtype", "=", "np", ".", "uint8", ")", "# get numpy array", "\n", "img_rgb", "=", "img1d", ".", "reshape", "(", "image_response", ".", "height", ",", "image_response", ".", "width", ",", "3", ")", "# reshape array to 4 channel image array H X W X 3", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "base_path", ",", "'images'", ",", "str", "(", "self", ".", "curr_idx", ")", ".", "zfill", "(", "len", "(", "str", "(", "self", ".", "num_samples", ")", ")", ")", "+", "'.png'", ")", ",", "img_rgb", ")", "# write to png", "\n", "", "else", ":", "\n", "            ", "print", "(", "'ERROR IN IMAGE SIZE -- NOT SUPPOSED TO HAPPEN'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.img_generator.pose_sampler.PoseSampler.writePosToFile": [[102, 105], ["pose_sampler.PoseSampler.file.write"], "methods", ["None"], ["", "", "def", "writePosToFile", "(", "self", ",", "r", ",", "theta", ",", "psi", ",", "phi_rel", ")", ":", "\n", "        ", "data_string", "=", "'{0} {1} {2} {3}\\n'", ".", "format", "(", "r", ",", "theta", ",", "psi", ",", "phi_rel", ")", "\n", "self", ".", "file", ".", "write", "(", "data_string", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.dronet.Dronet.__init__": [[6, 10], ["tensorflow.keras.Model.__init__", "dronet.Dronet.create_model"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.__init__", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.create_model"], ["    ", "def", "__init__", "(", "self", ",", "num_outputs", ",", "include_top", "=", "True", ")", ":", "\n", "        ", "super", "(", "Dronet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "include_top", "=", "include_top", "\n", "self", ".", "create_model", "(", "num_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.dronet.Dronet.call": [[11, 68], ["dronet.Dronet.conv0", "dronet.Dronet.max0", "dronet.Dronet.bn0", "dronet.Dronet.conv1", "dronet.Dronet.bn1", "dronet.Dronet.conv2", "dronet.Dronet.conv3", "tensorflow.keras.layers.add", "dronet.Dronet.bn2", "dronet.Dronet.conv4", "dronet.Dronet.bn3", "dronet.Dronet.conv5", "dronet.Dronet.conv6", "tensorflow.keras.layers.add", "dronet.Dronet.bn4", "dronet.Dronet.conv7", "dronet.Dronet.bn5", "dronet.Dronet.conv8", "dronet.Dronet.conv9", "tensorflow.keras.layers.add", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Flatten", "dronet.Dronet.dense0", "dronet.Dronet.dense1", "dronet.Dronet.dense2", "tensorflow.keras.layers.Activation"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "img", ")", ":", "\n", "# Input", "\n", "        ", "x1", "=", "self", ".", "conv0", "(", "img", ")", "\n", "x1", "=", "self", ".", "max0", "(", "x1", ")", "\n", "\n", "# First residual block", "\n", "x2", "=", "self", ".", "bn0", "(", "x1", ")", "\n", "# x2 = x1", "\n", "x2", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x2", ")", "\n", "x2", "=", "self", ".", "conv1", "(", "x2", ")", "\n", "\n", "x2", "=", "self", ".", "bn1", "(", "x2", ")", "\n", "x2", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x2", ")", "\n", "x2", "=", "self", ".", "conv2", "(", "x2", ")", "\n", "\n", "x1", "=", "self", ".", "conv3", "(", "x1", ")", "\n", "x3", "=", "tf", ".", "keras", ".", "layers", ".", "add", "(", "[", "x1", ",", "x2", "]", ")", "\n", "\n", "# Second residual block", "\n", "x4", "=", "self", ".", "bn2", "(", "x3", ")", "\n", "# x4 = x3", "\n", "x4", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x4", ")", "\n", "x4", "=", "self", ".", "conv4", "(", "x4", ")", "\n", "\n", "x4", "=", "self", ".", "bn3", "(", "x4", ")", "\n", "x4", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x4", ")", "\n", "x4", "=", "self", ".", "conv5", "(", "x4", ")", "\n", "\n", "x3", "=", "self", ".", "conv6", "(", "x3", ")", "\n", "x5", "=", "tf", ".", "keras", ".", "layers", ".", "add", "(", "[", "x3", ",", "x4", "]", ")", "\n", "\n", "# Third residual block", "\n", "x6", "=", "self", ".", "bn4", "(", "x5", ")", "\n", "# x6 = x5", "\n", "x6", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x6", ")", "\n", "x6", "=", "self", ".", "conv7", "(", "x6", ")", "\n", "\n", "x6", "=", "self", ".", "bn5", "(", "x6", ")", "\n", "x6", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x6", ")", "\n", "x6", "=", "self", ".", "conv8", "(", "x6", ")", "\n", "\n", "x5", "=", "self", ".", "conv9", "(", "x5", ")", "\n", "x7", "=", "tf", ".", "keras", ".", "layers", ".", "add", "(", "[", "x5", ",", "x6", "]", ")", "\n", "\n", "x", "=", "tf", ".", "keras", ".", "layers", ".", "Flatten", "(", ")", "(", "x7", ")", "\n", "\n", "if", "self", ".", "include_top", ":", "\n", "            ", "x", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "# x = tf.keras.layers.Dropout(0.5)(x)", "\n", "x", "=", "self", ".", "dense0", "(", "x", ")", "\n", "x", "=", "self", ".", "dense1", "(", "x", ")", "\n", "gate_pose", "=", "self", ".", "dense2", "(", "x", ")", "\n", "# phi_rel = self.dense_phi_rel(x)", "\n", "# gate_pose = tf.concat([gate_pose, phi_rel], 1)", "\n", "return", "gate_pose", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.dronet.Dronet.create_model": [[69, 98], ["print", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "print", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "create_model", "(", "self", ",", "num_outputs", ")", ":", "\n", "        ", "print", "(", "'[Dronet] Starting dronet'", ")", "\n", "\n", "self", ".", "max0", "=", "tf", ".", "keras", ".", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "# default pool_size='2', strides=2", "\n", "\n", "self", ".", "bn0", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "self", ".", "bn1", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "self", ".", "bn2", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "self", ".", "bn3", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "self", ".", "bn4", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "self", ".", "bn5", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "\n", "self", ".", "conv0", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ")", "\n", "self", ".", "conv1", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv2", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv3", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "1", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ")", "\n", "self", ".", "conv4", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv5", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv6", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "1", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ")", "\n", "self", ".", "conv7", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv8", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv9", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "1", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ")", "\n", "\n", "self", ".", "dense0", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "64", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "dense1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "32", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "dense2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "num_outputs", ",", "activation", "=", "'linear'", ")", "\n", "# self.dense_phi_rel = tf.keras.layers.Dense(units=2, activation='tanh')", "\n", "\n", "print", "(", "'[Dronet] Done with dronet'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.decoders.ImgDecoder.__init__": [[6, 9], ["tensorflow.keras.Model.__init__", "decoders.ImgDecoder.create_model"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.__init__", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.create_model"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImgDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.decoders.ImgDecoder.call": [[10, 12], ["decoders.ImgDecoder.network"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.decoders.ImgDecoder.create_model": [[13, 38], ["print", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.Sequential", "print"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "        ", "print", "(", "'[ImgDecoder] Starting create_model'", ")", "\n", "dense", "=", "Dense", "(", "units", "=", "1024", ",", "name", "=", "'p_img_dense'", ")", "\n", "reshape", "=", "Reshape", "(", "(", "1", ",", "1", ",", "1024", ")", ")", "\n", "\n", "# for 64x64 img", "\n", "deconv1", "=", "Conv2DTranspose", "(", "filters", "=", "128", ",", "kernel_size", "=", "4", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ",", "activation", "=", "'relu'", ")", "\n", "deconv2", "=", "Conv2DTranspose", "(", "filters", "=", "64", ",", "kernel_size", "=", "5", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ",", "activation", "=", "'relu'", ",", "dilation_rate", "=", "3", ")", "\n", "deconv3", "=", "Conv2DTranspose", "(", "filters", "=", "64", ",", "kernel_size", "=", "6", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ",", "activation", "=", "'relu'", ",", "dilation_rate", "=", "2", ")", "\n", "deconv4", "=", "Conv2DTranspose", "(", "filters", "=", "32", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ",", "activation", "=", "'relu'", ",", "dilation_rate", "=", "1", ")", "\n", "deconv5", "=", "Conv2DTranspose", "(", "filters", "=", "16", ",", "kernel_size", "=", "5", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ",", "activation", "=", "'relu'", ",", "dilation_rate", "=", "1", ")", "\n", "# deconv6 = Conv2DTranspose(filters=8, kernel_size=6, strides=2, padding='valid', activation='relu')", "\n", "deconv7", "=", "Conv2DTranspose", "(", "filters", "=", "3", ",", "kernel_size", "=", "6", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ",", "activation", "=", "'tanh'", ")", "\n", "self", ".", "network", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "dense", ",", "\n", "reshape", ",", "\n", "deconv1", ",", "\n", "deconv2", ",", "\n", "deconv3", ",", "\n", "deconv4", ",", "\n", "deconv5", ",", "\n", "deconv7", "]", ",", "\n", "name", "=", "'p_img'", ")", "\n", "\n", "print", "(", "'[ImgDecoder] Done with create_model'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.decoders.GateDecoder.__init__": [[40, 43], ["tensorflow.keras.Model.__init__", "decoders.GateDecoder.create_model"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.__init__", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.create_model"], ["    ", "def", "__init__", "(", "self", ",", "gate_dim", ")", ":", "\n", "        ", "super", "(", "GateDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "create_model", "(", "gate_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.decoders.GateDecoder.call": [[44, 46], ["decoders.GateDecoder.network"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.decoders.GateDecoder.create_model": [[47, 63], ["print", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.Sequential", "print"], "methods", ["None"], ["", "def", "create_model", "(", "self", ",", "gate_dim", ")", ":", "\n", "        ", "print", "(", "'[GateDecoder] Starting create_model'", ")", "\n", "dense0", "=", "Dense", "(", "units", "=", "512", ",", "activation", "=", "'relu'", ")", "\n", "dense1", "=", "Dense", "(", "units", "=", "128", ",", "activation", "=", "'relu'", ")", "\n", "dense2", "=", "Dense", "(", "units", "=", "64", ",", "activation", "=", "'relu'", ")", "\n", "dense3", "=", "Dense", "(", "units", "=", "16", ",", "activation", "=", "'relu'", ")", "\n", "dense4", "=", "Dense", "(", "units", "=", "gate_dim", ",", "activation", "=", "'linear'", ")", "\n", "self", ".", "network", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "# dense0,", "\n", "# dense1,", "\n", "# dense2,", "\n", "# dense3,", "\n", "dense4", "]", ",", "\n", "name", "=", "'p_gate'", ")", "\n", "\n", "print", "(", "'[GateDecoder] Done with create_model'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.Cmvae.__init__": [[12, 21], ["tensorflow.keras.Model.__init__", "dronet.Dronet", "decoders.ImgDecoder", "decoders.GateDecoder", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_z", ",", "gate_dim", "=", "4", ",", "res", "=", "96", ",", "trainable_model", "=", "True", ")", ":", "\n", "        ", "super", "(", "Cmvae", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# create the 3 base models:", "\n", "self", ".", "q_img", "=", "dronet", ".", "Dronet", "(", "num_outputs", "=", "n_z", "*", "2", ",", "include_top", "=", "True", ")", "\n", "self", ".", "p_img", "=", "decoders", ".", "ImgDecoder", "(", ")", "\n", "self", ".", "p_gate", "=", "decoders", ".", "GateDecoder", "(", "gate_dim", "=", "gate_dim", ")", "\n", "# Create sampler", "\n", "self", ".", "mean_params", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", ":", "n_z", "]", ")", "\n", "self", ".", "stddev_params", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "n_z", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.Cmvae.call": [[22, 44], ["cmvae.Cmvae.q_img", "cmvae.Cmvae.mean_params", "tensorflow.math.exp", "tensorflow.keras.backend.random_normal", "tensorflow.shape", "cmvae.Cmvae.p_img", "cmvae.Cmvae.p_gate", "cmvae.Cmvae.stddev_params", "cmvae.Cmvae.p_img", "cmvae.Cmvae.p_gate"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "mode", ")", ":", "\n", "# Possible modes for reconstruction:", "\n", "# 0: img -> img + gate", "\n", "# 1: img -> img", "\n", "# 2: img -> gate", "\n", "        ", "x", "=", "self", ".", "q_img", "(", "x", ")", "\n", "means", "=", "self", ".", "mean_params", "(", "x", ")", "\n", "stddev", "=", "tf", ".", "math", ".", "exp", "(", "0.5", "*", "self", ".", "stddev_params", "(", "x", ")", ")", "\n", "eps", "=", "random_normal", "(", "tf", ".", "shape", "(", "stddev", ")", ")", "\n", "z", "=", "means", "+", "eps", "*", "stddev", "\n", "if", "mode", "==", "0", ":", "\n", "            ", "img_recon", "=", "self", ".", "p_img", "(", "z", ")", "\n", "gate_recon", "=", "self", ".", "p_gate", "(", "z", ")", "\n", "return", "img_recon", ",", "gate_recon", ",", "means", ",", "stddev", ",", "z", "\n", "", "elif", "mode", "==", "1", ":", "\n", "            ", "img_recon", "=", "self", ".", "p_img", "(", "z", ")", "\n", "gate_recon", "=", "False", "\n", "return", "img_recon", ",", "gate_recon", ",", "means", ",", "stddev", ",", "z", "\n", "", "elif", "mode", "==", "2", ":", "\n", "            ", "img_recon", "=", "False", "\n", "gate_recon", "=", "self", ".", "p_gate", "(", "z", ")", "\n", "return", "img_recon", ",", "gate_recon", ",", "means", ",", "stddev", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.Cmvae.encode": [[45, 52], ["cmvae.Cmvae.q_img", "cmvae.Cmvae.mean_params", "tensorflow.math.exp", "tensorflow.keras.backend.random_normal", "tensorflow.shape", "cmvae.Cmvae.stddev_params"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "q_img", "(", "x", ")", "\n", "means", "=", "self", ".", "mean_params", "(", "x", ")", "\n", "stddev", "=", "tf", ".", "math", ".", "exp", "(", "0.5", "*", "self", ".", "stddev_params", "(", "x", ")", ")", "\n", "eps", "=", "random_normal", "(", "tf", ".", "shape", "(", "stddev", ")", ")", "\n", "z", "=", "means", "+", "eps", "*", "stddev", "\n", "return", "z", ",", "means", ",", "stddev", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.Cmvae.decode": [[53, 70], ["cmvae.Cmvae.p_img", "cmvae.Cmvae.p_gate", "cmvae.Cmvae.p_img", "cmvae.Cmvae.p_gate"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ",", "mode", ")", ":", "\n", "# Possible modes for reconstruction:", "\n", "# 0: z -> img + gate", "\n", "# 1: z -> img", "\n", "# 2: z -> gate", "\n", "        ", "if", "mode", "==", "0", ":", "\n", "            ", "img_recon", "=", "self", ".", "p_img", "(", "z", ")", "\n", "gate_recon", "=", "self", ".", "p_gate", "(", "z", ")", "\n", "return", "img_recon", ",", "gate_recon", "\n", "", "elif", "mode", "==", "1", ":", "\n", "            ", "img_recon", "=", "self", ".", "p_img", "(", "z", ")", "\n", "gate_recon", "=", "False", "\n", "return", "img_recon", ",", "gate_recon", "\n", "", "elif", "mode", "==", "2", ":", "\n", "            ", "img_recon", "=", "False", "\n", "gate_recon", "=", "self", ".", "p_gate", "(", "z", ")", "\n", "return", "img_recon", ",", "gate_recon", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.CmvaeDirect.__init__": [[73, 89], ["tensorflow.keras.Model.__init__", "dronet.Dronet", "decoders.ImgDecoder", "transformer.NonLinearTransformer", "transformer.NonLinearTransformer", "transformer.NonLinearTransformer", "transformer.NonLinearTransformer", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_z", ",", "gate_dim", "=", "4", ",", "res", "=", "96", ",", "trainable_model", "=", "True", ")", ":", "\n", "        ", "super", "(", "CmvaeDirect", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# create the base models:", "\n", "self", ".", "q_img", "=", "dronet", ".", "Dronet", "(", "num_outputs", "=", "n_z", "*", "2", ",", "include_top", "=", "True", ")", "\n", "self", ".", "p_img", "=", "decoders", ".", "ImgDecoder", "(", ")", "\n", "self", ".", "p_R", "=", "transformer", ".", "NonLinearTransformer", "(", ")", "\n", "self", ".", "p_Theta", "=", "transformer", ".", "NonLinearTransformer", "(", ")", "\n", "self", ".", "p_Psi", "=", "transformer", ".", "NonLinearTransformer", "(", ")", "\n", "self", ".", "p_Phi", "=", "transformer", ".", "NonLinearTransformer", "(", ")", "\n", "# Create sampler", "\n", "self", ".", "mean_params", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", ":", "n_z", "]", ")", "\n", "self", ".", "stddev_params", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "n_z", ":", "]", ")", "\n", "self", ".", "R_params", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "0", "]", ")", "\n", "self", ".", "Theta_params", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "1", "]", ")", "\n", "self", ".", "Psi_params", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "2", "]", ")", "\n", "self", ".", "Phi_params", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.CmvaeDirect.call": [[90, 113], ["cmvae.CmvaeDirect.q_img", "cmvae.CmvaeDirect.mean_params", "tensorflow.math.exp", "tensorflow.keras.backend.random_normal", "cmvae.CmvaeDirect.extract_gate_params", "tensorflow.shape", "tensorflow.keras.layers.concatenate", "cmvae.CmvaeDirect.p_img", "cmvae.CmvaeDirect.stddev_params", "cmvae.CmvaeDirect.p_img", "cmvae.CmvaeDirect.p_R", "cmvae.CmvaeDirect.p_Theta", "cmvae.CmvaeDirect.p_Psi", "cmvae.CmvaeDirect.p_Phi", "tensorflow.keras.layers.concatenate", "cmvae.CmvaeDirect.p_R", "cmvae.CmvaeDirect.p_Theta", "cmvae.CmvaeDirect.p_Psi", "cmvae.CmvaeDirect.p_Phi"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.CmvaeDirect.extract_gate_params"], ["", "def", "call", "(", "self", ",", "x", ",", "mode", ")", ":", "\n", "# Possible modes for reconstruction:", "\n", "# 0: img -> img + gate", "\n", "# 1: img -> img", "\n", "# 2: img -> gate", "\n", "        ", "x", "=", "self", ".", "q_img", "(", "x", ")", "\n", "means", "=", "self", ".", "mean_params", "(", "x", ")", "\n", "stddev", "=", "tf", ".", "math", ".", "exp", "(", "0.5", "*", "self", ".", "stddev_params", "(", "x", ")", ")", "\n", "eps", "=", "random_normal", "(", "tf", ".", "shape", "(", "stddev", ")", ")", "\n", "z", "=", "means", "+", "eps", "*", "stddev", "\n", "r_params", ",", "theta_params", ",", "psi_params", ",", "phi_params", "=", "self", ".", "extract_gate_params", "(", "z", ")", "\n", "if", "mode", "==", "0", ":", "\n", "            ", "gate_recon", "=", "tf", ".", "keras", ".", "layers", ".", "concatenate", "(", "[", "self", ".", "p_R", "(", "r_params", ")", ",", "self", ".", "p_Theta", "(", "theta_params", ")", ",", "self", ".", "p_Psi", "(", "psi_params", ")", ",", "self", ".", "p_Phi", "(", "phi_params", ")", "]", ",", "axis", "=", "1", ")", "\n", "img_recon", "=", "self", ".", "p_img", "(", "z", ")", "\n", "return", "img_recon", ",", "gate_recon", ",", "means", ",", "stddev", ",", "z", "\n", "", "elif", "mode", "==", "1", ":", "\n", "            ", "img_recon", "=", "self", ".", "p_img", "(", "z", ")", "\n", "gate_recon", "=", "False", "\n", "return", "img_recon", ",", "gate_recon", ",", "means", ",", "stddev", ",", "z", "\n", "", "elif", "mode", "==", "2", ":", "\n", "            ", "img_recon", "=", "False", "\n", "gate_recon", "=", "tf", ".", "keras", ".", "layers", ".", "concatenate", "(", "[", "self", ".", "p_R", "(", "r_params", ")", ",", "self", ".", "p_Theta", "(", "theta_params", ")", ",", "self", ".", "p_Psi", "(", "psi_params", ")", ",", "self", ".", "p_Phi", "(", "phi_params", ")", "]", ",", "axis", "=", "1", ")", "\n", "return", "img_recon", ",", "gate_recon", ",", "means", ",", "stddev", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.CmvaeDirect.encode": [[114, 121], ["cmvae.CmvaeDirect.q_img", "cmvae.CmvaeDirect.mean_params", "tensorflow.math.exp", "tensorflow.keras.backend.random_normal", "tensorflow.shape", "cmvae.CmvaeDirect.stddev_params"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "q_img", "(", "x", ")", "\n", "means", "=", "self", ".", "mean_params", "(", "x", ")", "\n", "stddev", "=", "tf", ".", "math", ".", "exp", "(", "0.5", "*", "self", ".", "stddev_params", "(", "x", ")", ")", "\n", "eps", "=", "random_normal", "(", "tf", ".", "shape", "(", "stddev", ")", ")", "\n", "z", "=", "means", "+", "eps", "*", "stddev", "\n", "return", "z", ",", "means", ",", "stddev", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.CmvaeDirect.decode": [[122, 140], ["cmvae.CmvaeDirect.extract_gate_params", "tensorflow.keras.layers.concatenate", "cmvae.CmvaeDirect.p_img", "cmvae.CmvaeDirect.p_img", "cmvae.CmvaeDirect.p_R", "cmvae.CmvaeDirect.p_Theta", "cmvae.CmvaeDirect.p_Psi", "cmvae.CmvaeDirect.p_Phi", "tensorflow.keras.layers.concatenate", "cmvae.CmvaeDirect.p_R", "cmvae.CmvaeDirect.p_Theta", "cmvae.CmvaeDirect.p_Psi", "cmvae.CmvaeDirect.p_Phi"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.CmvaeDirect.extract_gate_params"], ["", "def", "decode", "(", "self", ",", "z", ",", "mode", ")", ":", "\n", "# Possible modes for reconstruction:", "\n", "# 0: z -> img + gate", "\n", "# 1: z -> img", "\n", "# 2: z -> gate", "\n", "        ", "r_params", ",", "theta_params", ",", "psi_params", ",", "phi_params", "=", "self", ".", "extract_gate_params", "(", "z", ")", "\n", "if", "mode", "==", "0", ":", "\n", "            ", "gate_recon", "=", "tf", ".", "keras", ".", "layers", ".", "concatenate", "(", "[", "self", ".", "p_R", "(", "r_params", ")", ",", "self", ".", "p_Theta", "(", "theta_params", ")", ",", "self", ".", "p_Psi", "(", "psi_params", ")", ",", "self", ".", "p_Phi", "(", "phi_params", ")", "]", ",", "axis", "=", "1", ")", "\n", "img_recon", "=", "self", ".", "p_img", "(", "z", ")", "\n", "return", "img_recon", ",", "gate_recon", "\n", "", "elif", "mode", "==", "1", ":", "\n", "            ", "img_recon", "=", "self", ".", "p_img", "(", "z", ")", "\n", "gate_recon", "=", "False", "\n", "return", "img_recon", ",", "gate_recon", "\n", "", "elif", "mode", "==", "2", ":", "\n", "            ", "gate_recon", "=", "tf", ".", "keras", ".", "layers", ".", "concatenate", "(", "[", "self", ".", "p_R", "(", "r_params", ")", ",", "self", ".", "p_Theta", "(", "theta_params", ")", ",", "self", ".", "p_Psi", "(", "psi_params", ")", ",", "self", ".", "p_Phi", "(", "phi_params", ")", "]", ",", "axis", "=", "1", ")", "\n", "img_recon", "=", "False", "\n", "return", "img_recon", ",", "gate_recon", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.cmvae.CmvaeDirect.extract_gate_params": [[141, 153], ["cmvae.CmvaeDirect.R_params", "cmvae.CmvaeDirect.Theta_params", "cmvae.CmvaeDirect.Psi_params", "cmvae.CmvaeDirect.Phi_params", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "", "def", "extract_gate_params", "(", "self", ",", "z", ")", ":", "\n", "# extract part of z vector", "\n", "        ", "r_params", "=", "self", ".", "R_params", "(", "z", ")", "\n", "theta_params", "=", "self", ".", "Theta_params", "(", "z", ")", "\n", "psi_params", "=", "self", ".", "Psi_params", "(", "z", ")", "\n", "phi_params", "=", "self", ".", "Phi_params", "(", "z", ")", "\n", "# reshape variables", "\n", "r_params", "=", "tf", ".", "reshape", "(", "r_params", ",", "[", "r_params", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "theta_params", "=", "tf", ".", "reshape", "(", "theta_params", ",", "[", "theta_params", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "psi_params", "=", "tf", ".", "reshape", "(", "psi_params", ",", "[", "psi_params", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "phi_params", "=", "tf", ".", "reshape", "(", "phi_params", ",", "[", "phi_params", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "return", "r_params", ",", "theta_params", ",", "psi_params", ",", "phi_params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.bc_full.BcFull.__init__": [[6, 9], ["tensorflow.keras.Model.__init__", "bc_full.BcFull.create_model"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.__init__", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.create_model"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BcFull", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.bc_full.BcFull.call": [[10, 64], ["bc_full.BcFull.conv0", "bc_full.BcFull.max0", "bc_full.BcFull.bn0", "bc_full.BcFull.conv1", "bc_full.BcFull.bn1", "bc_full.BcFull.conv2", "bc_full.BcFull.conv3", "tensorflow.keras.layers.add", "bc_full.BcFull.bn2", "bc_full.BcFull.conv4", "bc_full.BcFull.bn3", "bc_full.BcFull.conv5", "bc_full.BcFull.conv6", "tensorflow.keras.layers.add", "bc_full.BcFull.bn4", "bc_full.BcFull.conv7", "bc_full.BcFull.bn5", "bc_full.BcFull.conv8", "bc_full.BcFull.conv9", "tensorflow.keras.layers.add", "bc_full.BcFull.dense0", "bc_full.BcFull.dense1", "bc_full.BcFull.dense2", "bc_full.BcFull.dense3", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Activation"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "img", ")", ":", "\n", "# Input", "\n", "        ", "x1", "=", "self", ".", "conv0", "(", "img", ")", "\n", "x1", "=", "self", ".", "max0", "(", "x1", ")", "\n", "\n", "# First residual block", "\n", "x2", "=", "self", ".", "bn0", "(", "x1", ")", "\n", "# x2 = x1", "\n", "x2", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x2", ")", "\n", "x2", "=", "self", ".", "conv1", "(", "x2", ")", "\n", "\n", "x2", "=", "self", ".", "bn1", "(", "x2", ")", "\n", "x2", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x2", ")", "\n", "x2", "=", "self", ".", "conv2", "(", "x2", ")", "\n", "\n", "x1", "=", "self", ".", "conv3", "(", "x1", ")", "\n", "x3", "=", "tf", ".", "keras", ".", "layers", ".", "add", "(", "[", "x1", ",", "x2", "]", ")", "\n", "\n", "# Second residual block", "\n", "x4", "=", "self", ".", "bn2", "(", "x3", ")", "\n", "# x4 = x3", "\n", "x4", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x4", ")", "\n", "x4", "=", "self", ".", "conv4", "(", "x4", ")", "\n", "\n", "x4", "=", "self", ".", "bn3", "(", "x4", ")", "\n", "x4", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x4", ")", "\n", "x4", "=", "self", ".", "conv5", "(", "x4", ")", "\n", "\n", "x3", "=", "self", ".", "conv6", "(", "x3", ")", "\n", "x5", "=", "tf", ".", "keras", ".", "layers", ".", "add", "(", "[", "x3", ",", "x4", "]", ")", "\n", "\n", "# Third residual block", "\n", "x6", "=", "self", ".", "bn4", "(", "x5", ")", "\n", "# x6 = x5", "\n", "x6", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x6", ")", "\n", "x6", "=", "self", ".", "conv7", "(", "x6", ")", "\n", "\n", "x6", "=", "self", ".", "bn5", "(", "x6", ")", "\n", "x6", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x6", ")", "\n", "x6", "=", "self", ".", "conv8", "(", "x6", ")", "\n", "\n", "x5", "=", "self", ".", "conv9", "(", "x5", ")", "\n", "x7", "=", "tf", ".", "keras", ".", "layers", ".", "add", "(", "[", "x5", ",", "x6", "]", ")", "\n", "\n", "x", "=", "tf", ".", "keras", ".", "layers", ".", "Flatten", "(", ")", "(", "x7", ")", "\n", "\n", "x", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "# x = tf.keras.layers.Dropout(0.5)(x)", "\n", "x", "=", "self", ".", "dense0", "(", "x", ")", "\n", "x", "=", "self", ".", "dense1", "(", "x", ")", "\n", "x", "=", "self", ".", "dense2", "(", "x", ")", "\n", "vel_cmd", "=", "self", ".", "dense3", "(", "x", ")", "\n", "\n", "return", "vel_cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.bc_full.BcFull.create_model": [[65, 94], ["print", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "print", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "        ", "print", "(", "'[BcFull] Starting model'", ")", "\n", "\n", "self", ".", "max0", "=", "tf", ".", "keras", ".", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "# default pool_size='2', strides=2", "\n", "\n", "self", ".", "bn0", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "self", ".", "bn1", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "self", ".", "bn2", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "self", ".", "bn3", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "self", ".", "bn4", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "self", ".", "bn5", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "\n", "self", ".", "conv0", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ")", "\n", "self", ".", "conv1", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv2", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv3", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "1", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ")", "\n", "self", ".", "conv4", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv5", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv6", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "1", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ")", "\n", "self", ".", "conv7", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv8", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "1e-4", ")", ")", "\n", "self", ".", "conv9", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "1", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ")", "\n", "\n", "self", ".", "dense0", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "128", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "dense1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "64", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "dense2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "16", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "dense3", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "4", ",", "activation", "=", "'linear'", ")", "\n", "\n", "print", "(", "'[BcFull] Done with model'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.bc_latent.BcLatent.__init__": [[6, 9], ["tensorflow.keras.Model.__init__", "bc_latent.BcLatent.create_model"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.__init__", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.create_model"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BcLatent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.bc_latent.BcLatent.call": [[10, 12], ["bc_latent.BcLatent.network"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.bc_latent.BcLatent.create_model": [[13, 28], ["print", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.Sequential", "print"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "        ", "print", "(", "'[BcLatent] Starting create_model'", ")", "\n", "dense0", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "256", ",", "activation", "=", "'relu'", ")", "\n", "dense1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "128", ",", "activation", "=", "'relu'", ")", "\n", "dense2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "64", ",", "activation", "=", "'relu'", ")", "\n", "dense3", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "16", ",", "activation", "=", "'relu'", ")", "\n", "dense4", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "4", ",", "activation", "=", "'linear'", ")", "\n", "self", ".", "network", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "dense0", ",", "\n", "# dense1,", "\n", "# dense2,", "\n", "dense3", ",", "\n", "dense4", "]", ",", "\n", "name", "=", "'bc_dense'", ")", "\n", "print", "(", "'[BcLatent] Done with create_model'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.NonLinearTransformer.__init__": [[6, 9], ["tensorflow.keras.Model.__init__", "transformer.NonLinearTransformer.create_model"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.__init__", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.create_model"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NonLinearTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.NonLinearTransformer.call": [[10, 12], ["transformer.NonLinearTransformer.network"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.NonLinearTransformer.create_model": [[13, 25], ["print", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.Sequential", "print"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "        ", "print", "(", "'[NonLinearTransformer] Starting create_model'", ")", "\n", "dense0", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "64", ",", "activation", "=", "'relu'", ")", "\n", "dense1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "32", ",", "activation", "=", "'relu'", ")", "\n", "dense2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "1", ",", "activation", "=", "'linear'", ")", "\n", "self", ".", "network", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "dense0", ",", "\n", "dense1", ",", "\n", "dense2", "]", ",", "\n", "name", "=", "'nonlineartransformer'", ")", "\n", "\n", "print", "(", "'[NonLinearTransformer] Done with create_model'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.__init__": [[27, 30], ["tensorflow.keras.Model.__init__", "transformer.TestNet.create_model"], "methods", ["home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.__init__", "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.create_model"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TestNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.call": [[31, 34], ["transformer.TestNet.network", "tensorflow.keras.layers.Flatten"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "tf", ".", "keras", ".", "layers", ".", "Flatten", "(", ")", "(", "x", ")", "\n", "return", "self", ".", "network", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_AirSim-Drone-Racing-VAE-Imitation.racing_models.transformer.TestNet.create_model": [[35, 47], ["print", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.Sequential", "print"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "        ", "print", "(", "'[NonLinearTransformer] Starting create_model'", ")", "\n", "dense0", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "64", ",", "activation", "=", "'relu'", ")", "\n", "dense1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "32", ",", "activation", "=", "'relu'", ")", "\n", "dense2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "1", ",", "activation", "=", "'linear'", ")", "\n", "self", ".", "network", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "dense0", ",", "\n", "dense1", ",", "\n", "dense2", "]", ",", "\n", "name", "=", "'nonlineartransformer'", ")", "\n", "\n", "print", "(", "'[NonLinearTransformer] Done with create_model'", ")", "", "", "", ""]]}