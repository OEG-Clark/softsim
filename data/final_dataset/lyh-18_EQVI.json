{"home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.from_file": [[29, 43], ["filename.endswith", "config.Config", "sys.path.append", "os.basename().rstrip", "importlib.import_module", "easydict.EasyDict", "IOError", "os.dirname", "os.basename", "importlib.import_module.__dict__.items", "name.startswith"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.items"], ["    ", "@", "staticmethod", "\n", "def", "from_file", "(", "filename", ")", ":", "\n", "        ", "if", "filename", ".", "endswith", "(", "'.py'", ")", ":", "\n", "            ", "sys", ".", "path", ".", "append", "(", "osp", ".", "dirname", "(", "filename", ")", ")", "\n", "module_name", "=", "osp", ".", "basename", "(", "filename", ")", ".", "rstrip", "(", "'.py'", ")", "\n", "cfg", "=", "import_module", "(", "module_name", ")", "\n", "config_dict", "=", "edict", "(", "{", "\n", "name", ":", "value", "\n", "for", "name", ",", "value", "in", "cfg", ".", "__dict__", ".", "items", "(", ")", "\n", "if", "not", "name", ".", "startswith", "(", "(", "'__'", ",", "'_'", ")", ")", "\n", "}", ")", "\n", "", "else", ":", "\n", "            ", "raise", "IOError", "(", "'only py type are supported as config files'", ")", "\n", "", "return", "Config", "(", "config_dict", ",", "filename", "=", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.auto_argparser": [[44, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "Config.from_py", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "config.add_args", "argparse.ArgumentParser.parse_known_args"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.add_args"], ["", "@", "staticmethod", "\n", "def", "auto_argparser", "(", "description", "=", "None", ")", ":", "\n", "        ", "partial_parser", "=", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "partial_parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "cfg_file", "=", "partial_parser", ".", "parse_known_args", "(", ")", "[", "0", "]", ".", "config", "\n", "cfg", "=", "Config", ".", "from_py", "(", "cfg_file", ")", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "add_args", "(", "parser", ",", "cfg", ")", "\n", "return", "parser", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.__init__": [[55, 63], ["isinstance", "open", "f.read"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "config_dict", ",", "filename", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "config_dict", ",", "dict", ")", "\n", "self", ".", "_config_dict", "=", "config_dict", "\n", "self", ".", "_default_dict", "=", "{", "}", "\n", "self", ".", "filename", "=", "filename", "\n", "if", "filename", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_text", "=", "f", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.__getattr__": [[64, 73], ["None"], "methods", ["None"], ["", "", "", "def", "__getattr__", "(", "self", ",", "key", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "val", "=", "self", ".", "_config_dict", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "if", "key", "in", "self", ".", "_default_dict", ":", "\n", "                ", "val", "=", "self", ".", "_default_dict", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.__getitem__": [[74, 76], ["config.Config.__getattr__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.__getattr__"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "__getattr__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.__iter__": [[77, 79], ["config.Config.keys"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.keys"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.__contains__": [[80, 85], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "_config_dict", "or", "key", "in", "self", ".", "_default_dict", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.text": [[86, 89], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "text", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_text", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.keys": [[90, 96], ["None"], "methods", ["None"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "_config_dict", ":", "\n", "            ", "yield", "key", "\n", "", "for", "key", "in", "self", ".", "_default_dict", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_config_dict", ":", "\n", "                ", "yield", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.values": [[97, 100], ["config.Config.keys", "config.Config.__getattr__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.keys", "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.__getattr__"], ["", "", "", "def", "values", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", "(", ")", ":", "\n", "            ", "yield", "self", ".", "__getattr__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.items": [[101, 104], ["config.Config.keys", "config.Config.__getattr__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.keys", "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.__getattr__"], ["", "", "def", "items", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", "(", ")", ":", "\n", "            ", "yield", "key", ",", "self", ".", "__getattr__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.set_default": [[105, 108], ["isinstance", "config.Config._default_dict.update"], "methods", ["None"], ["", "", "def", "set_default", "(", "self", ",", "default_dict", ")", ":", "\n", "        ", "assert", "isinstance", "(", "default_dict", ",", "dict", ")", "\n", "self", ".", "_default_dict", ".", "update", "(", "default_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.Config.update_with_args": [[109, 120], ["vars().items", "vars", "k.split"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.items"], ["", "def", "update_with_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "is", "not", "None", ":", "\n", "                ", "if", "'.'", "not", "in", "k", ":", "\n", "                    ", "self", ".", "_config_dict", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "tree", "=", "k", ".", "split", "(", "'.'", ")", "\n", "tmp", "=", "self", ".", "_config_dict", "\n", "for", "key", "in", "tree", "[", ":", "-", "1", "]", ":", "\n", "                        ", "tmp", "=", "tmp", "[", "key", "]", "\n", "", "tmp", "[", "tree", "[", "-", "1", "]", "]", "=", "v", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.config.add_args": [[9, 26], ["cfg.items", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "config.add_args", "isinstance", "parser.add_argument", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.items", "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.add_args"], ["def", "add_args", "(", "parser", ",", "cfg", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "int", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "int", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "float", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "float", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "action", "=", "'store_true'", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "add_args", "(", "parser", ",", "v", ",", "k", "+", "'.'", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "Iterable", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "type", "(", "v", "[", "0", "]", ")", ",", "nargs", "=", "'+'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'connot parse key {} of type {}'", ".", "format", "(", "prefix", "+", "k", ",", "type", "(", "v", ")", ")", ")", "\n", "", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.LapLoss.__init__": [[74, 80], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_levels", "=", "5", ",", "k_size", "=", "5", ",", "sigma", "=", "2.0", ")", ":", "\n", "        ", "super", "(", "LapLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_levels", "=", "max_levels", "\n", "self", ".", "k_size", "=", "k_size", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "_gauss_kernel", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.LapLoss.forward": [[81, 90], ["train_EQVI_lap_l1.laplacian_pyramid", "train_EQVI_lap_l1.laplacian_pyramid", "sum", "train_EQVI_lap_l1.build_gauss_kernel", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "zip"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.laplacian_pyramid", "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.laplacian_pyramid", "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.build_gauss_kernel"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "_gauss_kernel", "is", "None", "or", "self", ".", "_gauss_kernel", ".", "shape", "[", "1", "]", "!=", "input", ".", "shape", "[", "1", "]", ":", "\n", "            ", "self", ".", "_gauss_kernel", "=", "build_gauss_kernel", "(", "\n", "size", "=", "self", ".", "k_size", ",", "sigma", "=", "self", ".", "sigma", ",", "\n", "n_channels", "=", "input", ".", "shape", "[", "1", "]", ",", "cuda", "=", "input", ".", "is_cuda", "\n", ")", "\n", "", "pyr_input", "=", "laplacian_pyramid", "(", "input", ",", "self", ".", "_gauss_kernel", ",", "self", ".", "max_levels", ")", "\n", "pyr_target", "=", "laplacian_pyramid", "(", "target", ",", "self", ".", "_gauss_kernel", ",", "self", ".", "max_levels", ")", "\n", "return", "sum", "(", "F", ".", "l1_loss", "(", "a", ",", "b", ")", "for", "a", ",", "b", "in", "zip", "(", "pyr_input", ",", "pyr_target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.build_gauss_kernel": [[35, 50], ["numpy.float32", "numpy.sum", "numpy.sum", "numpy.tile", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.autograd.Variable", "ValueError", "gaussian", "kernel.cuda.cuda", "numpy.exp"], "function", ["None"], ["def", "build_gauss_kernel", "(", "size", "=", "5", ",", "sigma", "=", "1.0", ",", "n_channels", "=", "1", ",", "cuda", "=", "False", ")", ":", "\n", "    ", "if", "size", "%", "2", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"kernel size must be uneven\"", ")", "\n", "", "grid", "=", "np", ".", "float32", "(", "np", ".", "mgrid", "[", "0", ":", "size", ",", "0", ":", "size", "]", ".", "T", ")", "\n", "gaussian", "=", "lambda", "x", ":", "np", ".", "exp", "(", "(", "x", "-", "size", "//", "2", ")", "**", "2", "/", "(", "-", "2", "*", "sigma", "**", "2", ")", ")", "**", "2", "\n", "kernel", "=", "np", ".", "sum", "(", "gaussian", "(", "grid", ")", ",", "axis", "=", "2", ")", "\n", "kernel", "/=", "np", ".", "sum", "(", "kernel", ")", "\n", "# repeat same kernel across depth dimension", "\n", "kernel", "=", "np", ".", "tile", "(", "kernel", ",", "(", "n_channels", ",", "1", ",", "1", ")", ")", "\n", "# conv weight should be (out_channels, groups/in_channels, h, w),", "\n", "# and since we have depth-separable convolution we want the groups dimension to be 1", "\n", "kernel", "=", "torch", ".", "FloatTensor", "(", "kernel", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "\n", "if", "cuda", ":", "\n", "        ", "kernel", "=", "kernel", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "kernel", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.conv_gauss": [[52, 57], ["torch.pad", "torch.conv2d"], "function", ["None"], ["", "def", "conv_gauss", "(", "img", ",", "kernel", ")", ":", "\n", "    ", "\"\"\" convolve img with a gaussian kernel that has been built with build_gauss_kernel \"\"\"", "\n", "n_channels", ",", "_", ",", "kw", ",", "kh", "=", "kernel", ".", "shape", "\n", "img", "=", "F", ".", "pad", "(", "img", ",", "(", "kw", "//", "2", ",", "kh", "//", "2", ",", "kw", "//", "2", ",", "kh", "//", "2", ")", ",", "mode", "=", "'replicate'", ")", "\n", "return", "F", ".", "conv2d", "(", "img", ",", "kernel", ",", "groups", "=", "n_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.laplacian_pyramid": [[59, 71], ["range", "pyr.append", "train_EQVI_lap_l1.conv_gauss", "pyr.append", "torch.avg_pool2d"], "function", ["home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.conv_gauss"], ["", "def", "laplacian_pyramid", "(", "img", ",", "kernel", ",", "max_levels", "=", "5", ")", ":", "\n", "    ", "current", "=", "img", "\n", "pyr", "=", "[", "]", "\n", "\n", "for", "level", "in", "range", "(", "max_levels", ")", ":", "\n", "        ", "filtered", "=", "conv_gauss", "(", "current", ",", "kernel", ")", "\n", "diff", "=", "current", "-", "filtered", "\n", "pyr", ".", "append", "(", "diff", ")", "\n", "current", "=", "F", ".", "avg_pool2d", "(", "filtered", ",", "2", ")", "\n", "\n", "", "pyr", ".", "append", "(", "current", ")", "\n", "return", "pyr", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.lossfn": [[92, 103], ["torch.l1_loss", "train_EQVI_lap_l1.LapLoss", "LapLoss."], "function", ["None"], ["", "", "def", "lossfn", "(", "outputs", ",", "I1", ",", "I2", ",", "IT", ")", ":", "\n", "    ", "It_warp", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "outputs", "\n", "\n", "recnLoss", "=", "F", ".", "l1_loss", "(", "It_warp", ",", "IT", ")", "\n", "\n", "LapLoss_module", "=", "LapLoss", "(", ")", "\n", "laplacian_loss", "=", "LapLoss_module", "(", "It_warp", ",", "IT", ")", "\n", "\n", "loss", "=", "5", "*", "laplacian_loss", "+", "10", "*", "recnLoss", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.get_lr": [[105, 108], ["None"], "function", ["None"], ["", "def", "get_lr", "(", "optimizer", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "return", "param_group", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.validate": [[166, 231], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "range", "frame0.cuda", "frame1.cuda", "frame2.cuda", "frame3.cuda", "range", "img_grid.append", "range", "img_grid.append", "retImg.append", "len", "len", "frameT1.cuda", "frameT2.cuda", "frameT3.cuda", "model", "It_warps.append", "Ms.append", "train_EQVI_lap_l1.lossfn", "lossfn.item", "torch.mse_loss", "revNormalize", "img_grid.append", "img_grid.append", "revNormalize", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "math.log10", "revNormalize", "Ms[].cpu", "F.mse_loss.item", "It_warps[].cpu"], "function", ["home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.lossfn"], ["def", "validate", "(", ")", ":", "\n", "    ", "retImg", "=", "[", "]", "\n", "# For details see training.", "\n", "# slomo = slomo.eval()", "\n", "psnr", "=", "0", "\n", "psnrs", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "tloss", "=", "0", "\n", "tlosses", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "flag", "=", "True", "\n", "retImg", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "for", "validationIndex", ",", "validationData", "in", "enumerate", "(", "validationloader", ",", "0", ")", ":", "\n", "# if validationIndex > 10:", "\n", "#     break", "\n", "\n", "# frame0, frame1, frameT, frame2, frame3 = validationData", "\n", "            ", "frame0", ",", "frame1", ",", "frameT1", ",", "frameT2", ",", "frameT3", ",", "frame2", ",", "frame3", "=", "validationData", "\n", "\n", "ITs", "=", "[", "frameT1", ".", "cuda", "(", ")", ",", "frameT2", ".", "cuda", "(", ")", ",", "frameT3", ".", "cuda", "(", ")", "]", "\n", "\n", "I0", "=", "frame0", ".", "cuda", "(", ")", "\n", "I1", "=", "frame1", ".", "cuda", "(", ")", "\n", "I2", "=", "frame2", ".", "cuda", "(", ")", "\n", "I3", "=", "frame3", ".", "cuda", "(", ")", "\n", "\n", "It_warps", "=", "[", "]", "\n", "Ms", "=", "[", "]", "\n", "\n", "for", "tt", "in", "range", "(", "3", ")", ":", "\n", "                ", "IT", "=", "ITs", "[", "tt", "]", "\n", "\n", "outputs", "=", "model", "(", "I0", ",", "I1", ",", "I2", ",", "I3", ",", "tt", "/", "4.0", "+", "0.25", ")", "\n", "It_warp", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "outputs", "\n", "\n", "\n", "It_warps", ".", "append", "(", "It_warp", ")", "\n", "Ms", ".", "append", "(", "M", ")", "\n", "\n", "\n", "loss", "=", "lossfn", "(", "outputs", ",", "I1", ",", "I2", ",", "IT", ")", "\n", "tlosses", "[", "tt", "]", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "#psnr", "\n", "MSE_val", "=", "F", ".", "mse_loss", "(", "It_warp", ",", "IT", ")", "\n", "psnrs", "[", "tt", "]", "+=", "(", "10", "*", "log10", "(", "1", "/", "MSE_val", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "", "img_grid", "=", "[", "]", "\n", "img_grid", ".", "append", "(", "revNormalize", "(", "frame1", "[", "0", "]", ")", ")", "\n", "for", "tt", "in", "range", "(", "3", ")", ":", "\n", "                ", "img_grid", ".", "append", "(", "Ms", "[", "tt", "]", ".", "cpu", "(", ")", "[", "0", "]", ")", "\n", "img_grid", ".", "append", "(", "revNormalize", "(", "It_warps", "[", "tt", "]", ".", "cpu", "(", ")", "[", "0", "]", ")", ")", "\n", "", "img_grid", ".", "append", "(", "revNormalize", "(", "frame2", "[", "0", "]", ")", ")", "\n", "\n", "retImg", ".", "append", "(", "torchvision", ".", "utils", ".", "make_grid", "(", "img_grid", ",", "nrow", "=", "10", ",", "padding", "=", "10", ")", ")", "\n", "\n", "", "for", "tt", "in", "range", "(", "3", ")", ":", "\n", "            ", "psnrs", "[", "tt", "]", "/=", "len", "(", "validationloader", ")", "\n", "tlosses", "[", "tt", "]", "/=", "len", "(", "validationloader", ")", "\n", "\n", "\n", "# slomo = slomo.train()", "\n", "", "", "return", "psnrs", ",", "tlosses", ",", "retImg", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.train": [[232, 346], ["time.time", "range", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "print", "os.path.exists", "os.mkdir", "print", "cLoss.append", "valLoss.append", "valPSNR.append", "scheduler.step", "enumerate", "frame0.cuda", "frame1.cuda", "frame2.cuda", "frame3.cuda", "frameT.cuda", "t.view().float().cuda.view().float().cuda", "optimizer.zero_grad", "model", "train_EQVI_lap_l1.lossfn", "lossfn.backward", "optimizer.step", "lossfn.item", "time.time", "train_EQVI_lap_l1.validate", "numpy.mean", "numpy.mean", "valPSNR[].append", "valLoss[].append", "recorder.add_scalars", "recorder.add_scalar", "range", "recorder.add_scalars", "recorder.add_scalars", "time.time", "print", "sys.stdout.flush", "cLoss[].append", "time.time", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.mean", "numpy.mean", "datetime.datetime.now", "train_EQVI_lap_l1.get_lr", "model.state_dict", "t.view().float().cuda.view().float", "len", "len", "len", "len", "train_EQVI_lap_l1.get_lr", "str", "t.view().float().cuda.view", "str", "str", "t.view().float().cuda.size"], "function", ["home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.lossfn", "home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package.correlation.CorrelationFunction.backward", "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.validate", "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.get_lr", "home.repos.pwc.inspect_result.lyh-18_EQVI.None.train_EQVI_lap_l1.get_lr"], ["", "def", "train", "(", ")", ":", "\n", "\n", "    ", "if", "config", ".", "train_continue", ":", "\n", "        ", "dict1", "=", "torch", ".", "load", "(", "config", ".", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "dict1", "[", "'model_state_dict'", "]", ")", "\n", "print", "(", "'Continue Training:'", ",", "config", ".", "checkpoint", ")", "\n", "", "else", ":", "\n", "        ", "dict1", "=", "{", "'loss'", ":", "[", "]", ",", "'valLoss'", ":", "[", "]", ",", "'valPSNR'", ":", "[", "]", ",", "'epoch'", ":", "-", "1", "}", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "config", ".", "checkpoint_dir", ")", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "cLoss", "=", "dict1", "[", "'loss'", "]", "\n", "valLoss", "=", "dict1", "[", "'valLoss'", "]", "\n", "valPSNR", "=", "dict1", "[", "'valPSNR'", "]", "\n", "checkpoint_counter", "=", "0", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "dict1", "[", "'epoch'", "]", "+", "1", ",", "config", ".", "epochs", ")", ":", "\n", "\n", "        ", "print", "(", "\"Epoch: \"", ",", "epoch", ")", "\n", "\n", "# Append and reset", "\n", "cLoss", ".", "append", "(", "[", "]", ")", "\n", "valLoss", ".", "append", "(", "[", "]", ")", "\n", "valPSNR", ".", "append", "(", "[", "]", ")", "\n", "iLoss", "=", "0", "\n", "\n", "# Increment scheduler count", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "trainFrameIndex", "=", "3", "\n", "for", "trainIndex", ",", "(", "trainData", ",", "t", ")", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "# if trainIndex >= 200:", "\n", "#     break", "\n", "# print(\"Training iteration [{}/{}]\".format(trainIndex, len(trainloader)))", "\n", "# sys.stdout.flush()", "\n", "## Getting the input and the target from the training set", "\n", "            ", "frame0", ",", "frame1", ",", "frameT", ",", "frame2", ",", "frame3", "=", "trainData", "\n", "\n", "\n", "I0", "=", "frame0", ".", "cuda", "(", ")", "\n", "I1", "=", "frame1", ".", "cuda", "(", ")", "\n", "I2", "=", "frame2", ".", "cuda", "(", ")", "\n", "I3", "=", "frame3", ".", "cuda", "(", ")", "\n", "IT", "=", "frameT", ".", "cuda", "(", ")", "\n", "t", "=", "t", ".", "view", "(", "t", ".", "size", "(", "0", ",", ")", ",", "1", ",", "1", ",", "1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "I0", ",", "I1", ",", "I2", ",", "I3", ",", "t", ")", "\n", "loss", "=", "lossfn", "(", "outputs", ",", "I1", ",", "I2", ",", "IT", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "iLoss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "if", "epoch", "%", "2", "==", "0", ":", "\n", "            ", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "psnrs", ",", "vLosses", ",", "valImgs", "=", "validate", "(", ")", "\n", "\n", "psnr", "=", "np", ".", "mean", "(", "psnrs", ")", "\n", "vLoss", "=", "np", ".", "mean", "(", "vLosses", ")", "\n", "\n", "valPSNR", "[", "epoch", "]", ".", "append", "(", "np", ".", "mean", "(", "psnrs", ")", ")", "\n", "valLoss", "[", "epoch", "]", ".", "append", "(", "np", ".", "mean", "(", "vLosses", ")", ")", "\n", "\n", "# Tensorboard", "\n", "itr", "=", "trainIndex", "+", "epoch", "*", "(", "len", "(", "trainloader", ")", ")", "\n", "\n", "recorder", ".", "add_scalars", "(", "'Loss'", ",", "{", "'trainLoss'", ":", "iLoss", "/", "len", "(", "trainloader", ")", ",", "'validationLoss'", ":", "vLoss", "}", ",", "itr", ")", "\n", "recorder", ".", "add_scalar", "(", "'PSNR'", ",", "psnr", ",", "itr", ")", "\n", "\n", "vtdict", "=", "{", "}", "\n", "psnrdict", "=", "{", "}", "\n", "for", "tt", "in", "range", "(", "3", ")", ":", "\n", "                ", "vtdict", "[", "'validationLoss'", "+", "str", "(", "tt", "+", "1", ")", "]", "=", "vLosses", "[", "tt", "]", "\n", "psnrdict", "[", "'PSNR'", "+", "str", "(", "tt", "+", "1", ")", "]", "=", "psnrs", "[", "tt", "]", "\n", "\n", "", "recorder", ".", "add_scalars", "(", "'Losst'", ",", "vtdict", ",", "itr", ")", "\n", "recorder", ".", "add_scalars", "(", "'PSNRt'", ",", "psnrdict", ",", "itr", ")", "\n", "\n", "# for vi, valImg in enumerate(valImgs):", "\n", "#    recorder.add_image('Validation' + str(vi), valImg , itr)", "\n", "\n", "endVal", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "\n", "\" Loss: %0.6f  Iterations: %4d/%4d  TrainExecTime: %0.1f  ValLoss:%0.6f  ValPSNR: %0.4f  ValEvalTime: %0.2f LearningRate: %f\"", "%", "(", "\n", "iLoss", "/", "config", ".", "progress_iter", ",", "trainIndex", ",", "len", "(", "trainloader", ")", ",", "end", "-", "start", ",", "vLoss", ",", "psnr", ",", "endVal", "-", "end", ",", "\n", "get_lr", "(", "optimizer", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "cLoss", "[", "epoch", "]", ".", "append", "(", "iLoss", "/", "len", "(", "trainloader", ")", ")", "\n", "iLoss", "=", "0", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Create checkpoint after every `config.checkpoint_epoch` epochs", "\n", "", "if", "(", "epoch", ">", "config", ".", "min_save_epoch", ")", ":", "\n", "            ", "dict1", "=", "{", "\n", "'Detail'", ":", "\"Acceleration Aware Frame Interpolation.\"", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'timestamp'", ":", "datetime", ".", "datetime", ".", "now", "(", ")", ",", "\n", "'trainBatchSz'", ":", "config", ".", "train_batch_size", ",", "\n", "'validationBatchSz'", ":", "1", ",", "\n", "'learningRate'", ":", "get_lr", "(", "optimizer", ")", ",", "\n", "'loss'", ":", "cLoss", ",", "\n", "'valLoss'", ":", "valLoss", ",", "\n", "'valPSNR'", ":", "valPSNR", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "dict1", ",", "config", ".", "checkpoint_dir", "+", "\"/AcSloMo\"", "+", "str", "(", "epoch", ")", "+", "\".ckpt\"", ")", "\n", "checkpoint_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.interpolate_EQVI.generate": [[72, 145], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "sys.stdout.flush", "print", "print", "range", "os.path.exists", "os.mkdir", "len", "frame0.cuda", "frame3.cuda", "frame1.cuda", "frame2.cuda", "frame1.cuda", "frame2.cuda", "int", "str", "int", "int", "print", "time.time", "time.time", "model", "len", "revtrans().save", "revtrans().save", "revtrans().save", "revtrans().save", "time.time", "time.time", "len", "revtrans().save", "revtrans().save", "revtrans", "revtrans", "revtrans", "revtrans", "revtrans", "revtrans", "str", "str", "frame1.cuda.clone().cpu", "frame2.cuda.clone().cpu", "frame1.cuda.clone().cpu", "frame2.cuda.clone().cpu", "It_warp.cpu", "It_warp.cpu", "frame1.cuda.clone", "frame2.cuda.clone", "frame1.cuda.clone", "frame2.cuda.clone"], "function", ["None"], ["def", "generate", "(", ")", ":", "\n", "    ", "global", "tot_time", ",", "tot_frames", "\n", "retImg", "=", "[", "]", "\n", "\n", "store_path", "=", "config", ".", "store_path", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "validationIndex", ",", "validationData", "in", "enumerate", "(", "validationloader", ")", ":", "\n", "            ", "print", "(", "'Testing {}/{}-th group...'", ".", "format", "(", "validationIndex", ",", "len", "(", "testset", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sample", ",", "folder", ",", "index", ",", "img_name", "=", "validationData", "\n", "\n", "\n", "# make sure store path exists", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "store_path", "+", "'/'", "+", "folder", "[", "1", "]", "[", "0", "]", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "config", ".", "store_path", "+", "'/'", "+", "folder", "[", "1", "]", "[", "0", "]", ")", "\n", "\n", "\n", "# if sample consists of four frames (ac-aware)", "\n", "", "if", "len", "(", "sample", ")", "is", "4", ":", "\n", "                ", "frame0", "=", "sample", "[", "0", "]", "\n", "frame1", "=", "sample", "[", "1", "]", "\n", "frame2", "=", "sample", "[", "-", "2", "]", "\n", "frame3", "=", "sample", "[", "-", "1", "]", "\n", "\n", "I0", "=", "frame0", ".", "cuda", "(", ")", "\n", "I3", "=", "frame3", ".", "cuda", "(", ")", "\n", "\n", "I1", "=", "frame1", ".", "cuda", "(", ")", "\n", "I2", "=", "frame2", ".", "cuda", "(", ")", "\n", "\n", "if", "config", ".", "preserve_input", ":", "\n", "                    ", "revtrans", "(", "I1", ".", "clone", "(", ")", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "1", "]", "[", "0", "]", "+", "'/'", "+", "index", "[", "1", "]", "[", "0", "]", "+", "'.png'", ")", "\n", "revtrans", "(", "I2", ".", "clone", "(", ")", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "-", "2", "]", "[", "0", "]", "+", "'/'", "+", "index", "[", "-", "2", "]", "[", "0", "]", "+", "'.png'", ")", "\n", "# else two frames (linear)", "\n", "", "", "else", ":", "\n", "                ", "frame0", "=", "None", "\n", "frame1", "=", "sample", "[", "0", "]", "\n", "frame2", "=", "sample", "[", "-", "1", "]", "\n", "frame3", "=", "None", "\n", "\n", "I0", "=", "None", "\n", "I3", "=", "None", "\n", "I1", "=", "frame1", ".", "cuda", "(", ")", "\n", "I2", "=", "frame2", ".", "cuda", "(", ")", "\n", "\n", "if", "config", ".", "preserve_input", ":", "\n", "                    ", "revtrans", "(", "I1", ".", "clone", "(", ")", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "0", "]", "[", "0", "]", "+", "'/'", "+", "index", "[", "0", "]", "[", "0", "]", "+", "'.png'", ")", "\n", "revtrans", "(", "I2", ".", "clone", "(", ")", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "1", "]", "[", "0", "]", "+", "'/'", "+", "index", "[", "1", "]", "[", "0", "]", "+", "'.png'", ")", "\n", "\n", "", "", "print", "(", "int", "(", "config", ".", "inter_frames", ")", ")", "\n", "print", "(", "str", "(", "index", "*", "8", ")", ")", "\n", "for", "tt", "in", "range", "(", "int", "(", "config", ".", "inter_frames", ")", ")", ":", "\n", "                ", "x", "=", "int", "(", "config", ".", "inter_frames", ")", "\n", "t", "=", "1.0", "/", "(", "x", "+", "1", ")", "*", "(", "tt", "+", "1", ")", "\n", "print", "(", "t", ")", "\n", "\n", "\n", "# record duration time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "It_warp", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I0", ",", "I1", ",", "I2", ",", "I3", ",", "t", ")", "\n", "\n", "# It_warp = output", "\n", "\n", "tot_time", "+=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "tot_frames", "+=", "1", "\n", "\n", "\n", "if", "len", "(", "sample", ")", "is", "4", ":", "\n", "                    ", "revtrans", "(", "It_warp", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "0", "]", "[", "0", "]", "+", "'/'", "+", "index", "[", "1", "]", "[", "0", "]", "+", "'_'", "+", "str", "(", "tt", ")", "+", "'.png'", ")", "\n", "", "else", ":", "\n", "                    ", "revtrans", "(", "It_warp", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "0", "]", "[", "0", "]", "+", "'/'", "+", "index", "[", "0", "]", "[", "0", "]", "+", "'_'", "+", "str", "(", "tt", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.interpolate_EQVI.test": [[148, 156], ["torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "interpolate_EQVI.generate", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.lyh-18_EQVI.None.interpolate_REDS_VTSR.generate"], ["", "", "", "", "", "def", "test", "(", ")", ":", "\n", "\n", "    ", "dict1", "=", "torch", ".", "load", "(", "config", ".", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "dict1", "[", "'model_state_dict'", "]", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "store_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "config", ".", "store_path", ")", "\n", "", "generate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.synthesize_video.convert_frames_to_video": [[7, 40], ["files.sort", "print", "print", "print", "print", "print", "print", "range", "cv2.VideoWriter", "range", "cv2.VideoWriter.release", "print", "print", "len", "cv2.imread", "frame_array.append", "cv2.VideoWriter_fourcc", "len", "cv2.VideoWriter.write", "os.listdir", "os.path.isfile", "len", "os.path.join"], "function", ["None"], ["def", "convert_frames_to_video", "(", "pathIn", ",", "pathOut", ",", "fps", ")", ":", "\n", "    ", "frame_array", "=", "[", "]", "\n", "files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "pathIn", ")", "if", "isfile", "(", "join", "(", "pathIn", ",", "f", ")", ")", "]", "\n", "\n", "# for sorting the file names properly", "\n", "# TODO: can be changed depending on your data", "\n", "files", ".", "sort", "(", ")", "\n", "#print(files)", "\n", "#exit()", "\n", "print", "(", "'#####################'", ")", "\n", "print", "(", "'Input path: {}'", ".", "format", "(", "pathIn", ")", ")", "\n", "print", "(", "'Total frames: {}'", ".", "format", "(", "len", "(", "files", ")", ")", ")", "\n", "print", "(", "'FPS: {}'", ".", "format", "(", "fps", ")", ")", "\n", "print", "(", "'Output path: {}'", ".", "format", "(", "pathOut", ")", ")", "\n", "print", "(", "'Processing......'", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "files", ")", ")", ":", "\n", "        ", "filename", "=", "pathIn", "+", "files", "[", "i", "]", "\n", "#reading each file", "\n", "img", "=", "cv2", ".", "imread", "(", "filename", ")", "\n", "height", ",", "width", ",", "layers", "=", "img", ".", "shape", "\n", "size", "=", "(", "width", ",", "height", ")", "\n", "#inserting the frames into an image array", "\n", "frame_array", ".", "append", "(", "img", ")", "\n", "\n", "", "out", "=", "cv2", ".", "VideoWriter", "(", "pathOut", ",", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'mp4v'", ")", ",", "fps", ",", "size", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "frame_array", ")", ")", ":", "\n", "# writing to a image array", "\n", "        ", "out", ".", "write", "(", "frame_array", "[", "i", "]", ")", "\n", "", "out", ".", "release", "(", ")", "\n", "print", "(", "'Finished!'", ")", "\n", "print", "(", "'#####################'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.synthesize_video.main": [[41, 48], ["synthesize_video.convert_frames_to_video"], "function", ["home.repos.pwc.inspect_result.lyh-18_EQVI.None.synthesize_video.convert_frames_to_video"], ["", "def", "main", "(", ")", ":", "\n", "# TODO: change your input & output path here", "\n", "    ", "pathIn", "=", "'/home/yhliu/EQVI_release/outputs/old_films_interp3/1/'", "\n", "pathOut", "=", "'/home/yhliu/EQVI_release/outputs/old_films_interp3/1_inter3.mp4'", "\n", "\n", "fps", "=", "25", "\n", "convert_frames_to_video", "(", "pathIn", ",", "pathOut", ",", "fps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.interpolate_REDS_VTSR.interp_resize": [[75, 81], ["input_tensor.size", "torch.interpolate"], "function", ["None"], ["def", "interp_resize", "(", "input_tensor", ",", "scale_factor", ")", ":", "\n", "# input tensor: [B, C, H, W]", "\n", "    ", "B", ",", "C", ",", "H", ",", "W", "=", "input_tensor", ".", "size", "(", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "input_tensor", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "None", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.interpolate_REDS_VTSR.generate": [[83, 280], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "sys.stdout.flush", "range", "os.path.exists", "os.mkdir", "len", "frame0.cuda", "frame3.cuda", "frame1.cuda", "frame2.cuda", "frame1.cuda", "frame2.cuda", "print", "time.time", "time.time", "model", "len", "revtrans().save", "revtrans().save", "revtrans().save", "revtrans().save", "interpolate_REDS_VTSR.interp_resize", "interpolate_REDS_VTSR.interp_resize", "model", "interpolate_REDS_VTSR.interp_resize", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "model", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "model", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "model", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "model", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "model", "time.time", "time.time", "len", "print", "revtrans().save", "print", "revtrans().save", "interpolate_REDS_VTSR.interp_resize", "interpolate_REDS_VTSR.interp_resize", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "model", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "model", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "model", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "model", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "model", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "int", "int", "revtrans", "revtrans", "revtrans", "revtrans", "int", "int", "int", "revtrans", "int", "int", "int", "revtrans", "int", "int", "frame1.cuda.clone().cpu", "frame2.cuda.clone().cpu", "frame1.cuda.clone().cpu", "frame2.cuda.clone().cpu", "[].split", "[].split", "It_warp.cpu", "int", "[].split", "[].split", "It_warp.cpu", "int", "frame1.cuda.clone", "frame2.cuda.clone", "frame1.cuda.clone", "frame2.cuda.clone", "[].split", "[].split", "[].split", "[].split"], "function", ["home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.interp_resize", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.interp_resize", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.interp_resize", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.interp_resize", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.interp_resize"], ["", "def", "generate", "(", ")", ":", "\n", "    ", "global", "tot_time", ",", "tot_frames", "\n", "retImg", "=", "[", "]", "\n", "\n", "\n", "store_path", "=", "config", ".", "store_path", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "validationIndex", ",", "validationData", "in", "enumerate", "(", "validationloader", ",", "0", ")", ":", "\n", "            ", "print", "(", "'Testing {}/{}-th group...'", ".", "format", "(", "validationIndex", ",", "len", "(", "testset", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sample", ",", "folder", ",", "index", ",", "img_name", "=", "validationData", "\n", "\n", "# make sure store path exists", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "store_path", "+", "'/'", "+", "folder", "[", "1", "]", "[", "0", "]", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "config", ".", "store_path", "+", "'/'", "+", "folder", "[", "1", "]", "[", "0", "]", ")", "\n", "\n", "# if sample consists of four frames (ac-aware)", "\n", "\n", "", "if", "len", "(", "sample", ")", "is", "4", ":", "\n", "                ", "frame0", "=", "sample", "[", "0", "]", "\n", "frame1", "=", "sample", "[", "1", "]", "\n", "frame2", "=", "sample", "[", "-", "2", "]", "\n", "frame3", "=", "sample", "[", "-", "1", "]", "\n", "\n", "I0", "=", "frame0", ".", "cuda", "(", ")", "\n", "I3", "=", "frame3", ".", "cuda", "(", ")", "\n", "\n", "I1", "=", "frame1", ".", "cuda", "(", ")", "\n", "I2", "=", "frame2", ".", "cuda", "(", ")", "\n", "\n", "if", "config", ".", "preserve_input", ":", "\n", "                    ", "revtrans", "(", "I1", ".", "clone", "(", ")", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "1", "]", "[", "0", "]", "+", "'/'", "+", "index", "[", "1", "]", "[", "0", "]", "+", "'.png'", ")", "\n", "revtrans", "(", "I2", ".", "clone", "(", ")", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "-", "2", "]", "[", "0", "]", "+", "'/'", "+", "index", "[", "-", "2", "]", "[", "0", "]", "+", "'.png'", ")", "\n", "# else two frames (linear)", "\n", "", "", "else", ":", "\n", "                ", "frame0", "=", "None", "\n", "frame1", "=", "sample", "[", "0", "]", "\n", "frame2", "=", "sample", "[", "-", "1", "]", "\n", "frame3", "=", "None", "\n", "\n", "I0", "=", "None", "\n", "I3", "=", "None", "\n", "I1", "=", "frame1", ".", "cuda", "(", ")", "\n", "I2", "=", "frame2", ".", "cuda", "(", ")", "\n", "\n", "if", "config", ".", "preserve_input", ":", "\n", "                    ", "revtrans", "(", "I1", ".", "clone", "(", ")", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "0", "]", "[", "0", "]", "+", "'/'", "+", "index", "[", "0", "]", "[", "0", "]", "+", "'.png'", ")", "\n", "revtrans", "(", "I2", ".", "clone", "(", ")", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "1", "]", "[", "0", "]", "+", "'/'", "+", "index", "[", "1", "]", "[", "0", "]", "+", "'.png'", ")", "\n", "\n", "\n", "", "", "for", "tt", "in", "range", "(", "config", ".", "inter_frames", ")", ":", "\n", "                ", "x", "=", "config", ".", "inter_frames", "\n", "t", "=", "1.0", "/", "(", "x", "+", "1", ")", "*", "(", "tt", "+", "1", ")", "\n", "print", "(", "t", ")", "\n", "\n", "\n", "# record duration time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "aug_count", "=", "0", "\n", "# 1: normal", "\n", "It_warp", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I0", ",", "I1", ",", "I2", ",", "I3", ",", "t", ")", "\n", "aug_count", "+=", "1", "\n", "\n", "if", "MS_test", ":", "\n", "                    ", "scale", "=", "0.5", "\n", "I0_down", "=", "interp_resize", "(", "I0", ",", "scale", ")", "if", "I0", "is", "not", "None", "else", "I0", "\n", "I1_down", "=", "interp_resize", "(", "I1", ",", "scale", ")", "\n", "I2_down", "=", "interp_resize", "(", "I2", ",", "scale", ")", "\n", "I3_down", "=", "interp_resize", "(", "I3", ",", "scale", ")", "if", "I3", "is", "not", "None", "else", "I3", "\n", "\n", "It_warp_down", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I0_down", ",", "I1_down", ",", "I2_down", ",", "I3_down", ",", "t", ")", "\n", "It_warp_up", "=", "interp_resize", "(", "It_warp_down", ",", "1", "/", "scale", ")", "\n", "It_warp", "+=", "It_warp_up", "\n", "aug_count", "+=", "1", "\n", "\n", "", "if", "flip_test", ":", "\n", "# 2: flip W", "\n", "                    ", "I0_fW", "=", "torch", ".", "flip", "(", "I0", ",", "(", "-", "1", ",", ")", ")", "if", "I0", "is", "not", "None", "else", "I0", "\n", "I1_fW", "=", "torch", ".", "flip", "(", "I1", ",", "(", "-", "1", ",", ")", ")", "\n", "I2_fW", "=", "torch", ".", "flip", "(", "I2", ",", "(", "-", "1", ",", ")", ")", "\n", "I3_fW", "=", "torch", ".", "flip", "(", "I3", ",", "(", "-", "1", ",", ")", ")", "if", "I3", "is", "not", "None", "else", "I3", "\n", "It_warp2", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I0_fW", ",", "I1_fW", ",", "I2_fW", ",", "I3_fW", ",", "t", ")", "\n", "It_warp", "+=", "torch", ".", "flip", "(", "It_warp2", ",", "(", "-", "1", ",", ")", ")", "\n", "aug_count", "+=", "1", "\n", "\n", "# 3: flip H", "\n", "I0_fH", "=", "torch", ".", "flip", "(", "I0", ",", "(", "-", "2", ",", ")", ")", "if", "I0", "is", "not", "None", "else", "I0", "\n", "I1_fH", "=", "torch", ".", "flip", "(", "I1", ",", "(", "-", "2", ",", ")", ")", "\n", "I2_fH", "=", "torch", ".", "flip", "(", "I2", ",", "(", "-", "2", ",", ")", ")", "\n", "I3_fH", "=", "torch", ".", "flip", "(", "I3", ",", "(", "-", "2", ",", ")", ")", "if", "I3", "is", "not", "None", "else", "I3", "\n", "It_warp3", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I0_fH", ",", "I1_fH", ",", "I2_fH", ",", "I3_fH", ",", "t", ")", "\n", "It_warp", "+=", "torch", ".", "flip", "(", "It_warp3", ",", "(", "-", "2", ",", ")", ")", "\n", "aug_count", "+=", "1", "\n", "\n", "'''\n                    # 4: flip W and H\n                    I0_fWH = torch.flip(I0, (-2, -1)) if I0 is not None else I0\n                    I1_fWH = torch.flip(I1, (-2, -1))\n                    I2_fWH = torch.flip(I2, (-2, -1))\n                    I3_fWH = torch.flip(I3, (-2, -1)) if I3 is not None else I3\n                    It_warp4, I1t, I2t, I1_warp, I2_warp, F12, F21, I1tf, I2tf, M, dFt1, dFt2, Ft1, Ft2, Ft1r, Ft2r, _, _, _, _ = model(I0_fWH, I1_fWH, I2_fWH, I3_fWH, t)\n                    It_warp += torch.flip(It_warp4, (-2, -1))\n                    aug_count += 1    \n                    '''", "\n", "\n", "# rotation", "\n", "", "if", "rotation_test", ":", "\n", "# 5: rotate 90", "\n", "                    ", "I0_r90", "=", "torch", ".", "rot90", "(", "I0", ",", "1", ",", "(", "-", "1", ",", "-", "2", ")", ")", "if", "I0", "is", "not", "None", "else", "I0", "\n", "I1_r90", "=", "torch", ".", "rot90", "(", "I1", ",", "1", ",", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "I2_r90", "=", "torch", ".", "rot90", "(", "I2", ",", "1", ",", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "I3_r90", "=", "torch", ".", "rot90", "(", "I3", ",", "1", ",", "(", "-", "1", ",", "-", "2", ")", ")", "if", "I3", "is", "not", "None", "else", "I3", "\n", "It_warp5", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I0_r90", ",", "I1_r90", ",", "I2_r90", ",", "I3_r90", ",", "t", ")", "\n", "It_warp", "+=", "torch", ".", "rot90", "(", "It_warp5", ",", "3", ",", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "aug_count", "+=", "1", "\n", "\n", "# 6: rotate 270", "\n", "I0_r270", "=", "torch", ".", "rot90", "(", "I0", ",", "3", ",", "(", "-", "1", ",", "-", "2", ")", ")", "if", "I0", "is", "not", "None", "else", "I0", "\n", "I1_r270", "=", "torch", ".", "rot90", "(", "I1", ",", "3", ",", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "I2_r270", "=", "torch", ".", "rot90", "(", "I2", ",", "3", ",", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "I3_r270", "=", "torch", ".", "rot90", "(", "I3", ",", "3", ",", "(", "-", "1", ",", "-", "2", ")", ")", "if", "I3", "is", "not", "None", "else", "I3", "\n", "It_warp6", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I0_r270", ",", "I1_r270", ",", "I2_r270", ",", "I3_r270", ",", "t", ")", "\n", "It_warp", "+=", "torch", ".", "rot90", "(", "It_warp6", ",", "1", ",", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "aug_count", "+=", "1", "\n", "\n", "\n", "\n", "", "if", "reverse_test", ":", "\n", "# 7: reverse normal", "\n", "                    ", "It_warp7", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I3", ",", "I2", ",", "I1", ",", "I0", ",", "1", "-", "t", ")", "\n", "It_warp", "+=", "It_warp7", "\n", "aug_count", "+=", "1", "\n", "\n", "if", "reverse_flip", ":", "\n", "# 8: reverse flip W", "\n", "                        ", "It_warp8", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I3_fW", ",", "I2_fW", ",", "I1_fW", ",", "I0_fW", ",", "1", "-", "t", ")", "\n", "It_warp", "+=", "torch", ".", "flip", "(", "It_warp8", ",", "(", "-", "1", ",", ")", ")", "\n", "aug_count", "+=", "1", "\n", "# 9: reverse flip H", "\n", "It_warp9", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I3_fH", ",", "I2_fH", ",", "I1_fH", ",", "I0_fH", ",", "1", "-", "t", ")", "\n", "It_warp", "+=", "torch", ".", "flip", "(", "It_warp9", ",", "(", "-", "2", ",", ")", ")", "\n", "aug_count", "+=", "1", "\n", "# 10: reverse flip W and H", "\n", "It_warp10", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I3_fWH", ",", "I2_fWH", ",", "I1_fWH", ",", "I0_fWH", ",", "1", "-", "t", ")", "\n", "It_warp", "+=", "torch", ".", "flip", "(", "It_warp10", ",", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "aug_count", "+=", "1", "\n", "\n", "", "if", "reverse_rotation", ":", "\n", "# 11: reverse rotate 90", "\n", "                        ", "It_warp11", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I3_r90", ",", "I2_r90", ",", "I1_r90", ",", "I0_r90", ",", "t", ")", "\n", "It_warp", "+=", "torch", ".", "rot90", "(", "It_warp11", ",", "3", ",", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "aug_count", "+=", "1", "\n", "\n", "# 12: reverse rotate 270", "\n", "It_warp12", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "I3_r270", ",", "I2_r270", ",", "I1_r270", ",", "I0_r270", ",", "t", ")", "\n", "It_warp", "+=", "torch", ".", "rot90", "(", "It_warp12", ",", "1", ",", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "aug_count", "+=", "1", "\n", "\n", "\n", "\n", "# summary", "\n", "", "", "It_warp", "=", "It_warp", "/", "aug_count", "\n", "\n", "tot_time", "+=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "tot_frames", "+=", "1", "\n", "\n", "\n", "if", "len", "(", "sample", ")", "is", "4", ":", "\n", "#print(img_name[1][0], img_name[2][0]) ", "\n", "\n", "                    ", "int_name", "=", "(", "int", "(", "img_name", "[", "1", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "+", "int", "(", "img_name", "[", "2", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "//", "2", "\n", "if", "t", "==", "0.25", ":", "\n", "                        ", "int_name", "=", "int", "(", "int_name", "-", "2", ")", "\n", "", "elif", "t", "==", "0.5", ":", "\n", "                        ", "int_name", "=", "int", "(", "int_name", ")", "\n", "", "elif", "t", "==", "0.75", ":", "\n", "                        ", "int_name", "=", "int", "(", "int_name", "+", "2", ")", "\n", "\n", "", "print", "(", "'Input 4 frames: Quadratic; Interp name: {}'", ".", "format", "(", "int_name", ")", ")", "\n", "\n", "revtrans", "(", "It_warp", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "0", "]", "[", "0", "]", "+", "'/'", "+", "'{:08d}'", ".", "format", "(", "int", "(", "int_name", ")", ")", "+", "'.png'", ")", "\n", "", "else", ":", "\n", "#print(img_name[0][0], img_name[1][0])  ", "\n", "\n", "                    ", "int_name", "=", "(", "int", "(", "img_name", "[", "0", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "+", "int", "(", "img_name", "[", "1", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "//", "2", "\n", "if", "t", "==", "0.25", ":", "\n", "                        ", "int_name", "=", "int", "(", "int_name", "-", "2", ")", "\n", "", "elif", "t", "==", "0.5", ":", "\n", "                        ", "int_name", "=", "int", "(", "int_name", ")", "\n", "", "elif", "t", "==", "0.75", ":", "\n", "                        ", "int_name", "=", "int", "(", "int_name", "+", "2", ")", "\n", "\n", "", "print", "(", "'Input 2 frames: Linear; Interp name: {}'", ".", "format", "(", "int_name", ")", ")", "\n", "\n", "revtrans", "(", "It_warp", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "store_path", "+", "'/'", "+", "folder", "[", "0", "]", "[", "0", "]", "+", "'/'", "+", "'{:08d}'", ".", "format", "(", "int", "(", "int_name", ")", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.interpolate_REDS_VTSR.test": [[281, 305], ["torch.load", "torch.load", "torch.load", "torch.load", "print", "print", "print", "print", "print", "print", "print", "print", "print", "model.load_state_dict", "interpolate_REDS_VTSR.generate", "torch.load.keys", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.lyh-18_EQVI.None.interpolate_REDS_VTSR.generate", "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.keys"], ["", "", "", "", "", "def", "test", "(", ")", ":", "\n", "\n", "    ", "dict1", "=", "torch", ".", "load", "(", "config", ".", "checkpoint", ")", "\n", "print", "(", "dict1", ".", "keys", "(", ")", ")", "\n", "print", "(", "dict1", "[", "'Detail'", "]", ")", "\n", "print", "(", "dict1", "[", "'epoch'", "]", ")", "\n", "max_psnr", "=", "0", "\n", "max_id", "=", "0", "\n", "psnr_dict", "=", "{", "}", "\n", "\n", "print", "(", "'MS test: '", ",", "MS_test", ")", "\n", "print", "(", "'flip test: '", ",", "flip_test", ")", "\n", "print", "(", "'rotation test: '", ",", "rotation_test", ")", "\n", "print", "(", "'reverse test: '", ",", "reverse_test", ")", "\n", "print", "(", "'reverse flip test: '", ",", "reverse_flip", ")", "\n", "print", "(", "'reverse rotation test: '", ",", "reverse_rotation", ")", "\n", "#exit()", "\n", "\n", "\n", "model", ".", "load_state_dict", "(", "dict1", "[", "'model_state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "store_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "config", ".", "store_path", ")", "\n", "", "generate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.correlation._FunctionCorrelation.forward": [[281, 335], ["first.new_zeros", "first.new_zeros", "correlation._FunctionCorrelation.save_for_backward", "first.new_zeros", "first.is_contiguous", "second.is_contiguous", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_launch", "second.size", "second.size", "correlation.cupy_launch", "first.new_zeros.size", "correlation.cupy_launch", "NotImplementedError", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "correlation.cupy_kernel", "tuple", "tuple", "first.new_zeros.size", "first.new_zeros.size", "correlation.cupy_kernel", "tuple", "tuple", "first.data_ptr", "first.new_zeros.data_ptr", "second.data_ptr", "first.new_zeros.data_ptr", "first.size", "first.new_zeros.data_ptr", "first.new_zeros.data_ptr", "first.new_zeros.data_ptr", "int", "first.size", "first.size", "int", "second.size", "second.size", "first.new_zeros.size", "first.new_zeros.size", "first.new_zeros.size"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel"], ["\t", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "first", ",", "second", ")", ":", "\n", "\t\t", "rbot0", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "2", ")", "+", "8", ",", "first", ".", "size", "(", "3", ")", "+", "8", ",", "first", ".", "size", "(", "1", ")", "]", ")", "\n", "rbot1", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "2", ")", "+", "8", ",", "first", ".", "size", "(", "3", ")", "+", "8", ",", "first", ".", "size", "(", "1", ")", "]", ")", "\n", "\n", "self", ".", "save_for_backward", "(", "first", ",", "second", ",", "rbot0", ",", "rbot1", ")", "\n", "\n", "assert", "(", "first", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "assert", "(", "second", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "\n", "output", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "81", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "\n", "\n", "if", "first", ".", "is_cuda", "==", "True", ":", "\n", "\t\t\t", "n", "=", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_rearrange'", ",", "cupy_kernel", "(", "'kernel_Correlation_rearrange'", ",", "{", "\n", "'input'", ":", "first", ",", "\n", "'output'", ":", "rbot0", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "16", "-", "1", ")", "/", "16", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "16", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "first", ".", "data_ptr", "(", ")", ",", "rbot0", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "n", "=", "second", ".", "size", "(", "2", ")", "*", "second", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_rearrange'", ",", "cupy_kernel", "(", "'kernel_Correlation_rearrange'", ",", "{", "\n", "'input'", ":", "second", ",", "\n", "'output'", ":", "rbot1", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "16", "-", "1", ")", "/", "16", ")", ",", "second", ".", "size", "(", "1", ")", ",", "second", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "16", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "second", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "n", "=", "output", ".", "size", "(", "1", ")", "*", "output", ".", "size", "(", "2", ")", "*", "output", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateOutput'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateOutput'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'top'", ":", "output", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "output", ".", "size", "(", "3", ")", ",", "output", ".", "size", "(", "2", ")", ",", "output", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "32", ",", "1", ",", "1", "]", ")", ",", "\n", "shared_mem", "=", "first", ".", "size", "(", "1", ")", "*", "4", ",", "\n", "args", "=", "[", "n", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "output", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "", "elif", "first", ".", "is_cuda", "==", "False", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# end", "\n", "\n", "", "return", "output", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.correlation._FunctionCorrelation.backward": [[337, 389], ["gradOutput.is_contiguous", "first.new_zeros", "first.new_zeros", "range", "range", "NotImplementedError", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_launch", "first.size", "correlation.cupy_launch", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "rbot0.data_ptr", "rbot1.data_ptr", "gradOutput.data_ptr", "gradFirst.data_ptr", "rbot0.data_ptr", "rbot1.data_ptr", "gradOutput.data_ptr", "gradSecond.data_ptr", "int", "int"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "gradOutput", ")", ":", "\n", "\t\t", "first", ",", "second", ",", "rbot0", ",", "rbot1", "=", "self", ".", "saved_tensors", "\n", "\n", "assert", "(", "gradOutput", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "\n", "gradFirst", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "if", "self", ".", "needs_input_grad", "[", "0", "]", "==", "True", "else", "None", "\n", "gradSecond", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "if", "self", ".", "needs_input_grad", "[", "1", "]", "==", "True", "else", "None", "\n", "\n", "if", "first", ".", "is_cuda", "==", "True", ":", "\n", "\t\t\t", "if", "gradFirst", "is", "not", "None", ":", "\n", "\t\t\t\t", "for", "intSample", "in", "range", "(", "first", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t\t\t\t", "n", "=", "first", ".", "size", "(", "1", ")", "*", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateGradFirst'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateGradFirst'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'gradOutput'", ":", "gradOutput", ",", "\n", "'gradFirst'", ":", "gradFirst", ",", "\n", "'gradSecond'", ":", "None", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "intSample", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "gradOutput", ".", "data_ptr", "(", ")", ",", "gradFirst", ".", "data_ptr", "(", ")", ",", "None", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "if", "gradSecond", "is", "not", "None", ":", "\n", "\t\t\t\t", "for", "intSample", "in", "range", "(", "first", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t\t\t\t", "n", "=", "first", ".", "size", "(", "1", ")", "*", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateGradSecond'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateGradSecond'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'gradOutput'", ":", "gradOutput", ",", "\n", "'gradFirst'", ":", "None", ",", "\n", "'gradSecond'", ":", "gradSecond", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "intSample", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "gradOutput", ".", "data_ptr", "(", ")", ",", "None", ",", "gradSecond", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "", "elif", "first", ".", "is_cuda", "==", "False", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# end", "\n", "\n", "", "return", "gradFirst", ",", "gradSecond", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.correlation.ModuleCorrelation.__init__": [[397, 399], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "ModuleCorrelation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.correlation.ModuleCorrelation.forward": [[401, 403], ["_FunctionCorrelation.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\t\t", "return", "_FunctionCorrelation", ".", "apply", "(", "tensorFirst", ",", "tensorSecond", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.correlation.cupy_kernel": [[237, 273], ["globals", "re.search", "int", "re.search.group", "objectVariables[].size", "strKernel.replace.replace", "re.search", "int", "re.search.group().split", "objectVariables[].stride", "strKernel.replace.replace", "re.search.group", "re.search.group", "str", "re.search.group", "re.search.group", "re.search.group", "range", "str", "str.join", "strArgs[].replace().replace().strip", "strArgs[].replace().replace", "strArgs[].replace"], "function", ["None"], ["def", "cupy_kernel", "(", "strFunction", ",", "objectVariables", ")", ":", "\n", "\t", "strKernel", "=", "globals", "(", ")", "[", "strFunction", "]", "\n", "\n", "while", "True", ":", "\n", "\t\t", "objectMatch", "=", "re", ".", "search", "(", "'(SIZE_)([0-4])(\\()([^\\)]*)(\\))'", ",", "strKernel", ")", "\n", "\n", "if", "objectMatch", "is", "None", ":", "\n", "\t\t\t", "break", "\n", "# end", "\n", "\n", "", "intArg", "=", "int", "(", "objectMatch", ".", "group", "(", "2", ")", ")", "\n", "\n", "strTensor", "=", "objectMatch", ".", "group", "(", "4", ")", "\n", "intSizes", "=", "objectVariables", "[", "strTensor", "]", ".", "size", "(", ")", "\n", "\n", "strKernel", "=", "strKernel", ".", "replace", "(", "objectMatch", ".", "group", "(", ")", ",", "str", "(", "intSizes", "[", "intArg", "]", ")", ")", "\n", "# end", "\n", "\n", "", "while", "True", ":", "\n", "\t\t", "objectMatch", "=", "re", ".", "search", "(", "'(VALUE_)([0-4])(\\()([^\\)]+)(\\))'", ",", "strKernel", ")", "\n", "\n", "if", "objectMatch", "is", "None", ":", "\n", "\t\t\t", "break", "\n", "# end", "\n", "\n", "", "intArgs", "=", "int", "(", "objectMatch", ".", "group", "(", "2", ")", ")", "\n", "strArgs", "=", "objectMatch", ".", "group", "(", "4", ")", ".", "split", "(", "','", ")", "\n", "\n", "strTensor", "=", "strArgs", "[", "0", "]", "\n", "intStrides", "=", "objectVariables", "[", "strTensor", "]", ".", "stride", "(", ")", "\n", "strIndex", "=", "[", "'(('", "+", "strArgs", "[", "intArg", "+", "1", "]", ".", "replace", "(", "'{'", ",", "'('", ")", ".", "replace", "(", "'}'", ",", "')'", ")", ".", "strip", "(", ")", "+", "')*'", "+", "str", "(", "intStrides", "[", "intArg", "]", ")", "+", "')'", "for", "intArg", "in", "range", "(", "intArgs", ")", "]", "\n", "\n", "strKernel", "=", "strKernel", ".", "replace", "(", "objectMatch", ".", "group", "(", "0", ")", ",", "strTensor", "+", "'['", "+", "str", ".", "join", "(", "'+'", ",", "strIndex", ")", "+", "']'", ")", "\n", "# end", "\n", "\n", "", "return", "strKernel", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.correlation.cupy_launch": [[275, 278], ["cupy.util.memoize", "cupy.cuda.compile_with_cache().get_function", "cupy.cuda.compile_with_cache"], "function", ["None"], ["", "@", "cupy", ".", "util", ".", "memoize", "(", "for_each_device", "=", "True", ")", "\n", "def", "cupy_launch", "(", "strFunction", ",", "strKernel", ")", ":", "\n", "\t", "return", "cupy", ".", "cuda", ".", "compile_with_cache", "(", "strKernel", ")", ".", "get_function", "(", "strFunction", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.None.correlation.FunctionCorrelation": [[392, 394], ["_FunctionCorrelation.apply"], "function", ["None"], ["", "", "def", "FunctionCorrelation", "(", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\t", "return", "_FunctionCorrelation", ".", "apply", "(", "tensorFirst", ",", "tensorSecond", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.from_file": [[29, 43], ["filename.endswith", "config.Config", "sys.path.append", "os.basename().rstrip", "importlib.import_module", "easydict.EasyDict", "IOError", "os.dirname", "os.basename", "importlib.import_module.__dict__.items", "name.startswith"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.items"], ["    ", "@", "staticmethod", "\n", "def", "from_file", "(", "filename", ")", ":", "\n", "        ", "if", "filename", ".", "endswith", "(", "'.py'", ")", ":", "\n", "            ", "sys", ".", "path", ".", "append", "(", "osp", ".", "dirname", "(", "filename", ")", ")", "\n", "module_name", "=", "osp", ".", "basename", "(", "filename", ")", ".", "rstrip", "(", "'.py'", ")", "\n", "cfg", "=", "import_module", "(", "module_name", ")", "\n", "config_dict", "=", "edict", "(", "{", "\n", "name", ":", "value", "\n", "for", "name", ",", "value", "in", "cfg", ".", "__dict__", ".", "items", "(", ")", "\n", "if", "not", "name", ".", "startswith", "(", "(", "'__'", ",", "'_'", ")", ")", "\n", "}", ")", "\n", "", "else", ":", "\n", "            ", "raise", "IOError", "(", "'only py type are supported as config files'", ")", "\n", "", "return", "Config", "(", "config_dict", ",", "filename", "=", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.auto_argparser": [[44, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "Config.from_py", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "config.add_args", "argparse.ArgumentParser.parse_known_args"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.add_args"], ["", "@", "staticmethod", "\n", "def", "auto_argparser", "(", "description", "=", "None", ")", ":", "\n", "        ", "partial_parser", "=", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "partial_parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "cfg_file", "=", "partial_parser", ".", "parse_known_args", "(", ")", "[", "0", "]", ".", "config", "\n", "cfg", "=", "Config", ".", "from_py", "(", "cfg_file", ")", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "add_args", "(", "parser", ",", "cfg", ")", "\n", "return", "parser", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.__init__": [[55, 63], ["isinstance", "open", "f.read"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "config_dict", ",", "filename", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "config_dict", ",", "dict", ")", "\n", "self", ".", "_config_dict", "=", "config_dict", "\n", "self", ".", "_default_dict", "=", "{", "}", "\n", "self", ".", "filename", "=", "filename", "\n", "if", "filename", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_text", "=", "f", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.__getattr__": [[64, 73], ["None"], "methods", ["None"], ["", "", "", "def", "__getattr__", "(", "self", ",", "key", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "val", "=", "self", ".", "_config_dict", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "if", "key", "in", "self", ".", "_default_dict", ":", "\n", "                ", "val", "=", "self", ".", "_default_dict", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.__getitem__": [[74, 76], ["config.Config.__getattr__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.__getattr__"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "__getattr__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.__iter__": [[77, 79], ["config.Config.keys"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.keys"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.__contains__": [[80, 85], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "_config_dict", "or", "key", "in", "self", ".", "_default_dict", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.text": [[86, 89], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "text", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_text", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.keys": [[90, 96], ["None"], "methods", ["None"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "_config_dict", ":", "\n", "            ", "yield", "key", "\n", "", "for", "key", "in", "self", ".", "_default_dict", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_config_dict", ":", "\n", "                ", "yield", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.values": [[97, 100], ["config.Config.keys", "config.Config.__getattr__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.keys", "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.__getattr__"], ["", "", "", "def", "values", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", "(", ")", ":", "\n", "            ", "yield", "self", ".", "__getattr__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.items": [[101, 104], ["config.Config.keys", "config.Config.__getattr__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.keys", "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.__getattr__"], ["", "", "def", "items", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", "(", ")", ":", "\n", "            ", "yield", "key", ",", "self", ".", "__getattr__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.set_default": [[105, 108], ["isinstance", "config.Config._default_dict.update"], "methods", ["None"], ["", "", "def", "set_default", "(", "self", ",", "default_dict", ")", ":", "\n", "        ", "assert", "isinstance", "(", "default_dict", ",", "dict", ")", "\n", "self", ".", "_default_dict", ".", "update", "(", "default_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.update_with_args": [[109, 120], ["vars().items", "vars", "k.split"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.items"], ["", "def", "update_with_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "is", "not", "None", ":", "\n", "                ", "if", "'.'", "not", "in", "k", ":", "\n", "                    ", "self", ".", "_config_dict", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "tree", "=", "k", ".", "split", "(", "'.'", ")", "\n", "tmp", "=", "self", ".", "_config_dict", "\n", "for", "key", "in", "tree", "[", ":", "-", "1", "]", ":", "\n", "                        ", "tmp", "=", "tmp", "[", "key", "]", "\n", "", "tmp", "[", "tree", "[", "-", "1", "]", "]", "=", "v", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.add_args": [[9, 26], ["cfg.items", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "config.add_args", "isinstance", "parser.add_argument", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.items", "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.add_args"], ["def", "add_args", "(", "parser", ",", "cfg", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "int", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "int", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "float", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "float", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "action", "=", "'store_true'", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "add_args", "(", "parser", ",", "v", ",", "k", "+", "'.'", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "Iterable", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "type", "(", "v", "[", "0", "]", ")", ",", "nargs", "=", "'+'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'connot parse key {} of type {}'", ".", "format", "(", "prefix", "+", "k", ",", "type", "(", "v", ")", ")", ")", "\n", "", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.correlation._FunctionCorrelation.forward": [[281, 335], ["first.new_zeros", "first.new_zeros", "correlation._FunctionCorrelation.save_for_backward", "first.new_zeros", "first.is_contiguous", "second.is_contiguous", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_launch", "second.size", "second.size", "correlation.cupy_launch", "first.new_zeros.size", "correlation.cupy_launch", "NotImplementedError", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "correlation.cupy_kernel", "tuple", "tuple", "first.new_zeros.size", "first.new_zeros.size", "correlation.cupy_kernel", "tuple", "tuple", "first.data_ptr", "first.new_zeros.data_ptr", "second.data_ptr", "first.new_zeros.data_ptr", "first.size", "first.new_zeros.data_ptr", "first.new_zeros.data_ptr", "first.new_zeros.data_ptr", "int", "first.size", "first.size", "int", "second.size", "second.size", "first.new_zeros.size", "first.new_zeros.size", "first.new_zeros.size"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel"], ["\t", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "first", ",", "second", ")", ":", "\n", "\t\t", "rbot0", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "2", ")", "+", "8", ",", "first", ".", "size", "(", "3", ")", "+", "8", ",", "first", ".", "size", "(", "1", ")", "]", ")", "\n", "rbot1", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "2", ")", "+", "8", ",", "first", ".", "size", "(", "3", ")", "+", "8", ",", "first", ".", "size", "(", "1", ")", "]", ")", "\n", "\n", "self", ".", "save_for_backward", "(", "first", ",", "second", ",", "rbot0", ",", "rbot1", ")", "\n", "\n", "assert", "(", "first", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "assert", "(", "second", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "\n", "output", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "81", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "\n", "\n", "if", "first", ".", "is_cuda", "==", "True", ":", "\n", "\t\t\t", "n", "=", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_rearrange'", ",", "cupy_kernel", "(", "'kernel_Correlation_rearrange'", ",", "{", "\n", "'input'", ":", "first", ",", "\n", "'output'", ":", "rbot0", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "16", "-", "1", ")", "/", "16", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "16", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "first", ".", "data_ptr", "(", ")", ",", "rbot0", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "n", "=", "second", ".", "size", "(", "2", ")", "*", "second", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_rearrange'", ",", "cupy_kernel", "(", "'kernel_Correlation_rearrange'", ",", "{", "\n", "'input'", ":", "second", ",", "\n", "'output'", ":", "rbot1", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "16", "-", "1", ")", "/", "16", ")", ",", "second", ".", "size", "(", "1", ")", ",", "second", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "16", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "second", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "n", "=", "output", ".", "size", "(", "1", ")", "*", "output", ".", "size", "(", "2", ")", "*", "output", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateOutput'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateOutput'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'top'", ":", "output", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "output", ".", "size", "(", "3", ")", ",", "output", ".", "size", "(", "2", ")", ",", "output", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "32", ",", "1", ",", "1", "]", ")", ",", "\n", "shared_mem", "=", "first", ".", "size", "(", "1", ")", "*", "4", ",", "\n", "args", "=", "[", "n", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "output", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "", "elif", "first", ".", "is_cuda", "==", "False", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# end", "\n", "\n", "", "return", "output", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.correlation._FunctionCorrelation.backward": [[337, 389], ["gradOutput.is_contiguous", "first.new_zeros", "first.new_zeros", "range", "range", "NotImplementedError", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_launch", "first.size", "correlation.cupy_launch", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "rbot0.data_ptr", "rbot1.data_ptr", "gradOutput.data_ptr", "gradFirst.data_ptr", "rbot0.data_ptr", "rbot1.data_ptr", "gradOutput.data_ptr", "gradSecond.data_ptr", "int", "int"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "gradOutput", ")", ":", "\n", "\t\t", "first", ",", "second", ",", "rbot0", ",", "rbot1", "=", "self", ".", "saved_tensors", "\n", "\n", "assert", "(", "gradOutput", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "\n", "gradFirst", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "if", "self", ".", "needs_input_grad", "[", "0", "]", "==", "True", "else", "None", "\n", "gradSecond", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "if", "self", ".", "needs_input_grad", "[", "1", "]", "==", "True", "else", "None", "\n", "\n", "if", "first", ".", "is_cuda", "==", "True", ":", "\n", "\t\t\t", "if", "gradFirst", "is", "not", "None", ":", "\n", "\t\t\t\t", "for", "intSample", "in", "range", "(", "first", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t\t\t\t", "n", "=", "first", ".", "size", "(", "1", ")", "*", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateGradFirst'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateGradFirst'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'gradOutput'", ":", "gradOutput", ",", "\n", "'gradFirst'", ":", "gradFirst", ",", "\n", "'gradSecond'", ":", "None", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "intSample", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "gradOutput", ".", "data_ptr", "(", ")", ",", "gradFirst", ".", "data_ptr", "(", ")", ",", "None", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "if", "gradSecond", "is", "not", "None", ":", "\n", "\t\t\t\t", "for", "intSample", "in", "range", "(", "first", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t\t\t\t", "n", "=", "first", ".", "size", "(", "1", ")", "*", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateGradSecond'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateGradSecond'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'gradOutput'", ":", "gradOutput", ",", "\n", "'gradFirst'", ":", "None", ",", "\n", "'gradSecond'", ":", "gradSecond", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "intSample", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "gradOutput", ".", "data_ptr", "(", ")", ",", "None", ",", "gradSecond", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "", "elif", "first", ".", "is_cuda", "==", "False", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# end", "\n", "\n", "", "return", "gradFirst", ",", "gradSecond", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.correlation.ModuleCorrelation.__init__": [[397, 399], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "ModuleCorrelation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.correlation.ModuleCorrelation.forward": [[401, 403], ["_FunctionCorrelation.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\t\t", "return", "_FunctionCorrelation", ".", "apply", "(", "tensorFirst", ",", "tensorSecond", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.correlation.cupy_kernel": [[237, 273], ["globals", "re.search", "int", "re.search.group", "objectVariables[].size", "strKernel.replace.replace", "re.search", "int", "re.search.group().split", "objectVariables[].stride", "strKernel.replace.replace", "re.search.group", "re.search.group", "str", "re.search.group", "re.search.group", "re.search.group", "range", "str", "str.join", "strArgs[].replace().replace().strip", "strArgs[].replace().replace", "strArgs[].replace"], "function", ["None"], ["def", "cupy_kernel", "(", "strFunction", ",", "objectVariables", ")", ":", "\n", "\t", "strKernel", "=", "globals", "(", ")", "[", "strFunction", "]", "\n", "\n", "while", "True", ":", "\n", "\t\t", "objectMatch", "=", "re", ".", "search", "(", "'(SIZE_)([0-4])(\\()([^\\)]*)(\\))'", ",", "strKernel", ")", "\n", "\n", "if", "objectMatch", "is", "None", ":", "\n", "\t\t\t", "break", "\n", "# end", "\n", "\n", "", "intArg", "=", "int", "(", "objectMatch", ".", "group", "(", "2", ")", ")", "\n", "\n", "strTensor", "=", "objectMatch", ".", "group", "(", "4", ")", "\n", "intSizes", "=", "objectVariables", "[", "strTensor", "]", ".", "size", "(", ")", "\n", "\n", "strKernel", "=", "strKernel", ".", "replace", "(", "objectMatch", ".", "group", "(", ")", ",", "str", "(", "intSizes", "[", "intArg", "]", ")", ")", "\n", "# end", "\n", "\n", "", "while", "True", ":", "\n", "\t\t", "objectMatch", "=", "re", ".", "search", "(", "'(VALUE_)([0-4])(\\()([^\\)]+)(\\))'", ",", "strKernel", ")", "\n", "\n", "if", "objectMatch", "is", "None", ":", "\n", "\t\t\t", "break", "\n", "# end", "\n", "\n", "", "intArgs", "=", "int", "(", "objectMatch", ".", "group", "(", "2", ")", ")", "\n", "strArgs", "=", "objectMatch", ".", "group", "(", "4", ")", ".", "split", "(", "','", ")", "\n", "\n", "strTensor", "=", "strArgs", "[", "0", "]", "\n", "intStrides", "=", "objectVariables", "[", "strTensor", "]", ".", "stride", "(", ")", "\n", "strIndex", "=", "[", "'(('", "+", "strArgs", "[", "intArg", "+", "1", "]", ".", "replace", "(", "'{'", ",", "'('", ")", ".", "replace", "(", "'}'", ",", "')'", ")", ".", "strip", "(", ")", "+", "')*'", "+", "str", "(", "intStrides", "[", "intArg", "]", ")", "+", "')'", "for", "intArg", "in", "range", "(", "intArgs", ")", "]", "\n", "\n", "strKernel", "=", "strKernel", ".", "replace", "(", "objectMatch", ".", "group", "(", "0", ")", ",", "strTensor", "+", "'['", "+", "str", ".", "join", "(", "'+'", ",", "strIndex", ")", "+", "']'", ")", "\n", "# end", "\n", "\n", "", "return", "strKernel", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.correlation.cupy_launch": [[275, 278], ["cupy.util.memoize", "cupy.cuda.compile_with_cache().get_function", "cupy.cuda.compile_with_cache"], "function", ["None"], ["", "@", "cupy", ".", "util", ".", "memoize", "(", "for_each_device", "=", "True", ")", "\n", "def", "cupy_launch", "(", "strFunction", ",", "strKernel", ")", ":", "\n", "\t", "return", "cupy", ".", "cuda", ".", "compile_with_cache", "(", "strKernel", ")", ".", "get_function", "(", "strFunction", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.correlation.FunctionCorrelation": [[392, 394], ["_FunctionCorrelation.apply"], "function", ["None"], ["", "", "def", "FunctionCorrelation", "(", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\t", "return", "_FunctionCorrelation", ".", "apply", "(", "tensorFirst", ",", "tensorSecond", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.Get_gradient.__init__": [[19, 31], ["torch.Module.__init__", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Get_gradient", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_v", "=", "[", "[", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", "]", "\n", "kernel_h", "=", "[", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", "\n", "kernel_h", "=", "torch", ".", "FloatTensor", "(", "kernel_h", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "kernel_v", "=", "torch", ".", "FloatTensor", "(", "kernel_v", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "weight_h", "=", "nn", ".", "Parameter", "(", "data", "=", "kernel_h", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "weight_v", "=", "nn", ".", "Parameter", "(", "data", "=", "kernel_v", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.Get_gradient.forward": [[32, 51], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "[", ":", ",", "0", "]", "\n", "x1", "=", "x", "[", ":", ",", "1", "]", "\n", "x2", "=", "x", "[", ":", ",", "2", "]", "\n", "x0_v", "=", "F", ".", "conv2d", "(", "x0", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_v", ",", "padding", "=", "1", ")", "\n", "x0_h", "=", "F", ".", "conv2d", "(", "x0", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_h", ",", "padding", "=", "1", ")", "\n", "\n", "x1_v", "=", "F", ".", "conv2d", "(", "x1", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_v", ",", "padding", "=", "1", ")", "\n", "x1_h", "=", "F", ".", "conv2d", "(", "x1", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_h", ",", "padding", "=", "1", ")", "\n", "\n", "x2_v", "=", "F", ".", "conv2d", "(", "x2", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_v", ",", "padding", "=", "1", ")", "\n", "x2_h", "=", "F", ".", "conv2d", "(", "x2", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_h", ",", "padding", "=", "1", ")", "\n", "\n", "x0", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "x0_v", ",", "2", ")", "+", "torch", ".", "pow", "(", "x0_h", ",", "2", ")", "+", "1e-6", ")", "\n", "x1", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "x1_v", ",", "2", ")", "+", "torch", ".", "pow", "(", "x1_h", ",", "2", ")", "+", "1e-6", ")", "\n", "x2", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "x2_v", ",", "2", ")", "+", "torch", ".", "pow", "(", "x2_h", ",", "2", ")", "+", "1e-6", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x0", ",", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.SmallMaskNet.__init__": [[77, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["def", "__init__", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "super", "(", "SmallMaskNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input", ",", "32", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "16", ",", "output", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.SmallMaskNet.forward": [[83, 88], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.SmallMaskNet.conv3", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.SmallMaskNet.conv1", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.SmallMaskNet.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.__init__": [[94, 141], ["torch.Module.__init__", "forward_warp_gaussian.ForwardWarp", "UNet2.UNet2.UNet2.cuda", "torchvision.models.resnet18", "[].cuda", "scopeflow_models.IRR_PWC_V2.PWCNet.cuda", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "load_net[].items", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.flownet.load_state_dict", "print", "SmallMaskNet().cuda", "Small_UNet.Small_UNet.Small_UNet", "LSE_acceleration.compute_acceleration", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.Get_gradient", "k.startswith", "UNet2.UNet2.UNet2", "scopeflow_models.IRR_PWC_V2.PWCNet", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.SmallMaskNet", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.items"], ["def", "__init__", "(", "self", ",", "path", "=", "'./network-default.pytorch'", ")", ":", "\n", "        ", "super", "(", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "fwarp", "=", "ForwardWarp", "(", ")", "\n", "self", ".", "refinenet", "=", "UNet", "(", "20", ",", "8", ")", ".", "cuda", "(", ")", "\n", "\n", "# extract the contextual information", "\n", "resnet18", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "feat_ext", "=", "list", "(", "resnet18", ".", "children", "(", ")", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "self", ".", "feat_ext", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "feat_ext", ".", "requires_grad", "=", "False", "\n", "\n", "### Scope Flow", "\n", "args", "=", "None", "\n", "self", ".", "flownet", "=", "ScopeFlow", "(", "args", ",", "div_flow", "=", "0.05", ")", ".", "cuda", "(", ")", "\n", "# load model", "\n", "checkpoint", "=", "'checkpoints/scopeflow/Sintel_ft/checkpoint_best.ckpt'", "\n", "#if isinstance(self.flownet, nn.DataParallel) or isinstance(self.flownet, DistributedDataParallel):", "\n", "#    self.flownet = self.flownet.module", "\n", "load_net", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "#print(self.flownet.state_dict().keys())", "\n", "#print('#########################')", "\n", "\n", "# remove unuseful keys", "\n", "load_net_clean", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "load_net", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'_model.module'", ")", ":", "\n", "                ", "load_net_clean", "[", "k", "[", "14", ":", "]", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "load_net_clean", "[", "k", "]", "=", "v", "\n", "#print(load_net_clean.keys()) ", "\n", "\n", "", "", "self", ".", "flownet", ".", "load_state_dict", "(", "load_net_clean", ",", "strict", "=", "True", ")", "\n", "print", "(", "'Load ScopeFlow successfully!'", ")", "\n", "### Scope Flow", "\n", "\n", "\n", "\n", "self", ".", "masknet", "=", "SmallMaskNet", "(", "38", ",", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "synthesisnet", "=", "Small_UNet", "(", "140", ",", "3", ")", "\n", "\n", "\n", "self", ".", "acc", "=", "compute_acceleration", "(", "self", ".", "flownet", ")", "\n", "\n", "# grad", "\n", "self", ".", "get_grad", "=", "Get_gradient", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.forward": [[142, 214], ["AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.fwarp", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.fwarp", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.refinenet", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.get_grad", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.get_grad", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.synthesisnet", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.feat_ext", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.feat_ext", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.flownet().float", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.flownet().float", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.acc", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.acc", "norm1[].clone", "norm2[].clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.flownet().float", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.flownet().float", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.flownet", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.flownet", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.masknet", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.flownet", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.flownet", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp"], ["", "def", "forward", "(", "self", ",", "I0", ",", "I1", ",", "I2", ",", "I3", ",", "t", ")", ":", "\n", "\n", "# Input: I0-I3: (N, C, H, W)", "\n", "#          t: (N, 1, 1, 1) or constant*", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat1", "=", "self", ".", "feat_ext", "(", "I1", ")", "\n", "feat2", "=", "self", ".", "feat_ext", "(", "I2", ")", "\n", "\n", "F12", "=", "self", ".", "flownet", "(", "I1", ",", "I2", ")", ".", "float", "(", ")", "\n", "F21", "=", "self", ".", "flownet", "(", "I2", ",", "I1", ")", ".", "float", "(", ")", "\n", "\n", "\n", "\n", "\n", "", "if", "I0", "is", "not", "None", "and", "I3", "is", "not", "None", ":", "\n", "            ", "F1ta", "=", "self", ".", "acc", "(", "I0", ",", "I1", ",", "I2", ",", "I3", ",", "t", ")", "\n", "F2ta", "=", "self", ".", "acc", "(", "I3", ",", "I2", ",", "I1", ",", "I0", ",", "1", "-", "t", ")", "\n", "\n", "F1t", "=", "F1ta", "\n", "F2t", "=", "F2ta", "\n", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "F12", "=", "self", ".", "flownet", "(", "I1", ",", "I2", ")", ".", "float", "(", ")", "\n", "F21", "=", "self", ".", "flownet", "(", "I2", ",", "I1", ")", ".", "float", "(", ")", "\n", "\n", "", "F1t", "=", "t", "*", "F12", "\n", "F2t", "=", "(", "1", "-", "t", ")", "*", "F21", "\n", "\n", "\n", "", "Ft1", ",", "norm1", "=", "self", ".", "fwarp", "(", "F1t", ",", "F1t", ")", "\n", "Ft1", "=", "-", "Ft1", "\n", "Ft2", ",", "norm2", "=", "self", ".", "fwarp", "(", "F2t", ",", "F2t", ")", "\n", "Ft2", "=", "-", "Ft2", "\n", "\n", "# Ft1 = -(1-t)*t*F12 + t*t*F21", "\n", "# Ft2 = (1-t)*(1-t)*F12 - t*(1-t)*F21", "\n", "\n", "Ft1", "[", "norm1", ">", "0", "]", "=", "Ft1", "[", "norm1", ">", "0", "]", "/", "norm1", "[", "norm1", ">", "0", "]", ".", "clone", "(", ")", "\n", "Ft2", "[", "norm2", ">", "0", "]", "=", "Ft2", "[", "norm2", ">", "0", "]", "/", "norm2", "[", "norm2", ">", "0", "]", ".", "clone", "(", ")", "\n", "\n", "I1t", "=", "backwarp", "(", "I1", ",", "Ft1", ")", "\n", "I2t", "=", "backwarp", "(", "I2", ",", "Ft2", ")", "\n", "\n", "output", ",", "feature", "=", "self", ".", "refinenet", "(", "torch", ".", "cat", "(", "[", "I1", ",", "I2", ",", "I1t", ",", "I2t", ",", "F12", ",", "F21", ",", "Ft1", ",", "Ft2", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "Ft1r", "=", "backwarp", "(", "Ft1", ",", "10", "*", "torch", ".", "tanh", "(", "output", "[", ":", ",", "4", ":", "6", "]", ")", ")", "+", "output", "[", ":", ",", ":", "2", "]", "\n", "Ft2r", "=", "backwarp", "(", "Ft2", ",", "10", "*", "torch", ".", "tanh", "(", "output", "[", ":", ",", "6", ":", "8", "]", ")", ")", "+", "output", "[", ":", ",", "2", ":", "4", "]", "\n", "\n", "I1tf", "=", "backwarp", "(", "I1", ",", "Ft1r", ")", "\n", "I2tf", "=", "backwarp", "(", "I2", ",", "Ft2r", ")", "\n", "\n", "# grad", "\n", "G1", "=", "self", ".", "get_grad", "(", "I1", ")", "\n", "G2", "=", "self", ".", "get_grad", "(", "I2", ")", "\n", "G1tf", "=", "backwarp", "(", "G1", ",", "Ft1r", ")", "\n", "G2tf", "=", "backwarp", "(", "G2", ",", "Ft2r", ")", "\n", "\n", "feat_warp1", "=", "backwarp", "(", "feat1", ",", "Ft1r", ")", "\n", "feat_warp2", "=", "backwarp", "(", "feat2", ",", "Ft2r", ")", "\n", "\n", "M", "=", "torch", ".", "sigmoid", "(", "self", ".", "masknet", "(", "torch", ".", "cat", "(", "[", "I1tf", ",", "I2tf", ",", "feature", "]", ",", "dim", "=", "1", ")", ")", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "It_warp", "=", "(", "(", "1", "-", "t", ")", "*", "M", "*", "I1tf", "+", "t", "*", "(", "1", "-", "M", ")", "*", "I2tf", ")", "/", "(", "(", "1", "-", "t", ")", "*", "M", "+", "t", "*", "(", "1", "-", "M", ")", ")", ".", "clone", "(", ")", "\n", "\n", "residual", "=", "self", ".", "synthesisnet", "(", "torch", ".", "cat", "(", "[", "feat_warp1", ",", "feat_warp2", ",", "G1tf", ",", "G2tf", ",", "I1tf", ",", "I2tf", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "It_warp", "=", "It_warp", "+", "residual", "\n", "\n", "It_warp", "=", "torch", ".", "clamp", "(", "It_warp", ",", "0", ",", "1", ")", "\n", "\n", "return", "It_warp", ",", "I1t", ",", "I2t", ",", "It_warp", ",", "It_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "output", "[", ":", ",", ":", "2", "]", ",", "output", "[", ":", ",", "2", ":", "4", "]", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "F1t", ",", "F2t", ",", "norm1", ",", "norm2", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.backwarp": [[52, 72], ["img.size", "numpy.meshgrid", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.stack", "torch.stack", "torch.stack", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "numpy.arange", "numpy.arange", "torch.tensor().cuda.unsqueeze().expand_as().float", "torch.tensor().cuda.unsqueeze().expand_as().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().cuda.unsqueeze().expand_as", "torch.tensor().cuda.unsqueeze().expand_as", "torch.tensor().cuda.unsqueeze", "torch.tensor().cuda.unsqueeze"], "function", ["None"], ["", "", "def", "backwarp", "(", "img", ",", "flow", ")", ":", "\n", "    ", "_", ",", "_", ",", "H", ",", "W", "=", "img", ".", "size", "(", ")", "\n", "\n", "u", "=", "flow", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "v", "=", "flow", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "\n", "gridX", ",", "gridY", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "W", ")", ",", "np", ".", "arange", "(", "H", ")", ")", "\n", "gridX", "=", "torch", ".", "tensor", "(", "gridX", ",", "requires_grad", "=", "False", ",", ")", ".", "cuda", "(", ")", "\n", "gridY", "=", "torch", ".", "tensor", "(", "gridY", ",", "requires_grad", "=", "False", ",", ")", ".", "cuda", "(", ")", "\n", "x", "=", "gridX", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "u", ")", ".", "float", "(", ")", "+", "u", "\n", "y", "=", "gridY", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "v", ")", ".", "float", "(", ")", "+", "v", "\n", "# range -1 to 1", "\n", "x", "=", "2", "*", "(", "x", "/", "(", "W", "-", "1", ")", "-", "0.5", ")", "\n", "y", "=", "2", "*", "(", "y", "/", "(", "H", "-", "1", ")", "-", "0.5", ")", "\n", "# stacking X and Y", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "x", ",", "y", ")", ",", "dim", "=", "3", ")", "\n", "# Sample pixels using bilinear interpolation.", "\n", "imgOut", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "img", ",", "grid", ")", "\n", "\n", "return", "imgOut", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.Small_UNet.down.__init__": [[28, 48], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ",", "filterSize", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            inChannels : int\n                number of input channels for the first convolutional layer.\n            outChannels : int\n                number of output channels for the first convolutional layer.\n                This is also used as input and output channels for the\n                second convolutional layer.\n            filterSize : int\n                filter size for the convolution filter. input N would create\n                a N x N filter.\n        \"\"\"", "\n", "\n", "\n", "super", "(", "down", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize convolutional layers.", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inChannels", ",", "outChannels", ",", "filterSize", ",", "stride", "=", "1", ",", "padding", "=", "int", "(", "(", "filterSize", "-", "1", ")", "/", "2", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "outChannels", ",", "outChannels", ",", "filterSize", ",", "stride", "=", "1", ",", "padding", "=", "int", "(", "(", "filterSize", "-", "1", ")", "/", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.Small_UNet.down.forward": [[49, 73], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "Small_UNet.down.conv1", "Small_UNet.down.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Returns output tensor after passing input `x` to the neural network\n        block.\n\n        Parameters\n        ----------\n            x : tensor\n                input to the NN block.\n\n        Returns\n        -------\n            tensor\n                output of the NN block.\n        \"\"\"", "\n", "\n", "\n", "# Average pooling with kernel size 2 (2 x 2).", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "# Convolution + Leaky ReLU", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "# Convolution + Leaky ReLU", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.Small_UNet.up.__init__": [[92, 110], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            inChannels : int\n                number of input channels for the first convolutional layer.\n            outChannels : int\n                number of output channels for the first convolutional layer.\n                This is also used for setting input and output channels for\n                the second convolutional layer.\n        \"\"\"", "\n", "\n", "\n", "super", "(", "up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize convolutional layers.", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inChannels", ",", "outChannels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "# (2 * outChannels) is used for accommodating skip connection.", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "outChannels", ",", "outChannels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.Small_UNet.up.forward": [[111, 136], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "Small_UNet.up.conv1", "Small_UNet.up.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "skpCn.size", "skpCn.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "skpCn", ")", ":", "\n", "        ", "\"\"\"\n        Returns output tensor after passing input `x` to the neural network\n        block.\n\n        Parameters\n        ----------\n            x : tensor\n                input to the NN block.\n            skpCn : tensor\n                skip connection input to the NN block.\n\n        Returns\n        -------\n            tensor\n                output of the NN block.\n        \"\"\"", "\n", "\n", "# Bilinear interpolation with scaling 2.", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "[", "skpCn", ".", "size", "(", "2", ")", ",", "skpCn", ".", "size", "(", "3", ")", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "# Convolution + Leaky ReLU", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "# Convolution + Leaky ReLU on (`x`, `skpCn`)", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "skpCn", ")", ",", "1", ")", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.Small_UNet.Small_UNet.__init__": [[153, 175], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "Small_UNet.down", "Small_UNet.down", "Small_UNet.down", "Small_UNet.up", "Small_UNet.up", "Small_UNet.up", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            inChannels : int\n                number of input channels for the UNet.\n            outChannels : int\n                number of output channels for the UNet.\n        \"\"\"", "\n", "\n", "super", "(", "Small_UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize neural network blocks.", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inChannels", ",", "64", ",", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "down1", "=", "down", "(", "32", ",", "64", ",", "5", ")", "\n", "self", ".", "down2", "=", "down", "(", "64", ",", "128", ",", "3", ")", "\n", "self", ".", "down3", "=", "down", "(", "128", ",", "128", ",", "3", ")", "\n", "self", ".", "up1", "=", "up", "(", "128", ",", "128", ")", "\n", "self", ".", "up2", "=", "up", "(", "128", ",", "64", ")", "\n", "self", ".", "up3", "=", "up", "(", "64", ",", "32", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "32", ",", "outChannels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.Small_UNet.Small_UNet.forward": [[176, 202], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "Small_UNet.Small_UNet.down1", "Small_UNet.Small_UNet.down2", "Small_UNet.Small_UNet.down3", "Small_UNet.Small_UNet.up1", "Small_UNet.Small_UNet.up2", "Small_UNet.Small_UNet.up3", "Small_UNet.Small_UNet.conv4", "Small_UNet.Small_UNet.conv1", "Small_UNet.Small_UNet.conv2", "Small_UNet.Small_UNet.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Returns output tensor after passing input `x` to the neural network.\n\n        Parameters\n        ----------\n            x : tensor\n                input to the UNet.\n\n        Returns\n        -------\n            tensor\n                output of the UNet.\n        \"\"\"", "\n", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "s1", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv3", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "s2", "=", "self", ".", "down1", "(", "s1", ")", "\n", "s3", "=", "self", ".", "down2", "(", "s2", ")", "\n", "x", "=", "self", ".", "down3", "(", "s3", ")", "\n", "x", "=", "self", ".", "up1", "(", "x", ",", "s3", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "s2", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "s1", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.LSE_acceleration.LeastSquareEstimation.__init__": [[8, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeastSquareEstimation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.LSE_acceleration.LeastSquareEstimation.forward": [[11, 32], ["A.t", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A", ",", "b", ")", ":", "\n", "        ", "'''\n          solve Ax = b\n          ==> A'Ax = A'b\n          ==> x = (A'A)^(-1)@A'@b\n          \n          input: A [M, N]    b [M, 1]\n          \n        '''", "\n", "A_trans", "=", "A", ".", "t", "(", ")", "\n", "out", "=", "torch", ".", "matmul", "(", "A_trans", ",", "A", ")", "#  A'A", "\n", "out", "=", "torch", ".", "inverse", "(", "out", ")", "# (A'A)^(-1)", "\n", "out", "=", "torch", ".", "matmul", "(", "out", ",", "A_trans", ")", "# (A'A)^(-1)@A'", "\n", "\n", "out", "=", "torch", ".", "matmul", "(", "out", ",", "b", ")", "# (A'A)^(-1)@A'@b", "\n", "\n", "inver_result", "=", "torch", ".", "matmul", "(", "A", ",", "out", ")", "\n", "error", "=", "F", ".", "mse_loss", "(", "inver_result", ",", "b", ",", "reduction", "=", "'sum'", ")", "\n", "\n", "result", "=", "out", "\n", "return", "result", ",", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.LSE_acceleration.LSE_acceleration_solver_cpu.__init__": [[40, 49], ["torch.Module.__init__", "numpy.array().reshape", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float.t", "torch.from_numpy().float.t", "torch.from_numpy().float.t", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LSE_acceleration_solver", ",", "self", ")", ".", "__init__", "(", ")", "\n", "A", "=", "np", ".", "array", "(", "[", "-", "1", ",", "0.5", ",", "1", ",", "0.5", ",", "2", ",", "2", "]", ")", ".", "reshape", "(", "(", "3", ",", "2", ")", ")", "# coefficient matrix", "\n", "A_tensor", "=", "torch", ".", "from_numpy", "(", "A", ")", ".", "float", "(", ")", "\n", "A_trans", "=", "A_tensor", ".", "t", "(", ")", "\n", "cof", "=", "torch", ".", "matmul", "(", "A_trans", ",", "A_tensor", ")", "#  A'A", "\n", "cof", "=", "torch", ".", "inverse", "(", "cof", ")", "# (A'A)^(-1)", "\n", "self", ".", "cof", "=", "torch", ".", "matmul", "(", "cof", ",", "A_trans", ")", "# (A'A)^(-1)@A'", "\n", "self", ".", "A", "=", "A_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.LSE_acceleration.LSE_acceleration_solver_cpu.forward": [[50, 83], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "f1.view.view.size", "LSE_acceleration.LSE_acceleration_solver_cpu.cof.repeat", "f1.view.view.size", "f1.view.view.view", "f2.view.view.view", "f3.view.view.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mean.view", "torch.mean.view", "torch.mean.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "result_v0.cuda", "result_acc.cuda", "torch.mean.cuda", "torch.mean.cuda", "torch.mean.cuda", "LSE_acceleration.LSE_acceleration_solver_cpu.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "LSE_acceleration.LSE_acceleration_solver_cpu.A.repeat", "torch.bmm.cpu", "torch.bmm.cpu", "torch.bmm.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "f1", ",", "f2", ",", "f3", ")", ":", "\n", "        ", "'''\n          input: (channel=1)\n            - f1 [B, H, W]\n            - f2 [B, H, W]\n            - f3 [B, H, W]\n            \n          return:\n            - acc [B, H, W]\n            - v0 [B, H, W]\n          \n        '''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "B", ",", "H", ",", "W", "=", "f1", ".", "size", "(", ")", "\n", "cof", "=", "self", ".", "cof", ".", "repeat", "(", "B", ",", "1", ",", "1", ")", "# [B, 2, 3]", "\n", "\n", "B", ",", "H", ",", "W", "=", "f1", ".", "size", "(", ")", "\n", "f1", "=", "f1", ".", "view", "(", "B", ",", "-", "1", ")", "# [B, HW]", "\n", "f2", "=", "f2", ".", "view", "(", "B", ",", "-", "1", ")", "# [B, HW]", "\n", "f3", "=", "f3", ".", "view", "(", "B", ",", "-", "1", ")", "# [B, HW]", "\n", "b", "=", "torch", ".", "stack", "(", "[", "f1", ",", "f2", ",", "f3", "]", ",", "dim", "=", "1", ")", "# # [B, 3, HW]", "\n", "\n", "result", "=", "torch", ".", "bmm", "(", "cof", ".", "cpu", "(", ")", ",", "b", ".", "cpu", "(", ")", ")", "# [B, 2, HW]", "\n", "\n", "invers_result", "=", "torch", ".", "bmm", "(", "self", ".", "A", ".", "repeat", "(", "B", ",", "1", ",", "1", ")", ",", "result", ".", "cpu", "(", ")", ")", "\n", "error", "=", "F", ".", "mse_loss", "(", "invers_result", ",", "b", ".", "cpu", "(", ")", ",", "reduction", "=", "'none'", ")", "\n", "error", "=", "error", ".", "view", "(", "B", ",", "3", ",", "H", ",", "W", ")", "\n", "error", "=", "torch", ".", "mean", "(", "error", ",", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "# [B, H, W]", "\n", "\n", "result_v0", "=", "result", ".", "view", "(", "B", ",", "2", ",", "H", ",", "W", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", "# [B, H, W]", "\n", "result_acc", "=", "result", ".", "view", "(", "B", ",", "2", ",", "H", ",", "W", ")", "[", ":", ",", "1", ",", ":", ",", ":", "]", "# [B, H, W]", "\n", "\n", "", "return", "result_v0", ".", "cuda", "(", ")", ",", "result_acc", ".", "cuda", "(", ")", ",", "error", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.LSE_acceleration.LSE_acceleration_solver.__init__": [[91, 101], ["torch.Module.__init__", "print", "numpy.array().reshape", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to.t", "torch.from_numpy().float().to.t", "torch.from_numpy().float().to.t", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "numpy.array", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LSE_acceleration_solver", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'Using LSE_acceleration_solver: GPU'", ")", "\n", "A", "=", "np", ".", "array", "(", "[", "-", "1", ",", "0.5", ",", "1", ",", "0.5", ",", "2", ",", "2", "]", ")", ".", "reshape", "(", "(", "3", ",", "2", ")", ")", "# coefficient matrix", "\n", "A_tensor", "=", "torch", ".", "from_numpy", "(", "A", ")", ".", "float", "(", ")", ".", "to", "(", "torch", ".", "device", "(", "\"cuda:0\"", ")", ")", "\n", "A_trans", "=", "A_tensor", ".", "t", "(", ")", "\n", "cof", "=", "torch", ".", "matmul", "(", "A_trans", ",", "A_tensor", ")", "#  A'A", "\n", "cof", "=", "torch", ".", "inverse", "(", "cof", ")", "# (A'A)^(-1)", "\n", "self", ".", "cof", "=", "torch", ".", "matmul", "(", "cof", ",", "A_trans", ")", "# (A'A)^(-1)@A'", "\n", "self", ".", "A", "=", "A_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.LSE_acceleration.LSE_acceleration_solver.forward": [[102, 131], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "f1.view.view.size", "LSE_acceleration.LSE_acceleration_solver.cof.repeat", "f1.view.view.size", "f1.view.view.view", "f2.view.view.view", "f3.view.view.view", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "result_v0.cuda", "result_acc.cuda", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "LSE_acceleration.LSE_acceleration_solver.A.repeat", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "f1", ",", "f2", ",", "f3", ")", ":", "\n", "        ", "'''\n          input: (channel=1)\n            - f1 [B, H, W]\n            - f2 [B, H, W]\n            - f3 [B, H, W]\n            \n          return:\n            - acc [B, H, W]\n            - v0 [B, H, W]\n          \n        '''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "B", ",", "H", ",", "W", "=", "f1", ".", "size", "(", ")", "\n", "cof", "=", "self", ".", "cof", ".", "repeat", "(", "B", ",", "1", ",", "1", ")", "# [B, 2, 3]", "\n", "\n", "B", ",", "H", ",", "W", "=", "f1", ".", "size", "(", ")", "\n", "f1", "=", "f1", ".", "view", "(", "B", ",", "-", "1", ")", "# [B, HW]", "\n", "f2", "=", "f2", ".", "view", "(", "B", ",", "-", "1", ")", "# [B, HW]", "\n", "f3", "=", "f3", ".", "view", "(", "B", ",", "-", "1", ")", "# [B, HW]", "\n", "b", "=", "torch", ".", "stack", "(", "[", "f1", ",", "f2", ",", "f3", "]", ",", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "device", "(", "\"cuda:0\"", ")", ")", "# # [B, 3, HW]", "\n", "\n", "result", "=", "torch", ".", "bmm", "(", "cof", ",", "b", ")", "# [B, 2, HW]           ", "\n", "invers_result", "=", "torch", ".", "bmm", "(", "self", ".", "A", ".", "repeat", "(", "B", ",", "1", ",", "1", ")", ",", "result", ")", "\n", "\n", "result_v0", "=", "result", ".", "view", "(", "B", ",", "2", ",", "H", ",", "W", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", "# [B, H, W]", "\n", "result_acc", "=", "result", ".", "view", "(", "B", ",", "2", ",", "H", ",", "W", ")", "[", ":", ",", "1", ",", ":", ",", ":", "]", "# [B, H, W]", "\n", "\n", "", "return", "result_v0", ".", "cuda", "(", ")", ",", "result_acc", ".", "cuda", "(", ")", "#, error.cuda()", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.LSE_acceleration.compute_acceleration.__init__": [[134, 139], ["torch.Module.__init__", "print", "LSE_acceleration.LSE_acceleration_solver"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "compute_acceleration", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'Using LSE acceleration!'", ")", "\n", "self", ".", "flownet", "=", "model", "\n", "self", ".", "LSE_acc_solver", "=", "LSE_acceleration_solver", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.LSE_acceleration.compute_acceleration.forward": [[141, 186], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "LSE_acceleration.compute_acceleration.flownet().float", "LSE_acceleration.compute_acceleration.flownet().float", "LSE_acceleration.compute_acceleration.flownet().float", "LSE_acceleration.compute_acceleration.LSE_acc_solver", "LSE_acceleration.compute_acceleration.LSE_acc_solver", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "LSE_acceleration.compute_acceleration.flownet", "LSE_acceleration.compute_acceleration.flownet", "LSE_acceleration.compute_acceleration.flownet", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "Ia", ",", "Ib", ",", "Ic", ",", "Id", ",", "t", ")", ":", "\n", "        ", "'''\n          \n          \n        '''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# F(0-->t)", "\n", "            ", "F_ba", "=", "self", ".", "flownet", "(", "Ib", ",", "Ia", ")", ".", "float", "(", ")", "# [B, 2, H, W]", "\n", "F_bc", "=", "self", ".", "flownet", "(", "Ib", ",", "Ic", ")", ".", "float", "(", ")", "\n", "F_bd", "=", "self", ".", "flownet", "(", "Ib", ",", "Id", ")", ".", "float", "(", ")", "\n", "\n", "F_ba_u", "=", "F_ba", "[", ":", ",", "0", ",", ":", ",", ":", "]", "# [B, H, W]", "\n", "F_ba_v", "=", "F_ba", "[", ":", ",", "1", ",", ":", ",", ":", "]", "# [B, H, W]", "\n", "\n", "F_bc_u", "=", "F_bc", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "F_bc_v", "=", "F_bc", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "\n", "F_bd_u", "=", "F_bd", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "F_bd_v", "=", "F_bd", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "\n", "result_v0_u", ",", "result_acc_u", "=", "self", ".", "LSE_acc_solver", "(", "F_ba_u", ",", "F_bc_u", ",", "F_bd_u", ")", "# result_v0_H [B, H, W]", "\n", "result_v0_v", ",", "result_acc_v", "=", "self", ".", "LSE_acc_solver", "(", "F_ba_v", ",", "F_bc_v", ",", "F_bd_v", ")", "# result_v0_W [B, H, W]", "\n", "\n", "acc", "=", "torch", ".", "stack", "(", "[", "result_acc_u", ",", "result_acc_v", "]", ",", "dim", "=", "1", ")", "# [B, 2, H, W]", "\n", "v0", "=", "torch", ".", "stack", "(", "[", "result_v0_u", ",", "result_v0_v", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# simple Quadratic", "\n", "acc_1", "=", "F_ba", "+", "F_bc", "\n", "acc_2", "=", "(", "2", "/", "3", ")", "*", "F_ba", "+", "(", "1", "/", "3", ")", "*", "F_bd", "\n", "acc_3", "=", "F_bd", "-", "2", "*", "F_bc", "\n", "v0_1", "=", "0.5", "*", "(", "F_bc", "-", "F_ba", ")", "\n", "\n", "\n", "x", "=", "acc_1", "-", "acc_2", "\n", "sym", "=", "5", "\n", "fac", "=", "1", "\n", "\n", "alpha", "=", "-", "0.5", "*", "(", "torch", ".", "exp", "(", "fac", "*", "(", "torch", ".", "abs", "(", "x", ")", "-", "sym", ")", ")", "-", "torch", ".", "exp", "(", "-", "fac", "*", "(", "torch", ".", "abs", "(", "x", ")", "-", "sym", ")", ")", ")", "/", "(", "torch", ".", "exp", "(", "fac", "*", "(", "torch", ".", "abs", "(", "x", ")", "-", "sym", ")", ")", "+", "torch", ".", "exp", "(", "-", "fac", "*", "(", "torch", ".", "abs", "(", "x", ")", "-", "sym", ")", ")", ")", "+", "0.5", "\n", "acc_final", "=", "torch", ".", "where", "(", "(", "acc_1", "*", "acc_2", ">", "0", ")", "&", "(", "acc_1", "*", "acc_3", ">", "0", ")", ",", "alpha", "*", "acc", "+", "(", "1", "-", "alpha", ")", "*", "acc_1", ",", "acc_1", ")", "\n", "v0_final", "=", "torch", ".", "where", "(", "(", "acc_1", "*", "acc_2", ">", "0", ")", "&", "(", "acc_1", "*", "acc_3", ">", "0", ")", ",", "alpha", "*", "v0", "+", "(", "1", "-", "alpha", ")", "*", "v0_1", ",", "v0_1", ")", "\n", "\n", "\n", "F_bt", "=", "v0_final", "*", "t", "+", "0.5", "*", "acc_final", "*", "t", "**", "2", "\n", "\n", "", "return", "F_bt", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.forward_warp_gaussian.ForwardWarp.__init__": [[10, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "\t\t", "super", "(", "ForwardWarp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.forward_warp_gaussian.ForwardWarp.forward": [[14, 64], ["img.size", "x.repeat.repeat.repeat", "y.repeat.repeat.repeat", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "forward_warp_gaussian.ForwardWarp.get_bilinear_weights", "forward_warp_gaussian.ForwardWarp.sample_one", "forward_warp_gaussian.ForwardWarp.sample_one", "forward_warp_gaussian.ForwardWarp.sample_one", "forward_warp_gaussian.ForwardWarp.sample_one"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.models.forward_warp_gaussian.ForwardWarp.get_bilinear_weights", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.forward_warp_gaussian.ForwardWarp.sample_one", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.forward_warp_gaussian.ForwardWarp.sample_one", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.forward_warp_gaussian.ForwardWarp.sample_one", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.forward_warp_gaussian.ForwardWarp.sample_one"], ["", "def", "forward", "(", "self", ",", "img", ",", "flo", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\t-img: image (N, C, H, W)\n\t\t\t-flo: optical flow (N, 2, H, W)\n\t\t\telements of flo is in [0, H] and [0, W] for dx, dy\n\n\t\t\"\"\"", "\n", "\n", "\n", "# (x1, y1)\t\t(x1, y2)", "\n", "# +---------------+", "\n", "# |\t\t\t\t  |", "\n", "# |\to(x, y) \t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# +---------------+", "\n", "# (x2, y1)\t\t(x2, y2)", "\n", "\n", "\n", "N", ",", "C", ",", "_", ",", "_", "=", "img", ".", "size", "(", ")", "\n", "\n", "# translate start-point optical flow to end-point optical flow", "\n", "y", "=", "flo", "[", ":", ",", "0", ":", "1", ":", ",", ":", "]", "\n", "x", "=", "flo", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "y", "=", "y", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "\n", "# Four point of square (x1, y1), (x1, y2), (x2, y1), (y2, y2)", "\n", "x1", "=", "torch", ".", "floor", "(", "x", ")", "\n", "x2", "=", "x1", "+", "1", "\n", "y1", "=", "torch", ".", "floor", "(", "y", ")", "\n", "y2", "=", "y1", "+", "1", "\n", "\n", "# firstly, get bilinear weights", "\n", "w11", ",", "w12", ",", "w21", ",", "w22", "=", "self", ".", "get_bilinear_weights", "(", "x", ",", "y", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ")", "\n", "\n", "# secondly, sample each weighted corner ", "\n", "img11", ",", "o11", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y1", ",", "w11", ")", "\n", "img12", ",", "o12", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y2", ",", "w12", ")", "\n", "img21", ",", "o21", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y1", ",", "w21", ")", "\n", "img22", ",", "o22", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y2", ",", "w22", ")", "\n", "\n", "\n", "imgw", "=", "img11", "+", "img12", "+", "img21", "+", "img22", "\n", "o", "=", "o11", "+", "o12", "+", "o21", "+", "o22", "\n", "\n", "return", "imgw", ",", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.forward_warp_gaussian.ForwardWarp.get_bilinear_weights": [[66, 73], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "get_bilinear_weights", "(", "self", ",", "x", ",", "y", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ")", ":", "\n", "\t\t  ", "w11", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x1", ")", "**", "2", "+", "(", "y", "-", "y1", ")", "**", "2", ")", ")", "\n", "w12", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x1", ")", "**", "2", "+", "(", "y", "-", "y2", ")", "**", "2", ")", ")", "\n", "w21", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x2", ")", "**", "2", "+", "(", "y", "-", "y1", ")", "**", "2", ")", ")", "\n", "w22", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x2", ")", "**", "2", "+", "(", "y", "-", "y2", ")", "**", "2", ")", ")", "\n", "\n", "return", "w11", ",", "w12", ",", "w21", ",", "w22", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.forward_warp_gaussian.ForwardWarp.sample_one": [[75, 134], ["img.size", "shiftx.view", "shifty.view", "[].cuda().long().repeat().view", "[].cuda().long().repeat().view", "weight.view", "img.view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "shiftx.view.long", "shifty.view.long", "idxy.lt", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "[].cuda().long().repeat", "[].cuda().long().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "idxy.ge", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idxx.ge", "idxx.lt", "[].cuda().long", "[].cuda().long", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "[].cuda", "[].cuda", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "sample_one", "(", "self", ",", "img", ",", "shiftx", ",", "shifty", ",", "weight", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tInput:\n\t\t\t-img (N, C, H, W)\n\t\t\t-shiftx, shifty (N, c, H, W)\n\t\t\"\"\"", "\n", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "img", ".", "size", "(", ")", "\n", "\n", "\n", "# flatten all (all restored as Tensors)", "\n", "flat_shiftx", "=", "shiftx", ".", "view", "(", "-", "1", ")", "\n", "flat_shifty", "=", "shifty", ".", "view", "(", "-", "1", ")", "\n", "flat_basex", "=", "torch", ".", "arange", "(", "0", ",", "H", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "-", "1", ",", "1", ")", "[", "None", ",", "None", "]", ".", "cuda", "(", ")", ".", "long", "(", ")", ".", "repeat", "(", "N", ",", "C", ",", "1", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "flat_basey", "=", "torch", ".", "arange", "(", "0", ",", "W", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "-", "1", ")", "[", "None", ",", "None", "]", ".", "cuda", "(", ")", ".", "long", "(", ")", ".", "repeat", "(", "N", ",", "C", ",", "H", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "flat_weight", "=", "weight", ".", "view", "(", "-", "1", ")", "\n", "flat_img", "=", "img", ".", "view", "(", "-", "1", ")", "\n", "\n", "\n", "# The corresponding positions in I1", "\n", "idxn", "=", "torch", ".", "arange", "(", "0", ",", "N", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ".", "repeat", "(", "1", ",", "C", ",", "H", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "idxc", "=", "torch", ".", "arange", "(", "0", ",", "C", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "C", ",", "1", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ".", "repeat", "(", "N", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "# ttype = flat_basex.type()", "\n", "idxx", "=", "flat_shiftx", ".", "long", "(", ")", "+", "flat_basex", "\n", "idxy", "=", "flat_shifty", ".", "long", "(", ")", "+", "flat_basey", "\n", "\n", "\n", "# recording the inside part the shifted", "\n", "mask", "=", "idxx", ".", "ge", "(", "0", ")", "&", "idxx", ".", "lt", "(", "H", ")", "&", "idxy", ".", "ge", "(", "0", ")", "&", "idxy", ".", "lt", "(", "W", ")", "\n", "# mask = mask", "\n", "\n", "# Mask off points out of boundaries", "\n", "\n", "# index = torch.arange(mask.size(0)).type(torch.cuda.LongTensor).cuda()[mask]", "\n", "ids", "=", "(", "idxn", "*", "C", "*", "H", "*", "W", "+", "idxc", "*", "H", "*", "W", "+", "idxx", "*", "W", "+", "idxy", ")", "\n", "\n", "ids_mask", "=", "torch", ".", "masked_select", "(", "ids", ",", "mask", ")", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "# del flat_basex, flat_basey, idxx, idxy, idxn, idxc, ids", "\n", "\n", "# ids = Variable((idxn*C*H*W + idxc*H*W + idxx*W + idxy))[mask].cuda()", "\n", "# ids = Variable(torch.gather(ids, 0, index)).cuda()", "\n", "# idxx = Variable(idxx[mask]).cuda()", "\n", "# idxy = Variable(idxy[mask]).cuda()", "\n", "# idxn = Variable(idxn[mask]).cuda()", "\n", "# idxc = Variable(idxc[mask]).cuda()", "\n", "\n", "#(zero part - gt) -> difference", "\n", "#difference back propagate -> No influence! Whether we do need mask? mask?", "\n", "# put (add) them together", "\n", "img_warp", "=", "torch", ".", "zeros", "(", "[", "N", "*", "C", "*", "H", "*", "W", ",", "]", ")", ".", "cuda", "(", ")", "\n", "img_warp", ".", "put_", "(", "ids_mask", ",", "torch", ".", "masked_select", "(", "flat_img", "*", "flat_weight", ",", "mask", ")", ",", "accumulate", "=", "True", ")", "\n", "\n", "one_warp", "=", "torch", ".", "zeros", "(", "[", "N", "*", "C", "*", "H", "*", "W", ",", "]", ")", ".", "cuda", "(", ")", "\n", "one_warp", ".", "put_", "(", "ids_mask", ",", "torch", ".", "masked_select", "(", "flat_weight", ",", "mask", ")", ",", "accumulate", "=", "True", ")", "\n", "\n", "# calculate zero mask", "\n", "\n", "\n", "return", "img_warp", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", ",", "one_warp", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.FuisonNet.__init__": [[20, 29], ["torch.Module.__init__", "print", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", "=", "6", ",", "out_ch", "=", "1", ")", ":", "\n", "        ", "super", "(", "FuisonNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'Using Fusion Map!'", ")", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_ch", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "out_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "LeakyReLU", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "False", ")", "\n", "self", ".", "Sigmoid", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.FuisonNet.forward": [[30, 38], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MS_Model_Fusion.FuisonNet.LeakyReLU", "MS_Model_Fusion.FuisonNet.LeakyReLU", "MS_Model_Fusion.FuisonNet.Sigmoid", "MS_Model_Fusion.FuisonNet.conv1", "MS_Model_Fusion.FuisonNet.conv2", "MS_Model_Fusion.FuisonNet.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x_in", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "Mask", "=", "self", ".", "LeakyReLU", "(", "self", ".", "conv1", "(", "x_in", ")", ")", "\n", "Mask", "=", "self", ".", "LeakyReLU", "(", "self", ".", "conv2", "(", "Mask", ")", ")", "\n", "Mask", "=", "self", ".", "Sigmoid", "(", "self", ".", "conv3", "(", "Mask", ")", ")", "\n", "\n", "out", "=", "Mask", "*", "x1", "+", "(", "1", "-", "Mask", ")", "*", "x2", "\n", "return", "out", ",", "Mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.MS_Model_Fusion.__init__": [[41, 65], ["torch.Module.__init__", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE().cuda", "MS_Model_Fusion.FuisonNet", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE.AcSloMoS_scope_unet_residual_synthesis_edge_LSE"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "super", "(", "MS_Model_Fusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "QVI_model", "=", "AcSloMoS_scope_unet_residual_synthesis_edge_LSE", "(", ")", ".", "cuda", "(", ")", "\n", "'''\n        load_net = torch.load('checkpoints/GG01_qvi_vtsr_scope_lap_ft_synthesis_edge_LSE_lap_L1/AcSloMo28.ckpt')\n        # remove unuseful keys\n        load_net_clean = OrderedDict()\n        for k, v in load_net['model_state_dict'].items():\n            if k.startswith('module'):\n                load_net_clean[k[7:]] = v\n            else:\n                load_net_clean[k] = v       \n        #print(load_net_clean.keys()) \n        \n        \n        \n        self.QVI_model.load_state_dict(load_net_clean, strict=True)\n        '''", "\n", "\n", "self", ".", "FusionNet", "=", "FuisonNet", "(", "in_ch", "=", "6", ",", "out_ch", "=", "1", ")", "\n", "\n", "self", ".", "MS_scale", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.MS_Model_Fusion.forward": [[66, 81], ["MS_Model_Fusion.interp_resize", "MS_Model_Fusion.interp_resize", "MS_Model_Fusion.interp_resize", "MS_Model_Fusion.MS_Model_Fusion.FusionNet", "MS_Model_Fusion.interp_resize", "MS_Model_Fusion.interp_resize", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "MS_Model_Fusion.MS_Model_Fusion.QVI_model", "MS_Model_Fusion.MS_Model_Fusion.QVI_model"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.interp_resize", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.interp_resize", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.interp_resize", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.interp_resize", "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.interp_resize"], ["", "def", "forward", "(", "self", ",", "I0", ",", "I1", ",", "I2", ",", "I3", ",", "t", ")", ":", "\n", "        ", "I0_down", "=", "interp_resize", "(", "I0", ",", "self", ".", "MS_scale", ")", "if", "I0", "is", "not", "None", "else", "I0", "\n", "I1_down", "=", "interp_resize", "(", "I1", ",", "self", ".", "MS_scale", ")", "\n", "I2_down", "=", "interp_resize", "(", "I2", ",", "self", ".", "MS_scale", ")", "\n", "I3_down", "=", "interp_resize", "(", "I3", ",", "self", ".", "MS_scale", ")", "if", "I3", "is", "not", "None", "else", "I3", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "It_warp", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "QVI_model", "(", "I0", ",", "I1", ",", "I2", ",", "I3", ",", "t", ")", "\n", "It_warp_down", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "M", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "QVI_model", "(", "I0_down", ",", "I1_down", ",", "I2_down", ",", "I3_down", ",", "t", ")", "\n", "\n", "", "It_warp_up", "=", "interp_resize", "(", "It_warp_down", ",", "1", "/", "self", ".", "MS_scale", ")", "\n", "\n", "out", ",", "fuse_weight", "=", "self", ".", "FusionNet", "(", "It_warp", ",", "It_warp_up", ")", "\n", "\n", "return", "out", ",", "I1t", ",", "I2t", ",", "I1_warp", ",", "I2_warp", ",", "F12", ",", "F21", ",", "I1tf", ",", "I2tf", ",", "fuse_weight", ",", "dFt1", ",", "dFt2", ",", "Ft1", ",", "Ft2", ",", "Ft1r", ",", "Ft2r", ",", "_", ",", "_", ",", "_", ",", "_", "", "", "", ""]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.MS_Model_Fusion.interp_resize": [[11, 17], ["input_tensor.size", "torch.interpolate"], "function", ["None"], ["def", "interp_resize", "(", "input_tensor", ",", "scale_factor", ")", ":", "\n", "# input tensor: [B, C, H, W]", "\n", "    ", "B", ",", "C", ",", "H", ",", "W", "=", "input_tensor", ".", "size", "(", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "input_tensor", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "None", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.UNet2.down.__init__": [[28, 48], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ",", "filterSize", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            inChannels : int\n                number of input channels for the first convolutional layer.\n            outChannels : int\n                number of output channels for the first convolutional layer.\n                This is also used as input and output channels for the\n                second convolutional layer.\n            filterSize : int\n                filter size for the convolution filter. input N would create\n                a N x N filter.\n        \"\"\"", "\n", "\n", "\n", "super", "(", "down", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize convolutional layers.", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inChannels", ",", "outChannels", ",", "filterSize", ",", "stride", "=", "1", ",", "padding", "=", "int", "(", "(", "filterSize", "-", "1", ")", "/", "2", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "outChannels", ",", "outChannels", ",", "filterSize", ",", "stride", "=", "1", ",", "padding", "=", "int", "(", "(", "filterSize", "-", "1", ")", "/", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.UNet2.down.forward": [[49, 73], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "UNet2.down.conv1", "UNet2.down.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Returns output tensor after passing input `x` to the neural network\n        block.\n\n        Parameters\n        ----------\n            x : tensor\n                input to the NN block.\n\n        Returns\n        -------\n            tensor\n                output of the NN block.\n        \"\"\"", "\n", "\n", "\n", "# Average pooling with kernel size 2 (2 x 2).", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "# Convolution + Leaky ReLU", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "# Convolution + Leaky ReLU", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.UNet2.up.__init__": [[92, 110], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            inChannels : int\n                number of input channels for the first convolutional layer.\n            outChannels : int\n                number of output channels for the first convolutional layer.\n                This is also used for setting input and output channels for\n                the second convolutional layer.\n        \"\"\"", "\n", "\n", "\n", "super", "(", "up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize convolutional layers.", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inChannels", ",", "outChannels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "# (2 * outChannels) is used for accommodating skip connection.", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "outChannels", ",", "outChannels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.UNet2.up.forward": [[111, 136], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "UNet2.up.conv1", "UNet2.up.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "skpCn.size", "skpCn.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "skpCn", ")", ":", "\n", "        ", "\"\"\"\n        Returns output tensor after passing input `x` to the neural network\n        block.\n\n        Parameters\n        ----------\n            x : tensor\n                input to the NN block.\n            skpCn : tensor\n                skip connection input to the NN block.\n\n        Returns\n        -------\n            tensor\n                output of the NN block.\n        \"\"\"", "\n", "\n", "# Bilinear interpolation with scaling 2.", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "[", "skpCn", ".", "size", "(", "2", ")", ",", "skpCn", ".", "size", "(", "3", ")", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "# Convolution + Leaky ReLU", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "# Convolution + Leaky ReLU on (`x`, `skpCn`)", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "skpCn", ")", ",", "1", ")", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.UNet2.UNet2.__init__": [[154, 180], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "UNet2.down", "UNet2.down", "UNet2.down", "UNet2.down", "UNet2.down", "UNet2.up", "UNet2.up", "UNet2.up", "UNet2.up", "UNet2.up", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            inChannels : int\n                number of input channels for the UNet.\n            outChannels : int\n                number of output channels for the UNet.\n        \"\"\"", "\n", "\n", "\n", "super", "(", "UNet2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize neural network blocks.", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inChannels", ",", "32", ",", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", "\n", "self", ".", "down1", "=", "down", "(", "32", ",", "64", ",", "5", ")", "\n", "self", ".", "down2", "=", "down", "(", "64", ",", "128", ",", "3", ")", "\n", "self", ".", "down3", "=", "down", "(", "128", ",", "256", ",", "3", ")", "\n", "self", ".", "down4", "=", "down", "(", "256", ",", "512", ",", "3", ")", "\n", "self", ".", "down5", "=", "down", "(", "512", ",", "512", ",", "3", ")", "\n", "self", ".", "up1", "=", "up", "(", "512", ",", "512", ")", "\n", "self", ".", "up2", "=", "up", "(", "512", ",", "256", ")", "\n", "self", ".", "up3", "=", "up", "(", "256", ",", "128", ")", "\n", "self", ".", "up4", "=", "up", "(", "128", ",", "64", ")", "\n", "self", ".", "up5", "=", "up", "(", "64", ",", "32", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "outChannels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.models.UNet2.UNet2.forward": [[181, 211], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "UNet2.UNet2.down1", "UNet2.UNet2.down2", "UNet2.UNet2.down3", "UNet2.UNet2.down4", "UNet2.UNet2.down5", "UNet2.UNet2.up1", "UNet2.UNet2.up2", "UNet2.UNet2.up3", "UNet2.UNet2.up4", "UNet2.UNet2.up5", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "UNet2.UNet2.conv1", "UNet2.UNet2.conv2", "UNet2.UNet2.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Returns output tensor after passing input `x` to the neural network.\n\n        Parameters\n        ----------\n            x : tensor\n                input to the UNet.\n\n        Returns\n        -------\n            tensor\n                output of the UNet.\n        \"\"\"", "\n", "\n", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "s1", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "s2", "=", "self", ".", "down1", "(", "s1", ")", "\n", "s3", "=", "self", ".", "down2", "(", "s2", ")", "\n", "s4", "=", "self", ".", "down3", "(", "s3", ")", "\n", "s5", "=", "self", ".", "down4", "(", "s4", ")", "\n", "x", "=", "self", ".", "down5", "(", "s5", ")", "\n", "x", "=", "self", ".", "up1", "(", "x", ",", "s5", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "s4", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "s3", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "s2", ")", "\n", "x1", "=", "self", ".", "up5", "(", "x", ",", "s1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv3", "(", "x1", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "return", "x", ",", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet.__init__": [[16, 81], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "pwc_modules.FeatureExtractor", "pwc_modules.WarpingLayer", "correlation_package.correlation.Correlation", "pwc_modules.FlowEstimatorDense", "pwc_modules.ContextNetwork", "pwc_modules.OccEstimatorDense", "pwc_modules.OccContextNetwork", "irr_modules.OccUpsampleNetwork", "torch.ModuleList", "torch.ModuleList", "pwc_modules.conv", "irr_modules.RefineFlow", "irr_modules.RefineOcc", "pwc_modules.initialize_msra", "IRR_PWC_V2_MS.PWCNet._get_param_groups", "hasattr", "print", "torch.Dropout2d", "torch.Dropout2d", "hasattr", "print", "SelfAttentionConv2d", "IRR_PWC_V2_MS.PWCNet.modules", "hasattr", "args.freeze_list.split", "IRR_PWC_V2_MS.PWCNet._freeze", "len", "pwc_modules.conv", "hasattr", "range", "len"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.initialize_msra", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._get_param_groups", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._freeze", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "div_flow", "=", "0.05", ")", ":", "\n", "        ", "super", "(", "PWCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pwc_groups", "=", "[", "'extractor'", ",", "'1x1'", ",", "\n", "'flow_estimator'", ",", "\n", "'context'", ",", "'refine_flow'", ",", "\n", "'attention'", "]", "+", "[", "'occ'", "]", "*", "3", "\n", "\n", "# Init sizes", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "_div_flow", "=", "div_flow", "\n", "self", ".", "search_range", "=", "4", "\n", "self", ".", "num_chs", "=", "[", "3", ",", "16", ",", "32", ",", "64", ",", "96", ",", "128", ",", "196", "]", "\n", "self", ".", "output_level", "=", "4", "\n", "self", ".", "num_levels", "=", "7", "\n", "self", ".", "ch_proj_size", "=", "32", "\n", "self", ".", "min_layer", "=", "len", "(", "self", ".", "num_chs", ")", "-", "self", ".", "output_level", "-", "1", "\n", "\n", "# Init generic layers", "\n", "self", ".", "leakyRELU", "=", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", "self", ".", "feature_pyramid_extractor", "=", "FeatureExtractor", "(", "self", ".", "num_chs", ")", "\n", "self", ".", "warping_layer", "=", "WarpingLayer", "(", ")", "\n", "self", ".", "correlation", "=", "Correlation", "(", "pad_size", "=", "self", ".", "search_range", ",", "kernel_size", "=", "1", ",", "\n", "max_displacement", "=", "self", ".", "search_range", ",", "stride1", "=", "1", ",", "stride2", "=", "1", ",", "\n", "corr_multiply", "=", "1", ")", "\n", "\n", "# Calc dimensions", "\n", "self", ".", "dim_corr", "=", "(", "self", ".", "search_range", "*", "2", "+", "1", ")", "**", "2", "\n", "self", ".", "num_ch_in_flo", "=", "self", ".", "dim_corr", "+", "self", ".", "ch_proj_size", "+", "2", "\n", "self", ".", "num_ch_in_occ", "=", "self", ".", "dim_corr", "+", "self", ".", "ch_proj_size", "+", "1", "\n", "\n", "# Init PWC modules", "\n", "self", ".", "flow_estimators", "=", "FlowEstimatorDense", "(", "self", ".", "num_ch_in_flo", ")", "\n", "self", ".", "context_networks", "=", "ContextNetwork", "(", "self", ".", "num_ch_in_flo", "+", "448", "+", "2", ")", "\n", "self", ".", "occ_estimators", "=", "OccEstimatorDense", "(", "self", ".", "num_ch_in_occ", ")", "\n", "self", ".", "occ_context_networks", "=", "OccContextNetwork", "(", "self", ".", "num_ch_in_occ", "+", "448", "+", "1", ")", "\n", "self", ".", "occ_shuffle_upsample", "=", "OccUpsampleNetwork", "(", "11", ",", "1", ")", "\n", "if", "hasattr", "(", "args", ",", "'dropout'", ")", "and", "args", ".", "dropout", ":", "\n", "            ", "print", "(", "\"Starting dropout!\"", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "args", ".", "dropout", ",", "inplace", "=", "False", ")", "\n", "\n", "", "self", ".", "conv_1x1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "conv", "(", "self", ".", "num_chs", "[", "ch", "]", ",", "self", ".", "ch_proj_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", "\n", "for", "ch", "in", "range", "(", "len", "(", "self", ".", "num_chs", ")", "-", "1", ",", "self", ".", "min_layer", ",", "-", "1", ")", "]", ")", "\n", "\n", "self", ".", "conv_1x1_1", "=", "conv", "(", "self", ".", "num_chs", "[", "self", ".", "min_layer", "-", "1", "]", ",", "3", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", "\n", "\n", "# Initialize attention", "\n", "if", "hasattr", "(", "args", ",", "'self_attention'", ")", "and", "self", ".", "args", ".", "self_attention", ":", "\n", "            ", "print", "(", "\"Initializing self attention!\"", ")", "\n", "from", "models", ".", "self_attention", "import", "AttentionConv", ",", "AttentionStem", ",", "SelfAttentionConv2d", "\n", "self", ".", "attention_conv", "=", "SelfAttentionConv2d", "(", "2", ",", "2", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "", "self", ".", "refine_flow", "=", "RefineFlow", "(", "2", "+", "1", "+", "self", ".", "ch_proj_size", ")", "\n", "self", ".", "refine_occ", "=", "RefineOcc", "(", "1", "+", "self", ".", "ch_proj_size", "+", "self", ".", "ch_proj_size", ")", "\n", "\n", "# Init weights", "\n", "initialize_msra", "(", "self", ".", "modules", "(", ")", ")", "\n", "self", ".", "param_groups", "=", "self", ".", "_get_param_groups", "(", "self", ".", "pwc_groups", ")", "\n", "\n", "if", "hasattr", "(", "args", ",", "'freeze_list'", ")", "and", "args", ".", "freeze_list", ":", "\n", "            ", "self", ".", "freezed_params", "=", "args", ".", "freeze_list", ".", "split", "(", "','", ")", "\n", "self", ".", "_freeze", "(", ")", "\n", "self", ".", "random_freeze", "=", "False", "\n", "", "elif", "hasattr", "(", "args", ",", "'random_freeze'", ")", "and", "args", ".", "random_freeze", ":", "\n", "            ", "self", ".", "random_freeze", "=", "True", "\n", "", "self", ".", "mean_per_module", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet.forward": [[82, 191], ["x1_raw.size", "IRR_PWC_V2_MS.PWCNet.feature_pyramid_extractor", "IRR_PWC_V2_MS.PWCNet.feature_pyramid_extractor", "IRR_PWC_V2_MS.PWCNet._allocate_out_tensors", "enumerate", "pwc_modules.upsample2d_as", "hasattr", "range", "zip", "pwc_modules.upsample2d_as", "len", "IRR_PWC_V2_MS.PWCNet.dropout", "IRR_PWC_V2_MS.PWCNet._warp", "IRR_PWC_V2_MS.PWCNet._correlate", "IRR_PWC_V2_MS.PWCNet._correlate", "IRR_PWC_V2_MS.PWCNet._squash", "IRR_PWC_V2_MS.PWCNet._rescale_flow", "IRR_PWC_V2_MS.PWCNet._estimate_flow", "IRR_PWC_V2_MS.PWCNet._estimate_occ", "IRR_PWC_V2_MS.PWCNet._resize_and_warp_inputs", "IRR_PWC_V2_MS.PWCNet._refine_flow", "IRR_PWC_V2_MS.PWCNet._refine_occ", "flows.append", "occs.append", "pwc_modules.upsample2d_as", "pwc_modules.upsample2d_as", "IRR_PWC_V2_MS.PWCNet.occ_upsampling", "flows.append", "occs.append", "hasattr", "IRR_PWC_V2_MS.PWCNet.attention_conv", "IRR_PWC_V2_MS.PWCNet.attention_conv"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._allocate_out_tensors", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._warp", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._correlate", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._correlate", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._squash", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._estimate_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._estimate_occ", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._resize_and_warp_inputs", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._refine_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._refine_occ", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet.occ_upsampling"], ["", "def", "forward", "(", "self", ",", "x1_raw", ",", "x2_raw", ")", ":", "\n", "\n", "# Extract input", "\n", "#x1_raw = input_dict['input1']", "\n", "#x2_raw = input_dict['input2']", "\n", "        ", "batch_size", ",", "_", ",", "height_im", ",", "width_im", "=", "x1_raw", ".", "size", "(", ")", "\n", "\n", "# Get pyramid, on the bottom level are original images", "\n", "cur_x1", "=", "self", ".", "feature_pyramid_extractor", "(", "x1_raw", ")", "\n", "cur_x2", "=", "self", ".", "feature_pyramid_extractor", "(", "x2_raw", ")", "\n", "if", "hasattr", "(", "self", ".", "args", ",", "'dropout'", ")", "and", "self", ".", "args", ".", "dropout", ":", "\n", "# print(\"Dropout in ctx!\")", "\n", "            ", "for", "xl", "in", "range", "(", "len", "(", "cur_x1", ")", ")", ":", "\n", "# cur_x1[xl] = self.dropout(cur_x1[xl])", "\n", "                ", "cur_x2", "[", "xl", "]", "=", "self", ".", "dropout", "(", "cur_x2", "[", "xl", "]", ")", "\n", "", "", "x1_pyramid", "=", "cur_x1", "+", "[", "x1_raw", "]", "\n", "x2_pyramid", "=", "cur_x2", "+", "[", "x2_raw", "]", "\n", "\n", "# Set output data structures", "\n", "output_dict", "=", "{", "}", "\n", "output_dict_eval", "=", "{", "}", "\n", "flows", "=", "[", "]", "\n", "occs", "=", "[", "]", "\n", "\n", "# Pre allocate output tensors", "\n", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", "=", "self", ".", "_allocate_out_tensors", "(", "x1_pyramid", ",", "batch_size", ")", "\n", "\n", "for", "l", ",", "(", "x1", ",", "x2", ")", "in", "enumerate", "(", "zip", "(", "x1_pyramid", ",", "x2_pyramid", ")", ")", ":", "\n", "\n", "            ", "if", "l", "<=", "self", ".", "output_level", ":", "\n", "# Warp", "\n", "                ", "x1_warp", ",", "x2_warp", ",", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", "=", "self", ".", "_warp", "(", "l", ",", "x1", ",", "x2", ",", "\n", "flow_f", ",", "\n", "flow_b", ",", "occ_f", ",", "\n", "occ_b", ",", "\n", "height_im", ",", "\n", "width_im", ")", "\n", "\n", "# Correlate", "\n", "out_corr_relu_f", "=", "self", ".", "_correlate", "(", "x1", ",", "x2_warp", ")", "\n", "out_corr_relu_b", "=", "self", ".", "_correlate", "(", "x2", ",", "x1_warp", ")", "\n", "\n", "# Squash to channels projection size", "\n", "x1_1by1", ",", "x2_1by1", "=", "self", ".", "_squash", "(", "l", ",", "x1", ",", "x2", ")", "\n", "\n", "# Rescale Flow", "\n", "flow_f", ",", "flow_b", "=", "self", ".", "_rescale_flow", "(", "flow_f", ",", "flow_b", ",", "height_im", ",", "width_im", ")", "\n", "\n", "# Estimate flow", "\n", "flow_cont_f", ",", "flow_cont_b", "=", "self", ".", "_estimate_flow", "(", "out_corr_relu_f", ",", "\n", "out_corr_relu_b", ",", "\n", "x1_1by1", ",", "x2_1by1", ",", "\n", "flow_f", ",", "flow_b", ")", "\n", "\n", "# Estimate occlusions", "\n", "occ_cont_f", ",", "occ_cont_b", "=", "self", ".", "_estimate_occ", "(", "out_corr_relu_f", ",", "\n", "out_corr_relu_b", ",", "\n", "x1_1by1", ",", "x2_1by1", ",", "\n", "occ_f", ",", "occ_b", ")", "\n", "\n", "# Prepare refinement inputs", "\n", "img1_resize", ",", "img2_resize", ",", "img1_warp", ",", "img2_warp", "=", "self", ".", "_resize_and_warp_inputs", "(", "\n", "x1_raw", ",", "x2_raw", ",", "flow_f", ",", "flow_b", ",", "flow_cont_f", ",", "flow_cont_b", ",", "height_im", ",", "\n", "width_im", ")", "\n", "\n", "# Refine Flow", "\n", "flow_f", ",", "flow_cont_f", ",", "flow_b", ",", "flow_cont_b", "=", "self", ".", "_refine_flow", "(", "\n", "flow_cont_f", ",", "flow_cont_b", ",", "img1_resize", ",", "img2_resize", ",", "img1_warp", ",", "\n", "img2_warp", ",", "x1_1by1", ",", "x2_1by1", ",", "height_im", ",", "width_im", ")", "\n", "\n", "# Refine Occlusions", "\n", "occ_f", ",", "occ_cont_f", ",", "occ_b", ",", "occ_cont_f", "=", "self", ".", "_refine_occ", "(", "\n", "x1_1by1", ",", "x2_1by1", ",", "flow_f", ",", "flow_b", ",", "occ_cont_f", ",", "occ_cont_b", ",", "\n", "height_im", ",", "width_im", ")", "\n", "\n", "# Collect layer's outputs", "\n", "flows", ".", "append", "(", "[", "flow_cont_f", ",", "flow_cont_b", ",", "flow_f", ",", "flow_b", "]", ")", "\n", "occs", ".", "append", "(", "[", "occ_cont_f", ",", "occ_cont_b", ",", "occ_f", ",", "occ_b", "]", ")", "\n", "\n", "", "else", ":", "\n", "# Final flow upsampling", "\n", "                ", "flow_f", "=", "upsample2d_as", "(", "flow_f", ",", "x1", ",", "mode", "=", "\"bilinear\"", ")", "\n", "flow_b", "=", "upsample2d_as", "(", "flow_b", ",", "x2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "# Final occ upsampling", "\n", "occ_f", ",", "occ_b", "=", "self", ".", "occ_upsampling", "(", "l", ",", "x1", ",", "x2", ",", "flow_f", ",", "flow_b", ",", "\n", "occ_f", ",", "occ_b", ",", "height_im", ",", "width_im", ")", "\n", "\n", "# Apply self attention", "\n", "if", "hasattr", "(", "self", ".", "args", ",", "'self_attention'", ")", "and", "self", ".", "args", ".", "self_attention", ":", "\n", "                    ", "flow_f", "=", "self", ".", "attention_conv", "(", "flow_f", ")", "\n", "flow_b", "=", "self", ".", "attention_conv", "(", "flow_b", ")", "\n", "\n", "# Aggregate outputs", "\n", "", "flows", ".", "append", "(", "[", "flow_f", ",", "flow_b", "]", ")", "\n", "occs", ".", "append", "(", "[", "occ_f", ",", "occ_b", "]", ")", "\n", "\n", "", "", "output_dict_eval", "[", "'flow'", "]", "=", "upsample2d_as", "(", "flow_f", ",", "x1_raw", ",", "\n", "mode", "=", "\"bilinear\"", ")", "/", "self", ".", "_div_flow", "\n", "output_dict_eval", "[", "'occ'", "]", "=", "upsample2d_as", "(", "occ_f", ",", "x1_raw", ",", "mode", "=", "\"bilinear\"", ")", "\n", "output_dict", "[", "'flow'", "]", "=", "flows", "\n", "output_dict", "[", "'occ'", "]", "=", "occs", "\n", "\n", "if", "self", ".", "training", ":", "\n", "\n", "            ", "return", "20", "*", "output_dict", "[", "'flow'", "]", "\n", "", "else", ":", "\n", "            ", "return", "20", "*", "output_dict_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet.submodules_summary": [[192, 207], ["print", "print", "print", "p[].data.mean", "p[].data.mean", "p[].data.mean", "IRR_PWC_V2_MS.PWCNet.named_parameters", "IRR_PWC_V2_MS.PWCNet.named_parameters", "IRR_PWC_V2_MS.PWCNet.named_parameters", "IRR_PWC_V2_MS.PWCNet.named_parameters", "p[].data.mean"], "methods", ["None"], ["", "", "def", "submodules_summary", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Trainable submodules: {}\"", ".", "format", "(", "{", "p", "[", "0", "]", "for", "p", "in", "self", ".", "named_parameters", "(", ")", "\n", "if", "p", "[", "1", "]", ".", "requires_grad", "}", ")", ")", "\n", "if", "not", "self", ".", "mean_per_module", ":", "\n", "            ", "print", "(", "\"Initializing mean per module\"", ")", "\n", "self", ".", "mean_per_module", "=", "{", "p", "[", "0", "]", ":", "p", "[", "1", "]", ".", "data", ".", "mean", "(", ")", "\n", "for", "p", "in", "self", ".", "named_parameters", "(", ")", "}", "\n", "", "else", ":", "\n", "\n", "            ", "changes", "=", "{", "p", "[", "0", "]", ":", "p", "[", "1", "]", ".", "data", ".", "mean", "(", ")", "for", "p", "in", "self", ".", "named_parameters", "(", ")", "\n", "if", "p", "[", "1", "]", ".", "data", ".", "mean", "(", ")", "!=", "self", ".", "mean_per_module", "[", "p", "[", "0", "]", "]", "}", "\n", "self", ".", "mean_per_module", "=", "{", "p", "[", "0", "]", ":", "p", "[", "1", "]", ".", "data", ".", "mean", "(", ")", "for", "p", "in", "\n", "self", ".", "named_parameters", "(", ")", "}", "\n", "# print(\"Mean per submodule: {}\".format(self.mean_per_module))", "\n", "print", "(", "\"Changes: {}\"", ".", "format", "(", "changes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet.freeze_random_weights": [[208, 212], ["random.sample", "IRR_PWC_V2_MS.PWCNet._freeze", "random.randrange", "len"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._freeze"], ["", "", "def", "freeze_random_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "freezed_params", "=", "random", ".", "sample", "(", "self", ".", "pwc_groups", ",", "\n", "random", ".", "randrange", "(", "1", ",", "len", "(", "self", ".", "pwc_groups", ")", "/", "2", ")", ")", "\n", "self", ".", "_freeze", "(", "verify", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._freeze": [[213, 235], ["print", "set", "print", "print", "IRR_PWC_V2_MS.PWCNet.named_parameters", "IRR_PWC_V2_MS.PWCNet.param_groups[].items", "len", "len", "set.add", "param.grad.data.zero_", "IRR_PWC_V2_MS.PWCNet.named_parameters", "IRR_PWC_V2_MS.PWCNet.named_parameters"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.items"], ["", "def", "_freeze", "(", "self", ",", "verify", "=", "False", ")", ":", "\n", "        ", "print", "(", "\"Freezing groups {}\"", ".", "format", "(", "self", ".", "freezed_params", ")", ")", "\n", "\n", "if", "verify", ":", "\n", "            ", "for", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "not", "param", "[", "1", "]", ".", "requires_grad", ":", "\n", "                    ", "param", "[", "1", "]", ".", "requires_grad", "=", "True", "\n", "\n", "", "", "", "fkeys", "=", "set", "(", ")", "\n", "for", "freezing_group", "in", "self", ".", "freezed_params", ":", "\n", "            ", "for", "key", ",", "param", "in", "self", ".", "param_groups", "[", "freezing_group", "]", ".", "items", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "# print(\"Freezing {}, grad sum is {}\".format(key, param.grad.sum()))", "\n", "", "fkeys", ".", "add", "(", "key", ")", "\n", "\n", "", "", "assert", "len", "(", "{", "p", "[", "0", "]", "for", "p", "in", "self", ".", "named_parameters", "(", ")", "if", "not", "p", "[", "1", "]", ".", "requires_grad", "}", ")", "==", "len", "(", "fkeys", ")", "\n", "print", "(", "\"Freezed keys {}\"", ".", "format", "(", "fkeys", ")", ")", "\n", "print", "(", "\"Params with grad {}\"", ".", "format", "(", "{", "p", "[", "0", "]", "for", "p", "in", "self", ".", "named_parameters", "(", ")", "\n", "if", "p", "[", "1", "]", ".", "requires_grad", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._get_param_groups": [[236, 247], ["set", "len", "len", "list", "IRR_PWC_V2_MS.PWCNet.named_parameters", "IRR_PWC_V2_MS.PWCNet.named_parameters", "list", "pgroups[].keys"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.keys"], ["", "def", "_get_param_groups", "(", "self", ",", "keys", ")", ":", "\n", "        ", "pgroups", "=", "{", "}", "\n", "for", "substr", "in", "keys", ":", "\n", "            ", "pgroups", "[", "substr", "]", "=", "{", "k", ":", "t", "for", "k", ",", "t", "in", "self", ".", "named_parameters", "(", ")", "if", "substr", "in", "k", "}", "\n", "\n", "# Verify each param has at least one group", "\n", "", "unique_group_params", "=", "set", "(", "[", "s", "for", "p", "in", "[", "list", "(", "pgroups", "[", "k", "]", ".", "keys", "(", ")", ")", "for", "k", "in", "keys", "]", "\n", "for", "s", "in", "p", "]", ")", "\n", "assert", "len", "(", "unique_group_params", ")", "==", "len", "(", "list", "(", "self", ".", "named_parameters", "(", ")", ")", ")", "\n", "\n", "return", "pgroups", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._allocate_out_tensors": [[248, 256], ["x1_pyramid[].size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_allocate_out_tensors", "(", "x1_pyramid", ",", "batch_size", ")", ":", "\n", "        ", "_", ",", "_", ",", "h_x1", ",", "w_x1", ",", "=", "x1_pyramid", "[", "0", "]", ".", "size", "(", ")", "\n", "flow_f", "=", "torch", ".", "zeros", "(", "batch_size", ",", "2", ",", "h_x1", ",", "w_x1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "flow_b", "=", "torch", ".", "zeros", "(", "batch_size", ",", "2", ",", "h_x1", ",", "w_x1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "occ_f", "=", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "h_x1", ",", "w_x1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "occ_b", "=", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "h_x1", ",", "w_x1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "return", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._warp": [[257, 269], ["pwc_modules.upsample2d_as", "pwc_modules.upsample2d_as", "pwc_modules.upsample2d_as", "pwc_modules.upsample2d_as", "IRR_PWC_V2_MS.PWCNet.warping_layer", "IRR_PWC_V2_MS.PWCNet.warping_layer"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as"], ["", "def", "_warp", "(", "self", ",", "l", ",", "x1", ",", "x2", ",", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", ",", "height_im", ",", "width_im", ")", ":", "\n", "        ", "if", "l", "==", "0", ":", "\n", "            ", "x2_warp", "=", "x2", "\n", "x1_warp", "=", "x1", "\n", "", "else", ":", "\n", "            ", "flow_f", "=", "upsample2d_as", "(", "flow_f", ",", "x1", ",", "mode", "=", "\"bilinear\"", ")", "\n", "flow_b", "=", "upsample2d_as", "(", "flow_b", ",", "x2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "occ_f", "=", "upsample2d_as", "(", "occ_f", ",", "x1", ",", "mode", "=", "\"bilinear\"", ")", "\n", "occ_b", "=", "upsample2d_as", "(", "occ_b", ",", "x2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "x2_warp", "=", "self", ".", "warping_layer", "(", "x2", ",", "flow_f", ",", "height_im", ",", "width_im", ",", "self", ".", "_div_flow", ")", "\n", "x1_warp", "=", "self", ".", "warping_layer", "(", "x1", ",", "flow_b", ",", "height_im", ",", "width_im", ",", "self", ".", "_div_flow", ")", "\n", "", "return", "x1_warp", ",", "x2_warp", ",", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet.collate_corr": [[270, 275], ["corr.size", "corr.view", "float", "first_inp.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_corr", "(", "corr", ",", "first_inp", ")", ":", "\n", "        ", "b", ",", "ph", ",", "pw", ",", "h", ",", "w", "=", "corr", ".", "size", "(", ")", "\n", "output_collated", "=", "corr", ".", "view", "(", "b", ",", "ph", "*", "pw", ",", "h", ",", "w", ")", "\n", "return", "output_collated", "/", "float", "(", "first_inp", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._correlate": [[276, 281], ["IRR_PWC_V2_MS.PWCNet.correlation", "IRR_PWC_V2_MS.PWCNet.leakyRELU"], "methods", ["None"], ["", "def", "_correlate", "(", "self", ",", "x1", ",", "x2_warp", ")", ":", "\n", "        ", "out_corr", "=", "self", ".", "correlation", "(", "x1", ",", "x2_warp", ")", "\n", "# out_corr = self.collate_corr(out_corr, x1)", "\n", "out_corr_relu", "=", "self", ".", "leakyRELU", "(", "out_corr", ")", "\n", "return", "out_corr_relu", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._squash": [[282, 290], ["None"], "methods", ["None"], ["", "def", "_squash", "(", "self", ",", "l", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "if", "l", "!=", "self", ".", "output_level", ":", "\n", "            ", "x1_1by1", "=", "self", ".", "conv_1x1", "[", "l", "]", "(", "x1", ")", "\n", "x2_1by1", "=", "self", ".", "conv_1x1", "[", "l", "]", "(", "x2", ")", "\n", "", "else", ":", "\n", "            ", "x1_1by1", "=", "x1", "\n", "x2_1by1", "=", "x2", "\n", "", "return", "x1_1by1", ",", "x2_1by1", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._rescale_flow": [[291, 295], ["pwc_modules.rescale_flow", "pwc_modules.rescale_flow"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow"], ["", "def", "_rescale_flow", "(", "self", ",", "flow_f", ",", "flow_b", ",", "height_im", ",", "width_im", ")", ":", "\n", "        ", "flow_f", "=", "rescale_flow", "(", "flow_f", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "to_local", "=", "True", ")", "\n", "flow_b", "=", "rescale_flow", "(", "flow_b", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "to_local", "=", "True", ")", "\n", "return", "flow_f", ",", "flow_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._estimate_flow": [[296, 316], ["IRR_PWC_V2_MS.PWCNet.flow_estimators", "IRR_PWC_V2_MS.PWCNet.flow_estimators", "IRR_PWC_V2_MS.PWCNet.context_networks", "IRR_PWC_V2_MS.PWCNet.context_networks", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_estimate_flow", "(", "self", ",", "out_corr_relu_f", ",", "out_corr_relu_b", ",", "x1_1by1", ",", "x2_1by1", ",", "\n", "flow_f", ",", "flow_b", ")", ":", "\n", "\n", "# Estimate forward and backward residual flows", "\n", "        ", "x_intm_f", ",", "flow_res_f", "=", "self", ".", "flow_estimators", "(", "\n", "torch", ".", "cat", "(", "[", "out_corr_relu_f", ",", "x1_1by1", ",", "flow_f", "]", ",", "dim", "=", "1", ")", ")", "\n", "x_intm_b", ",", "flow_res_b", "=", "self", ".", "flow_estimators", "(", "\n", "torch", ".", "cat", "(", "[", "out_corr_relu_b", ",", "x2_1by1", ",", "flow_b", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# Add residual flow to the aggregated flow", "\n", "flow_est_f", "=", "flow_f", "+", "flow_res_f", "\n", "flow_est_b", "=", "flow_b", "+", "flow_res_b", "\n", "\n", "# Estimate residual context based refinement", "\n", "ctxf", "=", "self", ".", "context_networks", "(", "torch", ".", "cat", "(", "[", "x_intm_f", ",", "flow_est_f", "]", ",", "dim", "=", "1", ")", ")", "\n", "ctxb", "=", "self", ".", "context_networks", "(", "torch", ".", "cat", "(", "[", "x_intm_b", ",", "flow_est_b", "]", ",", "dim", "=", "1", ")", ")", "\n", "flow_cont_f", "=", "flow_est_f", "+", "ctxf", "\n", "flow_cont_b", "=", "flow_est_b", "+", "ctxb", "\n", "\n", "return", "flow_cont_f", ",", "flow_cont_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._estimate_occ": [[317, 336], ["IRR_PWC_V2_MS.PWCNet.occ_estimators", "IRR_PWC_V2_MS.PWCNet.occ_estimators", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "IRR_PWC_V2_MS.PWCNet.occ_context_networks", "IRR_PWC_V2_MS.PWCNet.occ_context_networks", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_estimate_occ", "(", "self", ",", "out_corr_relu_f", ",", "out_corr_relu_b", ",", "x1_1by1", ",", "x2_1by1", ",", "\n", "occ_f", ",", "occ_b", ")", ":", "\n", "\n", "# Estimate residual occlusions", "\n", "        ", "x_intm_occ_f", ",", "occ_res_f", "=", "self", ".", "occ_estimators", "(", "\n", "torch", ".", "cat", "(", "[", "out_corr_relu_f", ",", "x1_1by1", ",", "occ_f", "]", ",", "dim", "=", "1", ")", ")", "\n", "x_intm_occ_b", ",", "occ_res_b", "=", "self", ".", "occ_estimators", "(", "\n", "torch", ".", "cat", "(", "[", "out_corr_relu_b", ",", "x2_1by1", ",", "occ_b", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# Add residual occlusions to the aggregated occlusions", "\n", "occ_est_f", "=", "occ_f", "+", "occ_res_f", "\n", "occ_est_b", "=", "occ_b", "+", "occ_res_b", "\n", "\n", "# Estimate residual context based refinement", "\n", "occ_cont_f", "=", "occ_est_f", "+", "self", ".", "occ_context_networks", "(", "\n", "torch", ".", "cat", "(", "[", "x_intm_occ_f", ",", "occ_est_f", "]", ",", "dim", "=", "1", ")", ")", "\n", "occ_cont_b", "=", "occ_est_b", "+", "self", ".", "occ_context_networks", "(", "\n", "torch", ".", "cat", "(", "[", "x_intm_occ_b", ",", "occ_est_b", "]", ",", "dim", "=", "1", ")", ")", "\n", "return", "occ_cont_f", ",", "occ_cont_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._resize_and_warp_inputs": [[337, 358], ["pwc_modules.upsample2d_as", "pwc_modules.upsample2d_as", "pwc_modules.rescale_flow", "pwc_modules.rescale_flow", "IRR_PWC_V2_MS.PWCNet.warping_layer", "IRR_PWC_V2_MS.PWCNet.warping_layer"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow"], ["", "def", "_resize_and_warp_inputs", "(", "self", ",", "x1_raw", ",", "x2_raw", ",", "flow_f", ",", "flow_b", ",", "\n", "flow_cont_f", ",", "flow_cont_b", ",", "\n", "height_im", ",", "width_im", ")", ":", "\n", "\n", "# Resizing input images for warping", "\n", "        ", "img1_resize", "=", "upsample2d_as", "(", "x1_raw", ",", "flow_f", ",", "mode", "=", "\"bilinear\"", ")", "\n", "img2_resize", "=", "upsample2d_as", "(", "x2_raw", ",", "flow_b", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "# Rescaling flow to the layer's size", "\n", "rescaled_f", "=", "rescale_flow", "(", "flow_cont_f", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "\n", "to_local", "=", "False", ")", "\n", "rescaled_b", "=", "rescale_flow", "(", "flow_cont_b", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "\n", "to_local", "=", "False", ")", "\n", "\n", "# Warping resized images", "\n", "img2_warp", "=", "self", ".", "warping_layer", "(", "img2_resize", ",", "rescaled_f", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "img1_warp", "=", "self", ".", "warping_layer", "(", "img1_resize", ",", "rescaled_b", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "\n", "return", "img1_resize", ",", "img2_resize", ",", "img1_warp", ",", "img2_warp", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._refine_flow": [[359, 371], ["IRR_PWC_V2_MS.PWCNet.refine_flow", "IRR_PWC_V2_MS.PWCNet.refine_flow", "pwc_modules.rescale_flow", "pwc_modules.rescale_flow", "pwc_modules.rescale_flow", "pwc_modules.rescale_flow", "pwc_modules.rescale_flow.detach", "pwc_modules.rescale_flow.detach"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow"], ["", "def", "_refine_flow", "(", "self", ",", "flow_cont_f", ",", "flow_cont_b", ",", "img1_resize", ",", "img2_resize", ",", "img1_warp", ",", "\n", "img2_warp", ",", "x1_1by1", ",", "x2_1by1", ",", "height_im", ",", "width_im", ")", ":", "\n", "        ", "flow_f", "=", "self", ".", "refine_flow", "(", "flow_cont_f", ".", "detach", "(", ")", ",", "img1_resize", "-", "img2_warp", ",", "x1_1by1", ")", "\n", "flow_b", "=", "self", ".", "refine_flow", "(", "flow_cont_b", ".", "detach", "(", ")", ",", "img2_resize", "-", "img1_warp", ",", "x2_1by1", ")", "\n", "\n", "flow_cont_f", "=", "rescale_flow", "(", "flow_cont_f", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "\n", "to_local", "=", "False", ")", "\n", "flow_cont_b", "=", "rescale_flow", "(", "flow_cont_b", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "\n", "to_local", "=", "False", ")", "\n", "flow_f", "=", "rescale_flow", "(", "flow_f", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "to_local", "=", "False", ")", "\n", "flow_b", "=", "rescale_flow", "(", "flow_b", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "to_local", "=", "False", ")", "\n", "return", "flow_f", ",", "flow_cont_f", ",", "flow_b", ",", "flow_cont_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet._refine_occ": [[372, 382], ["IRR_PWC_V2_MS.PWCNet.warping_layer", "IRR_PWC_V2_MS.PWCNet.warping_layer", "IRR_PWC_V2_MS.PWCNet.refine_occ", "IRR_PWC_V2_MS.PWCNet.refine_occ", "occ_cont_f.detach", "occ_cont_b.detach"], "methods", ["None"], ["", "def", "_refine_occ", "(", "self", ",", "x1_1by1", ",", "x2_1by1", ",", "flow_f", ",", "flow_b", ",", "occ_cont_f", ",", "occ_cont_b", ",", "\n", "height_im", ",", "width_im", ")", ":", "\n", "        ", "x2_1by1_warp", "=", "self", ".", "warping_layer", "(", "x2_1by1", ",", "flow_f", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "x1_1by1_warp", "=", "self", ".", "warping_layer", "(", "x1_1by1", ",", "flow_b", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "\n", "occ_f", "=", "self", ".", "refine_occ", "(", "occ_cont_f", ".", "detach", "(", ")", ",", "x1_1by1", ",", "x1_1by1", "-", "x2_1by1_warp", ")", "\n", "occ_b", "=", "self", ".", "refine_occ", "(", "occ_cont_b", ".", "detach", "(", ")", ",", "x2_1by1", ",", "x2_1by1", "-", "x1_1by1_warp", ")", "\n", "return", "occ_f", ",", "occ_cont_f", ",", "occ_b", ",", "occ_cont_f", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2_MS.PWCNet.occ_upsampling": [[383, 410], ["IRR_PWC_V2_MS.PWCNet.warping_layer", "IRR_PWC_V2_MS.PWCNet.warping_layer", "IRR_PWC_V2_MS.PWCNet.warping_layer", "IRR_PWC_V2_MS.PWCNet.warping_layer", "IRR_PWC_V2_MS.PWCNet.occ_shuffle_upsample", "IRR_PWC_V2_MS.PWCNet.occ_shuffle_upsample", "IRR_PWC_V2_MS.PWCNet.conv_1x1_1", "IRR_PWC_V2_MS.PWCNet.conv_1x1_1", "IRR_PWC_V2_MS.PWCNet.conv_1x1_1", "IRR_PWC_V2_MS.PWCNet.conv_1x1_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "occ_upsampling", "(", "self", ",", "l", ",", "x1", ",", "x2", ",", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", ",", "\n", "height_im", ",", "width_im", ")", ":", "\n", "        ", "x2_warp", "=", "self", ".", "warping_layer", "(", "x2", ",", "flow_f", ",", "height_im", ",", "width_im", ",", "self", ".", "_div_flow", ")", "\n", "x1_warp", "=", "self", ".", "warping_layer", "(", "x1", ",", "flow_b", ",", "height_im", ",", "width_im", ",", "self", ".", "_div_flow", ")", "\n", "flow_b_warp", "=", "self", ".", "warping_layer", "(", "flow_b", ",", "flow_f", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "flow_f_warp", "=", "self", ".", "warping_layer", "(", "flow_f", ",", "flow_b", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "\n", "if", "l", "!=", "self", ".", "num_levels", "-", "1", ":", "\n", "            ", "x1_in", "=", "self", ".", "conv_1x1_1", "(", "x1", ")", "\n", "x2_in", "=", "self", ".", "conv_1x1_1", "(", "x2", ")", "\n", "x1_w_in", "=", "self", ".", "conv_1x1_1", "(", "x1_warp", ")", "\n", "x2_w_in", "=", "self", ".", "conv_1x1_1", "(", "x2_warp", ")", "\n", "", "else", ":", "\n", "            ", "x1_in", "=", "x1", "\n", "x2_in", "=", "x2", "\n", "x1_w_in", "=", "x1_warp", "\n", "x2_w_in", "=", "x2_warp", "\n", "\n", "", "occ_f", "=", "self", ".", "occ_shuffle_upsample", "(", "occ_f", ",", "\n", "torch", ".", "cat", "(", "[", "x1_in", ",", "x2_w_in", ",", "flow_f", ",", "flow_b_warp", "]", ",", "\n", "dim", "=", "1", ")", ")", "\n", "occ_b", "=", "self", ".", "occ_shuffle_upsample", "(", "occ_b", ",", "\n", "torch", ".", "cat", "(", "[", "x2_in", ",", "x1_w_in", ",", "flow_b", ",", "flow_f_warp", "]", ",", "\n", "dim", "=", "1", ")", ")", "\n", "return", "occ_f", ",", "occ_b", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.FeatureExtractor.__init__": [[64, 75], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "zip", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pwc_modules.FeatureExtractor.convs.append", "pwc_modules.conv", "pwc_modules.conv"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "num_chs", ")", ":", "\n", "        ", "super", "(", "FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_chs", "=", "num_chs", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "l", ",", "(", "ch_in", ",", "ch_out", ")", "in", "enumerate", "(", "zip", "(", "num_chs", "[", ":", "-", "1", "]", ",", "num_chs", "[", "1", ":", "]", ")", ")", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "ch_in", ",", "ch_out", ",", "stride", "=", "2", ")", ",", "\n", "conv", "(", "ch_out", ",", "ch_out", ")", "\n", ")", "\n", "self", ".", "convs", ".", "append", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.FeatureExtractor.forward": [[76, 83], ["pwc_modules.conv", "feature_pyramid.append"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feature_pyramid", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "feature_pyramid", ".", "append", "(", "x", ")", "\n", "\n", "", "return", "feature_pyramid", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.WarpingLayer.__init__": [[94, 96], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "WarpingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.WarpingLayer.forward": [[97, 143], ["flo_list.append", "flo_list.append", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.add().transpose().transpose", "torch.add().transpose().transpose", "torch.add().transpose().transpose", "torch.add().transpose().transpose", "torch.add().transpose().transpose", "torch.add().transpose().transpose", "torch.add().transpose().transpose", "torch.add().transpose().transpose", "torch.add().transpose().transpose", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "warped.cuda", "print", "print", "print", "print", "x.cpu.cpu.cpu", "grid.cpu.cpu.cpu", "print", "mask.cpu.cpu.cpu", "grid.cpu.cpu.cpu", "print", "mask.cpu.cpu.float", "grid.cpu.cpu.float", "print", "print", "mask.cpu.cpu.float", "print", "print", "x.cpu.cpu.mean", "flow.mean", "max", "max", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().transpose.mean", "torch.stack().transpose.mean", "torch.stack().transpose.mean", "torch.add().transpose", "torch.add().transpose", "torch.add().transpose", "torch.add().transpose", "torch.add().transpose", "torch.add().transpose", "torch.add().transpose", "torch.add().transpose", "torch.add().transpose", "torch.grid_sample.mean", "mask.cpu.cpu.mean", "mask.cpu.cpu.mean", "mask.cpu.cpu.mean", "warped.mean", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "pwc_modules.get_grid"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.get_grid"], ["", "def", "forward", "(", "self", ",", "x", ",", "flow", ",", "height_im", ",", "width_im", ",", "div_flow", ",", "cuda", "=", "True", ",", "debug", "=", "False", ")", ":", "\n", "        ", "if", "debug", ":", "\n", "            ", "print", "(", "'in warping'", ")", "\n", "print", "(", "x", ".", "mean", "(", ")", ")", "\n", "print", "(", "flow", ".", "mean", "(", ")", ")", "\n", "\n", "", "flo_list", "=", "[", "]", "\n", "flo_w", "=", "flow", "[", ":", ",", "0", "]", "*", "2", "/", "max", "(", "width_im", "-", "1", ",", "1", ")", "/", "div_flow", "\n", "flo_h", "=", "flow", "[", ":", ",", "1", "]", "*", "2", "/", "max", "(", "height_im", "-", "1", ",", "1", ")", "/", "div_flow", "\n", "flo_list", ".", "append", "(", "flo_w", ")", "\n", "flo_list", ".", "append", "(", "flo_h", ")", "\n", "flow_for_grid", "=", "torch", ".", "stack", "(", "flo_list", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "debug", ":", "\n", "            ", "print", "(", "flow_for_grid", ".", "mean", "(", ")", ")", "\n", "\n", "", "grid", "=", "torch", ".", "add", "(", "get_grid", "(", "x", ")", ",", "flow_for_grid", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "if", "not", "cuda", ":", "\n", "            ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "grid", "=", "grid", ".", "cpu", "(", ")", "\n", "", "x_warp", "=", "tf", ".", "grid_sample", "(", "x", ",", "grid", ")", "\n", "if", "debug", ":", "\n", "            ", "print", "(", "x_warp", ".", "mean", "(", ")", ")", "\n", "\n", "", "mask", "=", "torch", ".", "ones_like", "(", "x", ",", "requires_grad", "=", "False", ")", "\n", "if", "not", "cuda", ":", "\n", "            ", "mask", "=", "mask", ".", "cpu", "(", ")", "\n", "grid", "=", "grid", ".", "cpu", "(", ")", "\n", "\n", "", "if", "debug", ":", "\n", "            ", "print", "(", "mask", ".", "mean", "(", ")", ")", "\n", "\n", "", "mask", "=", "tf", ".", "grid_sample", "(", "mask", ".", "float", "(", ")", ",", "grid", ".", "float", "(", ")", ")", "\n", "if", "debug", ":", "\n", "            ", "print", "(", "mask", ".", "mean", "(", ")", ")", "\n", "\n", "", "mask", "[", "mask", "<", "0.99999", "]", "=", "0.", "\n", "mask", "[", "mask", ">", "0", "]", "=", "1.", "\n", "\n", "if", "debug", ":", "\n", "            ", "print", "(", "mask", ".", "mean", "(", ")", ")", "\n", "\n", "", "warped", "=", "x_warp", "*", "mask", ".", "float", "(", ")", "\n", "if", "debug", ":", "\n", "            ", "print", "(", "warped", ".", "mean", "(", ")", ")", "\n", "print", "(", "warped", ".", "shape", ")", "\n", "", "return", "warped", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.OpticalFlowEstimator.__init__": [[146, 157], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ")", ":", "\n", "        ", "super", "(", "OpticalFlowEstimator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "ch_in", ",", "128", ")", ",", "\n", "conv", "(", "128", ",", "128", ")", ",", "\n", "conv", "(", "128", ",", "96", ")", ",", "\n", "conv", "(", "96", ",", "64", ")", ",", "\n", "conv", "(", "64", ",", "32", ")", "\n", ")", "\n", "self", ".", "conv_last", "=", "conv", "(", "32", ",", "2", ",", "isReLU", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.OpticalFlowEstimator.forward": [[158, 161], ["pwc_modules.OpticalFlowEstimator.convs", "pwc_modules.OpticalFlowEstimator.conv_last"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_intm", "=", "self", ".", "convs", "(", "x", ")", "\n", "return", "x_intm", ",", "self", ".", "conv_last", "(", "x_intm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.FlowEstimatorDense.__init__": [[164, 172], ["torch.Module.__init__", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ")", ":", "\n", "        ", "super", "(", "FlowEstimatorDense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv", "(", "ch_in", ",", "128", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "ch_in", "+", "128", ",", "128", ")", "\n", "self", ".", "conv3", "=", "conv", "(", "ch_in", "+", "256", ",", "96", ")", "\n", "self", ".", "conv4", "=", "conv", "(", "ch_in", "+", "352", ",", "64", ")", "\n", "self", ".", "conv5", "=", "conv", "(", "ch_in", "+", "416", ",", "32", ")", "\n", "self", ".", "conv_last", "=", "conv", "(", "ch_in", "+", "448", ",", "2", ",", "isReLU", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.FlowEstimatorDense.forward": [[173, 181], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pwc_modules.FlowEstimatorDense.conv_last", "pwc_modules.FlowEstimatorDense.conv1", "pwc_modules.FlowEstimatorDense.conv2", "pwc_modules.FlowEstimatorDense.conv3", "pwc_modules.FlowEstimatorDense.conv4", "pwc_modules.FlowEstimatorDense.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv1", "(", "x", ")", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv2", "(", "x1", ")", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv3", "(", "x2", ")", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "x4", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv4", "(", "x3", ")", ",", "x3", "]", ",", "dim", "=", "1", ")", "\n", "x5", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv5", "(", "x4", ")", ",", "x4", "]", ",", "dim", "=", "1", ")", "\n", "x_out", "=", "self", ".", "conv_last", "(", "x5", ")", "\n", "return", "x5", ",", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.OcclusionEstimator.__init__": [[184, 194], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ")", ":", "\n", "        ", "super", "(", "OcclusionEstimator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "ch_in", ",", "128", ")", ",", "\n", "conv", "(", "128", ",", "128", ")", ",", "\n", "conv", "(", "128", ",", "96", ")", ",", "\n", "conv", "(", "96", ",", "64", ")", ",", "\n", "conv", "(", "64", ",", "32", ")", "\n", ")", "\n", "self", ".", "conv_last", "=", "conv", "(", "32", ",", "1", ",", "isReLU", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.OcclusionEstimator.forward": [[195, 198], ["pwc_modules.OcclusionEstimator.convs", "pwc_modules.OcclusionEstimator.conv_last"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_intm", "=", "self", ".", "convs", "(", "x", ")", "\n", "return", "x_intm", ",", "self", ".", "conv_last", "(", "x_intm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.OccEstimatorDense.__init__": [[201, 209], ["torch.Module.__init__", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ")", ":", "\n", "        ", "super", "(", "OccEstimatorDense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv", "(", "ch_in", ",", "128", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "ch_in", "+", "128", ",", "128", ")", "\n", "self", ".", "conv3", "=", "conv", "(", "ch_in", "+", "256", ",", "96", ")", "\n", "self", ".", "conv4", "=", "conv", "(", "ch_in", "+", "352", ",", "64", ")", "\n", "self", ".", "conv5", "=", "conv", "(", "ch_in", "+", "416", ",", "32", ")", "\n", "self", ".", "conv_last", "=", "conv", "(", "ch_in", "+", "448", ",", "1", ",", "isReLU", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.OccEstimatorDense.forward": [[210, 218], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pwc_modules.OccEstimatorDense.conv_last", "pwc_modules.OccEstimatorDense.conv1", "pwc_modules.OccEstimatorDense.conv2", "pwc_modules.OccEstimatorDense.conv3", "pwc_modules.OccEstimatorDense.conv4", "pwc_modules.OccEstimatorDense.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv1", "(", "x", ")", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv2", "(", "x1", ")", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv3", "(", "x2", ")", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "x4", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv4", "(", "x3", ")", ",", "x3", "]", ",", "dim", "=", "1", ")", "\n", "x5", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv5", "(", "x4", ")", ",", "x4", "]", ",", "dim", "=", "1", ")", "\n", "x_out", "=", "self", ".", "conv_last", "(", "x5", ")", "\n", "return", "x5", ",", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.ContextNetwork.__init__": [[221, 232], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ")", ":", "\n", "        ", "super", "(", "ContextNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "ch_in", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "128", ",", "128", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "conv", "(", "128", ",", "128", ",", "3", ",", "1", ",", "4", ")", ",", "\n", "conv", "(", "128", ",", "96", ",", "3", ",", "1", ",", "8", ")", ",", "\n", "conv", "(", "96", ",", "64", ",", "3", ",", "1", ",", "16", ")", ",", "\n", "conv", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "32", ",", "2", ",", "isReLU", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.ContextNetwork.forward": [[234, 236], ["pwc_modules.ContextNetwork.convs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "convs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.OccContextNetwork.__init__": [[239, 250], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv", "pwc_modules.conv"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ")", ":", "\n", "        ", "super", "(", "OccContextNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "ch_in", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "128", ",", "128", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "conv", "(", "128", ",", "128", ",", "3", ",", "1", ",", "4", ")", ",", "\n", "conv", "(", "128", ",", "96", ",", "3", ",", "1", ",", "8", ")", ",", "\n", "conv", "(", "96", ",", "64", ",", "3", ",", "1", ",", "16", ")", ",", "\n", "conv", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "32", ",", "1", ",", "isReLU", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.OccContextNetwork.forward": [[252, 254], ["pwc_modules.OccContextNetwork.convs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "convs", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.conv": [[9, 20], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.LeakyReLU", "torch.Conv2d"], "function", ["None"], ["def", "conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "isReLU", "=", "True", ")", ":", "\n", "    ", "if", "isReLU", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "\n", "padding", "=", "(", "(", "kernel_size", "-", "1", ")", "*", "dilation", ")", "//", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "\n", "padding", "=", "(", "(", "kernel_size", "-", "1", ")", "*", "dilation", ")", "//", "2", ",", "bias", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.initialize_msra": [[23, 41], ["logging.info", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "isinstance"], "function", ["None"], ["", "", "def", "initialize_msra", "(", "modules", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"Initializing MSRA\"", ")", "\n", "for", "layer", "in", "modules", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "layer", ".", "weight", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "layer", ".", "weight", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "LeakyReLU", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as": [[43, 46], ["target_as.size", "torch.interpolate"], "function", ["None"], ["", "", "", "def", "upsample2d_as", "(", "inputs", ",", "target_as", ",", "mode", "=", "\"bilinear\"", ")", ":", "\n", "    ", "_", ",", "_", ",", "h", ",", "w", "=", "target_as", ".", "size", "(", ")", "\n", "return", "tf", ".", "interpolate", "(", "inputs", ",", "[", "h", ",", "w", "]", ",", "mode", "=", "mode", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow": [[48, 61], ["flow.chunk", "torch.cat", "torch.cat", "torch.cat", "float", "float", "float", "float", "flow.size", "flow.size", "flow.size", "flow.size"], "function", ["None"], ["", "def", "rescale_flow", "(", "flow", ",", "div_flow", ",", "width_im", ",", "height_im", ",", "to_local", "=", "True", ")", ":", "\n", "    ", "if", "to_local", ":", "\n", "        ", "u_scale", "=", "float", "(", "flow", ".", "size", "(", "3", ")", "/", "width_im", "/", "div_flow", ")", "\n", "v_scale", "=", "float", "(", "flow", ".", "size", "(", "2", ")", "/", "height_im", "/", "div_flow", ")", "\n", "", "else", ":", "\n", "        ", "u_scale", "=", "float", "(", "width_im", "*", "div_flow", "/", "flow", ".", "size", "(", "3", ")", ")", "\n", "v_scale", "=", "float", "(", "height_im", "*", "div_flow", "/", "flow", ".", "size", "(", "2", ")", ")", "\n", "\n", "", "u", ",", "v", "=", "flow", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "u", "*=", "u_scale", "\n", "v", "*=", "v_scale", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "u", ",", "v", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.get_grid": [[85, 91], ["torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat.float().requires_grad_().cuda", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.cat.float().requires_grad_", "x.size", "x.size", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.cat.float", "x.size", "x.size"], "function", ["None"], ["", "", "def", "get_grid", "(", "x", ")", ":", "\n", "    ", "grid_H", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "x", ".", "size", "(", "3", ")", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "x", ".", "size", "(", "3", ")", ")", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "grid_V", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "x", ".", "size", "(", "2", ")", ")", ".", "view", "(", "1", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "1", ")", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "[", "grid_H", ",", "grid_V", "]", ",", "1", ")", "\n", "grids_cuda", "=", "grid", ".", "float", "(", ")", ".", "requires_grad_", "(", "False", ")", ".", "cuda", "(", ")", "\n", "return", "grids_cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation._FunctionCorrelation.forward": [[281, 335], ["first.new_zeros", "first.new_zeros", "correlation._FunctionCorrelation.save_for_backward", "first.new_zeros", "first.is_contiguous", "second.is_contiguous", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_launch", "second.size", "second.size", "correlation.cupy_launch", "first.new_zeros.size", "correlation.cupy_launch", "NotImplementedError", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "correlation.cupy_kernel", "tuple", "tuple", "first.new_zeros.size", "first.new_zeros.size", "correlation.cupy_kernel", "tuple", "tuple", "first.data_ptr", "first.new_zeros.data_ptr", "second.data_ptr", "first.new_zeros.data_ptr", "first.size", "first.new_zeros.data_ptr", "first.new_zeros.data_ptr", "first.new_zeros.data_ptr", "int", "first.size", "first.size", "int", "second.size", "second.size", "first.new_zeros.size", "first.new_zeros.size", "first.new_zeros.size"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel"], ["\t", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "first", ",", "second", ")", ":", "\n", "\t\t", "rbot0", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "2", ")", "+", "8", ",", "first", ".", "size", "(", "3", ")", "+", "8", ",", "first", ".", "size", "(", "1", ")", "]", ")", "\n", "rbot1", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "2", ")", "+", "8", ",", "first", ".", "size", "(", "3", ")", "+", "8", ",", "first", ".", "size", "(", "1", ")", "]", ")", "\n", "\n", "self", ".", "save_for_backward", "(", "first", ",", "second", ",", "rbot0", ",", "rbot1", ")", "\n", "\n", "assert", "(", "first", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "assert", "(", "second", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "\n", "output", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "81", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "\n", "\n", "if", "first", ".", "is_cuda", "==", "True", ":", "\n", "\t\t\t", "n", "=", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_rearrange'", ",", "cupy_kernel", "(", "'kernel_Correlation_rearrange'", ",", "{", "\n", "'input'", ":", "first", ",", "\n", "'output'", ":", "rbot0", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "16", "-", "1", ")", "/", "16", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "16", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "first", ".", "data_ptr", "(", ")", ",", "rbot0", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "n", "=", "second", ".", "size", "(", "2", ")", "*", "second", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_rearrange'", ",", "cupy_kernel", "(", "'kernel_Correlation_rearrange'", ",", "{", "\n", "'input'", ":", "second", ",", "\n", "'output'", ":", "rbot1", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "16", "-", "1", ")", "/", "16", ")", ",", "second", ".", "size", "(", "1", ")", ",", "second", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "16", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "second", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "n", "=", "output", ".", "size", "(", "1", ")", "*", "output", ".", "size", "(", "2", ")", "*", "output", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateOutput'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateOutput'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'top'", ":", "output", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "output", ".", "size", "(", "3", ")", ",", "output", ".", "size", "(", "2", ")", ",", "output", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "32", ",", "1", ",", "1", "]", ")", ",", "\n", "shared_mem", "=", "first", ".", "size", "(", "1", ")", "*", "4", ",", "\n", "args", "=", "[", "n", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "output", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "", "elif", "first", ".", "is_cuda", "==", "False", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# end", "\n", "\n", "", "return", "output", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation._FunctionCorrelation.backward": [[337, 389], ["gradOutput.is_contiguous", "first.new_zeros", "first.new_zeros", "range", "range", "NotImplementedError", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_launch", "first.size", "correlation.cupy_launch", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "rbot0.data_ptr", "rbot1.data_ptr", "gradOutput.data_ptr", "gradFirst.data_ptr", "rbot0.data_ptr", "rbot1.data_ptr", "gradOutput.data_ptr", "gradSecond.data_ptr", "int", "int"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "gradOutput", ")", ":", "\n", "\t\t", "first", ",", "second", ",", "rbot0", ",", "rbot1", "=", "self", ".", "saved_tensors", "\n", "\n", "assert", "(", "gradOutput", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "\n", "gradFirst", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "if", "self", ".", "needs_input_grad", "[", "0", "]", "==", "True", "else", "None", "\n", "gradSecond", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "if", "self", ".", "needs_input_grad", "[", "1", "]", "==", "True", "else", "None", "\n", "\n", "if", "first", ".", "is_cuda", "==", "True", ":", "\n", "\t\t\t", "if", "gradFirst", "is", "not", "None", ":", "\n", "\t\t\t\t", "for", "intSample", "in", "range", "(", "first", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t\t\t\t", "n", "=", "first", ".", "size", "(", "1", ")", "*", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateGradFirst'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateGradFirst'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'gradOutput'", ":", "gradOutput", ",", "\n", "'gradFirst'", ":", "gradFirst", ",", "\n", "'gradSecond'", ":", "None", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "intSample", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "gradOutput", ".", "data_ptr", "(", ")", ",", "gradFirst", ".", "data_ptr", "(", ")", ",", "None", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "if", "gradSecond", "is", "not", "None", ":", "\n", "\t\t\t\t", "for", "intSample", "in", "range", "(", "first", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t\t\t\t", "n", "=", "first", ".", "size", "(", "1", ")", "*", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateGradSecond'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateGradSecond'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'gradOutput'", ":", "gradOutput", ",", "\n", "'gradFirst'", ":", "None", ",", "\n", "'gradSecond'", ":", "gradSecond", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "intSample", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "gradOutput", ".", "data_ptr", "(", ")", ",", "None", ",", "gradSecond", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "", "elif", "first", ".", "is_cuda", "==", "False", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# end", "\n", "\n", "", "return", "gradFirst", ",", "gradSecond", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.ModuleCorrelation.__init__": [[397, 399], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "ModuleCorrelation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.ModuleCorrelation.forward": [[401, 403], ["_FunctionCorrelation.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\t\t", "return", "_FunctionCorrelation", ".", "apply", "(", "tensorFirst", ",", "tensorSecond", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_kernel": [[237, 273], ["globals", "re.search", "int", "re.search.group", "objectVariables[].size", "strKernel.replace.replace", "re.search", "int", "re.search.group().split", "objectVariables[].stride", "strKernel.replace.replace", "re.search.group", "re.search.group", "str", "re.search.group", "re.search.group", "re.search.group", "range", "str", "str.join", "strArgs[].replace().replace().strip", "strArgs[].replace().replace", "strArgs[].replace"], "function", ["None"], ["def", "cupy_kernel", "(", "strFunction", ",", "objectVariables", ")", ":", "\n", "\t", "strKernel", "=", "globals", "(", ")", "[", "strFunction", "]", "\n", "\n", "while", "True", ":", "\n", "\t\t", "objectMatch", "=", "re", ".", "search", "(", "'(SIZE_)([0-4])(\\()([^\\)]*)(\\))'", ",", "strKernel", ")", "\n", "\n", "if", "objectMatch", "is", "None", ":", "\n", "\t\t\t", "break", "\n", "# end", "\n", "\n", "", "intArg", "=", "int", "(", "objectMatch", ".", "group", "(", "2", ")", ")", "\n", "\n", "strTensor", "=", "objectMatch", ".", "group", "(", "4", ")", "\n", "intSizes", "=", "objectVariables", "[", "strTensor", "]", ".", "size", "(", ")", "\n", "\n", "strKernel", "=", "strKernel", ".", "replace", "(", "objectMatch", ".", "group", "(", ")", ",", "str", "(", "intSizes", "[", "intArg", "]", ")", ")", "\n", "# end", "\n", "\n", "", "while", "True", ":", "\n", "\t\t", "objectMatch", "=", "re", ".", "search", "(", "'(VALUE_)([0-4])(\\()([^\\)]+)(\\))'", ",", "strKernel", ")", "\n", "\n", "if", "objectMatch", "is", "None", ":", "\n", "\t\t\t", "break", "\n", "# end", "\n", "\n", "", "intArgs", "=", "int", "(", "objectMatch", ".", "group", "(", "2", ")", ")", "\n", "strArgs", "=", "objectMatch", ".", "group", "(", "4", ")", ".", "split", "(", "','", ")", "\n", "\n", "strTensor", "=", "strArgs", "[", "0", "]", "\n", "intStrides", "=", "objectVariables", "[", "strTensor", "]", ".", "stride", "(", ")", "\n", "strIndex", "=", "[", "'(('", "+", "strArgs", "[", "intArg", "+", "1", "]", ".", "replace", "(", "'{'", ",", "'('", ")", ".", "replace", "(", "'}'", ",", "')'", ")", ".", "strip", "(", ")", "+", "')*'", "+", "str", "(", "intStrides", "[", "intArg", "]", ")", "+", "')'", "for", "intArg", "in", "range", "(", "intArgs", ")", "]", "\n", "\n", "strKernel", "=", "strKernel", ".", "replace", "(", "objectMatch", ".", "group", "(", "0", ")", ",", "strTensor", "+", "'['", "+", "str", ".", "join", "(", "'+'", ",", "strIndex", ")", "+", "']'", ")", "\n", "# end", "\n", "\n", "", "return", "strKernel", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.cupy_launch": [[275, 278], ["cupy.util.memoize", "cupy.cuda.compile_with_cache().get_function", "cupy.cuda.compile_with_cache"], "function", ["None"], ["", "@", "cupy", ".", "util", ".", "memoize", "(", "for_each_device", "=", "True", ")", "\n", "def", "cupy_launch", "(", "strFunction", ",", "strKernel", ")", ":", "\n", "\t", "return", "cupy", ".", "cuda", ".", "compile_with_cache", "(", "strKernel", ")", ".", "get_function", "(", "strFunction", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.correlation.FunctionCorrelation": [[392, 394], ["_FunctionCorrelation.apply"], "function", ["None"], ["", "", "def", "FunctionCorrelation", "(", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\t", "return", "_FunctionCorrelation", ".", "apply", "(", "tensorFirst", ",", "tensorSecond", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet.__init__": [[16, 81], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "pwc_modules.FeatureExtractor", "pwc_modules.WarpingLayer", "correlation_package.correlation.Correlation", "pwc_modules.FlowEstimatorDense", "pwc_modules.ContextNetwork", "pwc_modules.OccEstimatorDense", "pwc_modules.OccContextNetwork", "irr_modules.OccUpsampleNetwork", "torch.ModuleList", "torch.ModuleList", "pwc_modules.conv", "irr_modules.RefineFlow", "irr_modules.RefineOcc", "pwc_modules.initialize_msra", "IRR_PWC_V2.PWCNet._get_param_groups", "hasattr", "print", "torch.Dropout2d", "torch.Dropout2d", "hasattr", "print", "SelfAttentionConv2d", "IRR_PWC_V2.PWCNet.modules", "hasattr", "args.freeze_list.split", "IRR_PWC_V2.PWCNet._freeze", "len", "pwc_modules.conv", "hasattr", "range", "len"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.initialize_msra", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._get_param_groups", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._freeze", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "div_flow", "=", "0.05", ")", ":", "\n", "        ", "super", "(", "PWCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pwc_groups", "=", "[", "'extractor'", ",", "'1x1'", ",", "\n", "'flow_estimator'", ",", "\n", "'context'", ",", "'refine_flow'", ",", "\n", "'attention'", "]", "+", "[", "'occ'", "]", "*", "3", "\n", "\n", "# Init sizes", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "_div_flow", "=", "div_flow", "\n", "self", ".", "search_range", "=", "4", "\n", "self", ".", "num_chs", "=", "[", "3", ",", "16", ",", "32", ",", "64", ",", "96", ",", "128", ",", "196", "]", "\n", "self", ".", "output_level", "=", "4", "\n", "self", ".", "num_levels", "=", "7", "\n", "self", ".", "ch_proj_size", "=", "32", "\n", "self", ".", "min_layer", "=", "len", "(", "self", ".", "num_chs", ")", "-", "self", ".", "output_level", "-", "1", "\n", "\n", "# Init generic layers", "\n", "self", ".", "leakyRELU", "=", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", "self", ".", "feature_pyramid_extractor", "=", "FeatureExtractor", "(", "self", ".", "num_chs", ")", "\n", "self", ".", "warping_layer", "=", "WarpingLayer", "(", ")", "\n", "self", ".", "correlation", "=", "Correlation", "(", "pad_size", "=", "self", ".", "search_range", ",", "kernel_size", "=", "1", ",", "\n", "max_displacement", "=", "self", ".", "search_range", ",", "stride1", "=", "1", ",", "stride2", "=", "1", ",", "\n", "corr_multiply", "=", "1", ")", "\n", "\n", "# Calc dimensions", "\n", "self", ".", "dim_corr", "=", "(", "self", ".", "search_range", "*", "2", "+", "1", ")", "**", "2", "\n", "self", ".", "num_ch_in_flo", "=", "self", ".", "dim_corr", "+", "self", ".", "ch_proj_size", "+", "2", "\n", "self", ".", "num_ch_in_occ", "=", "self", ".", "dim_corr", "+", "self", ".", "ch_proj_size", "+", "1", "\n", "\n", "# Init PWC modules", "\n", "self", ".", "flow_estimators", "=", "FlowEstimatorDense", "(", "self", ".", "num_ch_in_flo", ")", "\n", "self", ".", "context_networks", "=", "ContextNetwork", "(", "self", ".", "num_ch_in_flo", "+", "448", "+", "2", ")", "\n", "self", ".", "occ_estimators", "=", "OccEstimatorDense", "(", "self", ".", "num_ch_in_occ", ")", "\n", "self", ".", "occ_context_networks", "=", "OccContextNetwork", "(", "self", ".", "num_ch_in_occ", "+", "448", "+", "1", ")", "\n", "self", ".", "occ_shuffle_upsample", "=", "OccUpsampleNetwork", "(", "11", ",", "1", ")", "\n", "if", "hasattr", "(", "args", ",", "'dropout'", ")", "and", "args", ".", "dropout", ":", "\n", "            ", "print", "(", "\"Starting dropout!\"", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "args", ".", "dropout", ",", "inplace", "=", "False", ")", "\n", "\n", "", "self", ".", "conv_1x1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "conv", "(", "self", ".", "num_chs", "[", "ch", "]", ",", "self", ".", "ch_proj_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", "\n", "for", "ch", "in", "range", "(", "len", "(", "self", ".", "num_chs", ")", "-", "1", ",", "self", ".", "min_layer", ",", "-", "1", ")", "]", ")", "\n", "\n", "self", ".", "conv_1x1_1", "=", "conv", "(", "self", ".", "num_chs", "[", "self", ".", "min_layer", "-", "1", "]", ",", "3", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", "\n", "\n", "# Initialize attention", "\n", "if", "hasattr", "(", "args", ",", "'self_attention'", ")", "and", "self", ".", "args", ".", "self_attention", ":", "\n", "            ", "print", "(", "\"Initializing self attention!\"", ")", "\n", "from", "models", ".", "self_attention", "import", "AttentionConv", ",", "AttentionStem", ",", "SelfAttentionConv2d", "\n", "self", ".", "attention_conv", "=", "SelfAttentionConv2d", "(", "2", ",", "2", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "", "self", ".", "refine_flow", "=", "RefineFlow", "(", "2", "+", "1", "+", "self", ".", "ch_proj_size", ")", "\n", "self", ".", "refine_occ", "=", "RefineOcc", "(", "1", "+", "self", ".", "ch_proj_size", "+", "self", ".", "ch_proj_size", ")", "\n", "\n", "# Init weights", "\n", "initialize_msra", "(", "self", ".", "modules", "(", ")", ")", "\n", "self", ".", "param_groups", "=", "self", ".", "_get_param_groups", "(", "self", ".", "pwc_groups", ")", "\n", "\n", "if", "hasattr", "(", "args", ",", "'freeze_list'", ")", "and", "args", ".", "freeze_list", ":", "\n", "            ", "self", ".", "freezed_params", "=", "args", ".", "freeze_list", ".", "split", "(", "','", ")", "\n", "self", ".", "_freeze", "(", ")", "\n", "self", ".", "random_freeze", "=", "False", "\n", "", "elif", "hasattr", "(", "args", ",", "'random_freeze'", ")", "and", "args", ".", "random_freeze", ":", "\n", "            ", "self", ".", "random_freeze", "=", "True", "\n", "", "self", ".", "mean_per_module", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet.forward": [[82, 187], ["x1_raw.size", "IRR_PWC_V2.PWCNet.feature_pyramid_extractor", "IRR_PWC_V2.PWCNet.feature_pyramid_extractor", "IRR_PWC_V2.PWCNet._allocate_out_tensors", "enumerate", "pwc_modules.upsample2d_as", "hasattr", "range", "zip", "pwc_modules.upsample2d_as", "len", "IRR_PWC_V2.PWCNet.dropout", "IRR_PWC_V2.PWCNet._warp", "IRR_PWC_V2.PWCNet._correlate", "IRR_PWC_V2.PWCNet._correlate", "IRR_PWC_V2.PWCNet._squash", "IRR_PWC_V2.PWCNet._rescale_flow", "IRR_PWC_V2.PWCNet._estimate_flow", "IRR_PWC_V2.PWCNet._estimate_occ", "IRR_PWC_V2.PWCNet._resize_and_warp_inputs", "IRR_PWC_V2.PWCNet._refine_flow", "IRR_PWC_V2.PWCNet._refine_occ", "flows.append", "occs.append", "pwc_modules.upsample2d_as", "pwc_modules.upsample2d_as", "IRR_PWC_V2.PWCNet.occ_upsampling", "flows.append", "occs.append", "hasattr", "IRR_PWC_V2.PWCNet.attention_conv", "IRR_PWC_V2.PWCNet.attention_conv"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._allocate_out_tensors", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._warp", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._correlate", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._correlate", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._squash", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._estimate_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._estimate_occ", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._resize_and_warp_inputs", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._refine_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._refine_occ", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet.occ_upsampling"], ["", "def", "forward", "(", "self", ",", "x1_raw", ",", "x2_raw", ")", ":", "\n", "\n", "# Extract input", "\n", "#x1_raw = input_dict['input1']", "\n", "#x2_raw = input_dict['input2']", "\n", "        ", "batch_size", ",", "_", ",", "height_im", ",", "width_im", "=", "x1_raw", ".", "size", "(", ")", "\n", "\n", "# Get pyramid, on the bottom level are original images", "\n", "cur_x1", "=", "self", ".", "feature_pyramid_extractor", "(", "x1_raw", ")", "\n", "cur_x2", "=", "self", ".", "feature_pyramid_extractor", "(", "x2_raw", ")", "\n", "if", "hasattr", "(", "self", ".", "args", ",", "'dropout'", ")", "and", "self", ".", "args", ".", "dropout", ":", "\n", "# print(\"Dropout in ctx!\")", "\n", "            ", "for", "xl", "in", "range", "(", "len", "(", "cur_x1", ")", ")", ":", "\n", "# cur_x1[xl] = self.dropout(cur_x1[xl])", "\n", "                ", "cur_x2", "[", "xl", "]", "=", "self", ".", "dropout", "(", "cur_x2", "[", "xl", "]", ")", "\n", "", "", "x1_pyramid", "=", "cur_x1", "+", "[", "x1_raw", "]", "\n", "x2_pyramid", "=", "cur_x2", "+", "[", "x2_raw", "]", "\n", "\n", "# Set output data structures", "\n", "output_dict", "=", "{", "}", "\n", "output_dict_eval", "=", "{", "}", "\n", "flows", "=", "[", "]", "\n", "occs", "=", "[", "]", "\n", "\n", "# Pre allocate output tensors", "\n", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", "=", "self", ".", "_allocate_out_tensors", "(", "x1_pyramid", ",", "batch_size", ")", "\n", "\n", "for", "l", ",", "(", "x1", ",", "x2", ")", "in", "enumerate", "(", "zip", "(", "x1_pyramid", ",", "x2_pyramid", ")", ")", ":", "\n", "\n", "            ", "if", "l", "<=", "self", ".", "output_level", ":", "\n", "# Warp", "\n", "                ", "x1_warp", ",", "x2_warp", ",", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", "=", "self", ".", "_warp", "(", "l", ",", "x1", ",", "x2", ",", "\n", "flow_f", ",", "\n", "flow_b", ",", "occ_f", ",", "\n", "occ_b", ",", "\n", "height_im", ",", "\n", "width_im", ")", "\n", "\n", "# Correlate", "\n", "out_corr_relu_f", "=", "self", ".", "_correlate", "(", "x1", ",", "x2_warp", ")", "\n", "out_corr_relu_b", "=", "self", ".", "_correlate", "(", "x2", ",", "x1_warp", ")", "\n", "\n", "# Squash to channels projection size", "\n", "x1_1by1", ",", "x2_1by1", "=", "self", ".", "_squash", "(", "l", ",", "x1", ",", "x2", ")", "\n", "\n", "# Rescale Flow", "\n", "flow_f", ",", "flow_b", "=", "self", ".", "_rescale_flow", "(", "flow_f", ",", "flow_b", ",", "height_im", ",", "width_im", ")", "\n", "\n", "# Estimate flow", "\n", "flow_cont_f", ",", "flow_cont_b", "=", "self", ".", "_estimate_flow", "(", "out_corr_relu_f", ",", "\n", "out_corr_relu_b", ",", "\n", "x1_1by1", ",", "x2_1by1", ",", "\n", "flow_f", ",", "flow_b", ")", "\n", "\n", "# Estimate occlusions", "\n", "occ_cont_f", ",", "occ_cont_b", "=", "self", ".", "_estimate_occ", "(", "out_corr_relu_f", ",", "\n", "out_corr_relu_b", ",", "\n", "x1_1by1", ",", "x2_1by1", ",", "\n", "occ_f", ",", "occ_b", ")", "\n", "\n", "# Prepare refinement inputs", "\n", "img1_resize", ",", "img2_resize", ",", "img1_warp", ",", "img2_warp", "=", "self", ".", "_resize_and_warp_inputs", "(", "\n", "x1_raw", ",", "x2_raw", ",", "flow_f", ",", "flow_b", ",", "flow_cont_f", ",", "flow_cont_b", ",", "height_im", ",", "\n", "width_im", ")", "\n", "\n", "# Refine Flow", "\n", "flow_f", ",", "flow_cont_f", ",", "flow_b", ",", "flow_cont_b", "=", "self", ".", "_refine_flow", "(", "\n", "flow_cont_f", ",", "flow_cont_b", ",", "img1_resize", ",", "img2_resize", ",", "img1_warp", ",", "\n", "img2_warp", ",", "x1_1by1", ",", "x2_1by1", ",", "height_im", ",", "width_im", ")", "\n", "\n", "# Refine Occlusions", "\n", "occ_f", ",", "occ_cont_f", ",", "occ_b", ",", "occ_cont_f", "=", "self", ".", "_refine_occ", "(", "\n", "x1_1by1", ",", "x2_1by1", ",", "flow_f", ",", "flow_b", ",", "occ_cont_f", ",", "occ_cont_b", ",", "\n", "height_im", ",", "width_im", ")", "\n", "\n", "# Collect layer's outputs", "\n", "flows", ".", "append", "(", "[", "flow_cont_f", ",", "flow_cont_b", ",", "flow_f", ",", "flow_b", "]", ")", "\n", "occs", ".", "append", "(", "[", "occ_cont_f", ",", "occ_cont_b", ",", "occ_f", ",", "occ_b", "]", ")", "\n", "\n", "", "else", ":", "\n", "# Final flow upsampling", "\n", "                ", "flow_f", "=", "upsample2d_as", "(", "flow_f", ",", "x1", ",", "mode", "=", "\"bilinear\"", ")", "\n", "flow_b", "=", "upsample2d_as", "(", "flow_b", ",", "x2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "# Final occ upsampling", "\n", "occ_f", ",", "occ_b", "=", "self", ".", "occ_upsampling", "(", "l", ",", "x1", ",", "x2", ",", "flow_f", ",", "flow_b", ",", "\n", "occ_f", ",", "occ_b", ",", "height_im", ",", "width_im", ")", "\n", "\n", "# Apply self attention", "\n", "if", "hasattr", "(", "self", ".", "args", ",", "'self_attention'", ")", "and", "self", ".", "args", ".", "self_attention", ":", "\n", "                    ", "flow_f", "=", "self", ".", "attention_conv", "(", "flow_f", ")", "\n", "flow_b", "=", "self", ".", "attention_conv", "(", "flow_b", ")", "\n", "\n", "# Aggregate outputs", "\n", "", "flows", ".", "append", "(", "[", "flow_f", ",", "flow_b", "]", ")", "\n", "occs", ".", "append", "(", "[", "occ_f", ",", "occ_b", "]", ")", "\n", "\n", "", "", "output_dict_eval", "[", "'flow'", "]", "=", "upsample2d_as", "(", "flow_f", ",", "x1_raw", ",", "\n", "mode", "=", "\"bilinear\"", ")", "/", "self", ".", "_div_flow", "\n", "output_dict_eval", "[", "'occ'", "]", "=", "upsample2d_as", "(", "occ_f", ",", "x1_raw", ",", "mode", "=", "\"bilinear\"", ")", "\n", "output_dict", "[", "'flow'", "]", "=", "flows", "\n", "output_dict", "[", "'occ'", "]", "=", "occs", "\n", "\n", "return", "20", "*", "output_dict", "[", "'flow'", "]", "[", "-", "1", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet.submodules_summary": [[189, 204], ["print", "print", "print", "p[].data.mean", "p[].data.mean", "p[].data.mean", "IRR_PWC_V2.PWCNet.named_parameters", "IRR_PWC_V2.PWCNet.named_parameters", "IRR_PWC_V2.PWCNet.named_parameters", "IRR_PWC_V2.PWCNet.named_parameters", "p[].data.mean"], "methods", ["None"], ["", "def", "submodules_summary", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Trainable submodules: {}\"", ".", "format", "(", "{", "p", "[", "0", "]", "for", "p", "in", "self", ".", "named_parameters", "(", ")", "\n", "if", "p", "[", "1", "]", ".", "requires_grad", "}", ")", ")", "\n", "if", "not", "self", ".", "mean_per_module", ":", "\n", "            ", "print", "(", "\"Initializing mean per module\"", ")", "\n", "self", ".", "mean_per_module", "=", "{", "p", "[", "0", "]", ":", "p", "[", "1", "]", ".", "data", ".", "mean", "(", ")", "\n", "for", "p", "in", "self", ".", "named_parameters", "(", ")", "}", "\n", "", "else", ":", "\n", "\n", "            ", "changes", "=", "{", "p", "[", "0", "]", ":", "p", "[", "1", "]", ".", "data", ".", "mean", "(", ")", "for", "p", "in", "self", ".", "named_parameters", "(", ")", "\n", "if", "p", "[", "1", "]", ".", "data", ".", "mean", "(", ")", "!=", "self", ".", "mean_per_module", "[", "p", "[", "0", "]", "]", "}", "\n", "self", ".", "mean_per_module", "=", "{", "p", "[", "0", "]", ":", "p", "[", "1", "]", ".", "data", ".", "mean", "(", ")", "for", "p", "in", "\n", "self", ".", "named_parameters", "(", ")", "}", "\n", "# print(\"Mean per submodule: {}\".format(self.mean_per_module))", "\n", "print", "(", "\"Changes: {}\"", ".", "format", "(", "changes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet.freeze_random_weights": [[205, 209], ["random.sample", "IRR_PWC_V2.PWCNet._freeze", "random.randrange", "len"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._freeze"], ["", "", "def", "freeze_random_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "freezed_params", "=", "random", ".", "sample", "(", "self", ".", "pwc_groups", ",", "\n", "random", ".", "randrange", "(", "1", ",", "len", "(", "self", ".", "pwc_groups", ")", "/", "2", ")", ")", "\n", "self", ".", "_freeze", "(", "verify", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._freeze": [[210, 232], ["print", "set", "print", "print", "IRR_PWC_V2.PWCNet.named_parameters", "IRR_PWC_V2.PWCNet.param_groups[].items", "len", "len", "set.add", "param.grad.data.zero_", "IRR_PWC_V2.PWCNet.named_parameters", "IRR_PWC_V2.PWCNet.named_parameters"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.items"], ["", "def", "_freeze", "(", "self", ",", "verify", "=", "False", ")", ":", "\n", "        ", "print", "(", "\"Freezing groups {}\"", ".", "format", "(", "self", ".", "freezed_params", ")", ")", "\n", "\n", "if", "verify", ":", "\n", "            ", "for", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "not", "param", "[", "1", "]", ".", "requires_grad", ":", "\n", "                    ", "param", "[", "1", "]", ".", "requires_grad", "=", "True", "\n", "\n", "", "", "", "fkeys", "=", "set", "(", ")", "\n", "for", "freezing_group", "in", "self", ".", "freezed_params", ":", "\n", "            ", "for", "key", ",", "param", "in", "self", ".", "param_groups", "[", "freezing_group", "]", ".", "items", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "# print(\"Freezing {}, grad sum is {}\".format(key, param.grad.sum()))", "\n", "", "fkeys", ".", "add", "(", "key", ")", "\n", "\n", "", "", "assert", "len", "(", "{", "p", "[", "0", "]", "for", "p", "in", "self", ".", "named_parameters", "(", ")", "if", "not", "p", "[", "1", "]", ".", "requires_grad", "}", ")", "==", "len", "(", "fkeys", ")", "\n", "print", "(", "\"Freezed keys {}\"", ".", "format", "(", "fkeys", ")", ")", "\n", "print", "(", "\"Params with grad {}\"", ".", "format", "(", "{", "p", "[", "0", "]", "for", "p", "in", "self", ".", "named_parameters", "(", ")", "\n", "if", "p", "[", "1", "]", ".", "requires_grad", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._get_param_groups": [[233, 244], ["set", "len", "len", "list", "IRR_PWC_V2.PWCNet.named_parameters", "IRR_PWC_V2.PWCNet.named_parameters", "list", "pgroups[].keys"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.utils.config.Config.keys"], ["", "def", "_get_param_groups", "(", "self", ",", "keys", ")", ":", "\n", "        ", "pgroups", "=", "{", "}", "\n", "for", "substr", "in", "keys", ":", "\n", "            ", "pgroups", "[", "substr", "]", "=", "{", "k", ":", "t", "for", "k", ",", "t", "in", "self", ".", "named_parameters", "(", ")", "if", "substr", "in", "k", "}", "\n", "\n", "# Verify each param has at least one group", "\n", "", "unique_group_params", "=", "set", "(", "[", "s", "for", "p", "in", "[", "list", "(", "pgroups", "[", "k", "]", ".", "keys", "(", ")", ")", "for", "k", "in", "keys", "]", "\n", "for", "s", "in", "p", "]", ")", "\n", "assert", "len", "(", "unique_group_params", ")", "==", "len", "(", "list", "(", "self", ".", "named_parameters", "(", ")", ")", ")", "\n", "\n", "return", "pgroups", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._allocate_out_tensors": [[245, 253], ["x1_pyramid[].size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_allocate_out_tensors", "(", "x1_pyramid", ",", "batch_size", ")", ":", "\n", "        ", "_", ",", "_", ",", "h_x1", ",", "w_x1", ",", "=", "x1_pyramid", "[", "0", "]", ".", "size", "(", ")", "\n", "flow_f", "=", "torch", ".", "zeros", "(", "batch_size", ",", "2", ",", "h_x1", ",", "w_x1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "flow_b", "=", "torch", ".", "zeros", "(", "batch_size", ",", "2", ",", "h_x1", ",", "w_x1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "occ_f", "=", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "h_x1", ",", "w_x1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "occ_b", "=", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "h_x1", ",", "w_x1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "return", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._warp": [[254, 266], ["pwc_modules.upsample2d_as", "pwc_modules.upsample2d_as", "pwc_modules.upsample2d_as", "pwc_modules.upsample2d_as", "IRR_PWC_V2.PWCNet.warping_layer", "IRR_PWC_V2.PWCNet.warping_layer"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as"], ["", "def", "_warp", "(", "self", ",", "l", ",", "x1", ",", "x2", ",", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", ",", "height_im", ",", "width_im", ")", ":", "\n", "        ", "if", "l", "==", "0", ":", "\n", "            ", "x2_warp", "=", "x2", "\n", "x1_warp", "=", "x1", "\n", "", "else", ":", "\n", "            ", "flow_f", "=", "upsample2d_as", "(", "flow_f", ",", "x1", ",", "mode", "=", "\"bilinear\"", ")", "\n", "flow_b", "=", "upsample2d_as", "(", "flow_b", ",", "x2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "occ_f", "=", "upsample2d_as", "(", "occ_f", ",", "x1", ",", "mode", "=", "\"bilinear\"", ")", "\n", "occ_b", "=", "upsample2d_as", "(", "occ_b", ",", "x2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "x2_warp", "=", "self", ".", "warping_layer", "(", "x2", ",", "flow_f", ",", "height_im", ",", "width_im", ",", "self", ".", "_div_flow", ")", "\n", "x1_warp", "=", "self", ".", "warping_layer", "(", "x1", ",", "flow_b", ",", "height_im", ",", "width_im", ",", "self", ".", "_div_flow", ")", "\n", "", "return", "x1_warp", ",", "x2_warp", ",", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet.collate_corr": [[267, 272], ["corr.size", "corr.view", "float", "first_inp.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_corr", "(", "corr", ",", "first_inp", ")", ":", "\n", "        ", "b", ",", "ph", ",", "pw", ",", "h", ",", "w", "=", "corr", ".", "size", "(", ")", "\n", "output_collated", "=", "corr", ".", "view", "(", "b", ",", "ph", "*", "pw", ",", "h", ",", "w", ")", "\n", "return", "output_collated", "/", "float", "(", "first_inp", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._correlate": [[273, 278], ["IRR_PWC_V2.PWCNet.correlation", "IRR_PWC_V2.PWCNet.leakyRELU"], "methods", ["None"], ["", "def", "_correlate", "(", "self", ",", "x1", ",", "x2_warp", ")", ":", "\n", "        ", "out_corr", "=", "self", ".", "correlation", "(", "x1", ",", "x2_warp", ")", "\n", "# out_corr = self.collate_corr(out_corr, x1)", "\n", "out_corr_relu", "=", "self", ".", "leakyRELU", "(", "out_corr", ")", "\n", "return", "out_corr_relu", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._squash": [[279, 287], ["None"], "methods", ["None"], ["", "def", "_squash", "(", "self", ",", "l", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "if", "l", "!=", "self", ".", "output_level", ":", "\n", "            ", "x1_1by1", "=", "self", ".", "conv_1x1", "[", "l", "]", "(", "x1", ")", "\n", "x2_1by1", "=", "self", ".", "conv_1x1", "[", "l", "]", "(", "x2", ")", "\n", "", "else", ":", "\n", "            ", "x1_1by1", "=", "x1", "\n", "x2_1by1", "=", "x2", "\n", "", "return", "x1_1by1", ",", "x2_1by1", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._rescale_flow": [[288, 292], ["pwc_modules.rescale_flow", "pwc_modules.rescale_flow"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow"], ["", "def", "_rescale_flow", "(", "self", ",", "flow_f", ",", "flow_b", ",", "height_im", ",", "width_im", ")", ":", "\n", "        ", "flow_f", "=", "rescale_flow", "(", "flow_f", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "to_local", "=", "True", ")", "\n", "flow_b", "=", "rescale_flow", "(", "flow_b", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "to_local", "=", "True", ")", "\n", "return", "flow_f", ",", "flow_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._estimate_flow": [[293, 313], ["IRR_PWC_V2.PWCNet.flow_estimators", "IRR_PWC_V2.PWCNet.flow_estimators", "IRR_PWC_V2.PWCNet.context_networks", "IRR_PWC_V2.PWCNet.context_networks", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_estimate_flow", "(", "self", ",", "out_corr_relu_f", ",", "out_corr_relu_b", ",", "x1_1by1", ",", "x2_1by1", ",", "\n", "flow_f", ",", "flow_b", ")", ":", "\n", "\n", "# Estimate forward and backward residual flows", "\n", "        ", "x_intm_f", ",", "flow_res_f", "=", "self", ".", "flow_estimators", "(", "\n", "torch", ".", "cat", "(", "[", "out_corr_relu_f", ",", "x1_1by1", ",", "flow_f", "]", ",", "dim", "=", "1", ")", ")", "\n", "x_intm_b", ",", "flow_res_b", "=", "self", ".", "flow_estimators", "(", "\n", "torch", ".", "cat", "(", "[", "out_corr_relu_b", ",", "x2_1by1", ",", "flow_b", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# Add residual flow to the aggregated flow", "\n", "flow_est_f", "=", "flow_f", "+", "flow_res_f", "\n", "flow_est_b", "=", "flow_b", "+", "flow_res_b", "\n", "\n", "# Estimate residual context based refinement", "\n", "ctxf", "=", "self", ".", "context_networks", "(", "torch", ".", "cat", "(", "[", "x_intm_f", ",", "flow_est_f", "]", ",", "dim", "=", "1", ")", ")", "\n", "ctxb", "=", "self", ".", "context_networks", "(", "torch", ".", "cat", "(", "[", "x_intm_b", ",", "flow_est_b", "]", ",", "dim", "=", "1", ")", ")", "\n", "flow_cont_f", "=", "flow_est_f", "+", "ctxf", "\n", "flow_cont_b", "=", "flow_est_b", "+", "ctxb", "\n", "\n", "return", "flow_cont_f", ",", "flow_cont_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._estimate_occ": [[314, 333], ["IRR_PWC_V2.PWCNet.occ_estimators", "IRR_PWC_V2.PWCNet.occ_estimators", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "IRR_PWC_V2.PWCNet.occ_context_networks", "IRR_PWC_V2.PWCNet.occ_context_networks", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_estimate_occ", "(", "self", ",", "out_corr_relu_f", ",", "out_corr_relu_b", ",", "x1_1by1", ",", "x2_1by1", ",", "\n", "occ_f", ",", "occ_b", ")", ":", "\n", "\n", "# Estimate residual occlusions", "\n", "        ", "x_intm_occ_f", ",", "occ_res_f", "=", "self", ".", "occ_estimators", "(", "\n", "torch", ".", "cat", "(", "[", "out_corr_relu_f", ",", "x1_1by1", ",", "occ_f", "]", ",", "dim", "=", "1", ")", ")", "\n", "x_intm_occ_b", ",", "occ_res_b", "=", "self", ".", "occ_estimators", "(", "\n", "torch", ".", "cat", "(", "[", "out_corr_relu_b", ",", "x2_1by1", ",", "occ_b", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# Add residual occlusions to the aggregated occlusions", "\n", "occ_est_f", "=", "occ_f", "+", "occ_res_f", "\n", "occ_est_b", "=", "occ_b", "+", "occ_res_b", "\n", "\n", "# Estimate residual context based refinement", "\n", "occ_cont_f", "=", "occ_est_f", "+", "self", ".", "occ_context_networks", "(", "\n", "torch", ".", "cat", "(", "[", "x_intm_occ_f", ",", "occ_est_f", "]", ",", "dim", "=", "1", ")", ")", "\n", "occ_cont_b", "=", "occ_est_b", "+", "self", ".", "occ_context_networks", "(", "\n", "torch", ".", "cat", "(", "[", "x_intm_occ_b", ",", "occ_est_b", "]", ",", "dim", "=", "1", ")", ")", "\n", "return", "occ_cont_f", ",", "occ_cont_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._resize_and_warp_inputs": [[334, 355], ["pwc_modules.upsample2d_as", "pwc_modules.upsample2d_as", "pwc_modules.rescale_flow", "pwc_modules.rescale_flow", "IRR_PWC_V2.PWCNet.warping_layer", "IRR_PWC_V2.PWCNet.warping_layer"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.upsample2d_as", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow"], ["", "def", "_resize_and_warp_inputs", "(", "self", ",", "x1_raw", ",", "x2_raw", ",", "flow_f", ",", "flow_b", ",", "\n", "flow_cont_f", ",", "flow_cont_b", ",", "\n", "height_im", ",", "width_im", ")", ":", "\n", "\n", "# Resizing input images for warping", "\n", "        ", "img1_resize", "=", "upsample2d_as", "(", "x1_raw", ",", "flow_f", ",", "mode", "=", "\"bilinear\"", ")", "\n", "img2_resize", "=", "upsample2d_as", "(", "x2_raw", ",", "flow_b", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "# Rescaling flow to the layer's size", "\n", "rescaled_f", "=", "rescale_flow", "(", "flow_cont_f", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "\n", "to_local", "=", "False", ")", "\n", "rescaled_b", "=", "rescale_flow", "(", "flow_cont_b", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "\n", "to_local", "=", "False", ")", "\n", "\n", "# Warping resized images", "\n", "img2_warp", "=", "self", ".", "warping_layer", "(", "img2_resize", ",", "rescaled_f", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "img1_warp", "=", "self", ".", "warping_layer", "(", "img1_resize", ",", "rescaled_b", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "\n", "return", "img1_resize", ",", "img2_resize", ",", "img1_warp", ",", "img2_warp", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._refine_flow": [[356, 368], ["IRR_PWC_V2.PWCNet.refine_flow", "IRR_PWC_V2.PWCNet.refine_flow", "pwc_modules.rescale_flow", "pwc_modules.rescale_flow", "pwc_modules.rescale_flow", "pwc_modules.rescale_flow", "pwc_modules.rescale_flow.detach", "pwc_modules.rescale_flow.detach"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.pwc_modules.rescale_flow"], ["", "def", "_refine_flow", "(", "self", ",", "flow_cont_f", ",", "flow_cont_b", ",", "img1_resize", ",", "img2_resize", ",", "img1_warp", ",", "\n", "img2_warp", ",", "x1_1by1", ",", "x2_1by1", ",", "height_im", ",", "width_im", ")", ":", "\n", "        ", "flow_f", "=", "self", ".", "refine_flow", "(", "flow_cont_f", ".", "detach", "(", ")", ",", "img1_resize", "-", "img2_warp", ",", "x1_1by1", ")", "\n", "flow_b", "=", "self", ".", "refine_flow", "(", "flow_cont_b", ".", "detach", "(", ")", ",", "img2_resize", "-", "img1_warp", ",", "x2_1by1", ")", "\n", "\n", "flow_cont_f", "=", "rescale_flow", "(", "flow_cont_f", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "\n", "to_local", "=", "False", ")", "\n", "flow_cont_b", "=", "rescale_flow", "(", "flow_cont_b", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "\n", "to_local", "=", "False", ")", "\n", "flow_f", "=", "rescale_flow", "(", "flow_f", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "to_local", "=", "False", ")", "\n", "flow_b", "=", "rescale_flow", "(", "flow_b", ",", "self", ".", "_div_flow", ",", "width_im", ",", "height_im", ",", "to_local", "=", "False", ")", "\n", "return", "flow_f", ",", "flow_cont_f", ",", "flow_b", ",", "flow_cont_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet._refine_occ": [[369, 379], ["IRR_PWC_V2.PWCNet.warping_layer", "IRR_PWC_V2.PWCNet.warping_layer", "IRR_PWC_V2.PWCNet.refine_occ", "IRR_PWC_V2.PWCNet.refine_occ", "occ_cont_f.detach", "occ_cont_b.detach"], "methods", ["None"], ["", "def", "_refine_occ", "(", "self", ",", "x1_1by1", ",", "x2_1by1", ",", "flow_f", ",", "flow_b", ",", "occ_cont_f", ",", "occ_cont_b", ",", "\n", "height_im", ",", "width_im", ")", ":", "\n", "        ", "x2_1by1_warp", "=", "self", ".", "warping_layer", "(", "x2_1by1", ",", "flow_f", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "x1_1by1_warp", "=", "self", ".", "warping_layer", "(", "x1_1by1", ",", "flow_b", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "\n", "occ_f", "=", "self", ".", "refine_occ", "(", "occ_cont_f", ".", "detach", "(", ")", ",", "x1_1by1", ",", "x1_1by1", "-", "x2_1by1_warp", ")", "\n", "occ_b", "=", "self", ".", "refine_occ", "(", "occ_cont_b", ".", "detach", "(", ")", ",", "x2_1by1", ",", "x2_1by1", "-", "x1_1by1_warp", ")", "\n", "return", "occ_f", ",", "occ_cont_f", ",", "occ_b", ",", "occ_cont_f", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.IRR_PWC_V2.PWCNet.occ_upsampling": [[380, 407], ["IRR_PWC_V2.PWCNet.warping_layer", "IRR_PWC_V2.PWCNet.warping_layer", "IRR_PWC_V2.PWCNet.warping_layer", "IRR_PWC_V2.PWCNet.warping_layer", "IRR_PWC_V2.PWCNet.occ_shuffle_upsample", "IRR_PWC_V2.PWCNet.occ_shuffle_upsample", "IRR_PWC_V2.PWCNet.conv_1x1_1", "IRR_PWC_V2.PWCNet.conv_1x1_1", "IRR_PWC_V2.PWCNet.conv_1x1_1", "IRR_PWC_V2.PWCNet.conv_1x1_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "occ_upsampling", "(", "self", ",", "l", ",", "x1", ",", "x2", ",", "flow_f", ",", "flow_b", ",", "occ_f", ",", "occ_b", ",", "\n", "height_im", ",", "width_im", ")", ":", "\n", "        ", "x2_warp", "=", "self", ".", "warping_layer", "(", "x2", ",", "flow_f", ",", "height_im", ",", "width_im", ",", "self", ".", "_div_flow", ")", "\n", "x1_warp", "=", "self", ".", "warping_layer", "(", "x1", ",", "flow_b", ",", "height_im", ",", "width_im", ",", "self", ".", "_div_flow", ")", "\n", "flow_b_warp", "=", "self", ".", "warping_layer", "(", "flow_b", ",", "flow_f", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "flow_f_warp", "=", "self", ".", "warping_layer", "(", "flow_f", ",", "flow_b", ",", "height_im", ",", "width_im", ",", "\n", "self", ".", "_div_flow", ")", "\n", "\n", "if", "l", "!=", "self", ".", "num_levels", "-", "1", ":", "\n", "            ", "x1_in", "=", "self", ".", "conv_1x1_1", "(", "x1", ")", "\n", "x2_in", "=", "self", ".", "conv_1x1_1", "(", "x2", ")", "\n", "x1_w_in", "=", "self", ".", "conv_1x1_1", "(", "x1_warp", ")", "\n", "x2_w_in", "=", "self", ".", "conv_1x1_1", "(", "x2_warp", ")", "\n", "", "else", ":", "\n", "            ", "x1_in", "=", "x1", "\n", "x2_in", "=", "x2", "\n", "x1_w_in", "=", "x1_warp", "\n", "x2_w_in", "=", "x2_warp", "\n", "\n", "", "occ_f", "=", "self", ".", "occ_shuffle_upsample", "(", "occ_f", ",", "\n", "torch", ".", "cat", "(", "[", "x1_in", ",", "x2_w_in", ",", "flow_f", ",", "flow_b_warp", "]", ",", "\n", "dim", "=", "1", ")", ")", "\n", "occ_b", "=", "self", ".", "occ_shuffle_upsample", "(", "occ_b", ",", "\n", "torch", ".", "cat", "(", "[", "x2_in", ",", "x1_w_in", ",", "flow_b", ",", "flow_f_warp", "]", ",", "\n", "dim", "=", "1", ")", ")", "\n", "return", "occ_f", ",", "occ_b", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.OccUpsampleNetwork.__init__": [[31, 45], ["torch.Module.__init__", "irr_modules.conv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", "OccUpsampleNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feat_dim", "=", "32", "\n", "self", ".", "init_conv", "=", "conv", "(", "ch_in", ",", "self", ".", "feat_dim", ")", "\n", "\n", "self", ".", "res_convs", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "self", ".", "feat_dim", ",", "self", ".", "feat_dim", ")", ",", "\n", "conv", "(", "self", ".", "feat_dim", ",", "self", ".", "feat_dim", ",", "isReLU", "=", "False", ")", "\n", ")", "\n", "self", ".", "res_end_conv", "=", "conv", "(", "self", ".", "feat_dim", ",", "self", ".", "feat_dim", ")", "\n", "self", ".", "mul_const", "=", "0.1", "\n", "\n", "self", ".", "out_convs", "=", "conv", "(", "self", ".", "feat_dim", ",", "ch_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.OccUpsampleNetwork.forward": [[46, 57], ["irr_modules.upsample_factor2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "irr_modules.OccUpsampleNetwork.init_conv", "irr_modules.OccUpsampleNetwork.res_end_conv", "irr_modules.OccUpsampleNetwork.out_convs", "irr_modules.OccUpsampleNetwork.res_convs", "irr_modules.OccUpsampleNetwork.res_convs", "irr_modules.OccUpsampleNetwork.res_convs"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.upsample_factor2"], ["", "def", "forward", "(", "self", ",", "occ", ",", "x", ")", ":", "\n", "        ", "occ", "=", "upsample_factor2", "(", "occ", ",", "x", ")", "\n", "x_in", "=", "torch", ".", "cat", "(", "[", "occ", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "x_init", "=", "self", ".", "init_conv", "(", "x_in", ")", "\n", "x_res", "=", "x_init", "\n", "x_res", "=", "x_res", "+", "self", ".", "res_convs", "(", "x_res", ")", "*", "self", ".", "mul_const", "\n", "x_res", "=", "x_res", "+", "self", ".", "res_convs", "(", "x_res", ")", "*", "self", ".", "mul_const", "\n", "x_res", "=", "x_res", "+", "self", ".", "res_convs", "(", "x_res", ")", "*", "self", ".", "mul_const", "\n", "x_init", "=", "x_init", "+", "self", ".", "res_end_conv", "(", "x_res", ")", "\n", "\n", "return", "self", ".", "out_convs", "(", "x_init", ")", "+", "occ", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.RefineFlow.__init__": [[64, 89], ["torch.Module.__init__", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "bilateral_mask", "=", "False", ")", ":", "\n", "        ", "super", "(", "RefineFlow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "kernel_size", "=", "3", "\n", "self", ".", "pad_size", "=", "1", "\n", "self", ".", "pad_ftn", "=", "nn", ".", "ReplicationPad2d", "(", "self", ".", "pad_size", ")", "\n", "self", ".", "bilateral_mask", "=", "bilateral_mask", "\n", "if", "bilateral_mask", ":", "\n", "            ", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "0.1", "]", ")", ")", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "0.8", "]", ")", ")", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "ch_in", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "128", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "32", ",", "self", ".", "kernel_size", "*", "self", ".", "kernel_size", ",", "3", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "softmax_feat", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "unfold_flow", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", ")", "\n", "# self.unfold_kernel = nn.Unfold(kernel_size=(1, 1))", "\n", "self", ".", "unfold_kernel", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.RefineFlow.forward": [[90, 113], ["flow.size", "irr_modules.subtract_mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "irr_modules.RefineFlow.convs", "irr_modules.RefineFlow.softmax_feat", "flow[].unsqueeze", "flow[].unsqueeze", "irr_modules.RefineFlow.unfold_flow", "irr_modules.RefineFlow.unfold_flow", "irr_modules.RefineFlow.unfold_kernel", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "irr_modules.RefineFlow.pad_ftn", "irr_modules.RefineFlow.pad_ftn", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.subtract_mean"], ["", "def", "forward", "(", "self", ",", "flow", ",", "diff_img", ",", "feature", ",", "to_mask", "=", "False", ")", ":", "\n", "        ", "b", ",", "_", ",", "h", ",", "w", "=", "flow", ".", "size", "(", ")", "\n", "\n", "# Get feature map (1xCfxHxW)", "\n", "flow_m", "=", "subtract_mean", "(", "flow", ")", "\n", "norm2_img", "=", "torch", ".", "norm", "(", "diff_img", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "feat", "=", "self", ".", "convs", "(", "torch", ".", "cat", "(", "[", "flow_m", ",", "norm2_img", ",", "feature", "]", ",", "dim", "=", "1", ")", ")", "\n", "feat_kernel", "=", "self", ".", "softmax_feat", "(", "-", "feat", "**", "2", ")", "\n", "\n", "# Unfold inputs", "\n", "flow_x", "=", "flow", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "flow_y", "=", "flow", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "flow_x_unfold", "=", "self", ".", "unfold_flow", "(", "self", ".", "pad_ftn", "(", "flow_x", ")", ")", "\n", "flow_y_unfold", "=", "self", ".", "unfold_flow", "(", "self", ".", "pad_ftn", "(", "flow_y", ")", ")", "\n", "feat_kernel_unfold", "=", "self", ".", "unfold_kernel", "(", "feat_kernel", ")", "\n", "\n", "# Compute seg aware", "\n", "flow_out_x", "=", "torch", ".", "sum", "(", "flow_x_unfold", "*", "feat_kernel_unfold", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "view", "(", "b", ",", "1", ",", "h", ",", "w", ")", "\n", "flow_out_y", "=", "torch", ".", "sum", "(", "flow_y_unfold", "*", "feat_kernel_unfold", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "view", "(", "b", ",", "1", ",", "h", ",", "w", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "flow_out_x", ",", "flow_out_y", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.RefineOcc.__init__": [[116, 136], ["torch.Module.__init__", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv", "irr_modules.conv"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv", "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ")", ":", "\n", "        ", "super", "(", "RefineOcc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "kernel_size", "=", "3", "\n", "self", ".", "pad_size", "=", "1", "\n", "self", ".", "pad_ftn", "=", "nn", ".", "ReplicationPad2d", "(", "self", ".", "pad_size", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "ch_in", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "128", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv", "(", "32", ",", "self", ".", "kernel_size", "*", "self", ".", "kernel_size", ",", "3", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "softmax_feat", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "unfold_occ", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", ")", "\n", "self", ".", "unfold_kernel", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.RefineOcc.forward": [[137, 149], ["occ.size", "irr_modules.RefineOcc.convs", "irr_modules.RefineOcc.softmax_feat", "irr_modules.RefineOcc.unfold_occ", "irr_modules.RefineOcc.unfold_kernel", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.sum().unsqueeze().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "irr_modules.RefineOcc.pad_ftn", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "occ", ",", "feat1", ",", "feat2", ")", ":", "\n", "        ", "b", ",", "_", ",", "h", ",", "w", "=", "occ", ".", "size", "(", ")", "\n", "\n", "feat", "=", "self", ".", "convs", "(", "torch", ".", "cat", "(", "[", "occ", ",", "feat1", ",", "feat2", "]", ",", "dim", "=", "1", ")", ")", "\n", "feat_kernel", "=", "self", ".", "softmax_feat", "(", "-", "feat", "**", "2", ")", "\n", "\n", "occ_unfold", "=", "self", ".", "unfold_occ", "(", "self", ".", "pad_ftn", "(", "occ", ")", ")", "\n", "feat_kernel_unfold", "=", "self", ".", "unfold_kernel", "(", "feat_kernel", ")", "\n", "\n", "occ_out", "=", "torch", ".", "sum", "(", "occ_unfold", "*", "feat_kernel_unfold", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "view", "(", "b", ",", "1", ",", "h", ",", "w", ")", "\n", "\n", "return", "occ_out", "", "", "", ""]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.conv": [[7, 18], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.LeakyReLU", "torch.Conv2d"], "function", ["None"], ["def", "conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "isReLU", "=", "True", ")", ":", "\n", "    ", "if", "isReLU", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "\n", "padding", "=", "(", "(", "kernel_size", "-", "1", ")", "*", "dilation", ")", "//", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "\n", "padding", "=", "(", "(", "kernel_size", "-", "1", ")", "*", "dilation", ")", "//", "2", ",", "bias", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.upsample_factor2": [[21, 28], ["torch.interpolate", "target_as.size", "torch.interpolate", "tf.interpolate.size", "tf.interpolate.size"], "function", ["None"], ["", "", "def", "upsample_factor2", "(", "inputs", ",", "target_as", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "interpolate", "(", "inputs", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "target_as", ".", "size", "(", ")", "\n", "if", "inputs", ".", "size", "(", "2", ")", "!=", "h", "or", "inputs", ".", "size", "(", "3", ")", "!=", "w", ":", "\n", "        ", "return", "tf", ".", "interpolate", "(", "inputs", ",", "[", "h", ",", "w", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.scopeflow_models.irr_modules.subtract_mean": [[59, 61], ["input.mean().mean().unsqueeze().unsqueeze().expand_as", "input.mean().mean().unsqueeze().unsqueeze", "input.mean().mean().unsqueeze", "input.mean().mean", "input.mean"], "function", ["None"], ["", "", "def", "subtract_mean", "(", "input", ")", ":", "\n", "    ", "return", "input", "-", "input", ".", "mean", "(", "2", ")", ".", "mean", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package_init.correlation.CorrelationFunction.__init__": [[8, 16], ["torch.autograd.Function.__init__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["# end", "\n", "\n", "", "kernel_Correlation_rearrange", "="]], "home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package_init.correlation.CorrelationFunction.forward": [[18, 30], ["correlation.CorrelationFunction.save_for_backward", "torch.cuda.device_of", "input1.new", "input2.new", "input1.new", "correlation_cuda.forward"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package.correlation.Correlation.forward"], []], "home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package_init.correlation.CorrelationFunction.backward": [[31, 45], ["torch.cuda.device_of", "input1.new", "input2.new", "input1.new", "input2.new", "correlation_cuda.backward"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package.correlation.CorrelationFunction.backward"], ["\n", "\n", "kernel_Correlation_updateOutput", "="]], "home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package_init.correlation.Correlation.__init__": [[48, 56], ["torch.nn.modules.module.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], []], "home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package_init.correlation.Correlation.forward": [[57, 62], ["correlation.CorrelationFunction"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package.correlation.CorrelationFunction.__init__": [[8, 16], ["torch.autograd.Function.__init__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], ["# end", "\n", "\n", "", "kernel_Correlation_rearrange", "="]], "home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package.correlation.CorrelationFunction.forward": [[18, 30], ["correlation.CorrelationFunction.save_for_backward", "torch.cuda.device_of", "input1.new", "input2.new", "input1.new", "correlation_cuda.forward"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package.correlation.Correlation.forward"], []], "home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package.correlation.CorrelationFunction.backward": [[31, 45], ["torch.cuda.device_of", "input1.new", "input2.new", "input1.new", "input2.new", "correlation_cuda.backward"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package.correlation.CorrelationFunction.backward"], ["\n", "\n", "kernel_Correlation_updateOutput", "="]], "home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package.correlation.Correlation.__init__": [[48, 56], ["torch.nn.modules.module.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__"], []], "home.repos.pwc.inspect_result.lyh-18_EQVI.correlation_package.correlation.Correlation.forward": [[57, 62], ["correlation.CorrelationFunction"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.VTSR.VTSR.__init__": [[73, 93], ["VTSR._make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val._make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "resizeSize", "=", "(", "640", ",", "360", ")", ",", "randomCropSize", "=", "(", "352", ",", "352", ")", ",", "inter_frames", "=", "3", ")", ":", "\n", "# Populate the list with image paths for all the", "\n", "# frame in `root`.", "\n", "        ", "framesPath", ",", "framesFolder", ",", "framesIndex", "=", "_make_dataset", "(", "root", ",", "inter_frames", ")", "\n", "\n", "# Raise error if no images found in root.", "\n", "if", "len", "(", "framesPath", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "root", "+", "\"\\n\"", ")", ")", "\n", "\n", "", "self", ".", "dim", "=", "resizeSize", "\n", "self", ".", "randomCropSize", "=", "randomCropSize", "\n", "self", ".", "cropX0", "=", "resizeSize", "[", "0", "]", "-", "randomCropSize", "[", "0", "]", "\n", "self", ".", "cropY0", "=", "resizeSize", "[", "1", "]", "-", "randomCropSize", "[", "1", "]", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "inter_frames", "=", "inter_frames", "\n", "self", ".", "framesPath", "=", "framesPath", "\n", "self", ".", "framesFolder", "=", "framesFolder", "\n", "self", ".", "framesIndex", "=", "framesIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.VTSR.VTSR.__getitem__": [[94, 139], ["random.randint", "random.randint", "random.randint", "random.randint", "frameRange.reverse", "VTSR._pil_loader", "sample.append", "indeces.append", "folders.append", "VTSR.VTSR.transform"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val._pil_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "[", "]", "\n", "folders", "=", "[", "]", "\n", "indeces", "=", "[", "]", "\n", "\n", "cropX0", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "cropX0", ")", "\n", "cropY0", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "cropY0", ")", "\n", "\n", "cropArea", "=", "(", "cropX0", ",", "cropY0", ",", "cropX0", "+", "self", ".", "randomCropSize", "[", "0", "]", ",", "cropY0", "+", "self", ".", "randomCropSize", "[", "1", "]", ")", "\n", "\n", "# returnIndex = IFrameIndex - 1", "\n", "frameRange", "=", "[", "0", ",", "1", ",", "3", ",", "5", ",", "6", "]", "\n", "t", "=", "0.5", "\n", "\n", "frameRange", "[", "2", "]", "=", "(", "random", ".", "randint", "(", "2", ",", "4", ")", ")", "\n", "t", "=", "(", "frameRange", "[", "2", "]", "-", "1", ")", "*", "1.0", "/", "4.0", "\n", "\n", "randomFrameFlip", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "randomFrameFlip", ":", "\n", "            ", "frameRange", ".", "reverse", "(", ")", "\n", "t", "=", "1", "-", "t", "\n", "\n", "# print(frameRange)", "\n", "# print(index)", "\n", "# Loop over for all frames corresponding to the `index`.", "\n", "", "for", "frameIndex", "in", "frameRange", ":", "\n", "# Open image using pil and augment the image.", "\n", "# print(frameIndex)", "\n", "            ", "image", "=", "_pil_loader", "(", "self", ".", "framesPath", "[", "index", "]", "[", "frameIndex", "]", ",", "cropArea", "=", "cropArea", ",", "resizeDim", "=", "self", ".", "dim", ",", "frameFlip", "=", "randomFrameFlip", ")", "\n", "folder", "=", "self", ".", "framesFolder", "[", "index", "]", "[", "frameIndex", "]", "\n", "iindex", "=", "self", ".", "framesIndex", "[", "index", "]", "[", "frameIndex", "]", "\n", "\n", "# image.save(str(frameIndex) + '.jpg')", "\n", "# Apply transformation if specified.", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "sample", ".", "append", "(", "image", ")", "\n", "indeces", ".", "append", "(", "iindex", ")", "\n", "folders", ".", "append", "(", "folder", ")", "\n", "\n", "\n", "# while True:", "\n", "#     pass", "\n", "\n", "", "return", "sample", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.VTSR.VTSR.__len__": [[140, 152], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the size of dataset. Invoked as len(datasetObj).\n\n        Returns\n        -------\n            int\n                number of samples.\n        \"\"\"", "\n", "\n", "\n", "return", "len", "(", "self", ".", "framesPath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.VTSR.VTSR.__repr__": [[153, 170], ["VTSR.VTSR.__len__", "VTSR.VTSR.transform.__repr__().replace", "VTSR.VTSR.transform.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__len__", "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns printable representation of the dataset object.\n\n        Returns\n        -------\n            string\n                info.\n        \"\"\"", "\n", "\n", "\n", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.VTSR._make_dataset": [[10, 57], ["os.listdir", "os.listdir", "os.path.join", "os.path.join", "sorted", "range", "os.path.isdir", "os.path.isdir", "os.listdir", "os.listdir", "framesPath.append", "framesIndex.append", "framesFolder.append", "framesFolder[].append", "framesPath[].append", "framesIndex[].append", "range", "framesFolder[].append", "framesPath[].append", "framesIndex[].append", "os.path.join", "os.path.join", "framesFolder[].append", "framesPath[].append", "framesIndex[].append", "os.path.join", "os.path.join", "len", "os.path.join", "os.path.join"], "function", ["None"], ["def", "_make_dataset", "(", "dir", ",", "inter_frames", "=", "3", ")", ":", "\n", "\n", "# inter_frames = 3", "\n", "    ", "framesPath", "=", "[", "]", "\n", "framesIndex", "=", "[", "]", "\n", "framesFolder", "=", "[", "]", "\n", "# Find and loop over all the clips in root `dir`.", "\n", "\n", "totindex", "=", "0", "\n", "\n", "for", "folder", "in", "os", ".", "listdir", "(", "dir", ")", ":", "\n", "\n", "        ", "clipsFolderPath", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "folder", ")", "\n", "# Skip items which are not folders.", "\n", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "clipsFolderPath", ")", ")", ":", "\n", "            ", "continue", "\n", "\n", "\n", "# Find and loop over all the frames inside the clip.", "\n", "", "frames", "=", "sorted", "(", "os", ".", "listdir", "(", "clipsFolderPath", ")", ")", "\n", "\n", "group_len", "=", "(", "len", "(", "frames", ")", "-", "1", ")", "//", "(", "inter_frames", "+", "1", ")", "-", "2", "\n", "for", "index", "in", "range", "(", "group_len", ")", ":", "\n", "            ", "framesPath", ".", "append", "(", "[", "]", ")", "\n", "framesIndex", ".", "append", "(", "[", "]", ")", "\n", "framesFolder", ".", "append", "(", "[", "]", ")", "\n", "# Add path to list.", "\n", "\n", "# frame 0", "\n", "framesFolder", "[", "totindex", "]", ".", "append", "(", "folder", ")", "\n", "framesPath", "[", "totindex", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "clipsFolderPath", ",", "frames", "[", "index", "*", "(", "inter_frames", "+", "1", ")", "]", ")", ")", "\n", "framesIndex", "[", "totindex", "]", ".", "append", "(", "frames", "[", "index", "*", "(", "inter_frames", "+", "1", ")", "]", "[", ":", "-", "4", "]", ")", "\n", "\n", "# frame 1 .... frame 2", "\n", "for", "ii", "in", "range", "(", "0", ",", "inter_frames", "+", "2", ")", ":", "\n", "                ", "framesFolder", "[", "totindex", "]", ".", "append", "(", "folder", ")", "\n", "framesPath", "[", "totindex", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "clipsFolderPath", ",", "frames", "[", "(", "index", "+", "1", ")", "*", "(", "inter_frames", "+", "1", ")", "+", "ii", "]", ")", ")", "\n", "framesIndex", "[", "totindex", "]", ".", "append", "(", "frames", "[", "(", "index", "+", "1", ")", "*", "(", "inter_frames", "+", "1", ")", "+", "ii", "]", "[", ":", "-", "4", "]", ")", "\n", "\n", "# frame 3", "\n", "", "framesFolder", "[", "totindex", "]", ".", "append", "(", "folder", ")", "\n", "framesPath", "[", "totindex", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "clipsFolderPath", ",", "frames", "[", "(", "index", "+", "3", ")", "*", "(", "inter_frames", "+", "1", ")", "]", ")", ")", "\n", "framesIndex", "[", "totindex", "]", ".", "append", "(", "frames", "[", "(", "index", "+", "3", ")", "*", "(", "inter_frames", "+", "1", ")", "]", "[", ":", "-", "4", "]", ")", "\n", "\n", "totindex", "+=", "1", "\n", "# print(folder)", "\n", "", "", "return", "framesPath", ",", "framesFolder", ",", "framesIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.VTSR._pil_loader": [[59, 70], ["open", "PIL.Image.open", "flipped_img.convert", "Image.open.resize", "resized_img.crop", "cropped_img.transpose"], "function", ["None"], ["", "def", "_pil_loader", "(", "path", ",", "cropArea", "=", "None", ",", "resizeDim", "=", "None", ",", "frameFlip", "=", "0", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "# Resize image if specified.", "\n", "resized_img", "=", "img", ".", "resize", "(", "resizeDim", ",", "Image", ".", "ANTIALIAS", ")", "if", "(", "resizeDim", "!=", "None", ")", "else", "img", "\n", "# Crop image if crop area specified.", "\n", "cropped_img", "=", "resized_img", ".", "crop", "(", "cropArea", ")", "if", "(", "cropArea", "!=", "None", ")", "else", "resized_img", "\n", "# Flip image horizontally if specified.", "\n", "flipped_img", "=", "cropped_img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "if", "frameFlip", "else", "cropped_img", "\n", "return", "flipped_img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.AIMSequence.AIMSequence.__init__": [[79, 101], ["AIMSequence._make_dataset_all", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.AIMSequence._make_dataset_all"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "resizeSize", "=", "(", "640", ",", "360", ")", ",", "randomCropSize", "=", "(", "352", ",", "352", ")", ",", "inter_frames", "=", "7", ")", ":", "\n", "# Populate the list with image paths for all the", "\n", "# frame in `root`.", "\n", "        ", "framesPath", ",", "framesFolder", ",", "framesIndex", "=", "_make_dataset_all", "(", "root", ")", "\n", "#print(framesPath)", "\n", "\n", "\n", "# Raise error if no images found in root.", "\n", "if", "len", "(", "framesPath", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "root", "+", "\"\\n\"", ")", ")", "\n", "\n", "", "self", ".", "dim", "=", "resizeSize", "\n", "self", ".", "randomCropSize", "=", "randomCropSize", "\n", "self", ".", "cropX0", "=", "self", ".", "dim", "[", "0", "]", "-", "randomCropSize", "[", "0", "]", "\n", "self", ".", "cropY0", "=", "self", ".", "dim", "[", "1", "]", "-", "randomCropSize", "[", "1", "]", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "inter_frames", "=", "inter_frames", "\n", "self", ".", "framesPath", "=", "framesPath", "\n", "self", ".", "framesFolder", "=", "framesFolder", "\n", "self", ".", "framesIndex", "=", "framesIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.AIMSequence.AIMSequence.__getitem__": [[102, 157], ["len", "range", "print", "AIMSequence._pil_loader", "sample.append", "indeces.append", "folders.append", "img_name.append", "AIMSequence.AIMSequence.transform"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val._pil_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "[", "]", "\n", "folders", "=", "[", "]", "\n", "indeces", "=", "[", "]", "\n", "\n", "cropArea", "=", "(", "0", ",", "0", ",", "self", ".", "randomCropSize", "[", "0", "]", ",", "self", ".", "randomCropSize", "[", "1", "]", ")", "\n", "IFrameIndex", "=", "(", "(", "index", ")", "%", "7", "+", "1", ")", "\n", "# returnIndex = IFrameIndex - 1", "\n", "frameLen", "=", "len", "(", "self", ".", "framesPath", "[", "index", "]", ")", "\n", "#print(frameLen)", "\n", "\n", "randomFrameFlip", "=", "0", "\n", "# print(frameRange)", "\n", "# print(index)", "\n", "# Loop over for all frames corresponding to the `index`.", "\n", "\n", "# if frame is at the begining or at the end", "\n", "# if frameLen is 2:", "\n", "#     sample.append(None)", "\n", "#     indeces.append(None)", "\n", "#     folders.append(None)", "\n", "# print(frameLen)", "\n", "\n", "img_name", "=", "[", "]", "\n", "for", "frameIndex", "in", "range", "(", "frameLen", ")", ":", "\n", "# Open image using pil and augment the image.", "\n", "# print(frameIndex)", "\n", "            ", "image", "=", "_pil_loader", "(", "self", ".", "framesPath", "[", "index", "]", "[", "frameIndex", "]", ",", "cropArea", "=", "cropArea", ",", "resizeDim", "=", "self", ".", "dim", ",", "frameFlip", "=", "randomFrameFlip", ")", "\n", "folder", "=", "self", ".", "framesFolder", "[", "index", "]", "[", "frameIndex", "]", "\n", "iindex", "=", "self", ".", "framesIndex", "[", "index", "]", "[", "frameIndex", "]", "\n", "\n", "\n", "# print(self.framesPath[index][frameIndex])", "\n", "# print(folder)", "\n", "# print()", "\n", "\n", "# image.save(str(frameIndex) + '.jpg')", "\n", "# Apply transformation if specified.", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "sample", ".", "append", "(", "image", ")", "\n", "indeces", ".", "append", "(", "iindex", ")", "\n", "folders", ".", "append", "(", "folder", ")", "\n", "\n", "img_name", ".", "append", "(", "self", ".", "framesPath", "[", "index", "]", "[", "frameIndex", "]", ")", "\n", "", "print", "(", "img_name", ")", "\n", "# if frameLen is 2:", "\n", "#     sample.append(None)", "\n", "#     indeces.append(None)", "\n", "#     folders.append(None)", "\n", "\n", "# while True:", "\n", "#     pass", "\n", "\n", "return", "sample", ",", "folders", ",", "indeces", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.AIMSequence.AIMSequence.__len__": [[158, 170], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the size of dataset. Invoked as len(datasetObj).\n\n        Returns\n        -------\n            int\n                number of samples.\n        \"\"\"", "\n", "\n", "\n", "return", "len", "(", "self", ".", "framesPath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.AIMSequence.AIMSequence.__repr__": [[171, 188], ["AIMSequence.AIMSequence.__len__", "AIMSequence.AIMSequence.transform.__repr__().replace", "AIMSequence.AIMSequence.transform.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__len__", "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns printable representation of the dataset object.\n\n        Returns\n        -------\n            string\n                info.\n        \"\"\"", "\n", "\n", "\n", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.AIMSequence._make_dataset_all": [[10, 62], ["sorted", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "sorted", "range", "os.path.isdir", "os.path.isdir", "os.listdir", "os.listdir", "len", "framesPath.append", "framesIndex.append", "framesFolder.append", "framesFolder[].append", "framesPath[].append", "framesIndex[].append", "framesFolder[].append", "framesPath[].append", "framesIndex[].append", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "framesFolder[].append", "framesPath[].append", "framesIndex[].append", "os.path.join", "os.path.join"], "function", ["None"], ["def", "_make_dataset_all", "(", "dir", ")", ":", "\n", "    ", "framesPath", "=", "[", "]", "\n", "framesIndex", "=", "[", "]", "\n", "framesFolder", "=", "[", "]", "\n", "# Find and loop over all the clips in root `dir`.", "\n", "\n", "totindex", "=", "0", "\n", "\n", "for", "folder", "in", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ")", ":", "\n", "\n", "        ", "clipsFolderPath", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "folder", ")", "\n", "# Skip items which are not folders.", "\n", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "clipsFolderPath", ")", ")", ":", "\n", "            ", "continue", "\n", "\n", "\n", "# Find and loop over all the frames inside the clip.", "\n", "", "frames", "=", "sorted", "(", "os", ".", "listdir", "(", "clipsFolderPath", ")", ")", "\n", "\n", "group_len", "=", "(", "len", "(", "frames", ")", "-", "1", ")", "\n", "\n", "for", "index", "in", "range", "(", "group_len", ")", ":", "\n", "            ", "framesPath", ".", "append", "(", "[", "]", ")", "\n", "framesIndex", ".", "append", "(", "[", "]", ")", "\n", "framesFolder", ".", "append", "(", "[", "]", ")", "\n", "# Add path to list.", "\n", "#print(totindex)", "\n", "# if the f0 is at the begining or f1 is at the end of the sequence,", "\n", "# just push two frames into the sequence", "\n", "if", "index", "==", "0", "or", "index", "==", "(", "group_len", "-", "1", ")", ":", "\n", "# f0", "\n", "                ", "framesFolder", "[", "totindex", "]", ".", "append", "(", "folder", ")", "\n", "framesPath", "[", "totindex", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "clipsFolderPath", ",", "frames", "[", "index", "]", ")", ")", "\n", "framesIndex", "[", "totindex", "]", ".", "append", "(", "frames", "[", "index", "]", "[", ":", "-", "4", "]", ")", "\n", "\n", "# f1", "\n", "framesFolder", "[", "totindex", "]", ".", "append", "(", "folder", ")", "\n", "framesPath", "[", "totindex", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "clipsFolderPath", ",", "frames", "[", "index", "+", "1", "]", ")", ")", "\n", "framesIndex", "[", "totindex", "]", ".", "append", "(", "frames", "[", "index", "+", "1", "]", "[", ":", "-", "4", "]", ")", "\n", "\n", "", "else", ":", "\n", "#print(index)", "\n", "# frame -1 .... frame 2", "\n", "                ", "for", "ii", "in", "range", "(", "-", "1", ",", "3", ")", ":", "\n", "                    ", "framesFolder", "[", "totindex", "]", ".", "append", "(", "folder", ")", "\n", "framesPath", "[", "totindex", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "clipsFolderPath", ",", "frames", "[", "index", "+", "ii", "]", ")", ")", "\n", "framesIndex", "[", "totindex", "]", ".", "append", "(", "frames", "[", "index", "+", "ii", "]", "[", ":", "-", "4", "]", ")", "\n", "\n", "", "", "totindex", "+=", "1", "\n", "# print(framesPath)", "\n", "# print(folder)", "\n", "", "", "return", "framesPath", ",", "framesFolder", ",", "framesIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.AIMSequence._pil_loader": [[64, 76], ["open", "PIL.Image.open", "flipped_img.convert", "Image.open.resize", "resized_img.crop", "cropped_img.transpose"], "function", ["None"], ["", "def", "_pil_loader", "(", "path", ",", "cropArea", "=", "None", ",", "resizeDim", "=", "None", ",", "frameFlip", "=", "None", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "# frameFlip = 1", "\n", "# Resize image if specified.", "\n", "resized_img", "=", "img", ".", "resize", "(", "resizeDim", ",", "Image", ".", "ANTIALIAS", ")", "if", "(", "resizeDim", "!=", "None", ")", "else", "img", "\n", "# Crop image if crop area specified.", "\n", "cropped_img", "=", "resized_img", ".", "crop", "(", "cropArea", ")", "if", "(", "cropArea", "!=", "None", ")", "else", "resized_img", "\n", "# Flip image horizontally if specified.", "\n", "flipped_img", "=", "cropped_img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "if", "frameFlip", "else", "cropped_img", "\n", "return", "flipped_img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__init__": [[77, 97], ["REDS_val._make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val._make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "resizeSize", "=", "(", "640", ",", "360", ")", ",", "randomCropSize", "=", "(", "352", ",", "352", ")", ",", "inter_frames", "=", "3", ")", ":", "\n", "# Populate the list with image paths for all the", "\n", "# frame in `root`.", "\n", "        ", "framesPath", ",", "framesFolder", ",", "framesIndex", "=", "_make_dataset", "(", "root", ",", "inter_frames", ")", "\n", "\n", "# Raise error if no images found in root.", "\n", "if", "len", "(", "framesPath", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "root", "+", "\"\\n\"", ")", ")", "\n", "\n", "", "self", ".", "dim", "=", "resizeSize", "\n", "self", ".", "randomCropSize", "=", "randomCropSize", "\n", "self", ".", "cropX0", "=", "self", ".", "dim", "[", "0", "]", "-", "randomCropSize", "[", "0", "]", "\n", "self", ".", "cropY0", "=", "self", ".", "dim", "[", "1", "]", "-", "randomCropSize", "[", "1", "]", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "inter_frames", "=", "inter_frames", "\n", "self", ".", "framesPath", "=", "framesPath", "\n", "self", ".", "framesFolder", "=", "framesFolder", "\n", "self", ".", "framesIndex", "=", "framesIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__getitem__": [[98, 133], ["REDS_val._pil_loader", "sample.append", "indeces.append", "folders.append", "REDS_val.REDS_val.transform"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val._pil_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "[", "]", "\n", "folders", "=", "[", "]", "\n", "indeces", "=", "[", "]", "\n", "\n", "cropArea", "=", "(", "0", ",", "0", ",", "self", ".", "randomCropSize", "[", "0", "]", ",", "self", ".", "randomCropSize", "[", "1", "]", ")", "\n", "\n", "# returnIndex = IFrameIndex - 1", "\n", "frameRange", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "\n", "\n", "\n", "randomFrameFlip", "=", "0", "\n", "# print(frameRange)", "\n", "# print(index)", "\n", "# Loop over for all frames corresponding to the `index`.", "\n", "for", "frameIndex", "in", "frameRange", ":", "\n", "# Open image using pil and augment the image.", "\n", "# print(frameIndex)", "\n", "            ", "image", "=", "_pil_loader", "(", "self", ".", "framesPath", "[", "index", "]", "[", "frameIndex", "]", ",", "cropArea", "=", "cropArea", ",", "resizeDim", "=", "self", ".", "dim", ",", "frameFlip", "=", "randomFrameFlip", ")", "\n", "folder", "=", "self", ".", "framesFolder", "[", "index", "]", "[", "frameIndex", "]", "\n", "iindex", "=", "self", ".", "framesIndex", "[", "index", "]", "[", "frameIndex", "]", "\n", "\n", "# image.save(str(frameIndex) + '.jpg')", "\n", "# Apply transformation if specified.", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "sample", ".", "append", "(", "image", ")", "\n", "indeces", ".", "append", "(", "iindex", ")", "\n", "folders", ".", "append", "(", "folder", ")", "\n", "\n", "\n", "# while True:", "\n", "#     pass", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__len__": [[134, 146], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the size of dataset. Invoked as len(datasetObj).\n\n        Returns\n        -------\n            int\n                number of samples.\n        \"\"\"", "\n", "\n", "\n", "return", "len", "(", "self", ".", "framesPath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__repr__": [[147, 164], ["REDS_val.REDS_val.__len__", "REDS_val.REDS_val.transform.__repr__().replace", "REDS_val.REDS_val.transform.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__len__", "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val.REDS_val.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns printable representation of the dataset object.\n\n        Returns\n        -------\n            string\n                info.\n        \"\"\"", "\n", "\n", "\n", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val._make_dataset": [[10, 61], ["os.listdir", "os.listdir", "os.path.join", "os.path.join", "sorted", "range", "os.path.isdir", "os.path.isdir", "os.listdir", "os.listdir", "framesPath.append", "framesIndex.append", "framesFolder.append", "framesFolder[].append", "framesPath[].append", "framesIndex[].append", "range", "framesFolder[].append", "framesPath[].append", "framesIndex[].append", "os.path.join", "os.path.join", "framesFolder[].append", "framesPath[].append", "framesIndex[].append", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "_make_dataset", "(", "dir", ",", "inter_frames", "=", "3", ")", ":", "\n", "\n", "# inter_frames = 3", "\n", "    ", "framesPath", "=", "[", "]", "\n", "framesIndex", "=", "[", "]", "\n", "framesFolder", "=", "[", "]", "\n", "# Find and loop over all the clips in root `dir`.", "\n", "\n", "totindex", "=", "0", "\n", "\n", "for", "folder", "in", "os", ".", "listdir", "(", "dir", ")", ":", "\n", "\n", "        ", "clipsFolderPath", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "folder", ")", "\n", "# Skip items which are not folders.", "\n", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "clipsFolderPath", ")", ")", ":", "\n", "            ", "continue", "\n", "\n", "\n", "# Find and loop over all the frames inside the clip.", "\n", "", "frames", "=", "sorted", "(", "os", ".", "listdir", "(", "clipsFolderPath", ")", ")", "\n", "\n", "\n", "\n", "# 1 group", "\n", "group_len", "=", "1", "\n", "for", "index", "in", "range", "(", "group_len", ")", ":", "\n", "            ", "framesPath", ".", "append", "(", "[", "]", ")", "\n", "framesIndex", ".", "append", "(", "[", "]", ")", "\n", "framesFolder", ".", "append", "(", "[", "]", ")", "\n", "# Add path to list.", "\n", "\n", "# frame 0", "\n", "framesFolder", "[", "totindex", "]", ".", "append", "(", "folder", ")", "\n", "framesPath", "[", "totindex", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "clipsFolderPath", ",", "frames", "[", "0", "]", ")", ")", "\n", "framesIndex", "[", "totindex", "]", ".", "append", "(", "frames", "[", "0", "]", "[", ":", "-", "4", "]", ")", "\n", "\n", "# frame 1 .... frame 2", "\n", "for", "ii", "in", "range", "(", "1", ",", "inter_frames", "+", "3", ")", ":", "\n", "                ", "framesFolder", "[", "totindex", "]", ".", "append", "(", "folder", ")", "\n", "\n", "framesPath", "[", "totindex", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "clipsFolderPath", ",", "frames", "[", "ii", "]", ")", ")", "\n", "framesIndex", "[", "totindex", "]", ".", "append", "(", "frames", "[", "ii", "]", "[", ":", "-", "4", "]", ")", "\n", "\n", "# frame 3", "\n", "", "framesFolder", "[", "totindex", "]", ".", "append", "(", "folder", ")", "\n", "framesPath", "[", "totindex", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "clipsFolderPath", ",", "frames", "[", "6", "]", ")", ")", "\n", "framesIndex", "[", "totindex", "]", ".", "append", "(", "frames", "[", "6", "]", "[", ":", "-", "4", "]", ")", "\n", "\n", "totindex", "+=", "1", "\n", "# print(folder)", "\n", "", "", "return", "framesPath", ",", "framesFolder", ",", "framesIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.lyh-18_EQVI.datas.REDS_val._pil_loader": [[63, 74], ["open", "PIL.Image.open", "flipped_img.convert", "Image.open.resize", "resized_img.crop", "cropped_img.transpose"], "function", ["None"], ["", "def", "_pil_loader", "(", "path", ",", "cropArea", "=", "None", ",", "resizeDim", "=", "None", ",", "frameFlip", "=", "0", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "# Resize image if specified.", "\n", "resized_img", "=", "img", ".", "resize", "(", "resizeDim", ",", "Image", ".", "ANTIALIAS", ")", "if", "(", "resizeDim", "!=", "None", ")", "else", "img", "\n", "# Crop image if crop area specified.", "\n", "cropped_img", "=", "resized_img", ".", "crop", "(", "cropArea", ")", "if", "(", "cropArea", "!=", "None", ")", "else", "resized_img", "\n", "# Flip image horizontally if specified.", "\n", "flipped_img", "=", "cropped_img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "if", "frameFlip", "else", "cropped_img", "\n", "return", "flipped_img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]]}