{"home.repos.pwc.inspect_result.sidak_otfusion.None.ensemble_cifar_models.main": [[20, 53], ["utils.get_timestamp_other", "os.listdir", "len", "train.get_dataset", "range", "print", "print", "wasserstein_ensemble.geometric_ensembling_modularized", "print", "baseline.prediction_ensembling", "print", "baseline.naive_ensembling", "print", "print", "models.append", "train.get_pretrained_model", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.utils.get_timestamp_other", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.geometric_ensembling_modularized", "home.repos.pwc.inspect_result.sidak_otfusion.None.baseline.prediction_ensembling", "home.repos.pwc.inspect_result.sidak_otfusion.None.baseline.naive_ensembling", "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_pretrained_model"], ["def", "main", "(", ")", ":", "\n", "# torch.cuda.empty_cache()", "\n", "    ", "config", "=", "vgg_hyperparams", ".", "config", "\n", "timestamp", "=", "myutils", ".", "get_timestamp_other", "(", ")", "\n", "\n", "model_list", "=", "os", ".", "listdir", "(", "ensemble_dir", ")", "\n", "num_models", "=", "len", "(", "model_list", ")", "\n", "\n", "train_loader", ",", "test_loader", "=", "cifar_train", ".", "get_dataset", "(", "config", ")", "\n", "\n", "models", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "num_models", ")", ":", "\n", "        ", "print", "(", "\"Path is \"", ",", "ensemble_dir", ")", "\n", "print", "(", "\"loading model with idx {} and checkpoint_type is {}\"", ".", "format", "(", "idx", ",", "checkpoint_type", ")", ")", "\n", "models", ".", "append", "(", "\n", "cifar_train", ".", "get_pretrained_model", "(", "\n", "config", ",", "os", ".", "path", ".", "join", "(", "ensemble_dir", ",", "'model_{}/{}.checkpoint'", ".", "format", "(", "idx", ",", "checkpoint_type", ")", ")", ",", "parameters", ".", "gpu_id", "\n", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"Done loading all the models\"", ")", "\n", "\n", "# run geometric aka wasserstein ensembling", "\n", "print", "(", "\"------- Geometric Ensembling -------\"", ")", "\n", "wasserstein_ensemble", ".", "geometric_ensembling_modularized", "(", "models", ",", "train_loader", ",", "test_loader", ")", "\n", "\n", "# run baseline", "\n", "print", "(", "\"------- Prediction based ensembling -------\"", ")", "\n", "baseline", ".", "prediction_ensembling", "(", "models", ",", "train_loader", ",", "test_loader", ")", "\n", "print", "(", "\"------- Naive ensembling of weights -------\"", ")", "\n", "\n", "baseline", ".", "naive_ensembling", "(", "models", ",", "train_loader", ",", "test_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader": [[6, 8], ["torch.utils.data.DataLoader"], "function", ["None"], ["def", "to_dataloader", "(", "dataset", ",", "bsz", ")", ":", "\n", "    ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "bsz", ",", "shuffle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader_from_tens": [[9, 11], ["partition.to_dataloader", "torch.utils.data.TensorDataset"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader"], ["", "def", "to_dataloader_from_tens", "(", "inp", ",", "tgt", ",", "bsz", ")", ":", "\n", "    ", "return", "to_dataloader", "(", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "inp", ",", "tgt", ")", ",", "bsz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.partition_by_labels": [[12, 34], ["torch.cat", "torch.cat", "print", "partition.to_dataloader", "torch.zeros_like().bool", "torch.cat.append", "torch.cat.append", "torch.utils.data.TensorDataset", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader"], ["", "def", "partition_by_labels", "(", "args", ",", "dataset", ",", "label_ids", ",", "kind", "=", "'train'", ")", ":", "\n", "    ", "features", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "for", "data", ",", "label", "in", "dataset", ":", "\n", "        ", "sel", "=", "torch", ".", "zeros_like", "(", "label", ")", ".", "bool", "(", ")", "\n", "# select indices corresponding to images of the allowed class", "\n", "for", "idx", "in", "label_ids", ":", "\n", "            ", "sel", "+=", "(", "label", "==", "idx", ")", "\n", "", "features", ".", "append", "(", "data", "[", "sel", "]", ")", "\n", "labels", ".", "append", "(", "label", "[", "sel", "]", ")", "\n", "\n", "", "features", "=", "torch", ".", "cat", "(", "features", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ")", "\n", "print", "(", "\"# of instances\"", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "kind", "==", "'train'", ":", "\n", "        ", "bsz", "=", "args", ".", "batch_size_train", "\n", "", "elif", "kind", "==", "'test'", ":", "\n", "        ", "bsz", "=", "args", ".", "batch_size_test", "\n", "\n", "", "return", "to_dataloader", "(", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "features", ",", "labels", ")", ",", "bsz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.split_mnist_by_labels": [[35, 56], ["sorted", "numpy.setdiff1d", "print", "partition.partition_by_labels", "print", "partition.partition_by_labels", "sorted", "numpy.arange", "partition.partition_by_labels", "partition.partition_by_labels", "numpy.random.choice", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.partition.partition_by_labels", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.partition_by_labels", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.partition_by_labels", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.partition_by_labels"], ["", "def", "split_mnist_by_labels", "(", "args", ",", "train_loader", ",", "test_loader", ",", "choice", "=", "None", ")", ":", "\n", "    ", "if", "choice", "is", "None", ":", "\n", "        ", "choice", "=", "sorted", "(", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "0", ",", "10", ")", ",", "size", "=", "5", ",", "replace", "=", "False", ")", ")", "\n", "", "total", "=", "sorted", "(", "np", ".", "arange", "(", "0", ",", "10", ")", ")", "\n", "other", "=", "np", ".", "setdiff1d", "(", "total", ",", "choice", ")", "\n", "\n", "print", "(", "\"First train and test loaders\"", ")", "\n", "train_loader_a", "=", "partition_by_labels", "(", "args", ",", "train_loader", ",", "choice", ",", "kind", "=", "'train'", ")", "\n", "if", "test_loader", "is", "not", "None", ":", "\n", "# this allows for the possibility to only split train loaders", "\n", "        ", "test_loader_a", "=", "partition_by_labels", "(", "args", ",", "test_loader", ",", "choice", ",", "kind", "=", "'test'", ")", "\n", "\n", "", "print", "(", "\"Second train and test loaders\"", ")", "\n", "train_loader_b", "=", "partition_by_labels", "(", "args", ",", "train_loader", ",", "other", ",", "kind", "=", "'train'", ")", "\n", "if", "test_loader", "is", "not", "None", ":", "\n", "        ", "test_loader_b", "=", "partition_by_labels", "(", "args", ",", "test_loader", ",", "other", ",", "kind", "=", "'test'", ")", "\n", "\n", "", "if", "test_loader", "is", "not", "None", ":", "\n", "        ", "return", "(", "train_loader_a", ",", "test_loader_a", ")", ",", "(", "train_loader_b", ",", "test_loader_b", ")", ",", "other", "\n", "", "else", ":", "\n", "        ", "return", "train_loader_a", ",", "train_loader_b", ",", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.get_shuffled_data": [[58, 66], ["torch.randperm"], "function", ["None"], ["", "", "def", "get_shuffled_data", "(", "_inp", ",", "_tgt", ")", ":", "\n", "    ", "assert", "_inp", ".", "shape", "[", "0", "]", "==", "_tgt", ".", "shape", "[", "0", "]", "\n", "num_samples", "=", "_inp", ".", "shape", "[", "0", "]", "\n", "\n", "shuffle_idx", "=", "torch", ".", "randperm", "(", "num_samples", ")", "\n", "shuf_inp", "=", "_inp", "[", "shuffle_idx", "]", "\n", "shuf_tgt", "=", "_tgt", "[", "shuffle_idx", "]", "\n", "return", "shuf_inp", ",", "shuf_tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.get_personalized_split": [[67, 115], ["data.get_mnist_dataset", "print", "partition.get_shuffled_data", "math.ceil", "torch.cat", "torch.cat", "print", "print", "partition.get_shuffled_data", "print", "len", "len", "partition.to_dataloader_from_tens", "partition.to_dataloader_from_tens", "partition.to_dataloader_from_tens", "partition.to_dataloader_from_tens"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.data.get_mnist_dataset", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.get_shuffled_data", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.get_shuffled_data", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader_from_tens", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader_from_tens", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader_from_tens", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader_from_tens"], ["", "def", "get_personalized_split", "(", "args", ",", "personal_label", "=", "9", ",", "split_frac", "=", "0.1", ",", "is_train", "=", "True", ",", "return_dataset", "=", "False", ")", ":", "\n", "    ", "inp", ",", "tgt", "=", "data", ".", "get_mnist_dataset", "(", "root", "=", "'./files/'", ",", "\n", "is_train", "=", "is_train", ",", "to_download", "=", "args", ".", "to_download", ",", "return_tensor", "=", "True", ")", "\n", "\n", "# add the examples with target equal to given personal_label in the personal user data", "\n", "req_idx", "=", "tgt", "==", "personal_label", "\n", "personal_inp", "=", "inp", "[", "req_idx", "]", "\n", "personal_tgt", "=", "tgt", "[", "req_idx", "]", "\n", "\n", "print", "(", "\"num of personal class label of {} is {}\"", ".", "format", "(", "personal_label", ",", "len", "(", "personal_inp", ")", ")", ")", "\n", "other_idx", "=", "tgt", "!=", "personal_label", "\n", "other_inp", "=", "inp", "[", "other_idx", "]", "\n", "other_tgt", "=", "tgt", "[", "other_idx", "]", "\n", "\n", "# other one doesn't contain any labels of particular 'personal_label'", "\n", "assert", "(", "other_tgt", "!=", "personal_label", ")", ".", "all", "(", ")", "\n", "\n", "# shuffle the other labels remaining", "\n", "shuf_other_inp", ",", "shuf_other_tgt", "=", "get_shuffled_data", "(", "other_inp", ",", "other_tgt", ")", "\n", "\n", "# amongst the shuffled, give split_frac", "\n", "num_other_labels", "=", "math", ".", "ceil", "(", "split_frac", "*", "other_inp", ".", "shape", "[", "0", "]", ")", "\n", "personal_inp", "=", "torch", ".", "cat", "(", "[", "personal_inp", ",", "shuf_other_inp", "[", "0", ":", "num_other_labels", "]", "]", ")", "\n", "personal_tgt", "=", "torch", ".", "cat", "(", "[", "personal_tgt", ",", "shuf_other_tgt", "[", "0", ":", "num_other_labels", "]", "]", ")", "\n", "\n", "print", "(", "\"after adding others: num of personal examples is {}\"", ".", "format", "(", "len", "(", "personal_inp", ")", ")", ")", "\n", "\n", "print", "(", "\"shuffling personal data as well\"", ")", "\n", "personal_inp", ",", "personal_tgt", "=", "get_shuffled_data", "(", "personal_inp", ",", "personal_tgt", ")", "\n", "\n", "other_inp", "=", "shuf_other_inp", "[", "num_other_labels", ":", "]", "\n", "other_tgt", "=", "shuf_other_tgt", "[", "num_other_labels", ":", "]", "\n", "\n", "print", "(", "\"num of examples in main is {}\"", ".", "format", "(", "other_inp", ".", "shape", "[", "0", "]", ")", ")", "\n", "# check if the splits add up to the training dataset", "\n", "assert", "(", "personal_inp", ".", "shape", "[", "0", "]", "+", "other_inp", ".", "shape", "[", "0", "]", ")", "==", "inp", ".", "shape", "[", "0", "]", "\n", "\n", "if", "is_train", ":", "\n", "        ", "bsz", "=", "args", ".", "batch_size_train", "\n", "", "else", ":", "\n", "        ", "bsz", "=", "args", ".", "batch_size_test", "\n", "\n", "", "if", "return_dataset", ":", "\n", "        ", "return", "to_dataloader_from_tens", "(", "personal_inp", ",", "personal_tgt", ",", "bsz", ")", ",", "to_dataloader_from_tens", "(", "other_inp", ",", "other_tgt", ",", "bsz", ")", ",", "(", "personal_inp", ",", "personal_tgt", ")", ",", "(", "other_inp", ",", "other_tgt", ")", "\n", "", "else", ":", "\n", "        ", "return", "to_dataloader_from_tens", "(", "personal_inp", ",", "personal_tgt", ",", "bsz", ")", ",", "to_dataloader_from_tens", "(", "other_inp", ",", "other_tgt", ",", "bsz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.get_small_big_split": [[116, 149], ["data.get_mnist_dataset", "print", "partition.get_shuffled_data", "math.ceil", "print", "print", "print", "print", "partition.to_dataloader_from_tens", "partition.to_dataloader_from_tens", "partition.to_dataloader_from_tens", "partition.to_dataloader_from_tens"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.data.get_mnist_dataset", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.get_shuffled_data", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader_from_tens", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader_from_tens", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader_from_tens", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader_from_tens"], ["", "", "def", "get_small_big_split", "(", "args", ",", "split_frac", "=", "0.1", ",", "is_train", "=", "True", ",", "return_dataset", "=", "False", ")", ":", "\n", "    ", "inp", ",", "tgt", "=", "data", ".", "get_mnist_dataset", "(", "root", "=", "'./files/'", ",", "\n", "is_train", "=", "is_train", ",", "to_download", "=", "args", ".", "to_download", ",", "return_tensor", "=", "True", ")", "\n", "\n", "# shuffle the input", "\n", "print", "(", "\"shuffling data once before splitting\"", ")", "\n", "shuf_inp", ",", "shuf_tgt", "=", "get_shuffled_data", "(", "inp", ",", "tgt", ")", "\n", "\n", "# amongst the shuffled, give split_frac", "\n", "num_labels", "=", "math", ".", "ceil", "(", "split_frac", "*", "inp", ".", "shape", "[", "0", "]", ")", "\n", "\n", "print", "(", "\"splitting data\"", ")", "\n", "inp_a", "=", "shuf_inp", "[", "0", ":", "num_labels", "]", "\n", "tgt_a", "=", "shuf_tgt", "[", "0", ":", "num_labels", "]", "\n", "print", "(", "\"first model has {} examples\"", ".", "format", "(", "inp_a", ".", "shape", "[", "0", "]", ")", ")", "\n", "inp_b", "=", "shuf_inp", "[", "num_labels", ":", "]", "\n", "tgt_b", "=", "shuf_tgt", "[", "num_labels", ":", "]", "\n", "print", "(", "\"second model has {} examples\"", ".", "format", "(", "inp_b", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "\"and overall dataset had {} examples\"", ".", "format", "(", "inp", ".", "shape", "[", "0", "]", ")", ")", "\n", "# check if the splits add up to the training dataset", "\n", "assert", "(", "inp_a", ".", "shape", "[", "0", "]", "+", "inp_b", ".", "shape", "[", "0", "]", ")", "==", "inp", ".", "shape", "[", "0", "]", "\n", "\n", "if", "is_train", ":", "\n", "        ", "bsz", "=", "args", ".", "batch_size_train", "\n", "", "else", ":", "\n", "        ", "bsz", "=", "args", ".", "batch_size_test", "\n", "\n", "", "if", "return_dataset", ":", "\n", "        ", "return", "to_dataloader_from_tens", "(", "inp_a", ",", "tgt_a", ",", "bsz", ")", ",", "to_dataloader_from_tens", "(", "inp_b", ",", "tgt_b", ",", "bsz", ")", ",", "(", "inp_a", ",", "tgt_a", ")", ",", "(", "inp_b", ",", "tgt_b", ")", "\n", "", "else", ":", "\n", "        ", "return", "to_dataloader_from_tens", "(", "inp_a", ",", "tgt_a", ",", "bsz", ")", ",", "to_dataloader_from_tens", "(", "inp_b", ",", "tgt_b", ",", "bsz", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sidak_otfusion.None.distillation_big_only.recheck_accuracy": [[18, 27], ["print", "recheck_accuracies.append", "routines.test"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test"], ["def", "recheck_accuracy", "(", "args", ",", "models", ",", "test_loader", ")", ":", "\n", "# Additional flag of recheck_acc to supplement the legacy flag recheck_cifar", "\n", "    ", "if", "args", ".", "recheck_cifar", "or", "args", ".", "recheck_acc", ":", "\n", "        ", "recheck_accuracies", "=", "[", "]", "\n", "for", "model", "in", "models", ":", "\n", "            ", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "recheck_accuracies", ".", "append", "(", "routines", ".", "test", "(", "args", ",", "model", ",", "test_loader", ",", "log_dict", ")", ")", "\n", "", "print", "(", "\"Rechecked accuracies are \"", ",", "recheck_accuracies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.distillation_big_only.get_dataloaders": [[29, 45], ["data.get_dataloader", "data.get_dataloader", "print", "cifar_train.get_dataset", "cifar_train.get_dataset", "args.dataset.lower", "args.dataset.lower"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.data.get_dataloader", "home.repos.pwc.inspect_result.sidak_otfusion.None.data.get_dataloader"], ["", "", "def", "get_dataloaders", "(", "args", ",", "config", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "train_loader", ",", "test_loader", "=", "get_dataloader", "(", "args", ")", "\n", "retrain_loader", ",", "_", "=", "get_dataloader", "(", "args", ",", "no_randomness", "=", "args", ".", "no_random_trainloaders", ")", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "[", "0", ":", "7", "]", "==", "'cifar10'", ":", "\n", "        ", "assert", "config", "is", "not", "None", "\n", "args", ".", "cifar_init_lr", "=", "config", "[", "'optimizer_learning_rate'", "]", "\n", "if", "args", ".", "second_model_name", "is", "not", "None", ":", "\n", "            ", "assert", "second_config", "is", "not", "None", "\n", "assert", "args", ".", "cifar_init_lr", "==", "second_config", "[", "'optimizer_learning_rate'", "]", "\n", "# also the below things should be fine as it is just dataloader loading!", "\n", "", "print", "(", "'loading {} dataloaders'", ".", "format", "(", "args", ".", "dataset", ".", "lower", "(", ")", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "cifar_train", ".", "get_dataset", "(", "config", ")", "\n", "retrain_loader", ",", "_", "=", "cifar_train", ".", "get_dataset", "(", "config", ",", "no_randomness", "=", "args", ".", "no_random_trainloaders", ")", "\n", "\n", "", "return", "train_loader", ",", "test_loader", ",", "retrain_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.distillation_big_only.load_pretrained_models": [[47, 86], ["print", "args.load_models.split", "range", "print", "len", "print", "models.append", "accuracies.append", "len", "cifar_train.get_pretrained_model", "routines.get_pretrained_model", "args.dataset.lower", "os.path.join", "os.path.join", "args.dataset.lower", "args.model_name.lower", "args.model_name.lower"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_pretrained_model", "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_pretrained_model"], ["", "def", "load_pretrained_models", "(", "args", ",", "config", ",", "second_config", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"------- Loading pre-trained models -------\"", ")", "\n", "ensemble_experiment", "=", "args", ".", "load_models", ".", "split", "(", "'/'", ")", "\n", "if", "len", "(", "ensemble_experiment", ")", ">", "1", ":", "\n", "# both the path and name of the experiment have been specified", "\n", "        ", "ensemble_dir", "=", "args", ".", "load_models", "\n", "", "elif", "len", "(", "ensemble_experiment", ")", "==", "1", ":", "\n", "# otherwise append the directory before!", "\n", "        ", "ensemble_root_dir", "=", "\"{}/{}_models/\"", ".", "format", "(", "args", ".", "baseroot", ",", "(", "args", ".", "dataset", ")", ".", "lower", "(", ")", ")", "\n", "ensemble_dir", "=", "ensemble_root_dir", "+", "args", ".", "load_models", "\n", "\n", "", "models", "=", "[", "]", "\n", "accuracies", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "args", ".", "num_models", ")", ":", "\n", "        ", "print", "(", "\"loading model with idx {} and checkpoint_type is {}\"", ".", "format", "(", "idx", ",", "args", ".", "ckpt_type", ")", ")", "\n", "\n", "if", "args", ".", "dataset", ".", "lower", "(", ")", "[", "0", ":", "7", "]", "==", "'cifar10'", "and", "(", "\n", "args", ".", "model_name", ".", "lower", "(", ")", "[", "0", ":", "5", "]", "==", "'vgg11'", "or", "args", ".", "model_name", ".", "lower", "(", ")", "[", "0", ":", "6", "]", "==", "'resnet'", ")", ":", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "                ", "config_used", "=", "config", "\n", "", "elif", "idx", "==", "1", ":", "\n", "                ", "config_used", "=", "second_config", "\n", "\n", "", "model", ",", "accuracy", "=", "cifar_train", ".", "get_pretrained_model", "(", "\n", "config_used", ",", "os", ".", "path", ".", "join", "(", "ensemble_dir", ",", "'model_{}/{}.checkpoint'", ".", "format", "(", "idx", ",", "args", ".", "ckpt_type", ")", ")", ",", "\n", "args", ".", "gpu_id", ",", "relu_inplace", "=", "not", "args", ".", "prelu_acts", "# if you want pre-relu acts, set relu_inplace to False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model", ",", "accuracy", "=", "routines", ".", "get_pretrained_model", "(", "\n", "args", ",", "os", ".", "path", ".", "join", "(", "ensemble_dir", ",", "'model_{}/{}.checkpoint'", ".", "format", "(", "idx", ",", "args", ".", "ckpt_type", ")", ")", ",", "idx", "=", "idx", "\n", ")", "\n", "\n", "", "models", ".", "append", "(", "model", ")", "\n", "\n", "accuracies", ".", "append", "(", "accuracy", ")", "\n", "", "print", "(", "\"Done loading all the models\"", ")", "\n", "\n", "return", "models", ",", "accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.distillation_big_only.test_model": [[87, 91], ["routines.test"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test"], ["", "def", "test_model", "(", "args", ",", "model", ",", "test_loader", ")", ":", "\n", "    ", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "return", "routines", ".", "test", "(", "args", ",", "model", ",", "test_loader", ",", "log_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.distillation_big_only.loss_fn_kd": [[92, 107], ["torch.cross_entropy", "torch.KLDivLoss", "torch.log_softmax", "torch.softmax"], "function", ["None"], ["", "def", "loss_fn_kd", "(", "outputs", ",", "labels", ",", "teacher_outputs", ",", "params", ")", ":", "\n", "# Source: https://github.com/peterliht/knowledge-distillation-pytorch/blob/master/model/net.py", "\n", "    ", "\"\"\"\n    Compute the knowledge-distillation (KD) loss given outputs, labels.\n    \"Hyperparameters\": temperature and alpha\n    NOTE: the KL Divergence for PyTorch comparing the softmaxs of teacher\n    and student expects the input tensor to be log probabilities! See Issue #2\n    \"\"\"", "\n", "alpha", "=", "params", ".", "alpha", "\n", "T", "=", "params", ".", "temperature", "\n", "KD_loss", "=", "nn", ".", "KLDivLoss", "(", ")", "(", "F", ".", "log_softmax", "(", "outputs", "/", "T", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "teacher_outputs", "/", "T", ",", "dim", "=", "1", ")", ")", "*", "(", "alpha", "*", "T", "*", "T", ")", "+", "F", ".", "cross_entropy", "(", "outputs", ",", "labels", ")", "*", "(", "1.", "-", "alpha", ")", "\n", "\n", "return", "KD_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.distillation_big_only.distillation": [[109, 160], ["torch.SGD", "accuracies.append", "range", "teacher.eval", "student.parameters", "routines.test", "student.train", "enumerate", "accuracies.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "teacher_outputs.mean.mean", "optim.SGD.zero_grad", "student", "distillation_big_only.loss_fn_kd", "loss_fn_kd.backward", "optim.SGD.step", "routines.test", "teacher_outputs.mean.append", "print", "log_dict[].append", "log_dict[].append", "data_batch.to", "labels_batch.to", "teacher", "loss_fn_kd.item", "len", "loss_fn_kd.item", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train", "home.repos.pwc.inspect_result.sidak_otfusion.None.distillation_big_only.loss_fn_kd", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test"], ["", "def", "distillation", "(", "args", ",", "teachers", ",", "student", ",", "train_loader", ",", "test_loader", ",", "device", ")", ":", "\n", "# Inspiration: https://github.com/peterliht/knowledge-distillation-pytorch/blob/master/evaluate.py", "\n", "\n", "    ", "for", "teacher", "in", "teachers", ":", "\n", "        ", "teacher", ".", "eval", "(", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "student", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ")", "\n", "\n", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'train_losses'", "]", "=", "[", "]", "\n", "log_dict", "[", "'train_counter'", "]", "=", "[", "]", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "\n", "accuracies", "=", "[", "]", "\n", "accuracies", ".", "append", "(", "routines", ".", "test", "(", "args", ",", "student", ",", "test_loader", ",", "log_dict", ")", ")", "\n", "for", "epoch_idx", "in", "range", "(", "0", ",", "args", ".", "dist_epochs", ")", ":", "\n", "        ", "student", ".", "train", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "data_batch", ",", "labels_batch", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# move to GPU if available", "\n", "            ", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "                ", "data_batch", ",", "labels_batch", "=", "data_batch", ".", "to", "(", "device", ")", ",", "labels_batch", ".", "to", "(", "device", ")", "\n", "\n", "# compute mean teacher output", "\n", "", "teacher_outputs", "=", "[", "]", "\n", "for", "teacher", "in", "teachers", ":", "\n", "                ", "teacher_outputs", ".", "append", "(", "teacher", "(", "data_batch", ",", "disable_logits", "=", "True", ")", ")", "\n", "", "teacher_outputs", "=", "torch", ".", "stack", "(", "teacher_outputs", ")", "\n", "teacher_outputs", "=", "teacher_outputs", ".", "mean", "(", "dim", "=", "0", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# get student output", "\n", "student_output", "=", "student", "(", "data_batch", ",", "disable_logits", "=", "True", ")", "\n", "\n", "# knowledge distillation loss", "\n", "loss", "=", "loss_fn_kd", "(", "student_output", ",", "labels_batch", ",", "teacher_outputs", ",", "args", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# update student", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "                ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch_idx", ",", "batch_idx", "*", "len", "(", "data_batch", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "log_dict", "[", "'train_losses'", "]", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "log_dict", "[", "'train_counter'", "]", ".", "append", "(", "(", "batch_idx", "*", "64", ")", "+", "(", "(", "epoch_idx", "-", "1", ")", "*", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "", "", "accuracies", ".", "append", "(", "routines", ".", "test", "(", "args", ",", "student", ",", "test_loader", ",", "log_dict", ")", ")", "\n", "\n", "", "return", "student", ",", "accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_trained_model": [[13, 33], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "model.get_model_from_name", "torch.SGD", "routines.test", "range", "network.cuda.parameters", "network.cuda.cuda", "train", "routines.test", "str"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.get_model_from_name", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test"], ["def", "get_trained_model", "(", "args", ",", "id", ",", "random_seed", ",", "train_loader", ",", "test_loader", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "network", "=", "get_model_from_name", "(", "args", ",", "idx", "=", "id", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "network", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ")", "\n", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "network", "=", "network", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'train_losses'", "]", "=", "[", "]", "\n", "log_dict", "[", "'train_counter'", "]", "=", "[", "]", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "# log_dict['test_counter'] = [i * len(test_loader.dataset) for i in range(args.n_epochs + 1)]", "\n", "# print(list(network.parameters()))", "\n", "acc", "=", "test", "(", "args", ",", "network", ",", "test_loader", ",", "log_dict", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "        ", "train", "(", "args", ",", "network", ",", "optimizer", ",", "train_loader", ",", "log_dict", ",", "epoch", ",", "model_id", "=", "str", "(", "id", ")", ")", "\n", "acc", "=", "test", "(", "args", ",", "network", ",", "test_loader", ",", "log_dict", ")", "\n", "", "return", "network", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.check_freezed_params": [[34, 43], ["enumerate", "model.parameters", "len"], "function", ["None"], ["", "def", "check_freezed_params", "(", "model", ",", "frozen", ")", ":", "\n", "    ", "flag", "=", "True", "\n", "for", "idx", ",", "param", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "idx", ">=", "len", "(", "frozen", ")", ":", "\n", "            ", "return", "flag", "\n", "\n", "", "flag", "=", "flag", "and", "(", "param", ".", "data", "==", "frozen", "[", "idx", "]", ".", "data", ")", ".", "all", "(", ")", "\n", "\n", "", "return", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_intmd_retrain_model": [[44, 73], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "len", "enumerate", "print", "torch.SGD", "routines.test", "range", "print", "routines.check_freezed_params", "network.parameters", "network.parameters", "train", "routines.test", "len", "list", "str", "network.parameters"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test", "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.check_freezed_params", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test"], ["", "def", "get_intmd_retrain_model", "(", "args", ",", "random_seed", ",", "network", ",", "aligned_wts", ",", "train_loader", ",", "test_loader", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "\n", "num_params_aligned", "=", "len", "(", "aligned_wts", ")", "\n", "for", "idx", ",", "param", "in", "enumerate", "(", "network", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "idx", "<", "num_params_aligned", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "print", "(", "\"number of layers that are intmd retrained \"", ",", "len", "(", "list", "(", "network", ".", "parameters", "(", ")", ")", ")", "-", "num_params_aligned", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "network", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", "*", "args", ".", "intmd_retrain_lrdec", ",", "\n", "momentum", "=", "args", ".", "momentum", ")", "\n", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'train_losses'", "]", "=", "[", "]", "\n", "log_dict", "[", "'train_counter'", "]", "=", "[", "]", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "# log_dict['test_counter'] = [i * len(test_loader.dataset) for i in range(args.n_epochs + 1)]", "\n", "# print(list(network.parameters()))", "\n", "acc", "=", "test", "(", "args", ",", "network", ",", "test_loader", ",", "log_dict", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "intmd_retrain_epochs", "+", "1", ")", ":", "\n", "        ", "train", "(", "args", ",", "network", ",", "optimizer", ",", "train_loader", ",", "log_dict", ",", "epoch", ",", "model_id", "=", "str", "(", "id", ")", ")", "\n", "acc", "=", "test", "(", "args", ",", "network", ",", "test_loader", ",", "log_dict", ")", "\n", "\n", "", "print", "(", "\"Finally accuracy of model {} after intermediate retraining for {} epochs with lr decay {} is {}\"", ".", "format", "(", "\n", "random_seed", ",", "args", ".", "intmd_retrain_epochs", ",", "args", ".", "intmd_retrain_lrdec", ",", "acc", "\n", ")", ")", "\n", "\n", "assert", "check_freezed_params", "(", "network", ",", "aligned_wts", ")", "\n", "return", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_trained_data_separated_model": [[74, 98], ["torch.SGD", "routines.test", "routines.test", "range", "copy.deepcopy", "model.get_model_from_name", "network.cuda.parameters", "network.cuda.cuda", "train", "routines.test", "routines.test", "str"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test", "home.repos.pwc.inspect_result.sidak_otfusion.None.model.get_model_from_name", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test"], ["", "def", "get_trained_data_separated_model", "(", "args", ",", "id", ",", "local_train_loader", ",", "local_test_loader", ",", "test_loader", ",", "base_net", "=", "None", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "if", "base_net", "is", "not", "None", ":", "\n", "        ", "network", "=", "copy", ".", "deepcopy", "(", "base_net", ")", "\n", "", "else", ":", "\n", "        ", "network", "=", "get_model_from_name", "(", "args", ",", "idx", "=", "id", ")", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "network", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ")", "\n", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "network", "=", "network", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'train_losses'", "]", "=", "[", "]", "\n", "log_dict", "[", "'train_counter'", "]", "=", "[", "]", "\n", "log_dict", "[", "'local_test_losses'", "]", "=", "[", "]", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "# log_dict['test_counter'] = [i * len(test_loader.dataset) for i in range(args.n_epochs + 1)]", "\n", "# print(list(network.parameters()))", "\n", "acc", "=", "test", "(", "args", ",", "network", ",", "test_loader", ",", "log_dict", ")", "\n", "local_acc", "=", "test", "(", "args", ",", "network", ",", "local_test_loader", ",", "log_dict", ",", "is_local", "=", "True", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "        ", "train", "(", "args", ",", "network", ",", "optimizer", ",", "local_train_loader", ",", "log_dict", ",", "epoch", ",", "model_id", "=", "str", "(", "id", ")", ")", "\n", "acc", "=", "test", "(", "args", ",", "network", ",", "test_loader", ",", "log_dict", ")", "\n", "local_acc", "=", "test", "(", "args", ",", "network", ",", "local_test_loader", ",", "log_dict", ",", "is_local", "=", "True", ")", "\n", "", "return", "network", ",", "acc", ",", "local_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_retrained_model": [[99, 138], ["torch.SGD", "routines.test", "print", "range", "print", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "old_network.parameters", "tensorboard_obj.add_scalars", "train", "routines.test", "print", "max", "tensorboard_obj.add_scalars", "tensorboard_obj.add_scalars"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test"], ["", "def", "get_retrained_model", "(", "args", ",", "train_loader", ",", "test_loader", ",", "old_network", ",", "tensorboard_obj", "=", "None", ",", "nick", "=", "''", ",", "start_acc", "=", "-", "1", ",", "retrain_seed", "=", "-", "1", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "if", "args", ".", "retrain_lr_decay", ">", "0", ":", "\n", "        ", "args", ".", "retrain_lr", "=", "args", ".", "learning_rate", "/", "args", ".", "retrain_lr_decay", "\n", "print", "(", "'optimizer_learning_rate is '", ",", "args", ".", "retrain_lr", ")", "\n", "", "if", "retrain_seed", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "retrain_seed", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "old_network", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "retrain_lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ")", "\n", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'train_losses'", "]", "=", "[", "]", "\n", "log_dict", "[", "'train_counter'", "]", "=", "[", "]", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "# log_dict['test_counter'] = [i * len(train_loader.dataset) for i in range(args.n_epochs + 1)]", "\n", "\n", "acc", "=", "test", "(", "args", ",", "old_network", ",", "test_loader", ",", "log_dict", ")", "\n", "print", "(", "\"check accuracy once again before retraining starts: \"", ",", "acc", ")", "\n", "\n", "if", "tensorboard_obj", "is", "not", "None", "and", "start_acc", "!=", "-", "1", ":", "\n", "        ", "tensorboard_obj", ".", "add_scalars", "(", "'test_accuracy_percent/'", ",", "{", "nick", ":", "start_acc", "}", ",", "\n", "global_step", "=", "0", ")", "\n", "assert", "start_acc", "==", "acc", "\n", "\n", "\n", "", "best_acc", "=", "-", "1", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "retrain", "+", "1", ")", ":", "\n", "        ", "train", "(", "args", ",", "old_network", ",", "optimizer", ",", "train_loader", ",", "log_dict", ",", "epoch", ")", "\n", "acc", ",", "loss", "=", "test", "(", "args", ",", "old_network", ",", "test_loader", ",", "log_dict", ",", "return_loss", "=", "True", ")", "\n", "\n", "if", "tensorboard_obj", "is", "not", "None", ":", "\n", "            ", "assert", "nick", "!=", "''", "\n", "tensorboard_obj", ".", "add_scalars", "(", "'test_loss/'", ",", "{", "nick", ":", "loss", "}", ",", "global_step", "=", "epoch", ")", "\n", "tensorboard_obj", ".", "add_scalars", "(", "'test_accuracy_percent/'", ",", "{", "nick", ":", "acc", "}", ",", "global_step", "=", "epoch", ")", "\n", "\n", "", "print", "(", "\"At retrain epoch the accuracy is : \"", ",", "acc", ")", "\n", "best_acc", "=", "max", "(", "best_acc", ",", "acc", ")", "\n", "\n", "", "return", "old_network", ",", "best_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_pretrained_model": [[139, 182], ["model.get_model_from_name", "model.cuda.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "print", "model.cuda.cuda", "torch.serialization.default_restore_location", "torch.serialization.default_restore_location", "torch.serialization.default_restore_location", "torch.serialization.default_restore_location", "torch.serialization.default_restore_location", "torch.serialization.default_restore_location", "str"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.get_model_from_name"], ["", "def", "get_pretrained_model", "(", "args", ",", "path", ",", "data_separated", "=", "False", ",", "idx", "=", "-", "1", ")", ":", "\n", "    ", "model", "=", "get_model_from_name", "(", "args", ",", "idx", "=", "idx", ")", "\n", "\n", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "\n", "path", ",", "\n", "map_location", "=", "(", "\n", "lambda", "s", ",", "_", ":", "torch", ".", "serialization", ".", "default_restore_location", "(", "s", ",", "'cuda:'", "+", "str", "(", "args", ".", "gpu_id", ")", ")", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "\n", "path", ",", "\n", "map_location", "=", "(", "\n", "lambda", "s", ",", "_", ":", "torch", ".", "serialization", ".", "default_restore_location", "(", "s", ",", "'cpu'", ")", "\n", ")", ",", "\n", ")", "\n", "\n", "\n", "", "model_state_dict", "=", "state", "[", "'model_state_dict'", "]", "\n", "\n", "if", "'test_accuracy'", "not", "in", "state", ":", "\n", "        ", "state", "[", "'test_accuracy'", "]", "=", "-", "1", "\n", "\n", "", "if", "'epoch'", "not", "in", "state", ":", "\n", "        ", "state", "[", "'epoch'", "]", "=", "-", "1", "\n", "\n", "", "if", "not", "data_separated", ":", "\n", "        ", "print", "(", "\"Loading model at path {} which had accuracy {} and at epoch {}\"", ".", "format", "(", "path", ",", "state", "[", "'test_accuracy'", "]", ",", "\n", "state", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Loading model at path {} which had local accuracy {} and overall accuracy {} for choice {} at epoch {}\"", ".", "format", "(", "path", ",", "\n", "state", "[", "'local_test_accuracy'", "]", ",", "state", "[", "'test_accuracy'", "]", ",", "state", "[", "'choice'", "]", ",", "state", "[", "'epoch'", "]", ")", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "\n", "", "if", "not", "data_separated", ":", "\n", "        ", "return", "model", ",", "state", "[", "'test_accuracy'", "]", "\n", "", "else", ":", "\n", "        ", "return", "model", ",", "state", "[", "'test_accuracy'", "]", ",", "state", "[", "'local_test_accuracy'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.train": [[183, 209], ["network.train", "enumerate", "optimizer.zero_grad", "network", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "data.cuda.cuda", "target.cuda.cuda", "print", "log_dict[].append", "log_dict[].append", "os.makedirs", "F.nll_loss.item", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "len", "F.nll_loss.item", "network.state_dict", "optimizer.state_dict", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train"], ["", "", "def", "train", "(", "args", ",", "network", ",", "optimizer", ",", "train_loader", ",", "log_dict", ",", "epoch", ",", "model_id", "=", "-", "1", ")", ":", "\n", "    ", "network", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "            ", "data", "=", "data", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "network", "(", "data", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "log_dict", "[", "'train_losses'", "]", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "log_dict", "[", "'train_counter'", "]", ".", "append", "(", "\n", "(", "batch_idx", "*", "64", ")", "+", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "assert", "args", ".", "exp_name", "==", "\"exp_\"", "+", "args", ".", "timestamp", "\n", "\n", "os", ".", "makedirs", "(", "'{}/{}'", ".", "format", "(", "args", ".", "result_dir", ",", "args", ".", "exp_name", ")", ",", "exist_ok", "=", "True", ")", "\n", "if", "args", ".", "dump_model", ":", "\n", "                ", "assert", "model_id", "!=", "-", "1", "\n", "torch", ".", "save", "(", "network", ".", "state_dict", "(", ")", ",", "'{}/{}/model_{}_{}.pth'", ".", "format", "(", "args", ".", "result_dir", ",", "args", ".", "exp_name", ",", "args", ".", "model_name", ",", "model_id", ")", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "'{}/{}/optimizer_{}_{}.pth'", ".", "format", "(", "args", ".", "result_dir", ",", "args", ".", "exp_name", ",", "args", ".", "model_name", ",", "model_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.test": [[211, 264], ["network.eval", "print", "len", "log_dict[].append", "print", "print", "print", "args.dataset.lower", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "network", "pred.eq().sum", "len", "len", "data.cuda.cuda", "target.cuda.cuda", "print", "args.dataset.lower", "torch.nn.CrossEntropyLoss.item", "network.data.max", "len", "float", "args.dataset.lower", "torch.nll_loss().item", "pred.eq", "len", "torch.nn.CrossEntropyLoss.", "target.cuda.data.view_as", "torch.nll_loss"], "function", ["None"], ["", "", "", "", "def", "test", "(", "args", ",", "network", ",", "test_loader", ",", "log_dict", ",", "debug", "=", "False", ",", "return_loss", "=", "False", ",", "is_local", "=", "False", ")", ":", "\n", "    ", "network", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "if", "is_local", ":", "\n", "        ", "print", "(", "\"\\n--------- Testing in local mode ---------\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"\\n--------- Testing in global mode ---------\"", ")", "\n", "\n", "", "if", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "        ", "cifar_criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "#   with torch.no_grad():", "\n", "", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "# print(data.shape, target.shape)", "\n", "# if len(target.shape)==1:", "\n", "#     data = data.unsqueeze(0)", "\n", "#     target = target.unsqueeze(0)", "\n", "# print(data, target)", "\n", "        ", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "            ", "data", "=", "data", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "\n", "", "output", "=", "network", "(", "data", ")", "\n", "if", "debug", ":", "\n", "            ", "print", "(", "\"output is \"", ",", "output", ")", "\n", "\n", "", "if", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "# mnist models return log_softmax outputs, while cifar ones return raw values!", "\n", "            ", "test_loss", "+=", "cifar_criterion", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'mnist'", ":", "\n", "            ", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "\n", "", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", "\n", "\n", "", "print", "(", "\"size of test_loader dataset: \"", ",", "len", "(", "test_loader", ".", "dataset", ")", ")", "\n", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "if", "is_local", ":", "\n", "        ", "string_info", "=", "'local_test'", "\n", "", "else", ":", "\n", "        ", "string_info", "=", "'test'", "\n", "", "log_dict", "[", "'{}_losses'", ".", "format", "(", "string_info", ")", "]", ".", "append", "(", "test_loss", ")", "\n", "print", "(", "'\\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "ans", "=", "(", "float", "(", "correct", ")", "*", "100.0", ")", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "if", "not", "return_loss", ":", "\n", "        ", "return", "ans", "\n", "", "else", ":", "\n", "        ", "return", "ans", ",", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.train_data_separated_models": [[265, 287], ["model.get_model_from_name", "base_nets.append", "range", "base_nets.append", "base_nets.append", "print", "routines.get_trained_data_separated_model", "networks.append", "accuracies.append", "local_accuracies.append", "model.get_model_from_name", "routines.save_final_data_separated_model", "str"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.get_model_from_name", "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_trained_data_separated_model", "home.repos.pwc.inspect_result.sidak_otfusion.None.model.get_model_from_name", "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.save_final_data_separated_model"], ["", "", "def", "train_data_separated_models", "(", "args", ",", "local_train_loaders", ",", "local_test_loaders", ",", "test_loader", ",", "choices", ")", ":", "\n", "    ", "networks", "=", "[", "]", "\n", "local_accuracies", "=", "[", "]", "\n", "accuracies", "=", "[", "]", "\n", "base_nets", "=", "[", "]", "\n", "base_net", "=", "get_model_from_name", "(", "args", ",", "idx", "=", "0", ")", "\n", "base_nets", ".", "append", "(", "base_net", ")", "\n", "if", "args", ".", "diff_init", "or", "args", ".", "width_ratio", "!=", "1", ":", "\n", "        ", "base_nets", ".", "append", "(", "get_model_from_name", "(", "args", ",", "idx", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "base_nets", ".", "append", "(", "base_net", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "num_models", ")", ":", "\n", "        ", "print", "(", "\"\\nTraining model {} on its separate data \\n \"", ".", "format", "(", "str", "(", "i", ")", ")", ")", "\n", "network", ",", "acc", ",", "local_acc", "=", "get_trained_data_separated_model", "(", "args", ",", "i", ",", "\n", "local_train_loaders", "[", "i", "]", ",", "local_test_loaders", "[", "i", "]", ",", "test_loader", ",", "base_nets", "[", "i", "]", ")", "\n", "networks", ".", "append", "(", "network", ")", "\n", "accuracies", ".", "append", "(", "acc", ")", "\n", "local_accuracies", ".", "append", "(", "local_acc", ")", "\n", "if", "args", ".", "dump_final_models", ":", "\n", "            ", "save_final_data_separated_model", "(", "args", ",", "i", ",", "network", ",", "local_acc", ",", "acc", ",", "choices", "[", "i", "]", ")", "\n", "", "", "return", "networks", ",", "accuracies", ",", "local_accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.train_models": [[289, 299], ["range", "routines.get_trained_model", "networks.append", "accuracies.append", "routines.save_final_model"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_trained_model", "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.save_final_model"], ["", "def", "train_models", "(", "args", ",", "train_loader", ",", "test_loader", ")", ":", "\n", "    ", "networks", "=", "[", "]", "\n", "accuracies", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_models", ")", ":", "\n", "        ", "network", ",", "acc", "=", "get_trained_model", "(", "args", ",", "i", ",", "i", ",", "train_loader", ",", "test_loader", ")", "\n", "networks", ".", "append", "(", "network", ")", "\n", "accuracies", ".", "append", "(", "acc", ")", "\n", "if", "args", ".", "dump_final_models", ":", "\n", "            ", "save_final_model", "(", "args", ",", "i", ",", "network", ",", "acc", ")", "\n", "", "", "return", "networks", ",", "accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.save_final_data_separated_model": [[300, 314], ["os.path.join", "os.makedirs", "time.sleep", "torch.save", "torch.save", "torch.save", "os.path.join", "vars", "str", "model.state_dict"], "function", ["None"], ["", "def", "save_final_data_separated_model", "(", "args", ",", "idx", ",", "model", ",", "local_test_accuracy", ",", "test_accuracy", ",", "choice", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "args", ".", "exp_name", ",", "'model_{}'", ".", "format", "(", "idx", ")", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "import", "time", "\n", "args", ".", "ckpt_type", "=", "'final'", "\n", "time", ".", "sleep", "(", "1", ")", "# workaround for RuntimeError('Unknown Error -1') https://github.com/pytorch/pytorch/issues/10577", "\n", "torch", ".", "save", "(", "{", "\n", "'args'", ":", "vars", "(", "args", ")", ",", "\n", "'epoch'", ":", "args", ".", "n_epochs", ",", "\n", "'local_test_accuracy'", ":", "local_test_accuracy", ",", "\n", "'test_accuracy'", ":", "test_accuracy", ",", "\n", "'choice'", ":", "str", "(", "choice", ")", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'{}.checkpoint'", ".", "format", "(", "args", ".", "ckpt_type", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.save_final_model": [[317, 329], ["os.path.join", "os.makedirs", "time.sleep", "torch.save", "torch.save", "torch.save", "os.path.join", "vars", "model.state_dict"], "function", ["None"], ["", "def", "save_final_model", "(", "args", ",", "idx", ",", "model", ",", "test_accuracy", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "args", ".", "exp_name", ",", "'model_{}'", ".", "format", "(", "idx", ")", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "import", "time", "\n", "args", ".", "ckpt_type", "=", "'final'", "\n", "time", ".", "sleep", "(", "1", ")", "# workaround for RuntimeError('Unknown Error -1') https://github.com/pytorch/pytorch/issues/10577", "\n", "torch", ".", "save", "(", "{", "\n", "'args'", ":", "vars", "(", "args", ")", ",", "\n", "'epoch'", ":", "args", ".", "n_epochs", ",", "\n", "'test_accuracy'", ":", "test_accuracy", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'{}.checkpoint'", ".", "format", "(", "args", ".", "ckpt_type", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.retrain_models": [[331, 380], ["range", "len", "print", "retrained_networks.append", "accuracies.append", "os.path.join", "os.makedirs", "train.get_retrained_model", "args.dataset.lower", "print", "train.get_dataset", "args.dataset.lower", "args.dataset.lower", "routines.get_retrained_model", "print", "data.get_dataloader"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_retrained_model", "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_retrained_model", "home.repos.pwc.inspect_result.sidak_otfusion.None.data.get_dataloader"], ["", "def", "retrain_models", "(", "args", ",", "old_networks", ",", "train_loader", ",", "test_loader", ",", "config", ",", "tensorboard_obj", "=", "None", ",", "initial_acc", "=", "None", ",", "nicks", "=", "None", ")", ":", "\n", "    ", "accuracies", "=", "[", "]", "\n", "retrained_networks", "=", "[", "]", "\n", "# nicks = []", "\n", "\n", "# assert len(old_networks) >= 4", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "old_networks", ")", ")", ":", "\n", "        ", "nick", "=", "nicks", "[", "i", "]", "\n", "# if i == len(old_networks) - 1:", "\n", "#     nick = 'naive_averaging'", "\n", "# elif i == len(old_networks) - 2:", "\n", "#     nick = 'geometric'", "\n", "# else:", "\n", "#     nick = 'model_' + str(i)", "\n", "# nicks.append(nick)", "\n", "print", "(", "\"Retraining model : \"", ",", "nick", ")", "\n", "\n", "if", "initial_acc", "is", "not", "None", ":", "\n", "            ", "start_acc", "=", "initial_acc", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "start_acc", "=", "-", "1", "\n", "", "if", "args", ".", "dataset", ".", "lower", "(", ")", "[", "0", ":", "7", "]", "==", "'cifar10'", ":", "\n", "\n", "            ", "if", "args", ".", "reinit_trainloaders", ":", "\n", "                ", "print", "(", "'reiniting trainloader'", ")", "\n", "retrain_loader", ",", "_", "=", "cifar_train", ".", "get_dataset", "(", "config", ",", "no_randomness", "=", "args", ".", "no_random_trainloaders", ")", "\n", "", "else", ":", "\n", "                ", "retrain_loader", "=", "train_loader", "\n", "\n", "", "output_root_dir", "=", "\"{}/{}_models_ensembled/\"", ".", "format", "(", "args", ".", "baseroot", ",", "(", "args", ".", "dataset", ")", ".", "lower", "(", ")", ")", "\n", "output_root_dir", "=", "os", ".", "path", ".", "join", "(", "output_root_dir", ",", "args", ".", "exp_name", ",", "nick", ")", "\n", "os", ".", "makedirs", "(", "output_root_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "retrained_network", ",", "acc", "=", "cifar_train", ".", "get_retrained_model", "(", "args", ",", "retrain_loader", ",", "test_loader", ",", "old_networks", "[", "i", "]", ",", "config", ",", "output_root_dir", ",", "tensorboard_obj", "=", "tensorboard_obj", ",", "nick", "=", "nick", ",", "start_acc", "=", "initial_acc", "[", "i", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'mnist'", ":", "\n", "\n", "            ", "if", "args", ".", "reinit_trainloaders", ":", "\n", "                ", "print", "(", "'reiniting trainloader'", ")", "\n", "retrain_loader", ",", "_", "=", "get_dataloader", "(", "args", ",", "no_randomness", "=", "args", ".", "no_random_trainloaders", ")", "\n", "", "else", ":", "\n", "                ", "retrain_loader", "=", "train_loader", "\n", "\n", "", "start_acc", "=", "initial_acc", "[", "i", "]", "\n", "retrained_network", ",", "acc", "=", "get_retrained_model", "(", "args", ",", "retrain_loader", ",", "test_loader", ",", "old_network", "=", "old_networks", "[", "i", "]", ",", "tensorboard_obj", "=", "tensorboard_obj", ",", "nick", "=", "nick", ",", "start_acc", "=", "start_acc", ",", "retrain_seed", "=", "args", ".", "retrain_seed", ")", "\n", "", "retrained_networks", ".", "append", "(", "retrained_network", ")", "\n", "accuracies", ".", "append", "(", "acc", ")", "\n", "", "return", "retrained_networks", ",", "accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.intmd_retrain_models": [[382, 412], ["range", "len", "print", "retrained_networks.append", "accuracies.append", "str", "args.dataset.lower", "os.path.join", "os.makedirs", "train.get_retrained_model", "args.dataset.lower", "args.dataset.lower", "routines.get_intmd_retrain_model"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_retrained_model", "home.repos.pwc.inspect_result.sidak_otfusion.None.routines.get_intmd_retrain_model"], ["", "def", "intmd_retrain_models", "(", "args", ",", "old_networks", ",", "aligned_wts", ",", "train_loader", ",", "test_loader", ",", "config", ",", "tensorboard_obj", "=", "None", ",", "initial_acc", "=", "None", ")", ":", "\n", "    ", "accuracies", "=", "[", "]", "\n", "retrained_networks", "=", "[", "]", "\n", "# nicks = []", "\n", "\n", "# assert len(old_networks) >= 4", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "old_networks", ")", ")", ":", "\n", "\n", "        ", "nick", "=", "'intmd_retrain_model_'", "+", "str", "(", "i", ")", "\n", "print", "(", "\"Retraining model : \"", ",", "nick", ")", "\n", "\n", "if", "initial_acc", "is", "not", "None", ":", "\n", "            ", "start_acc", "=", "initial_acc", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "start_acc", "=", "-", "1", "\n", "", "if", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "\n", "            ", "output_root_dir", "=", "\"{}/{}_models_ensembled/\"", ".", "format", "(", "args", ".", "baseroot", ",", "(", "args", ".", "dataset", ")", ".", "lower", "(", ")", ")", "\n", "output_root_dir", "=", "os", ".", "path", ".", "join", "(", "output_root_dir", ",", "args", ".", "exp_name", ",", "nick", ")", "\n", "os", ".", "makedirs", "(", "output_root_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "retrained_network", ",", "acc", "=", "cifar_train", ".", "get_retrained_model", "(", "args", ",", "train_loader", ",", "test_loader", ",", "old_networks", "[", "i", "]", ",", "config", ",", "output_root_dir", ",", "tensorboard_obj", "=", "tensorboard_obj", ",", "nick", "=", "nick", ",", "start_acc", "=", "start_acc", ")", "\n", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'mnist'", ":", "\n", "# start_acc = initial_acc[i]", "\n", "            ", "retrained_network", ",", "acc", "=", "get_intmd_retrain_model", "(", "args", ",", "train_loader", ",", "test_loader", ",", "old_network", "=", "old_networks", "[", "i", "]", ",", "tensorboard_obj", "=", "tensorboard_obj", ",", "nick", "=", "nick", ",", "start_acc", "=", "start_acc", ")", "\n", "", "retrained_networks", ".", "append", "(", "retrained_network", ")", "\n", "accuracies", ".", "append", "(", "acc", ")", "\n", "", "return", "retrained_networks", ",", "accuracies", "", "", ""]], "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.Net.__init__": [[12, 18], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.CifarMlpNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "20", ",", "5", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "20", ",", "50", ",", "5", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "4", "*", "4", "*", "50", ",", "500", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "500", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.Net.forward": [[19, 28], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "mnist.Net.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mnist.Net.fc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "mnist.Net.conv1", "mnist.Net.conv2", "mnist.Net.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "4", "*", "4", "*", "50", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train": [[30, 44], ["model.train", "enumerate", "optimizer.zero_grad", "model", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "data.to", "target.to", "print", "len", "F.nll_loss.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "output", "=", "None", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test": [[46, 63], ["model.eval", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.nll_loss().item", "model.argmax", "output.argmax.eq().sum().item", "len", "data.to", "target.to", "len", "torch.nll_loss", "output.argmax.eq().sum", "output.argmax.eq", "target.view_as"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.main": [[65, 121], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Net().to", "torch.SGD", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "Net().to.parameters", "mnist.train", "mnist.test", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "mnist.Net", "Net().to.state_dict", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'gpu id'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "args", ".", "device", ")", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "'../data'", ",", "train", "=", "True", ",", "download", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "'../data'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "model", "=", "Net", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ")", "\n", "\n", "epoch", "=", "0", "\n", "while", "epoch", "<", "args", ".", "epochs", ":", "\n", "        ", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "\n", "", "if", "(", "args", ".", "save_model", ")", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\"mnist_cnn.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.__init__": [[10, 21], ["hasattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params", ",", "not_squared", "=", "False", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "ground_metric_type", "=", "params", ".", "ground_metric", "\n", "self", ".", "ground_metric_normalize", "=", "params", ".", "ground_metric_normalize", "\n", "self", ".", "reg", "=", "params", ".", "reg", "\n", "if", "hasattr", "(", "params", ",", "'not_squared'", ")", ":", "\n", "            ", "self", ".", "squared", "=", "not", "params", ".", "not_squared", "\n", "", "else", ":", "\n", "# so by default squared will be on!", "\n", "            ", "self", ".", "squared", "=", "not", "not_squared", "\n", "", "self", ".", "mem_eff", "=", "params", ".", "ground_metric_eff", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._clip": [[22, 36], ["print", "setattr", "ground_metric_matrix.clamp_", "print", "print", "float", "ground_metric_matrix.numel"], "methods", ["None"], ["", "def", "_clip", "(", "self", ",", "ground_metric_matrix", ")", ":", "\n", "        ", "if", "self", ".", "params", ".", "debug", ":", "\n", "            ", "print", "(", "\"before clipping\"", ",", "ground_metric_matrix", ".", "data", ")", "\n", "\n", "", "percent_clipped", "=", "(", "float", "(", "(", "ground_metric_matrix", ">=", "self", ".", "reg", "*", "self", ".", "params", ".", "clip_max", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "data", ")", "/", "ground_metric_matrix", ".", "numel", "(", ")", ")", "*", "100", "\n", "print", "(", "\"percent_clipped is (assumes clip_min = 0) \"", ",", "percent_clipped", ")", "\n", "setattr", "(", "self", ".", "params", ",", "'percent_clipped'", ",", "percent_clipped", ")", "\n", "# will keep the M' = M/reg in range clip_min and clip_max", "\n", "ground_metric_matrix", ".", "clamp_", "(", "min", "=", "self", ".", "reg", "*", "self", ".", "params", ".", "clip_min", ",", "\n", "max", "=", "self", ".", "reg", "*", "self", ".", "params", ".", "clip_max", ")", "\n", "if", "self", ".", "params", ".", "debug", ":", "\n", "            ", "print", "(", "\"after clipping\"", ",", "ground_metric_matrix", ".", "data", ")", "\n", "", "return", "ground_metric_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._normalize": [[37, 56], ["torch.log1p", "print", "torch.log1p.max", "torch.log1p.max", "print", "torch.log1p.median", "torch.log1p.median", "print", "torch.log1p.mean", "torch.log1p.mean"], "methods", ["None"], ["", "def", "_normalize", "(", "self", ",", "ground_metric_matrix", ")", ":", "\n", "\n", "        ", "if", "self", ".", "ground_metric_normalize", "==", "\"log\"", ":", "\n", "            ", "ground_metric_matrix", "=", "torch", ".", "log1p", "(", "ground_metric_matrix", ")", "\n", "", "elif", "self", ".", "ground_metric_normalize", "==", "\"max\"", ":", "\n", "            ", "print", "(", "\"Normalizing by max of ground metric and which is \"", ",", "ground_metric_matrix", ".", "max", "(", ")", ")", "\n", "ground_metric_matrix", "=", "ground_metric_matrix", "/", "ground_metric_matrix", ".", "max", "(", ")", "\n", "", "elif", "self", ".", "ground_metric_normalize", "==", "\"median\"", ":", "\n", "            ", "print", "(", "\"Normalizing by median of ground metric and which is \"", ",", "ground_metric_matrix", ".", "median", "(", ")", ")", "\n", "ground_metric_matrix", "=", "ground_metric_matrix", "/", "ground_metric_matrix", ".", "median", "(", ")", "\n", "", "elif", "self", ".", "ground_metric_normalize", "==", "\"mean\"", ":", "\n", "            ", "print", "(", "\"Normalizing by mean of ground metric and which is \"", ",", "ground_metric_matrix", ".", "mean", "(", ")", ")", "\n", "ground_metric_matrix", "=", "ground_metric_matrix", "/", "ground_metric_matrix", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "ground_metric_normalize", "==", "\"none\"", ":", "\n", "            ", "return", "ground_metric_matrix", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "ground_metric_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._sanity_check": [[57, 60], ["utils.isnan().any", "utils.isnan"], "methods", ["home.repos.pwc.inspect_result.sidak_otfusion.None.utils.isnan"], ["", "def", "_sanity_check", "(", "self", ",", "ground_metric_matrix", ")", ":", "\n", "        ", "assert", "not", "(", "ground_metric_matrix", "<", "0", ")", ".", "any", "(", ")", "\n", "assert", "not", "(", "isnan", "(", "ground_metric_matrix", ")", ".", "any", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._cost_matrix_xy": [[61, 74], ["x.unsqueeze", "y.unsqueeze", "torch.sum", "print", "torch.abs"], "methods", ["None"], ["", "def", "_cost_matrix_xy", "(", "self", ",", "x", ",", "y", ",", "p", "=", "2", ",", "squared", "=", "True", ")", ":", "\n", "# TODO: Use this to guarantee reproducibility of previous results and then move onto better way", "\n", "        ", "\"Returns the matrix of $|x_i-y_j|^p$.\"", "\n", "x_col", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "y_lin", "=", "y", ".", "unsqueeze", "(", "0", ")", "\n", "c", "=", "torch", ".", "sum", "(", "(", "torch", ".", "abs", "(", "x_col", "-", "y_lin", ")", ")", "**", "p", ",", "2", ")", "\n", "if", "not", "squared", ":", "\n", "            ", "print", "(", "\"dont leave off the squaring of the ground metric\"", ")", "\n", "c", "=", "c", "**", "(", "1", "/", "2", ")", "\n", "# print(c.size())", "\n", "", "if", "self", ".", "params", ".", "dist_normalize", ":", "\n", "            ", "assert", "NotImplementedError", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._pairwise_distances": [[76, 106], ["torch.clamp", "torch.transpose", "torch.transpose", "x_norm.view", "print", "print", "torch.mm"], "methods", ["None"], ["", "def", "_pairwise_distances", "(", "self", ",", "x", ",", "y", "=", "None", ",", "squared", "=", "True", ")", ":", "\n", "        ", "'''\n        Source: https://discuss.pytorch.org/t/efficient-distance-matrix-computation/9065/2\n        Input: x is a Nxd matrix\n               y is an optional Mxd matirx\n        Output: dist is a NxM matrix where dist[i,j] is the square norm between x[i,:] and y[j,:]\n                if y is not given then use 'y=x'.\n        i.e. dist[i,j] = ||x[i,:]-y[j,:]||^2\n        '''", "\n", "x_norm", "=", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "y_t", "=", "torch", ".", "transpose", "(", "y", ",", "0", ",", "1", ")", "\n", "y_norm", "=", "(", "y", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "y_t", "=", "torch", ".", "transpose", "(", "x", ",", "0", ",", "1", ")", "\n", "y_norm", "=", "x_norm", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "", "dist", "=", "x_norm", "+", "y_norm", "-", "2.0", "*", "torch", ".", "mm", "(", "x", ",", "y_t", ")", "\n", "# Ensure diagonal is zero if x=y", "\n", "dist", "=", "torch", ".", "clamp", "(", "dist", ",", "min", "=", "0.0", ")", "\n", "\n", "if", "self", ".", "params", ".", "activation_histograms", "and", "self", ".", "params", ".", "dist_normalize", ":", "\n", "            ", "dist", "=", "dist", "/", "self", ".", "params", ".", "act_num_samples", "\n", "print", "(", "\"Divide squared distances by the num samples\"", ")", "\n", "\n", "", "if", "not", "squared", ":", "\n", "            ", "print", "(", "\"dont leave off the squaring of the ground metric\"", ")", "\n", "dist", "=", "dist", "**", "(", "1", "/", "2", ")", "\n", "\n", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._get_euclidean": [[107, 122], ["torch.norm", "ground_metric.GroundMetric._pairwise_distances", "ground_metric.GroundMetric._cost_matrix_xy", "coordinates.view"], "methods", ["home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._pairwise_distances", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._cost_matrix_xy"], ["", "def", "_get_euclidean", "(", "self", ",", "coordinates", ",", "other_coordinates", "=", "None", ")", ":", "\n", "# TODO: Replace by torch.pdist (which is said to be much more memory efficient)", "\n", "\n", "        ", "if", "other_coordinates", "is", "None", ":", "\n", "            ", "matrix", "=", "torch", ".", "norm", "(", "\n", "coordinates", ".", "view", "(", "coordinates", ".", "shape", "[", "0", "]", ",", "1", ",", "coordinates", ".", "shape", "[", "1", "]", ")", "-", "coordinates", ",", "p", "=", "2", ",", "dim", "=", "2", "\n", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "mem_eff", ":", "\n", "                ", "matrix", "=", "self", ".", "_pairwise_distances", "(", "coordinates", ",", "other_coordinates", ",", "squared", "=", "self", ".", "squared", ")", "\n", "", "else", ":", "\n", "                ", "matrix", "=", "self", ".", "_cost_matrix_xy", "(", "coordinates", ",", "other_coordinates", ",", "squared", "=", "self", ".", "squared", ")", "\n", "\n", "", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._normed_vecs": [[123, 129], ["torch.norm", "print", "torch.norm.mean", "torch.norm.min", "torch.norm.max", "torch.norm.std"], "methods", ["None"], ["", "def", "_normed_vecs", "(", "self", ",", "vecs", ",", "eps", "=", "1e-9", ")", ":", "\n", "        ", "norms", "=", "torch", ".", "norm", "(", "vecs", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "print", "(", "\"stats of vecs are: mean {}, min {}, max {}, std {}\"", ".", "format", "(", "\n", "norms", ".", "mean", "(", ")", ",", "norms", ".", "min", "(", ")", ",", "norms", ".", "max", "(", ")", ",", "norms", ".", "std", "(", ")", "\n", ")", ")", "\n", "return", "vecs", "/", "(", "norms", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._get_cosine": [[130, 140], ["matrix.clamp_", "torch.norm", "torch.div", "matrix.t", "other_coordinates.t", "torch.norm().view", "torch.norm().view", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "_get_cosine", "(", "self", ",", "coordinates", ",", "other_coordinates", "=", "None", ")", ":", "\n", "        ", "if", "other_coordinates", "is", "None", ":", "\n", "            ", "matrix", "=", "coordinates", "/", "torch", ".", "norm", "(", "coordinates", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "matrix", "=", "1", "-", "matrix", "@", "matrix", ".", "t", "(", ")", "\n", "", "else", ":", "\n", "            ", "matrix", "=", "1", "-", "torch", ".", "div", "(", "\n", "coordinates", "@", "other_coordinates", ".", "t", "(", ")", ",", "\n", "torch", ".", "norm", "(", "coordinates", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "@", "torch", ".", "norm", "(", "other_coordinates", ",", "dim", "=", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", ")", "\n", "", "return", "matrix", ".", "clamp_", "(", "min", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._get_angular": [[141, 143], ["None"], "methods", ["None"], ["", "def", "_get_angular", "(", "self", ",", "coordinates", ",", "other_coordinates", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.get_metric": [[144, 151], ["None"], "methods", ["None"], ["", "def", "get_metric", "(", "self", ",", "coordinates", ",", "other_coordinates", "=", "None", ")", ":", "\n", "        ", "get_metric_map", "=", "{", "\n", "'euclidean'", ":", "self", ".", "_get_euclidean", ",", "\n", "'cosine'", ":", "self", ".", "_get_cosine", ",", "\n", "'angular'", ":", "self", ".", "_get_angular", ",", "\n", "}", "\n", "return", "get_metric_map", "[", "self", ".", "ground_metric_type", "]", "(", "coordinates", ",", "other_coordinates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process": [[152, 183], ["print", "ground_metric.GroundMetric.get_metric", "ground_metric.GroundMetric._sanity_check", "ground_metric.GroundMetric._normalize", "ground_metric.GroundMetric._sanity_check", "ground_metric.GroundMetric._sanity_check", "print", "ground_metric.GroundMetric._normed_vecs", "print", "print", "ground_metric.GroundMetric._clip", "print", "ground_metric.GroundMetric._normed_vecs", "print"], "methods", ["home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.get_metric", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._sanity_check", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._normalize", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._sanity_check", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._sanity_check", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._normed_vecs", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._clip", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric._normed_vecs"], ["", "def", "process", "(", "self", ",", "coordinates", ",", "other_coordinates", "=", "None", ")", ":", "\n", "        ", "print", "(", "'Processing the coordinates to form ground_metric'", ")", "\n", "if", "self", ".", "params", ".", "geom_ensemble_type", "==", "'wts'", "and", "self", ".", "params", ".", "normalize_wts", ":", "\n", "            ", "print", "(", "\"In weight mode: normalizing weights to unit norm\"", ")", "\n", "coordinates", "=", "self", ".", "_normed_vecs", "(", "coordinates", ")", "\n", "if", "other_coordinates", "is", "not", "None", ":", "\n", "                ", "other_coordinates", "=", "self", ".", "_normed_vecs", "(", "other_coordinates", ")", "\n", "\n", "", "", "ground_metric_matrix", "=", "self", ".", "get_metric", "(", "coordinates", ",", "other_coordinates", ")", "\n", "\n", "if", "self", ".", "params", ".", "debug", ":", "\n", "            ", "print", "(", "\"coordinates is \"", ",", "coordinates", ")", "\n", "if", "other_coordinates", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"other_coordinates is \"", ",", "other_coordinates", ")", "\n", "", "print", "(", "\"ground_metric_matrix is \"", ",", "ground_metric_matrix", ")", "\n", "\n", "", "self", ".", "_sanity_check", "(", "ground_metric_matrix", ")", "\n", "\n", "ground_metric_matrix", "=", "self", ".", "_normalize", "(", "ground_metric_matrix", ")", "\n", "\n", "self", ".", "_sanity_check", "(", "ground_metric_matrix", ")", "\n", "\n", "if", "self", ".", "params", ".", "clip_gm", ":", "\n", "            ", "ground_metric_matrix", "=", "self", ".", "_clip", "(", "ground_metric_matrix", ")", "\n", "\n", "", "self", ".", "_sanity_check", "(", "ground_metric_matrix", ")", "\n", "\n", "if", "self", ".", "params", ".", "debug", ":", "\n", "            ", "print", "(", "\"ground_metric_matrix at the end is \"", ",", "ground_metric_matrix", ")", "\n", "\n", "", "return", "ground_metric_matrix", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sidak_otfusion.None.parameters.get_deprecated_params_vgg_cifar": [[9, 33], ["utils.dotdict"], "function", ["None"], ["def", "get_deprecated_params_vgg_cifar", "(", ")", ":", "\n", "    ", "parameters", "=", "{", "\n", "'n_epochs'", ":", "1", ",", "\n", "'enable_dropout'", ":", "False", ",", "\n", "'batch_size_train'", ":", "128", ",", "\n", "'batch_size_test'", ":", "1000", ",", "\n", "'learning_rate'", ":", "0.01", ",", "\n", "'momentum'", ":", "0.5", ",", "\n", "'log_interval'", ":", "100", ",", "\n", "\n", "'to_download'", ":", "True", ",", "# set to True if MNIST/dataset hasn't been downloaded,", "\n", "'disable_bias'", ":", "True", ",", "# no bias at all in fc or conv layers,", "\n", "'dataset'", ":", "'Cifar10'", ",", "\n", "# dataset: mnist,", "\n", "'num_models'", ":", "2", ",", "\n", "'model_name'", ":", "'vgg11_nobias'", ",", "\n", "# model_name: net,", "\n", "# model_name: mlpnet,", "\n", "'num_hidden_nodes'", ":", "100", ",", "\n", "'num_hidden_nodes1'", ":", "400", ",", "\n", "'num_hidden_nodes2'", ":", "200", ",", "\n", "'num_hidden_nodes3'", ":", "100", ",", "\n", "}", "\n", "return", "dotdict", "(", "parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.parameters.get_deprecated_params_mnist_act": [[34, 65], ["utils.dotdict"], "function", ["None"], ["", "def", "get_deprecated_params_mnist_act", "(", ")", ":", "\n", "    ", "parameters", "=", "{", "\n", "'n_epochs'", ":", "1", ",", "\n", "'enable_dropout'", ":", "False", ",", "\n", "'batch_size_train'", ":", "64", ",", "\n", "'batch_size_test'", ":", "1000", ",", "\n", "'learning_rate'", ":", "0.01", ",", "\n", "'momentum'", ":", "0.5", ",", "\n", "'log_interval'", ":", "100", ",", "\n", "\n", "'to_download'", ":", "True", ",", "# set to True if MNIST/dataset hasn't been downloaded,", "\n", "'disable_bias'", ":", "True", ",", "# no bias at all in fc or conv layers,", "\n", "'dataset'", ":", "'mnist'", ",", "\n", "'num_models'", ":", "2", ",", "\n", "'model_name'", ":", "'simplenet'", ",", "\n", "# model_name: net,", "\n", "# model_name: mlpnet,", "\n", "'num_hidden_nodes'", ":", "400", ",", "\n", "'num_hidden_nodes1'", ":", "400", ",", "\n", "'num_hidden_nodes2'", ":", "200", ",", "\n", "'num_hidden_nodes3'", ":", "100", ",", "\n", "\n", "'gpu_id'", ":", "5", ",", "\n", "'skip_last_layer'", ":", "False", ",", "\n", "'reg'", ":", "1e-2", ",", "\n", "'debug'", ":", "False", ",", "\n", "'activation_histograms'", ":", "True", ",", "\n", "'act_num_samples'", ":", "100", ",", "\n", "'softmax_temperature'", ":", "1", ",", "\n", "}", "\n", "return", "dotdict", "(", "parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.parameters.dump_parameters": [[66, 74], ["print", "utils.mkdir", "open", "os.path.join", "json.dump", "json.dump", "vars", "type", "type"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.utils.mkdir"], ["", "def", "dump_parameters", "(", "args", ")", ":", "\n", "    ", "print", "(", "\"dumping parameters at \"", ",", "args", ".", "config_dir", ")", "\n", "mkdir", "(", "args", ".", "config_dir", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "config_dir", ",", "args", ".", "exp_name", "+", "\".json\"", ")", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "if", "not", "(", "type", "(", "args", ")", "is", "dict", "or", "type", "(", "args", ")", "is", "utils", ".", "dotdict", ")", ":", "\n", "            ", "json", ".", "dump", "(", "vars", "(", "args", ")", ",", "outfile", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "", "else", ":", "\n", "            ", "json", ".", "dump", "(", "args", ",", "outfile", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.parameters.get_parser": [[75, 245], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "", "def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--n-epochs'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size-train'", ",", "default", "=", "64", ",", "type", "=", "int", ",", "help", "=", "'training batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size-test'", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "help", "=", "'test batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning-rate'", ",", "default", "=", "0.01", ",", "type", "=", "float", ",", "help", "=", "'learning rate for SGD (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "help", "=", "'momentum for SGD (default: 0.5)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'log progress every N batches (when progress bar is disabled)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--to-download'", ",", "action", "=", "'store_true'", ",", "help", "=", "'download the dataset (typically mnist)'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable_bias'", ",", "action", "=", "'store_false'", ",", "help", "=", "'disable bias in the neural network layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'mnist'", ",", "type", "=", "str", ",", "choices", "=", "[", "'mnist'", ",", "'Cifar10'", "]", ",", "\n", "help", "=", "'dataset to use for the task'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-models'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'number of models to ensemble'", ")", "\n", "parser", ".", "add_argument", "(", "'--model-name'", ",", "type", "=", "str", ",", "default", "=", "'simplenet'", ",", "\n", "help", "=", "'Type of neural network model (simplenet|smallmlpnet|mlpnet|bigmlpnet|cifarmlpnet|net|vgg11_nobias|vgg11)'", ")", "\n", "parser", ".", "add_argument", "(", "'--config-file'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--config-dir'", ",", "type", "=", "str", ",", "default", "=", "\"./configurations\"", ",", "help", "=", "'config dir'", ")", "\n", "\n", "# for simplenet", "\n", "parser", ".", "add_argument", "(", "'--num-hidden-nodes'", ",", "default", "=", "400", ",", "type", "=", "int", ",", "help", "=", "'simplenet: number of hidden nodes in the only hidden layer'", ")", "\n", "# for mlpnet", "\n", "parser", ".", "add_argument", "(", "'--num-hidden-nodes1'", ",", "default", "=", "400", ",", "type", "=", "int", ",", "\n", "help", "=", "'mlpnet: number of hidden nodes in the hidden layer 1'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-hidden-nodes2'", ",", "default", "=", "200", ",", "type", "=", "int", ",", "\n", "help", "=", "'mlpnet: number of hidden nodes in the hidden layer 2'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-hidden-nodes3'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "\n", "help", "=", "'mlpnet: number of hidden nodes in the hidden layer 3'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-hidden-nodes4'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "\n", "help", "=", "'mlpnet: number of hidden nodes in the hidden layer 3'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--sweep-id'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'sweep id '", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu-id'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "help", "=", "'GPU id to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-last-layer'", ",", "action", "=", "'store_true'", ",", "help", "=", "'skip the last layer in calculating optimal transport'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-last-layer-type'", ",", "type", "=", "str", ",", "default", "=", "'average'", ",", "choices", "=", "[", "'second'", ",", "'average'", "]", ",", "\n", "help", "=", "'how to average the parameters for the last layer'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'print debug statements'", ")", "\n", "parser", ".", "add_argument", "(", "'--cifar-style-data'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use data loader in cifar style'", ")", "\n", "parser", ".", "add_argument", "(", "'--activation-histograms'", ",", "action", "=", "'store_true'", ",", "help", "=", "'utilize activation histograms'", ")", "\n", "parser", ".", "add_argument", "(", "'--act-num-samples'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "'num of samples to compute activation stats'", ")", "\n", "parser", ".", "add_argument", "(", "'--softmax-temperature'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "'softmax temperature for activation weights (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--activation-mode'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "choices", "=", "[", "'mean'", ",", "'std'", ",", "'meanstd'", ",", "'raw'", "]", ",", "\n", "help", "=", "'mode that chooses how the importance of a neuron is calculated.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--options-type'", ",", "type", "=", "str", ",", "default", "=", "'generic'", ",", "choices", "=", "[", "'generic'", "]", ",", "help", "=", "'the type of options to load'", ")", "\n", "parser", ".", "add_argument", "(", "'--deprecated'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "choices", "=", "[", "'vgg_cifar'", ",", "'mnist_act'", "]", ",", "\n", "help", "=", "'loaded parameters in deprecated style. '", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save-result-file'", ",", "type", "=", "str", ",", "default", "=", "'default.csv'", ",", "help", "=", "'path of csv file to save things to'", ")", "\n", "parser", ".", "add_argument", "(", "'--sweep-name'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'name of sweep experiment'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--reg'", ",", "default", "=", "1e-2", ",", "type", "=", "float", ",", "help", "=", "'regularization strength for sinkhorn (default: 1e-2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--reg-m'", ",", "default", "=", "1e-3", ",", "type", "=", "float", ",", "help", "=", "'regularization strength for marginals in unbalanced sinkhorn (default: 1e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--ground-metric'", ",", "type", "=", "str", ",", "default", "=", "'euclidean'", ",", "choices", "=", "[", "'euclidean'", ",", "'cosine'", "]", ",", "\n", "help", "=", "'ground metric for OT calculations, only works in free support v2 and soon with Ground Metric class in all! .'", ")", "\n", "parser", ".", "add_argument", "(", "'--ground-metric-normalize'", ",", "type", "=", "str", ",", "default", "=", "'log'", ",", "choices", "=", "[", "'log'", ",", "'max'", ",", "'none'", ",", "'median'", ",", "'mean'", "]", ",", "\n", "help", "=", "'ground metric normalization to consider! '", ")", "\n", "parser", ".", "add_argument", "(", "'--not-squared'", ",", "action", "=", "'store_true'", ",", "help", "=", "'dont square the ground metric'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-gm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'to clip ground metric'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-min'", ",", "action", "=", "'store'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "'Value for clip-min for gm'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-max'", ",", "action", "=", "'store'", ",", "type", "=", "float", ",", "default", "=", "5", ",", "\n", "help", "=", "'Value for clip-max for gm'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmap-stats'", ",", "action", "=", "'store_true'", ",", "help", "=", "'print tmap stats'", ")", "\n", "parser", ".", "add_argument", "(", "'--ensemble-step'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "action", "=", "'store'", ",", "help", "=", "'rate of adjustment towards the second model'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ground-metric-eff'", ",", "action", "=", "'store_true'", ",", "help", "=", "'memory efficient calculation of ground metric'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--retrain'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "action", "=", "'store'", ",", "help", "=", "'number of epochs to retrain all the models & their avgs'", ")", "\n", "parser", ".", "add_argument", "(", "'--retrain-lr-decay'", ",", "type", "=", "float", ",", "default", "=", "-", "1", ",", "action", "=", "'store'", ",", "\n", "help", "=", "'amount by which to reduce the initial lr while retraining the model avgs'", ")", "\n", "parser", ".", "add_argument", "(", "'--retrain-lr-decay-factor'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "action", "=", "'store'", ",", "\n", "help", "=", "'lr decay factor when the LR is gradually decreased by Step LR'", ")", "\n", "parser", ".", "add_argument", "(", "'--retrain-lr-decay-epochs'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "action", "=", "'store'", ",", "\n", "help", "=", "'epochs at which retrain lr decay factor should be applied. underscore separated! '", ")", "\n", "parser", ".", "add_argument", "(", "'--retrain-avg-only'", ",", "action", "=", "'store_true'", ",", "help", "=", "'retraining the model avgs only'", ")", "\n", "parser", ".", "add_argument", "(", "'--retrain-geometric-only'", ",", "action", "=", "'store_true'", ",", "help", "=", "'retraining the model geometric only'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--load-models'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'path/name of directory from where to load the models'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt-type'", ",", "type", "=", "str", ",", "default", "=", "'best'", ",", "choices", "=", "[", "'best'", ",", "'final'", "]", ",", "help", "=", "'which checkpoint to load'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--recheck-cifar'", ",", "action", "=", "'store_true'", ",", "help", "=", "'recheck cifar accuracies'", ")", "\n", "parser", ".", "add_argument", "(", "'--recheck-acc'", ",", "action", "=", "'store_true'", ",", "help", "=", "'recheck model accuracies (recheck-cifar is legacy/deprecated)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-aligned'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'evaluate the accuracy of the aligned model 0'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--enable-dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'enable dropout in neural networks'", ")", "\n", "parser", ".", "add_argument", "(", "'--dump-model'", ",", "action", "=", "'store_true'", ",", "help", "=", "'dump model checkpoints'", ")", "\n", "parser", ".", "add_argument", "(", "'--dump-final-models'", ",", "action", "=", "'store_true'", ",", "help", "=", "'dump final trained model checkpoints'", ")", "\n", "parser", ".", "add_argument", "(", "'--correction'", ",", "action", "=", "'store_true'", ",", "help", "=", "'scaling correction for OT'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--activation-seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "action", "=", "'store'", ",", "help", "=", "'seed for computing activations'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--weight-stats'", ",", "action", "=", "'store_true'", ",", "help", "=", "'log neuron-wise weight vector stats.'", ")", "\n", "parser", ".", "add_argument", "(", "'--sinkhorn-type'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "choices", "=", "[", "'normal'", ",", "'stabilized'", ",", "'epsilon'", ",", "'gpu'", "]", ",", "\n", "help", "=", "'Type of sinkhorn algorithm to consider.'", ")", "\n", "parser", ".", "add_argument", "(", "'--geom-ensemble-type'", ",", "type", "=", "str", ",", "default", "=", "'wts'", ",", "choices", "=", "[", "'wts'", ",", "'acts'", "]", ",", "\n", "help", "=", "'Ensemble based on weights (wts) or activations (acts).'", ")", "\n", "parser", ".", "add_argument", "(", "'--act-bug'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'simulate the bug in ground metric calc for act based averaging'", ")", "\n", "parser", ".", "add_argument", "(", "'--standardize-acts'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'subtract mean and divide by standard deviation across the samples for use in act based alignment'", ")", "\n", "parser", ".", "add_argument", "(", "'--transform-acts'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'transform activations by transport map for later use in bi_avg mode '", ")", "\n", "parser", ".", "add_argument", "(", "'--center-acts'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'subtract mean only across the samples for use in act based alignment'", ")", "\n", "parser", ".", "add_argument", "(", "'--prelu-acts'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do activation based alignment based on pre-relu acts'", ")", "\n", "parser", ".", "add_argument", "(", "'--pool-acts'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do activation based alignment based on pooling acts'", ")", "\n", "parser", ".", "add_argument", "(", "'--pool-relu'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do relu first before pooling acts'", ")", "\n", "parser", ".", "add_argument", "(", "'--normalize-acts'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'normalize the vector of activations'", ")", "\n", "parser", ".", "add_argument", "(", "'--normalize-wts'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'normalize the vector of weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--gromov'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use gromov wasserstein distance and barycenters'", ")", "\n", "parser", ".", "add_argument", "(", "'--gromov-loss'", ",", "type", "=", "str", ",", "default", "=", "'square_loss'", ",", "action", "=", "'store'", ",", "\n", "choices", "=", "[", "'square_loss'", ",", "'kl_loss'", "]", ",", "help", "=", "\"choice of loss function for gromov wasserstein computations\"", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard-root'", ",", "action", "=", "'store'", ",", "default", "=", "\"./tensorboard\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'Root directory of tensorboard logs'", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use tensorboard to plot the loss values'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--same-model'", ",", "action", "=", "'store'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'Index of the same model to average with itself'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-normalize'", ",", "action", "=", "'store_true'", ",", "help", "=", "'normalize distances by act num samples'", ")", "\n", "parser", ".", "add_argument", "(", "'--update-acts'", ",", "action", "=", "'store_true'", ",", "help", "=", "'update acts during the alignment of model0'", ")", "\n", "parser", ".", "add_argument", "(", "'--past-correction'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use the current weights aligned by multiplying with past transport map'", ")", "\n", "parser", ".", "add_argument", "(", "'--partial-reshape'", ",", "action", "=", "'store_true'", ",", "help", "=", "'partially reshape the conv layers in ground metric calculation'", ")", "\n", "parser", ".", "add_argument", "(", "'--choice'", ",", "type", "=", "str", ",", "default", "=", "'0 2 4 6 8'", ",", "action", "=", "'store'", ",", "\n", "help", "=", "\"choice of how to partition the labels\"", ")", "\n", "parser", ".", "add_argument", "(", "'--diff-init'", ",", "action", "=", "'store_true'", ",", "help", "=", "'different initialization for models in data separated mode'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--partition-type'", ",", "type", "=", "str", ",", "default", "=", "'labels'", ",", "action", "=", "'store'", ",", "\n", "choices", "=", "[", "'labels'", ",", "'personalized'", ",", "'small_big'", "]", ",", "help", "=", "\"type of partitioning of training set to carry out\"", ")", "\n", "parser", ".", "add_argument", "(", "'--personal-class-idx'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "action", "=", "'store'", ",", "\n", "help", "=", "'class index for personal data'", ")", "\n", "parser", ".", "add_argument", "(", "'--partition-dataloader'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "action", "=", "'store'", ",", "\n", "help", "=", "'data loader to use in data partitioned setting'", ")", "\n", "parser", ".", "add_argument", "(", "'--personal-split-frac'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "action", "=", "'store'", ",", "\n", "help", "=", "'split fraction of rest of examples for personal data'", ")", "\n", "parser", ".", "add_argument", "(", "'--exact'", ",", "action", "=", "'store_true'", ",", "help", "=", "'compute exact optimal transport'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-personal-idx'", ",", "action", "=", "'store_true'", ",", "help", "=", "'skip personal data'", ")", "\n", "parser", ".", "add_argument", "(", "'--prediction-wts'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use wts given by ensemble step for prediction ensembling'", ")", "\n", "parser", ".", "add_argument", "(", "'--width-ratio'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "action", "=", "'store'", ",", "\n", "help", "=", "'ratio of the widths of the hidden layers between the two models'", ")", "\n", "parser", ".", "add_argument", "(", "'--proper-marginals'", ",", "action", "=", "'store_true'", ",", "help", "=", "'consider the marginals of transport map properly'", ")", "\n", "parser", ".", "add_argument", "(", "'--retrain-seed'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "action", "=", "'store'", ",", "\n", "help", "=", "'if reseed computations again in retrain'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-random-trainloaders'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'get train loaders without any random transforms to ensure consistency'", ")", "\n", "parser", ".", "add_argument", "(", "'--reinit-trainloaders'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'reinit train loader when starting retraining of each model!'", ")", "\n", "parser", ".", "add_argument", "(", "'--second-model-name'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "action", "=", "'store'", ",", "help", "=", "'name of second model!'", ")", "\n", "parser", ".", "add_argument", "(", "'--print-distances'", ",", "action", "=", "'store_true'", ",", "help", "=", "'print OT distances for every layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--deterministic'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do retrain in deterministic mode!'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-retrain'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "action", "=", "'store'", ",", "help", "=", "'which of the original models to skip retraining'", ")", "\n", "parser", ".", "add_argument", "(", "'--importance'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "action", "=", "'store'", ",", "\n", "help", "=", "'importance measure to use for building probab mass! (options, l1, l2, l11, l12)'", ")", "\n", "parser", ".", "add_argument", "(", "'--unbalanced'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use unbalanced OT'", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "default", "=", "20", ",", "type", "=", "float", ",", "help", "=", "'distillation temperature for (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "default", "=", "0.7", ",", "type", "=", "float", ",", "help", "=", "'weight towards distillation loss (default: 0.7)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-epochs'", ",", "default", "=", "60", ",", "type", "=", "int", ",", "help", "=", "'number of distillation epochs'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--handle-skips'", ",", "action", "=", "'store_true'", ",", "help", "=", "'handle shortcut skips in resnet which decrease dimension'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.parameters.get_parameters": [[246, 318], ["parameters.get_parser", "get_parser.parse_args", "hasattr", "utils.get_timestamp_other", "os.getcwd", "os.path.join", "os.path.join", "os.path.join", "utils.mkdir", "utils.mkdir", "utils.mkdir", "parameters.dump_parameters", "os.path.join", "parameters.get_deprecated_params_vgg_cifar", "copy.deepcopy", "print", "hasattr", "parameters.get_deprecated_params_mnist_act", "open", "utils.dotdict", "utils.dotdict.items", "os.path.join", "json.load", "hasattr", "setattr", "getattr", "get_parser.get_default", "setattr"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.parameters.get_parser", "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.get_timestamp_other", "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.mkdir", "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.mkdir", "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.mkdir", "home.repos.pwc.inspect_result.sidak_otfusion.None.parameters.dump_parameters", "home.repos.pwc.inspect_result.sidak_otfusion.None.parameters.get_deprecated_params_vgg_cifar", "home.repos.pwc.inspect_result.sidak_otfusion.None.parameters.get_deprecated_params_mnist_act"], ["", "def", "get_parameters", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "get_parser", "(", ")", "\n", "base_args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "base_args", ".", "options_type", "!=", "'generic'", ":", "\n", "# This allows adding specific arguments that might be needed for a particular task", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "base_args", ".", "deprecated", "is", "not", "None", ":", "\n", "# This enables passing parameters in dictionaries (dotdicts)", "\n", "        ", "if", "base_args", ".", "deprecated", "==", "'vgg_cifar'", ":", "\n", "            ", "args", "=", "get_deprecated_params_vgg_cifar", "(", ")", "\n", "args", ".", "deprecated", "=", "base_args", ".", "deprecated", "\n", "", "elif", "base_args", ".", "deprecated", "==", "'mnist_act'", ":", "\n", "            ", "args", "=", "get_deprecated_params_mnist_act", "(", ")", "\n", "args", ".", "deprecated", "=", "base_args", ".", "deprecated", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "# Here we utilize config files to setup the parameters", "\n", "        ", "if", "base_args", ".", "config_file", ":", "\n", "            ", "args", "=", "copy", ".", "deepcopy", "(", "base_args", ")", "\n", "print", "(", "\"Reading parameters from {}, but CLI arguments\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "base_args", ".", "config_dir", ",", "base_args", ".", "config_file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "file_params", "=", "dotdict", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "for", "param", ",", "value", "in", "file_params", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "hasattr", "(", "args", ",", "param", ")", ":", "\n", "# If it doesn't contain, then set from config", "\n", "                        ", "setattr", "(", "args", ",", "param", ",", "value", ")", "\n", "", "elif", "getattr", "(", "args", ",", "param", ")", "==", "parser", ".", "get_default", "(", "param", ")", ":", "\n", "# Or when it has , but is the default, then override from config", "\n", "                        ", "setattr", "(", "args", ",", "param", ",", "value", ")", "\n", "\n", "# When it has and is not default, keep it", "\n", "\n", "# Remove the set flag of deprecated if the config was in that mode", "\n", "", "", "", "args", ".", "deprecated", "=", "None", "\n", "", "else", ":", "\n", "# these remain unmodified from what was default or passed in via CLI", "\n", "            ", "args", "=", "base_args", "\n", "\n", "# Setup a timestamp for the experiment and save it in args", "\n", "", "", "if", "hasattr", "(", "args", ",", "'timestamp'", ")", ":", "\n", "# the config file contained the timestamp parameter from the last experiment", "\n", "# (which say is being reproduced) so save it as well", "\n", "        ", "args", ".", "previous_timestamp", "=", "args", ".", "timestamp", "\n", "", "args", ".", "timestamp", "=", "get_timestamp_other", "(", ")", "\n", "\n", "# Set rootdir and other dump directories for the experiment", "\n", "args", ".", "rootdir", "=", "os", ".", "getcwd", "(", ")", "\n", "if", "args", ".", "sweep_name", "is", "not", "None", ":", "\n", "        ", "args", ".", "baseroot", "=", "args", ".", "rootdir", "\n", "args", ".", "rootdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "rootdir", ",", "args", ".", "sweep_name", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "baseroot", "=", "args", ".", "rootdir", "\n", "\n", "", "args", ".", "config_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "rootdir", ",", "'configurations'", ")", "\n", "args", ".", "result_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "rootdir", ",", "'results'", ")", "\n", "args", ".", "exp_name", "=", "\"exp_\"", "+", "args", ".", "timestamp", "\n", "args", ".", "csv_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "rootdir", ",", "'csv'", ")", "\n", "utils", ".", "mkdir", "(", "args", ".", "config_dir", ")", "\n", "utils", ".", "mkdir", "(", "args", ".", "result_dir", ")", "\n", "utils", ".", "mkdir", "(", "args", ".", "csv_dir", ")", "\n", "if", "not", "hasattr", "(", "args", ",", "'save_result_file'", ")", "or", "args", ".", "save_result_file", "is", "None", ":", "\n", "        ", "args", ".", "save_result_file", "=", "'default.csv'", "\n", "\n", "# Dump these parameters for reproducibility.", "\n", "# These should be inside a different directory than the results,", "\n", "# because then you have to open each directory separately to see what it contained!", "\n", "", "dump_parameters", "(", "args", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.cost_matrix": [[12, 18], ["x.unsqueeze", "y.unsqueeze", "torch.sum", "torch.abs"], "function", ["None"], ["def", "cost_matrix", "(", "x", ",", "y", ",", "p", "=", "2", ")", ":", "\n", "    ", "\"Returns the matrix of $|x_i-y_j|^p$.\"", "\n", "x_col", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "y_lin", "=", "y", ".", "unsqueeze", "(", "0", ")", "\n", "c", "=", "torch", ".", "sum", "(", "(", "torch", ".", "abs", "(", "x_col", "-", "y_lin", ")", ")", "**", "p", ",", "2", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_histogram": [[19, 44], ["print", "print", "unnormalized_weights.squeeze.squeeze", "print", "numpy.ones", "activations[].keys", "torch.softmax", "numpy.ones", "torch.softmax().data.cpu().numpy().astype", "torch.softmax().data.cpu().numpy", "layer_name.split", "torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax", "torch.softmax"], "function", ["None"], ["", "def", "get_histogram", "(", "args", ",", "idx", ",", "cardinality", ",", "layer_name", ",", "activations", "=", "None", ",", "return_numpy", "=", "True", ",", "float64", "=", "False", ")", ":", "\n", "    ", "if", "activations", "is", "None", ":", "\n", "# returns a uniform measure", "\n", "        ", "if", "not", "args", ".", "unbalanced", ":", "\n", "            ", "print", "(", "\"returns a uniform measure of cardinality: \"", ",", "cardinality", ")", "\n", "return", "np", ".", "ones", "(", "cardinality", ")", "/", "cardinality", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "ones", "(", "cardinality", ")", "\n", "", "", "else", ":", "\n", "# return softmax over the activations raised to a temperature", "\n", "# layer_name is like 'fc1.weight', while activations only contains 'fc1'", "\n", "        ", "print", "(", "activations", "[", "idx", "]", ".", "keys", "(", ")", ")", "\n", "unnormalized_weights", "=", "activations", "[", "idx", "]", "[", "layer_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "]", "\n", "print", "(", "\"For layer {},  shape of unnormalized weights is \"", ".", "format", "(", "layer_name", ")", ",", "unnormalized_weights", ".", "shape", ")", "\n", "unnormalized_weights", "=", "unnormalized_weights", ".", "squeeze", "(", ")", "\n", "assert", "unnormalized_weights", ".", "shape", "[", "0", "]", "==", "cardinality", "\n", "\n", "if", "return_numpy", ":", "\n", "            ", "if", "float64", ":", "\n", "                ", "return", "torch", ".", "softmax", "(", "unnormalized_weights", "/", "args", ".", "softmax_temperature", ",", "dim", "=", "0", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "                ", "return", "torch", ".", "softmax", "(", "unnormalized_weights", "/", "args", ".", "softmax_temperature", ",", "dim", "=", "0", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "torch", ".", "softmax", "(", "unnormalized_weights", "/", "args", ".", "softmax_temperature", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_wassersteinized_layers_modularized": [[45, 248], ["ground_metric.GroundMetric", "len", "enumerate", "torch.device", "torch.device", "list", "zip", "print", "ground_metric_object.process.data.cpu().numpy", "print", "print", "print", "setattr", "avg_aligned_layers.append", "zip", "networks[].named_parameters", "networks[].named_parameters", "len", "fc_layer0_weight.data.view", "fc_layer1_weight.data.view", "print", "print", "print", "wasserstein_ensemble.get_histogram", "wasserstein_ensemble.get_histogram", "wasserstein_ensemble._get_neuron_importance_histogram", "wasserstein_ensemble._get_neuron_importance_histogram", "print", "ot.emd", "ot.bregman.sinkhorn", "torch.from_numpy().cuda().float", "torch.from_numpy().float", "print", "print", "print", "print", "torch.matmul", "torch.matmul", "geometric_fc.view.view", "model0_aligned_layers.append", "wasserstein_ensemble.update_model", "print", "setattr", "networks[].parameters", "networks[].parameters", "ground_metric.GroundMetric.process", "ground_metric.GroundMetric.process", "torch.matmul.unsqueeze().repeat", "torch.bmm().permute", "ground_metric.GroundMetric.process", "ground_metric.GroundMetric.process", "print", "print", "ground_metric_object.process.data.cpu", "torch.diag", "torch.matmul", "print", "print", "print", "print", "print", "torch.trace", "torch.sum", "torch.trace", "torch.sum", "torch.matmul.t", "torch.matmul.contiguous().view", "torch.matmul.t", "fc_layer0_weight.data.view.view", "t_fc0_model.view.view", "setattr", "fc_layer0_weight.data.view.view", "fc_layer1_weight.data.view.view", "torch.matmul.contiguous().view", "fc_layer1_weight.data.view.view", "fc_layer0_weight.data.view().permute", "torch.bmm().permute", "torch.matmul.contiguous().view", "torch.matmul", "avg_aligned_layers.append", "avg_aligned_layers.append", "torch.from_numpy().cuda", "torch.from_numpy", "torch.matmul.t", "torch.ones().to", "torch.matmul.sum", "torch.trace", "torch.sum", "fc_layer1_weight.data.view.view", "fc_layer1_weight.data.view.view", "str", "torch.matmul.unsqueeze", "torch.bmm", "torch.ones().cuda", "torch.ones", "torch.trace", "torch.sum", "torch.matmul.contiguous", "fc_layer0_weight.data.view.permute", "torch.matmul.contiguous", "fc_layer0_weight.data.view", "torch.bmm", "torch.matmul.contiguous", "torch.from_numpy", "torch.ones", "torch.matmul.unsqueeze().repeat", "torch.ones", "torch.matmul.unsqueeze"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_histogram", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_histogram", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_neuron_importance_histogram", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_neuron_importance_histogram", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.update_model", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process"], ["", "", "", "def", "get_wassersteinized_layers_modularized", "(", "args", ",", "networks", ",", "activations", "=", "None", ",", "eps", "=", "1e-7", ",", "test_loader", "=", "None", ")", ":", "\n", "    ", "'''\n    Two neural networks that have to be averaged in geometric manner (i.e. layerwise).\n    The 1st network is aligned with respect to the other via wasserstein distance.\n    Also this assumes that all the layers are either fully connected or convolutional *(with no bias)*\n\n    :param networks: list of networks\n    :param activations: If not None, use it to build the activation histograms.\n    Otherwise assumes uniform distribution over neurons in a layer.\n    :return: list of layer weights 'wassersteinized'\n    '''", "\n", "\n", "# simple_model_0, simple_model_1 = networks[0], networks[1]", "\n", "# simple_model_0 = get_trained_model(0, model='simplenet')", "\n", "# simple_model_1 = get_trained_model(1, model='simplenet')", "\n", "\n", "avg_aligned_layers", "=", "[", "]", "\n", "# cumulative_T_var = None", "\n", "T_var", "=", "None", "\n", "# print(list(networks[0].parameters()))", "\n", "previous_layer_shape", "=", "None", "\n", "ground_metric_object", "=", "GroundMetric", "(", "args", ")", "\n", "\n", "if", "args", ".", "eval_aligned", ":", "\n", "        ", "model0_aligned_layers", "=", "[", "]", "\n", "\n", "", "if", "args", ".", "gpu_id", "==", "-", "1", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu_id", ")", ")", "\n", "\n", "\n", "", "num_layers", "=", "len", "(", "list", "(", "zip", "(", "networks", "[", "0", "]", ".", "parameters", "(", ")", ",", "networks", "[", "1", "]", ".", "parameters", "(", ")", ")", ")", ")", "\n", "for", "idx", ",", "(", "(", "layer0_name", ",", "fc_layer0_weight", ")", ",", "(", "layer1_name", ",", "fc_layer1_weight", ")", ")", "in", "enumerate", "(", "zip", "(", "networks", "[", "0", "]", ".", "named_parameters", "(", ")", ",", "networks", "[", "1", "]", ".", "named_parameters", "(", ")", ")", ")", ":", "\n", "\n", "        ", "assert", "fc_layer0_weight", ".", "shape", "==", "fc_layer1_weight", ".", "shape", "\n", "print", "(", "\"Previous layer shape is \"", ",", "previous_layer_shape", ")", "\n", "previous_layer_shape", "=", "fc_layer1_weight", ".", "shape", "\n", "\n", "mu_cardinality", "=", "fc_layer0_weight", ".", "shape", "[", "0", "]", "\n", "nu_cardinality", "=", "fc_layer1_weight", ".", "shape", "[", "0", "]", "\n", "\n", "# mu = np.ones(fc_layer0_weight.shape[0])/fc_layer0_weight.shape[0]", "\n", "# nu = np.ones(fc_layer1_weight.shape[0])/fc_layer1_weight.shape[0]", "\n", "\n", "layer_shape", "=", "fc_layer0_weight", ".", "shape", "\n", "if", "len", "(", "layer_shape", ")", ">", "2", ":", "\n", "            ", "is_conv", "=", "True", "\n", "# For convolutional layers, it is (#out_channels, #in_channels, height, width)", "\n", "fc_layer0_weight_data", "=", "fc_layer0_weight", ".", "data", ".", "view", "(", "fc_layer0_weight", ".", "shape", "[", "0", "]", ",", "fc_layer0_weight", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "fc_layer1_weight_data", "=", "fc_layer1_weight", ".", "data", ".", "view", "(", "fc_layer1_weight", ".", "shape", "[", "0", "]", ",", "fc_layer1_weight", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "is_conv", "=", "False", "\n", "fc_layer0_weight_data", "=", "fc_layer0_weight", ".", "data", "\n", "fc_layer1_weight_data", "=", "fc_layer1_weight", ".", "data", "\n", "\n", "", "if", "idx", "==", "0", ":", "\n", "            ", "if", "is_conv", ":", "\n", "                ", "M", "=", "ground_metric_object", ".", "process", "(", "fc_layer0_weight_data", ".", "view", "(", "fc_layer0_weight_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "\n", "fc_layer1_weight_data", ".", "view", "(", "fc_layer1_weight_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "# M = cost_matrix(fc_layer0_weight_data.view(fc_layer0_weight_data.shape[0], -1),", "\n", "#                 fc_layer1_weight_data.view(fc_layer1_weight_data.shape[0], -1))", "\n", "", "else", ":", "\n", "# print(\"layer data is \", fc_layer0_weight_data, fc_layer1_weight_data)", "\n", "                ", "M", "=", "ground_metric_object", ".", "process", "(", "fc_layer0_weight_data", ",", "fc_layer1_weight_data", ")", "\n", "# M = cost_matrix(fc_layer0_weight, fc_layer1_weight)", "\n", "\n", "", "aligned_wt", "=", "fc_layer0_weight_data", "\n", "", "else", ":", "\n", "\n", "            ", "print", "(", "\"shape of layer: model 0\"", ",", "fc_layer0_weight_data", ".", "shape", ")", "\n", "print", "(", "\"shape of layer: model 1\"", ",", "fc_layer1_weight_data", ".", "shape", ")", "\n", "print", "(", "\"shape of previous transport map\"", ",", "T_var", ".", "shape", ")", "\n", "\n", "# aligned_wt = None, this caches the tensor and causes OOM", "\n", "if", "is_conv", ":", "\n", "                ", "T_var_conv", "=", "T_var", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "fc_layer0_weight_data", ".", "shape", "[", "2", "]", ",", "1", ",", "1", ")", "\n", "aligned_wt", "=", "torch", ".", "bmm", "(", "fc_layer0_weight_data", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "T_var_conv", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "M", "=", "ground_metric_object", ".", "process", "(", "\n", "aligned_wt", ".", "contiguous", "(", ")", ".", "view", "(", "aligned_wt", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "\n", "fc_layer1_weight_data", ".", "view", "(", "fc_layer1_weight_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "if", "fc_layer0_weight", ".", "data", ".", "shape", "[", "1", "]", "!=", "T_var", ".", "shape", "[", "0", "]", ":", "\n", "# Handles the switch from convolutional layers to fc layers", "\n", "                    ", "fc_layer0_unflattened", "=", "fc_layer0_weight", ".", "data", ".", "view", "(", "fc_layer0_weight", ".", "shape", "[", "0", "]", ",", "T_var", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "aligned_wt", "=", "torch", ".", "bmm", "(", "\n", "fc_layer0_unflattened", ",", "\n", "T_var", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "fc_layer0_unflattened", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "aligned_wt", "=", "aligned_wt", ".", "contiguous", "(", ")", ".", "view", "(", "aligned_wt", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "# print(\"layer data (aligned) is \", aligned_wt, fc_layer1_weight_data)", "\n", "                    ", "aligned_wt", "=", "torch", ".", "matmul", "(", "fc_layer0_weight", ".", "data", ",", "T_var", ")", "\n", "# M = cost_matrix(aligned_wt, fc_layer1_weight)", "\n", "", "M", "=", "ground_metric_object", ".", "process", "(", "aligned_wt", ",", "fc_layer1_weight", ")", "\n", "print", "(", "\"ground metric is \"", ",", "M", ")", "\n", "", "if", "args", ".", "skip_last_layer", "and", "idx", "==", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "print", "(", "\"Simple averaging of last layer weights. NO transport map needs to be computed\"", ")", "\n", "if", "args", ".", "ensemble_step", "!=", "0.5", ":", "\n", "                    ", "avg_aligned_layers", ".", "append", "(", "(", "1", "-", "args", ".", "ensemble_step", ")", "*", "aligned_wt", "+", "\n", "args", ".", "ensemble_step", "*", "fc_layer1_weight", ")", "\n", "", "else", ":", "\n", "                    ", "avg_aligned_layers", ".", "append", "(", "(", "aligned_wt", "+", "fc_layer1_weight", ")", "/", "2", ")", "\n", "", "return", "avg_aligned_layers", "\n", "\n", "", "", "if", "args", ".", "importance", "is", "None", "or", "(", "idx", "==", "num_layers", "-", "1", ")", ":", "\n", "            ", "mu", "=", "get_histogram", "(", "args", ",", "0", ",", "mu_cardinality", ",", "layer0_name", ")", "\n", "nu", "=", "get_histogram", "(", "args", ",", "1", ",", "nu_cardinality", ",", "layer1_name", ")", "\n", "", "else", ":", "\n", "# mu = _get_neuron_importance_histogram(args, aligned_wt, is_conv)", "\n", "            ", "mu", "=", "_get_neuron_importance_histogram", "(", "args", ",", "fc_layer0_weight_data", ",", "is_conv", ")", "\n", "nu", "=", "_get_neuron_importance_histogram", "(", "args", ",", "fc_layer1_weight_data", ",", "is_conv", ")", "\n", "print", "(", "mu", ",", "nu", ")", "\n", "assert", "args", ".", "proper_marginals", "\n", "\n", "", "cpuM", "=", "M", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "args", ".", "exact", ":", "\n", "            ", "T", "=", "ot", ".", "emd", "(", "mu", ",", "nu", ",", "cpuM", ")", "\n", "", "else", ":", "\n", "            ", "T", "=", "ot", ".", "bregman", ".", "sinkhorn", "(", "mu", ",", "nu", ",", "cpuM", ",", "reg", "=", "args", ".", "reg", ")", "\n", "# T = ot.emd(mu, nu, log_cpuM)", "\n", "\n", "", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "            ", "T_var", "=", "torch", ".", "from_numpy", "(", "T", ")", ".", "cuda", "(", "args", ".", "gpu_id", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "T_var", "=", "torch", ".", "from_numpy", "(", "T", ")", ".", "float", "(", ")", "\n", "\n", "# torch.set_printoptions(profile=\"full\")", "\n", "", "print", "(", "\"the transport map is \"", ",", "T_var", ")", "\n", "# torch.set_printoptions(profile=\"default\")", "\n", "\n", "if", "args", ".", "correction", ":", "\n", "            ", "if", "not", "args", ".", "proper_marginals", ":", "\n", "# think of it as m x 1, scaling weights for m linear combinations of points in X", "\n", "                ", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "# marginals = torch.mv(T_var.t(), torch.ones(T_var.shape[0]).cuda(args.gpu_id))  # T.t().shape[1] = T.shape[0]", "\n", "                    ", "marginals", "=", "torch", ".", "ones", "(", "T_var", ".", "shape", "[", "0", "]", ")", ".", "cuda", "(", "args", ".", "gpu_id", ")", "/", "T_var", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "# marginals = torch.mv(T_var.t(),", "\n", "#                      torch.ones(T_var.shape[0]))  # T.t().shape[1] = T.shape[0]", "\n", "                    ", "marginals", "=", "torch", ".", "ones", "(", "T_var", ".", "shape", "[", "0", "]", ")", "/", "T_var", ".", "shape", "[", "0", "]", "\n", "", "marginals", "=", "torch", ".", "diag", "(", "1.0", "/", "(", "marginals", "+", "eps", ")", ")", "# take inverse", "\n", "T_var", "=", "torch", ".", "matmul", "(", "T_var", ",", "marginals", ")", "\n", "", "else", ":", "\n", "# marginals_alpha = T_var @ torch.ones(T_var.shape[1], dtype=T_var.dtype).to(device)", "\n", "                ", "marginals_beta", "=", "T_var", ".", "t", "(", ")", "@", "torch", ".", "ones", "(", "T_var", ".", "shape", "[", "0", "]", ",", "dtype", "=", "T_var", ".", "dtype", ")", ".", "to", "(", "device", ")", "\n", "\n", "marginals", "=", "(", "1", "/", "(", "marginals_beta", "+", "eps", ")", ")", "\n", "print", "(", "\"shape of inverse marginals beta is \"", ",", "marginals_beta", ".", "shape", ")", "\n", "print", "(", "\"inverse marginals beta is \"", ",", "marginals_beta", ")", "\n", "\n", "T_var", "=", "T_var", "*", "marginals", "\n", "# i.e., how a neuron of 2nd model is constituted by the neurons of 1st model", "\n", "# this should all be ones, and number equal to number of neurons in 2nd model", "\n", "print", "(", "T_var", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "# assert (T_var.sum(dim=0) == torch.ones(T_var.shape[1], dtype=T_var.dtype).to(device)).all()", "\n", "\n", "", "", "if", "args", ".", "debug", ":", "\n", "            ", "if", "idx", "==", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "print", "(", "\"there goes the last transport map: \\n \"", ",", "T_var", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"there goes the transport map at layer {}: \\n \"", ".", "format", "(", "idx", ")", ",", "T_var", ")", "\n", "\n", "", "print", "(", "\"Ratio of trace to the matrix sum: \"", ",", "torch", ".", "trace", "(", "T_var", ")", "/", "torch", ".", "sum", "(", "T_var", ")", ")", "\n", "\n", "", "print", "(", "\"Ratio of trace to the matrix sum: \"", ",", "torch", ".", "trace", "(", "T_var", ")", "/", "torch", ".", "sum", "(", "T_var", ")", ")", "\n", "print", "(", "\"Here, trace is {} and matrix sum is {} \"", ".", "format", "(", "torch", ".", "trace", "(", "T_var", ")", ",", "torch", ".", "sum", "(", "T_var", ")", ")", ")", "\n", "setattr", "(", "args", ",", "'trace_sum_ratio_{}'", ".", "format", "(", "layer0_name", ")", ",", "(", "torch", ".", "trace", "(", "T_var", ")", "/", "torch", ".", "sum", "(", "T_var", ")", ")", ".", "item", "(", ")", ")", "\n", "\n", "if", "args", ".", "past_correction", ":", "\n", "            ", "print", "(", "\"this is past correction for weight mode\"", ")", "\n", "print", "(", "\"Shape of aligned wt is \"", ",", "aligned_wt", ".", "shape", ")", "\n", "print", "(", "\"Shape of fc_layer0_weight_data is \"", ",", "fc_layer0_weight_data", ".", "shape", ")", "\n", "t_fc0_model", "=", "torch", ".", "matmul", "(", "T_var", ".", "t", "(", ")", ",", "aligned_wt", ".", "contiguous", "(", ")", ".", "view", "(", "aligned_wt", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "t_fc0_model", "=", "torch", ".", "matmul", "(", "T_var", ".", "t", "(", ")", ",", "fc_layer0_weight_data", ".", "view", "(", "fc_layer0_weight_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "# Average the weights of aligned first layers", "\n", "", "if", "args", ".", "ensemble_step", "!=", "0.5", ":", "\n", "            ", "geometric_fc", "=", "(", "(", "1", "-", "args", ".", "ensemble_step", ")", "*", "t_fc0_model", "+", "\n", "args", ".", "ensemble_step", "*", "fc_layer1_weight_data", ".", "view", "(", "fc_layer1_weight_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "geometric_fc", "=", "(", "t_fc0_model", "+", "fc_layer1_weight_data", ".", "view", "(", "fc_layer1_weight_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "/", "2", "\n", "", "if", "is_conv", "and", "layer_shape", "!=", "geometric_fc", ".", "shape", ":", "\n", "            ", "geometric_fc", "=", "geometric_fc", ".", "view", "(", "layer_shape", ")", "\n", "", "avg_aligned_layers", ".", "append", "(", "geometric_fc", ")", "\n", "\n", "# get the performance of the model 0 aligned with respect to the model 1", "\n", "if", "args", ".", "eval_aligned", ":", "\n", "            ", "if", "is_conv", "and", "layer_shape", "!=", "t_fc0_model", ".", "shape", ":", "\n", "                ", "t_fc0_model", "=", "t_fc0_model", ".", "view", "(", "layer_shape", ")", "\n", "", "model0_aligned_layers", ".", "append", "(", "t_fc0_model", ")", "\n", "_", ",", "acc", "=", "update_model", "(", "args", ",", "networks", "[", "0", "]", ",", "model0_aligned_layers", ",", "test", "=", "True", ",", "\n", "test_loader", "=", "test_loader", ",", "idx", "=", "0", ")", "\n", "print", "(", "\"For layer idx {}, accuracy of the updated model is {}\"", ".", "format", "(", "idx", ",", "acc", ")", ")", "\n", "setattr", "(", "args", ",", "'model0_aligned_acc_layer_{}'", ".", "format", "(", "str", "(", "idx", ")", ")", ",", "acc", ")", "\n", "if", "idx", "==", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "setattr", "(", "args", ",", "'model0_aligned_acc'", ",", "acc", ")", "\n", "\n", "", "", "", "return", "avg_aligned_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.print_stats": [[250, 254], ["print", "print", "arr.max", "arr.mean", "arr.min", "numpy.median", "arr.std"], "function", ["None"], ["", "def", "print_stats", "(", "arr", ",", "nick", "=", "\"\"", ")", ":", "\n", "    ", "print", "(", "nick", ")", "\n", "print", "(", "\"summary stats are: \\n max: {}, mean: {}, min: {}, median: {}, std: {} \\n\"", ".", "format", "(", "\n", "arr", ".", "max", "(", ")", ",", "arr", ".", "mean", "(", ")", ",", "arr", ".", "min", "(", ")", ",", "np", ".", "median", "(", "arr", ")", ",", "arr", ".", "std", "(", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_activation_distance_stats": [[256, 267], ["torch.mean", "torch.std", "print", "print", "print", "wasserstein_ensemble.cost_matrix", "torch.max", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.cost_matrix"], ["", "def", "get_activation_distance_stats", "(", "activations_0", ",", "activations_1", ",", "layer_name", "=", "\"\"", ")", ":", "\n", "    ", "if", "layer_name", "!=", "\"\"", ":", "\n", "        ", "print", "(", "\"In layer {}: getting activation distance statistics\"", ".", "format", "(", "layer_name", ")", ")", "\n", "", "M", "=", "cost_matrix", "(", "activations_0", ",", "activations_1", ")", "**", "(", "1", "/", "2", ")", "\n", "mean_dists", "=", "torch", ".", "mean", "(", "M", ",", "dim", "=", "-", "1", ")", "\n", "max_dists", "=", "torch", ".", "max", "(", "M", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "min_dists", "=", "torch", ".", "min", "(", "M", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "std_dists", "=", "torch", ".", "std", "(", "M", ",", "dim", "=", "-", "1", ")", "\n", "\n", "print", "(", "\"Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): \\n\"", ")", "\n", "print", "(", "\"Max : {}, Mean : {}, Min : {}, Std: {}\"", ".", "format", "(", "torch", ".", "mean", "(", "max_dists", ")", ",", "torch", ".", "mean", "(", "mean_dists", ")", ",", "torch", ".", "mean", "(", "min_dists", ")", ",", "torch", ".", "mean", "(", "std_dists", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.update_model": [[268, 299], ["model.get_model_from_name", "model.state_dict", "print", "print", "model.state_dict.items", "updated_model.cuda.load_state_dict", "updated_model.cuda.cuda", "len", "len", "print", "routines.test", "print", "model.state_dict.items", "len"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.get_model_from_name", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test"], ["", "def", "update_model", "(", "args", ",", "model", ",", "new_params", ",", "test", "=", "False", ",", "test_loader", "=", "None", ",", "reversed", "=", "False", ",", "idx", "=", "-", "1", ")", ":", "\n", "\n", "    ", "updated_model", "=", "get_model_from_name", "(", "args", ",", "idx", "=", "idx", ")", "\n", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "updated_model", "=", "updated_model", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "\n", "", "layer_idx", "=", "0", "\n", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "print", "(", "\"len of model_state_dict is \"", ",", "len", "(", "model_state_dict", ".", "items", "(", ")", ")", ")", "\n", "print", "(", "\"len of new_params is \"", ",", "len", "(", "new_params", ")", ")", "\n", "\n", "for", "key", ",", "value", "in", "model_state_dict", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"updated parameters for layer \"", ",", "key", ")", "\n", "model_state_dict", "[", "key", "]", "=", "new_params", "[", "layer_idx", "]", "\n", "layer_idx", "+=", "1", "\n", "if", "layer_idx", "==", "len", "(", "new_params", ")", ":", "\n", "            ", "break", "\n", "\n", "\n", "", "", "updated_model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "if", "test", ":", "\n", "        ", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "final_acc", "=", "routines", ".", "test", "(", "args", ",", "updated_model", ",", "test_loader", ",", "log_dict", ")", "\n", "print", "(", "\"accuracy after update is \"", ",", "final_acc", ")", "\n", "", "else", ":", "\n", "         ", "final_acc", "=", "None", "\n", "\n", "", "return", "updated_model", ",", "final_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._check_activation_sizes": [[300, 305], ["None"], "function", ["None"], ["", "def", "_check_activation_sizes", "(", "args", ",", "acts0", ",", "acts1", ")", ":", "\n", "    ", "if", "args", ".", "width_ratio", "==", "1", ":", "\n", "        ", "return", "acts0", ".", "shape", "==", "acts1", ".", "shape", "\n", "", "else", ":", "\n", "        ", "return", "acts0", ".", "shape", "[", "-", "1", "]", "/", "acts1", ".", "shape", "[", "-", "1", "]", "==", "args", ".", "width_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.process_activations": [[306, 329], ["[].squeeze", "[].squeeze", "wasserstein_ensemble._check_activation_sizes", "print", "len", "activations_0.permute().contiguous.t", "activations_1.permute().contiguous.t", "len", "reorder_dim.append", "print", "activations_0.permute().contiguous.permute().contiguous", "activations_1.permute().contiguous.permute().contiguous", "layer0_name.replace", "layer1_name.replace", "range", "activations_0.permute().contiguous.permute", "activations_1.permute().contiguous.permute", "len", "layer0_name.split", "layer1_name.split"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._check_activation_sizes"], ["", "", "def", "process_activations", "(", "args", ",", "activations", ",", "layer0_name", ",", "layer1_name", ")", ":", "\n", "    ", "activations_0", "=", "activations", "[", "0", "]", "[", "layer0_name", ".", "replace", "(", "'.'", "+", "layer0_name", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ",", "''", ")", "]", ".", "squeeze", "(", "1", ")", "\n", "activations_1", "=", "activations", "[", "1", "]", "[", "layer1_name", ".", "replace", "(", "'.'", "+", "layer1_name", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ",", "''", ")", "]", ".", "squeeze", "(", "1", ")", "\n", "\n", "# assert activations_0.shape == activations_1.shape", "\n", "_check_activation_sizes", "(", "args", ",", "activations_0", ",", "activations_1", ")", "\n", "\n", "if", "args", ".", "same_model", "!=", "-", "1", ":", "\n", "# sanity check when averaging the same model (with value being the model index)", "\n", "        ", "assert", "(", "activations_0", "==", "activations_1", ")", ".", "all", "(", ")", "\n", "print", "(", "\"Are the activations the same? \"", ",", "(", "activations_0", "==", "activations_1", ")", ".", "all", "(", ")", ")", "\n", "\n", "", "if", "len", "(", "activations_0", ".", "shape", ")", "==", "2", ":", "\n", "        ", "activations_0", "=", "activations_0", ".", "t", "(", ")", "\n", "activations_1", "=", "activations_1", ".", "t", "(", ")", "\n", "", "elif", "len", "(", "activations_0", ".", "shape", ")", ">", "2", ":", "\n", "        ", "reorder_dim", "=", "[", "l", "for", "l", "in", "range", "(", "1", ",", "len", "(", "activations_0", ".", "shape", ")", ")", "]", "\n", "reorder_dim", ".", "append", "(", "0", ")", "\n", "print", "(", "\"reorder_dim is \"", ",", "reorder_dim", ")", "\n", "activations_0", "=", "activations_0", ".", "permute", "(", "*", "reorder_dim", ")", ".", "contiguous", "(", ")", "\n", "activations_1", "=", "activations_1", ".", "permute", "(", "*", "reorder_dim", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "return", "activations_0", ",", "activations_1", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._reduce_layer_name": [[330, 334], ["layer_name.replace", "layer_name.split"], "function", ["None"], ["", "def", "_reduce_layer_name", "(", "layer_name", ")", ":", "\n", "# print(\"layer0_name is \", layer0_name) It was features.0.weight", "\n", "# previous way assumed only one dot, so now I replace the stuff after last dot", "\n", "    ", "return", "layer_name", ".", "replace", "(", "'.'", "+", "layer_name", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_layer_weights": [[335, 343], ["layer_weight.data.view"], "function", ["None"], ["", "def", "_get_layer_weights", "(", "layer_weight", ",", "is_conv", ")", ":", "\n", "    ", "if", "is_conv", ":", "\n", "# For convolutional layers, it is (#out_channels, #in_channels, height, width)", "\n", "        ", "layer_weight_data", "=", "layer_weight", ".", "data", ".", "view", "(", "layer_weight", ".", "shape", "[", "0", "]", ",", "layer_weight", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "layer_weight_data", "=", "layer_weight", ".", "data", "\n", "\n", "", "return", "layer_weight_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._process_ground_metric_from_acts": [[344, 368], ["print", "print", "ground_metric_object.process", "ground_metric_object.process", "ground_metric_object.process", "ground_metric_object.process", "ground_metric_object.process", "ground_metric_object.process", "activations[].view", "activations[].view", "activations[].view", "activations[].view", "activations[].view", "activations[].view", "activations[].view"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process"], ["", "def", "_process_ground_metric_from_acts", "(", "args", ",", "is_conv", ",", "ground_metric_object", ",", "activations", ")", ":", "\n", "    ", "print", "(", "\"inside refactored\"", ")", "\n", "if", "is_conv", ":", "\n", "        ", "if", "not", "args", ".", "gromov", ":", "\n", "            ", "M0", "=", "ground_metric_object", ".", "process", "(", "activations", "[", "0", "]", ".", "view", "(", "activations", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "\n", "activations", "[", "1", "]", ".", "view", "(", "activations", "[", "1", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "M0", "=", "ground_metric_object", ".", "process", "(", "activations", "[", "0", "]", ".", "view", "(", "activations", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "\n", "activations", "[", "0", "]", ".", "view", "(", "activations", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "M1", "=", "ground_metric_object", ".", "process", "(", "activations", "[", "1", "]", ".", "view", "(", "activations", "[", "1", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "\n", "activations", "[", "1", "]", ".", "view", "(", "activations", "[", "1", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "", "print", "(", "\"# of ground metric features is \"", ",", "(", "activations", "[", "0", "]", ".", "view", "(", "activations", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ".", "shape", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "args", ".", "gromov", ":", "\n", "            ", "M0", "=", "ground_metric_object", ".", "process", "(", "activations", "[", "0", "]", ",", "activations", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "M0", "=", "ground_metric_object", ".", "process", "(", "activations", "[", "0", "]", ",", "activations", "[", "0", "]", ")", "\n", "M1", "=", "ground_metric_object", ".", "process", "(", "activations", "[", "1", "]", ",", "activations", "[", "1", "]", ")", "\n", "\n", "", "", "if", "args", ".", "gromov", ":", "\n", "        ", "return", "M0", ",", "M1", "\n", "", "else", ":", "\n", "        ", "return", "M0", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._custom_sinkhorn": [[370, 385], ["ot.unbalanced.sinkhorn_knopp_unbalanced", "ot.bregman.sinkhorn", "ot.bregman.sinkhorn_stabilized", "ot.bregman.sinkhorn_epsilon_scaling", "utils.sinkhorn_loss"], "function", ["None"], ["", "", "def", "_custom_sinkhorn", "(", "args", ",", "mu", ",", "nu", ",", "cpuM", ")", ":", "\n", "    ", "if", "not", "args", ".", "unbalanced", ":", "\n", "        ", "if", "args", ".", "sinkhorn_type", "==", "'normal'", ":", "\n", "            ", "T", "=", "ot", ".", "bregman", ".", "sinkhorn", "(", "mu", ",", "nu", ",", "cpuM", ",", "reg", "=", "args", ".", "reg", ")", "\n", "", "elif", "args", ".", "sinkhorn_type", "==", "'stabilized'", ":", "\n", "            ", "T", "=", "ot", ".", "bregman", ".", "sinkhorn_stabilized", "(", "mu", ",", "nu", ",", "cpuM", ",", "reg", "=", "args", ".", "reg", ")", "\n", "", "elif", "args", ".", "sinkhorn_type", "==", "'epsilon'", ":", "\n", "            ", "T", "=", "ot", ".", "bregman", ".", "sinkhorn_epsilon_scaling", "(", "mu", ",", "nu", ",", "cpuM", ",", "reg", "=", "args", ".", "reg", ")", "\n", "", "elif", "args", ".", "sinkhorn_type", "==", "'gpu'", ":", "\n", "            ", "T", ",", "_", "=", "utils", ".", "sinkhorn_loss", "(", "cpuM", ",", "mu", ",", "nu", ",", "gpu_id", "=", "args", ".", "gpu_id", ",", "epsilon", "=", "args", ".", "reg", ",", "return_tmap", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "T", "=", "ot", ".", "unbalanced", ".", "sinkhorn_knopp_unbalanced", "(", "mu", ",", "nu", ",", "cpuM", ",", "reg", "=", "args", ".", "reg", ",", "reg_m", "=", "args", ".", "reg_m", ")", "\n", "", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._sanity_check_tmap": [[387, 391], ["math.isclose", "print", "Exception", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "_sanity_check_tmap", "(", "T", ")", ":", "\n", "    ", "if", "not", "math", ".", "isclose", "(", "np", ".", "sum", "(", "T", ")", ",", "1.0", ",", "abs_tol", "=", "1e-7", ")", ":", "\n", "        ", "print", "(", "\"Sum of transport map is \"", ",", "np", ".", "sum", "(", "T", ")", ")", "\n", "raise", "Exception", "(", "'NAN inside Transport MAP. Most likely due to large ground metric values'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_updated_acts_v0": [[392, 419], ["wasserstein_ensemble.update_model", "utils.get_model_activations", "wasserstein_ensemble.process_activations", "aligned_wt.view", "wasserstein_ensemble._reduce_layer_name"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.update_model", "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.get_model_activations", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.process_activations", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._reduce_layer_name"], ["", "", "def", "_get_updated_acts_v0", "(", "args", ",", "layer_shape", ",", "aligned_wt", ",", "model0_aligned_layers", ",", "networks", ",", "test_loader", ",", "layer_names", ")", ":", "\n", "    ", "'''\n    Return the updated activations of the 0th model with respect to the other one.\n\n    :param args:\n    :param layer_shape:\n    :param aligned_wt:\n    :param model0_aligned_layers:\n    :param networks:\n    :param test_loader:\n    :param layer_names:\n    :return:\n    '''", "\n", "if", "layer_shape", "!=", "aligned_wt", ".", "shape", ":", "\n", "        ", "updated_aligned_wt", "=", "aligned_wt", ".", "view", "(", "layer_shape", ")", "\n", "", "else", ":", "\n", "        ", "updated_aligned_wt", "=", "aligned_wt", "\n", "\n", "", "updated_model0", ",", "_", "=", "update_model", "(", "args", ",", "networks", "[", "0", "]", ",", "model0_aligned_layers", "+", "[", "updated_aligned_wt", "]", ",", "test", "=", "True", ",", "\n", "test_loader", "=", "test_loader", ",", "idx", "=", "0", ")", "\n", "updated_activations", "=", "utils", ".", "get_model_activations", "(", "args", ",", "[", "updated_model0", ",", "networks", "[", "1", "]", "]", ",", "\n", "config", "=", "args", ".", "config", ",", "\n", "layer_name", "=", "_reduce_layer_name", "(", "layer_names", "[", "0", "]", ")", ",", "selective", "=", "True", ")", "\n", "\n", "updated_activations_0", ",", "updated_activations_1", "=", "process_activations", "(", "args", ",", "updated_activations", ",", "\n", "layer_names", "[", "0", "]", ",", "layer_names", "[", "1", "]", ")", "\n", "return", "updated_activations_0", ",", "updated_activations_1", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_updated_acts_v1": [[420, 439], ["utils.get_model_activations", "wasserstein_ensemble.process_activations"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.utils.get_model_activations", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.process_activations"], ["", "def", "_get_updated_acts_v1", "(", "args", ",", "networks", ",", "test_loader", ",", "layer_names", ")", ":", "\n", "    ", "'''\n    Return the updated activations of the 0th model with respect to the other one.\n\n    :param args:\n    :param layer_shape:\n    :param aligned_wt:\n    :param model0_aligned_layers:\n    :param networks:\n    :param test_loader:\n    :param layer_names:\n    :return:\n    '''", "\n", "updated_activations", "=", "utils", ".", "get_model_activations", "(", "args", ",", "networks", ",", "\n", "config", "=", "args", ".", "config", ")", "\n", "\n", "updated_activations_0", ",", "updated_activations_1", "=", "process_activations", "(", "args", ",", "updated_activations", ",", "\n", "layer_names", "[", "0", "]", ",", "layer_names", "[", "1", "]", ")", "\n", "return", "updated_activations_0", ",", "updated_activations_1", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._check_layer_sizes": [[440, 463], ["range", "len"], "function", ["None"], ["", "def", "_check_layer_sizes", "(", "args", ",", "layer_idx", ",", "shape1", ",", "shape2", ",", "num_layers", ")", ":", "\n", "    ", "if", "args", ".", "width_ratio", "==", "1", ":", "\n", "        ", "return", "shape1", "==", "shape2", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "            ", "if", "layer_idx", "==", "0", ":", "\n", "                ", "return", "shape1", "[", "-", "1", "]", "==", "shape2", "[", "-", "1", "]", "and", "(", "shape1", "[", "0", "]", "/", "shape2", "[", "0", "]", ")", "==", "args", ".", "width_ratio", "\n", "", "elif", "layer_idx", "==", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "return", "(", "shape1", "[", "-", "1", "]", "/", "shape2", "[", "-", "1", "]", ")", "==", "args", ".", "width_ratio", "and", "shape1", "[", "0", "]", "==", "shape2", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "ans", "=", "True", "\n", "for", "ix", "in", "range", "(", "len", "(", "shape1", ")", ")", ":", "\n", "                    ", "ans", "=", "ans", "and", "shape1", "[", "ix", "]", "/", "shape2", "[", "ix", "]", "==", "args", ".", "width_ratio", "\n", "", "return", "ans", "\n", "", "", "elif", "args", ".", "dataset", "[", "0", ":", "7", "]", "==", "'Cifar10'", ":", "\n", "            ", "assert", "args", ".", "second_model_name", "is", "not", "None", "\n", "if", "layer_idx", "==", "0", "or", "layer_idx", "==", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "return", "shape1", "==", "shape2", "\n", "", "else", ":", "\n", "                ", "if", "(", "not", "args", ".", "reverse", "and", "layer_idx", "==", "(", "num_layers", "-", "2", ")", ")", "or", "(", "args", ".", "reverse", "and", "layer_idx", "==", "1", ")", ":", "\n", "                    ", "return", "(", "shape1", "[", "1", "]", "/", "shape2", "[", "1", "]", ")", "==", "args", ".", "width_ratio", "\n", "", "else", ":", "\n", "                    ", "return", "(", "shape1", "[", "0", "]", "/", "shape2", "[", "0", "]", ")", "==", "args", ".", "width_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._compute_marginals": [[465, 500], ["print", "print", "torch.ones", "torch.matmul", "print", "print", "print", "print", "marginals.cuda.cuda", "T_var.t", "torch.ones().to", "T_var.sum", "T_var.max", "T_var.min", "T_var.mean", "T_var.std", "torch.ones"], "function", ["None"], ["", "", "", "", "", "def", "_compute_marginals", "(", "args", ",", "T_var", ",", "device", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "if", "args", ".", "correction", ":", "\n", "        ", "if", "not", "args", ".", "proper_marginals", ":", "\n", "# think of it as m x 1, scaling weights for m linear combinations of points in X", "\n", "            ", "marginals", "=", "torch", ".", "ones", "(", "T_var", ".", "shape", ")", "\n", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "                ", "marginals", "=", "marginals", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "\n", "", "marginals", "=", "torch", ".", "matmul", "(", "T_var", ",", "marginals", ")", "\n", "marginals", "=", "1", "/", "(", "marginals", "+", "eps", ")", "\n", "print", "(", "\"marginals are \"", ",", "marginals", ")", "\n", "\n", "T_var", "=", "T_var", "*", "marginals", "\n", "\n", "", "else", ":", "\n", "# marginals_alpha = T_var @ torch.ones(T_var.shape[1], dtype=T_var.dtype).to(device)", "\n", "            ", "marginals_beta", "=", "T_var", ".", "t", "(", ")", "@", "torch", ".", "ones", "(", "T_var", ".", "shape", "[", "0", "]", ",", "dtype", "=", "T_var", ".", "dtype", ")", ".", "to", "(", "device", ")", "\n", "\n", "marginals", "=", "(", "1", "/", "(", "marginals_beta", "+", "eps", ")", ")", "\n", "print", "(", "\"shape of inverse marginals beta is \"", ",", "marginals_beta", ".", "shape", ")", "\n", "print", "(", "\"inverse marginals beta is \"", ",", "marginals_beta", ")", "\n", "\n", "T_var", "=", "T_var", "*", "marginals", "\n", "# i.e., how a neuron of 2nd model is constituted by the neurons of 1st model", "\n", "# this should all be ones, and number equal to number of neurons in 2nd model", "\n", "print", "(", "T_var", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "# assert (T_var.sum(dim=0) == torch.ones(T_var.shape[1], dtype=T_var.dtype).to(device)).all()", "\n", "\n", "", "print", "(", "\"T_var after correction \"", ",", "T_var", ")", "\n", "print", "(", "\"T_var stats: max {}, min {}, mean {}, std {} \"", ".", "format", "(", "T_var", ".", "max", "(", ")", ",", "T_var", ".", "min", "(", ")", ",", "T_var", ".", "mean", "(", ")", ",", "\n", "T_var", ".", "std", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "marginals", "=", "None", "\n", "\n", "", "return", "T_var", ",", "marginals", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_current_layer_transport_map": [[501, 542], ["print", "print", "M0.data.cpu().numpy", "M0.data.cpu().numpy", "M1.data.cpu().numpy", "ot.gromov.entropic_gromov_wasserstein", "wasserstein_ensemble._sanity_check_tmap", "torch.from_numpy().cuda().float", "torch.from_numpy().float", "print", "ot.emd", "wasserstein_ensemble._custom_sinkhorn", "numpy.multiply().sum", "print", "M0.data.cpu", "setattr", "setattr", "M0.data.cpu", "M1.data.cpu", "torch.from_numpy().cuda", "torch.from_numpy", "torch.norm", "numpy.multiply", "torch.from_numpy", "torch.ones_like", "torch.numel"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._sanity_check_tmap", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._custom_sinkhorn"], ["", "def", "_get_current_layer_transport_map", "(", "args", ",", "mu", ",", "nu", ",", "M0", ",", "M1", ",", "idx", ",", "layer_shape", ",", "eps", "=", "1e-7", ",", "layer_name", "=", "None", ")", ":", "\n", "\n", "    ", "if", "not", "args", ".", "gromov", ":", "\n", "        ", "cpuM", "=", "M0", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "args", ".", "exact", ":", "\n", "            ", "T", "=", "ot", ".", "emd", "(", "mu", ",", "nu", ",", "cpuM", ")", "\n", "", "else", ":", "\n", "            ", "T", "=", "_custom_sinkhorn", "(", "args", ",", "mu", ",", "nu", ",", "cpuM", ")", "\n", "\n", "", "if", "args", ".", "print_distances", ":", "\n", "            ", "ot_cost", "=", "np", ".", "multiply", "(", "T", ",", "cpuM", ")", ".", "sum", "(", ")", "\n", "print", "(", "f'At layer idx {idx} and shape {layer_shape}, the OT cost is '", ",", "ot_cost", ")", "\n", "if", "layer_name", "is", "not", "None", ":", "\n", "                ", "setattr", "(", "args", ",", "f'{layer_name}_layer_{idx}_cost'", ",", "ot_cost", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "args", ",", "f'layer_{idx}_cost'", ",", "ot_cost", ")", "\n", "", "", "", "else", ":", "\n", "        ", "cpuM0", "=", "M0", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cpuM1", "=", "M1", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "assert", "not", "args", ".", "exact", "\n", "T", "=", "ot", ".", "gromov", ".", "entropic_gromov_wasserstein", "(", "cpuM0", ",", "cpuM1", ",", "mu", ",", "nu", ",", "loss_fun", "=", "args", ".", "gromov_loss", ",", "epsilon", "=", "args", ".", "reg", ")", "\n", "\n", "", "if", "not", "args", ".", "unbalanced", ":", "\n", "        ", "_sanity_check_tmap", "(", "T", ")", "\n", "\n", "", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "T_var", "=", "torch", ".", "from_numpy", "(", "T", ")", ".", "cuda", "(", "args", ".", "gpu_id", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "        ", "T_var", "=", "torch", ".", "from_numpy", "(", "T", ")", ".", "float", "(", ")", "\n", "\n", "", "if", "args", ".", "tmap_stats", ":", "\n", "        ", "print", "(", "\n", "\"Tmap stats (before correction) \\n: For layer {}, frobenius norm from the joe's transport map is {}\"", ".", "format", "(", "\n", "layer0_name", ",", "torch", ".", "norm", "(", "T_var", "-", "torch", ".", "ones_like", "(", "T_var", ")", "/", "torch", ".", "numel", "(", "T_var", ")", ",", "p", "=", "'fro'", ")", "\n", ")", ")", "\n", "\n", "", "print", "(", "\"shape of T_var is \"", ",", "T_var", ".", "shape", ")", "\n", "print", "(", "\"T_var before correction \"", ",", "T_var", ")", "\n", "\n", "return", "T_var", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_neuron_importance_histogram": [[543, 564], ["print", "layer_weight.contiguous().view().cpu().numpy", "layer_weight.cpu().numpy", "print", "numpy.linalg.norm().astype", "importance_hist.sum", "importance_hist.sum", "layer_weight.contiguous().view().cpu", "layer_weight.cpu", "numpy.linalg.norm().astype", "numpy.linalg.norm", "layer_weight.contiguous().view", "numpy.linalg.norm", "layer_weight.contiguous"], "function", ["None"], ["", "def", "_get_neuron_importance_histogram", "(", "args", ",", "layer_weight", ",", "is_conv", ",", "eps", "=", "1e-9", ")", ":", "\n", "    ", "print", "(", "'shape of layer_weight is '", ",", "layer_weight", ".", "shape", ")", "\n", "if", "is_conv", ":", "\n", "        ", "layer", "=", "layer_weight", ".", "contiguous", "(", ")", ".", "view", "(", "layer_weight", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "layer", "=", "layer_weight", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "args", ".", "importance", "==", "'l1'", ":", "\n", "        ", "importance_hist", "=", "np", ".", "linalg", ".", "norm", "(", "layer", ",", "ord", "=", "1", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "+", "eps", "\n", "", "elif", "args", ".", "importance", "==", "'l2'", ":", "\n", "        ", "importance_hist", "=", "np", ".", "linalg", ".", "norm", "(", "layer", ",", "ord", "=", "2", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "+", "eps", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "not", "args", ".", "unbalanced", ":", "\n", "        ", "importance_hist", "=", "(", "importance_hist", "/", "importance_hist", ".", "sum", "(", ")", ")", "\n", "print", "(", "'sum of importance hist is '", ",", "importance_hist", ".", "sum", "(", ")", ")", "\n", "# assert importance_hist.sum() == 1.0", "\n", "", "return", "importance_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_acts_wassersteinized_layers_modularized": [[565, 850], ["len", "ground_metric.GroundMetric", "list", "list", "torch.device", "torch.device", "zip", "print", "wasserstein_ensemble._check_layer_sizes", "print", "wasserstein_ensemble._reduce_layer_name", "wasserstein_ensemble._reduce_layer_name", "print", "print", "wasserstein_ensemble.process_activations", "wasserstein_ensemble.get_activation_distance_stats", "wasserstein_ensemble._get_layer_weights", "wasserstein_ensemble._get_layer_weights", "print", "wasserstein_ensemble._get_current_layer_transport_map", "wasserstein_ensemble._compute_marginals", "print", "print", "setattr", "avg_aligned_layers.append", "zip", "networks[].named_parameters", "networks[].named_parameters", "layer0_name.replace", "len", "print", "print", "print", "print", "print", "wasserstein_ensemble.get_histogram", "wasserstein_ensemble.get_histogram", "wasserstein_ensemble._get_neuron_importance_histogram", "wasserstein_ensemble._get_neuron_importance_histogram", "print", "ground_metric.GroundMetric.process", "print", "wasserstein_ensemble._process_ground_metric_from_acts", "print", "print", "ground_metric.GroundMetric.process", "print", "print", "print", "print", "print", "print", "print", "torch.matmul", "torch.matmul", "print", "geometric_fc.view.view", "model0_aligned_layers.append", "wasserstein_ensemble.update_model", "print", "setattr", "networks[].parameters", "networks[].parameters", "_get_current_layer_transport_map.unsqueeze().repeat", "torch.bmm().permute", "wasserstein_ensemble._get_updated_acts_v0", "torch.matmul.contiguous().view", "_get_layer_weights.view", "torch.matmul.contiguous().view", "_get_layer_weights.view", "torch.norm", "torch.norm", "print", "print", "print", "print", "print", "print", "torch.trace", "torch.sum", "torch.trace", "torch.sum", "_get_current_layer_transport_map.t", "torch.matmul.contiguous().view", "_get_current_layer_transport_map.t", "_get_layer_weights.view", "t_fc0_model.view.view", "setattr", "fc_layer0_weight.data.view().permute", "torch.bmm().permute", "torch.matmul.contiguous().view", "torch.matmul", "torch.norm", "torch.norm", "print", "avg_aligned_layers.append", "avg_aligned_layers.append", "print", "avg_aligned_layers.append", "_get_layer_weights.view", "_get_layer_weights.view", "str", "layer0_name.split", "layer0_name.replace", "len", "print", "_get_current_layer_transport_map.unsqueeze", "torch.bmm", "torch.matmul.contiguous", "activations_0.view", "activations_1.view", "torch.matmul.contiguous", "torch.trace", "torch.sum", "torch.matmul.contiguous", "print", "_get_current_layer_transport_map.clone", "print", "_get_current_layer_transport_map.clone", "print", "print", "_get_layer_weights.permute", "fc_layer0_weight.data.view", "torch.bmm", "torch.matmul.contiguous", "_get_current_layer_transport_map.unsqueeze().repeat", "layer0_name.split", "_get_current_layer_transport_map.unsqueeze"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._check_layer_sizes", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._reduce_layer_name", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._reduce_layer_name", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.process_activations", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_activation_distance_stats", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_layer_weights", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_layer_weights", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_current_layer_transport_map", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._compute_marginals", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_histogram", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_histogram", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_neuron_importance_histogram", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_neuron_importance_histogram", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._process_ground_metric_from_acts", "home.repos.pwc.inspect_result.sidak_otfusion.None.ground_metric.GroundMetric.process", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.update_model", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble._get_updated_acts_v0"], ["", "def", "get_acts_wassersteinized_layers_modularized", "(", "args", ",", "networks", ",", "activations", ",", "eps", "=", "1e-7", ",", "train_loader", "=", "None", ",", "test_loader", "=", "None", ")", ":", "\n", "    ", "'''\n    Average based on the activation vector over data samples. Obtain the transport map,\n    and then based on which align the nodes and average the weights!\n    Like before: two neural networks that have to be averaged in geometric manner (i.e. layerwise).\n    The 1st network is aligned with respect to the other via wasserstein distance.\n    Also this assumes that all the layers are either fully connected or convolutional *(with no bias)*\n    :param networks: list of networks\n    :param activations: If not None, use it to build the activation histograms.\n    Otherwise assumes uniform distribution over neurons in a layer.\n    :return: list of layer weights 'wassersteinized'\n    '''", "\n", "\n", "\n", "avg_aligned_layers", "=", "[", "]", "\n", "T_var", "=", "None", "\n", "if", "args", ".", "handle_skips", ":", "\n", "        ", "skip_T_var", "=", "None", "\n", "skip_T_var_idx", "=", "-", "1", "\n", "residual_T_var", "=", "None", "\n", "residual_T_var_idx", "=", "-", "1", "\n", "\n", "", "marginals_beta", "=", "None", "\n", "# print(list(networks[0].parameters()))", "\n", "previous_layer_shape", "=", "None", "\n", "num_layers", "=", "len", "(", "list", "(", "zip", "(", "networks", "[", "0", "]", ".", "parameters", "(", ")", ",", "networks", "[", "1", "]", ".", "parameters", "(", ")", ")", ")", ")", "\n", "ground_metric_object", "=", "GroundMetric", "(", "args", ")", "\n", "\n", "if", "args", ".", "update_acts", "or", "args", ".", "eval_aligned", ":", "\n", "        ", "model0_aligned_layers", "=", "[", "]", "\n", "\n", "", "if", "args", ".", "gpu_id", "==", "-", "1", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu_id", ")", ")", "\n", "\n", "", "networks_named_params", "=", "list", "(", "zip", "(", "networks", "[", "0", "]", ".", "named_parameters", "(", ")", ",", "networks", "[", "1", "]", ".", "named_parameters", "(", ")", ")", ")", "\n", "idx", "=", "0", "\n", "incoming_layer_aligned", "=", "True", "# for input", "\n", "while", "idx", "<", "num_layers", ":", "\n", "        ", "(", "(", "layer0_name", ",", "fc_layer0_weight", ")", ",", "(", "layer1_name", ",", "fc_layer1_weight", ")", ")", "=", "networks_named_params", "[", "idx", "]", "\n", "# for idx,  in \\", "\n", "#         enumerate(zip(network0_named_params, network1_named_params)):", "\n", "print", "(", "\"\\n--------------- At layer index {} ------------- \\n \"", ".", "format", "(", "idx", ")", ")", "\n", "# layer shape is out x in", "\n", "# assert fc_layer0_weight.shape == fc_layer1_weight.shape", "\n", "assert", "_check_layer_sizes", "(", "args", ",", "idx", ",", "fc_layer0_weight", ".", "shape", ",", "fc_layer1_weight", ".", "shape", ",", "num_layers", ")", "\n", "print", "(", "\"Previous layer shape is \"", ",", "previous_layer_shape", ")", "\n", "previous_layer_shape", "=", "fc_layer1_weight", ".", "shape", "\n", "\n", "# will have shape layer_size x act_num_samples", "\n", "layer0_name_reduced", "=", "_reduce_layer_name", "(", "layer0_name", ")", "\n", "layer1_name_reduced", "=", "_reduce_layer_name", "(", "layer1_name", ")", "\n", "\n", "print", "(", "\"let's see the difference in layer names\"", ",", "layer0_name", ".", "replace", "(", "'.'", "+", "layer0_name", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ",", "''", ")", ",", "layer0_name_reduced", ")", "\n", "print", "(", "activations", "[", "0", "]", "[", "layer0_name", ".", "replace", "(", "'.'", "+", "layer0_name", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ",", "''", ")", "]", ".", "shape", ",", "'shape of activations generally'", ")", "\n", "# for conv layer I need to make the act_num_samples dimension the last one, but it has the intermediate dimensions for", "\n", "# height and width of channels, so that won't work.", "\n", "# So convert (num_samples, layer_size, ht, wt) -> (layer_size, ht, wt, num_samples)", "\n", "\n", "activations_0", ",", "activations_1", "=", "process_activations", "(", "args", ",", "activations", ",", "layer0_name", ",", "layer1_name", ")", "\n", "\n", "# print(\"activations for 1st model are \", activations_0)", "\n", "# print(\"activations for 2nd model are \", activations_1)", "\n", "\n", "\n", "assert", "activations_0", ".", "shape", "[", "0", "]", "==", "fc_layer0_weight", ".", "shape", "[", "0", "]", "\n", "assert", "activations_1", ".", "shape", "[", "0", "]", "==", "fc_layer1_weight", ".", "shape", "[", "0", "]", "\n", "\n", "mu_cardinality", "=", "fc_layer0_weight", ".", "shape", "[", "0", "]", "\n", "nu_cardinality", "=", "fc_layer1_weight", ".", "shape", "[", "0", "]", "\n", "\n", "get_activation_distance_stats", "(", "activations_0", ",", "activations_1", ",", "layer0_name", ")", "\n", "\n", "layer0_shape", "=", "fc_layer0_weight", ".", "shape", "\n", "layer_shape", "=", "fc_layer1_weight", ".", "shape", "\n", "if", "len", "(", "layer_shape", ")", ">", "2", ":", "\n", "            ", "is_conv", "=", "True", "\n", "", "else", ":", "\n", "            ", "is_conv", "=", "False", "\n", "\n", "", "fc_layer0_weight_data", "=", "_get_layer_weights", "(", "fc_layer0_weight", ",", "is_conv", ")", "\n", "fc_layer1_weight_data", "=", "_get_layer_weights", "(", "fc_layer1_weight", ",", "is_conv", ")", "\n", "\n", "if", "idx", "==", "0", "or", "incoming_layer_aligned", ":", "\n", "            ", "aligned_wt", "=", "fc_layer0_weight_data", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "print", "(", "\"shape of layer: model 0\"", ",", "fc_layer0_weight_data", ".", "shape", ")", "\n", "print", "(", "\"shape of layer: model 1\"", ",", "fc_layer1_weight_data", ".", "shape", ")", "\n", "\n", "print", "(", "\"shape of activations: model 0\"", ",", "activations_0", ".", "shape", ")", "\n", "print", "(", "\"shape of activations: model 1\"", ",", "activations_1", ".", "shape", ")", "\n", "\n", "\n", "print", "(", "\"shape of previous transport map\"", ",", "T_var", ".", "shape", ")", "\n", "\n", "# aligned_wt = None, this caches the tensor and causes OOM", "\n", "if", "is_conv", ":", "\n", "                ", "if", "args", ".", "handle_skips", ":", "\n", "                    ", "assert", "len", "(", "layer0_shape", ")", "==", "4", "\n", "# save skip_level transport map if there is block ahead", "\n", "if", "layer0_shape", "[", "1", "]", "!=", "layer0_shape", "[", "0", "]", ":", "\n", "                        ", "if", "not", "(", "layer0_shape", "[", "2", "]", "==", "1", "and", "layer0_shape", "[", "3", "]", "==", "1", ")", ":", "\n", "                            ", "print", "(", "f'saved skip T_var at layer {idx} with shape {layer0_shape}'", ")", "\n", "skip_T_var", "=", "T_var", ".", "clone", "(", ")", "\n", "skip_T_var_idx", "=", "idx", "\n", "", "else", ":", "\n", "                            ", "print", "(", "\n", "f'utilizing skip T_var saved from layer layer {skip_T_var_idx} with shape {skip_T_var.shape}'", ")", "\n", "# if it's a shortcut (128, 64, 1, 1)", "\n", "residual_T_var", "=", "T_var", ".", "clone", "(", ")", "\n", "residual_T_var_idx", "=", "idx", "# use this after the skip", "\n", "T_var", "=", "skip_T_var", "\n", "", "print", "(", "\"shape of previous transport map now is\"", ",", "T_var", ".", "shape", ")", "\n", "", "else", ":", "\n", "                        ", "if", "residual_T_var", "is", "not", "None", "and", "(", "residual_T_var_idx", "==", "(", "idx", "-", "1", ")", ")", ":", "\n", "                            ", "T_var", "=", "(", "T_var", "+", "residual_T_var", ")", "/", "2", "\n", "print", "(", "\"averaging multiple T_var's\"", ")", "\n", "", "else", ":", "\n", "                            ", "print", "(", "\"doing nothing for skips\"", ")", "\n", "", "", "", "T_var_conv", "=", "T_var", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "fc_layer0_weight_data", ".", "shape", "[", "2", "]", ",", "1", ",", "1", ")", "\n", "aligned_wt", "=", "torch", ".", "bmm", "(", "fc_layer0_weight_data", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "T_var_conv", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "", "else", ":", "\n", "                ", "if", "fc_layer0_weight", ".", "data", ".", "shape", "[", "1", "]", "!=", "T_var", ".", "shape", "[", "0", "]", ":", "\n", "# Handles the switch from convolutional layers to fc layers", "\n", "# checks if the input has been reshaped", "\n", "                    ", "fc_layer0_unflattened", "=", "fc_layer0_weight", ".", "data", ".", "view", "(", "fc_layer0_weight", ".", "shape", "[", "0", "]", ",", "T_var", ".", "shape", "[", "0", "]", ",", "\n", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "aligned_wt", "=", "torch", ".", "bmm", "(", "\n", "fc_layer0_unflattened", ",", "\n", "T_var", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "fc_layer0_unflattened", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "aligned_wt", "=", "aligned_wt", ".", "contiguous", "(", ")", ".", "view", "(", "aligned_wt", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "aligned_wt", "=", "torch", ".", "matmul", "(", "fc_layer0_weight", ".", "data", ",", "T_var", ")", "\n", "\n", "\n", "#### Refactored ####", "\n", "\n", "", "", "if", "args", ".", "update_acts", ":", "\n", "                ", "assert", "args", ".", "second_model_name", "is", "None", "\n", "activations_0", ",", "activations_1", "=", "_get_updated_acts_v0", "(", "args", ",", "layer_shape", ",", "aligned_wt", ",", "\n", "model0_aligned_layers", ",", "networks", ",", "\n", "test_loader", ",", "[", "layer0_name", ",", "layer1_name", "]", ")", "\n", "\n", "", "", "if", "args", ".", "importance", "is", "None", "or", "(", "idx", "==", "num_layers", "-", "1", ")", ":", "\n", "            ", "mu", "=", "get_histogram", "(", "args", ",", "0", ",", "mu_cardinality", ",", "layer0_name", ")", "\n", "nu", "=", "get_histogram", "(", "args", ",", "1", ",", "nu_cardinality", ",", "layer1_name", ")", "\n", "", "else", ":", "\n", "# mu = _get_neuron_importance_histogram(args, aligned_wt, is_conv)", "\n", "            ", "mu", "=", "_get_neuron_importance_histogram", "(", "args", ",", "fc_layer0_weight_data", ",", "is_conv", ")", "\n", "nu", "=", "_get_neuron_importance_histogram", "(", "args", ",", "fc_layer1_weight_data", ",", "is_conv", ")", "\n", "print", "(", "mu", ",", "nu", ")", "\n", "assert", "args", ".", "proper_marginals", "\n", "\n", "", "if", "args", ".", "act_bug", ":", "\n", "# bug from before (didn't change the activation part)", "\n", "# only for reproducing results from previous version", "\n", "            ", "M0", "=", "ground_metric_object", ".", "process", "(", "\n", "aligned_wt", ".", "contiguous", "(", ")", ".", "view", "(", "aligned_wt", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "\n", "fc_layer1_weight_data", ".", "view", "(", "fc_layer1_weight_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "# debugged part", "\n", "            ", "print", "(", "\"Refactored ground metric calc\"", ")", "\n", "M0", ",", "M1", "=", "_process_ground_metric_from_acts", "(", "args", ",", "is_conv", ",", "ground_metric_object", ",", "\n", "[", "activations_0", ",", "activations_1", "]", ")", "\n", "\n", "print", "(", "\"# of ground metric features in 0 is  \"", ",", "(", "activations_0", ".", "view", "(", "activations_0", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ".", "shape", "[", "1", "]", ")", "\n", "print", "(", "\"# of ground metric features in 1 is  \"", ",", "(", "activations_1", ".", "view", "(", "activations_1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "if", "args", ".", "debug", "and", "not", "args", ".", "gromov", ":", "\n", "# bug from before (didn't change the activation part)", "\n", "            ", "M_old", "=", "ground_metric_object", ".", "process", "(", "\n", "aligned_wt", ".", "contiguous", "(", ")", ".", "view", "(", "aligned_wt", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "\n", "fc_layer1_weight_data", ".", "view", "(", "fc_layer1_weight_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ")", "\n", "print", "(", "\"Frobenius norm of old (i.e. bug involving wts) and new are \"", ",", "\n", "torch", ".", "norm", "(", "M_old", ",", "'fro'", ")", ",", "torch", ".", "norm", "(", "M0", ",", "'fro'", ")", ")", "\n", "print", "(", "\"Frobenius norm of difference between ground metric wrt old \"", ",", "\n", "torch", ".", "norm", "(", "M0", "-", "M_old", ",", "'fro'", ")", "/", "torch", ".", "norm", "(", "M_old", ",", "'fro'", ")", ")", "\n", "\n", "print", "(", "\"ground metric old (i.e. bug involving wts) is \"", ",", "M_old", ")", "\n", "print", "(", "\"ground metric new is \"", ",", "M0", ")", "\n", "\n", "####################", "\n", "\n", "", "if", "args", ".", "same_model", "!=", "-", "1", ":", "\n", "            ", "print", "(", "\"Checking ground metric matrix in case of same models\"", ")", "\n", "if", "not", "args", ".", "gromov", ":", "\n", "                ", "print", "(", "M0", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "M0", ",", "M1", ")", "\n", "\n", "", "", "if", "args", ".", "skip_last_layer", "and", "idx", "==", "(", "num_layers", "-", "1", ")", ":", "\n", "\n", "            ", "if", "args", ".", "skip_last_layer_type", "==", "'average'", ":", "\n", "                ", "print", "(", "\"Simple averaging of last layer weights. NO transport map needs to be computed\"", ")", "\n", "if", "args", ".", "ensemble_step", "!=", "0.5", ":", "\n", "                    ", "print", "(", "\"taking baby steps (even in skip) ! \"", ")", "\n", "avg_aligned_layers", ".", "append", "(", "(", "1", "-", "args", ".", "ensemble_step", ")", "*", "aligned_wt", "+", "\n", "args", ".", "ensemble_step", "*", "fc_layer1_weight", ")", "\n", "", "else", ":", "\n", "                    ", "avg_aligned_layers", ".", "append", "(", "(", "(", "aligned_wt", "+", "fc_layer1_weight", ")", "/", "2", ")", ")", "\n", "", "", "elif", "args", ".", "skip_last_layer_type", "==", "'second'", ":", "\n", "                ", "print", "(", "\"Just giving the weights of the second model. NO transport map needs to be computed\"", ")", "\n", "avg_aligned_layers", ".", "append", "(", "fc_layer1_weight", ")", "\n", "\n", "", "return", "avg_aligned_layers", "\n", "\n", "", "print", "(", "\"ground metric (m0) is \"", ",", "M0", ")", "\n", "\n", "T_var", "=", "_get_current_layer_transport_map", "(", "args", ",", "mu", ",", "nu", ",", "M0", ",", "M1", ",", "idx", "=", "idx", ",", "layer_shape", "=", "layer_shape", ",", "eps", "=", "eps", ",", "layer_name", "=", "layer0_name", ")", "\n", "\n", "T_var", ",", "marginals", "=", "_compute_marginals", "(", "args", ",", "T_var", ",", "device", ",", "eps", "=", "eps", ")", "\n", "\n", "if", "args", ".", "debug", ":", "\n", "            ", "if", "idx", "==", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "print", "(", "\"there goes the last transport map: \\n \"", ",", "T_var", ")", "\n", "print", "(", "\"and before marginals it is \"", ",", "T_var", "/", "marginals", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"there goes the transport map at layer {}: \\n \"", ".", "format", "(", "idx", ")", ",", "T_var", ")", "\n", "\n", "", "", "print", "(", "\"Ratio of trace to the matrix sum: \"", ",", "torch", ".", "trace", "(", "T_var", ")", "/", "torch", ".", "sum", "(", "T_var", ")", ")", "\n", "print", "(", "\"Here, trace is {} and matrix sum is {} \"", ".", "format", "(", "torch", ".", "trace", "(", "T_var", ")", ",", "torch", ".", "sum", "(", "T_var", ")", ")", ")", "\n", "setattr", "(", "args", ",", "'trace_sum_ratio_{}'", ".", "format", "(", "layer0_name", ")", ",", "(", "torch", ".", "trace", "(", "T_var", ")", "/", "torch", ".", "sum", "(", "T_var", ")", ")", ".", "item", "(", ")", ")", "\n", "\n", "if", "args", ".", "past_correction", ":", "\n", "            ", "print", "(", "\"Shape of aligned wt is \"", ",", "aligned_wt", ".", "shape", ")", "\n", "print", "(", "\"Shape of fc_layer0_weight_data is \"", ",", "fc_layer0_weight_data", ".", "shape", ")", "\n", "\n", "t_fc0_model", "=", "torch", ".", "matmul", "(", "T_var", ".", "t", "(", ")", ",", "aligned_wt", ".", "contiguous", "(", ")", ".", "view", "(", "aligned_wt", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "t_fc0_model", "=", "torch", ".", "matmul", "(", "T_var", ".", "t", "(", ")", ",", "fc_layer0_weight_data", ".", "view", "(", "fc_layer0_weight_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "# Average the weights of aligned first layers", "\n", "", "if", "args", ".", "ensemble_step", "!=", "0.5", ":", "\n", "            ", "print", "(", "\"taking baby steps! \"", ")", "\n", "geometric_fc", "=", "(", "1", "-", "args", ".", "ensemble_step", ")", "*", "t_fc0_model", "+", "args", ".", "ensemble_step", "*", "fc_layer1_weight_data", ".", "view", "(", "fc_layer1_weight_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "geometric_fc", "=", "(", "t_fc0_model", "+", "fc_layer1_weight_data", ".", "view", "(", "fc_layer1_weight_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "/", "2", "\n", "", "if", "is_conv", "and", "layer_shape", "!=", "geometric_fc", ".", "shape", ":", "\n", "            ", "geometric_fc", "=", "geometric_fc", ".", "view", "(", "layer_shape", ")", "\n", "", "avg_aligned_layers", ".", "append", "(", "geometric_fc", ")", "\n", "\n", "\n", "# print(\"The averaged parameters are :\", geometric_fc)", "\n", "# print(\"The model0 and model1 parameters were :\", fc_layer0_weight.data, fc_layer1_weight.data)", "\n", "\n", "if", "args", ".", "update_acts", "or", "args", ".", "eval_aligned", ":", "\n", "            ", "assert", "args", ".", "second_model_name", "is", "None", "\n", "# the thing is that there might be conv layers or other more intricate layers", "\n", "# hence there is no point in having them here", "\n", "# so instead call the compute_activations script and pass it the model0 aligned layers", "\n", "# and also the aligned weight computed (which has been aligned via the prev T map, i.e. incoming edges).", "\n", "if", "is_conv", "and", "layer_shape", "!=", "t_fc0_model", ".", "shape", ":", "\n", "                ", "t_fc0_model", "=", "t_fc0_model", ".", "view", "(", "layer_shape", ")", "\n", "", "model0_aligned_layers", ".", "append", "(", "t_fc0_model", ")", "\n", "_", ",", "acc", "=", "update_model", "(", "args", ",", "networks", "[", "0", "]", ",", "model0_aligned_layers", ",", "test", "=", "True", ",", "\n", "test_loader", "=", "test_loader", ",", "idx", "=", "0", ")", "\n", "print", "(", "\"For layer idx {}, accuracy of the updated model is {}\"", ".", "format", "(", "idx", ",", "acc", ")", ")", "\n", "setattr", "(", "args", ",", "'model0_aligned_acc_layer_{}'", ".", "format", "(", "str", "(", "idx", ")", ")", ",", "acc", ")", "\n", "if", "idx", "==", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "setattr", "(", "args", ",", "'model0_aligned_acc'", ",", "acc", ")", "\n", "\n", "", "", "incoming_layer_aligned", "=", "False", "\n", "next_aligned_wt_reshaped", "=", "None", "\n", "\n", "# remove cached variables to prevent out of memory", "\n", "activations_0", "=", "None", "\n", "activations_1", "=", "None", "\n", "mu", "=", "None", "\n", "nu", "=", "None", "\n", "fc_layer0_weight_data", "=", "None", "\n", "fc_layer1_weight_data", "=", "None", "\n", "M0", "=", "None", "\n", "M1", "=", "None", "\n", "cpuM", "=", "None", "\n", "\n", "idx", "+=", "1", "\n", "", "return", "avg_aligned_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_network_from_param_list": [[851, 887], ["print", "model.get_model_from_name", "routines.test", "print", "new_network.cuda.state_dict", "print", "print", "new_network.state_dict.items", "new_network.cuda.load_state_dict", "routines.test", "new_network.cuda.cuda", "len", "len", "len", "len", "len", "len", "list", "list", "new_network.state_dict.items", "new_network.cuda.parameters", "new_network.cuda.parameters"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.get_model_from_name", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test"], ["", "def", "get_network_from_param_list", "(", "args", ",", "param_list", ",", "test_loader", ")", ":", "\n", "\n", "    ", "print", "(", "\"using independent method\"", ")", "\n", "new_network", "=", "get_model_from_name", "(", "args", ",", "idx", "=", "1", ")", "\n", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "new_network", "=", "new_network", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "\n", "# check the test performance of the network before", "\n", "", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "routines", ".", "test", "(", "args", ",", "new_network", ",", "test_loader", ",", "log_dict", ")", "\n", "\n", "# set the weights of the new network", "\n", "# print(\"before\", new_network.state_dict())", "\n", "print", "(", "\"len of model parameters and avg aligned layers is \"", ",", "len", "(", "list", "(", "new_network", ".", "parameters", "(", ")", ")", ")", ",", "\n", "len", "(", "param_list", ")", ")", "\n", "assert", "len", "(", "list", "(", "new_network", ".", "parameters", "(", ")", ")", ")", "==", "len", "(", "param_list", ")", "\n", "\n", "layer_idx", "=", "0", "\n", "model_state_dict", "=", "new_network", ".", "state_dict", "(", ")", "\n", "\n", "print", "(", "\"len of model_state_dict is \"", ",", "len", "(", "model_state_dict", ".", "items", "(", ")", ")", ")", "\n", "print", "(", "\"len of param_list is \"", ",", "len", "(", "param_list", ")", ")", "\n", "\n", "for", "key", ",", "value", "in", "model_state_dict", ".", "items", "(", ")", ":", "\n", "        ", "model_state_dict", "[", "key", "]", "=", "param_list", "[", "layer_idx", "]", "\n", "layer_idx", "+=", "1", "\n", "\n", "", "new_network", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "# check the test performance of the network after", "\n", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "acc", "=", "routines", ".", "test", "(", "args", ",", "new_network", ",", "test_loader", ",", "log_dict", ")", "\n", "\n", "return", "acc", ",", "new_network", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.geometric_ensembling_modularized": [[888, 896], ["wasserstein_ensemble.get_network_from_param_list", "wasserstein_ensemble.get_wassersteinized_layers_modularized", "wasserstein_ensemble.get_acts_wassersteinized_layers_modularized"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_network_from_param_list", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_wassersteinized_layers_modularized", "home.repos.pwc.inspect_result.sidak_otfusion.None.wasserstein_ensemble.get_acts_wassersteinized_layers_modularized"], ["", "def", "geometric_ensembling_modularized", "(", "args", ",", "networks", ",", "train_loader", ",", "test_loader", ",", "activations", "=", "None", ")", ":", "\n", "\n", "    ", "if", "args", ".", "geom_ensemble_type", "==", "'wts'", ":", "\n", "        ", "avg_aligned_layers", "=", "get_wassersteinized_layers_modularized", "(", "args", ",", "networks", ",", "activations", ",", "test_loader", "=", "test_loader", ")", "\n", "", "elif", "args", ".", "geom_ensemble_type", "==", "'acts'", ":", "\n", "        ", "avg_aligned_layers", "=", "get_acts_wassersteinized_layers_modularized", "(", "args", ",", "networks", ",", "activations", ",", "train_loader", "=", "train_loader", ",", "test_loader", "=", "test_loader", ")", "\n", "\n", "", "return", "get_network_from_param_list", "(", "args", ",", "avg_aligned_layers", ",", "test_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.data.get_inp_tar": [[8, 10], ["dataset.data.view().float", "dataset.data.view"], "function", ["None"], ["def", "get_inp_tar", "(", "dataset", ")", ":", "\n", "    ", "return", "dataset", ".", "data", ".", "view", "(", "dataset", ".", "data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "float", "(", ")", ",", "dataset", ".", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.data.get_mnist_dataset": [[11, 24], ["torchvision.datasets.MNIST", "data.get_inp_tar", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.data.get_inp_tar"], ["", "def", "get_mnist_dataset", "(", "root", ",", "is_train", ",", "to_download", ",", "return_tensor", "=", "False", ")", ":", "\n", "    ", "mnist", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", ",", "train", "=", "is_train", ",", "download", "=", "to_download", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "# only 1 channel", "\n", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", "\n", "\n", "if", "not", "return_tensor", ":", "\n", "        ", "return", "mnist", "\n", "", "else", ":", "\n", "        ", "return", "get_inp_tar", "(", "mnist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.data.get_dataloader": [[26, 92], ["args.dataset.lower", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "args.dataset.lower", "train.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "", "def", "get_dataloader", "(", "args", ",", "unit_batch", "=", "False", ",", "no_randomness", "=", "False", ")", ":", "\n", "    ", "if", "unit_batch", ":", "\n", "        ", "bsz", "=", "(", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "bsz", "=", "(", "args", ".", "batch_size_train", ",", "args", ".", "batch_size_test", ")", "\n", "\n", "", "if", "no_randomness", ":", "\n", "        ", "enable_shuffle", "=", "False", "\n", "", "else", ":", "\n", "        ", "enable_shuffle", "=", "True", "\n", "\n", "", "if", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'mnist'", ":", "\n", "\n", "        ", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "MNIST", "(", "'./files/'", ",", "train", "=", "True", ",", "download", "=", "args", ".", "to_download", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "# only 1 channel", "\n", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "bsz", "[", "0", "]", ",", "shuffle", "=", "enable_shuffle", "\n", ")", "\n", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "MNIST", "(", "'./files/'", ",", "train", "=", "False", ",", "download", "=", "args", ".", "to_download", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "bsz", "[", "1", "]", ",", "shuffle", "=", "enable_shuffle", "\n", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "        ", "if", "args", ".", "cifar_style_data", ":", "\n", "            ", "train_loader", ",", "test_loader", "=", "cifar_train", ".", "get_dataset", "(", "args", ".", "config", ")", "\n", "", "else", ":", "\n", "\n", "            ", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "'./data/'", ",", "train", "=", "True", ",", "download", "=", "args", ".", "to_download", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "# Note this normalization is not same as in MNIST", "\n", "# (mean_ch1, mean_ch2, mean_ch3), (std1, std2, std3)", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "bsz", "[", "0", "]", ",", "shuffle", "=", "enable_shuffle", "\n", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "'./data/'", ",", "train", "=", "False", ",", "download", "=", "args", ".", "to_download", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "# (mean_ch1, mean_ch2, mean_ch3), (std1, std2, std3)", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "bsz", "[", "1", "]", ",", "shuffle", "=", "enable_shuffle", "\n", ")", "\n", "\n", "", "return", "train_loader", ",", "test_loader", "", "", "", ""]], "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.compute_activations": [[28, 80], ["model.train", "model.named_modules", "enumerate", "layer.register_forward_hook", "print", "print", "print", "compute_activations.compute_activations.get_activation"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train"], ["def", "compute_activations", "(", "model", ",", "train_loader", ",", "num_samples", ")", ":", "\n", "    ", "'''\n\n    This method can be called from another python module. Example usage demonstrated here.\n    Averages the activations across the 'num_samples' many inputs.\n\n    :param model: takes in a pretrained model\n    :param train_loader: the particular train loader\n    :param num_samples: # of randomly selected training examples to average the activations over\n\n    :return:  list of len: num_layers and each of them is a particular tensor of activations\n    '''", "\n", "\n", "activation", "=", "{", "}", "\n", "num_samples_processed", "=", "0", "\n", "\n", "# Define forward hook that averages the activations", "\n", "# over number of samples processed", "\n", "def", "get_activation", "(", "name", ")", ":", "\n", "        ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "            ", "print", "(", "\"num of samples seen before\"", ",", "num_samples_processed", ")", "\n", "# print(\"output is \", output.detach())", "\n", "if", "name", "not", "in", "activation", ":", "\n", "                ", "activation", "[", "name", "]", "=", "output", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "# print(\"previously at layer {}: {}\".format(name, activation[name]))", "\n", "                ", "activation", "[", "name", "]", "=", "(", "num_samples_processed", "*", "activation", "[", "name", "]", "+", "output", ".", "detach", "(", ")", ")", "/", "(", "num_samples_processed", "+", "1", ")", "\n", "# print(\"now at layer {}: {}\".format(name, activation[name]))", "\n", "\n", "", "", "return", "hook", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "# Set forward hooks for all the layers", "\n", "for", "name", ",", "layer", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "name", "==", "''", ":", "\n", "            ", "print", "(", "\"excluded\"", ")", "\n", "continue", "\n", "", "layer", ".", "register_forward_hook", "(", "get_activation", "(", "name", ")", ")", "\n", "print", "(", "\"set forward hook for layer named: \"", ",", "name", ")", "\n", "\n", "# Run over the samples in training set", "\n", "# datapoints= []", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "            ", "data", "=", "data", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "# datapoints.append(data)", "\n", "model", "(", "data", ")", "\n", "num_samples_processed", "+=", "1", "\n", "if", "num_samples_processed", "==", "num_samples", ":", "\n", "                ", "break", "\n", "", "", "", "return", "activation", ",", "None", "#, datapoints", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.save_activations": [[81, 86], ["utils.mkdir", "utils.pickle_obj", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.utils.mkdir", "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.pickle_obj"], ["", "def", "save_activations", "(", "idx", ",", "activation", ",", "dump_path", ")", ":", "\n", "    ", "myutils", ".", "mkdir", "(", "dump_path", ")", "\n", "myutils", ".", "pickle_obj", "(", "\n", "activation", ",", "\n", "os", ".", "path", ".", "join", "(", "dump_path", ",", "'model_{}_activations'", ".", "format", "(", "idx", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.compute_activations_across_models": [[88, 142], ["enumerate", "enumerate", "model.named_modules", "model.train", "enumerate", "range", "layer.register_forward_hook", "print", "data.cuda.cuda", "model", "len", "compute_activations.save_activations", "output.detach", "print", "compute_activations.compute_activations.get_activation"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train", "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.save_activations"], ["", "def", "compute_activations_across_models", "(", "args", ",", "models", ",", "train_loader", ",", "num_samples", ",", "dump_activations", "=", "False", ",", "dump_path", "=", "None", ")", ":", "\n", "\n", "# hook that computes the mean activations across data samples", "\n", "    ", "def", "get_activation", "(", "activation", ",", "name", ")", ":", "\n", "        ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "# print(\"num of samples seen before\", num_samples_processed)", "\n", "# print(\"output is \", output.detach())", "\n", "            ", "if", "name", "not", "in", "activation", ":", "\n", "                ", "activation", "[", "name", "]", "=", "output", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "# print(\"previously at layer {}: {}\".format(name, activation[name]))", "\n", "                ", "activation", "[", "name", "]", "=", "(", "num_samples_processed", "*", "activation", "[", "name", "]", "+", "output", ".", "detach", "(", ")", ")", "/", "(", "\n", "num_samples_processed", "+", "1", ")", "\n", "# print(\"now at layer {}: {}\".format(name, activation[name]))", "\n", "\n", "", "", "return", "hook", "\n", "\n", "# Prepare all the models", "\n", "", "activations", "=", "{", "}", "\n", "\n", "for", "idx", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "\n", "# Initialize the activation dictionary for each model", "\n", "        ", "activations", "[", "idx", "]", "=", "{", "}", "\n", "\n", "# Set forward hooks for all layers inside a model", "\n", "for", "name", ",", "layer", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "name", "==", "''", ":", "\n", "                ", "print", "(", "\"excluded\"", ")", "\n", "continue", "\n", "", "layer", ".", "register_forward_hook", "(", "get_activation", "(", "activations", "[", "idx", "]", ",", "name", ")", ")", "\n", "print", "(", "\"set forward hook for layer named: \"", ",", "name", ")", "\n", "\n", "# Set the model in train mode", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "# Run the same data samples ('num_samples' many) across all the models", "\n", "", "num_samples_processed", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "            ", "data", "=", "data", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "", "for", "idx", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "            ", "model", "(", "data", ")", "\n", "", "num_samples_processed", "+=", "1", "\n", "if", "num_samples_processed", "==", "num_samples", ":", "\n", "            ", "break", "\n", "\n", "# Dump the activations for all models onto disk", "\n", "", "", "if", "dump_activations", "and", "dump_path", "is", "not", "None", ":", "\n", "        ", "for", "idx", "in", "range", "(", "len", "(", "models", ")", ")", ":", "\n", "            ", "save_activations", "(", "idx", ",", "activations", "[", "idx", "]", ",", "dump_path", ")", "\n", "\n", "# print(\"these will be returned\", activations)", "\n", "", "", "return", "activations", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.normalize_tensor": [[144, 152], ["tens.view.view", "tens.view.norm", "ntens.view.view", "tens.norm.view"], "function", ["None"], ["", "def", "normalize_tensor", "(", "tens", ")", ":", "\n", "    ", "tens_shape", "=", "tens", ".", "shape", "\n", "assert", "tens_shape", "[", "1", "]", "==", "1", "\n", "tens", "=", "tens", ".", "view", "(", "tens_shape", "[", "0", "]", ",", "1", ",", "-", "1", ")", "\n", "norms", "=", "tens", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "ntens", "=", "tens", "/", "norms", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "ntens", "=", "ntens", ".", "view", "(", "tens_shape", ")", "\n", "return", "ntens", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.compute_activations_across_models_v1": [[153, 317], ["torch.manual_seed", "enumerate", "enumerate", "print", "setattr", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.AvgPool2d", "utils.get_model_layers_cfg", "range", "range", "tupl[].replace", "model.named_modules", "forward_hooks.append", "model.train", "enumerate", "len", "enumerate", "range", "len", "activation[].append", "models[].named_parameters", "layer_hooks.append", "print", "data.cuda.cuda", "int", "model", "print", "torch.stack", "print", "print", "print", "len", "compute_activations.save_activations", "hook.remove", "output.detach", "print", "layer.register_forward_hook", "int", "target.item", "print", "torch.nn.ReLU.", "print", "[].mean", "[].mean", "[].std", "print", "print", "compute_activations.compute_activations.get_activation"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.utils.get_model_layers_cfg", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train", "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.save_activations"], ["", "def", "compute_activations_across_models_v1", "(", "args", ",", "models", ",", "train_loader", ",", "num_samples", ",", "mode", "=", "'mean'", ",", "\n", "dump_activations", "=", "False", ",", "dump_path", "=", "None", ")", ":", "\n", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "activation_seed", ")", "\n", "\n", "# hook that computes the mean activations across data samples", "\n", "def", "get_activation", "(", "activation", ",", "name", ")", ":", "\n", "        ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "# print(\"num of samples seen before\", num_samples_processed)", "\n", "# print(\"output is \", output.detach())", "\n", "            ", "if", "name", "not", "in", "activation", ":", "\n", "                ", "activation", "[", "name", "]", "=", "[", "]", "\n", "\n", "", "activation", "[", "name", "]", ".", "append", "(", "output", ".", "detach", "(", ")", ")", "\n", "\n", "", "return", "hook", "\n", "\n", "# Prepare all the models", "\n", "", "activations", "=", "{", "}", "\n", "forward_hooks", "=", "[", "]", "\n", "\n", "assert", "args", ".", "disable_bias", "\n", "# handle below for bias later on!", "\n", "# print(\"list of model named params \", list(models[0].named_parameters()))", "\n", "param_names", "=", "[", "tupl", "[", "0", "]", ".", "replace", "(", "'.weight'", ",", "''", ")", "for", "tupl", "in", "models", "[", "0", "]", ".", "named_parameters", "(", ")", "]", "\n", "for", "idx", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "\n", "# Initialize the activation dictionary for each model", "\n", "        ", "activations", "[", "idx", "]", "=", "{", "}", "\n", "layer_hooks", "=", "[", "]", "\n", "# Set forward hooks for all layers inside a model", "\n", "for", "name", ",", "layer", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "name", "==", "''", ":", "\n", "                ", "print", "(", "\"excluded\"", ")", "\n", "continue", "\n", "", "elif", "args", ".", "dataset", "!=", "'mnist'", "and", "name", "not", "in", "param_names", ":", "\n", "                ", "print", "(", "\"this was continued, \"", ",", "name", ")", "\n", "continue", "\n", "", "layer_hooks", ".", "append", "(", "layer", ".", "register_forward_hook", "(", "get_activation", "(", "activations", "[", "idx", "]", ",", "name", ")", ")", ")", "\n", "print", "(", "\"set forward hook for layer named: \"", ",", "name", ")", "\n", "\n", "", "forward_hooks", ".", "append", "(", "layer_hooks", ")", "\n", "# Set the model in train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# Run the same data samples ('num_samples' many) across all the models", "\n", "", "num_samples_processed", "=", "0", "\n", "num_personal_idx", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "num_samples_processed", "==", "num_samples", ":", "\n", "            ", "break", "\n", "", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "            ", "data", "=", "data", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "\n", "", "if", "args", ".", "skip_personal_idx", "and", "int", "(", "target", ".", "item", "(", ")", ")", "==", "args", ".", "personal_class_idx", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "int", "(", "target", ".", "item", "(", ")", ")", "==", "args", ".", "personal_class_idx", ":", "\n", "            ", "num_personal_idx", "+=", "1", "\n", "\n", "", "for", "idx", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "            ", "model", "(", "data", ")", "\n", "\n", "", "num_samples_processed", "+=", "1", "\n", "\n", "\n", "\n", "", "print", "(", "\"num_personal_idx \"", ",", "num_personal_idx", ")", "\n", "setattr", "(", "args", ",", "'num_personal_idx'", ",", "num_personal_idx", ")", "\n", "\n", "relu", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "maxpool", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "avgpool", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "# Combine the activations generated across the number of samples to form importance scores", "\n", "# The importance calculated is based on the 'mode' flag: which is either of 'mean', 'std', 'meanstd'", "\n", "\n", "model_cfg", "=", "myutils", ".", "get_model_layers_cfg", "(", "args", ".", "model_name", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "models", ")", ")", ":", "\n", "        ", "cfg_idx", "=", "0", "\n", "for", "lnum", ",", "layer", "in", "enumerate", "(", "activations", "[", "idx", "]", ")", ":", "\n", "            ", "print", "(", "'***********'", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "torch", ".", "stack", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", "\n", "print", "(", "\"min of act: {}, max: {}, mean: {}\"", ".", "format", "(", "torch", ".", "min", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "torch", ".", "max", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "torch", ".", "mean", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ")", ")", "\n", "# assert (activations[idx][layer] >= 0).all()", "\n", "\n", "if", "not", "args", ".", "prelu_acts", "and", "not", "lnum", "==", "(", "len", "(", "activations", "[", "idx", "]", ")", "-", "1", ")", ":", "\n", "# print(\"activation was \", activations[idx][layer])", "\n", "                ", "print", "(", "\"applying relu ---------------\"", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "relu", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", "\n", "# print(\"activation now \", activations[idx][layer])", "\n", "print", "(", "\"after RELU: min of act: {}, max: {}, mean: {}\"", ".", "format", "(", "torch", ".", "min", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "\n", "torch", ".", "max", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "\n", "\n", "torch", ".", "mean", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ")", ")", "\n", "\n", "", "elif", "args", ".", "model_name", "==", "'vgg11_nobias'", "and", "args", ".", "pool_acts", "and", "len", "(", "activations", "[", "idx", "]", "[", "layer", "]", ".", "shape", ")", ">", "3", ":", "\n", "\n", "                ", "if", "args", ".", "pool_relu", ":", "\n", "                    ", "print", "(", "\"applying relu ---------------\"", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "relu", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", "\n", "\n", "", "activations", "[", "idx", "]", "[", "layer", "]", "=", "activations", "[", "idx", "]", "[", "layer", "]", ".", "squeeze", "(", "1", ")", "\n", "\n", "# apply maxpool wherever the next thing in config list is 'M'", "\n", "if", "(", "cfg_idx", "+", "1", ")", "<", "len", "(", "model_cfg", ")", ":", "\n", "                    ", "if", "model_cfg", "[", "cfg_idx", "+", "1", "]", "==", "'M'", ":", "\n", "                        ", "print", "(", "\"applying maxpool ---------------\"", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "maxpool", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", "\n", "cfg_idx", "+=", "2", "\n", "", "else", ":", "\n", "                        ", "cfg_idx", "+=", "1", "\n", "\n", "# apply avgpool only for the last layer", "\n", "", "", "if", "cfg_idx", "==", "len", "(", "model_cfg", ")", ":", "\n", "                    ", "print", "(", "\"applying avgpool ---------------\"", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "avgpool", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", "\n", "\n", "# unsqueeze back at axis 1", "\n", "", "activations", "[", "idx", "]", "[", "layer", "]", "=", "activations", "[", "idx", "]", "[", "layer", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "print", "(", "\"checking stats after pooling\"", ")", "\n", "print", "(", "\"min of act: {}, max: {}, mean: {}\"", ".", "format", "(", "torch", ".", "min", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "\n", "torch", ".", "max", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "\n", "torch", ".", "mean", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ")", ")", "\n", "\n", "", "if", "mode", "==", "'mean'", ":", "\n", "                ", "activations", "[", "idx", "]", "[", "layer", "]", "=", "activations", "[", "idx", "]", "[", "layer", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "elif", "mode", "==", "'std'", ":", "\n", "                ", "activations", "[", "idx", "]", "[", "layer", "]", "=", "activations", "[", "idx", "]", "[", "layer", "]", ".", "std", "(", "dim", "=", "0", ")", "\n", "", "elif", "mode", "==", "'meanstd'", ":", "\n", "                ", "activations", "[", "idx", "]", "[", "layer", "]", "=", "activations", "[", "idx", "]", "[", "layer", "]", ".", "mean", "(", "dim", "=", "0", ")", "*", "activations", "[", "idx", "]", "[", "layer", "]", ".", "std", "(", "dim", "=", "0", ")", "\n", "\n", "", "if", "args", ".", "standardize_acts", ":", "\n", "                ", "mean_acts", "=", "activations", "[", "idx", "]", "[", "layer", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "std_acts", "=", "activations", "[", "idx", "]", "[", "layer", "]", ".", "std", "(", "dim", "=", "0", ")", "\n", "print", "(", "\"shape of mean, std, and usual acts are: \"", ",", "mean_acts", ".", "shape", ",", "std_acts", ".", "shape", ",", "activations", "[", "idx", "]", "[", "layer", "]", ".", "shape", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "(", "activations", "[", "idx", "]", "[", "layer", "]", "-", "mean_acts", ")", "/", "(", "std_acts", "+", "1e-9", ")", "\n", "", "elif", "args", ".", "center_acts", ":", "\n", "                ", "mean_acts", "=", "activations", "[", "idx", "]", "[", "layer", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "print", "(", "\"shape of mean and usual acts are: \"", ",", "mean_acts", ".", "shape", ",", "activations", "[", "idx", "]", "[", "layer", "]", ".", "shape", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "(", "activations", "[", "idx", "]", "[", "layer", "]", "-", "mean_acts", ")", "\n", "", "elif", "args", ".", "normalize_acts", ":", "\n", "                ", "print", "(", "\"normalizing the activation vectors\"", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "normalize_tensor", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", "\n", "print", "(", "\"min of act: {}, max: {}, mean: {}\"", ".", "format", "(", "torch", ".", "min", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "\n", "torch", ".", "max", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "\n", "torch", ".", "mean", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ")", ")", "\n", "\n", "", "print", "(", "\"activations for idx {} at layer {} have the following shape \"", ".", "format", "(", "idx", ",", "layer", ")", ",", "activations", "[", "idx", "]", "[", "layer", "]", ".", "shape", ")", "\n", "print", "(", "'-----------'", ")", "\n", "\n", "# Dump the activations for all models onto disk", "\n", "", "", "if", "dump_activations", "and", "dump_path", "is", "not", "None", ":", "\n", "        ", "for", "idx", "in", "range", "(", "len", "(", "models", ")", ")", ":", "\n", "            ", "save_activations", "(", "idx", ",", "activations", "[", "idx", "]", ",", "dump_path", ")", "\n", "\n", "# Remove the hooks (as this was intefering with prediction ensembling)", "\n", "", "", "for", "idx", "in", "range", "(", "len", "(", "forward_hooks", ")", ")", ":", "\n", "        ", "for", "hook", "in", "forward_hooks", "[", "idx", "]", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "\n", "\n", "", "", "return", "activations", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.compute_selective_activation": [[318, 418], ["torch.manual_seed", "enumerate", "enumerate", "torch.nn.ReLU", "range", "range", "tupl[].replace", "model.named_modules", "forward_hooks.append", "model.train", "enumerate", "len", "enumerate", "range", "len", "activation[].append", "models[].named_parameters", "data.cuda.cuda", "model", "print", "torch.stack", "print", "print", "print", "len", "compute_activations.save_activations", "hook.remove", "output.detach", "print", "print", "torch.nn.ReLU.", "print", "[].mean", "[].std", "print", "print", "layer_hooks.append", "print", "torch.min", "torch.max", "torch.mean", "[].mean", "print", "layer.register_forward_hook", "torch.min", "torch.max", "torch.mean", "compute_activations.compute_activations.get_activation"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.train", "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.save_activations"], ["", "def", "compute_selective_activation", "(", "args", ",", "models", ",", "layer_name", ",", "train_loader", ",", "num_samples", ",", "dump_activations", "=", "False", ",", "dump_path", "=", "None", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "activation_seed", ")", "\n", "\n", "# hook that computes the mean activations across data samples", "\n", "def", "get_activation", "(", "activation", ",", "name", ")", ":", "\n", "        ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "# print(\"num of samples seen before\", num_samples_processed)", "\n", "# print(\"output is \", output.detach())", "\n", "            ", "if", "name", "not", "in", "activation", ":", "\n", "                ", "activation", "[", "name", "]", "=", "[", "]", "\n", "\n", "", "activation", "[", "name", "]", ".", "append", "(", "output", ".", "detach", "(", ")", ")", "\n", "\n", "", "return", "hook", "\n", "\n", "# Prepare all the models", "\n", "", "activations", "=", "{", "}", "\n", "forward_hooks", "=", "[", "]", "\n", "\n", "assert", "args", ".", "disable_bias", "\n", "# handle below for bias later on!", "\n", "# print(\"list of model named params \", list(models[0].named_parameters()))", "\n", "param_names", "=", "[", "tupl", "[", "0", "]", ".", "replace", "(", "'.weight'", ",", "''", ")", "for", "tupl", "in", "models", "[", "0", "]", ".", "named_parameters", "(", ")", "]", "\n", "\n", "for", "idx", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "\n", "# Initialize the activation dictionary for each model", "\n", "        ", "activations", "[", "idx", "]", "=", "{", "}", "\n", "layer_hooks", "=", "[", "]", "\n", "# Set forward hooks for all layers inside a model", "\n", "for", "name", ",", "layer", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "name", "==", "''", ":", "\n", "                ", "print", "(", "\"excluded\"", ")", "\n", "", "elif", "args", ".", "dataset", "!=", "'mnist'", "and", "name", "not", "in", "param_names", ":", "\n", "                ", "print", "(", "\"this was continued, \"", ",", "name", ")", "\n", "# elif name!= layer_name:", "\n", "#     print(\"this layer was not needed, \", name)", "\n", "", "else", ":", "\n", "                ", "layer_hooks", ".", "append", "(", "layer", ".", "register_forward_hook", "(", "get_activation", "(", "activations", "[", "idx", "]", ",", "name", ")", ")", ")", "\n", "print", "(", "\"set forward hook for layer named: \"", ",", "name", ")", "\n", "\n", "", "", "forward_hooks", ".", "append", "(", "layer_hooks", ")", "\n", "# Set the model in train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# Run the same data samples ('num_samples' many) across all the models", "\n", "", "num_samples_processed", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "num_samples_processed", "==", "num_samples", ":", "\n", "            ", "break", "\n", "", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "            ", "data", "=", "data", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "", "for", "idx", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "            ", "model", "(", "data", ")", "\n", "", "num_samples_processed", "+=", "1", "\n", "\n", "", "relu", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "models", ")", ")", ":", "\n", "        ", "for", "lnum", ",", "layer", "in", "enumerate", "(", "activations", "[", "idx", "]", ")", ":", "\n", "            ", "print", "(", "'***********'", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "torch", ".", "stack", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", "\n", "print", "(", "\"min of act: {}, max: {}, mean: {}\"", ".", "format", "(", "torch", ".", "min", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "\n", "torch", ".", "max", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "\n", "torch", ".", "mean", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ")", ")", "\n", "# assert (activations[idx][layer] >= 0).all()", "\n", "\n", "if", "not", "args", ".", "prelu_acts", "and", "not", "lnum", "==", "(", "len", "(", "activations", "[", "idx", "]", ")", "-", "1", ")", ":", "\n", "# print(\"activation was \", activations[idx][layer])", "\n", "                ", "print", "(", "\"applying relu ---------------\"", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "relu", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", "\n", "# print(\"activation now \", activations[idx][layer])", "\n", "print", "(", "\"after RELU: min of act: {}, max: {}, mean: {}\"", ".", "format", "(", "torch", ".", "min", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "\n", "torch", ".", "max", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ",", "\n", "torch", ".", "mean", "(", "activations", "[", "idx", "]", "[", "layer", "]", ")", ")", ")", "\n", "", "if", "args", ".", "standardize_acts", ":", "\n", "                ", "mean_acts", "=", "activations", "[", "idx", "]", "[", "layer", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "std_acts", "=", "activations", "[", "idx", "]", "[", "layer", "]", ".", "std", "(", "dim", "=", "0", ")", "\n", "print", "(", "\"shape of mean, std, and usual acts are: \"", ",", "mean_acts", ".", "shape", ",", "std_acts", ".", "shape", ",", "\n", "activations", "[", "idx", "]", "[", "layer", "]", ".", "shape", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "(", "activations", "[", "idx", "]", "[", "layer", "]", "-", "mean_acts", ")", "/", "(", "std_acts", "+", "1e-9", ")", "\n", "", "elif", "args", ".", "center_acts", ":", "\n", "                ", "mean_acts", "=", "activations", "[", "idx", "]", "[", "layer", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "print", "(", "\"shape of mean and usual acts are: \"", ",", "mean_acts", ".", "shape", ",", "activations", "[", "idx", "]", "[", "layer", "]", ".", "shape", ")", "\n", "activations", "[", "idx", "]", "[", "layer", "]", "=", "(", "activations", "[", "idx", "]", "[", "layer", "]", "-", "mean_acts", ")", "\n", "\n", "", "print", "(", "\"activations for idx {} at layer {} have the following shape \"", ".", "format", "(", "idx", ",", "layer", ")", ",", "\n", "activations", "[", "idx", "]", "[", "layer", "]", ".", "shape", ")", "\n", "print", "(", "'-----------'", ")", "\n", "# Dump the activations for all models onto disk", "\n", "", "", "if", "dump_activations", "and", "dump_path", "is", "not", "None", ":", "\n", "        ", "for", "idx", "in", "range", "(", "len", "(", "models", ")", ")", ":", "\n", "            ", "save_activations", "(", "idx", ",", "activations", "[", "idx", "]", ",", "dump_path", ")", "\n", "\n", "# Remove the hooks (as this was intefering with prediction ensembling)", "\n", "", "", "for", "idx", "in", "range", "(", "len", "(", "forward_hooks", ")", ")", ":", "\n", "        ", "for", "hook", "in", "forward_hooks", "[", "idx", "]", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "\n", "# print(\"selective activations returned are\", activations)", "\n", "", "", "return", "activations", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.LogisticRegressionModel.__init__": [[39, 42], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.CifarMlpNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "784", ",", "output_dim", "=", "10", ")", ":", "\n", "        ", "super", "(", "LogisticRegressionModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.LogisticRegressionModel.forward": [[42, 45], ["torch.softmax", "torch.softmax", "model.LogisticRegressionModel.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "softmax", "(", "self", ".", "linear", "(", "x", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.Net.__init__": [[47, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.CifarMlpNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "10", ",", "kernel_size", "=", "5", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "10", ",", "20", ",", "kernel_size", "=", "5", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "conv2_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "320", ",", "50", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "50", ",", "10", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.Net.forward": [[55, 63], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.Net.view", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "model.Net.fc2", "torch.log_softmax", "torch.log_softmax", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "model.Net.fc1", "model.Net.conv1", "model.Net.conv2_drop", "model.Net.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv1", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv2_drop", "(", "self", ".", "conv2", "(", "x", ")", ")", ",", "2", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "320", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.SimpleNet.__init__": [[66, 71], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.CifarMlpNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SimpleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "784", ",", "args", ".", "num_hidden_nodes", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden_nodes", ",", "10", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "enable_dropout", "=", "args", ".", "enable_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.SimpleNet.forward": [[72, 79], ["torch.dropout.view", "torch.relu", "torch.relu", "model.SimpleNet.fc2", "torch.log_softmax", "torch.log_softmax", "model.SimpleNet.fc1", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.MlpNet.__init__": [[81, 99], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "int", "int", "int", "int", "int", "int", "args.dataset.lower"], "methods", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.CifarMlpNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "width_ratio", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "MlpNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "# 28 x 28 x 1", "\n", "            ", "input_dim", "=", "784", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "# 32 x 32 x 3", "\n", "            ", "input_dim", "=", "3072", "\n", "", "if", "width_ratio", "!=", "-", "1", ":", "\n", "            ", "self", ".", "width_ratio", "=", "width_ratio", "\n", "", "else", ":", "\n", "            ", "self", ".", "width_ratio", "=", "1", "\n", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "int", "(", "args", ".", "num_hidden_nodes1", "/", "self", ".", "width_ratio", ")", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "int", "(", "args", ".", "num_hidden_nodes1", "/", "self", ".", "width_ratio", ")", ",", "int", "(", "args", ".", "num_hidden_nodes2", "/", "self", ".", "width_ratio", ")", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "int", "(", "args", ".", "num_hidden_nodes2", "/", "self", ".", "width_ratio", ")", ",", "int", "(", "args", ".", "num_hidden_nodes3", "/", "self", ".", "width_ratio", ")", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "int", "(", "args", ".", "num_hidden_nodes3", "/", "self", ".", "width_ratio", ")", ",", "10", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "enable_dropout", "=", "args", ".", "enable_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.MlpNet.forward": [[100, 117], ["torch.dropout.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.MlpNet.fc4", "model.MlpNet.fc1", "torch.dropout", "torch.dropout", "model.MlpNet.fc2", "torch.dropout", "torch.dropout", "model.MlpNet.fc3", "torch.dropout", "torch.dropout", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "disable_logits", "=", "False", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "\n", "if", "disable_logits", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "log_softmax", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.SmallMlpNet.__init__": [[120, 126], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.CifarMlpNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SmallMlpNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "784", ",", "args", ".", "num_hidden_nodes1", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden_nodes1", ",", "args", ".", "num_hidden_nodes2", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden_nodes2", ",", "10", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "enable_dropout", "=", "args", ".", "enable_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.SmallMlpNet.forward": [[127, 138], ["torch.dropout.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.SmallMlpNet.fc3", "torch.log_softmax", "torch.log_softmax", "model.SmallMlpNet.fc1", "torch.dropout", "torch.dropout", "model.SmallMlpNet.fc2", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "return", "F", ".", "log_softmax", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.BigMlpNet.__init__": [[141, 155], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "args.dataset.lower"], "methods", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.CifarMlpNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "BigMlpNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "# 28 x 28 x 1", "\n", "            ", "input_dim", "=", "784", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "# 32 x 32 x 3", "\n", "            ", "input_dim", "=", "3072", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "args", ".", "num_hidden_nodes1", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden_nodes1", ",", "args", ".", "num_hidden_nodes2", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden_nodes2", ",", "args", ".", "num_hidden_nodes3", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden_nodes3", ",", "args", ".", "num_hidden_nodes4", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden_nodes4", ",", "10", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "enable_dropout", "=", "args", ".", "enable_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.BigMlpNet.forward": [[156, 173], ["torch.dropout.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.BigMlpNet.fc5", "torch.log_softmax", "torch.log_softmax", "model.BigMlpNet.fc1", "torch.dropout", "torch.dropout", "model.BigMlpNet.fc2", "torch.dropout", "torch.dropout", "model.BigMlpNet.fc3", "torch.dropout", "torch.dropout", "model.BigMlpNet.fc4", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "self", ".", "fc5", "(", "x", ")", "\n", "\n", "return", "F", ".", "log_softmax", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.CifarMlpNet.__init__": [[176, 184], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sidak_otfusion.None.model.CifarMlpNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CifarMlpNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_dim", "=", "3072", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "1024", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "512", ",", "128", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "128", ",", "10", ",", "bias", "=", "not", "args", ".", "disable_bias", ")", "\n", "self", ".", "enable_dropout", "=", "args", ".", "enable_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.CifarMlpNet.forward": [[185, 199], ["torch.dropout.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.CifarMlpNet.fc4", "torch.log_softmax", "torch.log_softmax", "model.CifarMlpNet.fc1", "torch.dropout", "torch.dropout", "model.CifarMlpNet.fc2", "torch.dropout", "torch.dropout", "model.CifarMlpNet.fc3", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "\n", "return", "F", ".", "log_softmax", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sidak_otfusion.None.model.get_model_from_name": [[8, 35], ["model.Net", "model.SimpleNet", "model.SmallMlpNet", "model.MlpNet", "model.BigMlpNet", "model.CifarMlpNet", "train.get_model"], "function", ["None"], ["def", "get_model_from_name", "(", "args", ",", "idx", "=", "-", "1", ")", ":", "\n", "    ", "if", "idx", "!=", "-", "1", "and", "idx", "==", "(", "args", ".", "num_models", "-", "1", ")", ":", "\n", "# only passes for the second model", "\n", "        ", "width_ratio", "=", "args", ".", "width_ratio", "\n", "", "else", ":", "\n", "        ", "width_ratio", "=", "-", "1", "\n", "\n", "", "if", "args", ".", "model_name", "==", "'net'", ":", "\n", "        ", "return", "Net", "(", "args", ")", "\n", "", "elif", "args", ".", "model_name", "==", "'simplenet'", ":", "\n", "        ", "return", "SimpleNet", "(", "args", ")", "\n", "", "elif", "args", ".", "model_name", "==", "'smallmlpnet'", ":", "\n", "        ", "return", "SmallMlpNet", "(", "args", ")", "\n", "", "elif", "args", ".", "model_name", "==", "'mlpnet'", ":", "\n", "        ", "return", "MlpNet", "(", "args", ",", "width_ratio", "=", "width_ratio", ")", "\n", "", "elif", "args", ".", "model_name", "==", "'bigmlpnet'", ":", "\n", "        ", "return", "BigMlpNet", "(", "args", ")", "\n", "", "elif", "args", ".", "model_name", "==", "'cifarmlpnet'", ":", "\n", "        ", "return", "CifarMlpNet", "(", "args", ")", "\n", "", "elif", "args", ".", "model_name", "[", "0", ":", "3", "]", "==", "'vgg'", "or", "args", ".", "model_name", "[", "0", ":", "3", "]", "==", "'res'", ":", "\n", "        ", "if", "args", ".", "second_model_name", "is", "None", "or", "idx", "==", "0", ":", "\n", "            ", "barebone_config", "=", "{", "'model'", ":", "args", ".", "model_name", ",", "'dataset'", ":", "args", ".", "dataset", "}", "\n", "", "else", ":", "\n", "            ", "barebone_config", "=", "{", "'model'", ":", "args", ".", "second_model_name", ",", "'dataset'", ":", "args", ".", "dataset", "}", "\n", "\n", "# if you want pre-relu acts, set relu_inplace to False", "\n", "", "return", "cifar_train", ".", "get_model", "(", "barebone_config", ",", "args", ".", "gpu_id", ",", "relu_inplace", "=", "not", "args", ".", "prelu_acts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.baseline.get_avg_parameters": [[6, 19], ["zip", "print", "print", "avg_pars.append", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "net.parameters", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "enumerate"], "function", ["None"], ["def", "get_avg_parameters", "(", "networks", ",", "weights", "=", "None", ")", ":", "\n", "    ", "avg_pars", "=", "[", "]", "\n", "for", "par_group", "in", "zip", "(", "*", "[", "net", ".", "parameters", "(", ")", "for", "net", "in", "networks", "]", ")", ":", "\n", "        ", "print", "(", "[", "par", ".", "shape", "for", "par", "in", "par_group", "]", ")", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "weighted_par_group", "=", "[", "par", "*", "weights", "[", "i", "]", "for", "i", ",", "par", "in", "enumerate", "(", "par_group", ")", "]", "\n", "avg_par", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "weighted_par_group", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "# print(\"shape of stacked params is \", torch.stack(par_group).shape) # (2, 400, 784)", "\n", "            ", "avg_par", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "par_group", ")", ",", "dim", "=", "0", ")", "\n", "", "print", "(", "avg_par", ".", "shape", ")", "\n", "avg_pars", ".", "append", "(", "avg_par", ")", "\n", "", "return", "avg_pars", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.baseline.naive_ensembling": [[20, 47], ["baseline.get_avg_parameters", "model.get_model_from_name", "routines.test", "enumerate", "print", "ensemble_network.cuda.cuda", "ensemble_network.cuda.state_dict().items", "[].copy_", "routines.test", "ensemble_network.cuda.state_dict", "ensemble_network.cuda.state_dict"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.baseline.get_avg_parameters", "home.repos.pwc.inspect_result.sidak_otfusion.None.model.get_model_from_name", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test", "home.repos.pwc.inspect_result.sidak_otfusion.None.mnist.test"], ["", "def", "naive_ensembling", "(", "args", ",", "networks", ",", "test_loader", ")", ":", "\n", "# simply average the weights in networks", "\n", "    ", "if", "args", ".", "width_ratio", "!=", "1", ":", "\n", "        ", "print", "(", "\"Unfortunately naive ensembling can't work if models are not of same shape!\"", ")", "\n", "return", "-", "1", ",", "None", "\n", "", "weights", "=", "[", "(", "1", "-", "args", ".", "ensemble_step", ")", ",", "args", ".", "ensemble_step", "]", "\n", "avg_pars", "=", "get_avg_parameters", "(", "networks", ",", "weights", ")", "\n", "ensemble_network", "=", "get_model_from_name", "(", "args", ")", "\n", "# put on GPU", "\n", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "ensemble_network", "=", "ensemble_network", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "\n", "# check the test performance of the method before", "\n", "", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "# log_dict['test_counter'] = [i * len(train_loader.dataset) for i in range(args.n_epochs + 1)]", "\n", "routines", ".", "test", "(", "args", ",", "ensemble_network", ",", "test_loader", ",", "log_dict", ")", "\n", "\n", "# set the weights of the ensembled network", "\n", "for", "idx", ",", "(", "name", ",", "param", ")", "in", "enumerate", "(", "ensemble_network", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "ensemble_network", ".", "state_dict", "(", ")", "[", "name", "]", ".", "copy_", "(", "avg_pars", "[", "idx", "]", ".", "data", ")", "\n", "\n", "# check the test performance of the method after ensembling", "\n", "", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "# log_dict['test_counter'] = [i * len(train_loader.dataset) for i in range(args.n_epochs + 1)]", "\n", "return", "routines", ".", "test", "(", "args", ",", "ensemble_network", ",", "test_loader", ",", "log_dict", ")", ",", "ensemble_network", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.baseline.prediction_ensembling": [[49, 102], ["len", "log_dict[].append", "print", "args.dataset.lower", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "net.eval", "enumerate", "torch.sum", "torch.sum", "pred.eq().sum", "len", "data.cuda.cuda", "target.cuda.cuda", "len", "outputs.append", "torch.stack", "torch.stack", "args.dataset.lower", "torch.nn.CrossEntropyLoss.item", "torch.sum.data.max", "len", "float", "args.dataset.lower", "torch.nll_loss().item", "pred.eq", "len", "net", "torch.nn.CrossEntropyLoss.", "target.cuda.data.view_as", "torch.nll_loss"], "function", ["None"], ["", "def", "prediction_ensembling", "(", "args", ",", "networks", ",", "test_loader", ")", ":", "\n", "    ", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'test_losses'", "]", "=", "[", "]", "\n", "# test counter is not even used!", "\n", "# log_dict['test_counter'] = [i * len(train_loader.dataset) for i in range(args.n_epochs + 1)]", "\n", "\n", "if", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "        ", "cifar_criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "# set all the networks in eval mode", "\n", "", "for", "net", "in", "networks", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "\n", "#   with torch.no_grad():", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "gpu_id", "!=", "-", "1", ":", "\n", "            ", "data", "=", "data", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu_id", ")", "\n", "", "outputs", "=", "[", "]", "\n", "# average the outputs of all nets", "\n", "assert", "len", "(", "networks", ")", "==", "2", "\n", "if", "args", ".", "prediction_wts", ":", "\n", "            ", "wts", "=", "[", "(", "1", "-", "args", ".", "ensemble_step", ")", ",", "args", ".", "ensemble_step", "]", "\n", "", "else", ":", "\n", "            ", "wts", "=", "[", "0.5", ",", "0.5", "]", "\n", "", "for", "idx", ",", "net", "in", "enumerate", "(", "networks", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "wts", "[", "idx", "]", "*", "net", "(", "data", ")", ")", "\n", "#  print(\"number of outputs {} and each is of shape {}\".format(len(outputs), outputs[-1].shape))", "\n", "#  number of outputs 2 and each is of shape torch.Size([1000, 10])", "\n", "", "output", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "outputs", ")", ",", "dim", "=", "0", ")", "# sum because multiplied by wts above", "\n", "\n", "#  check loss of this ensembled prediction", "\n", "if", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "# mnist models return log_softmax outputs, while cifar ones return raw values!", "\n", "            ", "test_loss", "+=", "cifar_criterion", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'mnist'", ":", "\n", "            ", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "\n", "", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "log_dict", "[", "'test_losses'", "]", ".", "append", "(", "test_loss", ")", "\n", "\n", "\n", "print", "(", "'\\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "\n", "return", "(", "float", "(", "correct", ")", "*", "100.0", ")", "/", "len", "(", "test_loader", ".", "dataset", ")", "", "", ""]], "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.get_timestamp_other": [[17, 24], ["time.time", "datetime.datetime.fromtimestamp().strftime", "datetime.datetime.fromtimestamp"], "function", ["None"], ["def", "get_timestamp_other", "(", ")", ":", "\n", "    ", "import", "time", "\n", "import", "datetime", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "# %f allows granularity at the micro second level!", "\n", "timestamp", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "ts", ")", ".", "strftime", "(", "'%Y-%m-%d_%H-%M-%S_%f'", ")", "\n", "return", "timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.mkdir": [[31, 33], ["os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "# if not os.path.exists(path):", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.pickle_obj": [[36, 49], ["time.perf_counter", "open", "pickle.dump", "time.perf_counter"], "function", ["None"], ["", "def", "pickle_obj", "(", "obj", ",", "path", ",", "mode", "=", "\"wb\"", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", ":", "\n", "    ", "'''\n    Pickle object 'obj' and dump at 'path' using specified\n    'mode' and 'protocol'\n    Returns time taken to pickle\n    '''", "\n", "\n", "import", "time", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "pkl_file", "=", "open", "(", "path", ",", "mode", ")", "\n", "pickle", ".", "dump", "(", "obj", ",", "pkl_file", ",", "protocol", "=", "protocol", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "return", "(", "end_time", "-", "st_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.dict_union": [[50, 52], ["dict", "itertools.chain.from_iterable", "d.items"], "function", ["None"], ["", "def", "dict_union", "(", "*", "args", ")", ":", "\n", "    ", "return", "dict", "(", "chain", ".", "from_iterable", "(", "d", ".", "items", "(", ")", "for", "d", "in", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.save_results_params_csv": [[53, 81], ["os.path.exists", "open", "utils.dict_union", "csv.DictWriter", "csv.DictWriter.writerow", "vars", "collections.OrderedDict", "csv.DictWriter.writeheader", "sorted", "dict_union.keys", "collections.OrderedDict.items"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.utils.dict_union"], ["", "def", "save_results_params_csv", "(", "path", ",", "results_dic", ",", "args", ",", "ordered", "=", "True", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "add_header", "=", "False", "\n", "", "else", ":", "\n", "        ", "add_header", "=", "True", "\n", "\n", "", "with", "open", "(", "path", ",", "mode", "=", "'a'", ")", "as", "csv_file", ":", "\n", "\n", "        ", "if", "args", ".", "deprecated", "is", "not", "None", ":", "\n", "            ", "params", "=", "args", "\n", "", "else", ":", "\n", "            ", "params", "=", "vars", "(", "args", ")", "\n", "\n", "# Merge with params dic", "\n", "", "if", "ordered", ":", "\n", "# sort the parameters by name before saving", "\n", "            ", "params", "=", "collections", ".", "OrderedDict", "(", "sorted", "(", "params", ".", "items", "(", ")", ")", ")", "\n", "\n", "", "results_and_params_dic", "=", "dict_union", "(", "results_dic", ",", "params", ")", "\n", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "csv_file", ",", "fieldnames", "=", "results_and_params_dic", ".", "keys", "(", ")", ")", "\n", "\n", "# Add key header if file doesn't exist", "\n", "if", "add_header", ":", "\n", "            ", "writer", ".", "writeheader", "(", ")", "\n", "\n", "# Add results and params record", "\n", "", "writer", ".", "writerow", "(", "results_and_params_dic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.isnan": [[82, 84], ["None"], "function", ["None"], ["", "", "def", "isnan", "(", "x", ")", ":", "\n", "    ", "return", "x", "!=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.get_model_activations": [[86, 124], ["get_dataloader", "compute_activations.compute_activations_across_models", "train.get_dataset", "compute_activations.compute_selective_activation", "compute_activations.compute_activations_across_models_v1", "args.dataset.lower", "print", "partition.to_dataloader_from_tens"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.data.get_dataloader", "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.compute_activations_across_models", "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.compute_selective_activation", "home.repos.pwc.inspect_result.sidak_otfusion.None.compute_activations.compute_activations_across_models_v1", "home.repos.pwc.inspect_result.sidak_otfusion.None.partition.to_dataloader_from_tens"], ["", "def", "get_model_activations", "(", "args", ",", "models", ",", "config", "=", "None", ",", "layer_name", "=", "None", ",", "selective", "=", "False", ",", "personal_dataset", "=", "None", ")", ":", "\n", "    ", "import", "compute_activations", "\n", "from", "data", "import", "get_dataloader", "\n", "\n", "if", "args", ".", "activation_histograms", "and", "args", ".", "act_num_samples", ">", "0", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "            ", "unit_batch_train_loader", ",", "_", "=", "get_dataloader", "(", "args", ",", "unit_batch", "=", "True", ")", "\n", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "[", "0", ":", "7", "]", "==", "'cifar10'", ":", "\n", "            ", "if", "config", "is", "None", ":", "\n", "                ", "config", "=", "args", ".", "config", "# just use the config in arg", "\n", "", "unit_batch_train_loader", ",", "_", "=", "cifar_train", ".", "get_dataset", "(", "config", ",", "unit_batch_train", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "activation_mode", "is", "None", ":", "\n", "            ", "activations", "=", "compute_activations", ".", "compute_activations_across_models", "(", "args", ",", "models", ",", "unit_batch_train_loader", ",", "\n", "args", ".", "act_num_samples", ")", "\n", "", "else", ":", "\n", "            ", "if", "selective", "and", "args", ".", "update_acts", ":", "\n", "                ", "activations", "=", "compute_activations", ".", "compute_selective_activation", "(", "args", ",", "models", ",", "\n", "layer_name", ",", "unit_batch_train_loader", ",", "\n", "args", ".", "act_num_samples", ")", "\n", "", "else", ":", "\n", "                ", "if", "personal_dataset", "is", "not", "None", ":", "\n", "# personal training set is passed which consists of (inp, tgts)", "\n", "                    ", "print", "(", "'using the one from partition'", ")", "\n", "loader", "=", "partition", ".", "to_dataloader_from_tens", "(", "personal_dataset", "[", "0", "]", ",", "personal_dataset", "[", "1", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "loader", "=", "unit_batch_train_loader", "\n", "\n", "", "activations", "=", "compute_activations", ".", "compute_activations_across_models_v1", "(", "args", ",", "models", ",", "\n", "loader", ",", "\n", "args", ".", "act_num_samples", ",", "\n", "mode", "=", "args", ".", "activation_mode", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "activations", "=", "None", "\n", "\n", "", "return", "activations", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.get_model_layers_cfg": [[125, 134], ["print", "model_name[].lower", "model_name[].upper", "model_name[].lower"], "function", ["None"], ["", "def", "get_model_layers_cfg", "(", "model_name", ")", ":", "\n", "    ", "print", "(", "'model_name is '", ",", "model_name", ")", "\n", "if", "model_name", "==", "'mlpnet'", "or", "model_name", "[", "-", "7", ":", "]", "==", "'encoder'", ":", "\n", "        ", "return", "None", "\n", "", "elif", "model_name", "[", "0", ":", "3", "]", ".", "lower", "(", ")", "==", "'vgg'", ":", "\n", "        ", "cfg_key", "=", "model_name", "[", "0", ":", "5", "]", ".", "upper", "(", ")", "\n", "", "elif", "model_name", "[", "0", ":", "6", "]", ".", "lower", "(", ")", "==", "'resnet'", ":", "\n", "        ", "return", "None", "\n", "", "return", "vgg", ".", "cfg", "[", "cfg_key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.utils._get_config": [[136, 190], ["print", "args.dataset.lower"], "function", ["None"], ["", "def", "_get_config", "(", "args", ")", ":", "\n", "    ", "print", "(", "'refactored get_config'", ")", "\n", "import", "hyperparameters", ".", "vgg11_cifar10_baseline", "as", "cifar10_vgg_hyperparams", "# previously vgg_hyperparams", "\n", "import", "hyperparameters", ".", "vgg11_half_cifar10_baseline", "as", "cifar10_vgg_hyperparams_half", "\n", "import", "hyperparameters", ".", "vgg11_doub_cifar10_baseline", "as", "cifar10_vgg_hyperparams_doub", "\n", "import", "hyperparameters", ".", "vgg11_quad_cifar10_baseline", "as", "cifar10_vgg_hyperparams_quad", "\n", "import", "hyperparameters", ".", "resnet18_nobias_cifar10_baseline", "as", "cifar10_resnet18_nobias_hyperparams", "\n", "import", "hyperparameters", ".", "resnet18_nobias_nobn_cifar10_baseline", "as", "cifar10_resnet18_nobias_nobn_hyperparams", "\n", "import", "hyperparameters", ".", "mlpnet_cifar10_baseline", "as", "mlpnet_hyperparams", "\n", "\n", "config", "=", "None", "\n", "second_config", "=", "None", "\n", "\n", "if", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "        ", "if", "args", ".", "model_name", "==", "'mlpnet'", ":", "\n", "            ", "config", "=", "mlpnet_hyperparams", ".", "config", "\n", "", "elif", "args", ".", "model_name", "==", "'vgg11_nobias'", ":", "\n", "            ", "config", "=", "cifar10_vgg_hyperparams", ".", "config", "\n", "", "elif", "args", ".", "model_name", "==", "'vgg11_half_nobias'", ":", "\n", "            ", "config", "=", "cifar10_vgg_hyperparams_half", ".", "config", "\n", "", "elif", "args", ".", "model_name", "==", "'vgg11_doub_nobias'", ":", "\n", "            ", "config", "=", "cifar10_vgg_hyperparams_doub", ".", "config", "\n", "", "elif", "args", ".", "model_name", "==", "'vgg11_quad_nobias'", ":", "\n", "            ", "config", "=", "cifar10_vgg_hyperparams_quad", ".", "config", "\n", "", "elif", "args", ".", "model_name", "==", "'resnet18_nobias'", ":", "\n", "            ", "config", "=", "cifar10_resnet18_nobias_hyperparams", ".", "config", "\n", "", "elif", "args", ".", "model_name", "==", "'resnet18_nobias_nobn'", ":", "\n", "            ", "config", "=", "cifar10_resnet18_nobias_nobn_hyperparams", ".", "config", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "if", "args", ".", "second_model_name", "is", "not", "None", ":", "\n", "        ", "if", "'vgg'", "in", "args", ".", "second_model_name", ":", "\n", "            ", "if", "'half'", "in", "args", ".", "second_model_name", ":", "\n", "                ", "second_config", "=", "cifar10_vgg_hyperparams_half", ".", "config", "\n", "", "elif", "'doub'", "in", "args", ".", "second_model_name", ":", "\n", "                ", "second_config", "=", "cifar10_vgg_hyperparams_doub", ".", "config", "\n", "", "elif", "'quad'", "in", "args", ".", "second_model_name", ":", "\n", "                ", "second_config", "=", "cifar10_vgg_hyperparams_quad", ".", "config", "\n", "", "elif", "args", ".", "second_model_name", "==", "'vgg11_nobias'", ":", "\n", "                ", "second_config", "=", "cifar10_vgg_hyperparams", ".", "config", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "elif", "'resnet'", "in", "args", ".", "second_model_name", ":", "\n", "            ", "if", "args", ".", "second_model_name", "==", "'resnet18_nobias'", ":", "\n", "                ", "second_config", "=", "cifar10_resnet18_nobias_hyperparams", ".", "config", "\n", "", "elif", "args", ".", "second_model_name", "==", "'resnet18_nobias_nobn'", ":", "\n", "                ", "config", "=", "cifar10_resnet18_nobias_nobn_hyperparams", ".", "config", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "", "else", ":", "\n", "        ", "second_config", "=", "config", "\n", "\n", "", "return", "config", ",", "second_config", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.utils.get_model_size": [[191, 193], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_model_size", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_otfusion.None.train_cifar_models.main": [[19, 61], ["print", "print", "print", "utils.get_timestamp_other", "range", "print", "len", "str", "len", "str", "len", "int", "len", "copy.deepcopy", "print", "print", "train.main", "print", "str.split", "str", "globals"], "function", ["home.repos.pwc.inspect_result.sidak_otfusion.None.utils.get_timestamp_other", "home.repos.pwc.inspect_result.sidak_otfusion.None.train_cifar_models.main"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "len", "(", "sys", ".", "argv", ")", ">=", "2", ":", "\n", "        ", "model_type", "=", "str", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "if", "'@'", "in", "model_type", ":", "\n", "            ", "model_type", ",", "architecture_type", "=", "model_type", ".", "split", "(", "'@'", ")", "\n", "", "else", ":", "\n", "            ", "architecture_type", "=", "'vgg'", "\n", "", "", "else", ":", "\n", "        ", "model_type", "=", "'cifar10'", "\n", "architecture_type", "=", "'vgg'", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", ">=", "3", ":", "\n", "        ", "sub_type", "=", "str", "(", "sys", ".", "argv", "[", "2", "]", ")", "+", "'_'", "\n", "sub_type_str", "=", "str", "(", "sys", ".", "argv", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "        ", "sub_type", "=", "''", "\n", "sub_type_str", "=", "'plain'", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", ">=", "4", ":", "\n", "        ", "gpu_num", "=", "int", "(", "sys", ".", "argv", "[", "3", "]", ")", "\n", "gpus", "=", "[", "gpu_num", "]", "*", "num_models", "\n", "\n", "", "base_config", "=", "globals", "(", ")", "[", "f'{model_type}_{architecture_type}_{sub_type}hyperparams'", "]", ".", "config", "\n", "print", "(", "'base_config is '", ",", "base_config", ")", "\n", "print", "(", "\"gpus are \"", ",", "gpus", ")", "\n", "print", "(", "f'Model type is {model_type} and sub_type is {sub_type_str}'", ")", "\n", "\n", "timestamp", "=", "myutils", ".", "get_timestamp_other", "(", ")", "\n", "\n", "assert", "len", "(", "gpus", ")", "==", "num_models", "\n", "for", "idx", "in", "range", "(", "num_models", ")", ":", "\n", "        ", "model_config", "=", "copy", ".", "deepcopy", "(", "base_config", ")", "\n", "model_config", "[", "'seed'", "]", "=", "model_config", "[", "'seed'", "]", "+", "idx", "\n", "print", "(", "\"Model with idx {} runnning with seed {} on GPU {}\"", ".", "format", "(", "idx", ",", "model_config", "[", "'seed'", "]", ",", "gpus", "[", "idx", "]", ")", ")", "\n", "\n", "model_output_dir", "=", "'./cifar_models/exp_{}_{}_{}/model_{}/'", ".", "format", "(", "model_type", ",", "sub_type_str", ",", "timestamp", ",", "idx", ")", "\n", "print", "(", "\"This model with idx {} will be saved at {}\"", ".", "format", "(", "idx", ",", "model_output_dir", ")", ")", "\n", "\n", "accuracy", "=", "cifar_train", ".", "main", "(", "model_config", ",", "model_output_dir", ",", "gpus", "[", "idx", "]", ")", "\n", "print", "(", "\"The accuracy of model with idx {} is {}\"", ".", "format", "(", "idx", ",", "accuracy", ")", ")", "\n", "\n", "", "print", "(", "\"Done training all the models\"", ")", "\n", "\n"]]}