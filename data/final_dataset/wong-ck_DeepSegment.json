{"home.repos.pwc.inspect_result.wong-ck_DeepSegment.None.predict.main": [[17, 62], ["utilities.config.load_configuration", "utilities.log.create_or_get_logger", "tensorflow.logging.set_verbosity", "tensorflow.set_random_seed", "utilities.tfwrapper.estimator.create_segmenter", "utilities.tfwrapper.hook.create_hooks", "utilities.tfwrapper.input_fn.create_input_fn", "predict.create_writer", "estimator.create_segmenter.predict", "create_writer.close", "log.create_or_get_logger.info", "create_writer.write_data", "create_writer.write_data"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.load_configuration", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.estimator.create_segmenter", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.create_hooks", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.input_fn.create_input_fn", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.None.predict.create_writer", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.close", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.write_data", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.write_data"], ["def", "main", "(", ")", ":", "\n", "# load configuration from config file and command line", "\n", "    ", "ds_config", "=", "config", ".", "load_configuration", "(", ")", "\n", "\n", "# create logger", "\n", "logger", "=", "log", ".", "create_or_get_logger", "(", "level", "=", "ds_config", ".", "general_log_level", ")", "\n", "\n", "# setup tensorflow", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "ds_config", ".", "general_log_level", ")", "\n", "tf", ".", "set_random_seed", "(", "ds_config", ".", "general_random_seed", ")", "\n", "\n", "# create segmenter with loaded configuration", "\n", "segmenter", "=", "estimator", ".", "create_segmenter", "(", "ds_config", ")", "\n", "\n", "# create prediction hooks", "\n", "pred_hooks", "=", "hook", ".", "create_hooks", "(", "ds_config", ",", "mode", "=", "\"pred\"", ")", "\n", "\n", "# extract required configuration params", "\n", "image_type", "=", "ds_config", ".", "image_type", "\n", "output_type", "=", "ds_config", ".", "predict_output_type", "\n", "\n", "# create input functions", "\n", "pred_input_fn", "=", "input_fn", ".", "create_input_fn", "(", "\n", "ds_config", ",", "\n", "mode", "=", "\"pred\"", ",", "\n", "epochs", "=", "1", ",", "\n", ")", "\n", "\n", "# create image writer", "\n", "img_writer", "=", "create_writer", "(", "ds_config", ")", "\n", "\n", "# generate predictions using model", "\n", "predictions", "=", "segmenter", ".", "predict", "(", "input_fn", "=", "pred_input_fn", ",", "hooks", "=", "pred_hooks", ")", "\n", "\n", "# export predictions", "\n", "for", "prediction", "in", "predictions", ":", "\n", "        ", "if", "image_type", "==", "\"hdf5\"", ":", "\n", "            ", "img_writer", ".", "write_data", "(", "prediction", "[", "output_type", "]", ",", "name", "=", "output_type", ")", "\n", "", "elif", "image_type", "==", "\"nii\"", ":", "\n", "            ", "img_writer", ".", "write_data", "(", "prediction", "[", "output_type", "]", ")", "\n", "\n", "# close writer to finish writing images", "\n", "", "", "img_writer", ".", "close", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.None.predict.create_writer": [[64, 138], ["utilities.log.create_or_get_logger", "utilities.io.writer.HDF5Writer", "writer.NiftiWriter.create_dataset", "msg.format.format", "log.create_or_get_logger.error", "ValueError", "log.create_or_get_logger.error", "ValueError", "utilities.io.writer.NiftiWriter", "os.path.join", "tuple", "list"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.create_dataset"], ["", "def", "create_writer", "(", "ds_config", ")", ":", "\n", "    ", "logger", "=", "log", ".", "create_or_get_logger", "(", ")", "\n", "\n", "# extract required configuration params", "\n", "img_type", "=", "ds_config", ".", "image_type", "\n", "img_shape", "=", "ds_config", ".", "image_size", "\n", "img_nclasses", "=", "ds_config", ".", "image_nclasses", "\n", "img_batchsize", "=", "ds_config", ".", "image_batchsize", "\n", "\n", "predict_output_path", "=", "ds_config", ".", "predict_output_path", "\n", "predict_output_type", "=", "ds_config", ".", "predict_output_type", "\n", "\n", "if", "img_type", "==", "\"hdf5\"", ":", "\n", "        ", "pass", "\n", "", "elif", "img_type", "==", "\"nii\"", ":", "\n", "        ", "img_slicedim", "=", "ds_config", ".", "image_slicedim", "\n", "img_res", "=", "ds_config", ".", "image_resolution", "\n", "\n", "path_refnii", "=", "ds_config", ".", "image_paths", "[", "0", "]", "\n", "predict_imgkey", "=", "ds_config", ".", "predict_imgkey_feature", "\n", "if", "(", "predict_imgkey", "is", "not", "None", ")", "and", "(", "predict_imgkey", "!=", "''", ")", ":", "\n", "            ", "path_refnii", "=", "os", ".", "path", ".", "join", "(", "path_refnii", ",", "predict_imgkey", ")", "\n", "", "", "else", ":", "\n", "        ", "msg", "=", "\"unknown image_type {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "img_type", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# determine variables dependent on configuration params", "\n", "", "if", "predict_output_type", "==", "\"labels\"", ":", "\n", "        ", "dtype", "=", "np", ".", "uint8", "\n", "resample_order", "=", "0", "\n", "nchannels", "=", "None", "\n", "", "elif", "predict_output_type", "==", "\"probabilities\"", ":", "\n", "        ", "dtype", "=", "np", ".", "float32", "\n", "resample_order", "=", "1", "\n", "nchannels", "=", "img_nclasses", "\n", "\n", "if", "img_type", "==", "\"hdf5\"", ":", "\n", "            ", "img_shape", "=", "tuple", "(", "list", "(", "img_shape", ")", "+", "[", "nchannels", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "msg", "=", "\"unknown predict_output_type {:}\"", ".", "format", "(", "predict_output_type", ")", "\n", "msg", "+=", "\"; allowed values: {:}\"", ".", "format", "(", "[", "\"labels\"", ",", "\"probabilities\"", "]", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# create writer object", "\n", "", "if", "img_type", "==", "\"hdf5\"", ":", "\n", "        ", "img_writer", "=", "writer", ".", "HDF5Writer", "(", "\n", "path", "=", "predict_output_path", ",", "\n", "write_freq", "=", "5", "*", "img_batchsize", ",", "# write every 5 batches", "\n", "resize_chunk", "=", "50", "*", "img_batchsize", ",", "# resize every 50 batches", "\n", ")", "\n", "\n", "img_writer", ".", "create_dataset", "(", "\n", "name", "=", "predict_output_type", ",", "\n", "shape", "=", "img_shape", ",", "\n", "dtype", "=", "dtype", ",", "\n", ")", "\n", "", "elif", "img_type", "==", "\"nii\"", ":", "\n", "        ", "img_writer", "=", "writer", ".", "NiftiWriter", "(", "\n", "path_output", "=", "predict_output_path", ",", "\n", "path_refnii", "=", "path_refnii", ",", "\n", "input_res", "=", "img_res", ",", "\n", "input_shape", "=", "img_shape", ",", "\n", "slice_dim", "=", "img_slicedim", ",", "\n", "nchannels", "=", "nchannels", ",", "\n", "resample_order", "=", "resample_order", ",", "\n", "dtype", "=", "dtype", ",", "\n", "async_write", "=", "True", ",", "\n", "max_async_write", "=", "3", ",", "\n", ")", "\n", "\n", "", "return", "img_writer", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.None.train.main": [[13, 83], ["utilities.config.load_configuration", "utilities.log.create_or_get_logger", "tensorflow.logging.set_verbosity", "tensorflow.set_random_seed", "utilities.tfwrapper.estimator.create_segmenter", "utilities.tfwrapper.hook.create_hooks", "utilities.tfwrapper.hook.create_hooks", "log.create_or_get_logger.info", "log.create_or_get_logger.error", "ValueError", "utilities.tfwrapper.input_fn.create_input_fn", "utilities.tfwrapper.input_fn.create_input_fn", "estimator.create_segmenter.train", "estimator.create_segmenter.evaluate", "log.create_or_get_logger.info", "min", "min", "min", "str"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.load_configuration", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.estimator.create_segmenter", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.create_hooks", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.create_hooks", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.input_fn.create_input_fn", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.input_fn.create_input_fn"], ["def", "main", "(", ")", ":", "\n", "# load configuration from config file and command line", "\n", "    ", "ds_config", "=", "config", ".", "load_configuration", "(", ")", "\n", "\n", "# create logger", "\n", "logger", "=", "log", ".", "create_or_get_logger", "(", "level", "=", "ds_config", ".", "general_log_level", ")", "\n", "\n", "# setup tensorflow", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "ds_config", ".", "general_log_level", ")", "\n", "tf", ".", "set_random_seed", "(", "ds_config", ".", "general_random_seed", ")", "\n", "\n", "# create segmenter with loaded configuration", "\n", "segmenter", "=", "estimator", ".", "create_segmenter", "(", "ds_config", ")", "\n", "\n", "# create training and evaluation hooks", "\n", "train_hooks", "=", "hook", ".", "create_hooks", "(", "ds_config", ",", "mode", "=", "\"train\"", ")", "\n", "eval_hooks", "=", "hook", ".", "create_hooks", "(", "ds_config", ",", "mode", "=", "\"eval\"", ",", "segmenter", "=", "segmenter", ")", "\n", "\n", "# extract required configuration params", "\n", "iter_unit", "=", "ds_config", ".", "general_iteration_unit", "\n", "if", "iter_unit", "not", "in", "[", "\"epoch\"", ",", "\"step\"", "]", ":", "\n", "        ", "msg", "=", "\"unknown iteration unit {:}\"", ".", "format", "(", "iter_unit", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "eval_freq", "=", "ds_config", ".", "evaluate_freq", "\n", "niters", "=", "ds_config", ".", "train_iterations", "\n", "\n", "# train and evaluate model", "\n", "it", "=", "0", "\n", "while", "it", "<", "niters", ":", "\n", "# calculate number of iterations (epochs or steps) to perform", "\n", "        ", "if", "iter_unit", "==", "\"epoch\"", ":", "\n", "            ", "train_epochs", "=", "min", "(", "niters", "-", "it", ",", "eval_freq", ")", "\n", "train_steps", "=", "None", "\n", "", "elif", "iter_unit", "==", "\"step\"", ":", "\n", "            ", "train_epochs", "=", "None", "\n", "train_steps", "=", "min", "(", "niters", "-", "it", ",", "eval_freq", ")", "\n", "\n", "# create input functions", "\n", "", "train_input_fn", "=", "input_fn", ".", "create_input_fn", "(", "\n", "ds_config", ",", "\n", "mode", "=", "\"train\"", ",", "\n", "epochs", "=", "train_epochs", ",", "\n", ")", "\n", "eval_input_fn", "=", "input_fn", ".", "create_input_fn", "(", "\n", "ds_config", ",", "\n", "mode", "=", "\"eval\"", ",", "\n", "epochs", "=", "1", ",", "\n", ")", "\n", "\n", "# train", "\n", "segmenter", ".", "train", "(", "\n", "input_fn", "=", "train_input_fn", ",", "\n", "steps", "=", "train_steps", ",", "\n", "hooks", "=", "train_hooks", ",", "\n", ")", "\n", "\n", "# evaluate", "\n", "eval_results", "=", "segmenter", ".", "evaluate", "(", "\n", "input_fn", "=", "eval_input_fn", ",", "\n", "hooks", "=", "eval_hooks", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"Validation result: \"", "+", "str", "(", "eval_results", ")", ")", "\n", "\n", "# increment iteration counter", "\n", "it", "+=", "min", "(", "niters", "-", "it", ",", "eval_freq", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.scripts.build_hdf5.process_subject": [[114, 248], ["utilities.log.create_or_get_logger", "nib_img.get_data().copy", "nib_label.get_data().copy", "utilities.log.create_or_get_logger.debug", "utilities.image.resample_image", "utilities.image.resample_image", "utilities.log.create_or_get_logger.debug", "list", "range", "utilities.image.crop_or_pad_image", "utilities.image.crop_or_pad_image", "utilities.log.create_or_get_logger.debug", "len", "utilities.log.create_or_get_logger.error", "all", "utilities.log.create_or_get_logger.error", "utilities.log.create_or_get_logger.error", "utilities.log.create_or_get_logger.error", "len", "msg.format.format", "utilities.log.create_or_get_logger.error", "numpy.nonzero", "len", "range", "utilities.log.create_or_get_logger.info", "utilities.log.create_or_get_logger.debug", "len", "msg.format.format", "nib_img.get_data", "nib_label.get_data", "str", "len", "str", "str", "len", "bbox.append", "numpy.min", "numpy.max", "tuple", "tuple", "str", "zip", "slice", "utilities.log.create_or_get_logger.warn", "bbox.append", "max", "bbox.append", "max", "min", "msg.format.format", "slice", "max", "slice", "numpy.min", "numpy.max", "int", "int"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.resample_image", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.resample_image", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.crop_or_pad_image", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.crop_or_pad_image"], ["def", "process_subject", "(", "\n", "nib_img", ",", "nib_label", ",", "target_res", ",", "slice_size", ",", "slice_dim", ",", "crop", "\n", ")", ":", "\n", "# create logger", "\n", "    ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", ")", "\n", "\n", "# basic checking", "\n", "if", "len", "(", "slice_size", ")", "!=", "2", ":", "\n", "        ", "msg", "=", "\"  \"", "*", "4", "\n", "msg", "+=", "\"- unexpected dimension of slice_size ({:}, expected 2)\"", "\n", "logger", ".", "error", "(", "msg", ".", "format", "(", "len", "(", "slice_size", ")", ")", ")", "\n", "\n", "return", "None", "\n", "\n", "# get image data", "\n", "", "np_img", "=", "nib_img", ".", "get_data", "(", ")", ".", "copy", "(", ")", "\n", "np_label", "=", "nib_label", ".", "get_data", "(", ")", ".", "copy", "(", ")", "\n", "\n", "# basic checking", "\n", "if", "not", "all", "(", "x", "==", "y", "for", "x", ",", "y", "in", "zip", "(", "np_img", ".", "shape", ",", "np_label", ".", "shape", ")", ")", ":", "\n", "        ", "logger", ".", "error", "(", "\"  \"", "*", "4", "+", "\"- unexpected size mismatch:\"", ")", "\n", "logger", ".", "error", "(", "\"  \"", "*", "5", "+", "\"- image: {:}\"", ".", "format", "(", "np_img", ".", "shape", ")", ")", "\n", "logger", ".", "error", "(", "\"  \"", "*", "5", "+", "\"- label: {:}\"", ".", "format", "(", "np_label", ".", "shape", ")", ")", "\n", "\n", "return", "None", "\n", "\n", "", "logger", ".", "debug", "(", "\"  \"", "*", "4", "+", "\"- original shape: \"", "+", "str", "(", "np_img", ".", "shape", ")", ")", "\n", "\n", "# extract image info", "\n", "nii_res", "=", "nib_img", ".", "header", ".", "structarr", "[", "'pixdim'", "]", "[", "1", ":", "4", "]", "\n", "nii_size", "=", "np_img", ".", "shape", "\n", "\n", "# basic checking", "\n", "if", "len", "(", "nii_size", ")", "!=", "3", ":", "\n", "        ", "msg", "=", "\"  \"", "*", "4", "\n", "msg", "+=", "\"- unexpected dimension of input image ({:}, expected 3)\"", "\n", "msg", "=", "msg", ".", "format", "(", "len", "(", "nii_size", ")", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "\n", "return", "None", "\n", "\n", "# resample to match resolution", "\n", "# feature image", "\n", "", "np_img", "=", "utilities", ".", "image", ".", "resample_image", "(", "\n", "np_img", ",", "nii_res", ",", "target_res", ",", "order", "=", "3", ",", "disable_anti_aliasing", "=", "False", "\n", ")", "\n", "\n", "# label image", "\n", "# - set order = 0 (nearest neighbour):", "\n", "#   - should only interpolate with NN while resampling label image", "\n", "# - turn off anti-aliasing if scikit-image version >= 0.14:", "\n", "#   - AA leads to erroneous behavious in some cases", "\n", "np_label", "=", "utilities", ".", "image", ".", "resample_image", "(", "\n", "np_label", ",", "nii_res", ",", "target_res", ",", "order", "=", "0", ",", "disable_anti_aliasing", "=", "True", "\n", ")", "\n", "\n", "logger", ".", "debug", "(", "\"  \"", "*", "4", "+", "\"- after resampling: \"", "+", "str", "(", "np_img", ".", "shape", ")", ")", "\n", "\n", "# crop/extract slices if necessary", "\n", "if", "crop", ":", "\n", "        ", "a", "=", "np", ".", "nonzero", "(", "np_label", ")", "\n", "ndim", "=", "len", "(", "np_label", ".", "shape", ")", "\n", "\n", "# determine bounding box for cropping", "\n", "bbox", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "if", "i", "==", "slice_dim", ":", "\n", "# crop with no buffer in the slicing direction", "\n", "                ", "bbox", ".", "append", "(", "\n", "slice", "(", "\n", "max", "(", "np", ".", "min", "(", "a", "[", "i", "]", ")", ",", "0", ")", ",", "\n", "min", "(", "np", ".", "max", "(", "a", "[", "i", "]", ")", ",", "np_label", ".", "shape", "[", "i", "]", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "# crop with large buffer in all other directions", "\n", "                ", "a_min", "=", "np", ".", "min", "(", "a", "[", "i", "]", ")", "\n", "a_max", "=", "np", ".", "max", "(", "a", "[", "i", "]", ")", "\n", "\n", "if", "i", "<", "slice_dim", ":", "\n", "                    ", "ss", "=", "slice_size", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "ss", "=", "slice_size", "[", "i", "-", "1", "]", "\n", "\n", "", "if", "(", "a_max", "-", "a_min", ")", ">", "ss", ":", "\n", "                    ", "msg", "=", "\"  \"", "*", "4", "\n", "msg", "+=", "\"- ROI needs larger than {:} to be fully covered\"", "\n", "msg", "+=", "\"; consider specifying a lower resolution\"", "\n", "logger", ".", "warn", "(", "msg", ".", "format", "(", "slice_size", ")", ")", "\n", "\n", "# do not crop", "\n", "# image will be squashed into slice_size in next step", "\n", "bbox", ".", "append", "(", "slice", "(", "None", ")", ")", "\n", "", "else", ":", "\n", "# attempt to crop (ss) pixels with ROI being centered", "\n", "                    ", "a_start", "=", "max", "(", "\n", "a_min", "+", "int", "(", "0.5", "*", "(", "a_max", "-", "a_min", ")", ")", "-", "int", "(", "0.5", "*", "ss", ")", ",", "0", "\n", ")", "\n", "a_stop", "=", "a_start", "+", "ss", "\n", "\n", "# make sure a_stop doesn't exceed image size", "\n", "if", "a_stop", ">", "np_label", ".", "shape", "[", "i", "]", ":", "\n", "                        ", "a_start", "=", "max", "(", "\n", "a_start", "-", "(", "a_stop", "-", "np_label", ".", "shape", "[", "i", "]", ")", ",", "0", "\n", ")", "\n", "a_stop", "=", "np_label", ".", "shape", "[", "i", "]", "\n", "\n", "", "bbox", ".", "append", "(", "slice", "(", "a_start", ",", "a_stop", ")", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "\"  \"", "*", "4", "+", "\"- cropping with bounding box {:}\"", ".", "format", "(", "bbox", ")", ")", "\n", "\n", "np_img", "=", "np_img", "[", "tuple", "(", "bbox", ")", "]", "\n", "np_label", "=", "np_label", "[", "tuple", "(", "bbox", ")", "]", "\n", "\n", "logger", ".", "debug", "(", "\"  \"", "*", "4", "+", "\"- after cropping: \"", "+", "str", "(", "np_img", ".", "shape", ")", ")", "\n", "\n", "# resize if necessary", "\n", "", "_output_size", "=", "list", "(", "np_img", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "_output_size", ")", ")", ":", "\n", "        ", "if", "i", "<", "slice_dim", ":", "\n", "            ", "_output_size", "[", "i", "]", "=", "slice_size", "[", "i", "]", "\n", "", "elif", "i", ">", "slice_dim", ":", "\n", "            ", "_output_size", "[", "i", "]", "=", "slice_size", "[", "i", "-", "1", "]", "\n", "\n", "", "", "np_img", "=", "utilities", ".", "image", ".", "crop_or_pad_image", "(", "\n", "np_img", ",", "_output_size", ",", "background_value", "=", "None", "\n", ")", "\n", "np_label", "=", "utilities", ".", "image", ".", "crop_or_pad_image", "(", "\n", "np_label", ",", "_output_size", ",", "background_value", "=", "0", "\n", ")", "\n", "\n", "logger", ".", "debug", "(", "\"  \"", "*", "4", "+", "\"- after resize: \"", "+", "str", "(", "np_img", ".", "shape", ")", ")", "\n", "\n", "return", "(", "np_img", ",", "np_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.scripts.build_hdf5.process_data": [[250, 444], ["utilities.log.create_or_get_logger", "len", "len", "all", "utilities.log.create_or_get_logger.info", "utilities.io.writer.HDF5Writer", "utilities.io.writer.HDF5Writer", "utilities.io.writer.HDF5Writer.close", "utilities.io.writer.HDF5Writer.close", "set", "set", "str", "str", "os.path.exists", "os.makedirs", "utilities.io.writer.HDF5Writer.create_dataset", "utilities.io.writer.HDF5Writer.create_dataset", "utilities.log.create_or_get_logger.info", "os.path.join", "sorted", "os.path.join", "sorted", "zip", "dataset[].keys", "dt[].values", "str", "os.path.join", "os.path.join", "hdf5_writer.create_dataset", "hdf5_writer.create_dataset", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "nibabel.load", "nibabel.load", "build_hdf5.process_subject", "dataset[].items", "utilities.log.create_or_get_logger.info", "range", "dataset[].values", "int", "str", "str", "filename_hdf5.replace", "filename_hdf5.replace", "msg.format.format", "utilities.log.create_or_get_logger.error", "utilities.log.create_or_get_logger.info", "label.copy", "len", "list", "slice", "tuple", "utilities.io.writer.HDF5Writer.write_data", "utilities.io.writer.HDF5Writer.write_data", "utilities.io.writer.HDF5Writer.write_data", "utilities.io.writer.HDF5Writer.write_data", "utilities.io.writer.HDF5Writer.write_data", "utilities.io.writer.HDF5Writer.write_data", "str", "str", "list", "list", "slice", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.close", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.close", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.create_dataset", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.create_dataset", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.create_dataset", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.create_dataset", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.scripts.build_hdf5.process_subject", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.write_data", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.write_data", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.write_data", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.write_data", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.write_data", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.write_data"], ["", "def", "process_data", "(", "resample_config", ",", "dataset", ")", ":", "\n", "# create logger", "\n", "    ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", ")", "\n", "\n", "# determine total number of label class", "\n", "nclasses_raw", "=", "len", "(", "set", "(", "dataset", "[", "\"label_map\"", "]", ".", "keys", "(", ")", ")", ")", "\n", "\n", "_labels", "=", "[", "label", "for", "dt", "in", "DATASETS", "for", "label", "in", "dt", "[", "\"label_map\"", "]", ".", "values", "(", ")", "]", "\n", "nclasses_mapped", "=", "len", "(", "set", "(", "_labels", ")", ")", "\n", "\n", "# generate hdf5 filename", "\n", "filename_hdf5", "=", "dataset", "[", "\"name\"", "]", "\n", "\n", "filename_hdf5", "+=", "\"_\"", "+", "resample_config", "[", "\"slice_dim_label\"", "]", "\n", "\n", "filename_hdf5", "+=", "\"_cropped\"", "if", "resample_config", "[", "\"crop\"", "]", "else", "\"_uncropped\"", "\n", "\n", "filename_hdf5", "+=", "\"_ncls_<ncls>\"", "\n", "\n", "_size_str", "=", "[", "str", "(", "s", ")", "for", "s", "in", "resample_config", "[", "\"target_size\"", "]", "]", "\n", "_size_str", "=", "\"x\"", ".", "join", "(", "_size_str", ")", "\n", "filename_hdf5", "+=", "\"_size_\"", "+", "_size_str", "\n", "\n", "_res_str", "=", "[", "str", "(", "r", ")", "for", "r", "in", "resample_config", "[", "\"target_res\"", "]", "]", "\n", "_res_str", "=", "\"x\"", ".", "join", "(", "_res_str", ")", "\n", "filename_hdf5", "+=", "\"_res_\"", "+", "_res_str", "\n", "\n", "if", "all", "(", "[", "v", "is", "None", "for", "v", "in", "dataset", "[", "\"max_subj\"", "]", ".", "values", "(", ")", "]", ")", ":", "\n", "        ", "filename_hdf5", "+=", "\"_nsubj_all\"", "\n", "", "else", ":", "\n", "        ", "nsubj", "=", "0", "\n", "for", "tt", "in", "[", "\"train\"", ",", "\"test\"", "]", ":", "\n", "            ", "if", "dataset", "[", "\"max_subj\"", "]", "[", "tt", "]", "is", "not", "None", ":", "\n", "                ", "nsubj", "+=", "int", "(", "dataset", "[", "\"max_subj\"", "]", "[", "tt", "]", ")", "\n", "\n", "", "", "if", "dataset", "[", "\"max_subj\"", "]", "[", "\"train\"", "]", "is", "None", ":", "\n", "            ", "nsubj", "=", "\"all+\"", "+", "str", "(", "nsubj", ")", "\n", "", "if", "dataset", "[", "\"max_subj\"", "]", "[", "\"test\"", "]", "is", "None", ":", "\n", "            ", "nsubj", "=", "str", "(", "nsubj", ")", "+", "\"+all\"", "\n", "\n", "", "filename_hdf5", "+=", "\"_nsubj_\"", "+", "str", "(", "nsubj", ")", "\n", "\n", "", "filename_hdf5", "+=", "\".hdf5\"", "\n", "\n", "logger", ".", "info", "(", "\"  \"", "*", "2", "+", "\"- hdf5 filename: {:}\"", ".", "format", "(", "filename_hdf5", ")", ")", "\n", "\n", "# create HDF5Writers", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dataset", "[", "\"dest_dir\"", "]", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dataset", "[", "\"dest_dir\"", "]", ")", "\n", "\n", "", "hdf5_writer_mapped", "=", "HDF5Writer", "(", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "dataset", "[", "\"dest_dir\"", "]", ",", "\n", "filename_hdf5", ".", "replace", "(", "\"<ncls>\"", ",", "str", "(", "nclasses_mapped", ")", ")", "\n", ")", ",", "\n", "write_freq", "=", "HDF5_WRITE_FREQ", ",", "\n", "resize_chunk", "=", "HDF5_RESIZE_CHUNK", ",", "\n", ")", "\n", "\n", "hdf5_writer_raw", "=", "HDF5Writer", "(", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "dataset", "[", "\"dest_dir\"", "]", ",", "\n", "filename_hdf5", ".", "replace", "(", "\"<ncls>\"", ",", "str", "(", "nclasses_raw", ")", ")", "\n", ")", ",", "\n", "write_freq", "=", "HDF5_WRITE_FREQ", ",", "\n", "resize_chunk", "=", "HDF5_RESIZE_CHUNK", ",", "\n", ")", "\n", "\n", "for", "tt", "in", "[", "'test'", ",", "'train'", "]", ":", "\n", "# create datasets in HDF5Writer", "\n", "        ", "for", "hdf5_writer", "in", "[", "hdf5_writer_mapped", ",", "hdf5_writer_raw", "]", ":", "\n", "            ", "hdf5_writer", ".", "create_dataset", "(", "\n", "\"image_%s\"", "%", "tt", ",", "\n", "shape", "=", "list", "(", "resample_config", "[", "\"target_size\"", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "hdf5_writer", ".", "create_dataset", "(", "\n", "\"label_%s\"", "%", "tt", ",", "\n", "shape", "=", "list", "(", "resample_config", "[", "\"target_size\"", "]", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "\n", "", "hdf5_writer_mapped", ".", "create_dataset", "(", "\n", "\"presence_%s\"", "%", "tt", ",", "shape", "=", "[", "nclasses_mapped", "]", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "hdf5_writer_raw", ".", "create_dataset", "(", "\n", "\"presence_%s\"", "%", "tt", ",", "shape", "=", "[", "nclasses_raw", "]", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"  \"", "*", "2", "+", "\"- processing %s subjects\"", "%", "tt", ")", "\n", "\n", "# define paths", "\n", "dirname_img", "=", "os", ".", "path", ".", "join", "(", "dataset", "[", "\"src_dir\"", "]", ",", "\"image_%s\"", "%", "tt", ")", "\n", "filenames_img", "=", "sorted", "(", "os", ".", "listdir", "(", "dirname_img", ")", ")", "\n", "\n", "dirname_label", "=", "os", ".", "path", ".", "join", "(", "dataset", "[", "\"src_dir\"", "]", ",", "\"label_%s\"", "%", "tt", ")", "\n", "filenames_label", "=", "sorted", "(", "os", ".", "listdir", "(", "dirname_label", ")", ")", "\n", "\n", "# loop over each subjects", "\n", "counter_subj", "=", "0", "\n", "for", "filename_img", ",", "filename_label", "in", "zip", "(", "\n", "filenames_img", ",", "filenames_label", "\n", ")", ":", "\n", "# check breaking condition", "\n", "            ", "if", "dataset", "[", "\"max_subj\"", "]", "[", "tt", "]", "is", "not", "None", ":", "\n", "                ", "if", "counter_subj", ">=", "dataset", "[", "\"max_subj\"", "]", "[", "tt", "]", ":", "\n", "                    ", "break", "\n", "\n", "# verify that filenames are the same", "\n", "", "", "if", "filename_img", "!=", "filename_label", ":", "\n", "                ", "msg", "=", "\"  \"", "*", "3", "+", "\"- unexpected filename mismatch between \"", "\n", "msg", "+=", "\"image_{:} ({:}) and label_{:} ({:}); skipping...\"", "\n", "msg", "=", "msg", ".", "format", "(", "tt", ",", "filename_img", ",", "tt", ",", "filename_label", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "\n", "counter_subj", "+=", "1", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"  \"", "*", "3", "+", "\"- \"", "+", "filename_img", ")", "\n", "\n", "# load img and label (nifti)", "\n", "", "fullpath_img", "=", "os", ".", "path", ".", "join", "(", "dirname_img", ",", "filename_img", ")", "\n", "fullpath_label", "=", "os", ".", "path", ".", "join", "(", "dirname_label", ",", "filename_label", ")", "\n", "\n", "nib_img", "=", "nib", ".", "load", "(", "fullpath_img", ")", "\n", "nib_label", "=", "nib", ".", "load", "(", "fullpath_label", ")", "\n", "\n", "# process subject", "\n", "results", "=", "process_subject", "(", "\n", "nib_img", ",", "\n", "nib_label", ",", "\n", "target_res", "=", "resample_config", "[", "\"target_res\"", "]", ",", "\n", "slice_size", "=", "resample_config", "[", "\"target_size\"", "]", ",", "\n", "slice_dim", "=", "resample_config", "[", "\"slice_dim\"", "]", ",", "\n", "crop", "=", "resample_config", "[", "\"crop\"", "]", "\n", ")", "\n", "\n", "if", "results", "is", "None", ":", "\n", "                ", "counter_subj", "+=", "1", "\n", "continue", "\n", "\n", "", "(", "img", ",", "label", ")", "=", "results", "\n", "\n", "# define presence array", "\n", "presence_raw", "=", "[", "True", "]", "*", "nclasses_raw", "\n", "\n", "# map value of label image according to map", "\n", "presence_mapped", "=", "[", "False", "]", "*", "nclasses_mapped", "\n", "label_mapped", "=", "label", ".", "copy", "(", ")", "*", "0", "\n", "\n", "for", "s", ",", "t", "in", "dataset", "[", "\"label_map\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "presence_mapped", "[", "t", "]", "=", "True", "\n", "label_mapped", "[", "label", "==", "s", "]", "=", "t", "\n", "\n", "# write out", "\n", "", "logger", ".", "info", "(", "\"  \"", "*", "4", "+", "\"- writing to hdf5 [{:}]\"", ".", "format", "(", "tt", ")", ")", "\n", "\n", "bbox_base", "=", "[", "slice", "(", "None", ")", "]", "*", "len", "(", "img", ".", "shape", ")", "\n", "for", "islice", "in", "range", "(", "img", ".", "shape", "[", "resample_config", "[", "\"slice_dim\"", "]", "]", ")", ":", "\n", "# create bounding box at current slice", "\n", "                ", "bbox", "=", "list", "(", "bbox_base", ")", "\n", "bbox", "[", "resample_config", "[", "\"slice_dim\"", "]", "]", "=", "slice", "(", "islice", ",", "islice", "+", "1", ")", "\n", "bbox", "=", "tuple", "(", "bbox", ")", "\n", "\n", "# write feature image", "\n", "hdf5_writer_mapped", ".", "write_data", "(", "\n", "np", ".", "squeeze", "(", "img", "[", "bbox", "]", ")", ",", "'image_%s'", "%", "tt", "\n", ")", "\n", "hdf5_writer_raw", ".", "write_data", "(", "\n", "np", ".", "squeeze", "(", "img", "[", "bbox", "]", ")", ",", "'image_%s'", "%", "tt", "\n", ")", "\n", "\n", "# write label image", "\n", "hdf5_writer_mapped", ".", "write_data", "(", "\n", "np", ".", "squeeze", "(", "label_mapped", "[", "bbox", "]", ")", ",", "'label_%s'", "%", "tt", "\n", ")", "\n", "hdf5_writer_raw", ".", "write_data", "(", "\n", "np", ".", "squeeze", "(", "label", "[", "bbox", "]", ")", ",", "'label_%s'", "%", "tt", "\n", ")", "\n", "\n", "# write presence array", "\n", "hdf5_writer_mapped", ".", "write_data", "(", "\n", "presence_mapped", ",", "'presence_%s'", "%", "tt", "\n", ")", "\n", "hdf5_writer_raw", ".", "write_data", "(", "presence_raw", ",", "'presence_%s'", "%", "tt", ")", "\n", "\n", "# increment subject counter", "\n", "", "counter_subj", "+=", "1", "\n", "\n", "# flush remaining data and close hdf5 file", "\n", "", "", "hdf5_writer_mapped", ".", "close", "(", ")", "\n", "hdf5_writer_raw", ".", "close", "(", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.scripts.build_hdf5.main": [[446, 466], ["utilities.log.create_or_get_logger", "utilities.log.create_or_get_logger.info", "utilities.log.print_dict", "msg.format.format", "utilities.log.create_or_get_logger.info", "utilities.log.print_dict", "build_hdf5.process_data"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.print_dict", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.print_dict", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.scripts.build_hdf5.process_data"], ["", "def", "main", "(", ")", ":", "\n", "# create logger", "\n", "    ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", ")", "\n", "\n", "# loop over each resample configuration", "\n", "for", "resample_config", "in", "RESAMPLE_CONFIGS", ":", "\n", "# print/log info", "\n", "        ", "logger", ".", "info", "(", "\"processing images with configurations:\"", ")", "\n", "utilities", ".", "log", ".", "print_dict", "(", "resample_config", ",", "logger", "=", "logger", ",", "indent", "=", "1", ")", "\n", "\n", "# loop over each datasets:", "\n", "for", "dataset", "in", "DATASETS", ":", "\n", "# print/log info", "\n", "            ", "msg", "=", "\"  \"", "*", "1", "+", "\"- processing dataset: {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "dataset", "[", "\"name\"", "]", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "utilities", ".", "log", ".", "print_dict", "(", "dataset", ",", "logger", "=", "logger", ",", "indent", "=", "2", ")", "\n", "\n", "# actually process data", "\n", "process_data", "(", "resample_config", ",", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.scripts.build_hdf5_partial.main": [[113, 147], ["utilities.log.create_or_get_logger", "utilities.log.create_or_get_logger.info", "utilities.log.print_dict", "msg.format.format", "utilities.log.create_or_get_logger.info", "utilities.log.print_dict", "str", "str", "os.path.join", "os.path.join", "projects.MSD_full.data.scripts.build_hdf5.process_data"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.print_dict", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.print_dict", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.scripts.build_hdf5.process_data"], ["def", "main", "(", ")", ":", "\n", "# create logger", "\n", "    ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", ")", "\n", "\n", "# loop over each resample configuration", "\n", "for", "resample_config", "in", "RESAMPLE_CONFIGS", ":", "\n", "# print/log info", "\n", "        ", "logger", ".", "info", "(", "\"processing images with configurations:\"", ")", "\n", "utilities", ".", "log", ".", "print_dict", "(", "resample_config", ",", "logger", "=", "logger", ",", "indent", "=", "1", ")", "\n", "\n", "# loop over each datasets:", "\n", "for", "dataset", "in", "DATASETS", ":", "\n", "# print/log info", "\n", "            ", "msg", "=", "\"  \"", "*", "1", "+", "\"- processing dataset: {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "dataset", "[", "\"name\"", "]", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "utilities", ".", "log", ".", "print_dict", "(", "dataset", ",", "logger", "=", "logger", ",", "indent", "=", "2", ")", "\n", "\n", "# extract src and dest dirs", "\n", "dataset_src_dir", "=", "str", "(", "dataset", "[", "\"src_dir\"", "]", ")", "\n", "dataset_dest_dir", "=", "str", "(", "dataset", "[", "\"dest_dir\"", "]", ")", "\n", "\n", "# loop over train percent", "\n", "for", "train_percent", "in", "TRAIN_PERCENTS", ":", "\n", "# modify src and dest dirs", "\n", "                ", "dataset", "[", "\"src_dir\"", "]", "=", "os", ".", "path", ".", "join", "(", "\n", "dataset_src_dir", ",", "\"trainpercent_%s\"", "%", "train_percent", "\n", ")", "\n", "dataset", "[", "\"dest_dir\"", "]", "=", "os", ".", "path", ".", "join", "(", "\n", "dataset_dest_dir", ",", "\"trainpercent_%s\"", "%", "train_percent", "\n", ")", "\n", "\n", "# actually process data", "\n", "process_data", "(", "resample_config", ",", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.scripts.make_symlink_partial.generate_nii_filepaths": [[22, 90], ["utilities.log.create_or_get_logger", "os.path.join", "sorted", "os.path.join", "sorted", "zip", "round", "utilities.log.create_or_get_logger.error", "ValueError", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "utilities.log.create_or_get_logger.error", "ValueError", "range", "range", "enumerate", "enumerate", "len"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger"], ["def", "generate_nii_filepaths", "(", "dataset", ",", "train_percent", ")", ":", "\n", "    ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", ")", "\n", "\n", "# checkings", "\n", "if", "(", "train_percent", "<", "0.0", ")", "or", "(", "train_percent", ">", "80.0", ")", ":", "\n", "        ", "msg", "=", "\"train_percent must be between 0 and 80\"", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# obtain a list of all available feature/label images", "\n", "", "imgs", "=", "os", ".", "path", ".", "join", "(", "DIR_NII_MSD2018", ",", "dataset", ",", "\"imagesTr\"", ")", "\n", "imgs", "=", "sorted", "(", "os", ".", "listdir", "(", "imgs", ")", ")", "\n", "\n", "labels", "=", "os", ".", "path", ".", "join", "(", "DIR_NII_MSD2018", ",", "dataset", ",", "\"labelsTr\"", ")", "\n", "labels", "=", "sorted", "(", "os", ".", "listdir", "(", "labels", ")", ")", "\n", "\n", "for", "filename_img", ",", "filename_label", "in", "zip", "(", "imgs", ",", "labels", ")", ":", "\n", "        ", "if", "filename_img", "!=", "filename_label", ":", "\n", "            ", "msg", "=", "\"unexpected filename mismatch \"", "\n", "msg", "+=", "\"between feature and label images\"", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# make fullpaths", "\n", "", "", "imgs", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "DIR_NII_MSD2018", ",", "dataset", ",", "\"imagesTr\"", ",", "img", ")", "for", "img", "in", "imgs", "\n", "]", "\n", "labels", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "DIR_NII_MSD2018", ",", "dataset", ",", "\"labelsTr\"", ",", "label", ")", "\n", "for", "label", "in", "labels", "\n", "]", "\n", "\n", "# shuffle images deterministically", "\n", "# (1) divide images into 40 sets", "\n", "nset_total", "=", "40", "\n", "\n", "img_sets", "=", "[", "imgs", "[", "i", ":", ":", "nset_total", "]", "for", "i", "in", "range", "(", "nset_total", ")", "]", "\n", "label_sets", "=", "[", "labels", "[", "i", ":", ":", "nset_total", "]", "for", "i", "in", "range", "(", "nset_total", ")", "]", "\n", "\n", "# (2) train-test split; every 5th set will be the test set", "\n", "img_test", "=", "img_sets", "[", "4", ":", ":", "5", "]", "\n", "label_test", "=", "label_sets", "[", "4", ":", ":", "5", "]", "\n", "\n", "img_train", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "img_sets", ")", "if", "(", "(", "i", "+", "1", ")", "%", "5", "!=", "0", ")", "]", "\n", "label_train", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "label_sets", ")", "if", "(", "(", "i", "+", "1", ")", "%", "5", "!=", "0", ")", "]", "\n", "\n", "# (3) flatten 2D lists", "\n", "img_test", "=", "[", "i", "for", "s", "in", "img_test", "for", "i", "in", "s", "]", "\n", "label_test", "=", "[", "l", "for", "s", "in", "label_test", "for", "l", "in", "s", "]", "\n", "\n", "img_train", "=", "[", "i", "for", "s", "in", "img_train", "for", "i", "in", "s", "]", "\n", "label_train", "=", "[", "l", "for", "s", "in", "label_train", "for", "l", "in", "s", "]", "\n", "\n", "# (4) determine number of images needed to achieve train_percent", "\n", "nimg_train", "=", "round", "(", "train_percent", "/", "80.0", "*", "len", "(", "img_train", ")", ")", "\n", "\n", "# (5) create train set", "\n", "img_train", "=", "img_train", "[", ":", "nimg_train", "]", "\n", "label_train", "=", "label_train", "[", ":", "nimg_train", "]", "\n", "\n", "# create dictionary and return", "\n", "filepaths", "=", "{", "}", "\n", "filepaths", "[", "'image_train'", "]", "=", "img_train", "\n", "filepaths", "[", "'image_test'", "]", "=", "img_test", "\n", "filepaths", "[", "'label_train'", "]", "=", "label_train", "\n", "filepaths", "[", "'label_test'", "]", "=", "label_test", "\n", "\n", "return", "filepaths", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.scripts.make_symlink_partial.main": [[93, 153], ["utilities.log.create_or_get_logger", "utilities.log.create_or_get_logger.info", "utilities.log.create_or_get_logger.info", "make_symlink_partial.generate_nii_filepaths", "generate_nii_filepaths.items", "utilities.log.create_or_get_logger.info", "os.path.join", "os.path.exists", "os.makedirs", "os.path.basename", "utilities.log.create_or_get_logger.info", "os.path.relpath", "os.path.join", "os.path.islink", "os.symlink", "os.remove"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.scripts.make_symlink_partial.generate_nii_filepaths"], ["", "def", "main", "(", ")", ":", "\n", "    ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", ")", "\n", "\n", "# define dataset names", "\n", "datasets", "=", "[", "]", "\n", "datasets", "+=", "[", "\"Task03_Liver\"", "]", "\n", "datasets", "+=", "[", "\"Task07_Pancreas\"", "]", "\n", "datasets", "+=", "[", "\"Task09_Spleen\"", "]", "\n", "\n", "# define train percents", "\n", "train_percents", "=", "[", "2.5", ",", "5.0", ",", "10.0", ",", "20.0", ",", "40.0", "]", "\n", "\n", "# loop over datasets", "\n", "for", "dataset", "in", "datasets", ":", "\n", "        ", "logger", ".", "info", "(", "\"  \"", "*", "1", "+", "\"- dataset: {:}\"", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "# loop over train_percents", "\n", "for", "train_percent", "in", "train_percents", ":", "\n", "            ", "logger", ".", "info", "(", "\"  \"", "*", "2", "+", "\"- train_percent: {:}\"", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "# get sets of nii filepaths", "\n", "filepaths", "=", "generate_nii_filepaths", "(", "dataset", ",", "train_percent", ")", "\n", "\n", "# loop over nii filepaths sets", "\n", "for", "nii_setname", ",", "nii_fullpaths", "in", "filepaths", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\"  \"", "*", "3", "+", "\"- set: {:}\"", ".", "format", "(", "nii_setname", ")", ")", "\n", "\n", "# create destination directory if not exists", "\n", "dir_img_dest", "=", "os", ".", "path", ".", "join", "(", "\n", "DIR_NII_PROJ", ",", "\n", "dataset", ",", "\n", "\"trainpercent_%.1f\"", "%", "train_percent", ",", "\n", "nii_setname", ",", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_img_dest", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "dir_img_dest", ")", "\n", "\n", "# loop over filepaths", "\n", "", "for", "nii_fullpath", "in", "nii_fullpaths", ":", "\n", "                    ", "nii_filename", "=", "os", ".", "path", ".", "basename", "(", "nii_fullpath", ")", "\n", "\n", "msg", "=", "\"  \"", "*", "4", "+", "\"- image: {:}\"", ".", "format", "(", "nii_filename", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "# determine relative path to src", "\n", "nii_src_relpath", "=", "os", ".", "path", ".", "relpath", "(", "\n", "nii_fullpath", ",", "dir_img_dest", "\n", ")", "\n", "\n", "# define destination path", "\n", "nii_dest_fullpath", "=", "os", ".", "path", ".", "join", "(", "\n", "dir_img_dest", ",", "nii_filename", "\n", ")", "\n", "\n", "# delete links if already exists", "\n", "if", "os", ".", "path", ".", "islink", "(", "nii_dest_fullpath", ")", ":", "\n", "                        ", "os", ".", "remove", "(", "nii_dest_fullpath", ")", "\n", "\n", "# make symlinks", "\n", "", "os", ".", "symlink", "(", "nii_src_relpath", ",", "nii_dest_fullpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.__init__": [[566, 574], ["object.__init__", "config.DeepSegmentConfig.get_config_names", "setattr"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.__init__", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.get_config_names"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DeepSegmentConfig", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# initialize all class property to None", "\n", "ds_config_names", "=", "self", ".", "get_config_names", "(", ")", "\n", "\n", "for", "config_name", "in", "ds_config_names", ":", "\n", "            ", "setattr", "(", "self", ",", "config_name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.get_config_names": [[575, 579], ["dir", "isinstance", "getattr"], "methods", ["None"], ["", "", "def", "get_config_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "p", "for", "p", "in", "dir", "(", "self", ".", "__class__", ")", "\n", "if", "isinstance", "(", "getattr", "(", "self", ".", "__class__", ",", "p", ")", ",", "property", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.check_consistency": [[581, 583], ["config.DeepSegmentConfig._verify_image_labelproperties_consistency"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig._verify_image_labelproperties_consistency"], ["", "def", "check_consistency", "(", "self", ")", ":", "\n", "        ", "self", ".", "_verify_image_labelproperties_consistency", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.general_log_level": [[589, 609], ["isinstance", "isinstance", "var.upper", "ValueError", "var.upper", "TypeError", "ValueError"], "methods", ["None"], ["", "@", "general_log_level", ".", "setter", "\n", "def", "general_log_level", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "var", "is", "None", ":", "\n", "            ", "log_level", "=", "None", "\n", "", "elif", "isinstance", "(", "var", ",", "str", ")", ":", "\n", "            ", "allowed", "=", "[", "\"DEBUG\"", ",", "\"INFO\"", ",", "\"WARNING\"", ",", "\"ERROR\"", ",", "\"CRITICAL\"", "]", "\n", "if", "var", ".", "upper", "(", ")", "not", "in", "allowed", ":", "\n", "                ", "raise", "ValueError", "(", "\"unknown log level '{:}'\"", ".", "format", "(", "var", ")", ")", "\n", "", "else", ":", "\n", "                ", "log_level", "=", "var", ".", "upper", "(", ")", "\n", "", "", "elif", "isinstance", "(", "var", ",", "int", ")", ":", "\n", "            ", "allowed", "=", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", "]", "\n", "if", "var", "not", "in", "allowed", ":", "\n", "                ", "raise", "ValueError", "(", "\"unknown log level '{:}'\"", ".", "format", "(", "var", ")", ")", "\n", "", "else", ":", "\n", "                ", "log_level", "=", "var", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"log level must be specified in int or string\"", ")", "\n", "\n", "", "self", ".", "_general_log_level", "=", "log_level", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.general_random_seed": [[614, 617], ["int"], "methods", ["None"], ["", "@", "general_random_seed", ".", "setter", "\n", "def", "general_random_seed", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_general_random_seed", "=", "int", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.general_iteration_unit": [[622, 646], ["isinstance", "TypeError", "var.lower", "msg.format.format.format", "ValueError"], "methods", ["None"], ["", "@", "general_iteration_unit", ".", "setter", "\n", "def", "general_iteration_unit", "(", "self", ",", "var", ")", ":", "\n", "        ", "allowed", "=", "[", "\"epoch\"", ",", "\"epochs\"", ",", "\"step\"", ",", "\"steps\"", "]", "\n", "\n", "if", "var", "is", "None", ":", "\n", "            ", "iteration_unit", "=", "None", "\n", "", "elif", "not", "isinstance", "(", "var", ",", "str", ")", ":", "\n", "            ", "msg", "=", "\"iteration_unit must be a string\"", "\n", "raise", "TypeError", "(", "msg", ")", "\n", "", "elif", "var", ".", "lower", "(", ")", "not", "in", "allowed", ":", "\n", "# check that iteration_unit is allowed", "\n", "            ", "msg", "=", "\"iteration_unit must be either of these: {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "allowed", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "iteration_unit", "=", "var", "\n", "\n", "# if plural, convert to singular", "\n", "", "if", "iteration_unit", "==", "\"epochs\"", ":", "\n", "            ", "iteration_unit", "=", "\"epoch\"", "\n", "", "if", "iteration_unit", "==", "\"steps\"", ":", "\n", "            ", "iteration_unit", "=", "\"step\"", "\n", "\n", "", "self", ".", "_general_iteration_unit", "=", "iteration_unit", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_paths": [[652, 669], ["isinstance", "tuple", "isinstance", "tuple", "TypeError", "x.strip", "var.split", "str().strip", "str"], "methods", ["None"], ["", "@", "image_paths", ".", "setter", "\n", "def", "image_paths", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "var", "is", "None", ":", "\n", "            ", "image_paths", "=", "None", "\n", "", "elif", "isinstance", "(", "var", ",", "str", ")", ":", "\n", "# split at comma", "\n", "            ", "image_paths", "=", "tuple", "(", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "var", ".", "split", "(", "','", ")", "]", ")", "\n", "", "elif", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "# convert values to str", "\n", "            ", "image_paths", "=", "tuple", "(", "[", "str", "(", "x", ")", ".", "strip", "(", ")", "for", "x", "in", "var", "]", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"image_paths must be either \"", "\n", "msg", "+=", "\"a string of comma-separated paths \"", "\n", "msg", "+=", "\"or a list of paths\"", "\n", "raise", "TypeError", "(", "msg", ")", "\n", "\n", "", "self", ".", "_image_paths", "=", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_blocklengths": [[674, 708], ["isinstance", "isinstance", "tuple.replace", "len", "tuple", "TypeError", "len", "tuple", "int", "x.strip", "tuple.split", "int", "str().strip", "str"], "methods", ["None"], ["", "@", "image_blocklengths", ".", "setter", "\n", "def", "image_blocklengths", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "var", "is", "None", ":", "\n", "            ", "blocklengths", "=", "None", "\n", "", "elif", "isinstance", "(", "var", ",", "str", ")", ":", "\n", "# remove brackets", "\n", "            ", "blocklengths", "=", "var", "\n", "for", "x", "in", "[", "'('", ",", "'['", ",", "']'", ",", "')'", "]", ":", "\n", "                ", "blocklengths", "=", "blocklengths", ".", "replace", "(", "x", ",", "''", ")", "\n", "\n", "", "if", "len", "(", "blocklengths", ")", "==", "0", ":", "\n", "                ", "blocklengths", "=", "None", "\n", "", "else", ":", "\n", "# split at comma; convert values into int", "\n", "                ", "blocklengths", "=", "tuple", "(", "\n", "[", "int", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "blocklengths", ".", "split", "(", "','", ")", "]", "\n", ")", "\n", "", "", "elif", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "            ", "blocklengths", "=", "var", "\n", "\n", "if", "len", "(", "blocklengths", ")", "==", "0", ":", "\n", "                ", "blocklengths", "=", "None", "\n", "", "else", ":", "\n", "# convert values to int", "\n", "                ", "blocklengths", "=", "tuple", "(", "\n", "[", "int", "(", "str", "(", "x", ")", ".", "strip", "(", ")", ")", "for", "x", "in", "blocklengths", "]", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "msg", "=", "\"image_blocklengths must be either \"", "\n", "msg", "+=", "\"a string of comma-separated integers \"", "\n", "msg", "+=", "\"or a list of strings/integers\"", "\n", "raise", "TypeError", "(", "msg", ")", "\n", "\n", "", "self", ".", "_image_blocklengths", "=", "blocklengths", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_cyclic": [[713, 726], ["str", "config._str2bool"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config._str2bool"], ["", "@", "image_cyclic", ".", "setter", "\n", "def", "image_cyclic", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "var", "is", "None", ":", "\n", "            ", "cyclic", "=", "None", "\n", "", "else", ":", "\n", "            ", "cyclic", "=", "str", "(", "var", ")", "\n", "\n", "if", "not", "cyclic", ":", "\n", "                ", "cyclic", "=", "None", "\n", "", "else", ":", "\n", "                ", "cyclic", "=", "_str2bool", "(", "cyclic", ")", "\n", "\n", "", "", "self", ".", "_image_cyclic", "=", "cyclic", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_type": [[731, 746], ["str().lower", "msg.format.format.format", "ValueError", "str().lower", "str", "str"], "methods", ["None"], ["", "@", "image_type", ".", "setter", "\n", "def", "image_type", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "var", "is", "None", ":", "\n", "            ", "image_type", "=", "None", "\n", "", "else", ":", "\n", "# check that image_type is allowed", "\n", "            ", "allowed", "=", "[", "\"hdf5\"", ",", "\"nii\"", "]", "\n", "if", "str", "(", "var", ")", ".", "lower", "(", ")", "not", "in", "allowed", ":", "\n", "                ", "msg", "=", "\"image_type must be either of these: {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "allowed", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "image_type", "=", "str", "(", "var", ")", ".", "lower", "(", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n", "", "self", ".", "_image_type", "=", "image_type", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_size": [[751, 783], ["isinstance", "tuple", "isinstance", "tuple.replace", "len", "ValueError", "tuple", "TypeError", "int", "len", "ValueError", "x.strip", "tuple.split", "int", "str().strip", "str"], "methods", ["None"], ["", "@", "image_size", ".", "setter", "\n", "def", "image_size", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "var", "is", "None", ":", "\n", "            ", "image_size", "=", "None", "\n", "", "elif", "isinstance", "(", "var", ",", "str", ")", ":", "\n", "# remove brackets", "\n", "            ", "image_size", "=", "var", "\n", "for", "x", "in", "[", "'('", ",", "'['", ",", "']'", ",", "')'", "]", ":", "\n", "                ", "image_size", "=", "image_size", ".", "replace", "(", "x", ",", "''", ")", "\n", "\n", "", "if", "len", "(", "image_size", ")", "==", "0", ":", "\n", "                ", "msg", "=", "\"invalid image_size '{:}'\"", ".", "format", "(", "var", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# split at comma; convert values into int", "\n", "", "image_size", "=", "tuple", "(", "[", "int", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "image_size", ".", "split", "(", "','", ")", "]", ")", "\n", "", "elif", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "            ", "image_size", "=", "var", "\n", "\n", "if", "len", "(", "image_size", ")", "==", "0", ":", "\n", "                ", "msg", "=", "\"invalid image_size '{:}'\"", ".", "format", "(", "var", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# convert values to int", "\n", "", "image_size", "=", "tuple", "(", "[", "int", "(", "str", "(", "x", ")", ".", "strip", "(", ")", ")", "for", "x", "in", "image_size", "]", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"image_size must be either \"", "\n", "msg", "+=", "\"a string of comma-separated integers \"", "\n", "msg", "+=", "\"or a list of strings/integers\"", "\n", "raise", "TypeError", "(", "msg", ")", "\n", "\n", "", "self", ".", "_image_size", "=", "image_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_slicedim": [[788, 791], ["int"], "methods", ["None"], ["", "@", "image_slicedim", ".", "setter", "\n", "def", "image_slicedim", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_image_slicedim", "=", "int", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_resolution": [[796, 839], ["isinstance", "enumerate", "tuple", "img_res.replace.replace.split", "isinstance", "len", "ValueError", "str().strip", "img_res.replace.replace.replace", "len", "ValueError", "TypeError", "img_res[].lower", "float", "str"], "methods", ["None"], ["", "@", "image_resolution", ".", "setter", "\n", "def", "image_resolution", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "var", "is", "None", ":", "\n", "            ", "img_res", "=", "None", "\n", "", "elif", "isinstance", "(", "var", ",", "str", ")", ":", "\n", "# remove brackets", "\n", "            ", "img_res", "=", "var", "\n", "for", "x", "in", "[", "'('", ",", "'['", ",", "']'", ",", "')'", "]", ":", "\n", "                ", "img_res", "=", "img_res", ".", "replace", "(", "x", ",", "''", ")", "\n", "\n", "", "if", "len", "(", "img_res", ")", "==", "0", ":", "\n", "                ", "msg", "=", "\"invalid image_resolution '{:}'\"", ".", "format", "(", "var", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# split at comma", "\n", "", "img_res", "=", "img_res", ".", "split", "(", "','", ")", "\n", "", "elif", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "            ", "img_res", "=", "var", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"image_resolution must be either \"", "\n", "msg", "+=", "\"a string of comma-separated floating point values \"", "\n", "msg", "+=", "\"or a list of strings/floating point values\"", "\n", "raise", "TypeError", "(", "msg", ")", "\n", "\n", "", "if", "img_res", "is", "not", "None", ":", "\n", "# check that img_res is not an empty list", "\n", "            ", "if", "len", "(", "img_res", ")", "==", "0", ":", "\n", "                ", "msg", "=", "\"invalid image_resolution '{:}'\"", ".", "format", "(", "var", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# remove any spaces at beginning/end of string", "\n", "", "img_res", "=", "[", "str", "(", "x", ")", ".", "strip", "(", ")", "for", "x", "in", "img_res", "]", "\n", "\n", "# attempt to convert values to float", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "img_res", ")", ":", "\n", "                ", "if", "img_res", "[", "i", "]", ".", "lower", "(", ")", "==", "'none'", ":", "\n", "                    ", "img_res", "[", "i", "]", "=", "None", "\n", "", "else", ":", "\n", "                    ", "img_res", "[", "i", "]", "=", "float", "(", "img_res", "[", "i", "]", ")", "\n", "\n", "", "", "img_res", "=", "tuple", "(", "img_res", ")", "\n", "\n", "", "self", ".", "_image_resolution", "=", "img_res", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_nclasses": [[844, 847], ["int"], "methods", ["None"], ["", "@", "image_nclasses", ".", "setter", "\n", "def", "image_nclasses", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_image_nclasses", "=", "int", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "# self._verify_image_labelproperties_consistency()", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_classnames": [[853, 868], ["isinstance", "isinstance", "x.strip", "TypeError", "var.split", "str().strip", "str"], "methods", ["None"], ["", "@", "image_classnames", ".", "setter", "\n", "def", "image_classnames", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "var", "is", "None", ":", "\n", "            ", "classnames", "=", "None", "\n", "", "elif", "isinstance", "(", "var", ",", "str", ")", ":", "\n", "            ", "classnames", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "var", ".", "split", "(", "','", ")", "]", "\n", "", "elif", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "            ", "classnames", "=", "[", "str", "(", "x", ")", ".", "strip", "(", ")", "for", "x", "in", "var", "]", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"image_classnames must be either \"", "\n", "msg", "+=", "\"a string of comma-separated values \"", "\n", "msg", "+=", "\"or a list of strings\"", "\n", "raise", "TypeError", "(", "msg", ")", "\n", "\n", "", "self", ".", "_image_classnames", "=", "classnames", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_classweights": [[875, 892], ["isinstance", "isinstance", "float", "TypeError", "x.strip", "var.split", "float", "str().strip", "str"], "methods", ["None"], ["", "@", "image_classweights", ".", "setter", "\n", "def", "image_classweights", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "var", "is", "None", ":", "\n", "            ", "weights", "=", "None", "\n", "", "elif", "isinstance", "(", "var", ",", "str", ")", ":", "\n", "# split at comma; convert values into float", "\n", "            ", "weights", "=", "[", "float", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "var", ".", "split", "(", "','", ")", "]", "\n", "", "elif", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "# convert values into float", "\n", "            ", "weights", "=", "[", "float", "(", "str", "(", "x", ")", ".", "strip", "(", ")", ")", "for", "x", "in", "var", "]", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"image_classweights must be either \"", "\n", "msg", "+=", "\"a string of comma-separated values \"", "\n", "msg", "+=", "\"or a list of strings/numbers\"", "\n", "raise", "TypeError", "(", "msg", ")", "\n", "\n", "", "self", ".", "_image_classweights", "=", "weights", "\n", "# self._verify_image_labelproperties_consistency()", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig._verify_image_labelproperties_consistency": [[894, 917], ["hasattr", "hasattr", "hasattr", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "_verify_image_labelproperties_consistency", "(", "self", ")", ":", "\n", "# determine if properties are set", "\n", "        ", "defined_nclasses", "=", "False", "\n", "if", "hasattr", "(", "self", ",", "\"image_nclasses\"", ")", ":", "\n", "            ", "defined_nclasses", "=", "(", "self", ".", "image_nclasses", "is", "not", "None", ")", "\n", "\n", "", "defined_names", "=", "False", "\n", "if", "hasattr", "(", "self", ",", "\"image_classnames\"", ")", ":", "\n", "            ", "defined_names", "=", "(", "self", ".", "image_classnames", "is", "not", "None", ")", "\n", "\n", "", "defined_weights", "=", "False", "\n", "if", "hasattr", "(", "self", ",", "\"image_classweights\"", ")", ":", "\n", "            ", "defined_weights", "=", "(", "self", ".", "image_classweights", "is", "not", "None", ")", "\n", "\n", "# verify pairwise consistency", "\n", "", "if", "defined_nclasses", "and", "defined_names", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "image_classnames", ")", "==", "self", ".", "image_nclasses", ")", "\n", "\n", "", "if", "defined_nclasses", "and", "defined_weights", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "image_classweights", ")", "==", "self", ".", "image_nclasses", ")", "\n", "\n", "", "if", "defined_names", "and", "defined_weights", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "image_classnames", ")", "==", "len", "(", "self", ".", "image_classweights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_batchsize": [[922, 925], ["int"], "methods", ["None"], ["", "@", "image_batchsize", ".", "setter", "\n", "def", "image_batchsize", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_image_batchsize", "=", "int", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.image_shuffle_buffer": [[930, 933], ["int"], "methods", ["None"], ["", "@", "image_shuffle_buffer", ".", "setter", "\n", "def", "image_shuffle_buffer", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_image_shuffle_buffer", "=", "int", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.network_model": [[939, 942], ["str"], "methods", ["None"], ["", "@", "network_model", ".", "setter", "\n", "def", "network_model", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_network_model", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.network_batchnorm": [[947, 951], ["config._str2bool", "str"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config._str2bool"], ["", "@", "network_batchnorm", ".", "setter", "\n", "def", "network_batchnorm", "(", "self", ",", "var", ")", ":", "\n", "        ", "bn", "=", "_str2bool", "(", "str", "(", "var", ")", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "self", ".", "_network_batchnorm", "=", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.network_dropout": [[956, 959], ["float"], "methods", ["None"], ["", "@", "network_dropout", ".", "setter", "\n", "def", "network_dropout", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_network_dropout", "=", "float", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.train_imgkey_feature": [[965, 968], ["str"], "methods", ["None"], ["", "@", "train_imgkey_feature", ".", "setter", "\n", "def", "train_imgkey_feature", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_train_imgkey_feature", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.train_imgkey_label": [[973, 976], ["str"], "methods", ["None"], ["", "@", "train_imgkey_label", ".", "setter", "\n", "def", "train_imgkey_label", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_train_imgkey_label", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.train_imgkey_presence": [[981, 984], ["str"], "methods", ["None"], ["", "@", "train_imgkey_presence", ".", "setter", "\n", "def", "train_imgkey_presence", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_train_imgkey_presence", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.train_iterations": [[989, 992], ["int"], "methods", ["None"], ["", "@", "train_iterations", ".", "setter", "\n", "def", "train_iterations", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_train_iterations", "=", "int", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.train_learning_rate": [[997, 1000], ["float"], "methods", ["None"], ["", "@", "train_learning_rate", ".", "setter", "\n", "def", "train_learning_rate", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_train_learning_rate", "=", "float", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.train_l2_reg_factor": [[1005, 1008], ["float"], "methods", ["None"], ["", "@", "train_l2_reg_factor", ".", "setter", "\n", "def", "train_l2_reg_factor", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_train_l2_reg_factor", "=", "float", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.train_optimizer": [[1013, 1016], ["str"], "methods", ["None"], ["", "@", "train_optimizer", ".", "setter", "\n", "def", "train_optimizer", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_train_optimizer", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.train_loss": [[1021, 1024], ["str"], "methods", ["None"], ["", "@", "train_loss", ".", "setter", "\n", "def", "train_loss", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_train_loss", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.train_weightage_mask": [[1029, 1032], ["str"], "methods", ["None"], ["", "@", "train_weightage_mask", ".", "setter", "\n", "def", "train_weightage_mask", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_train_weightage_mask", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.train_shuffle_image": [[1037, 1041], ["config._str2bool", "str"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config._str2bool"], ["", "@", "train_shuffle_image", ".", "setter", "\n", "def", "train_shuffle_image", "(", "self", ",", "var", ")", ":", "\n", "        ", "si", "=", "_str2bool", "(", "str", "(", "var", ")", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "self", ".", "_train_shuffle_image", "=", "si", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.evaluate_imgkey_feature": [[1047, 1050], ["str"], "methods", ["None"], ["", "@", "evaluate_imgkey_feature", ".", "setter", "\n", "def", "evaluate_imgkey_feature", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_evaluate_imgkey_feature", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.evaluate_imgkey_label": [[1055, 1058], ["str"], "methods", ["None"], ["", "@", "evaluate_imgkey_label", ".", "setter", "\n", "def", "evaluate_imgkey_label", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_evaluate_imgkey_label", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.evaluate_imgkey_presence": [[1063, 1066], ["str"], "methods", ["None"], ["", "@", "evaluate_imgkey_presence", ".", "setter", "\n", "def", "evaluate_imgkey_presence", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_evaluate_imgkey_presence", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.evaluate_freq": [[1071, 1074], ["int"], "methods", ["None"], ["", "@", "evaluate_freq", ".", "setter", "\n", "def", "evaluate_freq", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_evaluate_freq", "=", "int", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.evaluate_shuffle_image": [[1079, 1083], ["config._str2bool", "str"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config._str2bool"], ["", "@", "evaluate_shuffle_image", ".", "setter", "\n", "def", "evaluate_shuffle_image", "(", "self", ",", "var", ")", ":", "\n", "        ", "si", "=", "_str2bool", "(", "str", "(", "var", ")", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "self", ".", "_evaluate_shuffle_image", "=", "si", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.predict_imgkey_feature": [[1089, 1092], ["str"], "methods", ["None"], ["", "@", "predict_imgkey_feature", ".", "setter", "\n", "def", "predict_imgkey_feature", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_predict_imgkey_feature", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.predict_output_path": [[1097, 1100], ["str"], "methods", ["None"], ["", "@", "predict_output_path", ".", "setter", "\n", "def", "predict_output_path", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_predict_output_path", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.predict_output_type": [[1105, 1120], ["str().lower", "msg.format.format.format", "ValueError", "str().lower", "str", "str"], "methods", ["None"], ["", "@", "predict_output_type", ".", "setter", "\n", "def", "predict_output_type", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "var", "is", "None", ":", "\n", "            ", "output_type", "=", "None", "\n", "", "else", ":", "\n", "# check that predict_output_type is allowed", "\n", "            ", "allowed", "=", "[", "\"labels\"", ",", "\"probabilities\"", "]", "\n", "if", "str", "(", "var", ")", ".", "lower", "(", ")", "not", "in", "allowed", ":", "\n", "                ", "msg", "=", "\"predict_output_type must be either of these: {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "allowed", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "output_type", "=", "str", "(", "var", ")", ".", "lower", "(", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n", "", "self", ".", "_predict_output_type", "=", "output_type", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.checkpoint_path": [[1126, 1129], ["str"], "methods", ["None"], ["", "@", "checkpoint_path", ".", "setter", "\n", "def", "checkpoint_path", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_checkpoint_path", "=", "str", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.checkpoint_freq_steps": [[1134, 1137], ["int"], "methods", ["None"], ["", "@", "checkpoint_freq_steps", ".", "setter", "\n", "def", "checkpoint_freq_steps", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_checkpoint_freq_steps", "=", "int", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.checkpoint_keep_max": [[1142, 1145], ["int"], "methods", ["None"], ["", "@", "checkpoint_keep_max", ".", "setter", "\n", "def", "checkpoint_keep_max", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_checkpoint_keep_max", "=", "int", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.summary_freq_steps": [[1151, 1154], ["int"], "methods", ["None"], ["", "@", "summary_freq_steps", ".", "setter", "\n", "def", "summary_freq_steps", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_summary_freq_steps", "=", "int", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.summary_nimages": [[1159, 1162], ["int"], "methods", ["None"], ["", "@", "summary_nimages", ".", "setter", "\n", "def", "summary_nimages", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "_summary_nimages", "=", "int", "(", "var", ")", "if", "(", "var", "is", "not", "None", ")", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.summary_tensors": [[1167, 1182], ["isinstance", "isinstance", "TypeError", "var.split", "bool", "t.strip", "bool", "t.strip"], "methods", ["None"], ["", "@", "summary_tensors", ".", "setter", "\n", "def", "summary_tensors", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "var", "is", "None", ":", "\n", "            ", "summary_tensors", "=", "None", "\n", "", "elif", "isinstance", "(", "var", ",", "str", ")", ":", "\n", "            ", "summary_tensors", "=", "[", "t", "for", "t", "in", "var", ".", "split", "(", "','", ")", "if", "bool", "(", "t", ".", "strip", "(", ")", ")", "]", "\n", "", "elif", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "            ", "summary_tensors", "=", "[", "t", "for", "t", "in", "var", "if", "bool", "(", "t", ".", "strip", "(", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"summary_tensors must be either \"", "\n", "msg", "+=", "\"a string of comma-separated values \"", "\n", "msg", "+=", "\"or a list of strings\"", "\n", "raise", "TypeError", "(", "msg", ")", "\n", "\n", "", "self", ".", "_summary_tensors", "=", "summary_tensors", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config._str2bool": [[15, 22], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "_str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config._create_argparser": [[25, 500], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "_create_argparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"-c\"", ",", "\n", "\"--config\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "required", "=", "True", ",", "\n", "dest", "=", "\"config\"", ",", "\n", "help", "=", "\"path to config file (.ini)\"", ",", "\n", ")", "\n", "\n", "# general", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"general_log_level\"", ",", "\n", "help", "=", "\"logging level\"", ",", "\n", "metavar", "=", "\"LEVEL\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--random-seed\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"general_random_seed\"", ",", "\n", "help", "=", "\"random seed for tf.set_random_seed()\"", ",", "\n", "metavar", "=", "\"SEED\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--iteration-unit\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "\"epoch\"", ",", "\"step\"", "]", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"general_iteration_unit\"", ",", "\n", "help", "=", "\"unit of train_iteration and evaluate_freq\"", ",", "\n", ")", "\n", "\n", "# image", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-paths\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_paths\"", ",", "\n", "help", "=", "\"paths to hdf5 files (if image_type is 'hdf5') \"", "+", "\n", "\"or directories containing nifti images (if image_type is 'nii')\"", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-blocklengths\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_blocklengths\"", ",", "\n", "help", "=", "\"number of consecutive slices from each image_path \"", "+", "\n", "\"when interleaving data from image_paths\"", ",", "\n", "metavar", "=", "\"BLOCKLENGTH\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-cyclic\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "_str2bool", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_cyclic\"", ",", "\n", "help", "=", "\"if True, reset any iterator that is depleted \"", "+", "\n", "\"before every other iterator had depleted at least once \"", "+", "\n", "\"when interleaving data from image_paths\"", ",", "\n", "metavar", "=", "\"CYCLIC\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-type\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "\"hdf5\"", ",", "\"nii\"", "]", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_type\"", ",", "\n", "help", "=", "\"type of image file/directory\"", ",", "\n", "metavar", "=", "\"TYPE\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-size\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_size\"", ",", "\n", "help", "=", "\"list of image sizes at every dimension \"", "+", "\n", "\"except the slicing dimension \"", "+", "\n", "\"(image slices are resized to this if image_type is 'nii')\"", ",", "\n", "metavar", "=", "\"SIZE\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-slice-dimension\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_slicedim\"", ",", "\n", "help", "=", "\"slice image at this dimension\"", ",", "\n", "metavar", "=", "\"DIM\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-resolution\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_resolution\"", ",", "\n", "help", "=", "\"resolution to resample images to \"", "+", "\n", "\"(works only if image_type is 'nii')\"", ",", "\n", "metavar", "=", "\"RES\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-nclasses\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_nclasses\"", ",", "\n", "help", "=", "\"number of classes in label image\"", ",", "\n", "metavar", "=", "\"NCLASSES\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-classnames\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_classnames\"", ",", "\n", "help", "=", "\"list of names of each class\"", ",", "\n", "metavar", "=", "\"CLASSNAME\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-classweights\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "float", ",", "\n", "nargs", "=", "'+'", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_classweights\"", ",", "\n", "help", "=", "\"list of weightages of each class\"", ",", "\n", "metavar", "=", "\"CLASSWEIGHT\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-batchsize\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_batchsize\"", ",", "\n", "help", "=", "\"mini-batch's size\"", ",", "\n", "metavar", "=", "\"BATCHSIZE\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-shuffle-buffer\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"image_shuffle_buffer\"", ",", "\n", "help", "=", "\"size of buffer used in storing shuffled images temporarily\"", ",", "\n", "metavar", "=", "\"SIZE\"", ",", "\n", ")", "\n", "\n", "# network", "\n", "parser", ".", "add_argument", "(", "\n", "\"--network-model\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"network_model\"", ",", "\n", "help", "=", "\"name of network model to use\"", ",", "\n", "metavar", "=", "\"MODEL\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--network-batchnorm\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "_str2bool", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"network_batchnorm\"", ",", "\n", "help", "=", "\"whether or not to perform batch normalization \"", "+", "\n", "\"wherever applicable in model\"", ",", "\n", "metavar", "=", "\"BATCHNORM\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--network-dropout\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "float", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"network_dropout\"", ",", "\n", "help", "=", "\"dropout rate, between 0.0 and 1.0; \"", "+", "\n", "\"set value to 0.0 to disable drop-out\"", ",", "\n", "metavar", "=", "\"DROPOUT\"", ",", "\n", ")", "\n", "\n", "# train", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-imgkey-feature\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"train_imgkey_feature\"", ",", "\n", "help", "=", "\"generator's key for feature image during model training; \"", "+", "\n", "\"if image_type is 'hdf5', this is name of the dataset within \"", "+", "\n", "\"the .hdf5 file (specified via image_path); if image_type is 'nii', \"", "+", "\n", "\"this is the subdirectory under image_path\"", ",", "\n", "metavar", "=", "\"KEY\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-imgkey-label\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"train_imgkey_label\"", ",", "\n", "help", "=", "\"generator's key for label image during model training \"", "+", "\n", "\"(see --train-imgkey-feature for details)\"", ",", "\n", "metavar", "=", "\"KEY\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-imgkey-presence\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"train_imgkey_presence\"", ",", "\n", "help", "=", "\"generator's key for presence array during model training \"", "+", "\n", "\"(see --train-imgkey-feature for details)\"", ",", "\n", "metavar", "=", "\"KEY\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-iterations\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"train_iterations\"", ",", "\n", "help", "=", "\"number of iterations (epochs/steps) to train network for\"", ",", "\n", "metavar", "=", "\"NITERS\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-learning-rate\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "float", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"train_learning_rate\"", ",", "\n", "help", "=", "\"optimizer's learning rate\"", ",", "\n", "metavar", "=", "\"LEARNINGRATE\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-l2-reg-factor\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "float", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"train_l2_reg_factor\"", ",", "\n", "help", "=", "\"scale/weightage of L2 regularization\"", ",", "\n", "metavar", "=", "\"L2SCALE\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-optimizer\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"train_optimizer\"", ",", "\n", "help", "=", "\"name of optimizer\"", ",", "\n", "metavar", "=", "\"OPTIMIZER\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-loss\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"train_loss\"", ",", "\n", "help", "=", "\"name of loss function\"", ",", "\n", "metavar", "=", "\"LOSS\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-weightage-mask\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"train_weightage_mask\"", ",", "\n", "help", "=", "\"name of weightage mask's mode\"", ",", "\n", "metavar", "=", "\"MODE\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-shuffle-image\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "_str2bool", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"train_shuffle_image\"", ",", "\n", "help", "=", "\"whether or not to shuffle image \"", "+", "\n", "\"before feeding to network during model training\"", ",", "\n", "metavar", "=", "\"SHUFFLE\"", ",", "\n", ")", "\n", "\n", "# evaluate", "\n", "parser", ".", "add_argument", "(", "\n", "\"--evaluate-imgkey-feature\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"evaluate_imgkey_feature\"", ",", "\n", "help", "=", "\"generator's key for feature image during model evaluation \"", "+", "\n", "\"(see --train-imgkey-feature for details)\"", ",", "\n", "metavar", "=", "\"KEY\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--evaluate-imgkey-label\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"evaluate_imgkey_label\"", ",", "\n", "help", "=", "\"generator's key for label image during model evaluation \"", "+", "\n", "\"(see --train-imgkey-feature for details)\"", ",", "\n", "metavar", "=", "\"KEY\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--evaluate-imgkey-presence\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"evaluate_imgkey_presence\"", ",", "\n", "help", "=", "\"generator's key for presence array during model evaluation \"", "+", "\n", "\"(see --train-imgkey-feature for details)\"", ",", "\n", "metavar", "=", "\"KEY\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--evaluate-freq\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"evaluate_freq\"", ",", "\n", "help", "=", "\"evaluation frequency; specify in unit of iterations\"", ",", "\n", "metavar", "=", "\"FREQ\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--evaluate-shuffle-image\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "_str2bool", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"evaluate_shuffle_image\"", ",", "\n", "help", "=", "\"whether or not to shuffle image before \"", "+", "\n", "\"feeding to network during model evaluation\"", ",", "\n", "metavar", "=", "\"SHUFFLE\"", ",", "\n", ")", "\n", "\n", "# predict", "\n", "parser", ".", "add_argument", "(", "\n", "\"--predict-imgkey-feature\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"predict_imgkey_feature\"", ",", "\n", "help", "=", "\"generator's key for feature image during prediction \"", "+", "\n", "\"(see --train-imgkey-feature for details)\"", ",", "\n", "metavar", "=", "\"KEY\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--predict-output-path\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"predict_output_path\"", ",", "\n", "help", "=", "\"paths to hdf5 file (if image_type is 'hdf5') \"", "+", "\n", "\"or directory (if image_type is 'nii') for saving predictions\"", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--predict-output-type\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "\"labels\"", ",", "\"probabilities\"", "]", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"predict_output_type\"", ",", "\n", "help", "=", "\"type of prediction image to save\"", ",", "\n", "metavar", "=", "\"TYPE\"", ",", "\n", ")", "\n", "\n", "# checkpoint", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint-path\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"checkpoint_path\"", ",", "\n", "help", "=", "\"path to directory for saving checkpoints \"", "+", "\n", "\"(model parameters, graph, etc)\"", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint-freq\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"checkpoint_freq_steps\"", ",", "\n", "help", "=", "\"checkpointing frequency; specify as multiples of steps\"", ",", "\n", "metavar", "=", "\"FREQ\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint-keep-max\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"checkpoint_keep_max\"", ",", "\n", "help", "=", "\"maximum number of checkpoints to be kept\"", ",", "\n", "metavar", "=", "\"KEEPMAX\"", ",", "\n", ")", "\n", "\n", "# summary", "\n", "parser", ".", "add_argument", "(", "\n", "\"--summary-freq\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"summary_freq_steps\"", ",", "\n", "help", "=", "\"frequency of tf.summary creation; specify as multiples of steps\"", ",", "\n", "metavar", "=", "\"FREQ\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--summary-nimages\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "type", "=", "int", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"summary_nimages\"", ",", "\n", "help", "=", "\"maximum number of images to be summarized \"", "+", "\n", "\"at every call to tf.summary.image\"", ",", "\n", "metavar", "=", "\"NIMAGES\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--summary-tensors\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "default", "=", "argparse", ".", "SUPPRESS", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "required", "=", "False", ",", "\n", "dest", "=", "\"summary_tensors\"", ",", "\n", "help", "=", "\"list of names of tensor to be summarized \"", "+", "\n", "\"(using tf.summary.scalar)\"", ",", "\n", "metavar", "=", "\"TENSOR\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.get_rootdir": [[502, 507], ["os.path.join", "os.path.abspath", "os.path.dirname"], "function", ["None"], ["", "def", "get_rootdir", "(", ")", ":", "\n", "    ", "rootdir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"..\"", ")", "\n", "rootdir", "=", "os", ".", "path", ".", "abspath", "(", "rootdir", ")", "\n", "\n", "return", "rootdir", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.load_configuration": [[509, 563], ["config.DeepSegmentConfig", "DeepSegmentConfig.get_config_names", "config._create_argparser", "_create_argparser.parse_args", "configparser.ConfigParser", "configparser.ConfigParser.read", "configparser.ConfigParser.sections", "vars", "config.DeepSegmentConfig.check_consistency", "getattr", "configparser.ConfigParser.get", "setattr", "msg.format.format", "ValueError", "setattr", "msg.format.format", "ValueError"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.get_config_names", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config._create_argparser", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.config.DeepSegmentConfig.check_consistency"], ["", "def", "load_configuration", "(", "args", "=", "None", ")", ":", "\n", "# create configuration object", "\n", "    ", "ds_config", "=", "DeepSegmentConfig", "(", ")", "\n", "\n", "# obtain names of config defined in DeepSegmentConfig", "\n", "ds_config_names", "=", "ds_config", ".", "get_config_names", "(", ")", "\n", "\n", "# load configuration from args", "\n", "parser", "=", "_create_argparser", "(", ")", "\n", "config_cl", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "# load configuration from config file", "\n", "path_ini", "=", "config_cl", ".", "config", "\n", "\n", "config_ini", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "config_ini", ".", "read", "(", "path_ini", ")", "\n", "\n", "for", "section", "in", "config_ini", ".", "sections", "(", ")", ":", "\n", "        ", "for", "key", "in", "config_ini", "[", "section", "]", ":", "\n", "# create config name and extract config value", "\n", "            ", "config_name", "=", "section", "+", "'_'", "+", "key", "\n", "config_val", "=", "config_ini", ".", "get", "(", "section", ",", "key", ")", "\n", "\n", "# make sure config_name is defined in DeepSegmentConfig", "\n", "if", "config_name", "not", "in", "ds_config_names", ":", "\n", "                ", "msg", "=", "\"{:} not defined in DeepSegmentConfig\"", "\n", "msg", "=", "msg", ".", "format", "(", "config_name", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# set config value", "\n", "", "setattr", "(", "ds_config", ",", "config_name", ",", "config_val", ")", "\n", "\n", "# override configuration using command line options", "\n", "", "", "for", "config_name", "in", "vars", "(", "config_cl", ")", ":", "\n", "# skip path to config.ini", "\n", "        ", "if", "config_name", "==", "\"config\"", ":", "\n", "            ", "continue", "\n", "\n", "# make sure config_name is defined in DeepSegmentConfig", "\n", "", "if", "config_name", "not", "in", "ds_config_names", ":", "\n", "            ", "msg", "=", "\"{:} not defined in DeepSegmentConfig\"", "\n", "msg", "=", "msg", ".", "format", "(", "config_name", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# extract and set config value", "\n", "", "config_val", "=", "getattr", "(", "config_cl", ",", "config_name", ")", "\n", "\n", "if", "config_val", "is", "not", "None", ":", "\n", "            ", "setattr", "(", "ds_config", ",", "config_name", ",", "config_val", ")", "\n", "\n", "# verify consistency of configs", "\n", "", "", "ds_config", ".", "check_consistency", "(", ")", "\n", "\n", "return", "ds_config", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger": [[7, 18], ["logging.getLogger", "len", "log._create_stream_logger"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log._create_stream_logger"], ["def", "create_or_get_logger", "(", "\n", "name", "=", "\"deepsegment\"", ",", "\n", "level", "=", "\"INFO\"", ",", "\n", "format", "=", "\"%(asctime)-15s [%(levelname)-8s] %(name)-16s: %(message)s\"", "\n", ")", ":", "\n", "    ", "_logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "\n", "if", "len", "(", "_logger", ".", "handlers", ")", "==", "0", ":", "\n", "        ", "_logger", "=", "_create_stream_logger", "(", "name", "=", "name", ",", "level", "=", "level", ",", "format", "=", "format", ")", "\n", "\n", "", "return", "_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log._create_stream_logger": [[20, 37], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "_create_stream_logger", "(", "name", ",", "level", ",", "format", ")", ":", "\n", "# create logger", "\n", "    ", "_logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "_logger", ".", "setLevel", "(", "level", ")", "\n", "\n", "# create stream handler", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "level", ")", "\n", "\n", "# create formatter and add it to the handler", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "format", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "# add the handler to the logger", "\n", "_logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "return", "_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.print_dict": [[39, 57], ["max", "dict_in.items", "isinstance", "len", "logger.log", "log.print_dict", "logger.log", "str", "dict_in.keys", "msg.format", "msg.format", "str().ljust", "str().ljust", "str", "str"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.print_dict"], ["", "def", "print_dict", "(", "dict_in", ",", "logger", ",", "level", "=", "logging", ".", "INFO", ",", "indent", "=", "0", ")", ":", "\n", "# determine length of longest key", "\n", "    ", "max_keylen", "=", "max", "(", "[", "len", "(", "str", "(", "k", ")", ")", "for", "k", "in", "dict_in", ".", "keys", "(", ")", "]", ")", "\n", "\n", "# define message template", "\n", "msg", "=", "\"  \"", "*", "indent", "+", "\"- {:}: {:}\"", "\n", "\n", "# loop over each item in dictionary", "\n", "for", "k", ",", "v", "in", "dict_in", ".", "items", "(", ")", ":", "\n", "# if value is another dictionary, call function recursively;", "\n", "# else, just print", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "logger", ".", "log", "(", "level", ",", "msg", ".", "format", "(", "str", "(", "k", ")", ".", "ljust", "(", "max_keylen", ",", "' '", ")", ",", "''", ")", ")", "\n", "print_dict", "(", "v", ",", "logger", ",", "level", ",", "indent", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "log", "(", "level", ",", "msg", ".", "format", "(", "str", "(", "k", ")", ".", "ljust", "(", "max_keylen", ",", "' '", ")", ",", "v", ")", ")", "\n", "\n", "", "", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.crop_or_pad_image": [[13, 46], ["numpy.ones", "range", "tuple", "numpy.min", "len", "tuple", "tuple", "slice", "slice", "int", "int", "slice", "slice", "slice", "slice"], "function", ["None"], ["def", "crop_or_pad_image", "(", "img_original", ",", "size_target", ",", "background_value", "=", "None", ")", ":", "\n", "    ", "img_target", "=", "np", ".", "ones", "(", "tuple", "(", "size_target", ")", ")", "\n", "\n", "if", "background_value", "is", "None", ":", "\n", "        ", "background_value", "=", "np", ".", "min", "(", "img_original", ")", "\n", "", "img_target", "*=", "background_value", "\n", "\n", "size_original", "=", "img_original", ".", "shape", "\n", "\n", "slice_original", "=", "[", "]", "\n", "slice_target", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "size_target", ")", ")", ":", "\n", "        ", "if", "size_target", "[", "i", "]", "==", "size_original", "[", "i", "]", ":", "\n", "            ", "slice_target", "+=", "[", "slice", "(", "None", ",", "None", ")", "]", "\n", "slice_original", "+=", "[", "slice", "(", "None", ",", "None", ")", "]", "\n", "", "elif", "size_target", "[", "i", "]", ">", "size_original", "[", "i", "]", ":", "\n", "            ", "start_target", "=", "int", "(", "(", "size_target", "[", "i", "]", "-", "size_original", "[", "i", "]", ")", "//", "2", ")", "\n", "slice_target", "+=", "[", "\n", "slice", "(", "start_target", ",", "start_target", "+", "size_original", "[", "i", "]", ")", "\n", "]", "\n", "\n", "slice_original", "+=", "[", "slice", "(", "None", ",", "None", ")", "]", "\n", "", "else", ":", "\n", "            ", "slice_target", "+=", "[", "slice", "(", "None", ",", "None", ")", "]", "\n", "\n", "start_original", "=", "int", "(", "(", "size_original", "[", "i", "]", "-", "size_target", "[", "i", "]", ")", "//", "2", ")", "\n", "slice_original", "+=", "[", "\n", "slice", "(", "start_original", ",", "start_original", "+", "size_target", "[", "i", "]", ")", "\n", "]", "\n", "\n", "", "", "img_target", "[", "tuple", "(", "slice_target", ")", "]", "=", "img_original", "[", "tuple", "(", "slice_original", ")", "]", "\n", "\n", "return", "img_target", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.inverse_crop_or_pad_image": [[49, 84], ["numpy.ones", "range", "tuple", "numpy.min", "len", "tuple", "tuple", "slice", "slice", "int", "int", "slice", "slice", "slice", "slice"], "function", ["None"], ["", "def", "inverse_crop_or_pad_image", "(", "\n", "img_target", ",", "size_original", ",", "background_value", "=", "None", "\n", ")", ":", "\n", "    ", "img_original", "=", "np", ".", "ones", "(", "tuple", "(", "size_original", ")", ")", "\n", "\n", "if", "background_value", "is", "None", ":", "\n", "        ", "background_value", "=", "np", ".", "min", "(", "img_target", ")", "\n", "", "img_original", "*=", "background_value", "\n", "\n", "size_target", "=", "img_target", ".", "shape", "\n", "\n", "slice_original", "=", "[", "]", "\n", "slice_target", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "size_target", ")", ")", ":", "\n", "        ", "if", "size_target", "[", "i", "]", "==", "size_original", "[", "i", "]", ":", "\n", "            ", "slice_target", "+=", "[", "slice", "(", "None", ",", "None", ")", "]", "\n", "slice_original", "+=", "[", "slice", "(", "None", ",", "None", ")", "]", "\n", "", "elif", "size_target", "[", "i", "]", ">", "size_original", "[", "i", "]", ":", "\n", "            ", "start_target", "=", "int", "(", "(", "size_target", "[", "i", "]", "-", "size_original", "[", "i", "]", ")", "//", "2", ")", "\n", "slice_target", "+=", "[", "\n", "slice", "(", "start_target", ",", "start_target", "+", "size_original", "[", "i", "]", ")", "\n", "]", "\n", "\n", "slice_original", "+=", "[", "slice", "(", "None", ",", "None", ")", "]", "\n", "", "else", ":", "\n", "            ", "slice_target", "+=", "[", "slice", "(", "None", ",", "None", ")", "]", "\n", "\n", "start_original", "=", "int", "(", "(", "size_original", "[", "i", "]", "-", "size_target", "[", "i", "]", ")", "//", "2", ")", "\n", "slice_original", "+=", "[", "\n", "slice", "(", "start_original", ",", "start_original", "+", "size_target", "[", "i", "]", ")", "\n", "]", "\n", "\n", "", "", "img_original", "[", "tuple", "(", "slice_original", ")", "]", "=", "img_target", "[", "tuple", "(", "slice_target", ")", "]", "\n", "\n", "return", "img_original", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.resample_image": [[87, 128], ["zip", "skimage.transform.resize", "len", "len", "ValueError", "set", "int"], "function", ["None"], ["", "def", "resample_image", "(", "\n", "img_original", ",", "\n", "res_original", ",", "\n", "res_target", ",", "\n", "order", "=", "0", ",", "\n", "disable_anti_aliasing", "=", "True", "\n", ")", ":", "\n", "# determine original image size", "\n", "    ", "size_original", "=", "img_original", ".", "shape", "\n", "\n", "# check dimensions", "\n", "lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "[", "res_target", ",", "res_original", ",", "size_original", "]", "]", "\n", "if", "len", "(", "set", "(", "lengths", ")", ")", "!=", "1", ":", "\n", "        ", "msg", "=", "\"res_target, res_original, and img_original.shape \"", "\n", "msg", "+=", "\"must have same length\"", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# calculate target size", "\n", "", "size_target", "=", "[", "]", "\n", "for", "rt", ",", "ro", ",", "so", "in", "zip", "(", "res_target", ",", "res_original", ",", "size_original", ")", ":", "\n", "        ", "if", "rt", "is", "None", ":", "\n", "            ", "size_target", "+=", "[", "so", "]", "\n", "", "else", ":", "\n", "            ", "size_target", "+=", "[", "int", "(", "1.0", "*", "ro", "/", "rt", "*", "so", ")", "]", "\n", "\n", "# turn off anti-aliasing if scikit-image version >= 0.14;", "\n", "# AA leads to erroneous behavious in some cases", "\n", "", "", "extra_kwargs", "=", "{", "}", "\n", "if", "SKIMAGE_VERSION", ">=", "0.14", ":", "\n", "        ", "extra_kwargs", "[", "\"anti_aliasing\"", "]", "=", "not", "disable_anti_aliasing", "\n", "\n", "", "img_target", "=", "transform", ".", "resize", "(", "\n", "img_original", ",", "\n", "size_target", ",", "\n", "order", "=", "order", ",", "\n", "preserve_range", "=", "True", ",", "\n", "mode", "=", "'constant'", ",", "\n", "**", "extra_kwargs", "\n", ")", "\n", "\n", "return", "img_target", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.resize_image": [[131, 153], ["skimage.transform.resize"], "function", ["None"], ["", "def", "resize_image", "(", "\n", "img_original", ",", "\n", "size_target", ",", "\n", "order", "=", "0", ",", "\n", "disable_anti_aliasing", "=", "True", ",", "\n", ")", ":", "\n", "# turn off anti-aliasing if scikit-image version >= 0.14;", "\n", "# AA leads to erroneous behavious in some cases", "\n", "    ", "extra_kwargs", "=", "{", "}", "\n", "if", "SKIMAGE_VERSION", ">=", "0.14", ":", "\n", "        ", "extra_kwargs", "[", "\"anti_aliasing\"", "]", "=", "not", "disable_anti_aliasing", "\n", "\n", "", "img_target", "=", "transform", ".", "resize", "(", "\n", "img_original", ",", "\n", "size_target", ",", "\n", "order", "=", "order", ",", "\n", "preserve_range", "=", "True", ",", "\n", "mode", "=", "'constant'", ",", "\n", "**", "extra_kwargs", "\n", ")", "\n", "\n", "return", "img_target", "\n", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.LoggingTensorAndLossHook.begin": [[88, 104], ["tensorflow.losses.get_regularization_loss", "tensorflow.get_collection", "hook.LoggingTensorAndLossHook._tensors.keys", "super().begin", "tensorflow.get_collection", "[].split", "loss.name.split"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.BestCheckpointSaverHook.begin"], ["    ", "def", "begin", "(", "self", ")", ":", "\n", "# add global step", "\n", "        ", "self", ".", "_tensors", "[", "'step'", "]", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_STEP", ")", "[", "0", "]", "\n", "\n", "# add regularization loss", "\n", "self", ".", "_tensors", "[", "'regularization_loss'", "\n", "]", "=", "tf", ".", "losses", ".", "get_regularization_loss", "(", ")", "\n", "\n", "# add all other losses", "\n", "for", "loss", "in", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "LOSSES", ")", ":", "\n", "            ", "self", ".", "_tensors", "[", "loss", ".", "name", ".", "split", "(", "'/'", ")", "[", "0", "]", ".", "split", "(", "':'", ")", "[", "0", "]", "]", "=", "loss", "\n", "\n", "# required by base class; order of tensors when logging", "\n", "", "self", ".", "_tag_order", "=", "self", ".", "_tensors", ".", "keys", "(", ")", "\n", "\n", "return", "super", "(", "LoggingTensorAndLossHook", ",", "self", ")", ".", "begin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.BestCheckpointSaverHook.__init__": [[108, 132], ["tensorflow.logging.info", "hook.BestCheckpointSaverHook._validate_eval_maximize_metrics", "hook.BestCheckpointSaverHook._maximize_metrics.items", "float"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.BestCheckpointSaverHook._validate_eval_maximize_metrics"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "eval_metrics", "=", "None", ",", "\n", "maximize_metrics", "=", "None", ",", "\n", "checkpoint_dir", "=", "None", ",", "\n", "max_to_keep", "=", "5", ",", "\n", "listeners", "=", "None", "\n", ")", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"Create BestCheckpointSaverHook.\"", ")", "\n", "\n", "# save variables", "\n", "self", ".", "_eval_metrics", "=", "eval_metrics", "\n", "self", ".", "_maximize_metrics", "=", "maximize_metrics", "\n", "self", ".", "_ckpt_dir", "=", "checkpoint_dir", "\n", "self", ".", "_max_to_keep", "=", "max_to_keep", "\n", "self", ".", "_listeners", "=", "listeners", "or", "[", "]", "\n", "\n", "# check and validate eval_metrics and maximize_metrics", "\n", "self", ".", "_validate_eval_maximize_metrics", "(", ")", "\n", "\n", "# initialize a dictionary to record best value", "\n", "self", ".", "_best", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "_maximize_metrics", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_best", "[", "k", "]", "=", "float", "(", "'Inf'", ")", "*", "(", "-", "1.0", "if", "v", "else", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.BestCheckpointSaverHook._validate_eval_maximize_metrics": [[133, 170], ["isinstance", "list", "list", "isinstance", "TypeError", "isinstance", "hook.BestCheckpointSaverHook._eval_metrics.items", "hook.BestCheckpointSaverHook._eval_metrics.keys", "hook.BestCheckpointSaverHook._maximize_metrics.keys", "isinstance", "TypeError", "hook.BestCheckpointSaverHook._maximize_metrics.keys", "hook.BestCheckpointSaverHook._eval_metrics.pop", "hook.BestCheckpointSaverHook._eval_metrics.keys", "hook.BestCheckpointSaverHook._maximize_metrics.pop"], "methods", ["None"], ["", "", "def", "_validate_eval_maximize_metrics", "(", "self", ")", ":", "\n", "# create empty dictionary if not specified", "\n", "        ", "if", "self", ".", "_eval_metrics", "is", "None", ":", "\n", "            ", "self", ".", "_eval_metrics", "=", "{", "}", "\n", "\n", "", "if", "self", ".", "_maximize_metrics", "is", "None", ":", "\n", "            ", "self", ".", "_maximize_metrics", "=", "{", "}", "\n", "\n", "# check type", "\n", "", "if", "not", "isinstance", "(", "self", ".", "_eval_metrics", ",", "dict", ")", ":", "\n", "            ", "msg", "=", "\"eval_metrics must be a dictionary\"", "\n", "raise", "TypeError", "(", "msg", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "self", ".", "_maximize_metrics", ",", "dict", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "self", ".", "_maximize_metrics", ",", "bool", ")", ":", "\n", "                ", "msg", "=", "\"maximize_metrics must be either \"", "\n", "msg", "+=", "\"a boolean value or a dictionary\"", "\n", "raise", "TypeError", "(", "msg", ")", "\n", "\n", "# apply value to all keys of eval_metrics", "\n", "# if maximize_metrics is boolean", "\n", "", "", "if", "isinstance", "(", "self", ".", "_maximize_metrics", ",", "bool", ")", ":", "\n", "            ", "maximize", "=", "self", ".", "_maximize_metrics", "\n", "\n", "self", ".", "_maximize_metrics", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "_eval_metrics", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_maximize_metrics", "[", "k", "]", "=", "maximize", "\n", "\n", "# keep keys that exist in both", "\n", "# eval_metrics and maximize_metrics only", "\n", "", "", "for", "k", "in", "list", "(", "self", ".", "_eval_metrics", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "_maximize_metrics", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "_eval_metrics", ".", "pop", "(", "k", ",", "None", ")", "\n", "\n", "", "", "for", "k", "in", "list", "(", "self", ".", "_maximize_metrics", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "_eval_metrics", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "_maximize_metrics", ".", "pop", "(", "k", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.BestCheckpointSaverHook._recover_best_metrics": [[171, 190], ["os.path.join", "tensorflow.train.latest_checkpoint", "float", "msg.format.format.format", "tensorflow.logging.debug", "str", "[].split", "[].split", "os.path.basename().split", "os.path.basename"], "methods", ["None"], ["", "", "", "def", "_recover_best_metrics", "(", "self", ",", "metric", ")", ":", "\n", "        ", "latest_ckpt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_ckpt_dir", ",", "\"best_\"", "+", "str", "(", "metric", ")", ")", "\n", "latest_ckpt", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "latest_ckpt_path", ")", "\n", "\n", "if", "latest_ckpt", "is", "not", "None", ":", "\n", "# ckpt_basename: model.{}-{}.ckpt", "\n", "\n", "            ", "best_recovered", "=", "os", ".", "path", ".", "basename", "(", "latest_ckpt", ")", ".", "split", "(", "'.ckpt'", ")", "[", "0", "]", ".", "split", "(", "'model.'", ")", "[", "1", "]", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", "\n", "best_recovered", "=", "float", "(", "best_recovered", ")", "\n", "\n", "msg", "=", "\"recovered best {:} ({:}) from checkpoint filename; \"", "\n", "msg", "+=", "\"replacing current value in record {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "metric", ",", "best_recovered", ",", "self", ".", "_best", "[", "metric", "]", ")", "\n", "tf", ".", "logging", ".", "debug", "(", "msg", ")", "\n", "\n", "self", ".", "_best", "[", "metric", "]", "=", "best_recovered", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.BestCheckpointSaverHook.begin": [[191, 222], ["tensorflow.python.training.training_util._get_or_create_global_step_read", "hook.BestCheckpointSaverHook._eval_metrics.keys", "RuntimeError", "tensorflow.train.Saver", "os.path.join", "l.begin", "os.path.exists", "os.makedirs", "tensorflow.train.get_checkpoint_state", "hook.BestCheckpointSaverHook._recover_best_metrics", "str", "hook.BestCheckpointSaverHook._savers[].recover_last_checkpoints"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.BestCheckpointSaverHook.begin", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.BestCheckpointSaverHook._recover_best_metrics"], ["", "", "def", "begin", "(", "self", ")", ":", "\n", "        ", "self", ".", "_global_step", "=", "training_util", ".", "_get_or_create_global_step_read", "(", ")", "\n", "if", "self", ".", "_global_step", "is", "None", ":", "\n", "            ", "msg", "=", "\"global step should be created to use BestCheckpointSaverHook\"", "\n", "raise", "RuntimeError", "(", "msg", ")", "\n", "\n", "", "self", ".", "_savers", "=", "{", "}", "\n", "for", "metric", "in", "self", ".", "_eval_metrics", ".", "keys", "(", ")", ":", "\n", "# create saver for metric", "\n", "            ", "self", ".", "_savers", "[", "metric", "]", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "max_to_keep", "=", "self", ".", "_max_to_keep", ",", "save_relative_paths", "=", "True", "\n", ")", "\n", "\n", "# define output directory", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_ckpt_dir", ",", "\"best_\"", "+", "str", "(", "metric", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "# if not exist, create directory", "\n", "                ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "else", ":", "\n", "# if exist, attempt to recover last checkpoints", "\n", "                ", "states", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "save_dir", ")", "\n", "if", "states", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_savers", "[", "metric", "]", ".", "recover_last_checkpoints", "(", "\n", "states", ".", "all_model_checkpoint_paths", "\n", ")", "\n", "\n", "# attempt to recover previous best metrics from filename", "\n", "", "self", ".", "_recover_best_metrics", "(", "metric", ")", "\n", "\n", "", "", "for", "l", "in", "self", ".", "_listeners", ":", "\n", "            ", "l", ".", "begin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.BestCheckpointSaverHook.before_run": [[223, 225], ["tensorflow.python.training.session_run_hook.SessionRunArgs"], "methods", ["None"], ["", "", "def", "before_run", "(", "self", ",", "run_context", ")", ":", "# pylint: disable=unused-argument", "\n", "        ", "return", "SessionRunArgs", "(", "self", ".", "_global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.BestCheckpointSaverHook.end": [[226, 274], ["session.run", "hook.BestCheckpointSaverHook._eval_metrics.items", "tensorflow.get_default_graph().get_tensor_by_name", "session.run", "msg.format.format.format", "tensorflow.logging.debug", "l.end", "msg.format.format.format", "tensorflow.logging.info", "os.path.join", "hook.BestCheckpointSaverHook._savers[].save", "tensorflow.get_default_graph", "ckpt_basename.format", "os.path.exists", "os.makedirs", "str", "os.path.dirname", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.BestCheckpointSaverHook.end"], ["", "def", "end", "(", "self", ",", "session", ")", ":", "\n", "        ", "last_step", "=", "session", ".", "run", "(", "self", ".", "_global_step", ")", "\n", "\n", "for", "metric", ",", "tensor_name", "in", "self", ".", "_eval_metrics", ".", "items", "(", ")", ":", "\n", "# # attempt to recover previous best metrics from checkpoint filename", "\n", "# self._recover_best_metrics(metric)", "\n", "\n", "# get tensor by name", "\n", "            ", "tensor", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "tensor_name", ")", "\n", "\n", "# obtain tensor value", "\n", "metric_val", "=", "session", ".", "run", "(", "tensor", ")", "\n", "\n", "msg", "=", "\"From BestCheckpointSaverHook: {:} - {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "metric", ",", "metric_val", ")", "\n", "tf", ".", "logging", ".", "debug", "(", "msg", ")", "\n", "\n", "# check if metric_val is better than current record", "\n", "if", "self", ".", "_maximize_metrics", "[", "metric", "]", ":", "\n", "                ", "new_best_found", "=", "metric_val", ">", "self", ".", "_best", "[", "metric", "]", "\n", "", "else", ":", "\n", "                ", "new_best_found", "=", "metric_val", "<", "self", ".", "_best", "[", "metric", "]", "\n", "\n", "", "if", "new_best_found", ":", "\n", "                ", "msg", "=", "\"saving best {:}: {:} (previous best: {:})\"", "\n", "msg", "=", "msg", ".", "format", "(", "metric", ",", "metric_val", ",", "self", ".", "_best", "[", "metric", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "# create ckpt filename", "\n", "ckpt_basename", "=", "\"model.{}-{}.ckpt\"", "\n", "ckpt_fullpath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_ckpt_dir", ",", "\"best_\"", "+", "str", "(", "metric", ")", ",", "\n", "ckpt_basename", ".", "format", "(", "metric", ",", "metric_val", ")", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "ckpt_fullpath", ")", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "ckpt_fullpath", ")", ")", "\n", "\n", "# save checkpoint", "\n", "", "self", ".", "_savers", "[", "metric", "]", ".", "save", "(", "\n", "session", ",", "ckpt_fullpath", ",", "global_step", "=", "last_step", "\n", ")", "\n", "\n", "# overwrite value in self._best", "\n", "self", ".", "_best", "[", "metric", "]", "=", "metric_val", "\n", "\n", "", "", "for", "l", "in", "self", ".", "_listeners", ":", "\n", "            ", "l", ".", "end", "(", "session", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.PredictionProgressHook.__init__": [[278, 283], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batchsize", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_batchsize", "=", "batchsize", "\n", "self", ".", "_count", "=", "0", "\n", "\n", "super", "(", "PredictionProgressHook", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.PredictionProgressHook.after_run": [[284, 293], ["msg.format.format.format", "tensorflow.logging.info", "super().after_run"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.PredictionProgressHook.after_run"], ["", "def", "after_run", "(", "self", ",", "run_context", ",", "run_values", ")", ":", "\n", "        ", "self", ".", "_count", "+=", "1", "\n", "\n", "msg", "=", "\"predicted {:} mini-batches ({:} images)\"", "\n", "msg", "=", "msg", ".", "format", "(", "self", ".", "_count", ",", "self", ".", "_count", "*", "self", ".", "_batchsize", ")", "\n", "tf", ".", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "return", "super", "(", "PredictionProgressHook", ",", "\n", "self", ")", ".", "after_run", "(", "run_context", ",", "run_values", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.hook.create_hooks": [[13, 84], ["mode.lower", "ValueError", "mode.lower", "hook.LoggingTensorAndLossHook", "mode.lower", "os.path.join", "utilities.tfwrapper.input_fn.create_input_fn", "segmenter.get_eval_metrics", "hook.BestCheckpointSaverHook", "mode.lower", "hook.PredictionProgressHook", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.input_fn.create_input_fn", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.estimator.Segmenter.get_eval_metrics"], ["def", "create_hooks", "(", "ds_config", ",", "mode", ",", "segmenter", "=", "None", ")", ":", "\n", "# check that mode is valid", "\n", "    ", "if", "mode", ".", "lower", "(", ")", "not", "in", "[", "\"train\"", ",", "\"eval\"", ",", "\"pred\"", "]", ":", "\n", "        ", "msg", "=", "\"unknown mode {:}\"", ".", "format", "(", "mode", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "hooks", "=", "[", "]", "\n", "\n", "if", "mode", ".", "lower", "(", ")", "==", "\"train\"", ":", "\n", "# extract required param from ds_config", "\n", "        ", "log_freq", "=", "ds_config", ".", "summary_freq_steps", "\n", "\n", "# determine tensors to be logged", "\n", "tensors_to_log", "=", "{", "}", "\n", "if", "len", "(", "ds_config", ".", "summary_tensors", ")", "!=", "0", ":", "\n", "            ", "for", "tensor", "in", "ds_config", ".", "summary_tensors", ":", "\n", "                ", "tensors_to_log", "[", "tensor", "]", "=", "tensor", "\n", "\n", "# create and append hook", "\n", "", "", "logging_hook", "=", "LoggingTensorAndLossHook", "(", "\n", "every_n_iter", "=", "log_freq", ",", "\n", "tensors", "=", "tensors_to_log", ",", "\n", ")", "\n", "\n", "hooks", "+=", "[", "logging_hook", "]", "\n", "\n", "", "if", "mode", ".", "lower", "(", ")", "==", "\"eval\"", ":", "\n", "        ", "if", "segmenter", "is", "None", ":", "\n", "            ", "msg", "=", "\"segmenter must be provided \"", "\n", "msg", "+=", "\"to create BestCheckpointSaverHook\"", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# extract required param from ds_config", "\n", "", "checkpoint_dir", "=", "ds_config", ".", "checkpoint_path", "\n", "max_to_keep", "=", "ds_config", ".", "checkpoint_keep_max", "\n", "\n", "# modify checkpoint_dir to eval subdirectory", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "\"eval\"", ")", "\n", "\n", "# create a dummy eval_input_fn", "\n", "# and generate eval_dict", "\n", "eval_input_fn", "=", "input_fn", ".", "create_input_fn", "(", "ds_config", ",", "mode", "=", "\"eval\"", ")", "\n", "eval_metrics", "=", "segmenter", ".", "get_eval_metrics", "(", "eval_input_fn", ")", "\n", "\n", "# specify which tensor to be used in determining best ckpt", "\n", "# and whether it should be maximized or minimized", "\n", "maximize_metrics", "=", "{", "}", "\n", "maximize_metrics", "[", "'classification_accuracy'", "]", "=", "True", "\n", "maximize_metrics", "[", "'loss'", "]", "=", "False", "\n", "maximize_metrics", "[", "'dice_mean'", "]", "=", "True", "\n", "\n", "# create and append hook", "\n", "bestckptsaver_hook", "=", "BestCheckpointSaverHook", "(", "\n", "checkpoint_dir", "=", "checkpoint_dir", ",", "\n", "eval_metrics", "=", "eval_metrics", ",", "\n", "maximize_metrics", "=", "maximize_metrics", ",", "\n", "max_to_keep", "=", "max_to_keep", ",", "\n", ")", "\n", "\n", "hooks", "+=", "[", "bestckptsaver_hook", "]", "\n", "\n", "", "if", "mode", ".", "lower", "(", ")", "==", "\"pred\"", ":", "\n", "# extract required param from ds_config", "\n", "        ", "image_batchsize", "=", "ds_config", ".", "image_batchsize", "\n", "\n", "# create and append hook", "\n", "predprogress_hook", "=", "PredictionProgressHook", "(", "batchsize", "=", "image_batchsize", ")", "\n", "\n", "hooks", "+=", "[", "predprogress_hook", "]", "\n", "\n", "", "return", "hooks", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.summary.trainables": [[7, 10], ["tensorflow.get_collection", "tensorflow.summary.histogram", "str().replace", "str"], "function", ["None"], ["def", "trainables", "(", ")", ":", "\n", "    ", "for", "trainable", "in", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "str", "(", "trainable", ".", "name", ")", ".", "replace", "(", "':'", ",", "'_'", ")", ",", "trainable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.summary.ndim_image": [[12, 66], ["tf.cast.get_shape().as_list", "len", "tensorflow.reshape", "any", "tensorflow.summary.image", "tensorflow.slice", "tensorflow.stack", "tensorflow.cast", "tensorflow.clip_by_value", "tensorflow.cast", "tf.cast.get_shape", "tensorflow.math.reduce_min", "tensorflow.math.reduce_max", "range", "range"], "function", ["None"], ["", "", "def", "ndim_image", "(", "\n", "name", ",", "\n", "tensor", ",", "\n", "min_value", "=", "None", ",", "\n", "max_value", "=", "None", ",", "\n", "max_outputs", "=", "3", ",", "\n", "collections", "=", "None", ",", "\n", "family", "=", "None", "\n", ")", ":", "\n", "    ", "img", "=", "tensor", "\n", "\n", "# extract middle slices if weightage_mask is higher than 2D", "\n", "img_shape", "=", "img", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "img_dim", "=", "len", "(", "img_shape", ")", "\n", "if", "img_dim", ">", "3", ":", "\n", "        ", "img_begin", "=", "[", "0", "if", "i", "<", "3", "else", "img_shape", "[", "i", "]", "//", "2", "for", "i", "in", "range", "(", "img_dim", ")", "]", "\n", "\n", "img_size", "=", "[", "img_shape", "[", "i", "]", "if", "i", "<", "3", "else", "1", "for", "i", "in", "range", "(", "img_dim", ")", "]", "\n", "img_size", "[", "0", "]", "=", "-", "1", "\n", "\n", "img", "=", "tf", ".", "slice", "(", "img", ",", "img_begin", ",", "img_size", ")", "\n", "\n", "# reshape", "\n", "", "img", "=", "tf", ".", "reshape", "(", "img", ",", "tf", ".", "stack", "(", "(", "-", "1", ",", "img_shape", "[", "1", "]", ",", "img_shape", "[", "2", "]", ",", "1", ")", ")", ")", "\n", "\n", "# clip value", "\n", "if", "any", "(", "(", "x", "is", "not", "None", ")", "for", "x", "in", "[", "min_value", ",", "max_value", "]", ")", ":", "\n", "# determine threshold values", "\n", "        ", "if", "min_value", "is", "None", ":", "\n", "            ", "min_value", "=", "tf", ".", "math", ".", "reduce_min", "(", "img", ")", "\n", "\n", "", "if", "max_value", "is", "None", ":", "\n", "            ", "max_value", "=", "tf", ".", "math", ".", "reduce_max", "(", "img", ")", "\n", "\n", "# cast to float32", "\n", "", "img", "=", "tf", ".", "cast", "(", "img", ",", "tf", ".", "float32", ")", "\n", "\n", "# clip value", "\n", "img", "=", "tf", ".", "clip_by_value", "(", "img", ",", "min_value", ",", "max_value", ")", "\n", "\n", "# shift and rescale value", "\n", "img", "+=", "min_value", "\n", "img", "*=", "255.0", "/", "(", "max_value", "-", "min_value", ")", "\n", "\n", "# cast to uint8 so that tf.summary.image doesn't perform rescaling", "\n", "img", "=", "tf", ".", "cast", "(", "img", ",", "tf", ".", "uint8", ")", "\n", "\n", "# tf.summary: add as image", "\n", "", "return", "tf", ".", "summary", ".", "image", "(", "\n", "name", "=", "name", ",", "\n", "tensor", "=", "img", ",", "\n", "max_outputs", "=", "max_outputs", ",", "\n", "collections", "=", "collections", ",", "\n", "family", "=", "family", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.summary.categorical_dices": [[69, 134], ["summary._calculate_dice_per_img_per_cls", "range", "zip", "len", "ValueError", "tensorflow.ones", "tensorflow.cast", "tensorflow.cast", "tensorflow.one_hot", "tensorflow.expand_dims", "tensorflow.clip_by_value", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cond", "tensorflow.summary.scalar", "tensorflow.less", "range", "tensorflow.convert_to_tensor"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.metric._calculate_dice_per_img_per_cls"], ["", "def", "categorical_dices", "(", "\n", "labels", ",", "\n", "predictions", ",", "\n", "nclasses", ",", "\n", "presences", "=", "None", ",", "\n", "classnames", "=", "None", ",", "\n", "epsilon", "=", "1e-10", ",", "\n", "collections", "=", "None", ",", "\n", "family", "=", "None", ",", "\n", ")", ":", "\n", "# check that classnames has correct length (if defined)", "\n", "    ", "if", "classnames", "is", "None", ":", "\n", "        ", "classnames", "=", "[", "\"cat{:02d}\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "nclasses", ")", "]", "\n", "\n", "", "if", "len", "(", "classnames", ")", "!=", "nclasses", ":", "\n", "        ", "msg", "=", "\"classnames must be a list of length nclasses!\"", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# prepare presence array", "\n", "", "if", "presences", "is", "None", ":", "\n", "        ", "presences", "=", "tf", ".", "ones", "(", "shape", "=", "(", "1", ",", "nclasses", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "presences", "=", "tf", ".", "cast", "(", "presences", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "presences", "=", "tf", ".", "cast", "(", "presences", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# shape: (1, nclasses) or (batchsize, nclasses)", "\n", "\n", "# calculate dice score (per image per class/category)", "\n", "", "dice_per_img_per_cls", "=", "_calculate_dice_per_img_per_cls", "(", "\n", "labels", ",", "predictions", ",", "nclasses", ",", "epsilon", "\n", ")", "\n", "# shape: (batchsize, nclasses)", "\n", "\n", "# calculate dice score (per class/category)", "\n", "dice_per_cls", "=", "[", "]", "\n", "for", "cat", "in", "range", "(", "nclasses", ")", ":", "\n", "# create a mask to exclude dice of all other classes", "\n", "        ", "mask", "=", "tf", ".", "one_hot", "(", "cat", ",", "depth", "=", "nclasses", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "mask", ",", "axis", "=", "0", ")", "\n", "# shape: (1, nclasses)", "\n", "\n", "mask", "*=", "presences", "\n", "# shape: (1, nclasses) or (batchsize, nclasses)", "\n", "\n", "mask", "*=", "tf", ".", "clip_by_value", "(", "dice_per_img_per_cls", ",", "1.0", ",", "1.0", ")", "\n", "# shape: (batchsize, nclasses)", "\n", "\n", "# calculate average dice (across batch)", "\n", "dice_sum", "=", "tf", ".", "reduce_sum", "(", "mask", "*", "dice_per_img_per_cls", ")", "\n", "dice_count", "=", "tf", ".", "reduce_sum", "(", "mask", ")", "\n", "\n", "dice_score", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "less", "(", "dice_count", ",", "epsilon", ")", ",", "\n", "true_fn", "=", "lambda", ":", "tf", ".", "convert_to_tensor", "(", "-", "1.0", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "false_fn", "=", "lambda", ":", "dice_sum", "/", "dice_count", "\n", ")", "\n", "\n", "dice_per_cls", "+=", "[", "dice_score", "]", "\n", "\n", "# add to tf.summary", "\n", "", "summary_bufs", "=", "[", "]", "\n", "for", "classname", ",", "dice_score", "in", "zip", "(", "classnames", ",", "dice_per_cls", ")", ":", "\n", "        ", "buf", "=", "tf", ".", "summary", ".", "scalar", "(", "\"dice_\"", "+", "classname", ",", "dice_score", ",", "family", "=", "family", ")", "\n", "summary_bufs", "+=", "[", "buf", "]", "\n", "\n", "", "return", "summary_bufs", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.summary.average_dice": [[136, 201], ["any", "summary._calculate_dice_per_img_per_cls", "tensorflow.convert_to_tensor", "tensorflow.expand_dims", "tensorflow.clip_by_value", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cond", "tensorflow.summary.scalar", "len", "ValueError", "len", "ValueError", "tensorflow.ones", "tensorflow.cast", "tensorflow.cast", "tensorflow.less", "isinstance", "tensorflow.convert_to_tensor", "range", "tensorflow.convert_to_tensor"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.metric._calculate_dice_per_img_per_cls"], ["", "def", "average_dice", "(", "\n", "labels", ",", "\n", "predictions", ",", "\n", "nclasses", ",", "\n", "presences", "=", "None", ",", "\n", "classnames", "=", "None", ",", "\n", "weights", "=", "1.0", ",", "\n", "epsilon", "=", "1e-10", ",", "\n", "collections", "=", "None", ",", "\n", "family", "=", "None", ",", "\n", ")", ":", "\n", "# check that classnames has correct length (if defined)", "\n", "    ", "if", "classnames", "is", "None", ":", "\n", "        ", "classnames", "=", "[", "\"cat{:02d}\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "nclasses", ")", "]", "\n", "\n", "", "if", "len", "(", "classnames", ")", "!=", "nclasses", ":", "\n", "        ", "msg", "=", "\"classnames must be a list of length nclasses!\"", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# check that weights has correct length", "\n", "", "if", "any", "(", "isinstance", "(", "weights", ",", "x", ")", "for", "x", "in", "[", "int", ",", "float", "]", ")", ":", "\n", "        ", "weights", "=", "[", "weights", "]", "*", "nclasses", "\n", "\n", "", "if", "len", "(", "weights", ")", "!=", "nclasses", ":", "\n", "        ", "msg", "=", "\"if weights is a list, length must be nclasses!\"", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# prepare presence array", "\n", "", "if", "presences", "is", "None", ":", "\n", "        ", "presences", "=", "tf", ".", "ones", "(", "shape", "=", "(", "1", ",", "nclasses", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "presences", "=", "tf", ".", "cast", "(", "presences", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "presences", "=", "tf", ".", "cast", "(", "presences", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# shape: (1, nclasses) or (batchsize, nclasses)", "\n", "\n", "# calculate dice score (per image per class/category)", "\n", "", "dice_per_img_per_cls", "=", "_calculate_dice_per_img_per_cls", "(", "\n", "labels", ",", "predictions", ",", "nclasses", ",", "epsilon", "\n", ")", "\n", "# shape: (batchsize, nclasses)", "\n", "\n", "# create a weightage mask by merging weights and presences", "\n", "mask", "=", "tf", ".", "convert_to_tensor", "(", "weights", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# shape: (nclasses,)", "\n", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "mask", ",", "axis", "=", "0", ")", "\n", "# shape: (1, nclasses)", "\n", "\n", "mask", "*=", "presences", "\n", "# shape: (1, nclasses) or (batchsize, nclasses)", "\n", "\n", "mask", "*=", "tf", ".", "clip_by_value", "(", "dice_per_img_per_cls", ",", "1.0", ",", "1.0", ")", "\n", "# shape: (batchsize, nclasses)", "\n", "\n", "# calculate average dice (across batch)", "\n", "dice_sum", "=", "tf", ".", "reduce_sum", "(", "mask", "*", "tf", ".", "convert_to_tensor", "(", "dice_per_img_per_cls", ")", ")", "\n", "dice_count", "=", "tf", ".", "reduce_sum", "(", "mask", ")", "\n", "\n", "dice_mean", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "less", "(", "dice_count", ",", "epsilon", ")", ",", "\n", "true_fn", "=", "lambda", ":", "tf", ".", "convert_to_tensor", "(", "-", "1.0", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "false_fn", "=", "lambda", ":", "dice_sum", "/", "dice_count", "\n", ")", "\n", "\n", "return", "tf", ".", "summary", ".", "scalar", "(", "\"dice_mean\"", ",", "dice_mean", ",", "family", "=", "family", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.summary._calculate_dice_per_img_per_cls": [[203, 220], ["tensorflow.one_hot", "tensorflow.one_hot", "range", "tuple", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.divide", "len", "tf.one_hot.get_shape"], "function", ["None"], ["", "def", "_calculate_dice_per_img_per_cls", "(", "labels", ",", "predictions", ",", "nclasses", ",", "epsilon", ")", ":", "\n", "# prepare images", "\n", "    ", "onehot_labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "nclasses", ")", "\n", "onehot_preds", "=", "tf", ".", "one_hot", "(", "predictions", ",", "depth", "=", "nclasses", ")", "\n", "\n", "# calculate dice score (per image per class/category)", "\n", "reduce_axis", "=", "range", "(", "1", ",", "len", "(", "onehot_labels", ".", "get_shape", "(", ")", ")", "-", "1", ")", "\n", "reduce_axis", "=", "tuple", "(", "reduce_axis", ")", "\n", "\n", "i", "=", "tf", ".", "reduce_sum", "(", "onehot_labels", "*", "onehot_preds", ",", "axis", "=", "reduce_axis", ")", "\n", "l", "=", "tf", ".", "reduce_sum", "(", "onehot_preds", ",", "axis", "=", "reduce_axis", ")", "\n", "r", "=", "tf", ".", "reduce_sum", "(", "onehot_labels", ",", "axis", "=", "reduce_axis", ")", "\n", "\n", "dice_per_img_per_cls", "=", "tf", ".", "divide", "(", "2", "*", "i", "+", "epsilon", ",", "(", "l", "+", "r", ")", "+", "epsilon", ")", "\n", "# shape: (batchsize, nclasses)", "\n", "\n", "return", "dice_per_img_per_cls", "\n", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.input_fn.create_input_fn": [[12, 100], ["utilities.log.create_or_get_logger", "mode.lower", "image_type.lower", "input_fn._input_fn", "mode.lower", "image_type.lower", "msg.format.format", "utilities.log.create_or_get_logger.error", "ValueError", "mode.lower", "utilities.log.create_or_get_logger.error", "ValueError", "msg.format.format", "utilities.log.create_or_get_logger.error", "ValueError", "msg.format.format", "utilities.log.create_or_get_logger.error", "ValueError", "mode.lower", "len", "image_type.lower", "image_type.lower"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.input_fn._input_fn"], ["def", "create_input_fn", "(", "ds_config", ",", "mode", ",", "epochs", "=", "None", ")", ":", "\n", "    ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", ")", "\n", "\n", "# extract required parameters", "\n", "filepaths", "=", "ds_config", ".", "image_paths", "\n", "image_type", "=", "ds_config", ".", "image_type", "\n", "\n", "output_res", "=", "ds_config", ".", "image_resolution", "\n", "output_shape", "=", "ds_config", ".", "image_size", "\n", "slice_dim", "=", "ds_config", ".", "image_slicedim", "\n", "\n", "block_lengths", "=", "ds_config", ".", "image_blocklengths", "\n", "cyclic", "=", "ds_config", ".", "image_cyclic", "\n", "batchsize", "=", "ds_config", ".", "image_batchsize", "\n", "shuffle_buffersize", "=", "ds_config", ".", "image_shuffle_buffer", "\n", "\n", "prefetch_buffersize", "=", "2", "*", "batchsize", "\n", "\n", "if", "mode", ".", "lower", "(", ")", "==", "\"train\"", ":", "\n", "        ", "key_featureimg", "=", "ds_config", ".", "train_imgkey_feature", "\n", "key_labelimg", "=", "ds_config", ".", "train_imgkey_label", "\n", "key_presence", "=", "ds_config", ".", "train_imgkey_presence", "\n", "shuffle", "=", "ds_config", ".", "train_shuffle_image", "\n", "", "elif", "mode", ".", "lower", "(", ")", "==", "\"eval\"", ":", "\n", "        ", "key_featureimg", "=", "ds_config", ".", "evaluate_imgkey_feature", "\n", "key_labelimg", "=", "ds_config", ".", "evaluate_imgkey_label", "\n", "key_presence", "=", "ds_config", ".", "evaluate_imgkey_presence", "\n", "shuffle", "=", "ds_config", ".", "evaluate_shuffle_image", "\n", "", "elif", "mode", ".", "lower", "(", ")", "==", "\"pred\"", ":", "\n", "        ", "key_featureimg", "=", "ds_config", ".", "predict_imgkey_feature", "\n", "key_labelimg", "=", "None", "\n", "key_presence", "=", "None", "\n", "shuffle", "=", "False", "\n", "", "else", ":", "\n", "        ", "msg", "=", "\"unknown mode {:}\"", ".", "format", "(", "mode", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# additional checkings", "\n", "", "if", "key_featureimg", "is", "not", "None", ":", "\n", "        ", "if", "key_featureimg", "==", "''", ":", "\n", "            ", "key_featureimg", "=", "None", "\n", "\n", "", "", "if", "key_labelimg", "is", "not", "None", ":", "\n", "        ", "if", "key_labelimg", "==", "''", ":", "\n", "            ", "key_labelimg", "=", "None", "\n", "\n", "", "", "if", "key_presence", "is", "not", "None", ":", "\n", "        ", "if", "key_presence", "==", "''", ":", "\n", "            ", "key_presence", "=", "None", "\n", "\n", "", "", "if", "image_type", ".", "lower", "(", ")", "==", "\"hdf5\"", ":", "\n", "        ", "pass", "\n", "", "elif", "image_type", ".", "lower", "(", ")", "==", "\"nii\"", ":", "\n", "        ", "if", "(", "mode", ".", "lower", "(", ")", "==", "\"pred\"", ")", "and", "(", "len", "(", "filepaths", ")", "!=", "1", ")", ":", "\n", "            ", "msg", "=", "\"under {:} mode, length of filepaths \"", "\n", "msg", "+=", "\"must be 1 if image_type is {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "mode", ",", "image_type", ".", "lower", "(", ")", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "", "if", "key_presence", "is", "not", "None", ":", "\n", "            ", "msg", "=", "\"presence array is not supported if image_type is {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "image_type", ".", "lower", "(", ")", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "", "", "else", ":", "\n", "        ", "msg", "=", "\"unknown image_type {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "image_type", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# create input_fn and return", "\n", "", "return", "lambda", ":", "_input_fn", "(", "\n", "filepaths", "=", "filepaths", ",", "\n", "image_type", "=", "image_type", ",", "\n", "key_featureimg", "=", "key_featureimg", ",", "\n", "key_labelimg", "=", "key_labelimg", ",", "\n", "key_presence", "=", "key_presence", ",", "\n", "block_lengths", "=", "block_lengths", ",", "\n", "cyclic", "=", "cyclic", ",", "\n", "output_res", "=", "output_res", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "slice_dim", "=", "slice_dim", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "shuffle_buffersize", "=", "shuffle_buffersize", ",", "\n", "epochs", "=", "epochs", ",", "\n", "batchsize", "=", "batchsize", ",", "\n", "prefetch_buffersize", "=", "prefetch_buffersize", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.input_fn._input_fn": [[103, 191], ["utilities.log.create_or_get_logger", "_create_nii_dataset.map", "_create_nii_dataset.repeat", "_create_nii_dataset.batch", "_create_nii_dataset.prefetch", "_create_nii_dataset.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "image_type.lower", "input_fn._create_hdf5_dataset", "random.randint", "_create_nii_dataset.shuffle", "image_type.lower", "input_fn._create_nii_dataset", "msg.format.format", "utilities.log.create_or_get_logger.error", "ValueError", "len"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.input_fn._create_hdf5_dataset", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.input_fn._create_nii_dataset"], ["", "def", "_input_fn", "(", "\n", "filepaths", ",", "\n", "image_type", ",", "\n", "key_featureimg", ",", "\n", "key_labelimg", ",", "\n", "key_presence", ",", "\n", "block_lengths", ",", "\n", "cyclic", ",", "\n", "output_res", ",", "\n", "output_shape", ",", "\n", "slice_dim", ",", "\n", "shuffle", ",", "\n", "shuffle_buffersize", ",", "\n", "epochs", ",", "\n", "batchsize", ",", "\n", "prefetch_buffersize", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", ")", "\n", "\n", "# create dataset", "\n", "if", "image_type", ".", "lower", "(", ")", "==", "\"hdf5\"", ":", "\n", "        ", "dataset", "=", "_create_hdf5_dataset", "(", "\n", "filepaths", "=", "filepaths", ",", "\n", "key_featureimg", "=", "key_featureimg", ",", "\n", "key_labelimg", "=", "key_labelimg", ",", "\n", "key_presence", "=", "key_presence", ",", "\n", "block_lengths", "=", "block_lengths", ",", "\n", "cyclic", "=", "cyclic", ",", "\n", "slice_dim", "=", "slice_dim", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", ")", "\n", "", "elif", "image_type", ".", "lower", "(", ")", "==", "\"nii\"", ":", "\n", "        ", "dataset", "=", "_create_nii_dataset", "(", "\n", "filepaths", "=", "filepaths", ",", "\n", "key_featureimg", "=", "key_featureimg", ",", "\n", "key_labelimg", "=", "key_labelimg", ",", "\n", "block_lengths", "=", "block_lengths", ",", "\n", "cyclic", "=", "cyclic", ",", "\n", "output_res", "=", "output_res", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "slice_dim", "=", "slice_dim", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", ")", "\n", "", "else", ":", "\n", "# msg = \"generating input_fn from image_type {:} is not supported\"", "\n", "        ", "msg", "=", "\"unknown image_type {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "image_type", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# tf.data.Dataset: map", "\n", "", "def", "_map_func", "(", "feature_img", ",", "label_img", "=", "None", ",", "presence_array", "=", "None", ")", ":", "\n", "# create feature dict", "\n", "        ", "features", "=", "{", "\"images\"", ":", "feature_img", "}", "\n", "\n", "# create label dict", "\n", "labels", "=", "{", "}", "\n", "if", "label_img", "is", "not", "None", ":", "\n", "            ", "labels", "[", "\"images\"", "]", "=", "label_img", "\n", "", "if", "presence_array", "is", "not", "None", ":", "\n", "            ", "labels", "[", "\"presences\"", "]", "=", "presence_array", "\n", "\n", "", "return", "(", "features", ",", "labels", ")", "\n", "\n", "", "dataset", "=", "dataset", ".", "map", "(", "_map_func", ")", "\n", "\n", "# tf.data.Dataset: shuffle", "\n", "if", "(", "len", "(", "filepaths", ")", ">", "1", ")", "and", "shuffle", ":", "\n", "        ", "s", "=", "random", ".", "randint", "(", "1", ",", "2", "**", "31", ")", "\n", "dataset", "=", "dataset", ".", "shuffle", "(", "\n", "buffer_size", "=", "shuffle_buffersize", ",", "\n", "seed", "=", "s", ",", "\n", "reshuffle_each_iteration", "=", "True", "\n", ")", "\n", "\n", "# tf.data.Dataset: repeat", "\n", "", "dataset", "=", "dataset", ".", "repeat", "(", "epochs", ")", "\n", "\n", "# tf.data.Dataset: batch", "\n", "dataset", "=", "dataset", ".", "batch", "(", "batchsize", ")", "\n", "\n", "# tf.data.Dataset: prefetch", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "prefetch_buffersize", ")", "\n", "\n", "# make iterator and return", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "\n", "return", "iterator", ".", "get_next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.input_fn._create_hdf5_dataset": [[193, 253], ["utilities.log.create_or_get_logger", "reader.InterleavedGenerator.get_dataset_shapes", "tensorflow.data.Dataset.from_generator", "len", "utilities.io.reader.HDF5Generator", "tensorflow.TensorShape", "len", "utilities.io.reader.InterleavedGenerator", "utilities.log.create_or_get_logger.error", "ValueError", "tuple", "tuple", "utilities.io.reader.HDF5Generator"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.get_dataset_shapes"], ["", "def", "_create_hdf5_dataset", "(", "\n", "filepaths", ",", "\n", "key_featureimg", ",", "\n", "key_labelimg", "=", "None", ",", "\n", "key_presence", "=", "None", ",", "\n", "block_lengths", "=", "None", ",", "\n", "cyclic", "=", "False", ",", "\n", "slice_dim", "=", "0", ",", "\n", "shuffle", "=", "False", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", ")", "\n", "\n", "# define datasets to extract from hdf5", "\n", "keys", "=", "[", "key_featureimg", "]", "\n", "if", "key_labelimg", "is", "not", "None", ":", "\n", "        ", "keys", "+=", "[", "key_labelimg", "]", "\n", "", "if", "key_presence", "is", "not", "None", ":", "\n", "        ", "keys", "+=", "[", "key_presence", "]", "\n", "\n", "# define output types", "\n", "", "output_types", "=", "[", "tf", ".", "float32", "]", "\n", "if", "key_labelimg", "is", "not", "None", ":", "\n", "        ", "output_types", "+=", "[", "tf", ".", "uint8", "]", "\n", "", "if", "key_presence", "is", "not", "None", ":", "\n", "        ", "output_types", "+=", "[", "tf", ".", "uint8", "]", "\n", "\n", "# create generator", "\n", "", "if", "len", "(", "filepaths", ")", "==", "1", ":", "\n", "        ", "generator", "=", "reader", ".", "HDF5Generator", "(", "\n", "filepaths", "[", "0", "]", ",", "keys", "=", "keys", ",", "slice_dim", "=", "slice_dim", "\n", ")", "\n", "", "elif", "len", "(", "filepaths", ")", ">", "1", ":", "\n", "        ", "hdf5_generators", "=", "[", "\n", "reader", ".", "HDF5Generator", "(", "\n", "f", ",", "keys", "=", "keys", ",", "slice_dim", "=", "slice_dim", ",", "shuffle", "=", "shuffle", "\n", ")", "for", "f", "in", "filepaths", "\n", "]", "\n", "\n", "generator", "=", "reader", ".", "InterleavedGenerator", "(", "\n", "generators", "=", "hdf5_generators", ",", "\n", "block_lengths", "=", "block_lengths", ",", "\n", "cyclic", "=", "cyclic", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "msg", "=", "\"at least one hdf5 filename has to be specified!\"", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# determine output shapes", "\n", "", "dataset_shapes", "=", "generator", ".", "get_dataset_shapes", "(", ")", "\n", "output_shapes", "=", "[", "tf", ".", "TensorShape", "(", "dataset_shapes", "[", "k", "]", ")", "for", "k", "in", "keys", "]", "\n", "\n", "# create tf.data.Dataset", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "generator", ",", "\n", "output_types", "=", "tuple", "(", "output_types", ")", ",", "\n", "output_shapes", "=", "tuple", "(", "output_shapes", ")", ",", "\n", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.input_fn._create_nii_dataset": [[255, 331], ["utilities.log.create_or_get_logger", "reader.InterleavedGenerator.get_dataset_shapes", "tensorflow.data.Dataset.from_generator", "len", "utilities.io.reader.NiftiGenerator", "tensorflow.TensorShape", "len", "utilities.io.reader.InterleavedGenerator", "utilities.log.create_or_get_logger.error", "ValueError", "tuple", "tuple", "utilities.io.reader.NiftiGenerator"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.get_dataset_shapes"], ["", "def", "_create_nii_dataset", "(", "\n", "filepaths", ",", "\n", "key_featureimg", ",", "\n", "key_labelimg", "=", "None", ",", "\n", "block_lengths", "=", "None", ",", "\n", "cyclic", "=", "False", ",", "\n", "output_res", "=", "None", ",", "\n", "output_shape", "=", "None", ",", "\n", "slice_dim", "=", "0", ",", "\n", "shuffle", "=", "False", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", ")", "\n", "\n", "# define subdirectories (of each filepath)", "\n", "# containing required nifti images", "\n", "keys", "=", "[", "key_featureimg", "]", "\n", "if", "key_labelimg", "is", "not", "None", ":", "\n", "        ", "keys", "+=", "[", "key_labelimg", "]", "\n", "\n", "# define output types", "\n", "", "output_types", "=", "[", "tf", ".", "float32", "]", "\n", "if", "key_labelimg", "is", "not", "None", ":", "\n", "        ", "output_types", "+=", "[", "tf", ".", "uint8", "]", "\n", "\n", "# define resample orders", "\n", "# resample_orders = [3]", "\n", "", "resample_orders", "=", "[", "1", "]", "\n", "if", "key_labelimg", "is", "not", "None", ":", "\n", "        ", "resample_orders", "+=", "[", "0", "]", "\n", "\n", "# create generator", "\n", "", "if", "len", "(", "filepaths", ")", "==", "1", ":", "\n", "        ", "generator", "=", "reader", ".", "NiftiGenerator", "(", "\n", "filepaths", "[", "0", "]", ",", "\n", "keys", "=", "keys", ",", "\n", "resample_orders", "=", "resample_orders", ",", "\n", "output_res", "=", "output_res", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "slice_dim", "=", "slice_dim", "\n", ")", "\n", "", "elif", "len", "(", "filepaths", ")", ">", "1", ":", "\n", "        ", "nii_generators", "=", "[", "\n", "reader", ".", "NiftiGenerator", "(", "\n", "f", ",", "\n", "keys", "=", "keys", ",", "\n", "resample_orders", "=", "resample_orders", ",", "\n", "output_res", "=", "output_res", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "slice_dim", "=", "slice_dim", ",", "\n", "shuffle", "=", "shuffle", "\n", ")", "for", "f", "in", "filepaths", "\n", "]", "\n", "\n", "generator", "=", "reader", ".", "InterleavedGenerator", "(", "\n", "generators", "=", "nii_generators", ",", "\n", "block_lengths", "=", "block_lengths", ",", "\n", "cyclic", "=", "cyclic", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "msg", "=", "\"at least one directory (containing nifti images)\"", "\n", "msg", "+=", "\"has to be specified!\"", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# determine output shapes", "\n", "", "dataset_shapes", "=", "generator", ".", "get_dataset_shapes", "(", ")", "\n", "output_shapes", "=", "[", "tf", ".", "TensorShape", "(", "dataset_shapes", "[", "k", "]", ")", "for", "k", "in", "keys", "]", "\n", "\n", "# create tf.data.Dataset", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "generator", ",", "\n", "output_types", "=", "tuple", "(", "output_types", ")", ",", "\n", "output_shapes", "=", "tuple", "(", "output_shapes", ")", ",", "\n", ")", "\n", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss._extract_factor": [[12, 29], ["loss_str.split", "ValueError", "loss_name.lower", "loss_str.count", "msg.format", "float"], "function", ["None"], ["def", "_extract_factor", "(", "loss_str", ")", ":", "\n", "    ", "if", "(", "'*'", "in", "loss_str", ")", "and", "(", "loss_str", ".", "count", "(", "'*'", ")", "!=", "1", ")", ":", "\n", "        ", "msg", "=", "\"Unable to parse '{:}' into factor and lossname\"", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "loss_str", ")", ")", "\n", "\n", "", "loss_factor", "=", "1.0", "\n", "loss_name", "=", "loss_str", "\n", "for", "loss_substr", "in", "loss_str", ".", "split", "(", "'*'", ")", ":", "\n", "        ", "try", ":", "\n", "# try converting substring to float", "\n", "            ", "substr_float", "=", "float", "(", "loss_substr", ")", "\n", "loss_factor", "=", "substr_float", "\n", "", "except", ":", "\n", "# substring is loss_name if convertion fails", "\n", "            ", "loss_name", "=", "loss_substr", "\n", "\n", "", "", "return", "loss_factor", ",", "loss_name", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss._loss_from_string_component": [[31, 51], ["loss._extract_factor", "loss_str.strip", "loss_component", "ValueError"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss._extract_factor"], ["", "def", "_loss_from_string_component", "(", "loss_str", ")", ":", "\n", "# remove space characters (if any)", "\n", "# and extract loss name & factor", "\n", "    ", "loss_factor", ",", "loss_name", "=", "_extract_factor", "(", "loss_str", ".", "strip", "(", ")", ")", "\n", "\n", "# create loss function based on lossname", "\n", "if", "loss_name", "in", "[", "\"logdice\"", ",", "\"log-dice\"", "]", ":", "\n", "        ", "loss_component", "=", "logdice_loss", "\n", "", "elif", "loss_name", "in", "[", "\"softdice\"", ",", "\"soft-dice\"", "]", ":", "\n", "        ", "loss_component", "=", "softdice_loss", "\n", "", "elif", "loss_name", "in", "[", "\"xent\"", ",", "\"crossentropy\"", "]", ":", "\n", "        ", "loss_component", "=", "crossentropy_loss", "\n", "", "elif", "loss_name", "in", "[", "\"sparsexent\"", ",", "\"sparse-xent\"", ",", "\"sparse-crossentropy\"", "]", ":", "\n", "        ", "loss_component", "=", "sparse_crossentropy_loss", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown loss function '{:}'\"", ".", "format", "(", "loss_str", ")", ")", "\n", "\n", "# scale by factor", "\n", "", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "loss_factor", "*", "loss_component", "(", "\n", "*", "args", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.create_loss_from_string": [[54, 66], ["loss_str.split", "loss._loss_from_string_component", "losses.append", "sum", "loss"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss._loss_from_string_component"], ["", "def", "create_loss_from_string", "(", "loss_str", ")", ":", "\n", "# split loss name into components", "\n", "    ", "losses", "=", "[", "]", "\n", "for", "loss_str_component", "in", "loss_str", ".", "split", "(", "'+'", ")", ":", "\n", "# obtain loss function from component", "\n", "        ", "loss_component", "=", "_loss_from_string_component", "(", "loss_str_component", ")", "\n", "\n", "losses", ".", "append", "(", "loss_component", ")", "\n", "\n", "# sum up all components and return", "\n", "", "return", "(", "\n", "lambda", "*", "args", ",", "**", "kwargs", ":", "sum", "(", "loss", "(", "*", "args", ",", "**", "kwargs", ")", "for", "loss", "in", "losses", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.logdice_loss": [[69, 110], ["tensorflow.one_hot", "tensorflow.nn.softmax", "len", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "loss.generate_weightage_array", "len", "tensorflow.losses.compute_weighted_loss", "tf.nn.softmax.get_shape", "tensorflow.log", "tensorflow.log", "loginv_dice_scores.get_shape", "len", "tensorflow.expand_dims", "tuple", "tuple", "tuple", "tf.expand_dims.get_shape", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.generate_weightage_array"], ["", "def", "logdice_loss", "(", "\n", "labels", ",", "\n", "logits", ",", "\n", "presences", "=", "None", ",", "\n", "weights", "=", "1.0", ",", "\n", "epsilon", "=", "1e-10", ",", "\n", "scope", "=", "\"dice_loss\"", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "# prepare images", "\n", "    ", "onehot_labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "logits", ".", "shape", "[", "-", "1", "]", ")", "\n", "preds", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n", "# calculate dice score (per image per class/category)", "\n", "ndim", "=", "len", "(", "preds", ".", "get_shape", "(", ")", ")", "\n", "\n", "i", "=", "tf", ".", "reduce_sum", "(", "onehot_labels", "*", "preds", ",", "axis", "=", "tuple", "(", "range", "(", "1", ",", "ndim", "-", "1", ")", ")", ")", "\n", "l", "=", "tf", ".", "reduce_sum", "(", "preds", ",", "axis", "=", "tuple", "(", "range", "(", "1", ",", "ndim", "-", "1", ")", ")", ")", "\n", "r", "=", "tf", ".", "reduce_sum", "(", "onehot_labels", ",", "axis", "=", "tuple", "(", "range", "(", "1", ",", "ndim", "-", "1", ")", ")", ")", "\n", "\n", "loginv_dice_scores", "=", "tf", ".", "log", "(", "l", "+", "r", "+", "epsilon", ")", "-", "tf", ".", "log", "(", "2", "*", "i", "+", "epsilon", ")", "\n", "# shape: (batchsize, n_class)", "\n", "\n", "# generate weightage array", "\n", "weight_array", "=", "generate_weightage_array", "(", "presences", ",", "weights", ")", "\n", "# shape: (1,) or (n_class,) or (batchsize, n_class)", "\n", "\n", "# expand weight_array's dimension to dice_scores' dimension", "\n", "target_ndims", "=", "len", "(", "loginv_dice_scores", ".", "get_shape", "(", ")", ")", "\n", "while", "(", "len", "(", "weight_array", ".", "get_shape", "(", ")", ")", "<", "target_ndims", ")", ":", "\n", "        ", "weight_array", "=", "tf", ".", "expand_dims", "(", "weight_array", ",", "axis", "=", "0", ")", "\n", "# shape: (1, 1) or (1, n_class) or (batchsize, n_class)", "\n", "\n", "# compute loss", "\n", "", "loss", "=", "tf", ".", "losses", ".", "compute_weighted_loss", "(", "\n", "loginv_dice_scores", ",", "\n", "weights", "=", "weight_array", ",", "\n", "scope", "=", "scope", ",", "\n", "reduction", "=", "tf", ".", "losses", ".", "Reduction", ".", "MEAN", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.softdice_loss": [[112, 153], ["tensorflow.one_hot", "tensorflow.nn.softmax", "len", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.divide", "loss.generate_weightage_array", "len", "tensorflow.losses.compute_weighted_loss", "tf.nn.softmax.get_shape", "tf.divide.get_shape", "len", "tensorflow.expand_dims", "tuple", "tuple", "tuple", "tf.expand_dims.get_shape", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.generate_weightage_array"], ["", "def", "softdice_loss", "(", "\n", "labels", ",", "\n", "logits", ",", "\n", "presences", "=", "None", ",", "\n", "weights", "=", "1.0", ",", "\n", "epsilon", "=", "1e-10", ",", "\n", "scope", "=", "\"softdice_loss\"", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "# prepare images", "\n", "    ", "onehot_labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "logits", ".", "shape", "[", "-", "1", "]", ")", "\n", "preds", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n", "# calculate dice score (per image per class/category)", "\n", "ndim", "=", "len", "(", "preds", ".", "get_shape", "(", ")", ")", "\n", "\n", "i", "=", "tf", ".", "reduce_sum", "(", "onehot_labels", "*", "preds", ",", "axis", "=", "tuple", "(", "range", "(", "1", ",", "ndim", "-", "1", ")", ")", ")", "\n", "l", "=", "tf", ".", "reduce_sum", "(", "preds", ",", "axis", "=", "tuple", "(", "range", "(", "1", ",", "ndim", "-", "1", ")", ")", ")", "\n", "r", "=", "tf", ".", "reduce_sum", "(", "onehot_labels", ",", "axis", "=", "tuple", "(", "range", "(", "1", ",", "ndim", "-", "1", ")", ")", ")", "\n", "\n", "dice_scores", "=", "tf", ".", "divide", "(", "2", "*", "i", "+", "epsilon", ",", "(", "l", "+", "r", ")", "+", "epsilon", ")", "\n", "# shape: (batchsize, n_class)", "\n", "\n", "# generate weightage array", "\n", "weight_array", "=", "generate_weightage_array", "(", "presences", ",", "weights", ")", "\n", "# shape: (1,) or (n_class,) or (batchsize, n_class)", "\n", "\n", "# expand weight_array's dimension to dice_scores' dimension", "\n", "target_ndims", "=", "len", "(", "dice_scores", ".", "get_shape", "(", ")", ")", "\n", "while", "(", "len", "(", "weight_array", ".", "get_shape", "(", ")", ")", "<", "target_ndims", ")", ":", "\n", "        ", "weight_array", "=", "tf", ".", "expand_dims", "(", "weight_array", ",", "axis", "=", "0", ")", "\n", "# shape: (1, 1) or (1, n_class) or (batchsize, n_class)", "\n", "\n", "# compute loss", "\n", "", "loss", "=", "tf", ".", "losses", ".", "compute_weighted_loss", "(", "\n", "1", "-", "dice_scores", ",", "\n", "weights", "=", "weight_array", ",", "\n", "scope", "=", "scope", ",", "\n", "reduction", "=", "tf", ".", "losses", ".", "Reduction", ".", "MEAN", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.crossentropy_loss": [[155, 183], ["tensorflow.one_hot", "loss.generate_weightage_mask", "tensorflow.losses.softmax_cross_entropy"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.generate_weightage_mask"], ["", "def", "crossentropy_loss", "(", "\n", "labels", ",", "\n", "logits", ",", "\n", "presences", "=", "None", ",", "\n", "weights", "=", "1.0", ",", "\n", "weightmask_mode", "=", "\"base\"", ",", "\n", "epsilon", "=", "1e-10", ",", "\n", "scope", "=", "\"crossentropy_loss\"", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "# convert labels to one-hot", "\n", "    ", "onehot_labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "logits", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# generate weightage_mask", "\n", "weight_mask", "=", "generate_weightage_mask", "(", "\n", "labels", "=", "labels", ",", "\n", "logits", "=", "logits", ",", "\n", "presences", "=", "presences", ",", "\n", "weights", "=", "weights", ",", "\n", "weightmask_mode", "=", "weightmask_mode", "\n", ")", "\n", "\n", "# compute loss", "\n", "loss", "=", "tf", ".", "losses", ".", "softmax_cross_entropy", "(", "\n", "onehot_labels", ",", "logits", ",", "weights", "=", "weight_mask", ",", "scope", "=", "scope", "\n", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.sparse_crossentropy_loss": [[185, 210], ["loss.generate_weightage_mask", "tensorflow.losses.sparse_softmax_cross_entropy"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.generate_weightage_mask"], ["", "def", "sparse_crossentropy_loss", "(", "\n", "labels", ",", "\n", "logits", ",", "\n", "presences", "=", "None", ",", "\n", "weights", "=", "1.0", ",", "\n", "weightmask_mode", "=", "\"base\"", ",", "\n", "epsilon", "=", "1e-10", ",", "\n", "scope", "=", "\"sparse_crossentropy_loss\"", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "# generate weightage_mask", "\n", "    ", "weight_mask", "=", "generate_weightage_mask", "(", "\n", "labels", "=", "labels", ",", "\n", "logits", "=", "logits", ",", "\n", "presences", "=", "presences", ",", "\n", "weights", "=", "weights", ",", "\n", "weightmask_mode", "=", "weightmask_mode", "\n", ")", "\n", "\n", "# compute loss", "\n", "loss", "=", "tf", ".", "losses", ".", "sparse_softmax_cross_entropy", "(", "\n", "labels", ",", "logits", ",", "weights", "=", "weight_mask", ",", "scope", "=", "scope", "\n", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.generate_weightage_array": [[212, 224], ["tensorflow.convert_to_tensor", "tensorflow.cast"], "function", ["None"], ["", "def", "generate_weightage_array", "(", "presences", "=", "None", ",", "weights", "=", "1.0", ")", ":", "\n", "# convert weights from scalar/list to tensor", "\n", "    ", "weight_array", "=", "tf", ".", "convert_to_tensor", "(", "weights", ")", "\n", "# shape: (1,) or (n_class,)", "\n", "\n", "# modify weight if needed", "\n", "# keep classes that shall not be ignored only", "\n", "if", "presences", "is", "not", "None", ":", "\n", "        ", "weight_array", "*=", "tf", ".", "cast", "(", "presences", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# shape: (n_class,) or (batchsize, n_class)", "\n", "\n", "", "return", "weight_array", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.generate_weightage_mask": [[226, 282], ["weightmask_mode.lower.lower", "loss.generate_weightage_array", "len", "tensorflow.one_hot", "tensorflow.argmax", "tensorflow.one_hot", "tensorflow.reduce_sum", "utilities.tfwrapper.summary.ndim_image", "ValueError", "logits.get_shape", "len", "tensorflow.expand_dims", "tf.expand_dims.get_shape", "tensorflow.logical_or", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.generate_weightage_array", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.summary.ndim_image"], ["", "def", "generate_weightage_mask", "(", "\n", "labels", ",", "logits", ",", "presences", "=", "None", ",", "weights", "=", "1.0", ",", "weightmask_mode", "=", "\"base\"", "\n", ")", ":", "\n", "# make sure weightmask_mode is valid:", "\n", "    ", "weightmask_mode", "=", "weightmask_mode", ".", "lower", "(", ")", "\n", "weightmask_mode_allowed", "=", "[", "\"base\"", ",", "\"base_pred\"", ",", "\"or\"", ",", "\"plus\"", "]", "\n", "\n", "if", "weightmask_mode", "not", "in", "weightmask_mode_allowed", ":", "\n", "        ", "msg", "=", "\"Invalid weightmask_mode {:}\"", ".", "format", "(", "weightmask_mode", ")", "\n", "msg", "+=", "\" (allowed values: {:})\"", ".", "format", "(", "weightmask_mode_allowed", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# generate weightage array", "\n", "", "weight_array", "=", "generate_weightage_array", "(", "presences", ",", "weights", ")", "\n", "# shape: (1,) or (n_class,) or (batchsize, n_class)", "\n", "\n", "# expand weight_array's dimension to match logits' dimension", "\n", "match_ndims", "=", "len", "(", "logits", ".", "get_shape", "(", ")", ")", "\n", "while", "(", "len", "(", "weight_array", ".", "get_shape", "(", ")", ")", "<", "match_ndims", ")", ":", "\n", "        ", "weight_array", "=", "tf", ".", "expand_dims", "(", "weight_array", ",", "axis", "=", "-", "2", ")", "\n", "# shape: (1,1,1,1) or (1,1,1,n_class) or (batchsize,1,1,n_class) in 2D mode", "\n", "\n", "# convert tensors to one-hot:", "\n", "# - labels", "\n", "", "onehot_labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "logits", ".", "shape", "[", "-", "1", "]", ")", "\n", "# shape: (batchsize,n_x,n_y,n_class) in 2D mode", "\n", "\n", "# - preds (argmax of logits)", "\n", "preds", "=", "tf", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "onehot_preds", "=", "tf", ".", "one_hot", "(", "preds", ",", "depth", "=", "logits", ".", "shape", "[", "-", "1", "]", ")", "\n", "# shape: (batchsize,n_x,n_y,n_class) in 2D mode", "\n", "\n", "# generate weightage mask", "\n", "if", "weightmask_mode", "==", "\"base\"", ":", "\n", "        ", "weightage_mask", "=", "onehot_labels", "*", "weight_array", "\n", "", "elif", "weightmask_mode", "==", "\"base_pred\"", ":", "\n", "        ", "weightage_mask", "=", "onehot_preds", "*", "weight_array", "\n", "", "elif", "weightmask_mode", "==", "\"or\"", ":", "\n", "        ", "onehot_or", "=", "tf", ".", "logical_or", "(", "\n", "tf", ".", "cast", "(", "onehot_labels", ",", "dtype", "=", "tf", ".", "bool", ")", ",", "\n", "tf", ".", "cast", "(", "onehot_preds", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", ")", "\n", "onehot_or", "=", "tf", ".", "cast", "(", "onehot_or", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "weightage_mask", "=", "onehot_or", "*", "weight_array", "\n", "", "elif", "weightmask_mode", "==", "\"plus\"", ":", "\n", "        ", "onehot_plus", "=", "onehot_labels", "+", "onehot_preds", "\n", "\n", "weightage_mask", "=", "onehot_plus", "*", "weight_array", "\n", "\n", "", "weightage_mask", "=", "tf", ".", "reduce_sum", "(", "weightage_mask", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# tf.summary: add weightage mask", "\n", "summary", ".", "ndim_image", "(", "name", "=", "'weightage_mask'", ",", "tensor", "=", "weightage_mask", ")", "\n", "\n", "return", "weightage_mask", "\n", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D": [[10, 48], ["activation", "tensorflow.layers.Conv2D", "tensorflow.layers.BatchNormalization"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D"], ["def", "Conv2D", "(", "\n", "input", ",", "\n", "filters", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "None", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "batchnorm", "=", "False", ",", "\n", "name", "=", "None", "\n", ")", ":", "\n", "    ", "output", "=", "tf", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "tf", ".", "identity", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "bias_regularizer", "=", "bias_regularizer", ",", "\n", "activity_regularizer", "=", "activity_regularizer", ",", "\n", "trainable", "=", "trainable", ",", "\n", "name", "=", "name", "\n", ")", "(", "input", ")", "\n", "\n", "if", "batchnorm", ":", "\n", "        ", "output", "=", "tf", ".", "layers", ".", "BatchNormalization", "(", "name", "=", "name", "+", "\"_bn\"", ")", "(", "output", ")", "\n", "\n", "", "output", "=", "activation", "(", "output", ",", "name", "=", "name", "+", "\"_activation\"", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2DTranspose": [[50, 88], ["activation", "tensorflow.layers.Conv2DTranspose", "tensorflow.layers.BatchNormalization"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2DTranspose"], ["", "def", "Conv2DTranspose", "(", "\n", "input", ",", "\n", "filters", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "None", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "batchnorm", "=", "False", ",", "\n", "name", "=", "None", "\n", ")", ":", "\n", "    ", "output", "=", "tf", ".", "layers", ".", "Conv2DTranspose", "(", "\n", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "tf", ".", "identity", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "bias_regularizer", "=", "bias_regularizer", ",", "\n", "activity_regularizer", "=", "activity_regularizer", ",", "\n", "trainable", "=", "trainable", ",", "\n", "name", "=", "name", "\n", ")", "(", "input", ")", "\n", "\n", "if", "batchnorm", ":", "\n", "        ", "output", "=", "tf", ".", "layers", ".", "BatchNormalization", "(", "name", "=", "name", "+", "\"_bn\"", ")", "(", "output", ")", "\n", "\n", "", "output", "=", "activation", "(", "output", ",", "name", "=", "name", "+", "\"_activation\"", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D": [[90, 128], ["activation", "tensorflow.layers.Conv3D", "tensorflow.layers.BatchNormalization"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D"], ["", "def", "Conv3D", "(", "\n", "input", ",", "\n", "filters", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "None", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "batchnorm", "=", "False", ",", "\n", "name", "=", "None", "\n", ")", ":", "\n", "    ", "output", "=", "tf", ".", "layers", ".", "Conv3D", "(", "\n", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "tf", ".", "identity", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "bias_regularizer", "=", "bias_regularizer", ",", "\n", "activity_regularizer", "=", "activity_regularizer", ",", "\n", "trainable", "=", "trainable", ",", "\n", "name", "=", "name", "\n", ")", "(", "input", ")", "\n", "\n", "if", "batchnorm", ":", "\n", "        ", "output", "=", "tf", ".", "layers", ".", "BatchNormalization", "(", "name", "=", "name", "+", "\"_bn\"", ")", "(", "output", ")", "\n", "\n", "", "output", "=", "activation", "(", "output", ",", "name", "=", "name", "+", "\"_activation\"", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3DTranspose": [[130, 168], ["activation", "tensorflow.layers.Conv3DTranspose", "tensorflow.layers.BatchNormalization"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3DTranspose"], ["", "def", "Conv3DTranspose", "(", "\n", "input", ",", "\n", "filters", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ",", "4", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "None", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "batchnorm", "=", "False", ",", "\n", "name", "=", "None", "\n", ")", ":", "\n", "    ", "output", "=", "tf", ".", "layers", ".", "Conv3DTranspose", "(", "\n", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "tf", ".", "identity", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "bias_regularizer", "=", "bias_regularizer", ",", "\n", "activity_regularizer", "=", "activity_regularizer", ",", "\n", "trainable", "=", "trainable", ",", "\n", "name", "=", "name", "\n", ")", "(", "input", ")", "\n", "\n", "if", "batchnorm", ":", "\n", "        ", "output", "=", "tf", ".", "layers", ".", "BatchNormalization", "(", "name", "=", "name", "+", "\"_bn\"", ")", "(", "output", ")", "\n", "\n", "", "output", "=", "activation", "(", "output", ",", "name", "=", "name", "+", "\"_activation\"", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.model.create_model_from_string": [[12, 23], ["str().lower", "str", "ValueError"], "function", ["None"], ["def", "create_model_from_string", "(", "model_str", ")", ":", "\n", "    ", "model_str", "=", "str", "(", "model_str", ")", ".", "lower", "(", ")", "\n", "\n", "if", "model_str", "in", "[", "\"unet\"", ",", "\"u-net\"", "]", ":", "\n", "        ", "return", "unet", "\n", "", "elif", "model_str", "in", "[", "\"vnet\"", ",", "\"v-net\"", "]", ":", "\n", "        ", "return", "vnet", "\n", "", "elif", "model_str", "in", "[", "\"vgg16\"", ",", "\"vgg-16\"", ",", "\"fcn8\"", ",", "\"fcn-8\"", "]", ":", "\n", "        ", "return", "fcn8", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown model '{:}'\"", ".", "format", "(", "model_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.model.unet": [[25, 264], ["utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2DTranspose", "tensorflow.concat", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2DTranspose", "tensorflow.concat", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2DTranspose", "tensorflow.concat", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2DTranspose", "tensorflow.concat", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "tensorflow.contrib.layer.l2_regularizer", "tensorflow.layers.MaxPooling2D", "tensorflow.layers.Dropout", "tensorflow.layers.MaxPooling2D", "tensorflow.layers.Dropout", "tensorflow.layers.MaxPooling2D", "tensorflow.layers.Dropout", "tensorflow.layers.MaxPooling2D", "tensorflow.layers.Dropout"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2DTranspose", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2DTranspose", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2DTranspose", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2DTranspose", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D"], ["", "", "def", "unet", "(", "input", ",", "nclasses", ",", "batchnorm", ",", "dropout_rate", ",", "l2_scale", ")", ":", "\n", "# create l2 regularizer", "\n", "    ", "if", "l2_scale", "==", "0.0", ":", "\n", "        ", "regularizer", "=", "None", "\n", "", "else", ":", "\n", "        ", "regularizer", "=", "tf", ".", "contrib", ".", "layer", ".", "l2_regularizer", "(", "scale", "=", "l2_scale", ")", "\n", "\n", "# # ckdebug", "\n", "# tf.Print(input, [input], message=\"Input: \")", "\n", "\n", "# define network", "\n", "", "conv1_1", "=", "layer", ".", "Conv2D", "(", "\n", "input", ",", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv1_1\"", "\n", ")", "\n", "conv1_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv1_1", ",", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv1_2\"", "\n", ")", "\n", "\n", "pool1", "=", "tf", ".", "layers", ".", "MaxPooling2D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool1\"", "\n", ")", "(", "conv1_2", ")", "\n", "drop1", "=", "tf", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout_rate", ",", "name", "=", "\"drop1\"", ")", "(", "pool1", ")", "\n", "\n", "conv2_1", "=", "layer", ".", "Conv2D", "(", "\n", "drop1", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv2_1\"", "\n", ")", "\n", "conv2_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv2_1", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv2_2\"", "\n", ")", "\n", "\n", "pool2", "=", "tf", ".", "layers", ".", "MaxPooling2D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool2\"", "\n", ")", "(", "conv2_2", ")", "\n", "drop2", "=", "tf", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout_rate", ",", "name", "=", "\"drop2\"", ")", "(", "pool2", ")", "\n", "\n", "conv3_1", "=", "layer", ".", "Conv2D", "(", "\n", "drop2", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv3_1\"", "\n", ")", "\n", "conv3_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv3_1", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv3_2\"", "\n", ")", "\n", "\n", "pool3", "=", "tf", ".", "layers", ".", "MaxPooling2D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool3\"", "\n", ")", "(", "conv3_2", ")", "\n", "drop3", "=", "tf", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout_rate", ",", "name", "=", "\"drop3\"", ")", "(", "pool3", ")", "\n", "\n", "conv4_1", "=", "layer", ".", "Conv2D", "(", "\n", "drop3", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv4_1\"", "\n", ")", "\n", "conv4_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv4_1", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv4_2\"", "\n", ")", "\n", "\n", "pool4", "=", "tf", ".", "layers", ".", "MaxPooling2D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool4\"", "\n", ")", "(", "conv4_2", ")", "\n", "drop4", "=", "tf", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout_rate", ",", "name", "=", "\"drop4\"", ")", "(", "pool4", ")", "\n", "\n", "conv5_1", "=", "layer", ".", "Conv2D", "(", "\n", "drop4", ",", "\n", "filters", "=", "1024", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv5_1\"", "\n", ")", "\n", "conv5_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv5_1", ",", "\n", "filters", "=", "1024", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv5_2\"", "\n", ")", "\n", "\n", "deconv4", "=", "layer", ".", "Conv2DTranspose", "(", "\n", "conv5_2", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'deconv4'", "\n", ")", "\n", "concat4", "=", "tf", ".", "concat", "(", "[", "conv4_2", ",", "deconv4", "]", ",", "axis", "=", "-", "1", ",", "name", "=", "'concat4'", ")", "\n", "\n", "conv6_1", "=", "layer", ".", "Conv2D", "(", "\n", "concat4", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv6_1\"", "\n", ")", "\n", "conv6_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv6_1", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv6_2\"", "\n", ")", "\n", "\n", "deconv3", "=", "layer", ".", "Conv2DTranspose", "(", "\n", "conv6_2", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'deconv3'", "\n", ")", "\n", "concat3", "=", "tf", ".", "concat", "(", "[", "conv3_2", ",", "deconv3", "]", ",", "axis", "=", "-", "1", ",", "name", "=", "'concat3'", ")", "\n", "\n", "conv7_1", "=", "layer", ".", "Conv2D", "(", "\n", "concat3", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv7_1\"", "\n", ")", "\n", "conv7_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv7_1", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv7_2\"", "\n", ")", "\n", "\n", "deconv2", "=", "layer", ".", "Conv2DTranspose", "(", "\n", "conv7_2", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'deconv2'", "\n", ")", "\n", "concat2", "=", "tf", ".", "concat", "(", "[", "conv2_2", ",", "deconv2", "]", ",", "axis", "=", "-", "1", ",", "name", "=", "\"concat2\"", ")", "\n", "\n", "conv8_1", "=", "layer", ".", "Conv2D", "(", "\n", "concat2", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv8_1\"", "\n", ")", "\n", "conv8_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv8_1", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv8_2\"", "\n", ")", "\n", "\n", "deconv1", "=", "layer", ".", "Conv2DTranspose", "(", "\n", "conv8_2", ",", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'deconv1'", "\n", ")", "\n", "concat1", "=", "tf", ".", "concat", "(", "[", "conv1_2", ",", "deconv1", "]", ",", "axis", "=", "-", "1", ",", "name", "=", "\"concat1\"", ")", "\n", "\n", "conv9_1", "=", "layer", ".", "Conv2D", "(", "\n", "concat1", ",", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv9_1\"", "\n", ")", "\n", "conv9_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv9_1", ",", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv9_2\"", "\n", ")", "\n", "\n", "logits", "=", "layer", ".", "Conv2D", "(", "\n", "conv9_2", ",", "\n", "filters", "=", "nclasses", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "batchnorm", "=", "False", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "activation", "=", "tf", ".", "identity", ",", "\n", "name", "=", "\"out_logits\"", "\n", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.model.vnet": [[266, 453], ["utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3DTranspose", "tensorflow.concat", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3DTranspose", "tensorflow.concat", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3DTranspose", "tensorflow.concat", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3D", "utilities.tfwrapper.layer.Conv3D", "tensorflow.contrib.layer.l2_regularizer", "tensorflow.layers.MaxPooling3D", "tensorflow.layers.Dropout", "tensorflow.layers.MaxPooling3D", "tensorflow.layers.Dropout", "tensorflow.layers.MaxPooling3D", "tensorflow.layers.Dropout"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3DTranspose", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3DTranspose", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3DTranspose", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv3D"], ["", "def", "vnet", "(", "input", ",", "nclasses", ",", "batchnorm", ",", "dropout_rate", ",", "l2_scale", ")", ":", "\n", "# create l2 regularizer", "\n", "    ", "if", "l2_scale", "==", "0.0", ":", "\n", "        ", "regularizer", "=", "None", "\n", "", "else", ":", "\n", "        ", "regularizer", "=", "tf", ".", "contrib", ".", "layer", ".", "l2_regularizer", "(", "scale", "=", "l2_scale", ")", "\n", "\n", "# define network", "\n", "", "conv1_1", "=", "layer", ".", "Conv3D", "(", "\n", "input", ",", "\n", "filters", "=", "32", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv1_1\"", "\n", ")", "\n", "conv1_2", "=", "layer", ".", "Conv3D", "(", "\n", "conv1_1", ",", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv1_2\"", "\n", ")", "\n", "\n", "pool1", "=", "tf", ".", "layers", ".", "MaxPooling3D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ",", "1", ")", ",", "strides", "=", "(", "2", ",", "2", ",", "1", ")", ",", "name", "=", "\"pool1\"", "\n", ")", "(", "conv1_2", ")", "\n", "drop1", "=", "tf", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout_rate", ",", "name", "=", "\"drop1\"", ")", "(", "pool1", ")", "\n", "\n", "conv2_1", "=", "layer", ".", "Conv3D", "(", "\n", "drop1", ",", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv2_1\"", "\n", ")", "\n", "conv2_2", "=", "layer", ".", "Conv3D", "(", "\n", "conv2_1", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv2_2\"", "\n", ")", "\n", "\n", "pool2", "=", "tf", ".", "layers", ".", "MaxPooling3D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ",", "1", ")", ",", "strides", "=", "(", "2", ",", "2", ",", "1", ")", ",", "name", "=", "\"pool2\"", "\n", ")", "(", "conv2_2", ")", "\n", "drop2", "=", "tf", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout_rate", ",", "name", "=", "\"drop2\"", ")", "(", "pool2", ")", "\n", "\n", "conv3_1", "=", "layer", ".", "Conv3D", "(", "\n", "drop2", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv3_1\"", "\n", ")", "\n", "conv3_2", "=", "layer", ".", "Conv3D", "(", "\n", "conv3_1", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv3_2\"", "\n", ")", "\n", "\n", "pool3", "=", "tf", ".", "layers", ".", "MaxPooling3D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "name", "=", "\"pool3\"", "\n", ")", "(", "conv3_2", ")", "\n", "drop3", "=", "tf", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout_rate", ",", "name", "=", "\"drop3\"", ")", "(", "pool3", ")", "\n", "\n", "conv4_1", "=", "layer", ".", "Conv3D", "(", "\n", "drop3", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv4_1\"", "\n", ")", "\n", "conv4_2", "=", "layer", ".", "Conv3D", "(", "\n", "conv4_1", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv4_2\"", "\n", ")", "\n", "\n", "deconv3", "=", "layer", ".", "Conv3DTranspose", "(", "\n", "conv4_2", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ",", "4", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'deconv3'", "\n", ")", "\n", "\n", "concat3", "=", "tf", ".", "concat", "(", "[", "conv3_2", ",", "deconv3", "]", ",", "axis", "=", "-", "1", ",", "name", "=", "'concat3'", ")", "\n", "\n", "conv7_1", "=", "layer", ".", "Conv3D", "(", "\n", "concat3", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv7_1\"", "\n", ")", "\n", "conv7_2", "=", "layer", ".", "Conv3D", "(", "\n", "conv7_1", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv7_2\"", "\n", ")", "\n", "\n", "deconv2", "=", "layer", ".", "Conv3DTranspose", "(", "\n", "conv7_2", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ",", "2", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ",", "1", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'deconv2'", "\n", ")", "\n", "concat2", "=", "tf", ".", "concat", "(", "[", "conv2_2", ",", "deconv2", "]", ",", "axis", "=", "-", "1", ",", "name", "=", "\"concat2\"", ")", "\n", "\n", "conv8_1", "=", "layer", ".", "Conv3D", "(", "\n", "concat2", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv8_1\"", "\n", ")", "\n", "conv8_2", "=", "layer", ".", "Conv3D", "(", "\n", "conv8_1", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv8_2\"", "\n", ")", "\n", "\n", "deconv1", "=", "layer", ".", "Conv3DTranspose", "(", "\n", "conv8_2", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ",", "2", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ",", "1", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'deconv1'", "\n", ")", "\n", "concat1", "=", "tf", ".", "concat", "(", "[", "conv1_2", ",", "deconv1", "]", ",", "axis", "=", "-", "1", ",", "name", "=", "\"concat1\"", ")", "\n", "\n", "conv9_1", "=", "layer", ".", "Conv3D", "(", "\n", "concat1", ",", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv9_1\"", "\n", ")", "\n", "conv9_2", "=", "layer", ".", "Conv3D", "(", "\n", "conv9_1", ",", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv9_2\"", "\n", ")", "\n", "\n", "logits", "=", "layer", ".", "Conv3D", "(", "\n", "conv9_2", ",", "\n", "filters", "=", "nclasses", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "batchnorm", "=", "False", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "activation", "=", "tf", ".", "identity", ",", "\n", "name", "=", "\"out_logits\"", "\n", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.model.fcn8": [[455, 674], ["utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2D", "utilities.tfwrapper.layer.Conv2DTranspose", "tensorflow.add", "utilities.tfwrapper.layer.Conv2DTranspose", "tensorflow.add", "utilities.tfwrapper.layer.Conv2DTranspose", "NotImplementedError", "tensorflow.contrib.layer.l2_regularizer", "tensorflow.layers.MaxPooling2D", "tensorflow.layers.MaxPooling2D", "tensorflow.layers.MaxPooling2D", "tensorflow.layers.MaxPooling2D", "tensorflow.layers.MaxPooling2D"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2D", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2DTranspose", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2DTranspose", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.layer.Conv2DTranspose"], ["", "def", "fcn8", "(", "input", ",", "nclasses", ",", "batchnorm", ",", "dropout_rate", ",", "l2_scale", ")", ":", "\n", "# dropout not implemented yet", "\n", "    ", "if", "dropout_rate", ">", "0.0", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Dropout not implemented for FCN8 yet\"", ")", "\n", "\n", "# create l2 regularizer", "\n", "", "if", "l2_scale", "==", "0.0", ":", "\n", "        ", "regularizer", "=", "None", "\n", "", "else", ":", "\n", "        ", "regularizer", "=", "tf", ".", "contrib", ".", "layer", ".", "l2_regularizer", "(", "scale", "=", "l2_scale", ")", "\n", "\n", "# define network", "\n", "", "conv1_1", "=", "layer", ".", "Conv2D", "(", "\n", "input", ",", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv1_1\"", "\n", ")", "\n", "conv1_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv1_1", ",", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv1_2\"", "\n", ")", "\n", "\n", "pool1", "=", "tf", ".", "layers", ".", "MaxPooling2D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool1\"", "\n", ")", "(", "conv1_2", ")", "\n", "\n", "conv2_1", "=", "layer", ".", "Conv2D", "(", "\n", "pool1", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv2_1\"", "\n", ")", "\n", "conv2_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv2_1", ",", "\n", "filters", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv2_2\"", "\n", ")", "\n", "\n", "pool2", "=", "tf", ".", "layers", ".", "MaxPooling2D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool2\"", "\n", ")", "(", "conv2_2", ")", "\n", "\n", "conv3_1", "=", "layer", ".", "Conv2D", "(", "\n", "pool2", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv3_1\"", "\n", ")", "\n", "conv3_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv3_1", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv3_2\"", "\n", ")", "\n", "conv3_3", "=", "layer", ".", "Conv2D", "(", "\n", "conv3_2", ",", "\n", "filters", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv3_3\"", "\n", ")", "\n", "\n", "pool3", "=", "tf", ".", "layers", ".", "MaxPooling2D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool3\"", "\n", ")", "(", "conv3_3", ")", "\n", "\n", "conv4_1", "=", "layer", ".", "Conv2D", "(", "\n", "pool3", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv4_1\"", "\n", ")", "\n", "conv4_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv4_1", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv4_2\"", "\n", ")", "\n", "conv4_3", "=", "layer", ".", "Conv2D", "(", "\n", "conv4_2", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv4_3\"", "\n", ")", "\n", "\n", "pool4", "=", "tf", ".", "layers", ".", "MaxPooling2D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool4\"", "\n", ")", "(", "conv4_3", ")", "\n", "\n", "conv5_1", "=", "layer", ".", "Conv2D", "(", "\n", "pool4", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv5_1\"", "\n", ")", "\n", "conv5_2", "=", "layer", ".", "Conv2D", "(", "\n", "conv5_1", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv5_2\"", "\n", ")", "\n", "conv5_3", "=", "layer", ".", "Conv2D", "(", "\n", "conv5_2", ",", "\n", "filters", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv5_3\"", "\n", ")", "\n", "\n", "pool5", "=", "tf", ".", "layers", ".", "MaxPooling2D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool5\"", "\n", ")", "(", "conv5_3", ")", "\n", "\n", "conv6", "=", "layer", ".", "Conv2D", "(", "\n", "pool5", ",", "\n", "filters", "=", "4096", ",", "\n", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv6\"", "\n", ")", "\n", "conv7", "=", "layer", ".", "Conv2D", "(", "\n", "conv6", ",", "\n", "filters", "=", "4096", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"conv7\"", "\n", ")", "\n", "\n", "score5", "=", "layer", ".", "Conv2D", "(", "\n", "conv7", ",", "\n", "filters", "=", "nclasses", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"score5\"", "\n", ")", "\n", "score4", "=", "layer", ".", "Conv2D", "(", "\n", "pool4", ",", "\n", "filters", "=", "nclasses", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"score4\"", "\n", ")", "\n", "score3", "=", "layer", ".", "Conv2D", "(", "\n", "pool3", ",", "\n", "filters", "=", "nclasses", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "\"score3\"", "\n", ")", "\n", "\n", "upscore1", "=", "layer", ".", "Conv2DTranspose", "(", "\n", "score5", ",", "\n", "filters", "=", "nclasses", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'upscore1'", "\n", ")", "\n", "\n", "sum1", "=", "tf", ".", "add", "(", "upscore1", ",", "score4", ")", "\n", "\n", "upscore2", "=", "layer", ".", "Conv2DTranspose", "(", "\n", "sum1", ",", "\n", "filters", "=", "nclasses", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'upscore2'", "\n", ")", "\n", "\n", "sum2", "=", "tf", ".", "add", "(", "upscore2", ",", "score3", ")", "\n", "\n", "logits", "=", "layer", ".", "Conv2DTranspose", "(", "\n", "sum2", ",", "\n", "filters", "=", "nclasses", ",", "\n", "kernel_size", "=", "(", "16", ",", "16", ")", ",", "\n", "strides", "=", "(", "8", ",", "8", ")", ",", "\n", "batchnorm", "=", "False", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "activation", "=", "tf", ".", "identity", ",", "\n", "name", "=", "'out_logits'", "\n", ")", "\n", "\n", "return", "logits", "\n", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.metric.categorical_dices": [[7, 61], ["metric._calculate_dice_per_img_per_cls", "range", "tensorflow.ones", "tensorflow.cast", "tensorflow.cast", "tensorflow.one_hot", "tensorflow.expand_dims", "tensorflow.clip_by_value", "tensorflow.metrics.mean", "str"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.metric._calculate_dice_per_img_per_cls"], ["def", "categorical_dices", "(", "\n", "labels", ",", "\n", "predictions", ",", "\n", "nclasses", ",", "\n", "presences", "=", "None", ",", "\n", "epsilon", "=", "1e-10", ",", "\n", "metrics_collections", "=", "None", ",", "\n", "updates_collections", "=", "None", ",", "\n", "name", "=", "None", "\n", ")", ":", "\n", "# prepare presence array", "\n", "    ", "if", "presences", "is", "None", ":", "\n", "        ", "presences", "=", "tf", ".", "ones", "(", "shape", "=", "(", "1", ",", "nclasses", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "presences", "=", "tf", ".", "cast", "(", "presences", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "presences", "=", "tf", ".", "cast", "(", "presences", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# shape: (1, nclasses) or (batchsize, nclasses)", "\n", "\n", "# calculate dice score (per image per class/category)", "\n", "", "dice_per_img_per_cls", "=", "_calculate_dice_per_img_per_cls", "(", "\n", "labels", ",", "predictions", ",", "nclasses", ",", "epsilon", "\n", ")", "\n", "# shape: (batchsize, nclasses)", "\n", "\n", "# calculate dice score (per class/category)", "\n", "dice_metrics", "=", "[", "]", "\n", "for", "cat", "in", "range", "(", "nclasses", ")", ":", "\n", "# create a mask to exclude dice of all other classes", "\n", "        ", "mask", "=", "tf", ".", "one_hot", "(", "cat", ",", "depth", "=", "nclasses", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "mask", ",", "axis", "=", "0", ")", "\n", "# shape: (1, nclasses)", "\n", "\n", "mask", "*=", "presences", "\n", "# shape: (1, nclasses) or (batchsize, nclasses)", "\n", "\n", "mask", "*=", "tf", ".", "clip_by_value", "(", "dice_per_img_per_cls", ",", "1.0", ",", "1.0", ")", "\n", "# shape: (batchsize, nclasses)", "\n", "\n", "# calculate average dice (across batch)", "\n", "metric_name", "=", "\"{:}_cat_{:02d}\"", ".", "format", "(", "\n", "str", "(", "name", "or", "'categorical_dice'", ")", ",", "cat", "\n", ")", "\n", "\n", "dice_metric", "=", "tf", ".", "metrics", ".", "mean", "(", "\n", "dice_per_img_per_cls", ",", "\n", "weights", "=", "mask", ",", "\n", "metrics_collections", "=", "metrics_collections", ",", "\n", "updates_collections", "=", "updates_collections", ",", "\n", "name", "=", "metric_name", "\n", ")", "\n", "\n", "dice_metrics", "+=", "[", "dice_metric", "]", "\n", "\n", "", "return", "dice_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.metric.average_dice": [[63, 113], ["any", "metric._calculate_dice_per_img_per_cls", "tensorflow.convert_to_tensor", "tensorflow.expand_dims", "tensorflow.metrics.mean", "len", "ValueError", "tensorflow.ones", "tensorflow.cast", "tensorflow.cast", "isinstance"], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.metric._calculate_dice_per_img_per_cls"], ["", "def", "average_dice", "(", "\n", "labels", ",", "\n", "predictions", ",", "\n", "nclasses", ",", "\n", "presences", "=", "None", ",", "\n", "weights", "=", "1.0", ",", "\n", "epsilon", "=", "1e-10", ",", "\n", "metrics_collections", "=", "None", ",", "\n", "updates_collections", "=", "None", ",", "\n", "name", "=", "None", "\n", ")", ":", "\n", "# check that weights has correct length", "\n", "    ", "if", "any", "(", "isinstance", "(", "weights", ",", "x", ")", "for", "x", "in", "[", "int", ",", "float", "]", ")", ":", "\n", "        ", "weights", "=", "[", "weights", "]", "*", "nclasses", "\n", "\n", "", "if", "len", "(", "weights", ")", "!=", "nclasses", ":", "\n", "        ", "msg", "=", "\"if weights is a list, length must be nclasses!\"", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# prepare presence array", "\n", "", "if", "presences", "is", "None", ":", "\n", "        ", "presences", "=", "tf", ".", "ones", "(", "shape", "=", "(", "1", ",", "nclasses", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "presences", "=", "tf", ".", "cast", "(", "presences", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "presences", "=", "tf", ".", "cast", "(", "presences", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# shape: (1, nclasses) or (batchsize, nclasses)", "\n", "\n", "# calculate dice score (per image per class/category)", "\n", "", "dice_per_img_per_cls", "=", "_calculate_dice_per_img_per_cls", "(", "\n", "labels", ",", "predictions", ",", "nclasses", ",", "epsilon", "\n", ")", "\n", "# shape: (batchsize, nclasses)", "\n", "\n", "# create a weightage mask with same shape as dice_per_img_per_cls", "\n", "mask", "=", "tf", ".", "convert_to_tensor", "(", "weights", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# shape: (nclasses,)", "\n", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "mask", ",", "axis", "=", "0", ")", "\n", "# shape: (1, nclasses)", "\n", "\n", "mask", "*=", "presences", "\n", "# shape: (1, nclasses) or (batchsize, nclasses)", "\n", "\n", "# calculate average dice", "\n", "return", "tf", ".", "metrics", ".", "mean", "(", "\n", "dice_per_img_per_cls", ",", "\n", "weights", "=", "mask", ",", "\n", "metrics_collections", "=", "metrics_collections", ",", "\n", "updates_collections", "=", "updates_collections", ",", "\n", "name", "=", "(", "name", "or", "'average_dice'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.metric._calculate_dice_per_img_per_cls": [[116, 133], ["tensorflow.one_hot", "tensorflow.one_hot", "range", "tuple", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.divide", "len", "tf.one_hot.get_shape"], "function", ["None"], ["", "def", "_calculate_dice_per_img_per_cls", "(", "labels", ",", "predictions", ",", "nclasses", ",", "epsilon", ")", ":", "\n", "# prepare images", "\n", "    ", "onehot_labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "nclasses", ")", "\n", "onehot_preds", "=", "tf", ".", "one_hot", "(", "predictions", ",", "depth", "=", "nclasses", ")", "\n", "\n", "# calculate dice score (per image per class/category)", "\n", "reduce_axis", "=", "range", "(", "1", ",", "len", "(", "onehot_labels", ".", "get_shape", "(", ")", ")", "-", "1", ")", "\n", "reduce_axis", "=", "tuple", "(", "reduce_axis", ")", "\n", "\n", "i", "=", "tf", ".", "reduce_sum", "(", "onehot_labels", "*", "onehot_preds", ",", "axis", "=", "reduce_axis", ")", "\n", "l", "=", "tf", ".", "reduce_sum", "(", "onehot_preds", ",", "axis", "=", "reduce_axis", ")", "\n", "r", "=", "tf", ".", "reduce_sum", "(", "onehot_labels", ",", "axis", "=", "reduce_axis", ")", "\n", "\n", "dice_per_img_per_cls", "=", "tf", ".", "divide", "(", "2", "*", "i", "+", "epsilon", ",", "(", "l", "+", "r", ")", "+", "epsilon", ")", "\n", "# shape: (batchsize, nclasses)", "\n", "\n", "return", "dice_per_img_per_cls", "\n", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.estimator.Segmenter.__init__": [[225, 227], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_fn", ",", "model_dir", "=", "None", ",", "config", "=", "None", ",", "params", "=", "None", ")", ":", "\n", "        ", "super", "(", "Segmenter", ",", "self", ")", ".", "__init__", "(", "model_fn", ",", "model_dir", ",", "config", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.estimator.Segmenter.get_eval_metrics": [[228, 262], ["tensorflow.python.framework.ops.Graph().as_default", "tensorflow.python.estimator.estimator.Segmenter._get_features_and_labels_from_input_fn", "tensorflow.python.estimator.estimator.Segmenter._call_model_fn", "tensorflow.python.ops.metrics.mean", "tensorflow.python.estimator.estimator._extract_metric_update_ops", "tensorflow.python.estimator.estimator.Segmenter._create_and_assert_global_step", "eval_dict.items", "tensorflow.python.framework.ops.Graph"], "methods", ["None"], ["", "def", "get_eval_metrics", "(", "self", ",", "input_fn", ")", ":", "\n", "        ", "with", "ops", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "g", ":", "\n", "# obtain features and labels from input_fn", "\n", "            ", "features", ",", "labels", "=", "self", ".", "_get_features_and_labels_from_input_fn", "(", "\n", "input_fn", ",", "model_fn_lib", ".", "ModeKeys", ".", "EVAL", "\n", ")", "\n", "\n", "# pass features and labels to model_fn", "\n", "# and obtain estimator_spec (eval)", "\n", "estimator_spec", "=", "self", ".", "_call_model_fn", "(", "\n", "features", ",", "labels", ",", "model_fn_lib", ".", "ModeKeys", ".", "EVAL", ",", "self", ".", "config", "\n", ")", "\n", "\n", "# add loss to estimator_spec", "\n", "estimator_spec", ".", "eval_metric_ops", "[", "model_fn_lib", ".", "LOSS_METRIC_KEY", "\n", "]", "=", "metrics_lib", ".", "mean", "(", "\n", "estimator_spec", ".", "loss", "\n", ")", "\n", "\n", "# extract eval_dict from estimator_spec", "\n", "_", ",", "eval_dict", "=", "estimator_tf_orig", ".", "_extract_metric_update_ops", "(", "\n", "estimator_spec", ".", "eval_metric_ops", "\n", ")", "\n", "\n", "# add global step to eval_dict", "\n", "global_step_tensor", "=", "self", ".", "_create_and_assert_global_step", "(", "g", ")", "\n", "eval_dict", "[", "ops", ".", "GraphKeys", ".", "GLOBAL_STEP", "]", "=", "global_step_tensor", "\n", "\n", "# extract tensor names", "\n", "eval_metrics", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "eval_dict", ".", "items", "(", ")", ":", "\n", "                ", "eval_metrics", "[", "k", "]", "=", "v", ".", "name", "\n", "\n", "", "", "return", "eval_metrics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.estimator.create_segmenter": [[17, 51], ["tensorflow.estimator.RunConfig", "estimator.Segmenter"], "function", ["None"], ["def", "create_segmenter", "(", "ds_config", ")", ":", "\n", "# create tf.estimator.RunConfig", "\n", "    ", "run_config", "=", "tf", ".", "estimator", ".", "RunConfig", "(", "\n", "model_dir", "=", "ds_config", ".", "checkpoint_path", ",", "\n", "tf_random_seed", "=", "ds_config", ".", "general_random_seed", ",", "\n", "save_summary_steps", "=", "ds_config", ".", "summary_freq_steps", ",", "\n", "save_checkpoints_steps", "=", "ds_config", ".", "checkpoint_freq_steps", ",", "\n", "keep_checkpoint_max", "=", "ds_config", ".", "checkpoint_keep_max", "\n", ")", "\n", "\n", "# wrap configurations required by estimator as dictionary", "\n", "segmenter_params", "=", "{", "}", "\n", "segmenter_params", "[", "'image_nclasses'", "]", "=", "ds_config", ".", "image_nclasses", "\n", "segmenter_params", "[", "'image_classnames'", "]", "=", "ds_config", ".", "image_classnames", "\n", "segmenter_params", "[", "'image_classweights'", "]", "=", "ds_config", ".", "image_classweights", "\n", "\n", "segmenter_params", "[", "'network_model'", "]", "=", "ds_config", ".", "network_model", "\n", "segmenter_params", "[", "'network_batchnorm'", "]", "=", "ds_config", ".", "network_batchnorm", "\n", "segmenter_params", "[", "'network_dropout'", "]", "=", "ds_config", ".", "network_dropout", "\n", "\n", "segmenter_params", "[", "'train_learning_rate'", "]", "=", "ds_config", ".", "train_learning_rate", "\n", "segmenter_params", "[", "'train_l2_reg_factor'", "]", "=", "ds_config", ".", "train_l2_reg_factor", "\n", "segmenter_params", "[", "'train_loss'", "]", "=", "ds_config", ".", "train_loss", "\n", "segmenter_params", "[", "'train_weightage_mask'", "]", "=", "ds_config", ".", "train_weightage_mask", "\n", "segmenter_params", "[", "'train_optimizer'", "]", "=", "ds_config", ".", "train_optimizer", "\n", "\n", "segmenter_params", "[", "'summary_nimages'", "]", "=", "ds_config", ".", "summary_nimages", "\n", "\n", "# create and return segmenter object", "\n", "segmenter", "=", "Segmenter", "(", "\n", "segmenter_model_fn", ",", "config", "=", "run_config", ",", "params", "=", "segmenter_params", "\n", ")", "\n", "\n", "return", "segmenter", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.estimator.segmenter_model_fn": [[53, 221], ["utilities.tfwrapper.model.create_model_from_string", "tensorflow.expand_dims", "model.create_model_from_string.", "utilities.tfwrapper.loss.create_loss_from_string", "loss.create_loss_from_string.", "tensorflow.identity", "tensorflow.identity", "utilities.tfwrapper.summary.ndim_image", "utilities.tfwrapper.summary.ndim_image", "utilities.tfwrapper.summary.ndim_image", "tensorflow.metrics.accuracy", "tensorflow.summary.scalar", "utilities.tfwrapper.summary.categorical_dices", "utilities.tfwrapper.metric.categorical_dices", "zip", "utilities.tfwrapper.summary.average_dice", "utilities.tfwrapper.metric.average_dice", "tensorflow.argmax", "tensorflow.nn.softmax", "tensorflow.estimator.EstimatorSpec", "labels.keys", "tensorflow.convert_to_tensor", "tensorflow.losses.get_regularization_loss", "utilities.tfwrapper.summary.trainables", "utilities.tfwrapper.optimizer.create_optimizer_from_string", "tensorflow.train.get_global_step", "optimizer.create_optimizer_from_string.minimize", "tensorflow.estimator.EstimatorSpec", "tensorflow.estimator.EstimatorSpec", "optimizer.create_optimizer_from_string."], "function", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.model.create_model_from_string", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.loss.create_loss_from_string", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.summary.ndim_image", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.summary.ndim_image", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.summary.ndim_image", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.metric.categorical_dices", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.metric.categorical_dices", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.metric.average_dice", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.metric.average_dice", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.summary.trainables", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.optimizer.create_optimizer_from_string"], ["", "def", "segmenter_model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ",", "config", ")", ":", "\n", "# extract required params", "\n", "    ", "nclasses", "=", "params", "[", "'image_nclasses'", "]", "\n", "classnames", "=", "params", "[", "'image_classnames'", "]", "\n", "classweights", "=", "params", "[", "'image_classweights'", "]", "\n", "\n", "model_str", "=", "params", "[", "'network_model'", "]", "\n", "batchnorm", "=", "params", "[", "'network_batchnorm'", "]", "\n", "dropout_rate", "=", "params", "[", "'network_dropout'", "]", "\n", "\n", "learning_rate", "=", "params", "[", "'train_learning_rate'", "]", "\n", "l2_scale", "=", "params", "[", "'train_l2_reg_factor'", "]", "\n", "optimizer_str", "=", "params", "[", "'train_optimizer'", "]", "\n", "loss_str", "=", "params", "[", "'train_loss'", "]", "\n", "weightmask_mode", "=", "params", "[", "'train_weightage_mask'", "]", "\n", "\n", "n_summary_images", "=", "params", "[", "'summary_nimages'", "]", "\n", "\n", "# dropout under training mode only", "\n", "if", "mode", "!=", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "        ", "dropout_rate", "=", "0.0", "\n", "\n", "# create model", "\n", "", "model_func", "=", "model", ".", "create_model_from_string", "(", "model_str", ")", "\n", "\n", "# reshape input image to desired shape", "\n", "input_img", "=", "tf", ".", "expand_dims", "(", "features", "[", "\"images\"", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# feed input image to model", "\n", "logits", "=", "model_func", "(", "\n", "input", "=", "input_img", ",", "\n", "nclasses", "=", "nclasses", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "dropout_rate", "=", "dropout_rate", ",", "\n", "l2_scale", "=", "l2_scale", "\n", ")", "\n", "\n", "# generate predictions (mode: PREDICT, EVAL)", "\n", "predictions", "=", "{", "\n", "\"labels\"", ":", "tf", ".", "argmax", "(", "input", "=", "logits", ",", "axis", "=", "-", "1", ")", ",", "\n", "# add `softmax_tensor` to graph (for PREDICT)", "\n", "\"probabilities\"", ":", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"softmax_tensor\"", ")", "\n", "}", "\n", "\n", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "PREDICT", ":", "\n", "        ", "return", "tf", ".", "estimator", ".", "EstimatorSpec", "(", "mode", "=", "mode", ",", "predictions", "=", "predictions", ")", "\n", "\n", "# create loss function (mode: TRAIN, EVAL)", "\n", "", "loss_func", "=", "loss", ".", "create_loss_from_string", "(", "loss_str", ")", "\n", "\n", "# calculate loss (mode: TRAIN, EVAL)", "\n", "loss_total", "=", "0.0", "\n", "\n", "# - loss function", "\n", "if", "(", "\"presences\"", "in", "labels", ".", "keys", "(", ")", ")", ":", "\n", "        ", "presences", "=", "tf", ".", "convert_to_tensor", "(", "labels", "[", "\"presences\"", "]", ",", "name", "=", "\"presences\"", ")", "\n", "", "else", ":", "\n", "        ", "presences", "=", "None", "\n", "\n", "", "loss_total", "+=", "loss_func", "(", "\n", "labels", "=", "labels", "[", "\"images\"", "]", ",", "\n", "logits", "=", "logits", ",", "\n", "presences", "=", "presences", ",", "\n", "weights", "=", "classweights", ",", "\n", "weightmask_mode", "=", "weightmask_mode", "\n", ")", "\n", "\n", "# - regularization", "\n", "loss_total", "+=", "tf", ".", "identity", "(", "\n", "tf", ".", "losses", ".", "get_regularization_loss", "(", ")", ",", "name", "=", "\"l2_regularization_loss\"", "\n", ")", "\n", "\n", "loss_total", "=", "tf", ".", "identity", "(", "loss_total", ",", "name", "=", "\"total_loss\"", ")", "\n", "\n", "# tf.summary: add feature image (mode: TRAIN)", "\n", "summary", ".", "ndim_image", "(", "\n", "name", "=", "'zimg'", ",", "\n", "tensor", "=", "features", "[", "\"images\"", "]", ",", "\n", "max_outputs", "=", "n_summary_images", ",", "\n", ")", "\n", "\n", "# tf.summary: add ground-truth label image (mode: TRAIN)", "\n", "summary", ".", "ndim_image", "(", "\n", "name", "=", "'gt'", ",", "\n", "tensor", "=", "labels", "[", "\"images\"", "]", ",", "\n", "min_value", "=", "0", ",", "\n", "max_value", "=", "nclasses", ",", "\n", "max_outputs", "=", "n_summary_images", ",", "\n", ")", "\n", "\n", "# tf.summary: add predicted label image (mode: TRAIN)", "\n", "summary", ".", "ndim_image", "(", "\n", "name", "=", "'pred'", ",", "\n", "tensor", "=", "predictions", "[", "\"labels\"", "]", ",", "\n", "min_value", "=", "0", ",", "\n", "max_value", "=", "nclasses", ",", "\n", "max_outputs", "=", "n_summary_images", ",", "\n", ")", "\n", "\n", "# create evaluation metrics (mode: EVAL)", "\n", "eval_metric_ops", "=", "{", "}", "\n", "\n", "# tf.summary and tf.metric: add accuracy (mode: TRAIN and EVAL)", "\n", "accuracy", "=", "tf", ".", "metrics", ".", "accuracy", "(", "\n", "labels", "=", "labels", "[", "\"images\"", "]", ",", "predictions", "=", "predictions", "[", "\"labels\"", "]", "\n", ")", "\n", "eval_metric_ops", "[", "\"classification_accuracy\"", "]", "=", "accuracy", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'classification_accuracy'", ",", "accuracy", "[", "1", "]", ")", "\n", "\n", "# tf.summary: add categorical dice scores (mode: TRAIN)", "\n", "summary", ".", "categorical_dices", "(", "\n", "labels", "=", "labels", "[", "\"images\"", "]", ",", "\n", "predictions", "=", "predictions", "[", "\"labels\"", "]", ",", "\n", "nclasses", "=", "nclasses", ",", "\n", "presences", "=", "presences", ",", "\n", "classnames", "=", "classnames", ",", "\n", ")", "\n", "\n", "# tf.metric: add categorical_dice (mode: EVAL)", "\n", "categorical_dices", "=", "metric", ".", "categorical_dices", "(", "\n", "labels", "=", "labels", "[", "\"images\"", "]", ",", "\n", "predictions", "=", "predictions", "[", "\"labels\"", "]", ",", "\n", "nclasses", "=", "nclasses", ",", "\n", "presences", "=", "presences", "\n", ")", "\n", "for", "classname", ",", "categorical_dice", "in", "zip", "(", "classnames", ",", "categorical_dices", ")", ":", "\n", "        ", "eval_metric_ops", "[", "\"dice_\"", "+", "classname", "]", "=", "categorical_dice", "\n", "\n", "# tf.summary: add average dice score (mode: TRAIN)", "\n", "", "summary", ".", "average_dice", "(", "\n", "labels", "=", "labels", "[", "\"images\"", "]", ",", "\n", "predictions", "=", "predictions", "[", "\"labels\"", "]", ",", "\n", "nclasses", "=", "nclasses", ",", "\n", "presences", "=", "presences", ",", "\n", "classnames", "=", "classnames", ",", "\n", "weights", "=", "classweights", ",", "\n", ")", "\n", "\n", "# tf.metric: add average dice score (mode: EVAL)", "\n", "average_dice", "=", "metric", ".", "average_dice", "(", "\n", "labels", "=", "labels", "[", "\"images\"", "]", ",", "\n", "predictions", "=", "predictions", "[", "\"labels\"", "]", ",", "\n", "nclasses", "=", "nclasses", ",", "\n", "presences", "=", "presences", ",", "\n", "weights", "=", "classweights", "\n", ")", "\n", "eval_metric_ops", "[", "\"dice_mean\"", "]", "=", "average_dice", "\n", "\n", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "# tf.summary: add trainable variables (mode: TRAIN)", "\n", "        ", "summary", ".", "trainables", "(", ")", "\n", "\n", "# create optimizer", "\n", "opt_class", "=", "optimizer", ".", "create_optimizer_from_string", "(", "optimizer_str", ")", "\n", "\n", "# configure Training Op (mode: TRAIN)", "\n", "global_step", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", "\n", "train_op", "=", "opt_class", "(", "learning_rate", "=", "learning_rate", ")", ".", "minimize", "(", "loss", "=", "loss_total", ",", "global_step", "=", "global_step", ")", "\n", "\n", "return", "tf", ".", "estimator", ".", "EstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "loss", "=", "loss_total", ",", "train_op", "=", "train_op", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "estimator", ".", "EstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "loss", "=", "loss_total", ",", "eval_metric_ops", "=", "eval_metric_ops", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.tfwrapper.optimizer.create_optimizer_from_string": [[7, 18], ["str().lower", "str", "ValueError"], "function", ["None"], ["def", "create_optimizer_from_string", "(", "optimizer_str", ")", ":", "\n", "    ", "optimizer_str", "=", "str", "(", "optimizer_str", ")", ".", "lower", "(", ")", "\n", "\n", "if", "optimizer_str", "in", "[", "\"adam\"", "]", ":", "\n", "        ", "return", "tf", ".", "train", ".", "AdamOptimizer", "\n", "", "elif", "optimizer_str", "in", "[", "\"rmsprop\"", ",", "\"rms-prop\"", "]", ":", "\n", "        ", "return", "tf", ".", "train", ".", "RMSPropOptimizer", "\n", "", "elif", "optimizer_str", "in", "[", "\"sgd\"", ",", "\"stochasticgradient\"", ",", "\"stochastic-gradient\"", "]", ":", "\n", "        ", "return", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown optimizer '{:}'\"", ".", "format", "(", "optimizer_str", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.__init__": [[31, 51], ["utilities.log.create_or_get_logger", "writer.HDF5Writer._logger.error", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "write_freq", "=", "10", ",", "resize_chunk", "=", "100", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "level", "=", "WRITER_LOG_LEVEL", "\n", ")", "\n", "\n", "if", "write_freq", ">", "resize_chunk", ":", "\n", "            ", "msg", "=", "\"write_freq cannot be greater than resize_chunk!\"", "\n", "self", ".", "_logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "self", ".", "_filename", "=", "path", "\n", "self", ".", "_write_freq", "=", "write_freq", "\n", "self", ".", "_resize_chunk", "=", "resize_chunk", "\n", "\n", "self", ".", "_h5file", "=", "None", "\n", "self", ".", "_datasets", "=", "{", "}", "\n", "self", ".", "_counters", "=", "{", "}", "\n", "self", ".", "_caches", "=", "{", "}", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.__enter__": [[52, 54], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.__exit__": [[55, 62], ["writer.HDF5Writer.close"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.__del__": [[63, 70], ["writer.HDF5Writer.close"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.close": [[71, 78], ["writer.HDF5Writer._close_file", "writer.HDF5Writer._caches.items", "writer.HDF5Writer._flush_dataset", "writer.HDF5Writer._prune_dataset"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer._close_file", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer._flush_dataset", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer._prune_dataset"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_h5file", "is", "not", "None", ":", "\n", "            ", "for", "k", ",", "_", "in", "self", ".", "_caches", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_flush_dataset", "(", "k", ")", "\n", "self", ".", "_prune_dataset", "(", "k", ")", "\n", "\n", "", "", "self", ".", "_close_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.create_dataset": [[79, 93], ["writer.HDF5Writer._h5file.create_dataset", "writer.HDF5Writer._open_file", "list", "list"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.create_dataset", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer._open_file"], ["", "def", "create_dataset", "(", "self", ",", "name", ",", "shape", "=", "None", ",", "dtype", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "_h5file", "is", "None", ":", "\n", "            ", "self", ".", "_open_file", "(", ")", "\n", "\n", "", "self", ".", "_datasets", "[", "name", "]", "=", "self", ".", "_h5file", ".", "create_dataset", "(", "\n", "name", ",", "\n", "shape", "=", "[", "1", "]", "+", "list", "(", "shape", ")", ",", "\n", "maxshape", "=", "[", "None", "]", "+", "list", "(", "shape", ")", ",", "\n", "dtype", "=", "dtype", ",", "\n", "data", "=", "data", "\n", ")", "\n", "\n", "self", ".", "_counters", "[", "name", "]", "=", "0", "\n", "self", ".", "_caches", "[", "name", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer.write_data": [[94, 99], ["writer.HDF5Writer._caches[].append", "len", "writer.HDF5Writer._flush_dataset"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer._flush_dataset"], ["", "def", "write_data", "(", "self", ",", "data", ",", "name", ")", ":", "\n", "        ", "self", ".", "_caches", "[", "name", "]", ".", "append", "(", "data", ")", "\n", "\n", "if", "(", "len", "(", "self", ".", "_caches", "[", "name", "]", ")", ">=", "self", ".", "_write_freq", ")", ":", "\n", "            ", "self", ".", "_flush_dataset", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer._open_file": [[100, 117], ["os.path.dirname", "h5py.File", "logger.error", "ValueError", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "", "def", "_open_file", "(", "self", ")", ":", "\n", "        ", "logger", "=", "self", ".", "_logger", "\n", "\n", "if", "(", "self", ".", "_filename", "is", "None", ")", "or", "(", "self", ".", "_filename", "==", "\"\"", ")", ":", "\n", "            ", "msg", "=", "\"Output filename must be specified prior to opening file!\"", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# create output directory if not exists", "\n", "", "_dirname", "=", "os", ".", "path", ".", "dirname", "(", "self", ".", "_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "_dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "_dirname", ")", "\n", "\n", "", "self", ".", "_h5file", "=", "h5py", ".", "File", "(", "self", ".", "_filename", ",", "\"w\"", ")", "\n", "self", ".", "_datasets", "=", "{", "}", "\n", "self", ".", "_counters", "=", "{", "}", "\n", "self", ".", "_caches", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer._close_file": [[118, 127], ["writer.HDF5Writer._h5file.close"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.close"], ["", "def", "_close_file", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_h5file", "is", "not", "None", ":", "\n", "            ", "self", ".", "_h5file", ".", "close", "(", ")", "\n", "\n", "", "self", ".", "_h5file", "=", "None", "\n", "self", ".", "_filename", "=", "\"\"", "\n", "self", ".", "_datasets", "=", "{", "}", "\n", "self", ".", "_counters", "=", "{", "}", "\n", "self", ".", "_caches", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer._prune_dataset": [[128, 141], ["msg.format.format.format", "logger.debug", "writer.HDF5Writer._datasets[].resize"], "methods", ["None"], ["", "def", "_prune_dataset", "(", "self", ",", "name", ")", ":", "\n", "        ", "logger", "=", "self", ".", "_logger", "\n", "\n", "dataset_size", "=", "self", ".", "_datasets", "[", "name", "]", ".", "shape", "\n", "prune_size", "=", "self", ".", "_counters", "[", "name", "]", "\n", "if", "dataset_size", "[", "0", "]", "<=", "prune_size", ":", "\n", "            ", "return", "\n", "\n", "", "msg", "=", "\"pruning {:} from {:} to {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "name", ",", "dataset_size", "[", "0", "]", ",", "prune_size", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "self", ".", "_datasets", "[", "name", "]", ".", "resize", "(", "prune_size", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.HDF5Writer._flush_dataset": [[142, 164], ["logger.debug", "gc.collect", "len", "writer.HDF5Writer._datasets[].resize"], "methods", ["None"], ["", "def", "_flush_dataset", "(", "self", ",", "name", ")", ":", "\n", "        ", "logger", "=", "self", ".", "_logger", "\n", "\n", "start", "=", "self", ".", "_counters", "[", "name", "]", "\n", "end", "=", "start", "+", "len", "(", "self", ".", "_caches", "[", "name", "]", ")", "\n", "if", "(", "start", "==", "end", ")", ":", "\n", "            ", "return", "\n", "\n", "", "msg", "=", "\"flushing {:} from {:} to {:}\"", ".", "format", "(", "name", ",", "start", ",", "end", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# resize dataset if too small", "\n", "current_size", "=", "self", ".", "_datasets", "[", "name", "]", ".", "shape", "\n", "if", "end", ">", "current_size", "[", "0", "]", ":", "\n", "            ", "new_size", "=", "current_size", "[", "0", "]", "+", "self", ".", "_resize_chunk", "\n", "self", ".", "_datasets", "[", "name", "]", ".", "resize", "(", "new_size", ",", "axis", "=", "0", ")", "\n", "\n", "", "self", ".", "_datasets", "[", "name", "]", "[", "start", ":", "end", ",", "...", "]", "=", "self", ".", "_caches", "[", "name", "]", "\n", "\n", "self", ".", "_counters", "[", "name", "]", "=", "end", "\n", "self", ".", "_caches", "[", "name", "]", "=", "[", "]", "\n", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.__init__": [[167, 222], ["utilities.log.create_or_get_logger", "list", "sorted", "Queue", "range", "os.listdir", "os.path.join", "threading.Thread", "threading.Thread.setDaemon", "threading.Thread.start"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "path_output", ",", "\n", "path_refnii", ",", "\n", "input_res", "=", "None", ",", "\n", "input_shape", "=", "None", ",", "\n", "slice_dim", "=", "None", ",", "\n", "nchannels", "=", "None", ",", "\n", "resample_order", "=", "0", ",", "\n", "dtype", "=", "None", ",", "\n", "async_write", "=", "True", ",", "\n", "max_async_write", "=", "3", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "_logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "level", "=", "WRITER_LOG_LEVEL", "\n", ")", "\n", "\n", "self", ".", "_dir_output", "=", "path_output", "\n", "self", ".", "_dir_refnii", "=", "path_refnii", "\n", "self", ".", "_input_res", "=", "input_res", "\n", "self", ".", "_input_shape", "=", "input_shape", "\n", "self", ".", "_slice_dim", "=", "slice_dim", "\n", "self", ".", "_nchannels", "=", "nchannels", "\n", "self", ".", "_resample_order", "=", "resample_order", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_async_write", "=", "async_write", "\n", "self", ".", "_max_async_write", "=", "max_async_write", "\n", "\n", "self", ".", "_filepath_refniis", "=", "[", "]", "\n", "for", "f", "in", "list", "(", "sorted", "(", "os", ".", "listdir", "(", "self", ".", "_dir_refnii", ")", ")", ")", ":", "\n", "            ", "self", ".", "_filepath_refniis", "+=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "_dir_refnii", ",", "f", ")", "]", "\n", "\n", "", "self", ".", "_counter_refnii", "=", "0", "\n", "self", ".", "_counter_slice", "=", "-", "1", "\n", "self", ".", "_cache", "=", "None", "\n", "self", ".", "_slicer", "=", "None", "\n", "self", ".", "_nslices", "=", "0", "\n", "self", ".", "_shape_slice", "=", "None", "\n", "self", ".", "_shape_pre_crop", "=", "None", "\n", "\n", "# create queue and background threads", "\n", "# for asynchronous writes", "\n", "self", ".", "_writequeue", "=", "None", "\n", "if", "self", ".", "_async_write", ":", "\n", "            ", "self", ".", "_writequeue", "=", "Queue", "(", "maxsize", "=", "self", ".", "_max_async_write", ")", "\n", "for", "thread_id", "in", "range", "(", "self", ".", "_max_async_write", ")", ":", "\n", "                ", "write_thread", "=", "threading", ".", "Thread", "(", "\n", "target", "=", "NiftiWriter", ".", "_async_write_worker_static", ",", "\n", "args", "=", "(", "self", ".", "_writequeue", ",", "thread_id", ")", "\n", ")", "\n", "write_thread", ".", "setDaemon", "(", "True", ")", "\n", "write_thread", ".", "start", "(", ")", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.__enter__": [[223, 225], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.__exit__": [[226, 233], ["writer.NiftiWriter.close"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.__del__": [[234, 241], ["writer.NiftiWriter.close"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.close": [[242, 257], ["writer.NiftiWriter._writequeue.join", "len", "logger.warn", "writer.NiftiWriter._writequeue.empty", "logger.info"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "logger", "=", "self", ".", "_logger", "\n", "\n", "if", "self", ".", "_async_write", ":", "\n", "            ", "if", "not", "self", ".", "_writequeue", ".", "empty", "(", ")", ":", "\n", "                ", "msg", "=", "\"waiting for writing threads to finish before closing\"", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "", "self", ".", "_writequeue", ".", "join", "(", ")", "\n", "\n", "", "if", "self", ".", "_counter_refnii", "!=", "len", "(", "self", ".", "_filepath_refniis", ")", ":", "\n", "            ", "msg", "=", "\"writer closed before all reference niis are used\"", "\n", "logger", ".", "warn", "(", "msg", ")", "\n", "\n", "", "self", ".", "_cache", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter.write_data": [[258, 287], ["numpy.reshape", "writer.NiftiWriter._prepare_next_cache", "slice", "writer.NiftiWriter._flush_cache", "tuple"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter._prepare_next_cache", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter._flush_cache"], ["", "def", "write_data", "(", "self", ",", "data", ")", ":", "\n", "# check if new cache need to be prepared", "\n", "        ", "if", "self", ".", "_counter_slice", "<", "0", ":", "\n", "            ", "self", ".", "_prepare_next_cache", "(", ")", "\n", "\n", "# write slice to cache", "\n", "", "if", "self", ".", "_slice_dim", "is", "not", "None", ":", "\n", "            ", "slice_dim", "=", "self", ".", "_slice_dim", "\n", "\n", "if", "(", "self", ".", "_nchannels", "is", "not", "None", ")", "and", "(", "slice_dim", "<", "0", ")", ":", "\n", "                ", "slice_dim", "-=", "1", "\n", "\n", "", "self", ".", "_slicer", "[", "slice_dim", "]", "=", "slice", "(", "\n", "self", ".", "_counter_slice", ",", "self", ".", "_counter_slice", "+", "1", ",", "None", "\n", ")", "\n", "\n", "", "self", ".", "_cache", "[", "tuple", "(", "self", ".", "_slicer", ")", "]", "=", "np", ".", "reshape", "(", "data", ",", "self", ".", "_shape_slice", ")", "\n", "\n", "# increment slice counter", "\n", "self", ".", "_counter_slice", "+=", "1", "\n", "\n", "# if cache is full", "\n", "# - flush cache", "\n", "# - reset counters['slice'] to -1 (handled in _flush_cache())", "\n", "# - increment counters['refnii'] by 1 (handled in _flush_cache())", "\n", "if", "self", ".", "_counter_slice", ">=", "self", ".", "_nslices", ":", "\n", "            ", "self", ".", "_flush_cache", "(", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter._prepare_next_cache": [[288, 394], ["nibabel.load", "tuple", "numpy.zeros", "msg.format.format.format", "logger.debug", "tuple", "list", "tuple", "len", "logger.error", "IndexError", "nibabel.load.get_data_dtype", "os.path.basename", "len", "len", "utilities.image.resample_image", "logger.debug", "utilities.image.crop_or_pad_image", "logger.debug", "numpy.zeros", "logger.debug", "len", "list", "enumerate", "list", "slice", "tuple"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.resample_image", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.crop_or_pad_image"], ["", "def", "_prepare_next_cache", "(", "self", ")", ":", "\n", "        ", "logger", "=", "self", ".", "_logger", "\n", "\n", "# check that current counter is not out of range", "\n", "if", "self", ".", "_counter_refnii", ">=", "len", "(", "self", ".", "_filepath_refniis", ")", ":", "\n", "            ", "msg", "=", "\"all reference niis had been used up!\"", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "IndexError", "(", "msg", ")", "\n", "\n", "# load nifti", "\n", "", "filepath_refnii", "=", "self", ".", "_filepath_refniis", "[", "self", ".", "_counter_refnii", "]", "\n", "nib_refnii", "=", "nib", ".", "load", "(", "filepath_refnii", ")", "\n", "\n", "# determine data type", "\n", "if", "self", ".", "_dtype", "is", "None", ":", "\n", "            ", "dtype", "=", "nib_refnii", ".", "get_data_dtype", "(", ")", "\n", "", "else", ":", "\n", "            ", "dtype", "=", "self", ".", "_dtype", "\n", "\n", "# determine nii shape", "\n", "", "nii_dim", "=", "nib_refnii", ".", "header", ".", "structarr", "[", "'dim'", "]", "[", "0", "]", "\n", "nii_shape", "=", "tuple", "(", "nib_refnii", ".", "header", ".", "structarr", "[", "'dim'", "]", "[", "1", ":", "(", "1", "+", "nii_dim", ")", "]", ")", "\n", "\n", "# create empty image from nii shape", "\n", "np_img", "=", "np", ".", "zeros", "(", "shape", "=", "nii_shape", ",", "dtype", "=", "dtype", ")", "\n", "# np_img = np.squeeze(np_img)", "\n", "\n", "msg", "=", "\"(shape: {:}) empty image created from {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "nii_shape", ",", "os", ".", "path", ".", "basename", "(", "filepath_refnii", ")", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# make sure slice_dim is non-negative", "\n", "slice_dim", "=", "self", ".", "_slice_dim", "\n", "if", "(", "slice_dim", "is", "not", "None", ")", "and", "(", "slice_dim", "<", "0", ")", ":", "\n", "            ", "slice_dim", "+=", "len", "(", "np_img", ".", "shape", ")", "\n", "\n", "# pre-process array to get correct shape", "\n", "# (1) resample to match input_res (if specified)", "\n", "", "if", "self", ".", "_input_res", "is", "not", "None", ":", "\n", "# obtain image resolution from nifti headers", "\n", "            ", "ndim", "=", "len", "(", "np_img", ".", "shape", ")", "\n", "nii_res", "=", "nib_refnii", ".", "header", ".", "structarr", "[", "'pixdim'", "]", "[", "1", ":", "(", "1", "+", "ndim", ")", "]", "\n", "\n", "# resample image", "\n", "np_img", "=", "utilities", ".", "image", ".", "resample_image", "(", "\n", "img_original", "=", "np_img", ",", "\n", "res_original", "=", "nii_res", ",", "\n", "res_target", "=", "self", ".", "_input_res", ",", "\n", "order", "=", "0", "\n", ")", "\n", "\n", "msg", "=", "\"(shape: {:}) resampled empty image\"", ".", "format", "(", "np_img", ".", "shape", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# (2) crop or pad image to match input_shape (if specified)", "\n", "", "self", ".", "_shape_pre_crop", "=", "tuple", "(", "np_img", ".", "shape", ")", "\n", "if", "self", ".", "_input_shape", "is", "not", "None", ":", "\n", "# determine desired image shape", "\n", "            ", "size_target", "=", "self", ".", "_input_shape", "\n", "\n", "if", "slice_dim", "is", "not", "None", ":", "\n", "                ", "size_target", "=", "list", "(", "np_img", ".", "shape", ")", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "size_target", ")", ":", "\n", "                    ", "if", "i", "<", "slice_dim", ":", "\n", "                        ", "size_target", "[", "i", "]", "=", "self", ".", "_input_shape", "[", "i", "]", "\n", "", "elif", "i", ">", "slice_dim", ":", "\n", "                        ", "size_target", "[", "i", "]", "=", "self", ".", "_input_shape", "[", "i", "-", "1", "]", "\n", "\n", "# crop or pad image to desired image shape", "\n", "", "", "", "np_img", "=", "utilities", ".", "image", ".", "crop_or_pad_image", "(", "\n", "img_original", "=", "np_img", ",", "size_target", "=", "size_target", "\n", ")", "\n", "\n", "msg", "=", "\"(shape: {:}) cropped empty image\"", ".", "format", "(", "np_img", ".", "shape", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# expand dimension if nchannels is not None", "\n", "", "if", "self", ".", "_nchannels", "is", "not", "None", ":", "\n", "            ", "np_img_shape", "=", "list", "(", "np_img", ".", "shape", ")", "+", "[", "self", ".", "_nchannels", "]", "\n", "np_img", "=", "np", ".", "zeros", "(", "shape", "=", "tuple", "(", "np_img_shape", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n", "msg", "=", "\"(shape: {:}) expanded empty image\"", ".", "format", "(", "np_img", ".", "shape", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# store empty image in cache", "\n", "", "self", ".", "_cache", "=", "np_img", "\n", "\n", "# prepare slicer", "\n", "self", ".", "_slicer", "=", "[", "slice", "(", "None", ")", "]", "*", "len", "(", "np_img", ".", "shape", ")", "\n", "\n", "# determine shape of each slice", "\n", "self", ".", "_shape_slice", "=", "list", "(", "np_img", ".", "shape", ")", "\n", "if", "slice_dim", "is", "not", "None", ":", "\n", "            ", "self", ".", "_shape_slice", "[", "slice_dim", "]", "=", "1", "\n", "", "self", ".", "_shape_slice", "=", "tuple", "(", "self", ".", "_shape_slice", ")", "\n", "\n", "# determine nslice", "\n", "if", "slice_dim", "is", "not", "None", ":", "\n", "            ", "self", ".", "_nslices", "=", "np_img", ".", "shape", "[", "slice_dim", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_nslices", "=", "1", "\n", "\n", "# reset counters", "\n", "", "self", ".", "_counter_slice", "=", "0", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter._flush_cache": [[395, 437], ["gc.collect", "os.path.exists", "os.makedirs", "writer.NiftiWriter._cache.copy", "writer.NiftiWriter._writequeue.put", "msg.format.format.format", "logger.info", "writer.NiftiWriter._write_nii_static", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter._write_nii_static"], ["", "def", "_flush_cache", "(", "self", ")", ":", "\n", "        ", "logger", "=", "self", ".", "_logger", "\n", "\n", "# obtain path to reference nii", "\n", "filepath_refnii", "=", "self", ".", "_filepath_refniis", "[", "self", ".", "_counter_refnii", "]", "\n", "\n", "# create output directory if not exists", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "_dir_output", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "_dir_output", ")", "\n", "\n", "# write nii", "\n", "", "write_kwargs", "=", "{", "}", "\n", "write_kwargs", "[", "'dir_output'", "]", "=", "self", ".", "_dir_output", "\n", "write_kwargs", "[", "'filepath_refnii'", "]", "=", "filepath_refnii", "\n", "write_kwargs", "[", "'shape_pre_crop'", "]", "=", "self", ".", "_shape_pre_crop", "\n", "write_kwargs", "[", "'slice_dim'", "]", "=", "self", ".", "_slice_dim", "\n", "write_kwargs", "[", "'nchannels'", "]", "=", "self", ".", "_nchannels", "\n", "write_kwargs", "[", "'resample_order'", "]", "=", "self", ".", "_resample_order", "\n", "write_kwargs", "[", "'dtype'", "]", "=", "self", ".", "_dtype", "\n", "\n", "if", "self", ".", "_async_write", ":", "\n", "            ", "write_kwargs", "[", "'np_img'", "]", "=", "self", ".", "_cache", ".", "copy", "(", ")", "\n", "self", ".", "_writequeue", ".", "put", "(", "write_kwargs", ")", "\n", "\n", "msg", "=", "\"added {:} to to asynchronous writing queue\"", "\n", "msg", "=", "msg", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "filepath_refnii", ")", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "write_kwargs", "[", "'np_img'", "]", "=", "self", ".", "_cache", "\n", "NiftiWriter", ".", "_write_nii_static", "(", "logger", "=", "logger", ",", "**", "write_kwargs", ")", "\n", "\n", "# invalidate counter_slice", "\n", "", "self", ".", "_counter_slice", "=", "-", "1", "\n", "\n", "# increment counter_refnii", "\n", "self", ".", "_counter_refnii", "+=", "1", "\n", "\n", "# empty cache and gc", "\n", "self", ".", "_cache", "=", "None", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter._async_write_worker_static": [[438, 449], ["utilities.log.create_or_get_logger", "q.get", "writer.NiftiWriter._write_nii_static", "q.task_done"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter._write_nii_static"], ["", "@", "staticmethod", "\n", "def", "_async_write_worker_static", "(", "q", ",", "threadid", ")", ":", "\n", "        ", "logger_name", "=", "\"NiftiWriter_thd{:}\"", ".", "format", "(", "threadid", ")", "\n", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", "logger_name", ",", "level", "=", "\"DEBUG\"", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "write_kwargs", "=", "q", ".", "get", "(", ")", "\n", "NiftiWriter", ".", "_write_nii_static", "(", "logger", "=", "logger", ",", "**", "write_kwargs", ")", "\n", "\n", "q", ".", "task_done", "(", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.writer.NiftiWriter._write_nii_static": [[450, 534], ["msg.format.format.format", "logger.info", "nibabel.load", "utilities.image.resize_image.astype", "os.path.basename", "os.path.join", "nibabel.Nifti1Image().to_filename", "msg.format.format.format", "logger.info", "os.path.basename", "tuple", "tuple", "logger.debug", "utilities.image.inverse_crop_or_pad_image", "logger.debug", "logger.debug", "utilities.image.resize_image", "logger.debug", "nibabel.load.get_data_dtype", "os.path.basename", "nibabel.Nifti1Image", "list", "list", "tuple"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.inverse_crop_or_pad_image", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.resize_image"], ["", "@", "staticmethod", "\n", "def", "_write_nii_static", "(", "\n", "np_img", ",", "\n", "dir_output", ",", "\n", "filepath_refnii", ",", "\n", "shape_pre_crop", ",", "\n", "slice_dim", ",", "\n", "nchannels", ",", "\n", "resample_order", ",", "\n", "dtype", ",", "\n", "logger", ",", "\n", ")", ":", "\n", "# starttime = time.time()", "\n", "        ", "msg", "=", "\"processing and writing to {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "filepath_refnii", ")", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "# load reference nifti", "\n", "nib_refnii", "=", "nib", ".", "load", "(", "filepath_refnii", ")", "\n", "\n", "# extract nifti info", "\n", "nii_dim", "=", "nib_refnii", ".", "header", ".", "structarr", "[", "'dim'", "]", "[", "0", "]", "\n", "\n", "nii_shape", "=", "nib_refnii", ".", "header", ".", "structarr", "[", "'dim'", "]", "[", "1", ":", "1", "+", "nii_dim", "]", "\n", "nii_affine", "=", "nib_refnii", ".", "affine", "\n", "\n", "# modify nifti info if nchannels is not None", "\n", "if", "nchannels", "is", "not", "None", ":", "\n", "            ", "nii_output_shape", "=", "tuple", "(", "list", "(", "nii_shape", ")", "+", "[", "nchannels", "]", ")", "\n", "", "else", ":", "\n", "            ", "nii_output_shape", "=", "tuple", "(", "nii_shape", ")", "\n", "\n", "# reverse pre-processings to get correct shape", "\n", "# (1) undo crop or pad", "\n", "", "if", "shape_pre_crop", "is", "not", "None", ":", "\n", "            ", "msg", "=", "\"(shape: {:}) uncropping image\"", ".", "format", "(", "np_img", ".", "shape", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "if", "nchannels", "is", "not", "None", ":", "\n", "                ", "_size_original", "=", "list", "(", "shape_pre_crop", ")", "+", "[", "nchannels", "]", "\n", "", "else", ":", "\n", "                ", "_size_original", "=", "shape_pre_crop", "\n", "\n", "", "np_img", "=", "utilities", ".", "image", ".", "inverse_crop_or_pad_image", "(", "\n", "img_target", "=", "np_img", ",", "\n", "size_original", "=", "tuple", "(", "_size_original", ")", ",", "\n", ")", "\n", "\n", "msg", "=", "\"(shape: {:}) uncropped image\"", ".", "format", "(", "np_img", ".", "shape", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# (2) undo resample", "\n", "", "if", "np_img", ".", "shape", "!=", "nii_output_shape", ":", "\n", "            ", "msg", "=", "\"(shape: {:}) resizing image\"", ".", "format", "(", "np_img", ".", "shape", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "np_img", "=", "utilities", ".", "image", ".", "resize_image", "(", "\n", "np_img", ",", "\n", "nii_output_shape", ",", "\n", "order", "=", "resample_order", ",", "\n", ")", "\n", "\n", "msg", "=", "\"(shape: {:}) resized image\"", ".", "format", "(", "np_img", ".", "shape", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# cast type", "\n", "", "if", "dtype", "is", "None", ":", "\n", "            ", "dtype", "=", "nib_refnii", ".", "get_data_dtype", "(", ")", "\n", "\n", "", "np_img", "=", "np_img", ".", "astype", "(", "dtype", ")", "\n", "\n", "# write nifti", "\n", "filename_outnii", "=", "os", ".", "path", ".", "basename", "(", "filepath_refnii", ")", "\n", "filename_outnii", "=", "os", ".", "path", ".", "join", "(", "dir_output", ",", "filename_outnii", ")", "\n", "\n", "nib", ".", "Nifti1Image", "(", "np_img", ",", "nii_affine", ")", ".", "to_filename", "(", "filename_outnii", ")", "\n", "\n", "# endtime = time.time()", "\n", "msg", "=", "\"finished writing to {:}\"", "\n", "msg", "=", "msg", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "filepath_refnii", ")", ")", "\n", "# msg += \"; time taken: {:.2f} seconds\".format(endtime - starttime)", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.HDF5Generator.__init__": [[24, 103], ["utilities.log.create_or_get_logger", "str", "os.path.exists", "utilities.log.create_or_get_logger.error", "FileNotFoundError", "utilities.log.create_or_get_logger.error", "ValueError", "h5py.File", "utilities.log.create_or_get_logger.info", "utilities.log.create_or_get_logger.info", "utilities.log.create_or_get_logger.debug", "list", "utilities.log.create_or_get_logger.info", "list", "utilities.log.create_or_get_logger.info", "utilities.log.create_or_get_logger.info", "list", "str().ljust", "str", "hf.keys", "utilities.log.create_or_get_logger.debug", "utilities.log.create_or_get_logger.info", "hf.keys", "utilities.log.create_or_get_logger.error", "ValueError", "len", "utilities.log.create_or_get_logger.error", "ValueError", "utilities.log.create_or_get_logger.error", "ValueError", "str", "str", "str", "str", "list", "utilities.log.create_or_get_logger.error", "ValueError", "set", "str", "hf.keys", "abs", "len", "len", "str().ljust", "str().ljust", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "keys", "=", "None", ",", "slice_dim", "=", "0", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "level", "=", "READER_LOG_LEVEL", "\n", ")", "\n", "\n", "self", ".", "_filename", "=", "str", "(", "path", ")", "\n", "self", ".", "_keys", "=", "keys", "\n", "self", ".", "_slice_dim", "=", "slice_dim", "\n", "self", ".", "_shuffle", "=", "shuffle", "\n", "\n", "# basic checks", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "_filename", ")", ":", "\n", "            ", "msg", "=", "'does not exist: '", "+", "self", ".", "_filename", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "FileNotFoundError", "(", "msg", ")", "\n", "\n", "", "if", "self", ".", "_keys", "is", "None", ":", "\n", "            ", "msg", "=", "'\"keys\" must be specified!'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "with", "h5py", ".", "File", "(", "self", ".", "_filename", ",", "'r'", ")", "as", "hf", ":", "\n", "# log specified parameters and hdf5 file info", "\n", "            ", "logger", ".", "info", "(", "\"specified hdf5 file:\"", ")", "\n", "\n", "msg", "=", "\"  \"", "+", "str", "(", "\"filename\"", ")", ".", "ljust", "(", "16", ")", "\n", "msg", "+=", "\" - \"", "+", "str", "(", "self", ".", "_filename", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "logger", ".", "debug", "(", "\"existing keys in specified hdf5 file:\"", ")", "\n", "for", "k", "in", "list", "(", "hf", ".", "keys", "(", ")", ")", ":", "\n", "                ", "msg", "=", "\"  \"", "+", "str", "(", "k", ")", ".", "ljust", "(", "16", ")", "+", "\" - \"", "+", "str", "(", "hf", "[", "k", "]", ".", "shape", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"specified keys:\"", ")", "\n", "for", "k", "in", "list", "(", "self", ".", "_keys", ")", ":", "\n", "                ", "msg", "=", "\"  \"", "+", "str", "(", "k", ")", ".", "ljust", "(", "16", ")", "+", "\" - \"", "+", "str", "(", "hf", "[", "k", "]", ".", "shape", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"slice dimension: \"", "+", "str", "(", "self", ".", "_slice_dim", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"shuffle data: \"", "+", "str", "(", "self", ".", "_shuffle", ")", ")", "\n", "\n", "# check that all specified keys exist", "\n", "for", "k", "in", "list", "(", "hf", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "k", "not", "in", "list", "(", "hf", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "msg", "=", "\"  \"", "+", "'key \"'", "+", "str", "(", "k", ")", "+", "'\" not found in hdf5 file!'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# check that slicing dimension is valid", "\n", "", "", "sd_isvalid", "=", "True", "\n", "for", "k", "in", "self", ".", "_keys", ":", "\n", "                ", "if", "self", ".", "_slice_dim", "<", "0", ":", "\n", "                    ", "sd_isvalid", "&=", "(", "abs", "(", "self", ".", "_slice_dim", ")", "<=", "len", "(", "hf", "[", "k", "]", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "                    ", "sd_isvalid", "&=", "(", "self", ".", "_slice_dim", "<", "len", "(", "hf", "[", "k", "]", ".", "shape", ")", ")", "\n", "\n", "", "", "if", "not", "sd_isvalid", ":", "\n", "                ", "msg", "=", "'invalid slice dimension specified!'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# check that datasets has same size in the slicing dimension", "\n", "", "nslices", "=", "[", "hf", "[", "k", "]", ".", "shape", "[", "self", ".", "_slice_dim", "]", "for", "k", "in", "self", ".", "_keys", "]", "\n", "if", "len", "(", "set", "(", "nslices", ")", ")", "!=", "1", ":", "\n", "                ", "msg", "=", "'specified keys correspond to datasets '", "\n", "msg", "+=", "'with different size in first dimension!'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# check that datasets are not empty", "\n", "", "if", "nslices", "[", "0", "]", "==", "0", ":", "\n", "                ", "msg", "=", "'check that specified datasets are not empty'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# store size in slice dimension as class attribute", "\n", "", "self", ".", "_nslice", "=", "nslices", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.HDF5Generator.__call__": [[104, 130], ["h5py.File", "list", "random.shuffle", "range", "len", "range", "slice", "numpy.squeeze", "tuple", "slice", "tuple"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "self", ".", "_filename", ",", "'r'", ")", "as", "hf", ":", "\n", "# prepare slicers", "\n", "            ", "slicers", "=", "{", "}", "\n", "for", "k", "in", "self", ".", "_keys", ":", "\n", "                ", "slicers", "[", "k", "]", "=", "[", "slice", "(", "None", ")", "]", "*", "len", "(", "hf", "[", "k", "]", ".", "shape", ")", "\n", "\n", "# shuffle slice sequence if needed", "\n", "", "if", "self", ".", "_shuffle", ":", "\n", "                ", "slice_indexes", "=", "list", "(", "range", "(", "self", ".", "_nslice", ")", ")", "\n", "random", ".", "shuffle", "(", "slice_indexes", ")", "\n", "", "else", ":", "\n", "                ", "slice_indexes", "=", "range", "(", "self", ".", "_nslice", ")", "\n", "\n", "# loop through slices", "\n", "", "for", "islice", "in", "slice_indexes", ":", "\n", "# modify slicer for slice dimension", "\n", "                ", "for", "k", "in", "self", ".", "_keys", ":", "\n", "                    ", "slicers", "[", "k", "]", "[", "self", ".", "_slice_dim", "]", "=", "slice", "(", "islice", ",", "islice", "+", "1", ")", "\n", "\n", "# extract slice and yield", "\n", "", "s", "=", "[", "\n", "np", ".", "squeeze", "(", "hf", "[", "k", "]", "[", "tuple", "(", "slicers", "[", "k", "]", ")", "]", ",", "axis", "=", "self", ".", "_slice_dim", ")", "\n", "for", "k", "in", "self", ".", "_keys", "\n", "]", "\n", "yield", "tuple", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.HDF5Generator.get_length": [[131, 133], ["None"], "methods", ["None"], ["", "", "", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_nslice", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.HDF5Generator.get_dataset_shapes": [[134, 144], ["h5py.File", "hf.keys", "list", "list.pop", "tuple"], "methods", ["None"], ["", "def", "get_dataset_shapes", "(", "self", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "self", ".", "_filename", ",", "'r'", ")", "as", "hf", ":", "\n", "            ", "shapes", "=", "{", "}", "\n", "for", "k", "in", "hf", ".", "keys", "(", ")", ":", "\n", "                ", "_shape", "=", "list", "(", "hf", "[", "k", "]", ".", "shape", ")", "\n", "_shape", ".", "pop", "(", "self", ".", "_slice_dim", ")", "\n", "\n", "shapes", "[", "k", "]", "=", "tuple", "(", "_shape", ")", "\n", "\n", "", "", "return", "shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.InterleavedGenerator.__init__": [[147, 201], ["utilities.log.create_or_get_logger", "isinstance", "utilities.log.create_or_get_logger.error", "ValueError", "len", "len", "utilities.log.create_or_get_logger.error", "ValueError", "generator.get_dataset_shapes", "generator.get_dataset_shapes.keys", "len", "isinstance", "utilities.log.create_or_get_logger.error", "ValueError", "generator.get_dataset_shapes", "numpy.array", "numpy.array", "generator.get_dataset_shapes.keys", "utilities.log.create_or_get_logger.error", "ValueError", "utilities.log.create_or_get_logger.error", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.get_dataset_shapes", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.get_dataset_shapes"], ["    ", "def", "__init__", "(", "self", ",", "generators", ",", "block_lengths", "=", "None", ",", "cyclic", "=", "False", ")", ":", "\n", "        ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "level", "=", "READER_LOG_LEVEL", "\n", ")", "\n", "\n", "# make sure generators is a list", "\n", "if", "not", "isinstance", "(", "generators", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "msg", "=", "'generators must be a list'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# make sure block length is a list with same length as generators", "\n", "", "if", "block_lengths", "is", "None", ":", "\n", "            ", "block_lengths", "=", "[", "1", "]", "*", "len", "(", "generators", ")", "\n", "", "elif", "not", "isinstance", "(", "block_lengths", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "msg", "=", "'block_lengths must be a list'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "if", "len", "(", "block_lengths", ")", "!=", "len", "(", "generators", ")", ":", "\n", "            ", "msg", "=", "'block_lengths must be a list with same length as generators'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# make sure all dataset shapes are the same", "\n", "", "dataset_shapes", "=", "None", "\n", "for", "generator", "in", "generators", ":", "\n", "            ", "if", "dataset_shapes", "is", "None", ":", "\n", "                ", "dataset_shapes", "=", "generator", ".", "get_dataset_shapes", "(", ")", "\n", "continue", "\n", "\n", "# get shapes of current generator's datasets", "\n", "", "current_dataset_shapes", "=", "generator", ".", "get_dataset_shapes", "(", ")", "\n", "\n", "# loop over dataset (i.e. keys)", "\n", "for", "k", "in", "dataset_shapes", ".", "keys", "(", ")", ":", "\n", "# check that the same dataset exist in the current generator", "\n", "                ", "if", "k", "not", "in", "current_dataset_shapes", ".", "keys", "(", ")", ":", "\n", "                    ", "msg", "=", "'mismatched datasets between generator'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# check that shape is same as first generator", "\n", "", "current_dataset_shape", "=", "np", ".", "array", "(", "current_dataset_shapes", "[", "k", "]", ")", "\n", "dataset_shape", "=", "np", ".", "array", "(", "dataset_shapes", "[", "k", "]", ")", "\n", "\n", "if", "not", "(", "current_dataset_shape", "==", "dataset_shape", ")", ".", "all", "(", ")", ":", "\n", "                    ", "msg", "=", "'mismatched dataset shapes between generator'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "", "", "self", ".", "_generators", "=", "generators", "\n", "self", ".", "_block_lengths", "=", "block_lengths", "\n", "self", ".", "_cyclic", "=", "cyclic", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.InterleavedGenerator.__call__": [[202, 267], ["utilities.log.create_or_get_logger", "utilities.log.create_or_get_logger.warn", "StopIteration", "g", "g.get_length", "len", "len", "all", "range", "len", "range", "utilities.log.create_or_get_logger.debug", "all", "next", "next", "generators[].get_length", "next"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.get_length", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.get_length"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "# store class attributes as local variables", "\n", "generators", "=", "self", ".", "_generators", "\n", "block_lengths", "=", "self", ".", "_block_lengths", "\n", "cyclic", "=", "self", ".", "_cyclic", "\n", "\n", "# initializing iterators and related class attributes", "\n", "iterators", "=", "[", "g", "(", ")", "for", "g", "in", "generators", "]", "\n", "iterators_size", "=", "[", "g", ".", "get_length", "(", ")", "for", "g", "in", "generators", "]", "\n", "iterators_pos", "=", "[", "0", "]", "*", "len", "(", "generators", ")", "\n", "iterators_finished", "=", "[", "False", "]", "*", "len", "(", "generators", ")", "\n", "\n", "while", "not", "all", "(", "finished", "for", "finished", "in", "iterators_finished", ")", ":", "\n", "# loop over iterators", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "iterators", ")", ")", ":", "\n", "# skip iterator if finished and cyclic is false", "\n", "                ", "if", "iterators_finished", "[", "i", "]", "and", "not", "cyclic", ":", "\n", "                    ", "continue", "\n", "\n", "# make block_lengths[i] yields with iterator", "\n", "", "for", "j", "in", "range", "(", "block_lengths", "[", "i", "]", ")", ":", "\n", "                    ", "if", "iterators_pos", "[", "i", "]", "<", "iterators_size", "[", "i", "]", ":", "\n", "# iterator has not reached its end; yield", "\n", "                        ", "iterators_pos", "[", "i", "]", "+=", "1", "\n", "yield", "next", "(", "iterators", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "# iterator has reached its end", "\n", "                        ", "iterators_finished", "[", "i", "]", "=", "True", "\n", "\n", "msg", "=", "\"generator{:} depleted\"", ".", "format", "(", "i", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "if", "all", "(", "finished", "for", "finished", "in", "iterators_finished", ")", ":", "\n", "# all iterators have finished, raise StopIteration", "\n", "# or GeneratorExit with another yield", "\n", "                            ", "yield", "next", "(", "iterators", "[", "i", "]", ")", "\n", "", "elif", "(", "cyclic", ")", ":", "\n", "# not all iterators have finished,", "\n", "# and cyclic is true;", "\n", "# create new iterator and yield", "\n", "                            ", "iterators", "[", "i", "]", "=", "generators", "[", "i", "]", "(", ")", "\n", "iterators_size", "[", "i", "]", "=", "generators", "[", "i", "]", ".", "get_length", "(", ")", "\n", "iterators_pos", "[", "i", "]", "=", "0", "\n", "\n", "iterators_pos", "[", "i", "]", "+=", "1", "\n", "yield", "next", "(", "iterators", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "# not all iterators have finished,", "\n", "# and cyclic is false;", "\n", "# break to move on to another iterator", "\n", "\n", "# try:", "\n", "#     next(iterators[i])", "\n", "# except:", "\n", "#     msg = \"generator{} depleted\".format(i)", "\n", "#     logger.debug(msg)", "\n", "\n", "                            ", "iterators", "[", "i", "]", "=", "None", "# release memory", "\n", "break", "\n", "\n", "# default fallback; should never reach this line", "\n", "", "", "", "", "", "logger", ".", "warn", "(", "\"reached forbidden line of code!\"", ")", "\n", "raise", "StopIteration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.InterleavedGenerator.get_length": [[268, 274], ["utilities.log.create_or_get_logger", "utilities.log.create_or_get_logger.error", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger"], ["", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "msg", "=", "\"get_length() not supported by InterleavedGenerator!\"", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "NotImplementedError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.InterleavedGenerator.get_dataset_shapes": [[275, 279], ["reader.InterleavedGenerator._generators[].get_dataset_shapes"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.get_dataset_shapes"], ["", "def", "get_dataset_shapes", "(", "self", ")", ":", "\n", "# all generators have same dataset_shapes (as checked in __init__)", "\n", "# hence, just use first generator", "\n", "        ", "return", "self", ".", "_generators", "[", "0", "]", ".", "get_dataset_shapes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.__init__": [[282, 370], ["utilities.log.create_or_get_logger", "str", "os.path.exists", "utilities.log.create_or_get_logger.error", "FileNotFoundError", "isinstance", "int", "isinstance", "utilities.log.create_or_get_logger.error", "ValueError", "len", "len", "isinstance", "isinstance", "utilities.log.create_or_get_logger.error", "ValueError", "list", "enumerate", "tuple", "isinstance", "utilities.log.create_or_get_logger.error", "ValueError", "tuple", "str", "os.path.join", "int", "utilities.log.create_or_get_logger.error", "ValueError", "int", "os.path.exists", "utilities.log.create_or_get_logger.error", "FileNotFoundError", "len", "len", "utilities.log.create_or_get_logger.error", "ValueError", "int", "float"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "path", ",", "\n", "keys", "=", "None", ",", "\n", "resample_orders", "=", "None", ",", "\n", "output_res", "=", "None", ",", "\n", "output_shape", "=", "None", ",", "\n", "slice_dim", "=", "None", ",", "\n", "shuffle", "=", "False", "\n", ")", ":", "\n", "        ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "level", "=", "READER_LOG_LEVEL", "\n", ")", "\n", "\n", "self", ".", "_path", "=", "str", "(", "path", ")", "\n", "self", ".", "_keys", "=", "keys", "\n", "self", ".", "_resample_orders", "=", "resample_orders", "\n", "self", ".", "_output_res", "=", "output_res", "\n", "self", ".", "_output_shape", "=", "output_shape", "\n", "self", ".", "_slice_dim", "=", "slice_dim", "\n", "self", ".", "_shuffle", "=", "shuffle", "\n", "\n", "# basic checks", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "_path", ")", ":", "\n", "            ", "msg", "=", "'does not exist: '", "+", "self", ".", "_path", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "FileNotFoundError", "(", "msg", ")", "\n", "\n", "", "if", "self", ".", "_keys", "is", "None", ":", "\n", "            ", "self", ".", "_keys", "=", "[", "'.'", "]", "\n", "", "elif", "not", "isinstance", "(", "self", ".", "_keys", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "msg", "=", "'keys must be a list or a tuple'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_keys", "=", "[", "str", "(", "s", ")", "for", "s", "in", "self", ".", "_keys", "]", "\n", "\n", "for", "key", "in", "self", ".", "_keys", ":", "\n", "                ", "subdir_fullpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_path", ",", "key", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "subdir_fullpath", ")", ":", "\n", "                    ", "msg", "=", "'does not exist: '", "+", "subdir_fullpath", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "FileNotFoundError", "(", "msg", ")", "\n", "\n", "", "", "", "if", "self", ".", "_resample_orders", "is", "None", ":", "\n", "            ", "self", ".", "_resample_orders", "=", "[", "0", "]", "*", "len", "(", "self", ".", "_keys", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "_resample_orders", ",", "(", "int", ",", "str", ")", ")", ":", "\n", "            ", "self", ".", "_resample_orders", "=", "[", "int", "(", "self", ".", "_resample_orders", ")", "]", "\n", "self", ".", "_resample_orders", "*=", "len", "(", "self", ".", "_keys", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "_resample_orders", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "_resample_orders", ")", "!=", "len", "(", "self", ".", "_keys", ")", ":", "\n", "                ", "msg", "=", "'resample_orders must be same length as keys!'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "self", ".", "_resample_orders", "=", "[", "int", "(", "i", ")", "for", "i", "in", "self", ".", "_resample_orders", "]", "\n", "", "else", ":", "\n", "            ", "msg", "=", "'resample_orders must either be a list/tuple '", "\n", "msg", "+=", "'or an integer'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "if", "self", ".", "_output_res", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "self", ".", "_output_res", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "msg", "=", "'output_res must be a list or a tuple'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_output_res", "=", "list", "(", "self", ".", "_output_res", ")", "\n", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "self", ".", "_output_res", ")", ":", "\n", "                    ", "if", "self", ".", "_output_res", "[", "i", "]", "is", "not", "None", ":", "\n", "                        ", "self", ".", "_output_res", "[", "i", "]", "=", "float", "(", "self", ".", "_output_res", "[", "i", "]", ")", "\n", "\n", "", "", "self", ".", "_output_res", "=", "tuple", "(", "self", ".", "_output_res", ")", "\n", "\n", "", "", "if", "self", ".", "_output_shape", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "self", ".", "_output_shape", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "msg", "=", "'output_shape must be a list or a tuple'", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_output_shape", "=", "[", "int", "(", "s", ")", "for", "s", "in", "self", ".", "_output_shape", "]", "\n", "self", ".", "_output_shape", "=", "tuple", "(", "self", ".", "_output_shape", ")", "\n", "\n", "", "", "if", "self", ".", "_slice_dim", "is", "not", "None", ":", "\n", "            ", "self", ".", "_slice_dim", "=", "int", "(", "self", ".", "_slice_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.__call__": [[371, 512], ["utilities.log.create_or_get_logger", "list", "os.path.join", "sorted", "nii_key_lists.append", "zip", "random.shuffle", "utilities.log.create_or_get_logger.info", "enumerate", "range", "os.listdir", "os.path.join", "os.path.basename", "len", "utilities.log.create_or_get_logger.error", "ValueError", "os.path.basename", "nibabel.load", "nib_img.get_data", "msg.format.format.format", "utilities.log.create_or_get_logger.debug", "enumerate", "enumerate", "len", "utilities.log.create_or_get_logger.error", "ValueError", "len", "list", "random.shuffle", "slice", "set", "msg.format.format.format", "utilities.log.create_or_get_logger.debug", "len", "utilities.image.resample_image", "msg.format.format.format", "utilities.log.create_or_get_logger.debug", "msg.format.format.format", "utilities.log.create_or_get_logger.debug", "list", "enumerate", "utilities.image.crop_or_pad_image", "msg.format.format.format", "utilities.log.create_or_get_logger.debug", "set", "slice", "numpy.squeeze", "tuple", "len", "tuple"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.resample_image", "home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.image.crop_or_pad_image"], ["", "", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "# prepare a 2D list of fullpaths to nii, i.e.:", "\n", "# [", "\n", "#    [path_key0_nii0, path_key0_nii1, ...],", "\n", "#    [path_key1_nii0, path_key1_nii1, ...],", "\n", "#    ...", "\n", "# ]", "\n", "nii_key_lists", "=", "[", "]", "\n", "for", "key", "in", "self", ".", "_keys", ":", "\n", "            ", "dir_nii", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_path", ",", "key", ")", "\n", "\n", "nii_list", "=", "sorted", "(", "os", ".", "listdir", "(", "dir_nii", ")", ")", "\n", "nii_list", "=", "[", "os", ".", "path", ".", "join", "(", "dir_nii", ",", "nii", ")", "for", "nii", "in", "nii_list", "]", "\n", "\n", "nii_key_lists", ".", "append", "(", "nii_list", ")", "\n", "\n", "# create a list of tuples of fullpaths to nii, i.e.:", "\n", "# [", "\n", "#    (path_key0_nii0, path_key1_nii0, ...),", "\n", "#    (path_key0_nii1, path_key1_nii1, ...),", "\n", "#    ...", "\n", "# ]", "\n", "", "nii_tuples", "=", "list", "(", "zip", "(", "*", "nii_key_lists", ")", ")", "\n", "\n", "# make sure filename are the same", "\n", "for", "nii_tuple", "in", "nii_tuples", ":", "\n", "            ", "nii_basenames", "=", "[", "os", ".", "path", ".", "basename", "(", "nii", ")", "for", "nii", "in", "nii_tuple", "]", "\n", "\n", "if", "len", "(", "set", "(", "nii_basenames", ")", ")", "!=", "1", ":", "\n", "                ", "msg", "=", "\"unexpected filename mismatch between keys\"", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# shuffle tuple sequence if needed", "\n", "", "", "if", "self", ".", "_shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "nii_tuples", ")", "\n", "\n", "# loop over tuples", "\n", "", "for", "nii_tuple", "in", "nii_tuples", ":", "\n", "# load niis", "\n", "            ", "msg", "=", "\"loading {:}\"", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "nii_tuple", "[", "0", "]", ")", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "nib_imgs", "=", "[", "nib", ".", "load", "(", "filepath", ")", "for", "filepath", "in", "nii_tuple", "]", "\n", "\n", "np_imgs", "=", "[", "nib_img", ".", "get_data", "(", ")", "for", "nib_img", "in", "nib_imgs", "]", "\n", "# np_imgs = [np.squeeze(np_img.copy()) for np_img in np_imgs]", "\n", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "np_imgs", ")", ":", "\n", "                ", "msg", "=", "\"(shape: {:}) loaded image ({:})\"", "\n", "msg", "=", "msg", ".", "format", "(", "np_imgs", "[", "i", "]", ".", "shape", ",", "self", ".", "_keys", "[", "i", "]", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# resample to match output_res (if specified)", "\n", "", "if", "self", ".", "_output_res", "is", "not", "None", ":", "\n", "                ", "for", "i", ",", "_", "in", "enumerate", "(", "np_imgs", ")", ":", "\n", "                    ", "msg", "=", "\"(shape: {:}) resampling image ({:})\"", "\n", "msg", "=", "msg", ".", "format", "(", "np_imgs", "[", "i", "]", ".", "shape", ",", "self", ".", "_keys", "[", "i", "]", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# obtain image resolution from nifti headers", "\n", "nii_header", "=", "nib_imgs", "[", "i", "]", ".", "header", "\n", "\n", "# ndim = nii_header.structarr['dim'][0]", "\n", "ndim", "=", "len", "(", "np_imgs", "[", "i", "]", ".", "shape", ")", "\n", "nii_res", "=", "nii_header", ".", "structarr", "[", "'pixdim'", "]", "[", "1", ":", "(", "1", "+", "ndim", ")", "]", "\n", "\n", "# resample image", "\n", "np_imgs", "[", "i", "]", "=", "utilities", ".", "image", ".", "resample_image", "(", "\n", "img_original", "=", "np_imgs", "[", "i", "]", ",", "\n", "res_original", "=", "nii_res", ",", "\n", "res_target", "=", "self", ".", "_output_res", ",", "\n", "order", "=", "self", ".", "_resample_orders", "[", "i", "]", "\n", ")", "\n", "\n", "msg", "=", "\"(shape: {:}) resampled image ({:})\"", "\n", "msg", "=", "msg", ".", "format", "(", "np_imgs", "[", "i", "]", ".", "shape", ",", "self", ".", "_keys", "[", "i", "]", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# crop or pad image to match output_shape (if specified)", "\n", "", "", "if", "self", ".", "_output_shape", "is", "not", "None", ":", "\n", "                ", "for", "i", ",", "_", "in", "enumerate", "(", "np_imgs", ")", ":", "\n", "                    ", "msg", "=", "\"(shape: {:}) cropping image ({:})\"", "\n", "msg", "=", "msg", ".", "format", "(", "np_imgs", "[", "i", "]", ".", "shape", ",", "self", ".", "_keys", "[", "i", "]", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# make sure slice_dim is non-negative", "\n", "slice_dim", "=", "self", ".", "_slice_dim", "\n", "if", "slice_dim", "<", "0", ":", "\n", "                        ", "slice_dim", "+=", "len", "(", "np_imgs", "[", "i", "]", ".", "shape", ")", "\n", "\n", "# determine desired image shape", "\n", "", "size_target", "=", "list", "(", "np_imgs", "[", "i", "]", ".", "shape", ")", "\n", "\n", "for", "j", ",", "_", "in", "enumerate", "(", "size_target", ")", ":", "\n", "                        ", "if", "j", "<", "slice_dim", ":", "\n", "                            ", "size_target", "[", "j", "]", "=", "self", ".", "_output_shape", "[", "j", "]", "\n", "", "elif", "j", ">", "slice_dim", ":", "\n", "                            ", "size_target", "[", "j", "]", "=", "self", ".", "_output_shape", "[", "j", "-", "1", "]", "\n", "\n", "# crop or pad image to desired shape", "\n", "", "", "np_imgs", "[", "i", "]", "=", "utilities", ".", "image", ".", "crop_or_pad_image", "(", "\n", "img_original", "=", "np_imgs", "[", "i", "]", ",", "size_target", "=", "size_target", "\n", ")", "\n", "\n", "msg", "=", "\"(shape: {:}) cropped image ({:})\"", "\n", "msg", "=", "msg", ".", "format", "(", "np_imgs", "[", "i", "]", ".", "shape", ",", "self", ".", "_keys", "[", "i", "]", ")", "\n", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# make sure shapes are same", "\n", "", "", "np_img_shapes", "=", "[", "np_img", ".", "shape", "for", "np_img", "in", "np_imgs", "]", "\n", "if", "len", "(", "set", "(", "np_img_shapes", ")", ")", "!=", "1", ":", "\n", "                ", "msg", "=", "\"unexpected shape mismatch between niis\"", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# prepare slicer and slice index", "\n", "", "np_img_shape", "=", "np_img_shapes", "[", "0", "]", "\n", "slicers", "=", "[", "slice", "(", "None", ")", "]", "*", "len", "(", "np_img_shape", ")", "\n", "slice_indexes", "=", "range", "(", "np_img_shape", "[", "self", ".", "_slice_dim", "]", ")", "\n", "\n", "# shuffle slice sequence if needed", "\n", "if", "self", ".", "_shuffle", ":", "\n", "                ", "slice_indexes", "=", "list", "(", "slice_indexes", ")", "\n", "random", ".", "shuffle", "(", "slice_indexes", ")", "\n", "\n", "# slice and yield", "\n", "", "for", "islice", "in", "slice_indexes", ":", "\n", "                ", "slicers", "[", "self", ".", "_slice_dim", "]", "=", "slice", "(", "islice", ",", "islice", "+", "1", ",", "1", ")", "\n", "\n", "s", "=", "[", "\n", "np", ".", "squeeze", "(", "np_img", "[", "tuple", "(", "slicers", ")", "]", ",", "axis", "=", "self", ".", "_slice_dim", ")", "\n", "for", "np_img", "in", "np_imgs", "\n", "]", "\n", "yield", "tuple", "(", "s", ")", "\n", "\n", "# release memory", "\n", "", "np_imgs", "=", "[", "]", "\n", "nib_imgs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.get_length": [[513, 519], ["utilities.log.create_or_get_logger", "utilities.log.create_or_get_logger.error", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.wong-ck_DeepSegment.utilities.log.create_or_get_logger"], ["", "", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "logger", "=", "utilities", ".", "log", ".", "create_or_get_logger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "msg", "=", "\"get_length() not supported by NiftiGenerator!\"", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "NotImplementedError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wong-ck_DeepSegment.io.reader.NiftiGenerator.get_dataset_shapes": [[520, 527], ["tuple", "str"], "methods", ["None"], ["", "def", "get_dataset_shapes", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_output_shape", "is", "not", "None", ":", "\n", "            ", "output_shape", "=", "tuple", "(", "self", ".", "_output_shape", ")", "\n", "", "else", ":", "\n", "            ", "output_shape", "=", "None", "\n", "\n", "", "return", "{", "str", "(", "key", ")", ":", "output_shape", "for", "key", "in", "self", ".", "_keys", "}", "\n", "", "", ""]]}