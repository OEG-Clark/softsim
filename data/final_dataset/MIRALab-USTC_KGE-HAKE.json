{"home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.KGEModel.func": [[22, 42], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "func", "(", "self", ",", "head", ",", "rel", ",", "tail", ",", "batch_type", ")", ":", "\n", "        ", "\"\"\"\n        Different tensor shape for different batch types.\n        BatchType.SINGLE:\n            head: [batch_size, hidden_dim]\n            relation: [batch_size, hidden_dim]\n            tail: [batch_size, hidden_dim]\n\n        BatchType.HEAD_BATCH:\n            head: [batch_size, negative_sample_size, hidden_dim]\n            relation: [batch_size, hidden_dim]\n            tail: [batch_size, hidden_dim]\n\n        BatchType.TAIL_BATCH:\n            head: [batch_size, hidden_dim]\n            relation: [batch_size, hidden_dim]\n            tail: [batch_size, negative_sample_size, hidden_dim]\n        \"\"\"", "\n", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.KGEModel.forward": [[43, 128], ["models.KGEModel.func", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "head_part.size", "head_part.size", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "ValueError", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "tail_part.size", "tail_part.size", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "head_part.view", "tail_part.view"], "methods", ["home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.HAKE.func"], ["", "def", "forward", "(", "self", ",", "sample", ",", "batch_type", "=", "BatchType", ".", "SINGLE", ")", ":", "\n", "        ", "\"\"\"\n        Given the indexes in `sample`, extract the corresponding embeddings,\n        and call func().\n\n        Args:\n            batch_type: {SINGLE, HEAD_BATCH, TAIL_BATCH},\n                - SINGLE: positive samples in training, and all samples in validation / testing,\n                - HEAD_BATCH: (?, r, t) tasks in training,\n                - TAIL_BATCH: (h, r, ?) tasks in training.\n\n            sample: different format for different batch types.\n                - SINGLE: tensor with shape [batch_size, 3]\n                - {HEAD_BATCH, TAIL_BATCH}: (positive_sample, negative_sample)\n                    - positive_sample: tensor with shape [batch_size, 3]\n                    - negative_sample: tensor with shape [batch_size, negative_sample_size]\n        \"\"\"", "\n", "if", "batch_type", "==", "BatchType", ".", "SINGLE", ":", "\n", "            ", "head", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "0", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "relation", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tail", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "2", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "elif", "batch_type", "==", "BatchType", ".", "HEAD_BATCH", ":", "\n", "            ", "tail_part", ",", "head_part", "=", "sample", "\n", "batch_size", ",", "negative_sample_size", "=", "head_part", ".", "size", "(", "0", ")", ",", "head_part", ".", "size", "(", "1", ")", "\n", "\n", "head", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "negative_sample_size", ",", "-", "1", ")", "\n", "\n", "relation", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "tail_part", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tail", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "tail_part", "[", ":", ",", "2", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "elif", "batch_type", "==", "BatchType", ".", "TAIL_BATCH", ":", "\n", "            ", "head_part", ",", "tail_part", "=", "sample", "\n", "batch_size", ",", "negative_sample_size", "=", "tail_part", ".", "size", "(", "0", ")", ",", "tail_part", ".", "size", "(", "1", ")", "\n", "\n", "head", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", "[", ":", ",", "0", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "relation", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tail", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "tail_part", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "negative_sample_size", ",", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'batch_type %s not supported!'", ".", "format", "(", "batch_type", ")", ")", "\n", "\n", "# return scores", "\n", "", "return", "self", ".", "func", "(", "head", ",", "relation", ",", "tail", ",", "batch_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.KGEModel.train_step": [[129, 172], ["model.train", "optimizer.zero_grad", "next", "positive_sample.cuda.cuda.cuda", "negative_sample.cuda.cuda.cuda", "subsampling_weight.cuda.cuda.cuda", "model", "model", "torch.logsigmoid().squeeze", "torch.logsigmoid().squeeze", "torch.logsigmoid().squeeze", "loss.backward", "optimizer.step", "subsampling_weight.cuda.cuda.sum", "subsampling_weight.cuda.cuda.sum", "positive_sample_loss.item", "negative_sample_loss.item", "loss.item", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "train_step", "(", "model", ",", "optimizer", ",", "train_iterator", ",", "args", ")", ":", "\n", "        ", "'''\n        A single train step. Apply back-propation and return the loss\n        '''", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "positive_sample", ",", "negative_sample", ",", "subsampling_weight", ",", "batch_type", "=", "next", "(", "train_iterator", ")", "\n", "\n", "positive_sample", "=", "positive_sample", ".", "cuda", "(", ")", "\n", "negative_sample", "=", "negative_sample", ".", "cuda", "(", ")", "\n", "subsampling_weight", "=", "subsampling_weight", ".", "cuda", "(", ")", "\n", "\n", "# negative scores", "\n", "negative_score", "=", "model", "(", "(", "positive_sample", ",", "negative_sample", ")", ",", "batch_type", "=", "batch_type", ")", "\n", "\n", "negative_score", "=", "(", "F", ".", "softmax", "(", "negative_score", "*", "args", ".", "adversarial_temperature", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "*", "F", ".", "logsigmoid", "(", "-", "negative_score", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "# positive scores", "\n", "positive_score", "=", "model", "(", "positive_sample", ")", "\n", "\n", "positive_score", "=", "F", ".", "logsigmoid", "(", "positive_score", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "positive_sample_loss", "=", "-", "(", "subsampling_weight", "*", "positive_score", ")", ".", "sum", "(", ")", "/", "subsampling_weight", ".", "sum", "(", ")", "\n", "negative_sample_loss", "=", "-", "(", "subsampling_weight", "*", "negative_score", ")", ".", "sum", "(", ")", "/", "subsampling_weight", ".", "sum", "(", ")", "\n", "\n", "loss", "=", "(", "positive_sample_loss", "+", "negative_sample_loss", ")", "/", "2", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "log", "=", "{", "\n", "'positive_sample_loss'", ":", "positive_sample_loss", ".", "item", "(", ")", ",", "\n", "'negative_sample_loss'", ":", "negative_sample_loss", ".", "item", "(", ")", ",", "\n", "'loss'", ":", "loss", ".", "item", "(", ")", "\n", "}", "\n", "\n", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.KGEModel.test_step": [[173, 257], ["model.eval", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "sum", "logs[].keys", "data.TestDataset", "data.TestDataset", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "max", "len", "sum", "len", "positive_sample.cuda.cuda.cuda", "negative_sample.cuda.cuda.cuda", "filter_bias.cuda.cuda.cuda", "positive_sample.cuda.cuda.size", "model", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "range", "logs.append", "logging.info", "ValueError", "ranking.size", "ranking.item", "float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "test_step", "(", "model", ",", "data_reader", ",", "mode", ",", "args", ")", ":", "\n", "        ", "'''\n        Evaluate the model on test or valid datasets\n        '''", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "test_dataloader_head", "=", "DataLoader", "(", "\n", "TestDataset", "(", "\n", "data_reader", ",", "\n", "mode", ",", "\n", "BatchType", ".", "HEAD_BATCH", "\n", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "num_workers", "=", "max", "(", "1", ",", "args", ".", "cpu_num", "//", "2", ")", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "test_dataloader_tail", "=", "DataLoader", "(", "\n", "TestDataset", "(", "\n", "data_reader", ",", "\n", "mode", ",", "\n", "BatchType", ".", "TAIL_BATCH", "\n", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "num_workers", "=", "max", "(", "1", ",", "args", ".", "cpu_num", "//", "2", ")", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "test_dataset_list", "=", "[", "test_dataloader_head", ",", "test_dataloader_tail", "]", "\n", "\n", "logs", "=", "[", "]", "\n", "\n", "step", "=", "0", "\n", "total_steps", "=", "sum", "(", "[", "len", "(", "dataset", ")", "for", "dataset", "in", "test_dataset_list", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "test_dataset", "in", "test_dataset_list", ":", "\n", "                ", "for", "positive_sample", ",", "negative_sample", ",", "filter_bias", ",", "batch_type", "in", "test_dataset", ":", "\n", "                    ", "positive_sample", "=", "positive_sample", ".", "cuda", "(", ")", "\n", "negative_sample", "=", "negative_sample", ".", "cuda", "(", ")", "\n", "filter_bias", "=", "filter_bias", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "positive_sample", ".", "size", "(", "0", ")", "\n", "\n", "score", "=", "model", "(", "(", "positive_sample", ",", "negative_sample", ")", ",", "batch_type", ")", "\n", "score", "+=", "filter_bias", "\n", "\n", "# Explicitly sort all the entities to ensure that there is no test exposure bias", "\n", "argsort", "=", "torch", ".", "argsort", "(", "score", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "\n", "if", "batch_type", "==", "BatchType", ".", "HEAD_BATCH", ":", "\n", "                        ", "positive_arg", "=", "positive_sample", "[", ":", ",", "0", "]", "\n", "", "elif", "batch_type", "==", "BatchType", ".", "TAIL_BATCH", ":", "\n", "                        ", "positive_arg", "=", "positive_sample", "[", ":", ",", "2", "]", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'mode %s not supported'", "%", "mode", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# Notice that argsort is not ranking", "\n", "                        ", "ranking", "=", "(", "argsort", "[", "i", ",", ":", "]", "==", "positive_arg", "[", "i", "]", ")", ".", "nonzero", "(", ")", "\n", "assert", "ranking", ".", "size", "(", "0", ")", "==", "1", "\n", "\n", "# ranking + 1 is the true ranking used in evaluation metrics", "\n", "ranking", "=", "1", "+", "ranking", ".", "item", "(", ")", "\n", "logs", ".", "append", "(", "{", "\n", "'MRR'", ":", "1.0", "/", "ranking", ",", "\n", "'MR'", ":", "float", "(", "ranking", ")", ",", "\n", "'HITS@1'", ":", "1.0", "if", "ranking", "<=", "1", "else", "0.0", ",", "\n", "'HITS@3'", ":", "1.0", "if", "ranking", "<=", "3", "else", "0.0", ",", "\n", "'HITS@10'", ":", "1.0", "if", "ranking", "<=", "10", "else", "0.0", ",", "\n", "}", ")", "\n", "\n", "", "if", "step", "%", "args", ".", "test_log_steps", "==", "0", ":", "\n", "                        ", "logging", ".", "info", "(", "'Evaluating the model... ({}/{})'", ".", "format", "(", "step", ",", "total_steps", ")", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "", "", "", "metrics", "=", "{", "}", "\n", "for", "metric", "in", "logs", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "            ", "metrics", "[", "metric", "]", "=", "sum", "(", "[", "log", "[", "metric", "]", "for", "log", "in", "logs", "]", ")", "/", "len", "(", "logs", ")", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.ModE.__init__": [[260, 289], ["super().__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.ModE.embedding_range.item", "models.ModE.embedding_range.item", "models.ModE.embedding_range.item", "models.ModE.embedding_range.item", "models.ModE.gamma.item"], "methods", ["home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.BidirectionalOneShotIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_entity", ",", "num_relation", ",", "hidden_dim", ",", "gamma", ")", ":", "\n", "        ", "super", "(", "ModE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_entity", "=", "num_entity", "\n", "self", ".", "num_relation", "=", "num_relation", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "epsilon", "=", "2.0", "\n", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "gamma", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "\n", "self", ".", "embedding_range", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "(", "self", ".", "gamma", ".", "item", "(", ")", "+", "self", ".", "epsilon", ")", "/", "hidden_dim", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "\n", "self", ".", "entity_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_entity", ",", "hidden_dim", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "entity_embedding", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "\n", "self", ".", "relation_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_relation", ",", "hidden_dim", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "relation_embedding", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.ModE.func": [[291, 293], ["models.ModE.gamma.item", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "func", "(", "self", ",", "head", ",", "rel", ",", "tail", ",", "batch_type", ")", ":", "\n", "        ", "return", "self", ".", "gamma", ".", "item", "(", ")", "-", "torch", ".", "norm", "(", "head", "*", "rel", "-", "tail", ",", "p", "=", "1", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.HAKE.__init__": [[296, 339], ["super().__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "models.HAKE.embedding_range.item", "models.HAKE.embedding_range.item", "models.HAKE.embedding_range.item", "models.HAKE.embedding_range.item", "models.HAKE.gamma.item", "models.HAKE.embedding_range.item"], "methods", ["home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.BidirectionalOneShotIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_entity", ",", "num_relation", ",", "hidden_dim", ",", "gamma", ",", "modulus_weight", "=", "1.0", ",", "phase_weight", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "HAKE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_entity", "=", "num_entity", "\n", "self", ".", "num_relation", "=", "num_relation", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "epsilon", "=", "2.0", "\n", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "gamma", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "\n", "self", ".", "embedding_range", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "(", "self", ".", "gamma", ".", "item", "(", ")", "+", "self", ".", "epsilon", ")", "/", "hidden_dim", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "\n", "self", ".", "entity_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_entity", ",", "hidden_dim", "*", "2", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "entity_embedding", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "\n", "self", ".", "relation_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_relation", ",", "hidden_dim", "*", "3", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "relation_embedding", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "\n", "nn", ".", "init", ".", "ones_", "(", "\n", "tensor", "=", "self", ".", "relation_embedding", "[", ":", ",", "hidden_dim", ":", "2", "*", "hidden_dim", "]", "\n", ")", "\n", "\n", "nn", ".", "init", ".", "zeros_", "(", "\n", "tensor", "=", "self", ".", "relation_embedding", "[", ":", ",", "2", "*", "hidden_dim", ":", "3", "*", "hidden_dim", "]", "\n", ")", "\n", "\n", "self", ".", "phase_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "[", "phase_weight", "*", "self", ".", "embedding_range", ".", "item", "(", ")", "]", "]", ")", ")", "\n", "self", ".", "modulus_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "[", "modulus_weight", "]", "]", ")", ")", "\n", "\n", "self", ".", "pi", "=", "3.14159262358979323846", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.HAKE.func": [[341, 366], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "models.HAKE.gamma.item", "models.HAKE.embedding_range.item", "models.HAKE.embedding_range.item", "models.HAKE.embedding_range.item", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin"], "methods", ["None"], ["", "def", "func", "(", "self", ",", "head", ",", "rel", ",", "tail", ",", "batch_type", ")", ":", "\n", "        ", "phase_head", ",", "mod_head", "=", "torch", ".", "chunk", "(", "head", ",", "2", ",", "dim", "=", "2", ")", "\n", "phase_relation", ",", "mod_relation", ",", "bias_relation", "=", "torch", ".", "chunk", "(", "rel", ",", "3", ",", "dim", "=", "2", ")", "\n", "phase_tail", ",", "mod_tail", "=", "torch", ".", "chunk", "(", "tail", ",", "2", ",", "dim", "=", "2", ")", "\n", "\n", "phase_head", "=", "phase_head", "/", "(", "self", ".", "embedding_range", ".", "item", "(", ")", "/", "self", ".", "pi", ")", "\n", "phase_relation", "=", "phase_relation", "/", "(", "self", ".", "embedding_range", ".", "item", "(", ")", "/", "self", ".", "pi", ")", "\n", "phase_tail", "=", "phase_tail", "/", "(", "self", ".", "embedding_range", ".", "item", "(", ")", "/", "self", ".", "pi", ")", "\n", "\n", "if", "batch_type", "==", "BatchType", ".", "HEAD_BATCH", ":", "\n", "            ", "phase_score", "=", "phase_head", "+", "(", "phase_relation", "-", "phase_tail", ")", "\n", "", "else", ":", "\n", "            ", "phase_score", "=", "(", "phase_head", "+", "phase_relation", ")", "-", "phase_tail", "\n", "\n", "", "mod_relation", "=", "torch", ".", "abs", "(", "mod_relation", ")", "\n", "bias_relation", "=", "torch", ".", "clamp", "(", "bias_relation", ",", "max", "=", "1", ")", "\n", "indicator", "=", "(", "bias_relation", "<", "-", "mod_relation", ")", "\n", "bias_relation", "[", "indicator", "]", "=", "-", "mod_relation", "[", "indicator", "]", "\n", "\n", "r_score", "=", "mod_head", "*", "(", "mod_relation", "+", "bias_relation", ")", "-", "mod_tail", "*", "(", "1", "-", "bias_relation", ")", "\n", "\n", "phase_score", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "torch", ".", "sin", "(", "phase_score", "/", "2", ")", ")", ",", "dim", "=", "2", ")", "*", "self", ".", "phase_weight", "\n", "r_score", "=", "torch", ".", "norm", "(", "r_score", ",", "dim", "=", "2", ")", "*", "self", ".", "modulus_weight", "\n", "\n", "return", "self", ".", "gamma", ".", "item", "(", ")", "-", "(", "phase_score", "+", "r_score", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.parse_args": [[17, 52], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.parse_args"], ["def", "parse_args", "(", "args", "=", "None", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Training and Testing Knowledge Graph Embedding Models'", ",", "\n", "usage", "=", "'runs.py [<args>] [-h | --help]'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--do_train'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--do_valid'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--do_test'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'TransE'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--negative_sample_size'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--hidden_dim'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-g'", ",", "'--gamma'", ",", "default", "=", "12.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--adversarial_temperature'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch_size'", ",", "default", "=", "1024", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'valid/test batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'-mw'", ",", "'--modulus_weight'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-pw'", ",", "'--phase_weight'", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "'--learning_rate'", ",", "default", "=", "0.0001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-cpu'", ",", "'--cpu_num'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-init'", ",", "'--init_checkpoint'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-save'", ",", "'--save_path'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--max_steps'", ",", "default", "=", "100000", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_checkpoint_steps'", ",", "default", "=", "10000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_steps'", ",", "default", "=", "10000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--log_steps'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "'train log every xx steps'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_log_steps'", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "help", "=", "'valid/test log every xx steps'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--no_decay'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Learning rate do not decay'", ")", "\n", "return", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.override_config": [[54, 66], ["open", "json.load", "os.path.join"], "function", ["None"], ["", "def", "override_config", "(", "args", ")", ":", "\n", "    ", "'''\n    Override model and data configuration\n    '''", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "init_checkpoint", ",", "'config.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "args_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "args", ".", "model", "=", "args_dict", "[", "'model'", "]", "\n", "args", ".", "data_path", "=", "args_dict", "[", "'data_path'", "]", "\n", "args", ".", "hidden_dim", "=", "args_dict", "[", "'hidden_dim'", "]", "\n", "args", ".", "test_batch_size", "=", "args_dict", "[", "'test_batch_size'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.save_model": [[68, 95], ["vars", "torch.save", "model.entity_embedding.detach().cpu().numpy", "numpy.save", "model.relation_embedding.detach().cpu().numpy", "numpy.save", "open", "json.dump", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "model.state_dict", "optimizer.state_dict", "model.entity_embedding.detach().cpu", "model.relation_embedding.detach().cpu", "model.entity_embedding.detach", "model.relation_embedding.detach"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "optimizer", ",", "save_variable_list", ",", "args", ")", ":", "\n", "    ", "'''\n    Save the parameters of the model and the optimizer,\n    as well as some other variables such as step and learning_rate\n    '''", "\n", "\n", "args_dict", "=", "vars", "(", "args", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'config.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "args_dict", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "**", "save_variable_list", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'checkpoint'", ")", "\n", ")", "\n", "\n", "entity_embedding", "=", "model", ".", "entity_embedding", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'entity_embedding'", ")", ",", "\n", "entity_embedding", "\n", ")", "\n", "\n", "relation_embedding", "=", "model", ".", "relation_embedding", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'relation_embedding'", ")", ",", "\n", "relation_embedding", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.set_logger": [[98, 120], ["logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "os.path.join", "os.path.join", "logging.getLogger"], "function", ["None"], ["", "def", "set_logger", "(", "args", ")", ":", "\n", "    ", "'''\n    Write logs to checkpoint and console\n    '''", "\n", "\n", "if", "args", ".", "do_train", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", "or", "args", ".", "init_checkpoint", ",", "'train.log'", ")", "\n", "", "else", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", "or", "args", ".", "init_checkpoint", ",", "'test.log'", ")", "\n", "\n", "", "logging", ".", "basicConfig", "(", "\n", "format", "=", "'%(asctime)s %(levelname)-8s %(message)s'", ",", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ",", "\n", "filename", "=", "log_file", ",", "\n", "filemode", "=", "'w'", "\n", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)-8s %(message)s'", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.log_metrics": [[122, 128], ["logging.info"], "function", ["None"], ["", "def", "log_metrics", "(", "mode", ",", "step", ",", "metrics", ")", ":", "\n", "    ", "'''\n    Print the evaluation logs\n    '''", "\n", "for", "metric", "in", "metrics", ":", "\n", "        ", "logging", ".", "info", "(", "'%s %s at step %d: %f'", "%", "(", "mode", ",", "metric", ",", "step", ",", "metrics", "[", "metric", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.main": [[130, 282], ["runs.set_logger", "data.DataReader", "len", "len", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "models.HAKE.named_parameters", "models.HAKE.cuda", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "ValueError", "runs.override_config", "ValueError", "os.makedirs", "models.ModE", "logging.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.BidirectionalOneShotIterator", "torch.optim.Adam", "logging.info", "torch.load", "models.HAKE.load_state_dict", "logging.info", "logging.info", "range", "runs.save_model", "logging.info", "models.HAKE.test_step", "runs.log_metrics", "logging.info", "models.HAKE.test_step", "runs.log_metrics", "ValueError", "os.path.exists", "len", "len", "len", "models.HAKE", "data.TrainDataset", "data.TrainDataset", "filter", "os.path.join", "torch.optim.Adam.load_state_dict", "models.HAKE.train_step", "training_logs.append", "max", "max", "models.HAKE.parameters", "logging.info", "torch.optim.Adam", "runs.save_model", "training_logs[].keys", "runs.log_metrics", "logging.info", "models.HAKE.test_step", "runs.log_metrics", "str", "str", "filter", "param.size", "models.HAKE.parameters", "sum", "len"], "function", ["home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.set_logger", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.override_config", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.save_model", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.KGEModel.test_step", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.log_metrics", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.KGEModel.test_step", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.log_metrics", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.KGEModel.train_step", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.save_model", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.log_metrics", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.models.KGEModel.test_step", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.runs.log_metrics"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "(", "not", "args", ".", "do_train", ")", "and", "(", "not", "args", ".", "do_valid", ")", "and", "(", "not", "args", ".", "do_test", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'one of train/val/test mode must be choosed.'", ")", "\n", "\n", "", "if", "args", ".", "init_checkpoint", ":", "\n", "        ", "override_config", "(", "args", ")", "\n", "", "elif", "args", ".", "data_path", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'one of init_checkpoint/data_path must be choosed.'", ")", "\n", "\n", "", "if", "args", ".", "do_train", "and", "args", ".", "save_path", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Where do you want to save your trained model?'", ")", "\n", "\n", "", "if", "args", ".", "save_path", "and", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_path", ")", "\n", "\n", "# Write logs to checkpoint and console", "\n", "", "set_logger", "(", "args", ")", "\n", "\n", "data_reader", "=", "DataReader", "(", "args", ".", "data_path", ")", "\n", "num_entity", "=", "len", "(", "data_reader", ".", "entity_dict", ")", "\n", "num_relation", "=", "len", "(", "data_reader", ".", "relation_dict", ")", "\n", "\n", "logging", ".", "info", "(", "'Model: {}'", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "logging", ".", "info", "(", "'Data Path: {}'", ".", "format", "(", "args", ".", "data_path", ")", ")", "\n", "logging", ".", "info", "(", "'Num Entity: {}'", ".", "format", "(", "num_entity", ")", ")", "\n", "logging", ".", "info", "(", "'Num Relation: {}'", ".", "format", "(", "num_relation", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'Num Train: {}'", ".", "format", "(", "len", "(", "data_reader", ".", "train_data", ")", ")", ")", "\n", "logging", ".", "info", "(", "'Num Valid: {}'", ".", "format", "(", "len", "(", "data_reader", ".", "valid_data", ")", ")", ")", "\n", "logging", ".", "info", "(", "'Num Test: {}'", ".", "format", "(", "len", "(", "data_reader", ".", "test_data", ")", ")", ")", "\n", "\n", "if", "args", ".", "model", "==", "'ModE'", ":", "\n", "        ", "kge_model", "=", "ModE", "(", "num_entity", ",", "num_relation", ",", "args", ".", "hidden_dim", ",", "args", ".", "gamma", ")", "\n", "", "elif", "args", ".", "model", "==", "'HAKE'", ":", "\n", "        ", "kge_model", "=", "HAKE", "(", "num_entity", ",", "num_relation", ",", "args", ".", "hidden_dim", ",", "args", ".", "gamma", ",", "args", ".", "modulus_weight", ",", "args", ".", "phase_weight", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Model Parameter Configuration:'", ")", "\n", "for", "name", ",", "param", "in", "kge_model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Parameter %s: %s, require_grad = %s'", "%", "(", "name", ",", "str", "(", "param", ".", "size", "(", ")", ")", ",", "str", "(", "param", ".", "requires_grad", ")", ")", ")", "\n", "\n", "", "kge_model", "=", "kge_model", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "do_train", ":", "\n", "# Set training dataloader iterator", "\n", "        ", "train_dataloader_head", "=", "DataLoader", "(", "\n", "TrainDataset", "(", "data_reader", ",", "args", ".", "negative_sample_size", ",", "BatchType", ".", "HEAD_BATCH", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "max", "(", "1", ",", "args", ".", "cpu_num", "//", "2", ")", ",", "\n", "collate_fn", "=", "TrainDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "train_dataloader_tail", "=", "DataLoader", "(", "\n", "TrainDataset", "(", "data_reader", ",", "args", ".", "negative_sample_size", ",", "BatchType", ".", "TAIL_BATCH", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "max", "(", "1", ",", "args", ".", "cpu_num", "//", "2", ")", ",", "\n", "collate_fn", "=", "TrainDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "train_iterator", "=", "BidirectionalOneShotIterator", "(", "train_dataloader_head", ",", "train_dataloader_tail", ")", "\n", "\n", "# Set training configuration", "\n", "current_learning_rate", "=", "args", ".", "learning_rate", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "kge_model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "current_learning_rate", "\n", ")", "\n", "\n", "warm_up_steps", "=", "args", ".", "max_steps", "//", "2", "\n", "\n", "", "if", "args", ".", "init_checkpoint", ":", "\n", "# Restore model from checkpoint directory", "\n", "        ", "logging", ".", "info", "(", "'Loading checkpoint %s...'", "%", "args", ".", "init_checkpoint", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "init_checkpoint", ",", "'checkpoint'", ")", ")", "\n", "init_step", "=", "checkpoint", "[", "'step'", "]", "\n", "kge_model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "if", "args", ".", "do_train", ":", "\n", "            ", "current_learning_rate", "=", "checkpoint", "[", "'current_learning_rate'", "]", "\n", "warm_up_steps", "=", "checkpoint", "[", "'warm_up_steps'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'Randomly Initializing %s Model...'", "%", "args", ".", "model", ")", "\n", "init_step", "=", "0", "\n", "\n", "", "step", "=", "init_step", "\n", "\n", "logging", ".", "info", "(", "'Start Training...'", ")", "\n", "logging", ".", "info", "(", "'init_step = %d'", "%", "init_step", ")", "\n", "if", "not", "args", ".", "do_test", ":", "\n", "        ", "logging", ".", "info", "(", "'learning_rate = %d'", "%", "current_learning_rate", ")", "\n", "", "logging", ".", "info", "(", "'batch_size = %d'", "%", "args", ".", "batch_size", ")", "\n", "logging", ".", "info", "(", "'hidden_dim = %d'", "%", "args", ".", "hidden_dim", ")", "\n", "logging", ".", "info", "(", "'gamma = %f'", "%", "args", ".", "gamma", ")", "\n", "logging", ".", "info", "(", "'adversarial_temperature = %f'", "%", "args", ".", "adversarial_temperature", ")", "\n", "\n", "if", "args", ".", "do_train", ":", "\n", "        ", "training_logs", "=", "[", "]", "\n", "\n", "# Training Loop", "\n", "for", "step", "in", "range", "(", "init_step", ",", "args", ".", "max_steps", ")", ":", "\n", "\n", "            ", "log", "=", "kge_model", ".", "train_step", "(", "kge_model", ",", "optimizer", ",", "train_iterator", ",", "args", ")", "\n", "\n", "training_logs", ".", "append", "(", "log", ")", "\n", "\n", "if", "step", ">=", "warm_up_steps", ":", "\n", "                ", "if", "not", "args", ".", "no_decay", ":", "\n", "                    ", "current_learning_rate", "=", "current_learning_rate", "/", "10", "\n", "", "logging", ".", "info", "(", "'Change learning_rate to %f at step %d'", "%", "(", "current_learning_rate", ",", "step", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "kge_model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "current_learning_rate", "\n", ")", "\n", "warm_up_steps", "=", "warm_up_steps", "*", "3", "\n", "\n", "", "if", "step", "%", "args", ".", "save_checkpoint_steps", "==", "0", ":", "\n", "                ", "save_variable_list", "=", "{", "\n", "'step'", ":", "step", ",", "\n", "'current_learning_rate'", ":", "current_learning_rate", ",", "\n", "'warm_up_steps'", ":", "warm_up_steps", "\n", "}", "\n", "save_model", "(", "kge_model", ",", "optimizer", ",", "save_variable_list", ",", "args", ")", "\n", "\n", "", "if", "step", "%", "args", ".", "log_steps", "==", "0", ":", "\n", "                ", "metrics", "=", "{", "}", "\n", "for", "metric", "in", "training_logs", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "metrics", "[", "metric", "]", "=", "sum", "(", "[", "log", "[", "metric", "]", "for", "log", "in", "training_logs", "]", ")", "/", "len", "(", "training_logs", ")", "\n", "", "log_metrics", "(", "'Training average'", ",", "step", ",", "metrics", ")", "\n", "training_logs", "=", "[", "]", "\n", "\n", "", "if", "args", ".", "do_valid", "and", "step", "%", "args", ".", "valid_steps", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'Evaluating on Valid Dataset...'", ")", "\n", "metrics", "=", "kge_model", ".", "test_step", "(", "kge_model", ",", "data_reader", ",", "ModeType", ".", "VALID", ",", "args", ")", "\n", "log_metrics", "(", "'Valid'", ",", "step", ",", "metrics", ")", "\n", "\n", "", "", "save_variable_list", "=", "{", "\n", "'step'", ":", "step", ",", "\n", "'current_learning_rate'", ":", "current_learning_rate", ",", "\n", "'warm_up_steps'", ":", "warm_up_steps", "\n", "}", "\n", "save_model", "(", "kge_model", ",", "optimizer", ",", "save_variable_list", ",", "args", ")", "\n", "\n", "", "if", "args", ".", "do_valid", ":", "\n", "        ", "logging", ".", "info", "(", "'Evaluating on Valid Dataset...'", ")", "\n", "metrics", "=", "kge_model", ".", "test_step", "(", "kge_model", ",", "data_reader", ",", "ModeType", ".", "VALID", ",", "args", ")", "\n", "log_metrics", "(", "'Valid'", ",", "step", ",", "metrics", ")", "\n", "\n", "", "if", "args", ".", "do_test", ":", "\n", "        ", "logging", ".", "info", "(", "'Evaluating on Test Dataset...'", ")", "\n", "metrics", "=", "kge_model", ".", "test_step", "(", "kge_model", ",", "data_reader", ",", "ModeType", ".", "TEST", ",", "args", ")", "\n", "log_metrics", "(", "'Test'", ",", "step", ",", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.DataReader.__init__": [[22, 35], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "data.DataReader.read_dict", "data.DataReader.read_dict", "data.DataReader.read_data", "data.DataReader.read_data", "data.DataReader.read_data"], "methods", ["home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.DataReader.read_dict", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.DataReader.read_dict", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.DataReader.read_data", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.DataReader.read_data", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.DataReader.read_data"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ":", "str", ")", ":", "\n", "        ", "entity_dict_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'entities.dict'", ")", "\n", "relation_dict_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'relations.dict'", ")", "\n", "train_data_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train.txt'", ")", "\n", "valid_data_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'valid.txt'", ")", "\n", "test_data_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'test.txt'", ")", "\n", "\n", "self", ".", "entity_dict", "=", "self", ".", "read_dict", "(", "entity_dict_path", ")", "\n", "self", ".", "relation_dict", "=", "self", ".", "read_dict", "(", "relation_dict_path", ")", "\n", "\n", "self", ".", "train_data", "=", "self", ".", "read_data", "(", "train_data_path", ",", "self", ".", "entity_dict", ",", "self", ".", "relation_dict", ")", "\n", "self", ".", "valid_data", "=", "self", ".", "read_data", "(", "valid_data_path", ",", "self", ".", "entity_dict", ",", "self", ".", "relation_dict", ")", "\n", "self", ".", "test_data", "=", "self", ".", "read_data", "(", "test_data_path", ",", "self", ".", "entity_dict", ",", "self", ".", "relation_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.DataReader.read_dict": [[36, 49], ["open", "line.strip().split", "int", "line.strip"], "methods", ["None"], ["", "def", "read_dict", "(", "self", ",", "dict_path", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Read entity / relation dict.\n        Format: dict({id: entity / relation})\n        \"\"\"", "\n", "\n", "element_dict", "=", "{", "}", "\n", "with", "open", "(", "dict_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "id_", ",", "element", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "element_dict", "[", "element", "]", "=", "int", "(", "id_", ")", "\n", "\n", "", "", "return", "element_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.DataReader.read_data": [[50, 60], ["open", "line.strip().split", "triples.append", "line.strip"], "methods", ["None"], ["", "def", "read_data", "(", "self", ",", "data_path", ":", "str", ",", "entity_dict", ":", "Dict", "[", "str", ",", "int", "]", ",", "relation_dict", ":", "Dict", "[", "str", ",", "int", "]", ")", ":", "\n", "        ", "\"\"\"\n        Read train / valid / test data.\n        \"\"\"", "\n", "triples", "=", "[", "]", "\n", "with", "open", "(", "data_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "head", ",", "relation", ",", "tail", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "triples", ".", "append", "(", "(", "entity_dict", "[", "head", "]", ",", "relation_dict", "[", "relation", "]", ",", "entity_dict", "[", "tail", "]", ")", ")", "\n", "", "", "return", "triples", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.TrainDataset.__init__": [[63, 79], ["len", "len", "len", "data.TrainDataset.two_tuple_count"], "methods", ["home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.TrainDataset.two_tuple_count"], ["    ", "def", "__init__", "(", "self", ",", "data_reader", ":", "DataReader", ",", "neg_size", ":", "int", ",", "batch_type", ":", "BatchType", ")", ":", "\n", "        ", "\"\"\"\n        Dataset for training, inherits `torch.utils.data.Dataset`.\n        Args:\n            data_reader: DataReader,\n            neg_size: int, negative sample size.\n        \"\"\"", "\n", "\n", "self", ".", "triples", "=", "data_reader", ".", "train_data", "\n", "self", ".", "len", "=", "len", "(", "self", ".", "triples", ")", "\n", "self", ".", "num_entity", "=", "len", "(", "data_reader", ".", "entity_dict", ")", "\n", "self", ".", "num_relation", "=", "len", "(", "data_reader", ".", "relation_dict", ")", "\n", "self", ".", "neg_size", "=", "neg_size", "\n", "self", ".", "batch_type", "=", "batch_type", "\n", "\n", "self", ".", "hr_map", ",", "self", ".", "tr_map", ",", "self", ".", "hr_freq", ",", "self", ".", "tr_freq", "=", "self", ".", "two_tuple_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.TrainDataset.__len__": [[80, 82], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.TrainDataset.__getitem__": [[83, 125], ["torch.sqrt", "torch.LongTensor", "torch.from_numpy", "numpy.random.randint", "torch.from_numpy.append", "numpy.concatenate", "torch.Tensor", "numpy.in1d", "numpy.in1d", "ValueError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Returns a positive sample and `self.neg_size` negative samples.\n        \"\"\"", "\n", "pos_triple", "=", "self", ".", "triples", "[", "idx", "]", "\n", "head", ",", "rel", ",", "tail", "=", "pos_triple", "\n", "\n", "subsampling_weight", "=", "self", ".", "hr_freq", "[", "(", "head", ",", "rel", ")", "]", "+", "self", ".", "tr_freq", "[", "(", "tail", ",", "rel", ")", "]", "\n", "subsampling_weight", "=", "torch", ".", "sqrt", "(", "1", "/", "torch", ".", "Tensor", "(", "[", "subsampling_weight", "]", ")", ")", "\n", "\n", "neg_triples", "=", "[", "]", "\n", "neg_size", "=", "0", "\n", "\n", "while", "neg_size", "<", "self", ".", "neg_size", ":", "\n", "            ", "neg_triples_tmp", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_entity", ",", "size", "=", "self", ".", "neg_size", "*", "2", ")", "\n", "if", "self", ".", "batch_type", "==", "BatchType", ".", "HEAD_BATCH", ":", "\n", "                ", "mask", "=", "np", ".", "in1d", "(", "\n", "neg_triples_tmp", ",", "\n", "self", ".", "tr_map", "[", "(", "tail", ",", "rel", ")", "]", ",", "\n", "assume_unique", "=", "True", ",", "\n", "invert", "=", "True", "\n", ")", "\n", "", "elif", "self", ".", "batch_type", "==", "BatchType", ".", "TAIL_BATCH", ":", "\n", "                ", "mask", "=", "np", ".", "in1d", "(", "\n", "neg_triples_tmp", ",", "\n", "self", ".", "hr_map", "[", "(", "head", ",", "rel", ")", "]", ",", "\n", "assume_unique", "=", "True", ",", "\n", "invert", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Invalid BatchType: {}'", ".", "format", "(", "self", ".", "batch_type", ")", ")", "\n", "\n", "", "neg_triples_tmp", "=", "neg_triples_tmp", "[", "mask", "]", "\n", "neg_triples", ".", "append", "(", "neg_triples_tmp", ")", "\n", "neg_size", "+=", "neg_triples_tmp", ".", "size", "\n", "\n", "", "neg_triples", "=", "np", ".", "concatenate", "(", "neg_triples", ")", "[", ":", "self", ".", "neg_size", "]", "\n", "\n", "pos_triple", "=", "torch", ".", "LongTensor", "(", "pos_triple", ")", "\n", "neg_triples", "=", "torch", ".", "from_numpy", "(", "neg_triples", ")", "\n", "\n", "return", "pos_triple", ",", "neg_triples", ",", "subsampling_weight", ",", "self", ".", "batch_type", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.TrainDataset.collate_fn": [[126, 133], ["torch.stack", "torch.stack", "torch.cat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "data", ")", ":", "\n", "        ", "positive_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "0", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "negative_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "1", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "subsample_weight", "=", "torch", ".", "cat", "(", "[", "_", "[", "2", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "batch_type", "=", "data", "[", "0", "]", "[", "3", "]", "\n", "return", "positive_sample", ",", "negative_sample", ",", "subsample_weight", ",", "batch_type", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.TrainDataset.two_tuple_count": [[134, 171], ["tr_map.keys", "hr_map.keys", "hr_map[].add", "tr_map[].add", "numpy.array", "numpy.array", "hr_map.keys", "set", "tr_map.keys", "set", "hr_freq.keys", "tr_freq.keys", "list", "list"], "methods", ["None"], ["", "def", "two_tuple_count", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return two dict:\n        dict({(h, r): [t1, t2, ...]}),\n        dict({(t, r): [h1, h2, ...]}),\n        \"\"\"", "\n", "hr_map", "=", "{", "}", "\n", "hr_freq", "=", "{", "}", "\n", "tr_map", "=", "{", "}", "\n", "tr_freq", "=", "{", "}", "\n", "\n", "init_cnt", "=", "3", "\n", "for", "head", ",", "rel", ",", "tail", "in", "self", ".", "triples", ":", "\n", "            ", "if", "(", "head", ",", "rel", ")", "not", "in", "hr_map", ".", "keys", "(", ")", ":", "\n", "                ", "hr_map", "[", "(", "head", ",", "rel", ")", "]", "=", "set", "(", ")", "\n", "\n", "", "if", "(", "tail", ",", "rel", ")", "not", "in", "tr_map", ".", "keys", "(", ")", ":", "\n", "                ", "tr_map", "[", "(", "tail", ",", "rel", ")", "]", "=", "set", "(", ")", "\n", "\n", "", "if", "(", "head", ",", "rel", ")", "not", "in", "hr_freq", ".", "keys", "(", ")", ":", "\n", "                ", "hr_freq", "[", "(", "head", ",", "rel", ")", "]", "=", "init_cnt", "\n", "\n", "", "if", "(", "tail", ",", "rel", ")", "not", "in", "tr_freq", ".", "keys", "(", ")", ":", "\n", "                ", "tr_freq", "[", "(", "tail", ",", "rel", ")", "]", "=", "init_cnt", "\n", "\n", "", "hr_map", "[", "(", "head", ",", "rel", ")", "]", ".", "add", "(", "tail", ")", "\n", "tr_map", "[", "(", "tail", ",", "rel", ")", "]", ".", "add", "(", "head", ")", "\n", "hr_freq", "[", "(", "head", ",", "rel", ")", "]", "+=", "1", "\n", "tr_freq", "[", "(", "tail", ",", "rel", ")", "]", "+=", "1", "\n", "\n", "", "for", "key", "in", "tr_map", ".", "keys", "(", ")", ":", "\n", "            ", "tr_map", "[", "key", "]", "=", "np", ".", "array", "(", "list", "(", "tr_map", "[", "key", "]", ")", ")", "\n", "\n", "", "for", "key", "in", "hr_map", ".", "keys", "(", ")", ":", "\n", "            ", "hr_map", "[", "key", "]", "=", "np", ".", "array", "(", "list", "(", "hr_map", "[", "key", "]", ")", ")", "\n", "\n", "", "return", "hr_map", ",", "tr_map", ",", "hr_freq", ",", "tr_freq", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.TestDataset.__init__": [[174, 188], ["set", "len", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_reader", ":", "DataReader", ",", "mode", ":", "ModeType", ",", "batch_type", ":", "BatchType", ")", ":", "\n", "        ", "self", ".", "triple_set", "=", "set", "(", "data_reader", ".", "train_data", "+", "data_reader", ".", "valid_data", "+", "data_reader", ".", "test_data", ")", "\n", "if", "mode", "==", "ModeType", ".", "VALID", ":", "\n", "            ", "self", ".", "triples", "=", "data_reader", ".", "valid_data", "\n", "", "elif", "mode", "==", "ModeType", ".", "TEST", ":", "\n", "            ", "self", ".", "triples", "=", "data_reader", ".", "test_data", "\n", "\n", "", "self", ".", "len", "=", "len", "(", "self", ".", "triples", ")", "\n", "\n", "self", ".", "num_entity", "=", "len", "(", "data_reader", ".", "entity_dict", ")", "\n", "self", ".", "num_relation", "=", "len", "(", "data_reader", ".", "relation_dict", ")", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "batch_type", "=", "batch_type", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.TestDataset.__len__": [[189, 191], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.TestDataset.__getitem__": [[192, 213], ["torch.LongTensor", "tmp[].float", "torch.LongTensor", "ValueError", "range", "range"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "head", ",", "relation", ",", "tail", "=", "self", ".", "triples", "[", "idx", "]", "\n", "\n", "if", "self", ".", "batch_type", "==", "BatchType", ".", "HEAD_BATCH", ":", "\n", "            ", "tmp", "=", "[", "(", "0", ",", "rand_head", ")", "if", "(", "rand_head", ",", "relation", ",", "tail", ")", "not", "in", "self", ".", "triple_set", "\n", "else", "(", "-", "1", ",", "head", ")", "for", "rand_head", "in", "range", "(", "self", ".", "num_entity", ")", "]", "\n", "tmp", "[", "head", "]", "=", "(", "0", ",", "head", ")", "\n", "", "elif", "self", ".", "batch_type", "==", "BatchType", ".", "TAIL_BATCH", ":", "\n", "            ", "tmp", "=", "[", "(", "0", ",", "rand_tail", ")", "if", "(", "head", ",", "relation", ",", "rand_tail", ")", "not", "in", "self", ".", "triple_set", "\n", "else", "(", "-", "1", ",", "tail", ")", "for", "rand_tail", "in", "range", "(", "self", ".", "num_entity", ")", "]", "\n", "tmp", "[", "tail", "]", "=", "(", "0", ",", "tail", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'negative batch type {} not supported'", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "\n", "", "tmp", "=", "torch", ".", "LongTensor", "(", "tmp", ")", "\n", "filter_bias", "=", "tmp", "[", ":", ",", "0", "]", ".", "float", "(", ")", "\n", "negative_sample", "=", "tmp", "[", ":", ",", "1", "]", "\n", "\n", "positive_sample", "=", "torch", ".", "LongTensor", "(", "(", "head", ",", "relation", ",", "tail", ")", ")", "\n", "\n", "return", "positive_sample", ",", "negative_sample", ",", "filter_bias", ",", "self", ".", "batch_type", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.TestDataset.collate_fn": [[214, 221], ["torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "data", ")", ":", "\n", "        ", "positive_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "0", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "negative_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "1", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "filter_bias", "=", "torch", ".", "stack", "(", "[", "_", "[", "2", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "mode", "=", "data", "[", "0", "]", "[", "3", "]", "\n", "return", "positive_sample", ",", "negative_sample", ",", "filter_bias", ",", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.BidirectionalOneShotIterator.__init__": [[224, 228], ["data.BidirectionalOneShotIterator.one_shot_iterator", "data.BidirectionalOneShotIterator.one_shot_iterator"], "methods", ["home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.BidirectionalOneShotIterator.one_shot_iterator", "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.BidirectionalOneShotIterator.one_shot_iterator"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_head", ",", "dataloader_tail", ")", ":", "\n", "        ", "self", ".", "iterator_head", "=", "self", ".", "one_shot_iterator", "(", "dataloader_head", ")", "\n", "self", ".", "iterator_tail", "=", "self", ".", "one_shot_iterator", "(", "dataloader_tail", ")", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.BidirectionalOneShotIterator.__next__": [[229, 236], ["next", "next"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "step", "+=", "1", "\n", "if", "self", ".", "step", "%", "2", "==", "0", ":", "\n", "            ", "data", "=", "next", "(", "self", ".", "iterator_head", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "next", "(", "self", ".", "iterator_tail", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MIRALab-USTC_KGE-HAKE.codes.data.BidirectionalOneShotIterator.one_shot_iterator": [[237, 245], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "one_shot_iterator", "(", "dataloader", ")", ":", "\n", "        ", "'''\n        Transform a PyTorch Dataloader into python iterator\n        '''", "\n", "while", "True", ":", "\n", "            ", "for", "data", "in", "dataloader", ":", "\n", "                ", "yield", "data", "\n", "", "", "", "", ""]]}