{"home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.tests.test_baseRunner.TestBaseRunner.__init__": [[11, 15], ["covid_county_prediction.BaseRunner.__init__"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "models", ",", "loss_fn", ",", "optimizers", ",", "best_metric_name", "=", "'acc1'", ",", "\n", "should_minimize_best_metric", "=", "False", ",", "debug", "=", "True", ")", ":", "\n", "        ", "super", "(", "TestBaseRunner", ",", "self", ")", ".", "__init__", "(", "models", ",", "loss_fn", ",", "optimizers", ",", "\n", "best_metric_name", ",", "should_minimize_best_metric", ",", "debug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.tests.test_baseRunner.TestBaseRunner.train_batch_and_get_metrics": [[16, 26], ["test_baseRunner.TestBaseRunner.loss_fn", "test_baseRunner.TestBaseRunner.accuracy", "test_baseRunner.TestBaseRunner.optimizers[].zero_grad", "test_baseRunner.TestBaseRunner.backward", "test_baseRunner.TestBaseRunner.optimizers[].step", "test_baseRunner.TestBaseRunner.mean().item", "test_baseRunner.TestBaseRunner.mean"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.tests.test_baseRunner.TestBaseRunner.accuracy"], ["", "def", "train_batch_and_get_metrics", "(", "self", ",", "batch", ")", ":", "\n", "       ", "out", "=", "self", ".", "nets", "[", "0", "]", "(", "batch", "[", "0", "]", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "out", ",", "batch", "[", "1", "]", ")", "\n", "acc1", ",", "acc5", "=", "self", ".", "accuracy", "(", "out", ",", "batch", "[", "1", "]", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "self", ".", "optimizers", "[", "0", "]", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizers", "[", "0", "]", ".", "step", "(", ")", "\n", "\n", "return", "[", "(", "'loss'", ",", "loss", ".", "mean", "(", ")", ".", "item", "(", ")", ")", ",", "(", "'acc1'", ",", "acc1", ")", ",", "(", "'acc5'", ",", "acc5", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.tests.test_baseRunner.TestBaseRunner.test_batch_and_get_metrics": [[27, 33], ["test_baseRunner.TestBaseRunner.loss_fn", "test_baseRunner.TestBaseRunner.accuracy", "test_baseRunner.TestBaseRunner.mean().item", "test_baseRunner.TestBaseRunner.mean"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.tests.test_baseRunner.TestBaseRunner.accuracy"], ["", "def", "test_batch_and_get_metrics", "(", "self", ",", "batch", ")", ":", "\n", "        ", "out", "=", "self", ".", "nets", "[", "0", "]", "(", "batch", "[", "0", "]", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "out", ",", "batch", "[", "1", "]", ")", "\n", "acc1", ",", "acc5", "=", "self", ".", "accuracy", "(", "out", ",", "batch", "[", "1", "]", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "return", "[", "(", "'loss'", ",", "loss", ".", "mean", "(", ")", ".", "item", "(", ")", ")", ",", "(", "'acc1'", ",", "acc1", ")", ",", "(", "'acc5'", ",", "acc5", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.tests.test_baseRunner.TestBaseRunner.accuracy": [[34, 50], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t.t", "pred.t.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_().item", "target.view", "correct[].view().float", "correct[].view().float().sum.mul_", "correct[].view"], "methods", ["None"], ["", "def", "accuracy", "(", "self", ",", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "        ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "#taken from https://github.com/pytorch/examples/blob/master/imagenet/main.py", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "                ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ".", "item", "(", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.__init__": [[15, 51], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "CovidRunner.CovidRunner.get_optimizer", "deepcovidnet.add", "deepcovidnet.add", "deepcovidnet.BaseRunner.BaseRunner.__init__", "net.cuda.cuda.cuda", "net.cuda.cuda.parameters", "net.cuda.cuda.", "CovidRunner.CovidRunner.get_optimizer", "CovidRunner.CovidRunner.writer.add_graph", "net.cuda.cuda.parameters", "sample_batch[].cuda"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_optimizer", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_optimizer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "exp_name", ",", "net", ",", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", "load_path", "=", "None", ",", "sample_batch", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "is_optimizer_set", "=", "False", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "net", "=", "net", ".", "cuda", "(", ")", "\n", "if", "sample_batch", ":", "\n", "                ", "for", "k", "in", "sample_batch", ":", "\n", "                    ", "sample_batch", "[", "k", "]", "=", "sample_batch", "[", "k", "]", ".", "cuda", "(", ")", "\n", "\n", "", "", "", "optimizer", "=", "self", ".", "get_optimizer", "(", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "hyperparams", ".", "add", "(", "\n", "name", "=", "'optim_name'", ",", "val", "=", "optimizer", ".", "__class__", ".", "__name__", ",", "hp_range", "=", "None", ",", "\n", "hp_type", "=", "str", ",", "level", "=", "HPLevel", ".", "NONE", "\n", ")", "\n", "\n", "if", "sample_batch", ":", "\n", "            ", "net", "(", "sample_batch", ")", "# forward pass to set embedding module", "\n", "optimizer", "=", "self", ".", "get_optimizer", "(", "net", ".", "parameters", "(", ")", ")", "\n", "self", ".", "is_optimizer_set", "=", "True", "\n", "\n", "", "super", "(", "CovidRunner", ",", "self", ")", ".", "__init__", "(", "\n", "nets", "=", "[", "net", "]", ",", "\n", "loss_fn", "=", "loss_fn", ",", "\n", "optimizers", "=", "[", "optimizer", "]", ",", "\n", "best_metric_name", "=", "'acc'", ",", "\n", "should_minimize_best_metric", "=", "False", ",", "\n", "exp_name", "=", "exp_name", ",", "\n", "load_paths", "=", "[", "load_path", "]", "\n", ")", "\n", "\n", "if", "sample_batch", ":", "\n", "            ", "self", ".", "writer", ".", "add_graph", "(", "self", ".", "nets", "[", "0", "]", ",", "sample_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_metrics": [[52, 80], ["CovidRunner.CovidRunner.loss_fn", "CovidRunner.CovidRunner.get_class_pred", "CovidRunner.CovidRunner._get_accuracy", "CovidRunner.CovidRunner.float().mean().item", "CovidRunner.CovidRunner.get_classwise_recall_metrics", "CovidRunner.CovidRunner._get_extra_metrics", "CovidRunner.CovidRunner.float().mean", "CovidRunner.CovidRunner.mean().item", "CovidRunner.CovidRunner.float", "CovidRunner.CovidRunner.mean"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_class_pred", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner._get_accuracy", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_classwise_recall_metrics", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner._get_extra_metrics"], ["", "", "def", "get_metrics", "(", "self", ",", "pred", ",", "labels", ",", "get_loss", "=", "True", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss_fn", "(", "pred", ",", "labels", ")", "\n", "\n", "class_pred", "=", "self", ".", "get_class_pred", "(", "pred", ")", "\n", "\n", "acc", "=", "self", ".", "_get_accuracy", "(", "class_pred", ",", "labels", ")", "\n", "\n", "class_pred_mean", "=", "class_pred", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "# class_pred_std  = class_pred.float().std().item()", "\n", "\n", "# soi_mean = self.nets[0].deep_fm.second_order_interactions.mean().item()", "\n", "# soi_std  = self.nets[0].deep_fm.second_order_interactions.std().item()", "\n", "\n", "metrics", "=", "[", "\n", "(", "'loss'", ",", "loss", ".", "mean", "(", ")", ".", "item", "(", ")", ")", ",", "\n", "(", "'acc'", ",", "acc", ")", ",", "\n", "(", "'class_preds_mean'", ",", "class_pred_mean", ")", "\n", "# ('class_preds_std', class_pred_std),", "\n", "# ('soi_mean', soi_mean),", "\n", "# ('soi_std', soi_std)", "\n", "]", "+", "self", ".", "get_classwise_recall_metrics", "(", "class_pred", ",", "labels", ")", "\n", "\n", "metrics", "=", "metrics", "+", "self", ".", "_get_extra_metrics", "(", "pred", ",", "labels", ")", "\n", "\n", "if", "get_loss", ":", "\n", "            ", "return", "loss", ",", "metrics", "\n", "", "else", ":", "\n", "            ", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.train_batch_and_get_metrics": [[81, 103], ["batch_dict.pop", "CovidRunner.CovidRunner.get_metrics", "CovidRunner.CovidRunner.optimizers[].zero_grad", "loss.backward", "CovidRunner.CovidRunner.optimizers[].step", "CovidRunner.CovidRunner.get_optimizer", "CovidRunner.CovidRunner.nets[].parameters"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_metrics", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_optimizer"], ["", "", "def", "train_batch_and_get_metrics", "(", "self", ",", "batch_dict", ")", ":", "\n", "# forward pass", "\n", "        ", "labels", "=", "batch_dict", ".", "pop", "(", "dataset_config", ".", "labels_key", ")", "\n", "pred", "=", "self", ".", "nets", "[", "0", "]", "(", "batch_dict", ")", "\n", "\n", "if", "not", "self", ".", "is_optimizer_set", ":", "\n", "            ", "self", ".", "optimizers", "[", "0", "]", "=", "self", ".", "get_optimizer", "(", "\n", "self", ".", "nets", "[", "0", "]", ".", "parameters", "(", ")", "\n", ")", "# add parameters of embedding module too", "\n", "self", ".", "is_optimizer_set", "=", "True", "\n", "\n", "# calculate metrics", "\n", "", "loss", ",", "metrics", "=", "self", ".", "get_metrics", "(", "pred", ",", "labels", ",", "get_loss", "=", "True", ")", "\n", "\n", "# backward pass", "\n", "self", ".", "optimizers", "[", "0", "]", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# update weights", "\n", "self", ".", "optimizers", "[", "0", "]", ".", "step", "(", ")", "\n", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_optimizer": [[104, 110], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam"], "methods", ["None"], ["", "def", "get_optimizer", "(", "self", ",", "params", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", ",", "\n", "lr", "=", "hyperparams", ".", "lr", ",", "\n", "# momentum=hyperparams.momentum,", "\n", "weight_decay", "=", "hyperparams", ".", "weight_decay", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.test_batch_and_get_metrics": [[112, 121], ["batch_dict.pop", "CovidRunner.CovidRunner.get_metrics", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "batch_dict[].cuda"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_metrics"], ["", "def", "test_batch_and_get_metrics", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "for", "k", "in", "batch_dict", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "batch_dict", "[", "k", "]", "=", "batch_dict", "[", "k", "]", ".", "cuda", "(", ")", "\n", "\n", "", "", "labels", "=", "batch_dict", ".", "pop", "(", "dataset_config", ".", "labels_key", ")", "\n", "pred", "=", "self", ".", "nets", "[", "0", "]", "(", "batch_dict", ")", "\n", "\n", "return", "self", ".", "get_metrics", "(", "pred", ",", "labels", ",", "get_loss", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner._get_accuracy": [[122, 124], ["None"], "methods", ["None"], ["", "def", "_get_accuracy", "(", "self", ",", "class_pred", ",", "labels", ")", ":", "\n", "        ", "return", "(", "class_pred", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_batch_size": [[125, 127], ["list", "batch.keys"], "methods", ["None"], ["", "def", "get_batch_size", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "batch", "[", "list", "(", "batch", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_class_pred": [[128, 130], ["pred.argmax"], "methods", ["None"], ["", "def", "get_class_pred", "(", "self", ",", "pred", ")", ":", "\n", "        ", "return", "pred", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner._get_extra_metrics": [[131, 133], ["None"], "methods", ["None"], ["", "def", "_get_extra_metrics", "(", "self", ",", "pred", ",", "labels", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_classwise_recall_metrics": [[134, 145], ["range", "metrics.append"], "methods", ["None"], ["", "def", "get_classwise_recall_metrics", "(", "self", ",", "class_pred", ",", "labels", ")", ":", "\n", "        ", "metrics", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "dataset_config", ".", "num_classes", ")", ":", "\n", "            ", "tp", "=", "(", "(", "class_pred", "==", "labels", ")", "&", "(", "class_pred", "==", "c", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "=", "(", "labels", "==", "c", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "recall", "=", "tp", "/", "total", "if", "total", "else", "(", "1", "if", "tp", "else", "0", ")", "\n", "\n", "metrics", ".", "append", "(", "(", "f'class_{c}_recall'", ",", "recall", ")", ")", "\n", "\n", "", "return", "metrics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.get_default_net": [[10, 12], ["deepcovidnet.CovidModule.CovidModule"], "function", ["None"], ["def", "get_default_net", "(", ")", ":", "\n", "    ", "return", "CovidModule", "(", "output_neurons", "=", "dataset_config", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.__init__": [[19, 105], ["deepcovidnet.DataLoader.DataLoader.__init__", "CovidCountyDataset.CovidCountyDataset._load_cache_from_disk", "CovidCountyDataset.CovidCountyDataset.create_hypothetical_features", "range", "deepcovidnet.FeaturesList.FeaturesList", "deepcovidnet.FeaturesList.FeaturesList", "deepcovidnet.FeaturesList.FeaturesList", "deepcovidnet.FeaturesList.FeaturesList", "cur_labels.dropna.dropna.dropna", "datetime.timedelta", "datetime.timedelta", "datetime.timedelta", "CovidCountyDataset.CovidCountyDataset.load_census_data", "CovidCountyDataset.CovidCountyDataset.load_pop_dens_ccvi", "CovidCountyDataset.CovidCountyDataset.load_sg_patterns_monthly", "CovidCountyDataset.CovidCountyDataset.load_sg_social_distancing", "CovidCountyDataset.CovidCountyDataset.load_num_cases", "CovidCountyDataset.CovidCountyDataset.load_dilation_index", "CovidCountyDataset.CovidCountyDataset.load_reproduction_number", "CovidCountyDataset.CovidCountyDataset.load_sg_mobility_incoming", "CovidCountyDataset.CovidCountyDataset.load_countywise_cumulative_cases", "len", "len", "len", "CovidCountyDataset.CovidCountyDataset.means_stds.append", "len", "datetime.timedelta", "datetime.timedelta", "CovidCountyDataset.CovidCountyDataset.labels.append", "datetime.timedelta", "len", "features[].normalize", "CovidCountyDataset.CovidCountyDataset.load_num_cases", "CovidCountyDataset.CovidCountyDataset.labels_lens.append", "CovidCountyDataset.CovidCountyDataset.labels_lens.append", "datetime.timedelta"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset._load_cache_from_disk", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.HypotheticalDatasets.HypotheticalDataset.create_hypothetical_features", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_census_data", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_pop_dens_ccvi", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_sg_patterns_monthly", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_sg_social_distancing", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_num_cases", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_dilation_index", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_reproduction_number", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_sg_mobility_incoming", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_countywise_cumulative_cases", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.ConstantFeatures.ConstantFeatures.normalize", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_num_cases"], ["    ", "def", "__init__", "(", "self", ",", "data_start_date", ",", "data_end_date", ",", "means_stds", ",", "\n", "use_cache", "=", "True", ",", "load_features", "=", "False", ")", ":", "\n", "        ", "super", "(", "CovidCountyDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "start_date", "=", "data_start_date", "\n", "self", ".", "end_date", "=", "data_end_date", "\n", "self", ".", "use_cache", "=", "use_cache", "\n", "self", ".", "is_cached", "=", "False", "\n", "self", ".", "means_stds", "=", "means_stds", "\n", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n", "self", ".", "_load_cache_from_disk", "(", ")", "\n", "\n", "if", "load_features", "or", "(", "not", "use_cache", ")", ":", "\n", "            ", "training_data_end_date", "=", "self", ".", "end_date", "-", "timedelta", "(", "hyperparams", ".", "projection_days", ")", "\n", "\n", "training_data_start_date", "=", "self", ".", "start_date", "-", "timedelta", "(", "hyperparams", ".", "projection_days", ")", "-", "timedelta", "(", "hyperparams", ".", "past_days_to_consider", ")", "\n", "\n", "features", "=", "[", "\n", "self", ".", "load_census_data", "(", ")", ",", "\n", "self", ".", "load_pop_dens_ccvi", "(", ")", ",", "\n", "self", ".", "load_sg_patterns_monthly", "(", "training_data_start_date", ",", "training_data_end_date", ")", ",", "\n", "# self.read_weather_data(training_data_start_date, training_data_end_date),", "\n", "self", ".", "load_sg_social_distancing", "(", "training_data_start_date", ",", "training_data_end_date", ")", ",", "\n", "self", ".", "load_num_cases", "(", "training_data_start_date", ",", "training_data_end_date", ")", ",", "\n", "self", ".", "load_dilation_index", "(", "training_data_start_date", ",", "training_data_end_date", ")", ",", "\n", "self", ".", "load_reproduction_number", "(", "training_data_start_date", ",", "training_data_end_date", ")", ",", "\n", "self", ".", "load_sg_mobility_incoming", "(", "training_data_start_date", ",", "training_data_end_date", ")", ",", "\n", "self", ".", "load_countywise_cumulative_cases", "(", "training_data_start_date", ",", "training_data_end_date", ")", "\n", "]", "\n", "\n", "features", "=", "self", ".", "create_hypothetical_features", "(", "features", ")", "\n", "\n", "if", "means_stds", "is", "None", ":", "\n", "                ", "means_stds", "=", "[", "(", "None", ",", "None", ")", "]", "*", "len", "(", "features", ")", "\n", "\n", "", "assert", "len", "(", "means_stds", ")", "==", "len", "(", "features", ")", "\n", "\n", "self", ".", "means_stds", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "features", ")", ")", ":", "\n", "                ", "self", ".", "means_stds", ".", "append", "(", "\n", "features", "[", "i", "]", ".", "normalize", "(", "\n", "mean", "=", "means_stds", "[", "i", "]", "[", "0", "]", ",", "std", "=", "means_stds", "[", "i", "]", "[", "1", "]", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "features", "=", "FeaturesList", "(", "features", ")", "\n", "\n", "assert", "len", "(", "self", ".", "features", ")", "==", "config", ".", "num_features", "\n", "\n", "", "if", "self", ".", "is_cached", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "labels_lens", "=", "[", "]", "\n", "\n", "# load all labels", "\n", "d", "=", "self", ".", "start_date", "\n", "self", ".", "labels", "=", "[", "]", "\n", "while", "d", "<", "self", ".", "end_date", ":", "\n", "            ", "cur_labels", "=", "self", ".", "load_num_cases", "(", "d", ",", "d", "+", "timedelta", "(", "days", "=", "1", ")", ")", ".", "raw_features", "[", "0", "]", "\n", "cur_labels", "=", "cur_labels", ".", "dropna", "(", ")", "\n", "\n", "cur_end", "=", "d", "-", "timedelta", "(", "hyperparams", ".", "projection_days", ")", "\n", "cur_start", "=", "cur_end", "-", "timedelta", "(", "hyperparams", ".", "past_days_to_consider", ")", "\n", "\n", "if", "cur_labels", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "self", ".", "labels", ".", "append", "(", "\n", "(", "\n", "cur_start", ",", "\n", "cur_end", ",", "\n", "cur_labels", "\n", ")", "\n", ")", "\n", "\n", "if", "self", ".", "labels_lens", ":", "\n", "                    ", "self", ".", "labels_lens", ".", "append", "(", "\n", "self", ".", "labels_lens", "[", "-", "1", "]", "+", "cur_labels", ".", "shape", "[", "0", "]", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "labels_lens", ".", "append", "(", "cur_labels", ".", "shape", "[", "0", "]", ")", "\n", "", "", "d", "+=", "timedelta", "(", "days", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.__len__": [[106, 110], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_cached", ":", "\n", "            ", "return", "len", "(", "self", ".", "cache", ")", "\n", "", "return", "self", ".", "labels_lens", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset._load_cache_from_disk": [[111, 123], ["deepcovidnet.get_cached_tensors_path", "deepcovidnet.get_cached_tensors_path", "deepcovidnet.get_cached_tensors_path", "deepcovidnet.get_cached_tensors_path", "os.path.exists", "torch.load", "Exception"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.CovidCountyDatasetConfig.get_cached_tensors_path", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.CovidCountyDatasetConfig.get_cached_tensors_path", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.CovidCountyDatasetConfig.get_cached_tensors_path", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.CovidCountyDatasetConfig.get_cached_tensors_path", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load"], ["", "@", "timed_logger_decorator", "\n", "def", "_load_cache_from_disk", "(", "self", ")", ":", "\n", "        ", "saved_cache_path", "=", "config", ".", "get_cached_tensors_path", "(", "\n", "self", ".", "start_date", ",", "self", ".", "end_date", "\n", ")", "\n", "\n", "if", "self", ".", "use_cache", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "saved_cache_path", ")", ":", "\n", "                ", "self", ".", "cache", "=", "torch", ".", "load", "(", "saved_cache_path", ")", "\n", "self", ".", "is_cached", "=", "True", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "f'use_cache is True but {saved_cache_path} is absent'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.create_hypothetical_features": [[124, 126], ["None"], "methods", ["None"], ["", "", "", "def", "create_hypothetical_features", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset._classify_label": [[127, 130], ["bisect.bisect_left", "math.ceil", "math.floor"], "methods", ["None"], ["", "def", "_classify_label", "(", "self", ",", "label", ")", ":", "\n", "        ", "assert", "ceil", "(", "label", ")", "==", "floor", "(", "label", ")", "and", "label", "==", "label", "\n", "return", "bisect", ".", "bisect_left", "(", "config", ".", "labels_class_boundaries", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.save_cache_on_disk": [[131, 142], ["tqdm.tqdm.tqdm", "deepcovidnet.get_cached_tensors_path", "deepcovidnet.get_cached_tensors_path", "deepcovidnet.get_cached_tensors_path", "deepcovidnet.get_cached_tensors_path", "range", "len", "len", "open", "torch.save", "len"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.CovidCountyDatasetConfig.get_cached_tensors_path", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.CovidCountyDatasetConfig.get_cached_tensors_path", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.CovidCountyDatasetConfig.get_cached_tensors_path", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.CovidCountyDatasetConfig.get_cached_tensors_path"], ["", "def", "save_cache_on_disk", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "self", ")", ")", ")", ":", "\n", "            ", "self", "[", "i", "]", "# results are automatically cached", "\n", "\n", "", "assert", "len", "(", "self", ".", "cache", ")", "==", "len", "(", "self", ")", "# ensure cache is filled", "\n", "\n", "save_path", "=", "config", ".", "get_cached_tensors_path", "(", "\n", "self", ".", "start_date", ",", "self", ".", "end_date", "\n", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "cache", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.save_means_stds": [[143, 145], ["pickle.dump", "open"], "methods", ["None"], ["", "", "def", "save_means_stds", "(", "self", ",", "file", ")", ":", "\n", "        ", "pickle", ".", "dump", "(", "self", ".", "means_stds", ",", "open", "(", "file", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.__getitem__": [[146, 162], ["bisect.bisect_left", "CovidCountyDataset.CovidCountyDataset._get_tensors"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset._get_tensors"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "idx", "]", "\n", "\n", "", "labels_idx", "=", "bisect", ".", "bisect_left", "(", "self", ".", "labels_lens", ",", "idx", ")", "\n", "if", "self", ".", "labels_lens", "[", "labels_idx", "]", "==", "idx", ":", "\n", "            ", "labels_idx", "+=", "1", "\n", "\n", "", "df_idx", "=", "idx", "-", "(", "labels_idx", ">", "0", ")", "*", "self", ".", "labels_lens", "[", "labels_idx", "-", "1", "]", "\n", "\n", "out", "=", "self", ".", "_get_tensors", "(", "labels_idx", ",", "df_idx", ")", "\n", "\n", "if", "idx", "not", "in", "self", ".", "cache", ":", "\n", "            ", "self", ".", "cache", "[", "idx", "]", "=", "out", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset._get_tensors": [[163, 179], ["CovidCountyDataset.CovidCountyDataset.features.extract_torch_tensors", "torch.cuda.is_available", "CovidCountyDataset.CovidCountyDataset._classify_label", "out[].cuda"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeaturesList.FeaturesList.extract_torch_tensors", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset._classify_label"], ["", "def", "_get_tensors", "(", "self", ",", "labels_idx", ",", "df_idx", ",", "discrete_labels", "=", "True", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", ".", "extract_torch_tensors", "(", "\n", "county_fips", "=", "self", ".", "labels", "[", "labels_idx", "]", "[", "2", "]", ".", "iloc", "[", "df_idx", "]", ".", "name", ",", "\n", "start_date", "=", "self", ".", "labels", "[", "labels_idx", "]", "[", "0", "]", ",", "\n", "end_date", "=", "self", ".", "labels", "[", "labels_idx", "]", "[", "1", "]", "\n", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "for", "k", "in", "out", ":", "\n", "                ", "out", "[", "k", "]", "=", "out", "[", "k", "]", ".", "cuda", "(", ")", "\n", "\n", "", "", "out", "[", "config", ".", "labels_key", "]", "=", "self", ".", "labels", "[", "labels_idx", "]", "[", "2", "]", ".", "values", "[", "df_idx", ",", "0", "]", "\n", "if", "discrete_labels", ":", "\n", "            ", "out", "[", "config", ".", "labels_key", "]", "=", "self", ".", "_classify_label", "(", "out", "[", "config", ".", "labels_key", "]", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_county_fips": [[180, 184], ["bisect.bisect_left"], "methods", ["None"], ["", "def", "get_county_fips", "(", "self", ",", "idx", ")", ":", "\n", "        ", "labels_idx", "=", "bisect", ".", "bisect_left", "(", "self", ".", "labels_lens", ",", "idx", ")", "\n", "df_idx", "=", "idx", "-", "(", "labels_idx", ">", "0", ")", "*", "self", ".", "labels_lens", "[", "labels_idx", "-", "1", "]", "\n", "return", "self", ".", "labels", "[", "labels_idx", "]", "[", "2", "]", ".", "iloc", "[", "df_idx", "]", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for": [[185, 209], ["range", "len", "[].index.get_loc", "CovidCountyDataset.CovidCountyDataset._get_tensors", "CovidCountyDataset.CovidCountyDataset._get_tensors", "CovidCountyDataset.CovidCountyDataset.keys", "CovidCountyDataset.CovidCountyDataset.keys", "out[].unsqueeze", "torch.tensor", "torch.cat", "torch.cat", "int", "temp[].unsqueeze", "torch.tensor", "int"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset._get_tensors", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset._get_tensors"], ["", "def", "get_input_data_for", "(", "self", ",", "fips", ",", "discrete_labels", "=", "True", ")", ":", "\n", "        ", "assert", "fips", "in", "features_config", ".", "county_info", ".", "index", "\n", "\n", "out", "=", "None", "\n", "for", "labels_idx", "in", "range", "(", "len", "(", "self", ".", "labels", ")", ")", ":", "\n", "            ", "if", "fips", "in", "self", ".", "labels", "[", "labels_idx", "]", "[", "2", "]", ".", "index", ":", "\n", "                ", "df_idx", "=", "self", ".", "labels", "[", "labels_idx", "]", "[", "2", "]", ".", "index", ".", "get_loc", "(", "fips", ")", "\n", "if", "out", "is", "None", ":", "\n", "                    ", "out", "=", "self", ".", "_get_tensors", "(", "labels_idx", ",", "df_idx", ",", "discrete_labels", ")", "\n", "for", "k", "in", "out", ":", "\n", "                        ", "if", "k", "!=", "config", ".", "labels_key", ":", "\n", "                            ", "out", "[", "k", "]", "=", "out", "[", "k", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                            ", "out", "[", "k", "]", "=", "torch", ".", "tensor", "(", "[", "int", "(", "out", "[", "k", "]", ")", "]", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "temp", "=", "self", ".", "_get_tensors", "(", "labels_idx", ",", "df_idx", ",", "discrete_labels", ")", "\n", "assert", "out", ".", "keys", "(", ")", "==", "temp", ".", "keys", "(", ")", "\n", "for", "k", "in", "out", ":", "\n", "                        ", "if", "k", "!=", "config", ".", "labels_key", ":", "\n", "                            ", "out", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "out", "[", "k", "]", ",", "temp", "[", "k", "]", ".", "unsqueeze", "(", "0", ")", "]", ")", "\n", "", "else", ":", "\n", "                            ", "out", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "out", "[", "k", "]", ",", "torch", ".", "tensor", "(", "[", "int", "(", "temp", "[", "k", "]", ")", "]", ")", "]", ")", "\n", "\n", "", "", "", "", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.__init__": [[11, 16], ["deepcovidnet.RawFeatures.RawFeatures.__init__"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "raw_features", ",", "feature_name", ":", "str", ",", "start_date", ":", "date", ",", "\n", "interval", ":", "timedelta", ",", "feature_saver", ")", ":", "\n", "        ", "super", "(", "TimeDependentFeatures", ",", "self", ")", ".", "__init__", "(", "raw_features", ",", "feature_name", ",", "feature_saver", ")", "\n", "self", ".", "start_date", "=", "start_date", "\n", "self", ".", "interval", "=", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.get_date": [[17, 20], ["len"], "methods", ["None"], ["", "def", "get_date", "(", "self", ",", "i", ")", ":", "\n", "        ", "assert", "i", ">=", "0", "and", "i", "<", "len", "(", "self", ".", "raw_features", ")", "\n", "return", "self", ".", "start_date", "+", "i", "*", "self", ".", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.get_index": [[21, 32], ["int", "TimeDependentFeatures.TimeDependentFeatures.get_date", "len"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.get_date"], ["", "def", "get_index", "(", "self", ",", "cur_date", ")", ":", "\n", "        ", "does_index_exist", "=", "(", "cur_date", "-", "self", ".", "start_date", ")", ".", "days", "%", "self", ".", "interval", ".", "days", "==", "0", "\n", "\n", "end_date", "=", "self", ".", "get_date", "(", "len", "(", "self", ".", "raw_features", ")", "-", "1", ")", "+", "self", ".", "interval", "\n", "\n", "if", "cur_date", "<", "self", ".", "start_date", "or", "(", "not", "does_index_exist", ")", "or", "(", "end_date", "-", "cur_date", ")", ".", "days", "<", "self", ".", "interval", ".", "days", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "int", "(", "(", "cur_date", "-", "self", ".", "start_date", ")", "/", "self", ".", "interval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.extract_torch_tensor": [[33, 50], ["TimeDependentFeatures.TimeDependentFeatures.get_index", "TimeDependentFeatures.TimeDependentFeatures.get_index", "torch.zeros", "range", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.get_index", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.get_index"], ["", "def", "extract_torch_tensor", "(", "self", ",", "county_fips", ":", "str", ",", "start_date", ":", "date", ",", "\n", "end_date", ":", "date", ")", ":", "\n", "        ", "start_idx", "=", "self", ".", "get_index", "(", "start_date", ")", "\n", "end_idx", "=", "self", ".", "get_index", "(", "end_date", ")", "\n", "\n", "tensor", "=", "torch", ".", "zeros", "(", "end_idx", "-", "start_idx", ",", "self", ".", "raw_features", "[", "0", "]", ".", "shape", "[", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "start_idx", ",", "end_idx", ")", ":", "\n", "            ", "if", "county_fips", "in", "self", ".", "raw_features", "[", "i", "]", ".", "index", ":", "\n", "                ", "np_tensor", "=", "self", ".", "raw_features", "[", "i", "]", ".", "values", "[", "\n", "features_config", ".", "county_to_iloc", "[", "county_fips", "]", "\n", "]", "\n", "\n", "tensor", "[", "i", "-", "start_idx", "]", "=", "torch", ".", "tensor", "(", "np_tensor", ")", "\n", "\n", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.normalize": [[51, 63], ["range", "pandas.concat", "pandas.concat.mean", "pandas.concat.std", "len"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "        ", "if", "(", "mean", "is", "None", ")", "or", "(", "std", "is", "None", ")", ":", "\n", "            ", "concatenated", "=", "pd", ".", "concat", "(", "self", ".", "raw_features", ")", "\n", "", "if", "mean", "is", "None", ":", "\n", "            ", "mean", "=", "concatenated", ".", "mean", "(", ")", "\n", "", "if", "std", "is", "None", ":", "\n", "            ", "std", "=", "concatenated", ".", "std", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "raw_features", ")", ")", ":", "\n", "            ", "self", ".", "raw_features", "[", "i", "]", "=", "(", "(", "self", ".", "raw_features", "[", "i", "]", "-", "mean", ")", "/", "std", ")", ".", "fillna", "(", "0", ")", "\n", "\n", "", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.get_feature_name": [[64, 66], ["None"], "methods", ["None"], ["", "def", "get_feature_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "feature_name", "+", "'__'", "+", "self", ".", "raw_features", "[", "0", "]", ".", "columns", "[", "idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.__init__": [[22, 54], ["isinstance", "isinstance", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "deepcovidnet.AverageMeter", "deepcovidnet.AverageMeter", "deepcovidnet.AverageMeter", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "deepcovidnet.get_tensorboard_dir", "deepcovidnet.get_tensorboard_dir", "deepcovidnet.get_tensorboard_dir", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "range", "range", "loss_fn.cuda.cuda.cuda", "range", "len", "len", "BaseRunner.BaseRunner.nets[].cuda", "len", "BaseRunner.BaseRunner.load_model"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.load_model"], ["    ", "def", "__init__", "(", "\n", "self", ",", "nets", ",", "loss_fn", ",", "optimizers", ",", "best_metric_name", ",", "\n", "should_minimize_best_metric", ",", "exp_name", ",", "load_paths", "=", "None", "\n", ")", ":", "\n", "        ", "assert", "isinstance", "(", "nets", ",", "list", ")", ",", "'nets must be a list'", "\n", "assert", "isinstance", "(", "optimizers", ",", "list", ")", ",", "'optimizers must be a list'", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "config", ".", "get_tensorboard_dir", "(", "exp_name", ")", ")", "\n", "self", ".", "nets", "=", "nets", "\n", "self", ".", "name", "=", "self", ".", "__class__", ".", "__name__", "\n", "self", ".", "best_metric_name", "=", "best_metric_name", "\n", "self", ".", "best_compare", "=", "-", "1", "if", "should_minimize_best_metric", "else", "1", "\n", "self", ".", "best_metric_val", "=", "-", "self", ".", "best_compare", "*", "100000", "\n", "self", ".", "best_meter", "=", "utils", ".", "AverageMeter", "(", "'best_metric'", ")", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "self", ".", "optimizers", "=", "optimizers", "\n", "self", ".", "exp_name", "=", "exp_name", "\n", "self", ".", "lr_schedulers", "=", "[", "lr_scheduler", ".", "StepLR", "(", "optimizers", "[", "i", "]", ",", "hyperparams", ".", "lr_decay_step_size", ",", "hyperparams", ".", "lr_decay_factor", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "optimizers", ")", ")", "]", "\n", "self", ".", "global_step", "=", "0", "\n", "\n", "if", "load_paths", "is", "not", "None", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "load_paths", ")", ")", ":", "\n", "                ", "if", "load_paths", "[", "i", "]", ":", "\n", "                    ", "self", ".", "load_model", "(", "self", ".", "nets", "[", "i", "]", ",", "load_paths", "[", "i", "]", ")", "\n", "\n", "", "", "", "if", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nets", ")", ")", ":", "\n", "                ", "self", ".", "nets", "[", "i", "]", "=", "self", ".", "nets", "[", "i", "]", ".", "cuda", "(", ")", "\n", "\n", "", "loss_fn", "=", "loss_fn", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.load_model": [[55, 67], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "logging.info", "deepcovidnet.load", "deepcovidnet.load", "deepcovidnet.load", "logging.info", "str"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load"], ["", "", "def", "load_model", "(", "self", ",", "model", ",", "path", ",", "load_hyperparams", "=", "True", ")", ":", "\n", "        ", "d", "=", "torch", ".", "load", "(", "path", ")", "\n", "model", ".", "load_state_dict", "(", "d", "[", "'state_dict'", "]", ")", "\n", "logging", ".", "info", "(", "'Loading '", "+", "d", "[", "'arch'", "]", "+", "' where '", "+", "d", "[", "'best_metric_name'", "]", "+", "' was '", "+", "str", "(", "d", "[", "'best_metric_val'", "]", ")", "+", "'...'", ")", "\n", "if", "(", "d", "[", "'best_metric_name'", "]", "==", "self", ".", "best_metric_name", ")", ":", "\n", "            ", "self", ".", "best_metric_val", "=", "d", "[", "'best_metric_val'", "]", "\n", "\n", "", "if", "load_hyperparams", "and", "'hyperparams'", "in", "d", ":", "\n", "            ", "hyperparams", ".", "load", "(", "d", "[", "'hyperparams'", "]", ")", "\n", "logging", ".", "info", "(", "f'Loading hyperparams: {d[\"hyperparams\"]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.output_weight_distribution": [[68, 74], ["net.named_parameters", "BaseRunner.BaseRunner.writer.add_histogram"], "methods", ["None"], ["", "", "def", "output_weight_distribution", "(", "self", ",", "name_prefix", "=", "\"training_weights\"", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "nets", ":", "\n", "            ", "for", "param_name", ",", "param_val", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "param_val", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_distribution_tag", "=", "f'{net.__class__.__name__}/{name_prefix}/{param_name}'", "\n", "self", ".", "writer", ".", "add_histogram", "(", "param_distribution_tag", ",", "param_val", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.output_gradient_distributions": [[75, 81], ["net.named_parameters", "BaseRunner.BaseRunner.writer.add_histogram"], "methods", ["None"], ["", "", "", "", "def", "output_gradient_distributions", "(", "self", ",", "name_prefix", "=", "\"training_gradients\"", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "nets", ":", "\n", "            ", "for", "param_name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_distribution_tag", "=", "f'{net.__class__.__name__}/{name_prefix}/{param_name}'", "\n", "self", ".", "writer", ".", "add_histogram", "(", "param_distribution_tag", ",", "param", ".", "grad", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.output_gradient_norms": [[82, 88], ["net.named_parameters", "BaseRunner.BaseRunner.writer.add_scalar", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "", "", "", "def", "output_gradient_norms", "(", "self", ",", "name_prefix", "=", "\"training_gradient_norms\"", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "nets", ":", "\n", "            ", "for", "param_name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_distribution_tag", "=", "f'{net.__class__.__name__}/{name_prefix}/{param_name}'", "\n", "self", ".", "writer", ".", "add_scalar", "(", "param_distribution_tag", ",", "torch", ".", "norm", "(", "param", ".", "grad", ")", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.output_weight_norms": [[89, 94], ["net.named_parameters", "BaseRunner.BaseRunner.writer.add_scalar", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "", "", "", "def", "output_weight_norms", "(", "self", ",", "name_prefix", "=", "\"training_weight_norms\"", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "nets", ":", "\n", "            ", "for", "param_name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "                ", "param_distribution_tag", "=", "f'{net.__class__.__name__}/{name_prefix}/{param_name}'", "\n", "self", ".", "writer", ".", "add_scalar", "(", "param_distribution_tag", ",", "torch", ".", "norm", "(", "param", ")", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.run": [[95, 152], ["deepcovidnet.AverageMeter", "deepcovidnet.AverageMeter", "deepcovidnet.AverageMeter", "deepcovidnet.AverageMeter", "deepcovidnet.AverageMeter", "deepcovidnet.AverageMeter", "time.time", "enumerate", "deepcovidnet.AverageMeter.update", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "metrics_calc", "deepcovidnet.AverageMeter.update", "time.time", "deepcovidnet.ProgressMeter.display", "enumerate", "deepcovidnet.ProgressMeter.display", "time.time", "BaseRunner.BaseRunner.get_batch_size", "batch.cuda.cuda.cuda", "isinstance", "deepcovidnet.ProgressMeter", "deepcovidnet.ProgressMeter", "deepcovidnet.ProgressMeter", "deepcovidnet.ProgressMeter", "deepcovidnet.ProgressMeter", "deepcovidnet.ProgressMeter", "time.time", "BaseRunner.BaseRunner.get_batch_size", "len", "isinstance", "isinstance", "range", "batch.cuda.cuda.keys", "BaseRunner.BaseRunner.writer.add_scalar", "other_meters.append", "other_meters[].update", "other_meters[].update", "len", "len", "len", "batch[].cuda", "batch[].cuda", "os.path.join", "deepcovidnet.AverageMeter", "deepcovidnet.AverageMeter", "deepcovidnet.AverageMeter", "BaseRunner.BaseRunner.get_batch_size", "BaseRunner.BaseRunner.get_batch_size"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.update", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.update", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.ProgressMeter.display", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.ProgressMeter.display", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.get_batch_size", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.get_batch_size", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.update", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.update", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.get_batch_size", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.get_batch_size"], ["", "", "", "def", "run", "(", "self", ",", "data_loader", ",", "prefix", ",", "epoch", ",", "metrics_calc", ")", ":", "\n", "        ", "batch_time_meter", "=", "utils", ".", "AverageMeter", "(", "'Time'", ")", "\n", "data_time_meter", "=", "utils", ".", "AverageMeter", "(", "'Data'", ")", "\n", "other_meters", "=", "[", "]", "\n", "\n", "progress_display_made", "=", "False", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch_number", "=", "epoch", "*", "len", "(", "data_loader", ")", "+", "i", "+", "1", "\n", "data_time_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "n", "=", "self", ".", "get_batch_size", "(", "batch", ")", ")", "\n", "\n", "# transfer from CPU -> GPU asynchronously if at all", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "if", "(", "not", "isinstance", "(", "batch", ",", "list", ")", ")", "and", "(", "not", "isinstance", "(", "batch", ",", "dict", ")", ")", ":", "\n", "                    ", "batch", "=", "batch", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "elif", "isinstance", "(", "batch", ",", "list", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "len", "(", "batch", ")", ")", ":", "\n", "                        ", "batch", "[", "j", "]", "=", "batch", "[", "j", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "", "else", ":", "# isinstance(batch, dict)", "\n", "                    ", "for", "key", "in", "batch", ".", "keys", "(", ")", ":", "\n", "                        ", "batch", "[", "key", "]", "=", "batch", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "", "", "", "metrics", "=", "metrics_calc", "(", "batch", ")", "\n", "\n", "# loss.backward is called in metrics_calc", "\n", "if", "metrics", "is", "not", "None", ":", "\n", "                ", "for", "j", ",", "(", "metric_name", ",", "metric_val", ")", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                    ", "if", "metric_val", "==", "metric_val", ":", "# if metric_val != nan/inf", "\n", "                        ", "self", ".", "writer", ".", "add_scalar", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "name", ",", "prefix", "+", "'_'", "+", "metric_name", ")", ",", "\n", "metric_val", ",", "self", ".", "global_step", "\n", ")", "\n", "\n", "", "if", "not", "progress_display_made", ":", "\n", "                        ", "other_meters", ".", "append", "(", "utils", ".", "AverageMeter", "(", "metric_name", ")", ")", "\n", "other_meters", "[", "j", "]", ".", "update", "(", "metric_val", ",", "n", "=", "self", ".", "get_batch_size", "(", "batch", ")", ")", "\n", "", "else", ":", "\n", "                        ", "other_meters", "[", "j", "]", ".", "update", "(", "metric_val", ",", "n", "=", "self", ".", "get_batch_size", "(", "batch", ")", ")", "\n", "\n", "", "", "self", ".", "global_step", "+=", "1", "\n", "\n", "if", "not", "progress_display_made", ":", "\n", "                    ", "progress", "=", "utils", ".", "ProgressMeter", "(", "len", "(", "data_loader", ")", ",", "other_meters", "+", "[", "batch_time_meter", ",", "data_time_meter", "]", ",", "prefix", "=", "prefix", ")", "\n", "progress_display_made", "=", "True", "\n", "", "", "elif", "not", "progress_display_made", ":", "\n", "                ", "progress", "=", "utils", ".", "ProgressMeter", "(", "len", "(", "data_loader", ")", ",", "[", "batch_time_meter", ",", "data_time_meter", "]", ",", "prefix", "=", "prefix", ")", "\n", "\n", "", "batch_time_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "n", "=", "self", ".", "get_batch_size", "(", "batch", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "config", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ",", "epoch", ")", "\n", "\n", "", "", "if", "i", "%", "config", ".", "print_freq", "!=", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", "+", "1", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.train": [[153, 203], ["signal.getsignal", "signal.getsignal", "signal.signal", "signal.signal", "BaseRunner.BaseRunner.output_weight_distribution", "range", "range", "BaseRunner.BaseRunner.train_end", "signal.signal", "signal.signal", "len", "BaseRunner.BaseRunner.nets[].train", "BaseRunner.BaseRunner.best_meter.reset", "BaseRunner.BaseRunner.run", "range", "BaseRunner.BaseRunner.best_meter.reset", "BaseRunner.BaseRunner.test", "len", "BaseRunner.BaseRunner.save_nets", "min", "BaseRunner.BaseRunner.lr_schedulers[].step", "numpy.sign", "BaseRunner.BaseRunner.save_nets", "BaseRunner.BaseRunner.lr_schedulers[].get_lr"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.output_weight_distribution", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.train_end", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidExperiment.CovidExperiment.train", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.run", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.test", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.save_nets", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.save_nets"], ["", "", "def", "train", "(", "self", ",", "train_loader", ",", "val_loader", "=", "None", ",", "validate_on_train", "=", "False", ")", ":", "\n", "        ", "assert", "val_loader", "is", "None", "or", "not", "validate_on_train", "\n", "\n", "# add signal handlers", "\n", "orig_sigint_handler", "=", "signal", ".", "getsignal", "(", "signal", ".", "SIGINT", ")", "\n", "orig_sigterm_handler", "=", "signal", ".", "getsignal", "(", "signal", ".", "SIGTERM", ")", "\n", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "self", ".", "train_end", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "self", ".", "train_end", ")", "\n", "\n", "self", ".", "output_weight_distribution", "(", "\"weight_initializations\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nets", ")", ")", ":", "\n", "            ", "self", ".", "nets", "[", "i", "]", ".", "train", "(", ")", "\n", "\n", "", "train_metrics_calc", "=", "self", ".", "train_batch_and_track_metrics", "if", "validate_on_train", "else", "self", ".", "train_batch_and_get_metrics", "\n", "\n", "bad_epochs", "=", "0", "\n", "for", "epoch", "in", "range", "(", "hyperparams", ".", "epochs", ")", ":", "\n", "            ", "self", ".", "best_meter", ".", "reset", "(", ")", "\n", "self", ".", "run", "(", "train_loader", ",", "'train'", ",", "epoch", ",", "train_metrics_calc", ")", "\n", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                ", "self", ".", "best_meter", ".", "reset", "(", ")", "\n", "self", ".", "test", "(", "val_loader", ",", "validate", "=", "True", ")", "\n", "\n", "", "if", "val_loader", "is", "not", "None", "or", "validate_on_train", ":", "\n", "                ", "if", "(", "self", ".", "best_meter", ".", "avg", "==", "self", ".", "best_metric_val", "or", "sign", "(", "self", ".", "best_meter", ".", "avg", "-", "self", ".", "best_metric_val", ")", "==", "self", ".", "best_compare", ")", ":", "\n", "                    ", "if", "self", ".", "best_meter", ".", "avg", ">=", "config", ".", "min_save_acc", ":", "\n", "                        ", "self", ".", "save_nets", "(", "epoch", ")", "\n", "", "self", ".", "best_metric_val", "=", "self", ".", "best_meter", ".", "avg", "\n", "bad_epochs", "=", "0", "\n", "", "else", ":", "\n", "                    ", "bad_epochs", "+=", "1", "\n", "if", "bad_epochs", ">=", "hyperparams", ".", "early_stopping_num", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "elif", "epoch", "%", "config", ".", "save_freq", "==", "0", "or", "epoch", "==", "(", "hyperparams", ".", "epochs", "-", "1", ")", ":", "\n", "                ", "self", ".", "save_nets", "(", "epoch", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "lr_schedulers", ")", ")", ":", "\n", "                ", "if", "(", "\n", "min", "(", "self", ".", "lr_schedulers", "[", "i", "]", ".", "get_lr", "(", ")", ")", ">=", "\n", "hyperparams", ".", "min_learning_rate", "\n", ")", ":", "\n", "                    ", "self", ".", "lr_schedulers", "[", "i", "]", ".", "step", "(", ")", "\n", "\n", "", "", "", "self", ".", "train_end", "(", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "orig_sigint_handler", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "orig_sigterm_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.test": [[204, 213], ["range", "len", "BaseRunner.BaseRunner.nets[].eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "BaseRunner.BaseRunner.run", "BaseRunner.BaseRunner.run"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.run", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.run"], ["", "def", "test", "(", "self", ",", "test_loader", ",", "validate", "=", "False", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nets", ")", ")", ":", "\n", "            ", "self", ".", "nets", "[", "i", "]", ".", "eval", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "validate", ":", "\n", "                ", "self", ".", "run", "(", "test_loader", ",", "'val'", ",", "1", ",", "self", ".", "validate_batch_and_get_metrics", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "run", "(", "test_loader", ",", "'test'", ",", "1", ",", "self", ".", "test_batch_and_get_metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.train_end": [[214, 223], ["BaseRunner.BaseRunner.writer.add_hparams", "len", "sys.exit", "deepcovidnet.get_val_dict", "deepcovidnet.get_val_dict", "deepcovidnet.get_val_dict"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.get_val_dict", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.get_val_dict", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.get_val_dict"], ["", "", "", "def", "train_end", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# self.output_weight_distribution(\"final_weights\")", "\n", "        ", "self", ".", "writer", ".", "add_hparams", "(", "\n", "hparam_dict", "=", "hyperparams", ".", "get_val_dict", "(", ")", ",", "\n", "metric_dict", "=", "{", "self", ".", "best_metric_name", ":", "self", ".", "best_metric_val", "}", "\n", ")", "\n", "\n", "if", "len", "(", "args", ")", ":", "# must have been called from sig handler", "\n", "            ", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.validate_batch_and_get_metrics": [[224, 226], ["BaseRunner.BaseRunner.get_metrics_and_track_best"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.get_metrics_and_track_best"], ["", "", "def", "validate_batch_and_get_metrics", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "get_metrics_and_track_best", "(", "batch", ",", "self", ".", "test_batch_and_get_metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.train_batch_and_track_metrics": [[227, 229], ["BaseRunner.BaseRunner.get_metrics_and_track_best"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.get_metrics_and_track_best"], ["", "def", "train_batch_and_track_metrics", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "get_metrics_and_track_best", "(", "batch", ",", "self", ".", "train_batch_and_get_metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.get_metrics_and_track_best": [[230, 247], ["metrics_calc", "Exception", "BaseRunner.BaseRunner.best_meter.update", "BaseRunner.BaseRunner.get_batch_size"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.update", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.get_batch_size"], ["", "def", "get_metrics_and_track_best", "(", "self", ",", "batch", ",", "metrics_calc", ")", ":", "\n", "        ", "metrics", "=", "metrics_calc", "(", "batch", ")", "\n", "did_find_name", "=", "False", "\n", "for", "(", "metric_name", ",", "metric_val", ")", "in", "metrics", ":", "\n", "            ", "if", "metric_name", "==", "self", ".", "best_metric_name", ":", "\n", "                ", "self", ".", "best_meter", ".", "update", "(", "metric_val", ",", "n", "=", "self", ".", "get_batch_size", "(", "batch", ")", ")", "\n", "did_find_name", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "did_find_name", ":", "\n", "            ", "raise", "Exception", "(", "'''Invalid best_metric_name set - \n                best_metric_name must be one of metrics\n                best_metric_name: {}\n                metric names: {}'''", ".", "format", "(", "self", ".", "best_metric_name", ",", "[", "x", "[", "0", "]", "for", "x", "in", "metrics", "]", ")", "\n", ")", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.save_nets": [[248, 259], ["range", "len", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "BaseRunner.BaseRunner.nets[].state_dict", "deepcovidnet.get_val_dict", "deepcovidnet.get_val_dict", "deepcovidnet.get_val_dict", "str"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.get_val_dict", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.get_val_dict", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.get_val_dict"], ["", "def", "save_nets", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nets", ")", ")", ":", "\n", "            ", "torch", ".", "save", "(", "{", "\n", "'arch'", ":", "self", ".", "nets", "[", "i", "]", ".", "__class__", ".", "__name__", "+", "'_'", "+", "self", ".", "exp_name", ",", "\n", "'state_dict'", ":", "self", ".", "nets", "[", "i", "]", ".", "state_dict", "(", ")", ",", "\n", "'best_metric_val'", ":", "self", ".", "best_meter", ".", "avg", ",", "\n", "'best_metric_name'", ":", "self", ".", "best_metric_name", ",", "\n", "'hyperparams'", ":", "hyperparams", ".", "get_val_dict", "(", ")", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "config", ".", "models_base_dir", ",", "\n", "self", ".", "nets", "[", "i", "]", ".", "__class__", ".", "__name__", "+", "'_'", "+", "self", ".", "exp_name", "+", "'_'", "+", "'checkpoint_'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.pth'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.train_batch_and_get_metrics": [[261, 271], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "train_batch_and_get_metrics", "(", "self", ",", "batch", ")", ":", "\n", "        ", "'''Perform forward and backward pass here. Also perform the actual \n            update by doing optimizer.step() (remember to do \n            optimizer.zero_grad()).  Finally, use a learning rate scheduler\n            (default choice can be torch.optim.lr_scheduler.StepLR)\n\n            Return: metrics - [(metric_name, metric_val (should be scalar))]\n        '''", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.test_batch_and_get_metrics": [[272, 278], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "test_batch_and_get_metrics", "(", "self", ",", "batch", ")", ":", "\n", "        ", "'''Perform forward pass here.\n\n            Return: metrics - [(metric_name, metric_val (should be scalar))]'''", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.get_batch_size": [[279, 282], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_batch_size", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.Hyperparameter.__init__": [[16, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "name", ",", "val", ",", "hp_range", ",", "level", "=", "HPLevel", ".", "NONE", ",", "hp_type", "=", "float", ",", "\n", "check", "=", "None", ",", "log_scale", "=", "False", "\n", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "check", "=", "check", "\n", "self", ".", "range", "=", "hp_range", "\n", "self", ".", "level", "=", "level", "\n", "self", ".", "type", "=", "hp_type", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "is_log_scale", "=", "log_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.Hyperparameter.add_check": [[28, 31], ["Hyperparameters.Hyperparameter.check"], "methods", ["None"], ["", "def", "add_check", "(", "self", ",", "f", ")", ":", "\n", "        ", "self", ".", "check", "=", "f", "\n", "assert", "self", ".", "check", "(", "self", ".", "val", ")", ",", "'invalid value {self.val} for {self.name}'", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.Hyperparameter.__setattr__": [[32, 38], ["Hyperparameters.Hyperparameter.check", "isinstance", "isinstance", "isinstance", "isinstance", "type"], "methods", ["None"], ["", "def", "__setattr__", "(", "self", ",", "name", ",", "val", ")", ":", "\n", "        ", "if", "name", "==", "'val'", ":", "\n", "            ", "if", "self", ".", "check", "is", "not", "None", ":", "\n", "                ", "assert", "isinstance", "(", "val", ",", "int", ")", "or", "isinstance", "(", "val", ",", "str", ")", "or", "isinstance", "(", "val", ",", "float", ")", "or", "isinstance", "(", "val", ",", "bool", ")", ",", "f'{type(val)} of {self.name} not permissible'", "\n", "assert", "self", ".", "check", "(", "val", ")", ",", "'invalid value {val} for {self.name}'", "\n", "", "", "self", ".", "__dict__", "[", "name", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.__init__": [[44, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "add_hyperparams", "=", "None", ")", ":", "\n", "        ", "pass", "# everything already done in __new__", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.__new__": [[47, 59], ["object.__new__", "add_hyperparams"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.__new__"], ["", "def", "__new__", "(", "cls", ",", "add_hyperparams", "=", "None", ")", ":", "\n", "# allows creation of only one object - singleton design pattern", "\n", "        ", "if", "HyperparametersSingleton", ".", "__instance", "is", "None", ":", "\n", "            ", "HyperparametersSingleton", ".", "__instance", "=", "super", "(", "HyperparametersSingleton", ",", "cls", ")", ".", "__new__", "(", "cls", ")", "\n", "HyperparametersSingleton", ".", "__instance", ".", "__hps", "=", "{", "}", "\n", "HyperparametersSingleton", ".", "__instance", ".", "temp_level", "=", "None", "\n", "\n", "if", "add_hyperparams", "is", "not", "None", ":", "\n", "                ", "add_hyperparams", "(", "HyperparametersSingleton", ".", "__instance", ")", "\n", "\n", "", "", "return", "HyperparametersSingleton", ".", "__instance", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.__call__": [[60, 63], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "temp_level", "=", "level", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.__enter__": [[64, 67], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "temp_level", "is", "not", "None", ",", "'must pass level in \"with\" statement'", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.__exit__": [[68, 70], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "val", ",", "tb", ")", ":", "\n", "        ", "self", ".", "temp_level", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.__getattr__": [[71, 79], ["AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "__hps", ":", "\n", "            ", "return", "self", ".", "__hps", "[", "name", "]", ".", "val", "\n", "\n", "", "if", "name", "==", "'__name__'", ":", "\n", "            ", "return", "__name__", "\n", "\n", "", "raise", "AttributeError", "(", "f'{name} does not exist'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add": [[80, 92], ["Hyperparameters.Hyperparameter", "logging.warning"], "methods", ["None"], ["", "def", "add", "(", "\n", "self", ",", "**", "hparam_kwargs", "\n", ")", ":", "\n", "        ", "if", "'level'", "not", "in", "hparam_kwargs", "or", "hparam_kwargs", "[", "'level'", "]", "is", "None", ":", "\n", "            ", "assert", "self", ".", "temp_level", "is", "not", "None", "\n", "hparam_kwargs", "[", "'level'", "]", "=", "self", ".", "temp_level", "\n", "", "if", "hparam_kwargs", "[", "'name'", "]", "not", "in", "self", ".", "__hps", ":", "\n", "            ", "self", ".", "__hps", "[", "hparam_kwargs", "[", "'name'", "]", "]", "=", "Hyperparameter", "(", "**", "hparam_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "name", "=", "hparam_kwargs", "[", "'name'", "]", "\n", "logging", ".", "warning", "(", "f'Ignoring attempt to add {name} again'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.tune": [[93, 113], ["optimize", "parameters.append", "Hyperparameters.HyperparametersSingleton.__run"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.__run"], ["", "", "def", "tune", "(", "self", ",", "exp", ",", "level", "=", "HPLevel", ".", "MEDIUM", ")", ":", "\n", "        ", "from", "ax", ".", "service", ".", "managed_loop", "import", "optimize", "\n", "parameters", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "__hps", ":", "\n", "            ", "if", "self", ".", "__hps", "[", "k", "]", ".", "level", ">=", "level", ":", "\n", "                ", "parameters", ".", "append", "(", "\n", "{", "\n", "'name'", ":", "k", ",", "\n", "'type'", ":", "'range'", ",", "\n", "'bounds'", ":", "self", ".", "__hps", "[", "k", "]", ".", "range", ",", "\n", "'value_type'", ":", "self", ".", "__hps", "[", "k", "]", ".", "type", ".", "__name__", ",", "\n", "'log_scale'", ":", "self", ".", "__hps", "[", "k", "]", ".", "is_log_scale", "\n", "}", "\n", ")", "\n", "\n", "", "", "return", "optimize", "(", "\n", "parameters", "=", "parameters", ",", "\n", "evaluation_function", "=", "lambda", "config", ":", "self", ".", "__run", "(", "exp", ",", "config", ")", ",", "\n", "minimize", "=", "False", ",", "\n", "total_trials", "=", "config", ".", "total_trials", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.__run": [[115, 126], ["torch.cuda.is_available", "experiment.train", "torch.cuda.empty_cache"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidExperiment.CovidExperiment.train"], ["", "def", "__run", "(", "self", ",", "experiment", ",", "parameters", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "for", "k", "in", "parameters", ":", "\n", "            ", "assert", "k", "in", "self", ".", "__hps", "\n", "self", ".", "__hps", "[", "k", "]", ".", "val", "=", "parameters", "[", "k", "]", "\n", "\n", "", "experiment", ".", "train", "(", ")", "\n", "\n", "return", "experiment", ".", "best_val", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.get_val_dict": [[127, 132], ["None"], "methods", ["None"], ["", "def", "get_val_dict", "(", "self", ")", ":", "\n", "        ", "d", "=", "{", "}", "\n", "for", "k", "in", "self", ".", "__hps", ":", "\n", "            ", "d", "[", "k", "]", "=", "self", ".", "__hps", "[", "k", "]", ".", "val", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load": [[133, 143], ["isinstance", "isinstance", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load"], ["", "def", "load", "(", "self", ",", "pickle_file_or_dict", ")", ":", "\n", "        ", "if", "isinstance", "(", "pickle_file_or_dict", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "pickle_file_or_dict", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "hps", "=", "pickle", ".", "load", "(", "f", ")", "[", "0", "]", "\n", "", "for", "k", "in", "hps", ":", "\n", "                ", "self", ".", "__hps", "[", "k", "]", ".", "val", "=", "hps", "[", "k", "]", "\n", "", "", "elif", "isinstance", "(", "pickle_file_or_dict", ",", "dict", ")", ":", "\n", "            ", "for", "k", "in", "pickle_file_or_dict", ":", "\n", "                ", "assert", "k", "in", "self", ".", "__hps", "\n", "self", ".", "__hps", "[", "k", "]", ".", "val", "=", "pickle_file_or_dict", "[", "k", "]", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidModule.CovidModule.__init__": [[7, 12], ["torch.Module.__init__", "deepcovidnet.EmbeddingModule.EmbeddingModule", "deepcovidnet.DeepFM.DeepFM"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_neurons", ")", ":", "\n", "        ", "super", "(", "CovidModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_neurons", "=", "output_neurons", "\n", "self", ".", "embedding_module", "=", "EmbeddingModule", "(", ")", "\n", "self", ".", "deep_fm", "=", "DeepFM", "(", "output_neurons", "=", "self", ".", "output_neurons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidModule.CovidModule.forward": [[13, 17], ["CovidModule.CovidModule.embedding_module", "CovidModule.CovidModule.deep_fm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features_dict", ")", ":", "\n", "        ", "embeddings", "=", "self", ".", "embedding_module", "(", "features_dict", ")", "\n", "out", "=", "self", ".", "deep_fm", "(", "embeddings", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_train_val_test_datasets": [[22, 68], ["deepcovidnet.CovidCountyDataset.CovidCountyDataset", "deepcovidnet.CovidCountyDataset.CovidCountyDataset", "deepcovidnet.CovidCountyDataset.CovidCountyDataset"], "function", ["None"], ["def", "get_train_val_test_datasets", "(", "mode", ",", "use_cache", "=", "True", ",", "load_features", "=", "False", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'all'", ",", "'train'", ",", "'train_no_val'", ",", "'test'", "]", "\n", "\n", "train_start", "=", "global_config", ".", "data_start_date", "\n", "val_start", "=", "global_config", ".", "train_end_date", "\n", "test_start", "=", "global_config", ".", "val_end_date", "\n", "end_date", "=", "global_config", ".", "data_end_date", "\n", "\n", "train_dataset", "=", "None", "\n", "val_dataset", "=", "None", "\n", "test_dataset", "=", "None", "\n", "\n", "if", "mode", "in", "[", "'all'", ",", "'train'", ",", "'train_no_val'", "]", ":", "\n", "        ", "train_dataset", "=", "CovidCountyDataset", "(", "\n", "train_start", ",", "\n", "val_start", ",", "\n", "means_stds", "=", "None", ",", "\n", "use_cache", "=", "use_cache", ",", "\n", "load_features", "=", "load_features", "\n", ")", "\n", "\n", "if", "mode", "!=", "'train_no_val'", ":", "\n", "            ", "val_dataset", "=", "CovidCountyDataset", "(", "\n", "val_start", ",", "\n", "test_start", ",", "\n", "means_stds", "=", "train_dataset", ".", "means_stds", ",", "\n", "use_cache", "=", "use_cache", ",", "\n", "load_features", "=", "load_features", "\n", ")", "\n", "\n", "", "", "if", "mode", "in", "[", "'all'", ",", "'test'", "]", ":", "\n", "        ", "means_stds", "=", "None", "\n", "\n", "if", "not", "use_cache", ":", "\n", "            ", "assert", "mode", "==", "'all'", ",", "'mode can\\'t be test when use_cache=False'", "\n", "means_stds", "=", "train_dataset", ".", "means_stds", "\n", "\n", "", "test_dataset", "=", "CovidCountyDataset", "(", "\n", "test_start", ",", "\n", "end_date", ",", "\n", "means_stds", "=", "means_stds", ",", "\n", "use_cache", "=", "use_cache", ",", "\n", "load_features", "=", "load_features", "\n", ")", "\n", "\n", "", "return", "train_dataset", ",", "val_dataset", ",", "test_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_train_val_test_loaders": [[70, 100], ["main.get_train_val_test_datasets", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_train_val_test_datasets"], ["", "def", "get_train_val_test_loaders", "(", "mode", ",", "load_features", "=", "False", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'all'", ",", "'train'", ",", "'train_no_val'", ",", "'test'", "]", "\n", "\n", "train_dataset", ",", "val_dataset", ",", "test_dataset", "=", "get_train_val_test_datasets", "(", "mode", ",", "load_features", "=", "load_features", ")", "\n", "train_loader", "=", "None", "\n", "val_loader", "=", "None", "\n", "test_loader", "=", "None", "\n", "\n", "if", "mode", "in", "[", "'all'", ",", "'train'", ",", "'train_no_val'", "]", ":", "\n", "        ", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "hyperparams", ".", "batch_size", ",", "\n", "shuffle", "=", "True", "\n", ")", "\n", "\n", "if", "mode", "!=", "'train_no_val'", ":", "\n", "            ", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "hyperparams", ".", "batch_size", ",", "\n", "shuffle", "=", "False", "\n", ")", "\n", "\n", "", "", "if", "mode", "in", "[", "'all'", ",", "'test'", "]", ":", "\n", "        ", "test_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "hyperparams", ".", "batch_size", ",", "\n", "shuffle", "=", "False", "\n", ")", "\n", "\n", "", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_runner": [[102, 109], ["None"], "function", ["None"], ["", "def", "get_runner", "(", "runner_type", ")", ":", "\n", "    ", "if", "runner_type", "==", "'regular'", ":", "\n", "        ", "return", "CovidRunner", "\n", "", "elif", "runner_type", "==", "'ordinal'", ":", "\n", "        ", "return", "OrdinalCovidRunner", "\n", "", "elif", "runner_type", "==", "'coral'", ":", "\n", "        ", "return", "CoralRunner", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_analysis_type": [[111, 120], ["None"], "function", ["None"], ["", "", "def", "get_analysis_type", "(", "analysis_type", ")", ":", "\n", "    ", "if", "analysis_type", "==", "'feature'", ":", "\n", "        ", "return", "AnalysisType", ".", "FEATURE", "\n", "", "elif", "analysis_type", "==", "'group'", ":", "\n", "        ", "return", "AnalysisType", ".", "GROUP", "\n", "", "elif", "analysis_type", "==", "'time'", ":", "\n", "        ", "return", "AnalysisType", ".", "TIME", "\n", "", "elif", "analysis_type", "==", "'soi'", ":", "\n", "        ", "return", "AnalysisType", ".", "SOI", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.add_args": [[122, 149], ["numpy.array", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "list", "str", "str", "range", "len"], "function", ["None"], ["", "", "def", "add_args", "(", "parser", ")", ":", "\n", "    ", "modes", "=", "np", ".", "array", "(", "[", "\n", "[", "'train'", ",", "'train the model and validate after every epoch'", "]", ",", "\n", "[", "'train_no_val'", ",", "'train the model without validating'", "]", ",", "\n", "[", "'val'", ",", "'evaluate the model on the validation set. Use --load-path to specify model path'", "]", ",", "\n", "[", "'test'", ",", "'evaluate the model on the test set. Use --load-path to specify model path'", "]", ",", "\n", "[", "'cache'", ",", "'cache all normalized feature groups in the train, val and test set so loading them is efficient'", "]", ",", "\n", "[", "'save'", ",", "'save individual feature groups. Specify a relevant save function as defined in DataSaver.py by using --save-func argument'", "]", ",", "\n", "[", "'tune'", ",", "'tune hyperparameters (of medium level and above as defined in model_hyperparam_config.py) by using Bayesian Optimization with Expected Improvement'", "]", ",", "\n", "[", "'rank'", ",", "'rank input features on their importance. Use --analysis-type to decide what exactly to rank'", "]", "\n", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--exp'", ",", "required", "=", "True", ",", "help", "=", "'a string to name the current experiment (used for tensorboard and other logs)'", ")", "\n", "parser", ".", "add_argument", "(", "'--runner'", ",", "default", "=", "'ordinal'", ",", "choices", "=", "[", "'regular'", ",", "'ordinal'", "]", ")", "\n", "nl", "=", "'\\n'", "\n", "parser", ".", "add_argument", "(", "\n", "'--mode'", ",", "default", "=", "'train'", ",", "choices", "=", "list", "(", "modes", "[", ":", ",", "0", "]", ")", ",", "\n", "help", "=", "f'{\"\".join([modes[i][0] + \": \" + modes[i][1] + nl for i in range(len(modes))])}'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "global_config", ".", "data_base_dir", ")", "\n", "parser", ".", "add_argument", "(", "'--data-save-dir'", ",", "default", "=", "global_config", ".", "data_save_dir", ")", "\n", "parser", ".", "add_argument", "(", "'--start-date'", ",", "default", "=", "str", "(", "global_config", ".", "data_start_date", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--end-date'", ",", "default", "=", "str", "(", "global_config", ".", "data_end_date", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--save-func'", ",", "default", "=", "'save_weather_data'", ")", "\n", "parser", ".", "add_argument", "(", "'--load-path'", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--analysis-type'", ",", "default", "=", "'feature'", ",", "choices", "=", "[", "'feature'", ",", "'group'", ",", "'time'", ",", "'soi'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--load-hps'", ",", "default", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.main": [[151, 255], ["logging.getLogger().setLevel", "argparse.ArgumentParser", "main.add_args", "argparse.ArgumentParser.parse_args", "deepcovidnet.set_static_val", "deepcovidnet.set_static_val", "deepcovidnet.load", "main.get_train_val_test_loaders", "runner.train", "logging.getLogger", "b.pop", "main.get_runner", "runner.test", "b.pop", "main.get_runner", "main.get_train_val_test_datasets", "train_dataset.save_cache_on_disk", "val_dataset.save_cache_on_disk", "test_dataset.save_cache_on_disk", "main.get_train_val_test_loaders", "main.get_train_val_test_loaders", "datetime.datetime.strptime().date", "datetime.datetime.strptime().date", "deepcovidnet.DataSaver.DataSaver", "main.get_train_val_test_datasets", "deepcovidnet.CovidExperiment.CovidExperiment", "deepcovidnet.tune", "pickle.dump", "datetime.datetime.strptime", "datetime.datetime.strptime", "getattr", "main.get_runner", "open", "deepcovidnet.FeatureAnalyzer.FeatureAnalyzer", "deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.get_ranked_features", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "getattr", "deepcovidnet.get_best_tune_file", "main.get_train_val_test_loaders", "b.pop", "main.get_analysis_type", "main.get_runner"], "function", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.add_args", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.base_config.Config.set_static_val", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.base_config.Config.set_static_val", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_train_val_test_loaders", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidExperiment.CovidExperiment.train", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_runner", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.BaseRunner.BaseRunner.test", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_runner", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_train_val_test_datasets", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.save_cache_on_disk", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.save_cache_on_disk", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.save_cache_on_disk", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_train_val_test_loaders", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_train_val_test_loaders", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_train_val_test_datasets", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.tune", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_runner", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.get_ranked_features", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.global_config.get_best_tune_file", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_train_val_test_loaders", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_analysis_type", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.main.get_runner"], ["", "def", "main", "(", ")", ":", "\n", "    ", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "add_args", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "global_config", ".", "set_static_val", "(", "'data_base_dir'", ",", "args", ".", "data_dir", ",", "overwrite", "=", "True", ")", "\n", "global_config", ".", "set_static_val", "(", "'data_save_dir'", ",", "args", ".", "data_save_dir", ",", "overwrite", "=", "True", ")", "\n", "\n", "if", "args", ".", "load_hps", ":", "\n", "        ", "hyperparams", ".", "load", "(", "args", ".", "load_hps", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "'train'", "or", "args", ".", "mode", "==", "'train_no_val'", ":", "\n", "        ", "train_loader", ",", "val_loader", ",", "_", "=", "get_train_val_test_loaders", "(", "args", ".", "mode", ")", "\n", "\n", "for", "b", "in", "train_loader", ":", "\n", "            ", "b", ".", "pop", "(", "dataset_config", ".", "labels_key", ")", "\n", "break", "# just init b with a batch", "\n", "\n", "", "runner", "=", "get_runner", "(", "args", ".", "runner", ")", "(", "args", ".", "exp", ",", "load_path", "=", "args", ".", "load_path", ",", "sample_batch", "=", "b", ")", "\n", "\n", "runner", ".", "train", "(", "train_loader", ",", "val_loader", "=", "val_loader", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'test'", "or", "args", ".", "mode", "==", "'val'", ":", "\n", "        ", "assert", "args", ".", "load_path", ",", "'model path not specified'", "\n", "\n", "if", "args", ".", "mode", "==", "'val'", ":", "\n", "            ", "data_loader", "=", "get_train_val_test_loaders", "(", "'train'", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "data_loader", "=", "get_train_val_test_loaders", "(", "args", ".", "mode", ")", "[", "2", "]", "\n", "\n", "", "for", "b", "in", "data_loader", ":", "\n", "            ", "b", ".", "pop", "(", "dataset_config", ".", "labels_key", ")", "\n", "break", "# just init b with a batch", "\n", "\n", "", "runner", "=", "get_runner", "(", "args", ".", "runner", ")", "(", "args", ".", "exp", ",", "load_path", "=", "args", ".", "load_path", ",", "sample_batch", "=", "b", ")", "\n", "\n", "runner", ".", "test", "(", "data_loader", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'cache'", ":", "\n", "        ", "train_dataset", ",", "val_dataset", ",", "test_dataset", "=", "get_train_val_test_datasets", "(", "mode", "=", "'all'", ",", "use_cache", "=", "False", ")", "\n", "\n", "train_dataset", ".", "save_cache_on_disk", "(", ")", "\n", "val_dataset", ".", "save_cache_on_disk", "(", ")", "\n", "test_dataset", ".", "save_cache_on_disk", "(", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'save'", ":", "\n", "        ", "start_date", "=", "datetime", ".", "strptime", "(", "args", ".", "start_date", ",", "'%Y-%m-%d'", ")", ".", "date", "(", ")", "\n", "end_date", "=", "datetime", ".", "strptime", "(", "args", ".", "end_date", ",", "'%Y-%m-%d'", ")", ".", "date", "(", ")", "\n", "\n", "d", "=", "DataSaver", "(", ")", "\n", "try", ":", "\n", "            ", "getattr", "(", "d", ",", "args", ".", "save_func", ")", "(", "start_date", ",", "end_date", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "getattr", "(", "d", ",", "args", ".", "save_func", ")", "(", ")", "\n", "\n", "", "", "elif", "args", ".", "mode", "==", "'tune'", ":", "\n", "        ", "train_dataset", ",", "val_dataset", ",", "_", "=", "get_train_val_test_datasets", "(", "'train'", ")", "\n", "exp", "=", "CovidExperiment", "(", "\n", "args", ".", "exp", ",", "\n", "get_runner", "(", "args", ".", "runner", ")", ",", "\n", "train_dataset", "=", "train_dataset", ",", "\n", "val_dataset", "=", "val_dataset", ",", "\n", "exp_name", "=", "args", ".", "exp", "\n", ")", "\n", "\n", "best_params", ",", "best_vals", ",", "_", ",", "_", "=", "hyperparams", ".", "tune", "(", "exp", ")", "\n", "\n", "pickle", ".", "dump", "(", "\n", "(", "best_params", ",", "best_vals", ")", ",", "\n", "open", "(", "global_config", ".", "get_best_tune_file", "(", "args", ".", "exp", ")", ",", "'wb'", ")", "\n", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'rank'", ":", "\n", "        ", "assert", "args", ".", "load_path", ",", "'model path not specified'", "\n", "\n", "val_loader", "=", "get_train_val_test_loaders", "(", "'train'", ",", "load_features", "=", "True", ")", "[", "1", "]", "\n", "\n", "for", "b", "in", "val_loader", ":", "\n", "            ", "b", ".", "pop", "(", "dataset_config", ".", "labels_key", ")", "\n", "break", "\n", "\n", "", "analyzer", "=", "FeatureAnalyzer", "(", "\n", "runner", "=", "get_runner", "(", "args", ".", "runner", ")", "(", "args", ".", "exp", ",", "load_path", "=", "args", ".", "load_path", ",", "sample_batch", "=", "b", ")", ",", "\n", "val_loader", "=", "val_loader", "\n", ")", "\n", "\n", "results", "=", "analyzer", ".", "get_ranked_features", "(", "\n", "get_analysis_type", "(", "args", ".", "analysis_type", ")", "\n", ")", "\n", "\n", "print", "(", "'Feature Analysis Results'", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "print", "(", "'\\n'", "*", "3", ")", "\n", "print", "(", "results", ")", "\n", "print", "(", "'\\n'", "*", "3", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "print", "(", "'\\n'", "*", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.HypotheticalDatasets.HypotheticalDataset.__init__": [[5, 14], ["deepcovidnet.CovidCountyDataset.CovidCountyDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "change_factor", ",", "data_start_date", ",", "\n", "data_end_date", ",", "means_stds", ",", "use_cache", "=", "True", ",", "\n", "load_features", "=", "False", "\n", ")", ":", "\n", "        ", "self", ".", "change_factor", "=", "change_factor", "\n", "super", "(", "HypotheticalDataset", ",", "self", ")", ".", "__init__", "(", "\n", "data_start_date", ",", "data_end_date", ",", "means_stds", ",", "\n", "use_cache", ",", "load_features", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.HypotheticalDatasets.HypotheticalDataset.create_hypothetical_features": [[16, 19], ["HypotheticalDatasets.HypotheticalDataset.create_hypothetical", "enumerate"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.HypotheticalDatasets.HypotheticalMobilityDataset.create_hypothetical"], ["", "def", "create_hypothetical_features", "(", "self", ",", "features", ")", ":", "\n", "        ", "self", ".", "feature_names", "=", "{", "f", ".", "feature_name", ":", "i", "for", "i", ",", "f", "in", "enumerate", "(", "features", ")", "}", "\n", "return", "self", ".", "create_hypothetical", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.HypotheticalDatasets.HypotheticalDataset.create_hypothetical": [[20, 22], ["NotImplementedError"], "methods", ["None"], ["", "def", "create_hypothetical", "(", "self", ",", "features", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.HypotheticalDatasets.HypotheticalHomeDwellTimeDataset.__init__": [[25, 33], ["HypotheticalDatasets.HypotheticalDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "change_factor", ",", "data_start_date", ",", "\n", "data_end_date", ",", "means_stds", ",", "use_cache", "=", "True", ",", "\n", "load_features", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "HypotheticalHomeDwellTimeDataset", ",", "self", ")", ".", "__init__", "(", "\n", "change_factor", ",", "data_start_date", ",", "data_end_date", ",", "means_stds", ",", "\n", "use_cache", ",", "load_features", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.HypotheticalDatasets.HypotheticalHomeDwellTimeDataset.create_hypothetical": [[35, 43], ["range", "len", "s.clip"], "methods", ["None"], ["", "def", "create_hypothetical", "(", "self", ",", "features", ")", ":", "\n", "        ", "idx", "=", "self", ".", "feature_names", "[", "'social_distancing'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "features", "[", "idx", "]", ".", "raw_features", ")", ")", ":", "\n", "            ", "s", "=", "features", "[", "idx", "]", ".", "raw_features", "[", "i", "]", "[", "'median_home_dwell_time'", "]", "\n", "s", "*=", "self", ".", "change_factor", "\n", "s", ".", "clip", "(", "upper", "=", "24", "*", "60", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.HypotheticalDatasets.HypotheticalMobilityDataset.__init__": [[46, 54], ["HypotheticalDatasets.HypotheticalDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "change_factor", ",", "data_start_date", ",", "\n", "data_end_date", ",", "means_stds", ",", "use_cache", "=", "True", ",", "\n", "load_features", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "HypotheticalMobilityDataset", ",", "self", ")", ".", "__init__", "(", "\n", "change_factor", ",", "data_start_date", ",", "data_end_date", ",", "means_stds", ",", "\n", "use_cache", ",", "load_features", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.HypotheticalDatasets.HypotheticalMobilityDataset.create_hypothetical": [[56, 62], ["range", "len"], "methods", ["None"], ["", "def", "create_hypothetical", "(", "self", ",", "features", ")", ":", "\n", "        ", "idx", "=", "self", ".", "feature_names", "[", "'countywise_mobility'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "features", "[", "idx", "]", ".", "raw_features", ")", ")", ":", "\n", "            ", "features", "[", "idx", "]", ".", "raw_features", "[", "i", "]", "*=", "self", ".", "change_factor", "\n", "\n", "", "return", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.EmbeddingModule.EmbeddingModule.__init__": [[10, 14], ["torch.Module.__init__", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EmbeddingModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "are_layers_set", "=", "False", "\n", "self", ".", "embedding_modules", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.EmbeddingModule.EmbeddingModule.forward": [[15, 67], ["range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "EmbeddingModule.EmbeddingModule.reset_parameters", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "features_dict[].dim", "torch.Linear", "torch.Linear", "torch.Linear", "net.append", "net.append", "net.append", "net.append", "len", "net[].cuda", "math.sqrt", "math.sqrt", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ElementWiseProdCondense", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["", "def", "forward", "(", "self", ",", "features_dict", ")", ":", "\n", "        ", "assert", "dataset_config", ".", "labels_key", "not", "in", "features_dict", "\n", "\n", "out", "=", "{", "}", "\n", "\n", "if", "not", "self", ".", "are_layers_set", ":", "\n", "            ", "class", "ElementWiseProdCondense", "(", "nn", ".", "Module", ")", ":", "\n", "                ", "def", "__init__", "(", "self", ",", "in_size", ")", ":", "\n", "                    ", "super", "(", "ElementWiseProdCondense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_size", ",", "hyperparams", ".", "embedding_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "hyperparams", ".", "embedding_size", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# taken from https://pytorch.org/docs/master/_modules/torch/nn/modules/linear.html#Linear", "\n", "                    ", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                        ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "                    ", "return", "torch", ".", "mul", "(", "x", ",", "self", ".", "weight", ")", ".", "sum", "(", "axis", "=", "-", "2", ")", "+", "self", ".", "bias", "\n", "\n", "", "", "for", "k", "in", "features_dict", ":", "\n", "                ", "net", "=", "[", "]", "\n", "is_first_done", "=", "False", "\n", "for", "i", "in", "range", "(", "features_dict", "[", "k", "]", ".", "dim", "(", ")", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                    ", "if", "not", "is_first_done", ":", "\n", "                        ", "layer", "=", "nn", ".", "Linear", "(", "\n", "features_dict", "[", "k", "]", ".", "shape", "[", "i", "]", ",", "\n", "hyperparams", ".", "embedding_size", "\n", ")", "\n", "is_first_done", "=", "True", "\n", "net", ".", "append", "(", "layer", ")", "\n", "net", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "net", ".", "append", "(", "ElementWiseProdCondense", "(", "features_dict", "[", "k", "]", ".", "shape", "[", "i", "]", ")", ")", "\n", "net", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "net", ")", ")", ":", "\n", "                        ", "net", "[", "i", "]", "=", "net", "[", "i", "]", ".", "cuda", "(", ")", "\n", "\n", "", "", "self", ".", "embedding_modules", "[", "k", "]", "=", "nn", ".", "Sequential", "(", "*", "net", ")", "\n", "\n", "", "self", ".", "are_layers_set", "=", "True", "\n", "\n", "", "for", "k", "in", "features_dict", ":", "\n", "            ", "out", "[", "k", "]", "=", "self", ".", "embedding_modules", "[", "k", "]", "(", "features_dict", "[", "k", "]", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidExperiment.CovidExperiment.__init__": [[8, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "name", ",", "runner_cls", ",", "train_dataset", ",", "\n", "val_dataset", "=", "None", ",", "test_dataset", "=", "None", ",", "**", "runner_args", "\n", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "runner_cls", "=", "runner_cls", "\n", "self", ".", "runner_args", "=", "runner_args", "\n", "self", ".", "train_dataset", "=", "train_dataset", "\n", "self", ".", "val_dataset", "=", "val_dataset", "\n", "self", ".", "test_dataset", "=", "test_dataset", "\n", "self", ".", "run_num", "=", "0", "\n", "self", ".", "best_val", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidExperiment.CovidExperiment.train": [[21, 43], ["CovidExperiment.CovidExperiment.runner_cls", "torch.utils.data.DataLoader", "CovidExperiment.CovidExperiment.train", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidExperiment.CovidExperiment.train"], ["", "def", "train", "(", "self", ",", "**", "train_args", ")", ":", "\n", "        ", "self", ".", "runner_args", "[", "'exp_name'", "]", "=", "f'{self.name}_{self.run_num}'", "\n", "runner", "=", "self", ".", "runner_cls", "(", "**", "self", ".", "runner_args", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "hyperparams", ".", "batch_size", ",", "\n", "shuffle", "=", "True", "\n", ")", "\n", "\n", "val_loader", "=", "None", "\n", "if", "self", ".", "val_dataset", "is", "not", "None", ":", "\n", "            ", "val_loader", "=", "DataLoader", "(", "\n", "self", ".", "val_dataset", ",", "\n", "batch_size", "=", "hyperparams", ".", "batch_size", ",", "\n", "shuffle", "=", "False", "\n", ")", "\n", "\n", "", "runner", ".", "train", "(", "train_loader", ",", "val_loader", "=", "val_loader", ",", "**", "train_args", ")", "\n", "self", ".", "best_val", "=", "runner", ".", "best_metric_val", "\n", "\n", "self", ".", "run_num", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CoralRunner.CoralRunner.__init__": [[6, 13], ["deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.__init__", "deepcovidnet.CovidCoralModule.CovidCoralModule", "deepcovidnet.OrdinalCovidRunner.OrdinalBCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "exp_name", ",", "load_path", "=", "None", ",", "sample_batch", "=", "None", ")", ":", "\n", "        ", "super", "(", "CoralRunner", ",", "self", ")", ".", "__init__", "(", "\n", "exp_name", ",", "\n", "net", "=", "CovidCoralModule", "(", ")", ",", "\n", "loss_fn", "=", "OrdinalBCEWithLogitsLoss", "(", ")", ",", "\n", "load_path", "=", "load_path", ",", "\n", "sample_batch", "=", "sample_batch", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CoralRunner.CoralRunner._get_extra_metrics": [[15, 21], ["CoralRunner.CoralRunner.get_classifier_acc"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_classifier_acc"], ["", "def", "_get_extra_metrics", "(", "self", ",", "pred", ",", "labels", ")", ":", "\n", "        ", "metrics", "=", "[", "\n", "(", "'classifier_acc'", ",", "self", ".", "get_classifier_acc", "(", "pred", ",", "labels", ")", ")", "\n", "]", "\n", "\n", "return", "metrics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.__init__": [[14, 16], ["deepcovidnet.DataSaver.DataSaver.__init__"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DataLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_census_data": [[17, 23], ["DataLoader.DataLoader._load_constant_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_constant_features"], ["", "@", "timed_logger_decorator", "\n", "def", "load_census_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_load_constant_features", "(", "\n", "saver_config", ".", "census_data", ",", "\n", "self", ".", "save_census_data", ",", "\n", "'open_census_data'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_pop_dens_ccvi": [[25, 31], ["DataLoader.DataLoader._load_constant_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_constant_features"], ["", "@", "timed_logger_decorator", "\n", "def", "load_pop_dens_ccvi", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_load_constant_features", "(", "\n", "saver_config", ".", "pop_dens_ccvi", ",", "\n", "self", ".", "save_pop_dens_ccvi", ",", "\n", "'pop_dens_ccvi'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_sg_patterns_monthly": [[33, 40], ["DataLoader.DataLoader._load_time_dep_features", "deepcovidnet.sg_patterns_monthly.get_file_func", "deepcovidnet.sg_patterns_monthly.get_file_func"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_time_dep_features", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func"], ["", "@", "timed_logger_decorator", "\n", "def", "load_sg_patterns_monthly", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "return", "self", ".", "_load_time_dep_features", "(", "\n", "start_date", ",", "end_date", ",", "saver_config", ".", "sg_patterns_monthly", ".", "get_file_func", "(", ")", ",", "\n", "self", ".", "save_sg_patterns_monthly", ",", "TimeDependentFeatures", ",", "\n", "'monthly_patterns'", ",", "\n", "feature_saver", "=", "saver_config", ".", "sg_patterns_monthly", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_sg_social_distancing": [[42, 49], ["DataLoader.DataLoader._load_time_dep_features", "deepcovidnet.sg_social_distancing.get_file_func", "deepcovidnet.sg_social_distancing.get_file_func"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_time_dep_features", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func"], ["", "@", "timed_logger_decorator", "\n", "def", "load_sg_social_distancing", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "return", "self", ".", "_load_time_dep_features", "(", "\n", "start_date", ",", "end_date", ",", "saver_config", ".", "sg_social_distancing", ".", "get_file_func", "(", ")", ",", "\n", "self", ".", "save_sg_social_distancing", ",", "TimeDependentFeatures", ",", "\n", "'social_distancing'", ",", "\n", "feature_saver", "=", "saver_config", ".", "sg_social_distancing", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_weather_data": [[51, 58], ["DataLoader.DataLoader._load_time_dep_features", "deepcovidnet.weather.get_file_func", "deepcovidnet.weather.get_file_func"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_time_dep_features", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func"], ["", "@", "timed_logger_decorator", "\n", "def", "load_weather_data", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "return", "self", ".", "_load_time_dep_features", "(", "\n", "start_date", ",", "end_date", ",", "saver_config", ".", "weather", ".", "get_file_func", "(", ")", ",", "\n", "self", ".", "save_weather_data", ",", "TimeDependentFeatures", ",", "\n", "'weather_data'", ",", "\n", "feature_saver", "=", "saver_config", ".", "weather", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_num_cases": [[60, 67], ["DataLoader.DataLoader._load_time_dep_features", "deepcovidnet.num_cases.get_file_func", "deepcovidnet.num_cases.get_file_func"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_time_dep_features", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func"], ["", "@", "timed_logger_decorator", "\n", "def", "load_num_cases", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "return", "self", ".", "_load_time_dep_features", "(", "\n", "start_date", ",", "end_date", ",", "saver_config", ".", "num_cases", ".", "get_file_func", "(", ")", ",", "\n", "self", ".", "save_num_cases", ",", "TimeDependentFeatures", ",", "\n", "'num_cases'", ",", "\n", "feature_saver", "=", "saver_config", ".", "num_cases", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_dilation_index": [[69, 75], ["DataLoader.DataLoader._load_time_dep_features", "deepcovidnet.dilation_index.get_file_func", "deepcovidnet.dilation_index.get_file_func"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_time_dep_features", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func"], ["", "@", "timed_logger_decorator", "\n", "def", "load_dilation_index", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "return", "self", ".", "_load_time_dep_features", "(", "\n", "start_date", ",", "end_date", ",", "saver_config", ".", "dilation_index", ".", "get_file_func", "(", ")", ",", "\n", "self", ".", "save_dilation_index", ",", "TimeDependentFeatures", ",", "'di'", ",", "\n", "feature_saver", "=", "saver_config", ".", "dilation_index", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_reproduction_number": [[77, 83], ["DataLoader.DataLoader._load_time_dep_features", "deepcovidnet.reproduction_number.get_file_func", "deepcovidnet.reproduction_number.get_file_func"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_time_dep_features", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func"], ["", "@", "timed_logger_decorator", "\n", "def", "load_reproduction_number", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "return", "self", ".", "_load_time_dep_features", "(", "\n", "start_date", ",", "end_date", ",", "saver_config", ".", "reproduction_number", ".", "get_file_func", "(", ")", ",", "\n", "self", ".", "save_reproduction_number", ",", "TimeDependentFeatures", ",", "'rn'", ",", "\n", "feature_saver", "=", "saver_config", ".", "reproduction_number", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_countywise_cumulative_cases": [[85, 95], ["DataLoader.DataLoader._load_time_dep_features", "deepcovidnet.countywise_cumulative_cases.get_file_func", "deepcovidnet.countywise_cumulative_cases.get_file_func"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_time_dep_features", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func"], ["", "@", "timed_logger_decorator", "\n", "def", "load_countywise_cumulative_cases", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "return", "self", ".", "_load_time_dep_features", "(", "\n", "start_date", ",", "end_date", ",", "\n", "saver_config", ".", "countywise_cumulative_cases", ".", "get_file_func", "(", ")", ",", "\n", "self", ".", "save_countywise_cumulative_cases", ",", "\n", "CountyWiseTimeDependentFeatures", ",", "\n", "'countywise_cumulative_cases'", ",", "\n", "cur_type", "=", "'CONSTANT'", ",", "\n", "feature_saver", "=", "saver_config", ".", "countywise_cumulative_cases", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader.load_sg_mobility_incoming": [[97, 115], ["deepcovidnet.sg_patterns_weekly_reader.get_file_date", "deepcovidnet.sg_patterns_weekly_reader.get_file_date", "datetime.timedelta", "DataLoader.DataLoader._load_time_dep_features", "deepcovidnet.sg_mobility.get_file_func", "deepcovidnet.sg_mobility.get_file_func"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_file_date", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_file_date", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_time_dep_features", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func"], ["", "@", "timed_logger_decorator", "\n", "def", "load_sg_mobility_incoming", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "d", "=", "rfe_config", ".", "sg_patterns_weekly_reader", ".", "get_file_date", "(", "start_date", ")", "\n", "interval", "=", "timedelta", "(", "7", ")", "\n", "\n", "if", "d", "<", "start_date", ":", "\n", "            ", "d", "+=", "interval", "\n", "\n", "", "return", "self", ".", "_load_time_dep_features", "(", "\n", "d", ",", "\n", "end_date", ",", "\n", "saver_config", ".", "sg_mobility", ".", "get_file_func", "(", ")", ",", "\n", "self", ".", "save_sg_mobility_incoming", ",", "\n", "CountyWiseTimeDependentFeatures", ",", "\n", "'countywise_mobility'", ",", "\n", "cur_type", "=", "'CROSS'", ",", "\n", "interval", "=", "interval", ",", "\n", "feature_saver", "=", "saver_config", ".", "sg_mobility", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_time_dep_features": [[117, 138], ["datetime.timedelta", "DataLoader.DataLoader._save_if_not_saved", "dfs.append", "feature_type", "feature_type", "pandas.read_csv().set_index", "pandas.read_csv", "get_path"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._save_if_not_saved"], ["", "def", "_load_time_dep_features", "(", "self", ",", "start_date", ",", "end_date", ",", "get_path", ",", "saver", ",", "\n", "feature_type", ",", "feature_name", ",", "feature_saver", ",", "\n", "cur_type", "=", "None", ",", "interval", "=", "timedelta", "(", "1", ")", ")", ":", "\n", "        ", "self", ".", "_save_if_not_saved", "(", "get_path", ",", "saver", ",", "start_date", ",", "end_date", ",", "interval", ")", "\n", "\n", "dfs", "=", "[", "]", "\n", "cur_date", "=", "start_date", "\n", "while", "(", "(", "end_date", "-", "cur_date", ")", ".", "days", ">=", "interval", ".", "days", ")", ":", "\n", "            ", "dfs", ".", "append", "(", "\n", "pd", ".", "read_csv", "(", "\n", "get_path", "(", "cur_date", ")", ",", "dtype", "=", "{", "'fips'", ":", "str", "}", "\n", ")", ".", "set_index", "(", "'fips'", ")", "\n", ")", "\n", "cur_date", "+=", "interval", "\n", "\n", "", "if", "feature_type", "==", "TimeDependentFeatures", ":", "\n", "            ", "return", "feature_type", "(", "dfs", ",", "feature_name", ",", "start_date", ",", "interval", ",", "\n", "feature_saver", "=", "feature_saver", ")", "\n", "", "else", ":", "\n", "            ", "return", "feature_type", "(", "dfs", ",", "feature_name", ",", "start_date", ",", "interval", ",", "\n", "cur_type", "=", "cur_type", ",", "feature_saver", "=", "feature_saver", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._load_constant_features": [[139, 151], ["DataLoader.DataLoader._save_if_not_saved", "pandas.read_csv().set_index", "deepcovidnet.ConstantFeatures.ConstantFeatures", "deepcovidnet.ConstantFeatures.ConstantFeatures", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._save_if_not_saved"], ["", "", "def", "_load_constant_features", "(", "self", ",", "feature_saver", ",", "save_func", ",", "feature_name", ")", ":", "\n", "        ", "self", ".", "_save_if_not_saved", "(", "\n", "feature_saver", ".", "save_file", ",", "\n", "save_func", "\n", ")", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "\n", "feature_saver", ".", "save_file", ",", "dtype", "=", "{", "'fips'", ":", "str", "}", "\n", ")", ".", "set_index", "(", "'fips'", ")", "\n", "\n", "return", "ConstantFeatures", "(", "df", ",", "feature_name", ",", "\n", "feature_saver", "=", "feature_saver", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataLoader.DataLoader._save_if_not_saved": [[152, 170], ["datetime.timedelta", "isinstance", "os.path.exists", "saver", "os.path.exists", "saver", "saver", "Exception", "saved_path_or_get_path"], "methods", ["None"], ["", "def", "_save_if_not_saved", "(", "self", ",", "saved_path_or_get_path", ",", "saver", ",", "\n", "start_date", "=", "None", ",", "end_date", "=", "None", ",", "\n", "interval", "=", "timedelta", "(", "1", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "saved_path_or_get_path", ",", "str", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "saved_path_or_get_path", ")", ":", "\n", "                ", "if", "start_date", "is", "None", "and", "end_date", "is", "None", ":", "\n", "                    ", "saver", "(", ")", "\n", "", "elif", "start_date", "is", "not", "None", "and", "end_date", "is", "not", "None", ":", "\n", "                    ", "saver", "(", "start_date", ",", "end_date", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'either both start_date, end_date must be'", "\n", "'provided or none must be'", ")", "\n", "", "", "", "else", ":", "# saved_path_or_get_path is a function", "\n", "            ", "cur_date", "=", "start_date", "\n", "while", "cur_date", "<", "end_date", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "saved_path_or_get_path", "(", "cur_date", ")", ")", ":", "\n", "                    ", "saver", "(", "cur_date", ",", "end_date", ")", "\n", "", "cur_date", "+=", "interval", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.GeometryUtility.GeometryUtility.get_poi_with_geom": [[10, 21], ["glob.glob", "pandas.concat", "geopandas.GeoDataFrame", "gdfs.to_crs.to_crs.to_crs", "pandas.concat.append", "pandas.read_csv", "geopandas.points_from_xy"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "get_poi_with_geom", "(", "cls", ")", ":", "\n", "        ", "dfs", "=", "[", "]", "\n", "for", "file", "in", "glob", ".", "glob", "(", "config", ".", "core_poi_apr_data_path", "+", "\"core_poi-part*.csv\"", ")", ":", "\n", "            ", "dfs", ".", "append", "(", "pd", ".", "read_csv", "(", "file", ",", "usecols", "=", "[", "'safegraph_place_id'", ",", "'latitude'", ",", "'longitude'", "]", ")", ")", "\n", "", "dfs", "=", "pd", ".", "concat", "(", "dfs", ")", "\n", "gdfs", "=", "gpd", ".", "GeoDataFrame", "(", "dfs", ",", "geometry", "=", "gpd", ".", "points_from_xy", "(", "dfs", ".", "longitude", ",", "dfs", ".", "latitude", ")", ")", "\n", "gdfs", "=", "gdfs", "[", "gdfs", ".", "geometry", ".", "type", "==", "'Point'", "]", "# Drop NoneType - empty geometries", "\n", "gdfs", ".", "crs", "=", "'epsg:4326'", "# This CRS is from the Safegraph sample notebook using the same data", "\n", "gdfs", "=", "gdfs", ".", "to_crs", "(", "'epsg:4269'", ")", "# Assume North American Datum projection (NAD83) - required for spatial join", "\n", "return", "gdfs", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.GeometryUtility.GeometryUtility.get_fips_with_geom": [[22, 28], ["geopandas.read_file"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_fips_with_geom", "(", "cls", ")", ":", "\n", "        ", "svi", "=", "gpd", ".", "read_file", "(", "config", ".", "svi_data_us_county_data_path", ")", "\n", "svi", "=", "svi", "[", "[", "'FIPS'", ",", "'geometry'", "]", "]", "\n", "svi", "=", "svi", "[", "svi", ".", "geometry", ".", "type", "==", "'Polygon'", "]", "# Drop NoneType - empty geometries", "\n", "return", "svi", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.GeometryUtility.GeometryUtility.get_poi_labeled_with_fips": [[29, 39], ["cls.get_poi_with_geom", "cls.get_fips_with_geom", "geopandas.sjoin", "geopandas.sjoin.drop"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.GeometryUtility.GeometryUtility.get_poi_with_geom", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.GeometryUtility.GeometryUtility.get_fips_with_geom"], ["", "@", "classmethod", "\n", "def", "get_poi_labeled_with_fips", "(", "cls", ")", ":", "\n", "        ", "\"\"\"\n        Get points of interest identifiers labeled with county FIPS code\n        :return: point of information safegraph ID with county FIPS code\n        \"\"\"", "\n", "poi_with_geom", "=", "cls", ".", "get_poi_with_geom", "(", ")", "\n", "fips_with_geom", "=", "cls", ".", "get_fips_with_geom", "(", ")", "\n", "poi_with_fips", "=", "gpd", ".", "sjoin", "(", "poi_with_geom", ",", "fips_with_geom", ",", "how", "=", "'left'", ",", "op", "=", "'intersects'", ")", "\n", "return", "poi_with_fips", ".", "drop", "(", "'geometry'", ",", "axis", "=", "1", ")", "[", "[", "'safegraph_place_id'", ",", "'FIPS'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeaturesList.FeaturesList.__init__": [[6, 25], ["range", "range", "len", "len", "type", "range", "len", "FeaturesList.FeaturesList.get_key", "type", "FeaturesList.FeaturesList.features[].combine", "indices_to_remove.append"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeaturesList.FeaturesList.get_key", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures.combine"], ["    ", "def", "__init__", "(", "self", ",", "features", ")", ":", "\n", "        ", "self", ".", "features", "=", "features", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "features", ")", ")", ":", "\n", "            ", "if", "type", "(", "self", ".", "features", "[", "i", "]", ")", "==", "CountyWiseTimeDependentFeatures", ":", "\n", "                ", "indices_to_remove", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "self", ".", "features", ")", ")", ":", "\n", "                    ", "if", "type", "(", "self", ".", "features", "[", "j", "]", ")", "==", "CountyWiseTimeDependentFeatures", ":", "\n", "                        ", "self", ".", "features", "[", "i", "]", ".", "combine", "(", "self", ".", "features", "[", "j", "]", ")", "\n", "indices_to_remove", ".", "append", "(", "j", ")", "\n", "\n", "", "", "for", "idx", "in", "indices_to_remove", ":", "\n", "                    ", "del", "self", ".", "features", "[", "idx", "]", "\n", "\n", "", "break", "\n", "\n", "", "", "self", ".", "key_to_feature", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "features", ")", ")", ":", "\n", "            ", "self", ".", "key_to_feature", "[", "self", ".", "get_key", "(", "self", ".", "features", "[", "i", "]", ",", "i", ")", "]", "=", "self", ".", "features", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeaturesList.FeaturesList.get_key": [[26, 30], ["str().zfill", "str"], "methods", ["None"], ["", "", "def", "get_key", "(", "self", ",", "feature", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "features", "[", "idx", "]", ".", "feature_name", "+", "f'_{str(idx).zfill(2)}_'", "+", "self", ".", "features", "[", "idx", "]", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeaturesList.FeaturesList.__len__": [[31, 33], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeaturesList.FeaturesList.__getitem__": [[34, 36], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "features", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeaturesList.FeaturesList.extract_torch_tensors": [[37, 46], ["range", "len", "FeaturesList.FeaturesList.features[].extract_torch_tensor().float", "FeaturesList.FeaturesList.get_key", "FeaturesList.FeaturesList.features[].extract_torch_tensor"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeaturesList.FeaturesList.get_key", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatures.RawFeatures.extract_torch_tensor"], ["", "def", "extract_torch_tensors", "(", "self", ",", "county_fips", ":", "str", ",", "start_date", ":", "date", ",", "end_date", ":", "date", ")", ":", "\n", "        ", "tensors", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "features", ")", ")", ":", "\n", "            ", "tensors", "[", "self", ".", "get_key", "(", "self", ".", "features", "[", "i", "]", ",", "i", ")", "]", "=", "self", ".", "features", "[", "i", "]", ".", "extract_torch_tensor", "(", "\n", "county_fips", ",", "start_date", ",", "end_date", "\n", ")", ".", "float", "(", ")", "\n", "\n", "", "return", "tensors", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Visualizer.Visualizer.__init__": [[18, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "runner", ")", ":", "\n", "        ", "self", ".", "runner", "=", "runner", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Visualizer.Visualizer.visualize_us_map": [[21, 93], ["deepcovidnet.CovidCountyDataset.CovidCountyDataset", "deepcovidnet.CovidCountyDataset.CovidCountyDataset", "deepcovidnet.CovidCountyDataset.CovidCountyDataset", "range", "round", "plotly.create_choropleth", "pickle.load", "len", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_county_fips", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_county_fips", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_county_fips", "dataset[].pop", "abs", "pandas.DataFrame().set_index().sort_index", "pandas.DataFrame().set_index().sort_index.to_csv", "datetime.timedelta", "open", "torch.no_grad", "Visualizer.Visualizer.runner.get_class_pred().item", "class_pred.keys", "len", "list", "dict", "dict", "dict", "deepcovidnet.get_spatial_csv", "deepcovidnet.get_spatial_csv", "deepcovidnet.get_spatial_csv", "[].unsqueeze", "class_pred.keys", "pandas.DataFrame().set_index", "Visualizer.Visualizer.runner.get_class_pred", "dict", "pandas.DataFrame", "numpy.array", "dt.strftime", "list", "list", "class_pred.keys", "class_pred.values", "class_pred.keys"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_county_fips", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_county_fips", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_county_fips", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_class_pred"], ["", "def", "visualize_us_map", "(", "self", ",", "dt", ",", "generate_csv", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "CovidCountyDataset", "(", "\n", "dt", ",", "dt", "+", "timedelta", "(", "1", ")", ",", "\n", "pickle", ".", "load", "(", "open", "(", "config", ".", "training_mean_std_file", ",", "'rb'", ")", ")", ",", "\n", "use_cache", "=", "False", "\n", ")", "\n", "\n", "class_pred", "=", "{", "}", "\n", "labels", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "            ", "for", "k", "in", "dataset", "[", "i", "]", ":", "\n", "                ", "if", "k", "!=", "dataset_config", ".", "labels_key", ":", "\n", "                    ", "dataset", "[", "i", "]", "[", "k", "]", "=", "dataset", "[", "i", "]", "[", "k", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "", "fips", "=", "dataset", ".", "get_county_fips", "(", "i", ")", "\n", "\n", "labels", "[", "fips", "]", "=", "dataset", "[", "i", "]", ".", "pop", "(", "dataset_config", ".", "labels_key", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "class_pred", "[", "fips", "]", "=", "self", ".", "runner", ".", "get_class_pred", "(", "\n", "self", ".", "runner", ".", "nets", "[", "0", "]", "(", "dataset", "[", "i", "]", ")", "\n", ")", ".", "item", "(", ")", "\n", "\n", "# pred_fig = ff.create_choropleth(", "\n", "#                 fips=list(class_pred.keys()),", "\n", "#                 values=list(class_pred.values()),", "\n", "#                 county_outline={'color': 'rgb(255,255,255)', 'width': 0.2}", "\n", "#             )", "\n", "\n", "# labels_fig = ff.create_choropleth(", "\n", "#                 fips=list(labels.keys()),", "\n", "#                 values=list(labels.values()),", "\n", "#                 county_outline={'color': 'rgb(255,255,255)', 'width': 0.2}", "\n", "#             )", "\n", "\n", "", "", "vs", "=", "[", "abs", "(", "labels", "[", "k", "]", "-", "class_pred", "[", "k", "]", ")", "for", "k", "in", "class_pred", ".", "keys", "(", ")", "]", "\n", "acc", "=", "round", "(", "(", "np", ".", "array", "(", "vs", ")", "==", "0", ")", ".", "sum", "(", ")", "*", "100", "/", "len", "(", "vs", ")", ",", "1", ")", "\n", "diff_fig", "=", "ff", ".", "create_choropleth", "(", "\n", "fips", "=", "list", "(", "class_pred", ".", "keys", "(", ")", ")", ",", "\n", "values", "=", "vs", ",", "\n", "county_outline", "=", "{", "'color'", ":", "'rgb(255,255,255)'", ",", "'width'", ":", "0.1", "}", ",", "\n", "title", "=", "dict", "(", "\n", "text", "=", "f'{dt.strftime(\"%B, %d\")}. Accuracy: {acc}%'", ",", "\n", "x", "=", "0.5", "\n", ")", ",", "\n", "colorscale", "=", "[", "'#388697'", ",", "'#6FD08C'", ",", "'#FAC05E'", ",", "'#EF6461'", "]", ",", "\n", "legend_title", "=", "'Class Difference'", ",", "\n", "plot_bgcolor", "=", "'#FFFFFF'", ",", "\n", "font", "=", "dict", "(", "family", "=", "'arial'", ")", ",", "\n", "legend", "=", "dict", "(", "font", "=", "dict", "(", "size", "=", "15", ")", ",", "x", "=", "0.92", ")", ",", "\n", ")", "\n", "\n", "# for i in range(len(pred_fig.data)):", "\n", "#     if pred_fig.data[i]['name']:", "\n", "#         try:", "\n", "#             pred_fig.data[i]['name'] = \\", "\n", "#                 dataset_config.label_to_str_range[int(pred_fig.data[i]['name'])]", "\n", "#             labels_fig.data[i]['name'] = \\", "\n", "#                 dataset_config.label_to_str_range[int(labels_fig.data[i]['name'])]", "\n", "#         except:", "\n", "#             pass", "\n", "\n", "if", "generate_csv", ":", "\n", "            ", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "{", "\n", "'fips'", ":", "list", "(", "class_pred", ".", "keys", "(", ")", ")", ",", "\n", "'pred'", ":", "list", "(", "class_pred", ".", "values", "(", ")", ")", ",", "\n", "'actual'", ":", "[", "labels", "[", "k", "]", "for", "k", "in", "class_pred", ".", "keys", "(", ")", "]", "\n", "}", ")", ".", "set_index", "(", "'fips'", ")", ".", "sort_index", "(", ")", "\n", "\n", "df", ".", "to_csv", "(", "config", ".", "get_spatial_csv", "(", "dt", ")", ")", "\n", "\n", "", "return", "diff_fig", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Visualizer.Visualizer.visualize_time_series": [[94, 165], ["deepcovidnet.CovidCountyDataset.CovidCountyDataset", "deepcovidnet.CovidCountyDataset.CovidCountyDataset", "deepcovidnet.CovidCountyDataset.CovidCountyDataset", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure", "matplotlib.tick_params", "matplotlib.tick_params", "matplotlib.tick_params", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().spines[].set_alpha", "matplotlib.gca().xaxis.set_major_formatter", "matplotlib.gca().xaxis.set_major_formatter", "matplotlib.gca().xaxis.set_major_formatter", "matplotlib.gca().xaxis.set_major_locator", "matplotlib.gca().xaxis.set_major_locator", "matplotlib.gca().xaxis.set_major_locator", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.legend", "matplotlib.legend", "matplotlib.legend", "matplotlib.gca().add_artist", "matplotlib.gca().add_artist", "matplotlib.gca().add_artist", "matplotlib.legend", "matplotlib.legend", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.gcf", "matplotlib.gcf", "matplotlib.gcf", "pickle.load", "matplotlib.DateFormatter", "matplotlib.DateFormatter", "matplotlib.DateFormatter", "matplotlib.DayLocator", "matplotlib.DayLocator", "matplotlib.DayLocator", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for().pop", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for().pop", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for().pop", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for.pop", "numpy.array", "numpy.array", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.hlines", "matplotlib.hlines", "matplotlib.hlines", "open", "torch.no_grad", "Visualizer.Visualizer.runner.get_class_pred", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for", "deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for", "abs", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "datetime.timedelta", "range", "range", "len"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_class_pred", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCountyDataset.CovidCountyDataset.get_input_data_for"], ["", "def", "visualize_time_series", "(", "self", ",", "fips_codes", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "dataset", "=", "CovidCountyDataset", "(", "\n", "start_date", ",", "end_date", ",", "\n", "pickle", ".", "load", "(", "open", "(", "config", ".", "training_mean_std_file", ",", "'rb'", ")", ")", ",", "\n", "use_cache", "=", "False", "\n", ")", "\n", "\n", "# design taken from https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "13", ",", "13", ")", ")", "\n", "\n", "# decorations", "\n", "plt", ".", "tick_params", "(", "axis", "=", "\"both\"", ",", "which", "=", "\"both\"", ",", "bottom", "=", "False", ",", "top", "=", "False", ",", "\n", "labelbottom", "=", "True", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "True", ")", "\n", "\n", "# Lighten borders", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "\"top\"", "]", ".", "set_alpha", "(", ".3", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "\"bottom\"", "]", ".", "set_alpha", "(", ".3", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "\"right\"", "]", ".", "set_alpha", "(", ".3", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "\"left\"", "]", ".", "set_alpha", "(", ".3", ")", "\n", "\n", "plt", ".", "gca", "(", ")", ".", "xaxis", ".", "set_major_formatter", "(", "mdates", ".", "DateFormatter", "(", "'%B %d'", ")", ")", "\n", "plt", ".", "gca", "(", ")", ".", "xaxis", ".", "set_major_locator", "(", "mdates", ".", "DayLocator", "(", "interval", "=", "5", ")", ")", "\n", "\n", "mpl", ".", "rc", "(", "'font'", ",", "family", "=", "'Arial'", ")", "\n", "\n", "for", "fips", "in", "fips_codes", ":", "\n", "            ", "in_tensors", "=", "dataset", ".", "get_input_data_for", "(", "\n", "fips", ",", "\n", "discrete_labels", "=", "False", "\n", ")", "\n", "labels_disc", "=", "dataset", ".", "get_input_data_for", "(", "fips", ")", ".", "pop", "(", "dataset_config", ".", "labels_key", ")", "\n", "\n", "labels_cont", "=", "in_tensors", ".", "pop", "(", "dataset_config", ".", "labels_key", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "self", ".", "runner", ".", "get_class_pred", "(", "\n", "self", ".", "runner", ".", "nets", "[", "0", "]", "(", "in_tensors", ")", "\n", ")", "\n", "\n", "", "x", "=", "np", ".", "array", "(", "[", "start_date", "+", "timedelta", "(", "i", ")", "for", "i", "in", "range", "(", "(", "end_date", "-", "start_date", ")", ".", "days", ")", "]", ")", "\n", "c", "=", "np", ".", "array", "(", "[", "abs", "(", "(", "labels_disc", "[", "i", "]", "-", "pred", "[", "i", "]", ")", ".", "item", "(", ")", ")", "for", "i", "in", "range", "(", "len", "(", "labels_disc", ")", ")", "]", ")", "\n", "\n", "mpl", ".", "rc", "(", "'font'", ",", "family", "=", "'Arial'", ")", "\n", "\n", "# plot", "\n", "plt", ".", "plot", "(", "x", ",", "labels_cont", ",", "':'", ",", "label", "=", "f'{features_config.county_info.loc[fips].Name}, {features_config.county_info.loc[fips].State}'", ")", "\n", "correct", "=", "plt", ".", "scatter", "(", "x", "[", "c", "==", "0", "]", ",", "labels_cont", "[", "c", "==", "0", "]", ",", "s", "=", "60", ",", "marker", "=", "'o'", ",", "\n", "color", "=", "(", "0.306", ",", "0.349", ",", "0.549", ")", ")", "\n", "incorrect", "=", "plt", ".", "scatter", "(", "x", "[", "c", "!=", "0", "]", ",", "labels_cont", "[", "c", "!=", "0", "]", ",", "s", "=", "60", ",", "marker", "=", "'o'", ",", "\n", "color", "=", "(", "1", ",", "0.745", ",", "0.043", ")", ")", "\n", "\n", "# other cosmetics", "\n", "", "legend", "=", "plt", ".", "legend", "(", "\n", "[", "correct", ",", "incorrect", "]", ",", "\n", "[", "'predicted = actual'", ",", "r'predicted $\\ne$ actual'", "]", ",", "\n", "fontsize", "=", "23", ",", "loc", "=", "'lower right'", "\n", ")", "\n", "\n", "plt", ".", "gca", "(", ")", ".", "add_artist", "(", "legend", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "23", ",", "loc", "=", "'upper right'", ")", "\n", "for", "ytick", "in", "plt", ".", "yticks", "(", ")", "[", "0", "]", ":", "\n", "            ", "plt", ".", "hlines", "(", "\n", "ytick", ",", "x", "[", "0", "]", ",", "x", "[", "-", "1", "]", ",", "colors", "=", "'black'", ",", "alpha", "=", "0.3", ",", "\n", "linestyles", "=", "\"--\"", ",", "lw", "=", "0.5", "\n", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'Rise in Cases'", ",", "fontsize", "=", "30", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "30", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "30", ")", "\n", "\n", "return", "plt", ".", "gcf", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCoralModule.CoralClassifier.__init__": [[8, 12], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "CoralClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", ",", "1", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "out_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCoralModule.CoralClassifier.forward": [[13, 15], ["CovidCoralModule.CoralClassifier.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "processed_ftrs", ")", ":", "\n", "        ", "return", "self", ".", "fc", "(", "processed_ftrs", ")", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidCoralModule.CovidCoralModule.__init__": [[19, 25], ["deepcovidnet.CovidModule.CovidModule.__init__", "CovidCoralModule.CoralClassifier"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CovidCoralModule", ",", "self", ")", ".", "__init__", "(", "dataset_config", ".", "num_classifiers", ")", "\n", "\n", "self", ".", "deep_fm", ".", "classifier", "=", "CoralClassifier", "(", "\n", "self", ".", "deep_fm", ".", "classifier", "[", "0", "]", ".", "in_features", ",", "\n", "self", ".", "output_neurons", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver.__init__": [[9, 13], ["deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.__init__", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "global_config", ".", "data_save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "global_config", ".", "data_save_dir", ")", "\n", "", "super", "(", "DataSaver", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver.save_census_data": [[14, 16], ["DataSaver.DataSaver._save_constant_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_constant_features"], ["", "def", "save_census_data", "(", "self", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "_save_constant_features", "(", "config", ".", "census_data", ",", "self", ".", "read_census_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver.save_pop_dens_ccvi": [[17, 19], ["DataSaver.DataSaver._save_constant_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_constant_features"], ["", "def", "save_pop_dens_ccvi", "(", "self", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "_save_constant_features", "(", "config", ".", "pop_dens_ccvi", ",", "self", ".", "read_pop_dens_ccvi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver.save_sg_patterns_monthly": [[20, 27], ["DataSaver.DataSaver._save_time_dep_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_time_dep_features"], ["", "def", "save_sg_patterns_monthly", "(", "self", ",", "start_date", ",", "end_date", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "_save_time_dep_features", "(", "\n", "start_date", ",", "\n", "end_date", ",", "\n", "self", ".", "read_sg_patterns_monthly", ",", "\n", "config", ".", "sg_patterns_monthly", ",", "\n", "overwrite", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver.save_sg_social_distancing": [[29, 36], ["DataSaver.DataSaver._save_time_dep_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_time_dep_features"], ["", "def", "save_sg_social_distancing", "(", "self", ",", "start_date", ",", "end_date", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "_save_time_dep_features", "(", "\n", "start_date", ",", "\n", "end_date", ",", "\n", "self", ".", "read_sg_social_distancing", ",", "\n", "config", ".", "sg_social_distancing", ",", "\n", "overwrite", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver.save_weather_data": [[38, 45], ["DataSaver.DataSaver._save_time_dep_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_time_dep_features"], ["", "def", "save_weather_data", "(", "self", ",", "start_date", ",", "end_date", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "_save_time_dep_features", "(", "\n", "start_date", ",", "\n", "end_date", ",", "\n", "self", ".", "read_weather_data", ",", "\n", "config", ".", "weather", ",", "\n", "overwrite", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver.save_num_cases": [[47, 54], ["DataSaver.DataSaver._save_time_dep_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_time_dep_features"], ["", "def", "save_num_cases", "(", "self", ",", "start_date", ",", "end_date", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "_save_time_dep_features", "(", "\n", "start_date", ",", "\n", "end_date", ",", "\n", "self", ".", "read_num_cases", ",", "\n", "config", ".", "num_cases", ",", "\n", "overwrite", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver.save_dilation_index": [[56, 63], ["DataSaver.DataSaver._save_time_dep_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_time_dep_features"], ["", "def", "save_dilation_index", "(", "self", ",", "start_date", ",", "end_date", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "_save_time_dep_features", "(", "\n", "start_date", ",", "\n", "end_date", ",", "\n", "self", ".", "read_dilation_index", ",", "\n", "config", ".", "dilation_index", ",", "\n", "overwrite", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver.save_reproduction_number": [[65, 72], ["DataSaver.DataSaver._save_time_dep_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_time_dep_features"], ["", "def", "save_reproduction_number", "(", "self", ",", "start_date", ",", "end_date", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "_save_time_dep_features", "(", "\n", "start_date", ",", "\n", "end_date", ",", "\n", "self", ".", "read_reproduction_number", ",", "\n", "config", ".", "reproduction_number", ",", "\n", "overwrite", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver.save_countywise_cumulative_cases": [[74, 82], ["DataSaver.DataSaver._save_time_dep_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_time_dep_features"], ["", "def", "save_countywise_cumulative_cases", "(", "self", ",", "start_date", ",", "end_date", ",", "\n", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "_save_time_dep_features", "(", "\n", "start_date", ",", "\n", "end_date", ",", "\n", "self", ".", "read_countywise_cumulative_cases", ",", "\n", "config", ".", "countywise_cumulative_cases", ",", "\n", "overwrite", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver.save_sg_mobility_incoming": [[84, 91], ["DataSaver.DataSaver._save_time_dep_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_time_dep_features"], ["", "def", "save_sg_mobility_incoming", "(", "self", ",", "start_date", ",", "end_date", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "_save_time_dep_features", "(", "\n", "start_date", ",", "\n", "end_date", ",", "\n", "self", ".", "read_sg_mobility_incoming", ",", "\n", "config", ".", "sg_mobility", ",", "\n", "overwrite", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_constant_features": [[93, 99], ["DataSaver.DataSaver._save_df", "os.path.exists", "os.mkdir", "read_func"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_df"], ["", "def", "_save_constant_features", "(", "self", ",", "feature_saver", ",", "read_func", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "feature_saver", ".", "root", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "feature_saver", ".", "root", ")", "\n", "\n", "", "df", "=", "read_func", "(", ")", ".", "raw_features", "\n", "self", ".", "_save_df", "(", "feature_saver", ".", "save_file", ",", "df", ",", "overwrite", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_time_dep_features": [[100, 110], ["get_features", "range", "os.path.exists", "os.mkdir", "len", "DataSaver.DataSaver._save_df", "saver_config.get_file_func", "get_features.get_date"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_df", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.get_date"], ["", "def", "_save_time_dep_features", "(", "self", ",", "start_date", ",", "end_date", ",", "get_features", ",", "\n", "saver_config", ",", "overwrite", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "saver_config", ".", "root", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "saver_config", ".", "root", ")", "\n", "\n", "", "features", "=", "get_features", "(", "start_date", ",", "end_date", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "features", ".", "raw_features", ")", ")", ":", "\n", "            ", "save_file", "=", "saver_config", ".", "get_file_func", "(", ")", "(", "features", ".", "get_date", "(", "i", ")", ")", "\n", "self", ".", "_save_df", "(", "save_file", ",", "features", ".", "raw_features", "[", "i", "]", ",", "overwrite", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DataSaver.DataSaver._save_df": [[111, 119], ["os.path.exists", "df.to_csv", "logging.info", "logging.warning"], "methods", ["None"], ["", "", "def", "_save_df", "(", "self", ",", "save_file", ",", "df", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "save_file", ")", ":", "\n", "            ", "logging", ".", "warning", "(", "f'{save_file} already exists!'", ")", "\n", "if", "not", "overwrite", ":", "\n", "                ", "return", "\n", "\n", "", "", "df", ".", "to_csv", "(", "save_file", ",", "index_label", "=", "'fips'", ")", "\n", "logging", ".", "info", "(", "f'Saved {save_file}!'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.__init__": [[18, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "runner", ",", "val_loader", ")", ":", "\n", "        ", "self", ".", "runner", "=", "runner", "\n", "\n", "self", ".", "__acc_name", "=", "'acc'", "\n", "assert", "self", ".", "runner", ".", "best_metric_name", "==", "self", ".", "__acc_name", "\n", "\n", "self", ".", "__orig_acc", "=", "self", ".", "runner", ".", "best_metric_val", "\n", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "__key_to_feature", "=", "self", ".", "val_loader", ".", "dataset", ".", "features", ".", "key_to_feature", "\n", "\n", "self", ".", "__features", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.get_ranked_features": [[31, 155], ["list", "list.remove", "FeatureAnalyzer.FeatureAnalyzer.__features.sort", "pandas.DataFrame", "pandas.DataFrame.to_csv", "sample_batch.keys", "tqdm.tqdm.tqdm", "deepcovidnet.get_ranks_file", "deepcovidnet.get_ranks_file", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "torch.cuda.is_available", "range", "FeatureAnalyzer.FeatureAnalyzer.__features.append", "enumerate", "tqdm.tqdm.tqdm", "FeatureAnalyzer.FeatureAnalyzer.__features.append", "tqdm.tqdm.tqdm", "batch[].cuda", "batch[].index_select().squeeze", "FeatureAnalyzer.FeatureAnalyzer.track_acc", "FeatureAnalyzer.FeatureAnalyzer.randomize_feature", "FeatureAnalyzer.FeatureAnalyzer.track_acc", "range", "FeatureAnalyzer.FeatureAnalyzer.__features.append", "tqdm.tqdm.tqdm", "batch[].dim", "FeatureAnalyzer.FeatureAnalyzer.randomize_feature", "batch[].dim", "FeatureAnalyzer.FeatureAnalyzer.__key_to_feature[].get_feature_name", "sample_batch[].dim", "time_dep_keys.append", "FeatureAnalyzer.FeatureAnalyzer.track_acc", "torch.cuda.is_available", "net.eval", "batch.pop", "net.embedding_module", "net.deep_fm.compute_soi", "net.deep_fm.so_int[].abs().mean().item", "FeatureAnalyzer.FeatureAnalyzer.__features.append", "batch[].index_select", "batch[].dim", "FeatureAnalyzer.FeatureAnalyzer.randomize_feature", "batch[].dim", "FeatureAnalyzer.FeatureAnalyzer.randomize_feature", "FeatureAnalyzer.FeatureAnalyzer.track_acc", "batch[].dim", "FeatureAnalyzer.FeatureAnalyzer.randomize_feature", "batch[].dim", "batch[].cuda", "net.deep_fm.so_int[].abs().mean", "torch.cuda.is_available", "torch.tensor().cuda", "torch.tensor", "net.deep_fm.so_int[].abs", "FeatureAnalyzer.FeatureAnalyzer.get_ranked_features.get_metrics"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.FeatureAnalyzerConfig.get_ranks_file", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.FeatureAnalyzerConfig.get_ranks_file", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.track_acc", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.randomize_feature", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.track_acc", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.randomize_feature", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatures.RawFeatures.get_feature_name", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.track_acc", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.DeepFM.compute_soi", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.randomize_feature", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.randomize_feature", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.track_acc", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.randomize_feature", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_metrics"], ["", "def", "get_ranked_features", "(", "self", ",", "analysis_type", "=", "AnalysisType", ".", "FEATURE", ")", ":", "\n", "        ", "for", "sample_batch", "in", "self", ".", "val_loader", ":", "\n", "            ", "break", "\n", "\n", "", "keys", "=", "list", "(", "sample_batch", ".", "keys", "(", ")", ")", "\n", "keys", ".", "remove", "(", "dataset_config", ".", "labels_key", ")", "\n", "\n", "if", "analysis_type", "==", "AnalysisType", ".", "FEATURE", ":", "\n", "            ", "for", "k", "in", "tqdm", "(", "keys", ")", ":", "\n", "                ", "ftr_idx_to_perf", "=", "{", "}", "\n", "for", "batch", "in", "tqdm", "(", "self", ".", "val_loader", ")", ":", "\n", "                    ", "orig_shape", "=", "batch", "[", "k", "]", ".", "shape", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                        ", "batch", "[", "k", "]", "=", "batch", "[", "k", "]", ".", "cuda", "(", ")", "\n", "", "for", "ftr_idx", "in", "range", "(", "batch", "[", "k", "]", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "# randomize feature", "\n", "                        ", "orig_vals", "=", "batch", "[", "k", "]", ".", "index_select", "(", "\n", "-", "1", ",", "torch", ".", "tensor", "(", "ftr_idx", ")", ".", "cuda", "(", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "tensor", "(", "ftr_idx", ")", "\n", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "batch", "[", "k", "]", ".", "dim", "(", ")", "==", "2", ":", "\n", "                            ", "batch", "[", "k", "]", "[", ":", ",", "ftr_idx", "]", "=", "self", ".", "randomize_feature", "(", "orig_vals", ".", "shape", ")", "\n", "", "elif", "batch", "[", "k", "]", ".", "dim", "(", ")", "==", "3", ":", "\n", "                            ", "batch", "[", "k", "]", "[", ":", ",", ":", ",", "ftr_idx", "]", "=", "self", ".", "randomize_feature", "(", "orig_vals", ".", "shape", ")", "\n", "", "elif", "batch", "[", "k", "]", ".", "dim", "(", ")", "==", "4", ":", "\n", "                            ", "batch", "[", "k", "]", "[", ":", ",", ":", ",", ":", ",", "ftr_idx", "]", "=", "self", ".", "randomize_feature", "(", "orig_vals", ".", "shape", ")", "\n", "\n", "# find new acc and keep its track", "\n", "", "self", ".", "track_acc", "(", "batch", ",", "ftr_idx", ",", "ftr_idx_to_perf", ",", "batch", "[", "k", "]", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# restore feature value", "\n", "if", "batch", "[", "k", "]", ".", "dim", "(", ")", "==", "2", ":", "\n", "                            ", "batch", "[", "k", "]", "[", ":", ",", "ftr_idx", "]", "=", "orig_vals", "\n", "", "elif", "batch", "[", "k", "]", ".", "dim", "(", ")", "==", "3", ":", "\n", "                            ", "batch", "[", "k", "]", "[", ":", ",", ":", ",", "ftr_idx", "]", "=", "orig_vals", "\n", "", "elif", "batch", "[", "k", "]", ".", "dim", "(", ")", "==", "4", ":", "\n", "                            ", "batch", "[", "k", "]", "[", ":", ",", ":", ",", ":", ",", "ftr_idx", "]", "=", "orig_vals", "\n", "\n", "# get difference from the best model", "\n", "", "", "", "for", "ftr_idx", "in", "ftr_idx_to_perf", ":", "\n", "                    ", "self", ".", "__features", ".", "append", "(", "\n", "[", "\n", "self", ".", "__key_to_feature", "[", "k", "]", ".", "get_feature_name", "(", "ftr_idx", ")", ",", "\n", "self", ".", "__orig_acc", "-", "ftr_idx_to_perf", "[", "ftr_idx", "]", ".", "avg", "\n", "]", "\n", ")", "\n", "", "", "", "elif", "analysis_type", "==", "AnalysisType", ".", "GROUP", ":", "\n", "            ", "for", "ftr_idx", ",", "k", "in", "tqdm", "(", "enumerate", "(", "keys", ")", ")", ":", "\n", "                ", "ftr_idx_to_perf", "=", "{", "}", "\n", "for", "batch", "in", "tqdm", "(", "self", ".", "val_loader", ")", ":", "\n", "                    ", "batch", "[", "k", "]", "=", "self", ".", "randomize_feature", "(", "batch", "[", "k", "]", ".", "shape", ")", "\n", "\n", "self", ".", "track_acc", "(", "batch", ",", "ftr_idx", ",", "ftr_idx_to_perf", ",", "batch", "[", "k", "]", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# get difference from the best model", "\n", "", "self", ".", "__features", ".", "append", "(", "\n", "[", "k", ",", "self", ".", "__orig_acc", "-", "ftr_idx_to_perf", "[", "ftr_idx", "]", ".", "avg", "]", "\n", ")", "\n", "", "", "elif", "analysis_type", "==", "AnalysisType", ".", "TIME", ":", "\n", "            ", "timesteps", "=", "None", "\n", "time_dep_keys", "=", "[", "]", "\n", "for", "k", "in", "keys", ":", "\n", "                ", "if", "sample_batch", "[", "k", "]", ".", "dim", "(", ")", "==", "3", ":", "# time dependent features", "\n", "                    ", "time_dep_keys", ".", "append", "(", "k", ")", "\n", "if", "timesteps", "is", "None", ":", "\n", "                        ", "timesteps", "=", "sample_batch", "[", "k", "]", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "                        ", "assert", "timesteps", "==", "sample_batch", "[", "k", "]", ".", "shape", "[", "1", "]", "\n", "\n", "", "", "", "for", "time_idx", "in", "tqdm", "(", "range", "(", "timesteps", ")", ")", ":", "\n", "                ", "time_idx_to_perf", "=", "{", "}", "\n", "for", "batch", "in", "self", ".", "val_loader", ":", "\n", "                    ", "batch_size", "=", "None", "\n", "for", "k", "in", "time_dep_keys", ":", "\n", "                        ", "shape", "=", "batch", "[", "k", "]", "[", ":", ",", "time_idx", ",", ":", "]", ".", "shape", "\n", "batch", "[", "k", "]", "[", ":", ",", "time_idx", ",", ":", "]", "=", "self", ".", "randomize_feature", "(", "shape", ")", "\n", "if", "batch_size", "is", "None", ":", "\n", "                            ", "batch_size", "=", "batch", "[", "k", "]", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "                            ", "assert", "batch_size", "==", "batch", "[", "k", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "self", ".", "track_acc", "(", "batch", ",", "time_idx", ",", "time_idx_to_perf", ",", "batch_size", ")", "\n", "\n", "", "self", ".", "__features", ".", "append", "(", "\n", "[", "f'day_{time_idx + 1}'", ",", "self", ".", "__orig_acc", "-", "time_idx_to_perf", "[", "time_idx", "]", ".", "avg", "]", "\n", ")", "\n", "", "", "elif", "analysis_type", "==", "AnalysisType", ".", "SOI", ":", "\n", "            ", "def", "get_metrics", "(", "self", ",", "soi_idx", ",", "batch", ")", ":", "\n", "                ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "for", "k", "in", "batch", ":", "\n", "                        ", "batch", "[", "k", "]", "=", "batch", "[", "k", "]", ".", "cuda", "(", ")", "\n", "\n", "", "", "net", "=", "self", ".", "runner", ".", "nets", "[", "0", "]", "\n", "net", ".", "eval", "(", ")", "\n", "labels", "=", "batch", ".", "pop", "(", "dataset_config", ".", "labels_key", ")", "\n", "\n", "emb", "=", "net", ".", "embedding_module", "(", "batch", ")", "\n", "net", ".", "deep_fm", ".", "compute_soi", "(", "emb", ")", "\n", "mean_imp", "=", "net", ".", "deep_fm", ".", "so_int", "[", ":", ",", "soi_idx", "]", ".", "abs", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "return", "[", "(", "'imp'", ",", "mean_imp", ")", "]", "\n", "\n", "", "net", "=", "self", ".", "runner", ".", "nets", "[", "0", "]", "\n", "ftr_idx_to_perf", "=", "{", "}", "\n", "for", "soi_idx", "in", "tqdm", "(", "net", ".", "deep_fm", ".", "so_int_labels", ")", ":", "\n", "                ", "for", "batch", "in", "self", ".", "val_loader", ":", "\n", "                    ", "self", ".", "track_acc", "(", "\n", "batch", ",", "soi_idx", ",", "ftr_idx_to_perf", ",", "\n", "batch", "[", "list", "(", "batch", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "shape", "[", "0", "]", ",", "\n", "get_metrics", "=", "lambda", "batch", ":", "get_metrics", "(", "self", ",", "soi_idx", ",", "batch", ")", ",", "\n", "metric_name", "=", "'imp'", "\n", ")", "\n", "\n", "", "self", ".", "__features", ".", "append", "(", "[", "\n", "' | '", ".", "join", "(", "net", ".", "deep_fm", ".", "so_int_labels", "[", "soi_idx", "]", ")", ",", "\n", "ftr_idx_to_perf", "[", "soi_idx", "]", ".", "avg", "\n", "]", ")", "\n", "\n", "# rank features", "\n", "", "", "self", ".", "__features", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "self", ".", "__features", ",", "columns", "=", "[", "'feature'", ",", "'importance'", "]", ")", "\n", "df", ".", "to_csv", "(", "config", ".", "get_ranks_file", "(", "self", ".", "runner", ".", "exp_name", ")", ",", "index", "=", "False", ")", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.track_acc": [[156, 168], ["FeatureAnalyzer.FeatureAnalyzer._test_batch_and_get_acc", "ftr_idx_to_perf[].update", "utils.AverageMeter", "ftr_idx_to_perf[].update"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer._test_batch_and_get_acc", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.update", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.update"], ["", "def", "track_acc", "(", "\n", "self", ",", "batch", ",", "ftr_idx", ",", "ftr_idx_to_perf", ",", "batch_size", ",", "get_metrics", "=", "None", ",", "\n", "metric_name", "=", "None", "\n", ")", ":", "\n", "        ", "acc", "=", "self", ".", "_test_batch_and_get_acc", "(", "\n", "batch", ",", "get_metrics", "=", "get_metrics", ",", "metric_name", "=", "metric_name", "\n", ")", "\n", "if", "ftr_idx", "in", "ftr_idx_to_perf", ":", "\n", "            ", "ftr_idx_to_perf", "[", "ftr_idx", "]", ".", "update", "(", "acc", ",", "n", "=", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "ftr_idx_to_perf", "[", "ftr_idx", "]", "=", "AverageMeter", "(", "''", ")", "\n", "ftr_idx_to_perf", "[", "ftr_idx", "]", ".", "update", "(", "acc", ",", "n", "=", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer.randomize_feature": [[169, 171], ["torch.normal"], "methods", ["None"], ["", "", "def", "randomize_feature", "(", "self", ",", "shape", ")", ":", "\n", "        ", "return", "torch", ".", "normal", "(", "mean", "=", "0", ",", "std", "=", "1", ",", "size", "=", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.FeatureAnalyzer.FeatureAnalyzer._test_batch_and_get_acc": [[172, 193], ["range", "len", "FeatureAnalyzer.FeatureAnalyzer.runner.nets[].eval", "torch.no_grad", "FeatureAnalyzer.FeatureAnalyzer.get_ranked_features.get_metrics", "batch_dict.update", "Exception"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CovidRunner.CovidRunner.get_metrics", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.update"], ["", "def", "_test_batch_and_get_acc", "(", "\n", "self", ",", "batch_dict", ",", "get_metrics", "=", "None", ",", "metric_name", "=", "None", "\n", ")", ":", "\n", "        ", "if", "get_metrics", "is", "None", ":", "\n", "            ", "get_metrics", "=", "self", ".", "runner", ".", "test_batch_and_get_metrics", "\n", "\n", "", "if", "metric_name", "is", "None", ":", "\n", "            ", "metric_name", "=", "self", ".", "__acc_name", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "runner", ".", "nets", ")", ")", ":", "\n", "            ", "self", ".", "runner", ".", "nets", "[", "i", "]", ".", "eval", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "labels", "=", "batch_dict", "[", "dataset_config", ".", "labels_key", "]", "\n", "metrics", "=", "get_metrics", "(", "batch_dict", ")", "\n", "batch_dict", ".", "update", "(", "{", "dataset_config", ".", "labels_key", ":", "labels", "}", ")", "\n", "for", "(", "name", ",", "val", ")", "in", "metrics", ":", "\n", "                ", "if", "name", "==", "metric_name", ":", "\n", "                    ", "return", "val", "\n", "\n", "", "", "raise", "Exception", "(", "f'{self.__acc_name} not found in metrics'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures.__init__": [[11, 23], ["deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.__init__"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "raw_features", ",", "feature_name", ":", "str", ",", "start_date", ":", "date", ",", "\n", "interval", ":", "timedelta", ",", "cur_type", ":", "str", ",", "feature_saver", "\n", ")", ":", "\n", "        ", "assert", "cur_type", "in", "config", ".", "types", "\n", "super", "(", "CountyWiseTimeDependentFeatures", ",", "self", ")", ".", "__init__", "(", "\n", "raw_features", ",", "feature_name", ",", "start_date", ",", "interval", ",", "feature_saver", "\n", ")", "\n", "self", ".", "type", "=", "cur_type", "\n", "self", ".", "combined_features", "=", "[", "self", "]", "\n", "self", ".", "combined_start_date", "=", "self", ".", "start_date", "\n", "self", ".", "max_interval", "=", "self", ".", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures.extract_torch_tensor": [[24, 72], ["len", "torch.zeros", "enumerate", "range", "datetime.timedelta", "len", "len", "range", "len", "common_dates.append", "len", "CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures.combined_features[].get_index", "torch.tensor", "CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures.combined_features[].get_index", "numpy.squeeze", "df.to_numpy"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.get_index", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.TimeDependentFeatures.TimeDependentFeatures.get_index"], ["", "def", "extract_torch_tensor", "(", "\n", "self", ",", "county_fips", ":", "str", ",", "start_date", ":", "date", ",", "end_date", ":", "date", "\n", ")", ":", "\n", "        ", "assert", "start_date", ">=", "self", ".", "combined_start_date", "\n", "\n", "cur_date", "=", "start_date", "\n", "common_dates", "=", "[", "]", "\n", "while", "(", "end_date", "-", "cur_date", ")", ".", "days", ">=", "self", ".", "max_interval", ".", "days", ":", "\n", "            ", "found_all_features", "=", "True", "\n", "for", "feature_index", "in", "range", "(", "len", "(", "self", ".", "combined_features", ")", ")", ":", "\n", "                ", "if", "self", ".", "combined_features", "[", "feature_index", "]", ".", "get_index", "(", "cur_date", ")", "is", "None", ":", "\n", "                    ", "found_all_features", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "found_all_features", ":", "\n", "                ", "common_dates", ".", "append", "(", "cur_date", ")", "\n", "\n", "", "cur_date", "+=", "timedelta", "(", "1", ")", "\n", "\n", "", "assert", "len", "(", "common_dates", ")", ",", "'Features not combinable due to no common dates'", "\n", "\n", "# init tensor of shape (num_counties, num_time_steps, num_features)", "\n", "tensor", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "raw_features", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "\n", "len", "(", "common_dates", ")", ",", "\n", "len", "(", "self", ".", "combined_features", ")", "\n", ")", "\n", "\n", "for", "i", ",", "common_date", "in", "enumerate", "(", "common_dates", ")", ":", "\n", "            ", "for", "feature_index", "in", "range", "(", "len", "(", "self", ".", "combined_features", ")", ")", ":", "\n", "                ", "date_index", "=", "self", ".", "combined_features", "[", "feature_index", "]", ".", "get_index", "(", "common_date", ")", "\n", "\n", "df", "=", "self", ".", "combined_features", "[", "feature_index", "]", ".", "raw_features", "[", "date_index", "]", "\n", "\n", "cur_type", "=", "self", ".", "combined_features", "[", "feature_index", "]", ".", "type", "\n", "\n", "if", "cur_type", "==", "config", ".", "cross_type", ":", "\n", "                    ", "assert", "(", "df", ".", "columns", "==", "features_config", ".", "county_info", ".", "index", ")", ".", "all", "(", ")", "\n", "features", "=", "df", ".", "values", "[", "features_config", ".", "county_to_iloc", "[", "county_fips", "]", "]", "\n", "", "elif", "cur_type", "==", "config", ".", "const_type", ":", "\n", "                    ", "assert", "df", ".", "shape", "[", "1", "]", "==", "1", "\n", "features", "=", "np", ".", "squeeze", "(", "df", ".", "to_numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "tensor", "[", ":", ",", "i", ",", "feature_index", "]", "=", "torch", ".", "tensor", "(", "features", ")", "\n", "\n", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures.combine": [[73, 81], ["min", "max", "CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures.combined_features.append"], "methods", ["None"], ["", "def", "combine", "(", "self", ",", "other", ")", ":", "\n", "        ", "self", ".", "combined_start_date", "=", "min", "(", "self", ".", "combined_start_date", ",", "other", ".", "start_date", ")", "\n", "\n", "self", ".", "max_interval", "=", "max", "(", "self", ".", "max_interval", ",", "other", ".", "interval", ")", "\n", "\n", "self", ".", "combined_features", ".", "append", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures.get_feature_name": [[82, 84], ["None"], "methods", ["None"], ["", "def", "get_feature_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "combined_features", "[", "idx", "]", ".", "feature_name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalBCEWithLogitsLoss.__init__": [[37, 40], ["torch.Module.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OrdinalBCEWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bce_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalBCEWithLogitsLoss.forward": [[41, 47], ["OrdinalCovidRunner.get_ordinal_labels", "OrdinalCovidRunner.OrdinalBCEWithLogitsLoss.bce_loss", "pred.flatten().unsqueeze", "get_ordinal_labels.flatten().unsqueeze", "pred.flatten", "get_ordinal_labels.flatten"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.get_ordinal_labels"], ["", "def", "forward", "(", "self", ",", "pred", ",", "labels", ")", ":", "\n", "        ", "transformed", "=", "get_ordinal_labels", "(", "labels", ")", "\n", "\n", "return", "self", ".", "bce_loss", "(", "\n", "pred", ".", "flatten", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "transformed", ".", "flatten", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCrossEntropy.__init__": [[51, 54], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OrdinalCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCrossEntropy.forward": [[55, 58], ["OrdinalCovidRunner.get_class_prob", "OrdinalCovidRunner.OrdinalCrossEntropy.loss"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.get_class_prob"], ["", "def", "forward", "(", "self", ",", "pred", ",", "labels", ")", ":", "\n", "        ", "class_prob", "=", "get_class_prob", "(", "pred", ")", "\n", "return", "self", ".", "loss", "(", "class_prob", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.CustomLoss.__init__": [[61, 66], ["torch.Module.__init__", "OrdinalCovidRunner.OrdinalBCEWithLogitsLoss", "OrdinalCovidRunner.OrdinalCrossEntropy"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CustomLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bce", "=", "OrdinalBCEWithLogitsLoss", "(", ")", "\n", "self", ".", "ce", "=", "OrdinalCrossEntropy", "(", ")", "\n", "self", ".", "last_losses", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.CustomLoss.forward": [[67, 80], ["OrdinalCovidRunner.CustomLoss.bce", "OrdinalCovidRunner.CustomLoss.ce", "loss.item", "OrdinalCovidRunner.CustomLoss.item", "loss.item", "ce.item", "loss.item", "OrdinalCovidRunner.CustomLoss.item", "ce.item", "loss.item", "loss.item"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "labels", ")", ":", "\n", "        ", "bce", "=", "self", ".", "bce", "(", "pred", ",", "labels", ")", "\n", "ce", "=", "self", ".", "ce", "(", "pred", ",", "labels", ")", "*", "hyperparams", ".", "ce_coeff", "\n", "\n", "loss", "=", "bce", "+", "ce", "\n", "\n", "eps", "=", "0.0000001", "\n", "if", "loss", ".", "item", "(", ")", ">", "eps", ":", "\n", "            ", "self", ".", "last_losses", "=", "[", "bce", ".", "item", "(", ")", "/", "loss", ".", "item", "(", ")", ",", "ce", ".", "item", "(", ")", "/", "loss", ".", "item", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "last_losses", "=", "[", "bce", ".", "item", "(", ")", "/", "(", "loss", ".", "item", "(", ")", "+", "eps", ")", ",", "ce", ".", "item", "(", ")", "/", "(", "loss", ".", "item", "(", ")", "+", "eps", ")", "]", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.__init__": [[83, 99], ["deepcovidnet.CovidRunner.CovidRunner.__init__", "deepcovidnet.CovidModule.CovidModule", "deepcovidnet.CovidModule.CovidModule", "OrdinalCovidRunner.CustomLoss"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "exp_name", ",", "net", "=", "None", ",", "loss_fn", "=", "None", ",", "load_path", "=", "None", ",", "\n", "sample_batch", "=", "None", "\n", ")", ":", "\n", "        ", "if", "net", "is", "None", ":", "\n", "            ", "net", "=", "CovidModule", "(", "output_neurons", "=", "dataset_config", ".", "num_classifiers", ")", "\n", "\n", "", "if", "loss_fn", "is", "None", ":", "\n", "            ", "loss_fn", "=", "CustomLoss", "(", ")", "\n", "\n", "", "super", "(", "OrdinalCovidRunner", ",", "self", ")", ".", "__init__", "(", "\n", "exp_name", "=", "exp_name", ",", "\n", "net", "=", "net", ",", "\n", "loss_fn", "=", "loss_fn", ",", "\n", "load_path", "=", "load_path", ",", "\n", "sample_batch", "=", "sample_batch", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner._get_extra_metrics": [[101, 109], ["OrdinalCovidRunner.OrdinalCovidRunner.get_classifier_based_acc_and_error", "OrdinalCovidRunner.OrdinalCovidRunner.get_classifier_acc"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_classifier_based_acc_and_error", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_classifier_acc"], ["", "def", "_get_extra_metrics", "(", "self", ",", "pred", ",", "labels", ")", ":", "\n", "        ", "metrics", "=", "[", "\n", "(", "'classifier_acc'", ",", "self", ".", "get_classifier_acc", "(", "pred", ",", "labels", ")", ")", ",", "\n", "(", "'bce_contrib'", ",", "self", ".", "loss_fn", ".", "last_losses", "[", "0", "]", ")", ",", "\n", "(", "'ce_contrib'", ",", "self", ".", "loss_fn", ".", "last_losses", "[", "1", "]", ")", "\n", "]", "\n", "\n", "return", "self", ".", "get_classifier_based_acc_and_error", "(", "pred", ",", "labels", ")", "+", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_classifier_based_acc_and_error": [[110, 123], ["OrdinalCovidRunner.OrdinalCovidRunner.get_bin_class_pred", "OrdinalCovidRunner.OrdinalCovidRunner.sum", "ans.append", "range", "ans.append", "OrdinalCovidRunner.OrdinalCovidRunner.sum.numel", "bin_pred[].sort"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_bin_class_pred"], ["", "def", "get_classifier_based_acc_and_error", "(", "self", ",", "pred", ",", "labels", ")", ":", "\n", "        ", "ans", "=", "[", "]", "\n", "bin_pred", "=", "self", ".", "get_bin_class_pred", "(", "pred", ")", "\n", "class_pred", "=", "bin_pred", ".", "sum", "(", "dim", "=", "1", ")", "\n", "ans", ".", "append", "(", "(", "'bin_acc'", ",", "(", "(", "class_pred", "==", "labels", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "class_pred", ".", "numel", "(", ")", ")", ".", "item", "(", ")", ")", ")", "\n", "\n", "err", "=", "0", "\n", "for", "i", "in", "range", "(", "bin_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "not", "(", "bin_pred", "[", "i", ",", ":", "]", "==", "bin_pred", "[", "i", ",", ":", "]", ".", "sort", "(", "descending", "=", "True", ")", "[", "0", "]", ")", ".", "all", "(", ")", ":", "\n", "                ", "err", "+=", "1", "\n", "", "", "ans", ".", "append", "(", "(", "'bin_err'", ",", "err", "/", "bin_pred", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_classifier_acc": [[124, 130], ["get_ordinal_labels().flatten", "OrdinalCovidRunner.OrdinalCovidRunner.get_bin_class_pred().flatten", "OrdinalCovidRunner.OrdinalCovidRunner.numel", "OrdinalCovidRunner.get_ordinal_labels", "OrdinalCovidRunner.OrdinalCovidRunner.get_bin_class_pred"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.get_ordinal_labels", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_bin_class_pred"], ["", "def", "get_classifier_acc", "(", "self", ",", "pred", ",", "labels", ")", ":", "\n", "        ", "ordinal_labels", "=", "get_ordinal_labels", "(", "labels", ")", ".", "flatten", "(", ")", "\n", "flat_class_pred", "=", "self", ".", "get_bin_class_pred", "(", "pred", ")", ".", "flatten", "(", ")", "\n", "return", "(", "flat_class_pred", "==", "ordinal_labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "flat_class_pred", ".", "numel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_bin_class_pred": [[131, 137], ["pred.sigmoid", "range", "pred.sigmoid.long", "torch.Threshold", "torch.Threshold", "torch.Threshold.ceil", "getattr", "torch.Threshold."], "methods", ["None"], ["", "def", "get_bin_class_pred", "(", "self", ",", "pred", ")", ":", "\n", "        ", "prob", "=", "pred", ".", "sigmoid", "(", ")", "\n", "for", "i", "in", "range", "(", "prob", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "thresh", "=", "nn", ".", "Threshold", "(", "getattr", "(", "hyperparams", ",", "f'bin_thresh_{i}'", ")", ",", "0", ")", "\n", "prob", "[", ":", ",", "i", "]", "=", "thresh", "(", "prob", "[", ":", ",", "i", "]", ")", ".", "ceil", "(", ")", "\n", "", "return", "prob", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.OrdinalCovidRunner.get_class_pred": [[138, 141], ["OrdinalCovidRunner.get_class_prob", "get_class_prob.argmax"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.get_class_prob"], ["", "def", "get_class_pred", "(", "self", ",", "pred", ")", ":", "\n", "        ", "class_prob", "=", "get_class_prob", "(", "pred", ")", "\n", "return", "class_prob", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.get_class_prob": [[9, 23], ["pred.sigmoid", "torch.zeros", "torch.zeros", "range", "torch.cuda.is_available", "torch.cuda.is_available", "class_prob.cuda.cuda"], "function", ["None"], ["def", "get_class_prob", "(", "pred", ")", ":", "\n", "    ", "prob", "=", "pred", ".", "sigmoid", "(", ")", "\n", "\n", "class_prob", "=", "torch", ".", "zeros", "(", "pred", ".", "shape", "[", "0", "]", ",", "dataset_config", ".", "num_classes", ")", "\n", "\n", "class_prob", "[", ":", ",", "0", "]", "=", "1", "-", "prob", "[", ":", ",", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "class_prob", ".", "shape", "[", "1", "]", "-", "1", ")", ":", "\n", "        ", "class_prob", "[", ":", ",", "i", "]", "=", "prob", "[", ":", ",", "i", "-", "1", "]", "-", "prob", "[", ":", ",", "i", "]", "\n", "", "class_prob", "[", ":", ",", "-", "1", "]", "=", "prob", "[", ":", ",", "-", "1", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "class_prob", "=", "class_prob", ".", "cuda", "(", ")", "\n", "\n", "", "return", "class_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.OrdinalCovidRunner.get_ordinal_labels": [[25, 34], ["torch.zeros", "torch.zeros", "enumerate", "torch.cuda.is_available", "torch.cuda.is_available", "ans.cuda.cuda"], "function", ["None"], ["", "def", "get_ordinal_labels", "(", "labels", ")", ":", "\n", "    ", "ans", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "dataset_config", ".", "num_classifiers", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "ans", "[", "i", "]", "[", ":", "l", "]", "=", "1", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "ans", "=", "ans", ".", "cuda", "(", ")", "\n", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.__init__": [[20, 22], ["RawFeatureExtractor.RawFeatureExtractor.get_poi_info"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.get_poi_info"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "poi_info", "=", "self", ".", "get_poi_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.get_poi_info": [[23, 60], ["os.path.exists", "pandas.read_csv", "county_df.dropna().set_index.dropna().set_index.dropna().set_index", "pandas.DataFrame", "os.listdir", "pandas.concat", "pandas.concat.to_dict", "os.path.join.startswith", "open", "pickle.dump", "open", "pickle.load", "county_df.dropna().set_index.dropna().set_index.dropna", "os.path.join", "pandas.read_csv", "temp_df[].apply", "temp_df.dropna().set_index.dropna().set_index.dropna().set_index", "pandas.concat", "len", "temp_df.dropna().set_index.dropna().set_index.dropna", "pandas.concat.index.intersection"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load"], ["", "def", "get_poi_info", "(", "self", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "config", ".", "poi_info_pickle_path", ")", ":", "\n", "            ", "with", "open", "(", "config", ".", "poi_info_pickle_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "ans", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "ans", "\n", "\n", "# get county code for each poi", "\n", "", "county_df", "=", "pd", ".", "read_csv", "(", "config", ".", "place_county_cbg_file", ",", "\n", "usecols", "=", "[", "'safegraph_place_id'", ",", "'countyFIPS'", "]", ",", "\n", "dtype", "=", "{", "'countyFIPS'", ":", "str", "}", "\n", ")", "\n", "county_df", "=", "county_df", ".", "dropna", "(", ")", ".", "set_index", "(", "'safegraph_place_id'", ")", "\n", "\n", "# get top level category for each poi", "\n", "cat_df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "config", ".", "core_poi_path", ")", ":", "\n", "            ", "if", "f", ".", "startswith", "(", "config", ".", "core_poi_csv_prefix", ")", ":", "\n", "                ", "f", "=", "os", ".", "path", ".", "join", "(", "config", ".", "core_poi_path", ",", "f", ")", "\n", "temp_df", "=", "pd", ".", "read_csv", "(", "f", ",", "usecols", "=", "[", "'safegraph_place_id'", ",", "'top_category'", "]", ")", "\n", "temp_df", "[", "'top_category'", "]", "=", "temp_df", "[", "'top_category'", "]", ".", "apply", "(", "\n", "lambda", "cat", ":", "cat", "\n", "if", "cat", "in", "config", ".", "whitelisted_cats", "\n", "else", "config", ".", "default_cat", "\n", ")", "\n", "temp_df", "=", "temp_df", ".", "dropna", "(", ")", ".", "set_index", "(", "'safegraph_place_id'", ")", "\n", "\n", "assert", "len", "(", "cat_df", ".", "index", ".", "intersection", "(", "temp_df", ".", "index", ")", ")", "==", "0", "\n", "cat_df", "=", "pd", ".", "concat", "(", "[", "cat_df", ",", "temp_df", "]", ",", "axis", "=", "'index'", ")", "\n", "\n", "", "", "final_df", "=", "pd", ".", "concat", "(", "[", "county_df", ",", "cat_df", "]", ",", "axis", "=", "'columns'", ")", "\n", "\n", "final_dict", "=", "final_df", ".", "to_dict", "(", "orient", "=", "'index'", ")", "\n", "\n", "with", "open", "(", "config", ".", "poi_info_pickle_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "final_dict", ",", "f", ")", "\n", "\n", "", "return", "final_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor._get_names_starting_with": [[61, 71], ["ans.append", "datetime.timedelta", "str"], "methods", ["None"], ["", "def", "_get_names_starting_with", "(", "self", ",", "original_start_date", ",", "cur_start_date", ",", "\n", "cur_end_date", ",", "prefix", ")", ":", "\n", "        ", "ans", "=", "[", "]", "\n", "\n", "d", "=", "cur_start_date", "\n", "while", "d", "<", "cur_end_date", ":", "\n", "            ", "ans", ".", "append", "(", "prefix", "+", "str", "(", "(", "d", "-", "original_start_date", ")", ".", "days", ")", ")", "\n", "d", "+=", "timedelta", "(", "days", "=", "1", ")", "\n", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.read_census_data": [[72, 111], ["pandas.DataFrame", "logging.info", "os.path.join", "pandas.read_csv().set_index", "deepcovidnet.get_aggregate_dict", "deepcovidnet.get_aggregate_dict", "deepcovidnet.get_aggregate_dict", "deepcovidnet.get_aggregate_dict", "sorted", "deepcovidnet.ConstantFeatures.ConstantFeatures", "deepcovidnet.ConstantFeatures.ConstantFeatures", "deepcovidnet.ConstantFeatures.ConstantFeatures", "deepcovidnet.ConstantFeatures.ConstantFeatures", "os.listdir", "os.path.join.startswith", "pandas.read_csv", "tuple", "os.path.join", "pandas.read_csv", "logging.info", "df.groupby().aggregate.groupby().aggregate.rename", "df.groupby().aggregate.groupby().aggregate.drop", "df[].apply", "df.groupby().aggregate.groupby().aggregate.groupby().aggregate", "main_df.merge.merge.merge", "logging.info", "df.groupby().aggregate.groupby().aggregate.groupby", "numpy.arange", "len", "df.groupby().aggregate.groupby().aggregate.columns.duplicated"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.get_aggregate_dict", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.get_aggregate_dict", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.get_aggregate_dict", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.get_aggregate_dict"], ["", "def", "read_census_data", "(", "self", ")", ":", "\n", "        ", "main_df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "logging", ".", "info", "(", "'Read Census Data...'", ")", "\n", "f", "=", "os", ".", "path", ".", "join", "(", "config", ".", "sg_open_census_metadata_path", ",", "\n", "'cbg_field_descriptions.csv'", ")", "\n", "meta_df", "=", "pd", ".", "read_csv", "(", "f", ",", "usecols", "=", "[", "'table_id'", ",", "'field_full_name'", "]", ")", ".", "set_index", "(", "'table_id'", ")", "\n", "\n", "cols_dict", "=", "{", "}", "\n", "for", "idx", "in", "meta_df", ".", "index", ":", "\n", "            ", "cols_dict", "[", "idx", "]", "=", "meta_df", ".", "loc", "[", "idx", "]", "[", "'field_full_name'", "]", "\n", "\n", "", "aggregate_dict", "=", "config", ".", "get_aggregate_dict", "(", ")", "\n", "\n", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "config", ".", "sg_open_census_data_path", ")", ")", ":", "\n", "            ", "if", "f", ".", "startswith", "(", "tuple", "(", "config", ".", "census_cols_whitelist", ")", ")", ":", "\n", "                ", "f", "=", "os", ".", "path", ".", "join", "(", "config", ".", "sg_open_census_data_path", ",", "f", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "f", ",", "dtype", "=", "{", "'census_block_group'", ":", "str", "}", ")", "\n", "logging", ".", "info", "(", "f'Successfully read {f}'", ")", "\n", "\n", "df", "=", "df", ".", "rename", "(", "columns", "=", "{", "c", ":", "cols_dict", "[", "c", "]", "for", "c", "in", "df", ".", "columns", "if", "c", "in", "cols_dict", "}", ")", "\n", "df", "=", "df", ".", "iloc", "[", ":", ",", "np", ".", "arange", "(", "len", "(", "df", ".", "columns", ")", ")", "[", "~", "df", ".", "columns", ".", "duplicated", "(", ")", "]", "]", "\n", "\n", "cols_to_remove", "=", "[", "c", "for", "c", "in", "df", ".", "columns", "if", "'Margin of Error'", "in", "c", "]", "\n", "df", ".", "drop", "(", "cols_to_remove", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "df", "[", "'census_block_group'", "]", "=", "df", "[", "'census_block_group'", "]", ".", "apply", "(", "lambda", "x", ":", "x", "[", ":", "5", "]", ")", "\n", "df", "=", "df", ".", "groupby", "(", "'census_block_group'", ")", ".", "aggregate", "(", "\n", "{", "c", ":", "aggregate_dict", "[", "c", "]", "for", "c", "in", "df", ".", "columns", "if", "c", "in", "aggregate_dict", "}", "\n", ")", "\n", "\n", "main_df", "=", "main_df", ".", "merge", "(", "df", ",", "how", "=", "'outer'", ",", "left_index", "=", "True", ",", "\n", "right_index", "=", "True", ",", "suffixes", "=", "(", "''", ",", "''", ")", ")", "\n", "logging", ".", "info", "(", "'Merged into main dataframe'", ")", "\n", "\n", "", "", "return", "ConstantFeatures", "(", "main_df", ",", "'open_census_data'", ",", "\n", "feature_saver", "=", "saver_config", ".", "census_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.read_pop_dens_ccvi": [[112, 139], ["pandas.read_csv().set_index", "pandas.read_csv().set_index", "ccvi_df.drop.drop.drop", "pandas.read_csv().set_index.merge", "deepcovidnet.ConstantFeatures.ConstantFeatures", "deepcovidnet.ConstantFeatures.ConstantFeatures", "deepcovidnet.ConstantFeatures.ConstantFeatures", "deepcovidnet.ConstantFeatures.ConstantFeatures", "pandas.read_csv", "pandas.read_csv"], "methods", ["None"], ["", "def", "read_pop_dens_ccvi", "(", "self", ")", ":", "\n", "        ", "svi_df", "=", "pd", ".", "read_csv", "(", "\n", "config", ".", "svi_df_path", ",", "\n", "usecols", "=", "[", "'AREA_SQMI'", ",", "'E_TOTPOP'", ",", "'FIPS'", "]", ",", "\n", "dtype", "=", "{", "'FIPS'", ":", "str", "}", "\n", ")", ".", "set_index", "(", "'FIPS'", ")", "\n", "\n", "svi_df", "[", "'Population Density'", "]", "=", "svi_df", "[", "'E_TOTPOP'", "]", "/", "svi_df", "[", "'AREA_SQMI'", "]", "\n", "\n", "svi_df", "=", "svi_df", "[", "[", "'Population Density'", "]", "]", "\n", "\n", "ccvi_df", "=", "pd", ".", "read_csv", "(", "\n", "config", ".", "ccvi_csv_path", ",", "\n", "dtype", "=", "{", "'FIPS (5-digit)'", ":", "str", "}", "\n", ")", ".", "set_index", "(", "'FIPS (5-digit)'", ")", "\n", "\n", "ccvi_df", "=", "ccvi_df", ".", "drop", "(", "\n", "columns", "=", "[", "'State'", ",", "'State Abbreviation'", ",", "'County'", "]", "\n", ")", "\n", "\n", "main_df", "=", "svi_df", ".", "merge", "(", "\n", "ccvi_df", ",", "how", "=", "'outer'", ",", "suffixes", "=", "(", "''", ",", "''", ")", ",", "\n", "left_index", "=", "True", ",", "right_index", "=", "True", "\n", ")", "\n", "\n", "return", "ConstantFeatures", "(", "main_df", ",", "'pop_dens_ccvi'", ",", "\n", "feature_saver", "=", "saver_config", ".", "pop_dens_ccvi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.read_sg_patterns_monthly": [[140, 239], ["deepcovidnet.sg_patterns_monthly_reader.get_files_between", "deepcovidnet.sg_patterns_monthly_reader.get_files_between", "deepcovidnet.sg_patterns_monthly_reader.get_files_between", "deepcovidnet.sg_patterns_monthly_reader.get_files_between", "pandas.DataFrame", "logging.info", "RawFeatureExtractor.RawFeatureExtractor._get_names_starting_with", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "pandas.read_csv", "logging.info", "pandas.DataFrame", "df.groupby().sum.groupby().sum.drop", "logging.info", "df[].apply", "df[].apply", "logging.info", "set", "logging.info", "df.groupby().sum.groupby().sum.groupby().sum", "logging.info", "df.groupby().sum.merge.columns.intersection", "df.groupby().sum.groupby().sum.merge", "df.groupby().sum.merge.drop", "logging.info", "output_dfs.append", "datetime.timedelta", "df[].values.tolist", "isinstance", "cat.translate().lower().replace", "RawFeatureExtractor.RawFeatureExtractor._get_names_starting_with", "main_df[].add", "cols_to_remove.append", "cols_to_remove.append", "main_df[].rename", "datetime.timedelta", "RawFeatureExtractor.RawFeatureExtractor._get_names_starting_with", "set.add", "df.groupby().sum.groupby().sum.groupby", "c.endswith", "cat.translate().lower", "len", "numpy.array", "cat.translate", "str.maketrans", "int", "re.split", "x.strip"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor._get_names_starting_with", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor._get_names_starting_with", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor._get_names_starting_with", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add"], ["", "def", "read_sg_patterns_monthly", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "files", "=", "config", ".", "sg_patterns_monthly_reader", ".", "get_files_between", "(", "\n", "start_date", ",", "end_date", "\n", ")", "\n", "\n", "main_df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "logging", ".", "info", "(", "'Reading Safegraph Patterns Monthly Data'", ")", "\n", "\n", "for", "csv_file", ",", "month_start", ",", "month_end", "in", "files", ":", "\n", "\n", "            ", "index_start", "=", "month_start", ".", "day", "-", "1", "\n", "index_end", "=", "(", "month_end", "-", "timedelta", "(", "1", ")", ")", ".", "day", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "\n", "usecols", "=", "[", "\n", "'safegraph_place_id'", ",", "\n", "'visits_by_day'", "\n", "# bucketed_dwell_times may be useful to see", "\n", "# how long people stayed", "\n", "]", ",", "\n", "converters", "=", "{", "'visits_by_day'", ":", "(", "lambda", "x", ":", "np", ".", "array", "(", "[", "int", "(", "s", ")", "for", "s", "in", "re", ".", "split", "(", "r'[,\\s]\\s*'", ",", "x", ".", "strip", "(", "'[]'", ")", ")", "]", ")", "[", "index_start", ":", "index_end", "]", ")", "}", "\n", ")", "\n", "logging", ".", "info", "(", "f'Successfully read {csv_file}...'", ")", "\n", "\n", "# decompose visits by day into different columns", "\n", "decomposed_visits_df", "=", "pd", ".", "DataFrame", "(", "\n", "df", "[", "'visits_by_day'", "]", ".", "values", ".", "tolist", "(", ")", ",", "\n", "columns", "=", "self", ".", "_get_names_starting_with", "(", "\n", "start_date", ",", "month_start", ",", "month_end", ",", "'visits_day_'", "\n", ")", "\n", ")", "\n", "\n", "for", "c", "in", "decomposed_visits_df", ".", "columns", ":", "\n", "                ", "df", "[", "c", "]", "=", "decomposed_visits_df", "[", "c", "]", "\n", "\n", "", "df", "=", "df", ".", "drop", "(", "[", "'visits_by_day'", "]", ",", "axis", "=", "1", ")", "\n", "\n", "logging", ".", "info", "(", "'Decomposed visits per day'", ")", "\n", "\n", "# find FIPS and category of poi", "\n", "df", "[", "'countyFIPS'", "]", "=", "df", "[", "'safegraph_place_id'", "]", ".", "apply", "(", "\n", "lambda", "x", ":", "self", ".", "poi_info", "[", "x", "]", "[", "'countyFIPS'", "]", "\n", "if", "x", "in", "self", ".", "poi_info", "and", "self", ".", "poi_info", "[", "x", "]", "[", "'countyFIPS'", "]", "\n", "else", "'00000'", "\n", ")", "\n", "\n", "df", "[", "'top_category'", "]", "=", "df", "[", "'safegraph_place_id'", "]", ".", "apply", "(", "\n", "lambda", "x", ":", "self", ".", "poi_info", "[", "x", "]", "[", "'top_category'", "]", "\n", "if", "x", "in", "self", ".", "poi_info", "and", "self", ".", "poi_info", "[", "x", "]", "[", "'top_category'", "]", "\n", "else", "'Unknown'", "\n", ")", "\n", "logging", ".", "info", "(", "'Finished getting categories'", ")", "\n", "\n", "top_cats", "=", "set", "(", ")", "\n", "for", "k", "in", "self", ".", "poi_info", ":", "\n", "                ", "if", "isinstance", "(", "self", ".", "poi_info", "[", "k", "]", "[", "'top_category'", "]", ",", "str", ")", ":", "\n", "                    ", "top_cats", ".", "add", "(", "self", ".", "poi_info", "[", "k", "]", "[", "'top_category'", "]", ")", "\n", "\n", "", "", "for", "cat", "in", "top_cats", ":", "\n", "                ", "colname", "=", "cat", ".", "translate", "(", "str", ".", "maketrans", "(", "''", ",", "''", ",", "string", ".", "punctuation", ")", ")", ".", "lower", "(", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "for", "suffix", "in", "self", ".", "_get_names_starting_with", "(", "\n", "start_date", ",", "month_start", ",", "month_end", ",", "'_visits_day_'", "\n", ")", ":", "\n", "                    ", "df", "[", "colname", "+", "suffix", "]", "=", "df", "[", "suffix", "[", "1", ":", "]", "]", "*", "(", "df", "[", "'top_category'", "]", "==", "cat", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "'Finished creating category columns'", ")", "\n", "\n", "df", "=", "df", ".", "groupby", "(", "'countyFIPS'", ")", ".", "sum", "(", ")", "\n", "\n", "logging", ".", "info", "(", "'Finished grouping by FIPS code'", ")", "\n", "\n", "common_cols", "=", "main_df", ".", "columns", ".", "intersection", "(", "df", ".", "columns", ")", "\n", "\n", "main_df", "=", "df", ".", "merge", "(", "main_df", ",", "how", "=", "'outer'", ",", "suffixes", "=", "(", "'_l'", ",", "'_r'", ")", ",", "\n", "left_index", "=", "True", ",", "right_index", "=", "True", ")", "\n", "\n", "cols_to_remove", "=", "[", "]", "\n", "for", "c", "in", "common_cols", ":", "\n", "                ", "main_df", "[", "c", "]", "=", "main_df", "[", "c", "+", "'_l'", "]", ".", "add", "(", "main_df", "[", "c", "+", "'_r'", "]", ",", "fill_value", "=", "0", ")", "\n", "cols_to_remove", ".", "append", "(", "c", "+", "'_l'", ")", "\n", "cols_to_remove", ".", "append", "(", "c", "+", "'_r'", ")", "\n", "\n", "", "main_df", ".", "drop", "(", "cols_to_remove", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "logging", ".", "info", "(", "'Finished merging columns'", ")", "\n", "\n", "", "output_dfs", "=", "[", "]", "\n", "for", "col_suffix", "in", "self", ".", "_get_names_starting_with", "(", "start_date", ",", "start_date", ",", "end_date", ",", "'day_'", ")", ":", "\n", "            ", "cols", "=", "[", "c", "for", "c", "in", "main_df", ".", "columns", "if", "c", ".", "endswith", "(", "col_suffix", ")", "]", "\n", "renamed_cols", "=", "{", "}", "\n", "for", "c", "in", "cols", ":", "\n", "                ", "renamed_cols", "[", "c", "]", "=", "c", "[", ":", "-", "len", "(", "col_suffix", ")", "]", "\n", "", "output_dfs", ".", "append", "(", "main_df", "[", "cols", "]", ".", "rename", "(", "columns", "=", "renamed_cols", ")", ")", "\n", "\n", "", "return", "TimeDependentFeatures", "(", "output_dfs", ",", "'sg_patterns_monthly'", ",", "start_date", ",", "\n", "timedelta", "(", "days", "=", "1", ")", ",", "\n", "feature_saver", "=", "saver_config", ".", "sg_patterns_monthly", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.read_weather_data": [[240, 286], ["pandas.concat", "county_dfs[].drop_duplicates().sort_values", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "requests.get", "requests.get.json", "dfs_per_day.append", "datetime.timedelta", "logging.error", "logging.info", "pandas.io.json.json_normalize", "df.groupby().agg().reset_index.groupby().agg().reset_index.groupby().agg().reset_index", "pandas.concat.append", "county_dfs[].drop_duplicates", "county_dfs[].pivot", "str", "str", "str", "df[].isin", "df.groupby().agg().reset_index.groupby().agg().reset_index.groupby().agg", "df.groupby().agg().reset_index.groupby().agg().reset_index.groupby"], "methods", ["None"], ["", "def", "read_weather_data", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "county_dfs", "=", "[", "]", "\n", "# load county data and make df with relevant data for the county", "\n", "counties", "=", "features_config", ".", "county_info", "\n", "attributes", "=", "'&datatypeid='", ".", "join", "(", "config", ".", "weather_attributes", ")", "\n", "for", "county", "in", "counties", ".", "index", ":", "\n", "            ", "result", "=", "requests", ".", "get", "(", "\n", "\"https://www.ncdc.noaa.gov/cdo-web/api/v2/data?\"", "\n", "\"datasetid=GHCND&locationid=FIPS:{}&startdate={}&enddate={}&limit=1000\"", "\n", "\"&datatypeid={}\"", ".", "format", "(", "\n", "str", "(", "county", ")", ",", "str", "(", "start_date", ")", ",", "str", "(", "end_date", ")", ",", "attributes", "\n", ")", ",", "\n", "headers", "=", "{", "\"token\"", ":", "config", ".", "weather_token", "}", "\n", ")", "\n", "\n", "if", "result", ".", "status_code", "!=", "200", ":", "\n", "                ", "logging", ".", "error", "(", "\"Unable to connect and retrieve data from NOAA. Status code:\"", ",", "result", ".", "status_code", ")", "\n", "continue", "\n", "\n", "", "result_json", "=", "result", ".", "json", "(", ")", "\n", "if", "result_json", ":", "\n", "                ", "logging", ".", "info", "(", "f'Received data for county {county}'", ")", "\n", "\n", "df", "=", "pd", ".", "io", ".", "json", ".", "json_normalize", "(", "result_json", ",", "'results'", ")", "\n", "df", "=", "df", "[", "df", "[", "'datatype'", "]", ".", "isin", "(", "config", ".", "weather_attributes", ")", "]", "\n", "df", "[", "'date'", "]", "=", "df", "[", "'date'", "]", ".", "str", "[", ":", "10", "]", "\n", "df", "=", "df", ".", "groupby", "(", "[", "'date'", ",", "'datatype'", "]", ")", ".", "agg", "(", "{", "'value'", ":", "'mean'", "}", ")", ".", "reset_index", "(", ")", "\n", "df", "[", "'FIPS'", "]", "=", "county", "\n", "county_dfs", ".", "append", "(", "df", ")", "\n", "\n", "# join all county data", "\n", "", "", "county_dfs", "=", "pd", ".", "concat", "(", "county_dfs", ",", "ignore_index", "=", "True", ")", "\n", "\n", "# filter dfs by day", "\n", "dfs_per_day", "=", "[", "]", "\n", "dates", "=", "county_dfs", "[", "'date'", "]", ".", "drop_duplicates", "(", ")", ".", "sort_values", "(", ")", "\n", "for", "d", "in", "dates", ":", "\n", "            ", "dfs_per_day", ".", "append", "(", "\n", "county_dfs", "[", "county_dfs", "[", "'date'", "]", "==", "d", "]", ".", "pivot", "(", "\n", "index", "=", "'FIPS'", ",", "columns", "=", "'datatype'", ",", "values", "=", "'value'", "\n", ")", "\n", ")", "\n", "\n", "", "return", "TimeDependentFeatures", "(", "dfs_per_day", ",", "'weather_data'", ",", "\n", "start_date", ",", "timedelta", "(", "1", ")", ",", "\n", "feature_saver", "=", "saver_config", ".", "weather", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.read_sg_social_distancing": [[287, 331], ["deepcovidnet.sg_social_distancing_reader.get_files_between", "deepcovidnet.sg_social_distancing_reader.get_files_between", "deepcovidnet.sg_social_distancing_reader.get_files_between", "deepcovidnet.sg_social_distancing_reader.get_files_between", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "pandas.read_csv().set_index", "logging.info", "df.drop.drop.groupby().sum", "logging.info", "df.drop.drop.drop", "output_dfs.append", "datetime.timedelta", "df.drop.drop.dropna", "pandas.read_csv", "df.drop.drop.groupby"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between"], ["", "def", "read_sg_social_distancing", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "output_dfs", "=", "[", "]", "\n", "\n", "files", "=", "config", ".", "sg_social_distancing_reader", ".", "get_files_between", "(", "start_date", ",", "end_date", ")", "\n", "\n", "for", "csv_file", ",", "cur_date", ",", "_", "in", "files", ":", "\n", "            ", "df", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "\n", "usecols", "=", "[", "\n", "'origin_census_block_group'", ",", "\n", "'date_range_start'", ",", "\n", "'date_range_end'", ",", "\n", "'device_count'", ",", "\n", "'distance_traveled_from_home'", ",", "\n", "'completely_home_device_count'", ",", "\n", "'median_home_dwell_time'", ",", "\n", "'part_time_work_behavior_devices'", ",", "\n", "'full_time_work_behavior_devices'", "\n", "]", ",", "\n", "dtype", "=", "{", "'origin_census_block_group'", ":", "str", "}", ",", "\n", ")", ".", "set_index", "(", "'origin_census_block_group'", ")", "\n", "\n", "logging", ".", "info", "(", "f'Successfully read {csv_file}'", ")", "\n", "\n", "# prepare for weighted average", "\n", "df", "[", "'distance_traveled_from_home'", "]", "*=", "df", "[", "'device_count'", "]", "\n", "df", "[", "'median_home_dwell_time'", "]", "*=", "df", "[", "'device_count'", "]", "\n", "\n", "df", "=", "df", ".", "groupby", "(", "lambda", "cbg", ":", "cbg", "[", ":", "5", "]", ")", ".", "sum", "(", ")", "\n", "logging", ".", "info", "(", "'Grouped by counties'", ")", "\n", "\n", "df", "[", "'completely_home_device_count'", "]", "/=", "df", "[", "'device_count'", "]", "\n", "df", "[", "'part_time_work_behavior_devices'", "]", "/=", "df", "[", "'device_count'", "]", "\n", "df", "[", "'full_time_work_behavior_devices'", "]", "/=", "df", "[", "'device_count'", "]", "\n", "df", "[", "'distance_traveled_from_home'", "]", "/=", "df", "[", "'device_count'", "]", "\n", "df", "[", "'median_home_dwell_time'", "]", "/=", "df", "[", "'device_count'", "]", "\n", "\n", "df", "=", "df", ".", "drop", "(", "[", "'device_count'", "]", ",", "axis", "=", "1", ")", "\n", "\n", "output_dfs", ".", "append", "(", "df", ".", "dropna", "(", ")", ")", "\n", "\n", "", "return", "TimeDependentFeatures", "(", "output_dfs", ",", "'sg_social_distancing'", ",", "\n", "start_date", ",", "timedelta", "(", "days", "=", "1", ")", ",", "\n", "feature_saver", "=", "saver_config", ".", "sg_social_distancing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.read_num_cases": [[332, 370], ["pandas.read_csv().dropna().set_index", "datetime.timedelta", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "df_old.merge", "cur_df[].subtract", "df_old.merge.drop", "output_dfs.append", "logging.info", "datetime.timedelta", "datetime.timedelta", "pandas.read_csv().dropna", "str", "pandas.read_csv", "str", "str"], "methods", ["None"], ["", "def", "read_num_cases", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "config", ".", "labels_csv_path", ",", "usecols", "=", "[", "\n", "'date'", ",", "'fips'", ",", "'cases'", "\n", "]", ",", "dtype", "=", "{", "'fips'", ":", "str", "}", ")", ".", "dropna", "(", ")", ".", "set_index", "(", "'fips'", ")", "\n", "\n", "output_dfs", "=", "[", "]", "\n", "\n", "interval", "=", "timedelta", "(", "hyperparams", ".", "projection_days", ")", "\n", "\n", "cur_date", "=", "start_date", "\n", "while", "cur_date", "<", "end_date", ":", "\n", "            ", "df_old", "=", "df", "[", "df", "[", "'date'", "]", "==", "str", "(", "cur_date", "-", "interval", ")", "]", "\n", "df_new", "=", "df", "[", "df", "[", "'date'", "]", "==", "str", "(", "cur_date", ")", "]", "\n", "\n", "cur_df", "=", "df_old", ".", "merge", "(", "\n", "df_new", ",", "how", "=", "'right'", ",", "left_index", "=", "True", ",", "right_index", "=", "True", ",", "\n", "suffixes", "=", "(", "'_start'", ",", "'_end'", ")", "\n", ")", "\n", "cur_df", "[", "'new_cases'", "]", "=", "cur_df", "[", "'cases_end'", "]", ".", "subtract", "(", "\n", "cur_df", "[", "'cases_start'", "]", ",", "fill_value", "=", "0", "\n", ")", "\n", "cur_df", ".", "drop", "(", "\n", "[", "'cases_end'", ",", "'cases_start'", ",", "'date_end'", ",", "'date_start'", "]", ",", "\n", "axis", "=", "1", ",", "\n", "inplace", "=", "True", "\n", ")", "\n", "\n", "cur_df", "=", "cur_df", "[", "cur_df", "[", "'new_cases'", "]", ">=", "0", "]", "# negatives are errors", "\n", "\n", "output_dfs", ".", "append", "(", "cur_df", ")", "\n", "\n", "logging", ".", "info", "(", "'Processed num cases for '", "+", "str", "(", "cur_date", ")", ")", "\n", "\n", "cur_date", "+=", "timedelta", "(", "days", "=", "1", ")", "\n", "\n", "", "return", "TimeDependentFeatures", "(", "\n", "output_dfs", ",", "'new_cases'", ",", "start_date", ",", "timedelta", "(", "days", "=", "1", ")", ",", "\n", "feature_saver", "=", "saver_config", ".", "num_cases", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.read_dilation_index": [[372, 388], ["pandas.read_csv", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "output_dfs.append", "datetime.timedelta", "datetime.timedelta", "df[].set_index().drop", "df[].set_index", "str"], "methods", ["None"], ["", "def", "read_dilation_index", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "\n", "config", ".", "di_csv_path", ",", "usecols", "=", "[", "'FIPS'", ",", "'Date'", ",", "'DI'", "]", ",", "\n", "dtype", "=", "{", "'FIPS'", ":", "str", "}", "\n", ")", "\n", "d", "=", "start_date", "\n", "output_dfs", "=", "[", "]", "\n", "while", "d", "<", "end_date", ":", "\n", "            ", "output_dfs", ".", "append", "(", "\n", "df", "[", "df", "[", "'Date'", "]", "==", "str", "(", "d", ")", "]", ".", "set_index", "(", "'FIPS'", ")", ".", "drop", "(", "columns", "=", "[", "'Date'", "]", ")", "\n", ")", "\n", "d", "+=", "timedelta", "(", "1", ")", "\n", "\n", "", "return", "TimeDependentFeatures", "(", "\n", "output_dfs", ",", "'di'", ",", "start_date", ",", "timedelta", "(", "days", "=", "1", ")", ",", "\n", "feature_saver", "=", "saver_config", ".", "dilation_index", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.read_reproduction_number": [[390, 412], ["pandas.read_csv", "df.drop().set_index().sort_index.drop().set_index().sort_index.drop().set_index().sort_index", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "deepcovidnet.TimeDependentFeatures.TimeDependentFeatures", "datetime.timedelta", "datetime.timedelta", "df.drop().set_index().sort_index.drop().set_index().sort_index.drop().set_index", "str", "output_dfs.append", "output_dfs.append", "df[].to_frame().rename().fillna", "pandas.DataFrame().fillna", "df.drop().set_index().sort_index.drop().set_index().sort_index.drop", "df[].to_frame().rename", "pandas.DataFrame", "df[].to_frame", "str", "str"], "methods", ["None"], ["", "def", "read_reproduction_number", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "config", ".", "ri_csv_path", ",", "dtype", "=", "{", "'fips'", ":", "str", "}", ")", "\n", "df", "=", "df", ".", "drop", "(", "columns", "=", "[", "'state'", ",", "'county'", "]", ")", ".", "set_index", "(", "'fips'", ")", ".", "sort_index", "(", ")", "\n", "\n", "output_dfs", "=", "[", "]", "\n", "\n", "d", "=", "start_date", "\n", "while", "d", "<", "end_date", ":", "\n", "            ", "if", "str", "(", "d", ")", "in", "df", ".", "columns", ":", "\n", "                ", "output_dfs", ".", "append", "(", "\n", "df", "[", "str", "(", "d", ")", "]", ".", "to_frame", "(", ")", ".", "rename", "(", "columns", "=", "{", "str", "(", "d", ")", ":", "'rn'", "}", ")", ".", "fillna", "(", "0", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "output_dfs", ".", "append", "(", "\n", "pd", ".", "DataFrame", "(", "index", "=", "df", ".", "index", ",", "columns", "=", "[", "'rn'", "]", ")", ".", "fillna", "(", "0", ")", "\n", ")", "\n", "", "d", "+=", "timedelta", "(", "1", ")", "\n", "\n", "", "return", "TimeDependentFeatures", "(", "\n", "output_dfs", ",", "'reproduction_index'", ",", "\n", "start_date", ",", "timedelta", "(", "days", "=", "1", ")", ",", "\n", "feature_saver", "=", "saver_config", ".", "reproduction_number", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.read_countywise_cumulative_cases": [[414, 443], ["pandas.read_csv().dropna().set_index", "deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures", "deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures", "deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures", "deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures", "datetime.timedelta", "datetime.timedelta", "pandas.read_csv().dropna", "output_dfs.append", "logging.info", "output_dfs.append", "df_today.drop().fillna", "pandas.DataFrame", "pandas.read_csv", "str", "str", "df_today.drop", "pandas.read_csv().dropna().set_index.index.drop_duplicates"], "methods", ["None"], ["", "def", "read_countywise_cumulative_cases", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "config", ".", "labels_csv_path", ",", "usecols", "=", "[", "\n", "'date'", ",", "'fips'", ",", "'cases'", "\n", "]", ",", "dtype", "=", "{", "'fips'", ":", "str", "}", ")", ".", "dropna", "(", ")", ".", "set_index", "(", "'fips'", ")", "\n", "\n", "output_dfs", "=", "[", "]", "\n", "\n", "cur_date", "=", "start_date", "\n", "\n", "while", "cur_date", "<", "end_date", ":", "\n", "            ", "df_today", "=", "df", "[", "df", "[", "'date'", "]", "==", "str", "(", "cur_date", ")", "]", "\n", "if", "df_today", ".", "shape", "[", "0", "]", ":", "\n", "                ", "output_dfs", ".", "append", "(", "\n", "df_today", ".", "drop", "(", "[", "'date'", "]", ",", "axis", "=", "1", ")", ".", "fillna", "(", "0", ")", "\n", ")", "\n", "logging", ".", "info", "(", "'Processed cumulative cases for '", "+", "str", "(", "cur_date", ")", ")", "\n", "", "else", ":", "\n", "                ", "output_dfs", ".", "append", "(", "\n", "pd", ".", "DataFrame", "(", "\n", "0", ",", "index", "=", "df", ".", "index", ".", "drop_duplicates", "(", ")", ",", "\n", "columns", "=", "[", "'cases'", "]", "\n", ")", "\n", ")", "\n", "", "cur_date", "+=", "timedelta", "(", "days", "=", "1", ")", "\n", "\n", "", "return", "CountyWiseTimeDependentFeatures", "(", "\n", "output_dfs", ",", "'countywise_new_cases'", ",", "start_date", ",", "\n", "timedelta", "(", "days", "=", "1", ")", ",", "cur_type", "=", "'CONSTANT'", ",", "\n", "feature_saver", "=", "saver_config", ".", "countywise_cumulative_cases", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatureExtractor.RawFeatureExtractor.read_sg_mobility_incoming": [[445, 508], ["deepcovidnet.sg_patterns_weekly_reader.get_files_between", "deepcovidnet.sg_patterns_weekly_reader.get_files_between", "deepcovidnet.sg_patterns_weekly_reader.get_files_between", "deepcovidnet.sg_patterns_weekly_reader.get_files_between", "deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures", "deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures", "deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures", "deepcovidnet.CountyWiseTimeDependentFeatures.CountyWiseTimeDependentFeatures", "min", "pandas.read_csv().rename().dropna", "logging.info", "df.groupby().agg.groupby().agg.groupby().agg", "logging.info", "pandas.DataFrame", "logging.info", "output_dfs.append", "datetime.timedelta", "pandas.DataFrame.fillna", "pandas.read_csv().rename", "df.groupby().agg.groupby().agg.groupby", "df[].loc[].items", "pandas.read_csv", "eval"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between"], ["", "def", "read_sg_mobility_incoming", "(", "self", ",", "start_date", ",", "end_date", ")", ":", "\n", "        ", "files", "=", "config", ".", "sg_patterns_weekly_reader", ".", "get_files_between", "(", "start_date", ",", "\n", "end_date", ")", "\n", "\n", "def", "merge_and_sum_dict", "(", "series", ")", ":", "\n", "            ", "ans", "=", "{", "}", "\n", "for", "d", "in", "series", ":", "\n", "                ", "for", "k", "in", "d", ":", "\n", "                    ", "new_k", "=", "k", "[", ":", "5", "]", "\n", "if", "new_k", "in", "ans", ":", "\n", "                        ", "ans", "[", "new_k", "]", "+=", "d", "[", "k", "]", "\n", "", "else", ":", "\n", "                        ", "ans", "[", "new_k", "]", "=", "d", "[", "k", "]", "\n", "\n", "", "", "", "return", "ans", "\n", "\n", "", "output_dfs", "=", "[", "]", "\n", "\n", "for", "csv_file", ",", "s", ",", "_", "in", "files", ":", "\n", "            ", "start_date", "=", "min", "(", "start_date", ",", "s", ")", "\n", "if", "(", "end_date", "-", "s", ")", ".", "days", "<", "7", ":", "\n", "                ", "continue", "\n", "\n", "# read csv & remove all rows for which safegraph_place_id does not", "\n", "# have a county", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "\n", "usecols", "=", "[", "\n", "'safegraph_place_id'", ",", "\n", "'visitor_home_cbgs'", "\n", "]", ",", "\n", "converters", "=", "{", "\n", "'safegraph_place_id'", ":", "(", "lambda", "x", ":", "self", ".", "poi_info", "[", "x", "]", "[", "'countyFIPS'", "]", "if", "x", "in", "self", ".", "poi_info", "else", "None", ")", ",", "\n", "'visitor_home_cbgs'", ":", "(", "lambda", "x", ":", "eval", "(", "x", ")", ")", "\n", "}", "\n", ")", ".", "rename", "(", "columns", "=", "{", "'safegraph_place_id'", ":", "'fips'", "}", ")", ".", "dropna", "(", ")", "\n", "\n", "logging", ".", "info", "(", "f'Successfully read {csv_file}...'", ")", "\n", "\n", "df", "=", "df", ".", "groupby", "(", "'fips'", ")", ".", "agg", "(", "\n", "merge_and_sum_dict", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "f'Successfully merged dictionaries...'", ")", "\n", "\n", "mobility_df", "=", "pd", ".", "DataFrame", "(", "\n", "index", "=", "features_config", ".", "county_info", ".", "index", ",", "\n", "columns", "=", "features_config", ".", "county_info", ".", "index", "\n", ")", "\n", "mobility_df", ".", "index", ".", "name", "=", "'fips'", "\n", "\n", "for", "to_county", "in", "df", ".", "index", ":", "\n", "                ", "if", "to_county", "in", "mobility_df", ":", "\n", "                    ", "for", "from_county", ",", "traffic", "in", "df", "[", "'visitor_home_cbgs'", "]", ".", "loc", "[", "to_county", "]", ".", "items", "(", ")", ":", "\n", "                        ", "if", "from_county", "in", "mobility_df", ":", "\n", "                            ", "mobility_df", ".", "loc", "[", "to_county", "]", ".", "loc", "[", "from_county", "]", "=", "traffic", "\n", "\n", "", "", "", "", "logging", ".", "info", "(", "f'Found mobility index from {csv_file}...'", ")", "\n", "output_dfs", ".", "append", "(", "mobility_df", ".", "fillna", "(", "0", ")", ")", "\n", "\n", "", "return", "CountyWiseTimeDependentFeatures", "(", "\n", "output_dfs", ",", "'mobility_data'", ",", "start_date", ",", "timedelta", "(", "7", ")", ",", "\n", "cur_type", "=", "'CROSS'", ",", "\n", "feature_saver", "=", "saver_config", ".", "sg_mobility", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.ConstantFeatures.ConstantFeatures.__init__": [[8, 11], ["deepcovidnet.RawFeatures.RawFeatures.__init__"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "raw_features", ",", "feature_name", ":", "str", ",", "feature_saver", ")", ":", "\n", "        ", "super", "(", "ConstantFeatures", ",", "self", ")", ".", "__init__", "(", "raw_features", ",", "feature_name", ",", "\n", "feature_saver", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.ConstantFeatures.ConstantFeatures.extract_torch_tensor": [[12, 22], ["torch.zeros", "torch.tensor"], "methods", ["None"], ["", "def", "extract_torch_tensor", "(", "self", ",", "county_fips", ":", "str", ",", "start_date", ":", "date", ",", "\n", "end_date", ":", "date", ")", ":", "\n", "        ", "if", "county_fips", "in", "self", ".", "raw_features", ".", "index", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "\n", "self", ".", "raw_features", ".", "values", "[", "\n", "features_config", ".", "county_to_iloc", "[", "county_fips", "]", "\n", "]", "\n", ")", "\n", "\n", "", "return", "torch", ".", "zeros", "(", "self", ".", "raw_features", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.ConstantFeatures.ConstantFeatures.normalize": [[23, 35], ["ConstantFeatures.ConstantFeatures.raw_features.mean", "ConstantFeatures.ConstantFeatures.raw_features.std", "ConstantFeatures.ConstantFeatures.raw_features.fillna"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "mean", "=", "None", ",", "std", "=", "None", ",", "fill_na", "=", "True", ")", ":", "\n", "        ", "if", "mean", "is", "None", ":", "\n", "            ", "mean", "=", "self", ".", "raw_features", ".", "mean", "(", ")", "\n", "", "if", "std", "is", "None", ":", "\n", "            ", "std", "=", "self", ".", "raw_features", ".", "std", "(", ")", "\n", "\n", "", "self", ".", "raw_features", "=", "(", "self", ".", "raw_features", "-", "mean", ")", "/", "std", "\n", "\n", "if", "fill_na", ":", "\n", "            ", "self", ".", "raw_features", "=", "self", ".", "raw_features", ".", "fillna", "(", "0", ")", "\n", "\n", "", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.ConstantFeatures.ConstantFeatures.get_feature_name": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_feature_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "feature_name", "+", "'__'", "+", "self", ".", "raw_features", ".", "columns", "[", "idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.BaseDeepProcessor.__init__": [[8, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "BaseDeepProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.TunableDeepProcessor.__init__": [[15, 35], ["DeepFM.BaseDeepProcessor.__init__", "range", "torch.Sequential", "torch.Sequential", "DeepFM.TunableDeepProcessor.net.append", "torch.Linear", "torch.Linear", "DeepFM.TunableDeepProcessor.net.append", "DeepFM.TunableDeepProcessor.net.append", "torch.SELU", "torch.SELU", "torch.AlphaDropout", "torch.AlphaDropout"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "TunableDeepProcessor", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "intermediate_size", "=", "hyperparams", ".", "deep_intermediate_size", "\n", "self", ".", "num_layers", "=", "hyperparams", ".", "deep_layers", "\n", "\n", "self", ".", "net", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "in_f", ",", "out_f", "=", "self", ".", "intermediate_size", ",", "self", ".", "intermediate_size", "\n", "if", "i", "==", "0", ":", "\n", "                ", "in_f", "=", "self", ".", "in_features", "\n", "", "if", "i", "==", "self", ".", "num_layers", "-", "1", ":", "\n", "                ", "out_f", "=", "self", ".", "out_features", "\n", "\n", "", "self", ".", "net", ".", "append", "(", "nn", ".", "Linear", "(", "in_f", ",", "out_f", ")", ")", "\n", "if", "i", "!=", "self", ".", "num_layers", "-", "1", ":", "\n", "                ", "self", ".", "net", ".", "append", "(", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "net", ".", "append", "(", "nn", ".", "AlphaDropout", "(", "hyperparams", ".", "alpha_dropout_prob", ")", ")", "\n", "\n", "", "", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.TunableDeepProcessor.forward": [[36, 38], ["DeepFM.TunableDeepProcessor.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.FixedDeepProcessor.__init__": [[41, 48], ["DeepFM.BaseDeepProcessor.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "FixedDeepProcessor", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "hyperparams", ".", "dropout_prob", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "out_features", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.FixedDeepProcessor.forward": [[50, 52], ["DeepFM.FixedDeepProcessor.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.DeepFM.__init__": [[55, 77], ["torch.Module.__init__", "DeepFM.TunableDeepProcessor", "DeepFM.FixedDeepProcessor", "int"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_neurons", ")", ":", "\n", "        ", "super", "(", "DeepFM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_neurons", "=", "output_neurons", "\n", "self", ".", "feature_dim", "=", "hyperparams", ".", "embedding_size", "\n", "self", ".", "num_features", "=", "dataset_config", ".", "num_features", "\n", "\n", "self", ".", "deep_processor", "=", "TunableDeepProcessor", "(", "\n", "self", ".", "num_features", "*", "self", ".", "feature_dim", ",", "\n", "hyperparams", ".", "higher_order_features_size", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "FixedDeepProcessor", "(", "\n", "hyperparams", ".", "higher_order_features_size", "+", "\n", "int", "(", "self", ".", "num_features", "*", "(", "self", ".", "num_features", "-", "1", ")", "/", "2", ")", "+", "\n", "self", ".", "feature_dim", ",", "\n", "self", ".", "output_neurons", "\n", ")", "\n", "\n", "self", ".", "so_int_labels", "=", "None", "\n", "\n", "self", ".", "so_int", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.DeepFM.compute_soi": [[78, 109], ["sorted", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "range", "int", "len", "range", "DeepFM.DeepFM.so_int.cuda", "len", "range", "len", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "len", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "features_dict[].unsqueeze", "features_dict[].unsqueeze", "list", "features_dict.keys"], "methods", ["None"], ["", "def", "compute_soi", "(", "self", ",", "features_dict", ")", ":", "\n", "        ", "sorted_keys", "=", "sorted", "(", "features_dict", ")", "\n", "\n", "# FM Part", "\n", "if", "self", ".", "so_int_labels", "is", "None", ":", "\n", "            ", "idx", "=", "0", "\n", "self", ".", "so_int_labels", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "sorted_keys", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "sorted_keys", ")", ")", ":", "\n", "                    ", "self", ".", "so_int_labels", "[", "idx", "]", "=", "[", "sorted_keys", "[", "i", "]", ",", "sorted_keys", "[", "j", "]", "]", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "self", ".", "so_int", "=", "torch", ".", "empty", "(", "\n", "features_dict", "[", "list", "(", "features_dict", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "shape", "[", "0", "]", ",", "\n", "int", "(", "self", ".", "num_features", "*", "(", "self", ".", "num_features", "-", "1", ")", "/", "2", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "\n", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "sorted_keys", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "sorted_keys", ")", ")", ":", "\n", "                ", "self", ".", "so_int", "[", ":", ",", "idx", "]", "=", "torch", ".", "bmm", "(", "\n", "features_dict", "[", "sorted_keys", "[", "i", "]", "]", ".", "unsqueeze", "(", "1", ")", ",", "\n", "features_dict", "[", "sorted_keys", "[", "j", "]", "]", ".", "unsqueeze", "(", "2", ")", "\n", ")", ".", "squeeze", "(", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "so_int", "=", "self", ".", "so_int", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.DeepFM.compute_deep": [[110, 123], ["sorted", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DeepFM.DeepFM.deep_processor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DeepFM.DeepFM.classifier", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "range", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "", "def", "compute_deep", "(", "self", ",", "features_dict", ")", ":", "\n", "        ", "sorted_keys", "=", "sorted", "(", "features_dict", ")", "\n", "\n", "concatenated_features", "=", "[", "features_dict", "[", "sorted_keys", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "sorted_keys", ")", ")", "]", "\n", "concatenated_features", "=", "torch", ".", "cat", "(", "concatenated_features", ",", "dim", "=", "1", ")", "\n", "higher_order_interactions", "=", "self", ".", "deep_processor", "(", "concatenated_features", ")", "\n", "\n", "classifier_in", "=", "[", "higher_order_interactions", ",", "self", ".", "so_int", "]", "\n", "classifier_in", "+=", "[", "torch", ".", "stack", "(", "[", "features_dict", "[", "k", "]", "for", "k", "in", "sorted_keys", "]", ")", ".", "sum", "(", "0", ")", "]", "\n", "classifier_in", "=", "torch", ".", "cat", "(", "classifier_in", ",", "dim", "=", "1", ")", "\n", "\n", "return", "self", ".", "classifier", "(", "classifier_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.DeepFM.forward": [[124, 136], ["DeepFM.DeepFM.compute_soi", "DeepFM.DeepFM.compute_deep"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.DeepFM.compute_soi", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.DeepFM.DeepFM.compute_deep"], ["", "def", "forward", "(", "self", ",", "features_dict", ")", ":", "\n", "        ", "'''\n        Args:\n            feature_dict: dict of PyTorch tensors of shape (batch_size, self.feature_dim)\n        '''", "\n", "assert", "dataset_config", ".", "labels_key", "not", "in", "features_dict", "\n", "\n", "# FM Part", "\n", "self", ".", "compute_soi", "(", "features_dict", ")", "\n", "\n", "# Deep Part", "\n", "return", "self", ".", "compute_deep", "(", "features_dict", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatures.RawFeatures.__init__": [[9, 17], ["RawFeatures.RawFeatures.process_features"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatures.RawFeatures.process_features"], ["    ", "def", "__init__", "(", "self", ",", "raw_features", ",", "feature_name", ":", "str", ",", "feature_saver", ")", ":", "\n", "        ", "'''\n        Args:\n            raw_features: a list of Dataframes or just a Dataframe\n        '''", "\n", "self", ".", "feature_name", "=", "feature_name", "\n", "self", ".", "raw_features", "=", "self", ".", "process_features", "(", "raw_features", ")", "\n", "self", ".", "feature_saver", "=", "feature_saver", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatures.RawFeatures.process_features": [[18, 21], ["RawFeatures.RawFeatures.get_features_with_index"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatures.RawFeatures.get_features_with_index"], ["", "def", "process_features", "(", "self", ",", "raw_features", ")", ":", "\n", "        ", "return", "self", ".", "get_features_with_index", "(", "features_config", ".", "county_info", ".", "index", ",", "\n", "raw_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatures.RawFeatures.get_features_with_index": [[22, 40], ["pandas.DataFrame", "isinstance", "pandas.DataFrame.merge", "ans.append", "pandas.DataFrame.merge"], "methods", ["None"], ["", "def", "get_features_with_index", "(", "self", ",", "index", ",", "raw_features", ")", ":", "\n", "        ", "index_df", "=", "pd", ".", "DataFrame", "(", "index", "=", "index", ")", "\n", "\n", "if", "isinstance", "(", "raw_features", ",", "list", ")", ":", "\n", "            ", "ans", "=", "[", "]", "\n", "for", "df", "in", "raw_features", ":", "\n", "                ", "ans", ".", "append", "(", "\n", "index_df", ".", "merge", "(", "\n", "df", ",", "how", "=", "'left'", ",", "left_index", "=", "True", ",", "\n", "right_index", "=", "True", ",", "suffixes", "=", "(", "''", ",", "''", ")", "\n", ")", "\n", ")", "\n", "\n", "", "return", "ans", "\n", "# raw_features is a df", "\n", "", "return", "index_df", ".", "merge", "(", "\n", "raw_features", ",", "how", "=", "'left'", ",", "left_index", "=", "True", ",", "\n", "right_index", "=", "True", ",", "suffixes", "=", "(", "''", ",", "''", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatures.RawFeatures.keep_features_with_labels": [[42, 44], ["RawFeatures.RawFeatures.get_features_with_index"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatures.RawFeatures.get_features_with_index"], ["", "def", "keep_features_with_labels", "(", "self", ",", "labels_df", ")", ":", "\n", "        ", "return", "self", ".", "get_features_with_index", "(", "labels_df", ".", "index", ",", "self", ".", "raw_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatures.RawFeatures.extract_torch_tensor": [[45, 49], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "extract_torch_tensor", "(", "self", ",", "county_fips", ":", "str", ",", "start_date", ":", "date", ",", "\n", "end_date", ":", "date", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.RawFeatures.RawFeatures.get_feature_name": [[50, 52], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_feature_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.__init__": [[8, 12], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':6.3f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.__str__": [[25, 28], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.ProgressMeter.__init__": [[32, 36], ["utils.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.ProgressMeter.display": [[37, 41], ["print", "str", "utils.ProgressMeter.batch_fmtstr.format", "str"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ",", "epoch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "' '", "+", "str", "(", "epoch", ")", "+", "':'", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ",", "end", "=", "'\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.ProgressMeter._get_batch_fmtstr": [[42, 46], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.timed_logger_decorator": [[48, 58], ["logging.info", "time.time", "f", "logging.info", "time.time"], "function", ["None"], ["", "", "def", "timed_logger_decorator", "(", "f", ")", ":", "\n", "    ", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "f'Entering {f.__name__}'", ")", "\n", "t", "=", "time", "(", ")", "\n", "ans", "=", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "t", "=", "time", "(", ")", "-", "t", "\n", "logging", ".", "info", "(", "f'Exiting {f.__name__} after {t} secs'", ")", "\n", "return", "ans", "\n", "\n", "", "return", "wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.global_config.get_best_tune_file": [[22, 29], ["datetime.datetime.now", "os.path.join", "os.path.join", "os.path.exists", "os.mkdir"], "function", ["None"], ["def", "get_best_tune_file", "(", "exp_name", ")", ":", "\n", "    ", "now", "=", "datetime", ".", "now", "(", ")", "\n", "fl", "=", "f'{now.year}-{now.month}-{now.day}_{now.hour}-{now.minute}_{exp_name}.pickle'", "\n", "dr", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_save_dir", ",", "'tunes'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dr", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dr", ")", "\n", "", "return", "os", ".", "path", ".", "join", "(", "dr", ",", "fl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.__init__": [[12, 29], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "keyword", ",", "time_dependence", "=", "True", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "global_config", ".", "data_save_dir", ",", "root", ")", "\n", "self", ".", "keyword", "=", "keyword", "\n", "self", ".", "time_dependence", "=", "time_dependence", "\n", "\n", "if", "self", ".", "time_dependence", ":", "\n", "            ", "self", ".", "file_format", "=", "f'%Y-%m-%d-{self.keyword}.csv'", "\n", "self", ".", "mean_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "f'{self.keyword}-mean.pickle'", ")", "\n", "self", ".", "std_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "f'{self.keyword}-std.pickle'", ")", "\n", "self", ".", "save_file", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "file_format", "=", "f'{self.keyword}.csv'", "\n", "self", ".", "mean_path", "=", "None", "\n", "self", ".", "std_path", "=", "None", "\n", "self", ".", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "f'{self.keyword}.csv'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.DataSaverConfig.FeatureSaver.get_file_func": [[30, 33], ["d.strftime", "os.path.join"], "methods", ["None"], ["", "", "def", "get_file_func", "(", "self", ")", ":", "\n", "        ", "return", "lambda", "d", ":", "d", ".", "strftime", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "file_format", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.features_config.get_county_info": [[14, 28], ["os.path.exists", "[].iloc[].set_index", "pd.read_csv().set_index.drop", "pd.read_csv().set_index.drop", "pandas.read_csv().set_index", "os.path.exists", "pd.read_csv().set_index.to_csv", "pandas.read_csv", "pd.read_csv().set_index.index.duplicated", "pd.read_csv().set_index.index.str.startswith", "pandas.read_html"], "function", ["None"], ["def", "get_county_info", "(", "county_info_link", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "config", ".", "counties_save_path", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "config", ".", "counties_save_path", ",", "dtype", "=", "{", "'FIPS'", ":", "str", "}", ")", ".", "set_index", "(", "'FIPS'", ")", "\n", "return", "df", "\n", "\n", "", "df", "=", "pd", ".", "read_html", "(", "county_info_link", ")", "[", "0", "]", ".", "iloc", "[", ":", "-", "1", "]", ".", "set_index", "(", "'FIPS'", ")", "\n", "duplicates", "=", "df", ".", "loc", "[", "df", ".", "index", ".", "duplicated", "(", ")", "]", ".", "index", "\n", "df", "=", "df", ".", "drop", "(", "duplicates", ")", "\n", "df", "=", "df", ".", "drop", "(", "df", ".", "index", "[", "df", ".", "index", ".", "str", ".", "startswith", "(", "(", "'6'", ",", "'7'", ")", ")", "]", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "counties_save_path", ")", ":", "\n", "        ", "df", ".", "to_csv", "(", "config", ".", "counties_save_path", ")", "\n", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.features_config.get_iloc_to_county": [[30, 35], ["range", "ans.append"], "function", ["None"], ["", "def", "get_iloc_to_county", "(", "county_df", ")", ":", "\n", "    ", "ans", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "county_df", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ans", ".", "append", "(", "county_df", ".", "iloc", "[", "i", "]", ".", "name", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.features_config.get_county_name_to_iloc": [[37, 42], ["range"], "function", ["None"], ["", "def", "get_county_name_to_iloc", "(", "county_df", ")", ":", "\n", "    ", "ans", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "county_df", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ans", "[", "county_df", ".", "iloc", "[", "i", "]", ".", "name", "]", "=", "i", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.base_config.Config.__init__": [[5, 8], ["base_config.Config.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.utils.AverageMeter.update"], ["def", "__init__", "(", "self", ",", "description", "=", "''", ")", ":", "\n", "        ", "self", ".", "description", "=", "description", "\n", "self", ".", "__dict__", ".", "update", "(", "Config", ".", "static_members", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.base_config.Config.__setattr__": [[9, 14], ["Exception"], "methods", ["None"], ["", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "# inspired by http://code.activestate.com/recipes/65207-constants-in-python/", "\n", "        ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "            ", "raise", "Exception", "(", "f'Value of {name} is already set - change original value'", ")", "\n", "", "self", ".", "__dict__", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.base_config.Config.set_static": [[15, 25], ["func", "func"], "methods", ["None"], ["", "def", "set_static", "(", "self", ",", "name", ",", "func", ",", "args", ",", "overwrite", "=", "False", ",", "break_args", "=", "False", ")", ":", "\n", "        ", "if", "name", "in", "Config", ".", "static_members", "and", "not", "overwrite", ":", "\n", "            ", "return", "\n", "\n", "", "if", "break_args", ":", "\n", "            ", "Config", ".", "static_members", "[", "name", "]", "=", "func", "(", "*", "args", ")", "\n", "", "else", ":", "\n", "            ", "Config", ".", "static_members", "[", "name", "]", "=", "func", "(", "args", ")", "\n", "\n", "", "self", ".", "__dict__", "[", "name", "]", "=", "Config", ".", "static_members", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.base_config.Config.set_static_val": [[26, 32], ["None"], "methods", ["None"], ["", "def", "set_static_val", "(", "self", ",", "name", ",", "val", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "if", "name", "in", "Config", ".", "static_members", "and", "not", "overwrite", ":", "\n", "            ", "return", "\n", "\n", "", "Config", ".", "static_members", "[", "name", "]", "=", "val", "\n", "self", ".", "__dict__", "[", "name", "]", "=", "Config", ".", "static_members", "[", "name", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.FeatureAnalyzerConfig.get_ranks_file": [[10, 20], ["datetime.datetime.now", "os.path.join", "os.path.join", "os.path.exists", "os.mkdir", "str", "datetime.now.date"], "function", ["None"], ["def", "get_ranks_file", "(", "exp", ")", ":", "\n", "    ", "n", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "fl", "=", "f'rank_{exp}_{str(n.date())}_{n.hour}-{n.minute}.csv'", "\n", "dr", "=", "os", ".", "path", ".", "join", "(", "global_config", ".", "data_save_dir", ",", "'ranks'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dr", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dr", ")", "\n", "\n", "", "return", "os", ".", "path", ".", "join", "(", "dr", ",", "fl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.model_hyperparam_config.add_hyperparameters": [[6, 42], ["hps", "hps.add", "hps.add", "hps.add", "hps.add", "hps.add", "hps.add", "hps.add", "hps.add", "hps.add", "hps", "hps", "hps.add", "hps.add", "hps.add", "hps.add", "hps.add", "hps.add", "hps.add", "hps.add", "hps.add", "hps", "hps.add", "hps.add"], "function", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add"], ["def", "add_hyperparameters", "(", "hps", ")", ":", "\n", "    ", "with", "hps", "(", "level", "=", "HPLevel", ".", "HIGH", ")", ":", "\n", "        ", "hps", ".", "add", "(", "name", "=", "'lr'", ",", "val", "=", "0.0002375", ",", "hp_range", "=", "[", "0.00001", ",", "0.001", "]", ",", "log_scale", "=", "True", ")", "\n", "hps", ".", "add", "(", "name", "=", "'weight_decay'", ",", "val", "=", "2.94334e-05", ",", "hp_range", "=", "[", "0.000001", ",", "0.1", "]", ",", "log_scale", "=", "True", ")", "\n", "hps", ".", "add", "(", "name", "=", "'batch_size'", ",", "val", "=", "71", ",", "hp_range", "=", "[", "16", ",", "96", "]", ",", "hp_type", "=", "int", ")", "\n", "hps", ".", "add", "(", "name", "=", "'embedding_size'", ",", "val", "=", "408", ",", "hp_range", "=", "[", "32", ",", "512", "]", ",", "hp_type", "=", "int", ")", "\n", "hps", ".", "add", "(", "name", "=", "'higher_order_features_size'", ",", "val", "=", "362", ",", "hp_range", "=", "[", "32", ",", "1024", "]", ",", "hp_type", "=", "int", ")", "\n", "hps", ".", "add", "(", "name", "=", "'deep_intermediate_size'", ",", "val", "=", "468", ",", "hp_range", "=", "[", "64", ",", "512", "]", ",", "hp_type", "=", "int", ")", "\n", "hps", ".", "add", "(", "name", "=", "'deep_layers'", ",", "val", "=", "2", ",", "hp_range", "=", "[", "2", ",", "6", "]", ",", "hp_type", "=", "int", ")", "\n", "hps", ".", "add", "(", "name", "=", "'dropout_prob'", ",", "val", "=", "0.565068", ",", "hp_range", "=", "[", "0", ",", "1", "]", ")", "\n", "hps", ".", "add", "(", "name", "=", "'alpha_dropout_prob'", ",", "val", "=", "0.83584", ",", "hp_range", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "", "with", "hps", "(", "level", "=", "HPLevel", ".", "MEDIUM", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "with", "hps", "(", "level", "=", "HPLevel", ".", "LOW", ")", ":", "\n", "        ", "hps", ".", "add", "(", "name", "=", "'lr_decay_factor'", ",", "val", "=", "0.6", ",", "hp_range", "=", "[", "0.01", ",", "1", "]", ")", "\n", "hps", ".", "add", "(", "name", "=", "'ce_coeff'", ",", "val", "=", "1", ",", "hp_range", "=", "[", "0", ",", "100", "]", ")", "\n", "\n", "hps", ".", "add", "(", "name", "=", "'bin_thresh_0'", ",", "val", "=", "0.5", ",", "hp_range", "=", "[", "0", ",", "1", "]", ")", "\n", "hps", ".", "add", "(", "name", "=", "'bin_thresh_1'", ",", "val", "=", "0.5", ",", "hp_range", "=", "[", "0", ",", "1", "]", ")", "\n", "hps", ".", "add", "(", "name", "=", "'bin_thresh_2'", ",", "val", "=", "0.5", ",", "hp_range", "=", "[", "0", ",", "1", "]", ")", "\n", "hps", ".", "add", "(", "name", "=", "'epochs'", ",", "val", "=", "40", ",", "hp_range", "=", "[", "10", ",", "100", "]", ",", "hp_type", "=", "int", ")", "\n", "hps", ".", "add", "(", "name", "=", "'min_learning_rate'", ",", "val", "=", "0.000001", ",", "hp_range", "=", "[", "0", ",", "0.01", "]", ")", "\n", "hps", ".", "add", "(", "name", "=", "'lr_decay_step_size'", ",", "val", "=", "10", ",", "hp_range", "=", "[", "1", ",", "20", "]", ",", "hp_type", "=", "int", ")", "\n", "hps", ".", "add", "(", "name", "=", "'early_stopping_num'", ",", "val", "=", "7", ",", "hp_range", "=", "[", "3", ",", "20", "]", ",", "hp_type", "=", "int", ")", "\n", "\n", "", "with", "hps", "(", "level", "=", "HPLevel", ".", "NONE", ")", ":", "\n", "        ", "hps", ".", "add", "(", "\n", "name", "=", "'projection_days'", ",", "val", "=", "7", ",", "hp_range", "=", "[", "1", ",", "14", "]", ",", "hp_type", "=", "int", ",", "\n", "check", "=", "(", "lambda", "x", ":", "x", "==", "7", ")", "\n", ")", "\n", "\n", "hps", ".", "add", "(", "\n", "name", "=", "'past_days_to_consider'", ",", "val", "=", "13", ",", "hp_range", "=", "[", "13", ",", "13", "]", ",", "\n", "hp_type", "=", "int", ",", "check", "=", "(", "lambda", "x", ":", "x", "==", "13", "and", "(", "x", "+", "1", ")", "%", "7", "==", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__": [[15, 41], ["deepcovidnet.config.base_config.Config.__init__", "datetime.timedelta", "pandas.tseries.offsets.MonthBegin", "pandas.tseries.offsets.Week"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "file_granularity", ":", "str", ",", "file_path_format", ":", "str", ",", "\n", "is_timezone_variable", ":", "bool", ",", "timezone", ":", "timezone", "=", "None", ",", "\n", "part_prefix", ":", "str", "=", "None", ",", "file_extension", "=", "'.csv'", ")", ":", "\n", "\n", "        ", "super", "(", "ReaderConfig", ",", "self", ")", ".", "__init__", "(", "'Config for reading data from different mediums'", ")", "\n", "\n", "assert", "file_granularity", "in", "[", "'daily'", ",", "'monthly'", ",", "'weekly'", "]", "\n", "\n", "self", ".", "file_granularity", "=", "file_granularity", "\n", "\n", "if", "self", ".", "file_granularity", "==", "'daily'", ":", "\n", "            ", "self", ".", "date_offset", "=", "timedelta", "(", "days", "=", "1", ")", "\n", "", "elif", "self", ".", "file_granularity", "==", "'monthly'", ":", "\n", "            ", "self", ".", "date_offset", "=", "offsets", ".", "MonthBegin", "(", ")", "\n", "", "elif", "self", ".", "file_granularity", "==", "'weekly'", ":", "\n", "            ", "self", ".", "date_offset", "=", "offsets", ".", "Week", "(", "weekday", "=", "0", ")", "\n", "\n", "", "self", ".", "file_path_format", "=", "file_path_format", "\n", "\n", "self", ".", "file_extension", "=", "file_extension", "\n", "\n", "self", ".", "partwise", "=", "part_prefix", "is", "not", "None", "\n", "self", ".", "part_prefix", "=", "part_prefix", "\n", "\n", "self", ".", "is_timezone_variable", "=", "is_timezone_variable", "\n", "self", ".", "timezone", "=", "timezone", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_file_date": [[42, 50], ["isinstance", "d.date.date.date", "d.date.date.weekday"], "methods", ["None"], ["", "def", "get_file_date", "(", "self", ",", "d", ")", ":", "\n", "        ", "if", "self", ".", "file_granularity", "==", "'weekly'", "and", "d", ".", "weekday", "(", ")", "!=", "0", ":", "\n", "            ", "d", "=", "d", "-", "self", ".", "date_offset", "\n", "\n", "", "if", "isinstance", "(", "d", ",", "pd", ".", "Timestamp", ")", ":", "\n", "            ", "d", "=", "d", ".", "date", "(", ")", "\n", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_files_between": [[51, 93], ["set", "RawFeatureExtractorConfig.ReaderConfig.get_file_date", "sorted", "isinstance", "d.date.date.strftime", "os.path.exists", "os.path.isdir", "isinstance", "list", "d.date.date.date", "os.path.join", "os.listdir", "os.path.isfile", "d.date.date.date", "isinstance", "set.add", "os.path.join.startswith", "os.path.join.endswith", "os.path.join", "isinstance", "set.add", "expected_end.date.date.date", "expected_end.date.date.date", "min", "min"], "methods", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.ReaderConfig.get_file_date", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add", "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.add"], ["", "def", "get_files_between", "(", "self", ",", "start_date", ":", "date", ",", "end_date", ":", "date", ")", ":", "\n", "        ", "files", "=", "set", "(", ")", "\n", "\n", "d", "=", "self", ".", "get_file_date", "(", "start_date", ")", "\n", "if", "d", "<", "start_date", ":", "\n", "            ", "d", "+=", "self", ".", "date_offset", "\n", "if", "isinstance", "(", "d", ",", "pd", ".", "Timestamp", ")", ":", "\n", "                ", "d", "=", "d", ".", "date", "(", ")", "\n", "\n", "", "", "while", "d", "<", "end_date", ":", "\n", "            ", "file_format", "=", "d", ".", "strftime", "(", "\n", "os", ".", "path", ".", "join", "(", "global_config", ".", "data_base_dir", ",", "self", ".", "file_path_format", ")", "\n", ")", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "file_format", ")", ",", "file_format", "+", "' does not exist'", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "file_format", ")", ":", "\n", "                ", "for", "f", "in", "os", ".", "listdir", "(", "file_format", ")", ":", "\n", "                    ", "if", "f", ".", "startswith", "(", "self", ".", "part_prefix", ")", "and", "f", ".", "endswith", "(", "self", ".", "file_extension", ")", ":", "\n", "                        ", "f", "=", "os", ".", "path", ".", "join", "(", "file_format", ",", "f", ")", "\n", "\n", "expected_end", "=", "d", "+", "self", ".", "date_offset", "\n", "if", "isinstance", "(", "expected_end", ",", "pd", ".", "Timestamp", ")", ":", "\n", "                            ", "expected_end", "=", "expected_end", ".", "date", "(", ")", "\n", "\n", "", "files", ".", "add", "(", "\n", "(", "f", ",", "d", ",", "min", "(", "end_date", ",", "expected_end", ")", ")", "\n", ")", "\n", "", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "file_format", ")", ":", "\n", "                ", "expected_end", "=", "d", "+", "self", ".", "date_offset", "\n", "if", "isinstance", "(", "expected_end", ",", "pd", ".", "Timestamp", ")", ":", "\n", "                    ", "expected_end", "=", "expected_end", ".", "date", "(", ")", "\n", "\n", "", "files", ".", "add", "(", "\n", "(", "file_format", ",", "d", ",", "min", "(", "end_date", ",", "expected_end", ")", ")", "\n", ")", "\n", "\n", "", "d", "+=", "self", ".", "date_offset", "\n", "if", "isinstance", "(", "d", ",", "pd", ".", "Timestamp", ")", ":", "\n", "                ", "d", "=", "d", ".", "date", "(", ")", "\n", "\n", "", "", "return", "sorted", "(", "list", "(", "files", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.RawFeatureExtractorConfig.get_aggregate_dict": [[124, 128], ["open", "pickle.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.deepcovidnet.Hyperparameters.HyperparametersSingleton.load"], ["def", "get_aggregate_dict", "(", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "global_config", ".", "data_save_dir", ",", "'census_data_groupby_conditions.pickle'", ")", ",", "'rb'", ")", "as", "f", ":", "# data internally generated - contact for availability", "\n", "        ", "d", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.urban-resilience-lab_covid-county-prediction.config.CovidCountyDatasetConfig.get_cached_tensors_path": [[38, 46], ["os.path.join", "os.path.join", "os.path.exists", "logging.info", "str", "str"], "function", ["None"], ["", "def", "get_cached_tensors_path", "(", "s", ",", "e", ")", ":", "\n", "    ", "base_file", "=", "f'tensors_{str(s)}_{str(e)}.pt'", "\n", "loc", "=", "os", ".", "path", ".", "join", "(", "tensor_dir", ",", "base_file", ")", "\n", "mem_loc", "=", "os", ".", "path", ".", "join", "(", "'/dev/shm/'", ",", "base_file", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "mem_loc", ")", ":", "\n", "        ", "logging", ".", "info", "(", "f'Leading {base_file} from memory'", ")", "\n", "return", "mem_loc", "\n", "", "return", "loc", "\n", "\n"]]}