{"home.repos.pwc.inspect_result.amazon-research_sentence-representations.PairSupCon.main.run": [[18, 40], ["utils.utils.setup_path", "utils.utils.set_global_random_seed", "torch.device", "torch.device", "torch.cuda.device_count", "torch.cuda.device_count", "print", "dataloader.dataloader.pair_loader", "utils.optimizer.get_bert_config_tokenizer", "models.Transformers.PairSupConBert.from_pretrained", "utils.optimizer.get_optimizer", "torch.DataParallel", "nn.DataParallel.to", "training.PairSupConTrainer", "training.PairSupConTrainer.train", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.utils.setup_path", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.configs.utils.set_global_random_seed", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.dataloader.dataloader.pair_loader", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.optimizer.get_bert_config_tokenizer", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.utils.get_optimizer", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train"], ["def", "run", "(", "args", ")", ":", "\n", "    ", "args", ".", "resPath", ",", "args", ".", "tensorboard", "=", "setup_path", "(", "args", ")", "\n", "set_global_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "device_id", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "\"\\t {} GPUs available to use!\"", ".", "format", "(", "device_id", ")", ")", "\n", "\n", "# dataloader", "\n", "train_loader", "=", "pair_loader", "(", "args", ")", "\n", "\n", "config", ",", "tokenizer", "=", "get_bert_config_tokenizer", "(", "args", ".", "bert", ")", "\n", "model", "=", "PairSupConBert", ".", "from_pretrained", "(", "MODEL_CLASS", "[", "args", ".", "bert", "]", ")", "\n", "optimizer", "=", "get_optimizer", "(", "model", ",", "args", ")", "\n", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "# set up the trainer", "\n", "trainer", "=", "PairSupConTrainer", "(", "model", ",", "tokenizer", ",", "optimizer", ",", "train_loader", ",", "args", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.PairSupCon.main.get_args": [[41, 77], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--training_instance'", ",", "type", "=", "str", ",", "default", "=", "'local'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpuid'", ",", "nargs", "=", "\"+\"", ",", "type", "=", "int", ",", "default", "=", "[", "0", "]", ",", "help", "=", "\"The list of gpuid, ex:--gpuid 3 1. Negative value means cpu-only\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--resdir'", ",", "type", "=", "str", ",", "default", "=", "'./results'", ")", "\n", "parser", ".", "add_argument", "(", "'--logging_step'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dev_set'", ",", "default", "=", "\"None\"", ",", "help", "=", "\"use sts-b as dev set or not\"", ",", "choices", "=", "[", "\"None\"", ",", "\"sts\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--path_sts_data'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"use sts-b as dev set\"", ")", "\n", "parser", ".", "add_argument", "(", "'--s3_ckptdir'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"s3path for ckpts\"", ")", "\n", "# Dataset", "\n", "parser", ".", "add_argument", "(", "'--datapath'", ",", "type", "=", "str", ",", "default", "=", "'../datasets/NLI/'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataname'", ",", "type", "=", "str", ",", "default", "=", "'nli_pairsupcon.csv'", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--text'", ",", "type", "=", "str", ",", "default", "=", "'text'", ")", "\n", "parser", ".", "add_argument", "(", "'--pairsimi'", ",", "type", "=", "str", ",", "default", "=", "'pairsimi'", ")", "\n", "# Training parameters", "\n", "parser", ".", "add_argument", "(", "'--max_length'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-06", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_scale'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'--max_iter'", ",", "type", "=", "int", ",", "default", "=", "100000000", ")", "\n", "# Contrastive learning", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'pairsupcon'", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bert'", ",", "type", "=", "str", ",", "default", "=", "'bertbase'", ",", "choices", "=", "[", "\"bertbase\"", ",", "\"bertlarge\"", "]", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--contrast_type'", ",", "type", "=", "str", ",", "default", "=", "\"HardNeg\"", ")", "\n", "parser", ".", "add_argument", "(", "'--feat_dim'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "\"dimension of the projected features for instance discrimination loss\"", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "help", "=", "\"temperature required by contrastive loss\"", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "\" \"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "args", ".", "use_gpu", "=", "args", ".", "gpuid", "[", "0", "]", ">=", "0", "\n", "args", ".", "resPath", "=", "None", "\n", "args", ".", "tensorboard", "=", "None", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.PairSupCon.training.PairSupConTrainer.__init__": [[18, 38], ["torch.Module.__init__", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "utils.contrastive_utils.HardConLoss().cuda", "print", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "utils.contrastive_utils.HardConLoss"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "tokenizer", ",", "optimizer", ",", "train_loader", ",", "args", ")", ":", "\n", "        ", "super", "(", "PairSupConTrainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "beta", "=", "self", ".", "args", ".", "beta", "\n", "self", ".", "task_type", "=", "self", ".", "args", ".", "mode", "\n", "self", ".", "gstep", "=", "0", "\n", "\n", "# Only need this if you use sts-b as the dev set", "\n", "self", ".", "dev_objective", "=", "-", "1", "\n", "\n", "# Pairwise classificaiton loss", "\n", "self", ".", "classify_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "# Hard negative sampling based instance-discrimination loss", "\n", "self", ".", "inst_disc_loss", "=", "HardConLoss", "(", "temperature", "=", "self", ".", "args", ".", "temperature", ",", "contrast_type", "=", "self", ".", "args", ".", "contrast_type", ")", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "\"\\n ******Initializing the PairSupCon Trainer with {} sampling****** \\n\"", ".", "format", "(", "self", ".", "args", ".", "contrast_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.PairSupCon.training.PairSupConTrainer.get_batch_token": [[39, 48], ["training.PairSupConTrainer.tokenizer.batch_encode_plus"], "methods", ["None"], ["", "def", "get_batch_token", "(", "self", ",", "text", ")", ":", "\n", "        ", "token_feat", "=", "self", ".", "tokenizer", ".", "batch_encode_plus", "(", "\n", "text", ",", "\n", "max_length", "=", "self", ".", "args", ".", "max_length", ",", "\n", "return_tensors", "=", "'pt'", ",", "\n", "padding", "=", "'max_length'", ",", "\n", "truncation", "=", "True", "\n", ")", "\n", "return", "token_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.PairSupCon.training.PairSupConTrainer.prepare_pairwise_input": [[50, 58], ["training.PairSupConTrainer.get_batch_token", "training.PairSupConTrainer.get_batch_token", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "batch[].cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "pairsimi.detach", "feat1[].unsqueeze", "feat2[].unsqueeze", "feat1[].unsqueeze", "feat2[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.get_batch_token", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.get_batch_token", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["", "def", "prepare_pairwise_input", "(", "self", ",", "batch", ")", ":", "\n", "        ", "text1", ",", "text2", ",", "pairsimi", "=", "batch", "[", "'text1'", "]", ",", "batch", "[", "'text2'", "]", ",", "batch", "[", "'pairsimi'", "]", ".", "cuda", "(", ")", "\n", "feat1", "=", "self", ".", "get_batch_token", "(", "text1", ")", "\n", "feat2", "=", "self", ".", "get_batch_token", "(", "text2", ")", "\n", "\n", "input_ids", "=", "torch", ".", "cat", "(", "[", "feat1", "[", "'input_ids'", "]", ".", "unsqueeze", "(", "1", ")", ",", "feat2", "[", "'input_ids'", "]", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "attention_mask", "=", "torch", ".", "cat", "(", "[", "feat1", "[", "'attention_mask'", "]", ".", "unsqueeze", "(", "1", ")", ",", "feat2", "[", "'attention_mask'", "]", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "input_ids", ".", "cuda", "(", ")", ",", "attention_mask", ".", "cuda", "(", ")", ",", "pairsimi", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.PairSupCon.training.PairSupConTrainer.save_model": [[60, 69], ["training.PairSupConTrainer.model.module.save_pretrained", "training.PairSupConTrainer.tokenizer.save_pretrained", "training.PairSupConTrainer.model.module.save_pretrained", "training.PairSupConTrainer.tokenizer.save_pretrained", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "epoch", ",", "best_dev", "=", "False", ")", ":", "\n", "        ", "if", "best_dev", ":", "\n", "# save the ckpt according to the performance on sts-b dev set", "\n", "            ", "self", ".", "model", ".", "module", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "resPath", ",", "'pscbert_stsdev'", ")", ")", "\n", "self", ".", "tokenizer", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "resPath", ",", "'pscbert_stsdev'", ")", ")", "\n", "", "else", ":", "\n", "# save the ckpt per epoch", "\n", "            ", "self", ".", "model", ".", "module", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "resPath", ",", "f'pscbert_epoch_{epoch}'", ")", ")", "\n", "self", ".", "tokenizer", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "resPath", ",", "f'pscbert_epoch_{epoch}'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.PairSupCon.training.PairSupConTrainer.train": [[70, 102], ["print", "training.PairSupConTrainer.model.train", "range", "len", "enumerate", "training.PairSupConTrainer.save_model", "len", "training.PairSupConTrainer.prepare_pairwise_input", "training.PairSupConTrainer.train_step", "utils.utils.statistics_log", "training.PairSupConTrainer.model.eval", "training.PairSupConTrainer.eval_stsdev", "training.PairSupConTrainer.update", "training.PairSupConTrainer.model.train", "training.PairSupConTrainer.save_model"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.save_model", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.prepare_pairwise_input", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train_step", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.utils.statistics_log", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.eval_stsdev", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.AverageMeter.update", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.save_model"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "all_iter", "=", "self", ".", "args", ".", "epochs", "*", "len", "(", "self", ".", "train_loader", ")", "\n", "print", "(", "'\\n={}/{}=Iterations/Batches'", ".", "format", "(", "all_iter", ",", "len", "(", "self", ".", "train_loader", ")", ")", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "epochs", ")", ":", "\n", "            ", "for", "j", ",", "batch", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "\n", "                ", "input_ids", ",", "attention_mask", ",", "pairsimi", "=", "self", ".", "prepare_pairwise_input", "(", "batch", ")", "\n", "\n", "losses", "=", "self", ".", "train_step", "(", "input_ids", ",", "attention_mask", ",", "pairsimi", ")", "\n", "\n", "if", "(", "self", ".", "gstep", "%", "self", ".", "args", ".", "logging_step", "==", "0", ")", "or", "(", "self", ".", "gstep", "==", "all_iter", ")", "or", "(", "self", ".", "gstep", "==", "self", ".", "args", ".", "max_iter", ")", ":", "\n", "\n", "                    ", "if", "self", ".", "args", ".", "dev_set", "==", "\"sts\"", ":", "# testing the effectiveness of stsb as dev set, default False", "\n", "                        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "sts_metrics", "=", "self", ".", "eval_stsdev", "(", ")", "\n", "losses", ".", "update", "(", "sts_metrics", ")", "\n", "\n", "if", "sts_metrics", "[", "\"eval_stsb_spearman\"", "]", ">", "self", ".", "dev_objective", ":", "\n", "                            ", "self", ".", "save_model", "(", "epoch", ",", "best_dev", "=", "True", ")", "\n", "self", ".", "dev_objective", "=", "sts_metrics", "[", "\"eval_stsb_spearman\"", "]", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "", "statistics_log", "(", "self", ".", "args", ".", "tensorboard", ",", "losses", "=", "losses", ",", "global_step", "=", "self", ".", "gstep", ")", "\n", "\n", "", "elif", "self", ".", "gstep", ">", "self", ".", "args", ".", "max_iter", ":", "\n", "                    ", "break", "\n", "\n", "", "self", ".", "gstep", "+=", "1", "\n", "", "self", ".", "save_model", "(", "epoch", ",", "best_dev", "=", "False", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.PairSupCon.training.PairSupConTrainer.train_step": [[104, 132], ["training.PairSupConTrainer.backward", "training.PairSupConTrainer.optimizer.step", "training.PairSupConTrainer.optimizer.zero_grad", "training.PairSupConTrainer.model", "training.PairSupConTrainer.classify_loss", "pairsimi.view().detach", "training.PairSupConTrainer.model", "training.PairSupConTrainer.inst_disc_loss", "training.PairSupConTrainer.model", "training.PairSupConTrainer.inst_disc_loss", "training.PairSupConTrainer.classify_loss", "Exception", "pairsimi.view", "pairsimi.view().detach", "pairsimi.view"], "methods", ["None"], ["", "def", "train_step", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "pairsimi", ")", ":", "\n", "\n", "        ", "if", "self", ".", "task_type", "==", "\"classification\"", ":", "\n", "            ", "classify_pred", "=", "self", ".", "model", "(", "input_ids", ",", "attention_mask", ",", "task_type", "=", "\"classification\"", ")", "\n", "loss", "=", "self", ".", "classify_loss", "(", "classify_pred", ",", "pairsimi", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "losses", "=", "{", "\"classification_loss\"", ":", "loss", "}", "\n", "\n", "", "elif", "self", ".", "task_type", "==", "\"contrastive\"", ":", "\n", "            ", "feat1", ",", "feat2", "=", "self", ".", "model", "(", "input_ids", ",", "attention_mask", ",", "task_type", "=", "'contrastive'", ")", "\n", "losses", "=", "self", ".", "inst_disc_loss", "(", "feat1", ",", "feat2", ",", "pairsimi", ")", "\n", "loss", "=", "losses", "[", "\"instdisc_loss\"", "]", "\n", "\n", "", "elif", "self", ".", "task_type", "==", "\"pairsupcon\"", ":", "\n", "            ", "classify_pred", ",", "feat1", ",", "feat2", "=", "self", ".", "model", "(", "input_ids", ",", "attention_mask", ",", "task_type", "=", "'pairsupcon'", ")", "\n", "losses", "=", "self", ".", "inst_disc_loss", "(", "feat1", ",", "feat2", ",", "pairsimi", ")", "\n", "loss", "=", "self", ".", "beta", "*", "losses", "[", "\"instdisc_loss\"", "]", "\n", "\n", "classify_loss", "=", "self", ".", "classify_loss", "(", "classify_pred", ",", "pairsimi", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "loss", "+=", "classify_loss", "\n", "losses", "[", "\"classification_loss\"", "]", "=", "classify_loss", "\n", "losses", "[", "\"loss\"", "]", "=", "loss", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Please specify the loss type!\"", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.PairSupCon.training.PairSupConTrainer.eval_stsdev": [[134, 171], ["torch.device", "torch.device", "torch.device", "torch.device", "senteval.engine.SE", "senteval.engine.SE.eval", "training.PairSupConTrainer.tokenizer.batch_encode_plus", "features[].to", "features[].to", "training.PairSupConTrainer.detach().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "training.PairSupConTrainer.model", "training.PairSupConTrainer.detach().cpu", "training.PairSupConTrainer.detach"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval"], ["", "def", "eval_stsdev", "(", "self", ")", ":", "\n", "\n", "        ", "def", "prepare", "(", "params", ",", "samples", ")", ":", "\n", "            ", "return", "\n", "\n", "", "def", "batcher", "(", "params", ",", "batch", ")", ":", "\n", "            ", "sentences", "=", "[", "' '", ".", "join", "(", "s", ")", "for", "s", "in", "batch", "]", "\n", "\n", "features", "=", "self", ".", "tokenizer", ".", "batch_encode_plus", "(", "\n", "sentences", ",", "\n", "max_length", "=", "params", "[", "'max_length'", "]", ",", "\n", "return_tensors", "=", "'pt'", ",", "\n", "padding", "=", "True", ",", "\n", "truncation", "=", "True", "\n", ")", "\n", "input_ids", "=", "features", "[", "'input_ids'", "]", ".", "to", "(", "params", "[", "'device'", "]", ")", "\n", "attention_mask", "=", "features", "[", "'attention_mask'", "]", ".", "to", "(", "params", "[", "'device'", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "embeddings", "=", "self", ".", "model", "(", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "attention_mask", ",", "task_type", "=", "\"evaluate\"", ")", "\n", "", "return", "embeddings", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# define senteval params", "\n", "", "params_senteval", "=", "{", "'task_path'", ":", "self", ".", "args", ".", "path_sts_data", ",", "'usepytorch'", ":", "True", ",", "'kfold'", ":", "5", "}", "\n", "params_senteval", "[", "'classifier'", "]", "=", "{", "'nhid'", ":", "0", ",", "'optim'", ":", "'rmsprop'", ",", "'batch_size'", ":", "64", ",", "\n", "'tenacity'", ":", "3", ",", "'epoch_size'", ":", "2", "}", "\n", "params_senteval", "[", "'max_length'", "]", "=", "None", "\n", "params_senteval", "[", "'device'", "]", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "0", ")", ")", "\n", "\n", "se", "=", "senteval", ".", "engine", ".", "SE", "(", "params_senteval", ",", "batcher", ",", "prepare", ")", "\n", "transfer_tasks", "=", "[", "'SICKRelatedness'", ",", "'STSBenchmark'", "]", "\n", "results", "=", "se", ".", "eval", "(", "transfer_tasks", ")", "\n", "\n", "stsb_spearman", "=", "results", "[", "'STSBenchmark'", "]", "[", "'dev'", "]", "[", "'spearman'", "]", "[", "0", "]", "\n", "sickr_spearman", "=", "results", "[", "'SICKRelatedness'", "]", "[", "'dev'", "]", "[", "'spearman'", "]", "[", "0", "]", "\n", "metrics", "=", "{", "\"eval_stsb_spearman\"", ":", "stsb_spearman", ",", "\"eval_sickr_spearman\"", ":", "sickr_spearman", ",", "\"eval_avg_sts\"", ":", "(", "stsb_spearman", "+", "sickr_spearman", ")", "/", "2", "}", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.contrastive_utils.HardConLoss.__init__": [[8, 14], ["torch.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "temperature", "=", "0.07", ",", "contrast_type", "=", "\"HardNeg\"", ")", ":", "\n", "        ", "super", "(", "HardConLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "contrast_type", "=", "contrast_type", "\n", "self", ".", "eps", "=", "1e-08", "\n", "print", "(", "\"-----Contrastive Learning Type: \\t\"", ",", "contrast_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.contrastive_utils.HardConLoss.forward": [[15, 46], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "mask.repeat.repeat.repeat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "neg.masked_select().view.masked_select().view.masked_select().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "posmask.type.type.type", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "neg.masked_select().view.masked_select().view.sum", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "neg.masked_select().view.masked_select().view.masked_select", "posmask.type.type.sum", "neg.masked_select().view.masked_select().view.log().exp", "Exception", "torch.cat.t().contiguous", "torch.cat.t().contiguous", "neg.masked_select().view.log().exp.mean", "posmask.type.type.sum", "neg.masked_select().view.masked_select().view.log", "torch.cat.t", "torch.cat.t", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features_1", ",", "features_2", ",", "pairsimi", ")", ":", "\n", "        ", "device", "=", "(", "torch", ".", "device", "(", "'cuda'", ")", "if", "features_1", ".", "is_cuda", "else", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "batch_size", "=", "features_1", ".", "shape", "[", "0", "]", "\n", "\n", "features", "=", "torch", ".", "cat", "(", "[", "features_1", ",", "features_2", "]", ",", "dim", "=", "0", ")", "\n", "mask", "=", "torch", ".", "eye", "(", "batch_size", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "to", "(", "device", ")", "\n", "mask", "=", "mask", ".", "repeat", "(", "2", ",", "2", ")", "\n", "mask", "=", "~", "mask", "\n", "\n", "pos", "=", "torch", ".", "exp", "(", "torch", ".", "sum", "(", "features_1", "*", "features_2", ",", "dim", "=", "-", "1", ")", "/", "self", ".", "temperature", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "[", "pos", ",", "pos", "]", ",", "dim", "=", "0", ")", "\n", "neg", "=", "torch", ".", "exp", "(", "torch", ".", "mm", "(", "features", ",", "features", ".", "t", "(", ")", ".", "contiguous", "(", ")", ")", "/", "self", ".", "temperature", ")", "\n", "neg", "=", "neg", ".", "masked_select", "(", "mask", ")", ".", "view", "(", "2", "*", "batch_size", ",", "-", "1", ")", "\n", "\n", "pairmask", "=", "torch", ".", "cat", "(", "[", "pairsimi", ",", "pairsimi", "]", ",", "dim", "=", "0", ")", "\n", "posmask", "=", "(", "pairmask", "==", "1", ")", ".", "detach", "(", ")", "\n", "posmask", "=", "posmask", ".", "type", "(", "torch", ".", "int32", ")", "\n", "\n", "if", "self", ".", "contrast_type", "==", "\"Orig\"", ":", "\n", "            ", "Ng", "=", "neg", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "loss_pos", "=", "(", "-", "posmask", "*", "torch", ".", "log", "(", "pos", "/", "(", "Ng", "+", "pos", ")", ")", ")", ".", "sum", "(", ")", "/", "posmask", ".", "sum", "(", ")", "\n", "return", "{", "\"instdisc_loss\"", ":", "loss_pos", "}", "\n", "\n", "", "elif", "self", ".", "contrast_type", "==", "\"HardNeg\"", ":", "\n", "            ", "negimp", "=", "neg", ".", "log", "(", ")", ".", "exp", "(", ")", "\n", "Ng", "=", "(", "negimp", "*", "neg", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "negimp", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss_pos", "=", "(", "-", "posmask", "*", "torch", ".", "log", "(", "pos", "/", "(", "Ng", "+", "pos", ")", ")", ")", ".", "sum", "(", ")", "/", "posmask", ".", "sum", "(", ")", "\n", "return", "{", "\"instdisc_loss\"", ":", "loss_pos", "}", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Please specify the contrastive loss, Orig vs. HardNeg.\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.optimizer.get_optimizer": [[11, 22], ["torch.optim.Adam", "torch.optim.Adam", "model.roberta.parameters", "model.contrast_head.parameters", "model.bert.parameters", "model.contrast_head.parameters"], "function", ["None"], ["\n", "    ", "if", "args", ".", "mode", "==", "\"contrastive\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "model", ".", "bert", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "contrast_head", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "*", "args", ".", "lr_scale", "}", "]", ",", "lr", "=", "args", ".", "lr", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"classification\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "model", ".", "bert", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "classify_head", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "*", "args", ".", "lr_scale", "}", "]", ",", "lr", "=", "args", ".", "lr", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"pairsupcon\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "model", ".", "bert", ".", "parameters", "(", ")", "}", ",", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.optimizer.get_bert_config_tokenizer": [[24, 28], ["transformers.AutoConfig.from_pretrained", "transformers.AutoTokenizer.from_pretrained"], "function", ["None"], ["{", "'params'", ":", "model", ".", "contrast_head", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "*", "args", ".", "lr_scale", "}", "]", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "", "print", "(", "\"-----mode: {} \\n ------optimizer: {}\"", ".", "format", "(", "args", ".", "mode", ",", "optimizer", ")", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.utils.set_global_random_seed": [[7, 14], ["torch.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "set_global_random_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.utils.setup_path": [[27, 45], ["print", "tensorboardX.SummaryWriter"], "function", ["None"], ["resPath", "+=", "f'.seed{args.seed}/'", "\n", "resPath", "=", "args", ".", "resdir", "+", "resPath", "\n", "print", "(", "f'results path: {resPath}'", ")", "\n", "\n", "tensorboard", "=", "SummaryWriter", "(", "resPath", ")", "\n", "return", "resPath", ",", "tensorboard", "\n", "\n", "\n", "", "def", "statistics_log", "(", "tensorboard", ",", "losses", "=", "None", ",", "global_step", "=", "0", ")", ":", "\n", "    ", "print", "(", "\"[{}]-----\"", ".", "format", "(", "global_step", ")", ")", "\n", "if", "losses", "is", "not", "None", ":", "\n", "        ", "for", "key", ",", "val", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "tensorboard", ".", "add_scalar", "(", "'train/'", "+", "key", ",", "val", ".", "item", "(", ")", ",", "global_step", ")", "\n", "print", "(", "\"{}:\\t {:.3f}\"", ".", "format", "(", "key", ",", "val", ".", "item", "(", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.utils.statistics_log": [[46, 55], ["print", "losses.items", "print", "tensorboard.add_scalar", "val.item", "tensorboard.add_scalar"], "function", ["None"], []], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.optimizer.get_bert": [[30, 36], ["transformers.AutoConfig.from_pretrained", "transformers.AutoModel.from_pretrained", "transformers.AutoTokenizer.from_pretrained"], "function", ["None"], ["", "def", "get_bert_config_tokenizer", "(", "model_name", ")", ":", "\n", "    ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "MODEL_CLASS", "[", "model_name", "]", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "MODEL_CLASS", "[", "model_name", "]", ")", "\n", "return", "config", ",", "tokenizer", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.dataloader.dataloader.PairSamples.__init__": [[8, 12], ["len", "len"], "methods", ["None"], ["        ", "assert", "len", "(", "pairsimi", ")", "==", "len", "(", "train_x1", ")", "==", "len", "(", "train_x2", ")", "\n", "self", ".", "train_x1", "=", "train_x1", "\n", "self", ".", "train_x2", "=", "train_x2", "\n", "self", ".", "pairsimi", "=", "pairsimi", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.dataloader.dataloader.PairSamples.__len__": [[14, 16], ["len"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "pairsimi", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.dataloader.dataloader.PairSamples.__getitem__": [[17, 19], ["None"], "methods", ["None"], ["        ", "return", "{", "'text1'", ":", "self", ".", "train_x1", "[", "idx", "]", ",", "'text2'", ":", "self", ".", "train_x2", "[", "idx", "]", ",", "'pairsimi'", ":", "self", ".", "pairsimi", "[", "idx", "]", "}", "\n", "\n", "", "", "def", "pair_loader", "(", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.dataloader.dataloader.pair_loader": [[21, 30], ["print", "pandas.read_csv", "dataloader.PairSamples", "torch.DataLoader", "os.path.join", "train_data[].fillna", "train_data[].fillna", "os.path.join"], "function", ["None"], ["\n", "# assume each input pair is named as (sentence1, sentence2)", "\n", "train_text1", "=", "train_data", "[", "args", ".", "text", "+", "'1'", "]", ".", "fillna", "(", "'.'", ")", ".", "values", "\n", "train_text2", "=", "train_data", "[", "args", ".", "text", "+", "'2'", "]", ".", "fillna", "(", "'.'", ")", ".", "values", "\n", "pairsimi", "=", "train_data", "[", "args", ".", "pairsimi", "]", ".", "astype", "(", "int", ")", ".", "values", "\n", "\n", "train_dataset", "=", "PairSamples", "(", "train_text1", ",", "train_text2", ",", "pairsimi", ")", "\n", "train_loader", "=", "util_data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.PairSupConBert.__init__": [[9, 25], ["transformers.BertPreTrainedModel.__init__", "print", "transformers.BertModel", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "num_classes", "=", "2", ",", "feat_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "PairSupConBert", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "print", "(", "\"\\n *****Initializing PairSupCon-Bert*****\"", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "emb_size", "=", "self", ".", "bert", ".", "config", ".", "hidden_size", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "\n", "# Sentence-Bert style input for training the pairwise classification head", "\n", "self", ".", "classify_head", "=", "nn", ".", "Linear", "(", "3", "*", "self", ".", "emb_size", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "contrast_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "emb_size", ",", "self", ".", "emb_size", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "emb_size", ",", "self", ".", "feat_dim", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.PairSupConBert.forward": [[27, 55], ["Transformers.PairSupConBert.get_mean_embeddings", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "Transformers.PairSupConBert.bert.forward", "Transformers.PairSupConBert.bert.forward", "attention_mask_1.unsqueeze.unsqueeze.unsqueeze", "attention_mask_2.unsqueeze.unsqueeze.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "Transformers.PairSupConBert.classify_pred", "Transformers.PairSupConBert.contrast_logits", "Transformers.PairSupConBert.classify_pred", "Transformers.PairSupConBert.contrast_logits"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.get_mean_embeddings", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.PairwiseRankingLoss.forward", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.PairwiseRankingLoss.forward", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.PairSupConBert.classify_pred", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.contrast_logits", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.PairSupConBert.classify_pred", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.contrast_logits"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "task_type", ")", ":", "\n", "\n", "        ", "if", "task_type", "==", "\"evaluate\"", ":", "\n", "            ", "return", "self", ".", "get_mean_embeddings", "(", "input_ids", ",", "attention_mask", ")", "\n", "", "else", ":", "\n", "# split inputs w.r.t sentence_1 and sentence_2", "\n", "            ", "input_ids_1", ",", "input_ids_2", "=", "torch", ".", "unbind", "(", "input_ids", ",", "dim", "=", "1", ")", "\n", "attention_mask_1", ",", "attention_mask_2", "=", "torch", ".", "unbind", "(", "attention_mask", ",", "dim", "=", "1", ")", "\n", "\n", "# get the mean embeddings", "\n", "bert_output_1", "=", "self", ".", "bert", ".", "forward", "(", "input_ids", "=", "input_ids_1", ",", "attention_mask", "=", "attention_mask_1", ")", "\n", "bert_output_2", "=", "self", ".", "bert", ".", "forward", "(", "input_ids", "=", "input_ids_2", ",", "attention_mask", "=", "attention_mask_2", ")", "\n", "attention_mask_1", "=", "attention_mask_1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "attention_mask_2", "=", "attention_mask_2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "mean_output_1", "=", "torch", ".", "sum", "(", "bert_output_1", "[", "0", "]", "*", "attention_mask_1", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "attention_mask_1", ",", "dim", "=", "1", ")", "\n", "mean_output_2", "=", "torch", ".", "sum", "(", "bert_output_2", "[", "0", "]", "*", "attention_mask_2", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "attention_mask_2", ",", "dim", "=", "1", ")", "\n", "\n", "if", "task_type", "==", "\"classification\"", ":", "\n", "                ", "class_pred", "=", "self", ".", "classify_pred", "(", "mean_output_1", ",", "mean_output_2", ")", "\n", "return", "class_pred", "\n", "", "elif", "task_type", "==", "\"contrastive\"", ":", "\n", "                ", "cnst_feat1", ",", "cnst_feat2", "=", "self", ".", "contrast_logits", "(", "mean_output_1", ",", "mean_output_2", ")", "\n", "return", "cnst_feat1", ",", "cnst_feat2", "\n", "", "else", ":", "\n", "# PairSupCon Objective", "\n", "                ", "class_pred", "=", "self", ".", "classify_pred", "(", "mean_output_1", ",", "mean_output_2", ")", "\n", "cnst_feat1", ",", "cnst_feat2", "=", "self", ".", "contrast_logits", "(", "mean_output_1", ",", "mean_output_2", ")", "\n", "return", "class_pred", ",", "cnst_feat1", ",", "cnst_feat2", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.PairSupConBert.contrast_logits": [[57, 61], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "Transformers.PairSupConBert.contrast_head", "Transformers.PairSupConBert.contrast_head"], "methods", ["None"], ["", "", "", "def", "contrast_logits", "(", "self", ",", "embd1", ",", "embd2", ")", ":", "\n", "        ", "feat1", "=", "F", ".", "normalize", "(", "self", ".", "contrast_head", "(", "embd1", ")", ",", "dim", "=", "1", ")", "\n", "feat2", "=", "F", ".", "normalize", "(", "self", ".", "contrast_head", "(", "embd2", ")", ",", "dim", "=", "1", ")", "\n", "return", "feat1", ",", "feat2", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.PairSupConBert.classify_pred": [[63, 66], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Transformers.PairSupConBert.classify_head", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "classify_pred", "(", "self", ",", "embd1", ",", "embd2", ")", ":", "\n", "        ", "embeddings", "=", "torch", ".", "cat", "(", "[", "embd1", ",", "embd2", ",", "torch", ".", "abs", "(", "embd1", "-", "embd2", ")", "]", ",", "1", ")", "\n", "return", "self", ".", "classify_head", "(", "embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.PairSupConBert.get_mean_embeddings": [[68, 73], ["Transformers.PairSupConBert.bert.forward", "attention_mask.unsqueeze.unsqueeze.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.PairwiseRankingLoss.forward"], ["", "def", "get_mean_embeddings", "(", "self", ",", "input_ids", ",", "attention_mask", ")", ":", "\n", "        ", "bert_output", "=", "self", ".", "bert", ".", "forward", "(", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "attention_mask", ")", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "embeddings", "=", "torch", ".", "sum", "(", "bert_output", "[", "0", "]", "*", "attention_mask", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "attention_mask", ",", "dim", "=", "1", ")", "\n", "return", "embeddings", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_RoBERTa.__init__": [[8, 19], ["transformers.RobertaPreTrainedModel.__init__", "print", "transformers.RobertaModel", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["class", "PairSupConBert", "(", "BertPreTrainedModel", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ",", "num_classes", "=", "2", ",", "feat_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "PairSupConBert", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "print", "(", "\"\\n *****Initializing PairSupCon-Bert*****\"", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "emb_size", "=", "self", ".", "bert", ".", "config", ".", "hidden_size", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "\n", "# Sentence-Bert style input for training the pairwise classification head", "\n", "self", ".", "classify_head", "=", "nn", ".", "Linear", "(", "3", "*", "self", ".", "emb_size", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_RoBERTa.forward": [[20, 40], ["Transformers.VaSCL_RoBERTa.get_mean_embeddings", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "Transformers.VaSCL_RoBERTa.get_mean_embeddings", "Transformers.VaSCL_RoBERTa.get_mean_embeddings", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.mm.masked_select().view", "torch.mm.masked_select().view", "torch.mm.masked_select().view", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "Transformers.VaSCL_RoBERTa.contrast_logits", "Transformers.VaSCL_RoBERTa.t().contiguous", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.mm.masked_select", "torch.mm.masked_select", "torch.mm.masked_select", "Transformers.VaSCL_RoBERTa.t"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.get_mean_embeddings", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.get_mean_embeddings", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.get_mean_embeddings", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.contrast_logits"], ["\n", "self", ".", "contrast_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "emb_size", ",", "self", ".", "emb_size", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "emb_size", ",", "self", ".", "feat_dim", ",", "bias", "=", "False", ")", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "task_type", ")", ":", "\n", "\n", "        ", "if", "task_type", "==", "\"evaluate\"", ":", "\n", "            ", "return", "self", ".", "get_mean_embeddings", "(", "input_ids", ",", "attention_mask", ")", "\n", "", "else", ":", "\n", "# split inputs w.r.t sentence_1 and sentence_2", "\n", "            ", "input_ids_1", ",", "input_ids_2", "=", "torch", ".", "unbind", "(", "input_ids", ",", "dim", "=", "1", ")", "\n", "attention_mask_1", ",", "attention_mask_2", "=", "torch", ".", "unbind", "(", "attention_mask", ",", "dim", "=", "1", ")", "\n", "\n", "# get the mean embeddings", "\n", "bert_output_1", "=", "self", ".", "bert", ".", "forward", "(", "input_ids", "=", "input_ids_1", ",", "attention_mask", "=", "attention_mask_1", ")", "\n", "bert_output_2", "=", "self", ".", "bert", ".", "forward", "(", "input_ids", "=", "input_ids_2", ",", "attention_mask", "=", "attention_mask_2", ")", "\n", "attention_mask_1", "=", "attention_mask_1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "attention_mask_2", "=", "attention_mask_2", ".", "unsqueeze", "(", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_RoBERTa.get_mean_embeddings": [[41, 46], ["Transformers.VaSCL_RoBERTa.roberta.forward", "attention_mask.unsqueeze.unsqueeze.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.PairwiseRankingLoss.forward"], ["mean_output_1", "=", "torch", ".", "sum", "(", "bert_output_1", "[", "0", "]", "*", "attention_mask_1", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "attention_mask_1", ",", "dim", "=", "1", ")", "\n", "mean_output_2", "=", "torch", ".", "sum", "(", "bert_output_2", "[", "0", "]", "*", "attention_mask_2", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "attention_mask_2", ",", "dim", "=", "1", ")", "\n", "\n", "if", "task_type", "==", "\"classification\"", ":", "\n", "                ", "class_pred", "=", "self", ".", "classify_pred", "(", "mean_output_1", ",", "mean_output_2", ")", "\n", "return", "class_pred", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_RoBERTa.contrast_logits": [[47, 54], ["torch.normalize", "torch.normalize", "torch.normalize", "Transformers.VaSCL_RoBERTa.contrast_head", "torch.normalize", "torch.normalize", "torch.normalize", "Transformers.VaSCL_RoBERTa.contrast_head"], "methods", ["None"], ["", "elif", "task_type", "==", "\"contrastive\"", ":", "\n", "                ", "cnst_feat1", ",", "cnst_feat2", "=", "self", ".", "contrast_logits", "(", "mean_output_1", ",", "mean_output_2", ")", "\n", "return", "cnst_feat1", ",", "cnst_feat2", "\n", "", "else", ":", "\n", "# PairSupCon Objective", "\n", "                ", "class_pred", "=", "self", ".", "classify_pred", "(", "mean_output_1", ",", "mean_output_2", ")", "\n", "cnst_feat1", ",", "cnst_feat2", "=", "self", ".", "contrast_logits", "(", "mean_output_1", ",", "mean_output_2", ")", "\n", "return", "class_pred", ",", "cnst_feat1", ",", "cnst_feat2", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.__init__": [[57, 68], ["transformers.BertPreTrainedModel.__init__", "print", "transformers.BertModel", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["", "", "", "def", "contrast_logits", "(", "self", ",", "embd1", ",", "embd2", ")", ":", "\n", "        ", "feat1", "=", "F", ".", "normalize", "(", "self", ".", "contrast_head", "(", "embd1", ")", ",", "dim", "=", "1", ")", "\n", "feat2", "=", "F", ".", "normalize", "(", "self", ".", "contrast_head", "(", "embd2", ")", ",", "dim", "=", "1", ")", "\n", "return", "feat1", ",", "feat2", "\n", "\n", "\n", "", "def", "classify_pred", "(", "self", ",", "embd1", ",", "embd2", ")", ":", "\n", "        ", "embeddings", "=", "torch", ".", "cat", "(", "[", "embd1", ",", "embd2", ",", "torch", ".", "abs", "(", "embd1", "-", "embd2", ")", "]", ",", "1", ")", "\n", "return", "self", ".", "classify_head", "(", "embeddings", ")", "\n", "\n", "\n", "", "def", "get_mean_embeddings", "(", "self", ",", "input_ids", ",", "attention_mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.forward": [[69, 88], ["Transformers.VaSCL_BERT.get_mean_embeddings", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "Transformers.VaSCL_BERT.get_mean_embeddings", "Transformers.VaSCL_BERT.get_mean_embeddings", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.mm.masked_select().view", "torch.mm.masked_select().view", "torch.mm.masked_select().view", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "Transformers.VaSCL_BERT.contrast_logits", "Transformers.VaSCL_BERT.t().contiguous", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.mm.masked_select", "torch.mm.masked_select", "torch.mm.masked_select", "Transformers.VaSCL_BERT.t"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.get_mean_embeddings", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.get_mean_embeddings", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.get_mean_embeddings", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.contrast_logits"], ["        ", "bert_output", "=", "self", ".", "bert", ".", "forward", "(", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "attention_mask", ")", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "embeddings", "=", "torch", ".", "sum", "(", "bert_output", "[", "0", "]", "*", "attention_mask", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "attention_mask", ",", "dim", "=", "1", ")", "\n", "return", "embeddings", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.get_mean_embeddings": [[89, 94], ["Transformers.VaSCL_BERT.bert.forward", "attention_mask.unsqueeze.unsqueeze.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.PairwiseRankingLoss.forward"], []], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.contrast_logits": [[95, 102], ["torch.normalize", "torch.normalize", "torch.normalize", "Transformers.VaSCL_BERT.contrast_head", "torch.normalize", "torch.normalize", "torch.normalize", "Transformers.VaSCL_BERT.contrast_head"], "methods", ["None"], []], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.main.run": [[18, 45], ["utils.utils.setup_path", "utils.utils.set_global_random_seed", "torch.device", "torch.device", "print", "dataloader.dataloader.pair_loader", "utils.optimizer.get_bert_config_tokenizer", "utils.optimizer.get_optimizer", "torch.DataParallel", "VaSCL_BERT.from_pretrained.to", "training.VaSCL_Trainer", "training.VaSCL_Trainer.train", "models.Transformers.VaSCL_RoBERTa.from_pretrained", "print", "models.Transformers.VaSCL_BERT.from_pretrained", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.utils.setup_path", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.configs.utils.set_global_random_seed", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.dataloader.dataloader.pair_loader", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.optimizer.get_bert_config_tokenizer", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.utils.get_optimizer", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train"], ["def", "run", "(", "args", ")", ":", "\n", "    ", "args", ".", "resPath", ",", "args", ".", "tensorboard", "=", "setup_path", "(", "args", ")", "\n", "set_global_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "device_id", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "\"\\t {} GPUs available to use!\"", ".", "format", "(", "device_id", ")", ")", "\n", "\n", "# dataloader", "\n", "train_loader", "=", "pair_loader", "(", "args", ")", "\n", "\n", "config", ",", "tokenizer", "=", "get_bert_config_tokenizer", "(", "args", ".", "bert", ")", "\n", "model", "=", "PairSupConBert", ".", "from_pretrained", "(", "MODEL_CLASS", "[", "args", ".", "bert", "]", ")", "\n", "optimizer", "=", "get_optimizer", "(", "model", ",", "args", ")", "\n", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "# set up the trainer", "\n", "trainer", "=", "PairSupConTrainer", "(", "model", ",", "tokenizer", ",", "optimizer", ",", "train_loader", ",", "args", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "return", "None", "\n", "\n", "", "def", "get_args", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--training_instance'", ",", "type", "=", "str", ",", "default", "=", "'local'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpuid'", ",", "nargs", "=", "\"+\"", ",", "type", "=", "int", ",", "default", "=", "[", "0", "]", ",", "help", "=", "\"The list of gpuid, ex:--gpuid 3 1. Negative value means cpu-only\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"\"", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.main.get_args": [[47, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--logging_step'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dev_set'", ",", "default", "=", "\"None\"", ",", "help", "=", "\"use sts-b as dev set or not\"", ",", "choices", "=", "[", "\"None\"", ",", "\"sts\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--path_sts_data'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"use sts-b as dev set\"", ")", "\n", "parser", ".", "add_argument", "(", "'--s3_ckptdir'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"s3path for ckpts\"", ")", "\n", "# Dataset", "\n", "parser", ".", "add_argument", "(", "'--datapath'", ",", "type", "=", "str", ",", "default", "=", "'../datasets/NLI/'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataname'", ",", "type", "=", "str", ",", "default", "=", "'nli_pairsupcon.csv'", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--text'", ",", "type", "=", "str", ",", "default", "=", "'text'", ")", "\n", "parser", ".", "add_argument", "(", "'--pairsimi'", ",", "type", "=", "str", ",", "default", "=", "'pairsimi'", ")", "\n", "# Training parameters", "\n", "parser", ".", "add_argument", "(", "'--max_length'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-06", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_scale'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'--max_iter'", ",", "type", "=", "int", ",", "default", "=", "100000000", ")", "\n", "# Contrastive learning", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'pairsupcon'", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bert'", ",", "type", "=", "str", ",", "default", "=", "'bertbase'", ",", "choices", "=", "[", "\"bertbase\"", ",", "\"bertlarge\"", "]", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--contrast_type'", ",", "type", "=", "str", ",", "default", "=", "\"HardNeg\"", ")", "\n", "parser", ".", "add_argument", "(", "'--feat_dim'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "\"dimension of the projected features for instance discrimination loss\"", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "help", "=", "\"temperature required by contrastive loss\"", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "\" \"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "args", ".", "use_gpu", "=", "args", ".", "gpuid", "[", "0", "]", ">=", "0", "\n", "args", ".", "resPath", "=", "None", "\n", "args", ".", "tensorboard", "=", "None", "\n", "return", "args", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "args", "=", "get_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "\n", "\n", "if", "args", ".", "training_instance", "==", "\"sagemaker\"", ":", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.__init__": [[18, 39], ["torch.Module.__init__", "learners.contrastive_utils.ContrastiveLoss().cuda", "learners.contrastive_utils.VaSCL_NUniDir().cuda", "learners.contrastive_utils.VaSCL_NBiDir().cuda", "learners.vat_utils.VaSCL_Pturb().cuda", "print", "learners.contrastive_utils.ContrastiveLoss", "learners.contrastive_utils.VaSCL_NUniDir", "learners.contrastive_utils.VaSCL_NBiDir", "learners.vat_utils.VaSCL_Pturb"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "tokenizer", ",", "optimizer", ",", "train_loader", ",", "args", ")", ":", "\n", "        ", "super", "(", "PairSupConTrainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "beta", "=", "self", ".", "args", ".", "beta", "\n", "self", ".", "task_type", "=", "self", ".", "args", ".", "mode", "\n", "self", ".", "gstep", "=", "0", "\n", "\n", "# Only need this if you use sts-b as the dev set", "\n", "self", ".", "dev_objective", "=", "-", "1", "\n", "\n", "# Pairwise classificaiton loss", "\n", "self", ".", "classify_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "# Hard negative sampling based instance-discrimination loss", "\n", "self", ".", "inst_disc_loss", "=", "HardConLoss", "(", "temperature", "=", "self", ".", "args", ".", "temperature", ",", "contrast_type", "=", "self", ".", "args", ".", "contrast_type", ")", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "\"\\n ******Initializing the PairSupCon Trainer with {} sampling****** \\n\"", ".", "format", "(", "self", ".", "args", ".", "contrast_type", ")", ")", "\n", "\n", "", "def", "get_batch_token", "(", "self", ",", "text", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.get_batch_token": [[41, 50], ["training.VaSCL_Trainer.tokenizer.batch_encode_plus"], "methods", ["None"], ["text", ",", "\n", "max_length", "=", "self", ".", "args", ".", "max_length", ",", "\n", "return_tensors", "=", "'pt'", ",", "\n", "padding", "=", "'max_length'", ",", "\n", "truncation", "=", "True", "\n", ")", "\n", "return", "token_feat", "\n", "\n", "\n", "", "def", "prepare_pairwise_input", "(", "self", ",", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.prepare_pairwise_input": [[52, 60], ["training.VaSCL_Trainer.get_batch_token", "training.VaSCL_Trainer.get_batch_token", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "feat1[].unsqueeze", "feat2[].unsqueeze", "feat1[].unsqueeze", "feat2[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.get_batch_token", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.get_batch_token", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["feat1", "=", "self", ".", "get_batch_token", "(", "text1", ")", "\n", "feat2", "=", "self", ".", "get_batch_token", "(", "text2", ")", "\n", "\n", "input_ids", "=", "torch", ".", "cat", "(", "[", "feat1", "[", "'input_ids'", "]", ".", "unsqueeze", "(", "1", ")", ",", "feat2", "[", "'input_ids'", "]", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "attention_mask", "=", "torch", ".", "cat", "(", "[", "feat1", "[", "'attention_mask'", "]", ".", "unsqueeze", "(", "1", ")", ",", "feat2", "[", "'attention_mask'", "]", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "input_ids", ".", "cuda", "(", ")", ",", "attention_mask", ".", "cuda", "(", ")", ",", "pairsimi", ".", "detach", "(", ")", "\n", "\n", "\n", "", "def", "save_model", "(", "self", ",", "epoch", ",", "best_dev", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.save_model": [[62, 71], ["training.VaSCL_Trainer.model.module.save_pretrained", "training.VaSCL_Trainer.tokenizer.save_pretrained", "training.VaSCL_Trainer.model.module.save_pretrained", "training.VaSCL_Trainer.tokenizer.save_pretrained", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["# save the ckpt according to the performance on sts-b dev set", "\n", "            ", "self", ".", "model", ".", "module", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "resPath", ",", "'pscbert_stsdev'", ")", ")", "\n", "self", ".", "tokenizer", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "resPath", ",", "'pscbert_stsdev'", ")", ")", "\n", "", "else", ":", "\n", "# save the ckpt per epoch", "\n", "            ", "self", ".", "model", ".", "module", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "resPath", ",", "f'pscbert_epoch_{epoch}'", ")", ")", "\n", "self", ".", "tokenizer", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "resPath", ",", "f'pscbert_epoch_{epoch}'", ")", ")", "\n", "\n", "", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "all_iter", "=", "self", ".", "args", ".", "epochs", "*", "len", "(", "self", ".", "train_loader", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train": [[73, 107], ["print", "training.VaSCL_Trainer.model.train", "range", "len", "enumerate", "training.VaSCL_Trainer.save_model", "len", "training.VaSCL_Trainer.prepare_pairwise_input", "training.VaSCL_Trainer.train_step", "utils.utils.statistics_log", "training.VaSCL_Trainer.model.eval", "training.VaSCL_Trainer.eval_stsdev", "training.VaSCL_Trainer.update", "training.VaSCL_Trainer.model.train", "training.VaSCL_Trainer.save_model"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.save_model", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.prepare_pairwise_input", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train_step", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.utils.utils.statistics_log", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.eval_stsdev", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.AverageMeter.update", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.save_model"], ["\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "epochs", ")", ":", "\n", "            ", "for", "j", ",", "batch", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "\n", "                ", "input_ids", ",", "attention_mask", ",", "pairsimi", "=", "self", ".", "prepare_pairwise_input", "(", "batch", ")", "\n", "\n", "losses", "=", "self", ".", "train_step", "(", "input_ids", ",", "attention_mask", ",", "pairsimi", ")", "\n", "\n", "if", "(", "self", ".", "gstep", "%", "self", ".", "args", ".", "logging_step", "==", "0", ")", "or", "(", "self", ".", "gstep", "==", "all_iter", ")", "or", "(", "self", ".", "gstep", "==", "self", ".", "args", ".", "max_iter", ")", ":", "\n", "\n", "                    ", "if", "self", ".", "args", ".", "dev_set", "==", "\"sts\"", ":", "# testing the effectiveness of stsb as dev set, default False", "\n", "                        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "sts_metrics", "=", "self", ".", "eval_stsdev", "(", ")", "\n", "losses", ".", "update", "(", "sts_metrics", ")", "\n", "\n", "if", "sts_metrics", "[", "\"eval_stsb_spearman\"", "]", ">", "self", ".", "dev_objective", ":", "\n", "                            ", "self", ".", "save_model", "(", "epoch", ",", "best_dev", "=", "True", ")", "\n", "self", ".", "dev_objective", "=", "sts_metrics", "[", "\"eval_stsb_spearman\"", "]", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "", "statistics_log", "(", "self", ".", "args", ".", "tensorboard", ",", "losses", "=", "losses", ",", "global_step", "=", "self", ".", "gstep", ")", "\n", "\n", "", "elif", "self", ".", "gstep", ">", "self", ".", "args", ".", "max_iter", ":", "\n", "                    ", "break", "\n", "\n", "", "self", ".", "gstep", "+=", "1", "\n", "", "self", ".", "save_model", "(", "epoch", ",", "best_dev", "=", "False", ")", "\n", "", "return", "None", "\n", "\n", "\n", "", "def", "train_step", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "pairsimi", ")", ":", "\n", "\n", "        ", "if", "self", ".", "task_type", "==", "\"classification\"", ":", "\n", "            ", "classify_pred", "=", "self", ".", "model", "(", "input_ids", ",", "attention_mask", ",", "task_type", "=", "\"classification\"", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train_step": [[109, 126], ["training.VaSCL_Trainer.model", "training.VaSCL_Trainer.paircon_loss", "loss.item", "loss.backward", "training.VaSCL_Trainer.optimizer.step", "training.VaSCL_Trainer.optimizer.zero_grad", "training.VaSCL_Trainer.perturb_embd", "training.VaSCL_Trainer.update", "embeddings.detach"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.AverageMeter.update"], ["losses", "=", "{", "\"classification_loss\"", ":", "loss", "}", "\n", "\n", "", "elif", "self", ".", "task_type", "==", "\"contrastive\"", ":", "\n", "            ", "feat1", ",", "feat2", "=", "self", ".", "model", "(", "input_ids", ",", "attention_mask", ",", "task_type", "=", "'contrastive'", ")", "\n", "losses", "=", "self", ".", "inst_disc_loss", "(", "feat1", ",", "feat2", ",", "pairsimi", ")", "\n", "loss", "=", "losses", "[", "\"instdisc_loss\"", "]", "\n", "\n", "", "elif", "self", ".", "task_type", "==", "\"pairsupcon\"", ":", "\n", "            ", "classify_pred", ",", "feat1", ",", "feat2", "=", "self", ".", "model", "(", "input_ids", ",", "attention_mask", ",", "task_type", "=", "'pairsupcon'", ")", "\n", "losses", "=", "self", ".", "inst_disc_loss", "(", "feat1", ",", "feat2", ",", "pairsimi", ")", "\n", "loss", "=", "self", ".", "beta", "*", "losses", "[", "\"instdisc_loss\"", "]", "\n", "\n", "classify_loss", "=", "self", ".", "classify_loss", "(", "classify_pred", ",", "pairsimi", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "loss", "+=", "classify_loss", "\n", "losses", "[", "\"classification_loss\"", "]", "=", "classify_loss", "\n", "losses", "[", "\"loss\"", "]", "=", "loss", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Please specify the loss type!\"", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.eval_stsdev": [[128, 165], ["torch.device", "torch.device", "torch.device", "torch.device", "senteval.engine.SE", "senteval.engine.SE.eval", "training.VaSCL_Trainer.tokenizer.batch_encode_plus", "features[].to", "features[].to", "training.VaSCL_Trainer.detach().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "training.VaSCL_Trainer.model", "training.VaSCL_Trainer.detach().cpu", "training.VaSCL_Trainer.detach"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval"], ["", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "return", "losses", "\n", "\n", "\n", "", "def", "eval_stsdev", "(", "self", ")", ":", "\n", "\n", "        ", "def", "prepare", "(", "params", ",", "samples", ")", ":", "\n", "            ", "return", "\n", "\n", "", "def", "batcher", "(", "params", ",", "batch", ")", ":", "\n", "            ", "sentences", "=", "[", "' '", ".", "join", "(", "s", ")", "for", "s", "in", "batch", "]", "\n", "\n", "features", "=", "self", ".", "tokenizer", ".", "batch_encode_plus", "(", "\n", "sentences", ",", "\n", "max_length", "=", "params", "[", "'max_length'", "]", ",", "\n", "return_tensors", "=", "'pt'", ",", "\n", "padding", "=", "True", ",", "\n", "truncation", "=", "True", "\n", ")", "\n", "input_ids", "=", "features", "[", "'input_ids'", "]", ".", "to", "(", "params", "[", "'device'", "]", ")", "\n", "attention_mask", "=", "features", "[", "'attention_mask'", "]", ".", "to", "(", "params", "[", "'device'", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "embeddings", "=", "self", ".", "model", "(", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "attention_mask", ",", "task_type", "=", "\"evaluate\"", ")", "\n", "", "return", "embeddings", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# define senteval params", "\n", "", "params_senteval", "=", "{", "'task_path'", ":", "self", ".", "args", ".", "path_sts_data", ",", "'usepytorch'", ":", "True", ",", "'kfold'", ":", "5", "}", "\n", "params_senteval", "[", "'classifier'", "]", "=", "{", "'nhid'", ":", "0", ",", "'optim'", ":", "'rmsprop'", ",", "'batch_size'", ":", "64", ",", "\n", "'tenacity'", ":", "3", ",", "'epoch_size'", ":", "2", "}", "\n", "params_senteval", "[", "'max_length'", "]", "=", "None", "\n", "params_senteval", "[", "'device'", "]", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "0", ")", ")", "\n", "\n", "se", "=", "senteval", ".", "engine", ".", "SE", "(", "params_senteval", ",", "batcher", ",", "prepare", ")", "\n", "transfer_tasks", "=", "[", "'SICKRelatedness'", ",", "'STSBenchmark'", "]", "\n", "results", "=", "se", ".", "eval", "(", "transfer_tasks", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.contrastive_utils.ContrastiveLoss.__init__": [[6, 11], ["torch.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["\n", "class", "HardConLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "temperature", "=", "0.07", ",", "contrast_type", "=", "\"HardNeg\"", ")", ":", "\n", "        ", "super", "(", "HardConLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "contrast_type", "=", "contrast_type", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.contrastive_utils.ContrastiveLoss.forward": [[12, 28], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "mask.repeat.repeat.repeat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "neg.masked_select().view.masked_select().view.masked_select().view", "neg.masked_select().view.masked_select().view.sum", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "neg.masked_select().view.masked_select().view.masked_select", "torch.cat.t().contiguous", "torch.cat.t().contiguous", "torch.log", "torch.log", "torch.log", "torch.log", "torch.cat.t", "torch.cat.t"], "methods", ["None"], ["self", ".", "eps", "=", "1e-08", "\n", "print", "(", "\"-----Contrastive Learning Type: \\t\"", ",", "contrast_type", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "features_1", ",", "features_2", ",", "pairsimi", ")", ":", "\n", "        ", "device", "=", "(", "torch", ".", "device", "(", "'cuda'", ")", "if", "features_1", ".", "is_cuda", "else", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "batch_size", "=", "features_1", ".", "shape", "[", "0", "]", "\n", "\n", "features", "=", "torch", ".", "cat", "(", "[", "features_1", ",", "features_2", "]", ",", "dim", "=", "0", ")", "\n", "mask", "=", "torch", ".", "eye", "(", "batch_size", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "to", "(", "device", ")", "\n", "mask", "=", "mask", ".", "repeat", "(", "2", ",", "2", ")", "\n", "mask", "=", "~", "mask", "\n", "\n", "pos", "=", "torch", ".", "exp", "(", "torch", ".", "sum", "(", "features_1", "*", "features_2", ",", "dim", "=", "-", "1", ")", "/", "self", ".", "temperature", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "[", "pos", ",", "pos", "]", ",", "dim", "=", "0", ")", "\n", "neg", "=", "torch", ".", "exp", "(", "torch", ".", "mm", "(", "features", ",", "features", ".", "t", "(", ")", ".", "contiguous", "(", ")", ")", "/", "self", ".", "temperature", ")", "\n", "neg", "=", "neg", ".", "masked_select", "(", "mask", ")", ".", "view", "(", "2", "*", "batch_size", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.contrastive_utils.VaSCL_NUniDir.__init__": [[31, 35], ["torch.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["posmask", "=", "posmask", ".", "type", "(", "torch", ".", "int32", ")", "\n", "\n", "if", "self", ".", "contrast_type", "==", "\"Orig\"", ":", "\n", "            ", "Ng", "=", "neg", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "loss_pos", "=", "(", "-", "posmask", "*", "torch", ".", "log", "(", "pos", "/", "(", "Ng", "+", "pos", ")", ")", ")", ".", "sum", "(", ")", "/", "posmask", ".", "sum", "(", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.contrastive_utils.VaSCL_NUniDir.forward": [[36, 53], ["torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "neg.masked_select().view.masked_select().view.masked_select().view", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "neg.masked_select().view.masked_select().view.masked_select().view", "neg.masked_select().view.masked_select().view.sum", "torch.zeros_like().to.scatter_", "torch.zeros_like().to.scatter_", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "neg.masked_select().view.masked_select().view.masked_select", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "neg.masked_select().view.masked_select().view.masked_select", "features_1.t().contiguous", "torch.log", "torch.log", "torch.log", "torch.log", "features_1.t"], "methods", ["None"], ["return", "{", "\"instdisc_loss\"", ":", "loss_pos", "}", "\n", "\n", "", "elif", "self", ".", "contrast_type", "==", "\"HardNeg\"", ":", "\n", "            ", "negimp", "=", "neg", ".", "log", "(", ")", ".", "exp", "(", ")", "\n", "Ng", "=", "(", "negimp", "*", "neg", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "negimp", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss_pos", "=", "(", "-", "posmask", "*", "torch", ".", "log", "(", "pos", "/", "(", "Ng", "+", "pos", ")", ")", ")", ".", "sum", "(", ")", "/", "posmask", ".", "sum", "(", ")", "\n", "return", "{", "\"instdisc_loss\"", ":", "loss_pos", "}", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Please specify the contrastive loss, Orig vs. HardNeg.\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.contrastive_utils.VaSCL_NBiDir.__init__": [[56, 60], ["torch.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], []], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.contrastive_utils.VaSCL_NBiDir.forward": [[61, 82], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "mask.repeat.repeat.repeat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "neg.masked_select().view.masked_select().view.masked_select().view", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "hard_mask.repeat.repeat.repeat", "neg.masked_select().view.masked_select().view.masked_select().view", "neg.masked_select().view.masked_select().view.sum", "hard_mask.repeat.repeat.scatter_", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "neg.masked_select().view.masked_select().view.masked_select", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "neg.masked_select().view.masked_select().view.masked_select", "torch.cat.t().contiguous", "torch.cat.t().contiguous", "int", "int", "torch.log", "torch.log", "torch.log", "torch.log", "torch.cat.t", "torch.cat.t"], "methods", ["None"], []], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.vat_utils.VaSCL_Pturb.__init__": [[34, 49], ["torch.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "xi", "=", "0.1", ",", "eps", "=", "1", ",", "ip", "=", "1", ",", "uni_criterion", "=", "None", ",", "bi_criterion", "=", "None", ")", ":", "\n", "        ", "\"\"\"VaSCL_Pturb on Transformer embeddings\n            :param xi: hyperparameter of VaSCL_Pturb (default: 10.0)\n            :param eps: hyperparameter of VaSCL_Pturb (default: 1.0)\n            :param ip: iteration times of computing adv noise (default: 1)\n        \"\"\"", "\n", "super", "(", "VaSCL_Pturb", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "xi", "=", "xi", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "ip", "=", "ip", "\n", "self", ".", "delta", "=", "1e-08", "\n", "\n", "self", ".", "uni_criterion", "=", "uni_criterion", "\n", "self", ".", "bi_criterion", "=", "bi_criterion", "\n", "print", "(", "\"\\n VaSCL_Pturb on embeddings, xi:{}, eps:{} \\n\"", ".", "format", "(", "xi", ",", "eps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.vat_utils.VaSCL_Pturb.forward": [[50, 75], ["torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "vat_utils._l2_normalize", "model.module.contrast_logits", "vat_utils.VaSCL_Pturb.bi_criterion", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.module.contrast_logits", "vat_utils._disable_tracking_bn_stats", "range", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "_l2_normalize.requires_grad_", "model.module.contrast_logits", "vat_utils.VaSCL_Pturb.uni_criterion", "adv_distance.backward", "vat_utils._l2_normalize", "model.zero_grad", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.vat_utils._l2_normalize", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.contrast_logits", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.contrast_logits", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.vat_utils._disable_tracking_bn_stats", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.models.Transformers.VaSCL_BERT.contrast_logits", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.vat_utils._l2_normalize"], ["", "def", "forward", "(", "self", ",", "model", ",", "inputs", ",", "hard_indices", ")", ":", "\n", "#         print(inputs.size(), \"\\n\", _emb_norm(inputs)[:5])", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cnst", "=", "model", ".", "module", ".", "contrast_logits", "(", "inputs", ")", "\n", "\n", "# prepare random unit tensor", "\n", "", "d", "=", "torch", ".", "rand", "(", "inputs", ".", "shape", ")", ".", "sub", "(", "0.5", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "d", "=", "_l2_normalize", "(", "d", ")", "\n", "\n", "with", "_disable_tracking_bn_stats", "(", "model", ")", ":", "\n", "# calc adversarial direction", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "ip", ")", ":", "\n", "                ", "d", ".", "requires_grad_", "(", ")", "\n", "cnst_hat", "=", "model", ".", "module", ".", "contrast_logits", "(", "inputs", "+", "self", ".", "xi", "*", "d", ")", "\n", "\n", "adv_cnst", "=", "self", ".", "uni_criterion", "(", "cnst", ",", "cnst_hat", ",", "hard_indices", ")", "\n", "adv_distance", "=", "adv_cnst", "[", "'lds_loss'", "]", "\n", "\n", "adv_distance", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "d", "=", "_l2_normalize", "(", "d", ".", "grad", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "\n", "", "", "cnst_hat", "=", "model", ".", "module", ".", "contrast_logits", "(", "inputs", "+", "self", ".", "eps", "*", "d", ")", "\n", "adv_cnst", "=", "self", ".", "bi_criterion", "(", "cnst", ",", "cnst_hat", ",", "hard_indices", ")", "\n", "return", "adv_cnst", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.vat_utils._disable_tracking_bn_stats": [[7, 15], ["model.apply", "model.apply", "hasattr"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "_disable_tracking_bn_stats", "(", "model", ")", ":", "\n", "    ", "def", "switch_attr", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'track_running_stats'", ")", ":", "\n", "            ", "m", ".", "track_running_stats", "^=", "True", "\n", "", "", "model", ".", "apply", "(", "switch_attr", ")", "\n", "yield", "\n", "model", ".", "apply", "(", "switch_attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.vat_utils._l2_normalize": [[16, 24], ["d.view", "attention_mask.unsqueeze.unsqueeze", "torch.norm", "torch.norm", "torch.norm", "range", "d.dim"], "function", ["None"], ["", "def", "_l2_normalize", "(", "d", ",", "attention_mask", "=", "None", ")", ":", "\n", "    ", "if", "attention_mask", "!=", "None", ":", "\n", "        ", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "d", "*=", "attention_mask", "\n", "", "d_reshaped", "=", "d", ".", "view", "(", "d", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "*", "(", "1", "for", "_", "in", "range", "(", "d", ".", "dim", "(", ")", "-", "2", ")", ")", ")", "\n", "d", "/=", "torch", ".", "norm", "(", "d_reshaped", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", "\n", "#     print(\"_l2_normalize, BEFORE:{} \\t AFTER:{}\".format(d.size(), d_reshaped.size()))", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.learners.vat_utils._emb_norm": [[25, 31], ["emb.view", "torch.norm", "torch.norm", "torch.norm", "range", "emb.dim"], "function", ["None"], ["", "def", "_emb_norm", "(", "emb", ")", ":", "\n", "    ", "e_reshaped", "=", "emb", ".", "view", "(", "emb", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "*", "(", "1", "for", "_", "in", "range", "(", "emb", ".", "dim", "(", ")", "-", "2", ")", ")", ")", "\n", "enorm", "=", "torch", ".", "norm", "(", "e_reshaped", ",", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "+", "1e-8", "\n", "#     print(\"BEFORE:{} \\t AFTER:{}\".format(emb.size(), e_reshaped.size()))", "\n", "#     print(\"enorm:{}, {}\".format(enorm.size(), enorm[:10]))", "\n", "return", "enorm", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.DownstreamEval.eval_sts.parse_results": [[14, 30], ["res.items", "pandas.DataFrame", "pd.DataFrame.mean", "list", "res.keys"], "function", ["None"], ["def", "parse_results", "(", "res", ",", "resname", ")", ":", "\n", "\n", "    ", "dfsp", "=", "{", "'model'", ":", "resname", "}", "\n", "for", "key", ",", "val", "in", "res", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "[", "'STS12'", ",", "'STS13'", ",", "'STS14'", ",", "'STS15'", ",", "'STS16'", "]", ":", "\n", "            ", "dfsp", "[", "key", "]", "=", "val", "[", "'all'", "]", "[", "'spearman'", "]", "[", "'all'", "]", "\n", "", "elif", "key", "in", "[", "'SICKRelatedness'", ",", "'STSBenchmark'", "]", ":", "\n", "            ", "dfsp", "[", "key", "]", "=", "val", "[", "'test'", "]", "[", "'spearman'", "]", ".", "correlation", "\n", "", "elif", "key", "in", "[", "'MR'", ",", "'CR'", ",", "'SUBJ'", ",", "'MPQA'", ",", "'SST2'", ",", "'SST5'", ",", "'TREC'", ",", "'MRPC'", ",", "'SICKEntailment'", "]", ":", "\n", "            ", "dfsp", "[", "key", "]", "=", "val", "[", "'acc'", "]", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "[", "dfsp", "]", ",", "index", "=", "[", "0", "]", ",", "columns", "=", "list", "(", "res", ".", "keys", "(", ")", ")", ")", "\n", "df", "[", "'Avg'", "]", "=", "df", ".", "mean", "(", "axis", "=", "1", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.clustering_eval.get_embeddings": [[20, 42], ["time.time", "enumerate", "time.time", "print", "torch.cat.cpu().numpy", "transformer.encode", "tokenizer.batch_encode_plus", "transformer.forward", "corpus_embeddings.detach().cpu().numpy.detach().cpu().numpy", "torch.cat", "numpy.concatenate", "features[].to", "features[].to", "torch.sum", "torch.sum", "torch.cat.cpu", "attention_mask.unsqueeze", "corpus_embeddings.detach().cpu().numpy.detach().cpu", "attention_mask.unsqueeze", "corpus_embeddings.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.PairwiseRankingLoss.forward"], ["def", "get_embeddings", "(", "transformer", ",", "tokenizer", ",", "train_loader", ",", "device", ")", ":", "\n", "    ", "t0", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "text", ",", "label", "=", "batch", "[", "'text'", "]", ",", "batch", "[", "'label'", "]", "\n", "if", "tokenizer", "is", "None", ":", "\n", "            ", "corpus_embeddings", "=", "transformer", ".", "encode", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "tokenizer", ".", "batch_encode_plus", "(", "text", ",", "max_length", "=", "64", ",", "return_tensors", "=", "'pt'", ",", "padding", "=", "'max_length'", ",", "truncation", "=", "True", ")", "\n", "input_ids", ",", "attention_mask", "=", "features", "[", "'input_ids'", "]", ".", "to", "(", "device", ")", ",", "features", "[", "'attention_mask'", "]", ".", "to", "(", "device", ")", "\n", "bert_output", "=", "transformer", ".", "forward", "(", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "attention_mask", ")", "\n", "corpus_embeddings", "=", "torch", ".", "sum", "(", "bert_output", "[", "0", "]", "*", "attention_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "attention_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "corpus_embeddings", "=", "corpus_embeddings", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "            ", "all_labels", "=", "label", "\n", "all_embeddings", "=", "corpus_embeddings", "\n", "", "else", ":", "\n", "            ", "all_labels", "=", "torch", ".", "cat", "(", "(", "all_labels", ",", "label", ")", ",", "dim", "=", "0", ")", "\n", "all_embeddings", "=", "np", ".", "concatenate", "(", "(", "all_embeddings", ",", "corpus_embeddings", ")", ",", "axis", "=", "0", ")", "\n", "", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"embeddings:\"", ",", "all_embeddings", ".", "shape", ",", "\"time consumed:\"", ",", "t1", "-", "t0", ")", "\n", "return", "all_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "all_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.clustering_eval.clustering_single_trial": [[44, 53], ["sklearn.cluster.KMeans", "cluster.KMeans.fit", "cluster.KMeans.labels_.astype", "metric.Confusion", "metric.Confusion.add", "metric.Confusion.optimal_assignment", "torch.tensor", "torch.tensor", "metric.Confusion.acc", "metric.Confusion.clusterscores"], "function", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.add", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.optimal_assignment", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.acc", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.clusterscores"], ["", "def", "clustering_single_trial", "(", "y_true", ",", "embeddings", "=", "None", ",", "num_classes", "=", "10", ",", "random_state", "=", "0", ")", ":", "\n", "    ", "\"\"\"\"Evaluate the embeddings using KMeans\"\"\"", "\n", "kmeans", "=", "cluster", ".", "KMeans", "(", "n_clusters", "=", "num_classes", ",", "random_state", "=", "random_state", ")", "\n", "kmeans", ".", "fit", "(", "embeddings", ")", "\n", "y_pred", "=", "kmeans", ".", "labels_", ".", "astype", "(", "np", ".", "int", ")", "\n", "confusion", "=", "Confusion", "(", "num_classes", ")", "\n", "confusion", ".", "add", "(", "torch", ".", "tensor", "(", "y_pred", ")", ",", "torch", ".", "tensor", "(", "y_true", ")", ")", "\n", "confusion", ".", "optimal_assignment", "(", "num_classes", ")", "\n", "return", "confusion", ".", "acc", "(", ")", ",", "confusion", ".", "clusterscores", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.clustering_eval.clustering_eval": [[55, 73], ["pandas.DataFrame", "[].agg().round", "print", "dataloader.cluster_data_loader", "clustering_eval.get_embeddings", "range", "configs.utils.set_global_random_seed", "clustering_eval.clustering_single_trial", "scores.update", "clures.append", "index.append", "list", "[].agg", "scores.keys", "pd.DataFrame.groupby"], "function", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.dataloader.cluster_data_loader", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.clustering_eval.get_embeddings", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.configs.utils.set_global_random_seed", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.clustering_eval.clustering_single_trial", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.AverageMeter.update"], ["", "def", "clustering_eval", "(", "bert", ",", "tokenizer", ",", "datanames", ",", "resname", ",", "args", ",", "CLUSTER_DATASETS", ")", ":", "\n", "    ", "clures", ",", "index", ",", "count", "=", "[", "]", ",", "[", "]", ",", "0", "\n", "for", "data", "in", "datanames", ":", "\n", "        ", "datapath", ",", "num_classes", ",", "text", ",", "label", "=", "CLUSTER_DATASETS", "[", "data", "]", "\n", "train_loader", "=", "cluster_data_loader", "(", "datapath", ",", "text", ",", "label", ",", "args", ".", "batch_size", ")", "\n", "y_true", ",", "embeddings", "=", "get_embeddings", "(", "bert", ",", "tokenizer", ",", "train_loader", ",", "args", ".", "device", ")", "\n", "\n", "for", "trial", "in", "range", "(", "10", ")", ":", "\n", "            ", "set_global_random_seed", "(", "trial", ")", "\n", "acc", ",", "scores", "=", "clustering_single_trial", "(", "y_true", ",", "embeddings", ",", "num_classes", ",", "random_state", "=", "trial", ")", "\n", "scores", ".", "update", "(", "{", "\"data\"", ":", "data", ",", "\"trial\"", ":", "trial", ",", "\"ACC\"", ":", "acc", "}", ")", "\n", "clures", ".", "append", "(", "scores", ")", "\n", "index", ".", "append", "(", "count", ")", "\n", "count", "+=", "1", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "clures", ",", "index", "=", "index", ",", "columns", "=", "list", "(", "scores", ".", "keys", "(", ")", ")", ")", "\n", "dfstats", "=", "df", ".", "groupby", "(", "[", "\"data\"", "]", ")", "[", "\"ACC\"", ",", "\"NMI\"", ",", "\"AMI\"", ",", "\"ARI\"", "]", ".", "agg", "(", "[", "\"mean\"", ",", "\"std\"", "]", ")", ".", "round", "(", "4", ")", "\n", "print", "(", "\"--clustering--\\n\"", ",", "dfstats", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.AverageMeter.__init__": [[38, 40], ["metric.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.AverageMeter.reset": [[41, 46], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.AverageMeter.update": [[47, 52], ["float"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "float", "(", "self", ".", "sum", ")", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Timer.__init__": [[56, 58], ["metric.Timer.reset"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Timer.reset": [[59, 62], ["time.time"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "interval", "=", "0", "\n", "self", ".", "time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Timer.value": [[63, 65], ["time.time"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "-", "self", ".", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Timer.tic": [[66, 68], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "        ", "self", ".", "time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Timer.toc": [[69, 73], ["time.time", "time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ")", ":", "\n", "        ", "self", ".", "interval", "=", "time", ".", "time", "(", ")", "-", "self", ".", "time", "\n", "self", ".", "time", "=", "time", ".", "time", "(", ")", "\n", "return", "self", ".", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.__init__": [[79, 85], ["object.__init__", "torch.LongTensor", "metric.Confusion.reset"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.reset"], ["def", "__init__", "(", "self", ",", "k", ",", "normalized", "=", "False", ")", ":", "\n", "        ", "super", "(", "Confusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "conf", "=", "torch", ".", "LongTensor", "(", "k", ",", "k", ")", "\n", "self", ".", "normalized", "=", "normalized", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.reset": [[86, 89], ["metric.Confusion.conf.fill_"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conf", ".", "fill_", "(", "0", ")", "\n", "self", ".", "gt_n_cluster", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda": [[90, 92], ["metric.Confusion.conf.cuda"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "conf", "=", "self", ".", "conf", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.add": [[93, 109], ["output.squeeze.squeeze.squeeze", "target.squeeze.squeeze.squeeze", "torch.ones().type_as().expand", "metric.Confusion.conf.view", "metric.Confusion._conf_flat.index_add_", "output.squeeze.squeeze.size", "target.squeeze.squeeze.size", "output.squeeze.squeeze.ndimension", "output.squeeze.squeeze.max", "indices.size", "output.squeeze.squeeze.size", "metric.Confusion.conf.size", "torch.ones().type_as", "pred.squeeze_().type_as", "metric.Confusion.conf.stride", "torch.ones", "pred.squeeze_"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "target", "=", "target", ".", "squeeze", "(", ")", "\n", "assert", "output", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "'number of targets and outputs do not match'", "\n", "if", "output", ".", "ndimension", "(", ")", ">", "1", ":", "#it is the raw probabilities over classes", "\n", "            ", "assert", "output", ".", "size", "(", "1", ")", "==", "self", ".", "conf", ".", "size", "(", "0", ")", ",", "'number of outputs does not match size of confusion matrix'", "\n", "\n", "_", ",", "pred", "=", "output", ".", "max", "(", "1", ")", "#find the predicted class", "\n", "", "else", ":", "#it is already the predicted class", "\n", "            ", "pred", "=", "output", "\n", "", "indices", "=", "(", "target", "*", "self", ".", "conf", ".", "stride", "(", "0", ")", "+", "pred", ".", "squeeze_", "(", ")", ".", "type_as", "(", "target", ")", ")", ".", "type_as", "(", "self", ".", "conf", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "1", ")", ".", "type_as", "(", "self", ".", "conf", ")", ".", "expand", "(", "indices", ".", "size", "(", "0", ")", ")", "\n", "self", ".", "_conf_flat", "=", "self", ".", "conf", ".", "view", "(", "-", "1", ")", "\n", "self", ".", "_conf_flat", ".", "index_add_", "(", "0", ",", "indices", ",", "ones", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.classIoU": [[110, 117], ["metric.Confusion.diag().float().view().div", "metric.Confusion.conf.narrow().narrow", "metric.Confusion.diag().view", "metric.Confusion.sum().view", "metric.Confusion.sum().view", "metric.Confusion.diag().float().view", "union.float", "metric.Confusion.conf.narrow", "metric.Confusion.diag", "metric.Confusion.sum", "metric.Confusion.sum", "metric.Confusion.diag().float", "metric.Confusion.diag"], "methods", ["None"], ["", "def", "classIoU", "(", "self", ",", "ignore_last", "=", "False", ")", ":", "\n", "        ", "confusion_tensor", "=", "self", ".", "conf", "\n", "if", "ignore_last", ":", "\n", "            ", "confusion_tensor", "=", "self", ".", "conf", ".", "narrow", "(", "0", ",", "0", ",", "self", ".", "k", "-", "1", ")", ".", "narrow", "(", "1", ",", "0", ",", "self", ".", "k", "-", "1", ")", "\n", "", "union", "=", "confusion_tensor", ".", "sum", "(", "0", ")", ".", "view", "(", "-", "1", ")", "+", "confusion_tensor", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ")", "-", "confusion_tensor", ".", "diag", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "acc", "=", "confusion_tensor", ".", "diag", "(", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ")", ".", "div", "(", "union", ".", "float", "(", ")", "+", "1", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.recall": [[118, 125], ["metric.Confusion.conf[].sum().item", "metric.Confusion.conf[].sum().item", "float", "metric.Confusion.conf[].sum", "metric.Confusion.conf[].sum"], "methods", ["None"], ["", "def", "recall", "(", "self", ",", "clsId", ")", ":", "\n", "        ", "i", "=", "clsId", "\n", "TP", "=", "self", ".", "conf", "[", "i", ",", "i", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "TPuFN", "=", "self", ".", "conf", "[", "i", ",", ":", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "TPuFN", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "float", "(", "TP", ")", "/", "TPuFN", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.precision": [[126, 133], ["metric.Confusion.conf[].sum().item", "metric.Confusion.conf[].sum().item", "float", "metric.Confusion.conf[].sum", "metric.Confusion.conf[].sum"], "methods", ["None"], ["", "def", "precision", "(", "self", ",", "clsId", ")", ":", "\n", "        ", "i", "=", "clsId", "\n", "TP", "=", "self", ".", "conf", "[", "i", ",", "i", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "TPuFP", "=", "self", ".", "conf", "[", ":", ",", "i", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "TPuFP", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "float", "(", "TP", ")", "/", "TPuFP", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.f1score": [[134, 141], ["metric.Confusion.recall", "metric.Confusion.precision", "print", "float"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.recall", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.precision"], ["", "def", "f1score", "(", "self", ",", "clsId", ")", ":", "\n", "        ", "r", "=", "self", ".", "recall", "(", "clsId", ")", "\n", "p", "=", "self", ".", "precision", "(", "clsId", ")", "\n", "print", "(", "\"classID:{}, precision:{:.4f}, recall:{:.4f}\"", ".", "format", "(", "clsId", ",", "p", ",", "r", ")", ")", "\n", "if", "(", "p", "+", "r", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "2", "*", "float", "(", "p", "*", "r", ")", "/", "(", "p", "+", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.acc": [[142, 148], ["metric.Confusion.conf.diag().sum().item", "metric.Confusion.conf.sum().item", "float", "metric.Confusion.conf.diag().sum", "metric.Confusion.conf.sum", "metric.Confusion.conf.diag"], "methods", ["None"], ["", "def", "acc", "(", "self", ")", ":", "\n", "        ", "TP", "=", "self", ".", "conf", ".", "diag", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "=", "self", ".", "conf", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "total", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "float", "(", "TP", ")", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.optimal_assignment": [[149, 156], ["scipy.optimize.linear_sum_assignment", "metric.Confusion.conf.cpu().numpy", "metric.Confusion.conf.cpu"], "methods", ["None"], ["", "def", "optimal_assignment", "(", "self", ",", "gt_n_cluster", "=", "None", ",", "assign", "=", "None", ")", ":", "\n", "        ", "if", "assign", "is", "None", ":", "\n", "            ", "mat", "=", "-", "self", ".", "conf", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#hungaian finds the minimum cost", "\n", "r", ",", "assign", "=", "hungarian", "(", "mat", ")", "\n", "", "self", ".", "conf", "=", "self", ".", "conf", "[", ":", ",", "assign", "]", "\n", "self", ".", "gt_n_cluster", "=", "gt_n_cluster", "\n", "return", "assign", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.show": [[157, 173], ["print", "conf.size", "range", "conf.size", "print", "print", "range", "print", "print", "print", "print", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "show", "(", "self", ",", "width", "=", "6", ",", "row_labels", "=", "None", ",", "column_labels", "=", "None", ")", ":", "\n", "        ", "print", "(", "\"Confusion Matrix:\"", ")", "\n", "conf", "=", "self", ".", "conf", "\n", "rows", "=", "self", ".", "gt_n_cluster", "or", "conf", ".", "size", "(", "0", ")", "\n", "cols", "=", "conf", ".", "size", "(", "1", ")", "\n", "if", "column_labels", "is", "not", "None", ":", "\n", "            ", "print", "(", "(", "\"%\"", "+", "str", "(", "width", ")", "+", "\"s\"", ")", "%", "''", ",", "end", "=", "''", ")", "\n", "for", "c", "in", "column_labels", ":", "\n", "                ", "print", "(", "(", "\"%\"", "+", "str", "(", "width", ")", "+", "\"s\"", ")", "%", "c", ",", "end", "=", "''", ")", "\n", "", "print", "(", "''", ")", "\n", "", "for", "i", "in", "range", "(", "0", ",", "rows", ")", ":", "\n", "            ", "if", "row_labels", "is", "not", "None", ":", "\n", "                ", "print", "(", "(", "\"%\"", "+", "str", "(", "width", ")", "+", "\"s|\"", ")", "%", "row_labels", "[", "i", "]", ",", "end", "=", "''", ")", "\n", "", "for", "j", "in", "range", "(", "0", ",", "cols", ")", ":", "\n", "                ", "print", "(", "(", "\"%\"", "+", "str", "(", "width", ")", "+", "\".d\"", ")", "%", "conf", "[", "i", ",", "j", "]", ",", "end", "=", "''", ")", "\n", "", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.conf2label": [[174, 189], ["conf.sum().squeeze", "conf.sum().squeeze.sum().item", "torch.zeros", "torch.zeros", "range", "conf.size", "range", "conf.sum", "conf.sum().squeeze.sum", "gt_label[].fill_", "conf.size", "pred_label[].fill_"], "methods", ["None"], ["", "", "def", "conf2label", "(", "self", ")", ":", "\n", "        ", "conf", "=", "self", ".", "conf", "\n", "gt_classes_count", "=", "conf", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "n_sample", "=", "gt_classes_count", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "gt_label", "=", "torch", ".", "zeros", "(", "n_sample", ")", "\n", "pred_label", "=", "torch", ".", "zeros", "(", "n_sample", ")", "\n", "cur_idx", "=", "0", "\n", "for", "c", "in", "range", "(", "conf", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "gt_classes_count", "[", "c", "]", ">", "0", ":", "\n", "                ", "gt_label", "[", "cur_idx", ":", "cur_idx", "+", "gt_classes_count", "[", "c", "]", "]", ".", "fill_", "(", "c", ")", "\n", "", "for", "p", "in", "range", "(", "conf", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "if", "conf", "[", "c", "]", "[", "p", "]", ">", "0", ":", "\n", "                    ", "pred_label", "[", "cur_idx", ":", "cur_idx", "+", "conf", "[", "c", "]", "[", "p", "]", "]", ".", "fill_", "(", "p", ")", "\n", "", "cur_idx", "=", "cur_idx", "+", "conf", "[", "c", "]", "[", "p", "]", ";", "\n", "", "", "return", "gt_label", ",", "pred_label", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.clusterscores": [[190, 196], ["metric.Confusion.conf2label", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_mutual_info_score"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.conf2label"], ["", "def", "clusterscores", "(", "self", ")", ":", "\n", "        ", "target", ",", "pred", "=", "self", ".", "conf2label", "(", ")", "\n", "NMI", "=", "normalized_mutual_info_score", "(", "target", ",", "pred", ")", "\n", "ARI", "=", "adjusted_rand_score", "(", "target", ",", "pred", ")", "\n", "AMI", "=", "adjusted_mutual_info_score", "(", "target", ",", "pred", ")", "\n", "return", "{", "'NMI'", ":", "NMI", ",", "'ARI'", ":", "ARI", ",", "'AMI'", ":", "AMI", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.cluster_acc": [[10, 22], ["y_true.astype.astype", "numpy.zeros", "range", "scipy.optimize.linear_sum_assignment", "max", "y_pred.max", "y_true.astype.max", "np.zeros.max", "sum", "zip"], "function", ["None"], ["def", "cluster_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_true", "=", "y_true", ".", "astype", "(", "np", ".", "int64", ")", "\n", "assert", "y_pred", ".", "size", "==", "y_true", ".", "size", "\n", "D", "=", "max", "(", "y_pred", ".", "max", "(", ")", ",", "y_true", ".", "max", "(", ")", ")", "+", "1", "\n", "w", "=", "np", ".", "zeros", "(", "(", "D", ",", "D", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "for", "i", "in", "range", "(", "y_pred", ".", "size", ")", ":", "\n", "        ", "w", "[", "y_pred", "[", "i", "]", ",", "y_true", "[", "i", "]", "]", "+=", "1", "\n", "\n", "# ind = sklearn.utils.linear_assignment_.linear_assignment(w.max() - w)", "\n", "# row_ind, col_ind = linear_assignment(w.max() - w)", "\n", "", "row_ind", ",", "col_ind", "=", "hungarian", "(", "w", ".", "max", "(", ")", "-", "w", ")", "\n", "return", "sum", "(", "[", "w", "[", "i", ",", "j", "]", "for", "i", ",", "j", "in", "zip", "(", "row_ind", ",", "col_ind", ")", "]", ")", "*", "1.0", "/", "y_pred", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.cluster_acc_purity": [[23, 35], ["numpy.amax", "numpy.zeros_like", "numpy.arange", "numpy.mean", "scipy.stats.mode", "len"], "function", ["None"], ["", "def", "cluster_acc_purity", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "num_class", "=", "np", ".", "amax", "(", "y_pred", ")", "\n", "real_pred", "=", "np", ".", "zeros_like", "(", "y_pred", ")", "\n", "for", "cat", "in", "np", ".", "arange", "(", "num_class", ")", ":", "\n", "        ", "idx", "=", "y_pred", "==", "cat", "\n", "lab", "=", "y_true", "[", "idx", "]", "\n", "if", "len", "(", "lab", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "# find the most common true label at idx", "\n", "", "modal", "=", "mode", "(", "lab", ")", "\n", "real_pred", "[", "idx", "]", "=", "modal", ".", "mode", "[", "0", "]", "\n", "", "return", "np", ".", "mean", "(", "real_pred", "==", "y_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.dataloader.TextClustering.__init__": [[8, 12], ["len", "len"], "methods", ["None"], ["        ", "assert", "len", "(", "pairsimi", ")", "==", "len", "(", "train_x1", ")", "==", "len", "(", "train_x2", ")", "\n", "self", ".", "train_x1", "=", "train_x1", "\n", "self", ".", "train_x2", "=", "train_x2", "\n", "self", ".", "pairsimi", "=", "pairsimi", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.dataloader.TextClustering.__len__": [[13, 15], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "pairsimi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.dataloader.TextClustering.__getitem__": [[16, 18], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "{", "'text1'", ":", "self", ".", "train_x1", "[", "idx", "]", ",", "'text2'", ":", "self", ".", "train_x2", "[", "idx", "]", ",", "'pairsimi'", ":", "self", ".", "pairsimi", "[", "idx", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.dataloader.cluster_data_loader": [[20, 29], ["pandas.read_csv", "print", "dataloader.TextClustering", "torch.DataLoader", "train_data[].fillna", "train_data[].astype", "len", "len"], "function", ["None"], ["    ", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "datapath", ",", "args", ".", "dataname", "+", "'.csv'", ")", ")", "\n", "\n", "# assume each input pair is named as (sentence1, sentence2)", "\n", "train_text1", "=", "train_data", "[", "args", ".", "text", "+", "'1'", "]", ".", "fillna", "(", "'.'", ")", ".", "values", "\n", "train_text2", "=", "train_data", "[", "args", ".", "text", "+", "'2'", "]", ".", "fillna", "(", "'.'", ")", ".", "values", "\n", "pairsimi", "=", "train_data", "[", "args", ".", "pairsimi", "]", ".", "astype", "(", "int", ")", ".", "values", "\n", "\n", "train_dataset", "=", "PairSamples", "(", "train_text1", ",", "train_text2", ",", "pairsimi", ")", "\n", "train_loader", "=", "util_data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "return", "train_loader", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.stseval.sts_eval.sts_eval": [[14, 53], ["logging.basicConfig", "senteval.engine.SE", "senteval.engine.SE.eval", "params.tokenizer.batch_encode_plus", "params.transformer.forward", "attention_mask.unsqueeze.unsqueeze", "embeddings.detach().cpu().numpy", "features[].to", "features[].to", "torch.sum", "torch.sum", "embeddings.detach().cpu", "embeddings.detach"], "function", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.PairwiseRankingLoss.forward"], ["def", "sts_eval", "(", "args", ",", "transfer_tasks", ",", "model", ",", "tokenizer", ")", ":", "\n", "# Set up logger and device", "\n", "    ", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s : %(message)s'", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "\n", "def", "prepare", "(", "params", ",", "samples", ")", ":", "\n", "        ", "return", "\n", "\n", "", "def", "batcher", "(", "params", ",", "batch", ")", ":", "\n", "        ", "sentences", "=", "[", "' '", ".", "join", "(", "s", ")", "for", "s", "in", "batch", "]", "\n", "\n", "features", "=", "params", ".", "tokenizer", ".", "batch_encode_plus", "(", "\n", "sentences", ",", "\n", "max_length", "=", "params", "[", "'max_length'", "]", ",", "\n", "return_tensors", "=", "'pt'", ",", "\n", "#         padding=True, ", "\n", "padding", "=", "'max_length'", ",", "\n", "truncation", "=", "True", "\n", ")", "\n", "input_ids", ",", "attention_mask", "=", "features", "[", "'input_ids'", "]", ".", "to", "(", "params", "[", "'device'", "]", ")", ",", "features", "[", "'attention_mask'", "]", ".", "to", "(", "params", "[", "'device'", "]", ")", "\n", "bert_output", "=", "params", ".", "transformer", ".", "forward", "(", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "attention_mask", ")", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "embeddings", "=", "torch", ".", "sum", "(", "bert_output", "[", "0", "]", "*", "attention_mask", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "attention_mask", ",", "dim", "=", "1", ")", "\n", "return", "embeddings", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "# define senteval params", "\n", "", "params_senteval", "=", "{", "'task_path'", ":", "args", ".", "path_to_sts_data", ",", "'usepytorch'", ":", "True", ",", "'kfold'", ":", "10", "}", "\n", "params_senteval", "[", "'classifier'", "]", "=", "{", "'nhid'", ":", "0", ",", "'optim'", ":", "'adam'", ",", "'batch_size'", ":", "64", ",", "\n", "'tenacity'", ":", "5", ",", "'epoch_size'", ":", "4", "}", "\n", "params_senteval", "[", "'device'", "]", "=", "args", ".", "device", "\n", "params_senteval", "[", "'transformer'", "]", "=", "model", "\n", "params_senteval", "[", "'tokenizer'", "]", "=", "tokenizer", "\n", "params_senteval", "[", "'max_length'", "]", "=", "args", ".", "max_length", "\n", "\n", "se", "=", "senteval", ".", "engine", ".", "SE", "(", "params_senteval", ",", "batcher", ",", "prepare", ")", "\n", "\n", "eval_results", "=", "se", ".", "eval", "(", "transfer_tasks", ")", "\n", "\n", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.configs.configure.get_args": [[23, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Evaluation of the pre-trained models on various downstream tasks\"", ")", "\n", "parser", ".", "add_argument", "(", "'--device_id'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "\"cuda:0\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "# results path and prefix", "\n", "parser", ".", "add_argument", "(", "'--respath'", ",", "type", "=", "str", ",", "default", "=", "\"../../downstream_evalres/senteval/\"", ")", "\n", "parser", ".", "add_argument", "(", "'--resprefix'", ",", "type", "=", "str", ",", "default", "=", "'sts'", ")", "\n", "# data evaluation configuration", "\n", "parser", ".", "add_argument", "(", "'--path_to_sts_data'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"path to the SentEval data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--path_to_cluster_data'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"path to the SentEval data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_length'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "# evaluate the pretrained_model", "\n", "parser", ".", "add_argument", "(", "'--pretrained_dir'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_model'", ",", "type", "=", "str", ",", "default", "=", "'PairSupCon'", ",", "choices", "=", "[", "\"BERT\"", ",", "\"SBERT\"", ",", "\"PairSupCon\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--bert'", ",", "type", "=", "str", ",", "default", "=", "'bertbase'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.configs.configure.get_bert": [[44, 49], ["transformers.AutoConfig.from_pretrained", "transformers.AutoModel.from_pretrained", "transformers.AutoTokenizer.from_pretrained"], "function", ["None"], ["", "def", "get_bert", "(", "args", ")", ":", "\n", "    ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "BERT_CLASS", "[", "args", ".", "bert", "]", ")", "\n", "model", "=", "AutoModel", ".", "from_pretrained", "(", "BERT_CLASS", "[", "args", ".", "bert", "]", ",", "config", "=", "config", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "BERT_CLASS", "[", "args", ".", "bert", "]", ")", "\n", "return", "model", ",", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.configs.configure.get_sbert": [[51, 54], ["sentence_transformers.SentenceTransformer"], "function", ["None"], ["", "def", "get_sbert", "(", "model_name", ")", ":", "\n", "    ", "sbert", "=", "SentenceTransformer", "(", "SBERT_CLASS", "[", "model_name", "]", ")", "\n", "return", "sbert", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.configs.configure.get_checkpoint": [[57, 75], ["get_sbert.to", "configure.get_bert", "print", "configure.get_sbert", "print", "Exception"], "function", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.configs.configure.get_bert", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.configs.configure.get_sbert"], ["", "def", "get_checkpoint", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "pretrained_model", "in", "[", "\"BERT\"", ",", "\"PairSupCon\"", "]", ":", "#evaluate vanilla BERT or PairSupCon", "\n", "        ", "model", ",", "tokenizer", "=", "get_bert", "(", "args", ")", "\n", "resname", "=", "'sts_{}_{}'", ".", "format", "(", "args", ".", "pretrained_model", ",", "args", ".", "bert", ")", "\n", "print", "(", "\"...... loading BERT\"", ",", "args", ".", "bert", ",", "\"resname \"", ",", "resname", ")", "\n", "\n", "", "elif", "args", ".", "pretrained_model", "==", "\"SBERT\"", ":", "# evaluate SentenceBert ", "\n", "        ", "resname", "=", "'sts{}_SBERT_{}'", ".", "format", "(", "args", ".", "sts_only", ",", "args", ".", "bert", ")", "\n", "model", "=", "get_sbert", "(", "args", ")", "\n", "tokenizer", "=", "None", "\n", "print", "(", "\"...... loading SBERT\"", ",", "args", ".", "bert", ",", "\"resname \"", ",", "resname", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"please specify the pretrained model you want to evaluate\"", ")", "\n", "\n", "", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "return", "model", ",", "tokenizer", ",", "resname", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.configs.utils.set_global_random_seed": [[6, 13], ["torch.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed"], "function", ["None"], ["\n", "def", "set_global_random_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sick.SICKEval.__init__": [[25, 32], ["logging.debug", "sick.SICKEval.loadFile", "sick.SICKEval.loadFile", "sick.SICKEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : SICK-Relatedness*****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_train.txt'", ")", ")", "\n", "dev", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_trial.txt'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_test_annotated.txt'", ")", ")", "\n", "self", ".", "sick_data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sick.SICKEval.do_prepare": [[33, 40], ["prepare"], "methods", ["None"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "samples", "=", "self", ".", "sick_data", "[", "'train'", "]", "[", "'X_A'", "]", "+", "self", ".", "sick_data", "[", "'train'", "]", "[", "'X_B'", "]", "+", "self", ".", "sick_data", "[", "'dev'", "]", "[", "'X_A'", "]", "+", "self", ".", "sick_data", "[", "'dev'", "]", "[", "'X_B'", "]", "+", "self", ".", "sick_data", "[", "'test'", "]", "[", "'X_A'", "]", "+", "self", ".", "sick_data", "[", "'test'", "]", "[", "'X_B'", "]", "\n", "return", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sick.SICKEval.loadFile": [[41, 56], ["io.open", "float", "line.strip().split", "sick_data[].append", "sick_data[].append", "sick_data[].append", "text[].split", "text[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "skipFirstLine", "=", "True", "\n", "sick_data", "=", "{", "'X_A'", ":", "[", "]", ",", "'X_B'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "if", "skipFirstLine", ":", "\n", "                    ", "skipFirstLine", "=", "False", "\n", "", "else", ":", "\n", "                    ", "text", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sick_data", "[", "'X_A'", "]", ".", "append", "(", "text", "[", "1", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'X_B'", "]", ".", "append", "(", "text", "[", "2", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'y'", "]", ".", "append", "(", "text", "[", "3", "]", ")", "\n", "\n", "", "", "", "sick_data", "[", "'y'", "]", "=", "[", "float", "(", "s", ")", "for", "s", "in", "sick_data", "[", "'y'", "]", "]", "\n", "return", "sick_data", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sick.SICKEval.run": [[57, 121], ["sick.SICKEval.encode_labels", "sick.SICKEval.encode_labels", "sick.SICKEval.encode_labels", "senteval.tools.relatedness.RelatednessPytorch", "senteval.tools.relatedness.RelatednessPytorch.run", "sklearn.metrics.mean_squared_error", "logging.debug", "logging.debug", "logging.info", "sorted", "numpy.array", "logging.info", "scipy.stats.pearsonr", "scipy.stats.spearmanr", "len", "len", "zip", "range", "numpy.vstack", "len", "batcher", "[].append", "numpy.abs", "numpy.abs", "numpy.abs", "len", "len"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sick.SICKEval.encode_labels", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sick.SICKEval.encode_labels", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sick.SICKEval.encode_labels", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.run"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "sick_embed", "=", "{", "'train'", ":", "{", "}", ",", "'dev'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "bsize", "=", "params", ".", "batch_size", "\n", "\n", "for", "key", "in", "self", ".", "sick_data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "# Sort to reduce padding", "\n", "sorted_corpus", "=", "sorted", "(", "zip", "(", "self", ".", "sick_data", "[", "key", "]", "[", "'X_A'", "]", ",", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_B'", "]", ",", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_A'", "]", "=", "[", "x", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_B'", "]", "=", "[", "y", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", "=", "[", "z", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "\n", "for", "txt_type", "in", "[", "'X_A'", ",", "'X_B'", "]", ":", "\n", "                ", "sick_embed", "[", "key", "]", "[", "txt_type", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "bsize", ")", ":", "\n", "                    ", "batch", "=", "self", ".", "sick_data", "[", "key", "]", "[", "txt_type", "]", "[", "ii", ":", "ii", "+", "bsize", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "sick_embed", "[", "key", "]", "[", "txt_type", "]", ".", "append", "(", "embeddings", ")", "\n", "", "sick_embed", "[", "key", "]", "[", "txt_type", "]", "=", "np", ".", "vstack", "(", "sick_embed", "[", "key", "]", "[", "txt_type", "]", ")", "\n", "", "sick_embed", "[", "key", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", ")", "\n", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "# Train", "\n", "", "trainA", "=", "sick_embed", "[", "'train'", "]", "[", "'X_A'", "]", "\n", "trainB", "=", "sick_embed", "[", "'train'", "]", "[", "'X_B'", "]", "\n", "trainF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "trainA", "-", "trainB", ")", ",", "trainA", "*", "trainB", "]", "\n", "trainY", "=", "self", ".", "encode_labels", "(", "self", ".", "sick_data", "[", "'train'", "]", "[", "'y'", "]", ")", "\n", "\n", "# Dev", "\n", "devA", "=", "sick_embed", "[", "'dev'", "]", "[", "'X_A'", "]", "\n", "devB", "=", "sick_embed", "[", "'dev'", "]", "[", "'X_B'", "]", "\n", "devF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "devA", "-", "devB", ")", ",", "devA", "*", "devB", "]", "\n", "devY", "=", "self", ".", "encode_labels", "(", "self", ".", "sick_data", "[", "'dev'", "]", "[", "'y'", "]", ")", "\n", "\n", "# Test", "\n", "testA", "=", "sick_embed", "[", "'test'", "]", "[", "'X_A'", "]", "\n", "testB", "=", "sick_embed", "[", "'test'", "]", "[", "'X_B'", "]", "\n", "testF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "testA", "-", "testB", ")", ",", "testA", "*", "testB", "]", "\n", "testY", "=", "self", ".", "encode_labels", "(", "self", ".", "sick_data", "[", "'test'", "]", "[", "'y'", "]", ")", "\n", "\n", "config", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'nclasses'", ":", "5", "}", "\n", "clf", "=", "RelatednessPytorch", "(", "train", "=", "{", "'X'", ":", "trainF", ",", "'y'", ":", "trainY", "}", ",", "\n", "valid", "=", "{", "'X'", ":", "devF", ",", "'y'", ":", "devY", "}", ",", "\n", "test", "=", "{", "'X'", ":", "testF", ",", "'y'", ":", "testY", "}", ",", "\n", "devscores", "=", "self", ".", "sick_data", "[", "'dev'", "]", "[", "'y'", "]", ",", "\n", "config", "=", "config", ")", "\n", "\n", "devspr", ",", "yhat", "=", "clf", ".", "run", "(", ")", "\n", "\n", "pr", "=", "pearsonr", "(", "yhat", ",", "self", ".", "sick_data", "[", "'test'", "]", "[", "'y'", "]", ")", "[", "0", "]", "\n", "sr", "=", "spearmanr", "(", "yhat", ",", "self", ".", "sick_data", "[", "'test'", "]", "[", "'y'", "]", ")", "[", "0", "]", "\n", "pr", "=", "0", "if", "pr", "!=", "pr", "else", "pr", "\n", "sr", "=", "0", "if", "sr", "!=", "sr", "else", "sr", "\n", "se", "=", "mean_squared_error", "(", "yhat", ",", "self", ".", "sick_data", "[", "'test'", "]", "[", "'y'", "]", ")", "\n", "logging", ".", "debug", "(", "'Dev : Spearman {0}'", ".", "format", "(", "devspr", ")", ")", "\n", "logging", ".", "debug", "(", "'Test : Pearson {0} Spearman {1} MSE {2} \\\n                       for SICK Relatedness\\n'", ".", "format", "(", "pr", ",", "sr", ",", "se", ")", ")", "\n", "\n", "return", "{", "'devspearman'", ":", "devspr", ",", "'pearson'", ":", "pr", ",", "'spearman'", ":", "sr", ",", "'mse'", ":", "se", ",", "\n", "'yhat'", ":", "yhat", ",", "'ndev'", ":", "len", "(", "devA", ")", ",", "'ntest'", ":", "len", "(", "testA", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sick.SICKEval.encode_labels": [[122, 134], ["numpy.zeros().astype", "enumerate", "range", "numpy.zeros", "numpy.floor", "len", "numpy.floor", "numpy.floor", "numpy.floor"], "methods", ["None"], ["", "def", "encode_labels", "(", "self", ",", "labels", ",", "nclass", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        Label encoding from Tree LSTM paper (Tai, Socher, Manning)\n        \"\"\"", "\n", "Y", "=", "np", ".", "zeros", "(", "(", "len", "(", "labels", ")", ",", "nclass", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "for", "j", ",", "y", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "nclass", ")", ":", "\n", "                ", "if", "i", "+", "1", "==", "np", ".", "floor", "(", "y", ")", "+", "1", ":", "\n", "                    ", "Y", "[", "j", ",", "i", "]", "=", "y", "-", "np", ".", "floor", "(", "y", ")", "\n", "", "if", "i", "+", "1", "==", "np", ".", "floor", "(", "y", ")", ":", "\n", "                    ", "Y", "[", "j", ",", "i", "]", "=", "np", ".", "floor", "(", "y", ")", "-", "y", "+", "1", "\n", "", "", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sick.SICKEntailmentEval.__init__": [[137, 144], ["logging.debug", "sick.SICKEntailmentEval.loadFile", "sick.SICKEntailmentEval.loadFile", "sick.SICKEntailmentEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : SICK-Entailment*****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_train.txt'", ")", ")", "\n", "dev", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_trial.txt'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_test_annotated.txt'", ")", ")", "\n", "self", ".", "sick_data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sick.SICKEntailmentEval.loadFile": [[145, 160], ["io.open", "line.strip().split", "sick_data[].append", "sick_data[].append", "sick_data[].append", "text[].split", "text[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "label2id", "=", "{", "'CONTRADICTION'", ":", "0", ",", "'NEUTRAL'", ":", "1", ",", "'ENTAILMENT'", ":", "2", "}", "\n", "skipFirstLine", "=", "True", "\n", "sick_data", "=", "{", "'X_A'", ":", "[", "]", ",", "'X_B'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "if", "skipFirstLine", ":", "\n", "                    ", "skipFirstLine", "=", "False", "\n", "", "else", ":", "\n", "                    ", "text", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sick_data", "[", "'X_A'", "]", ".", "append", "(", "text", "[", "1", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'X_B'", "]", ".", "append", "(", "text", "[", "2", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'y'", "]", ".", "append", "(", "text", "[", "4", "]", ")", "\n", "", "", "", "sick_data", "[", "'y'", "]", "=", "[", "label2id", "[", "s", "]", "for", "s", "in", "sick_data", "[", "'y'", "]", "]", "\n", "return", "sick_data", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sick.SICKEntailmentEval.run": [[161, 217], ["numpy.array", "numpy.array", "numpy.array", "senteval.tools.validation.SplitClassifier", "senteval.tools.validation.SplitClassifier.run", "logging.debug", "logging.info", "sorted", "logging.info", "len", "len", "zip", "range", "numpy.vstack", "len", "batcher", "[].append", "numpy.abs", "numpy.abs", "numpy.abs", "len", "len"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.run"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "sick_embed", "=", "{", "'train'", ":", "{", "}", ",", "'dev'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "bsize", "=", "params", ".", "batch_size", "\n", "\n", "for", "key", "in", "self", ".", "sick_data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "# Sort to reduce padding", "\n", "sorted_corpus", "=", "sorted", "(", "zip", "(", "self", ".", "sick_data", "[", "key", "]", "[", "'X_A'", "]", ",", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_B'", "]", ",", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_A'", "]", "=", "[", "x", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_B'", "]", "=", "[", "y", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", "=", "[", "z", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "\n", "for", "txt_type", "in", "[", "'X_A'", ",", "'X_B'", "]", ":", "\n", "                ", "sick_embed", "[", "key", "]", "[", "txt_type", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "bsize", ")", ":", "\n", "                    ", "batch", "=", "self", ".", "sick_data", "[", "key", "]", "[", "txt_type", "]", "[", "ii", ":", "ii", "+", "bsize", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "sick_embed", "[", "key", "]", "[", "txt_type", "]", ".", "append", "(", "embeddings", ")", "\n", "", "sick_embed", "[", "key", "]", "[", "txt_type", "]", "=", "np", ".", "vstack", "(", "sick_embed", "[", "key", "]", "[", "txt_type", "]", ")", "\n", "", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "# Train", "\n", "", "trainA", "=", "sick_embed", "[", "'train'", "]", "[", "'X_A'", "]", "\n", "trainB", "=", "sick_embed", "[", "'train'", "]", "[", "'X_B'", "]", "\n", "trainF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "trainA", "-", "trainB", ")", ",", "trainA", "*", "trainB", "]", "\n", "trainY", "=", "np", ".", "array", "(", "self", ".", "sick_data", "[", "'train'", "]", "[", "'y'", "]", ")", "\n", "\n", "# Dev", "\n", "devA", "=", "sick_embed", "[", "'dev'", "]", "[", "'X_A'", "]", "\n", "devB", "=", "sick_embed", "[", "'dev'", "]", "[", "'X_B'", "]", "\n", "devF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "devA", "-", "devB", ")", ",", "devA", "*", "devB", "]", "\n", "devY", "=", "np", ".", "array", "(", "self", ".", "sick_data", "[", "'dev'", "]", "[", "'y'", "]", ")", "\n", "\n", "# Test", "\n", "testA", "=", "sick_embed", "[", "'test'", "]", "[", "'X_A'", "]", "\n", "testB", "=", "sick_embed", "[", "'test'", "]", "[", "'X_B'", "]", "\n", "testF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "testA", "-", "testB", ")", ",", "testA", "*", "testB", "]", "\n", "testY", "=", "np", ".", "array", "(", "self", ".", "sick_data", "[", "'test'", "]", "[", "'y'", "]", ")", "\n", "\n", "config", "=", "{", "'nclasses'", ":", "3", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", ",", "\n", "'nhid'", ":", "params", ".", "nhid", "}", "\n", "clf", "=", "SplitClassifier", "(", "X", "=", "{", "'train'", ":", "trainF", ",", "'valid'", ":", "devF", ",", "'test'", ":", "testF", "}", ",", "\n", "y", "=", "{", "'train'", ":", "trainY", ",", "'valid'", ":", "devY", ",", "'test'", ":", "testY", "}", ",", "\n", "config", "=", "config", ")", "\n", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'\\nDev acc : {0} Test acc : {1} for \\\n                       SICK entailment\\n'", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "devA", ")", ",", "'ntest'", ":", "len", "(", "testA", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.__init__": [[27, 55], ["senteval.utils.dotdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "batcher", ",", "prepare", "=", "None", ")", ":", "\n", "# parameters", "\n", "        ", "params", "=", "utils", ".", "dotdict", "(", "params", ")", "\n", "params", ".", "usepytorch", "=", "True", "if", "'usepytorch'", "not", "in", "params", "else", "params", ".", "usepytorch", "\n", "params", ".", "seed", "=", "1111", "if", "'seed'", "not", "in", "params", "else", "params", ".", "seed", "\n", "\n", "params", ".", "batch_size", "=", "128", "if", "'batch_size'", "not", "in", "params", "else", "params", ".", "batch_size", "\n", "params", ".", "nhid", "=", "0", "if", "'nhid'", "not", "in", "params", "else", "params", ".", "nhid", "\n", "params", ".", "kfold", "=", "5", "if", "'kfold'", "not", "in", "params", "else", "params", ".", "kfold", "\n", "\n", "if", "'classifier'", "not", "in", "params", "or", "not", "params", "[", "'classifier'", "]", ":", "\n", "            ", "params", ".", "classifier", "=", "{", "'nhid'", ":", "0", "}", "\n", "\n", "", "assert", "'nhid'", "in", "params", ".", "classifier", ",", "'Set number of hidden units in classifier config!!'", "\n", "\n", "self", ".", "params", "=", "params", "\n", "\n", "# batcher and prepare", "\n", "self", ".", "batcher", "=", "batcher", "\n", "self", ".", "prepare", "=", "prepare", "if", "prepare", "else", "lambda", "x", ",", "y", ":", "None", "\n", "\n", "self", ".", "list_tasks", "=", "[", "'CR'", ",", "'MR'", ",", "'MPQA'", ",", "'SUBJ'", ",", "'SST2'", ",", "'SST5'", ",", "'TREC'", ",", "'MRPC'", ",", "\n", "'SICKRelatedness'", ",", "'SICKEntailment'", ",", "'STSBenchmark'", ",", "\n", "'SNLI'", ",", "'ImageCaptionRetrieval'", ",", "'STS12'", ",", "'STS13'", ",", "\n", "'STS14'", ",", "'STS15'", ",", "'STS16'", ",", "\n", "'Length'", ",", "'WordContent'", ",", "'Depth'", ",", "'TopConstituents'", ",", "\n", "'BigramShift'", ",", "'Tense'", ",", "'SubjNumber'", ",", "'ObjNumber'", ",", "\n", "'OddManOut'", ",", "'CoordinationInversion'", ",", "'SICKRelatedness-finetune'", ",", "'STSBenchmark-finetune'", ",", "'STSBenchmark-fix'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval": [[56, 130], ["isinstance", "engine.SE.evaluation.do_prepare", "engine.SE.evaluation.run", "str", "senteval.binary.CREval", "engine.SE.eval", "str", "senteval.binary.MREval", "senteval.binary.MPQAEval", "senteval.binary.SUBJEval", "senteval.sst.SSTEval", "senteval.sst.SSTEval", "senteval.trec.TRECEval", "senteval.mrpc.MRPCEval", "senteval.sts.SICKRelatednessEval", "senteval.sts.STSBenchmarkEval", "senteval.sts.STSBenchmarkEval", "senteval.sts.STSBenchmarkFinetune", "senteval.sick.SICKEval", "senteval.sick.SICKEntailmentEval", "senteval.snli.SNLIEval", "engine.SE.eval"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STSEval.do_prepare", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.run", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval"], ["", "def", "eval", "(", "self", ",", "name", ")", ":", "\n", "# evaluate on evaluation [name], either takes string or list of strings", "\n", "        ", "if", "(", "isinstance", "(", "name", ",", "list", ")", ")", ":", "\n", "            ", "self", ".", "results", "=", "{", "x", ":", "self", ".", "eval", "(", "x", ")", "for", "x", "in", "name", "}", "\n", "return", "self", ".", "results", "\n", "\n", "", "tpath", "=", "self", ".", "params", ".", "task_path", "\n", "assert", "name", "in", "self", ".", "list_tasks", ",", "str", "(", "name", ")", "+", "' not in '", "+", "str", "(", "self", ".", "list_tasks", ")", "\n", "\n", "# Original SentEval tasks", "\n", "if", "name", "==", "'CR'", ":", "\n", "            ", "self", ".", "evaluation", "=", "CREval", "(", "tpath", "+", "'/downstream/CR'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'MR'", ":", "\n", "            ", "self", ".", "evaluation", "=", "MREval", "(", "tpath", "+", "'/downstream/MR'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'MPQA'", ":", "\n", "            ", "self", ".", "evaluation", "=", "MPQAEval", "(", "tpath", "+", "'/downstream/MPQA'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SUBJ'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SUBJEval", "(", "tpath", "+", "'/downstream/SUBJ'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SST2'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SSTEval", "(", "tpath", "+", "'/downstream/SST/binary'", ",", "nclasses", "=", "2", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SST5'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SSTEval", "(", "tpath", "+", "'/downstream/SST/fine'", ",", "nclasses", "=", "5", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'TREC'", ":", "\n", "            ", "self", ".", "evaluation", "=", "TRECEval", "(", "tpath", "+", "'/downstream/TREC'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'MRPC'", ":", "\n", "            ", "self", ".", "evaluation", "=", "MRPCEval", "(", "tpath", "+", "'/downstream/MRPC'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SICKRelatedness'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SICKRelatednessEval", "(", "tpath", "+", "'/downstream/SICK'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'STSBenchmark'", ":", "\n", "            ", "self", ".", "evaluation", "=", "STSBenchmarkEval", "(", "tpath", "+", "'/downstream/STS/STSBenchmark'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'STSBenchmark-fix'", ":", "\n", "            ", "self", ".", "evaluation", "=", "STSBenchmarkEval", "(", "tpath", "+", "'/downstream/STS/STSBenchmark-fix'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'STSBenchmark-finetune'", ":", "\n", "            ", "self", ".", "evaluation", "=", "STSBenchmarkFinetune", "(", "tpath", "+", "'/downstream/STS/STSBenchmark'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SICKRelatedness-finetune'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SICKEval", "(", "tpath", "+", "'/downstream/SICK'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SICKEntailment'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SICKEntailmentEval", "(", "tpath", "+", "'/downstream/SICK'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SNLI'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SNLIEval", "(", "tpath", "+", "'/downstream/SNLI'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "in", "[", "'STS12'", ",", "'STS13'", ",", "'STS14'", ",", "'STS15'", ",", "'STS16'", "]", ":", "\n", "            ", "fpath", "=", "name", "+", "'-en-test'", "\n", "self", ".", "evaluation", "=", "eval", "(", "name", "+", "'Eval'", ")", "(", "tpath", "+", "'/downstream/STS/'", "+", "fpath", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'ImageCaptionRetrieval'", ":", "\n", "            ", "self", ".", "evaluation", "=", "ImageCaptionRetrievalEval", "(", "tpath", "+", "'/downstream/COCO'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "\n", "# Probing Tasks", "\n", "", "elif", "name", "==", "'Length'", ":", "\n", "                ", "self", ".", "evaluation", "=", "LengthEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'WordContent'", ":", "\n", "                ", "self", ".", "evaluation", "=", "WordContentEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'Depth'", ":", "\n", "                ", "self", ".", "evaluation", "=", "DepthEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'TopConstituents'", ":", "\n", "                ", "self", ".", "evaluation", "=", "TopConstituentsEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'BigramShift'", ":", "\n", "                ", "self", ".", "evaluation", "=", "BigramShiftEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'Tense'", ":", "\n", "                ", "self", ".", "evaluation", "=", "TenseEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SubjNumber'", ":", "\n", "                ", "self", ".", "evaluation", "=", "SubjNumberEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'ObjNumber'", ":", "\n", "                ", "self", ".", "evaluation", "=", "ObjNumberEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'OddManOut'", ":", "\n", "                ", "self", ".", "evaluation", "=", "OddManOutEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'CoordinationInversion'", ":", "\n", "                ", "self", ".", "evaluation", "=", "CoordinationInversionEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "\n", "", "self", ".", "params", ".", "current_task", "=", "name", "\n", "self", ".", "evaluation", ".", "do_prepare", "(", "self", ".", "params", ",", "self", ".", "prepare", ")", "\n", "\n", "self", ".", "results", "=", "self", ".", "evaluation", ".", "run", "(", "self", ".", "params", ",", "self", ".", "batcher", ")", "\n", "\n", "return", "self", ".", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.trec.TRECEval.__init__": [[23, 28], ["logging.info", "trec.TRECEval.loadFile", "trec.TRECEval.loadFile", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'***** Transfer task : TREC *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'train_5500.label'", ")", ")", "\n", "self", ".", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'TREC_10.label'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.trec.TRECEval.do_prepare": [[29, 32], ["prepare"], "methods", ["None"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "samples", "=", "self", ".", "train", "[", "'X'", "]", "+", "self", ".", "test", "[", "'X'", "]", "\n", "return", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.trec.TRECEval.loadFile": [[33, 45], ["io.open", "line.strip().split", "[].split", "trec_data[].append", "trec_data[].append", "line.strip", "[].split.split"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "trec_data", "=", "{", "'X'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "tgt2idx", "=", "{", "'ABBR'", ":", "0", ",", "'DESC'", ":", "1", ",", "'ENTY'", ":", "2", ",", "\n", "'HUM'", ":", "3", ",", "'LOC'", ":", "4", ",", "'NUM'", ":", "5", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'latin-1'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "target", ",", "sample", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "':'", ",", "1", ")", "\n", "sample", "=", "sample", ".", "split", "(", "' '", ",", "1", ")", "[", "1", "]", ".", "split", "(", ")", "\n", "assert", "target", "in", "tgt2idx", ",", "target", "\n", "trec_data", "[", "'X'", "]", ".", "append", "(", "sample", ")", "\n", "trec_data", "[", "'y'", "]", ".", "append", "(", "tgt2idx", "[", "target", "]", ")", "\n", "", "", "return", "trec_data", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.trec.TRECEval.run": [[46, 90], ["sorted", "sorted", "range", "numpy.vstack", "logging.info", "range", "numpy.vstack", "logging.info", "senteval.tools.validation.KFoldClassifier", "senteval.tools.validation.KFoldClassifier.run", "logging.debug", "zip", "zip", "len", "batcher", "numpy.vstack.append", "len", "batcher", "numpy.vstack.append", "len", "len", "numpy.array", "numpy.array", "len", "len"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.run"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "train_embeddings", ",", "test_embeddings", "=", "[", "]", ",", "[", "]", "\n", "\n", "# Sort to reduce padding", "\n", "sorted_corpus_train", "=", "sorted", "(", "zip", "(", "self", ".", "train", "[", "'X'", "]", ",", "self", ".", "train", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "z", "[", "1", "]", ")", ")", "\n", "train_samples", "=", "[", "x", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus_train", "]", "\n", "train_labels", "=", "[", "y", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus_train", "]", "\n", "\n", "sorted_corpus_test", "=", "sorted", "(", "zip", "(", "self", ".", "test", "[", "'X'", "]", ",", "self", ".", "test", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "z", "[", "1", "]", ")", ")", "\n", "test_samples", "=", "[", "x", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus_test", "]", "\n", "test_labels", "=", "[", "y", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus_test", "]", "\n", "\n", "# Get train embeddings", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "train_labels", ")", ",", "params", ".", "batch_size", ")", ":", "\n", "            ", "batch", "=", "train_samples", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "train_embeddings", ".", "append", "(", "embeddings", ")", "\n", "", "train_embeddings", "=", "np", ".", "vstack", "(", "train_embeddings", ")", "\n", "logging", ".", "info", "(", "'Computed train embeddings'", ")", "\n", "\n", "# Get test embeddings", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "test_labels", ")", ",", "params", ".", "batch_size", ")", ":", "\n", "            ", "batch", "=", "test_samples", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "test_embeddings", ".", "append", "(", "embeddings", ")", "\n", "", "test_embeddings", "=", "np", ".", "vstack", "(", "test_embeddings", ")", "\n", "logging", ".", "info", "(", "'Computed test embeddings'", ")", "\n", "\n", "config_classifier", "=", "{", "'nclasses'", ":", "6", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", ",", "\n", "'kfold'", ":", "params", ".", "kfold", "}", "\n", "clf", "=", "KFoldClassifier", "(", "{", "'X'", ":", "train_embeddings", ",", "\n", "'y'", ":", "np", ".", "array", "(", "train_labels", ")", "}", ",", "\n", "{", "'X'", ":", "test_embeddings", ",", "\n", "'y'", ":", "np", ".", "array", "(", "test_labels", ")", "}", ",", "\n", "config_classifier", ")", "\n", "devacc", ",", "testacc", ",", "_", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'\\nDev acc : {0} Test acc : {1} \\\n            for TREC\\n'", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "self", ".", "train", "[", "'X'", "]", ")", ",", "'ntest'", ":", "len", "(", "self", ".", "test", "[", "'X'", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sst.SSTEval.__init__": [[23, 36], ["logging.debug", "sst.SSTEval.loadFile", "sst.SSTEval.loadFile", "sst.SSTEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "nclasses", "=", "2", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "\n", "# binary of fine-grained", "\n", "assert", "nclasses", "in", "[", "2", ",", "5", "]", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "self", ".", "task_name", "=", "'Binary'", "if", "self", ".", "nclasses", "==", "2", "else", "'Fine-Grained'", "\n", "logging", ".", "debug", "(", "'***** Transfer task : SST %s classification *****\\n\\n'", ",", "self", ".", "task_name", ")", "\n", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sentiment-train'", ")", ")", "\n", "dev", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sentiment-dev'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sentiment-test'", ")", ")", "\n", "self", ".", "sst_data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sst.SSTEval.do_prepare": [[37, 41], ["prepare"], "methods", ["None"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "samples", "=", "self", ".", "sst_data", "[", "'train'", "]", "[", "'X'", "]", "+", "self", ".", "sst_data", "[", "'dev'", "]", "[", "'X'", "]", "+", "self", ".", "sst_data", "[", "'test'", "]", "[", "'X'", "]", "\n", "return", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sst.SSTEval.loadFile": [[42, 56], ["io.open", "max", "line.strip().split", "sst_data[].append", "sst_data[].append", "int", "sample[].split", "line.strip().split", "sst_data[].append", "sst_data[].append", "line.strip", "int", "sample[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "sst_data", "=", "{", "'X'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "if", "self", ".", "nclasses", "==", "2", ":", "\n", "                    ", "sample", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sst_data", "[", "'y'", "]", ".", "append", "(", "int", "(", "sample", "[", "1", "]", ")", ")", "\n", "sst_data", "[", "'X'", "]", ".", "append", "(", "sample", "[", "0", "]", ".", "split", "(", ")", ")", "\n", "", "elif", "self", ".", "nclasses", "==", "5", ":", "\n", "                    ", "sample", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "\n", "sst_data", "[", "'y'", "]", ".", "append", "(", "int", "(", "sample", "[", "0", "]", ")", ")", "\n", "sst_data", "[", "'X'", "]", ".", "append", "(", "sample", "[", "1", "]", ".", "split", "(", ")", ")", "\n", "", "", "", "assert", "max", "(", "sst_data", "[", "'y'", "]", ")", "==", "self", ".", "nclasses", "-", "1", "\n", "return", "sst_data", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sst.SSTEval.run": [[57, 97], ["senteval.tools.validation.SplitClassifier", "senteval.tools.validation.SplitClassifier.run", "logging.debug", "logging.info", "sorted", "map", "range", "numpy.vstack", "numpy.array", "logging.info", "len", "len", "zip", "zip", "len", "batcher", "[].append", "len"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.run"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "sst_embed", "=", "{", "'train'", ":", "{", "}", ",", "'dev'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "bsize", "=", "params", ".", "batch_size", "\n", "\n", "for", "key", "in", "self", ".", "sst_data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "# Sort to reduce padding", "\n", "sorted_data", "=", "sorted", "(", "zip", "(", "self", ".", "sst_data", "[", "key", "]", "[", "'X'", "]", ",", "\n", "self", ".", "sst_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "z", "[", "1", "]", ")", ")", "\n", "self", ".", "sst_data", "[", "key", "]", "[", "'X'", "]", ",", "self", ".", "sst_data", "[", "key", "]", "[", "'y'", "]", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_data", ")", ")", "\n", "\n", "sst_embed", "[", "key", "]", "[", "'X'", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "self", ".", "sst_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "bsize", ")", ":", "\n", "                ", "batch", "=", "self", ".", "sst_data", "[", "key", "]", "[", "'X'", "]", "[", "ii", ":", "ii", "+", "bsize", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "sst_embed", "[", "key", "]", "[", "'X'", "]", ".", "append", "(", "embeddings", ")", "\n", "", "sst_embed", "[", "key", "]", "[", "'X'", "]", "=", "np", ".", "vstack", "(", "sst_embed", "[", "key", "]", "[", "'X'", "]", ")", "\n", "sst_embed", "[", "key", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "self", ".", "sst_data", "[", "key", "]", "[", "'y'", "]", ")", "\n", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "config_classifier", "=", "{", "'nclasses'", ":", "self", ".", "nclasses", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", "}", "\n", "\n", "clf", "=", "SplitClassifier", "(", "X", "=", "{", "'train'", ":", "sst_embed", "[", "'train'", "]", "[", "'X'", "]", ",", "\n", "'valid'", ":", "sst_embed", "[", "'dev'", "]", "[", "'X'", "]", ",", "\n", "'test'", ":", "sst_embed", "[", "'test'", "]", "[", "'X'", "]", "}", ",", "\n", "y", "=", "{", "'train'", ":", "sst_embed", "[", "'train'", "]", "[", "'y'", "]", ",", "\n", "'valid'", ":", "sst_embed", "[", "'dev'", "]", "[", "'y'", "]", ",", "\n", "'test'", ":", "sst_embed", "[", "'test'", "]", "[", "'y'", "]", "}", ",", "\n", "config", "=", "config_classifier", ")", "\n", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'\\nDev acc : {0} Test acc : {1} for \\\n            SST {2} classification\\n'", ".", "format", "(", "devacc", ",", "testacc", ",", "self", ".", "task_name", ")", ")", "\n", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "sst_embed", "[", "'dev'", "]", "[", "'X'", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "sst_embed", "[", "'test'", "]", "[", "'X'", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.rank.ImageCaptionRetrievalEval.__init__": [[27, 34], ["logging.debug", "rank.ImageCaptionRetrievalEval.loadFile"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task: Image Caption Retrieval *****\\n\\n'", ")", "\n", "\n", "# Get captions and image features", "\n", "self", ".", "seed", "=", "seed", "\n", "train", ",", "dev", ",", "test", "=", "self", ".", "loadFile", "(", "task_path", ")", "\n", "self", ".", "coco_data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.rank.ImageCaptionRetrievalEval.do_prepare": [[35, 40], ["prepare"], "methods", ["None"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "samples", "=", "self", ".", "coco_data", "[", "'train'", "]", "[", "'sent'", "]", "+", "self", ".", "coco_data", "[", "'dev'", "]", "[", "'sent'", "]", "+", "self", ".", "coco_data", "[", "'test'", "]", "[", "'sent'", "]", "\n", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.rank.ImageCaptionRetrievalEval.loadFile": [[41, 67], ["range", "numpy.array().astype", "len", "open", "pickle.load", "open", "pickle.load", "len", "list_sent.append", "numpy.array().astype.append", "len", "len", "numpy.array", "os.path.join", "os.path.join", "sent.encode().split", "len", "sent.encode"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "coco", "=", "{", "}", "\n", "\n", "for", "split", "in", "[", "'train'", ",", "'valid'", ",", "'test'", "]", ":", "\n", "            ", "list_sent", "=", "[", "]", "\n", "list_img_feat", "=", "[", "]", "\n", "if", "sys", ".", "version_info", "<", "(", "3", ",", "0", ")", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "fpath", ",", "split", "+", "'.pkl'", ")", ")", "as", "f", ":", "\n", "                    ", "cocodata", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "fpath", ",", "split", "+", "'.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "cocodata", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "", "for", "imgkey", "in", "range", "(", "len", "(", "cocodata", "[", "'features'", "]", ")", ")", ":", "\n", "                ", "assert", "len", "(", "cocodata", "[", "'image_to_caption_ids'", "]", "[", "imgkey", "]", ")", ">=", "5", ",", "cocodata", "[", "'image_to_caption_ids'", "]", "[", "imgkey", "]", "\n", "for", "captkey", "in", "cocodata", "[", "'image_to_caption_ids'", "]", "[", "imgkey", "]", "[", "0", ":", "5", "]", ":", "\n", "                    ", "sent", "=", "cocodata", "[", "'captions'", "]", "[", "captkey", "]", "[", "'cleaned_caption'", "]", "\n", "sent", "+=", "' .'", "# add punctuation to end of sentence in COCO", "\n", "list_sent", ".", "append", "(", "sent", ".", "encode", "(", "'utf-8'", ")", ".", "split", "(", ")", ")", "\n", "list_img_feat", ".", "append", "(", "cocodata", "[", "'features'", "]", "[", "imgkey", "]", ")", "\n", "", "", "assert", "len", "(", "list_sent", ")", "==", "len", "(", "list_img_feat", ")", "and", "len", "(", "list_sent", ")", "%", "5", "==", "0", "\n", "list_img_feat", "=", "np", ".", "array", "(", "list_img_feat", ")", ".", "astype", "(", "'float32'", ")", "\n", "coco", "[", "split", "]", "=", "{", "'sent'", ":", "list_sent", ",", "'imgfeat'", ":", "list_img_feat", "}", "\n", "", "return", "coco", "[", "'train'", "]", ",", "coco", "[", "'valid'", "]", ",", "coco", "[", "'test'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.rank.ImageCaptionRetrievalEval.run": [[68, 109], ["senteval.tools.ranking.ImageSentenceRankingPytorch", "senteval.tools.ranking.ImageSentenceRankingPytorch.run", "logging.debug", "logging.debug", "logging.info", "numpy.array", "numpy.argsort", "len", "range", "numpy.array", "logging.info", "len", "len", "numpy.sort", "numpy.argsort", "batcher", "[].append", "numpy.vstack"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.run"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "coco_embed", "=", "{", "'train'", ":", "{", "'sentfeat'", ":", "[", "]", ",", "'imgfeat'", ":", "[", "]", "}", ",", "\n", "'dev'", ":", "{", "'sentfeat'", ":", "[", "]", ",", "'imgfeat'", ":", "[", "]", "}", ",", "\n", "'test'", ":", "{", "'sentfeat'", ":", "[", "]", ",", "'imgfeat'", ":", "[", "]", "}", "}", "\n", "\n", "for", "key", "in", "self", ".", "coco_data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "# Sort to reduce padding", "\n", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", "=", "np", ".", "array", "(", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", ")", "\n", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", ",", "idx_sort", "=", "np", ".", "sort", "(", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", ")", ",", "np", ".", "argsort", "(", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", ")", "\n", "idx_unsort", "=", "np", ".", "argsort", "(", "idx_sort", ")", "\n", "\n", "coco_embed", "[", "key", "]", "[", "'X'", "]", "=", "[", "]", "\n", "nsent", "=", "len", "(", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "nsent", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch", "=", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "coco_embed", "[", "key", "]", "[", "'sentfeat'", "]", ".", "append", "(", "embeddings", ")", "\n", "", "coco_embed", "[", "key", "]", "[", "'sentfeat'", "]", "=", "np", ".", "vstack", "(", "coco_embed", "[", "key", "]", "[", "'sentfeat'", "]", ")", "[", "idx_unsort", "]", "\n", "coco_embed", "[", "key", "]", "[", "'imgfeat'", "]", "=", "np", ".", "array", "(", "self", ".", "coco_data", "[", "key", "]", "[", "'imgfeat'", "]", ")", "\n", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "config", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'projdim'", ":", "1000", ",", "'margin'", ":", "0.2", "}", "\n", "clf", "=", "ImageSentenceRankingPytorch", "(", "train", "=", "coco_embed", "[", "'train'", "]", ",", "\n", "valid", "=", "coco_embed", "[", "'dev'", "]", ",", "\n", "test", "=", "coco_embed", "[", "'test'", "]", ",", "\n", "config", "=", "config", ")", "\n", "\n", "bestdevscore", ",", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ",", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", "=", "clf", ".", "run", "(", ")", "\n", "\n", "logging", ".", "debug", "(", "\"\\nTest scores | Image to text: \\\n            {0}, {1}, {2}, {3}\"", ".", "format", "(", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ")", ")", "\n", "logging", ".", "debug", "(", "\"Test scores | Text to image: \\\n            {0}, {1}, {2}, {3}\\n\"", ".", "format", "(", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", ")", ")", "\n", "\n", "return", "{", "'devacc'", ":", "bestdevscore", ",", "\n", "'acc'", ":", "[", "(", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ")", ",", "\n", "(", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", ")", "]", ",", "\n", "'ndev'", ":", "len", "(", "coco_embed", "[", "'dev'", "]", "[", "'sentfeat'", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "coco_embed", "[", "'test'", "]", "[", "'sentfeat'", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.snli.SNLIEval.__init__": [[24, 60], ["logging.debug", "snli.SNLIEval.loadFile", "snli.SNLIEval.loadFile", "io.open().read().splitlines", "snli.SNLIEval.loadFile", "snli.SNLIEval.loadFile", "io.open().read().splitlines", "snli.SNLIEval.loadFile", "snli.SNLIEval.loadFile", "io.open().read().splitlines", "sorted", "map", "sorted", "map", "sorted", "map", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "zip", "zip", "zip", "zip", "zip", "zip", "io.open().read", "io.open().read", "io.open().read", "io.open", "io.open", "io.open", "len", "len", "len", "len", "len", "len", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : SNLI Entailment*****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "train1", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s1.train'", ")", ")", "\n", "train2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s2.train'", ")", ")", "\n", "\n", "trainlabels", "=", "io", ".", "open", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'labels.train'", ")", ",", "\n", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "valid1", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s1.dev'", ")", ")", "\n", "valid2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s2.dev'", ")", ")", "\n", "validlabels", "=", "io", ".", "open", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'labels.dev'", ")", ",", "\n", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "test1", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s1.test'", ")", ")", "\n", "test2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s2.test'", ")", ")", "\n", "testlabels", "=", "io", ".", "open", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'labels.test'", ")", ",", "\n", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "# sort data (by s2 first) to reduce padding", "\n", "sorted_train", "=", "sorted", "(", "zip", "(", "train2", ",", "train1", ",", "trainlabels", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "train2", ",", "train1", ",", "trainlabels", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_train", ")", ")", "\n", "\n", "sorted_valid", "=", "sorted", "(", "zip", "(", "valid2", ",", "valid1", ",", "validlabels", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "valid2", ",", "valid1", ",", "validlabels", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_valid", ")", ")", "\n", "\n", "sorted_test", "=", "sorted", "(", "zip", "(", "test2", ",", "test1", ",", "testlabels", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "test2", ",", "test1", ",", "testlabels", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_test", ")", ")", "\n", "\n", "self", ".", "samples", "=", "train1", "+", "train2", "+", "valid1", "+", "valid2", "+", "test1", "+", "test2", "\n", "self", ".", "data", "=", "{", "'train'", ":", "(", "train1", ",", "train2", ",", "trainlabels", ")", ",", "\n", "'valid'", ":", "(", "valid1", ",", "valid2", ",", "validlabels", ")", ",", "\n", "'test'", ":", "(", "test1", ",", "test2", ",", "testlabels", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.snli.SNLIEval.do_prepare": [[62, 64], ["prepare"], "methods", ["None"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.snli.SNLIEval.loadFile": [[65, 69], ["codecs.open", "line.split", "f.read().splitlines", "f.read"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "with", "codecs", ".", "open", "(", "fpath", ",", "'rb'", ",", "'latin-1'", ")", "as", "f", ":", "\n", "            ", "return", "[", "line", ".", "split", "(", ")", "for", "line", "in", "\n", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.snli.SNLIEval.run": [[70, 114], ["copy.deepcopy", "senteval.tools.validation.SplitClassifier", "senteval.tools.validation.SplitClassifier.run", "logging.debug", "len", "range", "numpy.vstack", "len", "len", "batcher", "batcher", "enc_input.append", "logging.info", "len", "len", "len", "numpy.hstack", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.run"], ["", "", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "self", ".", "X", ",", "self", ".", "y", "=", "{", "}", ",", "{", "}", "\n", "dico_label", "=", "{", "'entailment'", ":", "0", ",", "'neutral'", ":", "1", ",", "'contradiction'", ":", "2", "}", "\n", "for", "key", "in", "self", ".", "data", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "X", ":", "\n", "                ", "self", ".", "X", "[", "key", "]", "=", "[", "]", "\n", "", "if", "key", "not", "in", "self", ".", "y", ":", "\n", "                ", "self", ".", "y", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "input1", ",", "input2", ",", "mylabels", "=", "self", ".", "data", "[", "key", "]", "\n", "enc_input", "=", "[", "]", "\n", "n_labels", "=", "len", "(", "mylabels", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "n_labels", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch1", "=", "input1", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "batch2", "=", "input2", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "\n", "if", "len", "(", "batch1", ")", "==", "len", "(", "batch2", ")", "and", "len", "(", "batch1", ")", ">", "0", ":", "\n", "                    ", "enc1", "=", "batcher", "(", "params", ",", "batch1", ")", "\n", "enc2", "=", "batcher", "(", "params", ",", "batch2", ")", "\n", "enc_input", ".", "append", "(", "np", ".", "hstack", "(", "(", "enc1", ",", "enc2", ",", "enc1", "*", "enc2", ",", "\n", "np", ".", "abs", "(", "enc1", "-", "enc2", ")", ")", ")", ")", "\n", "", "if", "(", "ii", "*", "params", ".", "batch_size", ")", "%", "(", "20000", "*", "params", ".", "batch_size", ")", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "\"PROGRESS (encoding): %.2f%%\"", "%", "\n", "(", "100", "*", "ii", "/", "n_labels", ")", ")", "\n", "", "", "self", ".", "X", "[", "key", "]", "=", "np", ".", "vstack", "(", "enc_input", ")", "\n", "self", ".", "y", "[", "key", "]", "=", "[", "dico_label", "[", "y", "]", "for", "y", "in", "mylabels", "]", "\n", "\n", "", "config", "=", "{", "'nclasses'", ":", "3", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'cudaEfficient'", ":", "True", ",", "\n", "'nhid'", ":", "params", ".", "nhid", ",", "'noreg'", ":", "True", "}", "\n", "\n", "config_classifier", "=", "copy", ".", "deepcopy", "(", "params", ".", "classifier", ")", "\n", "config_classifier", "[", "'max_epoch'", "]", "=", "15", "\n", "config_classifier", "[", "'epoch_size'", "]", "=", "1", "\n", "config", "[", "'classifier'", "]", "=", "config_classifier", "\n", "\n", "clf", "=", "SplitClassifier", "(", "self", ".", "X", ",", "self", ".", "y", ",", "config", ")", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'Dev acc : {0} Test acc : {1} for SNLI\\n'", "\n", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "self", ".", "data", "[", "'valid'", "]", "[", "0", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "self", ".", "data", "[", "'test'", "]", "[", "0", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.mrpc.MRPCEval.__init__": [[24, 32], ["logging.info", "mrpc.MRPCEval.loadFile", "mrpc.MRPCEval.loadFile", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'***** Transfer task : MRPC *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "\n", "'msr_paraphrase_train.txt'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "\n", "'msr_paraphrase_test.txt'", ")", ")", "\n", "self", ".", "mrpc_data", "=", "{", "'train'", ":", "train", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.mrpc.MRPCEval.do_prepare": [[33, 39], ["prepare"], "methods", ["None"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "# TODO : Should we separate samples in \"train, test\"?", "\n", "        ", "samples", "=", "self", ".", "mrpc_data", "[", "'train'", "]", "[", "'X_A'", "]", "+", "self", ".", "mrpc_data", "[", "'train'", "]", "[", "'X_B'", "]", "+", "self", ".", "mrpc_data", "[", "'test'", "]", "[", "'X_A'", "]", "+", "self", ".", "mrpc_data", "[", "'test'", "]", "[", "'X_B'", "]", "\n", "return", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.mrpc.MRPCEval.loadFile": [[40, 53], ["io.open", "int", "line.strip().split", "mrpc_data[].append", "mrpc_data[].append", "mrpc_data[].append", "text[].split", "text[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "mrpc_data", "=", "{", "'X_A'", ":", "[", "]", ",", "'X_B'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "text", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "mrpc_data", "[", "'X_A'", "]", ".", "append", "(", "text", "[", "3", "]", ".", "split", "(", ")", ")", "\n", "mrpc_data", "[", "'X_B'", "]", ".", "append", "(", "text", "[", "4", "]", ".", "split", "(", ")", ")", "\n", "mrpc_data", "[", "'y'", "]", ".", "append", "(", "text", "[", "0", "]", ")", "\n", "\n", "", "", "mrpc_data", "[", "'X_A'", "]", "=", "mrpc_data", "[", "'X_A'", "]", "[", "1", ":", "]", "\n", "mrpc_data", "[", "'X_B'", "]", "=", "mrpc_data", "[", "'X_B'", "]", "[", "1", ":", "]", "\n", "mrpc_data", "[", "'y'", "]", "=", "[", "int", "(", "s", ")", "for", "s", "in", "mrpc_data", "[", "'y'", "]", "[", "1", ":", "]", "]", "\n", "return", "mrpc_data", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.mrpc.MRPCEval.run": [[54, 105], ["senteval.tools.validation.KFoldClassifier", "senteval.tools.validation.KFoldClassifier.run", "round", "logging.debug", "logging.info", "sorted", "numpy.array", "logging.info", "len", "len", "zip", "range", "numpy.vstack", "sklearn.metrics.f1_score", "len", "batcher", "[].append", "numpy.abs", "numpy.abs", "len", "len"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.run"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "mrpc_embed", "=", "{", "'train'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "\n", "for", "key", "in", "self", ".", "mrpc_data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "# Sort to reduce padding", "\n", "text_data", "=", "{", "}", "\n", "sorted_corpus", "=", "sorted", "(", "zip", "(", "self", ".", "mrpc_data", "[", "key", "]", "[", "'X_A'", "]", ",", "\n", "self", ".", "mrpc_data", "[", "key", "]", "[", "'X_B'", "]", ",", "\n", "self", ".", "mrpc_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "\n", "text_data", "[", "'A'", "]", "=", "[", "x", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "text_data", "[", "'B'", "]", "=", "[", "y", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "text_data", "[", "'y'", "]", "=", "[", "z", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "\n", "for", "txt_type", "in", "[", "'A'", ",", "'B'", "]", ":", "\n", "                ", "mrpc_embed", "[", "key", "]", "[", "txt_type", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "text_data", "[", "'y'", "]", ")", ",", "params", ".", "batch_size", ")", ":", "\n", "                    ", "batch", "=", "text_data", "[", "txt_type", "]", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "mrpc_embed", "[", "key", "]", "[", "txt_type", "]", ".", "append", "(", "embeddings", ")", "\n", "", "mrpc_embed", "[", "key", "]", "[", "txt_type", "]", "=", "np", ".", "vstack", "(", "mrpc_embed", "[", "key", "]", "[", "txt_type", "]", ")", "\n", "", "mrpc_embed", "[", "key", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "text_data", "[", "'y'", "]", ")", "\n", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "# Train", "\n", "", "trainA", "=", "mrpc_embed", "[", "'train'", "]", "[", "'A'", "]", "\n", "trainB", "=", "mrpc_embed", "[", "'train'", "]", "[", "'B'", "]", "\n", "trainF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "trainA", "-", "trainB", ")", ",", "trainA", "*", "trainB", "]", "\n", "trainY", "=", "mrpc_embed", "[", "'train'", "]", "[", "'y'", "]", "\n", "\n", "# Test", "\n", "testA", "=", "mrpc_embed", "[", "'test'", "]", "[", "'A'", "]", "\n", "testB", "=", "mrpc_embed", "[", "'test'", "]", "[", "'B'", "]", "\n", "testF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "testA", "-", "testB", ")", ",", "testA", "*", "testB", "]", "\n", "testY", "=", "mrpc_embed", "[", "'test'", "]", "[", "'y'", "]", "\n", "\n", "config", "=", "{", "'nclasses'", ":", "2", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", ",", "\n", "'nhid'", ":", "params", ".", "nhid", ",", "'kfold'", ":", "params", ".", "kfold", "}", "\n", "clf", "=", "KFoldClassifier", "(", "train", "=", "{", "'X'", ":", "trainF", ",", "'y'", ":", "trainY", "}", ",", "\n", "test", "=", "{", "'X'", ":", "testF", ",", "'y'", ":", "testY", "}", ",", "config", "=", "config", ")", "\n", "\n", "devacc", ",", "testacc", ",", "yhat", "=", "clf", ".", "run", "(", ")", "\n", "testf1", "=", "round", "(", "100", "*", "f1_score", "(", "testY", ",", "yhat", ")", ",", "2", ")", "\n", "logging", ".", "debug", "(", "'Dev acc : {0} Test acc {1}; Test F1 {2} for MRPC.\\n'", "\n", ".", "format", "(", "devacc", ",", "testacc", ",", "testf1", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "'f1'", ":", "testf1", ",", "\n", "'ndev'", ":", "len", "(", "trainA", ")", ",", "'ntest'", ":", "len", "(", "testA", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.PROBINGEval.__init__": [[24, 35], ["logging.debug", "probing.PROBINGEval.loadFile", "logging.info", "probing.PROBINGEval.task.upper", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "self", ".", "task", "=", "task", "\n", "logging", ".", "debug", "(", "'***** (Probing) Transfer task : %s classification *****'", ",", "self", ".", "task", ".", "upper", "(", ")", ")", "\n", "self", ".", "task_data", "=", "{", "'train'", ":", "{", "'X'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "\n", "'dev'", ":", "{", "'X'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "\n", "'test'", ":", "{", "'X'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "}", "\n", "self", ".", "loadFile", "(", "task_path", ")", "\n", "logging", ".", "info", "(", "'Loaded %s train - %s dev - %s test for %s'", "%", "\n", "(", "len", "(", "self", ".", "task_data", "[", "'train'", "]", "[", "'y'", "]", ")", ",", "len", "(", "self", ".", "task_data", "[", "'dev'", "]", "[", "'y'", "]", ")", ",", "\n", "len", "(", "self", ".", "task_data", "[", "'test'", "]", "[", "'y'", "]", ")", ",", "self", ".", "task", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.PROBINGEval.do_prepare": [[36, 40], ["prepare"], "methods", ["None"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "samples", "=", "self", ".", "task_data", "[", "'train'", "]", "[", "'X'", "]", "+", "self", ".", "task_data", "[", "'dev'", "]", "[", "'X'", "]", "+", "self", ".", "task_data", "[", "'test'", "]", "[", "'X'", "]", "\n", "return", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.PROBINGEval.loadFile": [[41, 56], ["sorted", "dict", "len", "io.open", "numpy.unique", "zip", "enumerate", "line.rstrip().split.rstrip().split.rstrip().split", "[].append", "[].append", "range", "line[].split", "len", "line.rstrip().split.rstrip().split.rstrip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "self", ".", "tok2split", "=", "{", "'tr'", ":", "'train'", ",", "'va'", ":", "'dev'", ",", "'te'", ":", "'test'", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "task_data", "[", "self", ".", "tok2split", "[", "line", "[", "0", "]", "]", "]", "[", "'X'", "]", ".", "append", "(", "line", "[", "-", "1", "]", ".", "split", "(", ")", ")", "\n", "self", ".", "task_data", "[", "self", ".", "tok2split", "[", "line", "[", "0", "]", "]", "]", "[", "'y'", "]", ".", "append", "(", "line", "[", "1", "]", ")", "\n", "\n", "", "", "labels", "=", "sorted", "(", "np", ".", "unique", "(", "self", ".", "task_data", "[", "'train'", "]", "[", "'y'", "]", ")", ")", "\n", "self", ".", "tok2label", "=", "dict", "(", "zip", "(", "labels", ",", "range", "(", "len", "(", "labels", ")", ")", ")", ")", "\n", "self", ".", "nclasses", "=", "len", "(", "self", ".", "tok2label", ")", "\n", "\n", "for", "split", "in", "self", ".", "task_data", ":", "\n", "            ", "for", "i", ",", "y", "in", "enumerate", "(", "self", ".", "task_data", "[", "split", "]", "[", "'y'", "]", ")", ":", "\n", "                ", "self", ".", "task_data", "[", "split", "]", "[", "'y'", "]", "[", "i", "]", "=", "self", ".", "tok2label", "[", "y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.PROBINGEval.run": [[57, 100], ["logging.info", "logging.info", "senteval.tools.validation.SplitClassifier", "senteval.tools.validation.SplitClassifier.run", "logging.debug", "sorted", "map", "range", "numpy.vstack", "numpy.array", "copy.deepcopy", "print", "len", "len", "zip", "zip", "len", "batcher", "[].append", "probing.PROBINGEval.task.upper", "len"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.run"], ["", "", "", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "task_embed", "=", "{", "'train'", ":", "{", "}", ",", "'dev'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "bsize", "=", "params", ".", "batch_size", "\n", "logging", ".", "info", "(", "'Computing embeddings for train/dev/test'", ")", "\n", "for", "key", "in", "self", ".", "task_data", ":", "\n", "# Sort to reduce padding", "\n", "            ", "sorted_data", "=", "sorted", "(", "zip", "(", "self", ".", "task_data", "[", "key", "]", "[", "'X'", "]", ",", "\n", "self", ".", "task_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "z", "[", "1", "]", ")", ")", "\n", "self", ".", "task_data", "[", "key", "]", "[", "'X'", "]", ",", "self", ".", "task_data", "[", "key", "]", "[", "'y'", "]", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_data", ")", ")", "\n", "\n", "task_embed", "[", "key", "]", "[", "'X'", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "self", ".", "task_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "bsize", ")", ":", "\n", "                ", "batch", "=", "self", ".", "task_data", "[", "key", "]", "[", "'X'", "]", "[", "ii", ":", "ii", "+", "bsize", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "task_embed", "[", "key", "]", "[", "'X'", "]", ".", "append", "(", "embeddings", ")", "\n", "", "task_embed", "[", "key", "]", "[", "'X'", "]", "=", "np", ".", "vstack", "(", "task_embed", "[", "key", "]", "[", "'X'", "]", ")", "\n", "task_embed", "[", "key", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "self", ".", "task_data", "[", "key", "]", "[", "'y'", "]", ")", "\n", "", "logging", ".", "info", "(", "'Computed embeddings'", ")", "\n", "\n", "config_classifier", "=", "{", "'nclasses'", ":", "self", ".", "nclasses", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", "}", "\n", "\n", "if", "self", ".", "task", "==", "\"WordContent\"", "and", "params", ".", "classifier", "[", "'nhid'", "]", ">", "0", ":", "\n", "            ", "config_classifier", "=", "copy", ".", "deepcopy", "(", "config_classifier", ")", "\n", "config_classifier", "[", "'classifier'", "]", "[", "'nhid'", "]", "=", "0", "\n", "print", "(", "params", ".", "classifier", "[", "'nhid'", "]", ")", "\n", "\n", "", "clf", "=", "SplitClassifier", "(", "X", "=", "{", "'train'", ":", "task_embed", "[", "'train'", "]", "[", "'X'", "]", ",", "\n", "'valid'", ":", "task_embed", "[", "'dev'", "]", "[", "'X'", "]", ",", "\n", "'test'", ":", "task_embed", "[", "'test'", "]", "[", "'X'", "]", "}", ",", "\n", "y", "=", "{", "'train'", ":", "task_embed", "[", "'train'", "]", "[", "'y'", "]", ",", "\n", "'valid'", ":", "task_embed", "[", "'dev'", "]", "[", "'y'", "]", ",", "\n", "'test'", ":", "task_embed", "[", "'test'", "]", "[", "'y'", "]", "}", ",", "\n", "config", "=", "config_classifier", ")", "\n", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'\\nDev acc : %.1f Test acc : %.1f for %s classification\\n'", "%", "(", "devacc", ",", "testacc", ",", "self", ".", "task", ".", "upper", "(", ")", ")", ")", "\n", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "task_embed", "[", "'dev'", "]", "[", "'X'", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "task_embed", "[", "'test'", "]", "[", "'X'", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.LengthEval.__init__": [[105, 109], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sentence_length.txt'", ")", "\n", "# labels: bins", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'Length'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.WordContentEval.__init__": [[111, 115], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'word_content.txt'", ")", "\n", "# labels: 200 target words", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'WordContent'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.DepthEval.__init__": [[120, 124], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'tree_depth.txt'", ")", "\n", "# labels: bins", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'Depth'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.TopConstituentsEval.__init__": [[126, 130], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'top_constituents.txt'", ")", "\n", "# labels: 'PP_NP_VP_.' .. (20 classes)", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'TopConstituents'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.BigramShiftEval.__init__": [[132, 136], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'bigram_shift.txt'", ")", "\n", "# labels: 0 or 1", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'BigramShift'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.TenseEval.__init__": [[144, 148], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'past_present.txt'", ")", "\n", "# labels: 'PRES', 'PAST'", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'Tense'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.SubjNumberEval.__init__": [[150, 154], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'subj_number.txt'", ")", "\n", "# labels: 'NN', 'NNS'", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'SubjNumber'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.ObjNumberEval.__init__": [[156, 160], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'obj_number.txt'", ")", "\n", "# labels: 'NN', 'NNS'", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'ObjNumber'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.OddManOutEval.__init__": [[162, 166], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'odd_man_out.txt'", ")", "\n", "# labels: 'O', 'C'", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'OddManOut'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.probing.CoordinationInversionEval.__init__": [[168, 172], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'coordination_inversion.txt'", ")", "\n", "# labels: 'O', 'I'", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'CoordinationInversion'", ",", "task_path", ",", "seed", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.binary.BinaryClassifierEval.__init__": [[22, 26], ["len", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pos", ",", "neg", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "self", ".", "samples", ",", "self", ".", "labels", "=", "pos", "+", "neg", ",", "[", "1", "]", "*", "len", "(", "pos", ")", "+", "[", "0", "]", "*", "len", "(", "neg", ")", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.binary.BinaryClassifierEval.do_prepare": [[27, 30], ["prepare"], "methods", ["None"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "# prepare is given the whole text", "\n", "        ", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "# prepare puts everything it outputs in \"params\" : params.word2id etc", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.binary.BinaryClassifierEval.loadFile": [[33, 36], ["io.open", "line.split", "f.read().splitlines", "f.read"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'latin-1'", ")", "as", "f", ":", "\n", "            ", "return", "[", "line", ".", "split", "(", ")", "for", "line", "in", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.binary.BinaryClassifierEval.run": [[37, 61], ["sorted", "logging.info", "range", "numpy.vstack", "logging.info", "senteval.tools.validation.InnerKFoldClassifier", "senteval.tools.validation.InnerKFoldClassifier.run", "logging.debug", "zip", "batcher", "numpy.vstack.append", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.run"], ["", "", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "enc_input", "=", "[", "]", "\n", "# Sort to reduce padding", "\n", "sorted_corpus", "=", "sorted", "(", "zip", "(", "self", ".", "samples", ",", "self", ".", "labels", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "z", "[", "1", "]", ")", ")", "\n", "sorted_samples", "=", "[", "x", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus", "]", "\n", "sorted_labels", "=", "[", "y", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus", "]", "\n", "logging", ".", "info", "(", "'Generating sentence embeddings'", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "self", ".", "n_samples", ",", "params", ".", "batch_size", ")", ":", "\n", "            ", "batch", "=", "sorted_samples", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "enc_input", ".", "append", "(", "embeddings", ")", "\n", "", "enc_input", "=", "np", ".", "vstack", "(", "enc_input", ")", "\n", "logging", ".", "info", "(", "'Generated sentence embeddings'", ")", "\n", "\n", "config", "=", "{", "'nclasses'", ":", "2", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", ",", "\n", "'nhid'", ":", "params", ".", "nhid", ",", "'kfold'", ":", "params", ".", "kfold", "}", "\n", "clf", "=", "InnerKFoldClassifier", "(", "enc_input", ",", "np", ".", "array", "(", "sorted_labels", ")", ",", "config", ")", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'Dev acc : {0} Test acc : {1}\\n'", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "'ndev'", ":", "self", ".", "n_samples", ",", "\n", "'ntest'", ":", "self", ".", "n_samples", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.binary.CREval.__init__": [[64, 69], ["logging.debug", "binary.CREval.loadFile", "binary.CREval.loadFile", "binary.BinaryClassifierEval.__init__", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : CR *****\\n\\n'", ")", "\n", "pos", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'custrev.pos'", ")", ")", "\n", "neg", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'custrev.neg'", ")", ")", "\n", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "pos", ",", "neg", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.binary.MREval.__init__": [[72, 77], ["logging.debug", "binary.MREval.loadFile", "binary.MREval.loadFile", "binary.BinaryClassifierEval.__init__", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : MR *****\\n\\n'", ")", "\n", "pos", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'rt-polarity.pos'", ")", ")", "\n", "neg", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'rt-polarity.neg'", ")", ")", "\n", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "pos", ",", "neg", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.binary.SUBJEval.__init__": [[80, 85], ["logging.debug", "binary.SUBJEval.loadFile", "binary.SUBJEval.loadFile", "binary.BinaryClassifierEval.__init__", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : SUBJ *****\\n\\n'", ")", "\n", "obj", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'subj.objective'", ")", ")", "\n", "subj", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'subj.subjective'", ")", ")", "\n", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "obj", ",", "subj", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.binary.MPQAEval.__init__": [[88, 93], ["logging.debug", "binary.MPQAEval.loadFile", "binary.MPQAEval.loadFile", "binary.BinaryClassifierEval.__init__", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : MPQA *****\\n\\n'", ")", "\n", "pos", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'mpqa.pos'", ")", ")", "\n", "neg", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'mpqa.neg'", ")", ")", "\n", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "pos", ",", "neg", ",", "seed", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STSEval.loadFile": [[27, 51], ["zip", "numpy.array", "sorted", "map", "float", "numpy.array", "numpy.array", "zip", "zip", "l.split", "io.open().read().splitlines", "s.split", "s.split", "io.open().read().splitlines", "len", "len", "io.open().read", "io.open().read", "io.open", "io.open"], "methods", ["None"], ["    ", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "self", ".", "data", "=", "{", "}", "\n", "self", ".", "samples", "=", "[", "]", "\n", "\n", "for", "dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "sent1", ",", "sent2", "=", "zip", "(", "*", "[", "l", ".", "split", "(", "\"\\t\"", ")", "for", "l", "in", "\n", "io", ".", "open", "(", "fpath", "+", "'/STS.input.%s.txt'", "%", "dataset", ",", "\n", "encoding", "=", "'utf8'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "]", ")", "\n", "raw_scores", "=", "np", ".", "array", "(", "[", "x", "for", "x", "in", "\n", "io", ".", "open", "(", "fpath", "+", "'/STS.gs.%s.txt'", "%", "dataset", ",", "\n", "encoding", "=", "'utf8'", ")", "\n", ".", "read", "(", ")", ".", "splitlines", "(", ")", "]", ")", "\n", "not_empty_idx", "=", "raw_scores", "!=", "''", "\n", "\n", "gs_scores", "=", "[", "float", "(", "x", ")", "for", "x", "in", "raw_scores", "[", "not_empty_idx", "]", "]", "\n", "sent1", "=", "np", ".", "array", "(", "[", "s", ".", "split", "(", ")", "for", "s", "in", "sent1", "]", ")", "[", "not_empty_idx", "]", "\n", "sent2", "=", "np", ".", "array", "(", "[", "s", ".", "split", "(", ")", "for", "s", "in", "sent2", "]", ")", "[", "not_empty_idx", "]", "\n", "# sort data by length to minimize padding in batcher", "\n", "sorted_data", "=", "sorted", "(", "zip", "(", "sent1", ",", "sent2", ",", "gs_scores", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "sent1", ",", "sent2", ",", "gs_scores", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_data", ")", ")", "\n", "\n", "self", ".", "data", "[", "dataset", "]", "=", "(", "sent1", ",", "sent2", ",", "gs_scores", ")", "\n", "self", ".", "samples", "+=", "sent1", "+", "sent2", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STSEval.do_prepare": [[52, 58], ["prepare", "numpy.nan_to_num", "senteval.utils.cosine", "numpy.nan_to_num", "numpy.nan_to_num"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.utils.cosine"], ["", "", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "if", "'similarity'", "in", "params", ":", "\n", "            ", "self", ".", "similarity", "=", "params", ".", "similarity", "\n", "", "else", ":", "# Default similarity is cosine", "\n", "            ", "self", ".", "similarity", "=", "lambda", "s1", ",", "s2", ":", "np", ".", "nan_to_num", "(", "cosine", "(", "np", ".", "nan_to_num", "(", "s1", ")", ",", "np", ".", "nan_to_num", "(", "s2", ")", ")", ")", "\n", "", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STSEval.run": [[59, 113], ["numpy.array", "numpy.array", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "scipy.stats.pearsonr", "scipy.stats.spearmanr", "logging.debug", "logging.debug", "logging.debug", "range", "all_sys_scores.extend", "all_gs_scores.extend", "logging.debug", "len", "scipy.stats.pearsonr", "scipy.stats.spearmanr", "len", "results.keys", "batcher", "batcher", "range", "results.keys", "results.keys", "len", "len", "len", "sts.STSEval.similarity", "sys_scores.append"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "all_sys_scores", "=", "[", "]", "\n", "all_gs_scores", "=", "[", "]", "\n", "for", "dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "sys_scores", "=", "[", "]", "\n", "input1", ",", "input2", ",", "gs_scores", "=", "self", ".", "data", "[", "dataset", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "gs_scores", ")", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch1", "=", "input1", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "batch2", "=", "input2", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "\n", "# we assume get_batch already throws out the faulty ones", "\n", "if", "len", "(", "batch1", ")", "==", "len", "(", "batch2", ")", "and", "len", "(", "batch1", ")", ">", "0", ":", "\n", "                    ", "enc1", "=", "batcher", "(", "params", ",", "batch1", ")", "\n", "enc2", "=", "batcher", "(", "params", ",", "batch2", ")", "\n", "\n", "for", "kk", "in", "range", "(", "enc2", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "sys_score", "=", "self", ".", "similarity", "(", "enc1", "[", "kk", "]", ",", "enc2", "[", "kk", "]", ")", "\n", "sys_scores", ".", "append", "(", "sys_score", ")", "\n", "", "", "", "all_sys_scores", ".", "extend", "(", "sys_scores", ")", "\n", "all_gs_scores", ".", "extend", "(", "gs_scores", ")", "\n", "results", "[", "dataset", "]", "=", "{", "'pearson'", ":", "pearsonr", "(", "sys_scores", ",", "gs_scores", ")", ",", "\n", "'spearman'", ":", "spearmanr", "(", "sys_scores", ",", "gs_scores", ")", ",", "\n", "'nsamples'", ":", "len", "(", "sys_scores", ")", "}", "\n", "logging", ".", "debug", "(", "'%s : pearson = %.4f, spearman = %.4f'", "%", "\n", "(", "dataset", ",", "results", "[", "dataset", "]", "[", "'pearson'", "]", "[", "0", "]", ",", "\n", "results", "[", "dataset", "]", "[", "'spearman'", "]", "[", "0", "]", ")", ")", "\n", "\n", "", "weights", "=", "[", "results", "[", "dset", "]", "[", "'nsamples'", "]", "for", "dset", "in", "results", ".", "keys", "(", ")", "]", "\n", "list_prs", "=", "np", ".", "array", "(", "[", "results", "[", "dset", "]", "[", "'pearson'", "]", "[", "0", "]", "for", "\n", "dset", "in", "results", ".", "keys", "(", ")", "]", ")", "\n", "list_spr", "=", "np", ".", "array", "(", "[", "results", "[", "dset", "]", "[", "'spearman'", "]", "[", "0", "]", "for", "\n", "dset", "in", "results", ".", "keys", "(", ")", "]", ")", "\n", "\n", "avg_pearson", "=", "np", ".", "average", "(", "list_prs", ")", "\n", "avg_spearman", "=", "np", ".", "average", "(", "list_spr", ")", "\n", "wavg_pearson", "=", "np", ".", "average", "(", "list_prs", ",", "weights", "=", "weights", ")", "\n", "wavg_spearman", "=", "np", ".", "average", "(", "list_spr", ",", "weights", "=", "weights", ")", "\n", "all_pearson", "=", "pearsonr", "(", "all_sys_scores", ",", "all_gs_scores", ")", "\n", "all_spearman", "=", "spearmanr", "(", "all_sys_scores", ",", "all_gs_scores", ")", "\n", "results", "[", "'all'", "]", "=", "{", "'pearson'", ":", "{", "'all'", ":", "all_pearson", "[", "0", "]", ",", "\n", "'mean'", ":", "avg_pearson", ",", "\n", "'wmean'", ":", "wavg_pearson", "}", ",", "\n", "'spearman'", ":", "{", "'all'", ":", "all_spearman", "[", "0", "]", ",", "\n", "'mean'", ":", "avg_spearman", ",", "\n", "'wmean'", ":", "wavg_spearman", "}", "}", "\n", "logging", ".", "debug", "(", "'ALL : Pearson = %.4f, \\\n            Spearman = %.4f'", "%", "(", "all_pearson", "[", "0", "]", ",", "all_spearman", "[", "0", "]", ")", ")", "\n", "logging", ".", "debug", "(", "'ALL (weighted average) : Pearson = %.4f, \\\n            Spearman = %.4f'", "%", "(", "wavg_pearson", ",", "wavg_spearman", ")", ")", "\n", "logging", ".", "debug", "(", "'ALL (average) : Pearson = %.4f, \\\n            Spearman = %.4f\\n'", "%", "(", "avg_pearson", ",", "avg_spearman", ")", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STS12Eval.__init__": [[116, 122], ["logging.debug", "sts.STS12Eval.loadFile"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : STS12 *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "datasets", "=", "[", "'MSRpar'", ",", "'MSRvid'", ",", "'SMTeuroparl'", ",", "\n", "'surprise.OnWN'", ",", "'surprise.SMTnews'", "]", "\n", "self", ".", "loadFile", "(", "taskpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STS13Eval.__init__": [[126, 131], ["logging.debug", "sts.STS13Eval.loadFile"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : STS13 (-SMT) *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "datasets", "=", "[", "'FNWN'", ",", "'headlines'", ",", "'OnWN'", "]", "\n", "self", ".", "loadFile", "(", "taskpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STS14Eval.__init__": [[134, 140], ["logging.debug", "sts.STS14Eval.loadFile"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : STS14 *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "datasets", "=", "[", "'deft-forum'", ",", "'deft-news'", ",", "'headlines'", ",", "\n", "'images'", ",", "'OnWN'", ",", "'tweet-news'", "]", "\n", "self", ".", "loadFile", "(", "taskpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STS15Eval.__init__": [[143, 149], ["logging.debug", "sts.STS15Eval.loadFile"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : STS15 *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "datasets", "=", "[", "'answers-forums'", ",", "'answers-students'", ",", "\n", "'belief'", ",", "'headlines'", ",", "'images'", "]", "\n", "self", ".", "loadFile", "(", "taskpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STS16Eval.__init__": [[152, 158], ["logging.debug", "sts.STS16Eval.loadFile"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : STS16 *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "datasets", "=", "[", "'answer-answer'", ",", "'headlines'", ",", "'plagiarism'", ",", "\n", "'postediting'", ",", "'question-question'", "]", "\n", "self", ".", "loadFile", "(", "taskpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STSBenchmarkEval.__init__": [[161, 170], ["logging.debug", "sts.STSBenchmarkEval.loadFile", "sts.STSBenchmarkEval.loadFile", "sts.STSBenchmarkEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'\\n\\n***** Transfer task : STSBenchmark*****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "samples", "=", "[", "]", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sts-train.csv'", ")", ")", "\n", "dev", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sts-dev.csv'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sts-test.csv'", ")", ")", "\n", "self", ".", "datasets", "=", "[", "'train'", ",", "'dev'", ",", "'test'", "]", "\n", "self", ".", "data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STSBenchmarkEval.loadFile": [[171, 183], ["io.open", "float", "line.strip().split", "sick_data[].append", "sick_data[].append", "sick_data[].append", "text[].split", "text[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "sick_data", "=", "{", "'X_A'", ":", "[", "]", ",", "'X_B'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "text", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sick_data", "[", "'X_A'", "]", ".", "append", "(", "text", "[", "5", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'X_B'", "]", ".", "append", "(", "text", "[", "6", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'y'", "]", ".", "append", "(", "text", "[", "4", "]", ")", "\n", "\n", "", "", "sick_data", "[", "'y'", "]", "=", "[", "float", "(", "s", ")", "for", "s", "in", "sick_data", "[", "'y'", "]", "]", "\n", "self", ".", "samples", "+=", "sick_data", "[", "'X_A'", "]", "+", "sick_data", "[", "\"X_B\"", "]", "\n", "return", "(", "sick_data", "[", "'X_A'", "]", ",", "sick_data", "[", "\"X_B\"", "]", ",", "sick_data", "[", "'y'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STSBenchmarkFinetune.__init__": [[185, 192], ["logging.debug", "sts.STSBenchmarkFinetune.loadFile", "sts.STSBenchmarkFinetune.loadFile", "sts.STSBenchmarkFinetune.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'\\n\\n***** Transfer task : STSBenchmark*****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sts-train.csv'", ")", ")", "\n", "dev", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sts-dev.csv'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sts-test.csv'", ")", ")", "\n", "self", ".", "sick_data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.STSBenchmarkFinetune.loadFile": [[193, 204], ["io.open", "float", "line.strip().split", "sick_data[].append", "sick_data[].append", "sick_data[].append", "text[].split", "text[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "sick_data", "=", "{", "'X_A'", ":", "[", "]", ",", "'X_B'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "text", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sick_data", "[", "'X_A'", "]", ".", "append", "(", "text", "[", "5", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'X_B'", "]", ".", "append", "(", "text", "[", "6", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'y'", "]", ".", "append", "(", "text", "[", "4", "]", ")", "\n", "\n", "", "", "sick_data", "[", "'y'", "]", "=", "[", "float", "(", "s", ")", "for", "s", "in", "sick_data", "[", "'y'", "]", "]", "\n", "return", "sick_data", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.__init__": [[206, 215], ["logging.debug", "sts.SICKRelatednessEval.loadFile", "sts.SICKRelatednessEval.loadFile", "sts.SICKRelatednessEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'\\n\\n***** Transfer task : SICKRelatedness*****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "samples", "=", "[", "]", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_train.txt'", ")", ")", "\n", "dev", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_trial.txt'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_test_annotated.txt'", ")", ")", "\n", "self", ".", "datasets", "=", "[", "'train'", ",", "'dev'", ",", "'test'", "]", "\n", "self", ".", "data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.sts.SICKRelatednessEval.loadFile": [[216, 232], ["io.open", "float", "line.strip().split", "sick_data[].append", "sick_data[].append", "sick_data[].append", "text[].split", "text[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "skipFirstLine", "=", "True", "\n", "sick_data", "=", "{", "'X_A'", ":", "[", "]", ",", "'X_B'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "if", "skipFirstLine", ":", "\n", "                    ", "skipFirstLine", "=", "False", "\n", "", "else", ":", "\n", "                    ", "text", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sick_data", "[", "'X_A'", "]", ".", "append", "(", "text", "[", "1", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'X_B'", "]", ".", "append", "(", "text", "[", "2", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'y'", "]", ".", "append", "(", "text", "[", "3", "]", ")", "\n", "\n", "", "", "", "sick_data", "[", "'y'", "]", "=", "[", "float", "(", "s", ")", "for", "s", "in", "sick_data", "[", "'y'", "]", "]", "\n", "self", ".", "samples", "+=", "sick_data", "[", "'X_A'", "]", "+", "sick_data", "[", "\"X_B\"", "]", "\n", "return", "(", "sick_data", "[", "'X_A'", "]", ",", "sick_data", "[", "\"X_B\"", "]", ",", "sick_data", "[", "'y'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.utils.create_dictionary": [[16, 36], ["sorted", "enumerate", "words.items", "id2word.append"], "function", ["None"], ["", "def", "setup_path", "(", "args", ")", ":", "\n", "    ", "resPath", "=", "args", ".", "mode", "\n", "resPath", "+=", "f'.{args.contrast_type}'", "\n", "resPath", "+=", "f'.epoch{args.epochs}'", "\n", "resPath", "+=", "f'.{args.bert}'", "\n", "resPath", "+=", "f'.{args.dataname}'", "\n", "resPath", "+=", "f'.lr{args.lr}'", "\n", "resPath", "+=", "f'.lrscale{args.lr_scale}'", "\n", "resPath", "+=", "f'.bs{args.batch_size}'", "\n", "resPath", "+=", "f'.tmp{args.temperature}'", "\n", "resPath", "+=", "f'.beta{args.beta}'", "\n", "resPath", "+=", "f'.seed{args.seed}/'", "\n", "resPath", "=", "args", ".", "resdir", "+", "resPath", "\n", "print", "(", "f'results path: {resPath}'", ")", "\n", "\n", "tensorboard", "=", "SummaryWriter", "(", "resPath", ")", "\n", "return", "resPath", ",", "tensorboard", "\n", "\n", "\n", "", "def", "statistics_log", "(", "tensorboard", ",", "losses", "=", "None", ",", "global_step", "=", "0", ")", ":", "\n", "    ", "print", "(", "\"[{}]-----\"", ".", "format", "(", "global_step", ")", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.utils.cosine": [[38, 40], ["numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["        ", "for", "key", ",", "val", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "tensorboard", ".", "add_scalar", "(", "'train/'", "+", "key", ",", "val", ".", "item", "(", ")", ",", "global_step", ")", "\n", "print", "(", "\"{}:\\t {:.3f}\"", ".", "format", "(", "key", ",", "val", ".", "item", "(", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.utils.get_optimizer": [[49, 96], ["s[].split", "inspect.getargspec", "all", "Exception", "x.split", "float", "s.find", "len", "re.match", "optim_params.keys", "str", "str", "optim_params.keys", "s.find", "Exception"], "function", ["None"], []], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.COCOProjNet.__init__": [[24, 34], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "COCOProjNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "imgdim", "=", "config", "[", "'imgdim'", "]", "\n", "self", ".", "sentdim", "=", "config", "[", "'sentdim'", "]", "\n", "self", ".", "projdim", "=", "config", "[", "'projdim'", "]", "\n", "self", ".", "imgproj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "imgdim", ",", "self", ".", "projdim", ")", ",", "\n", ")", "\n", "self", ".", "sentproj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "sentdim", ",", "self", ".", "projdim", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.COCOProjNet.forward": [[36, 65], ["img.view.view.unsqueeze().expand_as().contiguous", "img.view.view.view", "imgc.view.view.view", "sent.view.view.unsqueeze().expand_as().contiguous", "sent.view.view.view", "sentc.view.view.view", "ranking.COCOProjNet.imgproj", "ranking.COCOProjNet.imgproj", "ranking.COCOProjNet.sentproj", "ranking.COCOProjNet.sentproj", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "img.view.view.unsqueeze().expand_as", "sent.view.view.unsqueeze().expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "img.view.view.unsqueeze", "sent.view.view.unsqueeze", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "sent", ",", "imgc", ",", "sentc", ")", ":", "\n", "# imgc : (bsize, ncontrast, imgdim)", "\n", "# sentc : (bsize, ncontrast, sentdim)", "\n", "# img : (bsize, imgdim)", "\n", "# sent : (bsize, sentdim)", "\n", "        ", "img", "=", "img", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "imgc", ")", ".", "contiguous", "(", ")", "\n", "img", "=", "img", ".", "view", "(", "-", "1", ",", "self", ".", "imgdim", ")", "\n", "imgc", "=", "imgc", ".", "view", "(", "-", "1", ",", "self", ".", "imgdim", ")", "\n", "sent", "=", "sent", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "sentc", ")", ".", "contiguous", "(", ")", "\n", "sent", "=", "sent", ".", "view", "(", "-", "1", ",", "self", ".", "sentdim", ")", "\n", "sentc", "=", "sentc", ".", "view", "(", "-", "1", ",", "self", ".", "sentdim", ")", "\n", "\n", "imgproj", "=", "self", ".", "imgproj", "(", "img", ")", "\n", "imgproj", "=", "imgproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "imgproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "imgproj", ")", "\n", "imgcproj", "=", "self", ".", "imgproj", "(", "imgc", ")", "\n", "imgcproj", "=", "imgcproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "imgcproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "imgcproj", ")", "\n", "sentproj", "=", "self", ".", "sentproj", "(", "sent", ")", "\n", "sentproj", "=", "sentproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "sentproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "sentproj", ")", "\n", "sentcproj", "=", "self", ".", "sentproj", "(", "sentc", ")", "\n", "sentcproj", "=", "sentcproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "sentcproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "sentcproj", ")", "\n", "# (bsize*ncontrast, projdim)", "\n", "\n", "anchor1", "=", "torch", ".", "sum", "(", "(", "imgproj", "*", "sentproj", ")", ",", "1", ")", "\n", "anchor2", "=", "torch", ".", "sum", "(", "(", "sentproj", "*", "imgproj", ")", ",", "1", ")", "\n", "img_sentc", "=", "torch", ".", "sum", "(", "(", "imgproj", "*", "sentcproj", ")", ",", "1", ")", "\n", "sent_imgc", "=", "torch", ".", "sum", "(", "(", "sentproj", "*", "imgcproj", ")", ",", "1", ")", "\n", "\n", "# (bsize*ncontrast)", "\n", "return", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.COCOProjNet.proj_sentence": [[66, 70], ["ranking.COCOProjNet.sentproj", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "proj_sentence", "(", "self", ",", "sent", ")", ":", "\n", "        ", "output", "=", "self", ".", "sentproj", "(", "sent", ")", "\n", "output", "=", "output", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "output", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "output", ")", "\n", "return", "output", "# (bsize, projdim)", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.COCOProjNet.proj_image": [[71, 75], ["ranking.COCOProjNet.imgproj", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "proj_image", "(", "self", ",", "img", ")", ":", "\n", "        ", "output", "=", "self", ".", "imgproj", "(", "img", ")", "\n", "output", "=", "output", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "output", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "output", ")", "\n", "return", "output", "# (bsize, projdim)", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.PairwiseRankingLoss.__init__": [[81, 84], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__"], ["def", "__init__", "(", "self", ",", "margin", ")", ":", "\n", "        ", "super", "(", "PairwiseRankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.PairwiseRankingLoss.forward": [[85, 93], ["torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", ")", ":", "\n", "\n", "        ", "cost_sent", "=", "torch", ".", "clamp", "(", "self", ".", "margin", "-", "anchor1", "+", "img_sentc", ",", "\n", "min", "=", "0.0", ")", ".", "sum", "(", ")", "\n", "cost_img", "=", "torch", ".", "clamp", "(", "self", ".", "margin", "-", "anchor2", "+", "sent_imgc", ",", "\n", "min", "=", "0.0", ")", ".", "sum", "(", ")", "\n", "loss", "=", "cost_sent", "+", "cost_img", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.__init__": [[97, 125], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "len", "len", "COCOProjNet().cuda", "PairwiseRankingLoss().cuda", "torch.Adam", "torch.Adam", "ranking.ImageSentenceRankingPytorch.model.parameters", "ranking.COCOProjNet", "ranking.PairwiseRankingLoss"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "valid", ",", "test", ",", "config", ")", ":", "\n", "# fix seed", "\n", "        ", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "valid", "=", "valid", "\n", "self", ".", "test", "=", "test", "\n", "\n", "self", ".", "imgdim", "=", "len", "(", "train", "[", "'imgfeat'", "]", "[", "0", "]", ")", "\n", "self", ".", "sentdim", "=", "len", "(", "train", "[", "'sentfeat'", "]", "[", "0", "]", ")", "\n", "self", ".", "projdim", "=", "config", "[", "'projdim'", "]", "\n", "self", ".", "margin", "=", "config", "[", "'margin'", "]", "\n", "\n", "self", ".", "batch_size", "=", "128", "\n", "self", ".", "ncontrast", "=", "30", "\n", "self", ".", "maxepoch", "=", "20", "\n", "self", ".", "early_stop", "=", "True", "\n", "\n", "config_model", "=", "{", "'imgdim'", ":", "self", ".", "imgdim", ",", "'sentdim'", ":", "self", ".", "sentdim", ",", "\n", "'projdim'", ":", "self", ".", "projdim", "}", "\n", "self", ".", "model", "=", "COCOProjNet", "(", "config_model", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "loss_fn", "=", "PairwiseRankingLoss", "(", "margin", "=", "self", ".", "margin", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.prepare_data": [[126, 136], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["", "def", "prepare_data", "(", "self", ",", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "\n", "testTxt", ",", "testImg", ")", ":", "\n", "        ", "trainTxt", "=", "torch", ".", "FloatTensor", "(", "trainTxt", ")", "\n", "trainImg", "=", "torch", ".", "FloatTensor", "(", "trainImg", ")", "\n", "devTxt", "=", "torch", ".", "FloatTensor", "(", "devTxt", ")", ".", "cuda", "(", ")", "\n", "devImg", "=", "torch", ".", "FloatTensor", "(", "devImg", ")", ".", "cuda", "(", ")", "\n", "testTxt", "=", "torch", ".", "FloatTensor", "(", "testTxt", ")", ".", "cuda", "(", ")", "\n", "testImg", "=", "torch", ".", "FloatTensor", "(", "testImg", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "testTxt", ",", "testImg", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.run": [[137, 225], ["logging.info", "ranking.ImageSentenceRankingPytorch.prepare_data", "range", "logging.info", "ranking.ImageSentenceRankingPytorch.trainepoch", "logging.info", "range", "logging.info", "logging.info", "ranking.ImageSentenceRankingPytorch.i2t", "ranking.ImageSentenceRankingPytorch.t2i", "ranking.ImageSentenceRankingPytorch.i2t", "logging.info", "ranking.ImageSentenceRankingPytorch.t2i", "logging.info", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.relatedness.RelatednessPytorch.prepare_data", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.trainepoch", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.i2t", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.t2i", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.i2t", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.t2i"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "nepoch", "=", "0", "\n", "bestdevscore", "=", "-", "1", "\n", "early_stop_count", "=", "0", "\n", "stop_train", "=", "False", "\n", "\n", "# Preparing data", "\n", "logging", ".", "info", "(", "'prepare data'", ")", "\n", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "testTxt", ",", "testImg", "=", "self", ".", "prepare_data", "(", "self", ".", "train", "[", "'sentfeat'", "]", ",", "self", ".", "train", "[", "'imgfeat'", "]", ",", "\n", "self", ".", "valid", "[", "'sentfeat'", "]", ",", "self", ".", "valid", "[", "'imgfeat'", "]", ",", "\n", "self", ".", "test", "[", "'sentfeat'", "]", ",", "self", ".", "test", "[", "'imgfeat'", "]", ")", "\n", "\n", "# Training", "\n", "while", "not", "stop_train", "and", "self", ".", "nepoch", "<=", "self", ".", "maxepoch", ":", "\n", "            ", "logging", ".", "info", "(", "'start epoch'", ")", "\n", "self", ".", "trainepoch", "(", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "nepoches", "=", "1", ")", "\n", "logging", ".", "info", "(", "'Epoch {0} finished'", ".", "format", "(", "self", ".", "nepoch", ")", ")", "\n", "\n", "results", "=", "{", "'i2t'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'t2i'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'dev'", ":", "bestdevscore", "}", "\n", "score", "=", "0", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "devTxt_i", "=", "devTxt", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "devImg_i", "=", "devImg", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "# Compute dev ranks img2txt", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", "=", "self", ".", "i2t", "(", "devImg_i", ",", "\n", "devTxt_i", ")", "\n", "results", "[", "'i2t'", "]", "[", "'r1'", "]", "+=", "r1_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r5'", "]", "+=", "r5_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r10'", "]", "+=", "r10_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'medr'", "]", "+=", "medr_i2t", "/", "5", "\n", "logging", ".", "info", "(", "\"Image to text: {0}, {1}, {2}, {3}\"", "\n", ".", "format", "(", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ")", ")", "\n", "# Compute dev ranks txt2img", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", "=", "self", ".", "t2i", "(", "devImg_i", ",", "\n", "devTxt_i", ")", "\n", "results", "[", "'t2i'", "]", "[", "'r1'", "]", "+=", "r1_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r5'", "]", "+=", "r5_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r10'", "]", "+=", "r10_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'medr'", "]", "+=", "medr_t2i", "/", "5", "\n", "logging", ".", "info", "(", "\"Text to Image: {0}, {1}, {2}, {3}\"", "\n", ".", "format", "(", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", ")", ")", "\n", "score", "+=", "(", "r1_i2t", "+", "r5_i2t", "+", "r10_i2t", "+", "\n", "r1_t2i", "+", "r5_t2i", "+", "r10_t2i", ")", "/", "5", "\n", "\n", "", "logging", ".", "info", "(", "\"Dev mean Text to Image: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "results", "[", "'t2i'", "]", "[", "'r1'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r5'", "]", ",", "\n", "results", "[", "'t2i'", "]", "[", "'r10'", "]", ",", "results", "[", "'t2i'", "]", "[", "'medr'", "]", ")", ")", "\n", "logging", ".", "info", "(", "\"Dev mean Image to text: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "results", "[", "'i2t'", "]", "[", "'r1'", "]", ",", "results", "[", "'i2t'", "]", "[", "'r5'", "]", ",", "\n", "results", "[", "'i2t'", "]", "[", "'r10'", "]", ",", "results", "[", "'i2t'", "]", "[", "'medr'", "]", ")", ")", "\n", "\n", "# early stop on Pearson", "\n", "if", "score", ">", "bestdevscore", ":", "\n", "                ", "bestdevscore", "=", "score", "\n", "bestmodel", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "elif", "self", ".", "early_stop", ":", "\n", "                ", "if", "early_stop_count", ">=", "3", ":", "\n", "                    ", "stop_train", "=", "True", "\n", "", "early_stop_count", "+=", "1", "\n", "", "", "self", ".", "model", "=", "bestmodel", "\n", "\n", "# Compute test for the 5 splits", "\n", "results", "=", "{", "'i2t'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'t2i'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'dev'", ":", "bestdevscore", "}", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "testTxt_i", "=", "testTxt", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "testImg_i", "=", "testImg", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "# Compute test ranks img2txt", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", "=", "self", ".", "i2t", "(", "testImg_i", ",", "testTxt_i", ")", "\n", "results", "[", "'i2t'", "]", "[", "'r1'", "]", "+=", "r1_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r5'", "]", "+=", "r5_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r10'", "]", "+=", "r10_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'medr'", "]", "+=", "medr_i2t", "/", "5", "\n", "# Compute test ranks txt2img", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", "=", "self", ".", "t2i", "(", "testImg_i", ",", "testTxt_i", ")", "\n", "results", "[", "'t2i'", "]", "[", "'r1'", "]", "+=", "r1_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r5'", "]", "+=", "r5_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r10'", "]", "+=", "r10_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'medr'", "]", "+=", "medr_t2i", "/", "5", "\n", "\n", "", "return", "bestdevscore", ",", "results", "[", "'i2t'", "]", "[", "'r1'", "]", ",", "results", "[", "'i2t'", "]", "[", "'r5'", "]", ",", "results", "[", "'i2t'", "]", "[", "'r10'", "]", ",", "results", "[", "'i2t'", "]", "[", "'medr'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r1'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r5'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r10'", "]", ",", "results", "[", "'t2i'", "]", "[", "'medr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.trainepoch": [[226, 273], ["ranking.ImageSentenceRankingPytorch.model.train", "range", "list", "range", "numpy.random.permutation", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "numpy.random.choice", "numpy.random.choice", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "ranking.ImageSentenceRankingPytorch.model", "ranking.ImageSentenceRankingPytorch.loss_fn", "all_costs.append", "ranking.ImageSentenceRankingPytorch.optimizer.zero_grad", "ranking.ImageSentenceRankingPytorch.backward", "ranking.ImageSentenceRankingPytorch.optimizer.step", "len", "logging.info", "ranking.ImageSentenceRankingPytorch.i2t", "logging.info", "ranking.ImageSentenceRankingPytorch.t2i", "logging.info", "ranking.ImageSentenceRankingPytorch.data.item", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor.size", "torch.LongTensor.size", "torch.LongTensor.size", "torch.LongTensor.size", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "trainImg.index_select", "trainTxt.index_select", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainImg.index_select", "trainTxt.index_select"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.i2t", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.t2i"], ["", "def", "trainepoch", "(", "self", ",", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "nepoches", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "nepoch", ",", "self", ".", "nepoch", "+", "nepoches", ")", ":", "\n", "            ", "permutation", "=", "list", "(", "np", ".", "random", ".", "permutation", "(", "len", "(", "trainTxt", ")", ")", ")", "\n", "all_costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "trainTxt", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "# forward", "\n", "                ", "if", "i", "%", "(", "self", ".", "batch_size", "*", "500", ")", "==", "0", "and", "i", ">", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "'samples : {0}'", ".", "format", "(", "i", ")", ")", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", "=", "self", ".", "i2t", "(", "devImg", ",", "\n", "devTxt", ")", "\n", "logging", ".", "info", "(", "\"Image to text: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ")", ")", "\n", "# Compute test ranks txt2img", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", "=", "self", ".", "t2i", "(", "devImg", ",", "\n", "devTxt", ")", "\n", "logging", ".", "info", "(", "\"Text to Image: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", ")", ")", "\n", "", "idx", "=", "torch", ".", "LongTensor", "(", "permutation", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", "\n", "imgbatch", "=", "Variable", "(", "trainImg", ".", "index_select", "(", "0", ",", "idx", ")", ")", ".", "cuda", "(", ")", "\n", "sentbatch", "=", "Variable", "(", "trainTxt", ".", "index_select", "(", "0", ",", "idx", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "idximgc", "=", "np", ".", "random", ".", "choice", "(", "permutation", "[", ":", "i", "]", "+", "\n", "permutation", "[", "i", "+", "self", ".", "batch_size", ":", "]", ",", "\n", "self", ".", "ncontrast", "*", "idx", ".", "size", "(", "0", ")", ")", "\n", "idxsentc", "=", "np", ".", "random", ".", "choice", "(", "permutation", "[", ":", "i", "]", "+", "\n", "permutation", "[", "i", "+", "self", ".", "batch_size", ":", "]", ",", "\n", "self", ".", "ncontrast", "*", "idx", ".", "size", "(", "0", ")", ")", "\n", "idximgc", "=", "torch", ".", "LongTensor", "(", "idximgc", ")", "\n", "idxsentc", "=", "torch", ".", "LongTensor", "(", "idxsentc", ")", "\n", "# Get indexes for contrastive images and sentences", "\n", "imgcbatch", "=", "Variable", "(", "trainImg", ".", "index_select", "(", "0", ",", "idximgc", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "ncontrast", ",", "self", ".", "imgdim", ")", ".", "cuda", "(", ")", "\n", "sentcbatch", "=", "Variable", "(", "trainTxt", ".", "index_select", "(", "0", ",", "idxsentc", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "ncontrast", ",", "self", ".", "sentdim", ")", ".", "cuda", "(", ")", "\n", "\n", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", "=", "self", ".", "model", "(", "\n", "imgbatch", ",", "sentbatch", ",", "imgcbatch", ",", "sentcbatch", ")", "\n", "# loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", ")", "\n", "all_costs", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "nepoch", "+=", "nepoches", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.t2i": [[274, 313], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "int", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "img_embed.index_select", "numpy.zeros", "range", "len", "img_embed.append", "sent_embed.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.mm().cpu().numpy", "torch.mm().cpu().numpy", "torch.mm().cpu().numpy", "torch.mm().cpu().numpy", "numpy.zeros", "range", "len", "len", "len", "numpy.floor", "ranking.ImageSentenceRankingPytorch.model.proj_image", "ranking.ImageSentenceRankingPytorch.model.proj_sentence", "img_embed.size", "len", "len", "len", "len", "len", "numpy.median", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mm().cpu", "torch.mm().cpu", "torch.mm().cpu", "torch.mm().cpu", "numpy.argsort", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "img_embed.index_select.transpose"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.COCOProjNet.proj_image", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.COCOProjNet.proj_sentence"], ["", "def", "t2i", "(", "self", ",", "images", ",", "captions", ")", ":", "\n", "        ", "\"\"\"\n        Images: (5N, imgdim) matrix of images\n        Captions: (5N, sentdim) matrix of captions\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Project images and captions", "\n", "            ", "img_embed", ",", "sent_embed", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "images", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "img_embed", ".", "append", "(", "self", ".", "model", ".", "proj_image", "(", "\n", "Variable", "(", "images", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "sent_embed", ".", "append", "(", "self", ".", "model", ".", "proj_sentence", "(", "\n", "Variable", "(", "captions", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "", "img_embed", "=", "torch", ".", "cat", "(", "img_embed", ",", "0", ")", ".", "data", "\n", "sent_embed", "=", "torch", ".", "cat", "(", "sent_embed", ",", "0", ")", ".", "data", "\n", "\n", "npts", "=", "int", "(", "img_embed", ".", "size", "(", "0", ")", "/", "5", ")", "\n", "idxs", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "range", "(", "0", ",", "len", "(", "img_embed", ")", ",", "5", ")", ")", "\n", "ims", "=", "img_embed", ".", "index_select", "(", "0", ",", "idxs", ")", "\n", "\n", "ranks", "=", "np", ".", "zeros", "(", "5", "*", "npts", ")", "\n", "for", "index", "in", "range", "(", "npts", ")", ":", "\n", "\n", "# Get query captions", "\n", "                ", "queries", "=", "sent_embed", "[", "5", "*", "index", ":", "5", "*", "index", "+", "5", "]", "\n", "\n", "# Compute scores", "\n", "scores", "=", "torch", ".", "mm", "(", "queries", ",", "ims", ".", "transpose", "(", "0", ",", "1", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "inds", "=", "np", ".", "zeros", "(", "scores", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "inds", ")", ")", ":", "\n", "                    ", "inds", "[", "i", "]", "=", "np", ".", "argsort", "(", "scores", "[", "i", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "ranks", "[", "5", "*", "index", "+", "i", "]", "=", "np", ".", "where", "(", "inds", "[", "i", "]", "==", "index", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "# Compute metrics", "\n", "", "", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "1", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "5", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "10", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks", ")", ")", "+", "1", "\n", "return", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.ImageSentenceRankingPytorch.i2t": [[314, 360], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "int", "numpy.zeros", "range", "len", "img_embed.append", "sent_embed.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "scores.cpu().numpy.cpu().numpy.cpu().numpy", "index_list.append", "range", "len", "len", "len", "numpy.floor", "ranking.ImageSentenceRankingPytorch.model.proj_image", "ranking.ImageSentenceRankingPytorch.model.proj_sentence", "img_embed.size", "numpy.argsort", "len", "len", "len", "numpy.median", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "scores.cpu().numpy.cpu().numpy.cpu", "query_img.view", "sent_embed.transpose", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.COCOProjNet.proj_image", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.ranking.COCOProjNet.proj_sentence"], ["", "", "def", "i2t", "(", "self", ",", "images", ",", "captions", ")", ":", "\n", "        ", "\"\"\"\n        Images: (5N, imgdim) matrix of images\n        Captions: (5N, sentdim) matrix of captions\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Project images and captions", "\n", "            ", "img_embed", ",", "sent_embed", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "images", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "img_embed", ".", "append", "(", "self", ".", "model", ".", "proj_image", "(", "\n", "Variable", "(", "images", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "sent_embed", ".", "append", "(", "self", ".", "model", ".", "proj_sentence", "(", "\n", "Variable", "(", "captions", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "", "img_embed", "=", "torch", ".", "cat", "(", "img_embed", ",", "0", ")", ".", "data", "\n", "sent_embed", "=", "torch", ".", "cat", "(", "sent_embed", ",", "0", ")", ".", "data", "\n", "\n", "npts", "=", "int", "(", "img_embed", ".", "size", "(", "0", ")", "/", "5", ")", "\n", "index_list", "=", "[", "]", "\n", "\n", "ranks", "=", "np", ".", "zeros", "(", "npts", ")", "\n", "for", "index", "in", "range", "(", "npts", ")", ":", "\n", "\n", "# Get query image", "\n", "                ", "query_img", "=", "img_embed", "[", "5", "*", "index", "]", "\n", "\n", "# Compute scores", "\n", "scores", "=", "torch", ".", "mm", "(", "query_img", ".", "view", "(", "1", ",", "-", "1", ")", ",", "\n", "sent_embed", ".", "transpose", "(", "0", ",", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "inds", "=", "np", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "index_list", ".", "append", "(", "inds", "[", "0", "]", ")", "\n", "\n", "# Score", "\n", "rank", "=", "1e20", "\n", "for", "i", "in", "range", "(", "5", "*", "index", ",", "5", "*", "index", "+", "5", ",", "1", ")", ":", "\n", "                    ", "tmp", "=", "np", ".", "where", "(", "inds", "==", "i", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "tmp", "<", "rank", ":", "\n", "                        ", "rank", "=", "tmp", "\n", "", "", "ranks", "[", "index", "]", "=", "rank", "\n", "\n", "# Compute metrics", "\n", "", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "1", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "5", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "10", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks", ")", ")", "+", "1", "\n", "return", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.relatedness.RelatednessPytorch.__init__": [[25, 58], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Adam", "torch.Adam", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Softmax", "torch.nn.Softmax", "relatedness.RelatednessPytorch.model.cuda", "relatedness.RelatednessPytorch.loss_fn.cuda", "relatedness.RelatednessPytorch.model.parameters"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "valid", ",", "test", ",", "devscores", ",", "config", ")", ":", "\n", "# fix seed", "\n", "        ", "np", ".", "random", ".", "seed", "(", "config", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "config", "[", "'seed'", "]", ")", "\n", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'torch.cuda required for Relatedness'", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "config", "[", "'seed'", "]", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "valid", "=", "valid", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "devscores", "=", "devscores", "\n", "\n", "self", ".", "inputdim", "=", "train", "[", "'X'", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "l2reg", "=", "0.", "\n", "self", ".", "batch_size", "=", "64", "\n", "self", ".", "maxepoch", "=", "1000", "\n", "self", ".", "early_stop", "=", "True", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "self", ".", "nclasses", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", ",", "\n", ")", "\n", "self", ".", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "loss_fn", "=", "self", ".", "loss_fn", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "loss_fn", ".", "size_average", "=", "False", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "weight_decay", "=", "self", ".", "l2reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.relatedness.RelatednessPytorch.prepare_data": [[59, 69], ["torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["", "def", "prepare_data", "(", "self", ",", "trainX", ",", "trainy", ",", "devX", ",", "devy", ",", "testX", ",", "testy", ")", ":", "\n", "# Transform probs to log-probs for KL-divergence", "\n", "        ", "trainX", "=", "torch", ".", "from_numpy", "(", "trainX", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "trainy", "=", "torch", ".", "from_numpy", "(", "trainy", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "devX", "=", "torch", ".", "from_numpy", "(", "devX", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "devy", "=", "torch", ".", "from_numpy", "(", "devy", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "testX", "=", "torch", ".", "from_numpy", "(", "testX", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "testY", "=", "torch", ".", "from_numpy", "(", "testy", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "trainX", ",", "trainy", ",", "devX", ",", "devy", ",", "testX", ",", "testy", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.relatedness.RelatednessPytorch.run": [[70, 102], ["numpy.arange", "relatedness.RelatednessPytorch.prepare_data", "numpy.dot", "relatedness.RelatednessPytorch.trainepoch", "numpy.dot", "relatedness.RelatednessPytorch.predict_proba", "relatedness.RelatednessPytorch.predict_proba", "scipy.stats.spearmanr", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.relatedness.RelatednessPytorch.prepare_data", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.trainepoch", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.predict_proba", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.predict_proba"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "nepoch", "=", "0", "\n", "bestpr", "=", "-", "1", "\n", "early_stop_count", "=", "0", "\n", "r", "=", "np", ".", "arange", "(", "1", ",", "6", ")", "\n", "stop_train", "=", "False", "\n", "\n", "# Preparing data", "\n", "trainX", ",", "trainy", ",", "devX", ",", "devy", ",", "testX", ",", "testy", "=", "self", ".", "prepare_data", "(", "\n", "self", ".", "train", "[", "'X'", "]", ",", "self", ".", "train", "[", "'y'", "]", ",", "\n", "self", ".", "valid", "[", "'X'", "]", ",", "self", ".", "valid", "[", "'y'", "]", ",", "\n", "self", ".", "test", "[", "'X'", "]", ",", "self", ".", "test", "[", "'y'", "]", ")", "\n", "\n", "# Training", "\n", "while", "not", "stop_train", "and", "self", ".", "nepoch", "<=", "self", ".", "maxepoch", ":", "\n", "            ", "self", ".", "trainepoch", "(", "trainX", ",", "trainy", ",", "nepoches", "=", "50", ")", "\n", "yhat", "=", "np", ".", "dot", "(", "self", ".", "predict_proba", "(", "devX", ")", ",", "r", ")", "\n", "pr", "=", "spearmanr", "(", "yhat", ",", "self", ".", "devscores", ")", "[", "0", "]", "\n", "pr", "=", "0", "if", "pr", "!=", "pr", "else", "pr", "# if NaN bc std=0", "\n", "# early stop on Pearson", "\n", "if", "pr", ">", "bestpr", ":", "\n", "                ", "bestpr", "=", "pr", "\n", "bestmodel", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "elif", "self", ".", "early_stop", ":", "\n", "                ", "if", "early_stop_count", ">=", "3", ":", "\n", "                    ", "stop_train", "=", "True", "\n", "", "early_stop_count", "+=", "1", "\n", "", "", "self", ".", "model", "=", "bestmodel", "\n", "\n", "yhat", "=", "np", ".", "dot", "(", "self", ".", "predict_proba", "(", "testX", ")", ",", "r", ")", "\n", "\n", "return", "bestpr", ",", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.relatedness.RelatednessPytorch.trainepoch": [[103, 123], ["relatedness.RelatednessPytorch.model.train", "range", "numpy.random.permutation", "range", "len", "len", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "relatedness.RelatednessPytorch.model", "relatedness.RelatednessPytorch.loss_fn", "all_costs.append", "relatedness.RelatednessPytorch.optimizer.zero_grad", "relatedness.RelatednessPytorch.backward", "relatedness.RelatednessPytorch.optimizer.step", "relatedness.RelatednessPytorch.item", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["", "def", "trainepoch", "(", "self", ",", "X", ",", "y", ",", "nepoches", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "nepoch", ",", "self", ".", "nepoch", "+", "nepoches", ")", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", "\n", "all_costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "# forward", "\n", "                ", "idx", "=", "torch", ".", "from_numpy", "(", "permutation", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "Xbatch", "=", "X", "[", "idx", "]", "\n", "ybatch", "=", "y", "[", "idx", "]", "\n", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "# loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "output", ",", "ybatch", ")", "\n", "all_costs", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "nepoch", "+=", "nepoches", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.relatedness.RelatednessPytorch.predict_proba": [[124, 135], ["relatedness.RelatednessPytorch.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "len", "relatedness.RelatednessPytorch.model().data.cpu().numpy", "numpy.concatenate", "relatedness.RelatednessPytorch.model().data.cpu", "relatedness.RelatednessPytorch.model().data.cpu().numpy", "relatedness.RelatednessPytorch.model().data.cpu", "relatedness.RelatednessPytorch.model", "relatedness.RelatednessPytorch.model"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval"], ["", "def", "predict_proba", "(", "self", ",", "devX", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "probas", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "if", "len", "(", "probas", ")", "==", "0", ":", "\n", "                    ", "probas", "=", "self", ".", "model", "(", "Xbatch", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "probas", "=", "np", ".", "concatenate", "(", "(", "probas", ",", "self", ".", "model", "(", "Xbatch", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "", "return", "probas", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.InnerKFoldClassifier.__init__": [[43, 56], ["validation.get_classif_name"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.get_classif_name"], ["def", "__init__", "(", "self", ",", "X", ",", "y", ",", "config", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "featdim", "=", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "devresults", "=", "[", "]", "\n", "self", ".", "testresults", "=", "[", "]", "\n", "self", ".", "usepytorch", "=", "config", "[", "'usepytorch'", "]", "\n", "self", ".", "classifier_config", "=", "config", "[", "'classifier'", "]", "\n", "self", ".", "modelname", "=", "get_classif_name", "(", "self", ".", "classifier_config", ",", "self", ".", "usepytorch", ")", "\n", "\n", "self", ".", "k", "=", "5", "if", "'kfold'", "not", "in", "config", "else", "config", "[", "'kfold'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.InnerKFoldClassifier.run": [[57, 108], ["logging.info", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "round", "round", "logging.info", "validation.InnerKFoldClassifier.devresults.append", "validation.InnerKFoldClassifier.testresults.append", "numpy.mean", "numpy.mean", "sklearn.model_selection.StratifiedKFold.split", "scores.append", "numpy.max", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "round", "range", "range", "regscores.append", "round", "numpy.argmax", "numpy.max", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.score", "sklearn.linear_model.LogisticRegression.score", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.score"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Training {0} with (inner) {1}-fold cross-validation'", "\n", ".", "format", "(", "self", ".", "modelname", ",", "self", ".", "k", ")", ")", "\n", "\n", "regs", "=", "[", "10", "**", "t", "for", "t", "in", "range", "(", "-", "5", ",", "-", "1", ")", "]", "if", "self", ".", "usepytorch", "else", "[", "2", "**", "t", "for", "t", "in", "range", "(", "-", "2", ",", "4", ",", "1", ")", "]", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "self", ".", "k", ",", "shuffle", "=", "True", ",", "random_state", "=", "1111", ")", "\n", "innerskf", "=", "StratifiedKFold", "(", "n_splits", "=", "self", ".", "k", ",", "shuffle", "=", "True", ",", "\n", "random_state", "=", "1111", ")", "\n", "count", "=", "0", "\n", "for", "train_idx", ",", "test_idx", "in", "skf", ".", "split", "(", "self", ".", "X", ",", "self", ".", "y", ")", ":", "\n", "            ", "count", "+=", "1", "\n", "X_train", ",", "X_test", "=", "self", ".", "X", "[", "train_idx", "]", ",", "self", ".", "X", "[", "test_idx", "]", "\n", "y_train", ",", "y_test", "=", "self", ".", "y", "[", "train_idx", "]", ",", "self", ".", "y", "[", "test_idx", "]", "\n", "scores", "=", "[", "]", "\n", "for", "reg", "in", "regs", ":", "\n", "                ", "regscores", "=", "[", "]", "\n", "for", "inner_train_idx", ",", "inner_test_idx", "in", "innerskf", ".", "split", "(", "X_train", ",", "y_train", ")", ":", "\n", "                    ", "X_in_train", ",", "X_in_test", "=", "X_train", "[", "inner_train_idx", "]", ",", "X_train", "[", "inner_test_idx", "]", "\n", "y_in_train", ",", "y_in_test", "=", "y_train", "[", "inner_train_idx", "]", ",", "y_train", "[", "inner_test_idx", "]", "\n", "if", "self", ".", "usepytorch", ":", "\n", "                        ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "reg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_in_train", ",", "y_in_train", ",", "\n", "validation_data", "=", "(", "X_in_test", ",", "y_in_test", ")", ")", "\n", "", "else", ":", "\n", "                        ", "clf", "=", "LogisticRegression", "(", "C", "=", "reg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_in_train", ",", "y_in_train", ")", "\n", "", "regscores", ".", "append", "(", "clf", ".", "score", "(", "X_in_test", ",", "y_in_test", ")", ")", "\n", "", "scores", ".", "append", "(", "round", "(", "100", "*", "np", ".", "mean", "(", "regscores", ")", ",", "2", ")", ")", "\n", "", "optreg", "=", "regs", "[", "np", ".", "argmax", "(", "scores", ")", "]", "\n", "logging", ".", "info", "(", "'Best param found at split {0}: l2reg = {1} \\\n                with score {2}'", ".", "format", "(", "count", ",", "optreg", ",", "np", ".", "max", "(", "scores", ")", ")", ")", "\n", "self", ".", "devresults", ".", "append", "(", "np", ".", "max", "(", "scores", ")", ")", "\n", "\n", "if", "self", ".", "usepytorch", ":", "\n", "                ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "optreg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ",", "validation_split", "=", "0.05", ")", "\n", "", "else", ":", "\n", "                ", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n", "", "self", ".", "testresults", ".", "append", "(", "round", "(", "100", "*", "clf", ".", "score", "(", "X_test", ",", "y_test", ")", ",", "2", ")", ")", "\n", "\n", "", "devaccuracy", "=", "round", "(", "np", ".", "mean", "(", "self", ".", "devresults", ")", ",", "2", ")", "\n", "testaccuracy", "=", "round", "(", "np", ".", "mean", "(", "self", ".", "testresults", ")", ",", "2", ")", "\n", "return", "devaccuracy", ",", "testaccuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.KFoldClassifier.__init__": [[114, 125], ["validation.get_classif_name"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.get_classif_name"], ["def", "__init__", "(", "self", ",", "train", ",", "test", ",", "config", ")", ":", "\n", "        ", "self", ".", "train", "=", "train", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "featdim", "=", "self", ".", "train", "[", "'X'", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "usepytorch", "=", "config", "[", "'usepytorch'", "]", "\n", "self", ".", "classifier_config", "=", "config", "[", "'classifier'", "]", "\n", "self", ".", "modelname", "=", "get_classif_name", "(", "self", ".", "classifier_config", ",", "self", ".", "usepytorch", ")", "\n", "\n", "self", ".", "k", "=", "5", "if", "'kfold'", "not", "in", "config", "else", "config", "[", "'kfold'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.KFoldClassifier.run": [[126, 182], ["logging.info", "sklearn.model_selection.StratifiedKFold", "logging.info", "numpy.max", "logging.info", "logging.info", "sklearn.linear_model.LogisticRegression.predict", "sklearn.linear_model.LogisticRegression.score", "round", "sklearn.model_selection.StratifiedKFold.split", "scores.append", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.score", "scanscores.append", "round", "numpy.argmax", "range", "range", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "range", "numpy.mean", "str", "len"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.predict", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit"], ["", "def", "run", "(", "self", ")", ":", "\n", "# cross-validation", "\n", "        ", "logging", ".", "info", "(", "'Training {0} with {1}-fold cross-validation'", "\n", ".", "format", "(", "self", ".", "modelname", ",", "self", ".", "k", ")", ")", "\n", "regs", "=", "[", "10", "**", "t", "for", "t", "in", "range", "(", "-", "5", ",", "-", "1", ")", "]", "if", "self", ".", "usepytorch", "else", "[", "2", "**", "t", "for", "t", "in", "range", "(", "-", "1", ",", "6", ",", "1", ")", "]", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "self", ".", "k", ",", "shuffle", "=", "True", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "scores", "=", "[", "]", "\n", "\n", "for", "reg", "in", "regs", ":", "\n", "            ", "scanscores", "=", "[", "]", "\n", "for", "train_idx", ",", "test_idx", "in", "skf", ".", "split", "(", "self", ".", "train", "[", "'X'", "]", ",", "\n", "self", ".", "train", "[", "'y'", "]", ")", ":", "\n", "# Split data", "\n", "                ", "X_train", ",", "y_train", "=", "self", ".", "train", "[", "'X'", "]", "[", "train_idx", "]", ",", "self", ".", "train", "[", "'y'", "]", "[", "train_idx", "]", "\n", "\n", "X_test", ",", "y_test", "=", "self", ".", "train", "[", "'X'", "]", "[", "test_idx", "]", ",", "self", ".", "train", "[", "'y'", "]", "[", "test_idx", "]", "\n", "\n", "# Train classifier", "\n", "if", "self", ".", "usepytorch", ":", "\n", "                    ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "reg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ",", "validation_data", "=", "(", "X_test", ",", "y_test", ")", ")", "\n", "", "else", ":", "\n", "                    ", "clf", "=", "LogisticRegression", "(", "C", "=", "reg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "", "score", "=", "clf", ".", "score", "(", "X_test", ",", "y_test", ")", "\n", "scanscores", ".", "append", "(", "score", ")", "\n", "# Append mean score", "\n", "", "scores", ".", "append", "(", "round", "(", "100", "*", "np", ".", "mean", "(", "scanscores", ")", ",", "2", ")", ")", "\n", "\n", "# evaluation", "\n", "", "logging", ".", "info", "(", "[", "(", "'reg:'", "+", "str", "(", "regs", "[", "idx", "]", ")", ",", "scores", "[", "idx", "]", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "scores", ")", ")", "]", ")", "\n", "optreg", "=", "regs", "[", "np", ".", "argmax", "(", "scores", ")", "]", "\n", "devaccuracy", "=", "np", ".", "max", "(", "scores", ")", "\n", "logging", ".", "info", "(", "'Cross-validation : best param found is reg = {0} \\\n            with score {1}'", ".", "format", "(", "optreg", ",", "devaccuracy", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'Evaluating...'", ")", "\n", "if", "self", ".", "usepytorch", ":", "\n", "            ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "optreg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "train", "[", "'X'", "]", ",", "self", ".", "train", "[", "'y'", "]", ",", "validation_split", "=", "0.05", ")", "\n", "", "else", ":", "\n", "            ", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "train", "[", "'X'", "]", ",", "self", ".", "train", "[", "'y'", "]", ")", "\n", "", "yhat", "=", "clf", ".", "predict", "(", "self", ".", "test", "[", "'X'", "]", ")", "\n", "\n", "testaccuracy", "=", "clf", ".", "score", "(", "self", ".", "test", "[", "'X'", "]", ",", "self", ".", "test", "[", "'y'", "]", ")", "\n", "testaccuracy", "=", "round", "(", "100", "*", "testaccuracy", ",", "2", ")", "\n", "\n", "return", "devaccuracy", ",", "testaccuracy", ",", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.__init__": [[188, 201], ["validation.get_classif_name"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.get_classif_name"], ["def", "__init__", "(", "self", ",", "X", ",", "y", ",", "config", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "featdim", "=", "self", ".", "X", "[", "'train'", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "usepytorch", "=", "config", "[", "'usepytorch'", "]", "\n", "self", ".", "classifier_config", "=", "config", "[", "'classifier'", "]", "\n", "self", ".", "cudaEfficient", "=", "False", "if", "'cudaEfficient'", "not", "in", "config", "else", "config", "[", "'cudaEfficient'", "]", "\n", "self", ".", "modelname", "=", "get_classif_name", "(", "self", ".", "classifier_config", ",", "self", ".", "usepytorch", ")", "\n", "self", ".", "noreg", "=", "False", "if", "'noreg'", "not", "in", "config", "else", "config", "[", "'noreg'", "]", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.SplitClassifier.run": [[202, 247], ["logging.info", "logging.info", "numpy.max", "logging.info", "sklearn.linear_model.LogisticRegression", "logging.info", "sklearn.linear_model.LogisticRegression.score", "round", "scores.append", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "round", "numpy.argmax", "range", "range", "range", "sklearn.linear_model.LogisticRegression.score", "str", "len"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.score"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Training {0} with standard validation..'", "\n", ".", "format", "(", "self", ".", "modelname", ")", ")", "\n", "regs", "=", "[", "10", "**", "t", "for", "t", "in", "range", "(", "-", "5", ",", "-", "1", ")", "]", "if", "self", ".", "usepytorch", "else", "[", "2", "**", "t", "for", "t", "in", "range", "(", "-", "2", ",", "4", ",", "1", ")", "]", "\n", "if", "self", ".", "noreg", ":", "\n", "            ", "regs", "=", "[", "1e-9", "if", "self", ".", "usepytorch", "else", "1e9", "]", "\n", "", "scores", "=", "[", "]", "\n", "for", "reg", "in", "regs", ":", "\n", "            ", "if", "self", ".", "usepytorch", ":", "\n", "                ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "reg", ",", "\n", "seed", "=", "self", ".", "seed", ",", "cudaEfficient", "=", "self", ".", "cudaEfficient", ")", "\n", "\n", "# TODO: Find a hack for reducing nb epoches in SNLI", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "X", "[", "'valid'", "]", ",", "self", ".", "y", "[", "'valid'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "clf", "=", "LogisticRegression", "(", "C", "=", "reg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ")", "\n", "", "scores", ".", "append", "(", "round", "(", "100", "*", "clf", ".", "score", "(", "self", ".", "X", "[", "'valid'", "]", ",", "\n", "self", ".", "y", "[", "'valid'", "]", ")", ",", "2", ")", ")", "\n", "", "logging", ".", "info", "(", "[", "(", "'reg:'", "+", "str", "(", "regs", "[", "idx", "]", ")", ",", "scores", "[", "idx", "]", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "scores", ")", ")", "]", ")", "\n", "optreg", "=", "regs", "[", "np", ".", "argmax", "(", "scores", ")", "]", "\n", "devaccuracy", "=", "np", ".", "max", "(", "scores", ")", "\n", "logging", ".", "info", "(", "'Validation : best param found is reg = {0} with score \\\n            {1}'", ".", "format", "(", "optreg", ",", "devaccuracy", ")", ")", "\n", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'Evaluating...'", ")", "\n", "if", "self", ".", "usepytorch", ":", "\n", "            ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "optreg", ",", "\n", "seed", "=", "self", ".", "seed", ",", "cudaEfficient", "=", "self", ".", "cudaEfficient", ")", "\n", "\n", "# TODO: Find a hack for reducing nb epoches in SNLI", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "X", "[", "'valid'", "]", ",", "self", ".", "y", "[", "'valid'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ")", "\n", "\n", "", "testaccuracy", "=", "clf", ".", "score", "(", "self", ".", "X", "[", "'test'", "]", ",", "self", ".", "y", "[", "'test'", "]", ")", "\n", "testaccuracy", "=", "round", "(", "100", "*", "testaccuracy", ",", "2", ")", "\n", "return", "devaccuracy", ",", "testaccuracy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.validation.get_classif_name": [[28, 37], ["None"], "function", ["None"], ["def", "get_classif_name", "(", "classifier_config", ",", "usepytorch", ")", ":", "\n", "    ", "if", "not", "usepytorch", ":", "\n", "        ", "modelname", "=", "'sklearn-LogReg'", "\n", "", "else", ":", "\n", "        ", "nhid", "=", "classifier_config", "[", "'nhid'", "]", "\n", "optim", "=", "'adam'", "if", "'optim'", "not", "in", "classifier_config", "else", "classifier_config", "[", "'optim'", "]", "\n", "bs", "=", "64", "if", "'batch_size'", "not", "in", "classifier_config", "else", "classifier_config", "[", "'batch_size'", "]", "\n", "modelname", "=", "'pytorch-MLP-nhid%s-%s-bs%s'", "%", "(", "nhid", ",", "optim", ",", "bs", ")", "\n", "", "return", "modelname", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.__init__": [[25, 37], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inputdim", ",", "nclasses", ",", "l2reg", "=", "0.", ",", "batch_size", "=", "64", ",", "seed", "=", "1111", ",", "\n", "cudaEfficient", "=", "False", ")", ":", "\n", "# fix seed", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "self", ".", "inputdim", "=", "inputdim", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "self", ".", "l2reg", "=", "l2reg", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "cudaEfficient", "=", "cudaEfficient", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.prepare_split": [[38, 59], ["torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "numpy.random.permutation", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "int", "len", "len"], "methods", ["None"], ["", "def", "prepare_split", "(", "self", ",", "X", ",", "y", ",", "validation_data", "=", "None", ",", "validation_split", "=", "None", ")", ":", "\n", "# Preparing validation data", "\n", "        ", "assert", "validation_split", "or", "validation_data", "\n", "if", "validation_data", "is", "not", "None", ":", "\n", "            ", "trainX", ",", "trainy", "=", "X", ",", "y", "\n", "devX", ",", "devy", "=", "validation_data", "\n", "", "else", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", "\n", "trainidx", "=", "permutation", "[", "int", "(", "validation_split", "*", "len", "(", "X", ")", ")", ":", "]", "\n", "devidx", "=", "permutation", "[", "0", ":", "int", "(", "validation_split", "*", "len", "(", "X", ")", ")", "]", "\n", "trainX", ",", "trainy", "=", "X", "[", "trainidx", "]", ",", "y", "[", "trainidx", "]", "\n", "devX", ",", "devy", "=", "X", "[", "devidx", "]", ",", "y", "[", "devidx", "]", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "self", ".", "cudaEfficient", "else", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "trainX", "=", "torch", ".", "from_numpy", "(", "trainX", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "trainy", "=", "torch", ".", "from_numpy", "(", "trainy", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "devX", "=", "torch", ".", "from_numpy", "(", "devX", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "devy", "=", "torch", ".", "from_numpy", "(", "devy", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "return", "trainX", ",", "trainy", ",", "devX", ",", "devy", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.fit": [[60, 84], ["classifier.PyTorchClassifier.prepare_split", "classifier.PyTorchClassifier.trainepoch", "classifier.PyTorchClassifier.score", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.prepare_split", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.trainepoch", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.score"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "validation_data", "=", "None", ",", "validation_split", "=", "None", ",", "\n", "early_stop", "=", "True", ")", ":", "\n", "        ", "self", ".", "nepoch", "=", "0", "\n", "bestaccuracy", "=", "-", "1", "\n", "stop_train", "=", "False", "\n", "early_stop_count", "=", "0", "\n", "\n", "# Preparing validation data", "\n", "trainX", ",", "trainy", ",", "devX", ",", "devy", "=", "self", ".", "prepare_split", "(", "X", ",", "y", ",", "validation_data", ",", "\n", "validation_split", ")", "\n", "\n", "# Training", "\n", "while", "not", "stop_train", "and", "self", ".", "nepoch", "<=", "self", ".", "max_epoch", ":", "\n", "            ", "self", ".", "trainepoch", "(", "trainX", ",", "trainy", ",", "epoch_size", "=", "self", ".", "epoch_size", ")", "\n", "accuracy", "=", "self", ".", "score", "(", "devX", ",", "devy", ")", "\n", "if", "accuracy", ">", "bestaccuracy", ":", "\n", "                ", "bestaccuracy", "=", "accuracy", "\n", "bestmodel", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "elif", "early_stop", ":", "\n", "                ", "if", "early_stop_count", ">=", "self", ".", "tenacity", ":", "\n", "                    ", "stop_train", "=", "True", "\n", "", "early_stop_count", "+=", "1", "\n", "", "", "self", ".", "model", "=", "bestmodel", "\n", "return", "bestaccuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.trainepoch": [[85, 110], ["classifier.PyTorchClassifier.model.train", "range", "numpy.random.permutation", "range", "len", "len", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "classifier.PyTorchClassifier.model", "classifier.PyTorchClassifier.loss_fn", "all_costs.append", "classifier.PyTorchClassifier.optimizer.zero_grad", "classifier.PyTorchClassifier.backward", "classifier.PyTorchClassifier.optimizer.step", "Xbatch.cuda.cuda.cuda", "ybatch.cuda.cuda.cuda", "classifier.PyTorchClassifier.data.item", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.VaSCL.training.VaSCL_Trainer.train", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["", "def", "trainepoch", "(", "self", ",", "X", ",", "y", ",", "epoch_size", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "nepoch", ",", "self", ".", "nepoch", "+", "epoch_size", ")", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", "\n", "all_costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "# forward", "\n", "                ", "idx", "=", "torch", ".", "from_numpy", "(", "permutation", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ".", "long", "(", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "\n", "Xbatch", "=", "X", "[", "idx", "]", "\n", "ybatch", "=", "y", "[", "idx", "]", "\n", "\n", "if", "self", ".", "cudaEfficient", ":", "\n", "                    ", "Xbatch", "=", "Xbatch", ".", "cuda", "(", ")", "\n", "ybatch", "=", "ybatch", ".", "cuda", "(", ")", "\n", "", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "# loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "output", ",", "ybatch", ")", "\n", "all_costs", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "nepoch", "+=", "epoch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.score": [[111, 129], ["classifier.PyTorchClassifier.model.eval", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "isinstance", "len", "classifier.PyTorchClassifier.model", "pred.long().eq().sum().item", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "Xbatch.cuda.cuda.cuda", "ybatch.cuda.cuda.cuda", "classifier.PyTorchClassifier.data.max", "pred.long().eq().sum", "pred.long().eq", "ybatch.cuda.cuda.data.long", "pred.long"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["", "def", "score", "(", "self", ",", "devX", ",", "devy", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "if", "not", "isinstance", "(", "devX", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "or", "self", ".", "cudaEfficient", ":", "\n", "            ", "devX", "=", "torch", ".", "FloatTensor", "(", "devX", ")", ".", "cuda", "(", ")", "\n", "devy", "=", "torch", ".", "LongTensor", "(", "devy", ")", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "ybatch", "=", "devy", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "if", "self", ".", "cudaEfficient", ":", "\n", "                    ", "Xbatch", "=", "Xbatch", ".", "cuda", "(", ")", "\n", "ybatch", "=", "ybatch", ".", "cuda", "(", ")", "\n", "", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "long", "(", ")", ".", "eq", "(", "ybatch", ".", "data", ".", "long", "(", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "accuracy", "=", "1.0", "*", "correct", "/", "len", "(", "devX", ")", "\n", "", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.predict": [[130, 143], ["classifier.PyTorchClassifier.model.eval", "numpy.array", "numpy.vstack", "isinstance", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "classifier.PyTorchClassifier.model", "numpy.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].cpu().numpy", "[].cpu", "classifier.PyTorchClassifier.data.max"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["", "def", "predict", "(", "self", ",", "devX", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "not", "isinstance", "(", "devX", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "devX", "=", "torch", ".", "FloatTensor", "(", "devX", ")", ".", "cuda", "(", ")", "\n", "", "yhat", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "yhat", "=", "np", ".", "append", "(", "yhat", ",", "\n", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "yhat", "=", "np", ".", "vstack", "(", "yhat", ")", "\n", "return", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.PyTorchClassifier.predict_proba": [[144, 156], ["classifier.PyTorchClassifier.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "torch.softmax", "torch.softmax", "classifier.PyTorchClassifier.model().data.cpu().numpy", "numpy.concatenate", "classifier.PyTorchClassifier.model().data.cpu", "classifier.PyTorchClassifier.model"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.engine.SE.eval"], ["", "def", "predict_proba", "(", "self", ",", "devX", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "probas", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "vals", "=", "F", ".", "softmax", "(", "self", ".", "model", "(", "Xbatch", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "not", "probas", ":", "\n", "                    ", "probas", "=", "vals", "\n", "", "else", ":", "\n", "                    ", "probas", "=", "np", ".", "concatenate", "(", "probas", ",", "vals", ",", "axis", "=", "0", ")", "\n", "", "", "", "return", "probas", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__": [[163, 203], ["classifier.PyTorchClassifier.__init__", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "senteval.utils.get_optimizer", "optim_fn", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "classifier.MLP.model.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.amazon-research_sentence-representations.tools.classifier.MLP.__init__", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.senteval.utils.get_optimizer", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda", "home.repos.pwc.inspect_result.amazon-research_sentence-representations.clustering.metric.Confusion.cuda"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "inputdim", ",", "nclasses", ",", "l2reg", "=", "0.", ",", "batch_size", "=", "64", ",", "\n", "seed", "=", "1111", ",", "cudaEfficient", "=", "False", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "inputdim", ",", "nclasses", ",", "l2reg", ",", "\n", "batch_size", ",", "seed", ",", "cudaEfficient", ")", "\n", "\"\"\"\n        PARAMETERS:\n        -nhid:       number of hidden units (0: Logistic Regression)\n        -optim:      optimizer (\"sgd,lr=0.1\", \"adam\", \"rmsprop\" ..)\n        -tenacity:   how many times dev acc does not increase before stopping\n        -epoch_size: each epoch corresponds to epoch_size pass on the train set\n        -max_epoch:  max number of epoches\n        -dropout:    dropout for MLP\n        \"\"\"", "\n", "\n", "self", ".", "nhid", "=", "0", "if", "\"nhid\"", "not", "in", "params", "else", "params", "[", "\"nhid\"", "]", "\n", "self", ".", "optim", "=", "\"adam\"", "if", "\"optim\"", "not", "in", "params", "else", "params", "[", "\"optim\"", "]", "\n", "self", ".", "tenacity", "=", "5", "if", "\"tenacity\"", "not", "in", "params", "else", "params", "[", "\"tenacity\"", "]", "\n", "self", ".", "epoch_size", "=", "4", "if", "\"epoch_size\"", "not", "in", "params", "else", "params", "[", "\"epoch_size\"", "]", "\n", "self", ".", "max_epoch", "=", "200", "if", "\"max_epoch\"", "not", "in", "params", "else", "params", "[", "\"max_epoch\"", "]", "\n", "self", ".", "dropout", "=", "0.", "if", "\"dropout\"", "not", "in", "params", "else", "params", "[", "\"dropout\"", "]", "\n", "self", ".", "batch_size", "=", "64", "if", "\"batch_size\"", "not", "in", "params", "else", "params", "[", "\"batch_size\"", "]", "\n", "\n", "if", "params", "[", "\"nhid\"", "]", "==", "0", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "self", ".", "nclasses", ")", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "params", "[", "\"nhid\"", "]", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "params", "[", "\"nhid\"", "]", ",", "self", ".", "nclasses", ")", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "loss_fn", ".", "size_average", "=", "False", "\n", "\n", "optim_fn", ",", "optim_params", "=", "utils", ".", "get_optimizer", "(", "self", ".", "optim", ")", "\n", "self", ".", "optimizer", "=", "optim_fn", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "**", "optim_params", ")", "\n", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'weight_decay'", "]", "=", "self", ".", "l2reg", "\n", "", "", ""]]}