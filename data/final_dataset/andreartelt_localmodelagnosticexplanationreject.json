{"home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.explanation.Explanation.__init__": [[9, 19], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifierRejectOption.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reject_option", ",", "model_desc", "=", "\"dectree\"", ",", "tree_max_depth", "=", "3", ",", "regularization_strength", "=", "1.", ",", "num_samples", "=", "100", ",", "normal_loc", "=", "0.", ",", "normal_scale", "=", "1.", ",", "**", "kwds", ")", ":", "\n", "        ", "self", ".", "reject_option", "=", "reject_option", "\n", "self", ".", "model_desc", "=", "model_desc", "\n", "self", ".", "tree_max_depth", "=", "tree_max_depth", "\n", "self", ".", "C", "=", "regularization_strength", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "normal_loc", "=", "normal_loc", "\n", "self", ".", "normal_scale", "=", "normal_scale", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.explanation.Explanation.__sample": [[20, 22], ["numpy.random.normal"], "methods", ["None"], ["", "def", "__sample", "(", "self", ",", "x_orig", ")", ":", "\n", "        ", "return", "x_orig", "+", "np", ".", "random", ".", "normal", "(", "loc", "=", "self", ".", "normal_loc", ",", "scale", "=", "self", ".", "normal_scale", ",", "size", "=", "x_orig", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.explanation.Explanation.__fit_local_approximatation": [[23, 45], ["numpy.array", "numpy.array", "sklearn.linear_model.LogisticRegression.fit", "explanation.Explanation.reject_option", "sklearn.tree.DecisionTreeClassifier", "numpy.array.ravel", "explanation.Explanation.__sample", "sklearn.linear_model.LogisticRegression", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.fit", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.explanation.Explanation.__sample"], ["", "def", "__fit_local_approximatation", "(", "self", ",", "x_orig", ")", ":", "\n", "# Sample around x_orig", "\n", "        ", "X", "=", "[", "x_orig", "]", "+", "[", "self", ".", "__sample", "(", "x_orig", ")", "for", "_", "in", "range", "(", "self", ".", "num_samples", ")", "]", "\n", "\n", "# Label samples according the output of the reject option", "\n", "y", "=", "[", "self", ".", "reject_option", "(", "x", ")", "for", "x", "in", "X", "]", "\n", "\n", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "\n", "# Fit decision tree to labeled data set", "\n", "model", "=", "None", "\n", "if", "self", ".", "model_desc", "==", "\"dectree\"", ":", "\n", "            ", "model", "=", "DecisionTreeClassifier", "(", "max_depth", "=", "self", ".", "tree_max_depth", ")", "\n", "", "elif", "self", ".", "model_desc", "==", "\"logreg\"", ":", "\n", "            ", "model", "=", "LogisticRegression", "(", "penalty", "=", "\"l1\"", ",", "C", "=", "self", ".", "C", ",", "solver", "=", "\"saga\"", ",", "multi_class", "=", "\"multinomial\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid value of 'model_desc' -- must be either 'dectree' or 'logreg' but not '{self.model_desc}'\"", ")", "\n", "\n", "", "model", ".", "fit", "(", "X", ",", "y", ".", "ravel", "(", ")", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.explanation.Explanation.compute_explanation": [[46, 65], ["explanation.Explanation.__fit_local_approximatation", "ceml.sklearn.generate_counterfactual", "isinstance", "explanation.Explanation.predict", "isinstance", "x_orig.reshape", "explanation.Explanation.tree_.compute_feature_importances().flatten", "warnings.warn", "numpy.sum", "explanation.Explanation.tree_.compute_feature_importances", "type"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.explanation.Explanation.__fit_local_approximatation", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.predict"], ["", "def", "compute_explanation", "(", "self", ",", "x_orig", ",", "features_whitelist", "=", "None", ")", ":", "\n", "# Fit a local (simple) approximation of the model around x_orig", "\n", "        ", "model", "=", "self", ".", "__fit_local_approximatation", "(", "x_orig", ")", "\n", "\n", "# Compute a counterfactual explanation of x_orig under the local approximation", "\n", "if", "model", ".", "predict", "(", "x_orig", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "==", "0", ":", "# Is sample orignally rejected? If not, computing an explanation does not make much sense!", "\n", "            ", "return", "None", "\n", "", "xcf", ",", "_", ",", "_", "=", "generate_counterfactual", "(", "model", ",", "x", "=", "x_orig", ",", "y_target", "=", "0", ",", "features_whitelist", "=", "features_whitelist", ",", "regularization", "=", "\"l1\"", ",", "return_as_dict", "=", "False", ")", "\n", "\n", "# Compute feature importances of the local approximation", "\n", "local_feature_importance", "=", "None", "\n", "if", "isinstance", "(", "model", ",", "LogisticRegression", ")", ":", "\n", "            ", "local_feature_importance", "=", "(", "model", ".", "coef_", "/", "(", "np", ".", "sum", "(", "model", ".", "coef_", ")", ")", ")", ".", "flatten", "(", ")", "\n", "", "elif", "isinstance", "(", "model", ",", "DecisionTreeClassifier", ")", ":", "\n", "            ", "local_feature_importance", "=", "model", ".", "tree_", ".", "compute_feature_importances", "(", "normalize", "=", "True", ")", ".", "flatten", "(", ")", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "f\"Computation of feature importances for {type(model)} is not supported.\"", ")", "\n", "\n", "", "return", "{", "\"counterfactual\"", ":", "xcf", ",", "\"local_feature_importance\"", ":", "local_feature_importance", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.experiments_conformalprediction.get_model": [[17, 26], ["ValueError"], "function", ["None"], ["def", "get_model", "(", "model_desc", ")", ":", "\n", "    ", "if", "model_desc", "==", "\"knn\"", ":", "\n", "        ", "return", "KNeighborsClassifier", "\n", "", "elif", "model_desc", "==", "\"randomforest\"", ":", "\n", "        ", "return", "RandomForestClassifier", "\n", "", "elif", "model_desc", "==", "\"gnb\"", ":", "\n", "        ", "return", "GaussianNB", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Invalid value of 'model_desc' -- must be one of the following 'knn', 'dectree', 'gnb'; but not '{model_desc}'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.experiments_conformalprediction.get_model_parameters": [[27, 36], ["ValueError"], "function", ["None"], ["", "", "def", "get_model_parameters", "(", "model_desc", ")", ":", "\n", "    ", "if", "model_desc", "==", "\"knn\"", ":", "\n", "        ", "return", "knn_parameters", "\n", "", "elif", "model_desc", "==", "\"randomforest\"", ":", "\n", "        ", "return", "random_forest_parameters", "\n", "", "elif", "model_desc", "==", "\"gnb\"", ":", "\n", "        ", "return", "{", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Invalid value of 'model_desc' -- must be one of the following 'knn', 'dectree', 'gnb'; but not '{model_desc}'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.experiments_conformalprediction.compute_export_conformal_results": [[38, 53], ["print", "print", "print", "print", "print", "np.mean", "np.var", "np.mean", "np.var", "np.mean", "np.var", "np.mean", "np.var", "np.round", "np.round", "np.round", "np.round", "np.round", "np.round"], "function", ["None"], ["", "", "def", "compute_export_conformal_results", "(", "expl_feasibility", ",", "sparsity_counterfactual", ",", "sparsity_expl", ",", "overlap_expl_counterfactual", ")", ":", "\n", "# Compute final statistics", "\n", "    ", "expl_feasibility_mean", ",", "expl_feasibility_var", "=", "np", ".", "mean", "(", "expl_feasibility", ")", ",", "np", ".", "var", "(", "expl_feasibility", ")", "\n", "sparsity_counterfactual_mean", ",", "sparsity_counterfactual_var", "=", "np", ".", "mean", "(", "sparsity_counterfactual", ")", ",", "np", ".", "var", "(", "sparsity_counterfactual", ")", "\n", "sparsity_expl_mean", ",", "sparsity_expl_var", "=", "np", ".", "mean", "(", "sparsity_expl", ")", ",", "np", ".", "var", "(", "sparsity_expl", ")", "\n", "overlap_expl_counterfactual_mean", ",", "overlap_expl_counterfactual_var", "=", "np", ".", "mean", "(", "overlap_expl_counterfactual", ")", ",", "np", ".", "var", "(", "overlap_expl_counterfactual", ")", "\n", "\n", "# Export", "\n", "print", "(", "f\"Expl feasibility: {expl_feasibility_mean} \\pm {expl_feasibility_var}\"", ")", "\n", "print", "(", "f\"Counterfactual sparsity: {sparsity_counterfactual_mean} \\pm {sparsity_counterfactual_var}\"", ")", "\n", "print", "(", "f\"Expl sparsity: {sparsity_expl_mean} \\pm {sparsity_expl_var}\"", ")", "\n", "print", "(", "f\"Overlap expl vs. counterfactual: {overlap_expl_counterfactual_mean} \\pm {overlap_expl_counterfactual_var}\"", ")", "\n", "\n", "# LaTeX export", "\n", "print", "(", "f\"${np.round(expl_feasibility_mean, 2)} \\pm {np.round(expl_feasibility_var, 2)}$ & ${np.round(sparsity_expl_mean, 2)} \\pm {np.round(sparsity_expl_var, 2)}$ & ${np.round(sparsity_counterfactual_mean, 2)} \\pm {np.round(sparsity_counterfactual_var, 2)}$\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.experiments_conformalprediction.compute_export_cnformal_perturbed_features_recovery_results": [[54, 65], ["print", "print", "print", "np.mean", "np.var", "np.mean", "np.var", "np.round", "np.round", "np.round", "np.round"], "function", ["None"], ["", "def", "compute_export_cnformal_perturbed_features_recovery_results", "(", "perturbed_features_recovery_counterfactual", ",", "perturbed_features_recovery_expl", ")", ":", "\n", "# Compute final statistics", "\n", "    ", "perturbed_features_recovery_counterfactual_mean", ",", "perturbed_features_recovery_counterfactual_var", "=", "np", ".", "mean", "(", "perturbed_features_recovery_counterfactual", ")", ",", "np", ".", "var", "(", "perturbed_features_recovery_counterfactual", ")", "\n", "perturbed_features_recovery_expl_mean", ",", "perturbed_features_recovery_expl_var", "=", "np", ".", "mean", "(", "perturbed_features_recovery_expl", ")", ",", "np", ".", "var", "(", "perturbed_features_recovery_expl", ")", "\n", "\n", "# Export", "\n", "print", "(", "f\"Perturbed features recovery counterfactual: {perturbed_features_recovery_counterfactual_mean} \\pm {perturbed_features_recovery_counterfactual_var}\"", ")", "\n", "print", "(", "f\"Perturbed features recovery expl: {perturbed_features_recovery_expl_mean} \\pm {perturbed_features_recovery_expl_var}\"", ")", "\n", "\n", "# LaTeX export", "\n", "print", "(", "f\"${np.round(perturbed_features_recovery_expl_mean, 2)} \\pm {np.round(perturbed_features_recovery_expl_var, 2)}$ & ${np.round(perturbed_features_recovery_counterfactual_mean, 2)} \\pm {np.round(perturbed_features_recovery_counterfactual_var, 2)}$\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.data_preparation.scale_standardize_data": [[4, 7], ["sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit_transform"], "function", ["None"], ["def", "scale_standardize_data", "(", "X", ")", ":", "\n", "    ", "scaler", "=", "StandardScaler", "(", ")", "\n", "return", "scaler", ".", "fit_transform", "(", "X", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.ConformalRejectOptionGridSearchCV.__init__": [[119, 131], ["ray.shutdown", "ray.init"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model_class", ",", "\n", "parameter_grid", ",", "\n", "rejection_thresholds", ",", "\n", "cv", "=", "5", ")", ":", "\n", "        ", "self", ".", "model_class", "=", "model_class", "\n", "self", ".", "parameter_grid", "=", "parameter_grid", "\n", "self", ".", "rejection_thresholds", "=", "rejection_thresholds", "\n", "self", ".", "cv", "=", "cv", "\n", "\n", "ray", ".", "shutdown", "(", ")", "\n", "ray", ".", "init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.ConformalRejectOptionGridSearchCV.fit": [[132, 137], ["modelselection_conformal.ConformalRejectOptionGridSearchCV._generate_models", "modelselection_conformal.ConformalRejectOptionGridSearchCV.best_model_params"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.ConformalRejectOptionGridSearchCV._generate_models", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.ConformalRejectOptionGridSearchCV.best_model_params"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# self.X, self.y = X, y", "\n", "        ", "self", ".", "models", "=", "self", ".", "_generate_models", "(", "\n", "X", ",", "y", ")", "# Fit LVQ and rejection models", "\n", "return", "self", ".", "best_model_params", "(", ")", "# Return best score", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.ConformalRejectOptionGridSearchCV._generate_models": [[138, 152], ["ray.put", "ray.put", "sklearn.model_selection.ParameterGrid", "ray.get", "models.append", "reject_cv_performance.remote"], "methods", ["None"], ["", "def", "_generate_models", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# Load datasets into ray shared memory store (optimized for numpy arrays, works best for large datasets)", "\n", "        ", "X_id", "=", "ray", ".", "put", "(", "X", ")", "\n", "y_id", "=", "ray", ".", "put", "(", "y", ")", "\n", "\n", "models", "=", "[", "]", "\n", "for", "params", "in", "ParameterGrid", "(", "self", ".", "parameter_grid", ")", ":", "\n", "            ", "models", ".", "append", "(", "\n", "reject_cv_performance", ".", "remote", "(", "self", ",", "params", ",", "X_id", ",", "y_id", ")", ")", "\n", "\n", "", "model_ouputs", "=", "ray", ".", "get", "(", "\n", "models", "\n", ")", "# Evaluate remote functions (i.e. trials with different parameterizations)", "\n", "return", "model_ouputs", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.ConformalRejectOptionGridSearchCV.best_model_params": [[153, 178], ["modelselection_conformal.ConformalRejectOptionGridSearchCV.results_df", "df[].idxmax", "list", "numpy.mean", "modelselection.compute_threshold_knee_point", "filter"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.ConformalRejectOptionGridSearchCV.results_df", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection.compute_threshold_knee_point"], ["", "def", "best_model_params", "(", "self", ")", ":", "\n", "# select best lvq model (by avg accuracy)", "\n", "        ", "df", "=", "self", ".", "results_df", "(", ")", "\n", "idx_best_model", "=", "df", "[", "'avg_accuracy_score'", "]", ".", "idxmax", "(", ")", "\n", "\n", "model_output", "=", "self", ".", "models", "[", "idx_best_model", "]", "\n", "params", "=", "model_output", "[", "'params'", "]", "\n", "\n", "# select best rejection threshold", "\n", "fold_rejection_output", "=", "model_output", "[", "'fold_rejection_outputs'", "]", "\n", "best_rejection_threshold_folds", "=", "[", "\n", "compute_threshold_knee_point", "(", "fold", "[", "'rejection_rates'", "]", ",", "\n", "fold", "[", "'accuracies'", "]", ",", "\n", "self", ".", "rejection_thresholds", ")", "\n", "for", "fold", "in", "fold_rejection_output", "\n", "]", "\n", "best_rejection_threshold_folds", "=", "list", "(", "\n", "filter", "(", "None", ",", "best_rejection_threshold_folds", ")", ")", "\n", "best_rejection_threshold", "=", "np", ".", "mean", "(", "\n", "best_rejection_threshold_folds", "\n", ")", "# Compute best threshold as mean of thresholds", "\n", "\n", "return", "{", "\n", "'model_params'", ":", "params", ",", "\n", "'rejection_threshold'", ":", "best_rejection_threshold", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.ConformalRejectOptionGridSearchCV.plot_arc_curve": [[180, 202], ["matplotlib.figure", "enumerate", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.plot", "ValueError", "str"], "methods", ["None"], ["", "def", "plot_arc_curve", "(", "self", ",", "model_idx", "=", "None", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "model_idx", "is", "not", "None", ":", "\n", "            ", "model_output", "=", "self", ".", "models", "[", "model_idx", "]", "\n", "", "elif", "params", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Supply either index of lvq model or lvq hyperparameter setting\"", "\n", ")", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "for", "idx", ",", "rejection_output", "in", "enumerate", "(", "\n", "model_output", "[", "'fold_rejection_outputs'", "]", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "rejection_output", "[", "'rejection_rates'", "]", ",", "\n", "rejection_output", "[", "'accuracies'", "]", ",", "\n", "label", "=", "\"ARC of fold \"", "+", "str", "(", "idx", ")", ")", "\n", "\n", "", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlabel", "(", "\"Rejection Rate\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Accuracy\"", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"lower right\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.ConformalRejectOptionGridSearchCV.results_df": [[203, 214], ["pandas.DataFrame", "filter_keys_from_dict"], "methods", ["None"], ["", "def", "results_df", "(", "self", ")", ":", "\n", "        ", "output_keys", "=", "[", "\n", "'params'", ",", "'avg_accuracy_score'", ",", "'std_accuracy_score'", ",", "\n", "'avg_au_arc'", ",", "'std_au_arc'", "\n", "]", "\n", "filter_keys_from_dict", "=", "lambda", "x", ",", "keys", ":", "{", "key", ":", "x", "[", "key", "]", "for", "key", "in", "keys", "}", "\n", "model_scores", "=", "[", "\n", "filter_keys_from_dict", "(", "model_ouput", ",", "output_keys", ")", "\n", "for", "model_ouput", "in", "self", ".", "models", "\n", "]", "\n", "return", "pd", ".", "DataFrame", "(", "model_scores", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.generate_model": [[12, 17], ["model.", "model.fit", "model.score"], "function", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.fit", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.score"], ["def", "generate_model", "(", "model", ",", "params", ",", "X_train", ",", "y_train", ",", "X_validation", ",", "y_validation", ")", ":", "\n", "    ", "model", "=", "model", "(", "**", "params", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "score", "=", "model", ".", "score", "(", "X_validation", ",", "y_validation", ")", "\n", "return", "model", ",", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.conformal_reject_threshold_performance": [[19, 41], ["sklearn.model_selection.train_test_split", "conformalprediction.ConformalPredictionClassifier", "conformalprediction.ConformalPredictionClassifier.fit", "conformalprediction.ConformalPredictionClassifierRejectOption", "modelselection.check_rejections", "list", "modelselection.rate_of_lists", "model.score", "conformalprediction.MyClassifierSklearnWrapper", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.fit", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection.check_rejections", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection.rate_of_lists", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.score"], ["", "def", "conformal_reject_threshold_performance", "(", "model", ",", "threshold", ",", "\n", "X_train", ",", "y_train", ",", "X_validation", ",", "y_validation", ")", ":", "\n", "# Split training set into train and calibtration set (calibration set is needed for conformal prediction)", "\n", "    ", "X_train", ",", "X_calib", ",", "y_train", ",", "y_calib", "=", "train_test_split", "(", "X_train", ",", "y_train", ",", "test_size", "=", "0.2", ",", "random_state", "=", "444", ")", "\n", "\n", "# Create conformal prediction model", "\n", "conformal_model", "=", "ConformalPredictionClassifier", "(", "MyClassifierSklearnWrapper", "(", "model", ")", ")", "\n", "conformal_model", ".", "fit", "(", "X_calib", ",", "y_calib", ")", "\n", "reject_option_model", "=", "ConformalPredictionClassifierRejectOption", "(", "conformal_model", ",", "threshold", "=", "threshold", ")", "\n", "\n", "y_reject", "=", "check_rejections", "(", "X_validation", ",", "reject_option_model", ")", "\n", "\n", "index", "=", "list", "(", "range", "(", "len", "(", "y_validation", ")", ")", ")", "\n", "index", "=", "[", "x", "for", "x", "in", "index", "if", "x", "not", "in", "y_reject", "]", "\n", "if", "len", "(", "X_validation", "[", "index", "]", ")", "==", "0", ":", "# Stop if all elements are rejected for threshold", "\n", "        ", "return", "\n", "\n", "", "reject_rate", "=", "rate_of_lists", "(", "y_reject", ",", "X_validation", ")", "\n", "\n", "# Compute accuracy of model", "\n", "new_score", "=", "model", ".", "score", "(", "X_validation", "[", "index", "]", ",", "y_validation", "[", "index", "]", ")", "\n", "return", "{", "'rejection_rate'", ":", "reject_rate", ",", "'reject_accuracy'", ":", "new_score", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.reject_cv_performance": [[43, 114], ["sklearn.model_selection.KFold", "sklearn.model_selection.KFold.split", "numpy.std", "numpy.std", "modelselection_conformal.generate_model", "fold_accuracy_scores.append", "fold_models.append", "modelselection.sort_increasing", "sklearn.metrics.auc", "fold_rejections.append", "sum", "len", "sum", "len", "modelselection_conformal.conformal_reject_threshold_performance", "accuracies.append", "rejection_rates.append", "rejection_rates.append", "accuracies.append"], "function", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.generate_model", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection.sort_increasing", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection_conformal.conformal_reject_threshold_performance"], ["", "@", "ray", ".", "remote", "\n", "def", "reject_cv_performance", "(", "trial_settings", ",", "parameters", ",", "X", ",", "y", ")", ":", "\n", "    ", "\"\"\"Ray Remote function used for multiprocessing/threading all gridsearch trials\"\"\"", "\n", "model_class", "=", "trial_settings", ".", "model_class", "\n", "# reject_option_model = trial_settings.reject_option_model", "\n", "rejection_thresholds", "=", "trial_settings", ".", "rejection_thresholds", "\n", "cv", "=", "trial_settings", ".", "cv", "\n", "\n", "# Generate folds", "\n", "folds", "=", "KFold", "(", "n_splits", "=", "cv", ")", "\n", "fold_accuracy_scores", "=", "[", "]", "\n", "fold_models", "=", "[", "]", "\n", "fold_rejections", "=", "[", "]", "\n", "\n", "for", "train", ",", "validation", "in", "folds", ".", "split", "(", "X", ")", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_validation", ",", "y_validation", "=", "X", "[", "train", "]", ",", "y", "[", "train", "]", ",", "X", "[", "\n", "validation", "]", ",", "y", "[", "validation", "]", "\n", "model", ",", "accuracy_score", "=", "generate_model", "(", "\n", "model_class", ",", "\n", "parameters", ",", "\n", "X_train", ",", "y_train", ",", "\n", "X_validation", ",", "y_validation", "\n", ")", "\n", "fold_accuracy_scores", ".", "append", "(", "accuracy_score", ")", "\n", "fold_models", ".", "append", "(", "model", ")", "\n", "\n", "# compute rejects", "\n", "accuracies", "=", "[", "accuracy_score", "]", "\n", "rejection_rates", "=", "[", "0", "]", "\n", "rejection_thresholds_performance", "=", "[", "\n", "conformal_reject_threshold_performance", "(", "model", ",", "threshold", ",", "\n", "X_train", ",", "y_train", ",", "\n", "X_validation", ",", "y_validation", ")", "\n", "for", "threshold", "in", "rejection_thresholds", "\n", "]", "\n", "\n", "for", "x", "in", "rejection_thresholds_performance", ":", "\n", "            ", "if", "x", "is", "not", "None", ":", "\n", "                ", "rejection_rates", ".", "append", "(", "x", "[", "'rejection_rate'", "]", ")", "\n", "accuracies", ".", "append", "(", "x", "[", "'reject_accuracy'", "]", ")", "\n", "\n", "", "", "if", "rejection_rates", "[", "-", "1", "]", "!=", "1", ":", "# Add final point of ARC curve (by defintion of ARC)", "\n", "            ", "accuracies", ".", "append", "(", "1", ")", "\n", "rejection_rates", ".", "append", "(", "1", ")", "\n", "\n", "# Compute auc for ARC", "\n", "", "sorted_rates", ",", "sorted_accuracies", "=", "sort_increasing", "(", "rejection_rates", ",", "accuracies", ")", "\n", "au_arc_score", "=", "auc", "(", "sorted_rates", ",", "sorted_accuracies", ")", "\n", "\n", "rejection_model_outputs", "=", "{", "\n", "'accuracies'", ":", "accuracies", ",", "\n", "'rejection_rates'", ":", "rejection_rates", ",", "\n", "'au_arc_score'", ":", "au_arc_score", "\n", "}", "\n", "fold_rejections", ".", "append", "(", "rejection_model_outputs", ")", "\n", "\n", "", "average_au_arc", "=", "sum", "(", "[", "x", "[", "'au_arc_score'", "]", "for", "x", "in", "fold_rejections", "]", ")", "/", "len", "(", "fold_rejections", ")", "\n", "std_au_arc", "=", "np", ".", "std", "(", "[", "x", "[", "'au_arc_score'", "]", "for", "x", "in", "fold_rejections", "]", ")", "\n", "\n", "avg_score", "=", "sum", "(", "fold_accuracy_scores", ")", "/", "len", "(", "fold_accuracy_scores", ")", "\n", "std_score", "=", "np", ".", "std", "(", "fold_accuracy_scores", ")", "\n", "\n", "return", "{", "\n", "'params'", ":", "parameters", ",", "\n", "'fold_models'", ":", "fold_models", ",", "\n", "'accuracy_score'", ":", "fold_accuracy_scores", ",", "\n", "'avg_accuracy_score'", ":", "avg_score", ",", "\n", "'std_accuracy_score'", ":", "std_score", ",", "\n", "'fold_rejection_outputs'", ":", "fold_rejections", ",", "\n", "'avg_au_arc'", ":", "average_au_arc", ",", "\n", "'std_au_arc'", ":", "std_au_arc", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection.check_rejections": [[5, 14], ["range", "reject_option_model", "y_rejects.append"], "function", ["None"], ["def", "check_rejections", "(", "X_test", ",", "reject_option_model", ")", ":", "\n", "# For each sample in the test set, check if it is rejected", "\n", "    ", "y_rejects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "X_test", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "x", "=", "X_test", "[", "i", ",", ":", "]", "\n", "if", "reject_option_model", "(", "x", ")", ":", "\n", "            ", "y_rejects", ".", "append", "(", "i", ")", "\n", "\n", "", "", "return", "y_rejects", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection.rate_of_lists": [[15, 17], ["len", "len"], "function", ["None"], ["", "def", "rate_of_lists", "(", "part", ",", "whole", ")", ":", "\n", "    ", "return", "len", "(", "part", ")", "/", "len", "(", "whole", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection.find_nearest": [[18, 20], ["numpy.abs().argmin", "numpy.abs"], "function", ["None"], ["", "def", "find_nearest", "(", "array", ",", "value", ")", ":", "\n", "    ", "return", "(", "np", ".", "abs", "(", "array", "-", "value", ")", ")", ".", "argmin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection.compute_threshold_knee_point": [[21, 50], ["numpy.array", "numpy.array", "numpy.array", "kneed.KneeLocator", "modelselection.find_nearest"], "function", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection.find_nearest"], ["", "def", "compute_threshold_knee_point", "(", "x", ",", "y", ",", "thresholds", ")", ":", "\n", "    ", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "thresholds", "=", "np", ".", "array", "(", "thresholds", ")", "\n", "\n", "# Filter duplicate x,y coordinates", "\n", "# Remove non duplicate rejection_rates", "\n", "# x, indices = np.unique(x, return_index=True)", "\n", "# y = y[indices]", "\n", "# thresholds = thresholds[indices]", "\n", "\n", "# remove non-increasing elements", "\n", "# indices = [0] + [idx for idx in range(1, len(x)) if y[idx] >= y[idx-1]]", "\n", "# x = x[indices]", "\n", "# y = y[indices]", "\n", "# thresholds = thresholds[indices]", "\n", "\n", "# compute knee point rejection rate", "\n", "kneedle", "=", "KneeLocator", "(", "x", ",", "y", ",", "S", "=", "1.0", ",", "curve", "=", "\"concave\"", ",", "online", "=", "True", ")", "\n", "\n", "if", "kneedle", ".", "knee", "is", "not", "None", ":", "\n", "# TODO find/approximate rejection_threshold for the knee point rejection rate", "\n", "        ", "idx_nearest", "=", "find_nearest", "(", "x", ",", "kneedle", ".", "knee", ")", "\n", "# kneedle.plot_knee()", "\n", "# plt.plot(kneedle.x_difference, kneedle.y_difference)", "\n", "# kneedle.plot_knee_normalized()", "\n", "return", "thresholds", "[", "idx_nearest", "]", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.modelselection.sort_increasing": [[51, 60], ["numpy.array", "numpy.array", "numpy.argsort"], "function", ["None"], ["", "def", "sort_increasing", "(", "rejection_rates", ",", "accuracies", ")", ":", "\n", "    ", "rejection_rates", "=", "np", ".", "array", "(", "rejection_rates", ")", "\n", "accuracies", "=", "np", ".", "array", "(", "accuracies", ")", "\n", "\n", "indices", "=", "np", ".", "argsort", "(", "rejection_rates", ")", "\n", "\n", "rejection_rates", "=", "rejection_rates", "[", "indices", "]", "\n", "accuracies", "=", "accuracies", "[", "indices", "]", "\n", "return", "rejection_rates", ",", "accuracies", "\n", "", ""]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.reject_option.RejectOption.__init__": [[5, 9], ["abc.ABC.__init__"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifierRejectOption.__init__"], ["    ", "def", "__init__", "(", "self", ",", "threshold", ",", "**", "kwds", ")", ":", "\n", "        ", "self", ".", "threshold", "=", "threshold", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.reject_option.RejectOption.criterion": [[10, 13], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "criterion", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.reject_option.RejectOption.__call__": [[14, 16], ["reject_option.RejectOption.reject"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.reject_option.RejectOption.reject"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "reject", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.reject_option.RejectOption.reject": [[17, 19], ["reject_option.RejectOption.criterion"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifierRejectOption.criterion"], ["", "def", "reject", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "criterion", "(", "x", ")", "<", "self", ".", "threshold", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.MyClassifier.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.MyClassifier.predict_proba": [[13, 16], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.MyClassifierSklearnWrapper.__init__": [[19, 27], ["conformalprediction.MyClassifier.__init__", "isinstance", "TypeError", "TypeError", "hasattr", "callable", "type", "getattr", "type", "type"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifierRejectOption.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "**", "kwds", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "model", ",", "ClassifierMixin", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"'model' must be an instance of 'sklearn.base.ClassifierMixin' not of '{type(model)}'\"", ")", "\n", "", "if", "not", "(", "hasattr", "(", "type", "(", "model", ")", ",", "'predict_proba'", ")", "and", "callable", "(", "getattr", "(", "type", "(", "model", ")", ",", "'predict_proba'", ")", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"'model' does not have a method 'predict_proba'\"", ")", "\n", "", "self", ".", "model", "=", "model", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.MyClassifierSklearnWrapper.predict_proba": [[28, 30], ["conformalprediction.MyClassifierSklearnWrapper.model.predict_proba"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.MyClassifierSklearnWrapper.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.__init__": [[33, 40], ["isinstance", "TypeError", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "clf_model", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "clf_model", ",", "MyClassifier", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"'clf_model' must be an instance of 'MyClassifier' not of '{type(clf_model)}'\"", ")", "\n", "\n", "", "self", ".", "clf_model", "=", "clf_model", "\n", "self", ".", "calibration_set", "=", "None", "\n", "self", ".", "classes", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier._non_conformity_measure": [[41, 51], ["range", "len", "float", "alphas.append", "numpy.max"], "methods", ["None"], ["", "def", "_non_conformity_measure", "(", "self", ",", "Y_proba", ",", "y_target", ")", ":", "\n", "        ", "alphas", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "y_target", ")", ")", ":", "\n", "            ", "d", "=", "Y_proba", "[", "i", ",", ":", "]", "-", "Y_proba", "[", "i", ",", "y_target", "[", "i", "]", "]", "\n", "d", "[", "y_target", "[", "i", "]", "]", "=", "float", "(", "\"-inf\"", ")", "\n", "\n", "alphas", ".", "append", "(", "np", ".", "max", "(", "d", ")", ")", "\n", "\n", "", "return", "alphas", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.score": [[52, 55], ["sklearn.metrics.accuracy_score", "conformalprediction.ConformalPredictionClassifier.predict"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.predict"], ["", "def", "score", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "y_pred", "=", "self", ".", "predict", "(", "X", ")", "[", "0", "]", "# Prediction of labels only", "\n", "return", "accuracy_score", "(", "y", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.fit": [[56, 61], ["conformalprediction.ConformalPredictionClassifier.clf_model.predict_proba", "conformalprediction.ConformalPredictionClassifier._non_conformity_measure", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.MyClassifierSklearnWrapper.predict_proba", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier._non_conformity_measure"], ["", "def", "fit", "(", "self", ",", "X_calib", ",", "y_calib", ")", ":", "\n", "        ", "Y_calib_proba", "=", "self", ".", "clf_model", ".", "predict_proba", "(", "X_calib", ")", "\n", "self", ".", "calibration_set", "=", "self", ".", "_non_conformity_measure", "(", "Y_calib_proba", ",", "y_calib", ")", "\n", "\n", "self", ".", "classes", "=", "np", ".", "unique", "(", "y_calib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.predict": [[62, 89], ["conformalprediction.ConformalPredictionClassifier.clf_model.predict_proba", "len", "range", "numpy.array", "numpy.argmax", "numpy.max", "range", "numpy.array", "Exception", "numpy.array", "range", "numpy.array.append", "numpy.array.append", "len", "p_values_.append", "conformalprediction.ConformalPredictionClassifier._non_conformity_measure", "numpy.sum", "numpy.repeat", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.MyClassifierSklearnWrapper.predict_proba", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier._non_conformity_measure"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "calibration_set", "is", "None", "or", "self", ".", "classes", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Conformal predictor have not been fitted -- call method 'fit()' before making predictions!\"", ")", "\n", "\n", "# Compute non-conformity measure for each possible target class", "\n", "", "Y_pred_proba", "=", "self", ".", "clf_model", ".", "predict_proba", "(", "X", ")", "\n", "alphas_pred", "=", "np", ".", "array", "(", "[", "self", ".", "_non_conformity_measure", "(", "Y_pred_proba", ",", "np", ".", "repeat", "(", "y_target", ",", "repeats", "=", "Y_pred_proba", ".", "shape", "[", "0", "]", ")", ")", "for", "y_target", "in", "self", ".", "classes", "]", ")", ".", "T", "\n", "\n", "# Compute final prediciton, confidence and credibility scores", "\n", "p_values", "=", "[", "]", "# Compute p-values", "\n", "n_calibration_samples", "=", "len", "(", "self", ".", "calibration_set", ")", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "p_values_", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "classes", ")", ")", ":", "\n", "                ", "p", "=", "1.", "/", "(", "n_calibration_samples", "+", "1.", ")", "*", "np", ".", "sum", "(", "self", ".", "calibration_set", ">=", "alphas_pred", "[", "i", ",", "j", "]", ")", "\n", "p_values_", ".", "append", "(", "p", ")", "\n", "", "p_values", ".", "append", "(", "p_values_", ")", "\n", "", "p_values", "=", "np", ".", "array", "(", "p_values", ")", "\n", "\n", "y_pred", "=", "np", ".", "argmax", "(", "p_values", ",", "axis", "=", "1", ")", "# Compute prediction, ...", "\n", "credibility", "=", "np", ".", "max", "(", "p_values", ",", "axis", "=", "1", ")", "\n", "confidence", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "confidence", ".", "append", "(", "1.", "-", "p_values", "[", "i", ",", "np", ".", "argsort", "(", "p_values", "[", "i", ",", ":", "]", ")", "[", "-", "2", "]", "]", ")", "\n", "", "confidence", "=", "np", ".", "array", "(", "confidence", ")", "\n", "\n", "return", "y_pred", ",", "confidence", ",", "credibility", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifierRejectOption.__init__": [[92, 98], ["reject_option.RejectOption.__init__", "isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifierRejectOption.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conformal_prediction_model", ",", "**", "kwds", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "conformal_prediction_model", ",", "ConformalPredictionClassifier", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"'conformal_prediction_model' must be an instance of 'ConformalPredictionClassifier' not of '{type(conformal_prediction_model)}'\"", ")", "\n", "", "self", ".", "conformal_predictor", "=", "conformal_prediction_model", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifierRejectOption.criterion": [[99, 101], ["conformalprediction.ConformalPredictionClassifierRejectOption.conformal_predictor.predict", "x.reshape"], "methods", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.conformalprediction.ConformalPredictionClassifier.predict"], ["", "def", "criterion", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conformal_predictor", ".", "predict", "(", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "2", "]", "# Use credibility as a score ", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.utils.load_data": [[23, 51], ["sklearn.datasets.load_iris", "data_preparation.scale_standardize_data", "sklearn.datasets.load_breast_cancer", "data_preparation.scale_standardize_data", "sklearn.datasets.load_wine", "data_preparation.scale_standardize_data", "numpy.load", "os.path.join", "numpy.load", "numpy.load", "ValueError", "os.path.join", "os.path.join", "numpy.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.data_preparation.scale_standardize_data", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.data_preparation.scale_standardize_data", "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.data_preparation.scale_standardize_data"], ["def", "load_data", "(", "data_desc", ",", "data_folder", "=", "\"../../\"", ",", "scaling", "=", "True", ")", ":", "\n", "    ", "if", "data_desc", "==", "\"iris\"", ":", "\n", "        ", "X", ",", "y", "=", "load_iris", "(", "return_X_y", "=", "True", ")", "\n", "if", "scaling", "is", "True", ":", "\n", "            ", "X", "=", "scale_standardize_data", "(", "X", ")", "\n", "", "return", "X", ",", "y", "\n", "", "elif", "data_desc", "==", "\"breastcancer\"", ":", "\n", "        ", "X", ",", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "if", "scaling", "is", "True", ":", "\n", "            ", "X", "=", "scale_standardize_data", "(", "X", ")", "\n", "", "return", "X", ",", "y", "\n", "", "elif", "data_desc", "==", "\"wine\"", ":", "\n", "        ", "X", ",", "y", "=", "load_wine", "(", "return_X_y", "=", "True", ")", "\n", "if", "scaling", "is", "True", ":", "\n", "            ", "X", "=", "scale_standardize_data", "(", "X", ")", "\n", "", "return", "X", ",", "y", "\n", "", "elif", "data_desc", "==", "\"flip\"", ":", "\n", "        ", "flip_data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_folder", ",", "f\"datasets_formatted/flip.npz\"", ")", ")", "\n", "if", "scaling", "is", "False", ":", "\n", "            ", "flip_data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_folder", ",", "f\"datasets_formatted/flip_notscaled.npz\"", ")", ")", "\n", "", "return", "flip_data", "[", "'X'", "]", ",", "flip_data", "[", "'y'", "]", "\n", "", "elif", "data_desc", "==", "\"t21\"", ":", "\n", "        ", "t21_data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_folder", ",", "f\"datasets_formatted/t21.npz\"", ")", ")", "\n", "if", "scaling", "is", "False", ":", "\n", "            ", "t21_data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_folder", ",", "f\"datasets_formatted/t21_notscaled.npz\"", ")", ")", "\n", "", "return", "t21_data", "[", "'X'", "]", ",", "t21_data", "[", "'y'", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unkown data set {data_desc}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.utils.evaluate_sparsity": [[54, 56], ["utils.evaluate_sparsity_ex"], "function", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.utils.evaluate_sparsity_ex"], ["", "", "def", "evaluate_sparsity", "(", "xcf", ",", "x_orig", ")", ":", "\n", "    ", "return", "evaluate_sparsity_ex", "(", "xcf", "-", "x_orig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.utils.evaluate_sparsity_ex": [[57, 59], ["numpy.sum", "numpy.abs", "range"], "function", ["None"], ["", "def", "evaluate_sparsity_ex", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "abs", "(", "x", "[", "i", "]", ")", ">", "non_zero_threshold_sparsity", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ")", "# Count non-zero features (smaller values are better!)", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.utils.evaluate_featureoverlap": [[61, 68], ["numpy.array().astype", "numpy.array().astype", "numpy.sum", "numpy.array", "numpy.array", "numpy.abs", "range", "numpy.abs", "range"], "function", ["None"], ["", "def", "evaluate_featureoverlap", "(", "xcf1", ",", "xcf2", ",", "x_orig", ")", ":", "\n", "# Find non-zero features", "\n", "    ", "a", "=", "np", ".", "array", "(", "[", "np", ".", "abs", "(", "xcf1", "[", "i", "]", "-", "x_orig", "[", "i", "]", ")", ">", "non_zero_threshold", "for", "i", "in", "range", "(", "xcf1", ".", "shape", "[", "0", "]", ")", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "b", "=", "np", ".", "array", "(", "[", "np", ".", "abs", "(", "xcf2", "[", "i", "]", "-", "x_orig", "[", "i", "]", ")", ">", "non_zero_threshold", "for", "i", "in", "range", "(", "xcf2", ".", "shape", "[", "0", "]", ")", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "# Look for overlaps", "\n", "return", "np", ".", "sum", "(", "a", "+", "b", "==", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.utils.select_random_feature_subset": [[70, 74], ["int", "random.sample", "range"], "function", ["None"], ["", "def", "select_random_feature_subset", "(", "n_features", ",", "size", "=", "0.3", ")", ":", "\n", "    ", "n_subset_size", "=", "int", "(", "n_features", "*", "size", ")", "\n", "\n", "return", "random", ".", "sample", "(", "range", "(", "n_features", ")", ",", "n_subset_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.utils.apply_perturbation": [[76, 80], ["numpy.random.normal", "len"], "function", ["None"], ["", "def", "apply_perturbation", "(", "X", ",", "features_idx", ",", "noise_size", "=", "1.", ")", ":", "\n", "    ", "scale", "=", "noise_size", "# Scale/amount/variance of noise", "\n", "X", "[", ":", ",", "features_idx", "]", "+=", "np", ".", "random", ".", "normal", "(", "scale", "=", "scale", ",", "size", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "len", "(", "features_idx", ")", ")", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.utils.evaluate_perturbed_features_recovery": [[82, 84], ["utils.evaluate_perturbed_features_recovery_ex", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.utils.evaluate_perturbed_features_recovery_ex"], ["", "def", "evaluate_perturbed_features_recovery", "(", "xcf", ",", "x_orig", ",", "perturbed_features_idx", ")", ":", "\n", "    ", "return", "evaluate_perturbed_features_recovery_ex", "(", "np", ".", "abs", "(", "xcf", "-", "x_orig", ")", ",", "perturbed_features_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andreartelt_localmodelagnosticexplanationreject.Implementation.utils.evaluate_perturbed_features_recovery_ex": [[85, 98], ["numpy.argwhere", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "len", "list", "list", "filter", "filter", "filter", "range", "filter", "range", "range", "range"], "function", ["None"], ["", "def", "evaluate_perturbed_features_recovery_ex", "(", "x", ",", "perturbed_features_idx", ")", ":", "\n", "    ", "indices", "=", "np", ".", "argwhere", "(", "x", ">", "non_zero_threshold", ")", "\n", "\n", "# Compute confusion matrix", "\n", "tp", "=", "np", ".", "sum", "(", "[", "idx", "in", "perturbed_features_idx", "for", "idx", "in", "indices", "]", ")", "/", "len", "(", "indices", ")", "\n", "fp", "=", "np", ".", "sum", "(", "[", "idx", "not", "in", "perturbed_features_idx", "for", "idx", "in", "indices", "]", ")", "/", "len", "(", "indices", ")", "\n", "tn", "=", "np", ".", "sum", "(", "[", "idx", "not", "in", "perturbed_features_idx", "for", "idx", "in", "filter", "(", "lambda", "i", ":", "i", "not", "in", "indices", ",", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ")", "]", ")", "/", "len", "(", "list", "(", "filter", "(", "lambda", "i", ":", "i", "not", "in", "indices", ",", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ")", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "[", "idx", "in", "perturbed_features_idx", "for", "idx", "in", "filter", "(", "lambda", "i", ":", "i", "not", "in", "indices", ",", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ")", "]", ")", "/", "len", "(", "list", "(", "filter", "(", "lambda", "i", ":", "i", "not", "in", "indices", ",", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ")", ")", ")", "\n", "\n", "if", "len", "(", "indices", ")", "!=", "0", ":", "\n", "        ", "return", "tp", "/", "(", "tp", "+", "fn", ")", "# Compute recall", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "", "", ""]]}