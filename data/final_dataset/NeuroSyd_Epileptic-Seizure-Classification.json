{"home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.plot_save_cm": [[16, 31], ["cm.round.round", "matplotlib.figure", "sns.heatmap", "sns.heatmap.get_ylim", "sns.heatmap.set_ylim", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.title", "matplotlib.savefig", "model.capitalize"], "function", ["None"], ["def", "plot_save_cm", "(", "cm", ",", "model", ",", "plt_fname", ")", ":", "\n", "\t", "'''\n\tPass Normalised CM\n\t'''", "\n", "cm", "=", "cm", ".", "round", "(", "3", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "7", ")", ")", "\n", "ax", "=", "sns", ".", "heatmap", "(", "cm", ",", "annot", "=", "True", ",", "cmap", "=", "\"Blues\"", ")", "\n", "bottom", ",", "top", "=", "ax", ".", "get_ylim", "(", ")", "\n", "ax", ".", "set_ylim", "(", "bottom", "+", "0.5", ",", "top", "-", "0.5", ")", "\n", "plt", ".", "ylabel", "(", "'True Label'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "xlabel", "(", "'\\nPredicted Label'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "xticks", "(", "rotation", "=", "45", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "yticks", "(", "rotation", "=", "0", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "title", "(", "'{} Confusion Matrix\\n'", ".", "format", "(", "model", ".", "capitalize", "(", ")", ")", ",", "fontsize", "=", "18", ")", "\n", "plt", ".", "savefig", "(", "plt_fname", ",", "dpi", "=", "1200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.export_cm": [[32, 42], ["pandas.DataFrame", "pandas.DataFrame", "pd.DataFrame.to_csv", "pd.DataFrame.to_csv", "int", "int", "int"], "function", ["None"], ["", "def", "export_cm", "(", "cm", ",", "norm_cm", ",", "ds", ",", "model", ",", "nb_classes", ",", "class_map", ")", ":", "\n", "\t", "import", "csv", "\n", "df_cm", "=", "pd", ".", "DataFrame", "(", "cm", ",", "index", "=", "class_map", ",", "columns", "=", "class_map", ")", "\n", "df_norm_cm", "=", "pd", ".", "DataFrame", "(", "norm_cm", ",", "index", "=", "class_map", ",", "columns", "=", "class_map", ")", "\n", "\n", "csv_fname", "=", "\"./model_evaluation/{}_{}_{}.csv\"", ".", "format", "(", "ds", ",", "model", ",", "int", "(", "nb_classes", ")", ")", "\n", "csv_fname_norm", "=", "\"./model_evaluation/{}_{}_{}_norm.csv\"", ".", "format", "(", "ds", ",", "model", ",", "int", "(", "nb_classes", ")", ")", "\n", "plt_fname", "=", "\"./model_evaluation/{}_{}_{}.pdf\"", ".", "format", "(", "ds", ",", "model", ",", "int", "(", "nb_classes", ")", ")", "\n", "df_cm", ".", "to_csv", "(", "csv_fname", ")", "\n", "df_norm_cm", ".", "to_csv", "(", "csv_fname_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.evaluate_hybrid_model": [[46, 67], ["sklearn.metrics.confusion_matrix", "print", "print", "print", "print", "model_evaluation.export_cm", "models.create_hybrid_model.create_hybrid_model", "models.create_hybrid_model.create_hybrid_model.load_weights", "models.create_hybrid_model.create_hybrid_model.predict", "numpy.argmax", "total_pred.extend", "total_true.extend", "sklearn.metrics.confusion_matrix.astype", "sklearn.metrics.f1_score", "int", "sklearn.metrics.confusion_matrix.sum"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.export_cm", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_hybrid_model.create_hybrid_model"], ["", "def", "evaluate_hybrid_model", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "class_map", ",", "pp", "=", "'specific'", ")", ":", "\n", "\t", "total_pred", "=", "[", "]", "\n", "total_true", "=", "[", "]", "\n", "fold", "=", "1", "\n", "for", "X_train", ",", "Y_train", ",", "X_val", ",", "Y_val", ",", "X_test", ",", "Y_test", "in", "n_folds", ":", "\n", "\t\t", "hybrid_model", "=", "create_hybrid_model", "(", "X_train", ".", "shape", ",", "fold", ",", "nb_classes", ",", "ds", ")", "\n", "filename", "=", "\"./{}_{}cls_{}_saved_models/stft_hybrid_{}.hdf5\"", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "hybrid_model", ".", "load_weights", "(", "filename", ")", "\n", "predictions", "=", "hybrid_model", ".", "predict", "(", "[", "X_test", ",", "X_test", "]", ",", "verbose", "=", "1", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", "\n", "y_true", "=", "Y_test", "\n", "total_pred", ".", "extend", "(", "y_pred", ")", "\n", "total_true", ".", "extend", "(", "y_true", ")", "\n", "fold", "+=", "1", "\n", "", "cm", "=", "confusion_matrix", "(", "total_true", ",", "total_pred", ")", "\n", "norm_cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "print", "(", "'Results for Hybrid'", ")", "\n", "print", "(", "cm", ")", "\n", "print", "(", "norm_cm", ")", "\n", "print", "(", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "None", ")", ")", "\n", "export_cm", "(", "cm", ",", "norm_cm", ",", "ds", ",", "'hybrid'", ",", "nb_classes", ",", "class_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.evaluate_bcnn_model": [[68, 89], ["sklearn.metrics.confusion_matrix", "print", "print", "print", "print", "model_evaluation.export_cm", "models.create_bcnn_model.create_bcnn_model", "models.create_bcnn_model.create_bcnn_model.load_weights", "models.create_bcnn_model.create_bcnn_model.predict", "numpy.argmax", "total_pred.extend", "total_true.extend", "sklearn.metrics.confusion_matrix.astype().sum", "sklearn.metrics.f1_score", "int", "sklearn.metrics.confusion_matrix.astype"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.export_cm", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_bcnn_model.create_bcnn_model"], ["", "def", "evaluate_bcnn_model", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "class_map", ",", "pp", "=", "'specific'", ")", ":", "\n", "\t", "total_pred", "=", "[", "]", "\n", "total_true", "=", "[", "]", "\n", "fold", "=", "1", "\n", "for", "X_train", ",", "Y_train", ",", "X_val", ",", "Y_val", ",", "X_test", ",", "Y_test", "in", "n_folds", ":", "\n", "\t\t", "bcnn_model", "=", "create_bcnn_model", "(", "X_train", ".", "shape", ",", "fold", ",", "nb_classes", ",", "ds", ")", "\n", "filename", "=", "\"./{}_{}cls_{}_saved_models/stft_bcnn_{}.hdf5\"", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "bcnn_model", ".", "load_weights", "(", "filename", ")", "\n", "predictions", "=", "bcnn_model", ".", "predict", "(", "X_test", ",", "verbose", "=", "1", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", "\n", "y_true", "=", "Y_test", "\n", "total_pred", ".", "extend", "(", "y_pred", ")", "\n", "total_true", ".", "extend", "(", "y_true", ")", "\n", "fold", "+=", "1", "\n", "", "cm", "=", "confusion_matrix", "(", "total_true", ",", "total_pred", ")", "\n", "norm_cm", "=", "cm", "/", "cm", ".", "astype", "(", "np", ".", "float", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "print", "(", "'Results for B-CNN'", ")", "\n", "print", "(", "cm", ")", "\n", "print", "(", "norm_cm", ")", "\n", "print", "(", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "None", ")", ")", "\n", "export_cm", "(", "cm", ",", "norm_cm", ",", "ds", ",", "'bcnn'", ",", "nb_classes", ",", "class_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.evaluate_brnn_model": [[90, 111], ["sklearn.metrics.confusion_matrix", "print", "print", "print", "print", "model_evaluation.export_cm", "models.create_brnn_model.create_brnn_model", "models.create_brnn_model.create_brnn_model.load_weights", "models.create_brnn_model.create_brnn_model.predict", "numpy.argmax", "total_pred.extend", "total_true.extend", "sklearn.metrics.confusion_matrix.astype().sum", "sklearn.metrics.f1_score", "int", "sklearn.metrics.confusion_matrix.astype"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.export_cm", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_brnn_model.create_brnn_model"], ["", "def", "evaluate_brnn_model", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "class_map", ",", "pp", "=", "'specific'", ")", ":", "\n", "\t", "total_pred", "=", "[", "]", "\n", "total_true", "=", "[", "]", "\n", "fold", "=", "1", "\n", "for", "X_train", ",", "Y_train", ",", "X_val", ",", "Y_val", ",", "X_test", ",", "Y_test", "in", "n_folds", ":", "\n", "\t\t", "brnn_model", "=", "create_brnn_model", "(", "X_train", ".", "shape", ",", "fold", ",", "nb_classes", ",", "ds", ")", "\n", "filename", "=", "\"./{}_{}cls_{}_saved_models/stft_brnn_{}.hdf5\"", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "brnn_model", ".", "load_weights", "(", "filename", ")", "\n", "predictions", "=", "brnn_model", ".", "predict", "(", "X_test", ",", "verbose", "=", "1", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", "\n", "y_true", "=", "Y_test", "\n", "total_pred", ".", "extend", "(", "y_pred", ")", "\n", "total_true", ".", "extend", "(", "y_true", ")", "\n", "fold", "+=", "1", "\n", "", "cm", "=", "confusion_matrix", "(", "total_true", ",", "total_pred", ")", "\n", "norm_cm", "=", "cm", "/", "cm", ".", "astype", "(", "np", ".", "float", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "print", "(", "'Results for B-RNN'", ")", "\n", "print", "(", "cm", ")", "\n", "print", "(", "norm_cm", ")", "\n", "print", "(", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "None", ")", ")", "\n", "export_cm", "(", "cm", ",", "norm_cm", ",", "ds", ",", "'brnn'", ",", "nb_classes", ",", "class_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.evaluate_rnn_model": [[112, 133], ["sklearn.metrics.confusion_matrix", "print", "print", "print", "print", "model_evaluation.export_cm", "models.create_rnn_model.create_rnn_model", "models.create_rnn_model.create_rnn_model.load_weights", "models.create_rnn_model.create_rnn_model.predict", "numpy.argmax", "total_pred.extend", "total_true.extend", "sklearn.metrics.confusion_matrix.astype().sum", "sklearn.metrics.f1_score", "int", "sklearn.metrics.confusion_matrix.astype"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.export_cm", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_rnn_model.create_rnn_model"], ["", "def", "evaluate_rnn_model", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "class_map", ",", "pp", "=", "'specific'", ")", ":", "\n", "\t", "total_pred", "=", "[", "]", "\n", "total_true", "=", "[", "]", "\n", "fold", "=", "1", "\n", "for", "X_train", ",", "Y_train", ",", "X_val", ",", "Y_val", ",", "X_test", ",", "Y_test", "in", "n_folds", ":", "\n", "\t\t", "rnn_model", "=", "create_rnn_model", "(", "X_train", ".", "shape", ",", "nb_classes", ")", "\n", "filename", "=", "\"./{}_{}cls_{}_saved_models/stft_rnn_{}.hdf5\"", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "rnn_model", ".", "load_weights", "(", "filename", ")", "\n", "predictions", "=", "rnn_model", ".", "predict", "(", "X_test", ",", "verbose", "=", "1", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", "\n", "y_true", "=", "Y_test", "\n", "total_pred", ".", "extend", "(", "y_pred", ")", "\n", "total_true", ".", "extend", "(", "y_true", ")", "\n", "fold", "+=", "1", "\n", "", "cm", "=", "confusion_matrix", "(", "total_true", ",", "total_pred", ")", "\n", "norm_cm", "=", "cm", "/", "cm", ".", "astype", "(", "np", ".", "float", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "print", "(", "'Results for RNN'", ")", "\n", "print", "(", "cm", ")", "\n", "print", "(", "norm_cm", ")", "\n", "print", "(", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "None", ")", ")", "\n", "export_cm", "(", "cm", ",", "norm_cm", ",", "ds", ",", "'rnn'", ",", "nb_classes", ",", "class_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.evaluate_cnn_model": [[134, 155], ["sklearn.metrics.confusion_matrix", "print", "print", "print", "print", "model_evaluation.export_cm", "models.create_cnn_model.create_cnn_model", "models.create_cnn_model.create_cnn_model.load_weights", "models.create_cnn_model.create_cnn_model.predict", "numpy.argmax", "total_pred.extend", "total_true.extend", "sklearn.metrics.confusion_matrix.astype().sum", "sklearn.metrics.f1_score", "int", "sklearn.metrics.confusion_matrix.astype"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.export_cm", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_cnn_model.create_cnn_model"], ["", "def", "evaluate_cnn_model", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "class_map", ",", "pp", "=", "'specific'", ")", ":", "\n", "\t", "total_pred", "=", "[", "]", "\n", "total_true", "=", "[", "]", "\n", "fold", "=", "1", "\n", "for", "X_train", ",", "Y_train", ",", "X_val", ",", "Y_val", ",", "X_test", ",", "Y_test", "in", "n_folds", ":", "\n", "\t\t", "cnn_model", "=", "create_cnn_model", "(", "X_train", ".", "shape", ",", "nb_classes", ")", "\n", "filename", "=", "\"./{}_{}cls_{}_saved_models/stft_cnn_{}.hdf5\"", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "cnn_model", ".", "load_weights", "(", "filename", ")", "\n", "predictions", "=", "cnn_model", ".", "predict", "(", "X_test", ",", "verbose", "=", "1", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", "\n", "y_true", "=", "Y_test", "\n", "total_pred", ".", "extend", "(", "y_pred", ")", "\n", "total_true", ".", "extend", "(", "y_true", ")", "\n", "fold", "+=", "1", "\n", "", "cm", "=", "confusion_matrix", "(", "total_true", ",", "total_pred", ")", "\n", "norm_cm", "=", "cm", "/", "cm", ".", "astype", "(", "np", ".", "float", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "print", "(", "'Results for CNN'", ")", "\n", "print", "(", "cm", ")", "\n", "print", "(", "norm_cm", ")", "\n", "print", "(", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "None", ")", ")", "\n", "export_cm", "(", "cm", ",", "norm_cm", ",", "ds", ",", "'cnn'", ",", "nb_classes", ",", "class_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.prep_data": [[156, 181], ["print", "model_evaluation.class_integer_encode", "utils.prep_data.train_val_test_stratified_nfold_split", "numpy.load", "numpy.load", "print", "print", "numpy.load", "numpy.load", "print", "print", "print", "print", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_training.class_integer_encode", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.prep_data.train_val_test_stratified_nfold_split"], ["", "def", "prep_data", "(", "nb_classes", ",", "ds", ")", ":", "\n", "\t", "if", "ds", "==", "'tuh'", ":", "\n", "\t\t", "pnt_path", "=", "'/mnt/data7_M2/Tennison_TUH_Reprocessed_STFT/stft_1s_64/'", "\n", "\n", "X", "=", "np", ".", "load", "(", "pnt_path", "+", "'data_x.npy'", ")", "\n", "y", "=", "np", ".", "load", "(", "pnt_path", "+", "'data_y.npy'", ")", "\n", "print", "(", "'x shape: {}'", ".", "format", "(", "X", ".", "shape", ")", ")", "\n", "print", "(", "'y shape: {}'", ".", "format", "(", "y", ".", "shape", ")", ")", "\n", "if", "nb_classes", "==", "7", ":", "\n", "\t\t\t", "X", "=", "X", "[", "y", "!=", "'MYSZ'", "]", "\n", "y", "=", "y", "[", "y", "!=", "'MYSZ'", "]", "\n", "print", "(", "'x shape after removing MYSZ: {}'", ".", "format", "(", "X", ".", "shape", ")", ")", "\n", "print", "(", "'y shape after removing MYSZ: {}'", ".", "format", "(", "y", ".", "shape", ")", ")", "\n", "", "", "else", ":", "\n", "\t\t", "pnt_path", "=", "'/mnt/data7_M2/epilepsia_data/stft_data/'", "\n", "X", "=", "np", ".", "load", "(", "pnt_path", "+", "'stft_x.npy'", ")", "# Epilepsia", "\n", "y", "=", "np", ".", "load", "(", "pnt_path", "+", "'stft_y.npy'", ")", "\n", "print", "(", "'x shape: {}'", ".", "format", "(", "X", ".", "shape", ")", ")", "\n", "print", "(", "'y shape: {}'", ".", "format", "(", "y", ".", "shape", ")", ")", "\n", "\n", "", "print", "(", "'number of unique y values: {}'", ".", "format", "(", "np", ".", "unique", "(", "y", ")", ")", ")", "\n", "\n", "y", ",", "class_map", "=", "class_integer_encode", "(", "y", ")", "\n", "n_folds", "=", "train_val_test_stratified_nfold_split", "(", "X", ",", "y", ")", "\n", "return", "n_folds", ",", "class_map", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.class_integer_encode": [[182, 191], ["numpy.unique", "integer_indices.reshape.reshape", "model_evaluation.find_mapping", "print", "print", "len", "collections.Counter"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.find_mapping"], ["", "def", "class_integer_encode", "(", "y", ")", ":", "\n", "\t", "u", ",", "integer_indices", "=", "np", ".", "unique", "(", "y", ",", "return_inverse", "=", "True", ")", "\n", "integer_indices", "=", "integer_indices", ".", "reshape", "(", "len", "(", "integer_indices", ")", ",", "1", ")", "\n", "class_to_categorical", "=", "find_mapping", "(", "y", ",", "integer_indices", ")", "\n", "\n", "print", "(", "collections", ".", "Counter", "(", "y", ")", ")", "\n", "\n", "print", "(", "class_to_categorical", ")", "\n", "return", "integer_indices", ",", "class_to_categorical", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.find_mapping": [[192, 199], ["numpy.unique", "numpy.where"], "function", ["None"], ["", "def", "find_mapping", "(", "y", ",", "integer_indices", ")", ":", "\n", "\t", "class_to_categorical", "=", "{", "}", "\n", "for", "i", "in", "np", ".", "unique", "(", "y", ")", ":", "\n", "\t\t", "index", "=", "np", ".", "where", "(", "y", "==", "i", ")", "[", "0", "]", "[", "0", "]", "\n", "categorical", "=", "integer_indices", "[", "index", "]", "[", "0", "]", "\n", "class_to_categorical", "[", "i", "]", "=", "categorical", "\n", "", "return", "class_to_categorical", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_evaluation.main": [[200, 211], ["model_evaluation.prep_data"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_training.prep_data"], ["", "def", "main", "(", "model", ",", "nb_classes", ",", "ds", ")", ":", "\n", "\t", "call_dict", "=", "{", "\n", "'cnn'", ":", "evaluate_cnn_model", ",", "\n", "'rnn'", ":", "evaluate_rnn_model", ",", "\n", "'bcnn'", ":", "evaluate_bcnn_model", ",", "\n", "'brnn'", ":", "evaluate_brnn_model", ",", "\n", "'hybrid'", ":", "evaluate_hybrid_model", "}", "\n", "\n", "for", "mod", "in", "model", ":", "\n", "\t\t", "n_folds", ",", "class_map", "=", "prep_data", "(", "nb_classes", ",", "ds", ")", "\n", "call_dict", "[", "mod", "]", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "class_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_training.class_integer_encode": [[10, 16], ["numpy.unique", "integer_indices.reshape.reshape", "print", "len", "len"], "function", ["None"], ["def", "class_integer_encode", "(", "y", ")", ":", "\n", "\t", "_", ",", "integer_indices", "=", "np", ".", "unique", "(", "y", ",", "return_inverse", "=", "True", ")", "\n", "integer_indices", "=", "integer_indices", ".", "reshape", "(", "len", "(", "integer_indices", ")", ",", "1", ")", "\n", "\n", "print", "(", "'length of encoded class integer vector: {}'", ".", "format", "(", "len", "(", "integer_indices", "[", "0", "]", ")", ")", ")", "\n", "return", "integer_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_training.prep_data": [[17, 53], ["print", "model_training.class_integer_encode", "utils.prep_data.train_val_test_stratified_nfold_split", "numpy.load", "numpy.load", "print", "print", "numpy.load", "numpy.load", "print", "print", "print", "print", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_training.class_integer_encode", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.prep_data.train_val_test_stratified_nfold_split"], ["", "def", "prep_data", "(", "nb_classes", ",", "ds", ",", "pp", ")", ":", "\n", "\t", "if", "ds", "==", "'tuh'", ":", "\n", "\t\t", "if", "pp", "==", "'adaptive'", ":", "\n", "# pnt_path = '/mnt/data7_M2/Tennison_TUH_Reprocessed_STFT/stft_1s_64_adaptive/'", "\n", "\t\t\t", "pnt_path", "=", "'/mnt/data7_M2/Tennison_TUH_Reprocessed_STFT/stft_1s_64_adaptive_cont/'", "\n", "", "elif", "pp", "==", "'continuous'", ":", "\n", "\t\t\t", "pass", "\n", "", "else", ":", "\n", "\t\t\t", "pnt_path", "=", "'/mnt/data7_M2/Tennison_TUH_Reprocessed_STFT/stft_1s_64/'", "\n", "\n", "", "X", "=", "np", ".", "load", "(", "pnt_path", "+", "'data_x.npy'", ")", "\n", "y", "=", "np", ".", "load", "(", "pnt_path", "+", "'data_y.npy'", ")", "\n", "print", "(", "'x shape: {}'", ".", "format", "(", "X", ".", "shape", ")", ")", "\n", "print", "(", "'y shape: {}'", ".", "format", "(", "y", ".", "shape", ")", ")", "\n", "if", "nb_classes", "==", "7", ":", "\n", "\t\t\t", "X", "=", "X", "[", "y", "!=", "'MYSZ'", "]", "\n", "y", "=", "y", "[", "y", "!=", "'MYSZ'", "]", "\n", "print", "(", "'x shape after removing MYSZ: {}'", ".", "format", "(", "X", ".", "shape", ")", ")", "\n", "print", "(", "'y shape after removing MYSZ: {}'", ".", "format", "(", "y", ".", "shape", ")", ")", "\n", "", "", "else", ":", "\n", "\t\t", "if", "pp", "==", "'adaptive'", ":", "\n", "\t\t\t", "pnt_path", "=", "'/mnt/data7_M2/epilepsia_data_adaptive/stft_data/'", "\n", "", "elif", "pp", "==", "'continuous'", ":", "\n", "\t\t\t", "pass", "\n", "", "else", ":", "\n", "\t\t\t", "pnt_path", "=", "'/mnt/data7_M2/epilepsia_data/stft_data/'", "\n", "", "X", "=", "np", ".", "load", "(", "pnt_path", "+", "'stft_x.npy'", ")", "# Epilepsia", "\n", "y", "=", "np", ".", "load", "(", "pnt_path", "+", "'stft_y.npy'", ")", "\n", "print", "(", "'x shape: {}'", ".", "format", "(", "X", ".", "shape", ")", ")", "\n", "print", "(", "'y shape: {}'", ".", "format", "(", "y", ".", "shape", ")", ")", "\n", "\n", "", "print", "(", "'number of unique y values: {}'", ".", "format", "(", "np", ".", "unique", "(", "y", ")", ")", ")", "\n", "\n", "y", "=", "class_integer_encode", "(", "y", ")", "\n", "n_folds", "=", "train_val_test_stratified_nfold_split", "(", "X", ",", "y", ")", "\n", "return", "n_folds", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_training.main": [[54, 65], ["model_training.prep_data"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.None.model_training.prep_data"], ["", "def", "main", "(", "model", ",", "nb_classes", ",", "ds", ",", "pp", ")", ":", "\n", "\t", "call_dict", "=", "{", "\n", "'cnn'", ":", "train_cnn_model", ",", "\n", "'rnn'", ":", "train_rnn_model", ",", "\n", "'bcnn'", ":", "train_bcnn_model", ",", "\n", "'brnn'", ":", "train_brnn_model", ",", "\n", "'hybrid'", ":", "train_hybrid_model", "}", "\n", "\n", "for", "mod", "in", "model", ":", "\n", "\t\t", "n_folds", "=", "prep_data", "(", "nb_classes", ",", "ds", ",", "pp", ")", "\n", "call_dict", "[", "mod", "]", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "pp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.customCallbacks.MyModelCheckpoint.__init__": [[32, 64], ["Callback.__init__", "warnings.warn", "customCallbacks.MyModelCheckpoint.monitor.startswith"], "methods", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignals.__init__"], ["def", "__init__", "(", "self", ",", "filepath", ",", "monitor", "=", "[", "'val_loss'", ",", "'loss'", "]", ",", "verbose", "=", "0", ",", "\n", "save_best_only", "=", "False", ",", "save_weights_only", "=", "False", ",", "\n", "mode", "=", "'auto'", ",", "period", "=", "1", ")", ":", "\n", "        ", "super", "(", "MyModelCheckpoint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "monitor", "=", "'_'", ".", "join", "(", "monitor", ")", "\n", "self", ".", "mymonitor", "=", "monitor", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "filepath", "=", "filepath", "\n", "self", ".", "save_best_only", "=", "save_best_only", "\n", "self", ".", "save_weights_only", "=", "save_weights_only", "\n", "self", ".", "period", "=", "period", "\n", "self", ".", "epochs_since_last_save", "=", "0", "\n", "\n", "if", "mode", "not", "in", "[", "'auto'", ",", "'min'", ",", "'max'", "]", ":", "\n", "            ", "warnings", ".", "warn", "(", "'ModelCheckpoint mode %s is unknown, '", "\n", "'fallback to auto mode.'", "%", "(", "mode", ")", ",", "\n", "RuntimeWarning", ")", "\n", "mode", "=", "'auto'", "\n", "\n", "", "if", "mode", "==", "'min'", ":", "\n", "            ", "self", ".", "monitor_op", "=", "np", ".", "less", "\n", "self", ".", "best", "=", "np", ".", "Inf", "\n", "", "elif", "mode", "==", "'max'", ":", "\n", "            ", "self", ".", "monitor_op", "=", "np", ".", "greater", "\n", "self", ".", "best", "=", "-", "np", ".", "Inf", "\n", "", "else", ":", "\n", "            ", "if", "'acc'", "in", "self", ".", "monitor", "or", "self", ".", "monitor", ".", "startswith", "(", "'fmeasure'", ")", ":", "\n", "                ", "self", ".", "monitor_op", "=", "np", ".", "greater", "\n", "self", ".", "best", "=", "-", "np", ".", "Inf", "\n", "", "else", ":", "\n", "                ", "self", ".", "monitor_op", "=", "np", ".", "less", "\n", "self", ".", "best", "=", "np", ".", "Inf", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.customCallbacks.MyModelCheckpoint.on_epoch_end": [[65, 101], ["customCallbacks.MyModelCheckpoint.filepath.format", "logs.get", "warnings.warn", "customCallbacks.MyModelCheckpoint.monitor_op", "print", "customCallbacks.MyModelCheckpoint.model.save_weights", "customCallbacks.MyModelCheckpoint.model.save", "logs.get", "print", "customCallbacks.MyModelCheckpoint.model.save_weights", "customCallbacks.MyModelCheckpoint.model.save", "print"], "methods", ["None"], ["", "", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "self", ".", "epochs_since_last_save", "+=", "1", "\n", "if", "self", ".", "epochs_since_last_save", ">=", "self", ".", "period", ":", "\n", "            ", "self", ".", "epochs_since_last_save", "=", "0", "\n", "filepath", "=", "self", ".", "filepath", ".", "format", "(", "epoch", "=", "epoch", ",", "**", "logs", ")", "\n", "if", "self", ".", "save_best_only", ":", "\n", "#current = logs.get(self.monitor)", "\n", "\n", "                ", "current", "=", "logs", ".", "get", "(", "self", ".", "mymonitor", "[", "0", "]", ")", "+", "1.0", "*", "logs", ".", "get", "(", "self", ".", "mymonitor", "[", "1", "]", ")", "\n", "if", "current", "is", "None", ":", "\n", "                    ", "warnings", ".", "warn", "(", "'Can save best model only with %s available, '", "\n", "'skipping.'", "%", "(", "self", ".", "monitor", ")", ",", "RuntimeWarning", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "monitor_op", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "                        ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                            ", "print", "(", "'Epoch %05d: %s improved from %0.5f to %0.5f,'", "\n", "' saving model to %s'", "\n", "%", "(", "epoch", ",", "self", ".", "monitor", ",", "self", ".", "best", ",", "\n", "current", ",", "filepath", ")", ")", "\n", "", "self", ".", "best", "=", "current", "\n", "if", "self", ".", "save_weights_only", ":", "\n", "                            ", "self", ".", "model", ".", "save_weights", "(", "filepath", ",", "overwrite", "=", "True", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "model", ".", "save", "(", "filepath", ",", "overwrite", "=", "True", ")", "\n", "", "", "else", ":", "\n", "                        ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                            ", "print", "(", "'Epoch %05d: %s did not improve'", "%", "\n", "(", "epoch", ",", "self", ".", "monitor", ")", ")", "\n", "", "", "", "", "else", ":", "\n", "                ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                    ", "print", "(", "'Epoch %05d: saving model to %s'", "%", "(", "epoch", ",", "filepath", ")", ")", "\n", "", "if", "self", ".", "save_weights_only", ":", "\n", "                    ", "self", ".", "model", ".", "save_weights", "(", "filepath", ",", "overwrite", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "model", ".", "save", "(", "filepath", ",", "overwrite", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.customCallbacks.MyEarlyStopping.__init__": [[122, 154], ["Callback.__init__", "warnings.warn", "customCallbacks.MyEarlyStopping.monitor.startswith"], "methods", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignals.__init__"], ["def", "__init__", "(", "self", ",", "monitor", "=", "[", "'val_loss'", ",", "'loss'", "]", ",", "\n", "min_delta", "=", "0", ",", "patience", "=", "0", ",", "verbose", "=", "0", ",", "mode", "=", "'auto'", ")", ":", "\n", "        ", "super", "(", "MyEarlyStopping", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "monitor", "=", "'_'", ".", "join", "(", "monitor", ")", "\n", "self", ".", "mymonitor", "=", "monitor", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "min_delta", "=", "min_delta", "\n", "self", ".", "wait", "=", "0", "\n", "self", ".", "stopped_epoch", "=", "0", "\n", "\n", "if", "mode", "not", "in", "[", "'auto'", ",", "'min'", ",", "'max'", "]", ":", "\n", "            ", "warnings", ".", "warn", "(", "'EarlyStopping mode %s is unknown, '", "\n", "'fallback to auto mode.'", "%", "(", "self", ".", "mode", ")", ",", "\n", "RuntimeWarning", ")", "\n", "mode", "=", "'auto'", "\n", "\n", "", "if", "mode", "==", "'min'", ":", "\n", "            ", "self", ".", "monitor_op", "=", "np", ".", "less", "\n", "", "elif", "mode", "==", "'max'", ":", "\n", "            ", "self", ".", "monitor_op", "=", "np", ".", "greater", "\n", "", "else", ":", "\n", "            ", "if", "'acc'", "in", "self", ".", "monitor", "or", "self", ".", "monitor", ".", "startswith", "(", "'fmeasure'", ")", ":", "\n", "                ", "self", ".", "monitor_op", "=", "np", ".", "greater", "\n", "", "else", ":", "\n", "                ", "self", ".", "monitor_op", "=", "np", ".", "less", "\n", "\n", "", "", "if", "self", ".", "monitor_op", "==", "np", ".", "greater", ":", "\n", "            ", "self", ".", "min_delta", "*=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_delta", "*=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.customCallbacks.MyEarlyStopping.on_train_begin": [[155, 160], ["None"], "methods", ["None"], ["", "", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "# Allow instances to be re-used", "\n", "        ", "self", ".", "wait", "=", "0", "\n", "self", ".", "stopped_epoch", "=", "0", "\n", "self", ".", "best", "=", "np", ".", "Inf", "if", "self", ".", "monitor_op", "==", "np", ".", "less", "else", "-", "np", ".", "Inf", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.customCallbacks.MyEarlyStopping.on_epoch_end": [[161, 182], ["customCallbacks.MyEarlyStopping.monitor_op", "logs.get", "warnings.warn", "logs.get", "list", "logs.keys"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "current", "=", "logs", ".", "get", "(", "self", ".", "mymonitor", "[", "0", "]", ")", "+", "1.0", "*", "logs", ".", "get", "(", "self", ".", "mymonitor", "[", "1", "]", ")", "\n", "if", "current", "is", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'Early stopping conditioned on metric `%s` '", "\n", "'which is not available. Available metrics are: %s'", "%", "\n", "(", "self", ".", "monitor", ",", "','", ".", "join", "(", "list", "(", "logs", ".", "keys", "(", ")", ")", ")", ")", ",", "RuntimeWarning", "\n", ")", "\n", "\n", "", "if", "current", "<", "1e-3", ":", "\n", "            ", "self", ".", "stopped_epoch", "=", "epoch", "\n", "self", ".", "model", ".", "stop_training", "=", "True", "\n", "\n", "", "if", "self", ".", "monitor_op", "(", "current", "-", "self", ".", "min_delta", ",", "self", ".", "best", ")", ":", "\n", "            ", "self", ".", "best", "=", "current", "\n", "self", ".", "wait", "=", "0", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "wait", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "stopped_epoch", "=", "epoch", "\n", "self", ".", "model", ".", "stop_training", "=", "True", "\n", "", "self", ".", "wait", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.customCallbacks.MyEarlyStopping.on_train_end": [[183, 186], ["print"], "methods", ["None"], ["", "", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "stopped_epoch", ">", "0", "and", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "'Epoch %05d: early stopping'", "%", "(", "self", ".", "stopped_epoch", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignals.__init__": [[416, 423], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "target", ",", "type", ",", "settings", ",", "sph", "=", "0", ")", ":", "\n", "        ", "self", ".", "target", "=", "target", "\n", "self", ".", "settings", "=", "settings", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "sph", "=", "sph", "\n", "self", ".", "global_proj", "=", "np", ".", "array", "(", "[", "0.0", "]", "*", "114", ")", "\n", "self", ".", "significant_channels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignals.read_raw_signal": [[424, 450], ["numpy.array", "print", "load_signals.load_signals_CHBMIT", "numpy.array", "load_signals.load_signals_FB", "numpy.array", "load_signals.load_signals_EpilepsiaSurf"], "methods", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.load_signals_CHBMIT", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.load_signals_FB", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.load_signals_EpilepsiaSurf"], ["", "def", "read_raw_signal", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "settings", "[", "'dataset'", "]", "==", "'CHBMIT'", ":", "\n", "            ", "self", ".", "samp_freq", "=", "256", "\n", "self", ".", "freq", "=", "256", "\n", "self", ".", "global_proj", "=", "np", ".", "array", "(", "[", "0.0", "]", "*", "114", ")", "\n", "\n", "from", "utils", ".", "CHBMIT_channels_det", "import", "channels", "\n", "try", ":", "\n", "                ", "self", ".", "significant_channels", "=", "channels", "[", "self", ".", "target", "]", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "print", "(", "self", ".", "target", ",", "self", ".", "significant_channels", ")", "\n", "return", "load_signals_CHBMIT", "(", "self", ".", "settings", "[", "'datadir'", "]", ",", "self", ".", "target", ",", "self", ".", "type", ")", "\n", "", "elif", "self", ".", "settings", "[", "'dataset'", "]", "==", "'FB'", ":", "\n", "            ", "self", ".", "samp_freq", "=", "256", "\n", "self", ".", "freq", "=", "256", "\n", "self", ".", "global_proj", "=", "np", ".", "array", "(", "[", "0.0", "]", "*", "114", ")", "\n", "return", "load_signals_FB", "(", "self", ".", "settings", "[", "'datadir'", "]", ",", "self", ".", "target", ",", "self", ".", "type", ")", "\n", "", "elif", "self", ".", "settings", "[", "'dataset'", "]", "==", "'EpilepsiaSurf'", ":", "\n", "            ", "self", ".", "samp_freq", "=", "256", "\n", "self", ".", "freq", "=", "256", "\n", "self", ".", "global_proj", "=", "np", ".", "array", "(", "[", "0.0", "]", "*", "128", ")", "\n", "return", "load_signals_EpilepsiaSurf", "(", "self", ".", "settings", "[", "'datadir'", "]", ",", "self", ".", "target", ",", "self", ".", "type", ")", "\n", "\n", "\n", "", "return", "'array, freq, misc'", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignals.preprocess": [[451, 606], ["pandas.read_csv", "int", "print", "print", "int", "load_signals.LoadSignals.preprocess.process_raw_data"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "data_", ")", ":", "\n", "        ", "ictal", "=", "self", ".", "type", "==", "'ictal'", "\n", "interictal", "=", "self", ".", "type", "==", "'interictal'", "\n", "targetFrequency", "=", "self", ".", "freq", "\n", "numts", "=", "1", "\n", "\n", "df_sampling", "=", "pd", ".", "read_csv", "(", "\n", "'sampling_%s.csv'", "%", "self", ".", "settings", "[", "'dataset'", "]", ",", "\n", "header", "=", "0", ",", "index_col", "=", "None", ")", "\n", "trg", "=", "int", "(", "self", ".", "target", ")", "\n", "print", "(", "df_sampling", ")", "\n", "print", "(", "df_sampling", "[", "df_sampling", ".", "Subject", "==", "trg", "]", ".", "ictal_ovl", ".", "values", ")", "\n", "ictal_ovl_pt", "=", "df_sampling", "[", "df_sampling", ".", "Subject", "==", "trg", "]", ".", "ictal_ovl", ".", "values", "[", "0", "]", "\n", "ictal_ovl_len", "=", "int", "(", "targetFrequency", "*", "ictal_ovl_pt", ")", "\n", "\n", "def", "process_raw_data", "(", "mat_data", ")", ":", "\n", "            ", "print", "(", "'Loading data'", ")", "\n", "#print mat_data", "\n", "X", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "\n", "#scale_ = scale_coef[target]", "\n", "\n", "for", "data", "in", "mat_data", ":", "\n", "# CHBMIT: select 16 most significant only,", "\n", "# to have all pats have same no. channels", "\n", "# if self.settings['dataset'] == 'CHBMIT':", "\n", "#     print ('Channel selection for CHBMIT')", "\n", "#     print (data.shape)", "\n", "#     data = data[:,self.significant_channels]", "\n", "#     print (data.shape)", "\n", "\n", "                ", "if", "ictal", ":", "\n", "                    ", "y_value", "=", "1", "\n", "first_segment", "=", "False", "\n", "", "else", ":", "\n", "                    ", "y_value", "=", "0", "\n", "\n", "", "X_temp", "=", "[", "]", "\n", "y_temp", "=", "[", "]", "\n", "\n", "totalSample", "=", "int", "(", "data", ".", "shape", "[", "0", "]", "/", "targetFrequency", "/", "numts", ")", "+", "1", "\n", "window_len", "=", "int", "(", "targetFrequency", "*", "numts", ")", "\n", "for", "i", "in", "range", "(", "totalSample", ")", ":", "\n", "                    ", "if", "(", "i", "+", "1", ")", "*", "window_len", "<=", "data", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "s", "=", "data", "[", "i", "*", "window_len", ":", "(", "i", "+", "1", ")", "*", "window_len", ",", ":", "]", "\n", "\n", "stft_data", "=", "stft", ".", "spectrogram", "(", "s", ",", "framelength", "=", "targetFrequency", ",", "centered", "=", "False", ")", "\n", "stft_data", "=", "np", ".", "abs", "(", "stft_data", ")", "+", "1e-6", "\n", "stft_data", "=", "np", ".", "log10", "(", "stft_data", ")", "\n", "indices", "=", "np", ".", "where", "(", "stft_data", "<=", "0", ")", "\n", "stft_data", "[", "indices", "]", "=", "0", "\n", "\n", "stft_data", "=", "np", ".", "transpose", "(", "stft_data", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "if", "self", ".", "settings", "[", "'dataset'", "]", "==", "'FB'", ":", "\n", "                            ", "stft_data", "=", "np", ".", "concatenate", "(", "(", "stft_data", "[", ":", ",", ":", ",", "1", ":", "47", "]", ",", "\n", "stft_data", "[", ":", ",", ":", ",", "54", ":", "97", "]", ",", "\n", "stft_data", "[", ":", ",", ":", ",", "104", ":", "]", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "", "elif", "self", ".", "settings", "[", "'dataset'", "]", "==", "'CHBMIT'", ":", "\n", "                            ", "stft_data", "=", "np", ".", "concatenate", "(", "(", "stft_data", "[", ":", ",", ":", ",", "1", ":", "57", "]", ",", "\n", "stft_data", "[", ":", ",", ":", ",", "64", ":", "117", "]", ",", "\n", "stft_data", "[", ":", ",", ":", ",", "124", ":", "]", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "", "elif", "self", ".", "settings", "[", "'dataset'", "]", "==", "'EpilepsiaSurf'", ":", "\n", "                            ", "stft_data", "=", "stft_data", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "\n", "", "proj", "=", "np", ".", "sum", "(", "stft_data", ",", "axis", "=", "(", "0", ",", "1", ")", ",", "keepdims", "=", "False", ")", "\n", "self", ".", "global_proj", "+=", "proj", "/", "1000.0", "\n", "\n", "'''\n                        from matplotlib import cm\n                        plt.matshow(stft_data[0]/np.max(stft_data[0]))\n                        plt.colorbar()\n                        plt.show()\n                        '''", "\n", "#stft_data = np.multiply(stft_data,1.0/scale_)", "\n", "\n", "'''\n                        plt.matshow(stft_data[0]/np.max(stft_data[0]))\n                        plt.colorbar()\n                        plt.show()\n                        '''", "\n", "\n", "stft_data", "=", "stft_data", ".", "reshape", "(", "-", "1", ",", "stft_data", ".", "shape", "[", "0", "]", ",", "\n", "stft_data", ".", "shape", "[", "1", "]", ",", "\n", "stft_data", ".", "shape", "[", "2", "]", ")", "\n", "\n", "\n", "X_temp", ".", "append", "(", "stft_data", ")", "\n", "y_temp", ".", "append", "(", "y_value", ")", "\n", "\n", "#overlapped window", "\n", "", "", "if", "ictal", ":", "\n", "                    ", "i", "=", "1", "\n", "print", "(", "'ictal_ovl_len ='", ",", "ictal_ovl_len", ")", "\n", "while", "(", "window_len", "+", "(", "i", "+", "1", ")", "*", "ictal_ovl_len", "<=", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "s", "=", "data", "[", "i", "*", "ictal_ovl_len", ":", "i", "*", "ictal_ovl_len", "+", "window_len", ",", ":", "]", "\n", "\n", "stft_data", "=", "stft", ".", "spectrogram", "(", "s", ",", "framelength", "=", "targetFrequency", ",", "centered", "=", "False", ")", "\n", "stft_data", "=", "np", ".", "abs", "(", "stft_data", ")", "+", "1e-6", "\n", "stft_data", "=", "np", ".", "log10", "(", "stft_data", ")", "\n", "indices", "=", "np", ".", "where", "(", "stft_data", "<=", "0", ")", "\n", "stft_data", "[", "indices", "]", "=", "0", "\n", "\n", "stft_data", "=", "np", ".", "transpose", "(", "stft_data", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "if", "self", ".", "settings", "[", "'dataset'", "]", "==", "'FB'", ":", "\n", "                            ", "stft_data", "=", "np", ".", "concatenate", "(", "(", "stft_data", "[", ":", ",", ":", ",", "1", ":", "47", "]", ",", "\n", "stft_data", "[", ":", ",", ":", ",", "54", ":", "97", "]", ",", "\n", "stft_data", "[", ":", ",", ":", ",", "104", ":", "]", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "", "elif", "self", ".", "settings", "[", "'dataset'", "]", "==", "'CHBMIT'", ":", "\n", "                            ", "stft_data", "=", "np", ".", "concatenate", "(", "(", "stft_data", "[", ":", ",", ":", ",", "1", ":", "57", "]", ",", "\n", "stft_data", "[", ":", ",", ":", ",", "64", ":", "117", "]", ",", "\n", "stft_data", "[", ":", ",", ":", ",", "124", ":", "]", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "", "elif", "self", ".", "settings", "[", "'dataset'", "]", "==", "'EpilepsiaSurf'", ":", "\n", "                            ", "stft_data", "=", "stft_data", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "\n", "", "proj", "=", "np", ".", "sum", "(", "stft_data", ",", "axis", "=", "(", "0", ",", "1", ")", ",", "keepdims", "=", "False", ")", "\n", "self", ".", "global_proj", "+=", "proj", "/", "1000.0", "\n", "\n", "#stft_data = np.multiply(stft_data,1.0/scale_)", "\n", "\n", "\n", "stft_data", "=", "stft_data", ".", "reshape", "(", "-", "1", ",", "stft_data", ".", "shape", "[", "0", "]", ",", "\n", "stft_data", ".", "shape", "[", "1", "]", ",", "\n", "stft_data", ".", "shape", "[", "2", "]", ")", "\n", "#print (proj)", "\n", "\n", "X_temp", ".", "append", "(", "stft_data", ")", "\n", "# to differentiate between non overlapped and overlapped", "\n", "# samples. Testing only uses non overlapped ones.", "\n", "y_temp", ".", "append", "(", "2", ")", "\n", "i", "+=", "1", "\n", "\n", "\n", "", "", "X_temp", "=", "np", ".", "concatenate", "(", "X_temp", ",", "axis", "=", "0", ")", "\n", "y_temp", "=", "np", ".", "array", "(", "y_temp", ")", "\n", "X", ".", "append", "(", "X_temp", ")", "\n", "y", ".", "append", "(", "y_temp", ")", "\n", "\n", "\n", "", "if", "ictal", "or", "interictal", ":", "\n", "#y = np.array(y)", "\n", "                ", "print", "(", "'X'", ",", "len", "(", "X", ")", ",", "X", "[", "0", "]", ".", "shape", ",", "'y'", ",", "len", "(", "y", ")", ",", "y", "[", "0", "]", ".", "shape", ")", "\n", "return", "X", ",", "y", "\n", "", "else", ":", "\n", "                ", "print", "(", "'X'", ",", "X", ".", "shape", ")", "\n", "return", "X", "\n", "\n", "", "", "data", "=", "process_raw_data", "(", "data_", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignals.apply": [[607, 693], ["myio.save_load.load_hickle_file", "load_signals.LoadSignals.read_raw_signal", "myio.save_load.save_hickle_file", "print", "isinstance", "print", "os.path.join", "load_signals.LoadSignals.preprocess_Kaggle", "load_signals.LoadSignals.preprocess", "os.path.join", "load_signals.LoadSignals.apply.save_STFT_to_files"], "methods", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignals.read_raw_signal", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignalsACS.preprocess_Kaggle", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignalsACS.preprocess"], ["", "def", "apply", "(", "self", ",", "save_STFT", "=", "False", ",", "dir", "=", "''", ")", ":", "\n", "        ", "def", "save_STFT_to_files", "(", "X", ")", ":", "\n", "            ", "print", "(", "'Start saving STFT to %s'", "%", "dir", ")", "\n", "pre", "=", "None", "# oversampling for GAN training", "\n", "ovl_pct", "=", "0.1", "# oversampling for GAN training", "\n", "if", "isinstance", "(", "X", ",", "list", ")", ":", "\n", "                ", "index", "=", "0", "\n", "ovl_len", "=", "int", "(", "ovl_pct", "*", "X", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ")", "# oversampling for GAN training", "\n", "ovl_num", "=", "int", "(", "np", ".", "floor", "(", "1.0", "/", "ovl_pct", ")", "-", "1", ")", "# oversampling for GAN training", "\n", "for", "x", "in", "X", ":", "\n", "                    ", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "fn", "=", "'%s_%s_%d_%d.npy'", "%", "(", "self", ".", "target", ",", "self", ".", "type", ",", "index", ",", "i", ")", "\n", "if", "self", ".", "settings", "[", "'dataset'", "]", "in", "[", "'FB'", ",", "'CHBMIT'", "]", ":", "\n", "                            ", "x_", "=", "x", "[", "i", ",", ":", ",", ":", "56", ",", ":", "112", "]", "\n", "", "elif", "self", ".", "settings", "[", "'dataset'", "]", "==", "'Kaggle2014Pred'", ":", "\n", "                            ", "if", "'Dog'", "in", "self", ".", "target", ":", "\n", "                                ", "x_", "=", "x", "[", "i", ",", ":", ",", ":", "56", ",", ":", "96", "]", "\n", "", "elif", "'Patient'", "in", "self", ".", "target", ":", "\n", "                                ", "x_", "=", "x", "[", "i", ",", ":", ",", ":", "112", ",", ":", "96", "]", "\n", "", "", "elif", "self", ".", "settings", "[", "'dataset'", "]", "==", "'EpilepsiaSurf'", ":", "\n", "                            ", "x_", "=", "x", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "fn", ")", ",", "x_", ")", "\n", "# 2352, 1, 16, 59, 100 - Kaggle Dog", "\n", "# (567, 1, 15, 119, 100) - Kaggle Patient", "\n", "# 3020, 1, 6, 59, 114 - Freiburg", "\n", "# Generate overlapping samples for GAN", "\n", "if", "i", ">", "0", ":", "\n", "                            ", "for", "j", "in", "range", "(", "1", ",", "ovl_num", "+", "1", ")", ":", "\n", "                                ", "fn", "=", "'%s_ovl_%s_%d_%d_%d.npy'", "%", "(", "self", ".", "target", ",", "self", ".", "type", ",", "index", ",", "i", ",", "j", ")", "\n", "x_2", "=", "np", ".", "concatenate", "(", "(", "pre", "[", ":", ",", ":", "j", "*", "ovl_len", ",", ":", "]", ",", "x_", "[", ":", ",", "j", "*", "ovl_len", ":", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "assert", "x_2", ".", "shape", "==", "x_", ".", "shape", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "fn", ")", ",", "x_2", ")", "\n", "\n", "", "", "pre", "=", "x_", "\n", "", "index", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "ovl_len", "=", "int", "(", "ovl_pct", "*", "X", ".", "shape", "[", "-", "2", "]", ")", "# oversampling for GAN training", "\n", "ovl_num", "=", "np", ".", "floor", "(", "1.0", "/", "ovl_pct", ")", "-", "1", "# oversampling for GAN training", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "fn", "=", "'%s_%s_0_%d.npy'", "%", "(", "self", ".", "target", ",", "self", ".", "type", ",", "i", ")", "\n", "if", "self", ".", "settings", "[", "'dataset'", "]", "in", "[", "'FB'", ",", "'CHBMIT'", "]", ":", "\n", "                        ", "x_", "=", "X", "[", "i", ",", ":", ",", ":", "56", ",", ":", "112", "]", "\n", "\n", "", "elif", "self", ".", "settings", "[", "'dataset'", "]", "==", "'Kaggle2014Pred'", ":", "\n", "                        ", "if", "'Dog'", "in", "self", ".", "target", ":", "\n", "                            ", "x_", "=", "X", "[", "i", ",", ":", ",", ":", "56", ",", ":", "96", "]", "\n", "", "elif", "'Patient'", "in", "self", ".", "target", ":", "\n", "                            ", "x_", "=", "X", "[", "i", ",", ":", ",", ":", "112", ",", ":", "96", "]", "\n", "\n", "", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "fn", ")", ",", "x_", ")", "\n", "# Generate overlapping samples for GAN", "\n", "if", "i", ">", "0", ":", "\n", "                        ", "for", "j", "in", "range", "(", "1", ",", "ovl_num", "+", "1", ")", ":", "\n", "                            ", "fn", "=", "'%s_ovl_%s_%d_%d_%d.npy'", "%", "(", "self", ".", "target", ",", "self", ".", "type", ",", "index", ",", "i", ",", "j", ")", "\n", "x_2", "=", "np", ".", "concatenate", "(", "(", "pre", "[", ":", ",", ":", "j", "*", "ovl_len", ",", ":", "]", ",", "x_", "[", ":", ",", "j", "*", "ovl_len", ":", ",", ":", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "assert", "x_2", ".", "shape", "==", "x_", ".", "shape", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "fn", ")", ",", "x_2", ")", "\n", "\n", "", "", "pre", "=", "x_", "\n", "", "", "print", "(", "'Finished saving STFT to %s'", "%", "dir", ")", "\n", "return", "None", "\n", "\n", "", "filename", "=", "'%s_%s'", "%", "(", "self", ".", "type", ",", "self", ".", "target", ")", "\n", "cache", "=", "load_hickle_file", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "settings", "[", "'cachedir'", "]", ",", "filename", ")", ")", "\n", "if", "cache", "is", "not", "None", ":", "\n", "            ", "if", "save_STFT", ":", "\n", "                ", "X", ",", "_", "=", "cache", "\n", "return", "save_STFT_to_files", "(", "X", ")", "\n", "", "else", ":", "\n", "                ", "return", "cache", "\n", "\n", "", "", "data", "=", "self", ".", "read_raw_signal", "(", ")", "\n", "if", "self", ".", "settings", "[", "'dataset'", "]", "==", "'Kaggle2014Pred'", ":", "\n", "            ", "X", ",", "y", "=", "self", ".", "preprocess_Kaggle", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "X", ",", "y", "=", "self", ".", "preprocess", "(", "data", ")", "\n", "", "save_hickle_file", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "settings", "[", "'cachedir'", "]", ",", "filename", ")", ",", "\n", "[", "X", ",", "y", "]", ")", "\n", "\n", "if", "save_STFT", ":", "\n", "            ", "return", "save_STFT_to_files", "(", "X", ")", "\n", "", "else", ":", "\n", "            ", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignalsACS.preprocess_Kaggle": [[697, 699], ["None"], "methods", ["None"], ["    ", "def", "preprocess_Kaggle", "(", "self", ",", "data_", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignalsACS.preprocess": [[700, 759], ["pandas.read_csv", "int", "print", "print", "int", "load_signals.LoadSignalsACS.preprocess.process_raw_data"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "data_", ")", ":", "\n", "        ", "ictal", "=", "self", ".", "type", "==", "'ictal'", "\n", "interictal", "=", "self", ".", "type", "==", "'interictal'", "\n", "targetFrequency", "=", "self", ".", "freq", "# re-sample to target frequency", "\n", "numts", "=", "1", "\n", "\n", "df_sampling", "=", "pd", ".", "read_csv", "(", "\n", "'sampling_%s.csv'", "%", "self", ".", "settings", "[", "'dataset'", "]", ",", "\n", "header", "=", "0", ",", "index_col", "=", "None", ")", "\n", "trg", "=", "int", "(", "self", ".", "target", ")", "\n", "print", "(", "df_sampling", ")", "\n", "print", "(", "df_sampling", "[", "df_sampling", ".", "Subject", "==", "trg", "]", ".", "ictal_ovl", ".", "values", ")", "\n", "ictal_ovl_pt", "=", "df_sampling", "[", "df_sampling", ".", "Subject", "==", "trg", "]", ".", "ictal_ovl", ".", "values", "[", "0", "]", "\n", "ictal_ovl_len", "=", "int", "(", "targetFrequency", "*", "ictal_ovl_pt", "*", "numts", ")", "\n", "\n", "def", "process_raw_data", "(", "mat_data", ")", ":", "\n", "            ", "print", "(", "'Loading data'", ")", "\n", "X", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "#scale_ = scale_coef[target]", "\n", "for", "data", "in", "mat_data", ":", "\n", "                ", "if", "self", ".", "settings", "[", "'dataset'", "]", "==", "'FB'", ":", "\n", "                    ", "data", "=", "data", ".", "transpose", "(", ")", "\n", "", "if", "ictal", ":", "\n", "                    ", "y_value", "=", "1", "\n", "", "else", ":", "\n", "                    ", "y_value", "=", "0", "\n", "\n", "", "X_temp", "=", "[", "]", "\n", "y_temp", "=", "[", "]", "\n", "\n", "totalSample", "=", "int", "(", "data", ".", "shape", "[", "0", "]", "/", "targetFrequency", "/", "numts", ")", "+", "1", "\n", "window_len", "=", "int", "(", "targetFrequency", "*", "numts", ")", "\n", "# print ('window_len, data.shape, totalSample', window_len, data.shape, totalSample)", "\n", "for", "i", "in", "range", "(", "totalSample", ")", ":", "\n", "                    ", "if", "(", "i", "+", "1", ")", "*", "window_len", "<=", "data", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "s", "=", "data", "[", "i", "*", "window_len", ":", "(", "i", "+", "1", ")", "*", "window_len", ",", ":", "]", "\n", "s", "=", "s", ".", "transpose", "(", ")", "\n", "fft_data", "=", "np", ".", "fft", ".", "rfft", "(", "s", ",", "axis", "=", "-", "1", ")", "\n", "X", ".", "append", "(", "fft_data", ")", "\n", "y", ".", "append", "(", "y_value", ")", "\n", "# print (fft_data.shape)", "\n", "\n", "", "", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "print", "(", "'X'", ",", "X", ".", "shape", ",", "'y'", ",", "y", ".", "shape", ")", "\n", "\n", "max_nspl", "=", "50000.0", "# limit number of samples", "\n", "downspl", "=", "int", "(", "X", ".", "shape", "[", "0", "]", "/", "max_nspl", ")", "\n", "if", "downspl", ">", "1", ":", "\n", "                ", "X", "=", "X", "[", ":", ":", "downspl", "]", "\n", "y", "=", "y", "[", ":", ":", "downspl", "]", "\n", "print", "(", "'Downsampling by scale'", ",", "downspl", ",", "'X'", ",", "X", ".", "shape", ",", "'y'", ",", "y", ".", "shape", ")", "\n", "", "return", "X", ",", "y", "\n", "\n", "", "data", "=", "process_raw_data", "(", "data_", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignalsACS.apply": [[760, 778], ["myio.save_load.load_hickle_file", "load_signals.LoadSignalsACS.read_raw_signal", "myio.save_load.save_hickle_file", "os.path.join", "load_signals.LoadSignalsACS.preprocess_Kaggle", "load_signals.LoadSignalsACS.preprocess", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignals.read_raw_signal", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignalsACS.preprocess_Kaggle", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.LoadSignalsACS.preprocess"], ["", "def", "apply", "(", "self", ",", "save_STFT", "=", "False", ",", "dir", "=", "''", ")", ":", "\n", "\n", "        ", "filename", "=", "'%s_%s'", "%", "(", "self", ".", "type", ",", "self", ".", "target", ")", "\n", "cache", "=", "load_hickle_file", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "settings", "[", "'cachedir'", "]", "+", "'_ACS'", ",", "filename", ")", ")", "\n", "if", "cache", "is", "not", "None", ":", "\n", "            ", "return", "cache", "\n", "\n", "", "data", "=", "self", ".", "read_raw_signal", "(", ")", "\n", "if", "self", ".", "settings", "[", "'dataset'", "]", "==", "'Kaggle2014Pred'", ":", "\n", "            ", "X", ",", "y", "=", "self", ".", "preprocess_Kaggle", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "X", ",", "y", "=", "self", ".", "preprocess", "(", "data", ")", "\n", "", "save_hickle_file", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "settings", "[", "'cachedir'", "]", "+", "'_ACS'", ",", "filename", ")", ",", "\n", "[", "X", ",", "y", "]", ")", "\n", "\n", "return", "X", ",", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.load_signals_EpilepsiaSurf": [[14, 169], ["pandas.read_csv", "list", "os.path.join", "glob.glob", "list", "pandas.read_csv", "print", "range", "pandas.read_csv", "int", "int", "float", "int", "elec_names.split.split", "int", "numpy.fromfile", "m.reshape.reshape", "numpy.array", "set", "len", "len", "len", "os.path.join", "list", "datetime.datetime.strptime", "open", "f.read", "chs.split.split", "len", "int", "list", "pat_fn.split", "pat_fn.split", "len", "elec_names.split.index", "int", "int", "load_signals.load_signals_EpilepsiaSurf.load_raw_data"], "function", ["None"], ["def", "load_signals_EpilepsiaSurf", "(", "data_dir", "=", "''", ",", "target", "=", "'1'", ",", "data_type", "=", "'ictal'", ")", ":", "\n", "#########################################################################", "\n", "    ", "def", "load_raw_data", "(", "filename", ")", ":", "\n", "        ", "fn", "=", "filename", "+", "'.data'", "\n", "hd", "=", "filename", "+", "'.head'", "\n", "\n", "h", "=", "pd", ".", "read_csv", "(", "hd", ",", "header", "=", "None", ",", "index_col", "=", "None", ",", "sep", "=", "'='", ")", "\n", "start_ts", "=", "h", "[", "h", "[", "0", "]", "==", "'start_ts'", "]", "[", "1", "]", ".", "values", "[", "0", "]", "\n", "num_samples", "=", "int", "(", "h", "[", "h", "[", "0", "]", "==", "'num_samples'", "]", "[", "1", "]", ")", "\n", "sample_freq", "=", "int", "(", "h", "[", "h", "[", "0", "]", "==", "'sample_freq'", "]", "[", "1", "]", ")", "\n", "conversion_factor", "=", "float", "(", "h", "[", "h", "[", "0", "]", "==", "'conversion_factor'", "]", "[", "1", "]", ")", "\n", "num_channels", "=", "int", "(", "h", "[", "h", "[", "0", "]", "==", "'num_channels'", "]", "[", "1", "]", ")", "\n", "elec_names", "=", "h", "[", "h", "[", "0", "]", "==", "'elec_names'", "]", "[", "1", "]", ".", "values", "[", "0", "]", "\n", "elec_names", "=", "elec_names", "[", "1", ":", "-", "1", "]", "\n", "elec_names", "=", "elec_names", ".", "split", "(", "','", ")", "\n", "duration_in_sec", "=", "int", "(", "h", "[", "h", "[", "0", "]", "==", "'duration_in_sec'", "]", "[", "1", "]", ")", "\n", "\n", "# print ('start_ts', start_ts)", "\n", "# print ('num_samples', num_samples)", "\n", "# print ('sample_freq', sample_freq)", "\n", "# print ('conversion_factor', conversion_factor)", "\n", "# print ('num_channels', num_channels)", "\n", "# print ('elec_names', elec_names)", "\n", "# print ('duration_in_sec', duration_in_sec)", "\n", "\n", "m", "=", "np", ".", "fromfile", "(", "fn", ",", "'<i2'", ")", "\n", "m", "=", "m", "*", "conversion_factor", "\n", "m", "=", "m", ".", "reshape", "(", "-", "1", ",", "num_channels", ")", "\n", "assert", "m", ".", "shape", "[", "0", "]", "==", "num_samples", "\n", "\n", "ch_fn", "=", "'./utils/chs.txt'", "\n", "with", "open", "(", "ch_fn", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "chs", "=", "f", ".", "read", "(", ")", "\n", "chs", "=", "chs", ".", "split", "(", "','", ")", "\n", "", "ch_ind", "=", "np", ".", "array", "(", "[", "elec_names", ".", "index", "(", "ch", ")", "for", "ch", "in", "chs", "]", ")", "\n", "m_s", "=", "m", "[", ":", ",", "ch_ind", "]", "\n", "assert", "m_s", ".", "shape", "[", "1", "]", "==", "len", "(", "chs", ")", "\n", "#print (m.shape)", "\n", "return", "m_s", ",", "chs", ",", "int", "(", "sample_freq", ")", "\n", "#########################################################################", "\n", "\n", "#########################################################################", "\n", "# Load all filenames per patient", "\n", "", "all_fn", "=", "'./utils/epilepsia_recording_blocks.csv'", "\n", "all_pd", "=", "pd", ".", "read_csv", "(", "all_fn", ",", "header", "=", "0", ",", "index_col", "=", "None", ")", "\n", "pat_pd", "=", "all_pd", "[", "all_pd", "[", "'pat'", "]", "==", "int", "(", "target", ")", "]", "\n", "#print (pat_pd)", "\n", "pat_fd", "=", "pat_pd", "[", "'folder'", "]", ".", "values", "\n", "pat_fd", "=", "list", "(", "set", "(", "list", "(", "pat_fd", ")", ")", ")", "\n", "assert", "len", "(", "pat_fd", ")", "==", "1", "\n", "#print (pat_fd[0])", "\n", "pat_adm", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "pat_fd", "[", "0", "]", ")", "\n", "pat_adm", "=", "glob", ".", "glob", "(", "pat_adm", "+", "'/adm_*'", ")", "\n", "#print (\"pat_adm\", pat_adm)", "\n", "assert", "len", "(", "pat_adm", ")", "==", "1", "\n", "#print (pat_adm[0])", "\n", "pat_fns", "=", "list", "(", "pat_pd", "[", "'filename'", "]", ".", "values", ")", "\n", "#########################################################################", "\n", "\n", "#########################################################################", "\n", "# Load seizure info", "\n", "all_sz_fn", "=", "'./utils/epilepsia_seizure_master.csv'", "\n", "all_sz_pd", "=", "pd", ".", "read_csv", "(", "all_sz_fn", ",", "header", "=", "0", ",", "index_col", "=", "None", ")", "\n", "pat_sz_pd", "=", "all_sz_pd", "[", "all_sz_pd", "[", "'pat'", "]", "==", "int", "(", "target", ")", "]", "\n", "print", "(", "pat_sz_pd", ")", "\n", "\n", "\n", "#########################################################################", "\n", "ii", "=", "0", "\n", "fmt", "=", "\"%d/%m/%Y %H:%M:%S\"", "\n", "\n", "# exi", "\n", "count_interictal", "=", "0", "\n", "for", "i_fn", "in", "range", "(", "len", "(", "pat_fns", ")", ")", ":", "\n", "        ", "pat_fn", "=", "pat_fns", "[", "i_fn", "]", "\n", "#print (pat_fn)", "\n", "rec_fd", "=", "pat_fn", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "rec_fd", "=", "'rec_'", "+", "rec_fd", "\n", "#print (rec_fd)", "\n", "fn", "=", "pat_fn", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "fn", "=", "os", ".", "path", ".", "join", "(", "pat_adm", "[", "0", "]", ",", "rec_fd", ",", "fn", ")", "\n", "# print (fn)", "\n", "this_fn_pd", "=", "pat_pd", "[", "pat_pd", "[", "'filename'", "]", "==", "pat_fn", "]", "\n", "# gap = list(this_fn_pd['gap'].values)", "\n", "# assert len(gap)==1", "\n", "# gap = gap[0]", "\n", "# print (gap)", "\n", "\n", "begin_rec", "=", "list", "(", "this_fn_pd", "[", "'begin'", "]", ".", "values", ")", "\n", "assert", "len", "(", "begin_rec", ")", "==", "1", "\n", "begin_rec", "=", "datetime", ".", "datetime", ".", "strptime", "(", "begin_rec", "[", "0", "]", ",", "fmt", ")", "\n", "# print (begin_rec)", "\n", "\n", "if", "data_type", "==", "'interictal'", ":", "\n", "# check if current recording is at least 4 hour away from sz", "\n", "            ", "flag_sz", "=", "False", "\n", "dist_to_sz", "=", "0", "\n", "ind", "=", "0", "\n", "while", "(", "dist_to_sz", "<", "4", "*", "3600", "*", "256", ")", "and", "(", "ind", "<=", "i_fn", ")", ":", "\n", "                ", "full_fn", "=", "pat_fns", "[", "i_fn", "-", "ind", "]", "\n", "fn_", "=", "full_fn", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "fn_pd_", "=", "pat_pd", "[", "pat_pd", "[", "'filename'", "]", "==", "full_fn", "]", "\n", "if", "ind", ">", "0", ":", "\n", "                    ", "dist_to_sz", "=", "dist_to_sz", "+", "int", "(", "fn_pd_", "[", "'samples'", "]", ")", "+", "int", "(", "fn_pd_", "[", "'gap'", "]", ")", "*", "256", "\n", "", "ind", "+=", "1", "\n", "pd_", "=", "pat_sz_pd", "[", "pat_sz_pd", "[", "'filename'", "]", "==", "fn_", "]", "\n", "#print ('!DEBUG:', i_c, pat_fns[i_c], pd_)", "\n", "if", "pd_", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                    ", "flag_sz", "=", "True", "\n", "break", "\n", "# print ('DEBUG: 1', dist_to_sz,ind)", "\n", "", "", "dist_to_sz", "=", "0", "\n", "ind", "=", "1", "\n", "while", "(", "dist_to_sz", "<", "4", "*", "3600", "*", "256", ")", "and", "(", "ind", "<=", "(", "len", "(", "pat_fns", ")", "-", "i_fn", "-", "1", ")", ")", ":", "\n", "                ", "full_fn", "=", "pat_fns", "[", "i_fn", "+", "ind", "]", "\n", "fn_", "=", "full_fn", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "fn_pd_", "=", "pat_pd", "[", "pat_pd", "[", "'filename'", "]", "==", "full_fn", "]", "\n", "dist_to_sz", "=", "dist_to_sz", "+", "int", "(", "fn_pd_", "[", "'samples'", "]", ")", "+", "int", "(", "fn_pd_", "[", "'gap'", "]", ")", "*", "256", "\n", "ind", "+=", "1", "\n", "pd_", "=", "pat_sz_pd", "[", "pat_sz_pd", "[", "'filename'", "]", "==", "fn_", "]", "\n", "#print ('!DEBUG:', i_c, pat_fns[i_c], pd_)", "\n", "if", "pd_", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                    ", "flag_sz", "=", "True", "\n", "break", "\n", "# print ('DEBUG: 2', dist_to_sz,ind)", "\n", "\n", "", "", "if", "not", "flag_sz", ":", "\n", "                ", "m", ",", "elec_names", ",", "sample_freq", "=", "load_raw_data", "(", "filename", "=", "fn", ")", "\n", "count_interictal", "+=", "1", "\n", "# print (data_type, count_interictal, m.shape, sample_freq, elec_names)", "\n", "yield", "m", "\n", "\n", "", "", "elif", "data_type", "==", "'ictal'", ":", "# actually preictal", "\n", "\n", "            ", "pat_onset_pd", "=", "pat_sz_pd", "[", "pat_sz_pd", "[", "'filename'", "]", "==", "os", ".", "path", ".", "basename", "(", "fn", ")", "]", "\n", "onset", "=", "list", "(", "pat_onset_pd", "[", "'onset'", "]", ".", "values", ")", "\n", "offset", "=", "list", "(", "pat_onset_pd", "[", "'offset'", "]", ".", "values", ")", "\n", "\n", "if", "len", "(", "onset", ")", ">", "0", ":", "\n", "                ", "print", "(", "os", ".", "path", ".", "basename", "(", "fn", ")", ")", "\n", "print", "(", "'!!!ONSET'", ",", "len", "(", "onset", ")", ",", "onset", ",", "offset", ")", "\n", "for", "i_sz", "in", "range", "(", "len", "(", "onset", ")", ")", ":", "\n", "                    ", "m", ",", "elec_names", ",", "sample_freq", "=", "load_raw_data", "(", "filename", "=", "fn", ")", "\n", "print", "(", "data_type", ",", "m", ".", "shape", ",", "sample_freq", ",", "elec_names", ")", "\n", "on", "=", "datetime", ".", "datetime", ".", "strptime", "(", "onset", "[", "i_sz", "]", ",", "fmt", ")", "\n", "off", "=", "datetime", ".", "datetime", ".", "strptime", "(", "offset", "[", "i_sz", "]", ",", "fmt", ")", "\n", "str", "=", "int", "(", "(", "on", "-", "begin_rec", ")", ".", "total_seconds", "(", ")", ")", "*", "sample_freq", "\n", "stp", "=", "int", "(", "(", "off", "-", "begin_rec", ")", ".", "total_seconds", "(", ")", ")", "*", "sample_freq", "\n", "data", "=", "m", "[", "str", ":", "stp", "]", "\n", "if", "(", "str", "==", "stp", ")", ":", "\n", "                        ", "print", "(", "'No info about this seizure on http://epilepsiae.uniklinik-freiburg.de'", ")", "\n", "break", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'!DATA shape'", ",", "str", ",", "stp", ",", "data", ".", "shape", ")", "\n", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.load_signals_Kaggle2014Det": [[170, 185], ["print", "os.path.join", "os.path.exists", "loadmat", "Exception"], "function", ["None"], ["", "", "", "", "", "", "def", "load_signals_Kaggle2014Det", "(", "data_dir", ",", "target", ",", "data_type", ",", "freq", ")", ":", "\n", "    ", "print", "(", "'load_signals_Kaggle2014Det'", ",", "target", ")", "\n", "dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "target", ")", "\n", "done", "=", "False", "\n", "i", "=", "0", "\n", "while", "not", "done", ":", "\n", "        ", "i", "+=", "1", "\n", "filename", "=", "'%s/%s_%s_segment_%d.mat'", "%", "(", "dir", ",", "target", ",", "data_type", ",", "i", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "data", "=", "loadmat", "(", "filename", ")", "\n", "yield", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "if", "i", "==", "1", ":", "\n", "                ", "raise", "Exception", "(", "\"file %s not found\"", "%", "filename", ")", "\n", "", "done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.load_signals_FB": [[186, 278], ["print", "int", "os.path.join", "pandas.read_csv", "pd.read_csv.reset_index", "print", "print", "range", "str", "int", "os.path.join", "print", "range", "os.path.join", "set", "sorted", "len", "print", "str", "str", "os.path.exists", "len", "numpy.concatenate", "print", "str", "int", "numpy.loadtxt", "tmp.reshape.reshape", "data.append", "Exception", "os.listdir", "f.endswith", "load_signals.load_signals_FB.strcv"], "function", ["None"], ["", "", "", "def", "load_signals_FB", "(", "data_dir", ",", "target", ",", "data_type", ")", ":", "\n", "    ", "print", "(", "'load_signals_FB for Patient'", ",", "target", ")", "\n", "\n", "def", "strcv", "(", "i", ")", ":", "\n", "        ", "if", "i", "<", "10", ":", "\n", "            ", "return", "'000'", "+", "str", "(", "i", ")", "\n", "", "elif", "i", "<", "100", ":", "\n", "            ", "return", "'00'", "+", "str", "(", "i", ")", "\n", "", "elif", "i", "<", "1000", ":", "\n", "            ", "return", "'0'", "+", "str", "(", "i", ")", "\n", "", "elif", "i", "<", "10000", ":", "\n", "            ", "return", "str", "(", "i", ")", "\n", "\n", "", "", "if", "int", "(", "target", ")", "<", "10", ":", "\n", "        ", "strtrg", "=", "'00'", "+", "str", "(", "target", ")", "\n", "", "elif", "int", "(", "target", ")", "<", "100", ":", "\n", "        ", "strtrg", "=", "'0'", "+", "str", "(", "target", ")", "\n", "\n", "", "if", "data_type", "==", "'ictal'", ":", "\n", "        ", "target_", "=", "'pat%sIktal'", "%", "strtrg", "\n", "dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "target_", ")", "\n", "df_sz", "=", "pd", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'seizure.csv'", ")", ",", "index_col", "=", "None", ",", "header", "=", "0", ")", "\n", "df_sz", "=", "df_sz", "[", "df_sz", ".", "patient", "==", "int", "(", "target", ")", "]", "\n", "df_sz", ".", "reset_index", "(", "inplace", "=", "True", ",", "drop", "=", "True", ")", "\n", "\n", "print", "(", "df_sz", ")", "\n", "print", "(", "'Patient %s has %d seizures'", "%", "(", "target", ",", "df_sz", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "df_sz", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "data", "=", "[", "]", "\n", "filename", "=", "df_sz", ".", "iloc", "[", "i", "]", "[", "'filename'", "]", "\n", "st", "=", "df_sz", ".", "iloc", "[", "i", "]", "[", "'start'", "]", "\n", "sp", "=", "df_sz", ".", "iloc", "[", "i", "]", "[", "'stop'", "]", "\n", "print", "(", "'Seizure %s starts at %d'", "%", "(", "filename", ",", "st", ")", ")", "\n", "for", "ch", "in", "range", "(", "1", ",", "7", ")", ":", "\n", "                ", "filename2", "=", "'%s/%s_%d.asc'", "%", "(", "dir", ",", "filename", ",", "ch", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename2", ")", ":", "\n", "                    ", "tmp", "=", "np", ".", "loadtxt", "(", "filename2", ")", "\n", "tmp", "=", "tmp", "[", "st", ":", "sp", "]", "\n", "tmp", "=", "tmp", ".", "reshape", "(", "tmp", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "data", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"file %s not found\"", "%", "filename", ")", "\n", "", "", "if", "len", "(", "data", ")", ">", "0", ":", "\n", "                ", "concat", "=", "np", ".", "concatenate", "(", "data", ",", "axis", "=", "1", ")", "\n", "print", "(", "concat", ".", "shape", ")", "\n", "yield", "(", "concat", ")", "\n", "\n", "", "", "", "elif", "data_type", "==", "'interictal'", ":", "\n", "        ", "target_", "=", "'pat%sInteriktal'", "%", "strtrg", "\n", "dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "target_", ")", "\n", "text_files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "dir", ")", "if", "f", ".", "endswith", "(", "'.asc'", ")", "]", "\n", "prefixes", "=", "[", "text", "[", ":", "8", "]", "for", "text", "in", "text_files", "]", "\n", "prefixes", "=", "set", "(", "prefixes", ")", "\n", "prefixes", "=", "sorted", "(", "prefixes", ")", "\n", "\n", "totalfiles", "=", "len", "(", "text_files", ")", "\n", "print", "(", "prefixes", ",", "totalfiles", ")", "\n", "\n", "done", "=", "False", "\n", "count", "=", "0", "\n", "\n", "for", "prefix", "in", "prefixes", ":", "\n", "            ", "i", "=", "0", "\n", "while", "not", "done", ":", "\n", "\n", "                ", "i", "+=", "1", "\n", "\n", "stri", "=", "strcv", "(", "i", ")", "\n", "data", "=", "[", "]", "\n", "for", "ch", "in", "range", "(", "1", ",", "7", ")", ":", "\n", "                    ", "filename", "=", "'%s/%s_%s_%d.asc'", "%", "(", "dir", ",", "prefix", ",", "stri", ",", "ch", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "                        ", "try", ":", "\n", "                            ", "tmp", "=", "np", ".", "loadtxt", "(", "filename", ")", "\n", "tmp", "=", "tmp", ".", "reshape", "(", "tmp", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "data", ".", "append", "(", "tmp", ")", "\n", "count", "+=", "1", "\n", "", "except", ":", "\n", "                            ", "print", "(", "'OOOPS, this file can not be loaded'", ",", "filename", ")", "\n", "", "", "elif", "count", ">=", "totalfiles", ":", "\n", "                        ", "done", "=", "True", "\n", "", "else", ":", "\n", "                        ", "break", "\n", "#raise Exception(\"file %s not found\" % filename)", "\n", "\n", "", "", "if", "i", ">", "99999", ":", "\n", "                    ", "break", "\n", "\n", "", "if", "len", "(", "data", ")", ">", "0", ":", "\n", "                    ", "yield", "(", "np", ".", "concatenate", "(", "data", ",", "axis", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.load_signals.load_signals_CHBMIT": [[280, 414], ["print", "pandas.read_csv", "list", "pandas.read_csv", "list", "pandas.read_csv", "list", "os.path.join", "print", "len", "print", "os.path.join", "os.path.join", "os.path.join", "load_signals.load_signals_FB.strcv"], "function", ["None"], ["", "", "", "", "", "def", "load_signals_CHBMIT", "(", "data_dir", ",", "target", ",", "data_type", ")", ":", "\n", "    ", "print", "(", "'load_signals_CHBMIT for Patient'", ",", "target", ")", "\n", "from", "mne", ".", "io", "import", "RawArray", ",", "read_raw_edf", "\n", "from", "mne", ".", "channels", "import", "read_montage", "\n", "from", "mne", "import", "create_info", ",", "concatenate_raws", ",", "pick_types", "\n", "from", "mne", ".", "filter", "import", "notch_filter", "\n", "\n", "onset", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'seizure_summary.csv'", ")", ",", "header", "=", "0", ")", "\n", "#print (onset)", "\n", "osfilenames", ",", "sstart", ",", "sstop", "=", "onset", "[", "'File_name'", "]", ",", "onset", "[", "'Seizure_start'", "]", ",", "onset", "[", "'Seizure_stop'", "]", "\n", "osfilenames", "=", "list", "(", "osfilenames", ")", "\n", "#print ('Seizure files:', osfilenames)", "\n", "\n", "segment", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'segmentation.csv'", ")", ",", "header", "=", "None", ")", "\n", "nsfilenames", "=", "list", "(", "segment", "[", "segment", "[", "1", "]", "==", "0", "]", "[", "0", "]", ")", "\n", "\n", "nsdict", "=", "{", "\n", "'0'", ":", "[", "]", "\n", "}", "\n", "targets", "=", "[", "\n", "'1'", ",", "\n", "'2'", ",", "\n", "'3'", ",", "\n", "'4'", ",", "\n", "'5'", ",", "\n", "'6'", ",", "\n", "'7'", ",", "\n", "'8'", ",", "\n", "'9'", ",", "\n", "'10'", ",", "\n", "'11'", ",", "\n", "'12'", ",", "\n", "'13'", ",", "\n", "'14'", ",", "\n", "'15'", ",", "\n", "'16'", ",", "\n", "'17'", ",", "\n", "'18'", ",", "\n", "'19'", ",", "\n", "'20'", ",", "\n", "'21'", ",", "\n", "'22'", ",", "\n", "'23'", "\n", "]", "\n", "for", "t", "in", "targets", ":", "\n", "        ", "nslist", "=", "[", "elem", "for", "elem", "in", "nsfilenames", "if", "elem", ".", "find", "(", "'chb%s_'", "%", "t", ")", "!=", "-", "1", "or", "elem", ".", "find", "(", "'chb0%s_'", "%", "t", ")", "!=", "-", "1", "or", "elem", ".", "find", "(", "'chb%sa_'", "%", "t", ")", "!=", "-", "1", "or", "elem", ".", "find", "(", "'chb%sb_'", "%", "t", ")", "!=", "-", "1", "or", "elem", ".", "find", "(", "'chb%sc_'", "%", "t", ")", "!=", "-", "1", "]", "# could be done much better, I am so lazy", "\n", "#nslist = shuffle(nslist, random_state=0)", "\n", "nsdict", "[", "t", "]", "=", "nslist", "\n", "#nsfilenames = shuffle(nsfilenames, random_state=0)", "\n", "\n", "", "special_interictal", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'special_interictal.csv'", ")", ",", "header", "=", "None", ")", "\n", "sifilenames", ",", "sistart", ",", "sistop", "=", "special_interictal", "[", "0", "]", ",", "special_interictal", "[", "1", "]", ",", "special_interictal", "[", "2", "]", "\n", "sifilenames", "=", "list", "(", "sifilenames", ")", "\n", "\n", "def", "strcv", "(", "i", ")", ":", "\n", "        ", "if", "i", "<", "10", ":", "\n", "            ", "return", "'0'", "+", "str", "(", "i", ")", "\n", "", "elif", "i", "<", "100", ":", "\n", "            ", "return", "str", "(", "i", ")", "\n", "\n", "", "", "strtrg", "=", "'chb'", "+", "strcv", "(", "int", "(", "target", ")", ")", "\n", "dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "strtrg", ")", "\n", "text_files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "dir", ")", "if", "f", ".", "endswith", "(", "'.edf'", ")", "]", "\n", "#print (target,strtrg)", "\n", "print", "(", "text_files", ")", "\n", "\n", "if", "data_type", "==", "'ictal'", ":", "\n", "        ", "filenames", "=", "[", "filename", "for", "filename", "in", "text_files", "if", "filename", "in", "osfilenames", "]", "\n", "#print ('ictal files', filenames)", "\n", "", "elif", "data_type", "==", "'interictal'", ":", "\n", "        ", "filenames", "=", "[", "filename", "for", "filename", "in", "text_files", "if", "filename", "in", "nsdict", "[", "target", "]", "]", "\n", "#print ('interictal files', filenames)", "\n", "\n", "", "totalfiles", "=", "len", "(", "filenames", ")", "\n", "print", "(", "'Total %s files %d'", "%", "(", "data_type", ",", "totalfiles", ")", ")", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "exclude_chs", "=", "[", "]", "\n", "if", "target", "in", "[", "'4'", ",", "'9'", "]", ":", "\n", "            ", "exclude_chs", "=", "[", "u'T8-P8'", "]", "\n", "", "if", "filename", "in", "[", "\n", "'chb15_01.edf'", "# it has only 18 channels, other has 22", "\n", "]", ":", "\n", "            ", "continue", "\n", "\n", "# if target in ['13','16']:", "\n", "#     chs = [u'FP1-F7', u'F7-T7', u'T7-P7', u'P7-O1', u'FP1-F3', u'F3-C3', u'C3-P3', u'P3-O1', u'FP2-F4', u'F4-C4', u'C4-P4', u'P4-O2', u'FP2-F8', u'F8-T8', u'T8-P8', u'FZ-CZ', u'CZ-PZ']", "\n", "# elif target in ['4']:", "\n", "#     chs = [u'FP1-F7', u'F7-T7', u'T7-P7', u'P7-O1', u'FP1-F3', u'F3-C3', u'C3-P3', u'P3-O1', u'FP2-F4', u'F4-C4', u'C4-P4', u'P4-O2', u'FP2-F8', u'F8-T8', u'P8-O2', u'FZ-CZ', u'CZ-PZ', u'P7-T7', u'T7-FT9', u'FT10-T8']", "\n", "# else:", "\n", "#     chs = [u'FP1-F7', u'F7-T7', u'T7-P7', u'P7-O1', u'FP1-F3', u'F3-C3', u'C3-P3', u'P3-O1', u'FP2-F4', u'F4-C4', u'C4-P4', u'P4-O2', u'FP2-F8', u'F8-T8', u'T8-P8', u'P8-O2', u'FZ-CZ', u'CZ-PZ', u'P7-T7', u'T7-FT9', u'FT9-FT10', u'FT10-T8']", "\n", "\n", "", "chs", "=", "[", "u'FP1-F7'", ",", "u'F7-T7'", ",", "u'T7-P7'", ",", "u'P7-O1'", ",", "u'FP1-F3'", ",", "u'F3-C3'", ",", "u'C3-P3'", ",", "u'P3-O1'", ",", "u'FP2-F4'", ",", "u'F4-C4'", ",", "u'C4-P4'", ",", "u'P4-O2'", ",", "u'FP2-F8'", ",", "u'F8-T8'", ",", "u'T8-P8'", ",", "u'FZ-CZ'", ",", "u'CZ-PZ'", "]", "\n", "\n", "rawEEG", "=", "read_raw_edf", "(", "'%s/%s'", "%", "(", "dir", ",", "filename", ")", ",", "\n", "#exclude=exclude_chs,  #only work in mne 0.16", "\n", "verbose", "=", "0", ",", "preload", "=", "True", ")", "\n", "rawEEG", ".", "pick_channels", "(", "chs", ")", "\n", "print", "(", "filename", ",", "rawEEG", ".", "ch_names", ")", "\n", "#rawEEG.notch_filter(freqs=np.arange(60,121,60))", "\n", "\n", "\n", "\n", "tmp", "=", "rawEEG", ".", "to_data_frame", "(", ")", "\n", "tmp", "=", "tmp", ".", "as_matrix", "(", ")", "\n", "#print (tmp.shape)", "\n", "#ica = FastICA(n_components=data.shape[1])", "\n", "#data = ica.fit_transform(data)  # Reconstruct signals", "\n", "if", "data_type", "==", "'ictal'", ":", "\n", "# get onset information", "\n", "            ", "indices", "=", "[", "ind", "for", "ind", ",", "x", "in", "enumerate", "(", "osfilenames", ")", "if", "x", "==", "filename", "]", "\n", "if", "len", "(", "indices", ")", ">", "0", ":", "#multiple seizures in one file", "\n", "                ", "print", "(", "'%d seizures in the file %s'", "%", "(", "len", "(", "indices", ")", ",", "filename", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "indices", ")", ")", ":", "\n", "                    ", "st", "=", "sstart", "[", "indices", "[", "i", "]", "]", "*", "256", "\n", "sp", "=", "sstop", "[", "indices", "[", "i", "]", "]", "*", "256", "\n", "print", "(", "'%s: Seizure %d starts at %d stops at %d'", "%", "(", "filename", ",", "i", ",", "st", ",", "sp", ")", ")", "\n", "data", "=", "tmp", "[", "st", ":", "sp", "]", "\n", "print", "(", "'data shape'", ",", "data", ".", "shape", ")", "\n", "yield", "(", "data", ")", "\n", "\n", "\n", "", "", "", "elif", "data_type", "==", "'interictal'", ":", "\n", "            ", "if", "filename", "in", "sifilenames", ":", "\n", "                ", "print", "(", "'Special interictal %s'", "%", "filename", ")", "\n", "st", "=", "sistart", "[", "sifilenames", ".", "index", "(", "filename", ")", "]", "*", "256", "\n", "sp", "=", "sistop", "[", "sifilenames", ".", "index", "(", "filename", ")", "]", "*", "256", "\n", "if", "sp", "<", "0", ":", "\n", "                    ", "data", "=", "tmp", "[", "st", ":", "]", "\n", "", "else", ":", "\n", "                    ", "data", "=", "tmp", "[", "st", ":", "sp", "]", "\n", "", "", "else", ":", "\n", "                ", "data", "=", "tmp", "\n", "", "print", "(", "'data shape'", ",", "data", ".", "shape", ")", "\n", "yield", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.prep_data.train_val_test_stratified_nfold_split": [[4, 14], ["StratifiedKFold", "enumerate", "StratifiedKFold.split", "train_test_split", "int"], "function", ["None"], ["def", "train_val_test_stratified_nfold_split", "(", "X", ",", "y", ",", "val_ratio", "=", "0.25", ",", "test_ratio", "=", "0.2", ")", ":", "\n", "\t", "from", "sklearn", ".", "model_selection", "import", "StratifiedKFold", "\n", "from", "sklearn", ".", "model_selection", "import", "train_test_split", "\n", "seed", "=", "19", "\n", "kfold", "=", "StratifiedKFold", "(", "n_splits", "=", "int", "(", "1", "/", "test_ratio", ")", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "for", "index", ",", "[", "train", ",", "test", "]", "in", "enumerate", "(", "kfold", ".", "split", "(", "X", ",", "y", ")", ")", ":", "\n", "\t\t", "X_train", ",", "X_val", ",", "y_train", ",", "y_val", "=", "train_test_split", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ",", "test_size", "=", "val_ratio", ",", "stratify", "=", "y", "[", "train", "]", ",", "random_state", "=", "seed", ")", "\n", "X_test", ",", "y_test", "=", "X", "[", "test", "]", ",", "y", "[", "test", "]", "\n", "\n", "yield", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.prep_data.train_val_test_nfold_split": [[15, 48], ["prep_data.shuffle", "int", "int", "range", "numpy.array", "range", "np.array.append", "numpy.arange", "numpy.concatenate", "numpy.arange", "numpy.delete", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.prep_data.shuffle"], ["", "", "def", "train_val_test_nfold_split", "(", "X", ",", "y", ",", "val_ratio", "=", "0.2", ",", "test_ratio", "=", "0.2", ")", ":", "\n", "\t", "'''\n\tPrepare data for n-fold cross-validation\n\t:param X:\n\t:param y:\n\t:param val_ratio:\n\t:param test_ratio:\n\t:return:\n\t'''", "\n", "\n", "# shuffle the data", "\n", "X_s", ",", "y_s", "=", "shuffle", "(", "X", ",", "y", ")", "\n", "n_fold", "=", "int", "(", "1.0", "/", "test_ratio", ")", "\n", "fold_len", "=", "int", "(", "test_ratio", "*", "X_s", ".", "shape", "[", "0", "]", ")", "\n", "inds_test_sets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_fold", ")", ":", "\n", "\t\t", "inds_test_sets", ".", "append", "(", "np", ".", "arange", "(", "i", "*", "fold_len", ",", "(", "i", "+", "1", ")", "*", "fold_len", ")", ")", "\n", "", "inds_test_sets", "=", "np", ".", "array", "(", "inds_test_sets", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_fold", ")", ":", "\n", "\t\t", "inds_fold", "=", "np", ".", "arange", "(", "n_fold", ")", "\n", "inds_test", "=", "inds_test_sets", "[", "i", "]", "\n", "inds_train", "=", "np", ".", "concatenate", "(", "inds_test_sets", "[", "np", ".", "delete", "(", "inds_fold", ",", "i", ",", "0", ")", "]", ")", "\n", "X_test", "=", "X_s", "[", "inds_test", "]", "\n", "X_train_", "=", "X_s", "[", "inds_train", "]", "\n", "X_train", "=", "X_train_", "[", ":", "-", "int", "(", "val_ratio", "*", "X", ".", "shape", "[", "0", "]", ")", "]", "\n", "X_val", "=", "X_train_", "[", "-", "int", "(", "val_ratio", "*", "X", ".", "shape", "[", "0", "]", ")", ":", "]", "\n", "y_test", "=", "y_s", "[", "inds_test", "]", "\n", "y_train_", "=", "y_s", "[", "inds_train", "]", "\n", "y_train", "=", "y_train_", "[", ":", "-", "int", "(", "val_ratio", "*", "y", ".", "shape", "[", "0", "]", ")", "]", "\n", "y_val", "=", "y_train_", "[", "-", "int", "(", "val_ratio", "*", "y", ".", "shape", "[", "0", "]", ")", ":", "]", "\n", "\n", "yield", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.prep_data.train_val_loo_split": [[49, 142], ["len", "isinstance", "int", "print", "range", "numpy.concatenate", "numpy.concatenate", "round", "print", "int", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "numpy.concatenate", "numpy.concatenate", "print", "numpy.concatenate", "numpy.concatenate", "numpy.floor", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "", "def", "train_val_loo_split", "(", "ictal_X", ",", "ictal_y", ",", "interictal_X", ",", "interictal_y", ",", "val_ratio", ")", ":", "\n", "\t", "'''\n\tPrepare data for leave-one-out cross-validation\n\t:param ictal_X:\n\t:param ictal_y:\n\t:param interictal_X:\n\t:param interictal_y:\n\t:return: (X_train, y_train, X_val, y_val, X_test, y_test)\n\t'''", "\n", "#For each fold, one seizure is taken out for testing, the rest for training", "\n", "#Interictal are concatenated and split into N (no. of seizures) parts,", "\n", "#each interictal part is combined with one seizure", "\n", "\n", "nfold", "=", "len", "(", "ictal_y", ")", "\n", "\n", "if", "isinstance", "(", "interictal_y", ",", "list", ")", ":", "\n", "\t\t", "interictal_X", "=", "np", ".", "concatenate", "(", "interictal_X", ",", "axis", "=", "0", ")", "\n", "interictal_y", "=", "np", ".", "concatenate", "(", "interictal_y", ",", "axis", "=", "0", ")", "\n", "", "interictal_fold_len", "=", "int", "(", "round", "(", "1.0", "*", "interictal_y", ".", "shape", "[", "0", "]", "/", "nfold", ")", ")", "\n", "print", "(", "'interictal_fold_len'", ",", "interictal_fold_len", ")", "\n", "\n", "for", "i", "in", "range", "(", "nfold", ")", ":", "\n", "\t\t", "X_test_ictal", "=", "ictal_X", "[", "i", "]", "\n", "y_test_ictal", "=", "ictal_y", "[", "i", "]", "\n", "\n", "X_test_interictal", "=", "interictal_X", "[", "i", "*", "interictal_fold_len", ":", "(", "i", "+", "1", ")", "*", "interictal_fold_len", "]", "\n", "y_test_interictal", "=", "interictal_y", "[", "i", "*", "interictal_fold_len", ":", "(", "i", "+", "1", ")", "*", "interictal_fold_len", "]", "\n", "\n", "if", "i", "==", "0", ":", "\n", "\t\t\t", "X_train_ictal", "=", "np", ".", "concatenate", "(", "ictal_X", "[", "1", ":", "]", ",", "axis", "=", "0", ")", "\n", "y_train_ictal", "=", "np", ".", "concatenate", "(", "ictal_y", "[", "1", ":", "]", ",", "axis", "=", "0", ")", "\n", "\n", "X_train_interictal", "=", "interictal_X", "[", "(", "i", "+", "1", ")", "*", "interictal_fold_len", "+", "1", ":", "]", "\n", "y_train_interictal", "=", "interictal_y", "[", "(", "i", "+", "1", ")", "*", "interictal_fold_len", "+", "1", ":", "]", "\n", "", "elif", "i", "<", "nfold", "-", "1", ":", "\n", "\t\t\t", "X_train_ictal", "=", "np", ".", "concatenate", "(", "ictal_X", "[", ":", "i", "]", "+", "ictal_X", "[", "i", "+", "1", ":", "]", ",", "axis", "=", "0", ")", "\n", "y_train_ictal", "=", "np", ".", "concatenate", "(", "ictal_y", "[", ":", "i", "]", "+", "ictal_y", "[", "i", "+", "1", ":", "]", ",", "axis", "=", "0", ")", "\n", "\n", "X_train_interictal", "=", "np", ".", "concatenate", "(", "[", "interictal_X", "[", ":", "i", "*", "interictal_fold_len", "]", ",", "interictal_X", "[", "(", "i", "+", "1", ")", "*", "interictal_fold_len", "+", "1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "y_train_interictal", "=", "np", ".", "concatenate", "(", "[", "interictal_y", "[", ":", "i", "*", "interictal_fold_len", "]", ",", "interictal_y", "[", "(", "i", "+", "1", ")", "*", "interictal_fold_len", "+", "1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "\t\t\t", "X_train_ictal", "=", "np", ".", "concatenate", "(", "ictal_X", "[", ":", "i", "]", ",", "axis", "=", "0", ")", "\n", "y_train_ictal", "=", "np", ".", "concatenate", "(", "ictal_y", "[", ":", "i", "]", ",", "axis", "=", "0", ")", "\n", "\n", "X_train_interictal", "=", "interictal_X", "[", ":", "i", "*", "interictal_fold_len", "]", "\n", "y_train_interictal", "=", "interictal_y", "[", ":", "i", "*", "interictal_fold_len", "]", "\n", "\n", "", "print", "(", "y_train_ictal", ".", "shape", ",", "y_train_interictal", ".", "shape", ")", "\n", "\n", "'''\n\t\tDownsampling interictal training set so that the 2 classes\n\t\tare balanced\n\t\t'''", "\n", "down_spl", "=", "int", "(", "np", ".", "floor", "(", "y_train_interictal", ".", "shape", "[", "0", "]", "/", "y_train_ictal", ".", "shape", "[", "0", "]", ")", ")", "\n", "if", "down_spl", ">", "1", ":", "\n", "\t\t\t", "X_train_interictal", "=", "X_train_interictal", "[", ":", ":", "down_spl", "]", "\n", "y_train_interictal", "=", "y_train_interictal", "[", ":", ":", "down_spl", "]", "\n", "", "elif", "down_spl", "==", "1", ":", "\n", "\t\t\t", "X_train_interictal", "=", "X_train_interictal", "[", ":", "X_train_ictal", ".", "shape", "[", "0", "]", "]", "\n", "y_train_interictal", "=", "y_train_interictal", "[", ":", "X_train_ictal", ".", "shape", "[", "0", "]", "]", "\n", "\n", "", "print", "(", "'Balancing:'", ",", "y_train_ictal", ".", "shape", ",", "y_train_interictal", ".", "shape", ")", "\n", "\n", "#X_train_ictal = shuffle(X_train_ictal,random_state=0)", "\n", "#X_train_interictal = shuffle(X_train_interictal,random_state=0)", "\n", "X_train", "=", "np", ".", "concatenate", "(", "(", "X_train_ictal", "[", ":", "int", "(", "X_train_ictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", "]", ",", "X_train_interictal", "[", ":", "int", "(", "X_train_interictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", "]", ")", ",", "axis", "=", "0", ")", "\n", "y_train", "=", "np", ".", "concatenate", "(", "(", "y_train_ictal", "[", ":", "int", "(", "X_train_ictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", "]", ",", "y_train_interictal", "[", ":", "int", "(", "X_train_interictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "X_val", "=", "np", ".", "concatenate", "(", "(", "X_train_ictal", "[", "int", "(", "X_train_ictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", ":", "]", ",", "X_train_interictal", "[", "int", "(", "X_train_interictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "y_val", "=", "np", ".", "concatenate", "(", "(", "y_train_ictal", "[", "int", "(", "X_train_ictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", ":", "]", ",", "y_train_interictal", "[", "int", "(", "X_train_interictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "nb_val", "=", "X_val", ".", "shape", "[", "0", "]", "-", "X_val", ".", "shape", "[", "0", "]", "%", "4", "\n", "X_val", "=", "X_val", "[", ":", "nb_val", "]", "\n", "y_val", "=", "y_val", "[", ":", "nb_val", "]", "\n", "\n", "# let overlapped ictal samples have same labels with non-overlapped samples", "\n", "y_train", "[", "y_train", "==", "2", "]", "=", "1", "\n", "y_val", "[", "y_val", "==", "2", "]", "=", "1", "\n", "y_train", "[", "y_train", "==", "-", "1", "]", "=", "0", "\n", "y_val", "[", "y_val", "==", "-", "1", "]", "=", "0", "\n", "\n", "print", "(", "X_test_ictal", ".", "shape", ",", "X_test_interictal", ".", "shape", ")", "\n", "X_test", "=", "np", ".", "concatenate", "(", "(", "X_test_ictal", ",", "X_test_interictal", ")", ",", "axis", "=", "0", ")", "\n", "y_test", "=", "np", ".", "concatenate", "(", "(", "y_test_ictal", ",", "y_test_interictal", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# remove overlapped ictal samples in test-set", "\n", "X_test", "=", "X_test", "[", "y_test", "!=", "2", "]", "\n", "y_test", "=", "y_test", "[", "y_test", "!=", "2", "]", "\n", "X_test", "=", "X_test", "[", "y_test", "!=", "-", "1", "]", "\n", "y_test", "=", "y_test", "[", "y_test", "!=", "-", "1", "]", "\n", "\n", "print", "(", "'X_train, X_val, X_test'", ",", "X_train", ".", "shape", ",", "X_val", ".", "shape", ",", "X_test", ".", "shape", ")", "\n", "yield", "(", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.prep_data.train_val_test_split": [[144, 214], ["len", "int", "print", "isinstance", "int", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "int", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "numpy.concatenate", "numpy.concatenate", "round", "numpy.floor", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "", "def", "train_val_test_split", "(", "ictal_X", ",", "ictal_y", ",", "interictal_X", ",", "interictal_y", ",", "val_ratio", ",", "test_ratio", ")", ":", "\n", "\n", "\t", "num_sz", "=", "len", "(", "ictal_y", ")", "\n", "num_sz_test", "=", "int", "(", "test_ratio", "*", "num_sz", ")", "\n", "print", "(", "'Total %d seizures. Last %d is used for testing.'", "%", "(", "num_sz", ",", "num_sz_test", ")", ")", "\n", "\n", "if", "isinstance", "(", "interictal_y", ",", "list", ")", ":", "\n", "\t\t", "interictal_X", "=", "np", ".", "concatenate", "(", "interictal_X", ",", "axis", "=", "0", ")", "\n", "interictal_y", "=", "np", ".", "concatenate", "(", "interictal_y", ",", "axis", "=", "0", ")", "\n", "", "interictal_fold_len", "=", "int", "(", "round", "(", "1.0", "*", "interictal_y", ".", "shape", "[", "0", "]", "/", "num_sz", ")", ")", "\n", "print", "(", "'interictal_fold_len'", ",", "interictal_fold_len", ")", "\n", "\n", "\n", "X_test_ictal", "=", "np", ".", "concatenate", "(", "ictal_X", "[", "-", "num_sz_test", ":", "]", ")", "\n", "y_test_ictal", "=", "np", ".", "concatenate", "(", "ictal_y", "[", "-", "num_sz_test", ":", "]", ")", "\n", "\n", "X_test_interictal", "=", "interictal_X", "[", "-", "num_sz_test", "*", "interictal_fold_len", ":", "]", "\n", "y_test_interictal", "=", "interictal_y", "[", "-", "num_sz_test", "*", "interictal_fold_len", ":", "]", "\n", "\n", "X_train_ictal", "=", "np", ".", "concatenate", "(", "ictal_X", "[", ":", "-", "num_sz_test", "]", ",", "axis", "=", "0", ")", "\n", "y_train_ictal", "=", "np", ".", "concatenate", "(", "ictal_y", "[", ":", "-", "num_sz_test", "]", ",", "axis", "=", "0", ")", "\n", "\n", "X_train_interictal", "=", "interictal_X", "[", ":", "-", "num_sz_test", "*", "interictal_fold_len", "]", "\n", "y_train_interictal", "=", "interictal_y", "[", ":", "-", "num_sz_test", "*", "interictal_fold_len", "]", "\n", "\n", "print", "(", "y_train_ictal", ".", "shape", ",", "y_train_interictal", ".", "shape", ")", "\n", "\n", "'''\n\tDownsampling interictal training set so that the 2 classes\n\tare balanced\n\t'''", "\n", "down_spl", "=", "int", "(", "np", ".", "floor", "(", "y_train_interictal", ".", "shape", "[", "0", "]", "/", "y_train_ictal", ".", "shape", "[", "0", "]", ")", ")", "\n", "if", "down_spl", ">", "1", ":", "\n", "\t\t", "X_train_interictal", "=", "X_train_interictal", "[", ":", ":", "down_spl", "]", "\n", "y_train_interictal", "=", "y_train_interictal", "[", ":", ":", "down_spl", "]", "\n", "", "elif", "down_spl", "==", "1", ":", "\n", "\t\t", "X_train_interictal", "=", "X_train_interictal", "[", ":", "X_train_ictal", ".", "shape", "[", "0", "]", "]", "\n", "y_train_interictal", "=", "y_train_interictal", "[", ":", "X_train_ictal", ".", "shape", "[", "0", "]", "]", "\n", "\n", "", "print", "(", "'Balancing:'", ",", "y_train_ictal", ".", "shape", ",", "y_train_interictal", ".", "shape", ")", "\n", "\n", "#X_train_ictal = shuffle(X_train_ictal,random_state=0)", "\n", "#X_train_interictal = shuffle(X_train_interictal,random_state=0)", "\n", "X_train", "=", "np", ".", "concatenate", "(", "(", "X_train_ictal", "[", ":", "int", "(", "X_train_ictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", "]", ",", "X_train_interictal", "[", ":", "int", "(", "X_train_interictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", "]", ")", ",", "axis", "=", "0", ")", "\n", "y_train", "=", "np", ".", "concatenate", "(", "(", "y_train_ictal", "[", ":", "int", "(", "X_train_ictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", "]", ",", "y_train_interictal", "[", ":", "int", "(", "X_train_interictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "X_val", "=", "np", ".", "concatenate", "(", "(", "X_train_ictal", "[", "int", "(", "X_train_ictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", ":", "]", ",", "X_train_interictal", "[", "int", "(", "X_train_interictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "y_val", "=", "np", ".", "concatenate", "(", "(", "y_train_ictal", "[", "int", "(", "X_train_ictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", ":", "]", ",", "y_train_interictal", "[", "int", "(", "X_train_interictal", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "val_ratio", ")", ")", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "nb_val", "=", "X_val", ".", "shape", "[", "0", "]", "-", "X_val", ".", "shape", "[", "0", "]", "%", "4", "\n", "X_val", "=", "X_val", "[", ":", "nb_val", "]", "\n", "y_val", "=", "y_val", "[", ":", "nb_val", "]", "\n", "\n", "# let overlapped ictal samples have same labels with non-overlapped samples", "\n", "y_train", "[", "y_train", "==", "2", "]", "=", "1", "\n", "y_val", "[", "y_val", "==", "2", "]", "=", "1", "\n", "y_train", "[", "y_train", "==", "-", "1", "]", "=", "0", "\n", "y_val", "[", "y_val", "==", "-", "1", "]", "=", "0", "\n", "\n", "X_test", "=", "np", ".", "concatenate", "(", "(", "X_test_ictal", ",", "X_test_interictal", ")", ",", "axis", "=", "0", ")", "\n", "y_test", "=", "np", ".", "concatenate", "(", "(", "y_test_ictal", ",", "y_test_interictal", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# remove overlapped ictal samples in test-set", "\n", "X_test", "=", "X_test", "[", "y_test", "!=", "2", "]", "\n", "y_test", "=", "y_test", "[", "y_test", "!=", "2", "]", "\n", "X_test", "=", "X_test", "[", "y_test", "!=", "-", "1", "]", "\n", "y_test", "=", "y_test", "[", "y_test", "!=", "-", "1", "]", "\n", "\n", "print", "(", "'X_train, X_val, X_test'", ",", "X_train", ".", "shape", ",", "X_val", ".", "shape", ",", "X_test", ".", "shape", ")", "\n", "return", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.prep_data.shuffle": [[215, 221], ["numpy.random.seed", "numpy.arange", "numpy.random.shuffle"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.utils.prep_data.shuffle"], ["", "def", "shuffle", "(", "X", ",", "y", ")", ":", "\n", "\t", "np", ".", "random", ".", "seed", "(", "2019", ")", "\n", "ind", "=", "X", ".", "shape", "[", "0", "]", "\n", "inds", "=", "np", ".", "arange", "(", "ind", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "return", "X", "[", "inds", "]", ",", "y", "[", "inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_rnn_model.create_rnn_model": [[19, 59], ["keras.models.Input", "keras.models.Model", "keras.layers.normalization.BatchNormalization", "keras.layers.Lambda", "keras.layers.Lambda", "keras.layers.ConvLSTM2D", "keras.layers.core.Activation", "keras.layers.normalization.BatchNormalization", "keras.layers.MaxPooling3D", "keras.layers.core.Dropout", "keras.layers.ConvLSTM2D", "keras.layers.core.Activation", "keras.layers.normalization.BatchNormalization", "keras.layers.convolutional.MaxPooling2D", "keras.layers.core.Flatten", "keras.layers.core.Dropout", "keras.layers.core.Dense", "keras.layers.core.Dropout", "keras.layers.core.Dense", "keras.layers.Lambda", "keras.layers.core.Activation", "keras.backend.permute_dimensions", "keras.backend.expand_dims"], "function", ["None"], ["def", "create_rnn_model", "(", "X_train_shape", ",", "nb_classes", ")", ":", "\n", "\n", "\t", "inputs", "=", "Input", "(", "shape", "=", "X_train_shape", "[", "1", ":", "]", ")", "\n", "\n", "normal1", "=", "BatchNormalization", "(", ")", "(", "inputs", ")", "\n", "permute1", "=", "Lambda", "(", "lambda", "x", ":", "keras", ".", "backend", ".", "permute_dimensions", "(", "x", ",", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", ")", "(", "normal1", ")", "\n", "reshape1", "=", "Lambda", "(", "lambda", "x", ":", "keras", ".", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "-", "1", ")", ")", "(", "permute1", ")", "\n", "\n", "conv1", "=", "ConvLSTM2D", "(", "\n", "128", ",", "(", "5", ",", "1", ")", ",", "\n", "padding", "=", "'valid'", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "return_sequences", "=", "True", ",", "data_format", "=", "'channels_first'", ")", "(", "reshape1", ")", "\n", "relu1", "=", "Activation", "(", "'relu'", ")", "(", "conv1", ")", "\n", "\n", "#########", "\n", "normal2", "=", "BatchNormalization", "(", ")", "(", "relu1", ")", "\n", "pool1", "=", "MaxPooling3D", "(", "pool_size", "=", "(", "2", ",", "2", ",", "1", ")", ",", "data_format", "=", "'channels_first'", ")", "(", "normal2", ")", "\n", "\n", "#########", "\n", "drop1", "=", "Dropout", "(", "0.5", ")", "(", "relu1", ")", "\n", "conv2", "=", "ConvLSTM2D", "(", "64", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "'valid'", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "return_sequences", "=", "False", ",", "data_format", "=", "'channels_first'", ")", "(", "drop1", ")", "\n", "relu2", "=", "Activation", "(", "'relu'", ")", "(", "conv2", ")", "\n", "normal3", "=", "BatchNormalization", "(", ")", "(", "relu2", ")", "\n", "pool2", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "1", ")", ",", "data_format", "=", "'channels_first'", ")", "(", "relu2", ")", "\n", "#########", "\n", "\n", "flat", "=", "Flatten", "(", ")", "(", "pool2", ")", "\n", "drop1", "=", "Dropout", "(", "0.5", ")", "(", "flat", ")", "\n", "dens1", "=", "Dense", "(", "256", ",", "activation", "=", "'sigmoid'", ")", "(", "drop1", ")", "\n", "drop2", "=", "Dropout", "(", "0.5", ")", "(", "dens1", ")", "\n", "dens2", "=", "Dense", "(", "nb_classes", ")", "(", "drop2", ")", "\n", "\n", "# option to include temperature in softmax", "\n", "temp", "=", "1.0", "\n", "temperature", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "temp", ")", "(", "dens2", ")", "\n", "last", "=", "Activation", "(", "'softmax'", ")", "(", "temperature", ")", "\n", "\n", "model", "=", "Model", "(", "input", "=", "inputs", ",", "output", "=", "last", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_rnn_model.train_rnn_model": [[60, 107], ["create_rnn_model.create_rnn_model", "create_rnn_model.summary", "keras.optimizers.Adam", "create_rnn_model.compile", "range", "np_utils.to_categorical.astype", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "print", "print", "utils.customCallbacks.MyEarlyStopping", "utils.customCallbacks.MyModelCheckpoint", "create_rnn_model.fit", "create_rnn_model.load_weights", "create_rnn_model.predict", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "f1_score", "print", "summary.append", "print", "datetime.datetime.now", "datetime.now.strftime", "summary.append", "int", "numpy.argmax", "open", "f.write", "numpy.sum", "int"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_rnn_model.create_rnn_model"], ["", "def", "train_rnn_model", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "pp", ")", ":", "\n", "\t", "summary", "=", "[", "]", "\n", "fold", "=", "1", "\n", "\n", "for", "X_train", ",", "Y_train", ",", "X_val", ",", "Y_val", ",", "X_test", ",", "Y_test", "in", "n_folds", ":", "\n", "\t\t", "rnn_model", "=", "create_rnn_model", "(", "X_train", ".", "shape", ",", "nb_classes", ")", "\n", "rnn_model", ".", "summary", "(", ")", "\n", "adam", "=", "Adam", "(", "lr", "=", "1e-4", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "rnn_model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "class_weights", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "nb_classes", ")", ":", "\n", "\t\t\t", "class_weights", "[", "i", "]", "=", "X_train", ".", "shape", "[", "0", "]", "/", "(", "np", ".", "sum", "(", "Y_train", "==", "i", ")", "+", "1e-6", ")", "\n", "\n", "", "Y_train", "=", "Y_train", ".", "astype", "(", "'uint8'", ")", "\n", "Y_train", "=", "np_utils", ".", "to_categorical", "(", "Y_train", ",", "nb_classes", ")", "\n", "Y_val", "=", "np_utils", ".", "to_categorical", "(", "Y_val", ",", "nb_classes", ")", "\n", "print", "(", "'Shape: x_train, y_train, X_val, y_val, X_test, y_test'", ")", "\n", "print", "(", "X_train", ".", "shape", ",", "Y_train", ".", "shape", ",", "X_val", ".", "shape", ",", "Y_val", ".", "shape", ",", "X_test", ".", "shape", ",", "Y_test", ".", "shape", ")", "\n", "\n", "filename", "=", "\"./{}_{}cls_{}_saved_models/stft_rnn_{}.hdf5\"", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "\n", "early_stop", "=", "MyEarlyStopping", "(", "patience", "=", "10", ",", "verbose", "=", "1", ")", "\n", "checkpointer", "=", "MyModelCheckpoint", "(", "filename", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ")", "\n", "\n", "rnn_model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "32", ",", "epochs", "=", "200", ",", "class_weight", "=", "class_weights", ",", "\n", "validation_data", "=", "(", "X_val", ",", "Y_val", ")", ",", "callbacks", "=", "[", "early_stop", ",", "checkpointer", "]", ")", "\n", "\n", "rnn_model", ".", "load_weights", "(", "filename", ")", "\n", "predictions", "=", "rnn_model", ".", "predict", "(", "X_test", ",", "verbose", "=", "1", ")", "\n", "y_pred", "=", "np_utils", ".", "to_categorical", "(", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", ",", "nb_classes", ")", "\n", "y_true", "=", "np_utils", ".", "to_categorical", "(", "Y_test", ",", "nb_classes", ")", "\n", "\n", "from", "sklearn", ".", "metrics", "import", "f1_score", "\n", "f1_test", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'weighted'", ")", "\n", "print", "(", "'Test F1-weighted score is:'", ",", "f1_test", ")", "\n", "\n", "summary", ".", "append", "(", "f1_test", ")", "\n", "print", "(", "summary", ")", "\n", "\n", "now", "=", "datetime", ".", "now", "(", ")", "\n", "date_time", "=", "now", ".", "strftime", "(", "\"%m/%d/%Y, %H:%M:%S\"", ")", "\n", "summary", ".", "append", "(", "date_time", ")", "\n", "with", "open", "(", "'./{}_{}cls_{}_training_history/rnn_training_history.txt'", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ")", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t", "for", "item", "in", "summary", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n", "", "", "fold", "+=", "1", "", "", "", ""]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_bcnn_model.outer_product": [[20, 25], ["keras.backend.batch_dot", "x[].get_shape().as_list", "x[].get_shape"], "function", ["None"], ["def", "outer_product", "(", "x", ")", ":", "\n", "\t", "\"\"\"\n\tx list of 2 tensors, assuming each of which has shape = (size_minibatch, total_pixels, size_filter)\n\t\"\"\"", "\n", "return", "keras", ".", "backend", ".", "batch_dot", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "axes", "=", "[", "1", ",", "1", "]", ")", "/", "x", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "#return tf.einsum('bom,bpm->bmop', x[0], x[1])", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_bcnn_model.load_cnn_model": [[28, 33], ["create_cnn_model", "create_cnn_model.load_weights"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_cnn_model.create_cnn_model"], ["", "def", "load_cnn_model", "(", "weights_path", ",", "X_train_shape", ",", "nb_classes", ")", ":", "\n", "\t", "from", ".", "create_cnn_model", "import", "create_cnn_model", "\n", "model", "=", "create_cnn_model", "(", "X_train_shape", ",", "nb_classes", ")", "\n", "model", ".", "load_weights", "(", "weights_path", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_bcnn_model.create_bcnn_model": [[35, 60], ["create_bcnn_model.load_cnn_model", "keras.models.Model", "int", "keras.layers.core.Reshape", "keras.layers.Lambda", "keras.layers.core.Flatten", "keras.layers.normalization.BatchNormalization", "keras.layers.core.Dropout", "keras.layers.core.Dense", "keras.layers.core.Dropout", "keras.layers.core.Dense"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_hybrid_model.load_cnn_model"], ["", "def", "create_bcnn_model", "(", "X_train_shape", ",", "fold", ",", "nb_classes", ",", "ds", ",", "pp", "=", "'specific'", ")", ":", "\n", "\t", "cnn_weights", "=", "'./{}_{}cls_{}_saved_models/stft_cnn_{}.hdf5'", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "cnn_model", "=", "load_cnn_model", "(", "cnn_weights", ",", "X_train_shape", ",", "nb_classes", ")", "\n", "\n", "x_detector", "=", "cnn_model", ".", "layers", "[", "-", "8", "]", ".", "output", "\n", "shape_detector", "=", "cnn_model", ".", "layers", "[", "-", "8", "]", ".", "output_shape", "\n", "x_detector", "=", "Reshape", "(", "(", "shape_detector", "[", "1", "]", "*", "shape_detector", "[", "2", "]", ",", "shape_detector", "[", "3", "]", ")", ")", "(", "x_detector", ")", "\n", "x_extractor", "=", "x_detector", "\n", "\n", "x", "=", "keras", ".", "layers", ".", "Lambda", "(", "outer_product", ")", "(", "[", "x_detector", ",", "x_extractor", "]", ")", "\n", "x", "=", "Flatten", "(", ")", "(", "x", ")", "\n", "##", "\n", "x", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "x", ")", "\n", "##", "\n", "x", "=", "Dropout", "(", "0.5", ")", "(", "x", ")", "\n", "x", "=", "Dense", "(", "256", ",", "activation", "=", "'sigmoid'", ")", "(", "x", ")", "\n", "x", "=", "Dropout", "(", "0.5", ")", "(", "x", ")", "\n", "preds", "=", "Dense", "(", "nb_classes", ",", "activation", "=", "'softmax'", ")", "(", "x", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "cnn_model", ".", "input", ",", "outputs", "=", "preds", ")", "\n", "\n", "# make sure none of the CNN or RNN layers are trained, only final FC layer is trained", "\n", "for", "layer", "in", "cnn_model", ".", "layers", ":", "\n", "\t\t", "layer", ".", "trainable", "=", "False", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_bcnn_model.train_bcnn_model": [[61, 108], ["create_bcnn_model.create_bcnn_model", "create_bcnn_model.summary", "keras.optimizers.Adam", "create_bcnn_model.compile", "range", "np_utils.to_categorical.astype", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "print", "print", "utils.customCallbacks.MyEarlyStopping", "utils.customCallbacks.MyModelCheckpoint", "create_bcnn_model.fit", "create_bcnn_model.load_weights", "create_bcnn_model.predict", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "f1_score", "print", "summary.append", "print", "datetime.datetime.now", "datetime.now.strftime", "summary.append", "int", "numpy.argmax", "open", "f.write", "numpy.sum", "int"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_bcnn_model.create_bcnn_model"], ["", "def", "train_bcnn_model", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "pp", ")", ":", "\n", "\t", "summary", "=", "[", "]", "\n", "fold", "=", "1", "\n", "\n", "for", "X_train", ",", "Y_train", ",", "X_val", ",", "Y_val", ",", "X_test", ",", "Y_test", "in", "n_folds", ":", "\n", "\t\t", "bcnn_model", "=", "create_bcnn_model", "(", "X_train", ".", "shape", ",", "fold", ",", "nb_classes", ",", "ds", ",", "pp", ")", "\n", "bcnn_model", ".", "summary", "(", ")", "\n", "adam", "=", "Adam", "(", "lr", "=", "1e-4", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "bcnn_model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "class_weights", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "nb_classes", ")", ":", "\n", "\t\t\t", "class_weights", "[", "i", "]", "=", "X_train", ".", "shape", "[", "0", "]", "/", "(", "np", ".", "sum", "(", "Y_train", "==", "i", ")", "+", "1e-6", ")", "\n", "\n", "", "Y_train", "=", "Y_train", ".", "astype", "(", "'uint8'", ")", "\n", "Y_train", "=", "np_utils", ".", "to_categorical", "(", "Y_train", ",", "nb_classes", ")", "\n", "Y_val", "=", "np_utils", ".", "to_categorical", "(", "Y_val", ",", "nb_classes", ")", "\n", "print", "(", "'Shape: x_train, y_train, X_val, y_val, X_test, y_test'", ")", "\n", "print", "(", "X_train", ".", "shape", ",", "Y_train", ".", "shape", ",", "X_val", ".", "shape", ",", "Y_val", ".", "shape", ",", "X_test", ".", "shape", ",", "Y_test", ".", "shape", ")", "\n", "\n", "filename", "=", "\"./{}_{}cls_{}_saved_models/stft_bcnn_{}.hdf5\"", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "\n", "early_stop", "=", "MyEarlyStopping", "(", "patience", "=", "10", ",", "verbose", "=", "1", ")", "\n", "checkpointer", "=", "MyModelCheckpoint", "(", "filename", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ")", "\n", "\n", "bcnn_model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "32", ",", "epochs", "=", "200", ",", "class_weight", "=", "class_weights", ",", "\n", "validation_data", "=", "(", "X_val", ",", "Y_val", ")", ",", "callbacks", "=", "[", "early_stop", ",", "checkpointer", "]", ")", "\n", "\n", "bcnn_model", ".", "load_weights", "(", "filename", ")", "\n", "predictions", "=", "bcnn_model", ".", "predict", "(", "X_test", ",", "verbose", "=", "1", ")", "\n", "y_pred", "=", "np_utils", ".", "to_categorical", "(", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", ",", "nb_classes", ")", "\n", "y_true", "=", "np_utils", ".", "to_categorical", "(", "Y_test", ",", "nb_classes", ")", "\n", "\n", "from", "sklearn", ".", "metrics", "import", "f1_score", "\n", "f1_test", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'weighted'", ")", "\n", "print", "(", "'Test F1-weighted score is:'", ",", "f1_test", ")", "\n", "\n", "summary", ".", "append", "(", "f1_test", ")", "\n", "print", "(", "summary", ")", "\n", "\n", "now", "=", "datetime", ".", "now", "(", ")", "\n", "date_time", "=", "now", ".", "strftime", "(", "\"%m/%d/%Y, %H:%M:%S\"", ")", "\n", "summary", ".", "append", "(", "date_time", ")", "\n", "with", "open", "(", "'./{}_{}cls_{}_training_history/bcnn_training_history.txt'", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ")", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t", "for", "item", "in", "summary", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n", "", "", "fold", "+=", "1", "", "", "", ""]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_hybrid_model.outer_product": [[20, 25], ["keras.backend.batch_dot", "x[].get_shape().as_list", "x[].get_shape"], "function", ["None"], ["def", "outer_product", "(", "x", ")", ":", "\n", "\t", "\"\"\"\n\tx list of 2 tensors, assuming each of which has shape = (size_minibatch, total_pixels, size_filter)\n\t\"\"\"", "\n", "return", "keras", ".", "backend", ".", "batch_dot", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "axes", "=", "[", "1", ",", "1", "]", ")", "/", "x", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "#return tf.einsum('bom,bpm->bmop', x[0], x[1])", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_hybrid_model.load_cnn_model": [[28, 33], ["create_cnn_model", "create_cnn_model.load_weights"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_cnn_model.create_cnn_model"], ["", "def", "load_cnn_model", "(", "weights_path", ",", "X_train_shape", ",", "nb_classes", ")", ":", "\n", "\t", "from", ".", "create_cnn_model", "import", "create_cnn_model", "\n", "model", "=", "create_cnn_model", "(", "X_train_shape", ",", "nb_classes", ")", "\n", "model", ".", "load_weights", "(", "weights_path", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_hybrid_model.load_rnn_model": [[35, 40], ["create_rnn_model", "create_rnn_model.load_weights"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_rnn_model.create_rnn_model"], ["", "def", "load_rnn_model", "(", "weights_path", ",", "X_train_shape", ",", "nb_classes", ")", ":", "\n", "\t", "from", ".", "create_rnn_model", "import", "create_rnn_model", "\n", "model", "=", "create_rnn_model", "(", "X_train_shape", ",", "nb_classes", ")", "\n", "model", ".", "load_weights", "(", "weights_path", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_hybrid_model.create_hybrid_model": [[42, 76], ["create_hybrid_model.load_cnn_model", "create_hybrid_model.load_rnn_model", "keras.models.Model", "int", "int", "keras.layers.core.Reshape", "keras.layers.core.Reshape", "keras.layers.Lambda", "keras.layers.Lambda", "keras.layers.core.Flatten", "keras.layers.normalization.BatchNormalization", "keras.layers.core.Dropout", "keras.layers.core.Dense", "keras.layers.core.Dropout", "keras.layers.core.Dense", "keras.backend.permute_dimensions"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_hybrid_model.load_cnn_model", "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_brnn_model.load_rnn_model"], ["", "def", "create_hybrid_model", "(", "X_train_shape", ",", "fold", ",", "nb_classes", ",", "ds", ",", "pp", "=", "'specific'", ")", ":", "\n", "\t", "cnn_weights", "=", "'./{}_{}cls_{}_saved_models/stft_cnn_{}.hdf5'", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "cnn_model", "=", "load_cnn_model", "(", "cnn_weights", ",", "X_train_shape", ",", "nb_classes", ")", "\n", "rnn_weights", "=", "'./{}_{}cls_{}_saved_models/stft_rnn_{}.hdf5'", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "rnn_model", "=", "load_rnn_model", "(", "rnn_weights", ",", "X_train_shape", ",", "nb_classes", ")", "\n", "\n", "x_detector", "=", "cnn_model", ".", "layers", "[", "-", "8", "]", ".", "output", "\n", "shape_detector", "=", "cnn_model", ".", "layers", "[", "-", "8", "]", ".", "output_shape", "\n", "x_extractor", "=", "rnn_model", ".", "layers", "[", "-", "8", "]", ".", "output", "\n", "shape_extractor", "=", "rnn_model", ".", "layers", "[", "-", "8", "]", ".", "output_shape", "\n", "\n", "x_detector", "=", "Reshape", "(", "(", "shape_detector", "[", "1", "]", "*", "shape_detector", "[", "2", "]", ",", "shape_detector", "[", "3", "]", ")", ")", "(", "x_detector", ")", "\n", "x_extractor", "=", "Reshape", "(", "(", "shape_extractor", "[", "1", "]", ",", "shape_extractor", "[", "2", "]", "*", "shape_extractor", "[", "3", "]", ")", ")", "(", "x_extractor", ")", "\n", "x_extractor", "=", "Lambda", "(", "lambda", "x", ":", "keras", ".", "backend", ".", "permute_dimensions", "(", "x", ",", "(", "0", ",", "2", ",", "1", ")", ")", ")", "(", "x_extractor", ")", "\n", "\n", "x", "=", "keras", ".", "layers", ".", "Lambda", "(", "outer_product", ")", "(", "[", "x_detector", ",", "x_extractor", "]", ")", "\n", "x", "=", "Flatten", "(", ")", "(", "x", ")", "\n", "##", "\n", "x", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "x", ")", "\n", "##", "\n", "x", "=", "Dropout", "(", "0.5", ")", "(", "x", ")", "\n", "x", "=", "Dense", "(", "256", ",", "activation", "=", "'sigmoid'", ")", "(", "x", ")", "\n", "x", "=", "Dropout", "(", "0.5", ")", "(", "x", ")", "\n", "preds", "=", "Dense", "(", "nb_classes", ",", "activation", "=", "'softmax'", ")", "(", "x", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "cnn_model", ".", "input", ",", "rnn_model", ".", "input", "]", ",", "outputs", "=", "preds", ")", "\n", "\n", "# make sure none of the CNN or RNN layers are trained, only final FC layer is trained", "\n", "for", "layer", "in", "cnn_model", ".", "layers", ":", "\n", "\t\t", "layer", ".", "trainable", "=", "False", "\n", "\n", "", "for", "layer", "in", "rnn_model", ".", "layers", ":", "\n", "\t\t", "layer", ".", "trainable", "=", "False", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_hybrid_model.train_hybrid_model": [[77, 124], ["create_hybrid_model.create_hybrid_model", "create_hybrid_model.summary", "keras.optimizers.Adam", "create_hybrid_model.compile", "range", "np_utils.to_categorical.astype", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "print", "print", "utils.customCallbacks.MyEarlyStopping", "utils.customCallbacks.MyModelCheckpoint", "create_hybrid_model.fit", "create_hybrid_model.load_weights", "create_hybrid_model.predict", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "f1_score", "print", "summary.append", "print", "datetime.datetime.now", "datetime.now.strftime", "summary.append", "int", "numpy.argmax", "open", "f.write", "numpy.sum", "int"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_hybrid_model.create_hybrid_model"], ["", "def", "train_hybrid_model", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "pp", ")", ":", "\n", "\t", "summary", "=", "[", "]", "\n", "fold", "=", "1", "\n", "\n", "for", "X_train", ",", "Y_train", ",", "X_val", ",", "Y_val", ",", "X_test", ",", "Y_test", "in", "n_folds", ":", "\n", "\t\t", "hybrid_model", "=", "create_hybrid_model", "(", "X_train", ".", "shape", ",", "fold", ",", "nb_classes", ",", "ds", ",", "pp", ")", "\n", "hybrid_model", ".", "summary", "(", ")", "\n", "adam", "=", "Adam", "(", "lr", "=", "1e-4", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "hybrid_model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "class_weights", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "nb_classes", ")", ":", "\n", "\t\t\t", "class_weights", "[", "i", "]", "=", "X_train", ".", "shape", "[", "0", "]", "/", "(", "np", ".", "sum", "(", "Y_train", "==", "i", ")", "+", "1e-6", ")", "\n", "\n", "", "Y_train", "=", "Y_train", ".", "astype", "(", "'uint8'", ")", "\n", "Y_train", "=", "np_utils", ".", "to_categorical", "(", "Y_train", ",", "nb_classes", ")", "\n", "Y_val", "=", "np_utils", ".", "to_categorical", "(", "Y_val", ",", "nb_classes", ")", "\n", "print", "(", "'Shape: x_train, y_train, X_val, y_val, X_test, y_test'", ")", "\n", "print", "(", "X_train", ".", "shape", ",", "Y_train", ".", "shape", ",", "X_val", ".", "shape", ",", "Y_val", ".", "shape", ",", "X_test", ".", "shape", ",", "Y_test", ".", "shape", ")", "\n", "\n", "filename", "=", "\"./{}_{}cls_{}_saved_models/stft_hybrid_{}.hdf5\"", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "\n", "early_stop", "=", "MyEarlyStopping", "(", "patience", "=", "10", ",", "verbose", "=", "1", ")", "\n", "checkpointer", "=", "MyModelCheckpoint", "(", "filename", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ")", "\n", "\n", "hybrid_model", ".", "fit", "(", "[", "X_train", ",", "X_train", "]", ",", "Y_train", ",", "batch_size", "=", "32", ",", "epochs", "=", "200", ",", "class_weight", "=", "class_weights", ",", "\n", "validation_data", "=", "(", "[", "X_val", ",", "X_val", "]", ",", "Y_val", ")", ",", "callbacks", "=", "[", "early_stop", ",", "checkpointer", "]", ")", "\n", "\n", "hybrid_model", ".", "load_weights", "(", "filename", ")", "\n", "predictions", "=", "hybrid_model", ".", "predict", "(", "[", "X_test", ",", "X_test", "]", ",", "verbose", "=", "1", ")", "\n", "y_pred", "=", "np_utils", ".", "to_categorical", "(", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", ",", "nb_classes", ")", "\n", "y_true", "=", "np_utils", ".", "to_categorical", "(", "Y_test", ",", "nb_classes", ")", "\n", "\n", "from", "sklearn", ".", "metrics", "import", "f1_score", "\n", "f1_test", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'weighted'", ")", "\n", "print", "(", "'Test F1-weighted score is:'", ",", "f1_test", ")", "\n", "\n", "summary", ".", "append", "(", "f1_test", ")", "\n", "print", "(", "summary", ")", "\n", "\n", "now", "=", "datetime", ".", "now", "(", ")", "\n", "date_time", "=", "now", ".", "strftime", "(", "\"%m/%d/%Y, %H:%M:%S\"", ")", "\n", "summary", ".", "append", "(", "date_time", ")", "\n", "with", "open", "(", "'./{}_{}cls_{}_training_history/hybrid_training_history.txt'", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ")", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t", "for", "item", "in", "summary", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n", "", "", "fold", "+=", "1", "", "", "", ""]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_brnn_model.outer_product": [[20, 25], ["keras.backend.batch_dot", "x[].get_shape().as_list", "x[].get_shape"], "function", ["None"], ["def", "outer_product", "(", "x", ")", ":", "\n", "\t", "\"\"\"\n\tx list of 2 tensors, assuming each of which has shape = (size_minibatch, total_pixels, size_filter)\n\t\"\"\"", "\n", "return", "keras", ".", "backend", ".", "batch_dot", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "axes", "=", "[", "1", ",", "1", "]", ")", "/", "x", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "#return tf.einsum('bom,bpm->bmop', x[0], x[1])", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_brnn_model.load_rnn_model": [[28, 33], ["create_rnn_model", "create_rnn_model.load_weights"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_rnn_model.create_rnn_model"], ["", "def", "load_rnn_model", "(", "weights_path", ",", "X_train_shape", ",", "nb_classes", ")", ":", "\n", "\t", "from", ".", "create_rnn_model", "import", "create_rnn_model", "\n", "model", "=", "create_rnn_model", "(", "X_train_shape", ",", "nb_classes", ")", "\n", "model", ".", "load_weights", "(", "weights_path", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_brnn_model.create_brnn_model": [[35, 61], ["create_brnn_model.load_rnn_model", "keras.models.Model", "int", "keras.layers.core.Reshape", "keras.layers.Lambda", "keras.layers.Lambda", "keras.layers.core.Flatten", "keras.layers.normalization.BatchNormalization", "keras.layers.core.Dropout", "keras.layers.core.Dense", "keras.layers.core.Dropout", "keras.layers.core.Dense", "keras.backend.permute_dimensions"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_brnn_model.load_rnn_model"], ["", "def", "create_brnn_model", "(", "X_train_shape", ",", "fold", ",", "nb_classes", ",", "ds", ",", "pp", "=", "'specific'", ")", ":", "\n", "\t", "rnn_weights", "=", "'./{}_{}cls_{}_saved_models/stft_rnn_{}.hdf5'", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "rnn_model", "=", "load_rnn_model", "(", "rnn_weights", ",", "X_train_shape", ",", "nb_classes", ")", "\n", "\n", "x_detector", "=", "rnn_model", ".", "layers", "[", "-", "8", "]", ".", "output", "\n", "shape_detector", "=", "rnn_model", ".", "layers", "[", "-", "8", "]", ".", "output_shape", "\n", "x_detector", "=", "Reshape", "(", "(", "shape_detector", "[", "1", "]", ",", "shape_detector", "[", "2", "]", "*", "shape_detector", "[", "3", "]", ")", ")", "(", "x_detector", ")", "\n", "x_detector", "=", "Lambda", "(", "lambda", "x", ":", "keras", ".", "backend", ".", "permute_dimensions", "(", "x", ",", "(", "0", ",", "2", ",", "1", ")", ")", ")", "(", "x_detector", ")", "\n", "x_extractor", "=", "x_detector", "\n", "\n", "x", "=", "keras", ".", "layers", ".", "Lambda", "(", "outer_product", ")", "(", "[", "x_detector", ",", "x_extractor", "]", ")", "\n", "x", "=", "Flatten", "(", ")", "(", "x", ")", "\n", "##", "\n", "x", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "x", ")", "\n", "##", "\n", "x", "=", "Dropout", "(", "0.5", ")", "(", "x", ")", "\n", "x", "=", "Dense", "(", "256", ",", "activation", "=", "'sigmoid'", ")", "(", "x", ")", "\n", "x", "=", "Dropout", "(", "0.5", ")", "(", "x", ")", "\n", "preds", "=", "Dense", "(", "nb_classes", ",", "activation", "=", "'softmax'", ")", "(", "x", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "rnn_model", ".", "input", ",", "outputs", "=", "preds", ")", "\n", "\n", "# make sure none of the CNN or RNN layers are trained, only final FC layer is trained", "\n", "for", "layer", "in", "rnn_model", ".", "layers", ":", "\n", "\t\t", "layer", ".", "trainable", "=", "False", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_brnn_model.train_brnn_model": [[62, 109], ["create_brnn_model.create_brnn_model", "create_brnn_model.summary", "keras.optimizers.Adam", "create_brnn_model.compile", "range", "np_utils.to_categorical.astype", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "print", "print", "utils.customCallbacks.MyEarlyStopping", "utils.customCallbacks.MyModelCheckpoint", "create_brnn_model.fit", "create_brnn_model.load_weights", "create_brnn_model.predict", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "f1_score", "print", "summary.append", "print", "datetime.datetime.now", "datetime.now.strftime", "summary.append", "int", "numpy.argmax", "open", "f.write", "numpy.sum", "int"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_brnn_model.create_brnn_model"], ["", "def", "train_brnn_model", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "pp", ")", ":", "\n", "\t", "summary", "=", "[", "]", "\n", "fold", "=", "1", "\n", "\n", "for", "X_train", ",", "Y_train", ",", "X_val", ",", "Y_val", ",", "X_test", ",", "Y_test", "in", "n_folds", ":", "\n", "\t\t", "brnn_model", "=", "create_brnn_model", "(", "X_train", ".", "shape", ",", "fold", ",", "nb_classes", ",", "ds", ",", "pp", ")", "\n", "brnn_model", ".", "summary", "(", ")", "\n", "adam", "=", "Adam", "(", "lr", "=", "1e-4", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "brnn_model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "class_weights", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "nb_classes", ")", ":", "\n", "\t\t\t", "class_weights", "[", "i", "]", "=", "X_train", ".", "shape", "[", "0", "]", "/", "(", "np", ".", "sum", "(", "Y_train", "==", "i", ")", "+", "1e-6", ")", "\n", "\n", "", "Y_train", "=", "Y_train", ".", "astype", "(", "'uint8'", ")", "\n", "Y_train", "=", "np_utils", ".", "to_categorical", "(", "Y_train", ",", "nb_classes", ")", "\n", "Y_val", "=", "np_utils", ".", "to_categorical", "(", "Y_val", ",", "nb_classes", ")", "\n", "print", "(", "'Shape: x_train, y_train, X_val, y_val, X_test, y_test'", ")", "\n", "print", "(", "X_train", ".", "shape", ",", "Y_train", ".", "shape", ",", "X_val", ".", "shape", ",", "Y_val", ".", "shape", ",", "X_test", ".", "shape", ",", "Y_test", ".", "shape", ")", "\n", "\n", "filename", "=", "\"./{}_{}cls_{}_saved_models/stft_brnn_{}.hdf5\"", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "\n", "early_stop", "=", "MyEarlyStopping", "(", "patience", "=", "10", ",", "verbose", "=", "1", ")", "\n", "checkpointer", "=", "MyModelCheckpoint", "(", "filename", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ")", "\n", "\n", "brnn_model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "32", ",", "epochs", "=", "200", ",", "class_weight", "=", "class_weights", ",", "\n", "validation_data", "=", "(", "X_val", ",", "Y_val", ")", ",", "callbacks", "=", "[", "early_stop", ",", "checkpointer", "]", ")", "\n", "\n", "brnn_model", ".", "load_weights", "(", "filename", ")", "\n", "predictions", "=", "brnn_model", ".", "predict", "(", "X_test", ",", "verbose", "=", "1", ")", "\n", "y_pred", "=", "np_utils", ".", "to_categorical", "(", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", ",", "nb_classes", ")", "\n", "y_true", "=", "np_utils", ".", "to_categorical", "(", "Y_test", ",", "nb_classes", ")", "\n", "\n", "from", "sklearn", ".", "metrics", "import", "f1_score", "\n", "f1_test", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'weighted'", ")", "\n", "print", "(", "'Test F1-weighted score is:'", ",", "f1_test", ")", "\n", "\n", "summary", ".", "append", "(", "f1_test", ")", "\n", "print", "(", "summary", ")", "\n", "\n", "now", "=", "datetime", ".", "now", "(", ")", "\n", "date_time", "=", "now", ".", "strftime", "(", "\"%m/%d/%Y, %H:%M:%S\"", ")", "\n", "summary", ".", "append", "(", "date_time", ")", "\n", "with", "open", "(", "'./{}_{}cls_{}_training_history/brnn_training_history.txt'", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ")", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t", "for", "item", "in", "summary", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n", "", "", "fold", "+=", "1", "", "", "", ""]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_cnn_model.create_cnn_model": [[19, 68], ["keras.models.Input", "keras.models.Model", "keras.layers.normalization.BatchNormalization", "keras.layers.Lambda", "keras.layers.convolutional.Convolution3D", "keras.layers.Lambda", "keras.layers.core.Activation", "keras.layers.convolutional.MaxPooling2D", "keras.layers.normalization.BatchNormalization", "keras.layers.convolutional.Convolution2D", "keras.layers.core.Activation", "keras.layers.convolutional.MaxPooling2D", "keras.layers.normalization.BatchNormalization", "keras.layers.convolutional.Convolution2D", "keras.layers.core.Activation", "keras.layers.core.Flatten", "keras.layers.core.Dropout", "keras.layers.core.Dense", "keras.layers.core.Dropout", "keras.layers.core.Dense", "keras.layers.Lambda", "keras.layers.core.Activation", "keras.backend.expand_dims", "keras.backend.squeeze"], "function", ["None"], ["def", "create_cnn_model", "(", "X_train_shape", ",", "nb_classes", ")", ":", "\n", "\n", "\t", "inputs", "=", "Input", "(", "shape", "=", "X_train_shape", "[", "1", ":", "]", ")", "\n", "\n", "normal1", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "inputs", ")", "\n", "reshape1", "=", "Lambda", "(", "lambda", "x", ":", "keras", ".", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "-", "1", ")", ")", "(", "normal1", ")", "\n", "conv1", "=", "Convolution3D", "(", "\n", "32", ",", "(", "3", ",", "3", ",", "X_train_shape", "[", "-", "1", "]", ")", ",", "data_format", "=", "'channels_last'", ",", "\n", "padding", "=", "'valid'", ",", "strides", "=", "(", "1", ",", "1", ",", "1", ")", ")", "(", "reshape1", ")", "\n", "\n", "reshape2", "=", "Lambda", "(", "lambda", "x", ":", "keras", ".", "backend", ".", "squeeze", "(", "x", ",", "axis", "=", "-", "2", ")", ")", "(", "conv1", ")", "\n", "\n", "# conv1 = Convolution2D(", "\n", "# \t32, (3 ,3), data_format = 'channels_last',", "\n", "# \tpadding='valid', strides=(1,1),", "\n", "# \tname='conv1')(normal1)", "\n", "relu1", "=", "Activation", "(", "'relu'", ")", "(", "reshape2", ")", "\n", "pool1", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "1", ")", ",", "data_format", "=", "'channels_last'", ")", "(", "relu1", ")", "\n", "\n", "normal2", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "pool1", ")", "\n", "\n", "conv2", "=", "Convolution2D", "(", "\n", "64", ",", "(", "3", ",", "3", ")", ",", "data_format", "=", "'channels_last'", ",", "\n", "padding", "=", "'valid'", ",", "strides", "=", "(", "1", ",", "1", ")", ")", "(", "normal2", ")", "\n", "relu2", "=", "Activation", "(", "'relu'", ")", "(", "conv2", ")", "\n", "pool2", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "1", ")", ",", "data_format", "=", "'channels_last'", ")", "(", "relu2", ")", "\n", "\n", "normal3", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "pool2", ")", "\n", "\n", "\n", "conv3", "=", "Convolution2D", "(", "\n", "64", ",", "(", "3", ",", "3", ")", ",", "data_format", "=", "'channels_last'", ",", "\n", "padding", "=", "'valid'", ",", "strides", "=", "(", "1", ",", "1", ")", ")", "(", "normal3", ")", "\n", "relu3", "=", "Activation", "(", "'relu'", ")", "(", "conv3", ")", "\n", "# pool3 = MaxPooling2D(pool_size=(2, 1), data_format = 'channels_last')(relu3)", "\n", "\n", "flat", "=", "Flatten", "(", ")", "(", "relu3", ")", "\n", "drop1", "=", "Dropout", "(", "0.5", ")", "(", "flat", ")", "\n", "dens1", "=", "Dense", "(", "256", ",", "activation", "=", "'sigmoid'", ")", "(", "drop1", ")", "\n", "drop2", "=", "Dropout", "(", "0.5", ")", "(", "dens1", ")", "\n", "dens2", "=", "Dense", "(", "nb_classes", ")", "(", "drop2", ")", "\n", "# option to include temperature in softmax", "\n", "\n", "temp", "=", "1.0", "\n", "temperature", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "temp", ")", "(", "dens2", ")", "\n", "last", "=", "Activation", "(", "'softmax'", ")", "(", "temperature", ")", "\n", "\n", "model", "=", "Model", "(", "input", "=", "inputs", ",", "output", "=", "last", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_cnn_model.train_cnn_model": [[69, 116], ["create_cnn_model.create_cnn_model", "create_cnn_model.summary", "keras.optimizers.Adam", "create_cnn_model.compile", "range", "np_utils.to_categorical.astype", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "print", "print", "utils.customCallbacks.MyEarlyStopping", "utils.customCallbacks.MyModelCheckpoint", "create_cnn_model.fit", "create_cnn_model.load_weights", "create_cnn_model.predict", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "f1_score", "print", "summary.append", "print", "datetime.datetime.now", "datetime.now.strftime", "summary.append", "int", "numpy.argmax", "open", "f.write", "numpy.sum", "int"], "function", ["home.repos.pwc.inspect_result.NeuroSyd_Epileptic-Seizure-Classification.models.create_cnn_model.create_cnn_model"], ["", "def", "train_cnn_model", "(", "n_folds", ",", "nb_classes", ",", "ds", ",", "pp", ")", ":", "\n", "\t", "summary", "=", "[", "]", "\n", "fold", "=", "1", "\n", "\n", "for", "X_train", ",", "Y_train", ",", "X_val", ",", "Y_val", ",", "X_test", ",", "Y_test", "in", "n_folds", ":", "\n", "\t\t", "cnn_model", "=", "create_cnn_model", "(", "X_train", ".", "shape", ",", "nb_classes", ")", "\n", "cnn_model", ".", "summary", "(", ")", "\n", "adam", "=", "Adam", "(", "lr", "=", "1e-4", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "cnn_model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "class_weights", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "nb_classes", ")", ":", "\n", "\t\t\t", "class_weights", "[", "i", "]", "=", "X_train", ".", "shape", "[", "0", "]", "/", "(", "np", ".", "sum", "(", "Y_train", "==", "i", ")", "+", "1e-6", ")", "\n", "\n", "", "Y_train", "=", "Y_train", ".", "astype", "(", "'uint8'", ")", "\n", "Y_train", "=", "np_utils", ".", "to_categorical", "(", "Y_train", ",", "nb_classes", ")", "\n", "Y_val", "=", "np_utils", ".", "to_categorical", "(", "Y_val", ",", "nb_classes", ")", "\n", "print", "(", "'Shape: x_train, y_train, X_val, y_val, X_test, y_test'", ")", "\n", "print", "(", "X_train", ".", "shape", ",", "Y_train", ".", "shape", ",", "X_val", ".", "shape", ",", "Y_val", ".", "shape", ",", "X_test", ".", "shape", ",", "Y_test", ".", "shape", ")", "\n", "\n", "filename", "=", "\"./{}_{}cls_{}_saved_models/stft_cnn_{}.hdf5\"", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ",", "fold", ")", "\n", "\n", "early_stop", "=", "MyEarlyStopping", "(", "patience", "=", "10", ",", "verbose", "=", "1", ")", "\n", "checkpointer", "=", "MyModelCheckpoint", "(", "filename", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ")", "\n", "\n", "cnn_model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "32", ",", "epochs", "=", "200", ",", "class_weight", "=", "class_weights", ",", "\n", "validation_data", "=", "(", "X_val", ",", "Y_val", ")", ",", "callbacks", "=", "[", "early_stop", ",", "checkpointer", "]", ")", "\n", "\n", "cnn_model", ".", "load_weights", "(", "filename", ")", "\n", "predictions", "=", "cnn_model", ".", "predict", "(", "X_test", ",", "verbose", "=", "1", ")", "\n", "y_pred", "=", "np_utils", ".", "to_categorical", "(", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", ",", "nb_classes", ")", "\n", "y_true", "=", "np_utils", ".", "to_categorical", "(", "Y_test", ",", "nb_classes", ")", "\n", "\n", "from", "sklearn", ".", "metrics", "import", "f1_score", "\n", "f1_test", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'weighted'", ")", "\n", "print", "(", "'Test F1-weighted score is:'", ",", "f1_test", ")", "\n", "\n", "summary", ".", "append", "(", "f1_test", ")", "\n", "print", "(", "summary", ")", "\n", "\n", "now", "=", "datetime", ".", "now", "(", ")", "\n", "date_time", "=", "now", ".", "strftime", "(", "\"%m/%d/%Y, %H:%M:%S\"", ")", "\n", "summary", ".", "append", "(", "date_time", ")", "\n", "with", "open", "(", "'./{}_{}cls_{}_training_history/cnn_training_history.txt'", ".", "format", "(", "ds", ",", "int", "(", "nb_classes", ")", ",", "pp", ")", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t", "for", "item", "in", "summary", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n", "", "", "fold", "+=", "1", "", "", "", ""]]}