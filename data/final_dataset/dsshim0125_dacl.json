{"home.repos.pwc.inspect_result.dsshim0125_dacl.utils.bilinear_sampler.bilinear_sampler_1d_h": [[19, 95], ["float", "float", "bilinear_sampler.bilinear_sampler_1d_h._transform"], "function", ["None"], ["def", "bilinear_sampler_1d_h", "(", "input_images", ",", "x_offset", ",", "wrap_mode", "=", "'border'", ",", "name", "=", "'bilinear_sampler'", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_repeat", "(", "x", ",", "n_repeats", ")", ":", "\n", "\n", "        ", "rep", "=", "x", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "n_repeats", ")", "\n", "return", "rep", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "def", "_interpolate", "(", "im", ",", "x", ",", "y", ")", ":", "\n", "\n", "# handle both texture border types", "\n", "        ", "_edge_size", "=", "0", "\n", "if", "_wrap_mode", "==", "'border'", ":", "\n", "            ", "_edge_size", "=", "1", "\n", "pad", "=", "torch", ".", "nn", ".", "ConstantPad2d", "(", "1", ",", "0", ")", "\n", "im", "=", "pad", "(", "im", ")", "\n", "x", "=", "x", "+", "_edge_size", "\n", "y", "=", "y", "+", "_edge_size", "\n", "", "elif", "_wrap_mode", "==", "'edge'", ":", "\n", "            ", "_edge_size", "=", "0", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0.0", ",", "_width_f", "-", "1", "+", "2", "*", "_edge_size", ")", "\n", "\n", "x0_f", "=", "torch", ".", "floor", "(", "x", ")", "\n", "y0_f", "=", "torch", ".", "floor", "(", "y", ")", "\n", "x1_f", "=", "x0_f", "+", "1", "\n", "\n", "x0", "=", "x0_f", ".", "int", "(", ")", "\n", "y0", "=", "y0_f", ".", "int", "(", ")", "\n", "x1", "=", "torch", ".", "clamp", "(", "x1_f", ",", "max", "=", "_width_f", "-", "1", "+", "2", "*", "_edge_size", ")", ".", "int", "(", ")", "\n", "\n", "dim2", "=", "(", "_width", "+", "2", "*", "_edge_size", ")", "\n", "dim1", "=", "(", "_width", "+", "2", "*", "_edge_size", ")", "*", "(", "_height", "+", "2", "*", "_edge_size", ")", "\n", "base", "=", "_repeat", "(", "torch", ".", "arange", "(", "_num_batch", ")", "*", "dim1", ",", "_height", "*", "_width", ")", ".", "int", "(", ")", ".", "cuda", "(", ")", "\n", "base_y0", "=", "base", "+", "y0", "*", "dim2", "\n", "idx_l", "=", "base_y0", "+", "x0", "\n", "idx_r", "=", "base_y0", "+", "x1", "\n", "\n", "im_per", "=", "im", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "im_flat", "=", "torch", ".", "reshape", "(", "im_per", ",", "(", "-", "1", ",", "_num_channels", ")", ")", "\n", "\n", "pix_l", "=", "im_flat", "[", "idx_l", ".", "long", "(", ")", ",", ":", "]", "\n", "pix_r", "=", "im_flat", "[", "idx_r", ".", "long", "(", ")", ",", ":", "]", "\n", "\n", "weight_l", "=", "(", "x1_f", "-", "x", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "weight_r", "=", "(", "x", "-", "x0_f", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "return", "weight_l", "*", "pix_l", "+", "weight_r", "*", "pix_r", "\n", "\n", "", "def", "_transform", "(", "input_images", ",", "x_offset", ")", ":", "\n", "\n", "        ", "x_t_flat", "=", "torch", ".", "arange", "(", "0", ",", "_width", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "_height", ",", "1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "x_t_flat", "=", "x_t_flat", ".", "view", "(", "1", ",", "_height", ",", "_width", ")", ".", "repeat", "(", "_num_batch", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "y_t_flat", "=", "torch", ".", "arange", "(", "0", ",", "_height", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "_width", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "y_t_flat", "=", "y_t_flat", ".", "view", "(", "1", ",", "_height", ",", "_width", ")", ".", "repeat", "(", "_num_batch", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "x_t_flat", "+=", "x_offset", ".", "view", "(", "-", "1", ")", "*", "_width_f", "\n", "\n", "input_transformed", "=", "_interpolate", "(", "input_images", ",", "x_t_flat", ",", "y_t_flat", ")", "\n", "\n", "output", "=", "torch", ".", "reshape", "(", "input_transformed", ",", "[", "_num_batch", ",", "_height", ",", "_width", ",", "_num_channels", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "return", "output", "\n", "\n", "", "_num_batch", "=", "input_images", ".", "shape", "[", "0", "]", "\n", "_height", "=", "input_images", ".", "shape", "[", "2", "]", "\n", "_width", "=", "input_images", ".", "shape", "[", "3", "]", "\n", "_num_channels", "=", "input_images", ".", "shape", "[", "1", "]", "\n", "\n", "_height_f", "=", "float", "(", "_height", ")", "\n", "_width_f", "=", "float", "(", "_width", ")", "\n", "\n", "_wrap_mode", "=", "wrap_mode", "\n", "\n", "output", "=", "_transform", "(", "input_images", ",", "x_offset", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.image_pool.ImagePool.__init__": [[6, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.image_pool.ImagePool.query": [[12, 33], ["torch.cat", "torch.unsqueeze", "image_pool.ImagePool.images.append", "torch.cat.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ".", "data", ",", "0", ")", "\n", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "# randint is inclusive", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "torch", ".", "cat", "(", "return_images", ",", "0", ")", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.read_calib_file": [[53, 71], ["set", "open", "f.readlines", "line.split", "value.strip.strip.strip", "set.issuperset", "numpy.array", "list", "map", "value.strip.strip.split"], "methods", ["None"], ["    ", "def", "read_calib_file", "(", "self", ",", "path", ")", ":", "\n", "# taken from https://github.com/hunse/kitti", "\n", "        ", "float_chars", "=", "set", "(", "\"0123456789.e+- \"", ")", "\n", "data", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "value", "=", "value", ".", "strip", "(", ")", "\n", "data", "[", "key", "]", "=", "value", "\n", "if", "float_chars", ".", "issuperset", "(", "value", ")", ":", "\n", "# try to cast to float array", "\n", "                    ", "try", ":", "\n", "                        ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "value", ".", "split", "(", "' '", ")", ")", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "# casting error: data[key] already eq. value, so pass", "\n", "                        ", "pass", "\n", "\n", "", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.get_fb": [[72, 89], ["dataset_util.KITTI.read_calib_file", "cam2cam[].reshape", "cam2cam[].reshape", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.read_calib_file"], ["", "def", "get_fb", "(", "self", ",", "calib_dir", ",", "cam", "=", "2", ")", ":", "\n", "        ", "cam2cam", "=", "self", ".", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_dir", ",", "'calib_cam_to_cam.txt'", ")", ")", "\n", "P2_rect", "=", "cam2cam", "[", "'P_rect_02'", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "P3_rect", "=", "cam2cam", "[", "'P_rect_03'", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "\n", "# cam 2 is left of camera 0  -6cm", "\n", "# cam 3 is to the right  +54cm", "\n", "b2", "=", "P2_rect", "[", "0", ",", "3", "]", "/", "-", "P2_rect", "[", "0", ",", "0", "]", "\n", "b3", "=", "P3_rect", "[", "0", ",", "3", "]", "/", "-", "P3_rect", "[", "0", ",", "0", "]", "\n", "baseline", "=", "b3", "-", "b2", "\n", "\n", "if", "cam", "==", "2", ":", "\n", "            ", "focal_length", "=", "P2_rect", "[", "0", ",", "0", "]", "\n", "", "elif", "cam", "==", "3", ":", "\n", "            ", "focal_length", "=", "P3_rect", "[", "0", ",", "0", "]", "\n", "\n", "", "return", "focal_length", "*", "baseline", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.load_velodyne_points": [[90, 95], ["numpy.fromfile().reshape", "numpy.fromfile"], "methods", ["None"], ["", "def", "load_velodyne_points", "(", "self", ",", "file_name", ")", ":", "\n", "# adapted from https://github.com/hunse/kitti", "\n", "        ", "points", "=", "np", ".", "fromfile", "(", "file_name", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "points", "[", ":", ",", "3", "]", "=", "1.0", "# homogeneous", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.lin_interp": [[96, 106], ["LinearNDInterpolator", "numpy.meshgrid", "LinearNDInterpolator.reshape", "numpy.arange", "numpy.arange", "numpy.vstack", "LinearNDInterpolator.", "I.flatten", "J.flatten"], "methods", ["None"], ["", "def", "lin_interp", "(", "self", ",", "shape", ",", "xyd", ")", ":", "\n", "# taken from https://github.com/hunse/kitti", "\n", "        ", "from", "scipy", ".", "interpolate", "import", "LinearNDInterpolator", "\n", "m", ",", "n", "=", "shape", "\n", "ij", ",", "d", "=", "xyd", "[", ":", ",", "1", ":", ":", "-", "1", "]", ",", "xyd", "[", ":", ",", "2", "]", "\n", "f", "=", "LinearNDInterpolator", "(", "ij", ",", "d", ",", "fill_value", "=", "0", ")", "\n", "J", ",", "I", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "n", ")", ",", "np", ".", "arange", "(", "m", ")", ")", "\n", "IJ", "=", "np", ".", "vstack", "(", "[", "I", ".", "flatten", "(", ")", ",", "J", ".", "flatten", "(", ")", "]", ")", ".", "T", "\n", "disparity", "=", "f", "(", "IJ", ")", ".", "reshape", "(", "shape", ")", "\n", "return", "disparity", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.sub2ind": [[107, 110], ["None"], "methods", ["None"], ["", "def", "sub2ind", "(", "self", ",", "matrixSize", ",", "rowSub", ",", "colSub", ")", ":", "\n", "        ", "m", ",", "n", "=", "matrixSize", "\n", "return", "rowSub", "*", "(", "n", "-", "1", ")", "+", "colSub", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.get_depth": [[111, 164], ["dataset_util.KITTI.read_calib_file", "dataset_util.KITTI.read_calib_file", "numpy.hstack", "numpy.vstack", "numpy.eye", "cam2cam[].reshape", "cam2cam[].reshape", "numpy.dot", "dataset_util.KITTI.load_velodyne_points", "numpy.zeros", "dataset_util.KITTI.sub2ind", "os.path.join", "os.path.join", "numpy.dot", "numpy.dot", "numpy.round", "numpy.round", "int", "int", "velo_pts_im[].min", "dataset_util.KITTI.lin_interp"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.read_calib_file", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.read_calib_file", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.load_velodyne_points", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.sub2ind", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.lin_interp"], ["", "def", "get_depth", "(", "self", ",", "calib_dir", ",", "velo_file_name", ",", "im_shape", ",", "cam", "=", "2", ",", "interp", "=", "False", ",", "vel_depth", "=", "False", ")", ":", "\n", "# load calibration files", "\n", "        ", "cam2cam", "=", "self", ".", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_dir", ",", "'calib_cam_to_cam.txt'", ")", ")", "\n", "velo2cam", "=", "self", ".", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_dir", ",", "'calib_velo_to_cam.txt'", ")", ")", "\n", "velo2cam", "=", "np", ".", "hstack", "(", "(", "velo2cam", "[", "'R'", "]", ".", "reshape", "(", "3", ",", "3", ")", ",", "velo2cam", "[", "'T'", "]", "[", "...", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "velo2cam", "=", "np", ".", "vstack", "(", "(", "velo2cam", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1.0", "]", ")", ")", ")", "\n", "\n", "# compute projection matrix velodyne->image plane", "\n", "R_cam2rect", "=", "np", ".", "eye", "(", "4", ")", "\n", "R_cam2rect", "[", ":", "3", ",", ":", "3", "]", "=", "cam2cam", "[", "'R_rect_00'", "]", ".", "reshape", "(", "3", ",", "3", ")", "\n", "P_rect", "=", "cam2cam", "[", "'P_rect_0'", "+", "str", "(", "cam", ")", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "P_velo2im", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "P_rect", ",", "R_cam2rect", ")", ",", "velo2cam", ")", "\n", "\n", "# load velodyne points and remove all behind image plane (approximation)", "\n", "# each row of the velodyne data is forward, left, up, reflectance", "\n", "velo", "=", "self", ".", "load_velodyne_points", "(", "velo_file_name", ")", "\n", "velo", "=", "velo", "[", "velo", "[", ":", ",", "0", "]", ">=", "0", ",", ":", "]", "\n", "\n", "# project the points to the camera", "\n", "velo_pts_im", "=", "np", ".", "dot", "(", "P_velo2im", ",", "velo", ".", "T", ")", ".", "T", "\n", "velo_pts_im", "[", ":", ",", ":", "2", "]", "=", "velo_pts_im", "[", ":", ",", ":", "2", "]", "/", "velo_pts_im", "[", ":", ",", "2", "]", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "if", "vel_depth", ":", "\n", "            ", "velo_pts_im", "[", ":", ",", "2", "]", "=", "velo", "[", ":", ",", "0", "]", "\n", "\n", "# check if in bounds", "\n", "# use minus 1 to get the exact same value as KITTI matlab code", "\n", "", "velo_pts_im", "[", ":", ",", "0", "]", "=", "np", ".", "round", "(", "velo_pts_im", "[", ":", ",", "0", "]", ")", "-", "1", "\n", "velo_pts_im", "[", ":", ",", "1", "]", "=", "np", ".", "round", "(", "velo_pts_im", "[", ":", ",", "1", "]", ")", "-", "1", "\n", "val_inds", "=", "(", "velo_pts_im", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "velo_pts_im", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "val_inds", "=", "val_inds", "&", "(", "velo_pts_im", "[", ":", ",", "0", "]", "<", "im_shape", "[", "1", "]", ")", "&", "(", "velo_pts_im", "[", ":", ",", "1", "]", "<", "im_shape", "[", "0", "]", ")", "\n", "velo_pts_im", "=", "velo_pts_im", "[", "val_inds", ",", ":", "]", "\n", "\n", "# project to image", "\n", "depth", "=", "np", ".", "zeros", "(", "(", "im_shape", ")", ")", "\n", "depth", "[", "velo_pts_im", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", ",", "velo_pts_im", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "]", "=", "velo_pts_im", "[", ":", ",", "2", "]", "\n", "\n", "# find the duplicate points and choose the closest depth", "\n", "inds", "=", "self", ".", "sub2ind", "(", "depth", ".", "shape", ",", "velo_pts_im", "[", ":", ",", "1", "]", ",", "velo_pts_im", "[", ":", ",", "0", "]", ")", "\n", "dupe_inds", "=", "[", "item", "for", "item", ",", "count", "in", "Counter", "(", "inds", ")", ".", "items", "(", ")", "if", "count", ">", "1", "]", "\n", "for", "dd", "in", "dupe_inds", ":", "\n", "            ", "pts", "=", "np", ".", "where", "(", "inds", "==", "dd", ")", "[", "0", "]", "\n", "x_loc", "=", "int", "(", "velo_pts_im", "[", "pts", "[", "0", "]", ",", "0", "]", ")", "\n", "y_loc", "=", "int", "(", "velo_pts_im", "[", "pts", "[", "0", "]", ",", "1", "]", ")", "\n", "depth", "[", "y_loc", ",", "x_loc", "]", "=", "velo_pts_im", "[", "pts", ",", "2", "]", ".", "min", "(", ")", "\n", "", "depth", "[", "depth", "<", "0", "]", "=", "0", "\n", "\n", "if", "interp", ":", "\n", "# interpolate the depth map to fill in holes", "\n", "            ", "depth_interp", "=", "lin_interp", "(", "im_shape", ",", "velo_pts_im", ")", "\n", "return", "depth", ",", "depth_interp", "\n", "", "else", ":", "\n", "            ", "return", "depth", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.scale_pyramid": [[9, 26], ["img.size", "range", "scaled_imgs.reverse", "torch.upsample", "scaled_imgs.append"], "function", ["None"], ["def", "scale_pyramid", "(", "img", ",", "num_scales", ")", ":", "\n", "    ", "scaled_imgs", "=", "[", "img", "]", "\n", "\n", "s", "=", "img", ".", "size", "(", ")", "\n", "\n", "h", "=", "s", "[", "2", "]", "\n", "w", "=", "s", "[", "3", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "num_scales", ")", ":", "\n", "        ", "ratio", "=", "2", "**", "i", "\n", "nh", "=", "h", "//", "ratio", "\n", "nw", "=", "w", "//", "ratio", "\n", "scaled_img", "=", "F", ".", "upsample", "(", "img", ",", "size", "=", "(", "nh", ",", "nw", ")", ",", "mode", "=", "'nearest'", ")", "\n", "scaled_imgs", ".", "append", "(", "scaled_img", ")", "\n", "\n", "", "scaled_imgs", ".", "reverse", "(", ")", "\n", "return", "scaled_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.compute_errors": [[27, 50], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "np.sqrt.mean", "np.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "function", ["None"], ["", "def", "compute_errors", "(", "ground_truth", ",", "predication", ")", ":", "\n", "\n", "# accuracy", "\n", "    ", "threshold", "=", "np", ".", "maximum", "(", "(", "ground_truth", "/", "predication", ")", ",", "(", "predication", "/", "ground_truth", ")", ")", "\n", "a1", "=", "(", "threshold", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "threshold", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "threshold", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "#MSE", "\n", "rmse", "=", "(", "ground_truth", "-", "predication", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "#MSE(log)", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "ground_truth", ")", "-", "np", ".", "log", "(", "predication", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "# Abs Relative difference", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "ground_truth", "-", "predication", ")", "/", "ground_truth", ")", "\n", "\n", "# Squared Relative difference", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "ground_truth", "-", "predication", ")", "**", "2", ")", "/", "ground_truth", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.SaveResults.__init__": [[74, 82], ["os.path.join", "util.mkdirs", "os.path.join", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "expr_name", ",", "'image'", ")", "\n", "mkdirs", "(", "self", ".", "img_dir", ")", "\n", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "expr_name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.SaveResults.save_current_results": [[83, 95], ["visuals.items", "os.path.join", "util.tensor2depth", "util.save_image", "util.tensor2im", "util.save_image"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.tensor2depth", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.save_image", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.tensor2im", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.save_image"], ["", "", "def", "save_current_results", "(", "self", ",", "visuals", ",", "epoch", ")", ":", "\n", "\n", "        ", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.png'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "if", "image", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "'depth'", "in", "label", ":", "\n", "                ", "depth_numpy", "=", "tensor2depth", "(", "image", ")", "\n", "save_image", "(", "depth_numpy", ",", "img_path", ",", "'I'", ")", "\n", "", "else", ":", "\n", "                ", "image_numpy", "=", "tensor2im", "(", "image", ")", "\n", "save_image", "(", "image_numpy", ",", "img_path", ",", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.SaveResults.print_current_losses": [[98, 107], ["losses.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "", "def", "print_current_losses", "(", "self", ",", "epoch", ",", "i", ",", "lr", ",", "losses", ",", "t", ",", "t_data", ")", ":", "\n", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, lr: %e, time: %.3f, data: %.3f) '", "%", "(", "epoch", ",", "i", ",", "lr", ",", "t", ",", "t_data", ")", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "message", "+=", "'%s: %.6f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.save_images": [[9, 19], ["visuals.items", "os.path.join", "util.tensor2im", "util.save_image"], "function", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.tensor2im", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.save_image"], ["def", "save_images", "(", "visuals", ",", "results_dir", ",", "ind", ")", ":", "\n", "\n", "    ", "for", "label", ",", "im_data", "in", "visuals", ".", "items", "(", ")", ":", "\n", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'%.3d_%s.png'", "%", "(", "ind", ",", "label", ")", ")", "\n", "if", "'depth'", "in", "label", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "image_numpy", "=", "tensor2im", "(", "im_data", ")", "\n", "save_image", "(", "image_numpy", ",", "img_path", ",", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.tensor2im": [[22, 33], ["isinstance", "image_tensor[].cpu().float().numpy", "np.tile.astype", "numpy.tile", "numpy.transpose", "image_tensor[].cpu().float", "image_tensor[].cpu"], "function", ["None"], ["", "", "", "def", "tensor2im", "(", "input_image", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "if", "isinstance", "(", "input_image", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "image_tensor", "=", "input_image", ".", "data", "\n", "", "else", ":", "\n", "        ", "return", "input_image", "\n", "", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "\n", "image_numpy", "=", "image_numpy", "/", "(", "2.0", "/", "255.0", ")", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.tensor2depth": [[34, 45], ["isinstance", "depth_tensor[].cpu().float().numpy", "depth_numpy.reshape.reshape", "depth_numpy.reshape.astype", "depth_tensor[].cpu().float", "depth_tensor[].cpu"], "function", ["None"], ["", "def", "tensor2depth", "(", "input_depth", ",", "imtype", "=", "np", ".", "int32", ")", ":", "\n", "    ", "if", "isinstance", "(", "input_depth", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "depth_tensor", "=", "input_depth", ".", "data", "\n", "", "else", ":", "\n", "        ", "return", "input_depth", "\n", "", "depth_numpy", "=", "depth_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "depth_numpy", "+=", "1.0", "\n", "depth_numpy", "/=", "2.0", "\n", "depth_numpy", "*=", "65535.0", "\n", "depth_numpy", "=", "depth_numpy", ".", "reshape", "(", "(", "depth_numpy", ".", "shape", "[", "1", "]", ",", "depth_numpy", ".", "shape", "[", "2", "]", ")", ")", "\n", "return", "depth_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.diagnose_network": [[46, 57], ["net.parameters", "print", "print", "torch.mean", "torch.abs"], "function", ["None"], ["", "def", "diagnose_network", "(", "net", ",", "name", "=", "'network'", ")", ":", "\n", "    ", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.save_image": [[59, 62], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["None"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ",", "imtype", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ",", "imtype", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.print_numpy": [[64, 72], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["", "def", "print_numpy", "(", "x", ",", "val", "=", "True", ",", "shp", "=", "False", ")", ":", "\n", "    ", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "shp", ":", "\n", "        ", "print", "(", "'shape,'", ",", "x", ".", "shape", ")", "\n", "", "if", "val", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "print", "(", "'mean = %3.3f, min = %3.3f, max = %3.3f, median = %3.3f, std=%3.3f'", "%", "(", "\n", "np", ".", "mean", "(", "x", ")", ",", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "median", "(", "x", ")", ",", "np", ".", "std", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.mkdirs": [[108, 114], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.mkdir", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.mkdir"], ["", "", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.mkdir": [[115, 118], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.style_model.STYLEModel.name": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'STYLEModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.style_model.STYLEModel.modify_commandline_options": [[16, 33], ["parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "        ", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "# cyclegan", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_Src'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_Tgt'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_identity'", ",", "type", "=", "float", ",", "default", "=", "30.0", ",", "\n", "help", "=", "'use identity mapping. Setting lambda_identity other than 0 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set lambda_identity = 0.1'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--freeze_bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'freeze the bn in mde'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_in'", ",", "action", "=", "'store_true'", ",", "help", "=", "'freeze the in in cyclegan'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.style_model.STYLEModel.initialize": [[34, 98], ["base_model.BaseModel.initialize", "networks.init_net", "networks.init_net", "networks.ResGenerator", "networks.ResGenerator", "networks.init_net", "networks.init_net", "utils.image_pool.ImagePool", "utils.image_pool.ImagePool", "networks.GANLoss().to", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "style_model.STYLEModel.optimizers.append", "style_model.STYLEModel.optimizers.append", "visual_names_src.append", "visual_names_tgt.append", "networks.Discriminator", "networks.Discriminator", "itertools.chain", "itertools.chain", "style_model.STYLEModel.netG_Depth_S.apply", "style_model.STYLEModel.netG_Depth_T.apply", "style_model.STYLEModel.netG_Src.apply", "style_model.STYLEModel.netG_Tgt.apply", "networks.GANLoss", "style_model.STYLEModel.netG_Src.parameters", "style_model.STYLEModel.netG_Tgt.parameters", "style_model.STYLEModel.netD_Src.parameters", "style_model.STYLEModel.netD_Tgt.parameters"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "\n", "            ", "self", ".", "loss_names", "=", "[", "'D_Src'", ",", "'G_Src'", ",", "'cycle_Src'", ",", "'idt_Src'", ",", "'D_Tgt'", ",", "'G_Tgt'", ",", "'cycle_Tgt'", ",", "'idt_Tgt'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "visual_names_src", "=", "[", "'src_img'", ",", "'fake_tgt'", "]", "\n", "visual_names_tgt", "=", "[", "'tgt_left_img'", ",", "'fake_src_left'", "]", "\n", "\n", "if", "self", ".", "opt", ".", "lambda_identity", ">", "0.0", ":", "\n", "                ", "visual_names_src", ".", "append", "(", "'idt_src_left'", ")", "\n", "visual_names_tgt", ".", "append", "(", "'idt_tgt'", ")", "\n", "\n", "", "self", ".", "visual_names", "=", "visual_names_src", "+", "visual_names_tgt", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'img'", ",", "'img_trans'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Src'", ",", "'G_Tgt'", ",", "'D_Src'", ",", "'D_Tgt'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Tgt'", "]", "\n", "\n", "\n", "", "self", ".", "netG_Src", "=", "networks", ".", "init_net", "(", "networks", ".", "ResGenerator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "netG_Tgt", "=", "networks", ".", "init_net", "(", "networks", ".", "ResGenerator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "\n", "self", ".", "netD_Src", "=", "networks", ".", "init_net", "(", "networks", ".", "Discriminator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "netD_Tgt", "=", "networks", ".", "init_net", "(", "networks", ".", "Discriminator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# define loss functions", "\n", "\n", "            ", "self", ".", "fake_src_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "fake_tgt_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionCycle", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionIdt", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "\n", "self", ".", "optimizer_G_trans", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_Src", ".", "parameters", "(", ")", ",", "\n", "self", ".", "netG_Tgt", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_trans", ",", "betas", "=", "(", "0.5", ",", "0.9", ")", ")", "\n", "\n", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netD_Src", ".", "parameters", "(", ")", ",", "\n", "self", ".", "netD_Tgt", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_trans", ",", "betas", "=", "(", "0.5", ",", "0.9", ")", ")", "\n", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G_trans", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "if", "opt", ".", "freeze_bn", ":", "\n", "                ", "self", ".", "netG_Depth_S", ".", "apply", "(", "networks", ".", "freeze_bn", ")", "\n", "self", ".", "netG_Depth_T", ".", "apply", "(", "networks", ".", "freeze_bn", ")", "\n", "", "if", "opt", ".", "freeze_in", ":", "\n", "                ", "self", ".", "netG_Src", ".", "apply", "(", "networks", ".", "freeze_in", ")", "\n", "self", ".", "netG_Tgt", ".", "apply", "(", "networks", ".", "freeze_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.style_model.STYLEModel.set_input": [[101, 110], ["[].to", "[].to", "[].to", "input[].to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "src_img", "=", "input", "[", "'src'", "]", "[", "'img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tgt_left_img", "=", "input", "[", "'tgt'", "]", "[", "'left_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tgt_right_img", "=", "input", "[", "'tgt'", "]", "[", "'right_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "num", "=", "self", ".", "src_img", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "img", "=", "input", "[", "'left_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.style_model.STYLEModel.forward": [[111, 118], ["style_model.STYLEModel.netG_Tgt"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "pass", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_trans", "=", "self", ".", "netG_Tgt", "(", "self", ".", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.style_model.STYLEModel.backward_D_basic": [[120, 132], ["netD", "style_model.STYLEModel.criterionGAN", "netD", "style_model.STYLEModel.criterionGAN", "loss_D.backward", "real.detach", "fake.detach"], "methods", ["None"], ["", "", "def", "backward_D_basic", "(", "self", ",", "netD", ",", "real", ",", "fake", ")", ":", "\n", "# Real", "\n", "        ", "pred_real", "=", "netD", "(", "real", ".", "detach", "(", ")", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "# Fake", "\n", "pred_fake", "=", "netD", "(", "fake", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "# Combined loss", "\n", "loss_D", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "# backward", "\n", "loss_D", ".", "backward", "(", ")", "\n", "return", "loss_D", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.style_model.STYLEModel.backward_D_Src": [[133, 136], ["style_model.STYLEModel.fake_tgt_pool.query", "style_model.STYLEModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_D_basic"], ["", "def", "backward_D_Src", "(", "self", ")", ":", "\n", "        ", "fake_tgt", "=", "self", ".", "fake_tgt_pool", ".", "query", "(", "self", ".", "fake_tgt", ")", "\n", "self", ".", "loss_D_Src", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_Src", ",", "self", ".", "tgt_left_img", ",", "fake_tgt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.style_model.STYLEModel.backward_D_Tgt": [[137, 140], ["style_model.STYLEModel.fake_src_pool.query", "style_model.STYLEModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_D_basic"], ["", "def", "backward_D_Tgt", "(", "self", ")", ":", "\n", "        ", "fake_src_left", "=", "self", ".", "fake_src_pool", ".", "query", "(", "self", ".", "fake_src_left", ")", "\n", "self", ".", "loss_D_Tgt", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_Tgt", ",", "self", ".", "src_img", ",", "fake_src_left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.style_model.STYLEModel.backward_G": [[141, 172], ["style_model.STYLEModel.netG_Src", "style_model.STYLEModel.netG_Tgt", "style_model.STYLEModel.netG_Tgt", "style_model.STYLEModel.criterionGAN", "style_model.STYLEModel.criterionCycle", "style_model.STYLEModel.loss.backward", "style_model.STYLEModel.netG_Tgt", "style_model.STYLEModel.netG_Src", "style_model.STYLEModel.netG_Src", "style_model.STYLEModel.criterionGAN", "style_model.STYLEModel.criterionCycle", "style_model.STYLEModel.loss_G.backward", "style_model.STYLEModel.netD_Src", "style_model.STYLEModel.netD_Tgt", "style_model.STYLEModel.criterionIdt", "style_model.STYLEModel.criterionIdt"], "methods", ["None"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "\n", "        ", "lambda_idt", "=", "self", ".", "opt", ".", "lambda_identity", "\n", "lambda_Src", "=", "self", ".", "opt", ".", "lambda_Src", "\n", "lambda_Tgt", "=", "self", ".", "opt", ".", "lambda_Tgt", "\n", "\n", "# =========================== synthetic ==========================", "\n", "self", ".", "fake_tgt", "=", "self", ".", "netG_Src", "(", "self", ".", "src_img", ")", "\n", "self", ".", "idt_tgt", "=", "self", ".", "netG_Tgt", "(", "self", ".", "src_img", ")", "\n", "self", ".", "rec_src", "=", "self", ".", "netG_Tgt", "(", "self", ".", "fake_tgt", ")", "\n", "\n", "self", ".", "loss_G_Src", "=", "self", ".", "criterionGAN", "(", "self", ".", "netD_Src", "(", "self", ".", "fake_tgt", ")", ",", "True", ")", "\n", "self", ".", "loss_cycle_Src", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_src", ",", "self", ".", "src_img", ")", "\n", "self", ".", "loss_idt_Tgt", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_tgt", ",", "self", ".", "src_img", ")", "*", "lambda_Src", "*", "lambda_idt", "\n", "\n", "\n", "self", ".", "loss", "=", "self", ".", "loss_G_Src", "+", "self", ".", "loss_cycle_Src", "+", "self", ".", "loss_idt_Tgt", "\n", "self", ".", "loss", ".", "backward", "(", ")", "\n", "\n", "# ============================= real =============================", "\n", "self", ".", "fake_src_left", "=", "self", ".", "netG_Tgt", "(", "self", ".", "tgt_left_img", ")", "\n", "self", ".", "idt_src_left", "=", "self", ".", "netG_Src", "(", "self", ".", "tgt_left_img", ")", "\n", "self", ".", "rec_tgt_left", "=", "self", ".", "netG_Src", "(", "self", ".", "fake_src_left", ")", "\n", "\n", "self", ".", "loss_G_Tgt", "=", "self", ".", "criterionGAN", "(", "self", ".", "netD_Tgt", "(", "self", ".", "fake_src_left", ")", ",", "True", ")", "\n", "self", ".", "loss_cycle_Tgt", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_tgt_left", ",", "self", ".", "tgt_left_img", ")", "\n", "self", ".", "loss_idt_Src", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_src_left", ",", "self", ".", "tgt_left_img", ")", "*", "lambda_Tgt", "*", "lambda_idt", "\n", "\n", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_Tgt", "+", "self", ".", "loss_cycle_Tgt", "+", "self", ".", "loss_idt_Src", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.style_model.STYLEModel.optimize_parameters": [[173, 186], ["style_model.STYLEModel.forward", "style_model.STYLEModel.set_requires_grad", "style_model.STYLEModel.optimizer_G_trans.zero_grad", "style_model.STYLEModel.backward_G", "style_model.STYLEModel.optimizer_G_trans.step", "style_model.STYLEModel.set_requires_grad", "style_model.STYLEModel.optimizer_D.zero_grad", "style_model.STYLEModel.backward_D_Src", "style_model.STYLEModel.backward_D_Tgt", "style_model.STYLEModel.optimizer_D.step"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.backward_G", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_D_Src", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_D_Tgt"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_Src", ",", "self", ".", "netD_Tgt", "]", ",", "False", ")", "\n", "self", ".", "optimizer_G_trans", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G_trans", ".", "step", "(", ")", "\n", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_Src", ",", "self", ".", "netD_Tgt", "]", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D_Src", "(", ")", "\n", "self", ".", "backward_D_Tgt", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.BerHuLoss.__init__": [[143, 145], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BerHuLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.BerHuLoss.forward": [[146, 156], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "numpy.prod().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.prod", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "input.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "x", "=", "input", "-", "target", "\n", "abs_x", "=", "torch", ".", "abs", "(", "x", ")", "\n", "c", "=", "torch", ".", "max", "(", "abs_x", ")", ".", "item", "(", ")", "/", "5", "\n", "mask", "=", "(", "abs_x", "<=", "c", ")", ".", "float", "(", ")", "\n", "l2_losses", "=", "(", "x", "**", "2", "+", "c", "**", "2", ")", "/", "(", "2", "*", "c", ")", "\n", "losses", "=", "mask", "*", "abs_x", "+", "(", "1", "-", "mask", ")", "*", "l2_losses", "\n", "count", "=", "np", ".", "prod", "(", "input", ".", "size", "(", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "item", "(", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "losses", ")", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.SmoothLoss.__init__": [[158, 160], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SmoothLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.SmoothLoss.forward": [[161, 179], ["networks.gradient_x", "networks.gradient_y", "networks.gradient_x", "networks.gradient_y", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.gradient_x", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.gradient_y", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.gradient_x", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.gradient_y"], ["", "def", "forward", "(", "self", ",", "depth", ",", "image", ")", ":", "\n", "        ", "depth_grad_x", "=", "gradient_x", "(", "depth", ")", "\n", "depth_grad_y", "=", "gradient_y", "(", "depth", ")", "\n", "image_grad_x", "=", "gradient_x", "(", "image", ")", "\n", "image_grad_y", "=", "gradient_y", "(", "image", ")", "\n", "\n", "weights_x", "=", "torch", ".", "exp", "(", "-", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "image_grad_x", ")", ",", "1", ",", "True", ")", ")", "\n", "weights_y", "=", "torch", ".", "exp", "(", "-", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "image_grad_y", ")", ",", "1", ",", "True", ")", ")", "\n", "smoothness_x", "=", "depth_grad_x", "*", "weights_x", "\n", "smoothness_y", "=", "depth_grad_y", "*", "weights_y", "\n", "\n", "loss_x", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "smoothness_x", ")", ")", "\n", "loss_y", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "smoothness_y", ")", ")", "\n", "\n", "\n", "loss", "=", "loss_x", "+", "loss_y", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.ReconLoss.__init__": [[181, 184], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.85", ")", ":", "\n", "        ", "super", "(", "ReconLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.ReconLoss.forward": [[185, 213], ["numpy.array", "range", "bilinear_sampler_1d_h", "networks.ssim", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.bilinear_sampler.bilinear_sampler_1d_h", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.ssim"], ["", "def", "forward", "(", "self", ",", "img0", ",", "img1", ",", "pred", ",", "fb", ",", "max_d", "=", "655.35", ")", ":", "\n", "\n", "        ", "x0", "=", "(", "img0", "+", "1.0", ")", "/", "2.0", "\n", "x1", "=", "(", "img1", "+", "1.0", ")", "/", "2.0", "\n", "\n", "assert", "x0", ".", "shape", "[", "0", "]", "==", "pred", ".", "shape", "[", "0", "]", "\n", "assert", "pred", ".", "shape", "[", "0", "]", "==", "fb", ".", "shape", "[", "0", "]", "\n", "\n", "new_depth", "=", "(", "pred", "+", "1.0", ")", "/", "2.0", "\n", "new_depth", "*=", "max_d", "\n", "disp", "=", "1.0", "/", "(", "new_depth", "+", "1e-6", ")", "\n", "tmp", "=", "np", ".", "array", "(", "fb", ")", "\n", "for", "i", "in", "range", "(", "new_depth", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "disp", "[", "i", ",", ":", ",", ":", ",", ":", "]", "*=", "tmp", "[", "i", "]", "\n", "disp", "[", "i", ",", ":", ",", ":", ",", ":", "]", "/=", "disp", ".", "shape", "[", "3", "]", "# normlize to [0,1]", "\n", "\n", "#x0_w = warp(x1, -1.0*disp)", "\n", "", "x0_w", "=", "bilinear_sampler_1d_h", "(", "x1", ",", "-", "1.0", "*", "disp", ")", "\n", "\n", "ssim_", "=", "ssim", "(", "x0", ",", "x0_w", ")", "\n", "l1", "=", "torch", ".", "abs", "(", "x0", "-", "x0_w", ")", "\n", "loss1", "=", "torch", ".", "mean", "(", "self", ".", "alpha", "*", "ssim_", ")", "\n", "loss2", "=", "torch", ".", "mean", "(", "(", "1", "-", "self", ".", "alpha", ")", "*", "l1", ")", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "\n", "recon_img", "=", "x0_w", "*", "2.0", "-", "1.0", "\n", "\n", "return", "loss", ",", "recon_img", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.GANLoss.__init__": [[219, 227], ["torch.Module.__init__", "networks.GANLoss.register_buffer", "networks.GANLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.GANLoss.get_target_tensor": [[228, 234], ["target_tensor.expand_as"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "target_tensor", "=", "self", ".", "real_label", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "fake_label", "\n", "", "return", "target_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.GANLoss.__call__": [[235, 238], ["networks.GANLoss.get_target_tensor", "networks.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.GaussianNoiseLayer.__init__": [[241, 243], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GaussianNoiseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.GaussianNoiseLayer.forward": [[244, 249], ["Variable", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "x.data.get_device", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", "==", "False", ":", "\n", "            ", "return", "x", "\n", "", "noise", "=", "Variable", "(", "(", "torch", ".", "randn", "(", "x", ".", "size", "(", ")", ")", ".", "cuda", "(", "x", ".", "data", ".", "get_device", "(", ")", ")", "-", "0.5", ")", "/", "10.0", ")", "\n", "return", "x", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._InceptionBlock.__init__": [[252, 271], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "range", "norm_layer", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "setattr", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "width", "=", "1", ",", "drop_rate", "=", "0", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_InceptionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "i", "in", "range", "(", "width", ")", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "i", "*", "2", "+", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "i", "*", "2", "+", "1", ",", "bias", "=", "use_bias", ")", "\n", ")", "\n", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "layer", ")", "\n", "\n", "", "self", ".", "norm1", "=", "norm_layer", "(", "output_nc", "*", "width", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "output_nc", ")", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "branch1x1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "output_nc", "*", "width", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._InceptionBlock.forward": [[274, 286], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks._InceptionBlock.nonlinearity", "networks._InceptionBlock.norm2", "networks._InceptionBlock.nonlinearity", "getattr", "result.append", "networks._InceptionBlock.norm1", "networks._InceptionBlock.branch1x1", "torch.dropout", "torch.dropout", "torch.dropout", "getattr.", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ")", "\n", "result", ".", "append", "(", "layer", "(", "x", ")", ")", "\n", "", "output", "=", "torch", ".", "cat", "(", "result", ",", "1", ")", "\n", "output", "=", "self", ".", "nonlinearity", "(", "self", ".", "norm1", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "norm2", "(", "self", ".", "branch1x1", "(", "output", ")", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "output", "+", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._EncoderBlock.__init__": [[289, 302], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "middle_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_EncoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "middle_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "middle_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "Conv2d", "(", "middle_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._EncoderBlock.forward": [[303, 305], ["networks._EncoderBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._DownBlock.__init__": [[308, 319], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._DownBlock.forward": [[320, 322], ["networks._DownBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._ShuffleUpBlock.__init__": [[325, 338], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "up_scale", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_ShuffleUpBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "input_nc", "*", "up_scale", "**", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "PixelShuffle", "(", "up_scale", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._ShuffleUpBlock.forward": [[339, 341], ["networks._ShuffleUpBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._DecoderUpBlock.__init__": [[344, 358], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "middle_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DecoderUpBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "middle_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "middle_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "middle_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._DecoderUpBlock.forward": [[359, 361], ["networks._DecoderUpBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._OutputBlock.__init__": [[364, 373], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "int"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_OutputBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "int", "(", "kernel_size", "/", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks._OutputBlock.forward": [[374, 376], ["networks._OutputBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.UNetGenerator.__init__": [[379, 435], ["torch.Module.__init__", "networks.get_norm_layer", "networks.get_nonlinearity_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks._EncoderBlock", "networks._EncoderBlock", "networks._EncoderBlock", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "networks._DecoderUpBlock", "networks._DecoderUpBlock", "networks._DecoderUpBlock", "networks._OutputBlock", "networks._OutputBlock", "networks._OutputBlock", "networks._OutputBlock", "torch.Upsample", "torch.Upsample", "torch.Upsample", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "networks._EncoderBlock", "setattr", "networks._DecoderUpBlock", "networks._DecoderUpBlock", "setattr", "int", "networks._InceptionBlock", "networks.GaussianNoiseLayer", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", "=", "3", ",", "output_nc", "=", "1", ",", "ngf", "=", "64", ",", "layers", "=", "4", ",", "norm", "=", "'batch'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "weight", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "UNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "weight", "=", "weight", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "'PReLU'", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "# encoder part", "\n", "", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nonlinearity", "\n", ")", "\n", "self", ".", "conv2", "=", "_EncoderBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "conv3", "=", "_EncoderBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "conv4", "=", "_EncoderBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "conv", "=", "_EncoderBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ",", "conv", ".", "model", ")", "\n", "\n", "", "center", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "7", "-", "layers", ")", ":", "\n", "            ", "center", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "7", "-", "layers", ",", "drop_rate", ",", "use_bias", ")", "\n", "]", "\n", "\n", "", "center", "+=", "[", "\n", "_DecoderUpBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "]", "\n", "if", "add_noise", ":", "\n", "            ", "center", "+=", "[", "GaussianNoiseLayer", "(", ")", "]", "\n", "", "self", ".", "center", "=", "nn", ".", "Sequential", "(", "*", "center", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "upconv", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "8", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ",", "upconv", ".", "model", ")", "\n", "\n", "", "self", ".", "deconv4", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv3", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "ngf", "*", "4", ",", "ngf", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv2", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "ngf", "*", "2", ",", "int", "(", "ngf", "/", "2", ")", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "self", ".", "output4", "=", "_OutputBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output3", "=", "_OutputBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output2", "=", "_OutputBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output1", "=", "_OutputBlock", "(", "int", "(", "ngf", "/", "2", ")", "+", "output_nc", ",", "output_nc", ",", "7", ",", "use_bias", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.UNetGenerator.forward": [[436, 470], ["networks.UNetGenerator.pool", "networks.UNetGenerator.pool", "networks.UNetGenerator.pool", "networks.UNetGenerator.pool", "range", "networks.UNetGenerator.center.forward", "range", "networks.UNetGenerator.deconv4.forward", "result.append", "networks.UNetGenerator.deconv3.forward", "result.append", "networks.UNetGenerator.deconv2.forward", "result.append", "result.append", "networks.UNetGenerator.conv1", "networks.UNetGenerator.conv2.forward", "networks.UNetGenerator.conv3.forward", "networks.UNetGenerator.conv4.forward", "getattr", "networks.UNetGenerator.pool", "middle.append", "getattr", "getattr.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UNetGenerator.output4.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UNetGenerator.output3.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UNetGenerator.output2.forward", "networks.UNetGenerator.output1.forward", "getattr.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str", "networks.UNetGenerator.upsample", "networks.UNetGenerator.upsample", "networks.UNetGenerator.upsample", "networks.UNetGenerator.upsample", "networks.UNetGenerator.upsample"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "pool", "(", "self", ".", "conv1", "(", "input", ")", ")", "\n", "conv2", "=", "self", ".", "pool", "(", "self", ".", "conv2", ".", "forward", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "pool", "(", "self", ".", "conv3", ".", "forward", "(", "conv2", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "self", ".", "conv4", ".", "forward", "(", "conv3", ")", ")", "\n", "\n", "middle", "=", "[", "center_in", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "model", ".", "forward", "(", "center_in", ")", ")", "\n", "middle", ".", "append", "(", "center_in", ")", "\n", "", "center_out", "=", "self", ".", "center", ".", "forward", "(", "center_in", ")", "\n", "\n", "result", "=", "[", "center_in", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ")", "\n", "center_out", "=", "model", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "middle", "[", "self", ".", "layers", "-", "5", "-", "i", "]", "]", ",", "1", ")", ")", "\n", "\n", "", "scale", "=", "1.0", "\n", "#result = []", "\n", "deconv4", "=", "self", ".", "deconv4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "self", ".", "weight", "]", ",", "1", ")", ")", "\n", "output4", "=", "scale", "*", "self", ".", "output4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "self", ".", "weight", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output4", ")", "\n", "deconv3", "=", "self", ".", "deconv3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "self", ".", "weight", "*", "0.5", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "output3", "=", "scale", "*", "self", ".", "output3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "self", ".", "weight", "*", "0.5", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output3", ")", "\n", "deconv2", "=", "self", ".", "deconv2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "self", ".", "weight", "*", "0.1", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "output2", "=", "scale", "*", "self", ".", "output2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "self", ".", "weight", "*", "0.1", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output2", ")", "\n", "output1", "=", "scale", "*", "self", ".", "output1", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv2", ",", "self", ".", "upsample", "(", "output2", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output1", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.ResGenerator.__init__": [[476, 519], ["torch.Module.__init__", "networks.get_norm_layer", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "torch.ReLU", "torch.ReLU", "torch.ReLU", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "get_norm_layer.", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.get_norm_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", "=", "3", ",", "output_nc", "=", "3", ",", "ngf", "=", "64", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "9", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "self", ".", "ngf", "=", "ngf", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.ResGenerator.forward": [[520, 522], ["networks.ResGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.ResnetBlock.__init__": [[525, 528], ["torch.Module.__init__", "networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.ResnetBlock.build_conv_block": [[529, 560], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.ResnetBlock.forward": [[561, 564], ["networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.Discriminator.__init__": [[566, 608], ["torch.Module.__init__", "networks.get_norm_layer", "range", "min", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.get_norm_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", "=", "3", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm", "=", "'batch'", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.Discriminator.forward": [[609, 611], ["networks.Discriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.MoCo.__init__": [[622, 655], ["torch.Module.__init__", "int", "networks.UNetGenerator", "networks.Header", "networks.Header", "zip", "zip", "networks.MoCo.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "networks.MoCo.register_buffer", "networks.MoCo.encoder_q.parameters", "networks.MoCo.encoder_k.parameters", "param_k.data.copy_", "networks.MoCo.header_q.parameters", "networks.MoCo.header_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "encoder_q", ",", "dim", "=", "256", ",", "K", "=", "65536", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ")", ":", "\n", "\n", "        ", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "int", "(", "K", "*", "(", "64", "/", "256", ")", ")", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "\n", "self", ".", "encoder_q", "=", "encoder_q", "\n", "self", ".", "encoder_k", "=", "UNetGenerator", "(", ")", "\n", "\n", "self", ".", "header_q", "=", "Header", "(", ")", "\n", "self", ".", "header_k", "=", "Header", "(", ")", "\n", "\n", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "header_q", ".", "parameters", "(", ")", ",", "self", ".", "header_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "self", ".", "dim", ",", "self", ".", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.MoCo._momentum_update_key_encoder": [[656, 666], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "encoder_q.parameters", "networks.MoCo.encoder_k.parameters", "networks.MoCo.header_q.parameters", "networks.MoCo.header_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ",", "encoder_q", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "header_q", ".", "parameters", "(", ")", ",", "self", ".", "header_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.MoCo._dequeue_and_enqueue": [[667, 682], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "#keys = concat_all_gather(keys)", "\n", "\n", "        ", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.MoCo.forward": [[683, 742], ["torch.functional.normalize.squeeze", "networks.MoCo.header_q", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "networks.MoCo.queue.clone().detach", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "labels.cuda.cuda.cuda", "networks.MoCo._dequeue_and_enqueue", "encoder_q", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "networks.MoCo._momentum_update_key_encoder", "torch.functional.normalize.squeeze", "networks.MoCo.header_k", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "networks.MoCo.encoder_k", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "networks.MoCo.queue.clone", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel._dequeue_and_enqueue", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel._momentum_update_key_encoder"], ["", "def", "forward", "(", "self", ",", "encoder_q", ",", "im_q", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "# compute query features", "\n", "q", "=", "encoder_q", "(", "im_q", ")", "[", "0", "]", "\n", "#print(len(q), q[0].shape)", "\n", "#q = q[-1]", "\n", "\n", "q", "=", "nn", ".", "AvgPool2d", "(", "16", ",", "64", ")", "(", "q", ")", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "q", "=", "q", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "q", "=", "self", ".", "header_q", "(", "q", ")", "# queries: NxC", "\n", "#print(q.shape)", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", "encoder_q", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "#im_k, idx_unshuffle = self._batch_shuffle_ddp(im_k)", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "[", "0", "]", "\n", "k", "=", "nn", ".", "AvgPool2d", "(", "16", ",", "64", ")", "(", "k", ")", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "k", "=", "k", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "k", "=", "self", ".", "header_k", "(", "k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "#k = self._batch_unshuffle_ddp(k, idx_unshuffle)", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "clones", "=", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "#clones = clones.half()", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "clones", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "labels", "=", "labels", ".", "cuda", "(", "None", ",", "non_blocking", "=", "True", ")", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.Header.__init__": [[745, 753], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "Header", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.Header.forward": [[755, 760], ["networks.Header.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "\n", "        ", "h", "=", "self", ".", "net", "(", "z", ")", "\n", "\n", "return", "h", "", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.freeze_bn": [[12, 18], ["classname.find", "m.eval"], "function", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.eval"], ["def", "freeze_bn", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "eval", "(", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.freeze_in": [[19, 23], ["classname.find", "m.eval"], "function", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.eval"], ["", "", "def", "freeze_in", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'InstanceNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "eval", "(", ")", "\n", "#m.weight.requires_grad = False", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.unfreeze_bn": [[26, 32], ["classname.find", "m.train"], "function", ["None"], ["", "", "def", "unfreeze_bn", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "True", "\n", "m", ".", "bias", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.get_nonlinearity_layer": [[33, 45], ["torch.ReLU", "torch.SELU", "torch.LeakyReLU", "torch.PReLU", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_nonlinearity_layer", "(", "activation_type", "=", "'PReLU'", ")", ":", "\n", "    ", "if", "activation_type", "==", "'ReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "", "elif", "activation_type", "==", "'SELU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "SELU", "(", "True", ")", "\n", "", "elif", "activation_type", "==", "'LeakyReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", "\n", "", "elif", "activation_type", "==", "'PReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'activation layer [%s] is not found'", "%", "activation_type", ")", "\n", "", "return", "nonlinearity_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.get_norm_layer": [[46, 56], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ",", "track_running_stats", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.get_scheduler": [[58, 71], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "NotImplementedError", "max", "float"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "1", "+", "opt", ".", "epoch_count", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_weights": [[73, 95], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net": [[97, 104], ["networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.gradient_x": [[105, 108], ["None"], "function", ["None"], ["", "def", "gradient_x", "(", "img", ")", ":", "\n", "    ", "gx", "=", "img", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "-", "img", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "\n", "return", "gx", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.gradient_y": [[109, 112], ["None"], "function", ["None"], ["", "def", "gradient_y", "(", "img", ")", ":", "\n", "    ", "gy", "=", "img", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "-", "img", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "\n", "return", "gy", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.get_grid": [[113, 119], ["torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.cat", "torch.cat", "torch.cat", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "x.size", "x.size", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "x.size", "x.size"], "function", ["None"], ["", "def", "get_grid", "(", "x", ")", ":", "\n", "    ", "torchHorizontal", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "x", ".", "size", "(", "3", ")", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "x", ".", "size", "(", "3", ")", ")", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "torchVertical", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "x", ".", "size", "(", "2", ")", ")", ".", "view", "(", "1", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "1", ")", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "[", "torchHorizontal", ",", "torchVertical", "]", ",", "1", ")", "\n", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.ssim": [[120, 137], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.clamp", "torch.clamp", "torch.clamp", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "function", ["None"], ["", "def", "ssim", "(", "x", ",", "y", ")", ":", "\n", "\n", "        ", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "mu_x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "3", ",", "1", ")", "\n", "mu_y", "=", "F", ".", "avg_pool2d", "(", "y", ",", "3", ",", "1", ")", "\n", "\n", "sigma_x", "=", "F", ".", "avg_pool2d", "(", "x", "**", "2", ",", "3", ",", "1", ")", "-", "mu_x", "**", "2", "\n", "sigma_y", "=", "F", ".", "avg_pool2d", "(", "y", "**", "2", ",", "3", ",", "1", ")", "-", "mu_y", "**", "2", "\n", "sigma_xy", "=", "F", ".", "avg_pool2d", "(", "x", "*", "y", ",", "3", ",", "1", ")", "-", "mu_x", "*", "mu_y", "\n", "\n", "SSIM_n", "=", "(", "2", "*", "mu_x", "*", "mu_y", "+", "C1", ")", "*", "(", "2", "*", "sigma_xy", "+", "C2", ")", "\n", "SSIM_d", "=", "(", "mu_x", "**", "2", "+", "mu_y", "**", "2", "+", "C1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "C2", ")", "\n", "\n", "SSIM", "=", "SSIM_n", "/", "SSIM_d", "\n", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM", ")", "/", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_pretrain_model.FTPRETRAINModel.name": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'FTPRETRAINModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_pretrain_model.FTPRETRAINModel.modify_commandline_options": [[16, 25], ["parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "        ", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "\n", "            ", "parser", ".", "add_argument", "(", "'--g_tgt_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "help", "=", "'pretrained G_Tgt model'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_pretrain_model.FTPRETRAINModel.initialize": [[26, 100], ["base_model.BaseModel.initialize", "networks.init_net", "networks.init_net", "networks.init_net", "networks.init_net", "networks.init_net", "zip", "zip", "ft_pretrain_model.FTPRETRAINModel.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "ft_pretrain_model.FTPRETRAINModel.register_buffer", "networks.UNetGenerator", "networks.ResGenerator", "math.log", "networks.UNetGenerator", "networks.Header", "networks.Header", "ft_pretrain_model.FTPRETRAINModel.netG_Pretrain_T.parameters", "ft_pretrain_model.FTPRETRAINModel.encoder_k.parameters", "param_k.data.copy_", "ft_pretrain_model.FTPRETRAINModel.netheader_q.parameters", "ft_pretrain_model.FTPRETRAINModel.header_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ft_pretrain_model.FTPRETRAINModel.init_with_pretrained_model", "ft_pretrain_model.FTPRETRAINModel.netG_Tgt.eval", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "networks.SmoothLoss", "networks.ReconLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "ft_pretrain_model.FTPRETRAINModel.optimizers.append", "itertools.chain", "ft_pretrain_model.FTPRETRAINModel.netG_Pretrain_T.parameters", "ft_pretrain_model.FTPRETRAINModel.netheader_q.parameters"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.eval"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "loss_names", "=", "[", "'moco'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'tgt_left_img'", ",", "'fake_src_left'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'pred'", ",", "'img'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Pretrain_T'", ",", "'G_Tgt'", ",", "'header_q'", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Pretrain_T'", ",", "'G_Tgt'", "]", "\n", "\n", "", "self", ".", "netG_Pretrain_T", "=", "networks", ".", "init_net", "(", "networks", ".", "UNetGenerator", "(", "norm", "=", "'batch'", ")", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "self", ".", "netG_Tgt", "=", "networks", ".", "init_net", "(", "networks", ".", "ResGenerator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "\n", "\n", "#################################################", "\n", "################ MoCo Settings ##################", "\n", "#################################################", "\n", "\n", "self", ".", "alpha", "=", "65536", "\n", "self", ".", "dim", "=", "256", "\n", "self", ".", "K", "=", "1024", "\n", "self", ".", "T", "=", "0.07", "\n", "self", ".", "momentum", "=", "0.999", "\n", "\n", "self", ".", "m", "=", "self", ".", "T", "*", "math", ".", "log", "(", "self", ".", "alpha", "/", "self", ".", "K", ")", "\n", "\n", "self", ".", "encoder_k", "=", "networks", ".", "init_net", "(", "networks", ".", "UNetGenerator", "(", "norm", "=", "'batch'", ")", ",", "init_type", "=", "'normal'", ",", "\n", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "self", ".", "netheader_q", "=", "networks", ".", "init_net", "(", "networks", ".", "Header", "(", ")", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "header_k", "=", "networks", ".", "init_net", "(", "networks", ".", "Header", "(", ")", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "netG_Pretrain_T", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "netheader_q", ".", "parameters", "(", ")", ",", "self", ".", "header_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "self", ".", "dim", ",", "self", ".", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "init_with_pretrained_model", "(", "'G_Tgt'", ",", "self", ".", "opt", ".", "g_tgt_premodel", ")", "\n", "self", ".", "netG_Tgt", ".", "eval", "(", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# define loss functions", "\n", "            ", "self", ".", "criterionDepthReg", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionSmooth", "=", "networks", ".", "SmoothLoss", "(", ")", "\n", "self", ".", "criterionImgRecon", "=", "networks", ".", "ReconLoss", "(", ")", "\n", "\n", "\n", "self", ".", "optimizer_G_task", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_Pretrain_T", ".", "parameters", "(", ")", ",", "self", ".", "netheader_q", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_task", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "\n", "\n", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G_task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_pretrain_model.FTPRETRAINModel._momentum_update_key_encoder": [[103, 113], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "ft_pretrain_model.FTPRETRAINModel.netG_Pretrain_T.parameters", "ft_pretrain_model.FTPRETRAINModel.encoder_k.parameters", "ft_pretrain_model.FTPRETRAINModel.netheader_q.parameters", "ft_pretrain_model.FTPRETRAINModel.header_k.parameters"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "netG_Pretrain_T", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "momentum", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "momentum", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "netheader_q", ".", "parameters", "(", ")", ",", "self", ".", "header_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "momentum", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_pretrain_model.FTPRETRAINModel._dequeue_and_enqueue": [[115, 130], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "#keys = concat_all_gather(keys)", "\n", "\n", "        ", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_pretrain_model.FTPRETRAINModel.set_input": [[134, 144], ["[].to", "input[].to"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "\n", "            ", "self", ".", "tgt_left_img", "=", "input", "[", "'tgt'", "]", "[", "'left_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "num", "=", "self", ".", "tgt_left_img", ".", "shape", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "img", "=", "input", "[", "'left_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_pretrain_model.FTPRETRAINModel.forward": [[148, 214], ["ft_pretrain_model.FTPRETRAINModel.netG_Tgt().detach", "torch.functional.normalize.squeeze", "ft_pretrain_model.FTPRETRAINModel.netheader_q", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "ft_pretrain_model.FTPRETRAINModel.queue.clone().detach", "clones.cuda.cuda.cuda", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ft_pretrain_model.FTPRETRAINModel.labels.cuda", "ft_pretrain_model.FTPRETRAINModel._dequeue_and_enqueue", "ft_pretrain_model.FTPRETRAINModel.netG_Tgt", "ft_pretrain_model.FTPRETRAINModel.netG_Pretrain_T", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ft_pretrain_model.FTPRETRAINModel._momentum_update_key_encoder", "torch.functional.normalize.squeeze", "ft_pretrain_model.FTPRETRAINModel.header_k", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "ft_pretrain_model.FTPRETRAINModel.netG_Pretrain_T", "ft_pretrain_model.FTPRETRAINModel.netG_Tgt", "ft_pretrain_model.FTPRETRAINModel.encoder_k", "ft_pretrain_model.FTPRETRAINModel.queue.clone", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel._dequeue_and_enqueue", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel._momentum_update_key_encoder"], ["", "", "def", "forward", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "\n", "            ", "self", ".", "fake_src_left", "=", "self", ".", "netG_Tgt", "(", "self", ".", "tgt_left_img", ")", ".", "detach", "(", ")", "\n", "\n", "\n", "#################################################", "\n", "################# MoCo Forward ##################", "\n", "#################################################", "\n", "\n", "\n", "q", "=", "self", ".", "netG_Pretrain_T", "(", "self", ".", "fake_src_left", ")", "[", "0", "]", "\n", "\n", "q", "=", "nn", ".", "AvgPool2d", "(", "16", ",", "64", ")", "(", "q", ")", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "q", "=", "q", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "q", "=", "self", ".", "netheader_q", "(", "q", ")", "# queries: NxC", "\n", "# print(q.shape)", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "                ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "# im_k, idx_unshuffle = self._batch_shuffle_ddp(im_k)", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "self", ".", "tgt_left_img", ")", "[", "0", "]", "\n", "k", "=", "nn", ".", "AvgPool2d", "(", "16", ",", "64", ")", "(", "k", ")", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "k", "=", "k", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "k", "=", "self", ".", "header_k", "(", "k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "# k = self._batch_unshuffle_ddp(k, idx_unshuffle)", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "-", "self", ".", "m", "\n", "# negative logits: NxK", "\n", "\n", "clones", "=", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "# clones = clones.half()", "\n", "\n", "clones", "=", "clones", ".", "cuda", "(", ")", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "clones", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "self", ".", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "self", ".", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "self", ".", "labels", "=", "torch", ".", "zeros", "(", "self", ".", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "self", ".", "labels", "=", "self", ".", "labels", ".", "cuda", "(", "None", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_trans", "=", "self", ".", "netG_Tgt", "(", "self", ".", "img", ")", "\n", "self", ".", "pred", "=", "self", ".", "netG_Pretrain_T", "(", "self", ".", "img_trans", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_pretrain_model.FTPRETRAINModel.backward_G": [[218, 230], ["ft_pretrain_model.FTPRETRAINModel.loss_G_Depth.backward", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["", "", "def", "backward_G", "(", "self", ")", ":", "\n", "\n", "\n", "##########################################################", "\n", "#################### MoCo Backward ########################", "\n", "###########################################################", "\n", "\n", "        ", "self", ".", "loss_moco", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "self", ".", "logits", ",", "self", ".", "labels", ")", "\n", "\n", "\n", "self", ".", "loss_G_Depth", "=", "self", ".", "loss_moco", "\n", "self", ".", "loss_G_Depth", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_pretrain_model.FTPRETRAINModel.optimize_parameters": [[231, 237], ["ft_pretrain_model.FTPRETRAINModel.forward", "ft_pretrain_model.FTPRETRAINModel.optimizer_G_task.zero_grad", "ft_pretrain_model.FTPRETRAINModel.backward_G", "ft_pretrain_model.FTPRETRAINModel.optimizer_G_task.step"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel.name": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'FSPRETRAINModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel.modify_commandline_options": [[16, 25], ["parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "        ", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "\n", "            ", "parser", ".", "add_argument", "(", "'--g_src_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "help", "=", "'pretrained G_Src model'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel.initialize": [[26, 94], ["base_model.BaseModel.initialize", "networks.init_net", "networks.init_net", "networks.UNetGenerator", "networks.ResGenerator", "fs_pretrain_model.FSPRETRAINModel.init_with_pretrained_model", "fs_pretrain_model.FSPRETRAINModel.netG_Src.eval", "networks.init_net", "networks.init_net", "networks.init_net", "zip", "zip", "fs_pretrain_model.FSPRETRAINModel.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "fs_pretrain_model.FSPRETRAINModel.register_buffer", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "networks.SmoothLoss", "networks.ReconLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "fs_pretrain_model.FSPRETRAINModel.optimizers.append", "math.log", "networks.UNetGenerator", "networks.Header", "networks.Header", "fs_pretrain_model.FSPRETRAINModel.netG_Pretrain_S.parameters", "fs_pretrain_model.FSPRETRAINModel.encoder_k.parameters", "param_k.data.copy_", "fs_pretrain_model.FSPRETRAINModel.netheader_q.parameters", "fs_pretrain_model.FSPRETRAINModel.header_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "itertools.chain", "fs_pretrain_model.FSPRETRAINModel.netG_Pretrain_S.parameters", "fs_pretrain_model.FSPRETRAINModel.netheader_q.parameters"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "loss_names", "=", "[", "'moco'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'src_img'", ",", "'fake_tgt'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'pred'", ",", "'img'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Pretrain_S'", ",", "'header_q'", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Pretrain_S'", "]", "\n", "\n", "", "self", ".", "netG_Pretrain_S", "=", "networks", ".", "init_net", "(", "networks", ".", "UNetGenerator", "(", "norm", "=", "'batch'", ")", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "self", ".", "netG_Src", "=", "networks", ".", "init_net", "(", "networks", ".", "ResGenerator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "init_with_pretrained_model", "(", "'G_Src'", ",", "self", ".", "opt", ".", "g_src_premodel", ")", "\n", "self", ".", "netG_Src", ".", "eval", "(", ")", "\n", "\n", "#################################################", "\n", "################ MoCo Settings ##################", "\n", "#################################################", "\n", "\n", "self", ".", "alpha", "=", "65536", "\n", "self", ".", "dim", "=", "256", "\n", "self", ".", "K", "=", "1024", "\n", "self", ".", "T", "=", "0.07", "\n", "self", ".", "momentum", "=", "0.999", "\n", "\n", "self", ".", "m", "=", "self", ".", "T", "*", "math", ".", "log", "(", "self", ".", "alpha", "/", "self", ".", "K", ")", "\n", "\n", "self", ".", "encoder_k", "=", "networks", ".", "init_net", "(", "networks", ".", "UNetGenerator", "(", "norm", "=", "'batch'", ")", ",", "init_type", "=", "'normal'", ",", "\n", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "self", ".", "netheader_q", "=", "networks", ".", "init_net", "(", "networks", ".", "Header", "(", ")", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "header_k", "=", "networks", ".", "init_net", "(", "networks", ".", "Header", "(", ")", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "netG_Pretrain_S", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "netheader_q", ".", "parameters", "(", ")", ",", "self", ".", "header_k", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "self", ".", "dim", ",", "self", ".", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# define loss functions", "\n", "            ", "self", ".", "criterionDepthReg", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionSmooth", "=", "networks", ".", "SmoothLoss", "(", ")", "\n", "self", ".", "criterionImgRecon", "=", "networks", ".", "ReconLoss", "(", ")", "\n", "\n", "self", ".", "optimizer_G_task", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_Pretrain_S", ".", "parameters", "(", ")", ",", "self", ".", "netheader_q", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_task", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G_task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel._momentum_update_key_encoder": [[97, 107], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "fs_pretrain_model.FSPRETRAINModel.netG_Pretrain_S.parameters", "fs_pretrain_model.FSPRETRAINModel.encoder_k.parameters", "fs_pretrain_model.FSPRETRAINModel.netheader_q.parameters", "fs_pretrain_model.FSPRETRAINModel.header_k.parameters"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "netG_Pretrain_S", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "momentum", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "momentum", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "netheader_q", ".", "parameters", "(", ")", ",", "self", ".", "header_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "momentum", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel._dequeue_and_enqueue": [[108, 123], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "#keys = concat_all_gather(keys)", "\n", "\n", "        ", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel.set_input": [[126, 139], ["[].to", "input[].to"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "\n", "            ", "self", ".", "src_img", "=", "input", "[", "'src'", "]", "[", "'img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "\n", "self", ".", "num", "=", "self", ".", "src_img", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "img", "=", "input", "[", "'left_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel.forward": [[140, 208], ["fs_pretrain_model.FSPRETRAINModel.netG_Src().detach", "torch.functional.normalize.squeeze", "fs_pretrain_model.FSPRETRAINModel.netheader_q", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "fs_pretrain_model.FSPRETRAINModel.queue.clone().detach", "clones.cuda.cuda.cuda", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "fs_pretrain_model.FSPRETRAINModel.labels.cuda", "fs_pretrain_model.FSPRETRAINModel._dequeue_and_enqueue", "fs_pretrain_model.FSPRETRAINModel.netG_Pretrain_S", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fs_pretrain_model.FSPRETRAINModel._momentum_update_key_encoder", "torch.functional.normalize.squeeze", "fs_pretrain_model.FSPRETRAINModel.header_k", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "fs_pretrain_model.FSPRETRAINModel.netG_Pretrain_S", "fs_pretrain_model.FSPRETRAINModel.netG_Src", "fs_pretrain_model.FSPRETRAINModel.encoder_k", "fs_pretrain_model.FSPRETRAINModel.queue.clone", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel._dequeue_and_enqueue", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel._momentum_update_key_encoder"], ["", "", "def", "forward", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "\n", "            ", "self", ".", "fake_tgt", "=", "self", ".", "netG_Src", "(", "self", ".", "src_img", ")", ".", "detach", "(", ")", "\n", "\n", "\n", "#################################################", "\n", "################# MoCo Forward ##################", "\n", "#################################################", "\n", "\n", "\n", "q", "=", "self", ".", "netG_Pretrain_S", "(", "self", ".", "fake_tgt", ")", "[", "0", "]", "\n", "# print(len(q), q[0].shape)", "\n", "# q = q[-1]", "\n", "\n", "q", "=", "nn", ".", "AvgPool2d", "(", "16", ",", "64", ")", "(", "q", ")", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "q", "=", "q", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "q", "=", "self", ".", "netheader_q", "(", "q", ")", "# queries: NxC", "\n", "# print(q.shape)", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "                ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "# im_k, idx_unshuffle = self._batch_shuffle_ddp(im_k)", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "self", ".", "src_img", ")", "[", "0", "]", "\n", "k", "=", "nn", ".", "AvgPool2d", "(", "16", ",", "64", ")", "(", "k", ")", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "k", "=", "k", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "k", "=", "self", ".", "header_k", "(", "k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "# k = self._batch_unshuffle_ddp(k, idx_unshuffle)", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "-", "self", ".", "m", "\n", "# negative logits: NxK", "\n", "\n", "clones", "=", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "# clones = clones.half()", "\n", "\n", "clones", "=", "clones", ".", "cuda", "(", ")", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "clones", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "self", ".", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "self", ".", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "self", ".", "labels", "=", "torch", ".", "zeros", "(", "self", ".", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "self", ".", "labels", "=", "self", ".", "labels", ".", "cuda", "(", "None", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "pred", "=", "self", ".", "netG_Pretrain_S", "(", "self", ".", "img", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel.backward_G": [[209, 221], ["fs_pretrain_model.FSPRETRAINModel.loss_G_Depth.backward", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["", "", "def", "backward_G", "(", "self", ")", ":", "\n", "\n", "\n", "\n", "##########################################################", "\n", "#################### MoCo Backward ########################", "\n", "###########################################################", "\n", "\n", "        ", "self", ".", "loss_moco", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "self", ".", "logits", ",", "self", ".", "labels", ")", "\n", "\n", "self", ".", "loss_G_Depth", "=", "self", ".", "loss_moco", "\n", "self", ".", "loss_G_Depth", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_pretrain_model.FSPRETRAINModel.optimize_parameters": [[222, 228], ["fs_pretrain_model.FSPRETRAINModel.forward", "fs_pretrain_model.FSPRETRAINModel.optimizer_G_task.zero_grad", "fs_pretrain_model.FSPRETRAINModel.backward_G", "fs_pretrain_model.FSPRETRAINModel.optimizer_G_task.step"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_model.FSModel.name": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'FSModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_model.FSModel.modify_commandline_options": [[16, 34], ["parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "        ", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_R_Depth'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for reconstruction loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_S_Depth'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'weight for smooth loss'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lambda_R_Img'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for image reconstruction'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--g_src_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "help", "=", "'pretrained G_Src model'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--s_depth_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "help", "=", "'pretrained depth estimation model'", ")", "\n", "\n", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_model.FSModel.initialize": [[35, 78], ["base_model.BaseModel.initialize", "networks.init_net", "networks.init_net", "networks.UNetGenerator", "networks.ResGenerator", "fs_model.FSModel.init_with_pretrained_model", "fs_model.FSModel.init_with_pretrained_model", "fs_model.FSModel.netG_Src.eval", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "networks.SmoothLoss", "networks.ReconLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "fs_model.FSModel.optimizers.append", "itertools.chain", "fs_model.FSModel.netG_Depth_S.parameters"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.eval"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "loss_names", "=", "[", "'R_Depth_Src'", ",", "'S_Depth_Sgt'", ",", "'R_Img_Tgt'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'src_img'", ",", "'fake_tgt'", ",", "'src_real_depth'", ",", "'src_gen_depth'", ",", "'tgt_left_img'", ",", "'tgt_gen_depth'", ",", "'warp_tgt_img'", ",", "'tgt_right_img'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'pred'", ",", "'img'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Depth_S'", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Depth_S'", "]", "\n", "\n", "\n", "\n", "", "self", ".", "netG_Depth_S", "=", "networks", ".", "init_net", "(", "networks", ".", "UNetGenerator", "(", "norm", "=", "'batch'", ")", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "self", ".", "netG_Src", "=", "networks", ".", "init_net", "(", "networks", ".", "ResGenerator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "\n", "\n", "            ", "self", ".", "init_with_pretrained_model", "(", "'G_Src'", ",", "self", ".", "opt", ".", "g_src_premodel", ")", "\n", "self", ".", "init_with_pretrained_model", "(", "'G_Depth_S'", ",", "self", ".", "opt", ".", "s_depth_premodel", ")", "\n", "self", ".", "netG_Src", ".", "eval", "(", ")", "\n", "\n", "\n", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# define loss functions", "\n", "            ", "self", ".", "criterionDepthReg", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionSmooth", "=", "networks", ".", "SmoothLoss", "(", ")", "\n", "self", ".", "criterionImgRecon", "=", "networks", ".", "ReconLoss", "(", ")", "\n", "\n", "self", ".", "optimizer_G_task", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_Depth_S", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_task", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G_task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_model.FSModel.set_input": [[82, 97], ["[].to", "[].to", "[].to", "[].to", "input[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "src_real_depth", "=", "input", "[", "'src'", "]", "[", "'depth'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "src_img", "=", "input", "[", "'src'", "]", "[", "'img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tgt_left_img", "=", "input", "[", "'tgt'", "]", "[", "'left_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tgt_right_img", "=", "input", "[", "'tgt'", "]", "[", "'right_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tgt_fb", "=", "input", "[", "'tgt'", "]", "[", "'fb'", "]", "\n", "\n", "self", ".", "num", "=", "self", ".", "src_img", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "img", "=", "input", "[", "'left_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_model.FSModel.forward": [[98, 113], ["fs_model.FSModel.netG_Src().detach", "fs_model.FSModel.netG_Depth_S", "fs_model.FSModel.out[].narrow", "fs_model.FSModel.out[].narrow", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fs_model.FSModel.netG_Depth_S", "fs_model.FSModel.netG_Src"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "\n", "            ", "self", ".", "fake_tgt", "=", "self", ".", "netG_Src", "(", "self", ".", "src_img", ")", ".", "detach", "(", ")", "\n", "self", ".", "out", "=", "self", ".", "netG_Depth_S", "(", "torch", ".", "cat", "(", "(", "self", ".", "fake_tgt", ",", "self", ".", "tgt_left_img", ")", ",", "0", ")", ")", "\n", "self", ".", "src_gen_depth", "=", "self", ".", "out", "[", "-", "1", "]", ".", "narrow", "(", "0", ",", "0", ",", "self", ".", "num", ")", "\n", "self", ".", "tgt_gen_depth", "=", "self", ".", "out", "[", "-", "1", "]", ".", "narrow", "(", "0", ",", "self", ".", "num", ",", "self", ".", "num", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "pred", "=", "self", ".", "netG_Depth_S", "(", "self", ".", "img", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_model.FSModel.backward_G": [[114, 146], ["utils.dataset_util.scale_pyramid", "zip", "utils.dataset_util.scale_pyramid", "utils.dataset_util.scale_pyramid", "zip", "zip", "fs_model.FSModel.loss_G_Depth.backward", "fs_model.FSModel.criterionImgRecon", "fs_model.FSModel.criterionDepthReg", "fs_model.FSModel.criterionSmooth"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.scale_pyramid", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.scale_pyramid", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.scale_pyramid"], ["", "", "def", "backward_G", "(", "self", ")", ":", "\n", "\n", "        ", "lambda_R_Depth", "=", "self", ".", "opt", ".", "lambda_R_Depth", "\n", "lambda_R_Img", "=", "self", ".", "opt", ".", "lambda_R_Img", "\n", "lambda_S_Depth", "=", "self", ".", "opt", ".", "lambda_S_Depth", "\n", "lambda_con", "=", "0.3", "\n", "\n", "\n", "self", ".", "loss_R_Depth_Src", "=", "0.0", "\n", "real_depths", "=", "dataset_util", ".", "scale_pyramid", "(", "self", ".", "src_real_depth", ",", "4", ")", "\n", "for", "(", "gen_depth", ",", "real_depth", ")", "in", "zip", "(", "self", ".", "out", "[", "1", ":", "]", ",", "real_depths", ")", ":", "\n", "            ", "self", ".", "loss_R_Depth_Src", "+=", "self", ".", "criterionDepthReg", "(", "gen_depth", "[", ":", "self", ".", "num", ",", ":", ",", ":", ",", ":", "]", ",", "real_depth", ")", "*", "lambda_R_Depth", "\n", "\n", "", "l_imgs", "=", "dataset_util", ".", "scale_pyramid", "(", "self", ".", "tgt_left_img", ",", "4", ")", "\n", "r_imgs", "=", "dataset_util", ".", "scale_pyramid", "(", "self", ".", "tgt_right_img", ",", "4", ")", "\n", "self", ".", "loss_R_Img_Tgt", "=", "0.0", "\n", "i", "=", "0", "\n", "for", "(", "l_img", ",", "r_img", ",", "gen_depth", ")", "in", "zip", "(", "l_imgs", ",", "r_imgs", ",", "self", ".", "out", "[", "1", ":", "]", ")", ":", "\n", "            ", "loss", ",", "self", ".", "warp_tgt_img", "=", "self", ".", "criterionImgRecon", "(", "l_img", ",", "r_img", ",", "gen_depth", "[", "self", ".", "num", ":", ",", ":", ",", ":", ",", ":", "]", ",", "self", ".", "tgt_fb", "/", "2", "**", "(", "3", "-", "i", ")", ")", "\n", "self", ".", "loss_R_Img_Tgt", "+=", "loss", "*", "lambda_R_Img", "\n", "i", "+=", "1", "\n", "\n", "", "i", "=", "0", "\n", "self", ".", "loss_S_Depth_Sgt", "=", "0.0", "\n", "for", "(", "gen_depth", ",", "img", ")", "in", "zip", "(", "self", ".", "out", "[", "1", ":", "]", ",", "l_imgs", ")", ":", "\n", "            ", "self", ".", "loss_S_Depth_Sgt", "+=", "self", ".", "criterionSmooth", "(", "gen_depth", "[", "self", ".", "num", ":", ",", ":", ",", ":", ",", ":", "]", ",", "img", ")", "*", "self", ".", "opt", ".", "lambda_S_Depth", "/", "2", "**", "i", "\n", "i", "+=", "1", "\n", "\n", "\n", "\n", "", "self", ".", "loss_G_Depth", "=", "self", ".", "loss_R_Img_Tgt", "+", "self", ".", "loss_S_Depth_Sgt", "+", "self", ".", "loss_R_Depth_Src", "\n", "self", ".", "loss_G_Depth", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.fs_model.FSModel.optimize_parameters": [[147, 153], ["fs_model.FSModel.forward", "fs_model.FSModel.optimizer_G_task.zero_grad", "fs_model.FSModel.backward_G", "fs_model.FSModel.optimizer_G_task.step"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.name": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'DEPTHModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.modify_commandline_options": [[16, 52], ["parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "        ", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_R_Depth'", ",", "type", "=", "float", ",", "default", "=", "50.0", ",", "help", "=", "'weight for reconstruction loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_C_Depth'", ",", "type", "=", "float", ",", "default", "=", "50.0", ",", "help", "=", "'weight for consistency'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lambda_S_Depth'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'weight for smooth loss'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lambda_R_Img'", ",", "type", "=", "float", ",", "default", "=", "50.0", ",", "help", "=", "'weight for image reconstruction'", ")", "\n", "# cyclegan", "\n", "parser", ".", "add_argument", "(", "'--lambda_Src'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_Tgt'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_identity'", ",", "type", "=", "float", ",", "default", "=", "30.0", ",", "\n", "help", "=", "'use identity mapping. Setting lambda_identity other than 0 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set lambda_identity = 0.1'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--s_depth_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "\n", "help", "=", "'pretrained depth estimation model'", ")", "\n", "parser", ".", "add_argument", "(", "'--t_depth_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "\n", "help", "=", "'pretrained depth estimation model'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--g_src_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "\n", "help", "=", "'pretrained G_Src model'", ")", "\n", "parser", ".", "add_argument", "(", "'--g_tgt_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "\n", "help", "=", "'pretrained G_Tgt model'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_src_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "\n", "help", "=", "'pretrained D_Src model'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_tgt_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "\n", "help", "=", "'pretrained D_Tgt model'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--freeze_bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'freeze the bn in mde'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_in'", ",", "action", "=", "'store_true'", ",", "help", "=", "'freeze the in in cyclegan'", ")", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.initialize": [[53, 138], ["base_model.BaseModel.initialize", "networks.init_net", "networks.init_net", "networks.init_net", "networks.init_net", "networks.UNetGenerator", "networks.UNetGenerator", "networks.ResGenerator", "networks.ResGenerator", "networks.init_net", "networks.init_net", "depth_model.DEPTHModel.init_with_pretrained_model", "depth_model.DEPTHModel.init_with_pretrained_model", "depth_model.DEPTHModel.init_with_pretrained_model", "depth_model.DEPTHModel.init_with_pretrained_model", "depth_model.DEPTHModel.init_with_pretrained_model", "depth_model.DEPTHModel.init_with_pretrained_model", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "networks.SmoothLoss", "networks.ReconLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "utils.image_pool.ImagePool", "utils.image_pool.ImagePool", "networks.GANLoss().to", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "depth_model.DEPTHModel.optimizers.append", "depth_model.DEPTHModel.optimizers.append", "depth_model.DEPTHModel.optimizers.append", "visual_names_src.append", "visual_names_tgt.append", "networks.Discriminator", "networks.Discriminator", "itertools.chain", "itertools.chain", "itertools.chain", "depth_model.DEPTHModel.netG_Depth_S.apply", "depth_model.DEPTHModel.netG_Depth_T.apply", "depth_model.DEPTHModel.netG_Src.apply", "depth_model.DEPTHModel.netG_Tgt.apply", "networks.GANLoss", "depth_model.DEPTHModel.netG_Depth_S.parameters", "depth_model.DEPTHModel.netG_Depth_T.parameters", "depth_model.DEPTHModel.netG_Src.parameters", "depth_model.DEPTHModel.netG_Tgt.parameters", "depth_model.DEPTHModel.netD_Src.parameters", "depth_model.DEPTHModel.netD_Tgt.parameters"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "loss_names", "=", "[", "'R_Depth_Src_S'", ",", "'S_Depth_Tgt_S'", ",", "'R_Img_Tgt_S'", ",", "'C_Depth_Tgt'", "]", "\n", "self", ".", "loss_names", "+=", "[", "'R_Depth_Src_T'", ",", "'S_Depth_Tgt_T'", ",", "'R_Img_Tgt_T'", "]", "\n", "self", ".", "loss_names", "+=", "[", "'D_Src'", ",", "'G_Src'", ",", "'cycle_Src'", ",", "'idt_Src'", ",", "'D_Tgt'", ",", "'G_Tgt'", ",", "'cycle_Tgt'", ",", "'idt_Tgt'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "visual_names_src", "=", "[", "'src_img'", ",", "'fake_tgt'", ",", "'src_real_depth'", ",", "'src_gen_depth'", ",", "'src_gen_depth_t'", ",", "'src_gen_depth_s'", "]", "\n", "visual_names_tgt", "=", "[", "'tgt_left_img'", ",", "'fake_src_left'", ",", "'tgt_gen_depth'", ",", "'warp_tgt_img_s'", ",", "'warp_tgt_img_t'", ",", "'tgt_gen_depth_s'", ",", "'tgt_gen_depth_t'", ",", "'tgt_right_img'", "]", "\n", "\n", "if", "self", ".", "opt", ".", "lambda_identity", ">", "0.0", ":", "\n", "                ", "visual_names_src", ".", "append", "(", "'idt_src_left'", ")", "\n", "visual_names_tgt", ".", "append", "(", "'idt_tgt'", ")", "\n", "\n", "", "self", ".", "visual_names", "=", "visual_names_src", "+", "visual_names_tgt", "\n", "", "else", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'pred'", ",", "'img'", ",", "'img_trans'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Depth_S'", ",", "'G_Depth_T'", "]", "\n", "self", ".", "model_names", "+=", "[", "'G_Src'", ",", "'G_Tgt'", ",", "'D_Src'", ",", "'D_Tgt'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Depth_S'", ",", "'G_Depth_T'", ",", "'G_Tgt'", "]", "\n", "\n", "", "self", ".", "netG_Depth_S", "=", "networks", ".", "init_net", "(", "networks", ".", "UNetGenerator", "(", "norm", "=", "'batch'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "netG_Depth_T", "=", "networks", ".", "init_net", "(", "networks", ".", "UNetGenerator", "(", "norm", "=", "'batch'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "self", ".", "netG_Src", "=", "networks", ".", "init_net", "(", "networks", ".", "ResGenerator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "netG_Tgt", "=", "networks", ".", "init_net", "(", "networks", ".", "ResGenerator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "\n", "self", ".", "netD_Src", "=", "networks", ".", "init_net", "(", "networks", ".", "Discriminator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "netD_Tgt", "=", "networks", ".", "init_net", "(", "networks", ".", "Discriminator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "self", ".", "init_with_pretrained_model", "(", "'G_Depth_S'", ",", "self", ".", "opt", ".", "s_depth_premodel", ")", "\n", "self", ".", "init_with_pretrained_model", "(", "'G_Depth_T'", ",", "self", ".", "opt", ".", "t_depth_premodel", ")", "\n", "self", ".", "init_with_pretrained_model", "(", "'G_Src'", ",", "self", ".", "opt", ".", "g_src_premodel", ")", "\n", "self", ".", "init_with_pretrained_model", "(", "'G_Tgt'", ",", "self", ".", "opt", ".", "g_tgt_premodel", ")", "\n", "self", ".", "init_with_pretrained_model", "(", "'D_Src'", ",", "self", ".", "opt", ".", "d_src_premodel", ")", "\n", "self", ".", "init_with_pretrained_model", "(", "'D_Tgt'", ",", "self", ".", "opt", ".", "d_tgt_premodel", ")", "\n", "\n", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# define loss functions", "\n", "            ", "self", ".", "criterionDepthReg", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionDepthCons", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionSmooth", "=", "networks", ".", "SmoothLoss", "(", ")", "\n", "self", ".", "criterionImgRecon", "=", "networks", ".", "ReconLoss", "(", ")", "\n", "self", ".", "criterionLR", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "self", ".", "fake_src_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "fake_tgt_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionCycle", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionIdt", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "self", ".", "optimizer_G_task", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_Depth_S", ".", "parameters", "(", ")", ",", "\n", "self", ".", "netG_Depth_T", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_task", ",", "betas", "=", "(", "0.95", ",", "0.999", ")", ")", "\n", "\n", "self", ".", "optimizer_G_trans", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_Src", ".", "parameters", "(", ")", ",", "\n", "self", ".", "netG_Tgt", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_trans", ",", "betas", "=", "(", "0.5", ",", "0.9", ")", ")", "\n", "\n", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netD_Src", ".", "parameters", "(", ")", ",", "\n", "self", ".", "netD_Tgt", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_trans", ",", "betas", "=", "(", "0.5", ",", "0.9", ")", ")", "\n", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G_task", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G_trans", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "if", "opt", ".", "freeze_bn", ":", "\n", "                ", "self", ".", "netG_Depth_S", ".", "apply", "(", "networks", ".", "freeze_bn", ")", "\n", "self", ".", "netG_Depth_T", ".", "apply", "(", "networks", ".", "freeze_bn", ")", "\n", "", "if", "opt", ".", "freeze_in", ":", "\n", "                ", "self", ".", "netG_Src", ".", "apply", "(", "networks", ".", "freeze_in", ")", "\n", "self", ".", "netG_Tgt", ".", "apply", "(", "networks", ".", "freeze_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.set_input": [[141, 152], ["[].to", "[].to", "[].to", "[].to", "input[].to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "src_real_depth", "=", "input", "[", "'src'", "]", "[", "'depth'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "src_img", "=", "input", "[", "'src'", "]", "[", "'img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tgt_left_img", "=", "input", "[", "'tgt'", "]", "[", "'left_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tgt_right_img", "=", "input", "[", "'tgt'", "]", "[", "'right_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tgt_fb", "=", "input", "[", "'tgt'", "]", "[", "'fb'", "]", "\n", "self", ".", "num", "=", "self", ".", "src_img", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "img", "=", "input", "[", "'left_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.forward": [[153, 163], ["depth_model.DEPTHModel.netG_Tgt", "depth_model.DEPTHModel.netG_Depth_S", "depth_model.DEPTHModel.netG_Depth_T"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "pass", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "pred_s", "=", "self", ".", "netG_Depth_S", "(", "self", ".", "img", ")", "[", "-", "1", "]", "\n", "self", ".", "img_trans", "=", "self", ".", "netG_Tgt", "(", "self", ".", "img", ")", "\n", "self", ".", "pred_t", "=", "self", ".", "netG_Depth_T", "(", "self", ".", "img_trans", ")", "[", "-", "1", "]", "\n", "self", ".", "pred", "=", "0.5", "*", "(", "self", ".", "pred_s", "+", "self", ".", "pred_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_D_basic": [[164, 176], ["netD", "depth_model.DEPTHModel.criterionGAN", "netD", "depth_model.DEPTHModel.criterionGAN", "loss_D.backward", "real.detach", "fake.detach"], "methods", ["None"], ["", "", "def", "backward_D_basic", "(", "self", ",", "netD", ",", "real", ",", "fake", ")", ":", "\n", "# Real", "\n", "        ", "pred_real", "=", "netD", "(", "real", ".", "detach", "(", ")", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "# Fake", "\n", "pred_fake", "=", "netD", "(", "fake", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "# Combined loss", "\n", "loss_D", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "# backward", "\n", "loss_D", ".", "backward", "(", ")", "\n", "return", "loss_D", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_D_Src": [[177, 180], ["depth_model.DEPTHModel.fake_tgt_pool.query", "depth_model.DEPTHModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_D_basic"], ["", "def", "backward_D_Src", "(", "self", ")", ":", "\n", "        ", "fake_tgt", "=", "self", ".", "fake_tgt_pool", ".", "query", "(", "self", ".", "fake_tgt", ")", "\n", "self", ".", "loss_D_Src", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_Src", ",", "self", ".", "tgt_left_img", ",", "fake_tgt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_D_Tgt": [[181, 184], ["depth_model.DEPTHModel.fake_src_pool.query", "depth_model.DEPTHModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_D_basic"], ["", "def", "backward_D_Tgt", "(", "self", ")", ":", "\n", "        ", "fake_src_left", "=", "self", ".", "fake_src_pool", ".", "query", "(", "self", ".", "fake_src_left", ")", "\n", "self", ".", "loss_D_Tgt", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_Tgt", ",", "self", ".", "src_img", ",", "fake_src_left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_G": [[185, 280], ["depth_model.DEPTHModel.netG_Src", "depth_model.DEPTHModel.netG_Tgt", "depth_model.DEPTHModel.netG_Tgt", "depth_model.DEPTHModel.netG_Depth_S", "depth_model.DEPTHModel.netG_Depth_T", "depth_model.DEPTHModel.criterionGAN", "depth_model.DEPTHModel.criterionCycle", "utils.dataset_util.scale_pyramid", "zip", "zip", "depth_model.DEPTHModel.loss.backward", "depth_model.DEPTHModel.netG_Tgt", "depth_model.DEPTHModel.netG_Src", "depth_model.DEPTHModel.netG_Src", "depth_model.DEPTHModel.netG_Depth_S", "depth_model.DEPTHModel.netG_Depth_T", "depth_model.DEPTHModel.criterionGAN", "depth_model.DEPTHModel.criterionCycle", "utils.dataset_util.scale_pyramid", "utils.dataset_util.scale_pyramid", "zip", "zip", "zip", "zip", "zip", "depth_model.DEPTHModel.loss_G.backward", "depth_model.DEPTHModel.netD_Src", "depth_model.DEPTHModel.netD_Tgt", "depth_model.DEPTHModel.criterionImgRecon", "depth_model.DEPTHModel.criterionImgRecon", "depth_model.DEPTHModel.criterionIdt", "depth_model.DEPTHModel.criterionDepthReg", "depth_model.DEPTHModel.criterionDepthReg", "depth_model.DEPTHModel.criterionIdt", "depth_model.DEPTHModel.criterionDepthCons", "depth_model.DEPTHModel.criterionSmooth", "depth_model.DEPTHModel.criterionSmooth"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.scale_pyramid", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.scale_pyramid", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.scale_pyramid"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "\n", "        ", "lambda_R_Depth", "=", "self", ".", "opt", ".", "lambda_R_Depth", "\n", "lambda_R_Img", "=", "self", ".", "opt", ".", "lambda_R_Img", "\n", "lambda_S_Depth", "=", "self", ".", "opt", ".", "lambda_S_Depth", "\n", "lambda_C_Depth", "=", "self", ".", "opt", ".", "lambda_C_Depth", "\n", "lambda_idt", "=", "self", ".", "opt", ".", "lambda_identity", "\n", "lambda_Src", "=", "self", ".", "opt", ".", "lambda_Src", "\n", "lambda_Tgt", "=", "self", ".", "opt", ".", "lambda_Tgt", "\n", "\n", "# =========================== synthetic ==========================", "\n", "self", ".", "fake_tgt", "=", "self", ".", "netG_Src", "(", "self", ".", "src_img", ")", "\n", "self", ".", "idt_tgt", "=", "self", ".", "netG_Tgt", "(", "self", ".", "src_img", ")", "\n", "self", ".", "rec_src", "=", "self", ".", "netG_Tgt", "(", "self", ".", "fake_tgt", ")", "\n", "self", ".", "out_s", "=", "self", ".", "netG_Depth_S", "(", "self", ".", "fake_tgt", ")", "\n", "self", ".", "out_t", "=", "self", ".", "netG_Depth_T", "(", "self", ".", "src_img", ")", "\n", "self", ".", "src_gen_depth_t", "=", "self", ".", "out_t", "[", "-", "1", "]", "\n", "self", ".", "src_gen_depth_s", "=", "self", ".", "out_s", "[", "-", "1", "]", "\n", "self", ".", "loss_G_Src", "=", "self", ".", "criterionGAN", "(", "self", ".", "netD_Src", "(", "self", ".", "fake_tgt", ")", ",", "True", ")", "\n", "self", ".", "loss_cycle_Src", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_src", ",", "self", ".", "src_img", ")", "\n", "self", ".", "loss_idt_Tgt", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_tgt", ",", "self", ".", "src_img", ")", "*", "lambda_Src", "*", "lambda_idt", "\n", "self", ".", "loss_R_Depth_Src_S", "=", "0.0", "\n", "\n", "\n", "real_depths", "=", "dataset_util", ".", "scale_pyramid", "(", "self", ".", "src_real_depth", ",", "4", ")", "\n", "for", "(", "gen_depth", ",", "real_depth", ")", "in", "zip", "(", "self", ".", "out_s", "[", "1", ":", "]", ",", "real_depths", ")", ":", "\n", "            ", "self", ".", "loss_R_Depth_Src_S", "+=", "self", ".", "criterionDepthReg", "(", "gen_depth", ",", "real_depth", ")", "*", "lambda_R_Depth", "\n", "\n", "\n", "", "self", ".", "loss_R_Depth_Src_T", "=", "0.0", "\n", "for", "(", "gen_depth", ",", "real_depth", ")", "in", "zip", "(", "self", ".", "out_t", "[", "1", ":", "]", ",", "real_depths", ")", ":", "\n", "            ", "self", ".", "loss_R_Depth_Src_T", "+=", "self", ".", "criterionDepthReg", "(", "gen_depth", ",", "real_depth", ")", "*", "lambda_R_Depth", "\n", "\n", "\n", "\n", "", "self", ".", "loss", "=", "self", ".", "loss_G_Src", "+", "self", ".", "loss_cycle_Src", "+", "self", ".", "loss_idt_Tgt", "+", "self", ".", "loss_R_Depth_Src_T", "+", "self", ".", "loss_R_Depth_Src_S", "\n", "self", ".", "loss", ".", "backward", "(", ")", "\n", "\n", "# ============================= real =============================", "\n", "self", ".", "fake_src_left", "=", "self", ".", "netG_Tgt", "(", "self", ".", "tgt_left_img", ")", "\n", "self", ".", "idt_src_left", "=", "self", ".", "netG_Src", "(", "self", ".", "tgt_left_img", ")", "\n", "self", ".", "rec_tgt_left", "=", "self", ".", "netG_Src", "(", "self", ".", "fake_src_left", ")", "\n", "self", ".", "out_s", "=", "self", ".", "netG_Depth_S", "(", "self", ".", "tgt_left_img", ")", "\n", "self", ".", "out_t", "=", "self", ".", "netG_Depth_T", "(", "self", ".", "fake_src_left", ")", "\n", "self", ".", "tgt_gen_depth_t", "=", "self", ".", "out_t", "[", "-", "1", "]", "\n", "self", ".", "tgt_gen_depth_s", "=", "self", ".", "out_s", "[", "-", "1", "]", "\n", "self", ".", "loss_G_Tgt", "=", "self", ".", "criterionGAN", "(", "self", ".", "netD_Tgt", "(", "self", ".", "fake_src_left", ")", ",", "True", ")", "\n", "self", ".", "loss_cycle_Tgt", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_tgt_left", ",", "self", ".", "tgt_left_img", ")", "\n", "self", ".", "loss_idt_Src", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_src_left", ",", "self", ".", "tgt_left_img", ")", "*", "lambda_Tgt", "*", "lambda_idt", "\n", "# geometry consistency", "\n", "l_imgs", "=", "dataset_util", ".", "scale_pyramid", "(", "self", ".", "tgt_left_img", ",", "4", ")", "\n", "r_imgs", "=", "dataset_util", ".", "scale_pyramid", "(", "self", ".", "tgt_right_img", ",", "4", ")", "\n", "\n", "\n", "self", ".", "loss_R_Img_Tgt_S", "=", "0.0", "\n", "i", "=", "0", "\n", "for", "(", "l_img", ",", "r_img", ",", "gen_depth", ")", "in", "zip", "(", "l_imgs", ",", "r_imgs", ",", "self", ".", "out_s", "[", "1", ":", "]", ")", ":", "\n", "            ", "loss", ",", "self", ".", "warp_tgt_img_s", "=", "self", ".", "criterionImgRecon", "(", "l_img", ",", "r_img", ",", "gen_depth", ",", "self", ".", "tgt_fb", "/", "2", "**", "(", "3", "-", "i", ")", ")", "\n", "self", ".", "loss_R_Img_Tgt_S", "+=", "loss", "*", "lambda_R_Img", "\n", "i", "+=", "1", "\n", "\n", "\n", "", "self", ".", "loss_R_Img_Tgt_T", "=", "0.0", "\n", "i", "=", "0", "\n", "for", "(", "l_img", ",", "r_img", ",", "gen_depth", ")", "in", "zip", "(", "l_imgs", ",", "r_imgs", ",", "self", ".", "out_t", "[", "1", ":", "]", ")", ":", "\n", "            ", "loss", ",", "self", ".", "warp_tgt_img_t", "=", "self", ".", "criterionImgRecon", "(", "l_img", ",", "r_img", ",", "gen_depth", ",", "self", ".", "tgt_fb", "/", "2", "**", "(", "3", "-", "i", ")", ")", "\n", "self", ".", "loss_R_Img_Tgt_T", "+=", "loss", "*", "lambda_R_Img", "\n", "i", "+=", "1", "\n", "\n", "\n", "# smoothness", "\n", "", "i", "=", "0", "\n", "self", ".", "loss_S_Depth_Tgt_S", "=", "0.0", "\n", "for", "(", "gen_depth", ",", "img", ")", "in", "zip", "(", "self", ".", "out_s", "[", "1", ":", "]", ",", "l_imgs", ")", ":", "\n", "            ", "self", ".", "loss_S_Depth_Tgt_S", "+=", "self", ".", "criterionSmooth", "(", "gen_depth", ",", "img", ")", "*", "self", ".", "opt", ".", "lambda_S_Depth", "/", "2", "**", "i", "\n", "i", "+=", "1", "\n", "\n", "\n", "", "i", "=", "0", "\n", "self", ".", "loss_S_Depth_Tgt_T", "=", "0.0", "\n", "for", "(", "gen_depth", ",", "img", ")", "in", "zip", "(", "self", ".", "out_t", "[", "1", ":", "]", ",", "l_imgs", ")", ":", "\n", "            ", "self", ".", "loss_S_Depth_Tgt_T", "+=", "self", ".", "criterionSmooth", "(", "gen_depth", ",", "img", ")", "*", "self", ".", "opt", ".", "lambda_S_Depth", "/", "2", "**", "i", "\n", "i", "+=", "1", "\n", "\n", "\n", "# depth consistency", "\n", "", "self", ".", "loss_C_Depth_Tgt", "=", "0.0", "\n", "for", "(", "gen_depth1", ",", "gen_depth2", ")", "in", "zip", "(", "self", ".", "out_s", "[", "1", ":", "]", ",", "self", ".", "out_t", "[", "1", ":", "]", ")", ":", "\n", "            ", "self", ".", "loss_C_Depth_Tgt", "+=", "self", ".", "criterionDepthCons", "(", "gen_depth1", ",", "gen_depth2", ")", "*", "lambda_C_Depth", "\n", "\n", "\n", "", "self", ".", "loss_G", "=", "self", ".", "loss_G_Tgt", "+", "self", ".", "loss_cycle_Tgt", "+", "self", ".", "loss_idt_Src", "+", "self", ".", "loss_R_Img_Tgt_T", "+", "self", ".", "loss_R_Img_Tgt_S", "+", "self", ".", "loss_S_Depth_Tgt_T", "+", "self", ".", "loss_S_Depth_Tgt_S", "+", "self", ".", "loss_C_Depth_Tgt", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "self", ".", "tgt_gen_depth", "=", "(", "self", ".", "tgt_gen_depth_t", "+", "self", ".", "tgt_gen_depth_s", ")", "/", "2.0", "\n", "self", ".", "src_gen_depth", "=", "(", "self", ".", "src_gen_depth_t", "+", "self", ".", "src_gen_depth_s", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.optimize_parameters": [[281, 296], ["depth_model.DEPTHModel.forward", "depth_model.DEPTHModel.set_requires_grad", "depth_model.DEPTHModel.optimizer_G_trans.zero_grad", "depth_model.DEPTHModel.optimizer_G_task.zero_grad", "depth_model.DEPTHModel.backward_G", "depth_model.DEPTHModel.optimizer_G_trans.step", "depth_model.DEPTHModel.optimizer_G_task.step", "depth_model.DEPTHModel.set_requires_grad", "depth_model.DEPTHModel.optimizer_D.zero_grad", "depth_model.DEPTHModel.backward_D_Src", "depth_model.DEPTHModel.backward_D_Tgt", "depth_model.DEPTHModel.optimizer_D.step"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.backward_G", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_D_Src", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.depth_model.DEPTHModel.backward_D_Tgt"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_Src", ",", "self", ".", "netD_Tgt", "]", ",", "False", ")", "\n", "self", ".", "optimizer_G_trans", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G_trans", ".", "step", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "step", "(", ")", "\n", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_Src", ",", "self", ".", "netD_Tgt", "]", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D_Src", "(", ")", "\n", "self", ".", "backward_D_Tgt", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.seg_model.SEGModel.name": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'SEGModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.seg_model.SEGModel.modify_commandline_options": [[16, 30], ["parser.set_defaults", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "        ", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "\n", "            ", "parser", ".", "add_argument", "(", "'--g_src_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "help", "=", "'pretrained G_Src model'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--s_seg_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "help", "=", "'pretrained depth estimation model'", ")", "\n", "\n", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.seg_model.SEGModel.initialize": [[31, 74], ["base_model.BaseModel.initialize", "networks.init_net", "networks.init_net", "networks.UNetGenerator", "networks.ResGenerator", "seg_model.SEGModel.init_with_pretrained_model", "seg_model.SEGModel.init_with_pretrained_model", "seg_model.SEGModel.netG_Src.eval", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "seg_model.SEGModel.optimizers.append", "itertools.chain", "seg_model.SEGModel.netSeg_S.parameters"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.eval"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "loss_names", "=", "[", "'Seg'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'src_img'", ",", "'fake_tgt'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'pred'", ",", "'img'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'Seg_S'", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'Seg_S'", "]", "\n", "\n", "\n", "\n", "", "self", ".", "netSeg_S", "=", "networks", ".", "init_net", "(", "networks", ".", "UNetGenerator", "(", "norm", "=", "'batch'", ",", "output_nc", "=", "14", ")", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "self", ".", "netG_Src", "=", "networks", ".", "init_net", "(", "networks", ".", "ResGenerator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "\n", "\n", "            ", "self", ".", "init_with_pretrained_model", "(", "'G_Src'", ",", "self", ".", "opt", ".", "g_src_premodel", ")", "\n", "self", ".", "init_with_pretrained_model", "(", "'Seg_S'", ",", "self", ".", "opt", ".", "s_seg_premodel", ")", "\n", "self", ".", "netG_Src", ".", "eval", "(", ")", "\n", "\n", "\n", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# define loss functions", "\n", "            ", "self", ".", "criterionSeg", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "\n", "self", ".", "optimizer_G_task", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netSeg_S", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_task", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G_task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.seg_model.SEGModel.set_input": [[78, 86], ["data[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "src_img", "=", "data", "[", "'img'", "]", "\n", "self", ".", "labels", "=", "data", "[", "'label'", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "img", "=", "data", "[", "'img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.seg_model.SEGModel.forward": [[87, 97], ["seg_model.SEGModel.netG_Src().detach", "seg_model.SEGModel.netSeg_S", "seg_model.SEGModel.netSeg_S", "seg_model.SEGModel.netG_Src"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "\n", "            ", "self", ".", "fake_tgt", "=", "self", ".", "netG_Src", "(", "self", ".", "src_img", ")", ".", "detach", "(", ")", "\n", "self", ".", "out", "=", "self", ".", "netSeg_S", "(", "self", ".", "fake_tgt", ")", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "pred", "=", "self", ".", "netSeg_S", "(", "self", ".", "img", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.seg_model.SEGModel.backward_G": [[100, 120], ["utils.dataset_util.scale_pyramid", "zip", "seg_model.SEGModel.loss_G_Seg.backward", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "label.to.to.long", "label.to.to.to", "seg_model.SEGModel.criterionSeg", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.scale_pyramid"], ["", "", "def", "backward_G", "(", "self", ")", ":", "\n", "\n", "\n", "\n", "        ", "self", ".", "loss_Seg", "=", "0.0", "\n", "\n", "labels", "=", "dataset_util", ".", "scale_pyramid", "(", "torch", ".", "unsqueeze", "(", "self", ".", "labels", ",", "dim", "=", "1", ")", ".", "float", "(", ")", ",", "4", ")", "\n", "\n", "\n", "for", "(", "gen_seg", ",", "label", ")", "in", "zip", "(", "self", ".", "out", "[", "1", ":", "]", ",", "labels", ")", ":", "\n", "\n", "            ", "label", "=", "torch", ".", "squeeze", "(", "label", ")", "\n", "label", "=", "label", ".", "long", "(", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "loss_Seg", "+=", "self", ".", "criterionSeg", "(", "gen_seg", ",", "label", ")", "\n", "\n", "\n", "\n", "", "self", ".", "loss_G_Seg", "=", "self", ".", "loss_Seg", "\n", "self", ".", "loss_G_Seg", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.seg_model.SEGModel.optimize_parameters": [[121, 127], ["seg_model.SEGModel.forward", "seg_model.SEGModel.optimizer_G_task.zero_grad", "seg_model.SEGModel.backward_G", "seg_model.SEGModel.optimizer_G_task.step"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.__init__.find_model_using_name": [[5, 28], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], ["def", "find_model_using_name", "(", "model_name", ")", ":", "\n", "# Given the option --model [modelname],", "\n", "# the file \"models/modelname_model.py\"", "\n", "# will be imported.", "\n", "\n", "    ", "model_filename", "=", "\"models.\"", "+", "model_name", "+", "\"_model\"", "\n", "modellib", "=", "importlib", ".", "import_module", "(", "model_filename", ")", "\n", "\n", "# In the file, the class called ModelNameModel() will", "\n", "# be instantiated. It has to be a subclass of BaseModel,", "\n", "# and it is case-insensitive.", "\n", "model", "=", "None", "\n", "target_model_name", "=", "model_name", ".", "replace", "(", "'_'", ",", "''", ")", "+", "'model'", "\n", "for", "name", ",", "cls", "in", "modellib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "target_model_name", ".", "lower", "(", ")", "and", "issubclass", "(", "cls", ",", "BaseModel", ")", ":", "\n", "            ", "model", "=", "cls", "\n", "\n", "", "", "if", "model", "is", "None", ":", "\n", "        ", "print", "(", "\"In %s.py, there should be a subclass of BaseModel with class name that matches %s in lowercase.\"", "%", "(", "model_filename", ",", "target_model_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.__init__.get_option_setter": [[30, 33], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.__init__.find_model_using_name"], ["", "def", "get_option_setter", "(", "model_name", ")", ":", "\n", "    ", "model_class", "=", "find_model_using_name", "(", "model_name", ")", "\n", "return", "model_class", ".", "modify_commandline_options", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.__init__.create_model": [[35, 41], ["__init__.find_model_using_name", "find_model_using_name.", "model.initialize", "print", "model.name"], "function", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.__init__.find_model_using_name", "home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.name"], ["", "def", "create_model", "(", "opt", ")", ":", "\n", "    ", "model", "=", "find_model_using_name", "(", "opt", ".", "model", ")", "\n", "instance", "=", "model", "(", ")", "\n", "instance", ".", "initialize", "(", "opt", ")", "\n", "print", "(", "\"model [%s] was created\"", "%", "(", "instance", ".", "name", "(", ")", ")", ")", "\n", "return", "instance", "\n", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.name": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'FTModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.modify_commandline_options": [[14, 33], ["parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "        ", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_R_Depth'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for reconstruction loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_S_Depth'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'weight for smooth loss'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lambda_R_Img'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for image reconstruction'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lambda_con'", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "help", "=", "'weight for contrastive learning'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--g_tgt_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "help", "=", "'pretrained G_Tgt model'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--t_depth_premodel'", ",", "type", "=", "str", ",", "default", "=", "\" \"", ",", "help", "=", "'pretrained depth estimation model'", ")", "\n", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.initialize": [[34, 80], ["base_model.BaseModel.initialize", "networks.init_net", "networks.init_net", "networks.UNetGenerator", "networks.ResGenerator", "ft_model.FTModel.init_with_pretrained_model", "ft_model.FTModel.init_with_pretrained_model", "ft_model.FTModel.netG_Tgt.eval", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "networks.SmoothLoss", "networks.ReconLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "ft_model.FTModel.optimizers.append", "itertools.chain", "ft_model.FTModel.netG_Depth_T.parameters"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.init_net", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.eval"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "loss_names", "=", "[", "'R_Depth_Src'", ",", "'S_Depth_Tgt'", ",", "'R_Img_Tgt'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'src_img'", ",", "'src_real_depth'", ",", "'src_gen_depth'", ",", "'tgt_left_img'", ",", "'fake_src_left'", ",", "'tgt_gen_depth'", ",", "'warp_tgt_img'", ",", "'tgt_right_img'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'pred'", ",", "'img'", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Depth_T'", ",", "'G_Tgt'", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_Depth_T'", ",", "'G_Tgt'", "]", "\n", "\n", "", "self", ".", "netG_Depth_T", "=", "networks", ".", "init_net", "(", "networks", ".", "UNetGenerator", "(", "norm", "=", "'batch'", ")", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "self", ".", "netG_Tgt", "=", "networks", ".", "init_net", "(", "networks", ".", "ResGenerator", "(", "norm", "=", "'instance'", ")", ",", "init_type", "=", "'kaiming'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "init_with_pretrained_model", "(", "'G_Tgt'", ",", "self", ".", "opt", ".", "g_tgt_premodel", ")", "\n", "self", ".", "init_with_pretrained_model", "(", "'G_Depth_T'", ",", "self", ".", "opt", ".", "t_depth_premodel", ")", "\n", "self", ".", "netG_Tgt", ".", "eval", "(", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# define loss functions", "\n", "            ", "self", ".", "criterionDepthReg", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionSmooth", "=", "networks", ".", "SmoothLoss", "(", ")", "\n", "self", ".", "criterionImgRecon", "=", "networks", ".", "ReconLoss", "(", ")", "\n", "\n", "\n", "self", ".", "optimizer_G_task", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_Depth_T", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_task", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "\n", "\n", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G_task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.set_input": [[84, 96], ["[].to", "[].to", "[].to", "[].to", "input[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "src_real_depth", "=", "input", "[", "'src'", "]", "[", "'depth'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "src_img", "=", "input", "[", "'src'", "]", "[", "'img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tgt_left_img", "=", "input", "[", "'tgt'", "]", "[", "'left_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tgt_right_img", "=", "input", "[", "'tgt'", "]", "[", "'right_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tgt_fb", "=", "input", "[", "'tgt'", "]", "[", "'fb'", "]", "\n", "\n", "self", ".", "num", "=", "self", ".", "src_img", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "img", "=", "input", "[", "'left_img'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.forward": [[100, 115], ["ft_model.FTModel.netG_Tgt().detach", "ft_model.FTModel.netG_Depth_T", "ft_model.FTModel.out[].narrow", "ft_model.FTModel.out[].narrow", "ft_model.FTModel.netG_Tgt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ft_model.FTModel.netG_Depth_T", "ft_model.FTModel.netG_Tgt"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "\n", "            ", "self", ".", "fake_src_left", "=", "self", ".", "netG_Tgt", "(", "self", ".", "tgt_left_img", ")", ".", "detach", "(", ")", "\n", "self", ".", "out", "=", "self", ".", "netG_Depth_T", "(", "torch", ".", "cat", "(", "(", "self", ".", "src_img", ",", "self", ".", "fake_src_left", ")", ",", "0", ")", ")", "\n", "self", ".", "src_gen_depth", "=", "self", ".", "out", "[", "-", "1", "]", ".", "narrow", "(", "0", ",", "0", ",", "self", ".", "num", ")", "\n", "self", ".", "tgt_gen_depth", "=", "self", ".", "out", "[", "-", "1", "]", ".", "narrow", "(", "0", ",", "self", ".", "num", ",", "self", ".", "num", ")", "\n", "\n", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_trans", "=", "self", ".", "netG_Tgt", "(", "self", ".", "img", ")", "\n", "self", ".", "pred", "=", "self", ".", "netG_Depth_T", "(", "self", ".", "img_trans", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.backward_G": [[119, 152], ["utils.dataset_util.scale_pyramid", "zip", "utils.dataset_util.scale_pyramid", "utils.dataset_util.scale_pyramid", "zip", "zip", "ft_model.FTModel.loss_G_Depth.backward", "ft_model.FTModel.criterionImgRecon", "ft_model.FTModel.criterionDepthReg", "ft_model.FTModel.criterionSmooth"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.scale_pyramid", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.scale_pyramid", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.scale_pyramid"], ["", "", "def", "backward_G", "(", "self", ")", ":", "\n", "\n", "        ", "lambda_R_Depth", "=", "self", ".", "opt", ".", "lambda_R_Depth", "\n", "lambda_R_Img", "=", "self", ".", "opt", ".", "lambda_R_Img", "\n", "lambda_S_Depth", "=", "self", ".", "opt", ".", "lambda_S_Depth", "\n", "\n", "lambda_con", "=", "0.3", "\n", "\n", "self", ".", "loss_R_Depth_Src", "=", "0.0", "\n", "real_depths", "=", "dataset_util", ".", "scale_pyramid", "(", "self", ".", "src_real_depth", ",", "4", ")", "\n", "for", "(", "gen_depth", ",", "real_depth", ")", "in", "zip", "(", "self", ".", "out", "[", "1", ":", "]", ",", "real_depths", ")", ":", "\n", "            ", "self", ".", "loss_R_Depth_Src", "+=", "self", ".", "criterionDepthReg", "(", "gen_depth", "[", ":", "self", ".", "num", ",", ":", ",", ":", ",", ":", "]", ",", "real_depth", ")", "*", "lambda_R_Depth", "\n", "\n", "\n", "", "l_imgs", "=", "dataset_util", ".", "scale_pyramid", "(", "self", ".", "tgt_left_img", ",", "4", ")", "\n", "r_imgs", "=", "dataset_util", ".", "scale_pyramid", "(", "self", ".", "tgt_right_img", ",", "4", ")", "\n", "self", ".", "loss_R_Img_Tgt", "=", "0.0", "\n", "i", "=", "0", "\n", "for", "(", "l_img", ",", "r_img", ",", "gen_depth", ")", "in", "zip", "(", "l_imgs", ",", "r_imgs", ",", "self", ".", "out", "[", "1", ":", "]", ")", ":", "\n", "            ", "loss", ",", "self", ".", "warp_tgt_img", "=", "self", ".", "criterionImgRecon", "(", "l_img", ",", "r_img", ",", "gen_depth", "[", "self", ".", "num", ":", ",", ":", ",", ":", ",", ":", "]", ",", "self", ".", "tgt_fb", "/", "2", "**", "(", "3", "-", "i", ")", ")", "\n", "self", ".", "loss_R_Img_Tgt", "+=", "loss", "*", "lambda_R_Img", "\n", "i", "+=", "1", "\n", "\n", "\n", "", "i", "=", "0", "\n", "self", ".", "loss_S_Depth_Tgt", "=", "0.0", "\n", "for", "(", "gen_depth", ",", "img", ")", "in", "zip", "(", "self", ".", "out", "[", "1", ":", "]", ",", "l_imgs", ")", ":", "\n", "            ", "self", ".", "loss_S_Depth_Tgt", "+=", "self", ".", "criterionSmooth", "(", "gen_depth", "[", "self", ".", "num", ":", ",", ":", ",", ":", ",", ":", "]", ",", "img", ")", "*", "self", ".", "opt", ".", "lambda_S_Depth", "/", "2", "**", "i", "\n", "i", "+=", "1", "\n", "\n", "\n", "", "self", ".", "loss_G_Depth", "=", "self", ".", "loss_R_Img_Tgt", "+", "self", ".", "loss_S_Depth_Tgt", "+", "self", ".", "loss_R_Depth_Src", "\n", "self", ".", "loss_G_Depth", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.optimize_parameters": [[153, 159], ["ft_model.FTModel.forward", "ft_model.FTModel.optimizer_G_task.zero_grad", "ft_model.FTModel.backward_G", "ft_model.FTModel.optimizer_G_task.step"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.ft_model.FTModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G_task", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.__init__": [[9, 11], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# modify parser to add command line options,", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.modify_commandline_options": [[13, 16], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.name": [[17, 19], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.initialize": [[20, 31], ["os.path.join", "torch.device", "torch.device"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "expr_name", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "self", ".", "visual_names", "=", "[", "]", "\n", "self", ".", "image_paths", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.set_input": [[32, 34], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward": [[35, 37], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.setup": [[39, 45], ["base_model.BaseModel.load_networks", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.dsshim0125_dacl.models.networks.get_scheduler"], ["", "def", "setup", "(", "self", ",", "opt", ",", "parser", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "schedulers", "=", "[", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", "for", "optimizer", "in", "self", ".", "optimizers", "]", "\n", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "self", ".", "load_networks", "(", "opt", ".", "which_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.eval": [[47, 52], ["isinstance", "getattr", "getattr.eval"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.eval"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.test": [[55, 58], ["torch.no_grad", "base_model.BaseModel.forward"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.forward"], ["", "", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.get_image_paths": [[60, 62], ["None"], "methods", ["None"], ["", "", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.optimize_parameters": [[63, 65], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.update_learning_rate": [[67, 74], ["print", "scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate = %.7f'", "%", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.get_current_visuals": [[76, 82], ["collections.OrderedDict", "isinstance", "getattr"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "visual_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "visual_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "visual_ret", "[", "name", "]", "=", "getattr", "(", "self", ",", "name", ")", "\n", "", "", "return", "visual_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.get_current_losses": [[84, 91], ["collections.OrderedDict", "isinstance", "float", "getattr"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "# float(...) works for both scalar tensor and float number", "\n", "                ", "errors_ret", "[", "name", "]", "=", "float", "(", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", ")", "\n", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.save_networks": [[93, 105], ["isinstance", "os.path.join", "getattr", "torch.cuda.is_available", "torch.save", "getattr.cuda", "torch.save", "len", "getattr.module.cpu().state_dict", "getattr.cpu().state_dict", "getattr.module.cpu", "getattr.cpu"], "methods", ["None"], ["", "def", "save_networks", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "which_epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "module", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.__patch_instance_norm_state_dict": [[106, 118], ["len", "base_model.BaseModel.__patch_instance_norm_state_dict", "module.__class__.__name__.startswith", "module.__class__.__name__.startswith", "state_dict.pop", "getattr", "getattr", "state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "", "", "def", "__patch_instance_norm_state_dict", "(", "self", ",", "state_dict", ",", "module", ",", "keys", ",", "i", "=", "0", ")", ":", "\n", "        ", "key", "=", "keys", "[", "i", "]", "\n", "if", "i", "+", "1", "==", "len", "(", "keys", ")", ":", "# at the end, pointing to a parameter/buffer", "\n", "            ", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'running_mean'", "or", "key", "==", "'running_var'", ")", ":", "\n", "                ", "if", "getattr", "(", "module", ",", "key", ")", "is", "None", ":", "\n", "                    ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'num_batches_tracked'", ")", ":", "\n", "                ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "getattr", "(", "module", ",", "key", ")", ",", "keys", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.init_with_pretrained_model": [[119, 132], ["getattr", "isinstance", "list", "getattr.load_state_dict", "print", "torch.load", "torch.load.keys", "base_model.BaseModel.__patch_instance_norm_state_dict", "key.split", "str"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "def", "init_with_pretrained_model", "(", "self", ",", "model_name", ",", "pretrained", "=", "\"\"", ")", ":", "\n", "\n", "        ", "if", "not", "pretrained", "==", "\" \"", ":", "\n", "            ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "model_name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "net", "=", "net", ".", "module", "\n", "state_dict", "=", "torch", ".", "load", "(", "pretrained", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "del", "state_dict", ".", "_metadata", "\n", "\n", "", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                 ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "net", ",", "key", ".", "split", "(", "'.'", ")", ")", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "\"initialize {} with {}\"", ".", "format", "(", "model_name", ",", "pretrained", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.load_networks": [[134, 153], ["isinstance", "os.path.join", "getattr", "isinstance", "print", "torch.load", "list", "getattr.load_state_dict", "torch.load.keys", "base_model.BaseModel.__patch_instance_norm_state_dict", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "def", "load_networks", "(", "self", ",", "which_epoch", ")", ":", "\n", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "'%s_net_%s.pth'", "%", "(", "which_epoch", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net", "=", "net", ".", "module", "\n", "", "print", "(", "'loading the model from %s'", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "del", "state_dict", ".", "_metadata", "\n", "\n", "# patch InstanceNorm checkpoints prior to 0.4", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "# need to copy keys here because we mutate in loop", "\n", "                    ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "net", ",", "key", ".", "split", "(", "'.'", ")", ")", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.print_networks": [[156, 168], ["print", "print", "isinstance", "getattr", "getattr.parameters", "print", "param.numel", "print"], "methods", ["None"], ["", "", "", "def", "print_networks", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "net", ")", "\n", "", "print", "(", "'[Network %s] Total number of parameters : %.3f M'", "%", "(", "name", ",", "num_params", "/", "1e6", ")", ")", "\n", "", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.models.base_model.BaseModel.set_requires_grad": [[170, 177], ["isinstance", "net.parameters"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.seg_transform.RandomHorizontalFlip.__init__": [[68, 70], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "None", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.seg_transform.RandomHorizontalFlip.__call__": [[71, 76], ["img.transpose", "label.transpose", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "if", "(", "self", ".", "prob", "is", "None", "and", "random", ".", "random", "(", ")", "<", "0.5", ")", "or", "self", ".", "prob", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "label", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.seg_transform.SegRandomImgAugment.__init__": [[81, 84], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", "=", "(", "192", ",", "640", ")", ")", ":", "\n", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.seg_transform.SegRandomImgAugment.__call__": [[85, 157], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.Compose.", "random.random", "seg_transform.RandomHorizontalFlip", "RandomHorizontalFlip.", "numpy.array", "numpy.zeros", "range", "torch.LongTensor.astype", "torch.LongTensor", "int", "int", "random.random", "random.uniform", "random.uniform", "random.uniform", "torchvision.adjust_brightness", "torchvision.adjust_contrast", "torchvision.adjust_saturation", "len", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "math.ceil", "math.ceil", "len", "numpy.array().reshape", "numpy.mean().astype", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "numpy.array().reshape", "numpy.mean().astype", "numpy.array", "numpy.mean", "numpy.array", "numpy.mean"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "img", "=", "inputs", "[", "0", "]", "\n", "label", "=", "inputs", "[", "1", "]", "\n", "\n", "h", "=", "img", ".", "height", "\n", "w", "=", "img", ".", "width", "\n", "w0", "=", "w", "\n", "\n", "# print(h, w, self.size)", "\n", "\n", "if", "self", ".", "size", "==", "[", "-", "1", "]", ":", "\n", "            ", "divisor", "=", "32.0", "\n", "h", "=", "int", "(", "math", ".", "ceil", "(", "h", "/", "divisor", ")", "*", "divisor", ")", "\n", "w", "=", "int", "(", "math", ".", "ceil", "(", "w", "/", "divisor", ")", "*", "divisor", ")", "\n", "self", ".", "size", "=", "(", "h", ",", "w", ")", "\n", "\n", "", "scale_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "]", ")", "\n", "scale_transform2", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", "]", ")", "\n", "\n", "\n", "img", "=", "scale_transform2", "(", "img", ")", "\n", "\n", "label", "=", "scale_transform", "(", "label", ")", "\n", "\n", "\n", "flip_prob", "=", "random", ".", "random", "(", ")", "\n", "flip_transform", "=", "RandomHorizontalFlip", "(", "flip_prob", ")", "\n", "\n", "img", ",", "label", "=", "flip_transform", "(", "img", ",", "label", ")", "\n", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "brightness", "=", "random", ".", "uniform", "(", "0.8", ",", "1.0", ")", "\n", "contrast", "=", "random", ".", "uniform", "(", "0.8", ",", "1.0", ")", "\n", "saturation", "=", "random", ".", "uniform", "(", "0.8", ",", "1.0", ")", "\n", "\n", "img", "=", "F", ".", "adjust_brightness", "(", "img", ",", "brightness", ")", "\n", "img", "=", "F", ".", "adjust_contrast", "(", "img", ",", "contrast", ")", "\n", "img", "=", "F", ".", "adjust_saturation", "(", "img", ",", "saturation", ")", "\n", "\n", "\n", "\n", "\n", "", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "\n", "h", ",", "w", ",", "c", "=", "label", ".", "shape", "\n", "label_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "\n", "for", "class_idx", "in", "range", "(", "1", ",", "len", "(", "class_list", ")", ")", ":", "\n", "\n", "            ", "if", "not", "len", "(", "seg_rgb_dict", "[", "class_list", "[", "class_idx", "]", "]", ")", ">", "1", ":", "\n", "\n", "                ", "new_map", "=", "(", "label", "==", "np", ".", "array", "(", "seg_rgb_dict", "[", "class_list", "[", "class_idx", "]", "]", ")", ".", "reshape", "(", "3", ")", ")", "\n", "new_map", "=", "np", ".", "mean", "(", "new_map", ",", "axis", "=", "2", ")", ".", "astype", "(", "int", ")", "*", "class_idx", "\n", "\n", "label_map", "+=", "new_map", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "for", "label_rgb", "in", "seg_rgb_dict", "[", "class_list", "[", "class_idx", "]", "]", ":", "\n", "                    ", "new_map", "=", "(", "label", "==", "np", ".", "array", "(", "label_rgb", ")", ".", "reshape", "(", "3", ")", ")", "\n", "new_map", "=", "np", ".", "mean", "(", "new_map", ",", "axis", "=", "2", ")", ".", "astype", "(", "int", ")", "*", "class_idx", "\n", "\n", "label_map", "+=", "new_map", "\n", "\n", "", "", "", "label_map", "=", "label_map", ".", "astype", "(", "int", ")", "\n", "\n", "img", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "[", ".5", ",", ".5", ",", ".5", "]", ",", "[", ".5", ",", ".5", ",", ".5", "]", ")", "]", ")", "(", "img", ")", "\n", "label_map", "=", "torch", ".", "LongTensor", "(", "label_map", ")", "\n", "\n", "return", "img", ",", "label_map", "", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.transform.RandomHorizontalFlip.__init__": [[19, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "None", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.transform.RandomHorizontalFlip.__call__": [[22, 27], ["img.transpose", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "(", "self", ".", "prob", "is", "None", "and", "random", ".", "random", "(", ")", "<", "0.5", ")", "or", "self", ".", "prob", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.transform.RandomVerticalFlip.__init__": [[36, 38], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "None", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.transform.RandomVerticalFlip.__call__": [[39, 44], ["img.transpose", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "(", "self", ".", "prob", "is", "None", "and", "random", ".", "random", "(", ")", "<", "0.5", ")", "or", "self", ".", "prob", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.transform.RandomPairedCrop.__init__": [[47, 49], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.transform.RandomPairedCrop.get_params": [[50, 68], ["random.randint", "random.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "output_size", ")", ":", "\n", "        ", "\"\"\"\n        Get parameters for ``crop`` for a random crop.\n        Args:\n        img (PIL Image): Image to be cropped.\n        output_size (tuple): Expected output size of the crop.\n        Returns:\n        tuple: params (i, j, h, w) to be passed to ``crop`` for random crop.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "output_size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "0", ",", "0", ",", "h", ",", "w", "\n", "\n", "", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.transform.RandomPairedCrop.__call__": [[69, 83], ["transform.RandomPairedCrop.get_params", "torchvision.crop", "torchvision.crop", "torchvision.crop", "torchvision.crop", "torchvision.crop", "torchvision.crop"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.data.transform.RandomPairedCrop.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img1", "=", "img", "[", "0", "]", "\n", "img2", "=", "img", "[", "1", "]", "\n", "depth", "=", "img", "[", "2", "]", "\n", "\n", "i", ",", "j", ",", "th", ",", "tw", "=", "self", ".", "get_params", "(", "img1", ",", "self", ".", "size", ")", "\n", "\n", "img1", "=", "F", ".", "crop", "(", "img1", ",", "i", ",", "j", ",", "th", ",", "tw", ")", "\n", "\n", "if", "depth", "is", "not", "None", ":", "\n", "            ", "depth", "=", "F", ".", "crop", "(", "depth", ",", "i", ",", "j", ",", "th", ",", "tw", ")", "\n", "", "if", "img2", "is", "not", "None", ":", "\n", "            ", "img2", "=", "F", ".", "crop", "(", "img2", ",", "i", ",", "j", ",", "th", ",", "tw", ")", "\n", "", "return", "img1", ",", "img2", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.transform.RandomImgAugment.__init__": [[88, 94], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "no_flip", ",", "no_rotation", ",", "no_augment", ",", "size", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "flip", "=", "not", "no_flip", "\n", "self", ".", "augment", "=", "not", "no_augment", "\n", "self", ".", "rotation", "=", "not", "no_rotation", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.transform.RandomImgAugment.__call__": [[96, 188], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose.", "int", "int", "torchvision.Compose.", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose.", "random.random", "torchvision.Compose", "torchvision.Compose", "numpy.array", "torchvision.Resize", "torchvision.Resize", "float", "float", "numpy.array", "PIL.Image.fromarray", "torchvision.Compose.", "torchvision.Compose.", "random.random", "torchvision.rotate", "torchvision.rotate", "random.random", "random.uniform", "random.uniform", "random.uniform", "torchvision.adjust_brightness", "torchvision.adjust_brightness", "torchvision.adjust_contrast", "torchvision.adjust_contrast", "torchvision.adjust_saturation", "torchvision.adjust_saturation", "math.ceil", "math.ceil", "torchvision.Resize", "torchvision.Resize", "transform.RandomHorizontalFlip", "torchvision.Compose.", "torchvision.Compose.", "random.randrange", "torchvision.rotate", "torchvision.rotate", "torchvision.rotate", "torchvision.rotate", "torchvision.adjust_brightness", "torchvision.adjust_brightness", "torchvision.adjust_contrast", "torchvision.adjust_contrast", "torchvision.adjust_saturation", "torchvision.adjust_saturation"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "img1", "=", "inputs", "[", "0", "]", "\n", "img2", "=", "inputs", "[", "1", "]", "\n", "depth", "=", "inputs", "[", "2", "]", "\n", "phase", "=", "inputs", "[", "3", "]", "\n", "fb", "=", "inputs", "[", "4", "]", "\n", "\n", "h", "=", "img1", ".", "height", "\n", "w", "=", "img1", ".", "width", "\n", "w0", "=", "w", "\n", "\n", "#print(h, w, self.size)", "\n", "\n", "if", "self", ".", "size", "==", "[", "-", "1", "]", ":", "\n", "            ", "divisor", "=", "32.0", "\n", "h", "=", "int", "(", "math", ".", "ceil", "(", "h", "/", "divisor", ")", "*", "divisor", ")", "\n", "w", "=", "int", "(", "math", ".", "ceil", "(", "w", "/", "divisor", ")", "*", "divisor", ")", "\n", "self", ".", "size", "=", "(", "h", ",", "w", ")", "\n", "\n", "", "scale_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", "]", ")", "\n", "\n", "img1", "=", "scale_transform", "(", "img1", ")", "\n", "if", "img2", "is", "not", "None", ":", "\n", "            ", "img2", "=", "scale_transform", "(", "img2", ")", "\n", "\n", "", "if", "fb", "is", "not", "None", ":", "\n", "\n", "            ", "scale", "=", "float", "(", "self", ".", "size", "[", "1", "]", ")", "/", "float", "(", "w0", ")", "\n", "fb", "=", "fb", "*", "scale", "\n", "\n", "", "if", "phase", "==", "'test'", ":", "\n", "            ", "return", "img1", ",", "img2", ",", "depth", ",", "fb", "\n", "\n", "", "if", "depth", "is", "not", "None", ":", "\n", "           ", "scale_transform_d", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", "]", ")", "\n", "depth", "=", "scale_transform_d", "(", "depth", ")", "\n", "\n", "", "if", "not", "self", ".", "size", "==", "0", ":", "\n", "\n", "            ", "if", "depth", "is", "not", "None", ":", "\n", "                ", "arr_depth", "=", "np", ".", "array", "(", "depth", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "arr_depth", "/=", "65535.0", "# cm->m, /10", "\n", "\n", "arr_depth", "[", "arr_depth", "<", "0.0", "]", "=", "0.0", "\n", "depth", "=", "Image", ".", "fromarray", "(", "arr_depth", ",", "'F'", ")", "\n", "\n", "", "", "if", "self", ".", "flip", "and", "not", "(", "img2", "is", "not", "None", "and", "depth", "is", "not", "None", ")", ":", "\n", "\n", "            ", "flip_prob", "=", "random", ".", "random", "(", ")", "\n", "flip_transform", "=", "transforms", ".", "Compose", "(", "[", "RandomHorizontalFlip", "(", "flip_prob", ")", "]", ")", "\n", "if", "img2", "is", "None", ":", "\n", "                ", "img1", "=", "flip_transform", "(", "img1", ")", "\n", "", "else", ":", "\n", "                ", "if", "flip_prob", "<", "0.5", ":", "\n", "                    ", "img1_", "=", "img1", "\n", "img2_", "=", "img2", "\n", "img1", "=", "flip_transform", "(", "img2_", ")", "\n", "img2", "=", "flip_transform", "(", "img1_", ")", "\n", "", "", "if", "depth", "is", "not", "None", ":", "\n", "                ", "depth", "=", "flip_transform", "(", "depth", ")", "\n", "\n", "", "", "if", "self", ".", "rotation", "and", "not", "(", "img2", "is", "not", "None", "and", "depth", "is", "not", "None", ")", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "degree", "=", "random", ".", "randrange", "(", "-", "500", ",", "500", ")", "/", "100", "\n", "img1", "=", "F", ".", "rotate", "(", "img1", ",", "degree", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "depth", "is", "not", "None", ":", "\n", "\n", "                    ", "depth", "=", "F", ".", "rotate", "(", "depth", ",", "degree", ",", "Image", ".", "BILINEAR", ")", "\n", "", "if", "img2", "is", "not", "None", ":", "\n", "                    ", "img2", "=", "F", ".", "rotate", "(", "img2", ",", "degree", ",", "Image", ".", "BICUBIC", ")", "\n", "", "", "", "if", "depth", "is", "not", "None", ":", "\n", "            ", "depth", "=", "np", ".", "array", "(", "depth", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "depth", "=", "depth", "*", "2.0", "\n", "depth", "-=", "1.0", "\n", "\n", "", "if", "self", ".", "augment", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "\n", "                ", "brightness", "=", "random", ".", "uniform", "(", "0.8", ",", "1.0", ")", "\n", "contrast", "=", "random", ".", "uniform", "(", "0.8", ",", "1.0", ")", "\n", "saturation", "=", "random", ".", "uniform", "(", "0.8", ",", "1.0", ")", "\n", "\n", "img1", "=", "F", ".", "adjust_brightness", "(", "img1", ",", "brightness", ")", "\n", "img1", "=", "F", ".", "adjust_contrast", "(", "img1", ",", "contrast", ")", "\n", "img1", "=", "F", ".", "adjust_saturation", "(", "img1", ",", "saturation", ")", "\n", "\n", "if", "img2", "is", "not", "None", ":", "\n", "                    ", "img2", "=", "F", ".", "adjust_brightness", "(", "img2", ",", "brightness", ")", "\n", "img2", "=", "F", ".", "adjust_contrast", "(", "img2", ",", "contrast", ")", "\n", "img2", "=", "F", ".", "adjust_saturation", "(", "img2", ",", "saturation", ")", "\n", "", "", "", "return", "img1", ",", "img2", ",", "depth", ",", "fb", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.transform.DepthToTensor.__call__": [[190, 195], ["numpy.array", "torch.from_numpy().float", "torch.from_numpy", "numpy.array.reshape"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n", "# tensors = [], [0, 1] -> [-1, 1]", "\n", "        ", "arr_input", "=", "np", ".", "array", "(", "input", ")", "\n", "tensors", "=", "torch", ".", "from_numpy", "(", "arr_input", ".", "reshape", "(", "(", "1", ",", "arr_input", ".", "shape", "[", "0", "]", ",", "arr_input", ".", "shape", "[", "1", "]", ")", ")", ")", ".", "float", "(", ")", "\n", "return", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.__init__.create_test_dataloader": [[8, 29], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "data.datasets.get_dataset", "torch.utils.data.DataLoader", "data.transform.RandomImgAugment", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "data.transform.DepthToTensor", "int"], "function", ["home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.get_dataset"], ["# will be imported.", "\n", "\n", "    ", "model_filename", "=", "\"models.\"", "+", "model_name", "+", "\"_model\"", "\n", "modellib", "=", "importlib", ".", "import_module", "(", "model_filename", ")", "\n", "\n", "# In the file, the class called ModelNameModel() will", "\n", "# be instantiated. It has to be a subclass of BaseModel,", "\n", "# and it is case-insensitive.", "\n", "model", "=", "None", "\n", "target_model_name", "=", "model_name", ".", "replace", "(", "'_'", ",", "''", ")", "+", "'model'", "\n", "for", "name", ",", "cls", "in", "modellib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "target_model_name", ".", "lower", "(", ")", "and", "issubclass", "(", "cls", ",", "BaseModel", ")", ":", "\n", "            ", "model", "=", "cls", "\n", "\n", "", "", "if", "model", "is", "None", ":", "\n", "        ", "print", "(", "\"In %s.py, there should be a subclass of BaseModel with class name that matches %s in lowercase.\"", "%", "(", "model_filename", ",", "target_model_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "return", "model", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.__init__.create_train_dataloader": [[30, 67], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "data.datasets.get_dataset", "data.datasets.get_dataset", "torch.utils.data.DataLoader", "data.transform.RandomImgAugment", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "data.datasets.ConcatDataset", "data.transform.DepthToTensor", "int"], "function", ["home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.get_dataset", "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.get_dataset"], ["", "def", "get_option_setter", "(", "model_name", ")", ":", "\n", "    ", "model_class", "=", "find_model_using_name", "(", "model_name", ")", "\n", "return", "model_class", ".", "modify_commandline_options", "\n", "\n", "\n", "", "def", "create_model", "(", "opt", ")", ":", "\n", "    ", "model", "=", "find_model_using_name", "(", "opt", ".", "model", ")", "\n", "instance", "=", "model", "(", ")", "\n", "instance", ".", "initialize", "(", "opt", ")", "\n", "print", "(", "\"model [%s] was created\"", "%", "(", "instance", ".", "name", "(", ")", ")", ")", "\n", "return", "instance", "\n", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.__init__.create_seg_dataloader": [[69, 87], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "data.datasets.SegDataset", "torch.utils.data.DataLoader", "data.transform.RandomImgAugment", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "data.seg_transform.SegRandomImgAugment", "data.transform.DepthToTensor", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.__init__.create_dataloader": [[89, 99], ["__init__.create_seg_dataloader", "__init__.create_test_dataloader", "__init__.create_train_dataloader"], "function", ["home.repos.pwc.inspect_result.dsshim0125_dacl.data.__init__.create_seg_dataloader", "home.repos.pwc.inspect_result.dsshim0125_dacl.data.__init__.create_test_dataloader", "home.repos.pwc.inspect_result.dsshim0125_dacl.data.__init__.create_train_dataloader"], []], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.ConcatDataset.__init__": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "datasets", ")", ":", "\n", "        ", "self", ".", "datasets", "=", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.ConcatDataset.__getitem__": [[20, 26], ["dd.update"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "dd", "=", "{", "}", "\n", "{", "dd", ".", "update", "(", "d", "[", "i", "]", ")", "for", "d", "in", "self", ".", "datasets", "if", "d", "is", "not", "None", "}", "\n", "\n", "return", "dd", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.ConcatDataset.__len__": [[27, 29], ["max", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "len", "(", "d", ")", "for", "d", "in", "self", ".", "datasets", "if", "d", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.VKittiDataset.__init__": [[31, 54], ["open", "f.read().split", "os.join", "os.join", "torch.utils.data.split", "datasets.VKittiDataset.files.append", "f.read", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'./datasets'", ",", "data_file", "=", "'src_train.list'", ",", "\n", "phase", "=", "'train'", ",", "img_transform", "=", "None", ",", "depth_transform", "=", "None", ",", "\n", "joint_transform", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "data_file", "=", "data_file", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "img_transform", "=", "img_transform", "\n", "self", ".", "depth_transform", "=", "depth_transform", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "data_file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data_list", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "for", "data", "in", "data_list", ":", "\n", "\n", "                ", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "data_info", "=", "data", ".", "split", "(", "' '", ")", "\n", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"rgb\"", ":", "data_info", "[", "0", "]", ",", "\n", "\"depth\"", ":", "data_info", "[", "1", "]", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.VKittiDataset.__len__": [[58, 60], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.VKittiDataset.read_data": [[61, 70], ["os.exists", "os.exists", "PIL.Image.open().convert", "os.exists", "os.exists", "PIL.Image.open", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "PIL.Image.open", "os.join", "os.join"], "methods", ["None"], ["", "def", "read_data", "(", "self", ",", "datafiles", ")", ":", "\n", "\n", "        ", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'rgb'", "]", ")", ")", ",", "\"Image does not exist\"", "\n", "rgb", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'rgb'", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'depth'", "]", ")", ")", ",", "\"Depth does not exist\"", "\n", "depth", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'depth'", "]", ")", ")", "\n", "\n", "return", "rgb", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.VKittiDataset.__getitem__": [[71, 103], ["datasets.VKittiDataset.read_data", "random.randint", "datasets.VKittiDataset.img_transform", "datasets.VKittiDataset.depth_transform", "len", "len", "datasets.VKittiDataset.joint_transform", "datasets.VKittiDataset.joint_transform", "len"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.StereoDataset.read_data"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", "-", "1", ")", "\n", "", "if", "index", ">", "len", "(", "self", ")", "-", "1", ":", "\n", "            ", "index", "=", "index", "%", "len", "(", "self", ")", "\n", "", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "img", ",", "depth", "=", "self", ".", "read_data", "(", "datafiles", ")", "\n", "\n", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "                ", "img", ",", "_", ",", "depth", ",", "_", "=", "self", ".", "joint_transform", "(", "(", "img", ",", "None", ",", "depth", ",", "self", ".", "phase", ",", "None", ")", ")", "\n", "", "else", ":", "\n", "                ", "img", ",", "_", ",", "depth", ",", "_", "=", "self", ".", "joint_transform", "(", "(", "img", ",", "None", ",", "depth", ",", "'test'", ",", "None", ")", ")", "\n", "\n", "", "", "if", "self", ".", "img_transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "img_transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "depth_transform", "is", "not", "None", ":", "\n", "            ", "depth", "=", "self", ".", "depth_transform", "(", "depth", ")", "\n", "\n", "", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "data", "=", "{", "}", "\n", "data", "[", "'img'", "]", "=", "img", "\n", "data", "[", "'depth'", "]", "=", "depth", "\n", "return", "data", "\n", "\n", "", "data", "=", "{", "}", "\n", "if", "img", "is", "not", "None", ":", "\n", "            ", "data", "[", "'img'", "]", "=", "img", "\n", "", "if", "depth", "is", "not", "None", ":", "\n", "            ", "data", "[", "'depth'", "]", "=", "depth", "\n", "", "return", "{", "'src'", ":", "data", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.KittiDataset.__init__": [[105, 129], ["open", "f.read().split", "os.join", "os.join", "torch.utils.data.split", "datasets.KittiDataset.files.append", "f.read", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'./datasets'", ",", "data_file", "=", "'tgt_train.list'", ",", "phase", "=", "'train'", ",", "\n", "img_transform", "=", "None", ",", "joint_transform", "=", "None", ",", "depth_transform", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "data_file", "=", "data_file", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "img_transform", "=", "img_transform", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "depth_transform", "=", "depth_transform", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "data_file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data_list", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "for", "data", "in", "data_list", ":", "\n", "                ", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "data_info", "=", "data", ".", "split", "(", "' '", ")", "\n", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"l_rgb\"", ":", "data_info", "[", "0", "]", ",", "\n", "\"r_rgb\"", ":", "data_info", "[", "1", "]", ",", "\n", "\"cam_intrin\"", ":", "data_info", "[", "2", "]", ",", "\n", "\"depth\"", ":", "data_info", "[", "3", "]", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.KittiDataset.__len__": [[131, 133], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.KittiDataset.read_data": [[134, 151], ["os.exists", "os.exists", "PIL.Image.open().convert", "os.exists", "os.exists", "PIL.Image.open().convert", "utils.dataset_util.KITTI", "os.exists", "os.exists", "utils.dataset_util.KITTI.get_fb", "os.exists", "os.exists", "utils.dataset_util.KITTI.get_depth", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "PIL.Image.open", "PIL.Image.open", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.get_fb", "home.repos.pwc.inspect_result.dsshim0125_dacl.utils.dataset_util.KITTI.get_depth"], ["", "def", "read_data", "(", "self", ",", "datafiles", ")", ":", "\n", "#print(osp.join(self.root, datafiles['l_rgb']))", "\n", "        ", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'l_rgb'", "]", ")", ")", ",", "\"Image does not exist\"", "\n", "l_rgb", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'l_rgb'", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "w", "=", "l_rgb", ".", "size", "[", "0", "]", "\n", "h", "=", "l_rgb", ".", "size", "[", "1", "]", "\n", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'r_rgb'", "]", ")", ")", ",", "\"Image does not exist\"", "\n", "r_rgb", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'r_rgb'", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "kitti", "=", "KITTI", "(", ")", "\n", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'cam_intrin'", "]", ")", ")", ",", "\"Camera info does not exist\"", "\n", "fb", "=", "kitti", ".", "get_fb", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'cam_intrin'", "]", ")", ")", "\n", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'depth'", "]", ")", ")", ",", "\"Depth does not exist\"", "\n", "depth", "=", "kitti", ".", "get_depth", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'cam_intrin'", "]", ")", ",", "\n", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'depth'", "]", ")", ",", "[", "h", ",", "w", "]", ",", "interp", "=", "False", ")", "\n", "\n", "return", "l_rgb", ",", "r_rgb", ",", "fb", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.KittiDataset.__getitem__": [[152, 188], ["datasets.KittiDataset.read_data", "random.randint", "datasets.KittiDataset.img_transform", "len", "len", "datasets.KittiDataset.joint_transform", "datasets.KittiDataset.joint_transform", "datasets.KittiDataset.img_transform", "len"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.StereoDataset.read_data"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", "-", "1", ")", "\n", "", "if", "index", ">", "len", "(", "self", ")", "-", "1", ":", "\n", "            ", "index", "=", "index", "%", "len", "(", "self", ")", "\n", "", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "l_img", ",", "r_img", ",", "fb", ",", "depth", "=", "self", ".", "read_data", "(", "datafiles", ")", "\n", "\n", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "                ", "l_img", ",", "r_img", ",", "_", ",", "fb", "=", "self", ".", "joint_transform", "(", "(", "l_img", ",", "r_img", ",", "None", ",", "'train'", ",", "fb", ")", ")", "\n", "", "else", ":", "\n", "                ", "l_img", ",", "r_img", ",", "_", ",", "fb", "=", "self", ".", "joint_transform", "(", "(", "l_img", ",", "r_img", ",", "None", ",", "'test'", ",", "fb", ")", ")", "\n", "\n", "", "", "if", "self", ".", "img_transform", "is", "not", "None", ":", "\n", "            ", "l_img", "=", "self", ".", "img_transform", "(", "l_img", ")", "\n", "if", "r_img", "is", "not", "None", ":", "\n", "                ", "r_img", "=", "self", ".", "img_transform", "(", "r_img", ")", "\n", "\n", "", "", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "data", "=", "{", "}", "\n", "data", "[", "'left_img'", "]", "=", "l_img", "\n", "data", "[", "'right_img'", "]", "=", "r_img", "\n", "data", "[", "'depth'", "]", "=", "depth", "\n", "data", "[", "'fb'", "]", "=", "fb", "\n", "return", "data", "\n", "\n", "", "data", "=", "{", "}", "\n", "if", "l_img", "is", "not", "None", ":", "\n", "            ", "data", "[", "'left_img'", "]", "=", "l_img", "\n", "", "if", "r_img", "is", "not", "None", ":", "\n", "            ", "data", "[", "'right_img'", "]", "=", "r_img", "\n", "", "if", "fb", "is", "not", "None", ":", "\n", "            ", "data", "[", "'fb'", "]", "=", "fb", "\n", "\n", "", "return", "{", "'tgt'", ":", "data", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.StereoDataset.__init__": [[191, 216], ["dict", "open", "f.read().split", "os.join", "os.join", "torch.utils.data.split", "datasets.StereoDataset.files.append", "f.read", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'./datasets'", ",", "data_file", "=", "'test.list'", ",", "phase", "=", "'test'", ",", "\n", "img_transform", "=", "None", ",", "joint_transform", "=", "None", ",", "depth_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_file", "=", "data_file", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "img_transform", "=", "img_transform", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "\n", "self", ".", "width_to_focal", "=", "dict", "(", ")", "\n", "self", ".", "width_to_focal", "[", "1242", "]", "=", "721.5377", "\n", "self", ".", "width_to_focal", "[", "1241", "]", "=", "718.856", "\n", "self", ".", "width_to_focal", "[", "1224", "]", "=", "707.0493", "\n", "self", ".", "width_to_focal", "[", "1238", "]", "=", "718.3351", "\n", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "data_file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data_list", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "for", "data", "in", "data_list", ":", "\n", "                ", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "data_info", "=", "data", ".", "split", "(", "' '", ")", "\n", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"rgb\"", ":", "data_info", "[", "0", "]", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.StereoDataset.__len__": [[218, 220], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.StereoDataset.read_data": [[221, 230], ["os.exists", "os.exists", "PIL.Image.open().convert", "cv2.imread", "os.join", "os.join", "os.join", "os.join", "cv2.imread.astype", "PIL.Image.open", "datafiles[].replace().replace", "os.join", "os.join", "datafiles[].replace"], "methods", ["None"], ["", "def", "read_data", "(", "self", ",", "datafiles", ")", ":", "\n", "\n", "#print(osp.join(self.root, datafiles['rgb']))", "\n", "        ", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'rgb'", "]", ")", ")", ",", "\"Image does not exist\"", "\n", "rgb", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'rgb'", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "disp", "=", "cv2", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'rgb'", "]", ".", "replace", "(", "'image_2'", ",", "'disp_noc_0'", ")", ".", "replace", "(", "'jpg'", ",", "'png'", ")", ")", ",", "-", "1", ")", "\n", "disp", "=", "disp", ".", "astype", "(", "np", ".", "float32", ")", "/", "256.0", "\n", "return", "rgb", ",", "disp", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.StereoDataset.__getitem__": [[231, 255], ["datasets.StereoDataset.read_data", "len", "datasets.StereoDataset.joint_transform", "datasets.StereoDataset.img_transform"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.StereoDataset.read_data"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "index", "%", "len", "(", "self", ")", "\n", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "img", ",", "disp", "=", "self", ".", "read_data", "(", "datafiles", ")", "\n", "\n", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "                ", "img", ",", "_", ",", "_", ",", "_", "=", "self", ".", "joint_transform", "(", "(", "img", ",", "None", ",", "None", ",", "'test'", ",", "None", ")", ")", "\n", "\n", "", "if", "self", ".", "img_transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "img_transform", "(", "img", ")", "\n", "\n", "", "data", "=", "{", "}", "\n", "\n", "mask", "=", "disp", ">", "0", "\n", "\n", "_", ",", "width", "=", "disp", ".", "shape", "\n", "\n", "depth", "=", "self", ".", "width_to_focal", "[", "width", "]", "*", "0.54", "/", "(", "disp", "+", "(", "1.0", "-", "mask", ")", ")", "\n", "#print(disp.shape)", "\n", "data", "[", "'left_img'", "]", "=", "img", "\n", "data", "[", "'disp'", "]", "=", "disp", "\n", "data", "[", "'depth'", "]", "=", "depth", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.SegDataset.__init__": [[258, 266], ["open().readlines", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "transform", ")", ":", "\n", "\n", "        ", "self", ".", "root_dir", "=", "args", ".", "root", "+", "'/vkitti'", "\n", "\n", "self", ".", "path", "=", "open", "(", "self", ".", "root_dir", "+", "'/train.txt'", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.SegDataset.__len__": [[267, 269], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.SegDataset.__getitem__": [[270, 288], ["torch.is_tensor", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join.replace", "os.path.join.replace", "PIL.Image.open().convert", "PIL.Image.open().convert", "datasets.SegDataset.transform", "idx.tolist.tolist.tolist", "datasets.SegDataset.path[].split", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "img_path", "=", "self", ".", "path", "[", "idx", "]", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "img_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "img_path", ")", "\n", "label_name", "=", "img_name", ".", "replace", "(", "'rgb'", ",", "'label'", ")", "\n", "\n", "image", "=", "Image", ".", "open", "(", "img_name", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "Image", ".", "open", "(", "label_name", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "image", ",", "label", "=", "self", ".", "transform", "(", "(", "image", ",", "label", ")", ")", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "'img'", "]", "=", "image", "\n", "data", "[", "'label'", "]", "=", "label", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.data.datasets.get_dataset": [[290, 305], ["dataset.upper", "dataset.upper"], "function", ["None"], ["", "", "def", "get_dataset", "(", "root", ",", "data_file", "=", "'train.list'", ",", "dataset", "=", "'kitti'", ",", "phase", "=", "'train'", ",", "\n", "img_transform", "=", "None", ",", "depth_transform", "=", "None", ",", "\n", "joint_transform", "=", "None", ",", "test_dataset", "=", "'kitti'", ")", ":", "\n", "\n", "    ", "DEFINED_DATASET", "=", "{", "'KITTI'", ",", "'VKITTI'", "}", "\n", "assert", "dataset", ".", "upper", "(", ")", "in", "DEFINED_DATASET", "\n", "name2obj", "=", "{", "'KITTI'", ":", "KittiDataset", ",", "\n", "'VKITTI'", ":", "VKittiDataset", ",", "\n", "}", "\n", "if", "phase", "==", "'test'", "and", "test_dataset", "==", "'stereo'", ":", "\n", "        ", "name2obj", "[", "'KITTI'", "]", "=", "StereoDataset", "\n", "\n", "", "return", "name2obj", "[", "dataset", ".", "upper", "(", ")", "]", "(", "root", "=", "root", ",", "data_file", "=", "data_file", ",", "phase", "=", "phase", ",", "\n", "img_transform", "=", "img_transform", ",", "depth_transform", "=", "depth_transform", ",", "\n", "joint_transform", "=", "joint_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.options.test_options.TestOptions.initialize": [[5, 25], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "float"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_dataset'", ",", "type", "=", "str", ",", "default", "=", "'kitti'", ",", "help", "=", "'kitti|stereo|make3d'", ")", "\n", "\n", "#parser.add_argument('--results_dir', type=str, default='./results_stereo/', help='saves results here.')", "\n", "#parser.add_argument('--test_dataset', type=str, default='stereo', help='kitti|stereo|make3d')", "\n", "\n", "#parser.add_argument('--root', type=str, default='/media/KITTI/kitti', help='data root')", "\n", "parser", ".", "add_argument", "(", "'--test_datafile'", ",", "type", "=", "str", ",", "default", "=", "'test.txt'", ",", "help", "=", "'stores data list, in root'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--save'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save results'", ")", "\n", "\n", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.options.train_options.TrainOptions.initialize": [[5, 30], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--src_train_datafile'", ",", "type", "=", "str", ",", "default", "=", "'train.txt'", ",", "help", "=", "'stores data list, in src_root'", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt_train_datafile'", ",", "type", "=", "str", ",", "default", "=", "'train.txt'", ",", "help", "=", "'stores data list, in tgt_root'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_result_freq'", ",", "type", "=", "int", ",", "default", "=", "3200", ",", "help", "=", "'frequency of saving the latest prediction results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'frequency of saving the latest trained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_count'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_task'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_trans'", ",", "type", "=", "float", ",", "default", "=", "5e-5", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale_pred'", ",", "action", "=", "'store_true'", ",", "help", "=", "'scale prediction according the ratio of median value'", ")", "\n", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'step'", ",", "help", "=", "'learning rate policy: lambda|step|plateau'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_val'", ",", "action", "=", "'store_true'", ",", "help", "=", "'validation'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize": [[13, 36], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "'/media/KITTI'", ")", "\n", "parser", ".", "add_argument", "(", "'--src_dataset'", ",", "type", "=", "str", ",", "default", "=", "'vkitti'", ",", "help", "=", "'synthetic domain'", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt_dataset'", ",", "type", "=", "str", ",", "default", "=", "'kitti'", ",", "help", "=", "'real domain'", ")", "\n", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "286", ",", "help", "=", "'scale images to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if which_model_netD==n_layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'depth'", ",", "\n", "help", "=", "'chooses which model to use. s2s, s2p, p2s, p2p'", ")", "\n", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'no dropout for the generator'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_rotation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not rotate the images for data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_augment'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not use data augmentation, e.g., randomly shifting gamma'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_gain'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'scaling factor for normal, xavier and orthogonal.'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, print more debugging information'", ")", "\n", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'how many test or validatation images to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--suffix'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'customized suffix: opt.name = opt.name + suffix: e.g., {model}_{which_model_netG}_size{loadSize}'", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.gather_options": [[37, 56], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "base_options.BaseOptions.parse_known_args", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.models.__init__.get_option_setter", "home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.initialize"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "# initialize parser with basic options", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "# parse again with the new defaults", "\n", "\n", "self", ".", "parser", "=", "parser", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.print_options": [[57, 77], ["sorted", "print", "vars().items", "base_options.BaseOptions.parser.get_default", "os.path.join", "utils.util.mkdirs", "os.path.join", "str", "str", "open", "opt_file.write", "opt_file.write", "vars", "str"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.utils.util.mkdirs"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n", "# save to the disk", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "expr_name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "                ", "opt_file", ".", "write", "(", "message", ")", "\n", "opt_file", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.parse": [[78, 103], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "int", "len", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append", "base_options.BaseOptions.suffix.format", "vars"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.dsshim0125_dacl.options.base_options.BaseOptions.print_options"], ["", "", "", "def", "parse", "(", "self", ")", ":", "\n", "\n", "        ", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "\n", "\n", "opt", ".", "expr_name", "=", "opt", ".", "src_dataset", "+", "'2'", "+", "opt", ".", "tgt_dataset", "+", "'_'", "+", "opt", ".", "model", "\n", "# process opt.suffix", "\n", "if", "opt", ".", "suffix", ":", "\n", "            ", "suffix", "=", "(", "'_'", "+", "opt", ".", "suffix", ".", "format", "(", "**", "vars", "(", "opt", ")", ")", ")", "if", "opt", ".", "suffix", "!=", "''", "else", "''", "\n", "opt", ".", "expr_name", "=", "opt", ".", "expr_name", "+", "suffix", "\n", "\n", "", "self", ".", "print_options", "(", "opt", ")", "\n", "\n", "# set gpu ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]]}