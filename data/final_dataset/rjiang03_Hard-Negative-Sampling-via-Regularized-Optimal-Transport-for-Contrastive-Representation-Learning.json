{"home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.main.get_negative_mask": [[25, 33], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["def", "get_negative_mask", "(", "batch_size", ")", ":", "\n", "    ", "negative_mask", "=", "torch", ".", "ones", "(", "(", "batch_size", ",", "2", "*", "batch_size", ")", ",", "dtype", "=", "bool", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "negative_mask", "[", "i", ",", "i", "]", "=", "0", "\n", "negative_mask", "[", "i", ",", "i", "+", "batch_size", "]", "=", "0", "\n", "\n", "", "negative_mask", "=", "torch", ".", "cat", "(", "(", "negative_mask", ",", "negative_mask", ")", ",", "0", ")", "\n", "return", "negative_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.main.get_neg_mask": [[34, 43], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "negative_mask.to"], "function", ["None"], ["", "def", "get_neg_mask", "(", "batch_size", ")", ":", "\n", "    ", "postive_mask", "=", "torch", ".", "zeros", "(", "(", "2", "*", "batch_size", ",", "2", "*", "batch_size", ")", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "postive_mask", "[", "i", ",", "i", "]", "=", "1", "\n", "postive_mask", "[", "i", ",", "i", "+", "batch_size", "]", "=", "1", "\n", "postive_mask", "[", "i", "+", "batch_size", ",", "i", "]", "=", "1", "\n", "postive_mask", "[", "i", "+", "batch_size", ",", "i", "+", "batch_size", "]", "=", "1", "\n", "", "negative_mask", "=", "1", "-", "postive_mask", "\n", "return", "negative_mask", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.main.cost_fun": [[44, 59], ["out_1[].unsqueeze", "out_2[].unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "int", "range", "torch.sum.reshape", "float", "float", "float", "float", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "cost_fun", "(", "out_1", ",", "out_2", ")", ":", "\n", "    ", "x", "=", "out_1", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "out_2", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "cost", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "-", "y", ")", "**", "2", ",", "2", ")", "\n", "#cost = -torch.sum(x * y,2)", "\n", "batch_size", "=", "out_1", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "postive_mask", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "batch_size", ")", ")", ".", "to", "(", "device", ")", "\n", "half_batch_size", "=", "int", "(", "batch_size", "/", "2", ")", "\n", "for", "i", "in", "range", "(", "half_batch_size", ")", ":", "\n", "        ", "postive_mask", "[", "i", ",", "i", "]", "=", "float", "(", "\"Inf\"", ")", "\n", "postive_mask", "[", "i", ",", "i", "+", "half_batch_size", "]", "=", "float", "(", "\"Inf\"", ")", "\n", "postive_mask", "[", "i", "+", "half_batch_size", ",", "i", "]", "=", "float", "(", "\"Inf\"", ")", "\n", "postive_mask", "[", "i", "+", "half_batch_size", ",", "i", "+", "half_batch_size", "]", "=", "float", "(", "\"Inf\"", ")", "\n", "", "cost", "=", "cost", "+", "postive_mask", "\n", "return", "cost", ".", "reshape", "(", "(", "1", ",", "cost", ".", "shape", "[", "0", "]", ",", "cost", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.main.rub_con_exp": [[61, 91], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "main.get_neg_mask", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "main.cost_fun", "ot.sinkhorn", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "print", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "numpy.ones", "float", "float", "float", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cost_fun.cpu().detach().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor().cuda.sum", "torch.cat.t().contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "cost_fun.cpu().detach", "torch.cat.t", "cost_fun.cpu"], "function", ["home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.main.get_neg_mask", "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.main.cost_fun"], ["", "def", "rub_con_exp", "(", "out_1", ",", "out_2", ",", "batch_size", ",", "epoch", ",", "reg", ",", "tau_plus", ")", ":", "\n", "# neg score", "\n", "        ", "N", "=", "batch_size", "*", "2", "-", "2", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out_1", ",", "out_2", "]", ",", "dim", "=", "0", ")", "\n", "neg", "=", "torch", ".", "exp", "(", "torch", ".", "mm", "(", "out", ",", "out", ".", "t", "(", ")", ".", "contiguous", "(", ")", ")", "/", "temperature", ")", "\n", "x", "=", "out", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "out", ".", "unsqueeze", "(", "1", ")", "\n", "cost_test", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "-", "y", ")", "**", "2", ",", "2", ")", "\n", "neg_mask", "=", "get_neg_mask", "(", "batch_size", ")", "\n", "neg_masked", "=", "neg", "*", "neg_mask", "\n", "\n", "pos", "=", "torch", ".", "exp", "(", "torch", ".", "sum", "(", "out_1", "*", "out_2", ",", "dim", "=", "-", "1", ")", "/", "temperature", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "[", "pos", ",", "pos", "]", ",", "dim", "=", "0", ")", "\n", "\n", "M", "=", "cost_fun", "(", "[", "out", "]", ",", "[", "out", "]", ")", "\n", "\n", "a", "=", "np", ".", "ones", "(", "batch_size", "*", "2", ")", "/", "(", "batch_size", "*", "2", ")", "\n", "Trans", "=", "ot", ".", "sinkhorn", "(", "a", ",", "a", ",", "M", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "reg", ")", "\n", "Trans", "=", "torch", ".", "tensor", "(", "Trans", ")", ".", "cuda", "(", ")", "\n", "neg", "=", "neg_masked", "*", "Trans", "\n", "print", "(", "\"pos\"", ",", "float", "(", "torch", ".", "sum", "(", "out_1", "*", "out_2", ")", ")", ",", "\"w2\"", ",", "float", "(", "(", "cost_test", "*", "Trans", ")", ".", "sum", "(", ")", ")", ",", "float", "(", "Trans", ".", "sum", "(", ")", ")", ")", "\n", "\n", "\n", "neg_2", "=", "torch", ".", "sum", "(", "neg", ",", "1", ")", "*", "batch_size", "*", "2", "*", "N", "\n", "Ng", "=", "(", "-", "tau_plus", "*", "N", "*", "pos", "+", "neg_2", ")", "/", "(", "1", "-", "tau_plus", ")", "\n", "Ng", "=", "torch", ".", "clamp", "(", "Ng", ",", "min", "=", "N", "*", "np", ".", "e", "**", "(", "-", "1", "/", "temperature", ")", ")", "\n", "\n", "loss", "=", "(", "-", "torch", ".", "log", "(", "pos", "/", "(", "pos", "+", "Ng", ")", ")", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.main.train": [[93, 114], ["net.train", "tqdm.tqdm", "net", "net", "main.rub_con_exp", "train_optimizer.zero_grad", "rub_con_exp.backward", "train_optimizer.step", "train_bar.set_description", "pos_1.to", "pos_2.to", "rub_con_exp.item"], "function", ["home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.main.train", "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.main.rub_con_exp"], ["", "def", "train", "(", "net", ",", "data_loader", ",", "train_optimizer", ",", "temperature", ",", "estimator", ",", "tau_plus", ",", "beta", ",", "reg", ",", "reg_unbalance", ",", "dataset_name", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "total_loss", ",", "total_num", ",", "train_bar", "=", "0.0", ",", "0", ",", "tqdm", "(", "data_loader", ")", "\n", "for", "pos_1", ",", "pos_2", ",", "target", "in", "train_bar", ":", "\n", "        ", "pos_1", ",", "pos_2", "=", "pos_1", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "pos_2", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "#print(pos_1)", "\n", "feature_1", ",", "out_1", "=", "net", "(", "pos_1", ")", "\n", "feature_2", ",", "out_2", "=", "net", "(", "pos_2", ")", "\n", "\n", "loss", "=", "rub_con_exp", "(", "out_1", ",", "out_2", ",", "batch_size", ",", "epoch", ",", "reg", ",", "tau_plus", ")", "\n", "\n", "train_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "train_optimizer", ".", "step", "(", ")", "\n", "\n", "total_num", "+=", "batch_size", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "train_bar", ".", "set_description", "(", "'Train Epoch: [{}/{}] Loss: {:.4f}'", ".", "format", "(", "epoch", ",", "epochs", ",", "total_loss", "/", "total_num", ")", ")", "\n", "\n", "", "return", "total_loss", "/", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.main.test": [[116, 167], ["net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "tqdm.tqdm", "net", "torch.cat().t().contiguous.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "net", "data.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm.topk", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "one_hot_label.scatter.scatter", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.argsort", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "float", "float", "print", "numpy.save", "tqdm.tqdm.set_description", "data.to", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "data.to", "target.to", "torch.tensor.expand", "data.size", "data.size", "torch.gather.view().long", "one_hot_label.scatter.view", "sim_weight.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "data.size", "str", "torch.gather.view", "str", "str", "target.long().unsqueeze", "target.long().unsqueeze", "target.long", "target.long"], "function", ["None"], ["", "def", "test", "(", "net", ",", "memory_data_loader", ",", "test_data_loader", ",", "reg", ",", "reg_unbalance", ",", "dataset_name", ",", "estimator", ",", "tau", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "total_top1", ",", "total_top5", ",", "total_num", ",", "feature_bank", "=", "0.0", ",", "0.0", ",", "0", ",", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# generate feature bank", "\n", "        ", "for", "data", ",", "_", ",", "target", "in", "tqdm", "(", "memory_data_loader", ",", "desc", "=", "'Feature extracting'", ")", ":", "\n", "            ", "feature", ",", "out", "=", "net", "(", "data", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ")", "\n", "feature_bank", ".", "append", "(", "feature", ")", "\n", "# [D, N]", "\n", "", "feature_bank", "=", "torch", ".", "cat", "(", "feature_bank", ",", "dim", "=", "0", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", "\n", "# [N]", "\n", "if", "'cifar'", "in", "dataset_name", ":", "\n", "            ", "feature_labels", "=", "torch", ".", "tensor", "(", "memory_data_loader", ".", "dataset", ".", "targets", ",", "device", "=", "feature_bank", ".", "device", ")", "\n", "", "elif", "'stl'", "in", "dataset_name", ":", "\n", "            ", "feature_labels", "=", "torch", ".", "tensor", "(", "memory_data_loader", ".", "dataset", ".", "labels", ",", "device", "=", "feature_bank", ".", "device", ")", "\n", "\n", "# loop test data to predict the label by weighted knn search", "\n", "", "test_bar", "=", "tqdm", "(", "test_data_loader", ")", "\n", "for", "data", ",", "_", ",", "target", "in", "test_bar", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "target", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "feature", ",", "out", "=", "net", "(", "data", ")", "\n", "\n", "total_num", "+=", "data", ".", "size", "(", "0", ")", "\n", "# compute cos similarity between each feature vector and feature bank ---> [B, N]", "\n", "sim_matrix", "=", "torch", ".", "mm", "(", "feature", ",", "feature_bank", ")", "\n", "# [B, K]", "\n", "sim_weight", ",", "sim_indices", "=", "sim_matrix", ".", "topk", "(", "k", "=", "k", ",", "dim", "=", "-", "1", ")", "\n", "# [B, K]", "\n", "sim_labels", "=", "torch", ".", "gather", "(", "feature_labels", ".", "expand", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ",", "index", "=", "sim_indices", ")", "\n", "sim_weight", "=", "(", "sim_weight", "/", "temperature", ")", ".", "exp", "(", ")", "\n", "\n", "# counts for each class", "\n", "one_hot_label", "=", "torch", ".", "zeros", "(", "data", ".", "size", "(", "0", ")", "*", "k", ",", "c", ",", "device", "=", "sim_labels", ".", "device", ")", "\n", "# [B*K, C]", "\n", "one_hot_label", "=", "one_hot_label", ".", "scatter", "(", "dim", "=", "-", "1", ",", "index", "=", "sim_labels", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "value", "=", "1.0", ")", "\n", "# weighted score ---> [B, C]", "\n", "pred_scores", "=", "torch", ".", "sum", "(", "one_hot_label", ".", "view", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ",", "c", ")", "*", "sim_weight", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "pred_labels", "=", "pred_scores", ".", "argsort", "(", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "total_top1", "+=", "torch", ".", "sum", "(", "(", "pred_labels", "[", ":", ",", ":", "1", "]", "==", "target", ".", "long", "(", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ")", ".", "any", "(", "dim", "=", "-", "1", ")", ".", "float", "(", ")", ")", ".", "item", "(", ")", "\n", "total_top5", "+=", "torch", ".", "sum", "(", "(", "pred_labels", "[", ":", ",", ":", "5", "]", "==", "target", ".", "long", "(", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ")", ".", "any", "(", "dim", "=", "-", "1", ")", ".", "float", "(", ")", ")", ".", "item", "(", ")", "\n", "#print(epoch, epochs, total_num, total_top1 / total_num * 100, total_top5 / total_num * 100)", "\n", "top", "[", "epoch", "]", "[", "0", "]", "=", "float", "(", "total_top1", "/", "total_num", "*", "100", ")", "\n", "top", "[", "epoch", "]", "[", "1", "]", "=", "float", "(", "total_top5", "/", "total_num", "*", "100", ")", "\n", "print", "(", "epoch", ",", "epochs", ",", "'total_top1'", ",", "total_top1", ",", "total_num", ",", "total_top1", "/", "total_num", "*", "100", ",", "'total_top5'", ",", "total_top5", ",", "total_top5", "/", "total_num", "*", "100", ")", "\n", "np", ".", "save", "(", "dataset_name", "+", "estimator", "+", "\"reg\"", "+", "str", "(", "reg", ")", "+", "\"_unbalanced_\"", "+", "str", "(", "reg_unbalance", ")", "+", "\"tau\"", "+", "str", "(", "tau", ")", "+", "\".npy\"", ",", "top", ")", "\n", "test_bar", ".", "set_description", "(", "'KNN Test Epoch: [{}/{}] Acc@1:{:.2f}% Acc@5:{:.2f}%'", "\n", ".", "format", "(", "epoch", ",", "epochs", ",", "total_top1", "/", "total_num", "*", "100", ",", "total_top5", "/", "total_num", "*", "100", ")", ")", "\n", "\n", "\n", "", "", "return", "total_top1", "/", "total_num", "*", "100", ",", "total_top5", "/", "total_num", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.model.Model.__init__": [[8, 22], ["torch.Module.__init__", "torchvision.models.resnet.resnet50().named_children", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torchvision.models.resnet.resnet50", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.Model.f.append", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.utils.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "f", "=", "[", "]", "\n", "for", "name", ",", "module", "in", "resnet50", "(", ")", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "==", "'conv1'", ":", "\n", "                ", "module", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "if", "not", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "not", "isinstance", "(", "module", ",", "nn", ".", "MaxPool2d", ")", ":", "\n", "                ", "self", ".", "f", ".", "append", "(", "module", ")", "\n", "# encoder", "\n", "", "", "self", ".", "f", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "f", ")", "\n", "# projection head", "\n", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "2048", ",", "512", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Linear", "(", "512", ",", "feature_dim", ",", "bias", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.model.Model.forward": [[23, 28], ["model.Model.f", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model.Model.g", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "f", "(", "x", ")", "\n", "feature", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "out", "=", "self", ".", "g", "(", "feature", ")", "\n", "return", "F", ".", "normalize", "(", "feature", ",", "dim", "=", "-", "1", ")", ",", "F", ".", "normalize", "(", "out", ",", "dim", "=", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.linear.Net.__init__": [[18, 29], ["torch.Module.__init__", "nn.DataParallel.Model().to", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.Model"], "methods", ["home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.utils.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "pretrained_path", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# encoder", "\n", "model", "=", "Model", "(", ")", ".", "to", "(", "device", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained_path", ",", "map_location", "=", "'cuda:0'", ")", ")", "\n", "# self.f=model.f", "\n", "self", ".", "f", "=", "model", ".", "module", ".", "f", "\n", "# classifier", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_class", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.linear.Net.forward": [[30, 35], ["linear.Net.f", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "linear.Net.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "f", "(", "x", ")", "\n", "feature", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "feature", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.linear.train_val": [[38, 64], ["net.train", "net.eval", "tqdm.tqdm", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "loss_criterion", "data.size", "torch.argsort", "torch.argsort", "torch.argsort", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "data.to", "target.to", "train_optimizer.zero_grad", "loss_criterion.backward", "train_optimizer.step", "loss_criterion.item", "data.size", "print", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "target.unsqueeze", "target.unsqueeze"], "function", ["home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.main.train"], ["", "", "def", "train_val", "(", "epoch", ",", "net", ",", "data_loader", ",", "train_optimizer", ")", ":", "\n", "    ", "is_train", "=", "train_optimizer", "is", "not", "None", "\n", "net", ".", "train", "(", ")", "if", "is_train", "else", "net", ".", "eval", "(", ")", "\n", "\n", "total_loss", ",", "total_correct_1", ",", "total_correct_5", ",", "total_num", ",", "data_bar", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0", ",", "tqdm", "(", "data_loader", ")", "\n", "with", "(", "torch", ".", "enable_grad", "(", ")", "if", "is_train", "else", "torch", ".", "no_grad", "(", ")", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "data_bar", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "target", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "out", "=", "net", "(", "data", ")", "\n", "loss", "=", "loss_criterion", "(", "out", ",", "target", ")", "\n", "\n", "if", "is_train", ":", "\n", "                ", "train_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "train_optimizer", ".", "step", "(", ")", "\n", "\n", "", "total_num", "+=", "data", ".", "size", "(", "0", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "data", ".", "size", "(", "0", ")", "\n", "prediction", "=", "torch", ".", "argsort", "(", "out", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "total_correct_1", "+=", "torch", ".", "sum", "(", "(", "prediction", "[", ":", ",", "0", ":", "1", "]", "==", "target", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ")", ".", "any", "(", "dim", "=", "-", "1", ")", ".", "float", "(", ")", ")", ".", "item", "(", ")", "\n", "total_correct_5", "+=", "torch", ".", "sum", "(", "(", "prediction", "[", ":", ",", "0", ":", "5", "]", "==", "target", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ")", ".", "any", "(", "dim", "=", "-", "1", ")", ".", "float", "(", ")", ")", ".", "item", "(", ")", "\n", "if", "train_optimizer", "is", "None", ":", "\n", "                ", "print", "(", "epoch", ",", "total_correct_1", "/", "total_num", ",", "total_correct_5", "/", "total_num", ")", "\n", "#data_bar.set_description('{} Epoch: [{}/{}] Loss: {:.4f} ACC@1: {:.2f}% ACC@5: {:.2f}%'.format('Train' if is_train else 'Test', epoch, epochs, total_loss / total_num,total_correct_1 / total_num * 100, total_correct_5 / total_num * 100))", "\n", "\n", "", "", "", "return", "total_loss", "/", "total_num", ",", "total_correct_1", "/", "total_num", "*", "100", ",", "total_correct_5", "/", "total_num", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.utils.CIFAR10Pair.__getitem__": [[11, 23], ["PIL.Image.fromarray", "utils.CIFAR10Pair.transform", "utils.CIFAR10Pair.transform", "utils.CIFAR10Pair.target_transform"], "methods", ["None"], ["    ", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "pos_1", "=", "self", ".", "transform", "(", "img", ")", "\n", "pos_2", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "pos_1", ",", "pos_2", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.utils.CIFAR100Pair_true_label.__init__": [[28, 34], ["torchvision.datasets.CIFAR100.__init__", "utils.CIFAR100Pair_true_label.__init__.get_labels"], "methods", ["home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.utils.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'../data'", ",", "train", "=", "True", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", "=", "root", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "def", "get_labels", "(", "i", ")", ":", "\n", "            ", "return", "[", "index", "for", "index", "in", "range", "(", "len", "(", "self", ")", ")", "if", "self", ".", "targets", "[", "index", "]", "==", "i", "]", "\n", "\n", "", "self", ".", "label_index", "=", "[", "get_labels", "(", "i", ")", "for", "i", "in", "range", "(", "100", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.utils.CIFAR100Pair_true_label.__getitem__": [[35, 52], ["PIL.Image.fromarray", "PIL.Image.fromarray", "random.sample", "utils.CIFAR100Pair_true_label.transform", "utils.CIFAR100Pair_true_label.transform", "utils.CIFAR100Pair_true_label.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img1", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "index_example_same_label", "=", "sample", "(", "self", ".", "label_index", "[", "self", ".", "targets", "[", "index", "]", "]", ",", "1", ")", "[", "0", "]", "\n", "img2", "=", "self", ".", "data", "[", "index_example_same_label", "]", "\n", "\n", "img1", "=", "Image", ".", "fromarray", "(", "img1", ")", "\n", "img2", "=", "Image", ".", "fromarray", "(", "img2", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "pos_1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "pos_2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "pos_1", ",", "pos_2", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.utils.CIFAR100Pair.__getitem__": [[54, 66], ["PIL.Image.fromarray", "utils.CIFAR100Pair.transform", "utils.CIFAR100Pair.transform", "utils.CIFAR100Pair.target_transform"], "methods", ["None"], ["    ", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "pos_1", "=", "self", ".", "transform", "(", "img", ")", "\n", "pos_2", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "pos_1", ",", "pos_2", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.utils.STL10Pair.__getitem__": [[69, 78], ["PIL.Image.fromarray", "numpy.transpose", "utils.STL10Pair.transform", "utils.STL10Pair.transform"], "methods", ["None"], ["    ", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "pos_1", "=", "self", ".", "transform", "(", "img", ")", "\n", "pos_2", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "pos_1", ",", "pos_2", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.utils.GaussianBlur.__init__": [[82, 87], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "min", "=", "0.1", ",", "max", "=", "2.0", ")", ":", "\n", "        ", "self", ".", "min", "=", "min", "\n", "self", ".", "max", "=", "max", "\n", "# kernel size is set to be 10% of the image height/width", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.utils.GaussianBlur.__call__": [[88, 98], ["numpy.array", "numpy.random.random_sample", "cv2.GaussianBlur", "numpy.random.random_sample"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "=", "np", ".", "array", "(", "sample", ")", "\n", "# blur the image with a 50% chance", "\n", "prob", "=", "np", ".", "random", ".", "random_sample", "(", ")", "\n", "\n", "if", "prob", "<", "0.5", ":", "\n", "            ", "sigma", "=", "(", "self", ".", "max", "-", "self", ".", "min", ")", "*", "np", ".", "random", ".", "random_sample", "(", ")", "+", "self", ".", "min", "\n", "sample", "=", "cv2", ".", "GaussianBlur", "(", "sample", ",", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", ",", "sigma", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.rjiang03_Hard-Negative-Sampling-via-Regularized-Optimal-Transport-for-Contrastive-Representation-Learning.None.utils.get_dataset": [[113, 150], ["utils.CIFAR10Pair", "utils.CIFAR10Pair", "utils.CIFAR10Pair", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "utils.CIFAR100Pair", "utils.CIFAR100Pair", "utils.CIFAR100Pair", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "utils.STL10Pair", "utils.STL10Pair", "utils.STL10Pair", "torchvision.datasets.STL10", "torchvision.datasets.STL10", "torchvision.datasets.STL10", "Exception", "utils.CIFAR100Pair_true_label", "utils.CIFAR100Pair_true_label", "utils.CIFAR100Pair_true_label", "Exception"], "function", ["None"], ["def", "get_dataset", "(", "dataset_name", ",", "root", "=", "'../data'", ",", "pair", "=", "True", ")", ":", "\n", "    ", "if", "pair", ":", "\n", "        ", "if", "dataset_name", "==", "'cifar10'", ":", "\n", "            ", "train_data", "=", "CIFAR10Pair", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "memory_data", "=", "CIFAR10Pair", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "test_data", "=", "CIFAR10Pair", "(", "root", "=", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "dataset_name", "==", "'cifar100'", ":", "\n", "            ", "train_data", "=", "CIFAR100Pair", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "memory_data", "=", "CIFAR100Pair", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "test_data", "=", "CIFAR100Pair", "(", "root", "=", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "dataset_name", "==", "'stl10'", ":", "\n", "            ", "train_data", "=", "STL10Pair", "(", "root", "=", "root", ",", "split", "=", "'train+unlabeled'", ",", "transform", "=", "train_transform", ")", "\n", "memory_data", "=", "STL10Pair", "(", "root", "=", "root", ",", "split", "=", "'train'", ",", "transform", "=", "test_transform", ")", "\n", "test_data", "=", "STL10Pair", "(", "root", "=", "root", ",", "split", "=", "'test'", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "dataset_name", "==", "'cifar100_true_label'", ":", "\n", "            ", "train_data", "=", "CIFAR100Pair_true_label", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "memory_data", "=", "CIFAR100Pair_true_label", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "test_data", "=", "CIFAR100Pair_true_label", "(", "root", "=", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Invalid dataset name'", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "dataset_name", "in", "[", "'cifar10'", ",", "'cifar10_true_label'", "]", ":", "\n", "            ", "train_data", "=", "CIFAR10", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "memory_data", "=", "CIFAR10", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "test_data", "=", "CIFAR10", "(", "root", "=", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "dataset_name", "in", "[", "'cifar100'", ",", "'cifar100_true_label'", "]", ":", "\n", "            ", "train_data", "=", "CIFAR100", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "memory_data", "=", "CIFAR100", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "test_data", "=", "CIFAR100", "(", "root", "=", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "dataset_name", "==", "'stl10'", ":", "\n", "            ", "train_data", "=", "STL10", "(", "root", "=", "root", ",", "split", "=", "'train'", ",", "transform", "=", "train_transform", ")", "\n", "memory_data", "=", "STL10", "(", "root", "=", "root", ",", "split", "=", "'train'", ",", "transform", "=", "test_transform", ")", "\n", "test_data", "=", "STL10", "(", "root", "=", "root", ",", "split", "=", "'test'", ",", "transform", "=", "test_transform", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Invalid dataset name'", ")", "\n", "\n", "", "", "return", "train_data", ",", "memory_data", ",", "test_data", "\n", "\n"]]}