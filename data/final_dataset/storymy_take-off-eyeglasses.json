{"home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.generate_shadow_label.get_sample_list": [[8, 20], ["os.listdir", "img_name.split", "sample_list.append", "img_name.find"], "function", ["None"], ["def", "get_sample_list", "(", "data_dir", ",", "keyword", "=", "\"-all.png\"", ")", ":", "\n", "    ", "all_list", "=", "os", ".", "listdir", "(", "data_dir", ")", "\n", "\n", "sample_list", "=", "[", "]", "\n", "for", "img_name", "in", "all_list", ":", "\n", "        ", "if", "img_name", ".", "find", "(", "keyword", ")", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "strs", "=", "img_name", ".", "split", "(", "'-'", ")", "\n", "sample_name", "=", "'-'", ".", "join", "(", "strs", "[", ":", "-", "1", "]", ")", "\n", "sample_list", ".", "append", "(", "sample_name", ")", "\n", "\n", "", "return", "sample_list", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.generate_shadow_label.generate_shadow_mask_label": [[21, 29], ["torch.abs", "torch.ones().to", "torch.zeros().to", "torch.where", "torch.ones", "torch.zeros"], "function", ["None"], ["", "def", "generate_shadow_mask_label", "(", "img_with_shadow", ",", "img_without_shadow", ",", "threshold", "=", "0.1", ")", ":", "\n", "    ", "diff", "=", "torch", ".", "abs", "(", "img_with_shadow", "-", "img_without_shadow", ")", "\n", "diff", "=", "diff", "[", "0", ":", "1", ",", ":", ",", ":", "]", "*", "0.3", "+", "diff", "[", "1", ":", "2", ",", ":", ",", ":", "]", "*", "0.59", "+", "diff", "[", "2", ":", "3", ",", ":", ",", ":", "]", "*", "0.11", "\n", "all_true", "=", "torch", ".", "ones", "(", "*", "diff", ".", "shape", ")", ".", "to", "(", "diff", ".", "device", ")", "\n", "all_false", "=", "torch", ".", "zeros", "(", "*", "diff", ".", "shape", ")", ".", "to", "(", "diff", ".", "device", ")", "\n", "label", "=", "torch", ".", "where", "(", "diff", ">", "threshold", ",", "all_true", ",", "all_false", ")", "\n", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.generate_shadow_label.save_shadow_mask_label": [[30, 36], ["tensor.cpu().numpy().transpose", "numpy.clip().astype", "PIL.Image.fromarray", "Image.fromarray.save", "tensor.cpu().numpy", "numpy.clip", "tensor.cpu"], "function", ["None"], ["", "def", "save_shadow_mask_label", "(", "tensor", ",", "save_path", ")", ":", "\n", "    ", "out", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "out", "=", "np", ".", "clip", "(", "out", "*", "255", "+", "0.5", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "out", "=", "out", "[", ":", ",", ":", ",", "0", "]", "\n", "out_PIL", "=", "Image", ".", "fromarray", "(", "out", ")", "\n", "out_PIL", ".", "save", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.savetensor2img": [[12, 20], ["tensor.squeeze().cpu().numpy().transpose", "numpy.clip().astype", "PIL.Image.fromarray", "Image.fromarray.save", "tensor.squeeze().cpu().numpy", "numpy.clip", "tensor.squeeze().cpu", "tensor.squeeze"], "function", ["None"], ["def", "savetensor2img", "(", "tensor", ",", "save_path", ")", ":", "\n", "    ", "out", "=", "tensor", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "\n", "out", "=", "np", ".", "clip", "(", "out", "*", "255", "+", "0.5", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "out", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "out", "=", "out", "[", ":", ",", ":", ",", "0", "]", "\n", "", "out_PIL", "=", "Image", ".", "fromarray", "(", "out", ")", "\n", "out_PIL", ".", "save", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.out2mask": [[21, 27], ["tensor.argmax().unsqueeze().float", "tensor.argmax().unsqueeze", "torch.Softmax2d", "tensor.argmax"], "function", ["None"], ["", "def", "out2mask", "(", "tensor", ",", "soft", "=", "True", ",", "scale", "=", "1.25", ")", ":", "\n", "    ", "if", "soft", ":", "\n", "        ", "ret", "=", "(", "nn", ".", "Softmax2d", "(", ")", "(", "tensor", ")", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ")", "*", "scale", "\n", "", "else", ":", "\n", "        ", "ret", "=", "(", "tensor", ".", "argmax", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.smart_mkdir": [[28, 31], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "smart_mkdir", "(", "dirname", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.generate_results": [[32, 82], ["models.domain_adaption.DomainAdapter().to", "models.networks.ResnetGeneratorMask().to", "models.networks.ResnetGeneratorMask().to", "models.networks.ResnetGenerator().to", "models.networks.ResnetGenerator().to", "torch.load", "torch.load", "DomainAdapter().to.load_state_dict", "DomainAdapter().to.eval", "ResnetGeneratorMask().to.load_state_dict", "ResnetGeneratorMask().to.eval", "ResnetGeneratorMask().to.load_state_dict", "ResnetGeneratorMask().to.eval", "ResnetGenerator().to.load_state_dict", "ResnetGenerator().to.eval", "ResnetGenerator().to.load_state_dict", "ResnetGenerator().to.eval", "torchvision.transforms.Compose", "os.listdir", "torch.no_grad", "torch.no_grad", "models.domain_adaption.DomainAdapter", "models.networks.ResnetGeneratorMask", "models.networks.ResnetGeneratorMask", "models.networks.ResnetGenerator", "models.networks.ResnetGenerator", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "PIL.Image.open().convert", "transforms.Compose.", "torch.unsqueeze", "torch.unsqueeze", "img.to.to", "DomainAdapter().to.", "easy_use.out2mask", "easy_use.out2mask", "torch.cat", "torch.cat", "ResnetGenerator().to.", "torch.cat", "torch.cat", "ResnetGenerator().to.", "easy_use.savetensor2img", "easy_use.savetensor2img", "easy_use.savetensor2img", "ResnetGeneratorMask().to.", "ResnetGeneratorMask().to.", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open", "torch.cat", "torch.cat", "os.path.join"], "function", ["home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.out2mask", "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.out2mask", "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.savetensor2img", "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.savetensor2img", "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.savetensor2img"], ["", "", "def", "generate_results", "(", "args", ",", "device", ")", ":", "\n", "    ", "norm", "=", "nn", ".", "BatchNorm2d", "\n", "DA_Net", "=", "DomainAdapter", "(", ")", ".", "to", "(", "device", ")", "\n", "GlassMask_Net", "=", "ResnetGeneratorMask", "(", "input_nc", "=", "64", ",", "output_nc", "=", "2", ",", "norm_layer", "=", "norm", ")", ".", "to", "(", "device", ")", "# shadow prediction (mask)", "\n", "ShadowMask_Net", "=", "ResnetGeneratorMask", "(", "input_nc", "=", "65", ",", "output_nc", "=", "2", ",", "norm_layer", "=", "norm", ")", ".", "to", "(", "device", ")", "# shadow prediction (mask)", "\n", "DeShadow_Net", "=", "ResnetGenerator", "(", "input_nc", "=", "5", ",", "output_nc", "=", "3", ",", "norm_layer", "=", "norm", ")", ".", "to", "(", "device", ")", "\n", "DeGlass_Net", "=", "ResnetGenerator", "(", "input_nc", "=", "4", ",", "output_nc", "=", "3", ",", "norm_layer", "=", "norm", ")", ".", "to", "(", "device", ")", "\n", "\n", "# load ckpt", "\n", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "ckpt_path", ")", "\n", "DA_Net", ".", "load_state_dict", "(", "ckpt", "[", "\"DA\"", "]", ")", "\n", "DA_Net", ".", "eval", "(", ")", "\n", "GlassMask_Net", ".", "load_state_dict", "(", "ckpt", "[", "\"GM\"", "]", ")", "\n", "GlassMask_Net", ".", "eval", "(", ")", "\n", "ShadowMask_Net", ".", "load_state_dict", "(", "ckpt", "[", "\"SM\"", "]", ")", "\n", "ShadowMask_Net", ".", "eval", "(", ")", "\n", "DeShadow_Net", ".", "load_state_dict", "(", "ckpt", "[", "\"DeShadow\"", "]", ")", "\n", "DeShadow_Net", ".", "eval", "(", ")", "\n", "DeGlass_Net", ".", "load_state_dict", "(", "ckpt", "[", "\"DeGlass\"", "]", ")", "\n", "DeGlass_Net", ".", "eval", "(", ")", "\n", "\n", "# transform", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "args", ".", "img_size", ",", "args", ".", "img_size", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "]", ")", "\n", "\n", "# forward one by one", "\n", "img_list", "=", "os", ".", "listdir", "(", "args", ".", "input_dir", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "img_name", "in", "img_list", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "input_dir", ",", "img_name", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "transform", "(", "img", ")", "\n", "img", "=", "torch", ".", "unsqueeze", "(", "img", ",", "0", ")", "\n", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "\n", "gfm", ",", "sfm", "=", "DA_Net", "(", "img", ")", "\n", "gmask", "=", "out2mask", "(", "GlassMask_Net", "(", "gfm", ")", ",", "False", ")", "\n", "smask", "=", "out2mask", "(", "ShadowMask_Net", "(", "torch", ".", "cat", "(", "[", "sfm", ",", "gmask", "]", ",", "dim", "=", "1", ")", ")", ",", "True", ")", "\n", "\n", "ds_in", "=", "torch", ".", "cat", "(", "[", "img", ",", "smask", ",", "gmask", "]", ",", "dim", "=", "1", ")", "\n", "ds_out", "=", "DeShadow_Net", "(", "ds_in", ")", "\n", "ds_out_masked", "=", "ds_out", "*", "(", "1", "-", "gmask", ")", "\n", "dg_in", "=", "torch", ".", "cat", "(", "[", "ds_out_masked", ",", "gmask", "]", ",", "dim", "=", "1", ")", "\n", "dg_out", "=", "DeGlass_Net", "(", "dg_in", ")", "\n", "\n", "savetensor2img", "(", "dg_out", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "img_name", ")", ")", "\n", "savetensor2img", "(", "gmask", "*", "2", "-", "1", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "img_name", "[", ":", "-", "4", "]", "+", "'_gmask.png'", ")", ")", "\n", "savetensor2img", "(", "smask", "*", "2", "-", "1", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "img_name", "[", ":", "-", "4", "]", "+", "'_smask.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.predict.Predictor.setup": [[21, 71], ["torch.device", "torch.device", "torch.device", "torch.device", "print", "print", "models.domain_adaption.DomainAdapter().to", "models.networks.ResnetGeneratorMask().to", "models.networks.ResnetGeneratorMask().to", "models.networks.ResnetGenerator().to", "models.networks.ResnetGenerator().to", "torch.load", "torch.load", "torch.load", "torch.load", "predict.Predictor.DA_Net.load_state_dict", "predict.Predictor.DA_Net.eval", "predict.Predictor.GlassMask_Net.load_state_dict", "predict.Predictor.GlassMask_Net.eval", "predict.Predictor.ShadowMask_Net.load_state_dict", "predict.Predictor.ShadowMask_Net.eval", "predict.Predictor.DeShadow_Net.load_state_dict", "predict.Predictor.DeShadow_Net.eval", "predict.Predictor.DeGlass_Net.load_state_dict", "predict.Predictor.DeGlass_Net.eval", "torchvision.transforms.Compose", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "models.domain_adaption.DomainAdapter", "models.networks.ResnetGeneratorMask", "models.networks.ResnetGeneratorMask", "models.networks.ResnetGenerator", "models.networks.ResnetGenerator", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["    ", "def", "setup", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the model into memory to make running multiple predictions efficient\"\"\"", "\n", "\n", "# custom args", "\n", "self", ".", "img_size", "=", "512", "\n", "self", ".", "ckpt_path", "=", "\"./ckpt/pretrained.pt\"", "\n", "\n", "# device", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "f\"Using device {self.device}......\"", ")", "\n", "print", "(", "\"Loading models......\"", ")", "\n", "# load models", "\n", "norm", "=", "nn", ".", "BatchNorm2d", "\n", "self", ".", "DA_Net", "=", "DomainAdapter", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "GlassMask_Net", "=", "ResnetGeneratorMask", "(", "\n", "input_nc", "=", "64", ",", "output_nc", "=", "2", ",", "norm_layer", "=", "norm", "\n", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "# shadow prediction (mask)", "\n", "self", ".", "ShadowMask_Net", "=", "ResnetGeneratorMask", "(", "\n", "input_nc", "=", "65", ",", "output_nc", "=", "2", ",", "norm_layer", "=", "norm", "\n", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "# shadow prediction (mask)", "\n", "self", ".", "DeShadow_Net", "=", "ResnetGenerator", "(", "\n", "input_nc", "=", "5", ",", "output_nc", "=", "3", ",", "norm_layer", "=", "norm", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "DeGlass_Net", "=", "ResnetGenerator", "(", "input_nc", "=", "4", ",", "output_nc", "=", "3", ",", "norm_layer", "=", "norm", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "\n", "# load ckpt", "\n", "ckpt", "=", "torch", ".", "load", "(", "self", ".", "ckpt_path", ")", "\n", "self", ".", "DA_Net", ".", "load_state_dict", "(", "ckpt", "[", "\"DA\"", "]", ")", "\n", "self", ".", "DA_Net", ".", "eval", "(", ")", "\n", "self", ".", "GlassMask_Net", ".", "load_state_dict", "(", "ckpt", "[", "\"GM\"", "]", ")", "\n", "self", ".", "GlassMask_Net", ".", "eval", "(", ")", "\n", "self", ".", "ShadowMask_Net", ".", "load_state_dict", "(", "ckpt", "[", "\"SM\"", "]", ")", "\n", "self", ".", "ShadowMask_Net", ".", "eval", "(", ")", "\n", "self", ".", "DeShadow_Net", ".", "load_state_dict", "(", "ckpt", "[", "\"DeShadow\"", "]", ")", "\n", "self", ".", "DeShadow_Net", ".", "eval", "(", ")", "\n", "self", ".", "DeGlass_Net", ".", "load_state_dict", "(", "ckpt", "[", "\"DeGlass\"", "]", ")", "\n", "self", ".", "DeGlass_Net", ".", "eval", "(", ")", "\n", "\n", "# transform", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "[", "self", ".", "img_size", ",", "self", ".", "img_size", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.predict.Predictor.predict": [[74, 107], ["cog.Input", "str", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "PIL.Image.open().convert", "predict.Predictor.transform", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "img.to.to.to", "predict.Predictor.DA_Net", "easy_use.out2mask", "easy_use.out2mask", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "predict.Predictor.DeShadow_Net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "predict.Predictor.DeGlass_Net", "easy_use.savetensor2img", "easy_use.savetensor2img", "print", "predict.Predictor.GlassMask_Net", "predict.Predictor.ShadowMask_Net", "cog.Path", "PIL.Image.open", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tempfile.mkdtemp"], "methods", ["home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.out2mask", "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.out2mask", "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.savetensor2img", "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.None.easy_use.savetensor2img"], ["", "def", "predict", "(", "\n", "self", ",", "\n", "image", ":", "Path", "=", "Input", "(", "description", "=", "\"Input image\"", ")", ",", "\n", ")", "->", "Path", ":", "\n", "        ", "\"\"\"Run a single prediction on the model\"\"\"", "\n", "\n", "img", "=", "str", "(", "image", ")", "\n", "\n", "# forward", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "img", "=", "torch", ".", "unsqueeze", "(", "img", ",", "0", ")", "\n", "img", "=", "img", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "gfm", ",", "sfm", "=", "self", ".", "DA_Net", "(", "img", ")", "\n", "gmask", "=", "out2mask", "(", "self", ".", "GlassMask_Net", "(", "gfm", ")", ",", "False", ")", "\n", "smask", "=", "out2mask", "(", "self", ".", "ShadowMask_Net", "(", "torch", ".", "cat", "(", "[", "sfm", ",", "gmask", "]", ",", "dim", "=", "1", ")", ")", ",", "True", ")", "\n", "\n", "ds_in", "=", "torch", ".", "cat", "(", "[", "img", ",", "smask", ",", "gmask", "]", ",", "dim", "=", "1", ")", "\n", "ds_out", "=", "self", ".", "DeShadow_Net", "(", "ds_in", ")", "\n", "ds_out_masked", "=", "ds_out", "*", "(", "1", "-", "gmask", ")", "\n", "dg_in", "=", "torch", ".", "cat", "(", "[", "ds_out_masked", ",", "gmask", "]", ",", "dim", "=", "1", ")", "\n", "dg_out", "=", "self", ".", "DeGlass_Net", "(", "dg_in", ")", "\n", "\n", "# save output image as Cog Path object", "\n", "output_path", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", ")", ")", "/", "\"output.png\"", "\n", "\n", "savetensor2img", "(", "dg_out", ",", "output_path", ")", "\n", "savetensor2img", "(", "dg_out", ",", "\"outtt.png\"", ")", "\n", "\n", "print", "(", "output_path", ")", "\n", "return", "output_path", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.domain_adaption.DomainAdapter.__init__": [[17, 101], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential.load_state_dict", "torch.Sequential.children", "getattr().parameters", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models.resnet.ResnetBlock", "models.resnet.ResnetBlock", "getattr"], "methods", ["home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.resnet.ResnetBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vgg_path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "vgg", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu1-1", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu1-2", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "0", ",", "0", ")", ",", "ceil_mode", "=", "True", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu2-1", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu2-2", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "0", ",", "0", ")", ",", "ceil_mode", "=", "True", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu3-1", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu3-2", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu3-3", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu3-4", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "0", ",", "0", ")", ",", "ceil_mode", "=", "True", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu4-1, this is the last layer used", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu4-2", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu4-3", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu4-4", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "0", ",", "0", ")", ",", "ceil_mode", "=", "True", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu5-1", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu5-2", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "# relu5-3", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "# relu5-4", "\n", ")", "\n", "if", "vgg_path", "is", "not", "None", ":", "\n", "            ", "vgg", ".", "load_state_dict", "(", "torch", ".", "load", "(", "vgg_path", ")", ")", "\n", "", "enc_layers", "=", "list", "(", "vgg", ".", "children", "(", ")", ")", "\n", "self", ".", "enc_1", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", ":", "4", "]", ")", "# input -> relu1_1", "\n", "self", ".", "enc_2", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "4", ":", "11", "]", ")", "# relu1_1 -> relu2_1", "\n", "self", ".", "enc_3", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "11", ":", "18", "]", ")", "# relu2_1 -> relu3_1", "\n", "self", ".", "enc_4", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "18", ":", "31", "]", ")", "# relu3_1 -> relu4_1", "\n", "\n", "# fix the encoder", "\n", "for", "name", "in", "[", "'enc_1'", ",", "'enc_2'", ",", "'enc_3'", ",", "'enc_4'", "]", ":", "\n", "            ", "for", "param", "in", "getattr", "(", "self", ",", "name", ")", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "glass_module", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "# add ResNet blocks", "\n", "            ", "glass_module", "+=", "[", "ResnetBlock", "(", "64", ",", "padding_type", "=", "'reflect'", ",", "norm_layer", "=", "nn", ".", "InstanceNorm2d", ",", "use_dropout", "=", "False", ",", "\n", "use_bias", "=", "False", ")", "]", "\n", "", "glass_module", "+=", "[", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "64", ")", "]", "\n", "self", ".", "glass_module", "=", "nn", ".", "Sequential", "(", "*", "glass_module", ")", "\n", "\n", "shadow_module", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "# add ResNet blocks", "\n", "            ", "shadow_module", "+=", "[", "ResnetBlock", "(", "64", ",", "padding_type", "=", "'reflect'", ",", "norm_layer", "=", "nn", ".", "InstanceNorm2d", ",", "use_dropout", "=", "False", ",", "\n", "use_bias", "=", "False", ")", "]", "\n", "", "shadow_module", "+=", "[", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "64", ")", "]", "\n", "self", ".", "shadow_module", "=", "nn", ".", "Sequential", "(", "*", "shadow_module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.domain_adaption.DomainAdapter.forward": [[102, 109], ["domain_adaption.DomainAdapter.enc_1", "domain_adaption.DomainAdapter.glass_module", "domain_adaption.DomainAdapter.shadow_module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "fm_1", "=", "self", ".", "enc_1", "(", "input", ")", "\n", "# fm_2 = self.enc_2(fm_1)", "\n", "# fm_3 = self.enc_3(fm_2)", "\n", "# fm_4 = self.enc_4(fm_3)", "\n", "\n", "return", "self", ".", "glass_module", "(", "fm_1", ")", ",", "self", ".", "shadow_module", "(", "fm_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.domain_adaption.Discriminator.__init__": [[114, 153], ["torch.Module.__init__", "range", "min", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.resnet.ResnetBlock.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "\"\"\"Construct a PatchGAN discriminator\n\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            ndf (int)       -- the number of filters in the last conv layer\n            n_layers (int)  -- the number of conv layers in the discriminator\n            norm_layer      -- normalization layer\n        \"\"\"", "\n", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "# no need to use bias as BatchNorm2d has affine parameters", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "# gradually increase the number of filters", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "# output 1 channel prediction map", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.domain_adaption.Discriminator.forward": [[154, 158], ["domain_adaption.Discriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward.\"\"\"", "\n", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.networks.ResnetGenerator.__init__": [[19, 68], ["torch.Module.__init__", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.resnet.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.resnet.ResnetBlock.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "\"\"\"Construct a Resnet-based generator\n\n        Parameters:\n            input_nc (int)      -- the number of channels in input images\n            output_nc (int)     -- the number of channels in output images\n            ngf (int)           -- the number of filters in the last conv layer\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers\n            n_blocks (int)      -- the number of ResNet blocks\n            padding_type (str)  -- the name of padding layer in conv layers: reflect | replicate | zero\n        \"\"\"", "\n", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add downsampling layers", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "# add ResNet blocks", "\n", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add upsampling layers", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.networks.ResnetGenerator.forward": [[69, 72], ["networks.ResnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.networks.ResnetGeneratorMask.__init__": [[79, 127], ["torch.Module.__init__", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.resnet.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.resnet.ResnetBlock.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "\"\"\"Construct a Resnet-based generator\n\n        Parameters:\n            input_nc (int)      -- the number of channels in input images\n            output_nc (int)     -- the number of channels in output images\n            ngf (int)           -- the number of filters in the last conv layer\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers\n            n_blocks (int)      -- the number of ResNet blocks\n            padding_type (str)  -- the name of padding layer in conv layers: reflect | replicate | zero\n        \"\"\"", "\n", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGeneratorMask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add downsampling layers", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "# add ResNet blocks", "\n", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add upsampling layers", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.networks.ResnetGeneratorMask.forward": [[128, 131], ["networks.ResnetGeneratorMask.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.resnet.ResnetBlock.__init__": [[11, 21], ["torch.Module.__init__", "resnet.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.resnet.ResnetBlock.__init__", "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.resnet.ResnetBlock.build_conv_block"], ["def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "\"\"\"Initialize the Resnet block\n\n        A resnet block is a conv block with skip connections\n        We construct a conv block with build_conv_block function,\n        and implement skip connections in <forward> function.\n        Original Resnet paper: https://arxiv.org/pdf/1512.03385.pdf\n        \"\"\"", "\n", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.resnet.ResnetBlock.build_conv_block": [[22, 61], ["torch.Sequential", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "\"\"\"Construct a convolutional block.\n\n        Parameters:\n            dim (int)           -- the number of channels in the conv layer.\n            padding_type (str)  -- the name of padding layer: reflect | replicate | zero\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers.\n            use_bias (bool)     -- if the conv layer uses bias or not\n\n        Returns a conv block (with a conv layer, a normalization layer, and a non-linearity layer (ReLU))\n        \"\"\"", "\n", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.storymy_take-off-eyeglasses.models.resnet.ResnetBlock.forward": [[62, 66], ["resnet.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function (with skip connections)\"\"\"", "\n", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "# add skip connections", "\n", "return", "out", "\n", "\n"]]}