{"home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.rolling_window": [[66, 73], ["numpy.lib.stride_tricks.as_strided"], "function", ["None"], ["def", "rolling_window", "(", "a", ",", "window", ")", ":", "\n", "    ", "\"\"\"Window data.\n\n    \"\"\"", "\n", "shape", "=", "a", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "a", ".", "shape", "[", "-", "1", "]", "-", "window", "+", "1", ",", "window", ")", "\n", "strides", "=", "a", ".", "strides", "+", "(", "a", ".", "strides", "[", "-", "1", "]", ",", ")", "\n", "return", "np", ".", "lib", ".", "stride_tricks", ".", "as_strided", "(", "a", ",", "shape", "=", "shape", ",", "strides", "=", "strides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.window_func": [[75, 82], ["plotting.rolling_window", "numpy.np.mean", "numpy.np.mean", "numpy.np.mean", "numpy.np.mean"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.rolling_window"], ["", "def", "window_func", "(", "x", ",", "y", ",", "window", ",", "func", ")", ":", "\n", "    ", "\"\"\"Evaluate a function on windowed data.\n\n    \"\"\"", "\n", "yw", "=", "rolling_window", "(", "y", ",", "window", ")", "\n", "yw_func", "=", "func", "(", "yw", ",", "axis", "=", "-", "1", ")", "\n", "return", "x", "[", "window", "-", "1", ":", "]", ",", "yw_func", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.filter_log_dirs": [[84, 103], ["range", "re.compile", "re.compile", "print", "sorted", "len", "leaf_dirs.append", "os.walk", "os.walk", "dirs[].startswith", "re.compile.match", "names.append", "print", "len", "re.compile.match"], "function", ["None"], ["", "def", "filter_log_dirs", "(", "pattern", ",", "negative_pattern", "=", "\" \"", ",", "root", "=", "\"./log\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Gets list of experiment folders as specified.\n\n    \"\"\"", "\n", "dirs", "=", "[", "item", "[", "0", "]", "for", "item", "in", "os", ".", "walk", "(", "root", ")", "]", "\n", "leaf_dirs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dirs", ")", ")", ":", "\n", "        ", "if", "i", "+", "1", "<", "len", "(", "dirs", ")", "and", "dirs", "[", "i", "+", "1", "]", ".", "startswith", "(", "dirs", "[", "i", "]", ")", ":", "\n", "            ", "continue", "\n", "", "leaf_dirs", ".", "append", "(", "dirs", "[", "i", "]", ")", "\n", "", "names", "=", "[", "]", "\n", "p", "=", "re", ".", "compile", "(", "pattern", ")", "\n", "np", "=", "re", ".", "compile", "(", "negative_pattern", ")", "\n", "for", "dir", "in", "leaf_dirs", ":", "\n", "        ", "if", "p", ".", "match", "(", "dir", ")", "and", "not", "np", ".", "match", "(", "dir", ")", ":", "\n", "            ", "names", ".", "append", "(", "dir", ")", "\n", "print", "(", "dir", ")", "\n", "", "", "print", "(", "\"\"", ")", "\n", "return", "sorted", "(", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.align_runs": [[105, 117], ["float", "min", "min", "len"], "function", ["None"], ["", "def", "align_runs", "(", "xy_list", ",", "x_num_max", "=", "None", ")", ":", "\n", "    ", "\"\"\"Aligns the max of the x data across runs.\n\n    \"\"\"", "\n", "x_max", "=", "float", "(", "\"inf\"", ")", "\n", "for", "x", ",", "y", "in", "xy_list", ":", "\n", "# Align length of x data (get min across all runs).", "\n", "        ", "x_max", "=", "min", "(", "x_max", ",", "len", "(", "x", ")", ")", "\n", "", "if", "x_num_max", ":", "\n", "        ", "x_max", "=", "min", "(", "x_max", ",", "x_num_max", ")", "\n", "", "aligned_list", "=", "[", "[", "x", "[", ":", "x_max", "]", ",", "y", "[", ":", "x_max", "]", "]", "for", "x", ",", "y", "in", "xy_list", "]", "\n", "return", "aligned_list", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.smooth_runs": [[119, 128], ["plotting.window_func", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.window_func"], ["", "def", "smooth_runs", "(", "xy_list", ",", "window", "=", "10", ")", ":", "\n", "    ", "\"\"\"Smooth the data curves by mean filtering.\n\n    \"\"\"", "\n", "smoothed_list", "=", "[", "\n", "window_func", "(", "np", ".", "asarray", "(", "x", ")", ",", "np", ".", "asarray", "(", "y", ")", ",", "window", ",", "np", ".", "mean", ")", "\n", "for", "x", ",", "y", "in", "xy_list", "\n", "]", "\n", "return", "smoothed_list", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.select_runs": [[130, 141], ["enumerate", "criterion", "numpy.argsort", "selected_list.append"], "function", ["None"], ["", "def", "select_runs", "(", "xy_list", ",", "criterion", ",", "top_k", "=", "0", ")", ":", "\n", "    ", "\"\"\"Pickes the top k runs based on a criterion.\n\n    \"\"\"", "\n", "perf", "=", "[", "criterion", "(", "y", ")", "for", "_", ",", "y", "in", "xy_list", "]", "\n", "top_k_runs", "=", "np", ".", "argsort", "(", "perf", ")", "[", "-", "top_k", ":", "]", "\n", "selected_list", "=", "[", "]", "\n", "for", "r", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "xy_list", ")", ":", "\n", "        ", "if", "r", "in", "top_k_runs", ":", "\n", "            ", "selected_list", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "", "", "return", "selected_list", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.interpolate_runs": [[143, 158], ["float", "numpy.arange", "numpy.asarray", "min", "np.asarray.append", "numpy.interp"], "function", ["None"], ["", "def", "interpolate_runs", "(", "xy_list", ",", "interp_interval", "=", "100", ")", ":", "\n", "    ", "\"\"\"Uses the same x data by interpolation across runs.\n\n    \"\"\"", "\n", "x_right", "=", "float", "(", "\"inf\"", ")", "\n", "for", "x", ",", "y", "in", "xy_list", ":", "\n", "        ", "x_right", "=", "min", "(", "x_right", ",", "x", "[", "-", "1", "]", ")", "\n", "# Shape: (data_len,).", "\n", "", "x", "=", "np", ".", "arange", "(", "0", ",", "x_right", ",", "interp_interval", ")", "\n", "y", "=", "[", "]", "\n", "for", "x_", ",", "y_", "in", "xy_list", ":", "\n", "        ", "y", ".", "append", "(", "np", ".", "interp", "(", "x", ",", "x_", ",", "y_", ")", ")", "\n", "# Shape: (num_runs, data_len).", "\n", "", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.load_from_log_file": [[160, 177], ["numpy.array", "numpy.array", "open", "f.readlines", "k.strip", "l.strip().split", "np.array.append", "np.array.append", "lines[].strip().split", "float", "float", "l.strip", "data[].strip", "data[].strip", "lines[].strip"], "function", ["None"], ["", "def", "load_from_log_file", "(", "path", ")", ":", "\n", "    ", "\"\"\"Return x, y sequence data from the stat csv.\n\n    \"\"\"", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "# Labels.", "\n", "", "xk", ",", "yk", "=", "[", "k", ".", "strip", "(", ")", "for", "k", "in", "lines", "[", "0", "]", ".", "strip", "(", ")", ".", "split", "(", "\",\"", ")", "]", "\n", "# Values.", "\n", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "for", "l", "in", "lines", "[", "1", ":", "]", ":", "\n", "        ", "data", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "\",\"", ")", "\n", "x", ".", "append", "(", "float", "(", "data", "[", "0", "]", ".", "strip", "(", ")", ")", ")", "\n", "y", ".", "append", "(", "float", "(", "data", "[", "1", "]", ".", "strip", "(", ")", ")", ")", "\n", "", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "return", "xk", ",", "x", ",", "yk", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.load_from_logs": [[179, 196], ["os.walk", "os.walk", "[].replace", "plotting.load_from_log_file", "log_files.append", "os.path.join", "os.path.join", "path.split"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.load_from_log_file"], ["", "def", "load_from_logs", "(", "log_dir", ")", ":", "\n", "    ", "\"\"\"Return dict of stats under log_dir folder (`exp_dir/logs/`).\n\n    \"\"\"", "\n", "log_files", "=", "[", "]", "\n", "# Fetch all log files.", "\n", "for", "r", ",", "_", ",", "f", "in", "os", ".", "walk", "(", "log_dir", ")", ":", "\n", "        ", "for", "file", "in", "f", ":", "\n", "            ", "if", "\".log\"", "in", "file", ":", "\n", "                ", "log_files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "r", ",", "file", ")", ")", "\n", "# Fetch all stats from log files.", "\n", "", "", "", "data", "=", "{", "}", "\n", "for", "path", "in", "log_files", ":", "\n", "        ", "name", "=", "path", ".", "split", "(", "log_dir", ")", "[", "-", "1", "]", ".", "replace", "(", "\".log\"", ",", "\"\"", ")", "\n", "xk", ",", "x", ",", "yk", ",", "y", "=", "load_from_log_file", "(", "path", ")", "\n", "data", "[", "name", "]", "=", "(", "xk", ",", "x", ",", "yk", ",", "y", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.plot_from_logs": [[198, 232], ["os.walk", "os.walk", "[].replace", "plotting.load_from_log_file", "matplotlib.clf", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "plotting.window_func", "os.path.join", "os.path.join", "log_files.append", "os.path.join", "os.path.join", "path.split", "[].replace.replace"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.load_from_log_file", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.window_func"], ["", "def", "plot_from_logs", "(", "src_dir", ",", "out_dir", ",", "window", "=", "None", ",", "keys", "=", "None", ")", ":", "\n", "    ", "\"\"\"Generate a plot for each stat in an experiment `logs` folder.\n    \n    Args:\n        src_dir (str): folder to read logs.\n        out_dir (str): folder to save figures.\n        window (int): window size for smoothing.\n        keys (list): specify name of stats to plot, None means plot all.\n\n    \"\"\"", "\n", "# Find all logs.", "\n", "log_files", "=", "[", "]", "\n", "for", "r", ",", "_", ",", "f", "in", "os", ".", "walk", "(", "src_dir", ")", ":", "\n", "        ", "for", "file", "in", "f", ":", "\n", "            ", "if", "\".log\"", "in", "file", ":", "\n", "                ", "log_files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "r", ",", "file", ")", ")", "\n", "# Make a figure for each log file.", "\n", "", "", "", "stats", "=", "{", "}", "\n", "for", "path", "in", "log_files", ":", "\n", "        ", "name", "=", "path", ".", "split", "(", "src_dir", ")", "[", "-", "1", "]", ".", "replace", "(", "\".log\"", ",", "\"\"", ")", "\n", "if", "keys", ":", "\n", "            ", "if", "name", "not", "in", "keys", ":", "\n", "                ", "continue", "\n", "", "", "xk", ",", "x", ",", "yk", ",", "y", "=", "load_from_log_file", "(", "path", ")", "\n", "stats", "[", "name", "]", "=", "(", "xk", ",", "x", ",", "yk", ",", "y", ")", "\n", "if", "window", ":", "\n", "            ", "x", ",", "y", "=", "window_func", "(", "x", ",", "y", ",", "window", ",", "np", ".", "mean", ")", "\n", "", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "x", ",", "y", ")", "\n", "plt", ".", "title", "(", "name", ")", "\n", "plt", ".", "xlabel", "(", "xk", ")", "\n", "plt", ".", "ylabel", "(", "yk", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "name", ".", "replace", "(", "\"/\"", ",", "\"-\"", ")", "+", "\".jpg\"", ")", ")", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.plot_from_tensorboard_log": [[234, 262], ["tensorboard.backend.event_processing.event_accumulator.EventAccumulator", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Reload", "zip", "matplotlib.clf", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "os.path.join", "os.path.join", "matplotlib.savefig", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Tags", "numpy.asarray", "numpy.asarray", "plotting.window_func", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Scalars", "k.replace"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.window_func"], ["", "def", "plot_from_tensorboard_log", "(", "src_dir", ",", "\n", "out_dir", ",", "\n", "window", "=", "None", ",", "\n", "keys", "=", "None", ",", "\n", "xlabel", "=", "\"step\"", ")", ":", "\n", "    ", "\"\"\"Generates a plot for each stat from tfb log file in source folder.\n    \n    \"\"\"", "\n", "event_acc", "=", "EventAccumulator", "(", "src_dir", ")", "\n", "event_acc", ".", "Reload", "(", ")", "\n", "if", "not", "keys", ":", "\n", "        ", "keys", "=", "event_acc", ".", "Tags", "(", ")", "[", "\"scalars\"", "]", "\n", "", "stats", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "_", ",", "x", ",", "y", "=", "zip", "(", "*", "event_acc", ".", "Scalars", "(", "k", ")", ")", "\n", "x", ",", "y", "=", "np", ".", "asarray", "(", "x", ")", ",", "np", ".", "asarray", "(", "y", ")", "\n", "stats", "[", "k", "]", "=", "(", "x", ",", "y", ")", "\n", "if", "window", ":", "\n", "            ", "x", ",", "y", "=", "window_func", "(", "x", ",", "y", ",", "window", ",", "np", ".", "mean", ")", "\n", "", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "x", ",", "y", ")", "\n", "plt", ".", "title", "(", "k", ")", "\n", "plt", ".", "xlabel", "(", "xlabel", ")", "\n", "plt", ".", "ylabel", "(", "k", ")", "\n", "# Use \"-\" instead of \"/\" to connect group and stat name.", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "k", ".", "replace", "(", "\"/\"", ",", "\"-\"", ")", "+", "\".jpg\"", ")", "\n", "plt", ".", "savefig", "(", "out_path", ")", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.plot_from_experiments": [[264, 358], ["collections.defaultdict", "legend_dir_specs.items", "float", "collections.defaultdict.items", "collections.defaultdict.items", "matplotlib.clf", "enumerate", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.show", "min", "numpy.stack", "numpy.mean", "numpy.std", "processed_stats.keys", "matplotlib.plot", "matplotlib.fill_between", "stats[].append", "min", "numpy.array", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Reload", "zip", "os.path.join", "os.path.join", "plotting.load_from_log_file", "numpy.asarray", "numpy.asarray", "plotting.window_func", "len", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Scalars"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.load_from_log_file", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.window_func"], ["", "def", "plot_from_experiments", "(", "legend_dir_specs", ",", "\n", "out_path", "=", "\"temp.jpg\"", ",", "\n", "scalar_name", "=", "None", ",", "\n", "title", "=", "\"Traing Curves\"", ",", "\n", "xlabel", "=", "\"Epochs\"", ",", "\n", "ylabel", "=", "\"Loss\"", ",", "\n", "window", "=", "None", ",", "\n", "x_num_max", "=", "None", ",", "\n", "num_std", "=", "1", ",", "\n", "use_tb_log", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\"Generates plot among algos, each with several seed runs.\n    \n    Example: \n        make a plot on average reward for gnn and mlp:: \n        \n        > plot_from_experiments(\n            {\n                \"gnn\": [\n                    \"results/algo1/seed0\", \n                    \"results/algo1/seed1\", \n                    \"results/algo1/seed2\"\n                ],\n                \"mlp\": [\n                    \"results/algo2/seed6\",\n                    \"results/algo2/seed1\",\n                    \"results/algo2/seed9\",\n                    \"results/algo2/seed3\"\n                ],\n            },\n            out_path=\"avg_reward.jpg\",\n            scalar_name=\"loss_eval/total_rewards\",\n            title=\"Average Reward\",\n            xlabel=\"Epochs\",\n            ylabel=\"Reward\",\n            window=10\n        )\n\n    \"\"\"", "\n", "assert", "scalar_name", "is", "not", "None", ",", "\"Must provide a scalar name to plot\"", "\n", "# Get all stats.", "\n", "stats", "=", "defaultdict", "(", "list", ")", "\n", "for", "l", ",", "dirs", "in", "legend_dir_specs", ".", "items", "(", ")", ":", "\n", "        ", "for", "d", "in", "dirs", ":", "\n", "# Pick from either log source (tensorboard or log text files).", "\n", "            ", "if", "use_tb_log", ":", "\n", "                ", "event_acc", "=", "EventAccumulator", "(", "d", ")", "\n", "event_acc", ".", "Reload", "(", ")", "\n", "_", ",", "x", ",", "y", "=", "zip", "(", "*", "event_acc", ".", "Scalars", "(", "scalar_name", ")", ")", "\n", "del", "event_acc", "\n", "", "else", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "d", ",", "\"logs\"", ",", "scalar_name", "+", "\".log\"", ")", "\n", "_", ",", "x", ",", "_", ",", "y", "=", "load_from_log_file", "(", "path", ")", "\n", "# Smoothing.", "\n", "", "x", ",", "y", "=", "np", ".", "asarray", "(", "x", ")", ",", "np", ".", "asarray", "(", "y", ")", "\n", "if", "window", ":", "\n", "                ", "x", ",", "y", "=", "window_func", "(", "x", ",", "y", ",", "window", ",", "np", ".", "mean", ")", "\n", "", "stats", "[", "l", "]", ".", "append", "(", "[", "x", ",", "y", "]", ")", "\n", "# Post-processing.", "\n", "", "", "x_max", "=", "float", "(", "\"inf\"", ")", "\n", "for", "_", ",", "runs", "in", "stats", ".", "items", "(", ")", ":", "\n", "        ", "for", "x", ",", "y", "in", "runs", ":", "\n", "# Align length of x data (get min across all runs & all algos).", "\n", "            ", "x_max", "=", "min", "(", "x_max", ",", "len", "(", "x", ")", ")", "\n", "", "", "if", "x_num_max", ":", "\n", "        ", "x_max", "=", "min", "(", "x_max", ",", "x_num_max", ")", "\n", "", "processed_stats", "=", "{", "}", "\n", "for", "name", ",", "runs", "in", "stats", ".", "items", "(", ")", ":", "\n", "# Use same x for all runs to an algorithm.", "\n", "        ", "x", "=", "np", ".", "array", "(", "[", "x", "[", ":", "x_max", "]", "for", "x", ",", "_", "in", "runs", "]", ")", "[", "0", "]", "\n", "# Different y for different runs.", "\n", "y", "=", "np", ".", "stack", "(", "[", "y", "[", ":", "x_max", "]", "for", "_", ",", "y", "in", "runs", "]", ")", "\n", "y_mean", "=", "np", ".", "mean", "(", "y", ",", "axis", "=", "0", ")", "\n", "y_std", "=", "np", ".", "std", "(", "y", ",", "axis", "=", "0", ")", "\n", "processed_stats", "[", "name", "]", "=", "[", "x", ",", "y_mean", ",", "y_std", "]", "\n", "# Actual plot.", "\n", "", "plt", ".", "clf", "(", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "processed_stats", ".", "keys", "(", ")", ")", ":", "\n", "        ", "color", "=", "COLORS", "[", "i", "]", "\n", "x", ",", "y_mean", ",", "y_std", "=", "processed_stats", "[", "name", "]", "\n", "plt", ".", "plot", "(", "x", ",", "y_mean", ",", "label", "=", "name", ",", "color", "=", "color", ")", "\n", "plt", ".", "fill_between", "(", "x", ",", "\n", "y_mean", "+", "num_std", "*", "y_std", ",", "\n", "y_mean", "-", "num_std", "*", "y_std", ",", "\n", "alpha", "=", "0.3", ",", "\n", "color", "=", "color", ")", "\n", "", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "xlabel", "(", "xlabel", ")", "\n", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "out_path", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "stats", ",", "processed_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.get_log_dirs": [[360, 399], ["print", "print", "print", "os.isdir", "os.dirname", "os.listdir", "os.listdir", "sorted", "os.join", "logdir.split", "all", "all", "fulldir"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Registry.all", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Registry.all"], ["", "def", "get_log_dirs", "(", "all_logdirs", ",", "\n", "select", "=", "None", ",", "\n", "exclude", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Find all folders for plotting.\n\n    All 3 arguments can be exposed as list args from command line.\n\n    For every entry in all_logdirs,\n        1) check if the entry is a real directory and if it is, \n           pull data from it; \n        2) if not, check to see if the entry is a prefix for a \n           real directory, and pull data from that.\n\n    \"\"\"", "\n", "logdirs", "=", "[", "]", "\n", "for", "logdir", "in", "all_logdirs", ":", "\n", "        ", "if", "osp", ".", "isdir", "(", "logdir", ")", "and", "logdir", "[", "-", "1", "]", "==", "os", ".", "sep", ":", "\n", "            ", "logdirs", "+=", "[", "logdir", "]", "\n", "", "else", ":", "\n", "            ", "basedir", "=", "osp", ".", "dirname", "(", "logdir", ")", "\n", "fulldir", "=", "lambda", "x", ":", "osp", ".", "join", "(", "basedir", ",", "x", ")", "\n", "prefix", "=", "logdir", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "listdir", "=", "os", ".", "listdir", "(", "basedir", ")", "\n", "logdirs", "+=", "sorted", "(", "[", "fulldir", "(", "x", ")", "for", "x", "in", "listdir", "if", "prefix", "in", "x", "]", ")", "\n", "# Enforce selection rules, which check logdirs for certain substrings. Makes it easier to look", "\n", "# at graphs from particular ablations, if you launch many jobs at once with similar names.", "\n", "", "", "if", "select", "is", "not", "None", ":", "\n", "        ", "logdirs", "=", "[", "log", "for", "log", "in", "logdirs", "if", "all", "(", "x", "in", "log", "for", "x", "in", "select", ")", "]", "\n", "", "if", "exclude", "is", "not", "None", ":", "\n", "        ", "logdirs", "=", "[", "\n", "log", "for", "log", "in", "logdirs", "if", "all", "(", "not", "(", "x", "in", "log", ")", "for", "x", "in", "exclude", ")", "\n", "]", "\n", "# Verify logdirs.", "\n", "", "print", "(", "'Plotting from...\\n'", "+", "'='", "*", "DIV_LINE_WIDTH", "+", "'\\n'", ")", "\n", "for", "logdir", "in", "logdirs", ":", "\n", "        ", "print", "(", "logdir", ")", "\n", "", "print", "(", "'\\n'", "+", "'='", "*", "DIV_LINE_WIDTH", ")", "\n", "return", "logdirs", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.StdoutLogger.__init__": [[18, 33], ["logging.getLogger", "logging.Formatter", "os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.getLogger.addHandler"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "logger_name", ",", "log_dir", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s : %(message)s'", ")", "\n", "# Log to file ('w' to overwrite, 'a' to keep appending).", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"std_out.txt\"", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'a'", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "# Log to std out.", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "file_handler", "=", "file_handler", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.StdoutLogger.info": [[34, 39], ["logging.StdoutLogger.logger.info"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info"], ["", "def", "info", "(", "self", ",", "msg", ")", ":", "\n", "        ", "\"\"\"Chain print message to logger.\n\n        \"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.StdoutLogger.close": [[40, 45], ["logging.StdoutLogger.file_handler.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Free log file.\n\n        \"\"\"", "\n", "self", ".", "file_handler", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.__init__": [[57, 63], ["os.path.join", "os.makedirs"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "# Creates folder for logging stats", "\n", "        ", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"logs\"", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "# name of stats being tracked", "\n", "self", ".", "log_names", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.init_logfile": [[64, 76], ["logging.FileLogger.get_log_fname", "os.path.exists", "os.path.dirname", "os.makedirs", "os.path.realpath", "open", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.get_log_fname"], ["", "def", "init_logfile", "(", "self", ",", "name", ",", "xlabel", "=", "\"step\"", ")", ":", "\n", "        ", "\"\"\"Makes text file for logging the stat.\n\n        \"\"\"", "\n", "fname", "=", "self", ".", "get_log_fname", "(", "name", ")", "\n", "# Already exist due to restore.", "\n", "if", "os", ".", "path", ".", "exists", "(", "fname", ")", ":", "\n", "            ", "return", "\n", "", "dir_name", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "fname", ")", ")", "\n", "os", ".", "makedirs", "(", "dir_name", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "fname", ",", "'w'", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "\"{},{}\\n\"", ".", "format", "(", "xlabel", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.get_log_fname": [[77, 82], ["os.path.join"], "methods", ["None"], ["", "", "def", "get_log_fname", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Gets log file name for the stat.\n\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "'{}.log'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.log": [[83, 94], ["logging.FileLogger.get_log_fname", "logging.FileLogger.init_logfile", "logging.FileLogger.log_names.append", "open", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.get_log_fname", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.init_logfile"], ["", "def", "log", "(", "self", ",", "name", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Logs the stat to its corresponding text file.\n\n        \"\"\"", "\n", "if", "name", "not", "in", "self", ".", "log_names", ":", "\n", "# Initialize only if not done so already.", "\n", "            ", "self", ".", "init_logfile", "(", "name", ")", "\n", "self", ".", "log_names", ".", "append", "(", "name", ")", "\n", "", "fname", "=", "self", ".", "get_log_fname", "(", "name", ")", "\n", "with", "open", "(", "fname", ",", "'a'", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "\"{},{}\\n\"", ".", "format", "(", "step", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.restore": [[95, 125], ["os.walk", "enumerate", "open", "file.readlines", "each_line.strip().split", "int", "open", "log_files.append", "temp[].strip", "file.write", "os.path.join", "each_line.strip"], "methods", ["None"], ["", "", "def", "restore", "(", "self", ",", "step", ")", ":", "\n", "        ", "\"\"\"Resets all log files to ignore lines after `step`.\n\n        \"\"\"", "\n", "# Find all stats log files.", "\n", "log_files", "=", "[", "]", "\n", "for", "res", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "self", ".", "log_dir", ")", ":", "\n", "            ", "for", "each_file", "in", "files", ":", "\n", "                ", "if", "\".log\"", "in", "files", ":", "\n", "                    ", "log_files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "res", ",", "each_file", ")", ")", "\n", "", "", "", "for", "fname", "in", "log_files", ":", "\n", "            ", "with", "open", "(", "fname", ",", "\"r\"", ")", "as", "file", ":", "\n", "                ", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "# Find which line to start purging.", "\n", "", "stop_idx", "=", "None", "\n", "for", "i", ",", "each_line", "in", "enumerate", "(", "lines", ")", ":", "\n", "                ", "temp", "=", "each_line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "idx", "=", "int", "(", "temp", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "stop_idx", "=", "i", "\n", "# Skip header.", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "continue", "\n", "# First invalid line.", "\n", "", "if", "idx", ">", "step", ":", "\n", "                    ", "break", "\n", "# Overwrite log file with only valid lines.", "\n", "", "", "lines", "=", "lines", "[", ":", "stop_idx", "]", "\n", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "file", ":", "\n", "                ", "for", "each_line", "in", "lines", ":", "\n", "                    ", "file", ".", "write", "(", "each_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.__init__": [[132, 163], ["os.makedirs", "collections.defaultdict", "logging.StdoutLogger", "logging.FileLogger", "torch.utils.tensorboard.SummaryWriter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "log_dir", ",", "\n", "log_std_out", "=", "True", ",", "\n", "log_file_out", "=", "False", ",", "\n", "use_tensorboard", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"Initializes loggers.\n\n        Args:\n            log_dir (str): name of folder to save logs.\n            log_std_out (bool): if to save terminal logs.  \n            log_file_out (bool): if to write data logs to text files.  \n            use_tensorboard (bool): if to use tensorboard.\n\n        \"\"\"", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "# Container for a log period.", "\n", "self", ".", "stats_buffer", "=", "defaultdict", "(", "list", ")", "\n", "# Terminal logging.", "\n", "self", ".", "log_std_out", "=", "log_std_out", "\n", "if", "log_std_out", ":", "\n", "            ", "self", ".", "std_out_logger", "=", "StdoutLogger", "(", "\"Benchmark\"", ",", "log_dir", ")", "\n", "# Text file logging.", "\n", "", "self", ".", "log_file_out", "=", "log_file_out", "\n", "if", "log_file_out", ":", "\n", "            ", "self", ".", "file_logger", "=", "FileLogger", "(", "log_dir", ")", "\n", "# Tensorboard logging.", "\n", "", "self", ".", "use_tensorboard", "=", "use_tensorboard", "\n", "if", "use_tensorboard", ":", "\n", "            ", "self", ".", "tb_logger", "=", "SummaryWriter", "(", "log_dir", "=", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.load": [[164, 173], ["logging.ExperimentLogger.file_logger.restore", "torch.utils.tensorboard.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.restore"], ["", "", "def", "load", "(", "self", ",", "step", ")", ":", "\n", "        ", "\"\"\"Resume from experiment, but ignores any logs after `step`.\n\n        \"\"\"", "\n", "if", "self", ".", "log_file_out", ":", "\n", "            ", "self", ".", "file_logger", ".", "restore", "(", "step", ")", "\n", "", "if", "self", ".", "use_tensorboard", ":", "\n", "            ", "self", ".", "tb_logger", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "log_dir", ",", "\n", "purge_step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.close": [[174, 182], ["logging.ExperimentLogger.std_out_logger.close", "logging.ExperimentLogger.tb_logger.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Cleans up logging resources.\n\n        \"\"\"", "\n", "if", "self", ".", "log_std_out", ":", "\n", "            ", "self", ".", "std_out_logger", ".", "close", "(", ")", "\n", "", "if", "self", ".", "use_tensorboard", ":", "\n", "            ", "self", ".", "tb_logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info": [[183, 191], ["logging.ExperimentLogger.std_out_logger.info", "print"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info"], ["", "", "def", "info", "(", "self", ",", "msg", ")", ":", "\n", "        ", "\"\"\"Logs a message to std output.\n\n        \"\"\"", "\n", "if", "self", ".", "log_std_out", ":", "\n", "            ", "self", ".", "std_out_logger", ".", "info", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalar": [[192, 211], ["logging.ExperimentLogger.stats_buffer[].append", "logging.ExperimentLogger.file_logger.log", "logging.ExperimentLogger.tb_logger.add_scalar"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.log", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalar"], ["", "", "def", "add_scalar", "(", "self", ",", "\n", "name", ",", "\n", "val", ",", "\n", "step", ",", "\n", "store", "=", "True", ",", "\n", "write", "=", "True", ",", "\n", "write_tb", "=", "True", ")", ":", "\n", "        ", "\"\"\"Logs a scalar data.\n\n        \"\"\"", "\n", "# Add to buffer (to be logged to terminal).", "\n", "if", "store", ":", "\n", "            ", "self", ".", "stats_buffer", "[", "name", "]", ".", "append", "(", "val", ")", "\n", "# Log to text file.", "\n", "", "if", "self", ".", "log_file_out", "and", "write", ":", "\n", "            ", "self", ".", "file_logger", ".", "log", "(", "name", ",", "val", ",", "step", ")", "\n", "# Log to tensorboard.", "\n", "", "if", "self", ".", "use_tensorboard", "and", "write_tb", ":", "\n", "            ", "self", ".", "tb_logger", ".", "add_scalar", "(", "name", ",", "val", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars": [[212, 227], ["isinstance", "data.items", "logging.ExperimentLogger.add_scalar"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalar"], ["", "", "def", "add_scalars", "(", "self", ",", "\n", "data", ",", "\n", "step", ",", "\n", "prefix", "=", "None", ",", "\n", "store", "=", "True", ",", "\n", "write", "=", "True", ",", "\n", "write_tb", "=", "True", ")", ":", "\n", "        ", "\"\"\"Logs a group of scalars.\n\n        \"\"\"", "\n", "assert", "isinstance", "(", "data", ",", "dict", ")", "\n", "for", "name", ",", "val", "in", "data", ".", "items", "(", ")", ":", "\n", "# Scalars under the same name group.", "\n", "            ", "full_name", "=", "prefix", "+", "\"/\"", "+", "name", "if", "prefix", "else", "name", "\n", "self", ".", "add_scalar", "(", "full_name", ",", "val", ",", "step", ",", "store", ",", "write", ",", "write_tb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.dump_scalars": [[228, 276], ["sorted", "zip", "lines.append", "logging.ExperimentLogger.info", "logging.ExperimentLogger.stats_buffer.clear", "logging.ExperimentLogger.stats_buffer.items", "keys.append", "values.append", "len", "print", "max", "max", "lines.append", "len", "numpy.asarray", "str.find", "logging.ExperimentLogger._truncate", "str", "logging.ExperimentLogger._truncate", "logging.ExperimentLogger._truncate", "map", "map", "numpy.asarray.mean", "numpy.asarray.std", "keys.append", "values.append", "len", "len", "str.find", "len"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger._truncate", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger._truncate", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger._truncate"], ["", "", "def", "dump_scalars", "(", "self", ")", ":", "\n", "        ", "\"\"\"Produce a summary of stats within the log period (from buffer).\n\n        Currently only dump to terminal as a table summary, \n        can dump to a CSV file in the future, \n        but feels repetitive & less flexible than `add_scalar(..., write=True)`.\n\n        \"\"\"", "\n", "keys", ",", "values", "=", "[", "]", ",", "[", "]", "\n", "tag", "=", "None", "\n", "# Important: sorted keys are important for consistency betwen log steps.", "\n", "for", "key", ",", "val_list", "in", "sorted", "(", "self", ".", "stats_buffer", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "val_list", ")", "==", "1", ":", "\n", "# Left align.", "\n", "                ", "val_str", "=", "\"{:<8.3g}\"", ".", "format", "(", "val_list", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "val_np", "=", "np", ".", "asarray", "(", "val_list", ")", "\n", "val_str", "=", "\"{:.3f} +/- {:.3f}\"", ".", "format", "(", "val_np", ".", "mean", "(", ")", ",", "val_np", ".", "std", "(", ")", ")", "\n", "# Find tag and add it to the dict.", "\n", "", "if", "key", ".", "find", "(", "\"/\"", ")", ">", "0", ":", "\n", "                ", "tag", "=", "key", "[", ":", "key", ".", "find", "(", "\"/\"", ")", "+", "1", "]", "\n", "trunc_tag", "=", "self", ".", "_truncate", "(", "tag", ")", "\n", "if", "trunc_tag", "not", "in", "keys", ":", "\n", "                    ", "keys", ".", "append", "(", "trunc_tag", ")", "\n", "values", ".", "append", "(", "\"\"", ")", "\n", "# Remove tag from key.", "\n", "", "", "if", "tag", "is", "not", "None", "and", "tag", "in", "key", ":", "\n", "                ", "key", "=", "str", "(", "\"   \"", "+", "key", "[", "len", "(", "tag", ")", ":", "]", ")", "\n", "", "keys", ".", "append", "(", "self", ".", "_truncate", "(", "key", ")", ")", "\n", "values", ".", "append", "(", "self", ".", "_truncate", "(", "val_str", ")", ")", "\n", "# Find max widths.", "\n", "", "if", "len", "(", "keys", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"Tried to write empty key-value dict\"", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "key_width", "=", "max", "(", "map", "(", "len", ",", "keys", ")", ")", "\n", "val_width", "=", "max", "(", "map", "(", "len", ",", "values", ")", ")", "\n", "# Write out the data.", "\n", "", "dashes", "=", "\"-\"", "*", "(", "key_width", "+", "val_width", "+", "7", ")", "\n", "lines", "=", "[", "dashes", "]", "\n", "for", "key", ",", "value", "in", "zip", "(", "keys", ",", "values", ")", ":", "\n", "            ", "key_space", "=", "\" \"", "*", "(", "key_width", "-", "len", "(", "key", ")", ")", "\n", "val_space", "=", "\" \"", "*", "(", "val_width", "-", "len", "(", "value", ")", ")", "\n", "lines", ".", "append", "(", "\"| {}{} | {}{} |\"", ".", "format", "(", "key", ",", "key_space", ",", "value", ",", "val_space", ")", ")", "\n", "", "lines", ".", "append", "(", "dashes", ")", "\n", "summary", "=", "\"\\n\"", "+", "\"\\n\"", ".", "join", "(", "lines", ")", "+", "\"\\n\"", "\n", "self", ".", "info", "(", "summary", ")", "\n", "self", ".", "stats_buffer", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger._truncate": [[277, 282], ["len"], "methods", ["None"], ["", "def", "_truncate", "(", "self", ",", "string", ",", "max_length", "=", "23", ")", ":", "\n", "        ", "if", "len", "(", "string", ")", ">", "max_length", ":", "\n", "            ", "return", "string", "[", ":", "max_length", "-", "3", "]", "+", "\"...\"", "\n", "", "else", ":", "\n", "            ", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.log_video": [[283, 290], ["imageio.mimsave"], "methods", ["None"], ["", "", "def", "log_video", "(", "self", ",", "name", ",", "video", ",", "fps", "=", "20", ")", ":", "\n", "        ", "\"\"\"Saves a video for evaluation, video: list of np.arrays of shape (H,W,C).\n\n        \"\"\"", "\n", "vid_kargs", "=", "{", "'fps'", ":", "fps", "}", "\n", "vid_name", "=", "'{}/{}'", ".", "format", "(", "self", ".", "log_dir", ",", "name", ")", "\n", "imageio", ".", "mimsave", "(", "vid_name", ",", "video", ",", "**", "vid_kargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Spec.__init__": [[30, 42], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", ",", "entry_point", "=", "None", ",", "config_entry_point", "=", "None", ")", ":", "\n", "        ", "\"\"\"Used in function \"register\".\n\n        Args:\n            id (str): The official environment ID\n            entry_point (cls, str): The Python entrypoint of the environment class.\n            config_entry_point (str): The config to pass to the environment class.\n\n        \"\"\"", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "entry_point", "=", "entry_point", "\n", "self", ".", "config_entry_point", "=", "config_entry_point", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Spec.__repr__": [[43, 48], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Defines a class instance's string representation.\n\n        \"\"\"", "\n", "return", "\"Spec({})\"", ".", "format", "(", "self", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Spec.get_config": [[49, 68], ["isinstance", "registration.Spec.config_entry_point.endswith", "registration.Spec.config_entry_point.split", "registration.load", "Exception", "pkg_resources.open_text", "yaml.load"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"Fetches config (as dict) for the registered class.\n\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "config_entry_point", ",", "str", ")", ":", "\n", "            ", "if", "self", ".", "config_entry_point", ".", "endswith", "(", "\".yaml\"", ")", ":", "\n", "# Specified as file path.", "\n", "                ", "mod_name", ",", "config_name", "=", "self", ".", "config_entry_point", ".", "split", "(", "\":\"", ")", "\n", "with", "pkg_resources", ".", "open_text", "(", "mod_name", ",", "config_name", ")", "as", "f", ":", "\n", "                    ", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "", "else", ":", "\n", "# Specified as \"module_path:config_dict_name\".", "\n", "                ", "config", "=", "load", "(", "self", ".", "config_entry_point", ")", "\n", "", "", "elif", "self", ".", "config_entry_point", "is", "None", ":", "\n", "# No default config.", "\n", "            ", "config", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Config type {} is not supported.\"", ".", "format", "(", "self", ".", "config_entry_point", ")", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Spec.make": [[69, 87], ["callable", "copy.deepcopy", "hasattr", "Exception", "registration.Spec.entry_point", "registration.load", "load."], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load"], ["", "def", "make", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Instantiates an instance of the registered class with appropriate kwargs.\n\n        \"\"\"", "\n", "if", "self", ".", "entry_point", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Attempting to make deprecated env {}.'", ".", "format", "(", "self", ".", "id", ")", ")", "\n", "", "if", "callable", "(", "self", ".", "entry_point", ")", ":", "\n", "            ", "obj", "=", "self", ".", "entry_point", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "cls", "=", "load", "(", "self", ".", "entry_point", ")", "\n", "obj", "=", "cls", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# Make the instance aware of which spec it came from.", "\n", "", "spec", "=", "copy", ".", "deepcopy", "(", "self", ")", "\n", "if", "hasattr", "(", "obj", ",", "\"spec\"", ")", ":", "\n", "            ", "obj", ".", "instance_spec", "=", "spec", "\n", "", "else", ":", "\n", "            ", "obj", ".", "spec", "=", "spec", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Registry.__init__": [[94, 96], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "specs", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Registry.make": [[97, 104], ["spec.make"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make"], ["", "def", "make", "(", "self", ",", "path", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Create an instance of the registered callable by id `path`.\n\n        \"\"\"", "\n", "spec", "=", "self", ".", "specs", "[", "path", "]", "\n", "obj", "=", "spec", ".", "make", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Registry.all": [[105, 110], ["registration.Registry.specs.values"], "methods", ["None"], ["", "def", "all", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns all registered callables.\n\n        \"\"\"", "\n", "return", "self", ".", "specs", ".", "values", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Registry.spec": [[111, 128], ["path.split", "importlib.import_module", "Exception", "Exception"], "methods", ["None"], ["", "def", "spec", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Returns spec of the registered callable by id.\n\n        \"\"\"", "\n", "if", "':'", "in", "path", ":", "\n", "            ", "mod_name", ",", "id", "=", "path", ".", "split", "(", "':'", ")", "\n", "try", ":", "\n", "                ", "importlib", ".", "import_module", "(", "mod_name", ")", "\n", "", "except", ":", "\n", "                ", "raise", "Exception", "(", "'''A module ({}) was specified for the environment but was not found,make sure the\n                                package is installed with `pip install` before calling `gym.make()`'''", ".", "format", "(", "mod_name", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "id", "=", "path", "\n", "", "try", ":", "\n", "            ", "return", "self", ".", "specs", "[", "id", "]", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "\"Key not found in registry.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Registry.register": [[129, 136], ["registration.Spec", "Exception"], "methods", ["None"], ["", "", "def", "register", "(", "self", ",", "id", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Saves a reference to the callable with a id.\n\n        \"\"\"", "\n", "if", "id", "in", "self", ".", "specs", ":", "\n", "            ", "raise", "Exception", "(", "'Cannot re-register id: {}'", ".", "format", "(", "id", ")", ")", "\n", "", "self", ".", "specs", "[", "id", "]", "=", "Spec", "(", "id", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.load": [[15, 23], ["name.split", "importlib.import_module", "getattr"], "function", ["None"], ["", "def", "load", "(", "name", ")", ":", "\n", "    ", "\"\"\"Loads a callable from a string with format `module_path:callable_name`.\n\n    \"\"\"", "\n", "mod_name", ",", "attr_name", "=", "name", ".", "split", "(", "\":\"", ")", "\n", "mod", "=", "importlib", ".", "import_module", "(", "mod_name", ")", "\n", "fn", "=", "getattr", "(", "mod", ",", "attr_name", ")", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.register": [[138, 143], ["registry.register"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.register"], ["", "", "def", "register", "(", "id", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Saves the callable to the global registry.\n\n    \"\"\"", "\n", "return", "registry", ".", "register", "(", "id", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make": [[145, 150], ["registry.make"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make"], ["", "def", "make", "(", "id", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates an instance of the callable from global registry.\n\n    \"\"\"", "\n", "return", "registry", ".", "make", "(", "id", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.spec": [[152, 157], ["registry.spec"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.spec"], ["", "def", "spec", "(", "id", ")", ":", "\n", "    ", "\"\"\"Gets the spec of the callable from global registry.\n\n    \"\"\"", "\n", "return", "registry", ".", "spec", "(", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.get_config": [[159, 164], ["registry.spec().get_config", "registry.spec"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.get_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.spec"], ["", "def", "get_config", "(", "id", ")", ":", "\n", "    ", "\"\"\"Gets the config of the callable from global registry.\n\n    \"\"\"", "\n", "return", "registry", ".", "spec", "(", "id", ")", ".", "get_config", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.mkdirs": [[19, 26], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "mkdirs", "(", "*", "paths", ")", ":", "\n", "    ", "\"\"\"Makes a list of directories.\n\n    \"\"\"", "\n", "for", "path", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.eval_token": [[28, 38], ["token.isnumeric", "int", "float"], "function", ["None"], ["", "", "", "def", "eval_token", "(", "token", ")", ":", "\n", "    ", "\"\"\"Converts string token to int, float or str.\n\n    \"\"\"", "\n", "if", "token", ".", "isnumeric", "(", ")", ":", "\n", "        ", "return", "int", "(", "token", ")", "\n", "", "try", ":", "\n", "        ", "return", "float", "(", "token", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.read_file": [[40, 67], ["open", "open.close", "json.load", "len", "os.path.exists", "yaml.load", "open.readlines", "utils.eval_token", "len", "len", "yaml.load.append", "line.strip().split", "line.strip"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.eval_token"], ["", "", "def", "read_file", "(", "file_path", ",", "sep", "=", "\",\"", ")", ":", "\n", "    ", "\"\"\"Loads content from a file (json, yaml, csv, txt).\n    \n    For json & yaml files returns a dict.\n    Ror csv & txt returns list of lines.\n\n    \"\"\"", "\n", "if", "len", "(", "file_path", ")", "<", "1", "or", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "        ", "return", "None", "\n", "# load file", "\n", "", "f", "=", "open", "(", "file_path", ",", "\"r\"", ")", "\n", "if", "\"json\"", "in", "file_path", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "elif", "\"yaml\"", "in", "file_path", ":", "\n", "        ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "else", ":", "\n", "        ", "sep", "=", "sep", "if", "\"csv\"", "in", "file_path", "else", "\" \"", "\n", "data", "=", "[", "]", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line_post", "=", "[", "eval_token", "(", "t", ")", "for", "t", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "sep", ")", "]", "\n", "# if only sinlge item in line", "\n", "if", "len", "(", "line_post", ")", "==", "1", ":", "\n", "                ", "line_post", "=", "line_post", "[", "0", "]", "\n", "", "if", "len", "(", "line_post", ")", ">", "0", ":", "\n", "                ", "data", ".", "append", "(", "line_post", ")", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.merge_dict": [[69, 79], ["update_dict.items", "isinstance", "isinstance", "utils.merge_dict"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.merge_dict"], ["", "def", "merge_dict", "(", "source_dict", ",", "update_dict", ")", ":", "\n", "    ", "\"\"\"Merges updates into source recursively.\n\n    \"\"\"", "\n", "for", "k", ",", "v", "in", "update_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "source_dict", "and", "isinstance", "(", "source_dict", "[", "k", "]", ",", "dict", ")", "and", "isinstance", "(", "\n", "v", ",", "dict", ")", ":", "\n", "            ", "merge_dict", "(", "source_dict", "[", "k", "]", ",", "v", ")", "\n", "", "else", ":", "\n", "            ", "source_dict", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.get_time": [[81, 88], ["datetime.datetime.now", "str", "datetime.datetime.now.strftime"], "function", ["None"], ["", "", "", "def", "get_time", "(", ")", ":", "\n", "    ", "\"\"\"Gets current timestamp (as string).\n\n    \"\"\"", "\n", "start_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "time", "=", "str", "(", "start_time", ".", "strftime", "(", "\"%Y_%m_%d-%X\"", ")", ")", "\n", "return", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.get_random_state": [[90, 98], ["random.getstate", "numpy.random.get_state", "torch.get_rng_state"], "function", ["None"], ["", "def", "get_random_state", "(", ")", ":", "\n", "    ", "\"\"\"Snapshots the random state at any moment.\n\n    \"\"\"", "\n", "return", "{", "\n", "\"random\"", ":", "random", ".", "getstate", "(", ")", ",", "\n", "\"numpy\"", ":", "np", ".", "random", ".", "get_state", "(", ")", ",", "\n", "\"torch\"", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_random_state": [[101, 108], ["random.setstate", "numpy.random.set_state", "torch.torch.set_rng_state"], "function", ["None"], ["", "def", "set_random_state", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"Resets the random state for experiment restore.\n\n    \"\"\"", "\n", "random", ".", "setstate", "(", "state_dict", "[", "\"random\"", "]", ")", "\n", "np", ".", "random", ".", "set_state", "(", "state_dict", "[", "\"numpy\"", "]", ")", "\n", "torch", ".", "torch", ".", "set_rng_state", "(", "state_dict", "[", "\"torch\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_seed": [[110, 121], ["random.seed", "numpy.random.seed", "torch.manual_seed"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed"], ["", "def", "set_seed", "(", "seed", ",", "cuda", "=", "False", ")", ":", "\n", "    ", "\"\"\"General seeding function for reproducibility.\n\n    \"\"\"", "\n", "assert", "seed", "is", "not", "None", ",", "\"Error in set_seed(...), provided seed not valid\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "cuda", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_dir_from_config": [[123, 149], ["str", "os.path.join", "utils.mkdirs", "str", "datetime.datetime.now().strftime", "subprocess.check_output().decode().strip", "str", "open", "yaml.dump", "open", "file.write", "os.path.join", "munch.unmunchify", "os.path.join", "datetime.datetime.now", "subprocess.check_output().decode", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.mkdirs"], ["", "", "def", "set_dir_from_config", "(", "config", ")", ":", "\n", "    ", "\"\"\"Creates a output folder for experiment (and save config files).\n    \n    Naming format: {root (e.g. results)}/{tag (exp id)}/{seed}_{timestamp}_{git commit id}\n\n    \"\"\"", "\n", "# Make run folder (of a seed run for an experiment)", "\n", "seed", "=", "str", "(", "config", ".", "seed", ")", "if", "config", ".", "seed", "is", "not", "None", "else", "\"-\"", "\n", "timestamp", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%b-%d-%H-%M-%S\"", ")", ")", "\n", "try", ":", "\n", "        ", "commit_id", "=", "subprocess", ".", "check_output", "(", "\n", "[", "\"git\"", ",", "\"describe\"", ",", "\"--tags\"", ",", "\"--always\"", "]", "\n", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "strip", "(", ")", "\n", "commit_id", "=", "str", "(", "commit_id", ")", "\n", "", "except", ":", "\n", "        ", "commit_id", "=", "\"-\"", "\n", "", "run_dir", "=", "\"seed{}_{}_{}\"", ".", "format", "(", "seed", ",", "timestamp", ",", "commit_id", ")", "\n", "# Make output folder.", "\n", "config", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "config", ".", "tag", ",", "run_dir", ")", "\n", "mkdirs", "(", "config", ".", "output_dir", ")", "\n", "# Save config.", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "'config.yaml'", ")", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "yaml", ".", "dump", "(", "munch", ".", "unmunchify", "(", "config", ")", ",", "file", ",", "default_flow_style", "=", "False", ")", "\n", "# Save command.", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "'cmd.txt'", ")", ",", "'a'", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_seed_from_config": [[151, 158], ["utils.set_seed"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_seed"], ["", "", "def", "set_seed_from_config", "(", "config", ")", ":", "\n", "    ", "\"\"\"Sets seed, only set if seed is provided.\n\n    \"\"\"", "\n", "seed", "=", "config", ".", "seed", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "set_seed", "(", "seed", ",", "cuda", "=", "config", ".", "use_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_device_from_config": [[160, 166], ["torch.cuda.is_available"], "function", ["None"], ["", "", "def", "set_device_from_config", "(", "config", ")", ":", "\n", "    ", "\"\"\"Sets device, using GPU is set to `cuda` for now, no specific GPU yet.\n\n    \"\"\"", "\n", "use_cuda", "=", "config", ".", "use_gpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "config", ".", "device", "=", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.save_video": [[168, 182], ["numpy.stack().astype().reshape", "imageio.mimsave", "numpy.stack().astype", "numpy.stack"], "function", ["None"], ["", "def", "save_video", "(", "name", ",", "frames", ",", "fps", "=", "20", ")", ":", "\n", "    ", "\"\"\"Convert list of frames (H,W,C) to a video.\n\n    Args:\n        name (str): path name to save the video.\n        frames (list): frames of the video as list of np.arrays.\n        fps (int, optional): frames per second.\n\n    \"\"\"", "\n", "assert", "\".gif\"", "in", "name", "or", "\".mp4\"", "in", "name", ",", "\"invalid video name\"", "\n", "vid_kwargs", "=", "{", "'fps'", ":", "fps", "}", "\n", "h", ",", "w", ",", "c", "=", "frames", "[", "0", "]", ".", "shape", "\n", "video", "=", "np", ".", "stack", "(", "frames", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "reshape", "(", "-", "1", ",", "h", ",", "w", ",", "c", ")", "\n", "imageio", ".", "mimsave", "(", "name", ",", "video", ",", "**", "vid_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.str2bool": [[184, 202], ["isinstance", "val.lower", "val.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "val", ")", ":", "\n", "    ", "\"\"\"Converts a string into a boolean.\n\n    Args:\n        val (str|bool): Input value (possibly string) to interpret as boolean.\n\n    Returns:\n        bool: Interpretation of `val` as True or False.\n\n    \"\"\"", "\n", "if", "isinstance", "(", "val", ",", "bool", ")", ":", "\n", "        ", "return", "val", "\n", "", "elif", "val", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "val", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"[ERROR] in str2bool(), a Boolean value is expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.unwrap_wrapper": [[204, 214], ["isinstance", "isinstance"], "function", ["None"], ["", "", "def", "unwrap_wrapper", "(", "env", ",", "wrapper_class", ")", ":", "\n", "    ", "\"\"\"Retrieve a ``VecEnvWrapper`` object by recursively searching.\n\n    \"\"\"", "\n", "env_tmp", "=", "env", "\n", "while", "isinstance", "(", "env_tmp", ",", "gym", ".", "Wrapper", ")", ":", "\n", "        ", "if", "isinstance", "(", "env_tmp", ",", "wrapper_class", ")", ":", "\n", "            ", "return", "env_tmp", "\n", "", "env_tmp", "=", "env_tmp", ".", "env", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.is_wrapped": [[216, 221], ["utils.unwrap_wrapper"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.unwrap_wrapper"], ["", "def", "is_wrapped", "(", "env", ",", "wrapper_class", ")", ":", "\n", "    ", "\"\"\"Check if a given environment has been wrapped with a given wrapper.\n\n    \"\"\"", "\n", "return", "unwrap_wrapper", "(", "env", ",", "wrapper_class", ")", "is", "not", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.__init__": [[19, 28], ["argparse.ArgumentParser", "configuration.ConfigFactory.add_arguments", "dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_arguments"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Benchmark\"", ")", "\n", "self", ".", "add_arguments", "(", ")", "\n", "self", ".", "base_dict", "=", "dict", "(", "\n", "tag", "=", "\"temp\"", ",", "\n", "seed", "=", "None", ",", "\n", "use_gpu", "=", "False", ",", "\n", "output_dir", "=", "\"results\"", ",", "\n", "restore", "=", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument": [[30, 35], ["configuration.ConfigFactory.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument"], ["", "def", "add_argument", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Extends to new arguments.\n\n        \"\"\"", "\n", "self", ".", "parser", ".", "add_argument", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_arguments": [[36, 57], ["configuration.ConfigFactory.add_argument", "configuration.ConfigFactory.add_argument", "configuration.ConfigFactory.add_argument", "configuration.ConfigFactory.add_argument", "configuration.ConfigFactory.add_argument", "configuration.ConfigFactory.add_argument", "configuration.ConfigFactory.add_argument", "configuration.ConfigFactory.add_argument", "configuration.ConfigFactory.add_argument"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument"], ["", "def", "add_arguments", "(", "self", ")", ":", "\n", "        ", "\"\"\"Registers base arguments (for experiment bookkeeping).\n\n        \"\"\"", "\n", "self", ".", "add_argument", "(", "\"--tag\"", ",", "type", "=", "str", ",", "help", "=", "'id of the experiment'", ")", "\n", "self", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "help", "=", "\"random seed, default is no seed/None\"", ")", "\n", "# self.add_argument(\"--device\", type=str, help=\"cpu or cuda(gpu)\")", "\n", "self", ".", "add_argument", "(", "\"--use_gpu\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"added to use gpu (if available)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--output_dir\"", ",", "type", "=", "str", ",", "help", "=", "\"output saving folder\"", ")", "\n", "self", ".", "add_argument", "(", "\"--restore\"", ",", "type", "=", "str", ",", "help", "=", "'folder to reload from'", ")", "\n", "# Need to explicitly provide from command line (if training for the 1st time).", "\n", "self", ".", "add_argument", "(", "\"--algo\"", ",", "type", "=", "str", ",", "help", "=", "'algorithm/controller'", ")", "\n", "self", ".", "add_argument", "(", "\"--task\"", ",", "type", "=", "str", ",", "help", "=", "'task/environment'", ")", "\n", "self", ".", "add_argument", "(", "\"--overrides\"", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"override config files\"", ")", "\n", "self", ".", "add_argument", "(", "\"--kv_overrides\"", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"override key-value pairs\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.merge": [[58, 95], ["configuration.ConfigFactory.parser.parse_known_args", "config_dict.update", "munch.munchify", "os.path.join", "config_dict.update", "safe_control_gym.utils.utils.merge_dict", "safe_control_gym.utils.utils.read_file", "safe_control_gym.utils.registration.get_config", "safe_control_gym.utils.registration.get_config", "warnings.warn", "safe_control_gym.utils.utils.merge_dict", "kv.split", "dict_deep.deep_set", "args.__dict__.items", "safe_control_gym.utils.utils.read_file", "eval", "k.strip"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.merge_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.read_file", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.get_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.get_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.merge_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.read_file", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval"], ["", "def", "merge", "(", "self", ")", ":", "\n", "        ", "\"\"\"Creates experiment config object from command line and config files.\n\n        \"\"\"", "\n", "config_dict", "=", "self", ".", "base_dict", "\n", "args", ",", "_", "=", "self", ".", "parser", ".", "parse_known_args", "(", ")", "\n", "if", "args", ".", "restore", ":", "\n", "# Restore for continual training or evaluation.", "\n", "            ", "restore_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "restore", ",", "\"config.yaml\"", ")", "\n", "config_dict", ".", "update", "(", "read_file", "(", "restore_path", ")", ")", "\n", "", "elif", "args", ".", "algo", "and", "args", ".", "task", ":", "\n", "# Start fresh training.", "\n", "            ", "config_dict", "[", "\"algo_config\"", "]", "=", "get_config", "(", "args", ".", "algo", ")", "\n", "config_dict", "[", "\"task_config\"", "]", "=", "get_config", "(", "args", ".", "task", ")", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"No agent/task config given.\"", ")", "\n", "", "if", "args", ".", "use_gpu", ":", "\n", "            ", "config_dict", "[", "\"use_gpu\"", "]", "=", "args", ".", "use_gpu", "\n", "# Experiment-specific overrides, e.g. training hyperparameters.", "\n", "", "if", "args", ".", "overrides", ":", "\n", "            ", "for", "f", "in", "args", ".", "overrides", ":", "\n", "                ", "merge_dict", "(", "config_dict", ",", "read_file", "(", "f", ")", ")", "\n", "", "", "if", "args", ".", "kv_overrides", ":", "\n", "            ", "kv_dict", "=", "{", "}", "\n", "for", "kv", "in", "args", ".", "kv_overrides", ":", "\n", "                ", "k", ",", "v", "=", "kv", ".", "split", "(", "\"=\"", ")", "\n", "try", ":", "\n", "                    ", "v", "=", "eval", "(", "v", ")", "# String as a python expression.", "\n", "", "except", ":", "\n", "                    ", "pass", "# Normal python string.", "\n", "", "deep_set", "(", "kv_dict", ",", "k", ".", "strip", "(", ")", ",", "v", ")", "\n", "", "merge_dict", "(", "config_dict", ",", "kv_dict", ")", "\n", "# Command line overrides (e.g. retains `restore` field).", "\n", "", "cmdline_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "args", ".", "__dict__", ".", "items", "(", ")", "if", "v", "is", "not", "None", "}", "\n", "config_dict", ".", "update", "(", "cmdline_dict", ")", "\n", "# Allow attribute-style access.", "\n", "return", "munch", ".", "munchify", "(", "config_dict", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_cost": [[9, 19], ["len", "len", "numpy.zeros", "range", "numpy.mean", "range", "numpy.sum"], "function", ["None"], ["def", "get_cost", "(", "test_runs", ")", ":", "\n", "    ", "num_epochs", "=", "len", "(", "test_runs", ")", "\n", "num_episodes", "=", "len", "(", "test_runs", "[", "0", "]", ")", "\n", "costs", "=", "np", ".", "zeros", "(", "(", "num_epochs", ",", "num_episodes", ")", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "for", "episode", "in", "range", "(", "num_episodes", ")", ":", "\n", "            ", "cost", "=", "np", ".", "sum", "(", "test_runs", "[", "epoch", "]", "[", "episode", "]", "[", "'obs'", "]", "**", "2", ")", "\n", "costs", "[", "epoch", ",", "episode", "]", "=", "cost", "\n", "", "", "mean_cost", "=", "np", ".", "mean", "(", "costs", ",", "axis", "=", "1", ")", "\n", "return", "mean_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_average_rmse_error": [[20, 31], ["len", "len", "numpy.zeros", "range", "numpy.mean", "range"], "function", ["None"], ["", "def", "get_average_rmse_error", "(", "runs", ")", ":", "\n", "    ", "num_epochs", "=", "len", "(", "runs", ")", "\n", "num_episodes", "=", "len", "(", "runs", "[", "0", "]", ")", "\n", "costs", "=", "np", ".", "zeros", "(", "(", "num_epochs", ",", "num_episodes", ")", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "for", "episode", "in", "range", "(", "num_episodes", ")", ":", "\n", "            ", "mse", ",", "rmse", "=", "runs", "[", "epoch", "]", "[", "episode", "]", "[", "'total_rmse_state_error'", "]", "\n", "costs", "[", "epoch", ",", "episode", "]", "=", "rmse", "\n", "\n", "", "", "mean_cost", "=", "np", ".", "mean", "(", "costs", ",", "axis", "=", "1", ")", "\n", "return", "mean_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_runs": [[32, 49], ["matplotlib.plot", "range", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.cla", "matplotlib.clf", "matplotlib.plot", "os.path.join", "matplotlib.savefig", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_runs", "(", "all_runs", ",", "num_epochs", ",", "episode", "=", "0", ",", "ind", "=", "0", ",", "ylabel", "=", "'x position'", ",", "dir", "=", "None", ")", ":", "\n", "    ", "plt", ".", "plot", "(", "all_runs", "[", "0", "]", "[", "episode", "]", "[", "'state'", "]", "[", ":", ",", "ind", "]", ",", "label", "=", "'Linear MPC'", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "num_epochs", ")", ":", "\n", "#plot the first episode of each epoch", "\n", "        ", "plt", ".", "plot", "(", "all_runs", "[", "epoch", "]", "[", "episode", "]", "[", "'state'", "]", "[", ":", ",", "ind", "]", ",", "label", "=", "'GP-MPC %s'", "%", "epoch", ")", "\n", "", "plt", ".", "title", "(", "ylabel", ")", "\n", "plt", ".", "xlabel", "(", "'Step'", ")", "\n", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "save_str", "=", "'ep%s_ind%s_state.png'", "%", "(", "episode", ",", "ind", ")", "\n", "if", "dir", "is", "not", "None", ":", "\n", "        ", "save_str", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "save_str", ")", "\n", "plt", ".", "savefig", "(", "save_str", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_learning_curve": [[52, 70], ["numpy.array", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "os.path.join", "matplotlib.savefig", "matplotlib.cla", "matplotlib.clf", "os.path.join", "numpy.savetxt", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_learning_curve", "(", "avg_rewards", ",", "num_points_per_epoch", ",", "stem", ",", "dir", ")", ":", "\n", "    ", "samples", "=", "num_points_per_epoch", "\n", "rewards", "=", "np", ".", "array", "(", "avg_rewards", ")", "\n", "plt", ".", "plot", "(", "samples", ",", "rewards", ")", "\n", "plt", ".", "title", "(", "'Avg Episode'", "+", "stem", ")", "\n", "plt", ".", "xlabel", "(", "'Training Steps'", ")", "\n", "plt", ".", "ylabel", "(", "stem", ")", "\n", "save_str", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "stem", "+", "'.png'", ")", "\n", "plt", ".", "savefig", "(", "save_str", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "data", "=", "np", ".", "vstack", "(", "(", "samples", ",", "rewards", ")", ")", ".", "T", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "stem", "+", "'.csv'", ")", "\n", "header", "=", "'Train steps,Cost'", "\n", "np", ".", "savetxt", "(", "fname", ",", "\n", "data", ",", "\n", "delimiter", "=", "','", ",", "\n", "header", "=", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.filter_sequences": [[71, 79], ["numpy.abs", "numpy.all"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Registry.all"], ["", "def", "filter_sequences", "(", "x_seq", ",", "actions", ",", "x_next_seq", ",", "threshold", ")", ":", "\n", "# Find where the difference in step is greater than the filter threshold", "\n", "    ", "x_diff_abs", "=", "np", ".", "abs", "(", "x_next_seq", "-", "x_seq", ")", "\n", "rows_to_keep", "=", "np", ".", "all", "(", "x_diff_abs", "<", "1", ",", "axis", "=", "1", ")", "\n", "x_seq_filt", "=", "x_seq", "[", "rows_to_keep", ",", ":", "]", "\n", "x_next_seq_filt", "=", "x_next_seq", "[", "rows_to_keep", ",", ":", "]", "\n", "actions_filt", "=", "actions", "[", "rows_to_keep", ",", ":", "]", "\n", "return", "x_seq_filt", ",", "actions_filt", ",", "x_next_seq_filt", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_quad_cost": [[80, 90], ["len", "len", "numpy.zeros", "range", "numpy.mean", "range", "numpy.sum"], "function", ["None"], ["", "def", "get_quad_cost", "(", "test_runs", ",", "ref", ")", ":", "\n", "    ", "num_epochs", "=", "len", "(", "test_runs", ")", "\n", "num_episodes", "=", "len", "(", "test_runs", "[", "0", "]", ")", "\n", "costs", "=", "np", ".", "zeros", "(", "(", "num_epochs", ",", "num_episodes", ")", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "for", "episode", "in", "range", "(", "num_episodes", ")", ":", "\n", "            ", "cost", "=", "np", ".", "sum", "(", "(", "test_runs", "[", "epoch", "]", "[", "episode", "]", "[", "'obs'", "]", "[", "1", ":", ",", "[", "0", ",", "2", "]", "]", "-", "ref", "[", ":", ",", "[", "0", ",", "2", "]", "]", ")", "**", "2", ")", "\n", "costs", "[", "epoch", ",", "episode", "]", "=", "cost", "\n", "", "", "mean_cost", "=", "np", ".", "mean", "(", "costs", ",", "axis", "=", "1", ")", "\n", "return", "mean_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_quad_average_rmse_error": [[92, 103], ["len", "len", "numpy.zeros", "range", "numpy.mean", "range"], "function", ["None"], ["", "def", "get_quad_average_rmse_error", "(", "runs", ",", "ref", ")", ":", "\n", "    ", "num_epochs", "=", "len", "(", "runs", ")", "\n", "num_episodes", "=", "len", "(", "runs", "[", "0", "]", ")", "\n", "costs", "=", "np", ".", "zeros", "(", "(", "num_epochs", ",", "num_episodes", ")", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "for", "episode", "in", "range", "(", "num_episodes", ")", ":", "\n", "            ", "mse", ",", "rmse", "=", "runs", "[", "epoch", "]", "[", "episode", "]", "[", "'total_rmse_state_error'", "]", "\n", "costs", "[", "epoch", ",", "episode", "]", "=", "rmse", "\n", "\n", "", "", "mean_cost", "=", "np", ".", "mean", "(", "costs", ",", "axis", "=", "1", ")", "\n", "return", "mean_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_quad_average_rmse_error_xz_only": [[104, 115], ["len", "len", "numpy.zeros", "range", "numpy.mean", "range", "safe_control_gym.controllers.mpc.mpc_utils.compute_state_rmse"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.compute_state_rmse"], ["", "def", "get_quad_average_rmse_error_xz_only", "(", "runs", ",", "ref", ")", ":", "\n", "    ", "num_epochs", "=", "len", "(", "runs", ")", "\n", "num_episodes", "=", "len", "(", "runs", "[", "0", "]", ")", "\n", "costs", "=", "np", ".", "zeros", "(", "(", "num_epochs", ",", "num_episodes", ")", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "for", "episode", "in", "range", "(", "num_episodes", ")", ":", "\n", "            ", "mse", ",", "rmse", "=", "compute_state_rmse", "(", "runs", "[", "epoch", "]", "[", "episode", "]", "[", "'state'", "]", "[", "1", ":", ",", "[", "0", ",", "2", "]", "]", "-", "ref", "[", ":", ",", "[", "0", ",", "2", "]", "]", ")", "\n", "costs", "[", "epoch", ",", "episode", "]", "=", "rmse", "\n", "\n", "", "", "mean_cost", "=", "np", ".", "mean", "(", "costs", ",", "axis", "=", "1", ")", "\n", "return", "mean_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.make_plots": [[116, 151], ["len", "len", "os.path.join", "safe_control_gym.utils.utils.mkdirs", "range", "num_points_per_epoch.append", "range", "gpmpc_plotting_utils.get_constraint_violations", "gpmpc_plotting_utils.plot_constraint_violation", "gpmpc_plotting_utils.get_avg_of_max_viol_theta_dot", "gpmpc_plotting_utils.plot_average_peak_theta_dot_viol", "gpmpc_plotting_utils.get_average_rmse_error", "gpmpc_plotting_utils.plot_learning_curve", "gpmpc_plotting_utils.get_cost", "gpmpc_plotting_utils.plot_learning_curve", "range", "len", "range", "num_points_per_epoch.append", "gpmpc_plotting_utils.plot_runs"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.mkdirs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_constraint_violations", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_constraint_violation", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_avg_of_max_viol_theta_dot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_average_peak_theta_dot_viol", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_average_rmse_error", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_learning_curve", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_cost", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_learning_curve", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_runs"], ["", "def", "make_plots", "(", "test_runs", ",", "train_runs", ",", "num_inds", ",", "dir", ")", ":", "\n", "    ", "num_epochs", "=", "len", "(", "test_runs", ")", "\n", "num_episodes", "=", "len", "(", "test_runs", "[", "0", "]", ")", "\n", "fig_dir", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'figs'", ")", "\n", "mkdirs", "(", "fig_dir", ")", "\n", "\n", "# Make plot of all trajectories.", "\n", "num_points_per_epoch", "=", "[", "]", "\n", "for", "episode_i", "in", "range", "(", "num_episodes", ")", ":", "\n", "        ", "for", "ind", "in", "range", "(", "num_inds", ")", ":", "\n", "            ", "ylabel", "=", "'x%s'", "%", "ind", "\n", "plot_runs", "(", "test_runs", ",", "num_epochs", ",", "episode", "=", "episode_i", ",", "ind", "=", "ind", ",", "ylabel", "=", "ylabel", ",", "dir", "=", "fig_dir", ")", "\n", "\n", "# Compute the number of training points (x-axis for most figures).", "\n", "", "", "num_points", "=", "0", "\n", "num_points_per_epoch", ".", "append", "(", "num_points", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "num_epochs", ")", ":", "\n", "        ", "num_train_episodes", "=", "len", "(", "train_runs", "[", "epoch", "]", ")", "\n", "for", "episode", "in", "range", "(", "num_train_episodes", ")", ":", "\n", "            ", "num_points", "+=", "train_runs", "[", "epoch", "]", "[", "episode", "]", "[", "'obs'", "]", ".", "shape", "[", "0", "]", "\n", "", "num_points_per_epoch", ".", "append", "(", "num_points", ")", "\n", "\n", "\n", "# Plot violation data", "\n", "", "nsamp", ",", "viol", ",", "mean_viol", ",", "maximums", "=", "get_constraint_violations", "(", "test_runs", ",", "\n", "train_runs", ")", "\n", "plot_constraint_violation", "(", "num_points_per_epoch", ",", "viol", ",", "fig_dir", ")", "\n", "avg_maxs", "=", "get_avg_of_max_viol_theta_dot", "(", "maximums", ")", "\n", "plot_average_peak_theta_dot_viol", "(", "num_points_per_epoch", ",", "avg_maxs", ",", "fig_dir", ")", "\n", "\n", "# Plot Learning Curves", "\n", "avg_rmse_error", "=", "get_average_rmse_error", "(", "test_runs", ")", "\n", "plot_learning_curve", "(", "avg_rmse_error", ",", "num_points_per_epoch", ",", "'avg_rmse_cost_learning_curve'", ",", "fig_dir", ")", "\n", "common_costs", "=", "get_cost", "(", "test_runs", ")", "\n", "plot_learning_curve", "(", "common_costs", ",", "num_points_per_epoch", ",", "'common_cost_learning_curve'", ",", "fig_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.make_quad_plots": [[153, 178], ["len", "len", "os.path.join", "safe_control_gym.utils.utils.mkdirs", "range", "num_points_per_epoch.append", "range", "gpmpc_plotting_utils.get_quad_cost", "gpmpc_plotting_utils.plot_learning_curve", "gpmpc_plotting_utils.get_quad_average_rmse_error", "gpmpc_plotting_utils.plot_learning_curve", "gpmpc_plotting_utils.get_quad_average_rmse_error_xz_only", "gpmpc_plotting_utils.plot_learning_curve", "range", "len", "range", "num_points_per_epoch.append", "gpmpc_plotting_utils.plot_runs"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.mkdirs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_quad_cost", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_learning_curve", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_quad_average_rmse_error", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_learning_curve", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_quad_average_rmse_error_xz_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_learning_curve", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_runs"], ["", "def", "make_quad_plots", "(", "test_runs", ",", "train_runs", ",", "trajectory", ",", "num_inds", ",", "dir", ")", ":", "\n", "    ", "num_epochs", "=", "len", "(", "test_runs", ")", "\n", "num_episodes", "=", "len", "(", "test_runs", "[", "0", "]", ")", "\n", "fig_dir", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'figs'", ")", "\n", "mkdirs", "(", "fig_dir", ")", "\n", "num_points_per_epoch", "=", "[", "]", "\n", "for", "episode_i", "in", "range", "(", "num_episodes", ")", ":", "\n", "        ", "for", "ind", "in", "range", "(", "num_inds", ")", ":", "\n", "            ", "ylabel", "=", "'x%s'", "%", "ind", "\n", "\n", "plot_runs", "(", "test_runs", ",", "num_epochs", ",", "episode", "=", "episode_i", ",", "ind", "=", "ind", ",", "ylabel", "=", "ylabel", ",", "dir", "=", "fig_dir", ")", "\n", "", "", "num_points", "=", "0", "\n", "num_points_per_epoch", ".", "append", "(", "num_points", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "num_epochs", ")", ":", "\n", "        ", "num_train_episodes", "=", "len", "(", "train_runs", "[", "epoch", "]", ")", "\n", "for", "episode", "in", "range", "(", "num_train_episodes", ")", ":", "\n", "            ", "num_points", "+=", "train_runs", "[", "epoch", "]", "[", "episode", "]", "[", "'obs'", "]", ".", "shape", "[", "0", "]", "\n", "", "num_points_per_epoch", ".", "append", "(", "num_points", ")", "\n", "\n", "", "common_costs", "=", "get_quad_cost", "(", "test_runs", ",", "trajectory", ")", "\n", "plot_learning_curve", "(", "common_costs", ",", "num_points_per_epoch", ",", "'common_xz_cost_learning_curve'", ",", "fig_dir", ")", "\n", "rmse_error", "=", "get_quad_average_rmse_error", "(", "test_runs", ",", "trajectory", ")", "\n", "plot_learning_curve", "(", "rmse_error", ",", "num_points_per_epoch", ",", "'rmse_error_learning_curve'", ",", "fig_dir", ")", "\n", "rmse_error_xz", "=", "get_quad_average_rmse_error_xz_only", "(", "test_runs", ",", "trajectory", ")", "\n", "plot_learning_curve", "(", "rmse_error_xz", ",", "num_points_per_epoch", ",", "'rmse_xz_error_learning_curve'", ",", "fig_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.gather_training_samples": [[179, 204], ["len", "int", "range", "numpy.vstack", "numpy.vstack", "numpy.vstack", "all_runs[].keys", "np.vstack.append", "np.vstack.append", "np.vstack.append", "numpy.arange", "rand_generator.choice", "numpy.arange"], "function", ["None"], ["", "def", "gather_training_samples", "(", "all_runs", ",", "epoch_i", ",", "num_samples", ",", "rand_generator", "=", "None", ")", ":", "\n", "    ", "n_episodes", "=", "len", "(", "all_runs", "[", "epoch_i", "]", ".", "keys", "(", ")", ")", "\n", "num_samples_per_episode", "=", "int", "(", "num_samples", "/", "n_episodes", ")", "\n", "x_seq_int", "=", "[", "]", "\n", "x_next_seq_int", "=", "[", "]", "\n", "actions_int", "=", "[", "]", "\n", "for", "episode_i", "in", "range", "(", "n_episodes", ")", ":", "\n", "        ", "run_results_int", "=", "all_runs", "[", "epoch_i", "]", "[", "episode_i", "]", "\n", "n", "=", "run_results_int", "[", "'action'", "]", ".", "shape", "[", "0", "]", "\n", "if", "num_samples_per_episode", "<", "n", ":", "\n", "            ", "if", "rand_generator", "is", "not", "None", ":", "\n", "                ", "rand_inds_int", "=", "rand_generator", ".", "choice", "(", "n", "-", "1", ",", "num_samples_per_episode", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "rand_inds_int", "=", "np", ".", "arange", "(", "num_samples_per_episode", ")", "\n", "", "", "else", ":", "\n", "            ", "rand_inds_int", "=", "np", ".", "arange", "(", "n", "-", "1", ")", "\n", "", "next_inds_int", "=", "rand_inds_int", "+", "1", "\n", "x_seq_int", ".", "append", "(", "run_results_int", ".", "obs", "[", "rand_inds_int", ",", ":", "]", ")", "\n", "actions_int", ".", "append", "(", "run_results_int", ".", "action", "[", "rand_inds_int", ",", ":", "]", ")", "\n", "x_next_seq_int", ".", "append", "(", "run_results_int", ".", "obs", "[", "next_inds_int", ",", ":", "]", ")", "\n", "", "x_seq_int", "=", "np", ".", "vstack", "(", "x_seq_int", ")", "\n", "actions_int", "=", "np", ".", "vstack", "(", "actions_int", ")", "\n", "x_next_seq_int", "=", "np", ".", "vstack", "(", "x_next_seq_int", ")", "\n", "\n", "return", "x_seq_int", ",", "actions_int", ",", "x_next_seq_int", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.gather_training_samples_from_all_data": [[206, 231], ["len", "len", "int", "range", "numpy.vstack", "numpy.vstack", "numpy.vstack", "all_runs.keys", "all_runs[].keys", "range", "np.vstack.append", "np.vstack.append", "np.vstack.append", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "gather_training_samples_from_all_data", "(", "all_runs", ",", "num_samples", ")", ":", "\n", "    ", "n_epochs", "=", "len", "(", "all_runs", ".", "keys", "(", ")", ")", "\n", "n_episodes_per_epoch", "=", "len", "(", "all_runs", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "num_samples_per_episode", "=", "int", "(", "num_samples", "/", "(", "n_episodes_per_epoch", "*", "n_epochs", ")", ")", "\n", "x_seq_int", "=", "[", "]", "\n", "x_next_seq_int", "=", "[", "]", "\n", "actions_int", "=", "[", "]", "\n", "for", "epoch_i", "in", "range", "(", "n_epochs", ")", ":", "\n", "        ", "for", "episode_i", "in", "range", "(", "n_episodes_per_epoch", ")", ":", "\n", "            ", "run_results_int", "=", "all_runs", "[", "epoch_i", "]", "[", "episode_i", "]", "\n", "n", "=", "run_results_int", "[", "'action'", "]", ".", "shape", "[", "0", "]", "\n", "if", "num_samples_per_episode", "<", "n", ":", "\n", "#rand_inds_int = np.random.choice(n-1, num_samples_per_episode)", "\n", "                ", "rand_inds_int", "=", "np", ".", "arange", "(", "num_samples_per_episode", ")", "\n", "", "else", ":", "\n", "                ", "rand_inds_int", "=", "np", ".", "arange", "(", "n", "-", "1", ")", "\n", "", "next_inds_int", "=", "rand_inds_int", "+", "1", "\n", "x_seq_int", ".", "append", "(", "run_results_int", ".", "obs", "[", "rand_inds_int", ",", ":", "]", ")", "\n", "actions_int", ".", "append", "(", "run_results_int", ".", "action", "[", "rand_inds_int", ",", ":", "]", ")", "\n", "x_next_seq_int", ".", "append", "(", "run_results_int", ".", "obs", "[", "next_inds_int", ",", ":", "]", ")", "\n", "", "", "x_seq_int", "=", "np", ".", "vstack", "(", "x_seq_int", ")", "\n", "actions_int", "=", "np", ".", "vstack", "(", "actions_int", ")", "\n", "x_next_seq_int", "=", "np", ".", "vstack", "(", "x_next_seq_int", ")", "\n", "\n", "return", "x_seq_int", ",", "actions_int", ",", "x_next_seq_int", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.make_traking_plot": [[233, 254], ["len", "matplotlib.figure", "matplotlib.plot", "numpy.savetxt", "range", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "os.path.join", "matplotlib.savefig", "runs.keys", "numpy.vstack", "os.path.join", "numpy.savetxt", "matplotlib.plot", "numpy.vstack", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "make_traking_plot", "(", "runs", ",", "traj", ",", "dir", ")", ":", "\n", "    ", "num_epochs", "=", "len", "(", "runs", ".", "keys", "(", ")", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "runs", "[", "0", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", ",", "0", "]", ",", "runs", "[", "0", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", ",", "2", "]", ",", "label", "=", "'Linear MPC'", ")", "\n", "traj_lin", "=", "np", ".", "vstack", "(", "(", "runs", "[", "0", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", ",", "0", "]", ",", "runs", "[", "0", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", ",", "2", "]", ")", ")", ".", "T", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'traj_lin_mpc.csv'", ")", ",", "traj_lin", ",", "delimiter", "=", "','", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "num_epochs", ")", ":", "\n", "        ", "traj1", "=", "np", ".", "vstack", "(", "(", "runs", "[", "epoch", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", ",", "0", "]", ",", "runs", "[", "epoch", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", ",", "2", "]", ")", ")", ".", "T", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'traj_%s.csv'", "%", "epoch", ")", ",", "traj1", ",", "delimiter", "=", "','", ")", "\n", "plt", ".", "plot", "(", "runs", "[", "epoch", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", ",", "0", "]", ",", "runs", "[", "epoch", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", ",", "2", "]", ",", "label", "=", "'GP-MPC %s'", "%", "epoch", ")", "\n", "", "plt", ".", "plot", "(", "traj", "[", ":", ",", "0", "]", ",", "traj", "[", ":", ",", "2", "]", ",", "'k'", ",", "label", "=", "'Reference'", ")", "\n", "plt", ".", "plot", "(", "[", "-", "0.4", ",", "-", "0.4", "]", ",", "[", "0.0", ",", "0.9", "]", ",", "'r'", ",", "label", "=", "'Limit'", ")", "\n", "plt", ".", "plot", "(", "[", "0.4", ",", "0.4", "]", ",", "[", "0.0", ",", "0.9", "]", ",", "'r'", ")", "\n", "plt", ".", "plot", "(", "[", "-", "0.4", ",", "0.4", "]", ",", "[", "0.9", ",", "0.9", "]", ",", "'r'", ")", "\n", "plt", ".", "plot", "(", "[", "-", "0.4", ",", "0.4", "]", ",", "[", "0.0", ",", "0.0", "]", ",", "'r'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "\"Quadrotor Impossible Tracking\"", ")", "\n", "plt", ".", "xlabel", "(", "'X position (m)'", ")", "\n", "plt", ".", "ylabel", "(", "'Z position (m)'", ")", "\n", "save_str", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'quad_traj.png'", ")", "\n", "plt", ".", "savefig", "(", "save_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_constraint_violations": [[255, 289], ["len", "range", "train_runs.keys", "len", "range", "len", "range", "num_train_samples_by_epoch.append", "violations_per_epoch.append", "max_violations_per_epoch.append", "mean_violations_per_epoch.append", "train_runs[].keys", "len", "test_runs[].keys", "numpy.zeros", "len", "range", "violations_per_episode.append", "max_violations_per_episode.append", "numpy.vstack", "numpy.mean", "int", "numpy.maximum", "numpy.any"], "function", ["None"], ["", "def", "get_constraint_violations", "(", "test_runs", ",", "\n", "train_runs", ")", ":", "\n", "    ", "num_train_samples_by_epoch", "=", "[", "]", "\n", "violations_per_epoch", "=", "[", "]", "\n", "max_violations_per_epoch", "=", "[", "]", "\n", "mean_violations_per_epoch", "=", "[", "]", "\n", "num_samples", "=", "0", "\n", "num_epochs", "=", "len", "(", "train_runs", ".", "keys", "(", ")", ")", "\n", "n_train_samples_per_epoch", "=", "0", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "violations_per_episode", "=", "[", "]", "\n", "max_violations_per_episode", "=", "[", "]", "\n", "num_train_samples_per_episode", "=", "len", "(", "train_runs", "[", "epoch", "]", ".", "keys", "(", ")", ")", "\n", "for", "train_episode", "in", "range", "(", "num_train_samples_per_episode", ")", ":", "\n", "            ", "n_train_samples_per_epoch", "+=", "len", "(", "train_runs", "[", "epoch", "]", "[", "train_episode", "]", "[", "'info'", "]", ")", "\n", "", "num_test_episodes_per_epoch", "=", "len", "(", "test_runs", "[", "epoch", "]", ".", "keys", "(", ")", ")", "\n", "for", "test_episode", "in", "range", "(", "num_test_episodes_per_epoch", ")", ":", "\n", "            ", "violations", "=", "0", "\n", "max_violations", "=", "np", ".", "zeros", "(", "test_runs", "[", "epoch", "]", "[", "test_episode", "]", "[", "'info'", "]", "[", "0", "]", "[", "'constraint_values'", "]", ".", "shape", ")", "\n", "n", "=", "len", "(", "test_runs", "[", "epoch", "]", "[", "test_episode", "]", "[", "'info'", "]", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "#violations += test_runs[epoch][test_episode]['info'][i]['constraint_violation'] # Due to bug.", "\n", "                ", "violations", "+=", "int", "(", "np", ".", "any", "(", "test_runs", "[", "epoch", "]", "[", "test_episode", "]", "[", "'info'", "]", "[", "i", "]", "[", "'constraint_values'", "]", ">", "0", ")", ")", "\n", "max_violations", "=", "np", ".", "maximum", "(", "max_violations", ",", "\n", "test_runs", "[", "epoch", "]", "[", "test_episode", "]", "[", "'info'", "]", "[", "i", "]", "[", "'constraint_values'", "]", ")", "\n", "\n", "", "violations_per_episode", ".", "append", "(", "violations", ")", "\n", "max_violations_per_episode", ".", "append", "(", "max_violations", ")", "\n", "", "num_train_samples_by_epoch", ".", "append", "(", "n_train_samples_per_epoch", ")", "\n", "violations_per_epoch", ".", "append", "(", "violations_per_episode", ")", "\n", "max_violations_per_epoch", ".", "append", "(", "np", ".", "vstack", "(", "max_violations_per_episode", ")", ")", "\n", "mean_violations_per_epoch", ".", "append", "(", "np", ".", "mean", "(", "violations_per_episode", ")", ")", "\n", "num_samples", "+=", "n", "\n", "", "return", "num_train_samples_by_epoch", ",", "violations_per_epoch", ",", "mean_violations_per_epoch", ",", "max_violations_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_constraint_violation": [[290, 315], ["numpy.array", "numpy.array", "numpy.mean", "numpy.max", "numpy.min", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "os.path.join", "matplotlib.savefig", "matplotlib.cla", "matplotlib.clf", "os.path.join", "numpy.savetxt", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_constraint_violation", "(", "viol_samp", ",", "viols", ",", "dir", ")", ":", "\n", "    ", "violations", "=", "np", ".", "array", "(", "viols", ")", "\n", "train_time", "=", "np", ".", "array", "(", "viol_samp", ")", "\n", "mean_viol", "=", "np", ".", "mean", "(", "violations", ",", "axis", "=", "1", ")", "\n", "max", "=", "np", ".", "max", "(", "violations", ",", "axis", "=", "1", ")", "\n", "min", "=", "np", ".", "min", "(", "violations", ",", "axis", "=", "1", ")", "\n", "\n", "plt", ".", "plot", "(", "train_time", ",", "mean_viol", ",", "label", "=", "'mean'", ")", "\n", "plt", ".", "plot", "(", "train_time", ",", "max", ",", "label", "=", "'max'", ")", "\n", "plt", ".", "plot", "(", "train_time", ",", "min", ",", "label", "=", "'min'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xlabel", "(", "'Train Steps'", ")", "\n", "plt", ".", "ylabel", "(", "'Number of violations'", ")", "\n", "stem", "=", "'number_viol'", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "stem", "+", "'.png'", ")", "\n", "plt", ".", "savefig", "(", "fname", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "data", "=", "np", ".", "vstack", "(", "(", "train_time", ",", "mean_viol", ",", "max", ",", "min", ")", ")", ".", "T", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "stem", "+", "'.csv'", ")", "\n", "np", ".", "savetxt", "(", "fname", ",", "\n", "data", ",", "\n", "delimiter", "=", "','", ",", "\n", "header", "=", "'Train Steps (s),Mean,Max,Min'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_avg_of_max_viol_theta_dot": [[316, 323], ["len", "range", "max_avgs.append", "numpy.mean", "numpy.max"], "function", ["None"], ["", "def", "get_avg_of_max_viol_theta_dot", "(", "maximums", ")", ":", "\n", "    ", "\"\"\" get the average of the max violations in theta_dot across episodes for each epoch.\"\"\"", "\n", "num_epochs", "=", "len", "(", "maximums", ")", "\n", "max_avgs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "max_avgs", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "max", "(", "maximums", "[", "epoch", "]", "[", ":", ",", "[", "3", ",", "7", "]", "]", ",", "axis", "=", "1", ")", ")", ")", "\n", "", "return", "max_avgs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_average_peak_theta_dot_viol": [[324, 340], ["matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "os.path.join", "matplotlib.savefig", "matplotlib.cla", "matplotlib.clf", "os.path.join", "numpy.savetxt", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_average_peak_theta_dot_viol", "(", "train_sample", ",", "avg_max", ",", "dir", ")", ":", "\n", "    ", "plt", ".", "plot", "(", "train_sample", ",", "avg_max", ")", "\n", "plt", ".", "xlabel", "(", "'Training Time (s)'", ")", "\n", "plt", ".", "ylabel", "(", "'Avg Peak Violation (rad/s)'", ")", "\n", "plt", ".", "title", "(", "'Theta_dot Average Peak Violation'", ")", "\n", "stem", "=", "'peak_viol'", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "stem", "+", "'.png'", ")", "\n", "plt", ".", "savefig", "(", "fname", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "data", "=", "np", ".", "vstack", "(", "(", "train_sample", ",", "avg_max", ")", ")", ".", "T", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "stem", "+", "'.csv'", ")", "\n", "np", ".", "savetxt", "(", "fname", ",", "\n", "data", ",", "\n", "delimiter", "=", "','", ",", "\n", "header", "=", "'Train Time (s),Avg peak violation (rad/s)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_robustness": [[341, 360], ["len", "gpmpc_plotting_utils.get_cost", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.cla", "matplotlib.clf", "os.path.join", "numpy.savetxt", "os.path.join", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_cost", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_robustness", "(", "runs", ",", "pole_lengths", ",", "label", ",", "dir", ")", ":", "\n", "    ", "num_coeff", "=", "len", "(", "runs", ")", "\n", "# compute common costs", "\n", "avg_costs", "=", "get_cost", "(", "runs", ")", "\n", "plt", ".", "plot", "(", "pole_lengths", ",", "avg_costs", ")", "\n", "plt", ".", "title", "(", "'GP-MPC'", "+", "label", "+", "' robustness'", ")", "\n", "plt", ".", "xlabel", "(", "label", "+", "' Bounds'", ")", "\n", "plt", ".", "ylabel", "(", "'Normalized Common Cost'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'common_cost_robust_plot.png'", ")", ")", "\n", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "data", "=", "np", ".", "vstack", "(", "(", "pole_lengths", ",", "avg_costs", ")", ")", ".", "T", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'common_cost_robust_plot.csv'", ")", "\n", "header", "=", "'Coeff,Avg Cost'", "\n", "np", ".", "savetxt", "(", "fname", ",", "\n", "data", ",", "\n", "delimiter", "=", "','", ",", "\n", "header", "=", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_robustness_runs": [[361, 377], ["range", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.cla", "matplotlib.clf", "matplotlib.plot", "os.path.join", "matplotlib.savefig", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_robustness_runs", "(", "all_runs", ",", "num_epochs", ",", "parameters", ",", "episode", "=", "0", ",", "ind", "=", "0", ",", "ylabel", "=", "'x position'", ",", "dir", "=", "None", ")", ":", "\n", "    ", "for", "epoch", "in", "range", "(", "0", ",", "num_epochs", ")", ":", "\n", "# plot the first episode of each epoch", "\n", "        ", "plt", ".", "plot", "(", "all_runs", "[", "epoch", "]", "[", "episode", "]", "[", "'state'", "]", "[", ":", ",", "ind", "]", ",", "label", "=", "'%s'", "%", "parameters", "[", "epoch", "]", ")", "\n", "", "plt", ".", "title", "(", "ylabel", ")", "\n", "plt", ".", "xlabel", "(", "'Step'", ")", "\n", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "save_str", "=", "'ep%s_ind%s_state.png'", "%", "(", "episode", ",", "ind", ")", "\n", "if", "dir", "is", "not", "None", ":", "\n", "        ", "save_str", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "save_str", ")", "\n", "plt", ".", "savefig", "(", "save_str", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.table_csv": [[378, 387], ["len", "len", "numpy.zeros", "range", "numpy.savetxt", "range", "os.path.join"], "function", ["None"], ["", "def", "table_csv", "(", "runs", ",", "dir", ")", ":", "\n", "    ", "num_epochs", "=", "len", "(", "runs", ")", "\n", "num_epiosdes", "=", "len", "(", "runs", "[", "0", "]", ")", "\n", "rmse_errors", "=", "np", ".", "zeros", "(", "(", "num_epiosdes", ",", "num_epochs", ")", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "for", "episodes", "in", "range", "(", "num_epiosdes", ")", ":", "\n", "            ", "mse", ",", "rmse", "=", "runs", "[", "epoch", "]", "[", "episodes", "]", "[", "'total_rmse_state_error'", "]", "\n", "rmse_errors", "[", "episodes", ",", "epoch", "]", "=", "rmse", "\n", "", "", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'total_rmse_state_error_table.csv'", ")", ",", "rmse_errors", ",", "delimiter", "=", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_robustness_rmse": [[389, 408], ["len", "gpmpc_plotting_utils.get_average_rmse_error", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.cla", "matplotlib.clf", "os.path.join", "numpy.savetxt", "os.path.join", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.get_average_rmse_error", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_robustness_rmse", "(", "runs", ",", "pole_lengths", ",", "label", ",", "dir", ")", ":", "\n", "    ", "num_coeff", "=", "len", "(", "runs", ")", "\n", "# compute common costs", "\n", "avg_costs", "=", "get_average_rmse_error", "(", "runs", ")", "\n", "plt", ".", "plot", "(", "pole_lengths", ",", "avg_costs", ")", "\n", "plt", ".", "title", "(", "'GP-MPC '", "+", "label", "+", "' Robustness'", ")", "\n", "plt", ".", "xlabel", "(", "label", "+", "' Bounds'", ")", "\n", "plt", ".", "ylabel", "(", "'Average RMSE'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'rmse_robust_plot.png'", ")", ")", "\n", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "data", "=", "np", ".", "vstack", "(", "(", "pole_lengths", ",", "avg_costs", ")", ")", ".", "T", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'rmse_robust_plot.csv'", ")", "\n", "header", "=", "'Coeff,Avg Cost'", "\n", "np", ".", "savetxt", "(", "fname", ",", "\n", "data", ",", "\n", "delimiter", "=", "','", ",", "\n", "header", "=", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_all_robustness_runs": [[410, 423], ["len", "len", "os.path.join", "safe_control_gym.utils.utils.mkdirs", "range", "range", "gpmpc_plotting_utils.plot_robustness_runs"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.mkdirs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_robustness_runs"], ["", "def", "plot_all_robustness_runs", "(", "runs", ",", "parameters", ",", "dir", ")", ":", "\n", "    ", "num_epochs", "=", "len", "(", "runs", ")", "\n", "num_episodes", "=", "len", "(", "runs", "[", "0", "]", ")", "\n", "fig_dir", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'figs'", ")", "\n", "mkdirs", "(", "fig_dir", ")", "\n", "num_inds", "=", "runs", "[", "0", "]", "[", "0", "]", "[", "'state'", "]", ".", "shape", "[", "1", "]", "\n", "\n", "# Make plot of all trajectories.", "\n", "num_points_per_epoch", "=", "[", "]", "\n", "for", "episode_i", "in", "range", "(", "num_episodes", ")", ":", "\n", "        ", "for", "ind", "in", "range", "(", "num_inds", ")", ":", "\n", "            ", "ylabel", "=", "'x%s'", "%", "ind", "\n", "plot_robustness_runs", "(", "runs", ",", "num_epochs", ",", "parameters", ",", "episode", "=", "episode_i", ",", "ind", "=", "ind", ",", "ylabel", "=", "ylabel", ",", "dir", "=", "fig_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_constraint_from_csv": [[424, 432], ["numpy.genfromtxt", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "", "", "def", "plot_constraint_from_csv", "(", "fname", ",", "\n", "plot_name", ")", ":", "\n", "    ", "data", "=", "np", ".", "genfromtxt", "(", "fname", ",", "delimiter", "=", "','", ")", "\n", "plt", ".", "plot", "(", "data", "[", ":", ",", "0", "]", ",", "data", "[", ":", ",", "1", "]", ")", "\n", "plt", ".", "title", "(", "plot_name", ")", "\n", "plt", ".", "xlabel", "(", "'Train Steps (s)'", ")", "\n", "plt", ".", "ylabel", "(", "'Avg number of violations'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_data_eff_from_csv": [[433, 441], ["numpy.genfromtxt", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_data_eff_from_csv", "(", "fname", ",", "\n", "plot_name", ")", ":", "\n", "    ", "data", "=", "np", ".", "genfromtxt", "(", "fname", ",", "delimiter", "=", "','", ")", "\n", "plt", ".", "plot", "(", "data", "[", ":", ",", "0", "]", ",", "data", "[", ":", ",", "1", "]", ")", "\n", "plt", ".", "title", "(", "plot_name", ")", "\n", "plt", ".", "xlabel", "(", "'Train Steps (s)'", ")", "\n", "plt", ".", "ylabel", "(", "'Eval. Cost'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_robustness_from_csv": [[442, 451], ["numpy.genfromtxt", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_robustness_from_csv", "(", "fname", ",", "\n", "plot_name", ",", "\n", "x_label", ")", ":", "\n", "    ", "data", "=", "np", ".", "genfromtxt", "(", "fname", ",", "delimiter", "=", "','", ")", "\n", "plt", ".", "plot", "(", "data", "[", ":", ",", "0", "]", ",", "data", "[", ":", ",", "1", "]", ")", "\n", "plt", ".", "title", "(", "plot_name", ")", "\n", "plt", ".", "xlabel", "(", "x_label", ")", "\n", "plt", ".", "ylabel", "(", "'Eval. Cost'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_impossible_traj_from_csv": [[452, 473], ["matplotlib.figure", "len", "numpy.genfromtxt", "matplotlib.plot", "range", "numpy.linspace", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.genfromtxt", "matplotlib.plot", "numpy.sin", "len", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_impossible_traj_from_csv", "(", "fnames", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "n", "=", "len", "(", "fnames", ")", "\n", "lin_mpc_data", "=", "np", ".", "genfromtxt", "(", "fnames", "[", "0", "]", ",", "delimiter", "=", "','", ")", "\n", "plt", ".", "plot", "(", "lin_mpc_data", "[", ":", ",", "0", "]", ",", "lin_mpc_data", "[", ":", ",", "1", "]", ",", "label", "=", "'Linear MPC'", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "traj", "=", "np", ".", "genfromtxt", "(", "fnames", "[", "i", "]", ",", "delimiter", "=", "','", ")", "\n", "plt", ".", "plot", "(", "traj", "[", ":", ",", "0", "]", ",", "traj", "[", ":", ",", "1", "]", ",", "label", "=", "'GP-MPC %s'", "%", "i", ")", "\n", "", "t", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "num", "=", "len", "(", "traj", ")", ")", "\n", "trajx", "=", "0.5", "*", "np", ".", "sin", "(", "t", ")", "\n", "trajy", "=", "0.5", "*", "np", ".", "cos", "(", "t", ")", "+", "0.5", "\n", "plt", ".", "plot", "(", "trajx", ",", "trajy", ",", "'k'", ",", "label", "=", "'Reference'", ")", "\n", "plt", ".", "plot", "(", "[", "-", "0.4", ",", "-", "0.4", "]", ",", "[", "0.0", ",", "0.9", "]", ",", "'r'", ",", "label", "=", "'Limit'", ")", "\n", "plt", ".", "plot", "(", "[", "0.4", ",", "0.4", "]", ",", "[", "0.0", ",", "0.9", "]", ",", "'r'", ")", "\n", "plt", ".", "plot", "(", "[", "-", "0.4", ",", "0.4", "]", ",", "[", "0.9", ",", "0.9", "]", ",", "'r'", ")", "\n", "plt", ".", "plot", "(", "[", "-", "0.4", ",", "0.4", "]", ",", "[", "0.0", ",", "0.0", "]", ",", "'r'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "\"Quadrotor Impossible Tracking\"", ")", "\n", "plt", ".", "xlabel", "(", "'X position (m)'", ")", "\n", "plt", ".", "ylabel", "(", "'Z position (m)'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_ctrl_perf": [[474, 482], ["numpy.genfromtxt", "matplotlib.subplots", "range", "matplotlib.show", "ax[].plot", "ax[].set_xlabel"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_ctrl_perf", "(", "fname", ")", ":", "\n", "    ", "data", "=", "np", ".", "genfromtxt", "(", "fname", ",", "delimiter", "=", "','", ")", "\n", "n", "=", "data", ".", "shape", "[", "1", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "n", "-", "1", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "ax", "[", "i", "-", "1", "]", ".", "plot", "(", "data", "[", ":", ",", "0", "]", ",", "data", "[", ":", ",", "i", "]", ")", "\n", "ax", "[", "i", "-", "1", "]", ".", "set_xlabel", "(", "'Time (s)'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_cartpole_constraint.main": [[35, 142], ["functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "range", "range", "safe_control_gym.utils.registration.make.reset", "range", "os.path.join", "os.path.join", "gpmpc_plotting_utils.plot_constraint_from_csv", "range", "functools.partial.", "env_func.action_space.seed", "range", "functools.partial.", "env_func.action_space.seed", "safe_control_gym.utils.registration.make.prior_ctrl.run", "train_runs[].update", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "test_runs[].update", "safe_control_gym.utils.registration.make.preprocess_training_data", "safe_control_gym.utils.registration.make.learn", "range", "range", "safe_control_gym.utils.registration.make.gaussian_process.get_hyperparameters", "numpy.savez", "gpmpc_plotting_utils.make_plots", "train_envs.append", "train_envs[].action_space.seed", "test_envs.append", "test_envs[].action_space.seed", "gpmpc_plotting_utils.gather_training_samples", "gpmpc_plotting_utils.gather_training_samples", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "test_runs[].update", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "train_runs[].update", "os.path.join", "os.path.join", "functools.partial.", "functools.partial.", "munch.munchify", "munch.munchify", "munch.munchify", "munch.munchify"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_constraint_from_csv", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.preprocess_training_data", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.get_hyperparameters", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.make_plots", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.gather_training_samples", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.gather_training_samples", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "task_config", "\n", ")", "\n", "config", ".", "algo_config", ".", "output_dir", "=", "config", ".", "output_dir", "\n", "ctrl", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", "\n", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "\n", "num_epochs", "=", "config", ".", "num_epochs", "\n", "num_train_episodes_per_epoch", "=", "config", ".", "num_train_episodes_per_epoch", "\n", "num_test_episodes_per_epoch", "=", "config", ".", "num_test_episodes_per_epoch", "\n", "num_samples", "=", "config", ".", "num_samples", "\n", "train_runs", "=", "{", "0", ":", "{", "}", "}", "\n", "test_runs", "=", "{", "0", ":", "{", "}", "}", "\n", "\n", "if", "config", ".", "same_train_initial_state", ":", "\n", "        ", "train_envs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "            ", "train_envs", ".", "append", "(", "env_func", "(", "randomized_init", "=", "True", ")", ")", "\n", "train_envs", "[", "epoch", "]", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "", "", "else", ":", "\n", "        ", "train_env", "=", "env_func", "(", "randomized_init", "=", "True", ")", "\n", "train_env", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "train_envs", "=", "[", "train_env", "]", "*", "num_epochs", "\n", "", "test_envs", "=", "[", "]", "\n", "if", "config", ".", "same_test_initial_state", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "            ", "test_envs", ".", "append", "(", "env_func", "(", "randomized_init", "=", "True", ")", ")", "\n", "test_envs", "[", "epoch", "]", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "", "", "else", ":", "\n", "        ", "test_env", "=", "env_func", "(", "randomized_init", "=", "True", ")", "\n", "test_env", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "test_envs", "=", "[", "test_env", "]", "*", "num_epochs", "\n", "\n", "\n", "", "for", "episode", "in", "range", "(", "num_train_episodes_per_epoch", ")", ":", "\n", "        ", "run_results", "=", "ctrl", ".", "prior_ctrl", ".", "run", "(", "env", "=", "train_envs", "[", "0", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_train_on_done", ")", "\n", "train_runs", "[", "0", "]", ".", "update", "(", "{", "episode", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "", "for", "test_ep", "in", "range", "(", "num_test_episodes_per_epoch", ")", ":", "\n", "        ", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_envs", "[", "0", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_test_on_done", ")", "\n", "test_runs", "[", "0", "]", ".", "update", "(", "{", "test_ep", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "", "ctrl", ".", "reset", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "num_epochs", ")", ":", "\n", "# only take data from the last episode from the last epoch", "\n", "        ", "if", "config", ".", "rand_data_selection", ":", "\n", "            ", "x_seq", ",", "actions", ",", "x_next_seq", "=", "gather_training_samples", "(", "train_runs", ",", "epoch", "-", "1", ",", "num_samples", ",", "train_envs", "[", "epoch", "-", "1", "]", ".", "np_random", ")", "\n", "", "else", ":", "\n", "            ", "x_seq", ",", "actions", ",", "x_next_seq", "=", "gather_training_samples", "(", "train_runs", ",", "epoch", "-", "1", ",", "num_samples", ")", "\n", "", "train_inputs", ",", "train_outputs", "=", "ctrl", ".", "preprocess_training_data", "(", "x_seq", ",", "actions", ",", "x_next_seq", ")", "\n", "_", "=", "ctrl", ".", "learn", "(", "input_data", "=", "train_inputs", ",", "target_data", "=", "train_outputs", ")", "\n", "\n", "# Test new policy.", "\n", "test_runs", "[", "epoch", "]", "=", "{", "}", "\n", "for", "test_ep", "in", "range", "(", "num_test_episodes_per_epoch", ")", ":", "\n", "            ", "ctrl", ".", "reset", "(", ")", "\n", "ctrl", ".", "x_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "episode", "]", "[", "'obs'", "]", "[", ":", "ctrl", ".", "T", "+", "1", ",", ":", "]", ".", "T", "\n", "ctrl", ".", "u_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "episode", "]", "[", "'action'", "]", "[", ":", "ctrl", ".", "T", ",", ":", "]", ".", "T", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_envs", "[", "epoch", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_test_on_done", ")", "\n", "test_runs", "[", "epoch", "]", ".", "update", "(", "{", "test_ep", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "# gather training data", "\n", "", "train_runs", "[", "epoch", "]", "=", "{", "}", "\n", "for", "episode", "in", "range", "(", "num_train_episodes_per_epoch", ")", ":", "\n", "            ", "ctrl", ".", "reset", "(", ")", "\n", "ctrl", ".", "x_prev", "=", "train_runs", "[", "epoch", "-", "1", "]", "[", "episode", "]", "[", "'obs'", "]", "[", ":", "ctrl", ".", "T", "+", "1", ",", ":", "]", ".", "T", "\n", "ctrl", ".", "u_prev", "=", "train_runs", "[", "epoch", "-", "1", "]", "[", "episode", "]", "[", "'action'", "]", "[", ":", "ctrl", ".", "T", ",", ":", "]", ".", "T", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "train_envs", "[", "epoch", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_train_on_done", ")", "\n", "train_runs", "[", "epoch", "]", ".", "update", "(", "{", "episode", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "\n", "\n", "", "lengthscale", ",", "outputscale", ",", "noise", ",", "kern", "=", "ctrl", ".", "gaussian_process", ".", "get_hyperparameters", "(", "as_numpy", "=", "True", ")", "\n", "trajectory", "=", "0", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "'data_%s'", "%", "epoch", ")", ",", "\n", "train_runs", "=", "train_runs", ",", "\n", "test_runs", "=", "test_runs", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "num_train_episodes_per_epoch", "=", "num_train_episodes_per_epoch", ",", "\n", "num_test_episodes_per_epoch", "=", "num_test_episodes_per_epoch", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "trajectory", "=", "trajectory", ",", "\n", "ctrl_freq", "=", "config", ".", "task_config", ".", "ctrl_freq", ",", "\n", "lengthscales", "=", "lengthscale", ",", "\n", "outputscale", "=", "outputscale", ",", "\n", "noise", "=", "noise", ",", "\n", "kern", "=", "kern", ",", "\n", "train_data", "=", "ctrl", ".", "train_data", ",", "\n", "test_data", "=", "ctrl", ".", "test_data", ",", "\n", "data_inputs", "=", "ctrl", ".", "data_inputs", ",", "\n", "data_targets", "=", "ctrl", ".", "data_targets", "\n", ")", "\n", "make_plots", "(", "test_runs", ",", "train_runs", ",", "train_envs", "[", "0", "]", ".", "state_dim", ",", "config", ".", "output_dir", ")", "\n", "", "fname", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "'figs'", ",", "'number_viol.csv'", ")", "\n", "plot_constraint_from_csv", "(", "fname", ",", "\n", "'Cartpole Constraint Violations'", ")", "\n", "\n", "return", "train_runs", ",", "test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_quadrotor_impossible_traj.main": [[34, 139], ["functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "range", "range", "range", "range", "safe_control_gym.utils.registration.make.reset", "range", "gpmpc_plotting_utils.make_traking_plot", "matplotlib.show", "train_envs.append", "train_envs[].action_space.seed", "test_envs.append", "test_envs[].action_space.seed", "safe_control_gym.utils.registration.make.prior_ctrl.run", "train_runs[].update", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "test_runs[].update", "safe_control_gym.utils.registration.make.preprocess_training_data", "safe_control_gym.utils.registration.make.learn", "range", "range", "safe_control_gym.utils.registration.make.gaussian_process.get_hyperparameters", "numpy.savez", "gpmpc_plotting_utils.make_traking_plot", "gpmpc_plotting_utils.make_quad_plots", "functools.partial.", "functools.partial.", "gpmpc_plotting_utils.gather_training_samples", "gpmpc_plotting_utils.gather_training_samples", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "test_runs[].update", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "train_runs[].update", "os.path.join", "os.path.join", "munch.munchify", "munch.munchify", "munch.munchify", "munch.munchify"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.make_traking_plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.preprocess_training_data", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.get_hyperparameters", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.make_traking_plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.make_quad_plots", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.gather_training_samples", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.gather_training_samples", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "task_config", "\n", ")", "\n", "config", ".", "algo_config", ".", "output_dir", "=", "config", ".", "output_dir", "\n", "ctrl", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", "\n", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "\n", "num_epochs", "=", "config", ".", "num_epochs", "\n", "num_train_episodes_per_epoch", "=", "config", ".", "num_train_episodes_per_epoch", "\n", "num_test_episodes_per_epoch", "=", "config", ".", "num_test_episodes_per_epoch", "\n", "num_samples", "=", "config", ".", "num_samples", "\n", "train_runs", "=", "{", "0", ":", "{", "}", "}", "\n", "test_runs", "=", "{", "0", ":", "{", "}", "}", "\n", "\n", "train_envs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "train_envs", ".", "append", "(", "env_func", "(", "randomized_init", "=", "False", ")", ")", "\n", "train_envs", "[", "epoch", "]", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "", "test_envs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "test_envs", ".", "append", "(", "env_func", "(", "randomized_init", "=", "False", ")", ")", "\n", "test_envs", "[", "epoch", "]", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "\n", "", "for", "episode", "in", "range", "(", "num_train_episodes_per_epoch", ")", ":", "\n", "        ", "run_results", "=", "ctrl", ".", "prior_ctrl", ".", "run", "(", "env", "=", "train_envs", "[", "0", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_train_on_done", ")", "\n", "train_runs", "[", "0", "]", ".", "update", "(", "{", "episode", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "", "for", "test_ep", "in", "range", "(", "num_test_episodes_per_epoch", ")", ":", "\n", "        ", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_envs", "[", "0", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_test_on_done", ")", "\n", "test_runs", "[", "0", "]", ".", "update", "(", "{", "test_ep", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "", "ctrl", ".", "reset", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "num_epochs", ")", ":", "\n", "# only take data from the last episode from the last epoch", "\n", "        ", "if", "config", ".", "rand_kernel_selection", ":", "\n", "            ", "x_seq", ",", "actions", ",", "x_next_seq", "=", "gather_training_samples", "(", "train_runs", ",", "epoch", "-", "1", ",", "num_samples", ",", "test_envs", "[", "epoch", "-", "1", "]", ".", "np_random", ")", "\n", "", "else", ":", "\n", "            ", "x_seq", ",", "actions", ",", "x_next_seq", "=", "gather_training_samples", "(", "train_runs", ",", "epoch", "-", "1", ",", "num_samples", ")", "\n", "#x_seq, actions, x_next_seq = gather_training_samples_from_all_data(train_runs, num_samples*epoch)", "\n", "#x_seq_filtered, actions_filtered, x_next_seq_filtered = filter_sequences(x_seq, actions, x_next_seq, 1)", "\n", "#train_inputs, train_outputs = ctrl.preprocess_training_data(x_seq_filtered,", "\n", "#                                                            actions_filtered,", "\n", "#                                                            x_next_seq_filtered)", "\n", "", "train_inputs", ",", "train_outputs", "=", "ctrl", ".", "preprocess_training_data", "(", "x_seq", ",", "\n", "actions", ",", "\n", "x_next_seq", ")", "\n", "_", "=", "ctrl", ".", "learn", "(", "input_data", "=", "train_inputs", ",", "target_data", "=", "train_outputs", ")", "\n", "\n", "# Test new policy.", "\n", "test_runs", "[", "epoch", "]", "=", "{", "}", "\n", "for", "test_ep", "in", "range", "(", "num_test_episodes_per_epoch", ")", ":", "\n", "            ", "ctrl", ".", "reset", "(", ")", "\n", "# Use the previous iteration to warmstart the optimizer", "\n", "ctrl", ".", "x_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", "ctrl", ".", "T", "+", "1", ",", ":", "]", ".", "T", "\n", "ctrl", ".", "u_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "0", "]", "[", "'action'", "]", "[", ":", "ctrl", ".", "T", ",", ":", "]", ".", "T", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_envs", "[", "epoch", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_test_on_done", ")", "\n", "test_runs", "[", "epoch", "]", ".", "update", "(", "{", "test_ep", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "# gather training data", "\n", "", "train_runs", "[", "epoch", "]", "=", "{", "}", "\n", "for", "episode", "in", "range", "(", "num_train_episodes_per_epoch", ")", ":", "\n", "            ", "ctrl", ".", "reset", "(", ")", "\n", "ctrl", ".", "x_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", "ctrl", ".", "T", "+", "1", ",", ":", "]", ".", "T", "\n", "ctrl", ".", "u_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "0", "]", "[", "'action'", "]", "[", ":", "ctrl", ".", "T", ",", ":", "]", ".", "T", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "train_envs", "[", "epoch", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_train_on_done", ")", "\n", "train_runs", "[", "epoch", "]", ".", "update", "(", "{", "episode", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "\n", "", "trajectory", "=", "test_envs", "[", "0", "]", ".", "X_GOAL", "\n", "\n", "lengthscale", ",", "outputscale", ",", "noise", ",", "kern", "=", "ctrl", ".", "gaussian_process", ".", "get_hyperparameters", "(", "as_numpy", "=", "True", ")", "\n", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "'data_%s'", "%", "epoch", ")", ",", "\n", "train_runs", "=", "train_runs", ",", "\n", "test_runs", "=", "test_runs", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "num_train_episodes_per_epoch", "=", "num_train_episodes_per_epoch", ",", "\n", "num_test_episodes_per_epoch", "=", "num_test_episodes_per_epoch", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "trajectory", "=", "trajectory", ",", "\n", "ctrl_freq", "=", "config", ".", "task_config", ".", "ctrl_freq", ",", "\n", "lengthscales", "=", "lengthscale", ",", "\n", "outputscale", "=", "outputscale", ",", "\n", "noise", "=", "noise", ",", "\n", "kern", "=", "kern", ",", "\n", "train_data", "=", "ctrl", ".", "train_data", ",", "\n", "test_data", "=", "ctrl", ".", "test_data", ",", "\n", "data_inputs", "=", "ctrl", ".", "data_inputs", ",", "\n", "data_targets", "=", "ctrl", ".", "data_targets", ")", "\n", "\n", "make_traking_plot", "(", "test_runs", ",", "trajectory", ",", "config", ".", "output_dir", ")", "\n", "make_quad_plots", "(", "test_runs", ",", "train_runs", ",", "trajectory", ",", "train_envs", "[", "0", "]", ".", "state_dim", ",", "config", ".", "output_dir", ")", "\n", "\n", "", "make_traking_plot", "(", "test_runs", ",", "trajectory", ",", "config", ".", "output_dir", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "train_runs", ",", "test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_quadrotor_control_performance.trajectory_plot_csv": [[32, 55], ["numpy.arange", "numpy.atleast_2d", "matplotlib.subplots", "range", "range", "numpy.vstack", "matplotlib.savefig", "numpy.hstack", "os.path.join", "os.path.join", "numpy.savetxt", "ax[].plot", "ax[].set_ylabel", "ax[].set_xlabel", "ax[].plot", "os.path.join", "os.path.join", "ax[].plot", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["def", "trajectory_plot_csv", "(", "traj_data", ",", "action", ",", "dir", ",", "ref", "=", "None", ")", ":", "\n", "    ", "times", "=", "np", ".", "arange", "(", "traj_data", ".", "shape", "[", "0", "]", ")", "\n", "action", "=", "np", ".", "atleast_2d", "(", "action", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "traj_data", ".", "shape", "[", "1", "]", "+", "action", ".", "shape", "[", "1", "]", ",", "1", ",", "sharex", "=", "'col'", ")", "\n", "for", "i", "in", "range", "(", "traj_data", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "ax", "[", "i", "]", ".", "plot", "(", "traj_data", "[", ":", ",", "i", "]", ")", "\n", "if", "ref", "is", "not", "None", ":", "\n", "            ", "ax", "[", "i", "]", ".", "plot", "(", "ref", "[", ":", ",", "i", "]", ",", "'--r'", ",", "label", "=", "'ref'", ")", "\n", "", "ax", "[", "i", "]", ".", "set_ylabel", "(", "'x%s'", "%", "i", ")", "\n", "ax", "[", "i", "]", ".", "set_xlabel", "(", "'Time (s)'", ")", "\n", "", "i", "+=", "1", "\n", "for", "j", "in", "range", "(", "action", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "ax", "[", "i", "+", "j", "]", ".", "plot", "(", "action", "[", ":", ",", "j", "]", ")", "\n", "\n", "", "action", "=", "np", ".", "vstack", "(", "(", "action", ",", "np", ".", "zeros", "(", "(", "1", ",", "action", ".", "shape", "[", "1", "]", ")", ")", ")", ")", "\n", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'trajectory_plot.png'", ")", ")", "\n", "\n", "data", "=", "np", ".", "hstack", "(", "(", "times", "[", ":", ",", "None", "]", ",", "traj_data", ",", "action", ")", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'trajectory_plot.csv'", ")", "\n", "header", "=", "'Time step,x position, x velocity, theta position, theta velocity,action'", "\n", "np", ".", "savetxt", "(", "fname", ",", "data", ",", "delimiter", "=", "','", ",", "header", "=", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_quadrotor_control_performance.main": [[57, 109], ["functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "os.path.join", "os.path.join", "numpy.load", "safe_control_gym.utils.registration.make.learn", "functools.partial.", "env_func.action_space.seed", "safe_control_gym.utils.registration.make.run", "numpy.savez", "gpmpc_quadrotor_control_performance.trajectory_plot_csv", "matplotlib.show", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_cartpole_control_performance.trajectory_plot_csv"], ["", "def", "main", "(", "config", ")", ":", "\n", "    ", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "**", "config", ".", "task_config", "\n", ")", "\n", "config", ".", "algo_config", ".", "output_dir", "=", "config", ".", "output_dir", "\n", "ctrl", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", "\n", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "algo_config", ".", "gp_model_path", ",", "'data.npz'", ")", "\n", "data", "=", "np", ".", "load", "(", "data_path", ")", "\n", "data_inputs", "=", "data", "[", "'data_inputs'", "]", "\n", "data_targets", "=", "data", "[", "'data_targets'", "]", "\n", "_", "=", "ctrl", ".", "learn", "(", "input_data", "=", "data_inputs", ",", "\n", "target_data", "=", "data_targets", ")", "\n", "\n", "test_results", "=", "{", "}", "\n", "init_state", "=", "{", "'init_x'", ":", "0.0", ",", "\n", "'init_x_dot'", ":", "0.0", ",", "\n", "'init_z'", ":", "0.0", ",", "\n", "'init_x_dot'", ":", "0.0", ",", "\n", "'init_theta'", ":", "0.0", ",", "\n", "'init_theta_dot'", ":", "0.0", "}", "\n", "\n", "\n", "\n", "test_env", "=", "env_func", "(", "init_state", "=", "init_state", ",", "\n", "randomized_init", "=", "False", ",", "\n", "seed", "=", "config", ".", "seed", ")", "\n", "test_env", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_env", ")", "\n", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\n", "'data.npz'", ")", ",", "\n", "run_results", "=", "run_results", ",", "\n", "init_state", "=", "init_state", ",", "\n", "ctrl_freq", "=", "config", ".", "task_config", ".", "ctrl_freq", ")", "\n", "\n", "\n", "trajectory_plot_csv", "(", "run_results", "[", "'obs'", "]", ",", "\n", "run_results", "[", "'action'", "]", ",", "\n", "config", ".", "output_dir", ",", "\n", "ref", "=", "test_env", ".", "X_GOAL", ")", "\n", "plt", ".", "show", "(", ")", "\n", "#plt.plot(run_results['obs'][:,0], run_results['obs'][:,2], 'b')", "\n", "#plt.plot(test_env.X_GOAL[:,0], test_env.X_GOAL[:,2], 'r')", "\n", "\n", "return", "run_results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_quadrotor_data_eff.main": [[34, 124], ["functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "range", "range", "range", "range", "safe_control_gym.utils.registration.make.reset", "range", "numpy.savez", "gpmpc_plotting_utils.make_quad_plots", "matplotlib.close", "os.path.join", "os.path.join", "gpmpc_plotting_utils.plot_data_eff_from_csv", "train_envs.append", "test_envs.append", "safe_control_gym.utils.registration.make.prior_ctrl.run", "train_runs[].update", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "test_runs[].update", "gpmpc_plotting_utils.gather_training_samples", "gpmpc_plotting_utils.filter_sequences", "safe_control_gym.utils.registration.make.preprocess_training_data", "safe_control_gym.utils.registration.make.learn", "range", "range", "gpmpc_plotting_utils.make_traking_plot", "os.path.join", "os.path.join", "functools.partial.", "functools.partial.", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "test_runs[].update", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "train_runs[].update", "munch.munchify", "munch.munchify", "munch.munchify", "munch.munchify"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.make_quad_plots", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_data_eff_from_csv", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.gather_training_samples", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.filter_sequences", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.preprocess_training_data", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.make_traking_plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "task_config", "\n", ")", "\n", "config", ".", "algo_config", ".", "output_dir", "=", "config", ".", "output_dir", "\n", "ctrl", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", "\n", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "\n", "num_epochs", "=", "config", ".", "num_epochs", "\n", "num_train_episodes_per_epoch", "=", "config", ".", "num_train_episodes_per_epoch", "\n", "num_test_episodes_per_epoch", "=", "config", ".", "num_test_episodes_per_epoch", "\n", "num_samples", "=", "config", ".", "num_samples", "\n", "train_runs", "=", "{", "0", ":", "{", "}", "}", "\n", "test_runs", "=", "{", "0", ":", "{", "}", "}", "\n", "train_envs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "train_envs", ".", "append", "(", "env_func", "(", "randomized_init", "=", "False", ")", ")", "\n", "", "test_envs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "test_envs", ".", "append", "(", "env_func", "(", "randomized_init", "=", "False", ")", ")", "\n", "\n", "", "for", "episode", "in", "range", "(", "num_train_episodes_per_epoch", ")", ":", "\n", "        ", "run_results", "=", "ctrl", ".", "prior_ctrl", ".", "run", "(", "env", "=", "train_envs", "[", "0", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_train_on_done", ")", "\n", "train_runs", "[", "0", "]", ".", "update", "(", "{", "episode", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "", "for", "test_ep", "in", "range", "(", "num_test_episodes_per_epoch", ")", ":", "\n", "        ", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_envs", "[", "0", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_test_on_done", ")", "\n", "test_runs", "[", "0", "]", ".", "update", "(", "{", "test_ep", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "", "ctrl", ".", "reset", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "num_epochs", ")", ":", "\n", "# only take data from the last episode from the last epoch", "\n", "        ", "x_seq", ",", "actions", ",", "x_next_seq", "=", "gather_training_samples", "(", "train_runs", ",", "epoch", "-", "1", ",", "num_samples", ")", "\n", "#x_seq, actions, x_next_seq = gather_training_samples_from_all_data(train_runs, num_samples*epoch)", "\n", "x_seq_filtered", ",", "actions_filtered", ",", "x_next_seq_filtered", "=", "filter_sequences", "(", "x_seq", ",", "actions", ",", "x_next_seq", ",", "1", ")", "\n", "\n", "train_inputs", ",", "train_outputs", "=", "ctrl", ".", "preprocess_training_data", "(", "x_seq_filtered", ",", "\n", "actions_filtered", ",", "\n", "x_next_seq_filtered", ")", "\n", "#train_inputs, train_outputs = ctrl.preprocess_training_data(x_seq, actions, x_next_seq)", "\n", "_", "=", "ctrl", ".", "learn", "(", "input_data", "=", "train_inputs", ",", "target_data", "=", "train_outputs", ")", "\n", "\n", "# Test new policy.", "\n", "test_runs", "[", "epoch", "]", "=", "{", "}", "\n", "for", "test_ep", "in", "range", "(", "num_test_episodes_per_epoch", ")", ":", "\n", "            ", "ctrl", ".", "reset", "(", ")", "\n", "ctrl", ".", "x_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", "ctrl", ".", "T", "+", "1", ",", ":", "]", ".", "T", "\n", "ctrl", ".", "u_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "0", "]", "[", "'action'", "]", "[", ":", "ctrl", ".", "T", ",", ":", "]", ".", "T", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_envs", "[", "epoch", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_test_on_done", ")", "\n", "test_runs", "[", "epoch", "]", ".", "update", "(", "{", "test_ep", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "# gather training data", "\n", "", "train_runs", "[", "epoch", "]", "=", "{", "}", "\n", "for", "episode", "in", "range", "(", "num_train_episodes_per_epoch", ")", ":", "\n", "            ", "ctrl", ".", "reset", "(", ")", "\n", "ctrl", ".", "x_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "0", "]", "[", "'obs'", "]", "[", ":", "ctrl", ".", "T", "+", "1", ",", ":", "]", ".", "T", "\n", "ctrl", ".", "u_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "0", "]", "[", "'action'", "]", "[", ":", "ctrl", ".", "T", ",", ":", "]", ".", "T", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "train_envs", "[", "epoch", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_train_on_done", ")", "\n", "train_runs", "[", "epoch", "]", ".", "update", "(", "{", "episode", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "\n", "", "trajectory", "=", "test_envs", "[", "0", "]", ".", "X_GOAL", "\n", "make_traking_plot", "(", "test_runs", ",", "trajectory", ",", "config", ".", "output_dir", ")", "\n", "\n", "\n", "", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "'data'", ")", ",", "\n", "train_runs", "=", "train_runs", ",", "\n", "test_runs", "=", "test_runs", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "num_train_episodes_per_epoch", "=", "num_train_episodes_per_epoch", ",", "\n", "num_test_episodes_per_epoch", "=", "num_test_episodes_per_epoch", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "trajectory", "=", "trajectory", ",", "\n", "ctrl_freq", "=", "config", ".", "task_config", ".", "ctrl_freq", ",", "\n", "data_inputs", "=", "ctrl", ".", "data_inputs", ",", "\n", "data_targets", "=", "ctrl", ".", "data_targets", ")", "\n", "make_quad_plots", "(", "test_runs", ",", "train_runs", ",", "trajectory", ",", "test_envs", "[", "0", "]", ".", "state_dim", ",", "config", ".", "output_dir", ")", "\n", "plt", ".", "close", "(", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "'figs'", ",", "'rmse_xz_error_learning_curve.csv'", ")", "\n", "plot_data_eff_from_csv", "(", "fname", ",", "\n", "'Quadrotor Data Efficiency'", ")", "\n", "return", "train_runs", ",", "test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval.test_policy": [[40, 107], ["safe_control_gym.utils.utils.set_device_from_config", "functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "eval_utils.run_with_env", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "eval_utils.save_traj_to_csv", "eval_utils.plot_time_traj", "safe_control_gym.utils.registration.make.close", "print", "safe_control_gym.utils.utils.set_seed_from_config", "safe_control_gym.utils.registration.make.load", "eval_utils.make_fixed_init_env", "hasattr", "os.path.join", "os.path.join", "os.path.dirname", "os.path.dirname", "open", "pickle.dump", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_device_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.run_with_env", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.save_traj_to_csv", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.plot_time_traj", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_seed_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.make_fixed_init_env"], ["\n", "assert", "config", ".", "restore", "is", "not", "None", ",", "\"must specify --restore for policy evaluation.\"", "\n", "assert", "config", ".", "task_config", ".", "done_on_out_of_bound", "is", "False", ",", "\"post-evaluation should disable early termination.\"", "\n", "# Evaluation setup.", "\n", "set_device_from_config", "(", "config", ")", "\n", "if", "config", ".", "set_test_seed", ":", "\n", "# seed the evaluation (both controller and env) if given", "\n", "        ", "set_seed_from_config", "(", "config", ")", "\n", "env_seed", "=", "config", ".", "seed", "\n", "", "else", ":", "\n", "        ", "env_seed", "=", "None", "\n", "# Define function to create task/env.", "\n", "", "env_func", "=", "partial", "(", "make", ",", "config", ".", "task", ",", "seed", "=", "env_seed", ",", "output_dir", "=", "config", ".", "output_dir", ",", "**", "config", ".", "task_config", ")", "\n", "# Create the controller/control_agent.", "\n", "control_agent", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "training", "=", "False", ",", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"model_latest.pt\"", ")", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "device", "=", "config", ".", "device", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "control_agent", ".", "reset", "(", ")", "\n", "if", "config", ".", "restore", ":", "\n", "        ", "control_agent", ".", "load", "(", "os", ".", "path", ".", "join", "(", "config", ".", "restore", ",", "config", ".", "restore_model_file", ")", ")", "\n", "\n", "# Test controller.", "\n", "", "if", "config", ".", "fix_env_init", ":", "\n", "        ", "n_episodes", "=", "1", "\n", "# quad has default 0 for initial states", "\n", "init_state", "=", "{", "}", "\n", "env", "=", "make_fixed_init_env", "(", "config", ",", "init_state", "=", "init_state", ",", "\n", "env_seed", "=", "env_seed", ",", "n_episodes", "=", "n_episodes", ")", "\n", "", "else", ":", "\n", "        ", "n_episodes", "=", "config", ".", "algo_config", ".", "eval_batch_size", "\n", "env", "=", "control_agent", ".", "env", "\n", "", "results", "=", "run_with_env", "(", "config", ",", "control_agent", ",", "env", ",", "n_episodes", "=", "n_episodes", ",", "\n", "render", "=", "config", ".", "render", ",", "verbose", "=", "config", ".", "verbose", ")", "\n", "\n", "# Save evalution results.", "\n", "if", "hasattr", "(", "config", ",", "\"eval_output_dir\"", ")", "and", "config", ".", "eval_output_dir", "is", "not", "None", ":", "\n", "        ", "eval_output_dir", "=", "config", ".", "eval_output_dir", "\n", "", "else", ":", "\n", "        ", "eval_output_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"eval\"", ")", "\n", "", "os", ".", "makedirs", "(", "eval_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "# test trajs and statistics ", "\n", "eval_path", "=", "os", ".", "path", ".", "join", "(", "eval_output_dir", ",", "config", ".", "eval_output_path", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "eval_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "eval_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "results", ",", "f", ")", "\n", "# time and phase trajs for better visualization & plotting", "\n", "", "save_traj_to_csv", "(", "config", ",", "env", ",", "results", ",", "os", ".", "path", ".", "join", "(", "eval_output_dir", ",", "\"eval_trajs\"", ")", ")", "\n", "plot_time_traj", "(", "env", ",", "results", ",", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "eval_output_dir", ",", "\"time_trajectory.png\"", ")", ",", "\n", "max_episode_plot", "=", "config", ".", "max_episode_plot", ")", "\n", "plot_phase_traj", "(", "env", ",", "results", ",", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "eval_output_dir", ",", "\"phase_trajectory.png\"", ")", ",", "\n", "max_episode_plot", "=", "config", ".", "max_episode_plot", ")", "\n", "control_agent", ".", "close", "(", ")", "\n", "print", "(", "\"Evaluation done.\"", ")", "\n", "\n", "\n", "", "def", "test_from_checkpoints", "(", "config", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval.test_from_checkpoints": [[109, 209], ["os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "re.compile", "sorted", "safe_control_gym.utils.utils.set_device_from_config", "functools.partial", "functools.partial.", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "collections.defaultdict", "enumerate", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "collections.defaultdict.pop", "collections.defaultdict.items", "safe_control_gym.utils.registration.make.close", "print", "ValueError", "print", "os.path.join", "os.path.join", "safe_control_gym.utils.registration.make.load", "safe_control_gym.utils.registration.make.run", "test_results[].append", "control_agent.run.items", "numpy.array().transpose", "np.array().transpose.tolist", "os.path.join", "os.path.join", "float", "os.listdir", "os.listdir", "safe_control_gym.utils.utils.set_seed_from_config", "os.path.join", "os.path.join", "test_results[].append", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "re.compile.search().group", "safe_control_gym.utils.utils.set_seed_from_config", "isinstance", "v.mean", "numpy.asarray", "test_results[].append", "numpy.array", "len", "len", "len", "numpy.mean", "k.replace", "numpy.mean", "re.compile.search", "numpy.sqrt", "range", "len"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_device_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_seed_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_seed_from_config"], ["\n", "assert", "config", ".", "restore", "is", "not", "None", ",", "\"must specify --restore for policy evaluation.\"", "\n", "assert", "config", ".", "task_config", ".", "done_on_out_of_bound", "is", "False", ",", "\"post-evaluation should disable early termination.\"", "\n", "# Get all checkpoints", "\n", "checkpoint_dir_full", "=", "os", ".", "path", ".", "join", "(", "config", ".", "restore", ",", "config", ".", "checkpoint_dir", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "checkpoint_dir_full", ")", ",", "\"checkpoint_dir does not exist in {}\"", ".", "format", "(", "config", ".", "restore", ")", "\n", "checkpoint_re", "=", "re", ".", "compile", "(", "\"model_(.*)\\.pt\"", ")", "\n", "checkpoints", "=", "[", "\n", "[", "float", "(", "checkpoint_re", ".", "search", "(", "pt", ")", ".", "group", "(", "1", ")", ")", ",", "pt", "]", "\n", "for", "pt", "in", "os", ".", "listdir", "(", "checkpoint_dir_full", ")", "\n", "]", "\n", "checkpoints", "=", "sorted", "(", "checkpoints", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "\n", "# Evaluation setup.", "\n", "set_device_from_config", "(", "config", ")", "\n", "if", "config", ".", "set_test_seed", "and", "config", ".", "set_test_seed_as_training_eval", ":", "\n", "        ", "raise", "ValueError", "(", "\"Can only enable either `set_test_seed` or `set_test_seed_as_training_eval`.\"", ")", "\n", "", "elif", "config", ".", "set_test_seed", ":", "\n", "        ", "set_seed_from_config", "(", "config", ")", "\n", "env_seed", "=", "config", ".", "seed", "\n", "", "elif", "config", ".", "set_test_seed_as_training_eval", ":", "\n", "# algo seeding uses seed for original training ", "\n", "        ", "set_seed_from_config", "(", "config", ")", "\n", "# env seeding uses seed for eval_env back in during training ", "\n", "env_seed", "=", "config", ".", "seed", "*", "111", "\n", "", "else", ":", "\n", "        ", "env_seed", "=", "None", "\n", "\n", "# Define function to create task/env.", "\n", "", "env_func", "=", "partial", "(", "make", ",", "config", ".", "task", ",", "seed", "=", "env_seed", ",", "output_dir", "=", "config", ".", "output_dir", ",", "**", "config", ".", "task_config", ")", "\n", "# create env and send to .run() explicitly", "\n", "# since if not, the default self.env has infinit buffer but not of size eval_batch_size", "\n", "env", "=", "env_func", "(", ")", "\n", "# Create the controller/control_agent.", "\n", "control_agent", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "training", "=", "False", ",", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"model_latest.pt\"", ")", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "device", "=", "config", ".", "device", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "control_agent", ".", "reset", "(", ")", "\n", "\n", "# Test on each checkpoint ", "\n", "test_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "(", "step", ",", "checkpoint", ")", "in", "enumerate", "(", "checkpoints", ")", ":", "\n", "        ", "print", "(", "\"Progress {}, step {} evaluating...\"", ".", "format", "(", "i", "/", "len", "(", "checkpoints", ")", ",", "step", ")", ")", "\n", "checkpoint_path_full", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir_full", ",", "checkpoint", ")", "\n", "control_agent", ".", "load", "(", "checkpoint_path_full", ")", "\n", "results", "=", "control_agent", ".", "run", "(", "env", "=", "env", ",", "n_episodes", "=", "config", ".", "algo_config", ".", "eval_batch_size", ")", "\n", "\n", "test_results", "[", "\"step\"", "]", ".", "append", "(", "step", ")", "\n", "ep_lengths", "=", "results", "[", "\"ep_lengths\"", "]", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "pass", "\n", "# raw mean over n_episodes ", "\n", "", "test_results", "[", "k", "]", ".", "append", "(", "v", ".", "mean", "(", ")", ")", "\n", "# normalized mean ", "\n", "if", "k", "is", "not", "\"ep_lengths\"", ":", "\n", "                ", "assert", "len", "(", "v", ")", "==", "len", "(", "ep_lengths", ")", "\n", "# don't use `v / ep_lengths`, in case v is more than 1 dim", "\n", "normalized_v", "=", "np", ".", "asarray", "(", "[", "v", "[", "i", "]", "/", "ep_lengths", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "v", ")", ")", "]", ")", "\n", "if", "\"mse\"", "in", "k", ":", "\n", "# convert mse cost to rmse (as we desired for common metric across baselines)", "\n", "                    ", "stat", "=", "np", ".", "mean", "(", "np", ".", "sqrt", "(", "normalized_v", ")", ")", "\n", "name", "=", "k", ".", "replace", "(", "\"mse\"", ",", "\"rmse\"", ")", "\n", "", "else", ":", "\n", "# take simple mean for other metrics such as constrasint violations ", "\n", "                    ", "stat", "=", "np", ".", "mean", "(", "normalized_v", ")", "\n", "name", "=", "k", "\n", "", "test_results", "[", "\"normalized_\"", "+", "name", "]", ".", "append", "(", "stat", ")", "\n", "\n", "# Save evalution results.", "\n", "", "", "", "checkpoint_eval_dir_full", "=", "os", ".", "path", ".", "join", "(", "config", ".", "restore", ",", "\"logs\"", ",", "config", ".", "checkpoint_eval_dir", ")", "\n", "os", ".", "makedirs", "(", "checkpoint_eval_dir_full", ",", "exist_ok", "=", "True", ")", "\n", "steps", "=", "test_results", ".", "pop", "(", "\"step\"", ")", "\n", "\n", "for", "k", ",", "v", "in", "test_results", ".", "items", "(", ")", ":", "\n", "        ", "scalar_name", "=", "\"{}/{}\"", ".", "format", "(", "config", ".", "checkpoint_eval_dir", ",", "k", ")", "\n", "header", "=", "[", "\"step\"", ",", "scalar_name", "]", "\n", "stat_mtx", "=", "np", ".", "array", "(", "[", "steps", ",", "v", "]", ")", ".", "transpose", "(", ")", "\n", "rows", "=", "stat_mtx", ".", "tolist", "(", ")", "\n", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_eval_dir_full", ",", "\"{}.log\"", ".", "format", "(", "k", ")", ")", "\n", "with", "open", "(", "csv_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "writer", ".", "writerows", "(", "rows", ")", "\n", "", "", "control_agent", ".", "close", "(", ")", "\n", "print", "(", "\"Checkpoint evaluation done.\"", ")", "\n", "\n", "\n", "##############################################################################################", "\n", "#############################   Performance   ##################################################", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval.plot_performance": [[263, 308], ["legend_map.items", "eval_utils.plot_from_exps", "eval_utils.save_stats_to_csv", "print", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot_from_exps", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.save_stats_to_csv"], ["", "def", "plot_constraint", "(", "config", ")", ":", "\n", "    ", "\"\"\"\"\"\"", "\n", "legend_map", "=", "{", "\n", "\"ppo\"", ":", "\"ppo\"", ",", "\n", "\"safe_explorer_ppo/slack0.02\"", ":", "\"seppo_0.02\"", ",", "\n", "# \"safe_explorer_ppo/slack0.02_lr0.0001\": \"seppo_0.02_lr0.0001\",", "\n", "}", "\n", "name_map", "=", "{", "\n", "\"ppo\"", ":", "\"PPO\"", ",", "\n", "\"safe_explorer_ppo/slack0.02\"", ":", "\"PPO safety_layer slack0.02\"", ",", "\n", "# \"safe_explorer_ppo/slack0.02_lr0.0001\": \"PPO safety_layer slack0.02 lr 0.0001\",", "\n", "}", "\n", "scalar_name_map", "=", "{", "\n", "\"checkpoint_eval/normalized_constraint_violation\"", ":", "\"Constraint Violations\"", ",", "\n", "}", "\n", "\n", "# Collect results.", "\n", "spec", "=", "{", "}", "\n", "for", "d", ",", "legend", "in", "legend_map", ".", "items", "(", ")", ":", "\n", "        ", "seed_dirs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "d", ")", ")", "\n", "spec", "[", "legend", "]", "=", "[", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "d", ",", "sd", ")", "for", "sd", "in", "seed_dirs", "]", "\n", "\n", "# Collective plot (mean only).", "\n", "", "scalar_stats", "=", "plot_from_exps", "(", "\n", "spec", ",", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "\"constraint_performance.jpg\"", ")", ",", "\n", "scalar_names", "=", "[", "\"checkpoint_eval/normalized_constraint_violation\"", "]", ",", "\n", "title", "=", "\"Learning Curves\"", ",", "\n", "sub_titles", "=", "[", "\"Average Normalized Constraint Violations\"", "]", ",", "\n", "xlabel", "=", "\"Training Time (s)\"", ",", "\n", "ylabels", "=", "[", "\"Constraint Violations\"", "]", ",", "\n", "window", "=", "None", ",", "\n", "x_num_max", "=", "None", ",", "\n", "x_rescale_factor", "=", "dt", ",", "\n", "num_std", "=", "0", ",", "\n", "use_median_quantile", "=", "True", ",", "\n", "cols_per_row", "=", "3", "\n", ")", "\n", "\n", "# Save stats to CSV.", "\n", "save_stats_to_csv", "(", "\n", "scalar_stats", ",", "\n", "algo_name_map", ",", "\n", "scalar_name_map", ",", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "\"constraint_performance.csv\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval.plot_constraint": [[314, 361], ["legend_map.items", "eval_utils.plot_from_exps", "eval_utils.save_stats_to_csv", "print", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot_from_exps", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.save_stats_to_csv"], ["##############################################################################################", "\n", "\n", "", "MAIN_FUNCS", "=", "{", "\n", "\"test_policy\"", ":", "test_policy", ",", "\n", "\"test_from_checkpoints\"", ":", "test_from_checkpoints", ",", "\n", "\"plot_performance\"", ":", "plot_performance", ",", "\n", "\"plot_constraint\"", ":", "plot_constraint", ",", "\n", "}", "\n", "\n", "\n", "if", "__name__", "==", "\"__main__\"", ":", "\n", "# Make config.", "\n", "    ", "fac", "=", "ConfigFactory", "(", ")", "\n", "fac", ".", "add_argument", "(", "\"--func\"", ",", "type", "=", "str", ",", "default", "=", "\"test\"", ",", "help", "=", "\"main function to run.\"", ")", "\n", "fac", ".", "add_argument", "(", "\"--thread\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of threads to use (set by torch).\"", ")", "\n", "fac", ".", "add_argument", "(", "\"--render\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"if to render in policy test.\"", ")", "\n", "fac", ".", "add_argument", "(", "\"--verbose\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"if to print states & actions in policy test.\"", ")", "\n", "fac", ".", "add_argument", "(", "\"--set_test_seed\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"if to set seed when testing policy.\"", ")", "\n", "fac", ".", "add_argument", "(", "\"--eval_output_dir\"", ",", "type", "=", "str", ",", "help", "=", "\"folder path to save evaluation results.\"", ")", "\n", "fac", ".", "add_argument", "(", "\"--eval_output_path\"", ",", "type", "=", "str", ",", "default", "=", "\"test_results.pkl\"", ",", "help", "=", "\"file path to save evaluation results.\"", ")", "\n", "\n", "# testing args", "\n", "fac", ".", "add_argument", "(", "\"--restore_model_file\"", ",", "type", "=", "str", ",", "default", "=", "\"model_latest.pt\"", ",", "help", "=", "\"file name to restore the model.\"", ")", "\n", "fac", ".", "add_argument", "(", "\"--fix_env_init\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"if to test policy using env with fixed initial conditions.\"", ")", "\n", "fac", ".", "add_argument", "(", "\"--max_episode_plot\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"max number of test episode to plot.\"", ")", "\n", "fac", ".", "add_argument", "(", "\"--checkpoint_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"checkpoints\"", ",", "help", "=", "\"folder where training checkpoints are saved.\"", ")", "\n", "fac", ".", "add_argument", "(", "\"--set_test_seed_as_training_eval\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"if to set seed same as eval_env during training.\"", ")", "\n", "fac", ".", "add_argument", "(", "\"--checkpoint_eval_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"checkpoint_eval\"", ",", "help", "=", "\"where to save csv logs evaluated on checkpoints\"", ")", "\n", "\n", "# plotting args", "\n", "fac", ".", "add_argument", "(", "\"--plot_dir\"", ",", "type", "=", "str", ",", "help", "=", "\"folder path to save the plots.\"", ")", "\n", "\n", "config", "=", "fac", ".", "merge", "(", ")", "\n", "# System settings.", "\n", "if", "config", ".", "thread", ">", "0", ":", "\n", "# E.g. set single thread for less context switching", "\n", "        ", "torch", ".", "set_num_threads", "(", "config", ".", "thread", ")", "\n", "# Execute.", "\n", "", "func", "=", "MAIN_FUNCS", ".", "get", "(", "config", ".", "func", ",", "None", ")", "\n", "if", "func", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "\"Main function {} not supported.\"", ".", "format", "(", "config", ".", "func", ")", ")", "\n", "", "func", "(", "config", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.make_fixed_init_env": [[30, 49], ["copy.deepcopy", "dict_deep.deep_set", "init_state.items", "functools.partial", "functools.partial.", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "dict_deep.deep_set"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker"], ["config", "=", "deepcopy", "(", "config_origin", ")", "\n", "# modify env config with fixed init ", "\n", "config", ".", "task_config", ".", "randomized_init", "=", "False", "\n", "config", ".", "task_config", ".", "init_state_randomization_info", "=", "None", "\n", "# use deep_set since init_state is None, cannot assign ", "\n", "deep_set", "(", "config", ",", "\"task_config.init_state\"", ",", "{", "}", ")", "\n", "for", "state_k", ",", "state_v", "in", "init_state", ".", "items", "(", ")", ":", "\n", "        ", "deep_set", "(", "config", ",", "\"task_config.init_state.{}\"", ".", "format", "(", "state_k", ")", ",", "state_v", ")", "\n", "# make env ", "\n", "", "env_func", "=", "partial", "(", "make", ",", "config", ".", "task", ",", "seed", "=", "env_seed", ",", "output_dir", "=", "config", ".", "output_dir", ",", "**", "config", ".", "task_config", ")", "\n", "env", "=", "env_func", "(", ")", "\n", "env", "=", "RecordEpisodeStatistics", "(", "env", ",", "n_episodes", ")", "\n", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"constraint_values\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "return", "env", "\n", "\n", "\n", "", "def", "run_with_env", "(", "config", ",", "ctrl", ",", "env", ",", "render", "=", "False", ",", "n_episodes", "=", "10", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test policy with a given environment and save test trajectories.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.run_with_env": [[51, 120], ["env.reset", "goals.append", "ctrl.obs_normalizer", "info.get", "numpy.asarray", "numpy.asarray", "copy.deepcopy", "len", "env.step", "ep_obs.append", "ep_act.append", "ctrl.obs_normalizer", "info.get", "len", "len", "eval_results.update", "copy.deepcopy", "torch.no_grad", "torch.FloatTensor().to", "torch.FloatTensor().to", "copy.deepcopy", "copy.deepcopy", "env.render", "frames.append", "print", "np.asarray.append", "np.asarray.append", "env.reset", "goals.append", "ep_obs_list.append", "ep_act_list.append", "numpy.asarray", "ctrl.agent.ac.act", "env.render", "copy.deepcopy", "numpy.stack", "numpy.stack", "env.queued_stats.items", "torch.FloatTensor", "torch.FloatTensor", "ctrl.agent.ac.act", "copy.deepcopy", "ctrl.agent.ac.act", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act"], ["ep_returns", ",", "ep_lengths", "=", "[", "]", ",", "[", "]", "\n", "frames", "=", "[", "]", "\n", "\n", "obs", ",", "info", "=", "env", ".", "reset", "(", ")", "\n", "ep_obs", ",", "ep_act", "=", "[", "deepcopy", "(", "obs", "[", ":", "env", ".", "state_dim", "]", ")", "]", ",", "[", "]", "\n", "\n", "obs", "=", "ctrl", ".", "obs_normalizer", "(", "obs", ")", "\n", "c", "=", "info", ".", "get", "(", "\"constraint_values\"", ",", "0", ")", "\n", "\n", "while", "len", "(", "ep_returns", ")", "<", "n_episodes", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "obs", "=", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "ctrl", ".", "device", ")", "\n", "c", "=", "torch", ".", "FloatTensor", "(", "c", ")", ".", "to", "(", "ctrl", ".", "device", ")", "\n", "\n", "if", "config", ".", "algo", "==", "\"sac\"", "or", "config", ".", "algo", "==", "\"ddpg\"", ":", "\n", "                ", "action", "=", "ctrl", ".", "agent", ".", "ac", ".", "act", "(", "obs", ",", "deterministic", "=", "True", ")", "\n", "", "elif", "config", ".", "algo", "==", "\"ppo\"", ":", "\n", "                ", "action", "=", "ctrl", ".", "agent", ".", "ac", ".", "act", "(", "obs", ")", "\n", "", "elif", "config", ".", "algo", "==", "\"safe_explorer_ppo\"", ":", "\n", "                ", "action", "=", "ctrl", ".", "agent", ".", "ac", ".", "act", "(", "obs", ",", "c", "=", "c", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"ac.act not implemented.\"", ")", "\n", "\n", "", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "ep_obs", ".", "append", "(", "deepcopy", "(", "obs", "[", ":", "env", ".", "state_dim", "]", ")", ")", "\n", "ep_act", ".", "append", "(", "deepcopy", "(", "action", ")", ")", "\n", "\n", "if", "render", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "frames", ".", "append", "(", "env", ".", "render", "(", "\"rgb_array\"", ")", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "\"obs {} | act {}\"", ".", "format", "(", "obs", ",", "action", ")", ")", "\n", "\n", "", "if", "done", ":", "\n", "            ", "assert", "\"episode\"", "in", "info", "\n", "ep_returns", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"r\"", "]", ")", "\n", "ep_lengths", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"l\"", "]", ")", "\n", "obs", ",", "_", "=", "env", ".", "reset", "(", ")", "\n", "\n", "ep_obs_list", ".", "append", "(", "np", ".", "stack", "(", "ep_obs", ")", ")", "\n", "ep_act_list", ".", "append", "(", "np", ".", "stack", "(", "ep_act", ")", ")", "\n", "ep_obs", ",", "ep_act", "=", "[", "deepcopy", "(", "obs", "[", ":", "env", ".", "state_dim", "]", ")", "]", ",", "[", "]", "\n", "\n", "", "obs", "=", "ctrl", ".", "obs_normalizer", "(", "obs", ")", "\n", "c", "=", "info", ".", "get", "(", "\"constraint_values\"", ",", "0", ")", "\n", "\n", "# collect evaluation results", "\n", "", "ep_lengths", "=", "np", ".", "asarray", "(", "ep_lengths", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "ep_returns", ")", "\n", "eval_results", "=", "{", "\n", "\"ep_returns\"", ":", "ep_returns", ",", "\n", "\"ep_lengths\"", ":", "ep_lengths", ",", "\n", "\"ep_obs_list\"", ":", "ep_obs_list", ",", "\n", "\"ep_act_list\"", ":", "ep_act_list", ",", "\n", "}", "\n", "if", "len", "(", "frames", ")", ">", "0", ":", "\n", "        ", "eval_results", "[", "\"frames\"", "]", "=", "frames", "\n", "# Other episodic stats from evaluation env.", "\n", "", "if", "len", "(", "env", ".", "queued_stats", ")", ">", "0", ":", "\n", "        ", "queued_stats", "=", "{", "k", ":", "np", ".", "asarray", "(", "v", ")", "for", "k", ",", "v", "in", "env", ".", "queued_stats", ".", "items", "(", ")", "}", "\n", "eval_results", ".", "update", "(", "queued_stats", ")", "\n", "", "return", "eval_results", "\n", "\n", "\n", "", "def", "save_traj_to_csv", "(", "config", ",", "env", ",", "results", ",", "save_dir", ")", ":", "\n", "    ", "\"\"\" \"\"\"", "\n", "ep_obs_list", "=", "results", "[", "\"ep_obs_list\"", "]", "\n", "ep_act_list", "=", "results", "[", "\"ep_act_list\"", "]", "\n", "header", "=", "[", "\"t\"", ",", "\"x\"", ",", "\"x_dot\"", ",", "\"z\"", ",", "\"z_dot\"", ",", "\"theta\"", ",", "\"theta_dot\"", ",", "\"action1\"", ",", "\"action2\"", "]", "\n", "dim", "=", "9", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.save_traj_to_csv": [[122, 156], ["len", "os.makedirs", "os.makedirs", "range", "print", "len", "numpy.arange", "numpy.zeros", "numpy.clip", "np.zeros.tolist", "os.path.join", "os.path.join", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows"], "function", ["None"], ["action_dim", "=", "2", "\n", "n_episodes", "=", "len", "(", "ep_obs_list", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "n_episodes", ")", ":", "\n", "# (T+1, state_dim)", "\n", "        ", "states", "=", "ep_obs_list", "[", "i", "]", "\n", "# (T, action_dim)", "\n", "actions", "=", "ep_act_list", "[", "i", "]", "\n", "Tp1", "=", "len", "(", "states", ")", "\n", "x", "=", "np", ".", "arange", "(", "Tp1", ")", "\n", "data", "=", "np", ".", "zeros", "(", "(", "Tp1", ",", "dim", ")", ")", "\n", "data", "[", ":", ",", "0", "]", "=", "x", "\n", "data", "[", ":", ",", "1", ":", "1", "+", "state_dim", "]", "=", "states", "\n", "thrust", "=", "np", ".", "clip", "(", "actions", ",", "env", ".", "action_space", ".", "low", ",", "env", ".", "action_space", ".", "high", ")", "\n", "if", "config", ".", "task_config", ".", "normalized_rl_action_space", ":", "\n", "            ", "thrust", "=", "(", "1", "+", "env", ".", "norm_act_scale", "*", "thrust", ")", "*", "env", ".", "hover_thrust", "\n", "", "data", "[", ":", "-", "1", ",", "-", "action_dim", ":", "]", "=", "thrust", "\n", "rows", "=", "data", ".", "tolist", "(", ")", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"traj_{}.csv\"", ".", "format", "(", "i", ")", ")", "\n", "with", "open", "(", "csv_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "writer", ".", "writerows", "(", "rows", ")", "\n", "", "", "print", "(", "\"Test trajectories (time) saved to csv files.\"", ")", "\n", "\n", "\n", "", "def", "plot_time_traj", "(", "env", ",", "results", ",", "output_path", "=", "\"temp.png\"", ",", "max_episode_plot", "=", "1", ")", ":", "\n", "    ", "\"\"\"Plot each dimension of state and action in time.\"\"\"", "\n", "ep_obs_list", "=", "results", "[", "\"ep_obs_list\"", "]", "\n", "ep_act_list", "=", "results", "[", "\"ep_act_list\"", "]", "\n", "n_episodes", "=", "len", "(", "ep_obs_list", ")", "\n", "# process trajectories", "\n", "# (T, state_dim)", "\n", "traj_goal", "=", "env", ".", "X_GOAL", "\n", "if", "env", ".", "QUAD_TYPE", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.plot_time_traj": [[158, 207], ["len", "min", "matplotlib.figure", "plt.figure.subplots", "range", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.show", "print", "list", "numpy.stack", "range", "range", "range", "axe[].plot", "axe[].plot", "axe[].plot", "len", "len", "axe[].set_title", "axe[].set_title"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["state_dim", "=", "2", "\n", "act_dim", "=", "1", "\n", "", "elif", "env", ".", "QUAD_TYPE", "==", "2", ":", "\n", "        ", "state_names", "=", "[", "\"x\"", ",", "\"x_dot\"", ",", "\"z\"", ",", "\"z_dot\"", ",", "\"theta\"", ",", "\"theta_dot\"", "]", "\n", "state_dim", "=", "6", "\n", "act_dim", "=", "2", "\n", "", "ncols", "=", "state_dim", "+", "1", "\n", "n_rows", "=", "min", "(", "n_episodes", ",", "max_episode_plot", ")", "\n", "# fig = plt.figure()", "\n", "h_size", "=", "ncols", "*", "4", "\n", "v_size", "=", "n_rows", "*", "3", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "h_size", ",", "v_size", ")", ")", "\n", "axes", "=", "fig", ".", "subplots", "(", "nrows", "=", "n_rows", ",", "ncols", "=", "ncols", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_rows", ")", ":", "\n", "        ", "if", "n_rows", "==", "1", ":", "\n", "            ", "axe", "=", "axes", "\n", "", "else", ":", "\n", "            ", "axe", "=", "axes", "[", "i", "]", "\n", "# (T+1, state_dim), (T, act_dim)", "\n", "", "traj", ",", "acts", "=", "ep_obs_list", "[", "i", "]", ",", "ep_act_list", "[", "i", "]", "\n", "x", "=", "list", "(", "range", "(", "len", "(", "traj", ")", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "state_dim", ")", ":", "\n", "            ", "traj_goal_dim", "=", "traj_goal", "[", ":", ",", "j", "]", "\n", "traj_dim", "=", "traj", "[", ":", ",", "j", "]", "\n", "axe", "[", "j", "]", ".", "plot", "(", "x", "[", "1", ":", "]", ",", "traj_goal_dim", ",", "color", "=", "\"green\"", ")", "\n", "axe", "[", "j", "]", ".", "plot", "(", "x", ",", "traj_dim", ",", "color", "=", "\"black\"", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "axe", "[", "j", "]", ".", "set_title", "(", "state_names", "[", "j", "]", ")", "\n", "\n", "", "", "for", "k", "in", "range", "(", "act_dim", ")", ":", "\n", "            ", "action_dim", "=", "acts", "[", ":", ",", "k", "]", "\n", "axe", "[", "-", "1", "]", ".", "plot", "(", "x", "[", ":", "-", "1", "]", ",", "action_dim", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "axe", "[", "-", "1", "]", ".", "set_title", "(", "\"action\"", ")", "\n", "# save fig ", "\n", "", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "output_path", ")", "\n", "plt", ".", "show", "(", ")", "\n", "print", "(", "\"Test trajectories (time) plotted.\"", ")", "\n", "\n", "\n", "", "def", "plot_phase_traj", "(", "env", ",", "results", ",", "output_path", "=", "\"temp.png\"", ",", "max_episode_plot", "=", "1", ")", ":", "\n", "    ", "\"\"\"Plot the trajectory in phase (state/velocity) spaces.\"\"\"", "\n", "ep_obs_list", "=", "results", "[", "\"ep_obs_list\"", "]", "\n", "ep_act_list", "=", "results", "[", "\"ep_act_list\"", "]", "\n", "n_episodes", "=", "len", "(", "ep_obs_list", ")", "\n", "marker_size", "=", "100", "\n", "# process trajectories", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.plot_phase_traj": [[201, 286], ["len", "min", "matplotlib.figure", "plt.figure.subplots", "range", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.show", "print", "numpy.zeros_like", "axe[].plot", "axe[].plot", "axe[].scatter", "axe[].set_xlabel", "axe[].set_ylabel", "axe[].set_title", "axe[].plot", "axe[].plot", "axe[].scatter", "axe[].set_xlabel", "axe[].set_ylabel", "axe[].set_title", "axe[].plot", "axe[].plot", "axe[].scatter", "axe[].set_xlabel", "axe[].set_ylabel", "axe[].set_title", "axe[].plot", "axe[].plot", "axe[].scatter", "axe[].set_xlabel", "axe[].set_ylabel", "axe[].set_title", "axe[].plot", "axe[].scatter", "axe[].set_xlabel", "axe[].set_ylabel", "axe[].set_title"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_phase_traj", "(", "env", ",", "results", ",", "output_path", "=", "\"temp.png\"", ",", "max_episode_plot", "=", "1", ")", ":", "\n", "    ", "\"\"\"Plot the trajectory in phase (state/velocity) spaces.\"\"\"", "\n", "ep_obs_list", "=", "results", "[", "\"ep_obs_list\"", "]", "\n", "ep_act_list", "=", "results", "[", "\"ep_act_list\"", "]", "\n", "n_episodes", "=", "len", "(", "ep_obs_list", ")", "\n", "marker_size", "=", "100", "\n", "# process trajectories", "\n", "# (T, state_dim)", "\n", "traj_goal", "=", "env", ".", "X_GOAL", "\n", "if", "env", ".", "QUAD_TYPE", "==", "1", ":", "\n", "        ", "state_names", "=", "[", "\"z\"", ",", "\"z_dot\"", "]", "\n", "state_dim", "=", "2", "\n", "ncols", "=", "2", "\n", "", "elif", "env", ".", "QUAD_TYPE", "==", "2", ":", "\n", "        ", "state_names", "=", "[", "\"x\"", ",", "\"x_dot\"", ",", "\"z\"", ",", "\"z_dot\"", ",", "\"theta\"", ",", "\"theta_dot\"", "]", "\n", "state_dim", "=", "6", "\n", "ncols", "=", "3", "\n", "", "n_rows", "=", "min", "(", "n_episodes", ",", "max_episode_plot", ")", "\n", "# fig = plt.figure()", "\n", "h_size", "=", "ncols", "*", "4", "\n", "v_size", "=", "n_rows", "*", "3", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "h_size", ",", "v_size", ")", ")", "\n", "axes", "=", "fig", ".", "subplots", "(", "nrows", "=", "n_rows", ",", "ncols", "=", "ncols", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_rows", ")", ":", "\n", "        ", "if", "n_rows", "==", "1", ":", "\n", "            ", "axe", "=", "axes", "\n", "", "else", ":", "\n", "            ", "axe", "=", "axes", "[", "i", "]", "\n", "# (T+1, state_dim), (T, act_dim)", "\n", "", "traj", "=", "ep_obs_list", "[", "i", "]", "\n", "\n", "# (T+1 or T, 2)", "\n", "if", "env", ".", "QUAD_TYPE", "==", "1", ":", "\n", "            ", "z_goal", ",", "z_dot_doal", "=", "traj_goal", "[", ":", ",", "0", "]", ",", "traj_goal", "[", ":", ",", "1", "]", "\n", "z", ",", "z_dot", "=", "traj", "[", ":", ",", "0", "]", ",", "traj", "[", ":", ",", "1", "]", "\n", "x", "=", "np", ".", "zeros_like", "(", "z", ")", "\n", "\n", "axe", "[", "0", "]", ".", "plot", "(", "x", "[", "1", ":", "]", ",", "z_goal", ",", "color", "=", "\"green\"", ")", "\n", "# axe[0].scatter(x[-1], z_goal[-1], color=\"green\", s=marker_size)", "\n", "axe", "[", "0", "]", ".", "plot", "(", "x", ",", "z", ",", "color", "=", "\"black\"", ")", "\n", "axe", "[", "0", "]", ".", "scatter", "(", "x", "[", "-", "1", "]", ",", "z", "[", "-", "1", "]", ",", "color", "=", "\"red\"", ",", "s", "=", "marker_size", "//", "2", ")", "\n", "axe", "[", "0", "]", ".", "set_xlabel", "(", "\"x\"", ")", "\n", "axe", "[", "0", "]", ".", "set_ylabel", "(", "\"z\"", ")", "\n", "axe", "[", "0", "]", ".", "set_title", "(", "\"z traj\"", ")", "\n", "\n", "axe", "[", "1", "]", ".", "plot", "(", "x", "[", "1", ":", "]", ",", "z_dot_doal", ",", "color", "=", "\"green\"", ")", "\n", "# axe[1].scatter(x[-1], z_dot_doal[-1], color=\"green\", s=marker_size)", "\n", "axe", "[", "1", "]", ".", "plot", "(", "x", ",", "z_dot", ",", "color", "=", "\"black\"", ")", "\n", "axe", "[", "1", "]", ".", "scatter", "(", "x", "[", "-", "1", "]", ",", "z_dot", "[", "-", "1", "]", ",", "color", "=", "\"red\"", ",", "s", "=", "marker_size", "//", "2", ")", "\n", "axe", "[", "1", "]", ".", "set_xlabel", "(", "\"x_dot\"", ")", "\n", "axe", "[", "1", "]", ".", "set_ylabel", "(", "\"z_dot\"", ")", "\n", "axe", "[", "1", "]", ".", "set_title", "(", "\"z_dot traj\"", ")", "\n", "\n", "", "elif", "env", ".", "QUAD_TYPE", "==", "2", ":", "\n", "            ", "x_goal", ",", "x_dot_goal", ",", "z_goal", ",", "z_dot_doal", "=", "traj_goal", "[", ":", ",", "0", "]", ",", "traj_goal", "[", ":", ",", "1", "]", ",", "traj_goal", "[", ":", ",", "2", "]", ",", "traj_goal", "[", ":", ",", "3", "]", "\n", "x", ",", "x_dot", ",", "z", ",", "z_dot", "=", "traj", "[", ":", ",", "0", "]", ",", "traj", "[", ":", ",", "1", "]", ",", "traj", "[", ":", ",", "2", "]", ",", "traj", "[", ":", ",", "3", "]", "\n", "theta", ",", "theta_dot", "=", "traj", "[", ":", ",", "4", "]", ",", "traj", "[", ":", ",", "5", "]", "\n", "\n", "axe", "[", "0", "]", ".", "plot", "(", "x_goal", ",", "z_goal", ",", "color", "=", "\"green\"", ")", "\n", "# axe[0].scatter(x_goal[-1], z_goal[-1], color=\"green\", s=marker_size)", "\n", "axe", "[", "0", "]", ".", "plot", "(", "x", ",", "z", ",", "color", "=", "\"black\"", ")", "\n", "axe", "[", "0", "]", ".", "scatter", "(", "x", "[", "-", "1", "]", ",", "z", "[", "-", "1", "]", ",", "color", "=", "\"red\"", ",", "s", "=", "marker_size", "//", "2", ")", "\n", "axe", "[", "0", "]", ".", "set_xlabel", "(", "\"x\"", ")", "\n", "axe", "[", "0", "]", ".", "set_ylabel", "(", "\"z\"", ")", "\n", "axe", "[", "0", "]", ".", "set_title", "(", "\"x-z traj\"", ")", "\n", "\n", "axe", "[", "1", "]", ".", "plot", "(", "x_dot_goal", ",", "z_dot_doal", ",", "color", "=", "\"green\"", ")", "\n", "# axe[1].scatter(x_dot_goal[-1], z_dot_doal[-1], color=\"green\", s=marker_size)", "\n", "axe", "[", "1", "]", ".", "plot", "(", "x_dot", ",", "z_dot", ",", "color", "=", "\"black\"", ")", "\n", "axe", "[", "1", "]", ".", "scatter", "(", "x_dot", "[", "-", "1", "]", ",", "z_dot", "[", "-", "1", "]", ",", "color", "=", "\"red\"", ",", "s", "=", "marker_size", "//", "2", ")", "\n", "axe", "[", "1", "]", ".", "set_xlabel", "(", "\"x_dot\"", ")", "\n", "axe", "[", "1", "]", ".", "set_ylabel", "(", "\"z_dot\"", ")", "\n", "axe", "[", "1", "]", ".", "set_title", "(", "\"x_dot-z_dot traj\"", ")", "\n", "\n", "axe", "[", "2", "]", ".", "plot", "(", "theta", ",", "theta_dot", ",", "color", "=", "\"black\"", ")", "\n", "axe", "[", "2", "]", ".", "scatter", "(", "theta", "[", "-", "1", "]", ",", "theta_dot", "[", "-", "1", "]", ",", "color", "=", "\"red\"", ",", "s", "=", "marker_size", "//", "2", ")", "\n", "axe", "[", "2", "]", ".", "set_xlabel", "(", "\"theta\"", ")", "\n", "axe", "[", "2", "]", ".", "set_ylabel", "(", "\"theta_dot\"", ")", "\n", "axe", "[", "2", "]", ".", "set_title", "(", "\"theta-theta_dot traj\"", ")", "\n", "# save fig ", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "output_path", ")", "\n", "plt", ".", "show", "(", ")", "\n", "print", "(", "\"Test trajectories (phase) plotted.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.reward_to_cost": [[313, 316], ["None"], "function", ["None"], ["# quick hack to convert reward to cost (consistent with other control methods)", "\n", "if", "\"return\"", "in", "scalar_name", ".", "lower", "(", ")", "or", "\"reward\"", "in", "scalar_name", ".", "lower", "(", ")", ":", "\n", "                    ", "y", "=", "reward_to_cost", "(", "y", ")", "\n", "# rescale the x-axis, e.g. convert to training step to time ", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.load_stats": [[318, 371], ["collections.defaultdict", "legend_dir_specs.items", "float", "collections.defaultdict.items", "collections.defaultdict.items", "copy.deepcopy", "min", "numpy.stack", "os.path.join", "os.path.join", "safe_control_gym.utils.plotting.load_from_log_file", "stats[].append", "min", "numpy.array", "numpy.mean", "numpy.std", "numpy.median", "numpy.quantile", "numpy.min", "numpy.max", "numpy.asarray", "numpy.asarray", "eval_utils.reward_to_cost", "safe_control_gym.utils.plotting.window_func", "len", "scalar_name.lower", "scalar_name.lower"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.load_from_log_file", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.reward_to_cost", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.window_func"], ["                    ", "x", "*=", "x_rescale_factor", "\n", "# Smoothing.", "\n", "", "if", "window", ":", "\n", "                    ", "x", ",", "y", "=", "window_func", "(", "x", ",", "y", ",", "window", ",", "np", ".", "mean", ")", "\n", "", "stats", "[", "l", "]", ".", "append", "(", "[", "x", ",", "y", "]", ")", "\n", "# Post-processing.", "\n", "", "", "x_max", "=", "float", "(", "\"inf\"", ")", "\n", "for", "_", ",", "runs", "in", "stats", ".", "items", "(", ")", ":", "\n", "            ", "for", "x", ",", "y", "in", "runs", ":", "\n", "# Align length of x data (get min across all runs & all algos).", "\n", "                ", "x_max", "=", "min", "(", "x_max", ",", "len", "(", "x", ")", ")", "\n", "", "", "if", "x_num_max", ":", "\n", "            ", "x_max", "=", "min", "(", "x_max", ",", "x_num_max", ")", "\n", "", "processed_stats", "=", "{", "}", "\n", "for", "name", ",", "runs", "in", "stats", ".", "items", "(", ")", ":", "\n", "# Use same x for all runs to an algo.", "\n", "            ", "x", "=", "np", ".", "array", "(", "[", "x", "[", ":", "x_max", "]", "for", "x", ",", "_", "in", "runs", "]", ")", "[", "0", "]", "\n", "# Different y for different runs.", "\n", "y", "=", "np", ".", "stack", "(", "[", "y", "[", ":", "x_max", "]", "for", "_", ",", "y", "in", "runs", "]", ")", "\n", "# Record stats.", "\n", "processed_stats", "[", "name", "]", "=", "{", "\n", "\"x\"", ":", "x", ",", "\n", "\"mean\"", ":", "np", ".", "mean", "(", "y", ",", "axis", "=", "0", ")", ",", "\n", "\"std\"", ":", "np", ".", "std", "(", "y", ",", "axis", "=", "0", ")", ",", "\n", "\"median\"", ":", "np", ".", "median", "(", "y", ",", "axis", "=", "0", ")", ",", "\n", "\"quantiles\"", ":", "np", ".", "quantile", "(", "y", ",", "[", "0.25", ",", "0.75", "]", ",", "axis", "=", "0", ")", ",", "\n", "\"min\"", ":", "np", ".", "min", "(", "y", ",", "axis", "=", "0", ")", ",", "\n", "\"max\"", ":", "np", ".", "max", "(", "y", ",", "axis", "=", "0", ")", ",", "\n", "}", "\n", "# Copy over stats.", "\n", "", "scalar_stats", "[", "scalar_name", "]", "=", "deepcopy", "(", "processed_stats", ")", "\n", "", "return", "scalar_stats", "\n", "\n", "\n", "", "def", "plot_from_exps", "(", "legend_dir_specs", ",", "\n", "out_path", "=", "\"temp.jpg\"", ",", "\n", "scalar_names", "=", "[", "]", ",", "\n", "title", "=", "\"Traing Curves\"", ",", "\n", "sub_titles", "=", "[", "\"Loss Curve\"", "]", ",", "\n", "xlabel", "=", "\"Epochs\"", ",", "\n", "ylabels", "=", "[", "\"Loss\"", "]", ",", "\n", "window", "=", "None", ",", "\n", "x_num_max", "=", "None", ",", "\n", "x_rescale_factor", "=", "None", ",", "\n", "num_std", "=", "1", ",", "\n", "use_median_quantile", "=", "False", ",", "\n", "cols_per_row", "=", "3", ")", ":", "\n", "    ", "\"\"\"Plots 1 statistic figure at a time.\"\"\"", "\n", "# Get all stats.", "\n", "scalar_stats", "=", "load_stats", "(", "legend_dir_specs", ",", "\n", "scalar_names", "=", "scalar_names", ",", "\n", "window", "=", "window", ",", "\n", "x_num_max", "=", "x_num_max", ",", "\n", "x_rescale_factor", "=", "x_rescale_factor", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.plot_from_exps": [[373, 450], ["eval_utils.load_stats", "len", "math.ceil", "min", "matplotlib.figure", "plt.figure.subplots", "enumerate", "plt.figure.suptitle", "plt.figure.subplots_adjust", "plt.figure.legend", "matplotlib.savefig", "matplotlib.show", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.get_legend_handles_labels", "lines.extend", "labels.extend", "sorted", "processed_stats.keys", "len", "len", "ax.plot", "ax.fill_between", "ax.plot", "ax.fill_between"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.load_stats", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["num_plots", "=", "len", "(", "scalar_stats", ")", "\n", "num_rows", "=", "math", ".", "ceil", "(", "num_plots", "/", "cols_per_row", ")", "\n", "num_cols", "=", "min", "(", "num_plots", ",", "cols_per_row", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "6", ")", ")", "\n", "axes", "=", "fig", ".", "subplots", "(", "nrows", "=", "num_rows", ",", "ncols", "=", "num_cols", ")", "\n", "for", "idx", ",", "scalar_name", "in", "enumerate", "(", "scalar_names", ")", ":", "\n", "        ", "row_idx", "=", "idx", "//", "num_rows", "\n", "col_idx", "=", "idx", "%", "num_cols", "\n", "if", "num_rows", ">", "1", ":", "\n", "            ", "ax", "=", "axes", "[", "row_idx", ",", "col_idx", "]", "\n", "", "elif", "num_cols", ">", "1", ":", "\n", "            ", "ax", "=", "axes", "[", "col_idx", "]", "\n", "", "else", ":", "\n", "            ", "ax", "=", "axes", "\n", "", "processed_stats", "=", "scalar_stats", "[", "scalar_name", "]", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "sorted", "(", "processed_stats", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "color_i", "=", "(", "i", "+", "0", ")", "%", "len", "(", "COLORS", ")", "\n", "color", "=", "COLORS", "[", "color_i", "]", "\n", "line_i", "=", "(", "i", "+", "0", ")", "%", "len", "(", "LINE_STYLES", ")", "\n", "linestyle", "=", "LINE_STYLES", "[", "line_i", "]", "[", "-", "1", "]", "\n", "x", "=", "processed_stats", "[", "name", "]", "[", "\"x\"", "]", "\n", "if", "use_median_quantile", ":", "\n", "                ", "y_median", "=", "processed_stats", "[", "name", "]", "[", "\"median\"", "]", "\n", "y_quantiles", "=", "processed_stats", "[", "name", "]", "[", "\"quantiles\"", "]", "\n", "y_quant_1st", "=", "y_quantiles", "[", "0", "]", "\n", "y_quant_3rd", "=", "y_quantiles", "[", "1", "]", "\n", "ax", ".", "plot", "(", "x", ",", "y_median", ",", "label", "=", "name", ",", "color", "=", "color", ",", "alpha", "=", "0.7", ",", "linestyle", "=", "linestyle", ")", "\n", "ax", ".", "fill_between", "(", "x", ",", "y_quant_3rd", ",", "y_quant_1st", ",", "alpha", "=", "0.1", ",", "color", "=", "color", ")", "\n", "", "else", ":", "\n", "                ", "y_mean", "=", "processed_stats", "[", "name", "]", "[", "\"mean\"", "]", "\n", "y_std", "=", "processed_stats", "[", "name", "]", "[", "\"std\"", "]", "\n", "ax", ".", "plot", "(", "x", ",", "y_mean", ",", "label", "=", "name", ",", "color", "=", "color", ",", "alpha", "=", "0.7", ",", "linestyle", "=", "linestyle", ")", "\n", "ax", ".", "fill_between", "(", "x", ",", "y_mean", "+", "num_std", "*", "y_std", ",", "y_mean", "-", "num_std", "*", "y_std", ",", "alpha", "=", "0.1", ",", "color", "=", "color", ")", "\n", "", "", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabels", "[", "idx", "]", ")", "\n", "# ax.set_ylim((-10, None))", "\n", "# Postprocess plot.", "\n", "", "fig", ".", "suptitle", "(", "title", ")", "\n", "fig", ".", "subplots_adjust", "(", "bottom", "=", "0.15", ")", "\n", "lines", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "ax", "in", "fig", ".", "axes", ":", "\n", "        ", "axLine", ",", "axLabel", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "lines", ".", "extend", "(", "axLine", ")", "\n", "labels", ".", "extend", "(", "axLabel", ")", "\n", "break", "\n", "", "fig", ".", "legend", "(", "lines", ",", "\n", "labels", ",", "\n", "loc", "=", "'lower center'", ",", "\n", "fancybox", "=", "True", ",", "\n", "shadow", "=", "True", ",", "\n", "borderaxespad", "=", "0.1", ",", "\n", "ncol", "=", "7", ")", "\n", "plt", ".", "savefig", "(", "out_path", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "scalar_stats", "\n", "\n", "\n", "", "def", "save_stats_to_csv", "(", "scalar_stats", ",", "\n", "algo_name_map", "=", "None", ",", "\n", "scalar_name_map", "=", "None", ",", "\n", "csv_path", "=", "\"stats.csv\"", ")", ":", "\n", "    ", "\"\"\"Saves the queried experiment statistics to a csv file.\"\"\"", "\n", "curves", "=", "[", "\"mean\"", ",", "\"std\"", ",", "\"min\"", ",", "\"max\"", ",", "\"median\"", ",", "\"top_quartile\"", ",", "\"bottom_quartile\"", "]", "\n", "header", "=", "[", "]", "\n", "stat_rows", "=", "[", "]", "\n", "x_already", "=", "False", "\n", "for", "scalar_name", "in", "scalar_stats", ":", "\n", "        ", "stats", "=", "scalar_stats", "[", "scalar_name", "]", "\n", "true_scalar_name", "=", "scalar_name_map", "[", "scalar_name", "]", "if", "scalar_name_map", "else", "scalar_name", "\n", "# Collect stats.", "\n", "for", "algo_name", "in", "sorted", "(", "stats", ".", "keys", "(", ")", ")", ":", "\n", "            ", "true_algo_name", "=", "algo_name_map", "[", "algo_name", "]", "if", "algo_name_map", "else", "algo_name", "\n", "stat", "=", "stats", "[", "algo_name", "]", "\n", "# X.", "\n", "if", "not", "x_already", ":", "\n", "                ", "header", ".", "append", "(", "\"x-Step\"", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"x\"", "]", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.save_stats_to_csv": [[452, 491], ["numpy.array().transpose", "np.array().transpose.tolist", "os.makedirs", "os.makedirs", "sorted", "os.path.dirname", "os.path.dirname", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "stats.keys", "header.extend", "stat_rows.append", "stat_rows.append", "stat_rows.append", "stat_rows.append", "stat_rows.append", "stat_rows.append", "stat_rows.append", "numpy.array", "header.append", "stat_rows.append"], "function", ["None"], ["# Y.", "\n", "", "header", ".", "extend", "(", "[", "\"y-{}-{}-{}\"", ".", "format", "(", "true_scalar_name", ",", "true_algo_name", ",", "c", ")", "for", "c", "in", "curves", "]", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"mean\"", "]", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"std\"", "]", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"min\"", "]", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"max\"", "]", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"median\"", "]", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"quantiles\"", "]", "[", "1", "]", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"quantiles\"", "]", "[", "0", "]", ")", "\n", "# Make rows.", "\n", "", "", "stat_mtx", "=", "np", ".", "array", "(", "stat_rows", ")", ".", "transpose", "(", ")", "\n", "rows", "=", "stat_mtx", ".", "tolist", "(", ")", "\n", "# Write to csv.", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "csv_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "csv_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "writer", ".", "writerows", "(", "rows", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval.test_policy_robustness": [[211, 257], ["safe_control_gym.utils.utils.set_device_from_config", "functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "eval_utils.test_robustness_with_fixed_seeds", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "safe_control_gym.utils.registration.make.close", "print", "safe_control_gym.utils.utils.set_seed_from_config", "safe_control_gym.utils.registration.make.load", "os.path.join", "os.path.join", "os.path.dirname", "os.path.dirname", "open", "pickle.dump", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_device_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.test_robustness_with_fixed_seeds", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_seed_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load"], ["\n", "", "def", "plot_performance", "(", "config", ")", ":", "\n", "    ", "\"\"\"Gets the plot and csv for performance (in RMSE).\"\"\"", "\n", "legend_map", "=", "{", "\n", "\"ppo\"", ":", "\"ppo\"", ",", "\n", "\"sac\"", ":", "\"sac\"", ",", "\n", "}", "\n", "algo_name_map", "=", "{", "\n", "\"ppo\"", ":", "\"PPO\"", ",", "\n", "\"sac\"", ":", "\"SAC\"", ",", "\n", "}", "\n", "scalar_name_map", "=", "{", "\n", "\"checkpoint_eval/normalized_rmse\"", ":", "\"Cost\"", ",", "\n", "}", "\n", "\n", "# Collect results.", "\n", "spec", "=", "{", "}", "\n", "for", "d", ",", "legend", "in", "legend_map", ".", "items", "(", ")", ":", "\n", "        ", "seed_dirs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "d", ")", ")", "\n", "spec", "[", "legend", "]", "=", "[", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "d", ",", "sd", ")", "for", "sd", "in", "seed_dirs", "]", "\n", "\n", "# Collective plot (mean only).", "\n", "", "scalar_stats", "=", "plot_from_exps", "(", "\n", "spec", ",", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "\"performance.jpg\"", ")", ",", "\n", "scalar_names", "=", "[", "\"checkpoint_eval/normalized_rmse\"", "]", ",", "\n", "title", "=", "\"Learning Curves\"", ",", "\n", "sub_titles", "=", "[", "\"Average RMSE\"", "]", ",", "\n", "xlabel", "=", "\"Training Time (s)\"", ",", "\n", "ylabels", "=", "[", "\"Cost\"", "]", ",", "\n", "window", "=", "None", ",", "\n", "x_num_max", "=", "None", ",", "\n", "x_rescale_factor", "=", "dt", ",", "\n", "num_std", "=", "0", ",", "\n", "use_median_quantile", "=", "True", ",", "\n", "cols_per_row", "=", "3", "\n", ")", "\n", "\n", "# Save stats to CSV.", "\n", "save_stats_to_csv", "(", "\n", "scalar_stats", ",", "\n", "algo_name_map", "=", "algo_name_map", ",", "\n", "scalar_name_map", "=", "scalar_name_map", ",", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "\"performance.csv\"", ")", "\n", ")", "\n", "print", "(", "\"Performance plotting done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval.plot_robustness": [[367, 457], ["eval_utils.load_eval_stats", "matplotlib.figure", "enumerate", "hasattr", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "plt.figure.subplots_adjust", "plt.figure.legend", "os.path.join", "os.path.join", "matplotlib.savefig", "matplotlib.show", "eval_utils.save_stats_to_csv", "print", "data.items", "y.mean().mean", "matplotlib.plot", "matplotlib.axvline", "ax.get_legend_handles_labels", "lines.extend", "labels.extend", "os.path.join", "os.path.join", "numpy.sqrt", "y.mean", "float"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.load_eval_stats", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.save_stats_to_csv", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], []], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_cartpole_data_eff.main": [[32, 140], ["functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "range", "range", "safe_control_gym.utils.registration.make.reset", "range", "os.path.join", "os.path.join", "gpmpc_plotting_utils.plot_data_eff_from_csv", "range", "functools.partial.", "env_func.action_space.seed", "range", "functools.partial.", "env_func.action_space.seed", "safe_control_gym.utils.registration.make.prior_ctrl.run", "train_runs[].update", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "test_runs[].update", "safe_control_gym.utils.registration.make.preprocess_training_data", "safe_control_gym.utils.registration.make.learn", "range", "range", "safe_control_gym.utils.registration.make.gaussian_process.get_hyperparameters", "numpy.savez", "gpmpc_plotting_utils.make_plots", "train_envs.append", "train_envs[].action_space.seed", "test_envs.append", "test_envs[].action_space.seed", "gpmpc_plotting_utils.gather_training_samples", "gpmpc_plotting_utils.gather_training_samples", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "test_runs[].update", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "train_runs[].update", "os.path.join", "os.path.join", "functools.partial.", "functools.partial.", "munch.munchify", "munch.munchify", "munch.munchify", "munch.munchify"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_data_eff_from_csv", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.preprocess_training_data", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.get_hyperparameters", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.make_plots", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.gather_training_samples", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.gather_training_samples", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "task_config", "\n", ")", "\n", "config", ".", "algo_config", ".", "output_dir", "=", "config", ".", "output_dir", "\n", "ctrl", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", "\n", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "\n", "num_epochs", "=", "config", ".", "num_epochs", "\n", "num_train_episodes_per_epoch", "=", "config", ".", "num_train_episodes_per_epoch", "\n", "num_test_episodes_per_epoch", "=", "config", ".", "num_test_episodes_per_epoch", "\n", "num_samples", "=", "config", ".", "num_samples", "\n", "train_runs", "=", "{", "0", ":", "{", "}", "}", "\n", "test_runs", "=", "{", "0", ":", "{", "}", "}", "\n", "\n", "if", "config", ".", "same_train_initial_state", ":", "\n", "        ", "train_envs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "            ", "train_envs", ".", "append", "(", "env_func", "(", "randomized_init", "=", "True", ")", ")", "\n", "train_envs", "[", "epoch", "]", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "", "", "else", ":", "\n", "        ", "train_env", "=", "env_func", "(", "randomized_init", "=", "True", ")", "\n", "train_env", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "train_envs", "=", "[", "train_env", "]", "*", "num_epochs", "\n", "#init_test_states = get_random_init_states(env_func, num_test_episodes_per_epoch)", "\n", "", "test_envs", "=", "[", "]", "\n", "if", "config", ".", "same_test_initial_state", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "            ", "test_envs", ".", "append", "(", "env_func", "(", "randomized_init", "=", "True", ")", ")", "\n", "test_envs", "[", "epoch", "]", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "", "", "else", ":", "\n", "        ", "test_env", "=", "env_func", "(", "randomized_init", "=", "True", ")", "\n", "test_env", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "test_envs", "=", "[", "test_env", "]", "*", "num_epochs", "\n", "\n", "\n", "", "for", "episode", "in", "range", "(", "num_train_episodes_per_epoch", ")", ":", "\n", "        ", "run_results", "=", "ctrl", ".", "prior_ctrl", ".", "run", "(", "env", "=", "train_envs", "[", "0", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_train_on_done", ")", "\n", "train_runs", "[", "0", "]", ".", "update", "(", "{", "episode", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "", "for", "test_ep", "in", "range", "(", "num_test_episodes_per_epoch", ")", ":", "\n", "        ", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_envs", "[", "0", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_test_on_done", ")", "\n", "test_runs", "[", "0", "]", ".", "update", "(", "{", "test_ep", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "", "ctrl", ".", "reset", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "num_epochs", ")", ":", "\n", "# only take data from the last episode from the last epoch", "\n", "        ", "if", "config", ".", "rand_data_selection", ":", "\n", "            ", "x_seq", ",", "actions", ",", "x_next_seq", "=", "gather_training_samples", "(", "train_runs", ",", "epoch", "-", "1", ",", "num_samples", ",", "train_envs", "[", "epoch", "-", "1", "]", ".", "np_random", ")", "\n", "", "else", ":", "\n", "            ", "x_seq", ",", "actions", ",", "x_next_seq", "=", "gather_training_samples", "(", "train_runs", ",", "epoch", "-", "1", ",", "num_samples", ")", "\n", "", "train_inputs", ",", "train_outputs", "=", "ctrl", ".", "preprocess_training_data", "(", "x_seq", ",", "actions", ",", "x_next_seq", ")", "\n", "_", "=", "ctrl", ".", "learn", "(", "input_data", "=", "train_inputs", ",", "target_data", "=", "train_outputs", ")", "\n", "\n", "# Test new policy.", "\n", "test_runs", "[", "epoch", "]", "=", "{", "}", "\n", "for", "test_ep", "in", "range", "(", "num_test_episodes_per_epoch", ")", ":", "\n", "            ", "ctrl", ".", "x_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "episode", "]", "[", "'obs'", "]", "[", ":", "ctrl", ".", "T", "+", "1", ",", ":", "]", ".", "T", "\n", "ctrl", ".", "u_prev", "=", "test_runs", "[", "epoch", "-", "1", "]", "[", "episode", "]", "[", "'action'", "]", "[", ":", "ctrl", ".", "T", ",", ":", "]", ".", "T", "\n", "ctrl", ".", "reset", "(", ")", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_envs", "[", "epoch", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_test_on_done", ")", "\n", "test_runs", "[", "epoch", "]", ".", "update", "(", "{", "test_ep", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "# gather training data", "\n", "", "train_runs", "[", "epoch", "]", "=", "{", "}", "\n", "for", "episode", "in", "range", "(", "num_train_episodes_per_epoch", ")", ":", "\n", "            ", "ctrl", ".", "reset", "(", ")", "\n", "ctrl", ".", "x_prev", "=", "train_runs", "[", "epoch", "-", "1", "]", "[", "episode", "]", "[", "'obs'", "]", "[", ":", "ctrl", ".", "T", "+", "1", ",", ":", "]", ".", "T", "\n", "ctrl", ".", "u_prev", "=", "train_runs", "[", "epoch", "-", "1", "]", "[", "episode", "]", "[", "'action'", "]", "[", ":", "ctrl", ".", "T", ",", ":", "]", ".", "T", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "train_envs", "[", "epoch", "]", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_train_on_done", ")", "\n", "train_runs", "[", "epoch", "]", ".", "update", "(", "{", "episode", ":", "munch", ".", "munchify", "(", "run_results", ")", "}", ")", "\n", "\n", "", "lengthscale", ",", "outputscale", ",", "noise", ",", "kern", "=", "ctrl", ".", "gaussian_process", ".", "get_hyperparameters", "(", "as_numpy", "=", "True", ")", "\n", "trajectory", "=", "0", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "'data_%s'", "%", "epoch", ")", ",", "\n", "train_runs", "=", "train_runs", ",", "\n", "test_runs", "=", "test_runs", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "num_train_episodes_per_epoch", "=", "num_train_episodes_per_epoch", ",", "\n", "num_test_episodes_per_epoch", "=", "num_test_episodes_per_epoch", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "trajectory", "=", "trajectory", ",", "\n", "ctrl_freq", "=", "config", ".", "task_config", ".", "ctrl_freq", ",", "\n", "lengthscales", "=", "lengthscale", ",", "\n", "outputscale", "=", "outputscale", ",", "\n", "noise", "=", "noise", ",", "\n", "kern", "=", "kern", ",", "\n", "train_data", "=", "ctrl", ".", "train_data", ",", "\n", "test_data", "=", "ctrl", ".", "test_data", ",", "\n", "data_inputs", "=", "ctrl", ".", "data_inputs", ",", "\n", "data_targets", "=", "ctrl", ".", "data_targets", ")", "\n", "\n", "make_plots", "(", "test_runs", ",", "train_runs", ",", "train_envs", "[", "0", "]", ".", "state_dim", ",", "config", ".", "output_dir", ")", "\n", "\n", "", "fname", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "'figs'", ",", "'avg_rmse_cost_learning_curve.csv'", ")", "\n", "plot_data_eff_from_csv", "(", "fname", ",", "\n", "'Cartpole Data Efficiency'", ")", "\n", "#plot_runs(test_runs, num_epochs)", "\n", "return", "train_runs", ",", "test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_cartpole_control_performance.trajectory_plot_csv": [[32, 54], ["numpy.arange", "numpy.atleast_2d", "matplotlib.subplots", "range", "range", "numpy.vstack", "matplotlib.savefig", "numpy.hstack", "os.path.join", "os.path.join", "numpy.savetxt", "ax[].plot", "ax[].set_ylabel", "ax[].set_xlabel", "ax[].plot", "ax[].set_ylabel", "ax[].set_xlabel", "os.path.join", "os.path.join", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["def", "trajectory_plot_csv", "(", "traj_data", ",", "action", ",", "dir", ")", ":", "\n", "    ", "times", "=", "np", ".", "arange", "(", "traj_data", ".", "shape", "[", "0", "]", ")", "\n", "action", "=", "np", ".", "atleast_2d", "(", "action", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "traj_data", ".", "shape", "[", "1", "]", "+", "action", ".", "shape", "[", "1", "]", ",", "1", ",", "sharex", "=", "'col'", ")", "\n", "for", "i", "in", "range", "(", "traj_data", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "ax", "[", "i", "]", ".", "plot", "(", "traj_data", "[", ":", ",", "i", "]", ")", "\n", "ax", "[", "i", "]", ".", "set_ylabel", "(", "'x%s'", "%", "i", ")", "\n", "ax", "[", "i", "]", ".", "set_xlabel", "(", "'Time (s)'", ")", "\n", "", "i", "+=", "1", "\n", "for", "j", "in", "range", "(", "action", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "ax", "[", "i", "+", "j", "]", ".", "plot", "(", "action", "[", ":", ",", "j", "]", ")", "\n", "ax", "[", "i", "+", "j", "]", ".", "set_ylabel", "(", "'u%s'", "%", "j", ")", "\n", "ax", "[", "i", "+", "j", "]", ".", "set_xlabel", "(", "'Time (s)'", ")", "\n", "", "action", "=", "np", ".", "vstack", "(", "(", "action", ",", "np", ".", "zeros", "(", "(", "1", ",", "action", ".", "shape", "[", "1", "]", ")", ")", ")", ")", "\n", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'trajectory_plot.png'", ")", ")", "\n", "\n", "data", "=", "np", ".", "hstack", "(", "(", "times", "[", ":", ",", "None", "]", ",", "traj_data", ",", "action", ")", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'trajectory_plot.csv'", ")", "\n", "header", "=", "'Time step,x position, x velocity, theta position, theta velocity,action'", "\n", "np", ".", "savetxt", "(", "fname", ",", "data", ",", "delimiter", "=", "','", ",", "header", "=", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_cartpole_control_performance.main": [[56, 99], ["functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "os.path.join", "os.path.join", "numpy.load", "safe_control_gym.utils.registration.make.learn", "functools.partial.", "env_func.action_space.seed", "safe_control_gym.utils.registration.make.run", "numpy.savez", "gpmpc_cartpole_control_performance.trajectory_plot_csv", "matplotlib.show", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_cartpole_control_performance.trajectory_plot_csv"], ["", "def", "main", "(", "config", ")", ":", "\n", "    ", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "task_config", "\n", ")", "\n", "config", ".", "algo_config", ".", "output_dir", "=", "config", ".", "output_dir", "\n", "ctrl", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", "\n", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "#_ = ctrl.learn()", "\n", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "algo_config", ".", "gp_model_path", ",", "'data.npz'", ")", "\n", "data", "=", "np", ".", "load", "(", "data_path", ")", "\n", "data_inputs", "=", "data", "[", "'data_inputs'", "]", "\n", "data_targets", "=", "data", "[", "'data_targets'", "]", "\n", "_", "=", "ctrl", ".", "learn", "(", "input_data", "=", "data_inputs", ",", "\n", "target_data", "=", "data_targets", ")", "\n", "\n", "init_state", "=", "{", "'init_x'", ":", "-", "0.06839607", ",", "\n", "'init_x_dot'", ":", "-", "0.06486605", ",", "\n", "'init_theta'", ":", "-", "0.07790506", ",", "\n", "'init_theta_dot'", ":", "0.03383949", "}", "\n", "\n", "\n", "\n", "test_env", "=", "env_func", "(", "init_state", "=", "init_state", ",", "\n", "randomized_init", "=", "False", ")", "\n", "test_env", ".", "action_space", ".", "seed", "(", "config", ".", "seed", ")", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_env", ")", "\n", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\n", "'data.npz'", ")", ",", "\n", "run_results", "=", "run_results", ",", "\n", "init_state", "=", "init_state", ",", "\n", "ctrl_freq", "=", "config", ".", "task_config", ".", "ctrl_freq", ")", "\n", "\n", "trajectory_plot_csv", "(", "run_results", "[", "'obs'", "]", ",", "run_results", "[", "'action'", "]", ",", "config", ".", "output_dir", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "run_results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.test_robustness_with_fixed_seeds": [[209, 307], ["functools.partial", "collections.defaultdict", "eval_utils.test_robustness_with_fixed_seeds.make_env"], "function", ["None"], ["traj_goal", "=", "env", ".", "X_GOAL", "\n", "if", "env", ".", "QUAD_TYPE", "==", "1", ":", "\n", "        ", "state_names", "=", "[", "\"z\"", ",", "\"z_dot\"", "]", "\n", "state_dim", "=", "2", "\n", "ncols", "=", "2", "\n", "", "elif", "env", ".", "QUAD_TYPE", "==", "2", ":", "\n", "        ", "state_names", "=", "[", "\"x\"", ",", "\"x_dot\"", ",", "\"z\"", ",", "\"z_dot\"", ",", "\"theta\"", ",", "\"theta_dot\"", "]", "\n", "state_dim", "=", "6", "\n", "ncols", "=", "3", "\n", "", "n_rows", "=", "min", "(", "n_episodes", ",", "max_episode_plot", ")", "\n", "# fig = plt.figure()", "\n", "h_size", "=", "ncols", "*", "4", "\n", "v_size", "=", "n_rows", "*", "3", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "h_size", ",", "v_size", ")", ")", "\n", "axes", "=", "fig", ".", "subplots", "(", "nrows", "=", "n_rows", ",", "ncols", "=", "ncols", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_rows", ")", ":", "\n", "        ", "if", "n_rows", "==", "1", ":", "\n", "            ", "axe", "=", "axes", "\n", "", "else", ":", "\n", "            ", "axe", "=", "axes", "[", "i", "]", "\n", "# (T+1, state_dim), (T, act_dim)", "\n", "", "traj", "=", "ep_obs_list", "[", "i", "]", "\n", "\n", "# (T+1 or T, 2)", "\n", "if", "env", ".", "QUAD_TYPE", "==", "1", ":", "\n", "            ", "z_goal", ",", "z_dot_doal", "=", "traj_goal", "[", ":", ",", "0", "]", ",", "traj_goal", "[", ":", ",", "1", "]", "\n", "z", ",", "z_dot", "=", "traj", "[", ":", ",", "0", "]", ",", "traj", "[", ":", ",", "1", "]", "\n", "x", "=", "np", ".", "zeros_like", "(", "z", ")", "\n", "\n", "axe", "[", "0", "]", ".", "plot", "(", "x", "[", "1", ":", "]", ",", "z_goal", ",", "color", "=", "\"green\"", ")", "\n", "# axe[0].scatter(x[-1], z_goal[-1], color=\"green\", s=marker_size)", "\n", "axe", "[", "0", "]", ".", "plot", "(", "x", ",", "z", ",", "color", "=", "\"black\"", ")", "\n", "axe", "[", "0", "]", ".", "scatter", "(", "x", "[", "-", "1", "]", ",", "z", "[", "-", "1", "]", ",", "color", "=", "\"red\"", ",", "s", "=", "marker_size", "//", "2", ")", "\n", "axe", "[", "0", "]", ".", "set_xlabel", "(", "\"x\"", ")", "\n", "axe", "[", "0", "]", ".", "set_ylabel", "(", "\"z\"", ")", "\n", "axe", "[", "0", "]", ".", "set_title", "(", "\"z traj\"", ")", "\n", "\n", "axe", "[", "1", "]", ".", "plot", "(", "x", "[", "1", ":", "]", ",", "z_dot_doal", ",", "color", "=", "\"green\"", ")", "\n", "# axe[1].scatter(x[-1], z_dot_doal[-1], color=\"green\", s=marker_size)", "\n", "axe", "[", "1", "]", ".", "plot", "(", "x", ",", "z_dot", ",", "color", "=", "\"black\"", ")", "\n", "axe", "[", "1", "]", ".", "scatter", "(", "x", "[", "-", "1", "]", ",", "z_dot", "[", "-", "1", "]", ",", "color", "=", "\"red\"", ",", "s", "=", "marker_size", "//", "2", ")", "\n", "axe", "[", "1", "]", ".", "set_xlabel", "(", "\"x_dot\"", ")", "\n", "axe", "[", "1", "]", ".", "set_ylabel", "(", "\"z_dot\"", ")", "\n", "axe", "[", "1", "]", ".", "set_title", "(", "\"z_dot traj\"", ")", "\n", "\n", "", "elif", "env", ".", "QUAD_TYPE", "==", "2", ":", "\n", "            ", "x_goal", ",", "x_dot_goal", ",", "z_goal", ",", "z_dot_doal", "=", "traj_goal", "[", ":", ",", "0", "]", ",", "traj_goal", "[", ":", ",", "1", "]", ",", "traj_goal", "[", ":", ",", "2", "]", ",", "traj_goal", "[", ":", ",", "3", "]", "\n", "x", ",", "x_dot", ",", "z", ",", "z_dot", "=", "traj", "[", ":", ",", "0", "]", ",", "traj", "[", ":", ",", "1", "]", ",", "traj", "[", ":", ",", "2", "]", ",", "traj", "[", ":", ",", "3", "]", "\n", "theta", ",", "theta_dot", "=", "traj", "[", ":", ",", "4", "]", ",", "traj", "[", ":", ",", "5", "]", "\n", "\n", "axe", "[", "0", "]", ".", "plot", "(", "x_goal", ",", "z_goal", ",", "color", "=", "\"green\"", ")", "\n", "# axe[0].scatter(x_goal[-1], z_goal[-1], color=\"green\", s=marker_size)", "\n", "axe", "[", "0", "]", ".", "plot", "(", "x", ",", "z", ",", "color", "=", "\"black\"", ")", "\n", "axe", "[", "0", "]", ".", "scatter", "(", "x", "[", "-", "1", "]", ",", "z", "[", "-", "1", "]", ",", "color", "=", "\"red\"", ",", "s", "=", "marker_size", "//", "2", ")", "\n", "axe", "[", "0", "]", ".", "set_xlabel", "(", "\"x\"", ")", "\n", "axe", "[", "0", "]", ".", "set_ylabel", "(", "\"z\"", ")", "\n", "axe", "[", "0", "]", ".", "set_title", "(", "\"x-z traj\"", ")", "\n", "\n", "axe", "[", "1", "]", ".", "plot", "(", "x_dot_goal", ",", "z_dot_doal", ",", "color", "=", "\"green\"", ")", "\n", "# axe[1].scatter(x_dot_goal[-1], z_dot_doal[-1], color=\"green\", s=marker_size)", "\n", "axe", "[", "1", "]", ".", "plot", "(", "x_dot", ",", "z_dot", ",", "color", "=", "\"black\"", ")", "\n", "axe", "[", "1", "]", ".", "scatter", "(", "x_dot", "[", "-", "1", "]", ",", "z_dot", "[", "-", "1", "]", ",", "color", "=", "\"red\"", ",", "s", "=", "marker_size", "//", "2", ")", "\n", "axe", "[", "1", "]", ".", "set_xlabel", "(", "\"x_dot\"", ")", "\n", "axe", "[", "1", "]", ".", "set_ylabel", "(", "\"z_dot\"", ")", "\n", "axe", "[", "1", "]", ".", "set_title", "(", "\"x_dot-z_dot traj\"", ")", "\n", "\n", "axe", "[", "2", "]", ".", "plot", "(", "theta", ",", "theta_dot", ",", "color", "=", "\"black\"", ")", "\n", "axe", "[", "2", "]", ".", "scatter", "(", "theta", "[", "-", "1", "]", ",", "theta_dot", "[", "-", "1", "]", ",", "color", "=", "\"red\"", ",", "s", "=", "marker_size", "//", "2", ")", "\n", "axe", "[", "2", "]", ".", "set_xlabel", "(", "\"theta\"", ")", "\n", "axe", "[", "2", "]", ".", "set_ylabel", "(", "\"theta_dot\"", ")", "\n", "axe", "[", "2", "]", ".", "set_title", "(", "\"theta-theta_dot traj\"", ")", "\n", "# save fig ", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "output_path", ")", "\n", "plt", ".", "show", "(", ")", "\n", "print", "(", "\"Test trajectories (phase) plotted.\"", ")", "\n", "\n", "\n", "##############################################################################################", "\n", "#############################   Plotting Utils   #############################################", "\n", "##############################################################################################", "\n", "\n", "", "def", "reward_to_cost", "(", "y", ")", ":", "\n", "    ", "\"\"\"Converts RL reward to control cost (for plotting), 250 is total reward/return upper bound.\"\"\"", "\n", "return", "250", "-", "y", "\n", "\n", "\n", "", "def", "load_stats", "(", "legend_dir_specs", ",", "\n", "scalar_names", "=", "[", "]", ",", "\n", "window", "=", "None", ",", "\n", "x_num_max", "=", "None", ",", "\n", "x_rescale_factor", "=", "None", ")", ":", "\n", "    ", "\"\"\"Gets all processed statistics for multiple scalars.\"\"\"", "\n", "scalar_stats", "=", "{", "}", "\n", "for", "scalar_name", "in", "scalar_names", ":", "\n", "# Get all stats.", "\n", "        ", "stats", "=", "defaultdict", "(", "list", ")", "\n", "for", "l", ",", "dirs", "in", "legend_dir_specs", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.load_eval_stats": [[493, 556], ["legend_map.items", "os.path.join", "os.path.join", "glob.glob", "numpy.asarray", "numpy.asarray", "sorted", "list", "algo_data.append", "float", "sorted.append", "zip", "numpy.mean", "numpy.std", "numpy.median", "numpy.quantile", "numpy.min", "numpy.max", "data.items", "os.listdir", "os.listdir", "open", "pickle.load", "f_name.replace", "len", "len", "scalar_postprocess_func", "np.asarray.mean", "np.asarray.mean", "np.asarray.mean", "np.asarray.mean", "np.asarray.mean", "np.asarray.mean", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load"], []], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval_utils.save_stats_to_excel": [[558, 581], ["sorted", "data.keys", "numpy.mean().transpose", "np.mean().transpose.tolist", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "pandas.read_csv", "os.path.join", "os.path.join", "pd.read_csv.to_excel", "os.path.dirname", "os.path.dirname", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "numpy.mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_cartpole_input_white_noise_robustness.main": [[33, 87], ["functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "os.path.join", "os.path.join", "numpy.load", "safe_control_gym.utils.registration.make.learn", "numpy.array", "range", "gpmpc_plotting_utils.plot_robustness", "gpmpc_plotting_utils.plot_robustness_rmse", "gpmpc_plotting_utils.plot_all_robustness_runs", "gpmpc_plotting_utils.table_csv", "os.path.join", "os.path.join", "gpmpc_plotting_utils.plot_robustness_from_csv", "munch.munchify", "range", "numpy.savez", "functools.partial.", "safe_control_gym.utils.registration.make.run", "env_func.close", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval.plot_robustness", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_robustness_rmse", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_all_robustness_runs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.table_csv", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_robustness_from_csv", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "task_config", "\n", ")", "\n", "config", ".", "algo_config", ".", "output_dir", "=", "config", ".", "output_dir", "\n", "ctrl", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", "\n", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "algo_config", ".", "gp_model_path", ",", "'data.npz'", ")", "\n", "data", "=", "np", ".", "load", "(", "data_path", ")", "\n", "data_inputs", "=", "data", "[", "'data_inputs'", "]", "\n", "data_targets", "=", "data", "[", "'data_targets'", "]", "\n", "_", "=", "ctrl", ".", "learn", "(", "input_data", "=", "data_inputs", ",", "\n", "target_data", "=", "data_targets", ")", "\n", "\n", "num_eval_episodes", "=", "config", ".", "num_eval_episodes", "\n", "std", "=", "np", ".", "array", "(", "config", ".", "std", ")", "\n", "\n", "test_results", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "std", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "inertial_prop", "=", "{", "}", "\n", "white_noise_disturbance", "=", "{", "'action'", ":", "[", "{", "'disturbance_func'", ":", "'white_noise'", ",", "'std'", ":", "std", "[", "i", "]", "}", "]", "}", "\n", "white_noise_disturbance", "=", "munch", ".", "munchify", "(", "white_noise_disturbance", ")", "\n", "seed", "=", "config", ".", "seed", "\n", "test_results", "[", "i", "]", "=", "{", "}", "\n", "for", "episode", "in", "range", "(", "num_eval_episodes", ")", ":", "\n", "            ", "test_env", "=", "env_func", "(", "seed", "=", "seed", ",", "\n", "disturbances", "=", "white_noise_disturbance", ")", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_env", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_test_on_done", ")", "\n", "test_results", "[", "i", "]", "[", "episode", "]", "=", "run_results", "\n", "seed", "=", "config", ".", "seed", "+", "episode", "+", "1", "\n", "test_env", ".", "close", "(", ")", "\n", "\n", "", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\n", "'data.npz'", ")", ",", "\n", "test_results", "=", "test_results", ",", "\n", "coeff", "=", "std", ",", "\n", "ctrl_freq", "=", "config", ".", "task_config", ".", "ctrl_freq", ")", "\n", "\n", "", "label", "=", "'White Noise'", "\n", "plot_robustness", "(", "test_results", ",", "std", ",", "label", ",", "config", ".", "output_dir", ")", "\n", "plot_robustness_rmse", "(", "test_results", ",", "std", ",", "label", ",", "config", ".", "output_dir", ")", "\n", "plot_all_robustness_runs", "(", "test_results", ",", "std", ",", "config", ".", "output_dir", ")", "\n", "table_csv", "(", "test_results", ",", "config", ".", "output_dir", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "'rmse_robust_plot.csv'", ")", "\n", "plot_robustness_from_csv", "(", "fname", ",", "'Cartpole Input Noise Robustness'", ",", "'Input Noise std'", ")", "\n", "return", "test_results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_cartpole_pole_length_robustness.main": [[33, 95], ["functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "os.path.join", "os.path.join", "numpy.load", "safe_control_gym.utils.registration.make.learn", "numpy.array", "range", "gpmpc_plotting_utils.plot_robustness", "gpmpc_plotting_utils.plot_robustness_rmse", "gpmpc_plotting_utils.plot_all_robustness_runs", "gpmpc_plotting_utils.table_csv", "os.path.join", "os.path.join", "gpmpc_plotting_utils.plot_robustness_from_csv", "range", "numpy.savez", "print", "print", "functools.partial.", "safe_control_gym.utils.registration.make.run", "env_func.close", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.eval.plot_robustness", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_robustness_rmse", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_all_robustness_runs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.table_csv", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.gpmpc_plotting_utils.plot_robustness_from_csv", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "task_config", "\n", ")", "\n", "config", ".", "algo_config", ".", "output_dir", "=", "config", ".", "output_dir", "\n", "ctrl", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", "\n", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "#_ = ctrl.learn()", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "algo_config", ".", "gp_model_path", ",", "'data.npz'", ")", "\n", "data", "=", "np", ".", "load", "(", "data_path", ")", "\n", "data_inputs", "=", "data", "[", "'data_inputs'", "]", "\n", "data_targets", "=", "data", "[", "'data_targets'", "]", "\n", "_", "=", "ctrl", ".", "learn", "(", "input_data", "=", "data_inputs", ",", "\n", "target_data", "=", "data_targets", ")", "\n", "\n", "num_eval_episodes", "=", "config", ".", "num_eval_episodes", "\n", "coeff", "=", "np", ".", "array", "(", "config", ".", "coeff", ")", "\n", "cart_masses", "=", "1.0", "*", "coeff", "\n", "pole_masses", "=", "0.1", "*", "coeff", "\n", "pole_lengths", "=", "0.5", "*", "coeff", "\n", "parameter_tests", "=", "{", "'cart_mass'", ":", "cart_masses", ",", "\n", "'pole_mass'", ":", "pole_masses", ",", "\n", "'pole_length'", ":", "pole_lengths", "}", "\n", "\n", "test_results", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "coeff", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "inertial_prop", "=", "{", "}", "\n", "seed", "=", "config", ".", "seed", "\n", "for", "parameter", "in", "config", ".", "parameters_to_vary", ":", "\n", "            ", "inertial_prop", "[", "parameter", "]", "=", "parameter_tests", "[", "parameter", "]", "[", "i", "]", "\n", "", "test_results", "[", "i", "]", "=", "{", "}", "\n", "for", "episode", "in", "range", "(", "num_eval_episodes", ")", ":", "\n", "            ", "print", "(", "\"EPOCH: %s\"", "%", "i", ")", "\n", "print", "(", "\"EPIOSDE: %s\"", "%", "episode", ")", "\n", "test_env", "=", "env_func", "(", "inertial_prop", "=", "inertial_prop", ",", "seed", "=", "seed", ")", "\n", "run_results", "=", "ctrl", ".", "run", "(", "env", "=", "test_env", ",", "\n", "terminate_run_on_done", "=", "config", ".", "terminate_test_on_done", ")", "\n", "test_results", "[", "i", "]", "[", "episode", "]", "=", "run_results", "\n", "seed", "=", "config", ".", "seed", "+", "episode", "+", "1", "\n", "test_env", ".", "close", "(", ")", "\n", "\n", "", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\n", "'data.npz'", ")", ",", "\n", "test_results", "=", "test_results", ",", "\n", "coeff", "=", "parameter_tests", "[", "'pole_length'", "]", ",", "\n", "ctrl_freq", "=", "config", ".", "task_config", ".", "ctrl_freq", ")", "\n", "\n", "", "label", "=", "'Pole Length'", "\n", "plot_robustness", "(", "test_results", ",", "parameter_tests", "[", "'pole_length'", "]", ",", "label", ",", "config", ".", "output_dir", ")", "\n", "plot_robustness_rmse", "(", "test_results", ",", "parameter_tests", "[", "'pole_length'", "]", ",", "label", ",", "config", ".", "output_dir", ")", "\n", "plot_all_robustness_runs", "(", "test_results", ",", "parameter_tests", "[", "'pole_length'", "]", ",", "config", ".", "output_dir", ")", "\n", "table_csv", "(", "test_results", ",", "config", ".", "output_dir", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "'rmse_robust_plot.csv'", ")", "\n", "plot_robustness_from_csv", "(", "fname", ",", "'Cartpole Pole Length Robustness'", ",", "'l (m)'", ")", "\n", "return", "test_results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.controllers.base_controller.BaseController.__init__": [[11, 42], ["kwargs.items", "torch.cuda.is_available"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "env_func", ",", "\n", "training", "=", "True", ",", "\n", "checkpoint_path", "=", "\"temp/model_latest.pt\"", ",", "\n", "output_dir", "=", "\"temp\"", ",", "\n", "use_gpu", "=", "False", ",", "\n", "seed", "=", "0", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Initializes controller agent.\n\n        Args:\n            env_func (callable): function to instantiate task/env.\n            training (bool): training flag.\n            checkpoint_path (str): file to save trained model & experiment state.\n            output_dir (str): folder to write outputs.\n            use_gpu (bool): False (use cpu) True (use cuda).\n            seed (int): random seed.\n\n        \"\"\"", "\n", "# Base args.", "\n", "self", ".", "env_func", "=", "env_func", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "checkpoint_path", "=", "checkpoint_path", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "use_gpu", "=", "use_gpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "device", "=", "'cpu'", "if", "self", ".", "use_gpu", "==", "False", "else", "'cuda'", "\n", "self", ".", "seed", "=", "seed", "\n", "# Algorithm specific args.", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.controllers.base_controller.BaseController.reset": [[43, 48], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do initializations for training or evaluation.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.controllers.base_controller.BaseController.close": [[49, 54], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shuts down and cleans up lingering resources.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.controllers.base_controller.BaseController.save": [[55, 62], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "\n", "path", "\n", ")", ":", "\n", "        ", "\"\"\"Saves model params and experiment state to checkpoint path.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.controllers.base_controller.BaseController.load": [[63, 70], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "\n", "path", "\n", ")", ":", "\n", "        ", "\"\"\"Restores model and experiment given checkpoint path.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.controllers.base_controller.BaseController.learn": [[71, 79], ["None"], "methods", ["None"], ["", "def", "learn", "(", "self", ",", "\n", "env", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Performs learning (pre-training, training, fine-tuning, etc).\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.controllers.base_controller.BaseController.run": [[80, 91], ["None"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "\n", "env", "=", "None", ",", "\n", "render", "=", "False", ",", "\n", "n_episodes", "=", "10", ",", "\n", "verbose", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Runs evaluation with current policy.\n\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.pid.pid.PID.__init__": [[23, 66], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "safe_control_gym.controllers.base_controller.BaseController.__init__", "float", "float", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "float", "float", "float", "float", "numpy.array", "pid.PID.reset", "float"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["def", "__init__", "(", "self", ",", "\n", "env_func", "=", "None", ",", "\n", "g", "=", "9.8", ",", "\n", "KF", "=", "3.16e-10", ",", "\n", "KM", "=", "7.94e-12", ",", "\n", "P_COEFF_FOR", "=", "np", ".", "array", "(", "[", ".4", ",", ".4", ",", "1.25", "]", ")", ",", "\n", "I_COEFF_FOR", "=", "np", ".", "array", "(", "[", ".05", ",", ".05", ",", ".05", "]", ")", ",", "\n", "D_COEFF_FOR", "=", "np", ".", "array", "(", "[", ".2", ",", ".2", ",", ".5", "]", ")", ",", "\n", "P_COEFF_TOR", "=", "np", ".", "array", "(", "[", "70000.", ",", "70000.", ",", "60000.", "]", ")", ",", "\n", "I_COEFF_TOR", "=", "np", ".", "array", "(", "[", ".0", ",", ".0", ",", "500.", "]", ")", ",", "\n", "D_COEFF_TOR", "=", "np", ".", "array", "(", "[", "20000.", ",", "20000.", ",", "12000.", "]", ")", ",", "\n", "PWM2RPM_SCALE", "=", "0.2685", ",", "\n", "PWM2RPM_CONST", "=", "4070.3", ",", "\n", "MIN_PWM", "=", "20000", ",", "\n", "MAX_PWM", "=", "65535", ",", "\n", "MIXER_MATRIX", "=", "np", ".", "array", "(", "[", "[", ".5", ",", "-", ".5", ",", "-", "1", "]", ",", "[", ".5", ",", ".5", ",", "1", "]", ",", "[", "-", ".5", ",", ".5", ",", "-", "1", "]", ",", "[", "-", ".5", ",", "-", ".5", ",", "1", "]", "]", ")", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Common control classes __init__ method.\n\n        Args\n            g (float, optional): The gravitational acceleration in m/s^2.\n\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "env_func", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "GRAVITY", "=", "float", "(", "g", ")", "*", "0.027", "\n", "self", ".", "KF", "=", "float", "(", "KF", ")", "\n", "self", ".", "KM", "=", "float", "(", "KM", ")", "\n", "self", ".", "P_COEFF_FOR", "=", "np", ".", "array", "(", "P_COEFF_FOR", ")", "\n", "self", ".", "I_COEFF_FOR", "=", "np", ".", "array", "(", "I_COEFF_FOR", ")", "\n", "self", ".", "D_COEFF_FOR", "=", "np", ".", "array", "(", "D_COEFF_FOR", ")", "\n", "self", ".", "P_COEFF_TOR", "=", "np", ".", "array", "(", "P_COEFF_TOR", ")", "\n", "self", ".", "I_COEFF_TOR", "=", "np", ".", "array", "(", "I_COEFF_TOR", ")", "\n", "self", ".", "D_COEFF_TOR", "=", "np", ".", "array", "(", "D_COEFF_TOR", ")", "\n", "self", ".", "PWM2RPM_SCALE", "=", "float", "(", "PWM2RPM_SCALE", ")", "\n", "self", ".", "PWM2RPM_CONST", "=", "float", "(", "PWM2RPM_CONST", ")", "\n", "self", ".", "MIN_PWM", "=", "float", "(", "MIN_PWM", ")", "\n", "self", ".", "MAX_PWM", "=", "float", "(", "MAX_PWM", ")", "\n", "self", ".", "MIXER_MATRIX", "=", "np", ".", "array", "(", "MIXER_MATRIX", ")", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.pid.pid.PID.run": [[67, 155], ["numpy.zeros", "range", "pid.PID.close_results_dict", "pid.PID.env.step", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "pid.PID._dslPIDPositionControl", "pid.PID._dslPIDAttitudeControl", "pybullet.getEulerFromQuaternion", "numpy.array", "pid.PID.results_dict[].append", "pid.PID.results_dict[].append", "pid.PID.results_dict[].append", "pid.PID.results_dict[].append", "pid.PID.results_dict[].append", "pybullet.getQuaternionFromEuler", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.close_results_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.pid.pid.PID._dslPIDPositionControl", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.pid.pid.PID._dslPIDAttitudeControl"], ["", "def", "run", "(", "self", ",", "\n", "iterations", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Computes the PID control action (as RPMs) for a single drone.\n\n        This methods sequentially calls `_dslPIDPositionControl()` and `_dslPIDAttitudeControl()`.\n        Parameter `cur_ang_vel` is unused.\n\n        Args:\n            control_timestep (float): The time step at which control is computed.\n            cur_pos (ndarray): (3,1)-shaped array of floats containing the current position.\n            cur_quat (ndarray): (4,1)-shaped array of floats containing the current orientation as a quaternion.\n            cur_vel (ndarray): (3,1)-shaped array of floats containing the current velocity.\n            cur_ang_vel (ndarray): (3,1)-shaped array of floats containing the current angular velocity.\n            target_pos (ndarray): (3,1)-shaped array of floats containing the desired position.\n            target_rpy (ndarray, optional): (3,1)-shaped array of floats containing the desired orientation as roll, pitch, yaw.\n            target_vel (ndarray, optional): (3,1)-shaped array of floats containing the desired velocity.\n            target_rpy_rates (ndarray, optional): (3,1)-shaped array of floats containing the desired roll, pitch, and yaw rates.\n\n        Returns:\n            ndarray: (4,1)-shaped array of integers containing the RPMs to apply to each of the 4 motors.\n            ndarray: (3,1)-shaped array of floats containing the current XYZ position error.\n            float: The current yaw error.\n\n        \"\"\"", "\n", "action", "=", "np", ".", "zeros", "(", "2", ")", "\n", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "# Step the environment and print all returned information.", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "cur_pos", "=", "np", ".", "array", "(", "[", "obs", "[", "0", "]", ",", "0", ",", "obs", "[", "2", "]", "]", ")", "\n", "cur_quat", "=", "np", ".", "array", "(", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "obs", "[", "4", "]", ",", "0", "]", ")", ")", "\n", "cur_vel", "=", "np", ".", "array", "(", "[", "obs", "[", "1", "]", ",", "0", ",", "obs", "[", "3", "]", "]", ")", "\n", "cur_ang_vel", "=", "np", ".", "array", "(", "[", "0", ",", "obs", "[", "4", "]", ",", "0", "]", ")", "\n", "\n", "if", "self", ".", "env", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "                ", "target_pos", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "reference", "[", "i", "-", "1", ",", "0", "]", ",", "\n", "0", ",", "\n", "self", ".", "reference", "[", "i", "-", "1", ",", "2", "]", "\n", "]", ")", "\n", "target_vel", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "reference", "[", "i", "-", "1", ",", "1", "]", ",", "\n", "0", ",", "\n", "self", ".", "reference", "[", "i", "-", "1", ",", "3", "]", "\n", "]", ")", "\n", "", "elif", "self", ".", "env", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "                ", "target_pos", "=", "np", ".", "array", "(", "[", "self", ".", "reference", "[", "0", "]", ",", "0", ",", "self", ".", "reference", "[", "2", "]", "]", ")", "\n", "target_vel", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "target_rpy", "=", "np", ".", "zeros", "(", "3", ")", "\n", "target_rpy_rates", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n", "# Compute the next action.", "\n", "self", ".", "control_counter", "+=", "1", "\n", "thrust", ",", "computed_target_rpy", ",", "pos_e", "=", "self", ".", "_dslPIDPositionControl", "(", "self", ".", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "cur_vel", ",", "\n", "target_pos", ",", "\n", "target_rpy", ",", "\n", "target_vel", "\n", ")", "\n", "rpm", "=", "self", ".", "_dslPIDAttitudeControl", "(", "self", ".", "control_timestep", ",", "\n", "thrust", ",", "\n", "cur_quat", ",", "\n", "computed_target_rpy", ",", "\n", "target_rpy_rates", "\n", ")", "\n", "cur_rpy", "=", "p", ".", "getEulerFromQuaternion", "(", "cur_quat", ")", "\n", "\n", "action", "=", "rpm", "\n", "action", "=", "self", ".", "KF", "*", "action", "**", "2", "\n", "action", "=", "np", ".", "array", "(", "[", "action", "[", "0", "]", "+", "action", "[", "3", "]", ",", "action", "[", "1", "]", "+", "action", "[", "2", "]", "]", ")", "\n", "\n", "self", ".", "results_dict", "[", "'obs'", "]", ".", "append", "(", "obs", ")", "\n", "self", ".", "results_dict", "[", "'reward'", "]", ".", "append", "(", "reward", ")", "\n", "self", ".", "results_dict", "[", "'done'", "]", ".", "append", "(", "done", ")", "\n", "self", ".", "results_dict", "[", "'info'", "]", ".", "append", "(", "info", ")", "\n", "self", ".", "results_dict", "[", "'action'", "]", ".", "append", "(", "action", ")", "\n", "\n", "", "self", ".", "close_results_dict", "(", ")", "\n", "\n", "return", "self", ".", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.pid.pid.PID._dslPIDPositionControl": [[156, 208], ["numpy.array().reshape", "numpy.clip", "numpy.clip", "max", "numpy.array", "numpy.cross", "numpy.vstack().transpose", "scipy.spatial.transform.Rotation.from_matrix().as_euler", "numpy.any", "numpy.array", "numpy.dot", "numpy.linalg.norm", "numpy.cross", "numpy.linalg.norm", "print", "numpy.array", "numpy.multiply", "math.sqrt", "math.cos", "math.sin", "numpy.cross", "numpy.vstack", "scipy.spatial.transform.Rotation.from_matrix", "numpy.abs", "pybullet.getMatrixFromQuaternion", "numpy.multiply", "numpy.multiply"], "methods", ["None"], ["", "def", "_dslPIDPositionControl", "(", "self", ",", "\n", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "cur_vel", ",", "\n", "target_pos", ",", "\n", "target_rpy", ",", "\n", "target_vel", "\n", ")", ":", "\n", "        ", "\"\"\"DSL's CF2.x PID position control.\n\n        Args:\n            control_timestep (float): The time step at which control is computed.\n            cur_pos (ndarray): (3,1)-shaped array of floats containing the current position.\n            cur_quat (ndarray): (4,1)-shaped array of floats containing the current orientation as a quaternion.\n            cur_vel (ndarray): (3,1)-shaped array of floats containing the current velocity.\n            target_pos (ndarray): (3,1)-shaped array of floats containing the desired position.\n            target_rpy (ndarray): (3,1)-shaped array of floats containing the desired orientation as roll, pitch, yaw.\n            target_vel (ndarray): (3,1)-shaped array of floats containing the desired velocity.\n\n        Returns:\n            float: The target thrust along the drone z-axis.\n            ndarray: (3,1)-shaped array of floats containing the target roll, pitch, and yaw.\n            float: The current position error.\n\n        \"\"\"", "\n", "cur_rotation", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "cur_quat", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "pos_e", "=", "target_pos", "-", "cur_pos", "\n", "vel_e", "=", "target_vel", "-", "cur_vel", "\n", "self", ".", "integral_pos_e", "=", "self", ".", "integral_pos_e", "+", "pos_e", "*", "control_timestep", "\n", "self", ".", "integral_pos_e", "=", "np", ".", "clip", "(", "self", ".", "integral_pos_e", ",", "-", "2.", ",", "2.", ")", "\n", "self", ".", "integral_pos_e", "[", "2", "]", "=", "np", ".", "clip", "(", "self", ".", "integral_pos_e", "[", "2", "]", ",", "-", "0.15", ",", ".15", ")", "\n", "\n", "# PID target thrust.", "\n", "target_thrust", "=", "np", ".", "multiply", "(", "self", ".", "P_COEFF_FOR", ",", "pos_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "I_COEFF_FOR", ",", "self", ".", "integral_pos_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "D_COEFF_FOR", ",", "vel_e", ")", "+", "np", ".", "array", "(", "[", "0", ",", "0", ",", "self", ".", "GRAVITY", "]", ")", "\n", "scalar_thrust", "=", "max", "(", "0.", ",", "np", ".", "dot", "(", "target_thrust", ",", "cur_rotation", "[", ":", ",", "2", "]", ")", ")", "\n", "thrust", "=", "(", "math", ".", "sqrt", "(", "scalar_thrust", "/", "(", "4", "*", "self", ".", "KF", ")", ")", "-", "self", ".", "PWM2RPM_CONST", ")", "/", "self", ".", "PWM2RPM_SCALE", "\n", "target_z_ax", "=", "target_thrust", "/", "np", ".", "linalg", ".", "norm", "(", "target_thrust", ")", "\n", "target_x_c", "=", "np", ".", "array", "(", "[", "math", ".", "cos", "(", "target_rpy", "[", "2", "]", ")", ",", "math", ".", "sin", "(", "target_rpy", "[", "2", "]", ")", ",", "0", "]", ")", "\n", "target_y_ax", "=", "np", ".", "cross", "(", "target_z_ax", ",", "target_x_c", ")", "/", "np", ".", "linalg", ".", "norm", "(", "np", ".", "cross", "(", "target_z_ax", ",", "target_x_c", ")", ")", "\n", "target_x_ax", "=", "np", ".", "cross", "(", "target_y_ax", ",", "target_z_ax", ")", "\n", "target_rotation", "=", "(", "np", ".", "vstack", "(", "[", "target_x_ax", ",", "target_y_ax", ",", "target_z_ax", "]", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# Target rotation.", "\n", "target_euler", "=", "(", "Rotation", ".", "from_matrix", "(", "target_rotation", ")", ")", ".", "as_euler", "(", "'XYZ'", ",", "degrees", "=", "False", ")", "\n", "\n", "if", "np", ".", "any", "(", "np", ".", "abs", "(", "target_euler", ")", ">", "math", ".", "pi", ")", ":", "\n", "            ", "print", "(", "\"\\n[ERROR] ctrl it\"", ",", "self", ".", "control_counter", ",", "\"in Control._dslPIDPositionControl(), values outside range [-pi,pi]\"", ")", "\n", "\n", "", "return", "thrust", ",", "target_euler", ",", "pos_e", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.pid.pid.PID._dslPIDAttitudeControl": [[209, 251], ["numpy.array().reshape", "numpy.array", "scipy.spatial.transform.Rotation.from_euler().as_quat", "scipy.spatial.transform.Rotation.from_quat().as_matrix", "numpy.array", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "pybullet.getEulerFromQuaternion", "numpy.dot", "numpy.dot", "numpy.multiply", "numpy.dot", "numpy.array", "scipy.spatial.transform.Rotation.from_euler", "scipy.spatial.transform.Rotation.from_quat", "scipy.spatial.transform.Rotation.from_quat().as_matrix.transpose", "numpy.array().reshape.transpose", "numpy.multiply", "pybullet.getMatrixFromQuaternion", "numpy.multiply"], "methods", ["None"], ["", "def", "_dslPIDAttitudeControl", "(", "self", ",", "\n", "control_timestep", ",", "\n", "thrust", ",", "\n", "cur_quat", ",", "\n", "target_euler", ",", "\n", "target_rpy_rates", "\n", ")", ":", "\n", "        ", "\"\"\"DSL's CF2.x PID attitude control.\n\n        Args:\n            control_timestep (float): The time step at which control is computed.\n            thrust (float): The target thrust along the drone z-axis.\n            cur_quat (ndarray): (4,1)-shaped array of floats containing the current orientation as a quaternion.\n            target_euler (ndarray): (3,1)-shaped array of floats containing the computed target Euler angles.\n            target_rpy_rates (ndarray): (3,1)-shaped array of floats containing the desired roll, pitch, and yaw rates.\n\n        Returns:\n            ndarray: (4,1)-shaped array of integers containing the RPMs to apply to each of the 4 motors.\n\n        \"\"\"", "\n", "cur_rotation", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "cur_quat", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "cur_rpy", "=", "np", ".", "array", "(", "p", ".", "getEulerFromQuaternion", "(", "cur_quat", ")", ")", "\n", "target_quat", "=", "(", "Rotation", ".", "from_euler", "(", "'XYZ'", ",", "target_euler", ",", "degrees", "=", "False", ")", ")", ".", "as_quat", "(", ")", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "target_quat", "\n", "target_rotation", "=", "(", "Rotation", ".", "from_quat", "(", "[", "w", ",", "x", ",", "y", ",", "z", "]", ")", ")", ".", "as_matrix", "(", ")", "\n", "rot_matrix_e", "=", "np", ".", "dot", "(", "(", "target_rotation", ".", "transpose", "(", ")", ")", ",", "cur_rotation", ")", "-", "np", ".", "dot", "(", "cur_rotation", ".", "transpose", "(", ")", ",", "target_rotation", ")", "\n", "rot_e", "=", "np", ".", "array", "(", "[", "rot_matrix_e", "[", "2", ",", "1", "]", ",", "rot_matrix_e", "[", "0", ",", "2", "]", ",", "rot_matrix_e", "[", "1", ",", "0", "]", "]", ")", "\n", "rpy_rates_e", "=", "target_rpy_rates", "-", "(", "cur_rpy", "-", "self", ".", "last_rpy", ")", "/", "control_timestep", "\n", "self", ".", "last_rpy", "=", "cur_rpy", "\n", "self", ".", "integral_rpy_e", "=", "self", ".", "integral_rpy_e", "-", "rot_e", "*", "control_timestep", "\n", "self", ".", "integral_rpy_e", "=", "np", ".", "clip", "(", "self", ".", "integral_rpy_e", ",", "-", "1500.", ",", "1500.", ")", "\n", "self", ".", "integral_rpy_e", "[", "0", ":", "2", "]", "=", "np", ".", "clip", "(", "self", ".", "integral_rpy_e", "[", "0", ":", "2", "]", ",", "-", "1.", ",", "1.", ")", "\n", "\n", "# PID target torques.", "\n", "target_torques", "=", "-", "np", ".", "multiply", "(", "self", ".", "P_COEFF_TOR", ",", "rot_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "D_COEFF_TOR", ",", "rpy_rates_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "I_COEFF_TOR", ",", "self", ".", "integral_rpy_e", ")", "\n", "target_torques", "=", "np", ".", "clip", "(", "target_torques", ",", "-", "3200", ",", "3200", ")", "\n", "pwm", "=", "thrust", "+", "np", ".", "dot", "(", "self", ".", "MIXER_MATRIX", ",", "target_torques", ")", "\n", "pwm", "=", "np", ".", "clip", "(", "pwm", ",", "self", ".", "MIN_PWM", ",", "self", ".", "MAX_PWM", ")", "\n", "\n", "return", "self", ".", "PWM2RPM_SCALE", "*", "pwm", "+", "self", ".", "PWM2RPM_CONST", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.pid.pid.PID.close": [[252, 257], ["pid.PID.env.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Cleans up resources.\n\n        \"\"\"", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.pid.pid.PID.close_results_dict": [[258, 269], ["numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "munch.munchify"], "methods", ["None"], ["", "def", "close_results_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Cleanup the rtesults dict and munchify it.\n\n        \"\"\"", "\n", "self", ".", "results_dict", "[", "'obs'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'obs'", "]", ")", "\n", "self", ".", "results_dict", "[", "'reward'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'reward'", "]", ")", "\n", "self", ".", "results_dict", "[", "'done'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'done'", "]", ")", "\n", "self", ".", "results_dict", "[", "'info'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'info'", "]", ")", "\n", "self", ".", "results_dict", "[", "'action'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'action'", "]", ")", "\n", "\n", "self", ".", "results_dict", "=", "munchify", "(", "self", ".", "results_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.pid.pid.PID.reset": [[270, 297], ["pid.PID.env_func", "pid.PID.env.reset", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the control classes.\n\n        The previous step's and integral errors for both position and attitude are set to zero.\n\n        \"\"\"", "\n", "self", ".", "env", "=", "self", ".", "env_func", "(", ")", "\n", "initial_obs", ",", "initial_info", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "control_timestep", "=", "self", ".", "env", ".", "CTRL_TIMESTEP", "\n", "self", ".", "reference", "=", "initial_info", "[", "'x_reference'", "]", "\n", "\n", "self", ".", "control_counter", "=", "0", "\n", "\n", "# Clear the last roll, pitch, and yaw.", "\n", "self", ".", "last_rpy", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n", "# Clear PID control variables.", "\n", "self", ".", "last_pos_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "integral_pos_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "last_rpy_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "integral_rpy_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n", "self", ".", "results_dict", "=", "{", "'obs'", ":", "[", "]", ",", "\n", "'reward'", ":", "[", "]", ",", "\n", "'done'", ":", "[", "]", ",", "\n", "'info'", ":", "[", "]", ",", "\n", "'action'", ":", "[", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.pid.pid_experiment.run": [[20, 76], ["safe_control_gym.utils.configuration.ConfigFactory", "safe_control_gym.utils.configuration.ConfigFactory.merge", "int", "time.time", "functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.run", "safe_control_gym.utils.registration.make.close", "range", "print", "min", "range", "print", "print", "time.time", "pybullet.addUserDebugLine"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.merge", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["def", "run", "(", "gui", "=", "None", ",", "max_steps", "=", "None", ")", ":", "\n", "    ", "\"\"\"The main function creating, running, and closing an environment.\n\n    \"\"\"", "\n", "\n", "# Create an environment", "\n", "CONFIG_FACTORY", "=", "ConfigFactory", "(", ")", "\n", "config", "=", "CONFIG_FACTORY", ".", "merge", "(", ")", "\n", "\n", "# Set iterations and episode counter.", "\n", "ITERATIONS", "=", "int", "(", "config", ".", "quadrotor_config", "[", "'episode_len_sec'", "]", "*", "config", ".", "quadrotor_config", "[", "'ctrl_freq'", "]", ")", "\n", "\n", "# Use function arguments for workflow testing", "\n", "if", "gui", "is", "not", "None", ":", "\n", "        ", "config", ".", "quadrotor_config", "[", "'gui'", "]", "=", "gui", "\n", "", "if", "max_steps", "is", "not", "None", ":", "\n", "        ", "ITERATIONS", "=", "min", "(", "ITERATIONS", ",", "max_steps", ")", "\n", "\n", "# Start a timer.", "\n", "", "START", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Create controller.", "\n", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "**", "config", ".", "quadrotor_config", "\n", ")", "\n", "ctrl", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", ")", "\n", "\n", "if", "config", ".", "quadrotor_config", ".", "task", "==", "Task", ".", "TRAJ_TRACKING", "and", "config", ".", "quadrotor_config", "[", "'gui'", "]", ":", "\n", "        ", "reference_traj", "=", "ctrl", ".", "reference", "\n", "\n", "# Plot trajectory.", "\n", "for", "i", "in", "range", "(", "0", ",", "reference_traj", ".", "shape", "[", "0", "]", ",", "10", ")", ":", "\n", "            ", "p", ".", "addUserDebugLine", "(", "lineFromXYZ", "=", "[", "reference_traj", "[", "i", "-", "10", ",", "0", "]", ",", "0", ",", "reference_traj", "[", "i", "-", "10", ",", "2", "]", "]", ",", "\n", "lineToXYZ", "=", "[", "reference_traj", "[", "i", ",", "0", "]", ",", "0", ",", "reference_traj", "[", "i", ",", "2", "]", "]", ",", "\n", "lineColorRGB", "=", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "physicsClientId", "=", "ctrl", ".", "env", ".", "PYB_CLIENT", ")", "\n", "\n", "# Run the experiment.", "\n", "", "", "results", "=", "ctrl", ".", "run", "(", "iterations", "=", "ITERATIONS", ")", "\n", "ctrl", ".", "close", "(", ")", "\n", "\n", "# Plot the experiment.", "\n", "for", "i", "in", "range", "(", "ITERATIONS", ")", ":", "\n", "# Step the environment and print all returned information.", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", ",", "action", "=", "results", "[", "'obs'", "]", "[", "i", "]", ",", "results", "[", "'reward'", "]", "[", "i", "]", ",", "results", "[", "'done'", "]", "[", "i", "]", ",", "results", "[", "'info'", "]", "[", "i", "]", ",", "results", "[", "'action'", "]", "[", "i", "]", "\n", "\n", "# Print the last action and the information returned at each step.", "\n", "print", "(", "i", ",", "'-th step.'", ")", "\n", "print", "(", "action", ",", "'\\n'", ",", "obs", ",", "'\\n'", ",", "reward", ",", "'\\n'", ",", "done", ",", "'\\n'", ",", "info", ",", "'\\n'", ")", "\n", "\n", "", "elapsed_sec", "=", "time", ".", "time", "(", ")", "-", "START", "\n", "print", "(", "\"\\n{:d} iterations (@{:d}Hz) and {:d} episodes in {:.2f} seconds, i.e. {:.2f} steps/sec for a {:.2f}x speedup.\\n\"", "\n", ".", "format", "(", "ITERATIONS", ",", "config", ".", "quadrotor_config", ".", "ctrl_freq", ",", "1", ",", "elapsed_sec", ",", "ITERATIONS", "/", "elapsed_sec", ",", "(", "ITERATIONS", "*", "(", "1.", "/", "config", ".", "quadrotor_config", ".", "ctrl_freq", ")", ")", "/", "elapsed_sec", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.__init__": [[32, 85], ["env_func", "env_func", "safe_control_gym.controllers.mpc.mpc_utils.get_cost_weight_matrix", "safe_control_gym.controllers.mpc.mpc_utils.get_cost_weight_matrix", "mpsc.MPSC.set_linear_dynamics", "mpsc.MPSC.compute_lqr_gain", "mpsc.MPSC.reset_constraints", "numpy.atleast_2d", "numpy.atleast_2d"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.get_cost_weight_matrix", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.get_cost_weight_matrix", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.set_linear_dynamics", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.compute_lqr_gain", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.reset_constraints"], ["def", "__init__", "(", "self", ",", "\n", "env_func", ",", "\n", "rl_controller", "=", "None", ",", "\n", "horizon", ":", "int", "=", "10", ",", "\n", "q_lin", ":", "list", "=", "None", ",", "\n", "r_lin", ":", "list", "=", "None", ",", "\n", "n_samples", ":", "int", "=", "600", ",", "\n", "tau", ":", "float", "=", "0.95", ",", "\n", "warmstart", ":", "bool", "=", "True", ",", "\n", "run_length", ":", "int", "=", "200", ",", "\n", "additional_constraints", ":", "list", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize the MPSC.\n\n        Args:\n            env_func (partial gym.Env): Environment for the task.\n            rl_controller (BaseController): The RL controller to certify.\n            q_lin, r_lin (list): Q and R gain matrices for linear controller.\n            n_samples (int): Number of samples to create W set.\n            tau (float): The constant use in eqn. 8.b. of the paper when finding the RPI.\n            warmstart (bool): If the previous MPC soln should be used to warmstart the next mpc step.\n            run_length (int): How many iterations to run for.\n            additional_constraints (list): List of additional constraints to consider.\n\n        \"\"\"", "\n", "# Setup the Environments.", "\n", "self", ".", "env_func", "=", "env_func", "\n", "self", ".", "env", "=", "env_func", "(", "randomized_init", "=", "False", ")", "\n", "self", ".", "training_env", "=", "env_func", "(", "randomized_init", "=", "True", ")", "\n", "# Setup attributes.", "\n", "self", ".", "model", "=", "self", ".", "env", ".", "symbolic", "\n", "self", ".", "dt", "=", "self", ".", "model", ".", "dt", "\n", "self", ".", "Q", "=", "get_cost_weight_matrix", "(", "q_lin", ",", "self", ".", "model", ".", "nx", ")", "\n", "self", ".", "R", "=", "get_cost_weight_matrix", "(", "r_lin", ",", "self", ".", "model", ".", "nu", ")", "\n", "self", ".", "X_EQ", "=", "np", ".", "atleast_2d", "(", "self", ".", "env", ".", "X_GOAL", ")", "[", "0", ",", ":", "]", ".", "T", "\n", "self", ".", "U_EQ", "=", "np", ".", "atleast_2d", "(", "self", ".", "env", ".", "U_GOAL", ")", "[", "0", ",", ":", "]", "\n", "self", ".", "linear_dynamics_func", ",", "self", ".", "discrete_dfdx", ",", "self", ".", "discrete_dfdu", "=", "self", ".", "set_linear_dynamics", "(", ")", "\n", "self", ".", "compute_lqr_gain", "(", ")", "\n", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "warmstart", "=", "warmstart", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "run_length", "=", "run_length", "\n", "self", ".", "rl_controller", "=", "rl_controller", "\n", "self", ".", "omega_AABB_verts", "=", "None", "\n", "self", ".", "z_prev", "=", "None", "\n", "self", ".", "v_prev", "=", "None", "\n", "if", "additional_constraints", "is", "None", ":", "\n", "            ", "additional_constraints", "=", "[", "]", "\n", "", "self", ".", "constraints", ",", "self", ".", "state_constraints_sym", ",", "self", ".", "input_constraints_sym", "=", "self", ".", "reset_constraints", "(", "\n", "self", ".", "env", ".", "constraints", ".", "constraints", "+", "\n", "additional_constraints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.reset_constraints": [[86, 101], ["safe_control_gym.envs.constraints.ConstraintList", "safe_control_gym.envs.constraints.ConstraintList.get_state_constraint_symbolic_models", "safe_control_gym.envs.constraints.ConstraintList.get_input_constraint_symbolic_models", "len", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_state_constraint_symbolic_models", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_input_constraint_symbolic_models"], ["", "def", "reset_constraints", "(", "self", ",", "\n", "constraints", "\n", ")", ":", "\n", "        ", "\"\"\" Setup the constraints list.\n\n        Args:\n            constraints (list): List of constraints controller is subject too.\n\n        \"\"\"", "\n", "constraints_list", "=", "ConstraintList", "(", "constraints", ")", "\n", "state_constraints_sym", "=", "constraints_list", ".", "get_state_constraint_symbolic_models", "(", ")", "\n", "input_constraints_sym", "=", "constraints_list", ".", "get_input_constraint_symbolic_models", "(", ")", "\n", "if", "len", "(", "constraints_list", ".", "input_state_constraints", ")", ">", "0", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'MPSC cannot handle combined state input constraints yet.'", ")", "\n", "", "return", "constraints_list", ",", "state_constraints_sym", ",", "input_constraints_sym", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.set_linear_dynamics": [[102, 123], ["mpsc.MPSC.model.df_func", "dfdxdfdu[].toarray", "dfdxdfdu[].toarray", "casadi.MX.sym", "casadi.MX.sym", "casadi.integrator", "safe_control_gym.controllers.mpc.mpc_utils.discretize_linear_system"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.discretize_linear_system"], ["", "def", "set_linear_dynamics", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute the linear dynamics\n\n        \"\"\"", "\n", "# Original version, used in shooting.", "\n", "dfdxdfdu", "=", "self", ".", "model", ".", "df_func", "(", "x", "=", "self", ".", "X_EQ", ",", "u", "=", "self", ".", "U_EQ", ")", "\n", "dfdx", "=", "dfdxdfdu", "[", "'dfdx'", "]", ".", "toarray", "(", ")", "\n", "dfdu", "=", "dfdxdfdu", "[", "'dfdu'", "]", ".", "toarray", "(", ")", "\n", "delta_x", "=", "cs", ".", "MX", ".", "sym", "(", "'delta_x'", ",", "self", ".", "model", ".", "nx", ",", "1", ")", "\n", "delta_u", "=", "cs", ".", "MX", ".", "sym", "(", "'delta_u'", ",", "self", ".", "model", ".", "nu", ",", "1", ")", "\n", "x_dot_lin_vec", "=", "dfdx", "@", "delta_x", "+", "dfdu", "@", "delta_u", "\n", "linear_dynamics_func", "=", "cs", ".", "integrator", "(", "\n", "'linear_discrete_dynamics'", ",", "self", ".", "model", ".", "integration_algo", ",", "\n", "{", "\n", "'x'", ":", "delta_x", ",", "\n", "'p'", ":", "delta_u", ",", "\n", "'ode'", ":", "x_dot_lin_vec", "\n", "}", ",", "{", "'tf'", ":", "self", ".", "dt", "}", "\n", ")", "\n", "discrete_dfdx", ",", "discrete_dfdu", "=", "discretize_linear_system", "(", "dfdx", ",", "dfdu", ",", "self", ".", "dt", ")", "\n", "return", "linear_dynamics_func", ",", "discrete_dfdx", ",", "discrete_dfdu", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.compute_lqr_gain": [[124, 135], ["scipy.linalg.solve_discrete_are", "numpy.dot", "numpy.dot", "numpy.linalg.inv", "numpy.dot", "numpy.dot"], "methods", ["None"], ["", "def", "compute_lqr_gain", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute LQR gain by solving the DARE.\n\n        \"\"\"", "\n", "P", "=", "solve_discrete_are", "(", "self", ".", "discrete_dfdx", ",", "\n", "self", ".", "discrete_dfdu", ",", "\n", "self", ".", "Q", ",", "\n", "self", ".", "R", ")", "\n", "btp", "=", "np", ".", "dot", "(", "self", ".", "discrete_dfdu", ".", "T", ",", "P", ")", "\n", "self", ".", "lqr_gain", "=", "-", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "self", ".", "R", "+", "np", ".", "dot", "(", "btp", ",", "self", ".", "discrete_dfdu", ")", ")", ",", "np", ".", "dot", "(", "btp", ",", "\n", "self", ".", "discrete_dfdx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.learn": [[136, 178], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "safe_control_gym.controllers.mpsc.mpsc_utils.compute_RPI_set", "safe_control_gym.controllers.mpsc.mpsc_utils.ellipse_bounding_box", "mpsc.MPSC.tighten_state_and_input_constraints", "safe_control_gym.envs.constraints.QuadraticContstraint", "mpsc.MPSC.setup_optimizer", "env.reset", "env.action_space.sample", "env.step", "[].toarray", "mpsc.MPSC.linear_dynamics_func"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.compute_RPI_set", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.ellipse_bounding_box", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.tighten_state_and_input_constraints", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.setup_optimizer", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step"], ["", "def", "learn", "(", "self", ",", "\n", "env", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Compute the Robust Positively Invariant (RPI) set that the MPSC used.\n\n        Args:\n            env (BenchmarkEnv): If a different environment is to be used for learning, can supply it here.\n\n        \"\"\"", "\n", "if", "env", "is", "None", ":", "\n", "            ", "env", "=", "self", ".", "training_env", "\n", "# Create set of error residuals.", "\n", "", "w", "=", "np", ".", "zeros", "(", "(", "self", ".", "model", ".", "nx", ",", "self", ".", "n_samples", ")", ")", "\n", "next_true_states", "=", "np", ".", "zeros", "(", "(", "self", ".", "model", ".", "nx", ",", "self", ".", "n_samples", ")", ")", "\n", "next_pred_states", "=", "np", ".", "zeros", "(", "(", "self", ".", "model", ".", "nx", ",", "self", ".", "n_samples", ")", ")", "\n", "actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "model", ".", "nu", ",", "self", ".", "n_samples", ")", ")", "\n", "# Use uniform sampling of control inputs and states.", "\n", "for", "i", "in", "range", "(", "self", ".", "n_samples", ")", ":", "\n", "            ", "init_state", ",", "info", "=", "env", ".", "reset", "(", ")", "\n", "u", "=", "env", ".", "action_space", ".", "sample", "(", ")", "# Will yield a random action within action space.", "\n", "actions", "[", ":", ",", "i", "]", "=", "u", "\n", "x_next_obs", ",", "_", ",", "_", ",", "_", "=", "env", ".", "step", "(", "u", ")", "\n", "x_next_linear", "=", "self", ".", "linear_dynamics_func", "(", "x0", "=", "init_state", "-", "self", ".", "X_EQ", ",", "p", "=", "u", "-", "self", ".", "U_EQ", ")", "[", "'xf'", "]", ".", "toarray", "(", ")", "\n", "next_true_states", "[", ":", ",", "i", "]", "=", "x_next_obs", "\n", "next_pred_states", "[", ":", ",", "i", "]", "=", "x_next_linear", "[", ":", ",", "0", "]", "\n", "w", "[", ":", ",", "i", "]", "=", "x_next_obs", "-", "x_next_linear", "[", ":", ",", "0", "]", "\n", "", "A_cl", "=", "self", ".", "discrete_dfdx", "+", "self", ".", "discrete_dfdu", "@", "self", ".", "lqr_gain", "\n", "P", "=", "compute_RPI_set", "(", "A_cl", ",", "w", ",", "self", ".", "tau", ")", "\n", "self", ".", "learn_actions", "=", "actions", "\n", "self", ".", "learn_next_true_states", "=", "next_true_states", "\n", "self", ".", "learn_next_pred_states", "=", "next_pred_states", "\n", "self", ".", "w", "=", "w", "\n", "self", ".", "A_cl", "=", "A_cl", "\n", "self", ".", "omega_P", "=", "P", "\n", "self", ".", "omega_AABB_verts", "=", "ellipse_bounding_box", "(", "P", ")", "\n", "self", ".", "tighten_state_and_input_constraints", "(", ")", "\n", "self", ".", "omega_constraint", "=", "QuadraticContstraint", "(", "self", ".", "env", ",", "\n", "P", ",", "\n", "1.0", ",", "\n", "constrained_variable", "=", "ConstrainedVariableType", ".", "STATE", ")", "\n", "# Now that constraints are defined, setup the optimizer.", "\n", "self", ".", "setup_optimizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.tighten_state_and_input_constraints": [[179, 213], ["numpy.vstack", "numpy.array", "safe_control_gym.controllers.mpsc.mpsc_utils.pontryagin_difference_AABB", "tightened_input_constr_func", "numpy.clip", "safe_control_gym.controllers.mpsc.mpsc_utils.pontryagin_difference_AABB", "tightened_state_constraint_func", "ValueError", "len", "NotImplementedError", "len", "NotImplementedError", "numpy.vstack", "numpy.max", "numpy.min", "numpy.atleast_1d", "numpy.atleast_1d", "range", "list", "itertools.product"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.pontryagin_difference_AABB", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.pontryagin_difference_AABB"], ["", "def", "tighten_state_and_input_constraints", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tigthen the state and input constraints based on the RPI.\n\n        \"\"\"", "\n", "if", "self", ".", "omega_AABB_verts", "is", "not", "None", ":", "\n", "            ", "K_omega_AABB_verts_raw", "=", "(", "self", ".", "lqr_gain", "@", "self", ".", "omega_AABB_verts", ".", "T", ")", ".", "T", "\n", "# Take the outermost values.", "\n", "self", ".", "K_omega_AABB_verts", "=", "np", ".", "vstack", "(", "(", "np", ".", "max", "(", "K_omega_AABB_verts_raw", ")", ",", "np", ".", "min", "(", "K_omega_AABB_verts_raw", ")", ")", ")", "\n", "# Get the current input constraint vertices.", "\n", "input_constraint", "=", "self", ".", "constraints", ".", "input_constraints", "\n", "if", "len", "(", "input_constraint", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"MPSC currently can't handle more than 1 constraint\"", ")", "\n", "", "input_constraint", "=", "input_constraint", "[", "0", "]", "\n", "#self.U_vertices = np.array([np.atleast_1d(input_constraint.upper_bounds), np.atleast_1d(input_constraint.lower_bounds)]).T", "\n", "self", ".", "U_vertices", "=", "np", ".", "array", "(", "[", "np", ".", "atleast_1d", "(", "input_constraint", ".", "upper_bounds", ")", ",", "np", ".", "atleast_1d", "(", "input_constraint", ".", "lower_bounds", ")", "]", ")", "\n", "self", ".", "tightened_input_constraint_verts", ",", "tightened_input_constr_func", "=", "pontryagin_difference_AABB", "(", "\n", "self", ".", "U_vertices", ",", "\n", "self", ".", "K_omega_AABB_verts", ")", "\n", "self", ".", "tightened_input_constraint", "=", "tightened_input_constr_func", "(", "env", "=", "self", ".", "env", ",", "\n", "constrained_variable", "=", "ConstrainedVariableType", ".", "INPUT", ")", "\n", "# Get the state constraint vertices.", "\n", "state_constraints", "=", "self", ".", "constraints", ".", "state_constraints", "\n", "if", "len", "(", "state_constraints", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"MPSC currently can't handle more than 1 constraint\"", ")", "\n", "", "state_constraints", "=", "state_constraints", "[", "0", "]", "\n", "X_vertices_raw", "=", "[", "(", "state_constraints", ".", "upper_bounds", "[", "i", "]", ",", "state_constraints", ".", "lower_bounds", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "model", ".", "nx", ")", "]", "\n", "self", ".", "X_vertices", "=", "np", ".", "clip", "(", "np", ".", "vstack", "(", "list", "(", "product", "(", "*", "X_vertices_raw", ")", ")", ")", ",", "-", "100", ",", "100", ")", "\n", "self", ".", "tightened_state_constraint_verts", ",", "tightened_state_constraint_func", "=", "pontryagin_difference_AABB", "(", "self", ".", "X_vertices", ",", "\n", "self", ".", "omega_AABB_verts", ")", "\n", "self", ".", "tightened_state_constraint", "=", "tightened_state_constraint_func", "(", "env", "=", "self", ".", "env", ",", "\n", "constrained_variable", "=", "ConstrainedVariableType", ".", "STATE", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.setup_optimizer": [[214, 268], ["casadi.Opti", "casadi.Opti.variable", "casadi.Opti.variable", "casadi.Opti.variable", "casadi.Opti.parameter", "casadi.Opti.parameter", "mpsc.MPSC.tightened_state_constraint.get_symbolic_model", "mpsc.MPSC.tightened_input_constraint.get_symbolic_model", "mpsc.MPSC.omega_constraint.get_symbolic_model", "range", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.minimize", "casadi.Opti.solver", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "mpsc.MPSC.linear_dynamics_func", "mpsc.MPSC.", "mpsc.MPSC.", "mpsc.MPSC."], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.LinearConstraint.get_symbolic_model", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.LinearConstraint.get_symbolic_model", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.LinearConstraint.get_symbolic_model"], ["", "", "def", "setup_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Setup the certifying MPC problem.\n\n        \"\"\"", "\n", "# Horizon parameter.", "\n", "horizon", "=", "self", ".", "horizon", "\n", "nx", ",", "nu", "=", "self", ".", "model", ".", "nx", ",", "self", ".", "model", ".", "nu", "\n", "# Define optimizer and variables.", "\n", "opti", "=", "cs", ".", "Opti", "(", ")", "\n", "# States.", "\n", "z_var", "=", "opti", ".", "variable", "(", "nx", ",", "horizon", "+", "1", ")", "\n", "# Inputs.", "\n", "v_var", "=", "opti", ".", "variable", "(", "nu", ",", "horizon", ")", "\n", "# Certified input.", "\n", "u_tilde", "=", "opti", ".", "variable", "(", "nu", ",", "1", ")", "\n", "# Desired input.", "\n", "u_L", "=", "opti", ".", "parameter", "(", "nu", ",", "1", ")", "\n", "# Current observed state.", "\n", "x", "=", "opti", ".", "parameter", "(", "nx", ",", "1", ")", "\n", "# Constraints (currently only handles a single constraint for state and input).", "\n", "state_constraints", "=", "self", ".", "tightened_state_constraint", ".", "get_symbolic_model", "(", ")", "\n", "input_constraints", "=", "self", ".", "tightened_input_constraint", ".", "get_symbolic_model", "(", ")", "\n", "omega_constraint", "=", "self", ".", "omega_constraint", ".", "get_symbolic_model", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "horizon", ")", ":", "\n", "# Dynamics constraints (eqn 5.b).", "\n", "            ", "next_state", "=", "self", ".", "linear_dynamics_func", "(", "x0", "=", "z_var", "[", ":", ",", "i", "]", ",", "p", "=", "v_var", "[", ":", ",", "i", "]", ")", "[", "'xf'", "]", "\n", "opti", ".", "subject_to", "(", "z_var", "[", ":", ",", "i", "+", "1", "]", "==", "next_state", ")", "\n", "# Input constraints (eqn 5.c).", "\n", "opti", ".", "subject_to", "(", "input_constraints", "(", "v_var", "[", ":", ",", "i", "]", ")", "<=", "0", ")", "\n", "# State Constraints", "\n", "opti", ".", "subject_to", "(", "state_constraints", "(", "z_var", "[", ":", ",", "i", "]", ")", "<=", "0", ")", "\n", "# Final state constraints (5.d).", "\n", "", "opti", ".", "subject_to", "(", "z_var", "[", ":", ",", "-", "1", "]", "==", "0", ")", "\n", "# Initial state constraints (5.e).", "\n", "opti", ".", "subject_to", "(", "omega_constraint", "(", "x", "-", "z_var", "[", ":", ",", "0", "]", ")", "<=", "0", ")", "\n", "# Real input (5.f).", "\n", "opti", ".", "subject_to", "(", "u_tilde", "==", "v_var", "[", ":", ",", "0", "]", "+", "self", ".", "lqr_gain", "@", "(", "x", "-", "z_var", "[", ":", ",", "0", "]", ")", ")", "\n", "# Cost (# eqn 5.a, note: using 2norm or sqrt makes this infeasible).", "\n", "cost", "=", "(", "u_L", "-", "u_tilde", ")", ".", "T", "@", "(", "u_L", "-", "u_tilde", ")", "\n", "opti", ".", "minimize", "(", "cost", ")", "\n", "# Create solver (IPOPT solver as of this version).", "\n", "opts", "=", "{", "\"ipopt.print_level\"", ":", "4", ",", "\n", "\"ipopt.sb\"", ":", "\"yes\"", ",", "\n", "\"ipopt.max_iter\"", ":", "50", ",", "\n", "\"print_time\"", ":", "1", "}", "\n", "opti", ".", "solver", "(", "'ipopt'", ",", "opts", ")", "\n", "self", ".", "opti_dict", "=", "{", "\n", "\"opti\"", ":", "opti", ",", "\n", "\"z_var\"", ":", "z_var", ",", "\n", "\"v_var\"", ":", "v_var", ",", "\n", "\"u_tilde\"", ":", "u_tilde", ",", "\n", "\"u_L\"", ":", "u_L", ",", "\n", "\"x\"", ":", "x", ",", "\n", "\"cost\"", ":", "cost", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.solve_optimization": [[270, 318], ["opti.set_value", "opti.set_value", "copy.deepcopy", "copy.deepcopy", "opti.set_initial", "opti.set_initial", "opti.set_initial", "opti.solve", "copy.deepcopy", "opti.solve.value", "opti.solve.value", "opti.solve.value"], "methods", ["None"], ["", "def", "solve_optimization", "(", "self", ",", "\n", "obs", ",", "\n", "uncertified_input", "\n", ")", ":", "\n", "        ", "\"\"\"Solve the MPC optimization problem for a given observation and uncertified input.\n\n        \"\"\"", "\n", "opti_dict", "=", "self", ".", "opti_dict", "\n", "opti", "=", "opti_dict", "[", "\"opti\"", "]", "\n", "z_var", "=", "opti_dict", "[", "\"z_var\"", "]", "\n", "v_var", "=", "opti_dict", "[", "\"v_var\"", "]", "\n", "u_tilde", "=", "opti_dict", "[", "\"u_tilde\"", "]", "\n", "u_L", "=", "opti_dict", "[", "\"u_L\"", "]", "\n", "x", "=", "opti_dict", "[", "\"x\"", "]", "\n", "cost", "=", "opti_dict", "[", "\"cost\"", "]", "\n", "opti", ".", "set_value", "(", "x", ",", "obs", ")", "\n", "opti", ".", "set_value", "(", "u_L", ",", "uncertified_input", ")", "\n", "# Initial guess for optimization problem.", "\n", "if", "(", "self", ".", "warmstart", "and", "\n", "self", ".", "z_prev", "is", "not", "None", "and", "\n", "self", ".", "v_prev", "is", "not", "None", "and", "\n", "self", ".", "u_tilde_prev", "is", "not", "None", ")", ":", "\n", "# Shift previous solutions by 1 step.", "\n", "            ", "z_guess", "=", "deepcopy", "(", "self", ".", "x_prev", ")", "\n", "v_guess", "=", "deepcopy", "(", "self", ".", "u_prev", ")", "\n", "z_guess", "[", ":", ",", ":", "-", "1", "]", "=", "z_guess", "[", ":", ",", "1", ":", "]", "\n", "v_guess", "[", ":", "-", "1", "]", "=", "v_guess", "[", "1", ":", "]", "\n", "opti", ".", "set_initial", "(", "z_var", ",", "z_guess", ")", "\n", "opti", ".", "set_initial", "(", "v_var", ",", "v_guess", ")", "\n", "opti", ".", "set_initial", "(", "u_tilde", ",", "deepcopy", "(", "self", ".", "u_tilde_prev", ")", ")", "\n", "# Solve the optimization problem.", "\n", "", "try", ":", "\n", "            ", "sol", "=", "opti", ".", "solve", "(", ")", "\n", "x_val", ",", "u_val", ",", "u_tilde_val", "=", "sol", ".", "value", "(", "z_var", ")", ",", "sol", ".", "value", "(", "v_var", ")", ",", "sol", ".", "value", "(", "u_tilde", ")", "\n", "self", ".", "z_prev", "=", "x_val", "\n", "self", ".", "v_prev", "=", "u_val", "\n", "self", ".", "u_tilde_prev", "=", "u_tilde_val", "\n", "# Take the first one from solved action sequence.", "\n", "if", "u_val", ".", "ndim", ">", "1", ":", "\n", "                ", "action", "=", "u_tilde_val", "\n", "", "else", ":", "\n", "                ", "action", "=", "u_tilde_val", "\n", "", "self", ".", "prev_action", "=", "u_tilde_val", "\n", "feasible", "=", "True", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "feasible", "=", "False", "\n", "action", "=", "None", "\n", "", "return", "action", ",", "feasible", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.certify_action": [[319, 344], ["mpsc.MPSC.solve_optimization", "mpsc.MPSC.results_dict[].append", "mpsc.MPSC.results_dict[].append", "mpsc.MPSC.results_dict[].append"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.solve_optimization"], ["", "def", "certify_action", "(", "self", ",", "\n", "obs", ",", "\n", "u_L", "\n", ")", ":", "\n", "        ", "\"\"\"Algorithm 1 from Wabsersich 2019.\n\n        \"\"\"", "\n", "action", ",", "feasible", "=", "self", ".", "solve_optimization", "(", "obs", ",", "u_L", ")", "\n", "self", ".", "results_dict", "[", "'feasible'", "]", ".", "append", "(", "feasible", ")", "\n", "if", "feasible", ":", "\n", "            ", "self", ".", "kinf", "=", "0", "\n", "self", ".", "results_dict", "[", "'kinf'", "]", ".", "append", "(", "self", ".", "kinf", ")", "\n", "return", "action", "\n", "", "else", ":", "\n", "            ", "self", ".", "kinf", "+=", "1", "\n", "self", ".", "results_dict", "[", "'kinf'", "]", ".", "append", "(", "self", ".", "kinf", ")", "\n", "if", "(", "self", ".", "kinf", "<=", "self", ".", "horizon", "-", "1", "and", "\n", "self", ".", "z_prev", "is", "not", "None", "and", "\n", "self", ".", "v_prev", "is", "not", "None", ")", ":", "\n", "                ", "action", "=", "self", ".", "v_prev", "[", "self", ".", "kinf", "]", "+", "self", ".", "lqr_gain", "@", "(", "obs", "-", "self", ".", "z_prev", "[", ":", ",", "self", ".", "kinf", ",", "None", "]", ")", "\n", "return", "action", "\n", "", "else", ":", "\n", "                ", "action", "=", "self", ".", "lqr_gain", "@", "obs", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.select_action": [[345, 368], ["mpsc.MPSC.results_dict[].append", "mpsc.MPSC.certify_action", "numpy.linalg.norm", "mpsc.MPSC.results_dict[].append", "torch.no_grad", "mpsc.MPSC.rl_controller.agent.ac.step", "torch.FloatTensor().to", "numpy.sin", "numpy.sin", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.certify_action", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["", "", "", "def", "select_action", "(", "self", ",", "\n", "obs", "\n", ")", ":", "\n", "        ", "\"\"\"Selection feedback action.\n\n        Args:\n            obs (np.array): Observation from the environment.\n\n        Returns:\n            action (np.array): Action to take based on the obs.\n            u_L (np.array): The rl_controllers action based on the obs.\n\n        \"\"\"", "\n", "if", "self", ".", "rl_controller", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "u_L", ",", "v", ",", "logp", "=", "self", ".", "rl_controller", ".", "agent", ".", "ac", ".", "step", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "rl_controller", ".", "device", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "u_L", "=", "2", "*", "np", ".", "sin", "(", "0.01", "*", "np", ".", "pi", "*", "self", ".", "time_step", ")", "+", "0.5", "*", "np", ".", "sin", "(", "0.12", "*", "np", ".", "pi", "*", "self", ".", "time_step", ")", "\n", "", "self", ".", "results_dict", "[", "'learning_actions'", "]", ".", "append", "(", "u_L", ")", "\n", "action", "=", "self", ".", "certify_action", "(", "obs", ",", "u_L", ")", "\n", "action_diff", "=", "np", ".", "linalg", ".", "norm", "(", "u_L", "-", "action", ")", "\n", "self", ".", "results_dict", "[", "'corrections'", "]", ".", "append", "(", "action_diff", ")", "\n", "return", "action", ",", "u_L", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.run": [[369, 417], ["mpsc.MPSC.setup_results_dict", "env.reset", "mpsc.MPSC.results_dict[].append", "range", "mpsc.MPSC.reset", "mpsc.MPSC.results_dict[].append", "range", "mpsc.MPSC.close_results_dict", "mpsc.MPSC.close", "mpsc.MPSC.env_func", "mpsc.MPSC.select_action", "env.step", "mpsc.MPSC.results_dict[].append", "mpsc.MPSC.results_dict[].append", "mpsc.MPSC.step", "mpsc.MPSC.results_dict[].append", "mpsc.MPSC.results_dict[].append", "torch.no_grad", "mpsc.MPSC.rl_controller.agent.ac.step", "torch.FloatTensor().to", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.setup_results_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.close_results_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.select_action", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["", "def", "run", "(", "self", ",", "\n", "env", "=", "None", ",", "\n", "uncertified_env", "=", "None", ",", "\n", "run_length", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Run the simulation.\n\n        Args:\n            env (BenchmarkEnv): Environment to for the controller to run.\n            uncertified_env (BenchmarkEnv): Environement for the uncertified controller to run on for comparison.\n            run_length (int): Number of steps to run the MPSC.\n\n        Return:\n            results_dict (dict): Dictionary of the run results.\n\n        \"\"\"", "\n", "if", "env", "is", "None", ":", "\n", "            ", "env", "=", "self", ".", "env", "\n", "", "if", "run_length", "is", "None", ":", "\n", "            ", "run_length", "=", "self", ".", "run_length", "\n", "", "if", "uncertified_env", "is", "None", ":", "\n", "            ", "uncertified_env", "=", "self", ".", "env_func", "(", "randomized_init", "=", "False", ")", "\n", "", "self", ".", "setup_results_dict", "(", ")", "\n", "obs", ",", "_", "=", "env", ".", "reset", "(", ")", "\n", "self", ".", "results_dict", "[", "'obs'", "]", ".", "append", "(", "obs", ")", "\n", "self", ".", "kinf", "=", "self", ".", "horizon", "-", "1", "\n", "self", ".", "time_step", "=", "0", "\n", "for", "i", "in", "range", "(", "run_length", ")", ":", "\n", "            ", "action", ",", "u_L", "=", "self", ".", "select_action", "(", "obs", ")", "\n", "obs", ",", "_", ",", "_", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "results_dict", "[", "'obs'", "]", ".", "append", "(", "obs", ")", "\n", "self", ".", "results_dict", "[", "'actions'", "]", ".", "append", "(", "action", ")", "\n", "self", ".", "time_step", "+=", "1", "\n", "", "uncertified_obs", ",", "_", "=", "uncertified_env", ".", "reset", "(", ")", "\n", "self", ".", "results_dict", "[", "'uncertified_obs'", "]", ".", "append", "(", "uncertified_obs", ")", "\n", "for", "i", "in", "range", "(", "run_length", ")", ":", "\n", "            ", "if", "self", ".", "rl_controller", "is", "not", "None", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "uncertified_action", ",", "_", ",", "_", "=", "self", ".", "rl_controller", ".", "agent", ".", "ac", ".", "step", "(", "\n", "torch", ".", "FloatTensor", "(", "uncertified_obs", ")", ".", "to", "(", "self", ".", "rl_controller", ".", "device", ")", "\n", ")", "\n", "", "", "uncertified_obs", ",", "_", ",", "_", ",", "_", "=", "uncertified_env", ".", "step", "(", "uncertified_action", ")", "\n", "self", ".", "results_dict", "[", "'uncertified_actions'", "]", ".", "append", "(", "uncertified_action", ")", "\n", "self", ".", "results_dict", "[", "'uncertified_obs'", "]", ".", "append", "(", "uncertified_obs", ")", "\n", "", "self", ".", "close_results_dict", "(", ")", "\n", "uncertified_env", ".", "close", "(", ")", "\n", "return", "self", ".", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.setup_results_dict": [[418, 432], ["None"], "methods", ["None"], ["", "def", "setup_results_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Setup the results dictionary to store run information.\n\n        \"\"\"", "\n", "self", ".", "results_dict", "=", "{", "}", "\n", "self", ".", "results_dict", "[", "'obs'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'actions'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'uncertified_obs'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'uncertified_actions'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'cost'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'learning_actions'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'corrections'", "]", "=", "[", "0.0", "]", "\n", "self", ".", "results_dict", "[", "'feasible'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'kinf'", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.close_results_dict": [[433, 445], ["numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.hstack", "numpy.vstack", "munch.munchify"], "methods", ["None"], ["", "def", "close_results_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Cleanup the rtesults dict and munchify it.\n\n        \"\"\"", "\n", "self", ".", "results_dict", "[", "'obs'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'obs'", "]", ")", "\n", "self", ".", "results_dict", "[", "'uncertified_obs'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'uncertified_obs'", "]", ")", "\n", "self", ".", "results_dict", "[", "'uncertified_actions'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'uncertified_actions'", "]", ")", "\n", "self", ".", "results_dict", "[", "'actions'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'actions'", "]", ")", "\n", "self", ".", "results_dict", "[", "'learning_actions'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'learning_actions'", "]", ")", "\n", "self", ".", "results_dict", "[", "'corrections'", "]", "=", "np", ".", "hstack", "(", "self", ".", "results_dict", "[", "'corrections'", "]", ")", "\n", "self", ".", "results_dict", "[", "'kinf'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'kinf'", "]", ")", "\n", "self", ".", "results_dict", "=", "munchify", "(", "self", ".", "results_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.close": [[446, 451], ["mpsc.MPSC.env.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Cleans up resources.\n\n        \"\"\"", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc.MPSC.reset": [[452, 461], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Prepares for training or evaluation.\n\n        \"\"\"", "\n", "# setup reference input", "\n", "if", "self", ".", "env", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "self", ".", "mode", "=", "\"stabilization\"", "\n", "", "elif", "self", ".", "env", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.compute_RPI_set": [[15, 56], ["cvxpy.Variable", "range", "cvxpy.Problem", "cvxpy.Minimize", "cp.Problem.solve", "print", "exit", "cvxpy.bmat", "cvxpy.log_det"], "function", ["None"], ["def", "compute_RPI_set", "(", "Acl", ",", "\n", "w", ",", "\n", "tau", "\n", ")", ":", "\n", "    ", "\"\"\"Compute a Robust positively invariant set (RPI).\n\n    This follows the method in sec IV A from [1] to compute the robust positively invartiant set through a convex\n    optimzation problem (LMI?) (equation 8a and 8b).\n\n    [1] K.P. Wabsersich and M.N. Zeilinger \"Linear model predictive safety certification for learning-based control\"\n        2019. https://arxiv.org/pdf/1803.08552.pdf\n\n    Args:\n        Acl (np.array): Closed loop gain matrix A+BK (nx by nx)\n        w (np.array): Collection of dynamics error residuals with dim (nx by n_samples)\n        tau (float): Coefficient from the s-procedure. Somewhere near 0.9 seems to work.\n\n    Returns:\n        P (np.array): P from eqn 8 that defines the ellipsoidal RPI set.\n\n    \"\"\"", "\n", "n_samples", "=", "w", ".", "shape", "[", "1", "]", "\n", "P", "=", "cp", ".", "Variable", "(", "Acl", ".", "shape", ",", "symmetric", "=", "True", ")", "\n", "small", "=", "1e-8", "\n", "constraints", "=", "[", "]", "\n", "constraints", "+=", "[", "P", ">>", "small", "]", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "w_i", "=", "w", "[", ":", ",", "i", ",", "None", "]", "\n", "con_11", "=", "Acl", ".", "T", "@", "P", "@", "Acl", "-", "tau", "*", "P", "\n", "con_12", "=", "Acl", ".", "T", "@", "P", "@", "w_i", "\n", "con_21", "=", "w_i", ".", "T", "@", "P", "@", "Acl", "\n", "con_22", "=", "w_i", ".", "T", "@", "P", "@", "w_i", "+", "tau", "-", "1", "\n", "constraints", "+=", "[", "cp", ".", "bmat", "(", "[", "[", "con_11", ",", "con_12", "]", ",", "\n", "[", "con_21", ",", "con_22", "]", "]", ")", "<<", "0", "]", "\n", "", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "-", "cp", ".", "log_det", "(", "P", ")", ")", ",", "constraints", ")", "\n", "try", ":", "\n", "        ", "results", "=", "prob", ".", "solve", "(", "solver", "=", "'MOSEK'", ",", "verbose", "=", "True", ")", "\n", "", "except", "cp", ".", "SolverError", ":", "\n", "        ", "print", "(", "\"[ERROR] RPI computation requires the MOSEK solver.\"", ")", "\n", "exit", "(", ")", "\n", "", "return", "P", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.ellipse_bounding_box": [[57, 74], ["numpy.eye", "range", "list", "numpy.vstack", "extremes.append", "itertools.product", "numpy.sqrt", "numpy.sqrt", "numpy.linalg.inv", "numpy.linalg.inv"], "function", ["None"], ["", "def", "ellipse_bounding_box", "(", "P", ")", ":", "\n", "    ", "\"\"\"Finds the bounding box of an ellipse defined by x^T P x <= 1.\n\n    Args:\n        P (np.array): n by n array defining the ellipse.\n\n    Returns:\n        vertices (np.array): An vertical of the vertices (number of verts by dim of space).\n\n    \"\"\"", "\n", "c", "=", "np", ".", "eye", "(", "P", ".", "shape", "[", "0", "]", ")", "\n", "extremes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "P", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "extremes", ".", "append", "(", "(", "np", ".", "sqrt", "(", "c", "[", ":", ",", "i", ",", "None", "]", ".", "T", "@", "np", ".", "linalg", ".", "inv", "(", "P", ")", "@", "c", "[", ":", ",", "i", ",", "None", "]", ")", "[", "0", ",", "0", "]", ",", "\n", "-", "np", ".", "sqrt", "(", "c", "[", ":", ",", "i", ",", "None", "]", ".", "T", "@", "np", ".", "linalg", ".", "inv", "(", "P", ")", "@", "c", "[", ":", ",", "i", ",", "None", "]", ")", "[", "0", ",", "0", "]", ")", ")", "\n", "", "vertices", "=", "list", "(", "product", "(", "*", "extremes", ")", ")", "\n", "return", "np", ".", "vstack", "(", "vertices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.get_ellipse_eig_decomp": [[75, 96], ["numpy.linalg.eig", "numpy.argmin"], "function", ["None"], ["", "def", "get_ellipse_eig_decomp", "(", "P", ")", ":", "\n", "    ", "\"\"\"Gets the egienvalue decomposition of an ellipse defined by P.\n\n    Args:\n        P (np.array): n by n array defining the ellipse.\n\n    Returns:\n        minor_eval (float): Minor axis eigenvalue.\n        major_eval (np.array): major axis eigenvalue.\n        minor_evec (float): Minor axis eigenvector.\n        major_evec (np.array): Major axis eigenvector.\n\n    \"\"\"", "\n", "evals", ",", "evecs", "=", "np", ".", "linalg", ".", "eig", "(", "P", ")", "\n", "major_axis_ind", "=", "np", ".", "argmin", "(", "evals", ")", "\n", "minor_axis_ind", "=", "0", "if", "major_axis_ind", "==", "1", "else", "1", "\n", "major_eval", "=", "evals", "[", "major_axis_ind", "]", "\n", "minor_eval", "=", "evals", "[", "minor_axis_ind", "]", "\n", "major_evec", "=", "evecs", "[", ":", ",", "major_axis_ind", "]", "\n", "minor_evec", "=", "evecs", "[", ":", ",", "minor_axis_ind", "]", "\n", "return", "minor_eval", ",", "major_eval", ",", "minor_evec", ",", "major_evec", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.get_ellipse_angle_rep": [[97, 120], ["mpsc_utils.get_ellipse_eig_decomp", "numpy.arctan2", "numpy.sqrt", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.get_ellipse_eig_decomp"], ["", "def", "get_ellipse_angle_rep", "(", "P", ",", "\n", "rads", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\"Gets the angle representation of the ellipse which is required for plotting.\n\n    Args:\n        P (np.array): n by n array defining the ellipse.\n        rads (bool) : Optional argument to return the angle in rads (True) or degrees (False)\n\n    Returns:\n        minor_axis_length (float): Length of the minor axis.\n        major_axis_length (float): Length of the major axis.\n        alpha (float): Angle between the horizontal axis and the major axis.\n\n    \"\"\"", "\n", "minor_eval", ",", "major_eval", ",", "minor_evec", ",", "major_evec", "=", "get_ellipse_eig_decomp", "(", "P", ")", "\n", "alpha", "=", "np", ".", "arctan2", "(", "major_evec", "[", "1", "]", ",", "major_evec", "[", "0", "]", ")", "\n", "major_axis_length", "=", "1", "/", "np", ".", "sqrt", "(", "major_eval", ")", "\n", "minor_axis_length", "=", "1", "/", "np", ".", "sqrt", "(", "minor_eval", ")", "\n", "if", "rads", ":", "\n", "        ", "return", "minor_axis_length", ",", "major_axis_length", ",", "alpha", "\n", "", "else", ":", "\n", "        ", "return", "minor_axis_length", ",", "major_axis_length", ",", "alpha", "*", "180", "/", "np", ".", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.add_2d_ellipse": [[121, 150], ["mpsc_utils.get_ellipse_angle_rep", "ax.add_artist", "matplotlib.patches.Ellipse", "matplotlib.patches.Ellipse"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.get_ellipse_angle_rep"], ["", "", "def", "add_2d_ellipse", "(", "position", ",", "\n", "cov", ",", "\n", "ax", ",", "\n", "legend", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Add a 2D Ellipse patch to an axis.\n\n    Args:\n        position (np.array): Position of the centre of the ellipse.\n        cov (np.array): Covariance matrix (ellipse to be plotted).\n        ax (matplotlib.axes): Axis on which to the ellipse should be added.\n        legend (str): Optional addition of ellipse legend.\n\n    \"\"\"", "\n", "minor_axis_length", ",", "major_axis_length", ",", "alpha", "=", "get_ellipse_angle_rep", "(", "cov", ",", "rads", "=", "False", ")", "\n", "if", "legend", ":", "\n", "        ", "ellipse", "=", "Ellipse", "(", "position", ",", "\n", "2", "*", "major_axis_length", ",", "\n", "2", "*", "minor_axis_length", ",", "\n", "angle", "=", "alpha", ",", "\n", "alpha", "=", "0.5", ",", "\n", "label", "=", "legend", ")", "\n", "", "else", ":", "\n", "        ", "ellipse", "=", "Ellipse", "(", "position", ",", "\n", "2", "*", "major_axis_length", ",", "\n", "2", "*", "minor_axis_length", ",", "\n", "angle", "=", "alpha", ",", "\n", "alpha", "=", "0.5", ")", "\n", "", "ax", ".", "add_artist", "(", "ellipse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpsc.mpsc_utils.pontryagin_difference_AABB": [[151, 189], ["pytope.Polytope", "pytope.Polytope", "functools.partial", "numpy.ptp", "functools.partial", "numpy.min", "numpy.max", "print", "numpy.vstack", "numpy.array"], "function", ["None"], ["", "def", "pontryagin_difference_AABB", "(", "verts1", ",", "\n", "verts2", "\n", ")", ":", "\n", "    ", "\"\"\"Computre verts1 (-) verts2.\n\n    Args:\n        verts1, verts2 (np.array): Array of vertices ( n vertices by space dimension) stacked vertically\n        so that every vertix is a horizonal array:\n            vertsi = [v1,\n                      v2,\n                      ...,\n                      vn]\n    Returns:\n        verts (np.array): Array of pontyagin difference.\n        const_func (partial onstraint): Constraint function initialized with parameters from the difference.\n\n    \"\"\"", "\n", "if", "verts1", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "# If greater than 2 dimensions.", "\n", "        ", "poly1", "=", "pt", ".", "Polytope", "(", "verts1", ")", "\n", "poly2", "=", "pt", ".", "Polytope", "(", "verts2", ")", "\n", "diff", "=", "poly1", "-", "poly2", "\n", "A", "=", "diff", ".", "A", "\n", "b", "=", "diff", ".", "b", "\n", "verts", "=", "diff", ".", "V", "\n", "const_func", "=", "partial", "(", "LinearConstraint", ",", "A", "=", "A", ",", "b", "=", "b", ")", "\n", "return", "verts", ",", "const_func", "\n", "", "else", ":", "\n", "# If 1D data. Only handles closed compact sets.", "\n", "        ", "vert2_range", "=", "np", ".", "ptp", "(", "verts2", ")", "\n", "vert_min", "=", "np", ".", "min", "(", "verts1", ")", "+", "vert2_range", "/", "2", "\n", "vert_max", "=", "np", ".", "max", "(", "verts1", ")", "-", "vert2_range", "/", "2", "\n", "const_func", "=", "partial", "(", "BoundedConstraint", ",", "lower_bounds", "=", "vert_min", ",", "upper_bounds", "=", "vert_max", ")", "\n", "if", "vert_max", ">", "vert_min", ":", "\n", "            ", "return", "np", ".", "vstack", "(", "(", "vert_min", ",", "vert_max", ")", ")", ",", "const_func", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Warning: Tightend set is the Zero set.\"", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", "]", ")", ".", "T", ",", "const_func", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str": [[11, 16], ["str_format.format"], "function", ["None"], ["def", "get_arr_str", "(", "vector", ",", "str_format_arg", "=", "\".2f\"", ")", ":", "\n", "    ", "str_format", "=", "\"{:%s}\"", "%", "str_format_arg", "\n", "vector_str", "=", "[", "str_format", ".", "format", "(", "i", ")", "for", "i", "in", "vector", "]", "\n", "vector_str_joined", "=", "\" \"", ".", "join", "(", "vector_str", ")", "\n", "return", "vector_str_joined", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.compute_lqr_gain": [[18, 37], ["model.df_func", "df[].toarray", "df[].toarray", "lqr_utils.discretize_linear_system", "scipy.linalg.solve_discrete_are", "numpy.dot", "numpy.dot", "scipy.linalg.solve_continuous_are", "numpy.dot", "numpy.linalg.inv", "numpy.dot", "numpy.linalg.inv", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.discretize_linear_system"], ["", "def", "compute_lqr_gain", "(", "model", ",", "x_0", ",", "u_0", ",", "Q", ",", "R", ",", "discrete_dynamics", "=", "True", ")", ":", "\n", "# Linearization.", "\n", "    ", "df", "=", "model", ".", "df_func", "(", "x_0", ",", "u_0", ")", "\n", "A", ",", "B", "=", "df", "[", "0", "]", ".", "toarray", "(", ")", ",", "df", "[", "1", "]", ".", "toarray", "(", ")", "\n", "\n", "# Compute controller gain.", "\n", "if", "discrete_dynamics", ":", "\n", "# x[k+1] = A x[k] + B u[k]", "\n", "        ", "A", ",", "B", "=", "discretize_linear_system", "(", "A", ",", "B", ",", "model", ".", "dt", ")", "\n", "P", "=", "scipy", ".", "linalg", ".", "solve_discrete_are", "(", "A", ",", "B", ",", "Q", ",", "R", ")", "\n", "btp", "=", "np", ".", "dot", "(", "B", ".", "T", ",", "P", ")", "\n", "gain", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "R", "+", "np", ".", "dot", "(", "btp", ",", "B", ")", ")", ",", "\n", "np", ".", "dot", "(", "btp", ",", "A", ")", ")", "\n", "", "else", ":", "\n", "# dx/dt = A x + B u", "\n", "        ", "P", "=", "scipy", ".", "linalg", ".", "solve_continuous_are", "(", "A", ",", "B", ",", "Q", ",", "R", ")", "\n", "gain", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "R", ")", ",", "np", ".", "dot", "(", "B", ".", "T", ",", "P", ")", ")", "\n", "\n", "", "return", "gain", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.discretize_linear_system": [[39, 71], ["numpy.zeros", "scipy.linalg.expm", "numpy.eye"], "function", ["None"], ["", "def", "discretize_linear_system", "(", "A", ",", "B", ",", "dt", ",", "exact", "=", "False", ")", ":", "\n", "    ", "\"\"\" discretization of a linear system \n    \n    dx/dt = A x + B u \n    --> xd[k+1] = Ad xd[k] + Bd ud[k] where xd[k] = x(k*dt)\n\n    Args:\n        A: np.array, system transition matrix  \n        B: np.array, input matrix \n        dt: scalar, step time interval \n        exact: bool, if to use exact discretization \n\n    Returns:\n        discretized matrices Ad, Bd \n\n    \"\"\"", "\n", "state_dim", ",", "input_dim", "=", "A", ".", "shape", "[", "1", "]", ",", "B", ".", "shape", "[", "1", "]", "\n", "\n", "if", "exact", ":", "\n", "        ", "M", "=", "np", ".", "zeros", "(", "(", "state_dim", "+", "input_dim", ",", "state_dim", "+", "input_dim", ")", ")", "\n", "M", "[", ":", "state_dim", ",", ":", "state_dim", "]", "=", "A", "\n", "M", "[", ":", "state_dim", ",", "state_dim", ":", "]", "=", "B", "\n", "\n", "Md", "=", "scipy", ".", "linalg", ".", "expm", "(", "M", "*", "dt", ")", "\n", "Ad", "=", "Md", "[", ":", "state_dim", ",", ":", "state_dim", "]", "\n", "Bd", "=", "Md", "[", ":", "state_dim", ",", "state_dim", ":", "]", "\n", "", "else", ":", "\n", "        ", "I", "=", "np", ".", "eye", "(", "state_dim", ")", "\n", "Ad", "=", "I", "+", "A", "*", "dt", "\n", "Bd", "=", "B", "*", "dt", "\n", "\n", "", "return", "Ad", ",", "Bd", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_cost_weight_matrix": [[73, 84], ["len", "numpy.diag", "len", "numpy.diag", "Exception"], "function", ["None"], ["", "def", "get_cost_weight_matrix", "(", "weights", ",", "dim", ")", ":", "\n", "    ", "\"\"\"Gets weight matrix from input args.\n\n    \"\"\"", "\n", "if", "len", "(", "weights", ")", "==", "dim", ":", "\n", "        ", "W", "=", "np", ".", "diag", "(", "weights", ")", "\n", "", "elif", "len", "(", "weights", ")", "==", "1", ":", "\n", "        ", "W", "=", "np", ".", "diag", "(", "weights", "*", "dim", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Wrong dimension for cost weights.\"", ")", "\n", "", "return", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.post_analysis": [[85, 157], ["numpy.min", "numpy.linspace", "matplotlib.subplots", "range", "axs[].set_title", "axs[].legend", "axs[].set", "matplotlib.subplots", "range", "axs[].set_title", "axs[].set", "lqr_utils.compute_state_rmse", "axs[].plot", "axs[].plot", "axs[].set", "axs[].yaxis.set_major_formatter", "matplotlib.savefig", "axs[].plot", "axs[].set", "axs[].set", "axs[].yaxis.set_major_formatter", "[].transpose", "[].transpose", "lqr_utils.wrap2pi_vec", "matplotlib.show", "matplotlib.savefig", "matplotlib.close", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "matplotlib.ticker.FormatStrFormatter", "axs[].set_xticks", "matplotlib.ticker.FormatStrFormatter", "enumerate", "np.linspace.transpose", "[].transpose", "[].transpose", "[].transpose", "numpy.array", "numpy.shape", "numpy.shape", "state_stack.transpose", "goal_stack.transpose", "input_stack.transpose", "state_stack.transpose", "goal_stack.transpose", "state_stack.transpose", "goal_stack.transpose", "input_stack.transpose"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.compute_state_rmse", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.wrap2pi_vec", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "post_analysis", "(", "goal_stack", ",", "state_stack", ",", "input_stack", ",", "env", ",", "\n", "ite_counter", ",", "ep_counter", ",", "plot_traj", ",", "save_plot", ",", "save_data", ",", "\n", "plot_dir", ",", "data_dir", ")", ":", "\n", "# Get model", "\n", "    ", "model", "=", "env", ".", "symbolic", "\n", "stepsize", "=", "model", ".", "dt", "\n", "\n", "# Get times", "\n", "plot_length", "=", "np", ".", "min", "(", "[", "np", ".", "shape", "(", "goal_stack", ")", "[", "0", "]", ",", "np", ".", "shape", "(", "state_stack", ")", "[", "0", "]", "]", ")", "\n", "times", "=", "np", ".", "linspace", "(", "0", ",", "stepsize", "*", "plot_length", ",", "plot_length", ")", "\n", "\n", "# Plot states", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "model", ".", "nx", ")", "\n", "if", "model", ".", "nx", "==", "1", ":", "\n", "        ", "axs", "=", "[", "axs", "]", "\n", "", "for", "k", "in", "range", "(", "model", ".", "nx", ")", ":", "\n", "        ", "axs", "[", "k", "]", ".", "plot", "(", "times", ",", "state_stack", ".", "transpose", "(", ")", "[", "k", ",", "0", ":", "plot_length", "]", ",", "label", "=", "'actual'", ")", "\n", "axs", "[", "k", "]", ".", "plot", "(", "times", ",", "goal_stack", ".", "transpose", "(", ")", "[", "k", ",", "0", ":", "plot_length", "]", ",", "color", "=", "'r'", ",", "label", "=", "'desired'", ")", "\n", "axs", "[", "k", "]", ".", "set", "(", "ylabel", "=", "env", ".", "STATE_LABELS", "[", "k", "]", "+", "'\\n[%s]'", "%", "env", ".", "STATE_UNITS", "[", "k", "]", ")", "\n", "axs", "[", "k", "]", ".", "yaxis", ".", "set_major_formatter", "(", "FormatStrFormatter", "(", "'%.1f'", ")", ")", "\n", "if", "not", "(", "k", "==", "model", ".", "nx", "-", "1", ")", ":", "\n", "            ", "axs", "[", "k", "]", ".", "set_xticks", "(", "[", "]", ")", "\n", "", "", "axs", "[", "0", "]", ".", "set_title", "(", "'State Trajectories'", ")", "\n", "axs", "[", "-", "1", "]", ".", "legend", "(", "ncol", "=", "3", ",", "bbox_transform", "=", "fig", ".", "transFigure", ",", "bbox_to_anchor", "=", "(", "1", ",", "0", ")", ",", "loc", "=", "\"lower right\"", ")", "\n", "axs", "[", "-", "1", "]", ".", "set", "(", "xlabel", "=", "'time (sec)'", ")", "\n", "if", "save_plot", ":", "\n", "        ", "plt", ".", "savefig", "(", "plot_dir", "+", "\"state_ite%d\"", "%", "ite_counter", ")", "\n", "\n", "# Plot inputs", "\n", "", "_", ",", "axs", "=", "plt", ".", "subplots", "(", "model", ".", "nu", ")", "\n", "if", "model", ".", "nu", "==", "1", ":", "\n", "        ", "axs", "=", "[", "axs", "]", "\n", "", "for", "k", "in", "range", "(", "model", ".", "nu", ")", ":", "\n", "        ", "axs", "[", "k", "]", ".", "plot", "(", "times", ",", "input_stack", ".", "transpose", "(", ")", "[", "k", ",", "0", ":", "plot_length", "]", ")", "\n", "axs", "[", "k", "]", ".", "set", "(", "ylabel", "=", "'input %d'", "%", "k", ")", "\n", "axs", "[", "k", "]", ".", "set", "(", "ylabel", "=", "env", ".", "ACTION_LABELS", "[", "k", "]", "+", "'\\n[%s]'", "%", "env", ".", "ACTION_UNITS", "[", "k", "]", ")", "\n", "axs", "[", "k", "]", ".", "yaxis", ".", "set_major_formatter", "(", "FormatStrFormatter", "(", "'%.1f'", ")", ")", "\n", "", "axs", "[", "0", "]", ".", "set_title", "(", "'Input Trajectories'", ")", "\n", "axs", "[", "-", "1", "]", ".", "set", "(", "xlabel", "=", "'time (sec)'", ")", "\n", "\n", "# Compute RMSE for each state", "\n", "state_error", "=", "state_stack", ".", "transpose", "(", ")", "[", ":", ",", "0", ":", "plot_length", "]", ".", "transpose", "(", ")", "-", "goal_stack", ".", "transpose", "(", ")", "[", ":", ",", "0", ":", "plot_length", "]", ".", "transpose", "(", ")", "\n", "\n", "# Check if state is an angle and wrap angle error to [-pi, pi]", "\n", "angle_state_index", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "env", ".", "STATE_UNITS", ")", "if", "x", "==", "\"rad\"", "]", "\n", "for", "k", "in", "angle_state_index", ":", "\n", "        ", "state_error", "[", ":", ",", "k", "]", "=", "wrap2pi_vec", "(", "state_error", "[", ":", ",", "k", "]", ")", "\n", "\n", "", "state_rmse", ",", "state_rmse_scalar", "=", "compute_state_rmse", "(", "state_error", ")", "\n", "\n", "if", "plot_traj", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n", "", "if", "save_plot", ":", "\n", "        ", "plt", ".", "savefig", "(", "plot_dir", "+", "\"input_ite%d\"", "%", "ite_counter", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "if", "save_data", ":", "\n", "        ", "np", ".", "savetxt", "(", "data_dir", "+", "\"test%d_times.csv\"", "%", "ep_counter", ",", "times", ".", "transpose", "(", ")", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%.8f'", ")", "\n", "np", ".", "savetxt", "(", "data_dir", "+", "\"test%d_states.csv\"", "%", "ep_counter", ",", "state_stack", ".", "transpose", "(", ")", "[", ":", ",", "0", ":", "plot_length", "]", ".", "transpose", "(", ")", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%.8f'", ")", "\n", "np", ".", "savetxt", "(", "data_dir", "+", "\"test%d_states_des.csv\"", "%", "ep_counter", ",", "goal_stack", ".", "transpose", "(", ")", "[", ":", ",", "0", ":", "plot_length", "]", ".", "transpose", "(", ")", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%.8f'", ")", "\n", "np", ".", "savetxt", "(", "data_dir", "+", "\"test%d_inputs.csv\"", "%", "ep_counter", ",", "input_stack", ".", "transpose", "(", ")", "[", ":", ",", "0", ":", "plot_length", "]", ".", "transpose", "(", ")", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%.8f'", ")", "\n", "np", ".", "savetxt", "(", "data_dir", "+", "\"test%d_state_rmse.csv\"", "%", "ep_counter", ",", "state_rmse", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%.8f'", ")", "\n", "np", ".", "savetxt", "(", "data_dir", "+", "\"test%d_state_rmse_scalar.csv\"", "%", "ep_counter", ",", "np", ".", "array", "(", "[", "state_rmse_scalar", "]", ")", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%.8f'", ")", "\n", "\n", "# Return analysis data", "\n", "", "analysis_data", "=", "{", "}", "\n", "analysis_data", "[", "\"state_rmse\"", "]", "=", "state_rmse", "\n", "analysis_data", "[", "\"state_rmse_scalar\"", "]", "=", "state_rmse_scalar", "\n", "\n", "return", "analysis_data", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.wrap2pi_vec": [[159, 163], ["range", "len", "lqr_utils.wrap2pi"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.wrap2pi"], ["", "def", "wrap2pi_vec", "(", "angle_vec", ")", ":", "\n", "    ", "for", "k", "in", "range", "(", "len", "(", "angle_vec", ")", ")", ":", "\n", "        ", "angle_vec", "[", "k", "]", "=", "wrap2pi", "(", "angle_vec", "[", "k", "]", ")", "\n", "", "return", "angle_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.wrap2pi": [[165, 171], ["None"], "function", ["None"], ["", "def", "wrap2pi", "(", "angle", ")", ":", "\n", "    ", "while", "angle", ">", "np", ".", "pi", ":", "\n", "        ", "angle", "-=", "np", ".", "pi", "\n", "", "while", "angle", "<=", "-", "np", ".", "pi", ":", "\n", "        ", "angle", "+=", "np", ".", "pi", "\n", "", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.compute_state_rmse": [[173, 182], ["numpy.mean", "numpy.sqrt", "numpy.sqrt", "print", "print", "numpy.sum", "termcolor.colored", "termcolor.colored", "lqr_utils.get_arr_str"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str"], ["", "def", "compute_state_rmse", "(", "state_error", ")", ":", "\n", "# Compute root-mean-square error", "\n", "    ", "mse", "=", "np", ".", "mean", "(", "state_error", "**", "2", ",", "axis", "=", "0", ")", "\n", "state_rmse", "=", "np", ".", "sqrt", "(", "mse", ")", "\n", "state_rmse_scalar", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "mse", ")", ")", "\n", "# Print root-mean-square error", "\n", "print", "(", "colored", "(", "\"rmse by state: \"", "+", "get_arr_str", "(", "state_rmse", ")", ",", "\"blue\"", ")", ")", "\n", "print", "(", "colored", "(", "\"scalarized rmse: %.2f\"", "%", "state_rmse_scalar", ",", "\"blue\"", ")", ")", "\n", "return", "state_rmse", ",", "state_rmse_scalar", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.__init__": [[39, 152], ["locals().items", "safe_control_gym.envs.benchmark_env.Task", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "get_cost_weight_matrix", "get_cost_weight_matrix", "lqr.LQR.env.set_cost_function_param", "safe_control_gym.utils.logging.ExperimentLogger", "lqr.LQR.compute_lqr_gain"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.get_cost_weight_matrix", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.get_cost_weight_matrix", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.set_cost_function_param", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.compute_lqr_gain"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env_func", ",", "\n", "# Model args.", "\n", "q_lqr", "=", "[", "1", "]", ",", "\n", "r_lqr", "=", "[", "1", "]", ",", "\n", "discrete_dynamics", "=", "1", ",", "\n", "# Runner args.", "\n", "deque_size", "=", "10", ",", "\n", "eval_batch_size", "=", "1", ",", "\n", "# Task", "\n", "task", ":", "Task", "=", "Task", ".", "STABILIZATION", ",", "\n", "task_info", "=", "None", ",", "\n", "episode_len_sec", "=", "10", ",", "\n", "# Shared/base args.", "\n", "output_dir", "=", "\"results/temp\"", ",", "\n", "verbose", "=", "False", ",", "\n", "model_step_chk", "=", "False", ",", "\n", "random_init", "=", "True", ",", "\n", "ctrl_freq", "=", "240", ",", "\n", "pyb_freq", "=", "240", ",", "\n", "save_data", "=", "False", ",", "\n", "data_dir", "=", "None", ",", "\n", "plot_traj", "=", "False", ",", "\n", "plot_dir", "=", "None", ",", "\n", "save_plot", "=", "False", ",", "\n", "init_state_randomization_info", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Creates task and controller.\n\n        Args:\n            env_func (Callable): function to instantiate task/environment.\n            q_lqr (list): diagonals of state cost weight.\n            r_lqr (list): diagonals of input/action cost weight.\n            discrete_dynamics (int): if to use discrete or continuous dynamics.\n            deque_size (int): number of episodes to average over per evaluation statistic.\n            eval_batch_size (int): number of episodes to run for evaluation.\n            output_dir (str): output directory to write logs and results.\n\n        \"\"\"", "\n", "# All params/args.", "\n", "for", "k", ",", "v", "in", "locals", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"self\"", "and", "k", "!=", "\"kwargs\"", "and", "\"__\"", "not", "in", "k", ":", "\n", "                ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n", "# Task.", "\n", "", "", "self", ".", "task", "=", "Task", "(", "task", ")", "\n", "self", ".", "env_func", "=", "env_func", "\n", "self", ".", "cost", "=", "Cost", ".", "QUADRATIC", "\n", "self", ".", "init_state_randomization_info", "=", "init_state_randomization_info", "\n", "self", ".", "episode_len_sec", "=", "episode_len_sec", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "task_info", "=", "task_info", "\n", "self", ".", "ctrl_freq", "=", "ctrl_freq", "\n", "self", ".", "pyb_freq", "=", "pyb_freq", "\n", "self", ".", "deque_size", "=", "deque_size", "\n", "self", ".", "random_init", "=", "random_init", "\n", "self", ".", "env", "=", "env_func", "(", "cost", "=", "self", ".", "cost", ",", "\n", "randomized_init", "=", "random_init", ",", "\n", "init_state_randomization_info", "=", "init_state_randomization_info", ",", "\n", "randomized_inertial_prop", "=", "False", ",", "\n", "episode_len_sec", "=", "episode_len_sec", ",", "\n", "task", "=", "task", ",", "\n", "task_info", "=", "task_info", ",", "\n", "ctrl_freq", "=", "ctrl_freq", ",", "\n", "pyb_freq", "=", "pyb_freq", ")", "\n", "self", ".", "env", "=", "RecordEpisodeStatistics", "(", "self", ".", "env", ",", "deque_size", ")", "\n", "\n", "# Controller params.", "\n", "self", ".", "model", "=", "self", ".", "env", ".", "symbolic", "\n", "self", ".", "Q", "=", "get_cost_weight_matrix", "(", "self", ".", "q_lqr", ",", "self", ".", "model", ".", "nx", ")", "\n", "self", ".", "R", "=", "get_cost_weight_matrix", "(", "self", ".", "r_lqr", ",", "self", ".", "model", ".", "nu", ")", "\n", "self", ".", "env", ".", "set_cost_function_param", "(", "self", ".", "Q", ",", "self", ".", "R", ")", "\n", "\n", "# Linearize at operating point (equilibrium for stabilization).", "\n", "self", ".", "x_0", ",", "self", ".", "u_0", "=", "self", ".", "env", ".", "X_GOAL", ",", "self", ".", "env", ".", "U_GOAL", "\n", "self", ".", "discrete_dynamics", "=", "discrete_dynamics", "\n", "\n", "if", "self", ".", "task", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "self", ".", "gain", "=", "compute_lqr_gain", "(", "self", ".", "model", ",", "self", ".", "x_0", ",", "self", ".", "u_0", ",", "\n", "self", ".", "Q", ",", "self", ".", "R", ",", "self", ".", "discrete_dynamics", ")", "\n", "\n", "# Model step for debugging", "\n", "# self.env.reset()", "\n", "", "self", ".", "stepsize", "=", "self", ".", "model", ".", "dt", "\n", "\n", "# Check model step flag.", "\n", "self", ".", "model_step_chk", "=", "model_step_chk", "\n", "\n", "# Plot trajectory.", "\n", "self", ".", "plot_traj", "=", "plot_traj", "\n", "\n", "# Save plot.", "\n", "self", ".", "save_plot", "=", "save_plot", "\n", "\n", "# Plot output directory.", "\n", "self", ".", "plot_dir", "=", "plot_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "plot_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "plot_dir", ")", "\n", "\n", "# Save data.", "\n", "", "self", ".", "save_data", "=", "save_data", "\n", "\n", "# Data output directory.", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "if", "self", ".", "data_dir", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "save_data", "=", "False", "\n", "\n", "# Logging.", "\n", "", "self", ".", "logger", "=", "ExperimentLogger", "(", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.model_step": [[153, 158], ["lqr.LQR.select_action", "model.fc_func"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.select_action"], ["", "def", "model_step", "(", "self", ")", ":", "\n", "        ", "model", "=", "self", ".", "env", ".", "symbolic", "\n", "self", ".", "model_input", "=", "self", ".", "select_action", "(", "self", ".", "model_state", ")", "\n", "self", ".", "state_dot", "=", "model", ".", "fc_func", "(", "self", ".", "model_state", ",", "self", ".", "model_input", ")", "\n", "self", ".", "model_state", "=", "self", ".", "model_state", "+", "self", ".", "stepsize", "*", "self", ".", "state_dot", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.close": [[159, 163], ["lqr.LQR.env.close", "lqr.LQR.logger.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Cleans up resources.\"\"\"", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "self", ".", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.select_action": [[164, 183], ["lqr.LQR.compute_lqr_gain"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.compute_lqr_gain"], ["", "def", "select_action", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Calculates control input u = -K x.\n\n        Args:\n            x (np.array): step-wise observation/input.\n\n        Returns:\n           np.array: step-wise control input/actino.\n\n        \"\"\"", "\n", "if", "self", ".", "task", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "return", "-", "self", ".", "gain", "@", "(", "x", "-", "self", ".", "x_0", ")", "+", "self", ".", "u_0", "\n", "", "elif", "self", ".", "task", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "            ", "self", ".", "gain", "=", "compute_lqr_gain", "(", "self", ".", "model", ",", "self", ".", "x_0", "[", "self", ".", "k", "]", ",", "\n", "self", ".", "u_0", ",", "self", ".", "Q", ",", "self", ".", "R", ",", "\n", "self", ".", "discrete_dynamics", ")", "\n", "return", "-", "self", ".", "gain", "@", "(", "x", "-", "self", ".", "x_0", "[", "self", ".", "k", "]", ")", "+", "self", ".", "u_0", "\n", "", "else", ":", "\n", "            ", "print", "(", "colored", "(", "\"Incorrect task specified.\"", ",", "\"red\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.compute_lqr_gain": [[184, 203], ["lqr.LQR.model.df_func", "df[].toarray", "df[].toarray", "discretize_linear_system", "scipy.linalg.solve_discrete_are", "numpy.dot", "numpy.dot", "scipy.linalg.solve_continuous_are", "numpy.dot", "numpy.linalg.inv", "numpy.dot", "numpy.linalg.inv", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.discretize_linear_system"], ["", "", "def", "compute_lqr_gain", "(", "self", ",", "x_0", ",", "u_0", ")", ":", "\n", "# Linearization.", "\n", "        ", "df", "=", "self", ".", "model", ".", "df_func", "(", "x_0", ",", "u_0", ")", "\n", "A", ",", "B", "=", "df", "[", "0", "]", ".", "toarray", "(", ")", ",", "df", "[", "1", "]", ".", "toarray", "(", ")", "\n", "\n", "# Compute controller gain.", "\n", "if", "self", ".", "discrete_dynamics", ":", "\n", "# x[k+1] = A x[k] + B u[k]", "\n", "            ", "A", ",", "B", "=", "discretize_linear_system", "(", "A", ",", "B", ",", "self", ".", "model", ".", "dt", ")", "\n", "P", "=", "scipy", ".", "linalg", ".", "solve_discrete_are", "(", "A", ",", "B", ",", "self", ".", "Q", ",", "self", ".", "R", ")", "\n", "btp", "=", "np", ".", "dot", "(", "B", ".", "T", ",", "P", ")", "\n", "gain", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "self", ".", "R", "+", "np", ".", "dot", "(", "btp", ",", "B", ")", ")", ",", "\n", "np", ".", "dot", "(", "btp", ",", "A", ")", ")", "\n", "", "else", ":", "\n", "# dx/dt = A x + B u", "\n", "            ", "P", "=", "scipy", ".", "linalg", ".", "solve_continuous_are", "(", "A", ",", "B", ",", "self", ".", "Q", ",", "self", ".", "R", ")", "\n", "gain", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "self", ".", "R", ")", ",", "np", ".", "dot", "(", "B", ".", "T", ",", "P", ")", ")", "\n", "\n", "", "return", "gain", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.run": [[204, 347], ["lqr.LQR.env.reset", "numpy.asarray", "numpy.asarray", "len", "lqr.LQR.select_action", "lqr.LQR.env.step", "lqr.LQR.logger.info", "numpy.savetxt", "print", "numpy.vstack", "numpy.vstack", "numpy.vstack", "lqr.LQR.model_step", "print", "print", "print", "lqr.LQR.env.render", "frames.append", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.asarray.append", "numpy.asarray.append", "print", "print", "print", "lqr.LQR.env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "lqr.LQR.env.reset", "numpy.asarray.mean", "numpy.asarray.std", "numpy.asarray.mean", "numpy.asarray.std", "len", "termcolor.colored", "print", "print", "lqr.LQR.env.render", "post_analysis", "termcolor.colored", "termcolor.colored", "print", "print", "termcolor.colored", "numpy.savetxt", "get_arr_str", "get_arr_str", "numpy.array", "numpy.vstack", "termcolor.colored", "termcolor.colored", "numpy.array", "get_arr_str", "get_arr_str", "get_arr_str", "get_arr_str", "get_arr_str", "get_arr_str", "get_arr_str"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.select_action", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.model_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.post_analysis", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str"], ["", "def", "run", "(", "self", ",", "n_episodes", "=", "1", ",", "render", "=", "False", ",", "logging", "=", "False", ",", "verbose", "=", "False", ",", "use_adv", "=", "False", ")", ":", "\n", "        ", "\"\"\"Runs evaluation with current policy.\n\n        Args:\n            render (bool): if to render during the runs.\n            logging (bool): if to log using logger during the runs.\n\n        Returns:\n            dict: evaluation results\n            \n        \"\"\"", "\n", "ep_returns", ",", "ep_lengths", "=", "[", "]", ",", "[", "]", "\n", "frames", "=", "[", "]", "\n", "self", ".", "ep_counter", "=", "0", "\n", "self", ".", "k", "=", "0", "\n", "\n", "# Reseed for batch-wise consistency.", "\n", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "ep_seed", "=", "1", "#self.env.SEED", "\n", "\n", "while", "len", "(", "ep_returns", ")", "<", "self", ".", "eval_batch_size", ":", "\n", "# Current goal.", "\n", "            ", "if", "self", ".", "task", "==", "Task", ".", "STABILIZATION", ":", "\n", "                ", "current_goal", "=", "self", ".", "x_0", "\n", "", "elif", "self", ".", "task", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "                ", "current_goal", "=", "self", ".", "x_0", "[", "self", ".", "k", "]", "\n", "\n", "# Select action.", "\n", "", "action", "=", "self", ".", "select_action", "(", "self", ".", "env", ".", "state", ")", "\n", "\n", "# Save initial condition.", "\n", "if", "self", ".", "k", "==", "0", ":", "\n", "                ", "x_init", "=", "self", ".", "env", ".", "state", "\n", "if", "self", ".", "model_step_chk", ":", "\n", "                    ", "self", ".", "model_state", "=", "self", ".", "env", ".", "state", "\n", "\n", "# Initialize state and input stack.", "\n", "", "state_stack", "=", "self", ".", "env", ".", "state", "\n", "input_stack", "=", "action", "\n", "goal_stack", "=", "current_goal", "\n", "\n", "# Print initial state.", "\n", "print", "(", "colored", "(", "\"initial state (%d): \"", "%", "ep_seed", "+", "get_arr_str", "(", "self", ".", "env", ".", "state", ")", ",", "\"green\"", ")", ")", "\n", "\n", "", "else", ":", "\n", "# Save state and input.", "\n", "                ", "state_stack", "=", "np", ".", "vstack", "(", "(", "state_stack", ",", "self", ".", "env", ".", "state", ")", ")", "\n", "input_stack", "=", "np", ".", "vstack", "(", "(", "input_stack", ",", "action", ")", ")", "\n", "goal_stack", "=", "np", ".", "vstack", "(", "(", "goal_stack", ",", "current_goal", ")", ")", "\n", "\n", "# Step forward.", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "# Debug with analytical model.", "\n", "if", "self", ".", "model_step_chk", ":", "\n", "                ", "self", ".", "model_step", "(", ")", "\n", "\n", "# Update step counter", "\n", "", "self", ".", "k", "+=", "1", "\n", "\n", "if", "verbose", ":", "\n", "                ", "if", "self", ".", "task", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "                    ", "print", "(", "\"goal state: \"", "+", "get_arr_str", "(", "self", ".", "x_0", ")", ")", "\n", "", "print", "(", "\"state: \"", "+", "get_arr_str", "(", "self", ".", "env", ".", "state", ")", ")", "\n", "if", "self", ".", "model_step_chk", ":", "\n", "                    ", "print", "(", "\"model_state: \"", "+", "get_arr_str", "(", "self", ".", "model_state", ")", ")", "\n", "", "print", "(", "\"obs: \"", "+", "get_arr_str", "(", "obs", ")", ")", "\n", "print", "(", "\"action: \"", "+", "get_arr_str", "(", "action", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "if", "render", ":", "\n", "                ", "self", ".", "env", ".", "render", "(", ")", "\n", "frames", ".", "append", "(", "self", ".", "env", ".", "render", "(", "\"rgb_array\"", ")", ")", "\n", "\n", "", "if", "done", ":", "\n", "# Push last state and input to stack.", "\n", "# Note: the last input is not used.", "\n", "                ", "state_stack", "=", "np", ".", "vstack", "(", "(", "state_stack", ",", "self", ".", "env", ".", "state", ")", ")", "\n", "input_stack", "=", "np", ".", "vstack", "(", "(", "input_stack", ",", "action", ")", ")", "\n", "goal_stack", "=", "np", ".", "vstack", "(", "(", "goal_stack", ",", "current_goal", ")", ")", "\n", "\n", "# Post analysis.", "\n", "if", "self", ".", "plot_traj", "or", "self", ".", "save_plot", "or", "self", ".", "save_data", ":", "\n", "                    ", "analysis_data", "=", "post_analysis", "(", "goal_stack", ",", "state_stack", ",", "\n", "input_stack", ",", "self", ".", "env", ",", "0", ",", "\n", "self", ".", "ep_counter", ",", "\n", "self", ".", "plot_traj", ",", "\n", "self", ".", "save_plot", ",", "\n", "self", ".", "save_data", ",", "\n", "self", ".", "plot_dir", ",", "self", ".", "data_dir", ")", "\n", "if", "self", ".", "ep_counter", "==", "0", ":", "\n", "                        ", "ep_rmse", "=", "np", ".", "array", "(", "[", "analysis_data", "[", "\"state_rmse_scalar\"", "]", "]", ")", "\n", "", "else", ":", "\n", "                        ", "ep_rmse", "=", "np", ".", "vstack", "(", "(", "ep_rmse", ",", "analysis_data", "[", "\"state_rmse_scalar\"", "]", ")", ")", "\n", "\n", "# Update iteration return and length lists.", "\n", "", "", "assert", "\"episode\"", "in", "info", "\n", "ep_returns", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"r\"", "]", ")", "\n", "ep_lengths", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"l\"", "]", ")", "\n", "\n", "print", "(", "colored", "(", "\"Test Run %d reward %.2f\"", "%", "(", "self", ".", "ep_counter", ",", "ep_returns", "[", "-", "1", "]", ")", ",", "\"yellow\"", ")", ")", "\n", "print", "(", "colored", "(", "\"initial state: \"", "+", "get_arr_str", "(", "x_init", ")", ",", "\"yellow\"", ")", ")", "\n", "if", "self", ".", "task", "==", "Task", ".", "STABILIZATION", ":", "\n", "                    ", "print", "(", "colored", "(", "\"final state: \"", "+", "get_arr_str", "(", "self", ".", "env", ".", "state", ")", ",", "\"yellow\"", ")", ")", "\n", "print", "(", "colored", "(", "\"goal state: \"", "+", "get_arr_str", "(", "self", ".", "x_0", ")", ",", "\"yellow\"", ")", ")", "\n", "", "print", "(", "colored", "(", "\"==========================\\n\"", ",", "\"yellow\"", ")", ")", "\n", "\n", "# Save reward", "\n", "if", "self", ".", "save_data", ":", "\n", "                    ", "np", ".", "savetxt", "(", "self", ".", "data_dir", "+", "\"test%d_rewards.csv\"", "%", "self", ".", "ep_counter", ",", "np", ".", "array", "(", "[", "ep_returns", "[", "-", "1", "]", "]", ")", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%.8f'", ")", "\n", "\n", "", "self", ".", "ep_counter", "+=", "1", "\n", "ep_seed", "+=", "1", "\n", "self", ".", "k", "=", "0", "\n", "self", ".", "env", "=", "self", ".", "env_func", "(", "cost", "=", "self", ".", "cost", ",", "\n", "randomized_init", "=", "self", ".", "random_init", ",", "\n", "seed", "=", "ep_seed", ",", "\n", "init_state_randomization_info", "=", "self", ".", "init_state_randomization_info", ",", "\n", "randomized_inertial_prop", "=", "False", ",", "\n", "episode_len_sec", "=", "self", ".", "episode_len_sec", ",", "\n", "task", "=", "self", ".", "task", ",", "\n", "task_info", "=", "self", ".", "task_info", ",", "\n", "ctrl_freq", "=", "self", ".", "ctrl_freq", ",", "\n", "pyb_freq", "=", "self", ".", "pyb_freq", ")", "\n", "self", ".", "env", "=", "RecordEpisodeStatistics", "(", "self", ".", "env", ",", "self", ".", "deque_size", ")", "\n", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# Collect evaluation results.", "\n", "", "", "ep_lengths", "=", "np", ".", "asarray", "(", "ep_lengths", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "ep_returns", ")", "\n", "if", "logging", ":", "\n", "            ", "msg", "=", "\"****** Evaluation ******\\n\"", "\n", "msg", "+=", "\"eval_ep_length {:.2f} +/- {:.2f} | eval_ep_return {:.3f} +/- {:.3f}\\n\"", ".", "format", "(", "\n", "ep_lengths", ".", "mean", "(", ")", ",", "ep_lengths", ".", "std", "(", ")", ",", "ep_returns", ".", "mean", "(", ")", ",", "\n", "ep_returns", ".", "std", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n", "", "if", "self", ".", "save_data", ":", "\n", "            ", "np", ".", "savetxt", "(", "self", ".", "data_dir", "+", "\"all_test_mean_rmse.csv\"", ",", "ep_rmse", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%.8f'", ")", "\n", "\n", "", "eval_results", "=", "{", "\"ep_returns\"", ":", "ep_returns", ",", "\"ep_lengths\"", ":", "ep_lengths", "}", "\n", "if", "len", "(", "frames", ")", ">", "0", "and", "frames", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "eval_results", "[", "\"frames\"", "]", "=", "frames", "\n", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.__init__": [[42, 142], ["locals().items", "safe_control_gym.envs.benchmark_env.Task", "safe_control_gym.utils.logging.ExperimentLogger", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "locals"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env_func", ",", "\n", "# model args", "\n", "q_lqr", "=", "[", "1", "]", ",", "\n", "r_lqr", "=", "[", "1", "]", ",", "\n", "discrete_dynamics", "=", "1", ",", "\n", "# runner args", "\n", "deque_size", "=", "10", ",", "\n", "eval_batch_size", "=", "1", ",", "\n", "# Task", "\n", "task", ":", "Task", "=", "Task", ".", "STABILIZATION", ",", "\n", "task_info", "=", "None", ",", "\n", "episode_len_sec", "=", "10", ",", "\n", "# iLQR args", "\n", "max_iterations", "=", "15", ",", "\n", "lamb_factor", "=", "10", ",", "\n", "lamb_max", "=", "1000", ",", "\n", "epsilon", "=", "0.01", ",", "\n", "# shared/base args", "\n", "output_dir", "=", "\"./results/temp/\"", ",", "\n", "verbose", "=", "True", ",", "\n", "random_init", "=", "True", ",", "\n", "ctrl_freq", "=", "240", ",", "\n", "pyb_freq", "=", "240", ",", "\n", "save_data", "=", "False", ",", "\n", "data_dir", "=", "None", ",", "\n", "plot_traj", "=", "False", ",", "\n", "plot_dir", "=", "None", ",", "\n", "save_plot", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Example of docstring on the __init__ method.\n\n        The __init__ method may be documented in either the class level\n        docstring, or as a docstring on the __init__ method itself.\n\n        Args:\n            param1 (str): Description of `param1`.\n            param2 (:obj:`int`, optional): Description of `param2`. Multiple\n                lines are supported.\n            param3 (:obj:`list` of :obj:`str`): Description of `param3`.\n\n        \"\"\"", "\n", "# All params/args (lazy hack).", "\n", "for", "k", ",", "v", "in", "locals", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"self\"", "and", "k", "!=", "\"kwargs\"", "and", "\"__\"", "not", "in", "k", ":", "\n", "                ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n", "# Task.", "\n", "", "", "self", ".", "env_func", "=", "env_func", "\n", "self", ".", "ctrl_freq", "=", "ctrl_freq", "\n", "self", ".", "pyb_freq", "=", "pyb_freq", "\n", "self", ".", "deque_size", "=", "deque_size", "\n", "self", ".", "task", "=", "Task", "(", "task", ")", "\n", "self", ".", "task_info", "=", "task_info", "\n", "self", ".", "episode_len_sec", "=", "episode_len_sec", "\n", "self", ".", "discrete_dynamics", "=", "discrete_dynamics", "\n", "\n", "# iLQR iterations.", "\n", "self", ".", "max_iterations", "=", "max_iterations", "\n", "\n", "# iLQR policy update parameters. See [1] for details.", "\n", "self", ".", "lamb_factor", "=", "lamb_factor", "# Factor for scaling lambda", "\n", "self", ".", "lamb_max", "=", "lamb_max", "# Maximum lambda", "\n", "self", ".", "epsilon", "=", "epsilon", "# Tolerance for convergence", "\n", "\n", "# Stop iteration (to make sure that subsequent iteration number not", "\n", "# exceeding the first one)", "\n", "self", ".", "stop_iteration", "=", "False", "\n", "\n", "# Plot trajectory.", "\n", "self", ".", "plot_traj", "=", "plot_traj", "\n", "\n", "# Randomize initial state", "\n", "self", ".", "random_init", "=", "random_init", "\n", "\n", "# Plot trajectory.", "\n", "self", ".", "plot_traj", "=", "plot_traj", "\n", "\n", "# Save plot.", "\n", "self", ".", "save_plot", "=", "save_plot", "\n", "\n", "# Plot output directory.", "\n", "self", ".", "plot_dir", "=", "plot_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "plot_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "plot_dir", ")", "\n", "\n", "# Save data.", "\n", "", "self", ".", "save_data", "=", "save_data", "\n", "\n", "# Data output directory.", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "\n", "# Logging.", "\n", "", "self", ".", "logger", "=", "ExperimentLogger", "(", "output_dir", ")", "\n", "\n", "# Verbose.", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.close": [[143, 149], ["ilqr.iLQR.env.close", "ilqr.iLQR.logger.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Cleans up resources.\n\n        \"\"\"", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "self", ".", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.run_ilqr": [[150, 371], ["numpy.asarray", "numpy.asarray", "ilqr.iLQR.select_action", "ilqr.iLQR.env.step", "ilqr.iLQR.logger.info", "len", "print", "numpy.vstack", "numpy.vstack", "numpy.vstack", "print", "print", "print", "ilqr.iLQR.env.render", "frames_k.append", "numpy.vstack", "frames.append", "numpy.asarray.append", "numpy.asarray.append", "print", "print", "print", "print", "print", "numpy.diff", "print", "ilqr.iLQR.reset_env", "termcolor.colored", "termcolor.colored", "ilqr.iLQR.env.render", "termcolor.colored", "termcolor.colored", "termcolor.colored", "numpy.shape", "termcolor.colored", "numpy.shape", "numpy.shape", "print", "numpy.copy", "numpy.copy", "ilqr.iLQR.update_policy", "post_analysis", "numpy.asarray.mean", "numpy.asarray.std", "numpy.asarray.mean", "numpy.asarray.std", "get_arr_str", "print", "print", "print", "numpy.copy", "numpy.copy", "get_arr_str", "get_arr_str", "get_arr_str", "termcolor.colored", "print", "print", "numpy.copy", "numpy.copy", "ilqr.iLQR.update_policy", "termcolor.colored", "print", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.select_action", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.reset_env", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.update_policy", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.post_analysis", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr_utils.get_arr_str", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.update_policy"], ["", "def", "run_ilqr", "(", "self", ",", "render", "=", "False", ",", "logging", "=", "False", ")", ":", "\n", "        ", "\"\"\"Run iLQR to iteratively update policy for each time step k\n\n        Args:\n            render (bool): Flag to save frames for visualization.\n            logging (bool): Flag to log results.\n\n        Returns:\n            ilqr_eval_results (dict): Dictionary containing the results from\n            each iLQR iteration.\n        \"\"\"", "\n", "# Snapshot env state", "\n", "# state_dict = self.env.state_dict()", "\n", "\n", "# Initialize iteration logging variables.", "\n", "ite_returns", ",", "ite_lengths", ",", "ite_data", ",", "frames", "=", "[", "]", ",", "[", "]", ",", "{", "}", ",", "[", "]", "\n", "\n", "# Initialize iteration and step counter.", "\n", "self", ".", "ite_counter", "=", "0", "\n", "self", ".", "k", "=", "0", "\n", "\n", "# Initialize step size", "\n", "self", ".", "lamb", "=", "1.0", "\n", "\n", "# Set update unstable flag to False", "\n", "self", ".", "update_unstable", "=", "False", "\n", "\n", "# Initialize list of frames for each iteration", "\n", "frames_k", "=", "[", "]", "\n", "\n", "# Loop through iLQR iterations", "\n", "while", "self", ".", "ite_counter", "<", "self", ".", "max_iterations", ":", "\n", "\n", "# Current goal.", "\n", "            ", "if", "self", ".", "task", "==", "Task", ".", "STABILIZATION", ":", "\n", "                ", "current_goal", "=", "self", ".", "x_0", "\n", "", "elif", "self", ".", "task", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "                ", "current_goal", "=", "self", ".", "x_0", "[", "self", ".", "k", "]", "\n", "\n", "# Compute input.", "\n", "", "action", "=", "self", ".", "select_action", "(", "self", ".", "env", ".", "state", ",", "self", ".", "k", ")", "\n", "\n", "# Save rollout data.", "\n", "if", "self", ".", "k", "==", "0", ":", "\n", "# Initialize state and input stack.", "\n", "                ", "state_stack", "=", "self", ".", "env", ".", "state", "\n", "input_stack", "=", "action", "\n", "goal_stack", "=", "current_goal", "\n", "\n", "# Print initial state.", "\n", "print", "(", "colored", "(", "\"initial state: \"", "+", "get_arr_str", "(", "self", ".", "env", ".", "state", ")", ",", "\"green\"", ")", ")", "\n", "\n", "if", "self", ".", "ite_counter", "==", "0", ":", "\n", "                    ", "self", ".", "init_state", "=", "self", ".", "env", ".", "state", "\n", "", "", "else", ":", "\n", "# Save state and input.", "\n", "                ", "state_stack", "=", "np", ".", "vstack", "(", "(", "state_stack", ",", "self", ".", "env", ".", "state", ")", ")", "\n", "input_stack", "=", "np", ".", "vstack", "(", "(", "input_stack", ",", "action", ")", ")", "\n", "goal_stack", "=", "np", ".", "vstack", "(", "(", "goal_stack", ",", "current_goal", ")", ")", "\n", "\n", "# Step forward.", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "# Update step counter.", "\n", "self", ".", "k", "+=", "1", "\n", "# print(\"step\", k, \"done\", done)", "\n", "\n", "# Print out.", "\n", "if", "self", ".", "verbose", "and", "self", ".", "k", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "colored", "(", "\"episode: %d step: %d\"", "%", "(", "self", ".", "ite_counter", ",", "self", ".", "k", ")", ",", "\"green\"", ")", ")", "\n", "print", "(", "\"state: \"", "+", "get_arr_str", "(", "self", ".", "env", ".", "state", ")", ")", "\n", "print", "(", "\"action: \"", "+", "get_arr_str", "(", "self", ".", "env", ".", "state", ")", "+", "\"\\n\"", ")", "\n", "\n", "# Save frame for visualization.", "\n", "", "if", "render", ":", "\n", "                ", "self", ".", "env", ".", "render", "(", ")", "\n", "frames_k", ".", "append", "(", "self", ".", "env", ".", "render", "(", "\"rgb_array\"", ")", ")", "\n", "\n", "# Save data and update policy if iteration is finished.", "\n", "", "if", "done", ":", "\n", "# Push last state and input to stack.", "\n", "# Last input is not really used.", "\n", "                ", "state_stack", "=", "np", ".", "vstack", "(", "(", "state_stack", ",", "self", ".", "env", ".", "state", ")", ")", "\n", "# input_stack = np.vstack((input_stack, action))", "\n", "# goal_stack = np.vstack((goal_stack, current_goal))", "\n", "\n", "# Add set of k frames to frames (for all episodes)", "\n", "frames", ".", "append", "(", "frames_k", ")", "\n", "frames_k", "=", "[", "]", "\n", "\n", "# Update iteration return and length lists.", "\n", "assert", "\"episode\"", "in", "info", "\n", "ite_returns", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"r\"", "]", ")", "\n", "ite_lengths", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"l\"", "]", ")", "\n", "ite_data", "[", "\"ite%d_state\"", "%", "self", ".", "ite_counter", "]", "=", "state_stack", "\n", "ite_data", "[", "\"ite%d_input\"", "%", "self", ".", "ite_counter", "]", "=", "input_stack", "\n", "\n", "# Print iteration reward.", "\n", "print", "(", "colored", "(", "\"final state: \"", "+", "get_arr_str", "(", "self", ".", "env", ".", "state", ")", ",", "\"green\"", ")", ")", "\n", "print", "(", "colored", "(", "\"iteration %d reward %.4f\"", "%", "\n", "(", "self", ".", "ite_counter", ",", "info", "[", "\"episode\"", "]", "[", "\"r\"", "]", ")", ",", "\"green\"", ")", ")", "\n", "print", "(", "colored", "(", "\"--------------------------\"", ",", "\"green\"", ")", ")", "\n", "\n", "# Break if the first iteration is not successful", "\n", "if", "self", ".", "task", "==", "Task", ".", "STABILIZATION", ":", "\n", "                    ", "if", "self", ".", "ite_counter", "==", "0", "and", "not", "info", "[", "\"goal_reached\"", "]", ":", "\n", "                        ", "print", "(", "colored", "(", "\"The initial policy might be unstable. \"", "\n", "+", "\"Break from iLQR updates.\"", ",", "\"red\"", ")", ")", "\n", "break", "\n", "\n", "# Maximum episode length.", "\n", "", "", "self", ".", "num_steps", "=", "np", ".", "shape", "(", "input_stack", ")", "[", "0", "]", "\n", "self", ".", "episode_len_sec", "=", "self", ".", "num_steps", "*", "self", ".", "stepsize", "\n", "print", "(", "colored", "(", "\"Maximum episode length: %d steps!\"", "%", "(", "self", ".", "num_steps", ")", ",", "\"blue\"", ")", ")", "\n", "print", "(", "np", ".", "shape", "(", "input_stack", ")", ",", "np", ".", "shape", "(", "self", ".", "gains_fb", ")", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\n", "# Check if cost is increased and update lambda correspondingly", "\n", "delta_reward", "=", "np", ".", "diff", "(", "ite_returns", "[", "-", "2", ":", "]", ")", "\n", "if", "self", ".", "ite_counter", "==", "0", ":", "\n", "\n", "# Save best iteration.", "\n", "                    ", "print", "(", "\"Save iteration gains. Best iteration %d\"", "%", "self", ".", "ite_counter", ")", "\n", "self", ".", "best_iteration", "=", "self", ".", "ite_counter", "\n", "self", ".", "input_ff_best", "=", "np", ".", "copy", "(", "self", ".", "input_ff", ")", "\n", "self", ".", "gains_fb_best", "=", "np", ".", "copy", "(", "self", ".", "gains_fb", ")", "\n", "\n", "# Update controller gains", "\n", "self", ".", "update_policy", "(", "state_stack", ",", "input_stack", ")", "\n", "\n", "# Initialize improved flag.", "\n", "self", ".", "prev_ite_improved", "=", "False", "\n", "\n", "", "elif", "delta_reward", "<", "0.0", "or", "self", ".", "update_unstable", ":", "\n", "# If cost is increased, increase lambda", "\n", "                    ", "self", ".", "lamb", "*=", "self", ".", "lamb_factor", "\n", "\n", "# Reset feedforward term and controller gain to that from", "\n", "# the previous iteration.", "\n", "print", "(", "\"Cost increased by %.2f. \"", "%", "-", "delta_reward", "\n", "+", "\"Set feedforward term and controller gain to that \"", "\n", "\"from the previous iteration. \"", "\n", "\"Increased lambda to %.2f.\"", "%", "self", ".", "lamb", ")", "\n", "print", "(", "\"Current policy is from iteration %d.\"", "%", "self", ".", "best_iteration", ")", "\n", "self", ".", "input_ff", "=", "np", ".", "copy", "(", "self", ".", "input_ff_best", ")", "\n", "self", ".", "gains_fb", "=", "np", ".", "copy", "(", "self", ".", "gains_fb_best", ")", "\n", "\n", "# Set improved flag to False.", "\n", "self", ".", "prev_ite_improved", "=", "False", "\n", "\n", "# Break if maximum lambda is reached.", "\n", "if", "self", ".", "lamb", ">", "self", ".", "lamb_max", ":", "\n", "                        ", "print", "(", "colored", "(", "\"Maximum lambda reached.\"", ",", "\"red\"", ")", ")", "\n", "self", ".", "lamb", "=", "self", ".", "lamb_max", "\n", "\n", "# Reset update_unstable flag to False.", "\n", "", "self", ".", "update_unstable", "=", "False", "\n", "\n", "", "elif", "delta_reward", ">=", "0.0", ":", "\n", "# If cost is reduced, reduce lambda.", "\n", "# Smoother convergence if not scaling down lambda.", "\n", "# self.lamb /= self.lamb_factor", "\n", "\n", "# Save feedforward term and gain and state and input stacks.", "\n", "                    ", "print", "(", "\"Save iteration gains. Best iteration %d\"", "%", "self", ".", "ite_counter", ")", "\n", "self", ".", "best_iteration", "=", "self", ".", "ite_counter", "\n", "self", ".", "input_ff_best", "=", "np", ".", "copy", "(", "self", ".", "input_ff", ")", "\n", "self", ".", "gains_fb_best", "=", "np", ".", "copy", "(", "self", ".", "gains_fb", ")", "\n", "\n", "# Check consecutive reward increment (cost decrement).", "\n", "if", "delta_reward", "<", "self", ".", "epsilon", "and", "self", ".", "prev_ite_improved", ":", "\n", "# Cost converged.", "\n", "                        ", "print", "(", "colored", "(", "\"iLQR cost converged with a tolerance \"", "\n", "+", "\"of %.2f.\"", "%", "self", ".", "epsilon", ",", "\"yellow\"", ")", ")", "\n", "break", "\n", "\n", "# Set improved flag to True.", "\n", "", "self", ".", "prev_ite_improved", "=", "True", "\n", "\n", "# Update controller gains", "\n", "self", ".", "update_policy", "(", "state_stack", ",", "input_stack", ")", "\n", "\n", "# Reset iteration and step counter.", "\n", "", "self", ".", "ite_counter", "+=", "1", "\n", "self", ".", "k", "=", "0", "\n", "\n", "# Reset environment.", "\n", "print", "(", "\"Reset environment.\"", ")", "\n", "self", ".", "reset_env", "(", ")", "\n", "\n", "# Post analysis.", "\n", "if", "self", ".", "plot_traj", "or", "self", ".", "save_plot", "or", "self", ".", "save_data", ":", "\n", "                    ", "analysis_data", "=", "post_analysis", "(", "goal_stack", ",", "state_stack", ",", "\n", "input_stack", ",", "self", ".", "env", ",", "0", ",", "\n", "self", ".", "ep_counter", ",", "\n", "self", ".", "plot_traj", ",", "\n", "self", ".", "save_plot", ",", "\n", "self", ".", "save_data", ",", "\n", "self", ".", "plot_dir", ",", "self", ".", "data_dir", ")", "\n", "\n", "# Collect evaluation results.", "\n", "", "", "", "ite_lengths", "=", "np", ".", "asarray", "(", "ite_lengths", ")", "\n", "ite_returns", "=", "np", ".", "asarray", "(", "ite_returns", ")", "\n", "if", "logging", ":", "\n", "            ", "msg", "=", "\"****** Evaluation ******\\n\"", "\n", "msg", "+=", "\"eval_ep_length {:.2f} +/- {:.2f} | \"", "+", "\"eval_ep_return {:.3f} +/- {:.3f}\\n\"", ".", "format", "(", "\n", "ite_lengths", ".", "mean", "(", ")", ",", "ite_lengths", ".", "std", "(", ")", ",", "ite_returns", ".", "mean", "(", ")", ",", "\n", "ite_returns", ".", "std", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n", "", "ilqr_eval_results", "=", "{", "\n", "\"ite_returns\"", ":", "ite_returns", ",", "\n", "\"ite_lengths\"", ":", "ite_lengths", ",", "\n", "\"ite_data\"", ":", "ite_data", "\n", "}", "\n", "\n", "if", "len", "(", "frames", ")", ">", "0", ":", "\n", "            ", "ilqr_eval_results", "[", "\"frames\"", "]", "=", "frames", "\n", "\n", "", "return", "ilqr_eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.update_policy": [[372, 471], ["print", "loss", "loss_k[].toarray", "loss_k[].toarray().transpose", "loss_k[].toarray().transpose", "reversed", "termcolor.colored", "range", "print", "ilqr.iLQR.model.df_func", "discretize_linear_system", "loss", "loss_k[].toarray", "loss_k[].toarray().transpose", "loss_k[].toarray().transpose", "loss_k[].toarray().transpose", "loss_k[].toarray().transpose", "loss_k[].toarray().transpose", "loss_k[].toarray", "loss_k[].toarray", "numpy.shape", "numpy.shape", "numpy.shape", "df_k[].toarray", "df_k[].toarray", "Bd_k.transpose().dot", "Bd_k.transpose().dot", "Bd_k.transpose().dot", "numpy.linalg.eig", "numpy.dot", "print", "loss_k[].toarray", "loss_k[].toarray", "loss_k[].toarray", "loss_k[].toarray", "loss_k[].toarray", "loss_k[].toarray().transpose.dot", "loss_k[].toarray().transpose.dot", "numpy.isinf", "numpy.isnan", "numpy.dot", "numpy.dot.dot", "numpy.dot.dot", "K.dot", "G.transpose().dot", "G.transpose().dot", "duff.transpose().dot", "termcolor.colored", "Bd_k.transpose", "Bd_k.transpose", "Bd_k.transpose", "numpy.sum", "numpy.sum", "H.transpose", "numpy.diag", "K.transpose().dot", "K.transpose().dot", "K.transpose().dot", "G.transpose", "K.transpose().dot", "G.transpose", "duff.transpose().dot", "duff.transpose", "Ad_k.transpose().dot", "H.dot", "K.transpose", "Ad_k.transpose().dot", "H.dot", "K.transpose", "H.dot", "loss_k[].toarray().transpose.dot", "K.transpose", "K.transpose", "duff.transpose", "Ad_k.transpose", "Ad_k.transpose"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.discretize_linear_system"], ["", "def", "update_policy", "(", "self", ",", "state_stack", ",", "input_stack", ")", ":", "\n", "        ", "\"\"\"One-line description.\n\n        Args:\n            state_stack (np.array): States from previous rollout.\n            input_stack (np.array): Inputs from previous rollout.\n\n        \"\"\"", "\n", "print", "(", "colored", "(", "\"UPDATE POLICY\"", ",", "\"blue\"", ")", ")", "\n", "\n", "# Get symbolic loss function which also contains the necessary Jacobian", "\n", "# and Hessian of the loss w.r.t. state and input.", "\n", "loss", "=", "self", ".", "model", ".", "loss", "\n", "\n", "# Initialize backward pass.", "\n", "state_k", "=", "state_stack", "[", "-", "1", "]", "\n", "input_k", "=", "self", ".", "env", ".", "U_GOAL", "\n", "\n", "if", "self", ".", "task", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "x_goal", "=", "self", ".", "x_0", "\n", "", "elif", "self", ".", "task", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "            ", "x_goal", "=", "self", ".", "x_0", "[", "-", "1", "]", "\n", "", "loss_k", "=", "loss", "(", "x", "=", "state_k", ",", "\n", "u", "=", "input_k", ",", "\n", "Xr", "=", "x_goal", ",", "\n", "Ur", "=", "self", ".", "env", ".", "U_GOAL", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "\n", "s", "=", "loss_k", "[", "\"l\"", "]", ".", "toarray", "(", ")", "\n", "Sv", "=", "loss_k", "[", "\"l_x\"", "]", ".", "toarray", "(", ")", ".", "transpose", "(", ")", "\n", "Sm", "=", "loss_k", "[", "\"l_xx\"", "]", ".", "toarray", "(", ")", ".", "transpose", "(", ")", "\n", "\n", "# Backward pass.", "\n", "for", "k", "in", "reversed", "(", "range", "(", "self", ".", "num_steps", ")", ")", ":", "\n", "            ", "print", "(", "k", ",", "self", ".", "num_steps", ",", "np", ".", "shape", "(", "state_stack", ")", ",", "np", ".", "shape", "(", "input_stack", ")", ",", "np", ".", "shape", "(", "self", ".", "gains_fb", ")", ")", "\n", "# Get current operating point.", "\n", "state_k", "=", "state_stack", "[", "k", "]", "\n", "input_k", "=", "input_stack", "[", "k", "]", "\n", "\n", "# Linearized dynamics about (x_k, u_k).", "\n", "df_k", "=", "self", ".", "model", ".", "df_func", "(", "state_k", ",", "input_k", ")", "\n", "Ac_k", ",", "Bc_k", "=", "df_k", "[", "0", "]", ".", "toarray", "(", ")", ",", "df_k", "[", "1", "]", ".", "toarray", "(", ")", "\n", "Ad_k", ",", "Bd_k", "=", "discretize_linear_system", "(", "Ac_k", ",", "Bc_k", ",", "self", ".", "model", ".", "dt", ")", "\n", "\n", "# Get symbolic loss function that includes the necessary Jacobian", "\n", "# and Hessian of the loss w.r.t. state and input.", "\n", "if", "self", ".", "task", "==", "Task", ".", "STABILIZATION", ":", "\n", "                ", "x_goal", "=", "self", ".", "x_0", "\n", "", "elif", "self", ".", "task", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "                ", "x_goal", "=", "self", ".", "x_0", "[", "k", "]", "\n", "", "loss_k", "=", "loss", "(", "x", "=", "state_k", ",", "\n", "u", "=", "input_k", ",", "\n", "Xr", "=", "x_goal", ",", "\n", "Ur", "=", "self", ".", "env", ".", "U_GOAL", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "\n", "\n", "# Quadratic approximation of cost.", "\n", "q", "=", "loss_k", "[", "\"l\"", "]", ".", "toarray", "(", ")", "# l", "\n", "Qv", "=", "loss_k", "[", "\"l_x\"", "]", ".", "toarray", "(", ")", ".", "transpose", "(", ")", "# dl/dx", "\n", "Qm", "=", "loss_k", "[", "\"l_xx\"", "]", ".", "toarray", "(", ")", ".", "transpose", "(", ")", "# ddl/dxdx", "\n", "Rv", "=", "loss_k", "[", "\"l_u\"", "]", ".", "toarray", "(", ")", ".", "transpose", "(", ")", "# dl/du", "\n", "Rm", "=", "loss_k", "[", "\"l_uu\"", "]", ".", "toarray", "(", ")", ".", "transpose", "(", ")", "# ddl/dudu", "\n", "Pm", "=", "loss_k", "[", "\"l_xu\"", "]", ".", "toarray", "(", ")", ".", "transpose", "(", ")", "# ddl/dudx", "\n", "\n", "# Control dependent terms of cost function.", "\n", "g", "=", "Rv", "+", "Bd_k", ".", "transpose", "(", ")", ".", "dot", "(", "Sv", ")", "\n", "G", "=", "Pm", "+", "Bd_k", ".", "transpose", "(", ")", ".", "dot", "(", "Sm", ".", "dot", "(", "Ad_k", ")", ")", "\n", "H", "=", "Rm", "+", "Bd_k", ".", "transpose", "(", ")", ".", "dot", "(", "Sm", ".", "dot", "(", "Bd_k", ")", ")", "\n", "\n", "# Trick to make sure H is well-conditioned for inversion", "\n", "if", "not", "(", "np", ".", "isinf", "(", "np", ".", "sum", "(", "H", ")", ")", "or", "np", ".", "isnan", "(", "np", ".", "sum", "(", "H", ")", ")", ")", ":", "\n", "                ", "H", "=", "(", "H", "+", "H", ".", "transpose", "(", ")", ")", "/", "2", "\n", "H_eval", ",", "H_evec", "=", "np", ".", "linalg", ".", "eig", "(", "H", ")", "\n", "H_eval", "[", "H_eval", "<", "0", "]", "=", "0.0", "\n", "H_eval", "+=", "self", ".", "lamb", "\n", "H_inv", "=", "np", ".", "dot", "(", "H_evec", ",", "np", ".", "dot", "(", "np", ".", "diag", "(", "1.0", "/", "H_eval", ")", ",", "H_evec", ".", "T", ")", ")", "\n", "\n", "# Update controller gains.", "\n", "duff", "=", "-", "H_inv", ".", "dot", "(", "g", ")", "\n", "K", "=", "-", "H_inv", ".", "dot", "(", "G", ")", "\n", "\n", "# Update control input.", "\n", "input_ff_k", "=", "input_k", "+", "duff", "[", ":", ",", "0", "]", "-", "K", ".", "dot", "(", "state_k", ")", "\n", "self", ".", "input_ff", "[", ":", ",", "k", "]", "=", "input_ff_k", "\n", "self", ".", "gains_fb", "[", "k", "]", "=", "K", "\n", "\n", "# Update s variables for time step k.", "\n", "Sm", "=", "Qm", "+", "Ad_k", ".", "transpose", "(", ")", ".", "dot", "(", "Sm", ".", "dot", "(", "Ad_k", ")", ")", "+", "K", ".", "transpose", "(", ")", ".", "dot", "(", "H", ".", "dot", "(", "K", ")", ")", "+", "K", ".", "transpose", "(", ")", ".", "dot", "(", "G", ")", "+", "G", ".", "transpose", "(", ")", ".", "dot", "(", "K", ")", "\n", "Sv", "=", "Qv", "+", "Ad_k", ".", "transpose", "(", ")", ".", "dot", "(", "Sv", ")", "+", "K", ".", "transpose", "(", ")", ".", "dot", "(", "H", ".", "dot", "(", "duff", ")", ")", "+", "K", ".", "transpose", "(", ")", ".", "dot", "(", "g", ")", "+", "G", ".", "transpose", "(", ")", ".", "dot", "(", "duff", ")", "\n", "s", "=", "q", "+", "s", "+", "0.5", "*", "duff", ".", "transpose", "(", ")", ".", "dot", "(", "H", ".", "dot", "(", "duff", ")", ")", "+", "duff", ".", "transpose", "(", ")", ".", "dot", "(", "g", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "update_unstable", "=", "True", "\n", "print", "(", "colored", "(", "\"Policy update unstable. Terminate update.\"", ",", "\"red\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.select_action": [[472, 514], ["print", "gains_fb.dot", "gains_fb.reshape", "input_ff.reshape", "numpy.append", "numpy.append", "ilqr.iLQR.gains_fb[].dot", "compute_lqr_gain", "print", "gains_fb.reshape", "input_ff.reshape", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.compute_lqr_gain"], ["", "", "", "def", "select_action", "(", "self", ",", "x", ",", "k", ")", ":", "\n", "        ", "\"\"\"Control input u = -K x.\n\n        Args:\n            x (np.array): Current state of the system.\n            k (int): Current time step.\n\n        Returns:\n            action (np.array): Action computed based on current policy.\n\n        \"\"\"", "\n", "if", "self", ".", "ite_counter", "==", "0", ":", "\n", "# Compute gain for the first iteration.", "\n", "# action = -self.gain @ (x - self.x_0) + self.u_0", "\n", "            ", "if", "self", ".", "task", "==", "Task", ".", "STABILIZATION", ":", "\n", "                ", "gains_fb", "=", "-", "self", ".", "gain", "\n", "input_ff", "=", "self", ".", "gain", "@", "self", ".", "x_0", "+", "self", ".", "u_0", "\n", "\n", "", "elif", "self", ".", "task", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "                ", "self", ".", "gain", "=", "compute_lqr_gain", "(", "self", ".", "model", ",", "self", ".", "x_0", "[", "k", "]", ",", "\n", "self", ".", "u_0", ",", "self", ".", "Q", ",", "self", ".", "R", ",", "\n", "self", ".", "discrete_dynamics", ")", "\n", "gains_fb", "=", "-", "self", ".", "gain", "\n", "input_ff", "=", "self", ".", "gain", "@", "self", ".", "x_0", "[", "k", "]", "+", "self", ".", "u_0", "\n", "", "else", ":", "\n", "                ", "print", "(", "colored", "(", "\"Incorrect task specified.\"", ",", "\"red\"", ")", ")", "\n", "\n", "# Compute action", "\n", "", "action", "=", "gains_fb", ".", "dot", "(", "x", ")", "+", "input_ff", "\n", "\n", "# Save gains and feedforward term", "\n", "if", "self", ".", "k", "==", "0", ":", "\n", "                ", "self", ".", "gains_fb", "=", "gains_fb", ".", "reshape", "(", "1", ",", "self", ".", "model", ".", "nu", ",", "self", ".", "model", ".", "nx", ")", "\n", "self", ".", "input_ff", "=", "input_ff", ".", "reshape", "(", "self", ".", "model", ".", "nu", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "gains_fb", "=", "np", ".", "append", "(", "self", ".", "gains_fb", ",", "gains_fb", ".", "reshape", "(", "1", ",", "self", ".", "model", ".", "nu", ",", "self", ".", "model", ".", "nx", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "input_ff", "=", "np", ".", "append", "(", "self", ".", "input_ff", ",", "input_ff", ".", "reshape", "(", "self", ".", "model", ".", "nu", ",", "1", ")", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "k", ",", "self", ".", "gains_fb", "[", "k", "]", ")", "\n", "action", "=", "self", ".", "gains_fb", "[", "k", "]", ".", "dot", "(", "x", ")", "+", "self", ".", "input_ff", "[", ":", ",", "k", "]", "\n", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.init_env": [[515, 543], ["ilqr.iLQR.env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "get_cost_weight_matrix", "get_cost_weight_matrix", "ilqr.iLQR.env.set_cost_function_param", "ilqr.iLQR.env.reset", "compute_lqr_gain"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.get_cost_weight_matrix", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.get_cost_weight_matrix", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.set_cost_function_param", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.lqr.LQR.compute_lqr_gain"], ["", "def", "init_env", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", "=", "self", ".", "env_func", "(", "randomized_init", "=", "self", ".", "random_init", ",", "\n", "cost", "=", "Cost", ".", "QUADRATIC", ",", "\n", "randomized_inertial_prop", "=", "False", ",", "\n", "episode_len_sec", "=", "self", ".", "episode_len_sec", ",", "\n", "task", "=", "self", ".", "task", ",", "\n", "task_info", "=", "self", ".", "task_info", ",", "\n", "ctrl_freq", "=", "self", ".", "ctrl_freq", ",", "\n", "pyb_freq", "=", "self", ".", "pyb_freq", "\n", ")", "\n", "self", ".", "env", "=", "RecordEpisodeStatistics", "(", "self", ".", "env", ",", "self", ".", "deque_size", ")", "\n", "\n", "# Controller params.", "\n", "self", ".", "model", "=", "self", ".", "env", ".", "symbolic", "\n", "self", ".", "Q", "=", "get_cost_weight_matrix", "(", "self", ".", "q_lqr", ",", "self", ".", "model", ".", "nx", ")", "\n", "self", ".", "R", "=", "get_cost_weight_matrix", "(", "self", ".", "r_lqr", ",", "self", ".", "model", ".", "nu", ")", "\n", "self", ".", "env", ".", "set_cost_function_param", "(", "self", ".", "Q", ",", "self", ".", "R", ")", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# Linearize at operating point (equilibrium for stabilization).", "\n", "self", ".", "x_0", ",", "self", ".", "u_0", "=", "self", ".", "env", ".", "X_GOAL", ",", "self", ".", "env", ".", "U_GOAL", "\n", "\n", "if", "self", ".", "task", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "self", ".", "gain", "=", "compute_lqr_gain", "(", "self", ".", "model", ",", "self", ".", "x_0", ",", "self", ".", "u_0", ",", "\n", "self", ".", "Q", ",", "self", ".", "R", ",", "self", ".", "discrete_dynamics", ")", "\n", "\n", "# Control stepsize.", "\n", "", "self", ".", "stepsize", "=", "self", ".", "model", ".", "dt", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.reset_env": [[544, 569], ["print", "ilqr.iLQR.env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "get_cost_weight_matrix", "get_cost_weight_matrix", "ilqr.iLQR.env.set_cost_function_param", "ilqr.iLQR.env.reset", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.get_cost_weight_matrix", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.get_cost_weight_matrix", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.set_cost_function_param", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["", "def", "reset_env", "(", "self", ")", ":", "\n", "        ", "'''Reset environment between iLQR iterations.'''", "\n", "\n", "print", "(", "colored", "(", "\"Set maximum episode length to %.3f\"", "%", "self", ".", "episode_len_sec", ",", "\"blue\"", ")", ")", "\n", "self", ".", "env", "=", "self", ".", "env_func", "(", "init_state", "=", "self", ".", "init_state", ",", "\n", "randomized_init", "=", "False", ",", "\n", "cost", "=", "Cost", ".", "QUADRATIC", ",", "\n", "randomized_inertial_prop", "=", "False", ",", "\n", "episode_len_sec", "=", "self", ".", "episode_len_sec", ",", "\n", "task", "=", "self", ".", "task", ",", "\n", "task_info", "=", "self", ".", "task_info", ",", "\n", "ctrl_freq", "=", "self", ".", "ctrl_freq", ",", "\n", "pyb_freq", "=", "self", ".", "pyb_freq", "\n", ")", "\n", "self", ".", "env", "=", "RecordEpisodeStatistics", "(", "self", ".", "env", ",", "self", ".", "deque_size", ")", "\n", "\n", "# Controller params.", "\n", "self", ".", "model", "=", "self", ".", "env", ".", "symbolic", "\n", "self", ".", "Q", "=", "get_cost_weight_matrix", "(", "self", ".", "q_lqr", ",", "self", ".", "model", ".", "nx", ")", "\n", "self", ".", "R", "=", "get_cost_weight_matrix", "(", "self", ".", "r_lqr", ",", "self", ".", "model", ".", "nu", ")", "\n", "self", ".", "env", ".", "set_cost_function_param", "(", "self", ".", "Q", ",", "self", ".", "R", ")", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# Linearize at operating point (equilibrium for stabilization).", "\n", "self", ".", "x_0", ",", "self", ".", "u_0", "=", "self", ".", "env", ".", "X_GOAL", ",", "self", ".", "env", ".", "U_GOAL", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.run": [[570, 637], ["range", "numpy.asarray", "numpy.asarray", "ilqr.iLQR.init_env", "ilqr.iLQR.run_ilqr", "numpy.asarray.append", "numpy.asarray.append", "print", "print", "ilqr.iLQR.logger.info", "frames.extend", "termcolor.colored", "termcolor.colored", "numpy.savetxt", "len", "numpy.asarray", "numpy.array", "numpy.asarray.mean", "numpy.asarray.std", "numpy.asarray.mean", "numpy.asarray.std"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.init_env", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.lqr.ilqr.iLQR.run_ilqr", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info"], ["", "def", "run", "(", "self", ",", "n_episodes", "=", "1", ",", "render", "=", "False", ",", "logging", "=", "False", ",", "verbose", "=", "False", ",", "use_adv", "=", "False", ")", ":", "\n", "        ", "\"\"\"Runs evaluation with current policy.\n\n        Args:\n            render (bool): Flag to save frames for visualization.\n            logging (bool): Flag to log results.\n\n        Returns:\n            eval_results (dict): Dictionary containing returns and data for each\n            evaluation trial.\n\n        \"\"\"", "\n", "# Initialize logging variables.", "\n", "ep_returns", ",", "ep_lengths", ",", "ep_fulldata", ",", "frames", "=", "[", "]", ",", "[", "]", ",", "{", "}", ",", "[", "]", "\n", "\n", "# Loop through episode.", "\n", "for", "self", ".", "ep_counter", "in", "range", "(", "self", ".", "eval_batch_size", ")", ":", "\n", "# Initialize new environment for the test trial.", "\n", "            ", "self", ".", "init_env", "(", ")", "\n", "\n", "# Run iLQR for the particular initial condition.", "\n", "ilqr_eval_results", "=", "self", ".", "run_ilqr", "(", "render", "=", "render", ",", "logging", "=", "logging", ")", "\n", "\n", "# Save the results from the last iteration for evaluation.", "\n", "ep_returns", ".", "append", "(", "ilqr_eval_results", "[", "\"ite_returns\"", "]", "[", "-", "1", "]", ")", "\n", "ep_lengths", ".", "append", "(", "ilqr_eval_results", "[", "\"ite_lengths\"", "]", "[", "-", "1", "]", ")", "\n", "ep_fulldata", "[", "\"run%d_data\"", "\n", "%", "self", ".", "ep_counter", "]", "=", "ilqr_eval_results", "[", "\"ite_data\"", "]", "\n", "if", "\"frames\"", "in", "ilqr_eval_results", ":", "\n", "                ", "frames", ".", "extend", "(", "np", ".", "asarray", "(", "ilqr_eval_results", "[", "\"frames\"", "]", "[", "-", "1", "]", ")", ")", "\n", "\n", "# Print episode reward.", "\n", "", "print", "(", "colored", "(", "\"Test Run %d reward %.4f\"", "%", "(", "self", ".", "ep_counter", ",", "ep_returns", "[", "-", "1", "]", ")", ",", "\"yellow\"", ")", ")", "\n", "print", "(", "colored", "(", "\"==========================\\n\"", ",", "\"yellow\"", ")", ")", "\n", "\n", "# Save reward", "\n", "if", "self", ".", "save_data", ":", "\n", "                ", "np", ".", "savetxt", "(", "self", ".", "data_dir", "+", "\"test%d_rewards.csv\"", "%", "self", ".", "ep_counter", ",", "np", ".", "array", "(", "[", "ep_returns", "[", "-", "1", "]", "]", ")", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%.8f'", ")", "\n", "\n", "# Collect evaluation results.", "\n", "", "", "ep_lengths", "=", "np", ".", "asarray", "(", "ep_lengths", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "ep_returns", ")", "\n", "\n", "# Log data.", "\n", "if", "logging", ":", "\n", "            ", "msg", "=", "\"****** Evaluation ******\\n\"", "\n", "msg", "+=", "\"eval_ep_length {:.2f} +/- {:.2f} | \"", "+", "\"eval_ep_return {:.3f} +/- {:.3f}\\n\"", ".", "format", "(", "\n", "ep_lengths", ".", "mean", "(", ")", ",", "ep_lengths", ".", "std", "(", ")", ",", "ep_returns", ".", "mean", "(", ")", ",", "\n", "ep_returns", ".", "std", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n", "# Save evaluation results.", "\n", "# Note: To retrieve the state and input trajectories, use the following", "\n", "# eval_results[\"ep_fulldata\"][\"run#_data\"][\"ite#_state\"]", "\n", "# eval_results[\"ep_fulldata\"][\"run#_data\"][\"ite#_input\"]", "\n", "", "eval_results", "=", "{", "\n", "\"ep_returns\"", ":", "ep_returns", ",", "\n", "\"ep_lengths\"", ":", "ep_lengths", ",", "\n", "\"ep_fulldata\"", ":", "ep_fulldata", "\n", "}", "\n", "\n", "# Save frames.", "\n", "if", "frames", "is", "not", "None", "and", "len", "(", "frames", ")", ">", "0", ":", "\n", "            ", "eval_results", "[", "\"frames\"", "]", "=", "frames", "\n", "\n", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf.plot_is_cbf": [[29, 57], ["enumerate", "numpy.linspace", "enumerate", "state_ids.keys", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.show", "matplotlib.plot", "len", "enumerate", "numpy.sin", "numpy.cos", "matplotlib.plot", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["def", "plot_is_cbf", "(", "infeasible_states", ",", "maximum_states", ")", ":", "\n", "# Plot feasible and infeasible points", "\n", "\n", "    ", "state_ids", "=", "{", "\"x_pos\"", ":", "0", ",", "\"x_dot\"", ":", "1", ",", "\"theta\"", ":", "2", ",", "\"theta_dot\"", ":", "3", "}", "\n", "max_states", "=", "{", "}", "\n", "for", "i", ",", "state_id", "in", "enumerate", "(", "state_ids", ".", "keys", "(", ")", ")", ":", "\n", "        ", "max_states", "[", "state_id", "]", "=", "maximum_states", "[", "i", "]", "\n", "\n", "", "phi", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "num", "=", "120", ")", "\n", "\n", "plots", "=", "[", "[", "\"x_pos\"", ",", "\"theta\"", "]", ",", "[", "\"theta\"", ",", "\"theta_dot\"", "]", ",", "[", "\"x_pos\"", ",", "\"x_dot\"", "]", "]", "\n", "\n", "for", "i", ",", "plot", "in", "enumerate", "(", "plots", ")", ":", "\n", "        ", "if", "plot", "[", "0", "]", "==", "\"theta\"", "and", "plot", "[", "1", "]", "==", "\"theta_dot\"", ":", "\n", "            ", "plt", ".", "plot", "(", "max_states", "[", "plot", "[", "0", "]", "]", "*", "np", ".", "sin", "(", "phi", ")", ",", "max_states", "[", "plot", "[", "1", "]", "]", "*", "np", ".", "cos", "(", "phi", ")", ",", "label", "=", "\"superlevel set\"", ")", "\n", "", "plt", ".", "xlabel", "(", "plot", "[", "0", "]", ")", "\n", "plt", ".", "ylabel", "(", "plot", "[", "1", "]", ")", "\n", "\n", "if", "len", "(", "infeasible_states", ")", ">", "0", ":", "\n", "            ", "for", "index", ",", "infeasible_state", "in", "enumerate", "(", "infeasible_states", ")", ":", "\n", "                ", "if", "index", "==", "0", ":", "\n", "                    ", "plt", ".", "plot", "(", "infeasible_state", "[", "state_ids", "[", "plot", "[", "0", "]", "]", "]", ",", "infeasible_state", "[", "state_ids", "[", "plot", "[", "1", "]", "]", "]", ",", "\"rx\"", ",", "\n", "label", "=", "\"infeasible state\"", ")", "\n", "", "else", ":", "\n", "                    ", "plt", ".", "plot", "(", "infeasible_state", "[", "state_ids", "[", "plot", "[", "0", "]", "]", "]", ",", "infeasible_state", "[", "state_ids", "[", "plot", "[", "1", "]", "]", "]", ",", "\"rx\"", ")", "\n", "\n", "", "", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf.plot_test": [[59, 99], ["enumerate", "range", "print", "numpy.linspace", "state_ids.keys", "len", "len", "isinstance", "matplotlib.legend", "matplotlib.show", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.ylabel", "enumerate", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "numpy.sin", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "", "def", "plot_test", "(", "stats_buffer", ",", "maximum_states", ")", ":", "\n", "    ", "state_ids", "=", "{", "\"state/x_pos\"", ":", "0", ",", "\"state/x_dot\"", ":", "1", ",", "\"state/theta\"", ":", "2", ",", "\"state/theta_dot\"", ":", "3", "}", "\n", "max_states", "=", "{", "}", "\n", "for", "i", ",", "state_id", "in", "enumerate", "(", "state_ids", ".", "keys", "(", ")", ")", ":", "\n", "        ", "max_states", "[", "state_id", "]", "=", "maximum_states", "[", "i", "]", "\n", "\n", "", "plots", "=", "[", "[", "\"t\"", ",", "[", "\"action/safe_input\"", ",", "\"action/unsafe_input\"", ",", "\"action/applied_input\"", "]", "]", ",", "\n", "[", "\"state/theta\"", ",", "\"state/theta_dot\"", "]", ",", "\n", "[", "\"state/x_pos\"", ",", "\"state/x_dot\"", "]", ",", "\n", "[", "\"state/x_pos\"", ",", "\"state/theta\"", "]", "]", "\n", "\n", "t", "=", "range", "(", "len", "(", "stats_buffer", "[", "plots", "[", "0", "]", "[", "1", "]", "[", "0", "]", "]", ")", ")", "\n", "print", "(", "\"Num time steps:\"", ",", "len", "(", "t", ")", ")", "\n", "\n", "phi", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "num", "=", "120", ")", "\n", "line_styles", "=", "[", "\"m-\"", ",", "\"c-\"", ",", "\"k--\"", "]", "\n", "\n", "for", "plot", "in", "plots", ":", "\n", "        ", "if", "plot", "[", "0", "]", "==", "\"t\"", ":", "\n", "            ", "plot_x", "=", "t", "\n", "plt", ".", "xlabel", "(", "\"step count\"", ")", "\n", "plt", ".", "ylabel", "(", "\"control input\"", ")", "\n", "", "else", ":", "\n", "            ", "plot_x", "=", "stats_buffer", "[", "plot", "[", "0", "]", "]", "\n", "if", "plot", "[", "0", "]", "==", "\"state/theta\"", "and", "plot", "[", "1", "]", "==", "\"state/theta_dot\"", ":", "\n", "                ", "plt", ".", "plot", "(", "max_states", "[", "plot", "[", "0", "]", "]", "*", "np", ".", "sin", "(", "phi", ")", ",", "max_states", "[", "plot", "[", "1", "]", "]", "*", "np", ".", "cos", "(", "phi", ")", ",", "\"b-\"", ",", "\n", "label", "=", "\"superlevel set\"", ")", "\n", "", "plt", ".", "xlabel", "(", "plot", "[", "0", "]", ")", "\n", "plt", ".", "ylabel", "(", "plot", "[", "1", "]", ")", "\n", "", "if", "isinstance", "(", "plot", "[", "1", "]", ",", "list", ")", ":", "\n", "            ", "for", "index", ",", "plot_y_id", "in", "enumerate", "(", "plot", "[", "1", "]", ")", ":", "\n", "                ", "plt", ".", "plot", "(", "plot_x", ",", "stats_buffer", "[", "plot_y_id", "]", ",", "line_styles", "[", "index", "]", ",", "label", "=", "plot_y_id", ")", "\n", "", "", "else", ":", "\n", "            ", "plot_y", "=", "stats_buffer", "[", "plot", "[", "1", "]", "]", "\n", "plt", ".", "plot", "(", "plot_x", ",", "plot_y", ")", "\n", "plt", ".", "plot", "(", "plot_x", "[", "0", "]", ",", "plot_y", "[", "0", "]", ",", "'gx'", ",", "label", "=", "\"start\"", ")", "\n", "plt", ".", "plot", "(", "plot_x", "[", "-", "1", "]", ",", "plot_y", "[", "-", "1", "]", ",", "'rx'", ",", "label", "=", "\"end\"", ")", "\n", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf.is_cbf": [[101, 166], ["safe_control_gym.utils.utils.set_device_from_config", "range", "functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.is_cbf", "safe_control_gym.utils.registration.make.close", "cbf.plot_is_cbf", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_device_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.is_cbf", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf.plot_is_cbf"], ["", "", "def", "is_cbf", "(", "config", ")", ":", "\n", "    ", "\"\"\"\n    Check if the provided CBF candidate is a CBF for the true system and the a priori system.\n    \"\"\"", "\n", "\n", "# Evaluation setup", "\n", "set_device_from_config", "(", "config", ")", "\n", "\n", "is_cbf", "=", "[", "False", "]", "*", "2", "\n", "maximum_states", "=", "[", "config", ".", "algo_config", ".", "x_pos_max", ",", "\n", "config", ".", "algo_config", ".", "x_vel_max", ",", "\n", "config", ".", "algo_config", ".", "theta_max", ",", "\n", "config", ".", "algo_config", ".", "theta_dot_max", "]", "\n", "\n", "# Check CBF for true system and the a priori system", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "print", "(", "\"--------------------------------------------------------\"", ")", "\n", "print", "(", "\"1. Check provided CBF candidate for the a priori system.\"", ")", "\n", "print", "(", "\"--------------------------------------------------------\"", ")", "\n", "", "elif", "i", "==", "1", ":", "\n", "            ", "print", "(", "\"--------------------------------------------------------\"", ")", "\n", "print", "(", "\"2. Check provided CBf candidate for the true system.\"", ")", "\n", "print", "(", "\"--------------------------------------------------------\"", ")", "\n", "\n", "# Define function to create task/env", "\n", "", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "# prior_prop=config.task_config.prior_prop,", "\n", "**", "config", ".", "task_config", ")", "\n", "\n", "# Create the controller/control_agent.", "\n", "control_agent", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "training", "=", "False", ",", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\n", "\"model_latest.pt\"", ")", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "device", "=", "config", ".", "device", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "\n", "control_agent", ".", "reset", "(", ")", "\n", "\n", "num_points", "=", "config", ".", "algo_config", ".", "num_points", "\n", "tolerance", "=", "config", ".", "algo_config", ".", "tolerance", "\n", "\n", "is_cbf", "[", "i", "]", ",", "infeasible_states", "=", "control_agent", ".", "is_cbf", "(", "num_points", "=", "num_points", ",", "tolerance", "=", "tolerance", ")", "\n", "control_agent", ".", "close", "(", ")", "\n", "\n", "plot_is_cbf", "(", "infeasible_states", ",", "maximum_states", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "# Switch to the true system for the next check", "\n", "            ", "config", ".", "task_config", ".", "prior_prop", "=", "None", "\n", "\n", "", "", "if", "is_cbf", "[", "0", "]", "and", "is_cbf", "[", "1", "]", ":", "\n", "        ", "print", "(", "\"------------------------------------------------------------------------------------------\"", ")", "\n", "print", "(", "\"The provided CBF candidate is potentially a CBF for both the true and the a priori system.\"", ")", "\n", "print", "(", "\"------------------------------------------------------------------------------------------\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"------------------------------------------------------------------------------------------\"", ")", "\n", "print", "(", "\"The provided CBF candidate is NOT a CBF for both the true and the a priori system.\"", ")", "\n", "print", "(", "\"------------------------------------------------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf.train": [[168, 219], ["safe_control_gym.utils.utils.set_device_from_config", "functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.learn", "safe_control_gym.utils.registration.make.close", "safe_control_gym.utils.registration.make.load", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_device_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load"], ["", "", "def", "train", "(", "config", ")", ":", "\n", "    ", "\"\"\"General training template.\n    \n    Usage:\n        * to start training, use with `--func train`.\n        * to restore from a previous training, additionally use `--restore {dir_path}` \n            where `dir_path` is the output folder from previous training.  \n\n    \"\"\"", "\n", "# Evaluation setup", "\n", "set_device_from_config", "(", "config", ")", "\n", "\n", "maximum_states", "=", "[", "config", ".", "algo_config", ".", "x_pos_max", ",", "\n", "config", ".", "algo_config", ".", "x_vel_max", ",", "\n", "config", ".", "algo_config", ".", "theta_max", ",", "\n", "config", ".", "algo_config", ".", "theta_dot_max", "]", "\n", "\n", "# Define function to create task/env", "\n", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "**", "config", ".", "task_config", ")", "\n", "\n", "unsafe_control_agent", "=", "make", "(", "config", ".", "algo_config", "[", "\"unsafe_controller\"", "]", ",", "\n", "env_func", ",", "\n", "training", "=", "False", ",", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"model_latest.pt\"", ")", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "device", "=", "config", ".", "device", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "\n", "config", ".", "algo_config", "[", "\"unsafe_controller\"", "]", "=", "unsafe_control_agent", "\n", "\n", "# Create the controller/control_agent.", "\n", "control_agent", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "training", "=", "False", ",", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\n", "\"model_latest.pt\"", ")", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "device", "=", "config", ".", "device", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "\n", "control_agent", ".", "reset", "(", ")", "\n", "if", "config", ".", "restore", ":", "\n", "        ", "control_agent", ".", "load", "(", "os", ".", "path", ".", "join", "(", "config", ".", "restore", ",", "\"model_latest.pt\"", ")", ")", "\n", "\n", "", "control_agent", ".", "learn", "(", ")", "\n", "control_agent", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf.test_policy": [[221, 275], ["safe_control_gym.utils.utils.set_device_from_config", "functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "safe_control_gym.utils.registration.make.close", "cbf.plot_test", "safe_control_gym.utils.registration.make.load", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_device_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf.plot_test", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load"], ["", "def", "test_policy", "(", "config", ")", ":", "\n", "    ", "\"\"\"Run the (trained) policy/controller for evaluation.\n    \n    Usage\n        * use with `--func test`.\n        * to test policy from a trained model checkpoint, additionally use \n            `--restore {dir_path}` where `dir_path` is folder to the trained model.\n        * to test un-trained policy (e.g. non-learning based), use as it is.\n\n    \"\"\"", "\n", "# Evaluation setup", "\n", "set_device_from_config", "(", "config", ")", "\n", "\n", "maximum_states", "=", "[", "config", ".", "algo_config", ".", "x_pos_max", ",", "\n", "config", ".", "algo_config", ".", "x_vel_max", ",", "\n", "config", ".", "algo_config", ".", "theta_max", ",", "\n", "config", ".", "algo_config", ".", "theta_dot_max", "]", "\n", "\n", "# Define function to create task/env", "\n", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "**", "config", ".", "task_config", ")", "\n", "\n", "unsafe_control_agent", "=", "make", "(", "config", ".", "algo_config", "[", "\"unsafe_controller\"", "]", ",", "\n", "env_func", ",", "\n", "training", "=", "False", ",", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"model_latest.pt\"", ")", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "device", "=", "config", ".", "device", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "\n", "config", ".", "algo_config", "[", "\"unsafe_controller\"", "]", "=", "unsafe_control_agent", "\n", "\n", "# Create the controller/control_agent.", "\n", "control_agent", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "training", "=", "False", ",", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\n", "\"model_latest.pt\"", ")", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "device", "=", "config", ".", "device", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "\n", "control_agent", ".", "reset", "(", ")", "\n", "if", "config", ".", "restore", ":", "\n", "        ", "control_agent", ".", "load", "(", "os", ".", "path", ".", "join", "(", "config", ".", "restore", ",", "\"model_latest.pt\"", ")", ")", "\n", "\n", "", "stats_buffer", "=", "control_agent", ".", "run", "(", "logging", "=", "True", ")", "\n", "control_agent", ".", "close", "(", ")", "\n", "\n", "plot_test", "(", "stats_buffer", ",", "maximum_states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.__init__": [[22, 92], ["custom_args.items", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "cbf_qp.CBF_QP.env.constraints.get_input_constraint_symbolic_models", "cbf_qp.CBF_QP.is_control_affine", "safe_control_gym.controllers.cbf.cbf_qp_utils.cbf_cartpole", "cbf_qp.CBF_QP.get_lie_derivative", "safe_control_gym.controllers.cbf.cbf_qp_utils.linear_function", "safe_control_gym.math_and_models.neural_networks.MLP", "torch.optim.Adam", "int", "safe_control_gym.controllers.cbf.cbf_qp_utils.CBFBuffer", "safe_control_gym.utils.logging.ExperimentLogger", "cbf_qp.CBF_QP.mlp.parameters"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_input_constraint_symbolic_models", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.is_control_affine", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.cbf_cartpole", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.get_lie_derivative", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.linear_function"], ["    ", "def", "__init__", "(", "self", ",", "\n", "env_func", ",", "\n", "unsafe_controller", "=", "None", ",", "\n", "# Runner args.", "\n", "deque_size", "=", "10", ",", "\n", "eval_batch_size", "=", "1", ",", "\n", "output_dir", "=", "\"results/temp\"", ",", "\n", "**", "custom_args", ")", ":", "\n", "        ", "\"\"\"\n        CBF-QP controller with learned Lie derivative: The CBF's superlevel set defines a positively control invariant\n        set. A QP based on the CBF's Lie derivative with respect to the dynamics allows to filter arbitrary control\n        inputs to keep the system inside the CBF's superlevel set. Due to model mismatch, the Lie derivative is also\n        incorrect. This approach learns the error in the Lie derivative from multiple experiments to satisfy the\n        Lie derivative condition in the QP for the true system.\n\n        Args:\n            env_func (gym.Env): Functionalized initialization of the environment.\n            unsafe_controller (BaseController): Underlying controller providing (unsafe) control inputs\n            deque_size (int): TODO\n            eval_batch_size(int): TODO\n            output_dir (str): TODO\n\n        \"\"\"", "\n", "\n", "# TODO: Combine with CLF approach for stabilization", "\n", "# TODO: Currently specific for cartpole! Make more general for other systems, e.g., extend to quadrotor", "\n", "#  environment", "\n", "\n", "# algo specific args", "\n", "for", "k", ",", "v", "in", "custom_args", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n", "", "self", ".", "eval_batch_size", "=", "eval_batch_size", "\n", "\n", "self", ".", "env", "=", "env_func", "(", ")", "\n", "self", ".", "step_size", "=", "self", ".", "env", ".", "PYB_FREQ", "//", "self", ".", "env", ".", "CTRL_FREQ", "\n", "self", ".", "env", "=", "RecordEpisodeStatistics", "(", "self", ".", "env", ",", "deque_size", ")", "\n", "\n", "self", ".", "input_constraints_sym", "=", "self", ".", "env", ".", "constraints", ".", "get_input_constraint_symbolic_models", "(", ")", "\n", "\n", "self", ".", "unsafe_controller", "=", "unsafe_controller", "\n", "\n", "self", ".", "model", "=", "self", ".", "env", ".", "symbolic", "\n", "self", ".", "X", "=", "self", ".", "model", ".", "x_sym", "\n", "self", ".", "u", "=", "self", ".", "model", ".", "u_sym", "\n", "\n", "# TODO: Extend this to systems that are not control affine. Then we would need to move away from a QP solver", "\n", "# Check if the dynamics are control affine", "\n", "assert", "self", ".", "is_control_affine", "(", ")", "\n", "\n", "# Control barrier function", "\n", "# TODO: Extend to other systems", "\n", "self", ".", "cbf", "=", "cbf_cartpole", "(", "self", ".", "X", ",", "self", ".", "x_pos_max", ",", "self", ".", "x_vel_max", ",", "self", ".", "theta_max", ",", "self", ".", "theta_dot_max", ")", "\n", "# Lie derivative with respect to the dynamics", "\n", "self", ".", "lie_derivative", "=", "self", ".", "get_lie_derivative", "(", ")", "\n", "\n", "self", ".", "linear_func", "=", "linear_function", "(", "self", ".", "slope", ")", "\n", "# TODO: define two different linear functions to be steeper inside the safe set and flatter outside safe set", "\n", "\n", "# Neural network to learn the residual in the lie derivative", "\n", "self", ".", "mlp", "=", "MLP", "(", "self", ".", "model", ".", "nx", ",", "self", ".", "model", ".", "nu", "+", "1", ",", "hidden_dims", "=", "self", ".", "hidden_dims", ",", "activation", "=", "\"relu\"", ")", "\n", "# optimizer", "\n", "self", ".", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "mlp", ".", "parameters", "(", ")", ",", "self", ".", "learning_rate", ")", "\n", "\n", "max_buffer_size", "=", "int", "(", "self", ".", "max_buffer_size", ")", "\n", "self", ".", "buffer", "=", "CBFBuffer", "(", "self", ".", "env", ".", "observation_space", ",", "self", ".", "env", ".", "action_space", ",", "max_buffer_size", ",", "\n", "self", ".", "train_batch_size", ")", "\n", "\n", "# Logging.", "\n", "self", ".", "logger", "=", "ExperimentLogger", "(", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.reset": [[93, 98], ["cbf_qp.CBF_QP.env.reset"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the environment\n\n        \"\"\"", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.get_lie_derivative": [[99, 107], ["casadi.gradient", "casadi.dot", "casadi.Function", "cbf_qp.CBF_QP.cbf"], "methods", ["None"], ["", "def", "get_lie_derivative", "(", "self", ")", ":", "\n", "        ", "\"\"\"Determines the Lie derivative of the CBF with respect to the known dynamics\n\n        \"\"\"", "\n", "dVdx", "=", "cs", ".", "gradient", "(", "self", ".", "cbf", "(", "X", "=", "self", ".", "X", ")", "[", "'cbf'", "]", ",", "self", ".", "X", ")", "\n", "LfV", "=", "cs", ".", "dot", "(", "dVdx", ",", "self", ".", "model", ".", "x_dot", ")", "\n", "LfV_func", "=", "cs", ".", "Function", "(", "'LfV'", ",", "[", "self", ".", "X", ",", "self", ".", "u", "]", ",", "[", "LfV", "]", ",", "[", "'X'", ",", "'u'", "]", ",", "[", "'LfV'", "]", ")", "\n", "return", "LfV_func", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.is_control_affine": [[108, 114], ["casadi.jacobian", "casadi.depends_on"], "methods", ["None"], ["", "def", "is_control_affine", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if the system is control affine\n\n        \"\"\"", "\n", "dfdu", "=", "cs", ".", "jacobian", "(", "self", ".", "model", ".", "x_dot", ",", "self", ".", "u", ")", "\n", "return", "not", "cs", ".", "depends_on", "(", "dfdu", ",", "self", ".", "u", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.is_cbf": [[115, 192], ["numpy.array", "max", "safe_control_gym.controllers.cbf.cbf_qp_utils.cartesian_product", "numpy.ones", "print", "print", "numpy.linspace", "cbf_qp.CBF_QP.certify_action", "range", "infeasible_states.append", "cbf_qp.CBF_QP.cbf", "print"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.cartesian_product", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.certify_action"], ["", "def", "is_cbf", "(", "self", ",", "num_points", "=", "100", ",", "tolerance", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Check if the provided CBF candidate is actually a CBF for the system using a gridded approach\n\n        Args:\n            num_points (int): The minimum number of points to check for the verification\n            tolerance (float): The amount by which the box that contains the grid is extended in every dimension\n\n        Returns:\n            valid_cbf (bool): Whether the provided CBF candidate is valid\n            infeasible_states (list): List of all states for which the QP is infeasible\n\n        \"\"\"", "\n", "valid_cbf", "=", "False", "\n", "\n", "# Select the states to check the CBF condition", "\n", "max_bounds", "=", "np", ".", "array", "(", "[", "self", ".", "x_pos_max", ",", "self", ".", "x_vel_max", ",", "self", ".", "theta_max", ",", "self", ".", "theta_dot_max", "]", ")", "\n", "# Add some tolerance to the bounds to also check the condition outside of the superlevel set", "\n", "max_bounds", "+=", "tolerance", "\n", "min_bounds", "=", "-", "max_bounds", "\n", "\n", "# state dimension and input dimension", "\n", "nx", ",", "nu", "=", "self", ".", "model", ".", "nx", ",", "self", ".", "model", ".", "nu", "\n", "\n", "# Make sure that every vertex is checked", "\n", "num_points", "=", "max", "(", "2", "*", "nx", ",", "num_points", "+", "num_points", "%", "(", "2", "*", "nx", ")", ")", "\n", "num_points_per_dim", "=", "num_points", "//", "nx", "\n", "\n", "# Create the lists of states to check", "\n", "states_to_sample", "=", "[", "np", ".", "linspace", "(", "min_bounds", "[", "i", "]", ",", "max_bounds", "[", "i", "]", ",", "num_points_per_dim", ")", "for", "i", "in", "range", "(", "nx", ")", "]", "\n", "states_to_check", "=", "cartesian_product", "(", "*", "states_to_sample", ")", "\n", "\n", "# Set dummy control input", "\n", "control_input", "=", "np", ".", "ones", "(", "(", "nu", ",", "1", ")", ")", "\n", "\n", "num_infeasible", "=", "0", "\n", "infeasible_states", "=", "[", "]", "\n", "\n", "# Check if the optimization problem is feasible for every considered state", "\n", "for", "state", "in", "states_to_check", ":", "\n", "# Certify action without using any learned model", "\n", "            ", "safe_control_input", ",", "success", "=", "self", ".", "certify_action", "(", "state", ",", "control_input", ",", "use_learned_model", "=", "False", ")", "\n", "if", "not", "success", ":", "\n", "                ", "infeasible_states", ".", "append", "(", "state", ")", "\n", "num_infeasible", "+=", "1", "\n", "\n", "", "", "num_infeasible_states_inside_set", "=", "0", "\n", "\n", "# Check if the infeasible point is inside or outside the superlevel set. Note that the sampled region makes up a", "\n", "# box, but the superlevel set is not. The superlevel set only needs to be contained inside the box.", "\n", "for", "infeasible_state", "in", "infeasible_states", ":", "\n", "            ", "barrier_at_x", "=", "self", ".", "cbf", "(", "X", "=", "infeasible_state", ")", "[", "'cbf'", "]", "\n", "if", "barrier_at_x", "<", "0", ":", "\n", "# print(\"Outside superlevel set:\", infeasible_state)", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Infeasible state inside superlevel set:\"", ",", "infeasible_state", ")", "\n", "num_infeasible_states_inside_set", "+=", "1", "\n", "\n", "", "", "print", "(", "\"Number of infeasible states:\"", ",", "num_infeasible", ")", "\n", "print", "(", "\"Number of infeasible states inside superlevel set:\"", ",", "num_infeasible_states_inside_set", ")", "\n", "\n", "if", "num_infeasible_states_inside_set", ">", "0", ":", "\n", "            ", "valid_cbf", "=", "False", "\n", "# print(\"The provided CBF candidate is not a valid CBF.\")", "\n", "", "elif", "num_infeasible", ">", "0", ":", "\n", "            ", "valid_cbf", "=", "True", "\n", "# print(\"The provided CBF candidate is a valid CBF inside its superlevel set for the checked states. \"", "\n", "#       \"Consider increasing the sampling resolution to get a more precise evaluation. \"", "\n", "#       \"The CBF is not valid on the entire provided domain. Consider softening the CBF constraint by \"", "\n", "#       \"setting 'soft_constraint: True' inside the config.\")", "\n", "", "else", ":", "\n", "            ", "valid_cbf", "=", "True", "\n", "# print(\"The provided CBF candidate is a valid CBF for the checked states. \"", "\n", "#       \"Consider increasing the sampling resolution to get a more precise evaluation.\")", "\n", "\n", "", "return", "valid_cbf", ",", "infeasible_states", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.certify_action": [[193, 304], ["casadi.Opti", "casadi.Opti.variable", "casadi.Opti.subject_to", "casadi.Opti.minimize", "cbf_qp.CBF_QP.lie_derivative", "cbf_qp.CBF_QP.cbf", "torch.from_numpy", "torch.unsqueeze", "torch_state.to.to.to", "cbf_qp.CBF_QP.mlp", "a_b.detach().numpy.detach().numpy.detach().numpy", "casadi.Opti.variable", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.solver", "casadi.Opti.solve", "cs.Opti.solve.value", "cs.Opti.solve.value", "casadi.dot", "casadi.Opti.solver", "cs.Opti.solve.value", "print", "casadi.Opti.debug.value", "print", "print", "print", "print", "a_b.detach().numpy.detach().numpy.detach", "casadi.norm_2", "input_constraint", "print", "casadi.Opti.debug.value", "print", "casadi.norm_2", "cbf_qp.CBF_QP.lie_derivative", "cbf_qp.CBF_QP.linear_func", "cbf_qp.CBF_QP.linear_func"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["", "def", "certify_action", "(", "self", ",", "current_state", ",", "unsafe_action", ",", "use_learned_model", "=", "True", ")", ":", "\n", "        ", "\"\"\"Calculates certified control input.\n\n        Args:\n            current_state (np.array): current state of the continuous-time system\n            unsafe_action (np.array): unsafe control input.\n            use_learned_model (bool): Whether the learned Lie derivative is used in the certification\n\n        Returns:\n            u_val (np.array): certified control input\n            success (bool): Whether the certification was successful\n\n        \"\"\"", "\n", "nx", ",", "nu", "=", "self", ".", "model", ".", "nx", ",", "self", ".", "model", ".", "nu", "\n", "\n", "# define optimizer and variables", "\n", "opti", "=", "cs", ".", "Opti", "(", "\"conic\"", ")", "# Tell casadi that it's a conic problem", "\n", "\n", "# optimization variable: control input", "\n", "u_var", "=", "opti", ".", "variable", "(", "nu", ",", "1", ")", "\n", "\n", "# evaluate at Lie derivative and CBF at the current state", "\n", "lie_derivative_at_x", "=", "self", ".", "lie_derivative", "(", "X", "=", "current_state", ",", "u", "=", "u_var", ")", "[", "'LfV'", "]", "\n", "barrier_at_x", "=", "self", ".", "cbf", "(", "X", "=", "current_state", ")", "[", "'cbf'", "]", "\n", "\n", "learned_residual", "=", "0.0", "\n", "right_hand_side", "=", "0.0", "\n", "\n", "if", "use_learned_model", ":", "\n", "            ", "torch_state", "=", "torch", ".", "from_numpy", "(", "current_state", ")", "\n", "torch_state", "=", "torch", ".", "unsqueeze", "(", "torch_state", ",", "0", ")", "\n", "torch_state", "=", "torch_state", ".", "to", "(", "torch", ".", "float32", ")", "\n", "a_b", "=", "self", ".", "mlp", "(", "torch_state", ")", "\n", "a_b", "=", "a_b", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "a", "=", "a_b", "[", "0", ",", ":", "self", ".", "model", ".", "nu", "]", "\n", "b", "=", "a_b", "[", "0", ",", "-", "1", "]", "\n", "\n", "learned_residual", "=", "cs", ".", "dot", "(", "a", ".", "T", ",", "u_var", ")", "+", "b", "\n", "\n", "", "if", "self", ".", "soft_constrained", ":", "\n", "            ", "slack_var", "=", "opti", ".", "variable", "(", "1", ",", "1", ")", "\n", "\n", "# quadratic objective", "\n", "cost", "=", "0.5", "*", "cs", ".", "norm_2", "(", "unsafe_action", "-", "u_var", ")", "**", "2", "+", "self", ".", "slack_weight", "*", "slack_var", "**", "2", "\n", "\n", "# soften CBF constraint", "\n", "right_hand_side", "=", "slack_var", "\n", "\n", "# Non-negativity constraint on slack variable", "\n", "opti", ".", "subject_to", "(", "slack_var", ">=", "0.0", ")", "\n", "", "else", ":", "\n", "# quadratic objective", "\n", "            ", "cost", "=", "0.5", "*", "cs", ".", "norm_2", "(", "unsafe_action", "-", "u_var", ")", "**", "2", "\n", "\n", "# CBF constraint", "\n", "", "opti", ".", "subject_to", "(", "-", "self", ".", "linear_func", "(", "x", "=", "barrier_at_x", ")", "[", "\"y\"", "]", "-", "lie_derivative_at_x", "-", "learned_residual", "<=", "right_hand_side", ")", "\n", "\n", "# input constraints", "\n", "for", "input_constraint", "in", "self", ".", "input_constraints_sym", ":", "\n", "            ", "opti", ".", "subject_to", "(", "input_constraint", "(", "u_var", ")", "<=", "0", ")", "\n", "\n", "", "opti", ".", "minimize", "(", "cost", ")", "\n", "\n", "# set verbosity option of optimizer", "\n", "\n", "# opts = {'printLevel': 'none'}", "\n", "# opts = {}", "\n", "# select QP solver", "\n", "# opti.solver('qpoases', opts)", "\n", "if", "platform", "==", "\"linux\"", ":", "\n", "            ", "opts", "=", "{", "'printLevel'", ":", "'low'", ",", "'error_on_fail'", ":", "False", "}", "\n", "opti", ".", "solver", "(", "'qpoases'", ",", "opts", ")", "\n", "", "elif", "platform", "==", "\"darwin\"", ":", "\n", "            ", "opts", "=", "{", "'error_on_fail'", ":", "False", "}", "\n", "opti", ".", "solver", "(", "'qrqp'", ",", "opts", ")", "\n", "\n", "", "self", ".", "opti_dict", "=", "{", "\n", "\"opti\"", ":", "opti", ",", "\n", "\"u_var\"", ":", "u_var", ",", "\n", "\"cost\"", ":", "cost", "\n", "}", "\n", "\n", "if", "self", ".", "soft_constrained", ":", "\n", "            ", "self", ".", "opti_dict", "[", "\"slack_var\"", "]", "=", "slack_var", "\n", "\n", "", "success", "=", "False", "\n", "try", ":", "\n", "# solve optimization problem", "\n", "            ", "sol", "=", "opti", ".", "solve", "(", ")", "\n", "success", "=", "True", "\n", "\n", "u_val", "=", "sol", ".", "value", "(", "u_var", ")", "\n", "if", "self", ".", "soft_constrained", ":", "\n", "                ", "slack_var", "=", "sol", ".", "value", "(", "slack_var", ")", "\n", "if", "slack_var", ">", "self", ".", "slack_tolerance", ":", "\n", "                    ", "print", "(", "\"Slack:\"", ",", "slack_var", ")", "\n", "success", "=", "False", "\n", "", "", "cost", "=", "sol", ".", "value", "(", "cost", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "success", "=", "False", "\n", "u_val", "=", "opti", ".", "debug", ".", "value", "(", "u_var", ")", "\n", "print", "(", "\"u\"", ",", "u_val", ")", "\n", "if", "self", ".", "soft_constrained", ":", "\n", "                ", "slack_val", "=", "opti", ".", "debug", ".", "value", "(", "slack_var", ")", "\n", "print", "(", "\"slack\"", ",", "slack_val", ")", "\n", "", "print", "(", "self", ".", "lie_derivative", "(", "X", "=", "current_state", ",", "u", "=", "u_val", ")", "[", "'LfV'", "]", ")", "\n", "print", "(", "self", ".", "linear_func", "(", "x", "=", "barrier_at_x", ")", "[", "\"y\"", "]", ")", "\n", "print", "(", "\"------------------------------------------------\"", ")", "\n", "\n", "", "return", "u_val", ",", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.select_action": [[305, 323], ["cbf_qp.CBF_QP.certify_action", "cbf_qp.CBF_QP.unsafe_controller.select_action", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.certify_action", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.select_action"], ["", "def", "select_action", "(", "self", ",", "current_state", ",", "use_learned_model", "=", "True", ")", ":", "\n", "        ", "\"\"\"Select the action to apply to the system.\n\n        \"\"\"", "\n", "if", "self", ".", "unsafe_controller", "is", "not", "None", ":", "\n", "# use underlying (potentially unsafe) control input", "\n", "            ", "unsafe_input", "=", "self", ".", "unsafe_controller", ".", "select_action", "(", "current_state", ")", "\n", "", "else", ":", "\n", "# create random control input", "\n", "            ", "unsafe_input", "=", "2.0", "*", "(", "2.0", "*", "np", ".", "random", ".", "random", "(", "size", "=", "self", ".", "model", ".", "nu", ")", "-", "1.0", ")", "\n", "\n", "# create sinusoidal control input", "\n", "# unsafe_input = 0.5 * np.sin(2 * np.pi / 50 * (self.env.pyb_step_counter // self.step_size) - np.pi) + 0.0", "\n", "\n", "# certify control input", "\n", "", "safe_input", ",", "success", "=", "self", ".", "certify_action", "(", "current_state", ",", "unsafe_input", ",", "use_learned_model", ")", "\n", "\n", "return", "safe_input", ",", "unsafe_input", ",", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.compute_loss": [[324, 340], ["cbf_qp.CBF_QP.mlp", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Compute training loss of the neural network that represents the Lie derivative error\"\"\"", "\n", "state", ",", "act", ",", "barrier_dot", ",", "barrier_dot_approx", "=", "batch", "[", "\"state\"", "]", ",", "batch", "[", "\"act\"", "]", ",", "batch", "[", "\"barrier_dot\"", "]", ",", "batch", "[", "\"barrier_dot_approx\"", "]", "\n", "\n", "# predict a and b vectors", "\n", "a_b", "=", "self", ".", "mlp", "(", "state", ")", "\n", "a", "=", "torch", ".", "unsqueeze", "(", "a_b", "[", ":", ",", "0", "]", ",", "1", ")", "\n", "b", "=", "torch", ".", "unsqueeze", "(", "a_b", "[", ":", ",", "1", "]", ",", "1", ")", "\n", "\n", "# determine the estimate of h_dot", "\n", "h_dot_estimate", "=", "barrier_dot", "+", "a", "*", "act", "+", "b", "\n", "\n", "# determine loss", "\n", "loss", "=", "(", "h_dot_estimate", "-", "barrier_dot_approx", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.update": [[341, 349], ["cbf_qp.CBF_QP.compute_loss", "cbf_qp.CBF_QP.opt.zero_grad", "cbf_qp.CBF_QP.backward", "cbf_qp.CBF_QP.opt.step"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.compute_loss", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step"], ["", "def", "update", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Update the neural network parameters.\n\n        \"\"\"", "\n", "loss", "=", "self", ".", "compute_loss", "(", "batch", ")", "\n", "self", ".", "opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.save": [[350, 366], ["os.path.dirname", "os.makedirs", "torch.save", "cbf_qp.CBF_QP.mlp.state_dict", "state_dict.update", "cbf_qp.CBF_QP.buffer.state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Saves model params and experiment state to checkpoint path.\n\n        \"\"\"", "\n", "path_dir", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "path_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "state_dict", "=", "{", "\n", "\"agent\"", ":", "self", ".", "mlp", ".", "state_dict", "(", ")", "\n", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "exp_state", "=", "{", "\n", "\"buffer\"", ":", "self", ".", "buffer", ".", "state_dict", "(", ")", "\n", "}", "\n", "state_dict", ".", "update", "(", "exp_state", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.load": [[367, 379], ["torch.load", "cbf_qp.CBF_QP.mlp.load_state_dict", "cbf_qp.CBF_QP.buffer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Restores model and experiment given checkpoint path.\n\n        \"\"\"", "\n", "state", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "# restore params", "\n", "self", ".", "mlp", ".", "load_state_dict", "(", "state", "[", "\"agent\"", "]", ")", "\n", "\n", "# restore experiment state", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "buffer", ".", "load_state_dict", "(", "state", "[", "\"buffer\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.learn": [[380, 483], ["range", "numpy.arange", "cbf_qp.CBF_QP.reset", "cbf_qp.CBF_QP.env.reset", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "cbf_qp.CBF_QP.logger.dump_scalars", "print", "print", "cbf_qp.CBF_QP.buffer.push", "range", "print", "cbf_qp.CBF_QP.save", "print", "cbf_qp.CBF_QP.select_action", "cbf_qp.CBF_QP.env.step", "print", "print", "cbf_qp.CBF_QP.logger.add_scalars", "cbf_qp.CBF_QP.logger.add_scalars", "torch.from_numpy", "torch.unsqueeze", "torch_state.to.to.to", "cbf_qp.CBF_QP.mlp", "a_b.detach().numpy.detach().numpy.detach().numpy", "len", "cbf_qp.CBF_QP.buffer.sample", "cbf_qp.CBF_QP.update", "cbf_qp.CBF_QP.cbf", "cbf_qp.CBF_QP.lie_derivative", "a_b.detach().numpy.detach().numpy.detach", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.dump_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.push", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.select_action", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["", "", "def", "learn", "(", "self", ")", ":", "\n", "        ", "\"\"\"Learn the error in the Lie derivative from multiple experiments.\n\n        \"\"\"", "\n", "input_blending_weight", "=", "np", ".", "arange", "(", "self", ".", "num_episodes", ")", "/", "(", "self", ".", "num_episodes", "-", "1", ")", "\n", "\n", "# Run experiments in loop", "\n", "for", "i", "in", "range", "(", "self", ".", "num_episodes", ")", ":", "\n", "# reset the episode", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "\n", "counter", "=", "0", "\n", "\n", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# create arrays to collect data", "\n", "states", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_num_steps", ",", "self", ".", "model", ".", "nx", ")", ")", "\n", "inputs", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_num_steps", ",", "self", ".", "model", ".", "nu", ")", ")", "\n", "barrier_values", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_num_steps", ",", "1", ")", ")", "\n", "lie_derivative_values", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_num_steps", ",", "1", ")", ")", "\n", "lie_derivative_est", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_num_steps", ",", "1", ")", ")", "\n", "\n", "self", ".", "logger", ".", "dump_scalars", "(", ")", "\n", "\n", "while", "counter", "<", "self", ".", "max_num_steps", ":", "\n", "                ", "print", "(", "\"Step: \"", ",", "self", ".", "env", ".", "pyb_step_counter", "//", "self", ".", "step_size", ")", "\n", "\n", "# determine safe action", "\n", "safe_action", ",", "unsafe_action", ",", "success", "=", "self", ".", "select_action", "(", "obs", ")", "\n", "\n", "# blend the safe and unsafe action", "\n", "blended_input", "=", "(", "1", "-", "input_blending_weight", "[", "i", "]", ")", "*", "unsafe_action", "+", "input_blending_weight", "[", "i", "]", "*", "safe_action", "\n", "\n", "# Step the system", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "blended_input", ")", "\n", "print", "(", "\"obs: {}\"", ".", "format", "(", "obs", ")", ")", "\n", "print", "(", "\"action: {}\\n\"", ".", "format", "(", "safe_action", ")", ")", "\n", "\n", "self", ".", "logger", ".", "add_scalars", "(", "{", "\n", "\"safe_input\"", ":", "safe_action", ",", "\n", "\"unsafe_input\"", ":", "unsafe_action", ",", "\n", "\"applied_input\"", ":", "blended_input", "}", ",", "\n", "counter", ",", "\n", "prefix", "=", "\"action\"", ")", "\n", "self", ".", "logger", ".", "add_scalars", "(", "{", "\n", "\"x_pos\"", ":", "obs", "[", "0", "]", ",", "\n", "\"x_vel\"", ":", "obs", "[", "1", "]", ",", "\n", "\"theta\"", ":", "obs", "[", "2", "]", ",", "\n", "\"theta_dot\"", ":", "obs", "[", "3", "]", "}", ",", "\n", "counter", ",", "\n", "prefix", "=", "\"state\"", ")", "\n", "\n", "# collect data", "\n", "states", "[", "counter", ",", ":", "]", "=", "obs", "\n", "inputs", "[", "counter", ",", ":", "]", "=", "blended_input", "\n", "barrier_values", "[", "counter", ",", ":", "]", "=", "self", ".", "cbf", "(", "X", "=", "obs", ")", "[", "'cbf'", "]", "\n", "lie_derivative_values", "[", "counter", ",", ":", "]", "=", "self", ".", "lie_derivative", "(", "X", "=", "obs", ",", "u", "=", "blended_input", ")", "[", "'LfV'", "]", "\n", "\n", "# Determine the estimated Lie derivative", "\n", "torch_state", "=", "torch", ".", "from_numpy", "(", "obs", ")", "\n", "torch_state", "=", "torch", ".", "unsqueeze", "(", "torch_state", ",", "0", ")", "\n", "torch_state", "=", "torch_state", ".", "to", "(", "torch", ".", "float32", ")", "\n", "a_b", "=", "self", ".", "mlp", "(", "torch_state", ")", "\n", "a_b", "=", "a_b", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "a", "=", "a_b", "[", "0", ",", ":", "self", ".", "model", ".", "nu", "]", "\n", "b", "=", "a_b", "[", "0", ",", "-", "1", "]", "\n", "lie_derivative_est", "[", "counter", ",", ":", "]", "=", "lie_derivative_values", "[", "counter", ",", ":", "]", "+", "np", ".", "dot", "(", "a", ".", "T", ",", "blended_input", ")", "+", "b", "\n", "\n", "counter", "+=", "1", "\n", "\n", "", "print", "(", "\"Num time steps:\"", ",", "len", "(", "inputs", ")", ")", "\n", "print", "(", "\"Certified control input weight:\"", ",", "input_blending_weight", "[", "i", "]", ")", "\n", "\n", "# numerical time differentiation (symmetric) of barrier function :", "\n", "barrier_dot_approx", "=", "(", "barrier_values", "[", "2", ":", "]", "-", "barrier_values", "[", ":", "-", "2", "]", ")", "/", "(", "2", "*", "1", "/", "self", ".", "env", ".", "CTRL_FREQ", ")", "\n", "\n", "# compare actual and numerical time derivatives", "\n", "# import matplotlib.pyplot as plt", "\n", "# t = np.arange(self.max_num_steps) / self.env.CTRL_FREQ", "\n", "# plt.plot(t[1:-1], barrier_dot_approx, \"r\", label=\"h_dot_numerical\")", "\n", "# plt.plot(t, lie_derivative_values, \"b\", label=\"h_dot_hat\")", "\n", "# plt.plot(t, lie_derivative_est, \"g\", label=\"h_dot_est\")", "\n", "# plt.xlabel(\"t\")", "\n", "# plt.ylabel(\"h_dot\")", "\n", "# plt.legend()", "\n", "# plt.show()", "\n", "\n", "# Add data to buffer", "\n", "self", ".", "buffer", ".", "push", "(", "{", "\n", "\"state\"", ":", "states", "[", "1", ":", "-", "1", ",", ":", "]", ",", "\n", "\"act\"", ":", "inputs", "[", "1", ":", "-", "1", ",", ":", "]", ",", "\n", "\"barrier_dot\"", ":", "lie_derivative_values", "[", "1", ":", "-", "1", ",", ":", "]", ",", "\n", "\"barrier_dot_approx\"", ":", "barrier_dot_approx", "\n", "}", ")", "\n", "\n", "# Update neural network parameters", "\n", "for", "j", "in", "range", "(", "self", ".", "train_iterations", ")", ":", "\n", "                ", "batch", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "train_batch_size", ",", "self", ".", "device", ")", "\n", "self", ".", "update", "(", "batch", ")", "\n", "\n", "# Save model parameters", "\n", "", "print", "(", "\"Saving current model parameters at:\"", ",", "self", ".", "checkpoint_path", ")", "\n", "self", ".", "save", "(", "self", ".", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp.CBF_QP.run": [[484, 542], ["cbf_qp.CBF_QP.load", "cbf_qp.CBF_QP.env.reset", "cbf_qp.CBF_QP.logger.add_scalars", "print", "cbf_qp.CBF_QP.select_action", "cbf_qp.CBF_QP.env.step", "print", "print", "cbf_qp.CBF_QP.logger.add_scalars", "cbf_qp.CBF_QP.logger.add_scalars"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.select_action", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars"], ["", "", "def", "run", "(", "self", ",", "render", "=", "False", ",", "logging", "=", "False", ")", ":", "\n", "        ", "\"\"\"Runs evaluation with current policy.\n\n        Args:\n            render (bool): if to render during the runs.\n            logging (bool): if to log using logger during the runs.\n\n        Returns:\n            stats_buffer (CBFBuffer): Buffer of the experiment results\n\n        \"\"\"", "\n", "# load model from training episode", "\n", "self", ".", "load", "(", "self", ".", "checkpoint_path", ")", "\n", "\n", "counter", "=", "0", "\n", "\n", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "self", ".", "logger", ".", "add_scalars", "(", "{", "\n", "\"x_pos\"", ":", "obs", "[", "0", "]", ",", "\n", "\"x_dot\"", ":", "obs", "[", "1", "]", ",", "\n", "\"theta\"", ":", "obs", "[", "2", "]", ",", "\n", "\"theta_dot\"", ":", "obs", "[", "3", "]", "}", ",", "\n", "counter", ",", "\n", "prefix", "=", "\"state\"", ")", "\n", "\n", "# while len(ep_returns) < self.eval_batch_size and counter < self.max_num_steps:", "\n", "while", "counter", "<", "self", ".", "max_num_steps", ":", "\n", "            ", "print", "(", "\"Step: \"", ",", "self", ".", "env", ".", "pyb_step_counter", "//", "self", ".", "step_size", ")", "\n", "\n", "safe_action", ",", "unsafe_action", ",", "success", "=", "self", ".", "select_action", "(", "obs", ",", "self", ".", "use_learned_model", ")", "\n", "\n", "# Check the system's performance without certification", "\n", "if", "self", ".", "use_safe_input", ":", "\n", "                ", "action", "=", "safe_action", "\n", "", "else", ":", "\n", "                ", "action", "=", "unsafe_action", "\n", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "print", "(", "\"obs: {}\"", ".", "format", "(", "obs", ")", ")", "\n", "print", "(", "\"action: {}\\n\"", ".", "format", "(", "action", ")", ")", "\n", "\n", "self", ".", "logger", ".", "add_scalars", "(", "{", "\n", "\"safe_input\"", ":", "safe_action", ",", "\n", "\"unsafe_input\"", ":", "unsafe_action", ",", "\n", "\"applied_input\"", ":", "action", "}", ",", "\n", "counter", ",", "\n", "prefix", "=", "\"action\"", ")", "\n", "self", ".", "logger", ".", "add_scalars", "(", "{", "\n", "\"x_pos\"", ":", "obs", "[", "0", "]", ",", "\n", "\"x_dot\"", ":", "obs", "[", "1", "]", ",", "\n", "\"theta\"", ":", "obs", "[", "2", "]", ",", "\n", "\"theta_dot\"", ":", "obs", "[", "3", "]", "}", ",", "\n", "counter", "+", "1", ",", "\n", "prefix", "=", "\"state\"", ")", "\n", "counter", "+=", "1", "\n", "\n", "", "return", "self", ".", "logger", ".", "stats_buffer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.CBFBuffer.__init__": [[90, 118], ["object.__init__", "isinstance", "list", "cbf_qp_utils.CBFBuffer.reset", "cbf_qp_utils.CBFBuffer.scheme.keys"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["def", "__init__", "(", "self", ",", "obs_space", ",", "act_space", ",", "max_size", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "obs_dim", "=", "obs_space", ".", "shape", "\n", "if", "isinstance", "(", "act_space", ",", "Box", ")", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "n", "\n", "\n", "", "N", "=", "max_size", "\n", "self", ".", "scheme", "=", "{", "\n", "\"state\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "*", "obs_dim", ")", "\n", "}", ",", "\n", "\"act\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "act_dim", ")", "\n", "}", ",", "\n", "\"barrier_dot\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"barrier_dot_approx\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "1", ")", "\n", "}", "\n", "}", "\n", "self", ".", "keys", "=", "list", "(", "self", ".", "scheme", ".", "keys", "(", ")", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.CBFBuffer.reset": [[119, 132], ["cbf_qp_utils.CBFBuffer.scheme.items", "info.get", "info.get", "info.get."], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Allocate space for containers.\n\n        \"\"\"", "\n", "for", "k", ",", "info", "in", "self", ".", "scheme", ".", "items", "(", ")", ":", "\n", "            ", "assert", "\"vshape\"", "in", "info", ",", "\"Scheme must define vshape for {}\"", ".", "format", "(", "k", ")", "\n", "vshape", "=", "info", "[", "\"vshape\"", "]", "\n", "dtype", "=", "info", ".", "get", "(", "\"dtype\"", ",", "np", ".", "float32", ")", "\n", "init", "=", "info", ".", "get", "(", "\"init\"", ",", "np", ".", "zeros", ")", "\n", "self", ".", "__dict__", "[", "k", "]", "=", "init", "(", "vshape", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "self", ".", "pos", "=", "0", "\n", "self", ".", "buffer_size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.CBFBuffer.__len__": [[133, 138], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns current size of the buffer.\n\n        \"\"\"", "\n", "return", "self", ".", "buffer_size", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.CBFBuffer.state_dict": [[139, 151], ["dict"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a snapshot of current buffer.\n\n        \"\"\"", "\n", "state", "=", "dict", "(", "\n", "pos", "=", "self", ".", "pos", ",", "\n", "buffer_size", "=", "self", ".", "buffer_size", ",", "\n", ")", "\n", "for", "k", "in", "self", ".", "scheme", ":", "\n", "            ", "v", "=", "self", ".", "__dict__", "[", "k", "]", "\n", "state", "[", "k", "]", "=", "v", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.CBFBuffer.load_state_dict": [[152, 158], ["state.items"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Restores buffer from previous state.\n\n        \"\"\"", "\n", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.CBFBuffer.push": [[159, 183], ["batch.items", "list", "cbf_qp_utils.CBFBuffer.scheme[].get", "numpy.asarray().reshape", "min", "batch.keys", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get"], ["", "", "def", "push", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Inserts transition step data (as dict) to storage.\n\n        \"\"\"", "\n", "# batch size", "\n", "k", "=", "list", "(", "batch", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "n", "=", "batch", "[", "k", "]", ".", "shape", "[", "0", "]", "\n", "\n", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", ":", "\n", "            ", "shape", "=", "self", ".", "scheme", "[", "k", "]", "[", "\"vshape\"", "]", "[", "1", ":", "]", "\n", "dtype", "=", "self", ".", "scheme", "[", "k", "]", ".", "get", "(", "\"dtype\"", ",", "np", ".", "float32", ")", "\n", "v_", "=", "np", ".", "asarray", "(", "v", ",", "dtype", "=", "dtype", ")", ".", "reshape", "(", "(", "n", ",", ")", "+", "shape", ")", "\n", "\n", "if", "self", ".", "pos", "+", "n", "<=", "self", ".", "max_size", ":", "\n", "                ", "self", ".", "__dict__", "[", "k", "]", "[", "self", ".", "pos", ":", "self", ".", "pos", "+", "n", "]", "=", "v_", "\n", "", "else", ":", "\n", "# wrap around", "\n", "                ", "remain_n", "=", "self", ".", "pos", "+", "n", "-", "self", ".", "max_size", "\n", "self", ".", "__dict__", "[", "k", "]", "[", "self", ".", "pos", ":", "self", ".", "max_size", "]", "=", "v_", "[", ":", "-", "remain_n", "]", "\n", "self", ".", "__dict__", "[", "k", "]", "[", ":", "remain_n", "]", "=", "v_", "[", "-", "remain_n", ":", "]", "\n", "\n", "", "", "self", ".", "pos", "=", "(", "self", ".", "pos", "+", "n", ")", "%", "self", ".", "max_size", "\n", "if", "self", ".", "buffer_size", "<", "self", ".", "max_size", ":", "\n", "            ", "self", ".", "buffer_size", "=", "min", "(", "self", ".", "max_size", ",", "self", ".", "pos", "+", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.CBFBuffer.sample": [[184, 201], ["numpy.random.randint", "cbf_qp_utils.CBFBuffer.scheme.items", "len", "cbf_qp_utils.CBFBuffer.__dict__[].reshape", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "batch_size", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns data batch.\n\n        \"\"\"", "\n", "if", "not", "batch_size", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "\n", "", "indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", ",", "size", "=", "batch_size", ")", "\n", "batch", "=", "{", "}", "\n", "for", "k", ",", "info", "in", "self", ".", "scheme", ".", "items", "(", ")", ":", "\n", "            ", "shape", "=", "info", "[", "\"vshape\"", "]", "[", "1", ":", "]", "\n", "v", "=", "self", ".", "__dict__", "[", "k", "]", ".", "reshape", "(", "-", "1", ",", "*", "shape", ")", "[", "indices", "]", "\n", "if", "device", "is", "None", ":", "\n", "                ", "batch", "[", "k", "]", "=", "torch", ".", "as_tensor", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "batch", "[", "k", "]", "=", "torch", ".", "as_tensor", "(", "v", ",", "device", "=", "device", ")", "\n", "", "", "return", "batch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.cbf_cartpole": [[10, 36], ["casadi.Function"], "function", ["None"], ["def", "cbf_cartpole", "(", "X", ",", "x_pos_max", ",", "x_vel_max", ",", "theta_max", ",", "theta_dot_max", ")", ":", "\n", "    ", "\"\"\"\n    Creates a control barrier function (CBF) candidate based on an ellipsoid function\n\n    Attributes:\n        X (cs.sym.MX): Symbolic state variable\n        x_pos_max (float): Semi axis of ellipsoid in the first dimension (not used)\n        x_vel_max (float): Semi axis of ellipsoid in the second dimension (not used)\n        theta_max (float): Semi axis of ellipsoid in the third dimension\n        theta_dot_max (float): Semi axis of ellipsoid in the fourth dimension\n\n    Returns:\n        cbf_func (cs.Function): Function object of the control barrier function (CBF)\n\n    \"\"\"", "\n", "# cbf = 0.5 * (1 - (X[2]) ** 2 / (theta_max) ** 2 - (X[3]) ** 2 / (theta_dot_max) ** 2)", "\n", "# cbf_func = cs.Function('barrier', [X], [cbf], ['X'], ['cbf'])", "\n", "# cbf = 0.5 * (1 - (X[0]) ** 2 / (x_pos_max) ** 2)", "\n", "# cbf_func = cs.Function('barrier', [X], [cbf], ['X'], ['cbf'])", "\n", "# cbf = 0.5 * (1 - (X[2]) ** 2 / (theta_max) ** 2)", "\n", "# cbf_func = cs.Function('barrier', [X], [cbf], ['X'], ['cbf'])", "\n", "# cbf = 0.5 * (1 - (X[0]) ** 2 / (x_pos_max) ** 2 - (X[3]) ** 2 / (theta_dot_max) ** 2)", "\n", "# cbf_func = cs.Function('barrier', [X], [cbf], ['X'], ['cbf'])", "\n", "cbf", "=", "0.5", "*", "(", "1", "-", "(", "X", "[", "0", "]", ")", "**", "2", "/", "(", "x_pos_max", ")", "**", "2", "-", "(", "X", "[", "1", "]", ")", "**", "2", "/", "(", "x_vel_max", ")", "**", "2", ")", "\n", "cbf_func", "=", "cs", ".", "Function", "(", "'barrier'", ",", "[", "X", "]", ",", "[", "cbf", "]", ",", "[", "'X'", "]", ",", "[", "'cbf'", "]", ")", "\n", "return", "cbf_func", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.cbf_quadrotor": [[38, 41], ["None"], "function", ["None"], ["", "def", "cbf_quadrotor", "(", ")", ":", "\n", "# TODO: Implementation missing", "\n", "    ", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.linear_function": [[43, 57], ["casadi.MX.sym", "casadi.Function"], "function", ["None"], ["", "def", "linear_function", "(", "slope", ")", ":", "\n", "    ", "\"\"\"\n    Creates a one dimensional linear function\n\n    Attributes:\n        slope (float): The slope of the linear function\n\n    Returns:\n        linear_func (cs.Function): Function object of a linear function with desired slope\n\n    \"\"\"", "\n", "x", "=", "cs", ".", "MX", ".", "sym", "(", "\"x\"", ",", "1", ")", "\n", "linear_func", "=", "cs", ".", "Function", "(", "'linear'", ",", "[", "x", "]", ",", "[", "slope", "*", "x", "]", ",", "[", "\"x\"", "]", ",", "[", "\"y\"", "]", ")", "\n", "return", "linear_func", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.cbf.cbf_qp_utils.cartesian_product": [[59, 77], ["len", "numpy.result_type", "numpy.empty", "enumerate", "np.empty.reshape", "numpy.ix_", "len"], "function", ["None"], ["", "def", "cartesian_product", "(", "*", "arrays", ")", ":", "\n", "    ", "\"\"\"\n    Creates the cartesian product of a list of arrays from:\n    https://stackoverflow.com/a/11146645\n\n    Attributes:\n        arrays (list): List of arrays\n\n    Returns:\n        Cartesian product of all arrays in the list\n\n    \"\"\"", "\n", "la", "=", "len", "(", "arrays", ")", "\n", "dtype", "=", "np", ".", "result_type", "(", "*", "arrays", ")", "\n", "arr", "=", "np", ".", "empty", "(", "[", "len", "(", "a", ")", "for", "a", "in", "arrays", "]", "+", "[", "la", "]", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", ",", "a", "in", "enumerate", "(", "np", ".", "ix_", "(", "*", "arrays", ")", ")", ":", "\n", "        ", "arr", "[", "...", ",", "i", "]", "=", "a", "\n", "", "return", "arr", ".", "reshape", "(", "-", "1", ",", "la", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOAgent.__init__": [[21, 52], ["ppo_utils.MLPActorCritic", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "ppo_utils.PPOAgent.ac.actor.parameters", "ppo_utils.PPOAgent.ac.critic.parameters"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "obs_space", ",", "\n", "act_space", ",", "\n", "hidden_dim", "=", "64", ",", "\n", "use_clipped_value", "=", "False", ",", "\n", "clip_param", "=", "0.2", ",", "\n", "target_kl", "=", "0.01", ",", "\n", "entropy_coef", "=", "0.01", ",", "\n", "actor_lr", "=", "0.0003", ",", "\n", "critic_lr", "=", "0.001", ",", "\n", "opt_epochs", "=", "10", ",", "\n", "mini_batch_size", "=", "64", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "# Parameters.", "\n", "        ", "self", ".", "obs_space", "=", "obs_space", "\n", "self", ".", "act_space", "=", "act_space", "\n", "self", ".", "use_clipped_value", "=", "use_clipped_value", "\n", "self", ".", "clip_param", "=", "clip_param", "\n", "self", ".", "target_kl", "=", "target_kl", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "self", ".", "opt_epochs", "=", "opt_epochs", "\n", "self", ".", "mini_batch_size", "=", "mini_batch_size", "\n", "# Model.", "\n", "self", ".", "ac", "=", "MLPActorCritic", "(", "obs_space", ",", "\n", "act_space", ",", "\n", "hidden_dims", "=", "[", "hidden_dim", "]", "*", "2", ",", "\n", "activation", "=", "\"tanh\"", ")", "\n", "# Optimizers.", "\n", "self", ".", "actor_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "ac", ".", "actor", ".", "parameters", "(", ")", ",", "actor_lr", ")", "\n", "self", ".", "critic_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "ac", ".", "critic", ".", "parameters", "(", ")", ",", "critic_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOAgent.to": [[53, 60], ["ppo_utils.PPOAgent.ac.to"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["", "def", "to", "(", "self", ",", "\n", "device", "\n", ")", ":", "\n", "        ", "\"\"\"Puts agent to device.\n\n        \"\"\"", "\n", "self", ".", "ac", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOAgent.train": [[61, 66], ["ppo_utils.PPOAgent.ac.train"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets training mode.\n\n        \"\"\"", "\n", "self", ".", "ac", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOAgent.eval": [[67, 72], ["ppo_utils.PPOAgent.ac.eval"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets evaluation mode.\n\n        \"\"\"", "\n", "self", ".", "ac", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOAgent.state_dict": [[73, 81], ["ppo_utils.PPOAgent.ac.state_dict", "ppo_utils.PPOAgent.actor_opt.state_dict", "ppo_utils.PPOAgent.critic_opt.state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Snapshots agent state.\n\n        \"\"\"", "\n", "return", "{", "\n", "\"ac\"", ":", "self", ".", "ac", ".", "state_dict", "(", ")", ",", "\n", "\"actor_opt\"", ":", "self", ".", "actor_opt", ".", "state_dict", "(", ")", ",", "\n", "\"critic_opt\"", ":", "self", ".", "critic_opt", ".", "state_dict", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOAgent.load_state_dict": [[83, 92], ["ppo_utils.PPOAgent.ac.load_state_dict", "ppo_utils.PPOAgent.actor_opt.load_state_dict", "ppo_utils.PPOAgent.critic_opt.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "\n", "state_dict", "\n", ")", ":", "\n", "        ", "\"\"\"Restores agent state.\n\n        \"\"\"", "\n", "self", ".", "ac", ".", "load_state_dict", "(", "state_dict", "[", "\"ac\"", "]", ")", "\n", "self", ".", "actor_opt", ".", "load_state_dict", "(", "state_dict", "[", "\"actor_opt\"", "]", ")", "\n", "self", ".", "critic_opt", ".", "load_state_dict", "(", "state_dict", "[", "\"critic_opt\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOAgent.compute_policy_loss": [[93, 110], ["ppo_utils.PPOAgent.ac.actor", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "dist.entropy().mean", "torch.min", "torch.min", "torch.min", "torch.min", "dist.entropy"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Normal.entropy"], ["", "def", "compute_policy_loss", "(", "self", ",", "\n", "batch", "\n", ")", ":", "\n", "        ", "\"\"\"Returns policy loss(es) given batch of data.\n\n        \"\"\"", "\n", "obs", ",", "act", ",", "logp_old", ",", "adv", "=", "batch", "[", "\"obs\"", "]", ",", "batch", "[", "\"act\"", "]", ",", "batch", "[", "\"logp\"", "]", ",", "batch", "[", "\"adv\"", "]", "\n", "dist", ",", "logp", "=", "self", ".", "ac", ".", "actor", "(", "obs", ",", "act", ")", "\n", "# Policy.", "\n", "ratio", "=", "torch", ".", "exp", "(", "logp", "-", "logp_old", ")", "\n", "clip_adv", "=", "torch", ".", "clamp", "(", "ratio", ",", "1", "-", "self", ".", "clip_param", ",", "1", "+", "self", ".", "clip_param", ")", "*", "adv", "\n", "policy_loss", "=", "-", "torch", ".", "min", "(", "ratio", "*", "adv", ",", "clip_adv", ")", ".", "mean", "(", ")", "\n", "# Entropy.", "\n", "entropy_loss", "=", "-", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "# KL/trust region.", "\n", "approx_kl", "=", "(", "logp_old", "-", "logp", ")", ".", "mean", "(", ")", "\n", "return", "policy_loss", ",", "entropy_loss", ",", "approx_kl", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOAgent.compute_value_loss": [[111, 127], ["ppo_utils.PPOAgent.ac.critic", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "compute_value_loss", "(", "self", ",", "\n", "batch", "\n", ")", ":", "\n", "        ", "\"\"\"Returns value loss(es) given batch of data.\n\n        \"\"\"", "\n", "obs", ",", "ret", ",", "v_old", "=", "batch", "[", "\"obs\"", "]", ",", "batch", "[", "\"ret\"", "]", ",", "batch", "[", "\"v\"", "]", "\n", "v_cur", "=", "self", ".", "ac", ".", "critic", "(", "obs", ")", "\n", "if", "self", ".", "use_clipped_value", ":", "\n", "            ", "v_old_clipped", "=", "v_old", "+", "(", "v_cur", "-", "v_old", ")", ".", "clamp", "(", "-", "self", ".", "clip_param", ",", "self", ".", "clip_param", ")", "\n", "v_loss", "=", "(", "v_cur", "-", "ret", ")", ".", "pow", "(", "2", ")", "\n", "v_loss_clipped", "=", "(", "v_old_clipped", "-", "ret", ")", ".", "pow", "(", "2", ")", "\n", "value_loss", "=", "0.5", "*", "torch", ".", "max", "(", "v_loss", ",", "v_loss_clipped", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "value_loss", "=", "0.5", "*", "(", "v_cur", "-", "ret", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "", "return", "value_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOAgent.update": [[128, 162], ["collections.defaultdict", "range", "rollouts.sampler", "results[].append", "results[].append", "results[].append", "results[].append", "ppo_utils.PPOAgent.compute_policy_loss", "ppo_utils.PPOAgent.compute_value_loss", "ppo_utils.PPOAgent.critic_opt.zero_grad", "ppo_utils.PPOAgent.backward", "ppo_utils.PPOAgent.critic_opt.step", "policy_loss.item", "ppo_utils.PPOAgent.item", "entropy_loss.item", "approx_kl.item", "sum", "len", "collections.defaultdict.items", "ppo_utils.PPOAgent.actor_opt.zero_grad", "ppo_utils.PPOAgent.actor_opt.step"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.ConstraintBuffer.sampler", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.compute_policy_loss", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOAgent.compute_value_loss", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step"], ["", "def", "update", "(", "self", ",", "\n", "rollouts", ",", "\n", "device", "=", "\"cpu\"", "\n", ")", ":", "\n", "        ", "\"\"\"Updates model parameters based on current training batch.\n\n        \"\"\"", "\n", "results", "=", "defaultdict", "(", "list", ")", "\n", "num_mini_batch", "=", "rollouts", ".", "max_length", "*", "rollouts", ".", "batch_size", "//", "self", ".", "mini_batch_size", "\n", "for", "i", "in", "range", "(", "self", ".", "opt_epochs", ")", ":", "\n", "            ", "p_loss_epoch", ",", "v_loss_epoch", ",", "e_loss_epoch", ",", "kl_epoch", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "batch", "in", "rollouts", ".", "sampler", "(", "self", ".", "mini_batch_size", ",", "device", ")", ":", "\n", "# Actor update.", "\n", "                ", "policy_loss", ",", "entropy_loss", ",", "approx_kl", "=", "self", ".", "compute_policy_loss", "(", "batch", ")", "\n", "# Update only when no KL constraint or constraint is satisfied.", "\n", "if", "(", "not", "self", ".", "target_kl", ">", "0", ")", "or", "(", "self", ".", "target_kl", ">", "0", "and", "approx_kl", "<=", "1.5", "*", "self", ".", "target_kl", ")", ":", "\n", "                    ", "self", ".", "actor_opt", ".", "zero_grad", "(", ")", "\n", "(", "policy_loss", "+", "self", ".", "entropy_coef", "*", "entropy_loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "actor_opt", ".", "step", "(", ")", "\n", "# Critic update.", "\n", "", "value_loss", "=", "self", ".", "compute_value_loss", "(", "batch", ")", "\n", "self", ".", "critic_opt", ".", "zero_grad", "(", ")", "\n", "value_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic_opt", ".", "step", "(", ")", "\n", "p_loss_epoch", "+=", "policy_loss", ".", "item", "(", ")", "\n", "v_loss_epoch", "+=", "value_loss", ".", "item", "(", ")", "\n", "e_loss_epoch", "+=", "entropy_loss", ".", "item", "(", ")", "\n", "kl_epoch", "+=", "approx_kl", ".", "item", "(", ")", "\n", "", "results", "[", "\"policy_loss\"", "]", ".", "append", "(", "p_loss_epoch", "/", "num_mini_batch", ")", "\n", "results", "[", "\"value_loss\"", "]", ".", "append", "(", "v_loss_epoch", "/", "num_mini_batch", ")", "\n", "results", "[", "\"entropy_loss\"", "]", ".", "append", "(", "e_loss_epoch", "/", "num_mini_batch", ")", "\n", "results", "[", "\"approx_kl\"", "]", ".", "append", "(", "kl_epoch", "/", "num_mini_batch", ")", "\n", "", "results", "=", "{", "k", ":", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.MLPActor.__init__": [[169, 188], ["torch.Module.__init__", "safe_control_gym.math_and_models.neural_networks.MLP", "torch.Parameter", "torch.Parameter", "safe_control_gym.math_and_models.distributions.Categorical", "safe_control_gym.math_and_models.distributions.Normal", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ppo_utils.MLPActor.logstd.exp"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "obs_dim", ",", "\n", "act_dim", ",", "\n", "hidden_dims", ",", "\n", "activation", ",", "\n", "discrete", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pi_net", "=", "MLP", "(", "obs_dim", ",", "act_dim", ",", "hidden_dims", ",", "activation", ")", "\n", "# Construct output action distribution.", "\n", "self", ".", "discrete", "=", "discrete", "\n", "if", "discrete", ":", "\n", "            ", "self", ".", "dist_fn", "=", "lambda", "x", ":", "Categorical", "(", "logits", "=", "x", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logstd", "=", "nn", ".", "Parameter", "(", "-", "0.5", "*", "torch", ".", "ones", "(", "act_dim", ")", ")", "\n", "self", ".", "dist_fn", "=", "lambda", "x", ":", "Normal", "(", "x", ",", "self", ".", "logstd", ".", "exp", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.MLPActor.forward": [[189, 201], ["ppo_utils.MLPActor.dist_fn", "ppo_utils.MLPActor.pi_net", "ppo_utils.MLPActor.log_prob"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.log_prob"], ["", "", "def", "forward", "(", "self", ",", "\n", "obs", ",", "\n", "act", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "dist", "=", "self", ".", "dist_fn", "(", "self", ".", "pi_net", "(", "obs", ")", ")", "\n", "logp_a", "=", "None", "\n", "if", "act", "is", "not", "None", ":", "\n", "            ", "logp_a", "=", "dist", ".", "log_prob", "(", "act", ")", "\n", "", "return", "dist", ",", "logp_a", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.MLPCritic.__init__": [[208, 218], ["torch.Module.__init__", "safe_control_gym.math_and_models.neural_networks.MLP"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "obs_dim", ",", "\n", "hidden_dims", ",", "\n", "activation", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "v_net", "=", "MLP", "(", "obs_dim", ",", "1", ",", "hidden_dims", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.MLPCritic.forward": [[219, 226], ["ppo_utils.MLPCritic.v_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "obs", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "return", "self", ".", "v_net", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.MLPActorCritic.__init__": [[237, 258], ["torch.Module.__init__", "isinstance", "ppo_utils.MLPActor", "ppo_utils.MLPCritic"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "obs_space", ",", "\n", "act_space", ",", "\n", "hidden_dims", "=", "(", "64", ",", "64", ")", ",", "\n", "activation", "=", "\"tanh\"", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "obs_dim", "=", "obs_space", ".", "shape", "[", "0", "]", "\n", "if", "isinstance", "(", "act_space", ",", "Box", ")", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "shape", "[", "0", "]", "\n", "discrete", "=", "False", "\n", "", "else", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "n", "\n", "discrete", "=", "True", "\n", "# Policy.", "\n", "", "self", ".", "actor", "=", "MLPActor", "(", "obs_dim", ",", "act_dim", ",", "hidden_dims", ",", "activation", ",", "discrete", ")", "\n", "# Value function.", "\n", "self", ".", "critic", "=", "MLPCritic", "(", "obs_dim", ",", "hidden_dims", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.MLPActorCritic.step": [[259, 270], ["ppo_utils.MLPActorCritic.actor", "dist.sample", "dist.log_prob", "ppo_utils.MLPActorCritic.critic", "dist.sample.cpu().numpy", "ppo_utils.MLPActorCritic.cpu().numpy", "dist.log_prob.cpu().numpy", "dist.sample.cpu", "ppo_utils.MLPActorCritic.cpu", "dist.log_prob.cpu"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.log_prob"], ["", "def", "step", "(", "self", ",", "\n", "obs", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "dist", ",", "_", "=", "self", ".", "actor", "(", "obs", ")", "\n", "a", "=", "dist", ".", "sample", "(", ")", "\n", "logp_a", "=", "dist", ".", "log_prob", "(", "a", ")", "\n", "v", "=", "self", ".", "critic", "(", "obs", ")", "\n", "return", "a", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "logp_a", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.MLPActorCritic.act": [[271, 280], ["ppo_utils.MLPActorCritic.actor", "dist.mode", "dist.mode.cpu().numpy", "dist.mode.cpu"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.mode"], ["", "def", "act", "(", "self", ",", "\n", "obs", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "dist", ",", "_", "=", "self", ".", "actor", "(", "obs", ")", "\n", "a", "=", "dist", ".", "mode", "(", ")", "\n", "return", "a", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.__init__": [[293, 340], ["object.__init__", "isinstance", "list", "ppo_utils.PPOBuffer.reset", "ppo_utils.PPOBuffer.scheme.keys"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["def", "__init__", "(", "self", ",", "\n", "obs_space", ",", "\n", "act_space", ",", "\n", "max_length", ",", "\n", "batch_size", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "T", ",", "N", "=", "max_length", ",", "batch_size", "\n", "obs_dim", "=", "obs_space", ".", "shape", "\n", "if", "isinstance", "(", "act_space", ",", "Box", ")", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "n", "\n", "", "self", ".", "scheme", "=", "{", "\n", "\"obs\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "*", "obs_dim", ")", "\n", "}", ",", "\n", "\"act\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "act_dim", ")", "\n", "}", ",", "\n", "\"rew\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"mask\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", ",", "\n", "\"init\"", ":", "np", ".", "ones", "\n", "}", ",", "\n", "\"v\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"logp\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"ret\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"adv\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"terminal_v\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", "\n", "}", "\n", "self", ".", "keys", "=", "list", "(", "self", ".", "scheme", ".", "keys", "(", ")", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.reset": [[341, 352], ["ppo_utils.PPOBuffer.scheme.items", "info.get", "info.get", "info.get."], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Allocates space for containers.\n\n        \"\"\"", "\n", "for", "k", ",", "info", "in", "self", ".", "scheme", ".", "items", "(", ")", ":", "\n", "            ", "assert", "\"vshape\"", "in", "info", ",", "\"Scheme must define vshape for {}\"", ".", "format", "(", "k", ")", "\n", "vshape", "=", "info", "[", "\"vshape\"", "]", "\n", "dtype", "=", "info", ".", "get", "(", "\"dtype\"", ",", "np", ".", "float32", ")", "\n", "init", "=", "info", ".", "get", "(", "\"init\"", ",", "np", ".", "zeros", ")", "\n", "self", ".", "__dict__", "[", "k", "]", "=", "init", "(", "vshape", ",", "dtype", "=", "dtype", ")", "\n", "", "self", ".", "t", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.push": [[353, 366], ["batch.items", "ppo_utils.PPOBuffer.scheme[].get", "numpy.asarray().reshape", "numpy.asarray", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get"], ["", "def", "push", "(", "self", ",", "\n", "batch", "\n", ")", ":", "\n", "        ", "\"\"\"Inserts transition step data (as dict) to storage.\n\n        \"\"\"", "\n", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", ":", "\n", "            ", "assert", "k", "in", "self", ".", "keys", "\n", "shape", "=", "self", ".", "scheme", "[", "k", "]", "[", "\"vshape\"", "]", "[", "1", ":", "]", "\n", "dtype", "=", "self", ".", "scheme", "[", "k", "]", ".", "get", "(", "\"dtype\"", ",", "np", ".", "float32", ")", "\n", "v_", "=", "np", ".", "asarray", "(", "deepcopy", "(", "v", ")", ",", "dtype", "=", "dtype", ")", ".", "reshape", "(", "shape", ")", "\n", "self", ".", "__dict__", "[", "k", "]", "[", "self", ".", "t", "]", "=", "v_", "\n", "", "self", ".", "t", "=", "(", "self", ".", "t", "+", "1", ")", "%", "self", ".", "max_length", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get": [[367, 379], ["ppo_utils.PPOBuffer.scheme.items", "ppo_utils.PPOBuffer.__dict__[].reshape", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "\n", "device", "=", "\"cpu\"", "\n", ")", ":", "\n", "        ", "\"\"\"Returns all data.\n\n        \"\"\"", "\n", "batch", "=", "{", "}", "\n", "for", "k", ",", "info", "in", "self", ".", "scheme", ".", "items", "(", ")", ":", "\n", "            ", "shape", "=", "info", "[", "\"vshape\"", "]", "[", "2", ":", "]", "\n", "data", "=", "self", ".", "__dict__", "[", "k", "]", ".", "reshape", "(", "-", "1", ",", "*", "shape", ")", "\n", "batch", "[", "k", "]", "=", "torch", ".", "as_tensor", "(", "data", ",", "device", "=", "device", ")", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.sample": [[380, 391], ["ppo_utils.PPOBuffer.scheme.items", "ppo_utils.PPOBuffer.__dict__[].reshape"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "\n", "indices", "\n", ")", ":", "\n", "        ", "\"\"\"Returns partial data.\n\n        \"\"\"", "\n", "batch", "=", "{", "}", "\n", "for", "k", ",", "info", "in", "self", ".", "scheme", ".", "items", "(", ")", ":", "\n", "            ", "shape", "=", "info", "[", "\"vshape\"", "]", "[", "2", ":", "]", "\n", "batch", "[", "k", "]", "=", "self", ".", "__dict__", "[", "k", "]", ".", "reshape", "(", "-", "1", ",", "*", "shape", ")", "[", "indices", "]", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.sampler": [[392, 408], ["ppo_utils.random_sample", "numpy.arange", "ppo_utils.PPOBuffer.sample", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "ppo_utils.PPOBuffer.items"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.random_sample", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample"], ["", "def", "sampler", "(", "self", ",", "\n", "mini_batch_size", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "drop_last", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\"Makes sampler to loop through all data.\n\n        \"\"\"", "\n", "total_steps", "=", "self", ".", "max_length", "*", "self", ".", "batch_size", "\n", "sampler", "=", "random_sample", "(", "np", ".", "arange", "(", "total_steps", ")", ",", "mini_batch_size", ",", "drop_last", ")", "\n", "for", "indices", "in", "sampler", ":", "\n", "            ", "batch", "=", "self", ".", "sample", "(", "indices", ")", "\n", "batch", "=", "{", "\n", "k", ":", "torch", ".", "as_tensor", "(", "v", ",", "device", "=", "device", ")", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", "\n", "}", "\n", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.random_sample": [[410, 426], ["numpy.asarray", "indices[].reshape", "numpy.random.permutation", "len", "len"], "function", ["None"], ["", "", "", "def", "random_sample", "(", "indices", ",", "\n", "batch_size", ",", "\n", "drop_last", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\"Returns index batches to iterate over.\n\n    \"\"\"", "\n", "indices", "=", "np", ".", "asarray", "(", "np", ".", "random", ".", "permutation", "(", "indices", ")", ")", "\n", "batches", "=", "indices", "[", ":", "len", "(", "indices", ")", "//", "batch_size", "*", "batch_size", "]", ".", "reshape", "(", "\n", "-", "1", ",", "batch_size", ")", "\n", "for", "batch", "in", "batches", ":", "\n", "        ", "yield", "batch", "\n", "", "if", "not", "drop_last", ":", "\n", "        ", "r", "=", "len", "(", "indices", ")", "%", "batch_size", "\n", "if", "r", ":", "\n", "            ", "yield", "indices", "[", "-", "r", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.compute_returns_and_advantages": [[428, 457], ["numpy.concatenate", "reversed", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "copy.deepcopy", "copy.deepcopy"], "function", ["None"], ["", "", "", "def", "compute_returns_and_advantages", "(", "rews", ",", "\n", "vals", ",", "\n", "masks", ",", "\n", "terminal_vals", "=", "0", ",", "\n", "last_val", "=", "0", ",", "\n", "gamma", "=", "0.99", ",", "\n", "use_gae", "=", "False", ",", "\n", "gae_lambda", "=", "0.95", "\n", ")", ":", "\n", "    ", "\"\"\"Useful for policy-gradient algorithms.\n\n    \"\"\"", "\n", "T", ",", "N", "=", "rews", ".", "shape", "[", ":", "2", "]", "\n", "rets", ",", "advs", "=", "np", ".", "zeros", "(", "(", "T", ",", "N", ",", "1", ")", ")", ",", "np", ".", "zeros", "(", "(", "T", ",", "N", ",", "1", ")", ")", "\n", "ret", ",", "adv", "=", "last_val", ",", "np", ".", "zeros", "(", "(", "N", ",", "1", ")", ")", "\n", "vals", "=", "np", ".", "concatenate", "(", "[", "vals", ",", "last_val", "[", "np", ".", "newaxis", ",", "...", "]", "]", ",", "0", ")", "\n", "# Compensate for time truncation.", "\n", "rews", "+=", "gamma", "*", "terminal_vals", "\n", "# Cumulative discounted sums.", "\n", "for", "i", "in", "reversed", "(", "range", "(", "T", ")", ")", ":", "\n", "        ", "ret", "=", "rews", "[", "i", "]", "+", "gamma", "*", "masks", "[", "i", "]", "*", "ret", "\n", "if", "not", "use_gae", ":", "\n", "            ", "adv", "=", "ret", "-", "vals", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "td_error", "=", "rews", "[", "i", "]", "+", "gamma", "*", "masks", "[", "i", "]", "*", "vals", "[", "i", "+", "1", "]", "-", "vals", "[", "i", "]", "\n", "adv", "=", "adv", "*", "gae_lambda", "*", "gamma", "*", "masks", "[", "i", "]", "+", "td_error", "\n", "", "rets", "[", "i", "]", "=", "deepcopy", "(", "ret", ")", "\n", "advs", "[", "i", "]", "=", "deepcopy", "(", "adv", ")", "\n", "", "return", "rets", ",", "advs", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo.PPO.__init__": [[36, 85], ["safe_control_gym.controllers.base_controller.BaseController.__init__", "safe_control_gym.controllers.ppo.ppo_utils.PPOAgent", "ppo.PPO.agent.to", "safe_control_gym.math_and_models.normalization.BaseNormalizer", "safe_control_gym.math_and_models.normalization.BaseNormalizer", "safe_control_gym.utils.logging.ExperimentLogger", "safe_control_gym.envs.env_wrappers.vectorized_env.make_vec_envs", "safe_control_gym.envs.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "safe_control_gym.math_and_models.normalization.MeanStdNormalizer", "safe_control_gym.math_and_models.normalization.RewardStdNormalizer"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.__init__.make_vec_envs"], ["def", "__init__", "(", "self", ",", "\n", "env_func", ",", "\n", "training", "=", "True", ",", "\n", "checkpoint_path", "=", "\"model_latest.pt\"", ",", "\n", "output_dir", "=", "\"temp\"", ",", "\n", "use_gpu", "=", "False", ",", "\n", "seed", "=", "0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env_func", ",", "training", ",", "checkpoint_path", ",", "output_dir", ",", "use_gpu", ",", "seed", ",", "**", "kwargs", ")", "\n", "# Task.", "\n", "if", "self", ".", "training", ":", "\n", "# Training and testing.", "\n", "            ", "self", ".", "env", "=", "make_vec_envs", "(", "env_func", ",", "None", ",", "self", ".", "rollout_batch_size", ",", "self", ".", "num_workers", ",", "seed", ")", "\n", "self", ".", "env", "=", "VecRecordEpisodeStatistics", "(", "self", ".", "env", ",", "self", ".", "deque_size", ")", "\n", "self", ".", "eval_env", "=", "env_func", "(", "seed", "=", "seed", "*", "111", ")", "\n", "self", ".", "eval_env", "=", "RecordEpisodeStatistics", "(", "self", ".", "eval_env", ",", "self", ".", "deque_size", ")", "\n", "", "else", ":", "\n", "# Testing only.", "\n", "            ", "self", ".", "env", "=", "env_func", "(", ")", "\n", "self", ".", "env", "=", "RecordEpisodeStatistics", "(", "self", ".", "env", ")", "\n", "# Agent.", "\n", "", "self", ".", "agent", "=", "PPOAgent", "(", "self", ".", "env", ".", "observation_space", ",", "\n", "self", ".", "env", ".", "action_space", ",", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", ",", "\n", "use_clipped_value", "=", "self", ".", "use_clipped_value", ",", "\n", "clip_param", "=", "self", ".", "clip_param", ",", "\n", "target_kl", "=", "self", ".", "target_kl", ",", "\n", "entropy_coef", "=", "self", ".", "entropy_coef", ",", "\n", "actor_lr", "=", "self", ".", "actor_lr", ",", "\n", "critic_lr", "=", "self", ".", "critic_lr", ",", "\n", "opt_epochs", "=", "self", ".", "opt_epochs", ",", "\n", "mini_batch_size", "=", "self", ".", "mini_batch_size", ")", "\n", "self", ".", "agent", ".", "to", "(", "self", ".", "device", ")", "\n", "# Pre-/post-processing.", "\n", "self", ".", "obs_normalizer", "=", "BaseNormalizer", "(", ")", "\n", "if", "self", ".", "norm_obs", ":", "\n", "            ", "self", ".", "obs_normalizer", "=", "MeanStdNormalizer", "(", "shape", "=", "self", ".", "env", ".", "observation_space", ".", "shape", ",", "clip", "=", "self", ".", "clip_obs", ",", "epsilon", "=", "1e-8", ")", "\n", "", "self", ".", "reward_normalizer", "=", "BaseNormalizer", "(", ")", "\n", "if", "self", ".", "norm_reward", ":", "\n", "            ", "self", ".", "reward_normalizer", "=", "RewardStdNormalizer", "(", "gamma", "=", "self", ".", "gamma", ",", "clip", "=", "self", ".", "clip_reward", ",", "epsilon", "=", "1e-8", ")", "\n", "# Logging.", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "log_file_out", "=", "True", "\n", "use_tensorboard", "=", "self", ".", "tensorboard", "\n", "", "else", ":", "\n", "# Disable logging to file and tfboard for evaluation.", "\n", "            ", "log_file_out", "=", "False", "\n", "use_tensorboard", "=", "False", "\n", "", "self", ".", "logger", "=", "ExperimentLogger", "(", "output_dir", ",", "log_file_out", "=", "log_file_out", ",", "use_tensorboard", "=", "use_tensorboard", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo.PPO.reset": [[86, 105], ["ppo.PPO.env.add_tracker", "ppo.PPO.env.add_tracker", "ppo.PPO.eval_env.add_tracker", "ppo.PPO.eval_env.add_tracker", "ppo.PPO.env.reset", "ppo.PPO.obs_normalizer", "ppo.PPO.env.add_tracker", "ppo.PPO.env.add_tracker", "ppo.PPO.env.add_tracker"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do initializations for training or evaluation.\n\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "# set up stats tracking", "\n", "            ", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "eval_env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "eval_env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n", "self", ".", "total_steps", "=", "0", "\n", "obs", ",", "_", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "", "else", ":", "\n", "# Add episodic stats to be tracked.", "\n", "            ", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_values\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo.PPO.close": [[106, 114], ["ppo.PPO.env.close", "ppo.PPO.logger.close", "ppo.PPO.eval_env.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shuts down and cleans up lingering resources.\n\n        \"\"\"", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "eval_env", ".", "close", "(", ")", "\n", "", "self", ".", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo.PPO.save": [[115, 137], ["os.path.dirname", "os.makedirs", "torch.save", "ppo.PPO.agent.state_dict", "ppo.PPO.obs_normalizer.state_dict", "ppo.PPO.reward_normalizer.state_dict", "state_dict.update", "safe_control_gym.utils.utils.get_random_state", "ppo.PPO.env.get_env_random_state"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.get_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_env_random_state"], ["", "def", "save", "(", "self", ",", "\n", "path", "\n", ")", ":", "\n", "        ", "\"\"\"Saves model params and experiment state to checkpoint path.\n\n        \"\"\"", "\n", "path_dir", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "path_dir", ",", "exist_ok", "=", "True", ")", "\n", "state_dict", "=", "{", "\n", "\"agent\"", ":", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "\n", "\"obs_normalizer\"", ":", "self", ".", "obs_normalizer", ".", "state_dict", "(", ")", ",", "\n", "\"reward_normalizer\"", ":", "self", ".", "reward_normalizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "exp_state", "=", "{", "\n", "\"total_steps\"", ":", "self", ".", "total_steps", ",", "\n", "\"obs\"", ":", "self", ".", "obs", ",", "\n", "\"random_state\"", ":", "get_random_state", "(", ")", ",", "\n", "\"env_random_state\"", ":", "self", ".", "env", ".", "get_env_random_state", "(", ")", "\n", "}", "\n", "state_dict", ".", "update", "(", "exp_state", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo.PPO.load": [[138, 156], ["torch.load", "ppo.PPO.agent.load_state_dict", "ppo.PPO.obs_normalizer.load_state_dict", "ppo.PPO.reward_normalizer.load_state_dict", "safe_control_gym.utils.utils.set_random_state", "ppo.PPO.env.set_env_random_state", "ppo.PPO.logger.load"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.set_env_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load"], ["", "def", "load", "(", "self", ",", "\n", "path", "\n", ")", ":", "\n", "        ", "\"\"\"Restores model and experiment given checkpoint path.\n\n        \"\"\"", "\n", "state", "=", "torch", ".", "load", "(", "path", ")", "\n", "# Restore policy.", "\n", "self", ".", "agent", ".", "load_state_dict", "(", "state", "[", "\"agent\"", "]", ")", "\n", "self", ".", "obs_normalizer", ".", "load_state_dict", "(", "state", "[", "\"obs_normalizer\"", "]", ")", "\n", "self", ".", "reward_normalizer", ".", "load_state_dict", "(", "state", "[", "\"reward_normalizer\"", "]", ")", "\n", "# Restore experiment state.", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "total_steps", "=", "state", "[", "\"total_steps\"", "]", "\n", "self", ".", "obs", "=", "state", "[", "\"obs\"", "]", "\n", "set_random_state", "(", "state", "[", "\"random_state\"", "]", ")", "\n", "self", ".", "env", ".", "set_env_random_state", "(", "state", "[", "\"env_random_state\"", "]", ")", "\n", "self", ".", "logger", ".", "load", "(", "self", ".", "total_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo.PPO.learn": [[157, 192], ["ppo.PPO.train_step", "ppo.PPO.save", "ppo.PPO.logger.info", "os.path.join", "ppo.PPO.save", "ppo.PPO.run", "ppo.PPO.logger.info", "eval_results[].mean", "getattr", "ppo.PPO.log_step", "ppo.PPO.save", "eval_results[].mean", "eval_results[].std", "eval_results[].mean", "eval_results[].std", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.train_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.log_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save"], ["", "", "def", "learn", "(", "self", ",", "\n", "env", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Performs learning (pre-training, training, fine-tuning, etc).\n\n        \"\"\"", "\n", "while", "self", ".", "total_steps", "<", "self", ".", "max_env_steps", ":", "\n", "            ", "results", "=", "self", ".", "train_step", "(", ")", "\n", "# Checkpoint.", "\n", "if", "self", ".", "total_steps", ">=", "self", ".", "max_env_steps", "or", "(", "self", ".", "save_interval", "and", "self", ".", "total_steps", "%", "self", ".", "save_interval", "==", "0", ")", ":", "\n", "# Latest/final checkpoint.", "\n", "                ", "self", ".", "save", "(", "self", ".", "checkpoint_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Checkpoint | {}\"", ".", "format", "(", "self", ".", "checkpoint_path", ")", ")", "\n", "", "if", "self", ".", "num_checkpoints", "and", "self", ".", "total_steps", "%", "(", "self", ".", "max_env_steps", "//", "self", ".", "num_checkpoints", ")", "==", "0", ":", "\n", "# Intermediate checkpoint.", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"checkpoints\"", ",", "\"model_{}.pt\"", ".", "format", "(", "self", ".", "total_steps", ")", ")", "\n", "self", ".", "save", "(", "path", ")", "\n", "# Evaluation.", "\n", "", "if", "self", ".", "eval_interval", "and", "self", ".", "total_steps", "%", "self", ".", "eval_interval", "==", "0", ":", "\n", "                ", "eval_results", "=", "self", ".", "run", "(", "env", "=", "self", ".", "eval_env", ",", "n_episodes", "=", "self", ".", "eval_batch_size", ")", "\n", "results", "[", "\"eval\"", "]", "=", "eval_results", "\n", "self", ".", "logger", ".", "info", "(", "\"Eval | ep_lengths {:.2f} +/- {:.2f} | ep_return {:.3f} +/- {:.3f}\"", ".", "format", "(", "eval_results", "[", "\"ep_lengths\"", "]", ".", "mean", "(", ")", ",", "\n", "eval_results", "[", "\"ep_lengths\"", "]", ".", "std", "(", ")", ",", "\n", "eval_results", "[", "\"ep_returns\"", "]", ".", "mean", "(", ")", ",", "\n", "eval_results", "[", "\"ep_returns\"", "]", ".", "std", "(", ")", ")", ")", "\n", "# Save best model.", "\n", "eval_score", "=", "eval_results", "[", "\"ep_returns\"", "]", ".", "mean", "(", ")", "\n", "eval_best_score", "=", "getattr", "(", "self", ",", "\"eval_best_score\"", ",", "-", "np", ".", "infty", ")", "\n", "if", "self", ".", "eval_save_best", "and", "eval_best_score", "<", "eval_score", ":", "\n", "                    ", "self", ".", "eval_best_score", "=", "eval_score", "\n", "self", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"model_best.pt\"", ")", ")", "\n", "# Logging.", "\n", "", "", "if", "self", ".", "log_interval", "and", "self", ".", "total_steps", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "self", ".", "log_step", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo.PPO.run": [[193, 246], ["ppo.PPO.agent.eval", "ppo.PPO.obs_normalizer.set_read_only", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.reset", "ppo.PPO.obs_normalizer", "numpy.asarray", "numpy.asarray", "len", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.step", "ppo.PPO.obs_normalizer", "len", "len", "eval_results.update", "safe_control_gym.utils.utils.is_wrapped", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "torch.no_grad", "torch.FloatTensor().to", "ppo.PPO.agent.ac.act", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.render", "frames.append", "print", "numpy.asarray.append", "numpy.asarray.append", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.reset", "numpy.asarray", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.render", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.queued_stats.items", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.set_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.is_wrapped", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render"], ["", "", "", "def", "run", "(", "self", ",", "\n", "env", "=", "None", ",", "\n", "render", "=", "False", ",", "\n", "n_episodes", "=", "10", ",", "\n", "verbose", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Runs evaluation with current policy.\n\n        \"\"\"", "\n", "self", ".", "agent", ".", "eval", "(", ")", "\n", "self", ".", "obs_normalizer", ".", "set_read_only", "(", ")", "\n", "if", "env", "is", "None", ":", "\n", "            ", "env", "=", "self", ".", "env", "\n", "", "else", ":", "\n", "            ", "if", "not", "is_wrapped", "(", "env", ",", "RecordEpisodeStatistics", ")", ":", "\n", "                ", "env", "=", "RecordEpisodeStatistics", "(", "env", ",", "n_episodes", ")", "\n", "# Add eposodic stats to be tracked.", "\n", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"constraint_values\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n", "", "", "obs", ",", "info", "=", "env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "ep_returns", ",", "ep_lengths", "=", "[", "]", ",", "[", "]", "\n", "frames", "=", "[", "]", "\n", "while", "len", "(", "ep_returns", ")", "<", "n_episodes", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "obs", "=", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "action", "=", "self", ".", "agent", ".", "ac", ".", "act", "(", "obs", ")", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "render", ":", "\n", "                ", "env", ".", "render", "(", ")", "\n", "frames", ".", "append", "(", "env", ".", "render", "(", "\"rgb_array\"", ")", ")", "\n", "", "if", "verbose", ":", "\n", "                ", "print", "(", "\"obs {} | act {}\"", ".", "format", "(", "obs", ",", "action", ")", ")", "\n", "", "if", "done", ":", "\n", "                ", "assert", "\"episode\"", "in", "info", "\n", "ep_returns", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"r\"", "]", ")", "\n", "ep_lengths", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"l\"", "]", ")", "\n", "obs", ",", "_", "=", "env", ".", "reset", "(", ")", "\n", "", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "# Collect evaluation results.", "\n", "", "ep_lengths", "=", "np", ".", "asarray", "(", "ep_lengths", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "ep_returns", ")", "\n", "eval_results", "=", "{", "\"ep_returns\"", ":", "ep_returns", ",", "\"ep_lengths\"", ":", "ep_lengths", "}", "\n", "if", "len", "(", "frames", ")", ">", "0", ":", "\n", "            ", "eval_results", "[", "\"frames\"", "]", "=", "frames", "\n", "# Other episodic stats from evaluation env.", "\n", "", "if", "len", "(", "env", ".", "queued_stats", ")", ">", "0", ":", "\n", "            ", "queued_stats", "=", "{", "k", ":", "np", ".", "asarray", "(", "v", ")", "for", "k", ",", "v", "in", "env", ".", "queued_stats", ".", "items", "(", ")", "}", "\n", "eval_results", ".", "update", "(", "queued_stats", ")", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo.PPO.train_step": [[247, 294], ["ppo.PPO.agent.train", "ppo.PPO.obs_normalizer.unset_read_only", "safe_control_gym.controllers.ppo.ppo_utils.PPOBuffer", "time.time", "range", "ppo.PPO.agent.ac.critic().detach().cpu().numpy", "safe_control_gym.controllers.ppo.ppo_utils.compute_returns_and_advantages", "ppo.PPO.agent.update", "ppo.PPO.update", "ppo.PPO.env.step", "ppo.PPO.obs_normalizer", "ppo.PPO.reward_normalizer", "numpy.zeros_like", "enumerate", "safe_control_gym.controllers.ppo.ppo_utils.PPOBuffer.push", "torch.no_grad", "ppo.PPO.agent.ac.step", "done.astype", "ppo.PPO.agent.ac.critic().detach().cpu", "adv.mean", "adv.std", "torch.FloatTensor().to", "torch.FloatTensor().unsqueeze().to", "ppo.PPO.agent.ac.critic().squeeze().detach().cpu().numpy", "time.time", "ppo.PPO.agent.ac.critic().detach", "torch.FloatTensor", "torch.FloatTensor().unsqueeze", "ppo.PPO.agent.ac.critic().squeeze().detach().cpu", "ppo.PPO.agent.ac.critic", "torch.FloatTensor", "ppo.PPO.agent.ac.critic().squeeze().detach", "torch.FloatTensor().to", "ppo.PPO.agent.ac.critic().squeeze", "torch.FloatTensor", "ppo.PPO.agent.ac.critic"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.unset_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.compute_returns_and_advantages", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.push", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["", "def", "train_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Performs a training/fine-tuning step.\n\n        \"\"\"", "\n", "self", ".", "agent", ".", "train", "(", ")", "\n", "self", ".", "obs_normalizer", ".", "unset_read_only", "(", ")", "\n", "rollouts", "=", "PPOBuffer", "(", "self", ".", "env", ".", "observation_space", ",", "self", ".", "env", ".", "action_space", ",", "self", ".", "rollout_steps", ",", "self", ".", "rollout_batch_size", ")", "\n", "obs", "=", "self", ".", "obs", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "step", "in", "range", "(", "self", ".", "rollout_steps", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "act", ",", "v", ",", "logp", "=", "self", ".", "agent", ".", "ac", ".", "step", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "next_obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "act", ")", "\n", "next_obs", "=", "self", ".", "obs_normalizer", "(", "next_obs", ")", "\n", "rew", "=", "self", ".", "reward_normalizer", "(", "rew", ",", "done", ")", "\n", "mask", "=", "1", "-", "done", ".", "astype", "(", "float", ")", "\n", "# Time truncation is not the same as true termination.", "\n", "terminal_v", "=", "np", ".", "zeros_like", "(", "v", ")", "\n", "for", "idx", ",", "inf", "in", "enumerate", "(", "info", "[", "\"n\"", "]", ")", ":", "\n", "                ", "if", "\"terminal_info\"", "not", "in", "inf", ":", "\n", "                    ", "continue", "\n", "", "inff", "=", "inf", "[", "\"terminal_info\"", "]", "\n", "if", "\"TimeLimit.truncated\"", "in", "inff", "and", "inff", "[", "\"TimeLimit.truncated\"", "]", ":", "\n", "                    ", "terminal_obs", "=", "inf", "[", "\"terminal_observation\"", "]", "\n", "terminal_obs_tensor", "=", "torch", ".", "FloatTensor", "(", "terminal_obs", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "terminal_val", "=", "self", ".", "agent", ".", "ac", ".", "critic", "(", "terminal_obs_tensor", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "terminal_v", "[", "idx", "]", "=", "terminal_val", "\n", "", "", "rollouts", ".", "push", "(", "{", "\"obs\"", ":", "obs", ",", "\"act\"", ":", "act", ",", "\"rew\"", ":", "rew", ",", "\"mask\"", ":", "mask", ",", "\"v\"", ":", "v", ",", "\"logp\"", ":", "logp", ",", "\"terminal_v\"", ":", "terminal_v", "}", ")", "\n", "obs", "=", "next_obs", "\n", "", "self", ".", "obs", "=", "obs", "\n", "self", ".", "total_steps", "+=", "self", ".", "rollout_batch_size", "*", "self", ".", "rollout_steps", "\n", "# Learn from rollout batch.", "\n", "last_val", "=", "self", ".", "agent", ".", "ac", ".", "critic", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ret", ",", "adv", "=", "compute_returns_and_advantages", "(", "rollouts", ".", "rew", ",", "\n", "rollouts", ".", "v", ",", "\n", "rollouts", ".", "mask", ",", "\n", "rollouts", ".", "terminal_v", ",", "\n", "last_val", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "use_gae", "=", "self", ".", "use_gae", ",", "\n", "gae_lambda", "=", "self", ".", "gae_lambda", ")", "\n", "rollouts", ".", "ret", "=", "ret", "\n", "# Prevent divide-by-0 for repetitive tasks.", "\n", "rollouts", ".", "adv", "=", "(", "adv", "-", "adv", ".", "mean", "(", ")", ")", "/", "(", "adv", ".", "std", "(", ")", "+", "1e-6", ")", "\n", "results", "=", "self", ".", "agent", ".", "update", "(", "rollouts", ",", "self", ".", "device", ")", "\n", "results", ".", "update", "(", "{", "\"step\"", ":", "self", ".", "total_steps", ",", "\"elapsed_time\"", ":", "time", ".", "time", "(", ")", "-", "start", "}", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo.PPO.log_step": [[295, 354], ["ppo.PPO.logger.add_scalars", "ppo.PPO.logger.add_scalars", "numpy.asarray", "numpy.asarray", "numpy.asarray", "ppo.PPO.logger.add_scalars", "ppo.PPO.logger.add_scalars", "ppo.PPO.logger.dump_scalars", "ppo.PPO.logger.add_scalars", "numpy.asarray.mean", "numpy.asarray.mean", "numpy.asarray.mean", "eval_ep_lengths.mean", "eval_ep_returns.mean", "eval_constraint_violation.mean", "eval_mse.mean"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.dump_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars"], ["", "def", "log_step", "(", "self", ",", "\n", "results", "\n", ")", ":", "\n", "        ", "\"\"\"Does logging after a training step.\n\n        \"\"\"", "\n", "step", "=", "results", "[", "\"step\"", "]", "\n", "# runner stats", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"step\"", ":", "step", ",", "\n", "\"step_time\"", ":", "results", "[", "\"elapsed_time\"", "]", ",", "\n", "\"progress\"", ":", "step", "/", "self", ".", "max_env_steps", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"time\"", ",", "\n", "write", "=", "False", ",", "\n", "write_tb", "=", "False", ")", "\n", "# Learning stats.", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "k", ":", "results", "[", "k", "]", "\n", "for", "k", "in", "[", "\"policy_loss\"", ",", "\"value_loss\"", ",", "\"entropy_loss\"", ",", "\"approx_kl\"", "]", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"loss\"", ")", "\n", "# Performance stats.", "\n", "ep_lengths", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "length_queue", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "return_queue", ")", "\n", "ep_constraint_violation", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "queued_stats", "[", "\"constraint_violation\"", "]", ")", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"ep_length\"", ":", "ep_lengths", ".", "mean", "(", ")", ",", "\n", "\"ep_return\"", ":", "ep_returns", ".", "mean", "(", ")", ",", "\n", "\"ep_reward\"", ":", "(", "ep_returns", "/", "ep_lengths", ")", ".", "mean", "(", ")", ",", "\n", "\"ep_constraint_violation\"", ":", "ep_constraint_violation", ".", "mean", "(", ")", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"stat\"", ")", "\n", "# Total constraint violation during learning.", "\n", "total_violations", "=", "self", ".", "env", ".", "accumulated_stats", "[", "\"constraint_violation\"", "]", "\n", "self", ".", "logger", ".", "add_scalars", "(", "{", "\"constraint_violation\"", ":", "total_violations", "}", ",", "step", ",", "prefix", "=", "\"stat\"", ")", "\n", "if", "\"eval\"", "in", "results", ":", "\n", "            ", "eval_ep_lengths", "=", "results", "[", "\"eval\"", "]", "[", "\"ep_lengths\"", "]", "\n", "eval_ep_returns", "=", "results", "[", "\"eval\"", "]", "[", "\"ep_returns\"", "]", "\n", "eval_constraint_violation", "=", "results", "[", "\"eval\"", "]", "[", "\"constraint_violation\"", "]", "\n", "eval_mse", "=", "results", "[", "\"eval\"", "]", "[", "\"mse\"", "]", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"ep_length\"", ":", "eval_ep_lengths", ".", "mean", "(", ")", ",", "\n", "\"ep_return\"", ":", "eval_ep_returns", ".", "mean", "(", ")", ",", "\n", "\"ep_reward\"", ":", "(", "eval_ep_returns", "/", "eval_ep_lengths", ")", ".", "mean", "(", ")", ",", "\n", "\"constraint_violation\"", ":", "eval_constraint_violation", ".", "mean", "(", ")", ",", "\n", "\"mse\"", ":", "eval_mse", ".", "mean", "(", ")", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"stat_eval\"", ")", "\n", "# Print summary table", "\n", "", "self", ".", "logger", ".", "dump_scalars", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.__init__": [[25, 62], ["isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "isinstance", "numpy.array", "isinstance", "isinstance", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "ValueError", "safe_control_gym.math_and_models.neural_networks.MLP", "model.parameters", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "obs_space", ",", "\n", "act_space", ",", "\n", "hidden_dim", "=", "64", ",", "\n", "num_constraints", "=", "1", ",", "\n", "lr", "=", "0.001", ",", "\n", "slack", "=", "None", ",", "\n", "device", "=", "'cpu'", ",", "\n", "**", "kwargs", ")", ":", "\n", "# Parameters.", "\n", "        ", "self", ".", "num_constraints", "=", "num_constraints", "\n", "self", ".", "device", "=", "device", "\n", "# Seperate model per constraint.", "\n", "input_dim", "=", "obs_space", ".", "shape", "[", "0", "]", "\n", "output_dim", "=", "act_space", ".", "shape", "[", "0", "]", "\n", "\n", "# default 1 layer ", "\n", "if", "isinstance", "(", "hidden_dim", ",", "int", ")", ":", "\n", "            ", "hidden_dims", "=", "[", "hidden_dim", "]", "\n", "", "elif", "isinstance", "(", "hidden_dim", ",", "list", ")", ":", "\n", "            ", "hidden_dims", "=", "hidden_dim", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"hidden_dim can only be int or list.\"", ")", "\n", "", "self", ".", "constraint_models", "=", "nn", ".", "ModuleList", "(", "[", "\n", "# MLP(input_dim, output_dim, hidden_dims=[hidden_dim])", "\n", "MLP", "(", "input_dim", ",", "output_dim", ",", "hidden_dims", "=", "hidden_dims", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_constraints", ")", "\n", "]", ")", "\n", "# Constraint slack variables/values.", "\n", "assert", "slack", "is", "not", "None", "and", "isinstance", "(", "slack", ",", "(", "int", ",", "float", ",", "list", ")", ")", "\n", "if", "isinstance", "(", "slack", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "slack", "=", "[", "slack", "]", "*", "obs_space", ".", "shape", "[", "0", "]", "\n", "", "self", ".", "slack", "=", "np", ".", "array", "(", "slack", ")", "\n", "# Optimizers.", "\n", "self", ".", "optimizers", "=", "[", "\n", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "for", "model", "in", "self", ".", "constraint_models", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.to": [[64, 71], ["safe_explorer_utils.SafetyLayer.constraint_models.to"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["", "def", "to", "(", "self", ",", "\n", "device", "\n", ")", ":", "\n", "        ", "\"\"\"Puts agent to device.\n\n        \"\"\"", "\n", "self", ".", "constraint_models", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.train": [[72, 77], ["safe_explorer_utils.SafetyLayer.constraint_models.train"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets training mode.\n\n        \"\"\"", "\n", "self", ".", "constraint_models", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.eval": [[78, 83], ["safe_explorer_utils.SafetyLayer.constraint_models.eval"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets evaluation mode.\n\n        \"\"\"", "\n", "self", ".", "constraint_models", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.state_dict": [[84, 91], ["safe_explorer_utils.SafetyLayer.constraint_models.state_dict", "opt.state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Snapshots agent state.\n\n        \"\"\"", "\n", "return", "{", "\n", "\"constraint_models\"", ":", "self", ".", "constraint_models", ".", "state_dict", "(", ")", ",", "\n", "\"optimizers\"", ":", "[", "opt", ".", "state_dict", "(", ")", "for", "opt", "in", "self", ".", "optimizers", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.load_state_dict": [[93, 102], ["safe_explorer_utils.SafetyLayer.constraint_models.load_state_dict", "enumerate", "safe_explorer_utils.SafetyLayer.optimizers[].load_state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "\n", "state_dict", "\n", ")", ":", "\n", "        ", "\"\"\"Restores agent state.\n\n        \"\"\"", "\n", "self", ".", "constraint_models", ".", "load_state_dict", "(", "state_dict", "[", "\"constraint_models\"", "]", ")", "\n", "for", "i", ",", "opt_state_dict", "in", "enumerate", "(", "state_dict", "[", "\"optimizers\"", "]", ")", ":", "\n", "            ", "self", ".", "optimizers", "[", "i", "]", ".", "load_state_dict", "(", "opt_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.compute_loss": [[103, 125], ["batch[].to", "batch[].to", "batch[].to", "batch[].to", "model", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "enumerate", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "g.view", "act.view"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["", "", "def", "compute_loss", "(", "self", ",", "\n", "batch", "\n", ")", ":", "\n", "        ", "\"\"\"Gets constraint value L2 loss for each constraint.\n\n        \"\"\"", "\n", "obs", ",", "act", "=", "batch", "[", "\"obs\"", "]", ".", "to", "(", "self", ".", "device", ")", ",", "batch", "[", "\"act\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "c", ",", "c_next", "=", "batch", "[", "\"c\"", "]", ".", "to", "(", "self", ".", "device", ")", ",", "batch", "[", "\"c_next\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "gs", "=", "[", "model", "(", "obs", ")", "for", "model", "in", "self", ".", "constraint_models", "]", "\n", "\n", "# Each is (N,1,A) x (N,A,1) -> (N,), so [(N,)]_{n_constriants}", "\n", "c_next_pred", "=", "[", "\n", "c", "[", ":", ",", "i", "]", "+", "torch", ".", "bmm", "(", "g", ".", "view", "(", "g", ".", "shape", "[", "0", "]", ",", "1", ",", "-", "1", ")", ",", "\n", "act", ".", "view", "(", "act", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "for", "i", ",", "g", "in", "enumerate", "(", "gs", ")", "\n", "]", "\n", "losses", "=", "[", "\n", "torch", ".", "mean", "(", "(", "c_next", "[", ":", ",", "i", "]", "-", "c_next_pred", "[", "i", "]", ")", "**", "2", ")", ".", "cpu", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_constraints", ")", "\n", "]", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.update": [[126, 140], ["safe_explorer_utils.SafetyLayer.compute_loss", "zip", "opt.zero_grad", "loss.backward", "opt.step", "loss.item", "enumerate"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.compute_loss", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step"], ["", "def", "update", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Updates the constraint models from data batch.\n\n        \"\"\"", "\n", "losses", "=", "self", ".", "compute_loss", "(", "batch", ")", "\n", "for", "loss", ",", "opt", "in", "zip", "(", "losses", ",", "self", ".", "optimizers", ")", ":", "\n", "            ", "opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "", "results", "=", "{", "\n", "\"constraint_{}_loss\"", ".", "format", "(", "i", ")", ":", "loss", ".", "item", "(", ")", "\n", "for", "i", ",", "loss", "in", "enumerate", "(", "losses", ")", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.get_safe_action": [[141, 198], ["safe_explorer_utils.SafetyLayer.eval", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "max_idx.view().tolist.view().tolist.view().tolist", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "model", "len", "torch.relu", "torch.relu", "torch.relu", "torch.stack.append", "torch.stack.append", "torch.stack.append", "float", "warnings.warn", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.gt().float().sum", "torch.gt().float().sum", "torch.gt().float().sum", "torch.gt().float().sum", "torch.gt().float().sum", "torch.gt().float().sum", "torch.gt().float().sum", "torch.gt().float().sum", "torch.gt().float().sum", "max_idx.view().tolist.view().tolist.view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "enumerate", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "g_i.unsqueeze", "g_i.unsqueeze", "g_i.unsqueeze", "act.unsqueeze", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval"], ["", "def", "get_safe_action", "(", "self", ",", "\n", "obs", ",", "\n", "act", ",", "\n", "c", "\n", ")", ":", "\n", "        ", "\"\"\"Does action projection with the trained safety layer.\n\n        According to Dalal 2018, this simple projection works when only 1 constraint at a time\n        is active; for multiple active constriants, either resort to in-graph QP solver such as\n        OptLayer or see cvxpylayers (https://github.com/cvxgrp/cvxpylayers).\n\n        Args:\n            obs (torch.FloatTensor): observations, shape (B,O).\n            act (torch.FloatTensor): actions, shape (B,A).\n            c (torch.FloatTensor): constraints, shape (B,C).\n            \n        Returns:\n            torch.FloatTensor: transformed/projected actions, shape (B,A).\n\n        \"\"\"", "\n", "self", ".", "eval", "(", ")", "\n", "# [(B,A)]_C", "\n", "g", "=", "[", "model", "(", "obs", ")", "for", "model", "in", "self", ".", "constraint_models", "]", "\n", "# Find the lagrange multipliers [(B,)]_C", "\n", "multipliers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "g", ")", ")", ":", "\n", "            ", "g_i", "=", "g", "[", "i", "]", "# (B,A)", "\n", "c_i", "=", "c", "[", ":", ",", "i", "]", "# (B,)", "\n", "# (B,1,A)x(B,A,1) -> (B,1,1) -> (B,)", "\n", "numer", "=", "torch", ".", "bmm", "(", "g_i", ".", "unsqueeze", "(", "1", ")", ",", "\n", "act", ".", "unsqueeze", "(", "2", ")", ")", ".", "view", "(", "-", "1", ")", "+", "c_i", "+", "self", ".", "slack", "[", "i", "]", "\n", "denomin", "=", "torch", ".", "bmm", "(", "g_i", ".", "unsqueeze", "(", "1", ")", ",", "\n", "g_i", ".", "unsqueeze", "(", "2", ")", ")", ".", "view", "(", "-", "1", ")", "+", "1e-8", "\n", "# Equation (5) from Dalal 2018.", "\n", "mult", "=", "F", ".", "relu", "(", "numer", "/", "denomin", ")", "# (B,)", "\n", "multipliers", ".", "append", "(", "mult", ")", "\n", "", "multipliers", "=", "torch", ".", "stack", "(", "multipliers", ",", "-", "1", ")", "# (B,C)", "\n", "# Check assumption on at most 1 active constraint ", "\n", "# - as mentioned in the original paper, this simple, analytical solution of the safety layer only holds ", "\n", "# with this assumption; otherwise resort to a differentiable layer for solving constrained optimization, ", "\n", "# e.g. OptLayer or the differentiable MPC works; or alternatively combine multiple constraints to a single one.", "\n", "# - if the assumption is not satisfied, the layer will try to address the worst violation from the ", "\n", "# the largest lagrange variable (with the use of `topk(..., 1)`)", "\n", "# - to check the assumption, check for each step in batch if |{i | \\lambda_i > 0}| <= 1", "\n", "if", "float", "(", "torch", ".", "gt", "(", "multipliers", ",", "0", ")", ".", "float", "(", ")", ".", "sum", "(", ")", ")", ">", "multipliers", ".", "shape", "[", "0", "]", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"\"\"Assumption of at most 1 active constraint per step is violated in the current batch, \n                the filtered action will alleviate the worst violation but do not guarantee \n                satisfaction of all constraints, are you sure to proceed?\"\"\"", ")", "\n", "# Calculate correction, equation (6) from Dalal 2018.", "\n", "", "max_mult", ",", "max_idx", "=", "torch", ".", "topk", "(", "multipliers", ",", "1", ",", "dim", "=", "-", "1", ")", "# (B,1)", "\n", "max_idx", "=", "max_idx", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", "# []_B", "\n", "# [(A,)]_B -> (B,A)", "\n", "max_g", "=", "torch", ".", "stack", "(", "[", "g", "[", "max_i", "]", "[", "i", "]", "for", "i", ",", "max_i", "in", "enumerate", "(", "max_idx", ")", "]", ")", "\n", "# (B,1) x (B,A) -> (B,A)", "\n", "correction", "=", "max_mult", "*", "max_g", "\n", "action_new", "=", "act", "-", "correction", "\n", "return", "action_new", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.ConstraintBuffer.__init__": [[211, 243], ["object.__init__", "isinstance", "list", "safe_explorer_utils.ConstraintBuffer.reset", "safe_explorer_utils.ConstraintBuffer.scheme.keys"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["def", "__init__", "(", "self", ",", "\n", "obs_space", ",", "\n", "act_space", ",", "\n", "num_constraints", ",", "\n", "max_size", ",", "\n", "batch_size", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "obs_dim", "=", "obs_space", ".", "shape", "\n", "if", "isinstance", "(", "act_space", ",", "Box", ")", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "n", "\n", "", "N", "=", "max_size", "\n", "self", ".", "scheme", "=", "{", "\n", "\"obs\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "*", "obs_dim", ")", "\n", "}", ",", "\n", "\"act\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "act_dim", ")", "\n", "}", ",", "\n", "\"c\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "num_constraints", ")", "\n", "}", ",", "\n", "\"c_next\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "num_constraints", ")", "\n", "}", "\n", "}", "\n", "self", ".", "keys", "=", "list", "(", "self", ".", "scheme", ".", "keys", "(", ")", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.ConstraintBuffer.reset": [[244, 257], ["safe_explorer_utils.ConstraintBuffer.scheme.items", "info.get", "info.get", "info.get."], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Allocate space for containers.\n\n        \"\"\"", "\n", "for", "k", ",", "info", "in", "self", ".", "scheme", ".", "items", "(", ")", ":", "\n", "            ", "assert", "\"vshape\"", "in", "info", ",", "\"Scheme must define vshape for {}\"", ".", "format", "(", "\n", "k", ")", "\n", "vshape", "=", "info", "[", "\"vshape\"", "]", "\n", "dtype", "=", "info", ".", "get", "(", "\"dtype\"", ",", "np", ".", "float32", ")", "\n", "init", "=", "info", ".", "get", "(", "\"init\"", ",", "np", ".", "zeros", ")", "\n", "self", ".", "__dict__", "[", "k", "]", "=", "init", "(", "vshape", ",", "dtype", "=", "dtype", ")", "\n", "", "self", ".", "pos", "=", "0", "\n", "self", ".", "buffer_size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.ConstraintBuffer.__len__": [[258, 263], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns current size of the buffer.\n\n        \"\"\"", "\n", "return", "self", ".", "buffer_size", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.ConstraintBuffer.state_dict": [[264, 276], ["dict"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a snapshot of current buffer.\n\n        \"\"\"", "\n", "state", "=", "dict", "(", "\n", "pos", "=", "self", ".", "pos", ",", "\n", "buffer_size", "=", "self", ".", "buffer_size", ",", "\n", ")", "\n", "for", "k", "in", "self", ".", "scheme", ":", "\n", "            ", "v", "=", "self", ".", "__dict__", "[", "k", "]", "\n", "state", "[", "k", "]", "=", "v", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.ConstraintBuffer.load_state_dict": [[277, 285], ["state.items"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "\n", "state", "\n", ")", ":", "\n", "        ", "\"\"\"Restores buffer from previous state.\n\n        \"\"\"", "\n", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.ConstraintBuffer.push": [[286, 309], ["batch.items", "list", "safe_explorer_utils.ConstraintBuffer.scheme[].get", "numpy.asarray().reshape", "min", "batch.keys", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get"], ["", "", "def", "push", "(", "self", ",", "\n", "batch", "\n", ")", ":", "\n", "        ", "\"\"\"Inserts transition step data (as dict) to storage.\n\n        \"\"\"", "\n", "# Batch size.", "\n", "k", "=", "list", "(", "batch", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "n", "=", "batch", "[", "k", "]", ".", "shape", "[", "0", "]", "\n", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", ":", "\n", "            ", "shape", "=", "self", ".", "scheme", "[", "k", "]", "[", "\"vshape\"", "]", "[", "1", ":", "]", "\n", "dtype", "=", "self", ".", "scheme", "[", "k", "]", ".", "get", "(", "\"dtype\"", ",", "np", ".", "float32", ")", "\n", "v_", "=", "np", ".", "asarray", "(", "v", ",", "dtype", "=", "dtype", ")", ".", "reshape", "(", "(", "n", ",", ")", "+", "shape", ")", "\n", "if", "self", ".", "pos", "+", "n", "<=", "self", ".", "max_size", ":", "\n", "                ", "self", ".", "__dict__", "[", "k", "]", "[", "self", ".", "pos", ":", "self", ".", "pos", "+", "n", "]", "=", "v_", "\n", "", "else", ":", "\n", "# Wrap.", "\n", "                ", "remain_n", "=", "self", ".", "pos", "+", "n", "-", "self", ".", "max_size", "\n", "self", ".", "__dict__", "[", "k", "]", "[", "self", ".", "pos", ":", "self", ".", "max_size", "]", "=", "v_", "[", ":", "-", "remain_n", "]", "\n", "self", ".", "__dict__", "[", "k", "]", "[", ":", "remain_n", "]", "=", "v_", "[", "-", "remain_n", ":", "]", "\n", "", "", "if", "self", ".", "buffer_size", "<", "self", ".", "max_size", ":", "\n", "            ", "self", ".", "buffer_size", "=", "min", "(", "self", ".", "max_size", ",", "self", ".", "pos", "+", "n", ")", "\n", "", "self", ".", "pos", "=", "(", "self", ".", "pos", "+", "n", ")", "%", "self", ".", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.ConstraintBuffer.sample": [[310, 321], ["safe_explorer_utils.ConstraintBuffer.scheme.items", "safe_explorer_utils.ConstraintBuffer.__dict__[].reshape"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "\n", "indices", "\n", ")", ":", "\n", "        ", "\"\"\"Returns partial data.\n\n        \"\"\"", "\n", "batch", "=", "{", "}", "\n", "for", "k", ",", "info", "in", "self", ".", "scheme", ".", "items", "(", ")", ":", "\n", "            ", "shape", "=", "info", "[", "\"vshape\"", "]", "[", "1", ":", "]", "\n", "batch", "[", "k", "]", "=", "self", ".", "__dict__", "[", "k", "]", ".", "reshape", "(", "-", "1", ",", "*", "shape", ")", "[", "indices", "]", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.ConstraintBuffer.sampler": [[322, 338], ["len", "safe_control_gym.controllers.ppo.ppo_utils.random_sample", "numpy.arange", "safe_explorer_utils.ConstraintBuffer.sample", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "safe_explorer_utils.ConstraintBuffer.items"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.random_sample", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample"], ["", "def", "sampler", "(", "self", ",", "\n", "batch_size", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "drop_last", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\"Makes sampler to loop through all data.\n\n        \"\"\"", "\n", "total_steps", "=", "len", "(", "self", ")", "\n", "sampler", "=", "random_sample", "(", "np", ".", "arange", "(", "total_steps", ")", ",", "batch_size", ",", "drop_last", ")", "\n", "for", "indices", "in", "sampler", ":", "\n", "            ", "batch", "=", "self", ".", "sample", "(", "indices", ")", "\n", "batch", "=", "{", "\n", "k", ":", "torch", ".", "as_tensor", "(", "v", ",", "device", "=", "device", ")", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", "\n", "}", "\n", "yield", "batch", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo_utils.SafePPOAgent.__init__": [[20, 53], ["safe_ppo_utils.MLPActorCritic", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "safe_ppo_utils.SafePPOAgent.ac.actor.parameters", "safe_ppo_utils.SafePPOAgent.ac.critic.parameters"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "obs_space", ",", "\n", "act_space", ",", "\n", "hidden_dim", "=", "64", ",", "\n", "use_clipped_value", "=", "False", ",", "\n", "clip_param", "=", "0.2", ",", "\n", "target_kl", "=", "0.01", ",", "\n", "entropy_coef", "=", "0.01", ",", "\n", "actor_lr", "=", "0.0003", ",", "\n", "critic_lr", "=", "0.001", ",", "\n", "opt_epochs", "=", "10", ",", "\n", "mini_batch_size", "=", "64", ",", "\n", "action_modifier", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "# Parameters.", "\n", "        ", "self", ".", "obs_space", "=", "obs_space", "\n", "self", ".", "act_space", "=", "act_space", "\n", "self", ".", "use_clipped_value", "=", "use_clipped_value", "\n", "self", ".", "clip_param", "=", "clip_param", "\n", "self", ".", "target_kl", "=", "target_kl", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "self", ".", "opt_epochs", "=", "opt_epochs", "\n", "self", ".", "mini_batch_size", "=", "mini_batch_size", "\n", "# Model.", "\n", "self", ".", "ac", "=", "MLPActorCritic", "(", "obs_space", ",", "\n", "act_space", ",", "\n", "hidden_dims", "=", "[", "hidden_dim", "]", "*", "2", ",", "\n", "activation", "=", "\"tanh\"", ",", "\n", "action_modifier", "=", "action_modifier", ")", "\n", "# Optimizers.", "\n", "self", ".", "actor_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "ac", ".", "actor", ".", "parameters", "(", ")", ",", "actor_lr", ")", "\n", "self", ".", "critic_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "ac", ".", "critic", ".", "parameters", "(", ")", ",", "critic_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo_utils.SafePPOAgent.compute_policy_loss": [[54, 69], ["safe_ppo_utils.SafePPOAgent.ac.actor", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "dist.entropy().mean", "torch.min", "torch.min", "torch.min", "torch.min", "dist.entropy"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Normal.entropy"], ["", "def", "compute_policy_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Returns policy loss(es) given batch of data.\n\n        \"\"\"", "\n", "obs", ",", "act", ",", "logp_old", ",", "adv", ",", "c", "=", "batch", "[", "\"obs\"", "]", ",", "batch", "[", "\"act\"", "]", ",", "batch", "[", "\"logp\"", "]", ",", "batch", "[", "\"adv\"", "]", ",", "batch", "[", "\"c\"", "]", "\n", "dist", ",", "logp", "=", "self", ".", "ac", ".", "actor", "(", "obs", ",", "act", ",", "c", "=", "c", ")", "\n", "# Policy.", "\n", "ratio", "=", "torch", ".", "exp", "(", "logp", "-", "logp_old", ")", "\n", "clip_adv", "=", "torch", ".", "clamp", "(", "ratio", ",", "1", "-", "self", ".", "clip_param", ",", "1", "+", "self", ".", "clip_param", ")", "*", "adv", "\n", "policy_loss", "=", "-", "torch", ".", "min", "(", "ratio", "*", "adv", ",", "clip_adv", ")", ".", "mean", "(", ")", "\n", "# Entropy.", "\n", "entropy_loss", "=", "-", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "# KL/trust region.", "\n", "approx_kl", "=", "(", "logp_old", "-", "logp", ")", ".", "mean", "(", ")", "\n", "return", "policy_loss", ",", "entropy_loss", ",", "approx_kl", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo_utils.MLPActor.__init__": [[76, 98], ["torch.Module.__init__", "safe_control_gym.math_and_models.neural_networks.MLP", "torch.Parameter", "torch.Parameter", "safe_control_gym.math_and_models.distributions.Categorical", "safe_control_gym.math_and_models.distributions.Normal", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "safe_ppo_utils.MLPActor.logstd.exp"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "obs_dim", ",", "\n", "act_dim", ",", "\n", "hidden_dims", ",", "\n", "activation", ",", "\n", "discrete", "=", "False", ",", "\n", "action_modifier", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pi_net", "=", "MLP", "(", "obs_dim", ",", "act_dim", ",", "hidden_dims", ",", "activation", ")", "\n", "# Construct output action distribution.", "\n", "self", ".", "discrete", "=", "discrete", "\n", "if", "discrete", ":", "\n", "            ", "self", ".", "dist_fn", "=", "lambda", "x", ":", "Categorical", "(", "logits", "=", "x", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logstd", "=", "nn", ".", "Parameter", "(", "-", "0.5", "*", "torch", ".", "ones", "(", "act_dim", ")", ")", "\n", "self", ".", "dist_fn", "=", "lambda", "x", ":", "Normal", "(", "x", ",", "self", ".", "logstd", ".", "exp", "(", ")", ")", "\n", "# Safety filter.", "\n", "", "self", ".", "action_modifier", "=", "action_modifier", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo_utils.MLPActor.forward": [[99, 125], ["safe_ppo_utils.MLPActor.pi_net", "safe_ppo_utils.MLPActor.dist_fn", "safe_ppo_utils.MLPActor.log_prob", "len", "safe_ppo_utils.MLPActor.action_modifier().view", "safe_ppo_utils.MLPActor.action_modifier", "safe_ppo_utils.MLPActor.action_modifier", "obs.unsqueeze", "safe_ppo_utils.MLPActor.unsqueeze", "c.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.log_prob"], ["", "def", "forward", "(", "self", ",", "\n", "obs", ",", "\n", "act", "=", "None", ",", "\n", "c", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "mu", "=", "self", ".", "pi_net", "(", "obs", ")", "\n", "# Filter action if needed.", "\n", "if", "self", ".", "action_modifier", ":", "\n", "            ", "if", "len", "(", "mu", ".", "shape", ")", "==", "1", ":", "\n", "# During evalution or single env runs.", "\n", "                ", "mu_safe", "=", "self", ".", "action_modifier", "(", "obs", ".", "unsqueeze", "(", "0", ")", ",", "\n", "mu", ".", "unsqueeze", "(", "0", ")", ",", "\n", "c", ".", "unsqueeze", "(", "0", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "# During training or vectorized runs.", "\n", "                ", "mu_safe", "=", "self", ".", "action_modifier", "(", "obs", ",", "mu", ",", "c", ")", "\n", "", "", "else", ":", "\n", "            ", "mu_safe", "=", "mu", "\n", "", "dist", "=", "self", ".", "dist_fn", "(", "mu_safe", ")", "\n", "logp_a", "=", "None", "\n", "if", "act", "is", "not", "None", ":", "\n", "            ", "logp_a", "=", "dist", ".", "log_prob", "(", "act", ")", "\n", "", "return", "dist", ",", "logp_a", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo_utils.MLPActorCritic.__init__": [[136, 158], ["torch.Module.__init__", "torch.Module.__init__", "isinstance", "safe_ppo_utils.MLPActor", "safe_control_gym.MLPCritic"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "obs_space", ",", "\n", "act_space", ",", "\n", "hidden_dims", "=", "(", "64", ",", "64", ")", ",", "\n", "activation", "=", "\"tanh\"", ",", "\n", "action_modifier", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "obs_dim", "=", "obs_space", ".", "shape", "[", "0", "]", "\n", "if", "isinstance", "(", "act_space", ",", "Box", ")", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "shape", "[", "0", "]", "\n", "discrete", "=", "False", "\n", "", "else", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "n", "\n", "discrete", "=", "True", "\n", "# Policy.", "\n", "", "self", ".", "actor", "=", "MLPActor", "(", "obs_dim", ",", "act_dim", ",", "hidden_dims", ",", "activation", ",", "discrete", ",", "action_modifier", ")", "\n", "# Value function.", "\n", "self", ".", "critic", "=", "ppo_utils", ".", "MLPCritic", "(", "obs_dim", ",", "hidden_dims", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo_utils.MLPActorCritic.step": [[159, 171], ["safe_ppo_utils.MLPActorCritic.actor", "dist.sample", "dist.log_prob", "safe_ppo_utils.MLPActorCritic.critic", "dist.sample.numpy", "safe_ppo_utils.MLPActorCritic.numpy", "dist.log_prob.numpy"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.log_prob"], ["", "def", "step", "(", "self", ",", "\n", "obs", ",", "\n", "c", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "dist", ",", "_", "=", "self", ".", "actor", "(", "obs", ",", "c", "=", "c", ")", "\n", "a", "=", "dist", ".", "sample", "(", ")", "\n", "logp_a", "=", "dist", ".", "log_prob", "(", "a", ")", "\n", "v", "=", "self", ".", "critic", "(", "obs", ")", "\n", "return", "a", ".", "numpy", "(", ")", ",", "v", ".", "numpy", "(", ")", ",", "logp_a", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo_utils.MLPActorCritic.act": [[172, 182], ["safe_ppo_utils.MLPActorCritic.actor", "dist.mode", "dist.mode.numpy"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.mode"], ["", "def", "act", "(", "self", ",", "\n", "obs", ",", "\n", "c", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "dist", ",", "_", "=", "self", ".", "actor", "(", "obs", ",", "c", "=", "c", ")", "\n", "a", "=", "dist", ".", "mode", "(", ")", "\n", "return", "a", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo_utils.SafePPOBuffer.__init__": [[195, 248], ["isinstance", "list", "safe_ppo_utils.SafePPOBuffer.reset", "safe_ppo_utils.SafePPOBuffer.scheme.keys"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["def", "__init__", "(", "self", ",", "\n", "obs_space", ",", "\n", "act_space", ",", "\n", "num_constraints", ",", "\n", "max_length", ",", "\n", "batch_size", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "T", ",", "N", "=", "max_length", ",", "batch_size", "\n", "obs_dim", "=", "obs_space", ".", "shape", "\n", "if", "isinstance", "(", "act_space", ",", "Box", ")", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "n", "\n", "", "self", ".", "scheme", "=", "{", "\n", "\"obs\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "*", "obs_dim", ")", "\n", "}", ",", "\n", "\"act\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "act_dim", ")", "\n", "}", ",", "\n", "\"rew\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"mask\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", ",", "\n", "\"init\"", ":", "np", ".", "ones", "\n", "}", ",", "\n", "\"v\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"logp\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"ret\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"adv\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"terminal_v\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"c\"", ":", "{", "\n", "\"vshape\"", ":", "(", "T", ",", "N", ",", "num_constraints", ")", "\n", "}", ",", "\n", "}", "\n", "self", ".", "keys", "=", "list", "(", "self", ".", "scheme", ".", "keys", "(", ")", ")", "\n", "self", ".", "reset", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.__init__": [[28, 91], ["safe_control_gym.controllers.base_controller.BaseController.__init__", "safe_control_gym.controllers.safe_explorer.safe_explorer_utils.SafetyLayer", "safe_ppo.SafeExplorerPPO.safety_layer.to", "safe_control_gym.controllers.safe_explorer.safe_ppo_utils.SafePPOAgent", "safe_ppo.SafeExplorerPPO.agent.to", "safe_control_gym.math_and_models.normalization.BaseNormalizer", "safe_control_gym.math_and_models.normalization.BaseNormalizer", "safe_control_gym.utils.logging.ExperimentLogger", "safe_control_gym.envs.env_wrappers.vectorized_env.make_vec_envs", "safe_control_gym.envs.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "safe_control_gym.math_and_models.normalization.MeanStdNormalizer", "safe_control_gym.math_and_models.normalization.RewardStdNormalizer"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.__init__.make_vec_envs"], ["def", "__init__", "(", "self", ",", "\n", "env_func", ",", "\n", "training", "=", "True", ",", "\n", "checkpoint_path", "=", "\"model_latest.pt\"", ",", "\n", "output_dir", "=", "\"temp\"", ",", "\n", "use_gpu", "=", "False", ",", "\n", "seed", "=", "0", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env_func", ",", "training", ",", "checkpoint_path", ",", "output_dir", ",", "use_gpu", ",", "seed", ",", "**", "kwargs", ")", "\n", "# Task.", "\n", "if", "self", ".", "training", ":", "\n", "# Training and testing.", "\n", "            ", "self", ".", "env", "=", "make_vec_envs", "(", "env_func", ",", "None", ",", "self", ".", "rollout_batch_size", ",", "self", ".", "num_workers", ",", "seed", ")", "\n", "self", ".", "env", "=", "VecRecordEpisodeStatistics", "(", "self", ".", "env", ",", "self", ".", "deque_size", ")", "\n", "self", ".", "eval_env", "=", "env_func", "(", "seed", "=", "seed", "*", "111", ")", "\n", "self", ".", "eval_env", "=", "RecordEpisodeStatistics", "(", "self", ".", "eval_env", ",", "self", ".", "deque_size", ")", "\n", "self", ".", "num_constraints", "=", "self", ".", "env", ".", "envs", "[", "0", "]", ".", "num_constraints", "\n", "", "else", ":", "\n", "# Testing only.", "\n", "            ", "self", ".", "env", "=", "env_func", "(", ")", "\n", "self", ".", "env", "=", "RecordEpisodeStatistics", "(", "self", ".", "env", ")", "\n", "self", ".", "num_constraints", "=", "self", ".", "env", ".", "num_constraints", "\n", "# Safety layer.", "\n", "", "self", ".", "safety_layer", "=", "SafetyLayer", "(", "self", ".", "env", ".", "observation_space", ",", "\n", "self", ".", "env", ".", "action_space", ",", "\n", "hidden_dim", "=", "self", ".", "constraint_hidden_dim", ",", "\n", "num_constraints", "=", "self", ".", "num_constraints", ",", "\n", "lr", "=", "self", ".", "constraint_lr", ",", "\n", "slack", "=", "self", ".", "constraint_slack", ")", "\n", "self", ".", "safety_layer", ".", "to", "(", "self", ".", "device", ")", "\n", "# Agent.", "\n", "self", ".", "agent", "=", "SafePPOAgent", "(", "\n", "self", ".", "env", ".", "observation_space", ",", "\n", "self", ".", "env", ".", "action_space", ",", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", ",", "\n", "use_clipped_value", "=", "self", ".", "use_clipped_value", ",", "\n", "clip_param", "=", "self", ".", "clip_param", ",", "\n", "target_kl", "=", "self", ".", "target_kl", ",", "\n", "entropy_coef", "=", "self", ".", "entropy_coef", ",", "\n", "actor_lr", "=", "self", ".", "actor_lr", ",", "\n", "critic_lr", "=", "self", ".", "critic_lr", ",", "\n", "opt_epochs", "=", "self", ".", "opt_epochs", ",", "\n", "mini_batch_size", "=", "self", ".", "mini_batch_size", ",", "\n", "action_modifier", "=", "self", ".", "safety_layer", ".", "get_safe_action", ",", "\n", ")", "\n", "self", ".", "agent", ".", "to", "(", "self", ".", "device", ")", "\n", "# Pre-/post-processing.", "\n", "self", ".", "obs_normalizer", "=", "BaseNormalizer", "(", ")", "\n", "if", "self", ".", "norm_obs", ":", "\n", "            ", "self", ".", "obs_normalizer", "=", "MeanStdNormalizer", "(", "shape", "=", "self", ".", "env", ".", "observation_space", ".", "shape", ",", "clip", "=", "self", ".", "clip_obs", ",", "epsilon", "=", "1e-8", ")", "\n", "", "self", ".", "reward_normalizer", "=", "BaseNormalizer", "(", ")", "\n", "if", "self", ".", "norm_reward", ":", "\n", "            ", "self", ".", "reward_normalizer", "=", "RewardStdNormalizer", "(", "gamma", "=", "self", ".", "gamma", ",", "clip", "=", "self", ".", "clip_reward", ",", "epsilon", "=", "1e-8", ")", "\n", "# Logging.", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "log_file_out", "=", "True", "\n", "use_tensorboard", "=", "self", ".", "tensorboard", "\n", "", "else", ":", "\n", "# Disable logging to texts and tfboard for evaluation.", "\n", "            ", "log_file_out", "=", "False", "\n", "use_tensorboard", "=", "False", "\n", "", "self", ".", "logger", "=", "ExperimentLogger", "(", "output_dir", ",", "log_file_out", "=", "log_file_out", ",", "use_tensorboard", "=", "use_tensorboard", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.reset": [[92, 120], ["safe_ppo.SafeExplorerPPO.env.reset", "safe_ppo.SafeExplorerPPO.obs_normalizer", "numpy.array", "safe_ppo.SafeExplorerPPO.env.add_tracker", "safe_ppo.SafeExplorerPPO.env.add_tracker", "safe_ppo.SafeExplorerPPO.env.add_tracker", "safe_control_gym.controllers.safe_explorer.safe_explorer_utils.ConstraintBuffer", "os.path.isdir", "torch.load", "safe_ppo.SafeExplorerPPO.safety_layer.load_state_dict", "safe_ppo.SafeExplorerPPO.env.add_tracker", "safe_ppo.SafeExplorerPPO.env.add_tracker", "safe_ppo.SafeExplorerPPO.eval_env.add_tracker", "safe_ppo.SafeExplorerPPO.eval_env.add_tracker", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do initializations for training or evaluation.\n\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "pretraining", ":", "\n", "                ", "self", ".", "constraint_buffer", "=", "ConstraintBuffer", "(", "self", ".", "env", ".", "observation_space", ",", "self", ".", "env", ".", "action_space", ",", "self", ".", "num_constraints", ",", "self", ".", "constraint_buffer_size", ")", "\n", "", "else", ":", "\n", "# Load safety layer for 2nd stage training.", "\n", "                ", "assert", "self", ".", "pretrained", ",", "\"Must provide a pre-trained model for adaptation.\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "pretrained", ")", ":", "\n", "                    ", "self", ".", "pretrained", "=", "os", ".", "path", ".", "join", "(", "self", ".", "pretrained", ",", "\"model_latest.pt\"", ")", "\n", "", "state", "=", "torch", ".", "load", "(", "self", ".", "pretrained", ")", "\n", "self", ".", "safety_layer", ".", "load_state_dict", "(", "state", "[", "\"safety_layer\"", "]", ")", "\n", "# Set up stats tracking.", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "eval_env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "eval_env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "", "self", ".", "total_steps", "=", "0", "\n", "obs", ",", "info", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "self", ".", "c", "=", "np", ".", "array", "(", "[", "inf", "[", "\"constraint_values\"", "]", "for", "inf", "in", "info", "[", "\"n\"", "]", "]", ")", "\n", "", "else", ":", "\n", "# Add episodic stats to be tracked.", "\n", "            ", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_values\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.close": [[121, 129], ["safe_ppo.SafeExplorerPPO.env.close", "safe_ppo.SafeExplorerPPO.logger.close", "safe_ppo.SafeExplorerPPO.eval_env.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shuts down and cleans up lingering resources.\n\n        \"\"\"", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "eval_env", ".", "close", "(", ")", "\n", "", "self", ".", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.save": [[130, 156], ["os.path.dirname", "os.makedirs", "torch.save", "safe_ppo.SafeExplorerPPO.agent.state_dict", "safe_ppo.SafeExplorerPPO.safety_layer.state_dict", "safe_ppo.SafeExplorerPPO.obs_normalizer.state_dict", "safe_ppo.SafeExplorerPPO.reward_normalizer.state_dict", "state_dict.update", "safe_control_gym.utils.utils.get_random_state", "safe_ppo.SafeExplorerPPO.env.get_env_random_state", "safe_ppo.SafeExplorerPPO.constraint_buffer.state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.get_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_env_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict"], ["", "def", "save", "(", "self", ",", "\n", "path", "\n", ")", ":", "\n", "        ", "\"\"\"Saves model params and experiment state to checkpoint path.\n\n        \"\"\"", "\n", "path_dir", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "path_dir", ",", "exist_ok", "=", "True", ")", "\n", "state_dict", "=", "{", "\n", "\"agent\"", ":", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "\n", "\"safety_layer\"", ":", "self", ".", "safety_layer", ".", "state_dict", "(", ")", ",", "\n", "\"obs_normalizer\"", ":", "self", ".", "obs_normalizer", ".", "state_dict", "(", ")", ",", "\n", "\"reward_normalizer\"", ":", "self", ".", "reward_normalizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "exp_state", "=", "{", "\n", "\"total_steps\"", ":", "self", ".", "total_steps", ",", "\n", "\"obs\"", ":", "self", ".", "obs", ",", "\n", "\"c\"", ":", "self", ".", "c", ",", "\n", "\"random_state\"", ":", "get_random_state", "(", ")", ",", "\n", "\"env_random_state\"", ":", "self", ".", "env", ".", "get_env_random_state", "(", ")", "\n", "}", "\n", "state_dict", ".", "update", "(", "exp_state", ")", "\n", "if", "self", ".", "pretraining", ":", "\n", "                ", "state_dict", "[", "\"constraint_buffer\"", "]", "=", "self", ".", "constraint_buffer", ".", "state_dict", "(", ")", "\n", "", "", "torch", ".", "save", "(", "state_dict", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.load": [[157, 179], ["torch.load", "safe_ppo.SafeExplorerPPO.agent.load_state_dict", "safe_ppo.SafeExplorerPPO.safety_layer.load_state_dict", "safe_ppo.SafeExplorerPPO.obs_normalizer.load_state_dict", "safe_ppo.SafeExplorerPPO.reward_normalizer.load_state_dict", "safe_control_gym.utils.utils.set_random_state", "safe_ppo.SafeExplorerPPO.env.set_env_random_state", "safe_ppo.SafeExplorerPPO.logger.load", "safe_ppo.SafeExplorerPPO.constraint_buffer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.set_env_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict"], ["", "def", "load", "(", "self", ",", "\n", "path", "\n", ")", ":", "\n", "        ", "\"\"\"Restores model and experiment given checkpoint path.\n\n        \"\"\"", "\n", "state", "=", "torch", ".", "load", "(", "path", ")", "\n", "# Restore policy.", "\n", "self", ".", "agent", ".", "load_state_dict", "(", "state", "[", "\"agent\"", "]", ")", "\n", "self", ".", "safety_layer", ".", "load_state_dict", "(", "state", "[", "\"safety_layer\"", "]", ")", "\n", "self", ".", "obs_normalizer", ".", "load_state_dict", "(", "state", "[", "\"obs_normalizer\"", "]", ")", "\n", "self", ".", "reward_normalizer", ".", "load_state_dict", "(", "state", "[", "\"reward_normalizer\"", "]", ")", "\n", "# Restore experiment state.", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "total_steps", "=", "state", "[", "\"total_steps\"", "]", "\n", "self", ".", "obs", "=", "state", "[", "\"obs\"", "]", "\n", "self", ".", "c", "=", "state", "[", "\"c\"", "]", "\n", "set_random_state", "(", "state", "[", "\"random_state\"", "]", ")", "\n", "self", ".", "env", ".", "set_env_random_state", "(", "state", "[", "\"env_random_state\"", "]", ")", "\n", "self", ".", "logger", ".", "load", "(", "self", ".", "total_steps", ")", "\n", "if", "self", ".", "pretraining", ":", "\n", "                ", "self", ".", "constraint_buffer", ".", "load_state_dict", "(", "state", "[", "\"constraint_buffer\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.learn": [[180, 225], ["train_func", "safe_ppo.SafeExplorerPPO.save", "safe_ppo.SafeExplorerPPO.logger.info", "os.path.join", "safe_ppo.SafeExplorerPPO.save", "safe_ppo.SafeExplorerPPO.log_step", "safe_ppo.SafeExplorerPPO.eval_constraint_models", "safe_ppo.SafeExplorerPPO.run", "safe_ppo.SafeExplorerPPO.logger.info", "eval_results[].mean", "getattr", "safe_ppo.SafeExplorerPPO.save", "eval_results[].mean", "eval_results[].std", "eval_results[].mean", "eval_results[].std", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.log_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.eval_constraint_models", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save"], ["", "", "", "def", "learn", "(", "self", ",", "\n", "env", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Performs learning (pre-training, training, fine-tuning, etc).\n\n        \"\"\"", "\n", "if", "self", ".", "pretraining", ":", "\n", "            ", "final_step", "=", "self", ".", "constraint_epochs", "\n", "train_func", "=", "self", ".", "pretrain_step", "\n", "", "else", ":", "\n", "            ", "final_step", "=", "self", ".", "max_env_steps", "\n", "train_func", "=", "self", ".", "train_step", "\n", "", "while", "self", ".", "total_steps", "<", "final_step", ":", "\n", "            ", "results", "=", "train_func", "(", ")", "\n", "# Checkpoint.", "\n", "if", "self", ".", "total_steps", ">=", "final_step", "or", "(", "self", ".", "save_interval", "and", "self", ".", "total_steps", "%", "self", ".", "save_interval", "==", "0", ")", ":", "\n", "# Latest/final checkpoint.", "\n", "                ", "self", ".", "save", "(", "self", ".", "checkpoint_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Checkpoint | {}\"", ".", "format", "(", "self", ".", "checkpoint_path", ")", ")", "\n", "", "if", "self", ".", "num_checkpoints", "and", "self", ".", "total_steps", "%", "(", "final_step", "//", "self", ".", "num_checkpoints", ")", "==", "0", ":", "\n", "# Intermediate checkpoint.", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"checkpoints\"", ",", "\"model_{}.pt\"", ".", "format", "(", "self", ".", "total_steps", ")", ")", "\n", "self", ".", "save", "(", "path", ")", "\n", "# Evaluation.", "\n", "", "if", "self", ".", "eval_interval", "and", "self", ".", "total_steps", "%", "self", ".", "eval_interval", "==", "0", ":", "\n", "                ", "if", "self", ".", "pretraining", ":", "\n", "                    ", "eval_results", "=", "self", ".", "eval_constraint_models", "(", ")", "\n", "results", "[", "\"eval\"", "]", "=", "eval_results", "\n", "", "else", ":", "\n", "                    ", "eval_results", "=", "self", ".", "run", "(", "env", "=", "self", ".", "eval_env", ",", "n_episodes", "=", "self", ".", "eval_batch_size", ")", "\n", "results", "[", "\"eval\"", "]", "=", "eval_results", "\n", "self", ".", "logger", ".", "info", "(", "\"Eval | ep_lengths {:.2f} +/- {:.2f} | ep_return {:.3f} +/- {:.3f}\"", ".", "format", "(", "eval_results", "[", "\"ep_lengths\"", "]", ".", "mean", "(", ")", ",", "\n", "eval_results", "[", "\"ep_lengths\"", "]", ".", "std", "(", ")", ",", "\n", "eval_results", "[", "\"ep_returns\"", "]", ".", "mean", "(", ")", ",", "\n", "eval_results", "[", "\"ep_returns\"", "]", ".", "std", "(", ")", ")", ")", "\n", "# Save the best model.", "\n", "eval_score", "=", "eval_results", "[", "\"ep_returns\"", "]", ".", "mean", "(", ")", "\n", "eval_best_score", "=", "getattr", "(", "self", ",", "\"eval_best_score\"", ",", "-", "np", ".", "infty", ")", "\n", "if", "self", ".", "eval_save_best", "and", "eval_best_score", "<", "eval_score", ":", "\n", "                        ", "self", ".", "eval_best_score", "=", "eval_score", "\n", "self", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"model_best.pt\"", ")", ")", "\n", "# Logging.", "\n", "", "", "", "if", "self", ".", "log_interval", "and", "self", ".", "total_steps", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "self", ".", "log_step", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.run": [[226, 280], ["safe_ppo.SafeExplorerPPO.agent.eval", "safe_ppo.SafeExplorerPPO.obs_normalizer.set_read_only", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.reset", "safe_ppo.SafeExplorerPPO.obs_normalizer", "numpy.asarray", "numpy.asarray", "len", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.step", "safe_ppo.SafeExplorerPPO.obs_normalizer", "len", "len", "eval_results.update", "safe_control_gym.utils.utils.is_wrapped", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "torch.no_grad", "torch.FloatTensor().to", "torch.FloatTensor().to", "safe_ppo.SafeExplorerPPO.agent.ac.act", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.render", "frames.append", "print", "numpy.asarray.append", "numpy.asarray.append", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.reset", "numpy.asarray", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.render", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.queued_stats.items", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.set_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.is_wrapped", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render"], ["", "", "", "def", "run", "(", "self", ",", "\n", "env", "=", "None", ",", "\n", "render", "=", "False", ",", "\n", "n_episodes", "=", "10", ",", "\n", "verbose", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Runs evaluation with current policy.\n\n        \"\"\"", "\n", "self", ".", "agent", ".", "eval", "(", ")", "\n", "self", ".", "obs_normalizer", ".", "set_read_only", "(", ")", "\n", "if", "env", "is", "None", ":", "\n", "            ", "env", "=", "self", ".", "env", "\n", "", "else", ":", "\n", "            ", "if", "not", "is_wrapped", "(", "env", ",", "RecordEpisodeStatistics", ")", ":", "\n", "                ", "env", "=", "RecordEpisodeStatistics", "(", "env", ",", "n_episodes", ")", "\n", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"constraint_values\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "", "", "obs", ",", "info", "=", "env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "c", "=", "info", "[", "\"constraint_values\"", "]", "\n", "ep_returns", ",", "ep_lengths", "=", "[", "]", ",", "[", "]", "\n", "frames", "=", "[", "]", "\n", "while", "len", "(", "ep_returns", ")", "<", "n_episodes", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "obs", "=", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "c", "=", "torch", ".", "FloatTensor", "(", "c", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "action", "=", "self", ".", "agent", ".", "ac", ".", "act", "(", "obs", ",", "c", "=", "c", ")", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "render", ":", "\n", "                ", "env", ".", "render", "(", ")", "\n", "frames", ".", "append", "(", "env", ".", "render", "(", "\"rgb_array\"", ")", ")", "\n", "", "if", "verbose", ":", "\n", "                ", "print", "(", "\"obs {} | act {}\"", ".", "format", "(", "obs", ",", "action", ")", ")", "\n", "", "if", "done", ":", "\n", "                ", "assert", "\"episode\"", "in", "info", "\n", "ep_returns", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"r\"", "]", ")", "\n", "ep_lengths", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"l\"", "]", ")", "\n", "obs", ",", "info", "=", "env", ".", "reset", "(", ")", "\n", "", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "c", "=", "info", "[", "\"constraint_values\"", "]", "\n", "# Collect evaluation results.", "\n", "", "ep_lengths", "=", "np", ".", "asarray", "(", "ep_lengths", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "ep_returns", ")", "\n", "eval_results", "=", "{", "\"ep_returns\"", ":", "ep_returns", ",", "\"ep_lengths\"", ":", "ep_lengths", "}", "\n", "if", "len", "(", "frames", ")", ">", "0", ":", "\n", "            ", "eval_results", "[", "\"frames\"", "]", "=", "frames", "\n", "# Other episodic stats from evaluation env.", "\n", "", "if", "len", "(", "env", ".", "queued_stats", ")", ">", "0", ":", "\n", "            ", "queued_stats", "=", "{", "k", ":", "np", ".", "asarray", "(", "v", ")", "for", "k", ",", "v", "in", "env", ".", "queued_stats", ".", "items", "(", ")", "}", "\n", "eval_results", ".", "update", "(", "queued_stats", ")", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.pretrain_step": [[281, 301], ["collections.defaultdict", "time.time", "safe_ppo.SafeExplorerPPO.safety_layer.train", "safe_ppo.SafeExplorerPPO.obs_normalizer.unset_read_only", "safe_ppo.SafeExplorerPPO.collect_constraint_data", "safe_ppo.SafeExplorerPPO.constraint_buffer.sampler", "safe_ppo.SafeExplorerPPO.constraint_buffer.reset", "collections.defaultdict.update", "safe_ppo.SafeExplorerPPO.safety_layer.update", "safe_ppo.SafeExplorerPPO.items", "results[].append", "sum", "len", "collections.defaultdict.items", "time.time"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.unset_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.collect_constraint_data", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.ConstraintBuffer.sampler", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["", "def", "pretrain_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Performs a pre-trianing step.\n\n        \"\"\"", "\n", "results", "=", "defaultdict", "(", "list", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "safety_layer", ".", "train", "(", ")", "\n", "self", ".", "obs_normalizer", ".", "unset_read_only", "(", ")", "\n", "# Just sample episodes for the whole epoch.", "\n", "self", ".", "collect_constraint_data", "(", "self", ".", "constraint_steps_per_epoch", ")", "\n", "self", ".", "total_steps", "+=", "1", "\n", "# Do the update from memory.", "\n", "for", "batch", "in", "self", ".", "constraint_buffer", ".", "sampler", "(", "self", ".", "constraint_batch_size", ")", ":", "\n", "            ", "res", "=", "self", ".", "safety_layer", ".", "update", "(", "batch", ")", "\n", "for", "k", ",", "v", "in", "res", ".", "items", "(", ")", ":", "\n", "                ", "results", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "self", ".", "constraint_buffer", ".", "reset", "(", ")", "\n", "results", "=", "{", "k", ":", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "results", ".", "update", "(", "{", "\"step\"", ":", "self", ".", "total_steps", ",", "\"elapsed_time\"", ":", "time", ".", "time", "(", ")", "-", "start", "}", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.train_step": [[302, 365], ["safe_ppo.SafeExplorerPPO.agent.train", "safe_ppo.SafeExplorerPPO.obs_normalizer.unset_read_only", "safe_control_gym.controllers.safe_explorer.safe_ppo_utils.SafePPOBuffer", "time.time", "range", "safe_ppo.SafeExplorerPPO.agent.ac.critic().detach().numpy", "safe_control_gym.controllers.ppo.ppo_utils.compute_returns_and_advantages", "safe_ppo.SafeExplorerPPO.agent.update", "safe_ppo.SafeExplorerPPO.update", "safe_ppo.SafeExplorerPPO.env.step", "safe_ppo.SafeExplorerPPO.obs_normalizer", "safe_ppo.SafeExplorerPPO.reward_normalizer", "numpy.zeros_like", "enumerate", "safe_control_gym.controllers.safe_explorer.safe_ppo_utils.SafePPOBuffer.push", "numpy.array", "torch.no_grad", "safe_ppo.SafeExplorerPPO.agent.ac.step", "done.astype", "safe_ppo.SafeExplorerPPO.agent.ac.critic().detach", "adv.mean", "adv.std", "torch.FloatTensor().to", "torch.FloatTensor().unsqueeze().to", "safe_ppo.SafeExplorerPPO.agent.ac.critic().squeeze().detach().numpy", "time.time", "torch.FloatTensor().to", "safe_ppo.SafeExplorerPPO.agent.ac.critic", "torch.FloatTensor", "torch.FloatTensor().unsqueeze", "safe_ppo.SafeExplorerPPO.agent.ac.critic().squeeze().detach", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor", "safe_ppo.SafeExplorerPPO.agent.ac.critic().squeeze", "torch.FloatTensor", "safe_ppo.SafeExplorerPPO.agent.ac.critic"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.unset_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.compute_returns_and_advantages", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.push", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["", "def", "train_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Performs a training/fine-tuning step.\n\n        \"\"\"", "\n", "self", ".", "agent", ".", "train", "(", ")", "\n", "self", ".", "obs_normalizer", ".", "unset_read_only", "(", ")", "\n", "rollouts", "=", "SafePPOBuffer", "(", "self", ".", "env", ".", "observation_space", ",", "\n", "self", ".", "env", ".", "action_space", ",", "\n", "self", ".", "num_constraints", ",", "\n", "self", ".", "rollout_steps", ",", "\n", "self", ".", "rollout_batch_size", ")", "\n", "obs", "=", "self", ".", "obs", "\n", "c", "=", "self", ".", "c", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "step", "in", "range", "(", "self", ".", "rollout_steps", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "act", ",", "v", ",", "logp", "=", "self", ".", "agent", ".", "ac", ".", "step", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ",", "c", "=", "torch", ".", "FloatTensor", "(", "c", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "next_obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "act", ")", "\n", "next_obs", "=", "self", ".", "obs_normalizer", "(", "next_obs", ")", "\n", "rew", "=", "self", ".", "reward_normalizer", "(", "rew", ",", "done", ")", "\n", "mask", "=", "1", "-", "done", ".", "astype", "(", "float", ")", "\n", "# Time truncation is not the same as the true termination.", "\n", "terminal_v", "=", "np", ".", "zeros_like", "(", "v", ")", "\n", "for", "idx", ",", "inf", "in", "enumerate", "(", "info", "[", "\"n\"", "]", ")", ":", "\n", "                ", "if", "\"terminal_info\"", "not", "in", "inf", ":", "\n", "                    ", "continue", "\n", "", "inff", "=", "inf", "[", "\"terminal_info\"", "]", "\n", "if", "\"TimeLimit.truncated\"", "in", "inff", "and", "inff", "[", "\"TimeLimit.truncated\"", "]", ":", "\n", "                    ", "terminal_obs", "=", "inf", "[", "\"terminal_observation\"", "]", "\n", "terminal_obs_tensor", "=", "torch", ".", "FloatTensor", "(", "terminal_obs", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "terminal_val", "=", "self", ".", "agent", ".", "ac", ".", "critic", "(", "terminal_obs_tensor", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "terminal_v", "[", "idx", "]", "=", "terminal_val", "\n", "", "", "rollouts", ".", "push", "(", "{", "\n", "\"obs\"", ":", "obs", ",", "\n", "\"act\"", ":", "act", ",", "\n", "\"rew\"", ":", "rew", ",", "\n", "\"mask\"", ":", "mask", ",", "\n", "\"v\"", ":", "v", ",", "\n", "\"logp\"", ":", "logp", ",", "\n", "\"terminal_v\"", ":", "terminal_v", ",", "\n", "\"c\"", ":", "c", ",", "\n", "}", ")", "\n", "obs", "=", "next_obs", "\n", "c", "=", "np", ".", "array", "(", "[", "inf", "[", "\"constraint_values\"", "]", "for", "inf", "in", "info", "[", "\"n\"", "]", "]", ")", "\n", "", "self", ".", "obs", "=", "obs", "\n", "self", ".", "c", "=", "c", "\n", "self", ".", "total_steps", "+=", "self", ".", "rollout_batch_size", "*", "self", ".", "rollout_steps", "\n", "# Learn from rollout batch.", "\n", "last_val", "=", "self", ".", "agent", ".", "ac", ".", "critic", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "ret", ",", "adv", "=", "compute_returns_and_advantages", "(", "rollouts", ".", "rew", ",", "\n", "rollouts", ".", "v", ",", "\n", "rollouts", ".", "mask", ",", "\n", "rollouts", ".", "terminal_v", ",", "\n", "last_val", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "use_gae", "=", "self", ".", "use_gae", ",", "\n", "gae_lambda", "=", "self", ".", "gae_lambda", ")", "\n", "rollouts", ".", "ret", "=", "ret", "\n", "# Prevent divide-by-0 for repetitive tasks.", "\n", "rollouts", ".", "adv", "=", "(", "adv", "-", "adv", ".", "mean", "(", ")", ")", "/", "(", "adv", ".", "std", "(", ")", "+", "1e-6", ")", "\n", "results", "=", "self", ".", "agent", ".", "update", "(", "rollouts", ",", "self", ".", "device", ")", "\n", "results", ".", "update", "(", "{", "\"step\"", ":", "self", ".", "total_steps", ",", "\"elapsed_time\"", ":", "time", ".", "time", "(", ")", "-", "start", "}", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.log_step": [[366, 434], ["safe_ppo.SafeExplorerPPO.logger.add_scalars", "safe_ppo.SafeExplorerPPO.logger.dump_scalars", "range", "safe_ppo.SafeExplorerPPO.logger.add_scalars", "numpy.asarray", "numpy.asarray", "numpy.asarray", "safe_ppo.SafeExplorerPPO.logger.add_scalars", "safe_ppo.SafeExplorerPPO.logger.add_scalars", "safe_ppo.SafeExplorerPPO.logger.add_scalars", "safe_ppo.SafeExplorerPPO.logger.add_scalars", "safe_ppo.SafeExplorerPPO.logger.add_scalars", "numpy.asarray.mean", "numpy.asarray.mean", "numpy.asarray.mean", "eval_ep_lengths.mean", "eval_ep_returns.mean", "eval_constraint_violation.mean", "eval_mse.mean"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.dump_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars"], ["", "def", "log_step", "(", "self", ",", "\n", "results", "\n", ")", ":", "\n", "        ", "\"\"\"Does logging after a training step.\n\n        \"\"\"", "\n", "step", "=", "results", "[", "\"step\"", "]", "\n", "final_step", "=", "self", ".", "constraint_epochs", "if", "self", ".", "pretraining", "else", "self", ".", "max_env_steps", "\n", "# Runner stats.", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"step\"", ":", "step", ",", "\n", "\"time\"", ":", "results", "[", "\"elapsed_time\"", "]", ",", "\n", "\"progress\"", ":", "step", "/", "final_step", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"time\"", ",", "\n", "write", "=", "False", ",", "\n", "write_tb", "=", "False", ")", "\n", "if", "self", ".", "pretraining", ":", "\n", "# Constraint learning stats.", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "safety_layer", ".", "num_constraints", ")", ":", "\n", "                ", "name", "=", "\"constraint_{}_loss\"", ".", "format", "(", "i", ")", "\n", "self", ".", "logger", ".", "add_scalars", "(", "{", "name", ":", "results", "[", "name", "]", "}", ",", "step", ",", "prefix", "=", "\"constraint_loss\"", ")", "\n", "if", "\"eval\"", "in", "results", ":", "\n", "                    ", "self", ".", "logger", ".", "add_scalars", "(", "{", "name", ":", "results", "[", "\"eval\"", "]", "[", "name", "]", "}", ",", "step", ",", "prefix", "=", "\"constraint_loss_eval\"", ")", "\n", "", "", "", "else", ":", "\n", "# Learning stats.", "\n", "            ", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "k", ":", "results", "[", "k", "]", "\n", "for", "k", "in", "[", "\"policy_loss\"", ",", "\"value_loss\"", ",", "\"entropy_loss\"", ",", "\"approx_kl\"", "]", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"loss\"", ")", "\n", "# Performance stats.", "\n", "ep_lengths", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "length_queue", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "return_queue", ")", "\n", "ep_constraint_violation", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "queued_stats", "[", "\"constraint_violation\"", "]", ")", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"ep_length\"", ":", "ep_lengths", ".", "mean", "(", ")", ",", "\n", "\"ep_return\"", ":", "ep_returns", ".", "mean", "(", ")", ",", "\n", "\"ep_reward\"", ":", "(", "ep_returns", "/", "ep_lengths", ")", ".", "mean", "(", ")", ",", "\n", "\"ep_constraint_violation\"", ":", "ep_constraint_violation", ".", "mean", "(", ")", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"stat\"", ")", "\n", "# Total constraint violation during learning.", "\n", "total_violations", "=", "self", ".", "env", ".", "accumulated_stats", "[", "\"constraint_violation\"", "]", "\n", "self", ".", "logger", ".", "add_scalars", "(", "{", "\"constraint_violation\"", ":", "total_violations", "}", ",", "step", ",", "prefix", "=", "\"stat\"", ")", "\n", "if", "\"eval\"", "in", "results", ":", "\n", "                ", "eval_ep_lengths", "=", "results", "[", "\"eval\"", "]", "[", "\"ep_lengths\"", "]", "\n", "eval_ep_returns", "=", "results", "[", "\"eval\"", "]", "[", "\"ep_returns\"", "]", "\n", "eval_constraint_violation", "=", "results", "[", "\"eval\"", "]", "[", "\"constraint_violation\"", "]", "\n", "eval_mse", "=", "results", "[", "\"eval\"", "]", "[", "\"mse\"", "]", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"ep_length\"", ":", "eval_ep_lengths", ".", "mean", "(", ")", ",", "\n", "\"ep_return\"", ":", "eval_ep_returns", ".", "mean", "(", ")", ",", "\n", "\"ep_reward\"", ":", "(", "eval_ep_returns", "/", "eval_ep_lengths", ")", ".", "mean", "(", ")", ",", "\n", "\"constraint_violation\"", ":", "eval_constraint_violation", ".", "mean", "(", ")", ",", "\n", "\"mse\"", ":", "eval_mse", ".", "mean", "(", ")", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"stat_eval\"", ")", "\n", "# Print summary table.", "\n", "", "", "self", ".", "logger", ".", "dump_scalars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.collect_constraint_data": [[435, 462], ["safe_ppo.SafeExplorerPPO.env.reset", "safe_ppo.SafeExplorerPPO.obs_normalizer", "numpy.array", "safe_ppo.SafeExplorerPPO.env.get_attr", "numpy.array", "safe_ppo.SafeExplorerPPO.env.step", "safe_ppo.SafeExplorerPPO.obs_normalizer", "enumerate", "numpy.array", "safe_ppo.SafeExplorerPPO.constraint_buffer.push", "numpy.array", "numpy.array.append", "space.sample"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_attr", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.push", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample"], ["", "def", "collect_constraint_data", "(", "self", ",", "\n", "num_steps", "\n", ")", ":", "\n", "        ", "\"\"\"Uses random policy to collect data for pre-training constriant models.\n\n        \"\"\"", "\n", "step", "=", "0", "\n", "obs", ",", "info", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "c", "=", "np", ".", "array", "(", "[", "inf", "[", "\"constraint_values\"", "]", "for", "inf", "in", "info", "[", "\"n\"", "]", "]", ")", "\n", "while", "step", "<", "num_steps", ":", "\n", "            ", "action_spaces", "=", "self", ".", "env", ".", "get_attr", "(", "\"action_space\"", ")", "\n", "action", "=", "np", ".", "array", "(", "[", "space", ".", "sample", "(", ")", "for", "space", "in", "action_spaces", "]", ")", "\n", "obs_next", ",", "_", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "obs_next", "=", "self", ".", "obs_normalizer", "(", "obs_next", ")", "\n", "c_next", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "done", ")", ":", "\n", "                ", "if", "d", ":", "\n", "                    ", "c_next_i", "=", "info", "[", "\"n\"", "]", "[", "i", "]", "[", "\"terminal_info\"", "]", "[", "\"constraint_values\"", "]", "\n", "", "else", ":", "\n", "                    ", "c_next_i", "=", "info", "[", "\"n\"", "]", "[", "i", "]", "[", "\"constraint_values\"", "]", "\n", "", "c_next", ".", "append", "(", "c_next_i", ")", "\n", "", "c_next", "=", "np", ".", "array", "(", "c_next", ")", "\n", "self", ".", "constraint_buffer", ".", "push", "(", "{", "\"act\"", ":", "action", ",", "\"obs\"", ":", "obs", ",", "\"c\"", ":", "c", ",", "\"c_next\"", ":", "c_next", "}", ")", "\n", "obs", "=", "obs_next", "\n", "c", "=", "np", ".", "array", "(", "[", "inf", "[", "\"constraint_values\"", "]", "for", "inf", "in", "info", "[", "\"n\"", "]", "]", ")", "\n", "step", "+=", "self", ".", "rollout_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.eval_constraint_models": [[463, 479], ["collections.defaultdict", "safe_ppo.SafeExplorerPPO.safety_layer.eval", "safe_ppo.SafeExplorerPPO.obs_normalizer.set_read_only", "safe_ppo.SafeExplorerPPO.collect_constraint_data", "safe_ppo.SafeExplorerPPO.constraint_buffer.sampler", "safe_ppo.SafeExplorerPPO.constraint_buffer.reset", "safe_ppo.SafeExplorerPPO.safety_layer.compute_loss", "enumerate", "eval_resutls[].append", "sum", "len", "collections.defaultdict.items", "loss.item"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.set_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_ppo.SafeExplorerPPO.collect_constraint_data", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.ConstraintBuffer.sampler", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.safe_explorer.safe_explorer_utils.SafetyLayer.compute_loss"], ["", "", "def", "eval_constraint_models", "(", "self", ")", ":", "\n", "        ", "\"\"\"Runs evaluation for the constraint models.\n\n        \"\"\"", "\n", "eval_resutls", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "safety_layer", ".", "eval", "(", ")", "\n", "self", ".", "obs_normalizer", ".", "set_read_only", "(", ")", "\n", "# Collect evaluation data.", "\n", "self", ".", "collect_constraint_data", "(", "self", ".", "constraint_eval_steps", ")", "\n", "for", "batch", "in", "self", ".", "constraint_buffer", ".", "sampler", "(", "self", ".", "constraint_batch_size", ")", ":", "\n", "            ", "losses", "=", "self", ".", "safety_layer", ".", "compute_loss", "(", "batch", ")", "\n", "for", "i", ",", "loss", "in", "enumerate", "(", "losses", ")", ":", "\n", "                ", "eval_resutls", "[", "\"constraint_{}_loss\"", ".", "format", "(", "i", ")", "]", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "", "", "self", ".", "constraint_buffer", ".", "reset", "(", ")", "\n", "eval_resutls", "=", "{", "k", ":", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "for", "k", ",", "v", "in", "eval_resutls", ".", "items", "(", ")", "}", "\n", "return", "eval_resutls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rap.RAP.__init__": [[41, 105], ["safe_control_gym.controllers.base_controller.BaseController.__init__", "dict", "safe_control_gym.controllers.ppo.ppo_utils.PPOAgent", "rap.RAP.agent.to", "safe_control_gym.math_and_models.normalization.BaseNormalizer", "safe_control_gym.math_and_models.normalization.BaseNormalizer", "safe_control_gym.utils.logging.ExperimentLogger", "safe_control_gym.envs.env_wrappers.vectorized_env.make_vec_envs", "safe_control_gym.envs.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "safe_control_gym.controllers.ppo.ppo_utils.PPOAgent", "adv.to", "safe_control_gym.math_and_models.normalization.MeanStdNormalizer", "safe_control_gym.math_and_models.normalization.RewardStdNormalizer", "rap.RAP.env.get_attr", "rap.RAP.env.get_attr", "range"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.__init__.make_vec_envs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_attr", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_attr"], ["def", "__init__", "(", "self", ",", "\n", "env_func", ",", "\n", "training", "=", "True", ",", "\n", "checkpoint_path", "=", "\"model_latest.pt\"", ",", "\n", "output_dir", "=", "\"temp\"", ",", "\n", "use_gpu", "=", "False", ",", "\n", "seed", "=", "0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env_func", ",", "training", ",", "checkpoint_path", ",", "output_dir", ",", "use_gpu", ",", "seed", ",", "**", "kwargs", ")", "\n", "# task", "\n", "if", "self", ".", "training", ":", "\n", "# training (+ evaluation)", "\n", "            ", "self", ".", "env", "=", "make_vec_envs", "(", "env_func", ",", "None", ",", "self", ".", "rollout_batch_size", ",", "self", ".", "num_workers", ",", "seed", ")", "\n", "self", ".", "env", "=", "VecRecordEpisodeStatistics", "(", "self", ".", "env", ",", "self", ".", "deque_size", ")", "\n", "self", ".", "eval_env", "=", "env_func", "(", "seed", "=", "seed", "*", "111", ")", "\n", "self", ".", "eval_env", "=", "RecordEpisodeStatistics", "(", "self", ".", "eval_env", ",", "self", ".", "deque_size", ")", "\n", "", "else", ":", "\n", "# testing only", "\n", "            ", "self", ".", "env", "=", "env_func", "(", ")", "\n", "self", ".", "env", "=", "RecordEpisodeStatistics", "(", "self", ".", "env", ")", "\n", "\n", "# protagonist and adversary agents", "\n", "", "shared_agent_args", "=", "dict", "(", "hidden_dim", "=", "self", ".", "hidden_dim", ",", "\n", "use_clipped_value", "=", "self", ".", "use_clipped_value", ",", "\n", "clip_param", "=", "self", ".", "clip_param", ",", "\n", "target_kl", "=", "self", ".", "target_kl", ",", "\n", "entropy_coef", "=", "self", ".", "entropy_coef", ",", "\n", "actor_lr", "=", "self", ".", "actor_lr", ",", "\n", "critic_lr", "=", "self", ".", "critic_lr", ",", "\n", "opt_epochs", "=", "self", ".", "opt_epochs", ",", "\n", "mini_batch_size", "=", "self", ".", "mini_batch_size", ")", "\n", "\n", "self", ".", "agent", "=", "PPOAgent", "(", "self", ".", "env", ".", "observation_space", ",", "self", ".", "env", ".", "action_space", ",", "**", "shared_agent_args", ")", "\n", "self", ".", "agent", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# fetch adversary specs from env ", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "adv_obs_space", "=", "self", ".", "env", ".", "get_attr", "(", "\"adversary_observation_space\"", ")", "[", "0", "]", "\n", "self", ".", "adv_act_space", "=", "self", ".", "env", ".", "get_attr", "(", "\"adversary_action_space\"", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "adv_obs_space", "=", "self", ".", "env", ".", "adversary_observation_space", "\n", "self", ".", "adv_act_space", "=", "self", ".", "env", ".", "adversary_action_space", "\n", "", "self", ".", "adversaries", "=", "[", "PPOAgent", "(", "self", ".", "adv_obs_space", ",", "self", ".", "adv_act_space", ",", "**", "shared_agent_args", ")", "for", "_", "in", "range", "(", "self", ".", "num_adversaries", ")", "]", "\n", "for", "adv", "in", "self", ".", "adversaries", ":", "\n", "            ", "adv", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# pre-/post-processing", "\n", "", "self", ".", "obs_normalizer", "=", "BaseNormalizer", "(", ")", "\n", "if", "self", ".", "norm_obs", ":", "\n", "            ", "self", ".", "obs_normalizer", "=", "MeanStdNormalizer", "(", "shape", "=", "self", ".", "env", ".", "observation_space", ".", "shape", ",", "clip", "=", "self", ".", "clip_obs", ",", "epsilon", "=", "1e-8", ")", "\n", "\n", "", "self", ".", "reward_normalizer", "=", "BaseNormalizer", "(", ")", "\n", "if", "self", ".", "norm_reward", ":", "\n", "            ", "self", ".", "reward_normalizer", "=", "RewardStdNormalizer", "(", "gamma", "=", "self", ".", "gamma", ",", "clip", "=", "self", ".", "clip_reward", ",", "epsilon", "=", "1e-8", ")", "\n", "\n", "# logging", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "log_file_out", "=", "True", "\n", "use_tensorboard", "=", "self", ".", "tensorboard", "\n", "", "else", ":", "\n", "# disable logging to texts and tfboard for evaluation", "\n", "            ", "log_file_out", "=", "False", "\n", "use_tensorboard", "=", "False", "\n", "", "self", ".", "logger", "=", "ExperimentLogger", "(", "output_dir", ",", "log_file_out", "=", "log_file_out", ",", "use_tensorboard", "=", "use_tensorboard", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rap.RAP.reset": [[106, 123], ["rap.RAP.env.add_tracker", "rap.RAP.env.add_tracker", "rap.RAP.eval_env.add_tracker", "rap.RAP.eval_env.add_tracker", "rap.RAP.env.reset", "rap.RAP.obs_normalizer", "rap.RAP.env.add_tracker", "rap.RAP.env.add_tracker", "rap.RAP.env.add_tracker"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do initializations for training or evaluation.\"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "# Add episodic stats to be tracked.", "\n", "            ", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "eval_env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "eval_env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n", "self", ".", "total_steps", "=", "0", "\n", "obs", ",", "_", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "", "else", ":", "\n", "# Add episodic stats to be tracked.", "\n", "            ", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_values\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rap.RAP.close": [[124, 130], ["rap.RAP.env.close", "rap.RAP.logger.close", "rap.RAP.eval_env.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shuts down and cleans up lingering resources.\"\"\"", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "eval_env", ".", "close", "(", ")", "\n", "", "self", ".", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rap.RAP.save": [[131, 151], ["os.path.dirname", "os.makedirs", "torch.save", "rap.RAP.agent.state_dict", "rap.RAP.obs_normalizer.state_dict", "rap.RAP.reward_normalizer.state_dict", "state_dict.update", "adv.state_dict", "safe_control_gym.utils.utils.get_random_state", "rap.RAP.env.get_env_random_state"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.get_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_env_random_state"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Saves model params and experiment state to checkpoint path.\"\"\"", "\n", "path_dir", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "path_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "state_dict", "=", "{", "\n", "\"agent\"", ":", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "\n", "\"adversary\"", ":", "[", "adv", ".", "state_dict", "(", ")", "for", "adv", "in", "self", ".", "adversaries", "]", ",", "\n", "\"obs_normalizer\"", ":", "self", ".", "obs_normalizer", ".", "state_dict", "(", ")", ",", "\n", "\"reward_normalizer\"", ":", "self", ".", "reward_normalizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "exp_state", "=", "{", "\n", "\"total_steps\"", ":", "self", ".", "total_steps", ",", "\n", "\"obs\"", ":", "self", ".", "obs", ",", "\n", "\"random_state\"", ":", "get_random_state", "(", ")", ",", "\n", "\"env_random_state\"", ":", "self", ".", "env", ".", "get_env_random_state", "(", ")", "\n", "}", "\n", "state_dict", ".", "update", "(", "exp_state", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rap.RAP.load": [[152, 170], ["torch.load", "rap.RAP.agent.load_state_dict", "enumerate", "rap.RAP.obs_normalizer.load_state_dict", "rap.RAP.reward_normalizer.load_state_dict", "rap.RAP.adversaries[].load_state_dict", "safe_control_gym.utils.utils.set_random_state", "rap.RAP.env.set_env_random_state", "rap.RAP.logger.load"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.set_env_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Restores model and experiment given checkpoint path.\"\"\"", "\n", "state", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "# restore pllicy", "\n", "self", ".", "agent", ".", "load_state_dict", "(", "state", "[", "\"agent\"", "]", ")", "\n", "for", "i", ",", "adv_state_dict", "in", "enumerate", "(", "state", "[", "\"adversary\"", "]", ")", ":", "\n", "            ", "self", ".", "adversaries", "[", "i", "]", ".", "load_state_dict", "(", "adv_state_dict", ")", "\n", "", "self", ".", "obs_normalizer", ".", "load_state_dict", "(", "state", "[", "\"obs_normalizer\"", "]", ")", "\n", "self", ".", "reward_normalizer", ".", "load_state_dict", "(", "state", "[", "\"reward_normalizer\"", "]", ")", "\n", "\n", "# restore experiment state", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "total_steps", "=", "state", "[", "\"total_steps\"", "]", "\n", "self", ".", "obs", "=", "state", "[", "\"obs\"", "]", "\n", "set_random_state", "(", "state", "[", "\"random_state\"", "]", ")", "\n", "self", ".", "env", ".", "set_env_random_state", "(", "state", "[", "\"env_random_state\"", "]", ")", "\n", "self", ".", "logger", ".", "load", "(", "self", ".", "total_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rap.RAP.learn": [[171, 204], ["rap.RAP.train_step", "rap.RAP.save", "rap.RAP.logger.info", "os.path.join", "rap.RAP.save", "rap.RAP.run", "rap.RAP.logger.info", "eval_results[].mean", "getattr", "rap.RAP.log_step", "rap.RAP.save", "eval_results[].mean", "eval_results[].std", "eval_results[].mean", "eval_results[].std", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.train_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.log_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save"], ["", "", "def", "learn", "(", "self", ",", "env", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Performs learning (pre-training, training, fine-tuning, etc).\"\"\"", "\n", "while", "self", ".", "total_steps", "<", "self", ".", "max_env_steps", ":", "\n", "            ", "results", "=", "self", ".", "train_step", "(", ")", "\n", "\n", "# checkpoint", "\n", "if", "self", ".", "total_steps", ">=", "self", ".", "max_env_steps", "or", "(", "self", ".", "save_interval", "and", "self", ".", "total_steps", "%", "self", ".", "save_interval", "==", "0", ")", ":", "\n", "# latest/final checkpoint", "\n", "                ", "self", ".", "save", "(", "self", ".", "checkpoint_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Checkpoint | {}\"", ".", "format", "(", "self", ".", "checkpoint_path", ")", ")", "\n", "", "if", "self", ".", "num_checkpoints", "and", "self", ".", "total_steps", "%", "(", "self", ".", "max_env_steps", "//", "self", ".", "num_checkpoints", ")", "==", "0", ":", "\n", "# intermediate checkpoint", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"checkpoints\"", ",", "\"model_{}.pt\"", ".", "format", "(", "self", ".", "total_steps", ")", ")", "\n", "self", ".", "save", "(", "path", ")", "\n", "\n", "# eval", "\n", "", "if", "self", ".", "eval_interval", "and", "self", ".", "total_steps", "%", "self", ".", "eval_interval", "==", "0", ":", "\n", "                ", "eval_results", "=", "self", ".", "run", "(", "env", "=", "self", ".", "eval_env", ",", "n_episodes", "=", "self", ".", "eval_batch_size", ")", "\n", "results", "[", "\"eval\"", "]", "=", "eval_results", "\n", "self", ".", "logger", ".", "info", "(", "\"Eval | ep_lengths {:.2f} +/- {:.2f} | ep_return {:.3f} +/- {:.3f}\"", ".", "format", "(", "eval_results", "[", "\"ep_lengths\"", "]", ".", "mean", "(", ")", ",", "\n", "eval_results", "[", "\"ep_lengths\"", "]", ".", "std", "(", ")", ",", "\n", "eval_results", "[", "\"ep_returns\"", "]", ".", "mean", "(", ")", ",", "\n", "eval_results", "[", "\"ep_returns\"", "]", ".", "std", "(", ")", ")", ")", "\n", "# save best model", "\n", "eval_score", "=", "eval_results", "[", "\"ep_returns\"", "]", ".", "mean", "(", ")", "\n", "eval_best_score", "=", "getattr", "(", "self", ",", "\"eval_best_score\"", ",", "-", "np", ".", "infty", ")", "\n", "if", "self", ".", "eval_save_best", "and", "eval_best_score", "<", "eval_score", ":", "\n", "                    ", "self", ".", "eval_best_score", "=", "eval_score", "\n", "self", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"model_best.pt\"", ")", ")", "\n", "\n", "# logging", "\n", "", "", "if", "self", ".", "log_interval", "and", "self", ".", "total_steps", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "self", ".", "log_step", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rap.RAP.run": [[205, 264], ["rap.RAP.agent.eval", "rap.RAP.obs_normalizer.set_read_only", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.reset", "rap.RAP.obs_normalizer", "numpy.asarray", "numpy.asarray", "adv.eval", "len", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.set_adversary_control", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.step", "rap.RAP.obs_normalizer", "len", "len", "eval_results.update", "safe_control_gym.utils.utils.is_wrapped", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "torch.no_grad", "torch.FloatTensor().to", "rap.RAP.agent.ac.act", "numpy.random.choice", "numpy.zeros", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.render", "frames.append", "print", "numpy.asarray.append", "numpy.asarray.append", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.reset", "numpy.asarray", "torch.no_grad", "rap.RAP.adversaries[].ac.act", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.render", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.queued_stats.items", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.set_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.set_adversary_control", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.is_wrapped", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render"], ["", "", "", "def", "run", "(", "self", ",", "env", "=", "None", ",", "render", "=", "False", ",", "n_episodes", "=", "10", ",", "verbose", "=", "False", ",", "use_adv", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Runs evaluation with current policy.\"\"\"", "\n", "self", ".", "agent", ".", "eval", "(", ")", "\n", "for", "adv", "in", "self", ".", "adversaries", ":", "\n", "            ", "adv", ".", "eval", "(", ")", "\n", "", "self", ".", "obs_normalizer", ".", "set_read_only", "(", ")", "\n", "if", "env", "is", "None", ":", "\n", "            ", "env", "=", "self", ".", "env", "\n", "", "else", ":", "\n", "            ", "if", "not", "is_wrapped", "(", "env", ",", "RecordEpisodeStatistics", ")", ":", "\n", "                ", "env", "=", "RecordEpisodeStatistics", "(", "env", ",", "n_episodes", ")", "\n", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"constraint_values\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n", "", "", "obs", ",", "_", "=", "env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "ep_returns", ",", "ep_lengths", "=", "[", "]", ",", "[", "]", "\n", "frames", "=", "[", "]", "\n", "\n", "while", "len", "(", "ep_returns", ")", "<", "n_episodes", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "obs", "=", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "action", "=", "self", ".", "agent", ".", "ac", ".", "act", "(", "obs", ")", "\n", "\n", "# no disturbance during testing", "\n", "", "if", "use_adv", ":", "\n", "                ", "adv_idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_adversaries", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "action_adv", "=", "self", ".", "adversaries", "[", "adv_idx", "]", ".", "ac", ".", "act", "(", "obs", ")", "\n", "", "", "else", ":", "\n", "                ", "action_adv", "=", "np", ".", "zeros", "(", "self", ".", "adv_act_space", ".", "shape", "[", "0", "]", ")", "\n", "", "env", ".", "set_adversary_control", "(", "action_adv", ")", "\n", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "render", ":", "\n", "                ", "env", ".", "render", "(", ")", "\n", "frames", ".", "append", "(", "env", ".", "render", "(", "\"rgb_array\"", ")", ")", "\n", "", "if", "verbose", ":", "\n", "                ", "print", "(", "\"obs {} | act {}\"", ".", "format", "(", "obs", ",", "action", ")", ")", "\n", "\n", "", "if", "done", ":", "\n", "                ", "assert", "\"episode\"", "in", "info", "\n", "ep_returns", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"r\"", "]", ")", "\n", "ep_lengths", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"l\"", "]", ")", "\n", "obs", ",", "_", "=", "env", ".", "reset", "(", ")", "\n", "", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "\n", "# collect evaluation results", "\n", "", "ep_lengths", "=", "np", ".", "asarray", "(", "ep_lengths", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "ep_returns", ")", "\n", "eval_results", "=", "{", "\"ep_returns\"", ":", "ep_returns", ",", "\"ep_lengths\"", ":", "ep_lengths", "}", "\n", "if", "len", "(", "frames", ")", ">", "0", ":", "\n", "            ", "eval_results", "[", "\"frames\"", "]", "=", "frames", "\n", "# Other episodic stats from evaluation env.", "\n", "", "if", "len", "(", "env", ".", "queued_stats", ")", ">", "0", ":", "\n", "            ", "queued_stats", "=", "{", "k", ":", "np", ".", "asarray", "(", "v", ")", "for", "k", ",", "v", "in", "env", ".", "queued_stats", ".", "items", "(", ")", "}", "\n", "eval_results", ".", "update", "(", "queued_stats", ")", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rap.RAP.train_step": [[265, 289], ["rap.RAP.agent.train", "rap.RAP.obs_normalizer.unset_read_only", "time.time", "collections.defaultdict", "rap.RAP.collect_rollouts", "rap.RAP.agent.update", "collections.defaultdict.update", "collections.defaultdict.update", "adv.train", "rap.RAP.adversaries[].update", "collections.defaultdict.update", "rap.RAP.items", "time.time"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.unset_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.collect_rollouts", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["", "def", "train_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Performs a training/fine-tuning step.\"\"\"", "\n", "self", ".", "agent", ".", "train", "(", ")", "\n", "for", "adv", "in", "self", ".", "adversaries", ":", "\n", "            ", "adv", ".", "train", "(", ")", "\n", "", "self", ".", "obs_normalizer", ".", "unset_read_only", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "results", "=", "defaultdict", "(", "list", ")", "\n", "\n", "# collect trajectories (with different adversary each time)", "\n", "rollouts", ",", "rollout_splits", "=", "self", ".", "collect_rollouts", "(", ")", "\n", "\n", "# perform updates for both agent and adversaries", "\n", "agent_results", "=", "self", ".", "agent", ".", "update", "(", "rollouts", ")", "\n", "results", ".", "update", "(", "agent_results", ")", "\n", "\n", "for", "adv_idx", ",", "adv_rollouts", "in", "rollout_splits", ":", "\n", "            ", "adv_results", "=", "self", ".", "adversaries", "[", "adv_idx", "]", ".", "update", "(", "adv_rollouts", ")", "\n", "adv_results", "=", "{", "k", "+", "\"_adv{}\"", ".", "format", "(", "adv_idx", ")", ":", "v", "for", "k", ",", "v", "in", "adv_results", ".", "items", "(", ")", "}", "\n", "results", ".", "update", "(", "adv_results", ")", "\n", "\n", "# miscellaneous", "\n", "", "results", ".", "update", "(", "{", "\"step\"", ":", "self", ".", "total_steps", ",", "\"elapsed_time\"", ":", "time", ".", "time", "(", ")", "-", "start", ",", "\"adv_indices\"", ":", "[", "adv_idx", "for", "adv_idx", ",", "_", "in", "rollout_splits", "]", "}", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rap.RAP.log_step": [[290, 355], ["rap.RAP.logger.add_scalars", "rap.RAP.logger.add_scalars", "numpy.asarray", "numpy.asarray", "numpy.asarray", "rap.RAP.logger.add_scalars", "rap.RAP.logger.add_scalars", "rap.RAP.logger.dump_scalars", "rap.RAP.logger.add_scalars", "rap.RAP.logger.add_scalars", "numpy.asarray.mean", "numpy.asarray.mean", "numpy.asarray.mean", "eval_ep_lengths.mean", "eval_ep_returns.mean", "eval_constraint_violation.mean", "eval_mse.mean"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.dump_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars"], ["", "def", "log_step", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Does logging after a training step.\"\"\"", "\n", "step", "=", "results", "[", "\"step\"", "]", "\n", "# runner stats", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"step\"", ":", "step", ",", "\n", "\"time\"", ":", "results", "[", "\"elapsed_time\"", "]", ",", "\n", "\"progress\"", ":", "step", "/", "self", ".", "max_env_steps", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"time\"", ",", "\n", "write", "=", "False", ",", "\n", "write_tb", "=", "False", ")", "\n", "\n", "# learning stats", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "k", ":", "results", "[", "k", "]", "\n", "for", "k", "in", "[", "\"policy_loss\"", ",", "\"value_loss\"", ",", "\"entropy_loss\"", "]", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"loss\"", ")", "\n", "for", "adv_idx", "in", "results", "[", "\"adv_indices\"", "]", ":", "\n", "            ", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "k", ":", "results", "[", "k", "+", "\"_adv{}\"", ".", "format", "(", "adv_idx", ")", "]", "\n", "for", "k", "in", "[", "\"policy_loss\"", ",", "\"value_loss\"", ",", "\"entropy_loss\"", "]", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"loss_adv{}\"", ".", "format", "(", "adv_idx", ")", ")", "\n", "\n", "# performance stats", "\n", "", "ep_lengths", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "length_queue", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "return_queue", ")", "\n", "ep_constraint_violation", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "queued_stats", "[", "\"constraint_violation\"", "]", ")", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"ep_length\"", ":", "ep_lengths", ".", "mean", "(", ")", ",", "\n", "\"ep_return\"", ":", "ep_returns", ".", "mean", "(", ")", ",", "\n", "\"ep_reward\"", ":", "(", "ep_returns", "/", "ep_lengths", ")", ".", "mean", "(", ")", ",", "\n", "\"ep_constraint_violation\"", ":", "ep_constraint_violation", ".", "mean", "(", ")", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"stat\"", ")", "\n", "# Total constraint violation during learning.", "\n", "total_violations", "=", "self", ".", "env", ".", "accumulated_stats", "[", "\"constraint_violation\"", "]", "\n", "self", ".", "logger", ".", "add_scalars", "(", "{", "\"constraint_violation\"", ":", "total_violations", "}", ",", "step", ",", "prefix", "=", "\"stat\"", ")", "\n", "if", "\"eval\"", "in", "results", ":", "\n", "            ", "eval_ep_lengths", "=", "results", "[", "\"eval\"", "]", "[", "\"ep_lengths\"", "]", "\n", "eval_ep_returns", "=", "results", "[", "\"eval\"", "]", "[", "\"ep_returns\"", "]", "\n", "eval_constraint_violation", "=", "results", "[", "\"eval\"", "]", "[", "\"constraint_violation\"", "]", "\n", "eval_mse", "=", "results", "[", "\"eval\"", "]", "[", "\"mse\"", "]", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"ep_length\"", ":", "eval_ep_lengths", ".", "mean", "(", ")", ",", "\n", "\"ep_return\"", ":", "eval_ep_returns", ".", "mean", "(", ")", ",", "\n", "\"ep_reward\"", ":", "(", "eval_ep_returns", "/", "eval_ep_lengths", ")", ".", "mean", "(", ")", ",", "\n", "\"constraint_violation\"", ":", "eval_constraint_violation", ".", "mean", "(", ")", ",", "\n", "\"mse\"", ":", "eval_mse", ".", "mean", "(", ")", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"stat_eval\"", ")", "\n", "# print summary table", "\n", "", "self", ".", "logger", ".", "dump_scalars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rap.RAP.collect_rollouts": [[356, 480], ["safe_control_gym.controllers.ppo.ppo_utils.PPOBuffer", "safe_control_gym.controllers.ppo.ppo_utils.PPOBuffer", "numpy.random.randint", "numpy.random.randint.sort", "numpy.unique", "rap.RAP.env.reset", "rap.RAP.obs_normalizer", "range", "rap.RAP.agent.ac.critic().detach().numpy", "safe_control_gym.controllers.ppo.ppo_utils.compute_returns_and_advantages", "safe_control_gym.controllers.rarl.rarl_utils.split_obs_by_adversary", "zip", "numpy.concatenate", "safe_control_gym.controllers.ppo.ppo_utils.compute_returns_and_advantages", "numpy.concatenate", "zip", "rap.RAP.env.env_method", "rap.RAP.env.step", "rap.RAP.obs_normalizer", "rap.RAP.reward_normalizer", "numpy.zeros_like", "numpy.zeros_like", "enumerate", "safe_control_gym.controllers.ppo.ppo_utils.PPOBuffer.push", "safe_control_gym.controllers.ppo.ppo_utils.PPOBuffer.push", "rap.RAP.adversaries[].ac.critic().detach().numpy", "numpy.concatenate.append", "safe_control_gym.controllers.ppo.ppo_utils.PPOBuffer", "rollout_splits.append", "torch.no_grad", "rap.RAP.agent.ac.step", "safe_control_gym.controllers.rarl.rarl_utils.split_obs_by_adversary", "zip", "done.astype", "rap.RAP.agent.ac.critic().detach", "adv.mean", "adv.std", "adv.mean", "adv.std", "setattr", "torch.FloatTensor().to", "rap.RAP.adversaries[].ac.step", "out_adv.append", "numpy.concatenate", "torch.FloatTensor().unsqueeze().to", "rap.RAP.agent.ac.critic().squeeze().detach().numpy", "adversary.ac.critic().squeeze().detach().numpy", "rap.RAP.adversaries[].ac.critic().detach", "torch.FloatTensor().to", "zip", "rap.RAP.agent.ac.critic", "getattr", "torch.FloatTensor", "torch.FloatTensor().unsqueeze", "rap.RAP.agent.ac.critic().squeeze().detach", "adversary.ac.critic().squeeze().detach", "torch.FloatTensor().to", "rap.RAP.adversaries[].ac.critic", "torch.FloatTensor", "torch.FloatTensor().to", "torch.FloatTensor", "rap.RAP.agent.ac.critic().squeeze", "adversary.ac.critic().squeeze", "torch.FloatTensor", "torch.FloatTensor", "rap.RAP.agent.ac.critic", "adversary.ac.critic"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.compute_returns_and_advantages", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl_utils.split_obs_by_adversary", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.compute_returns_and_advantages", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.env_method", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.push", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.push", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl_utils.split_obs_by_adversary", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["", "def", "collect_rollouts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets trajectories (full episodes) for both agent and adversaries.\"\"\"", "\n", "# agent & adversary must have same obs & act space", "\n", "rollouts", "=", "PPOBuffer", "(", "self", ".", "env", ".", "observation_space", ",", "self", ".", "env", ".", "action_space", ",", "self", ".", "rollout_steps", ",", "self", ".", "rollout_batch_size", ")", "\n", "rollouts_adv", "=", "PPOBuffer", "(", "self", ".", "adv_obs_space", ",", "self", ".", "adv_act_space", ",", "self", ".", "rollout_steps", ",", "self", ".", "rollout_batch_size", ")", "\n", "\n", "# sample adversaries", "\n", "adv_indices", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_adversaries", ",", "size", "=", "self", ".", "rollout_batch_size", ")", "\n", "adv_indices", ".", "sort", "(", ")", "\n", "indices_groups", ",", "indices_splits", "=", "np", ".", "unique", "(", "adv_indices", ",", "return_index", "=", "True", ")", "\n", "\n", "# sample trajectories", "\n", "# TODO: fix it, never finish a full trajectory", "\n", "obs", ",", "_", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "\n", "for", "step", "in", "range", "(", "self", ".", "rollout_steps", ")", ":", "\n", "# get actions", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "act", ",", "v", ",", "logp", "=", "self", ".", "agent", ".", "ac", ".", "step", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "# adversary actions", "\n", "obs_groups", "=", "split_obs_by_adversary", "(", "obs", ",", "indices_splits", ")", "\n", "out_adv", "=", "[", "]", "\n", "for", "idx", ",", "obs_adv", "in", "zip", "(", "indices_groups", ",", "obs_groups", ")", ":", "\n", "                    ", "out", "=", "self", ".", "adversaries", "[", "idx", "]", ".", "ac", ".", "step", "(", "torch", ".", "FloatTensor", "(", "obs_adv", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "out_adv", ".", "append", "(", "out", ")", "\n", "", "act_adv", ",", "v_adv", ",", "logp_adv", "=", "[", "np", ".", "concatenate", "(", "item", ")", "for", "item", "in", "zip", "(", "*", "out_adv", ")", "]", "\n", "\n", "# step env", "\n", "# self.env.set_adversary_control(act_adv)", "\n", "", "act_adv_list", "=", "[", "[", "act", "]", "for", "act", "in", "act_adv", "]", "\n", "self", ".", "env", ".", "env_method", "(", "\"set_adversary_control\"", ",", "act_adv_list", ")", "\n", "next_obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "act", ")", "\n", "\n", "next_obs", "=", "self", ".", "obs_normalizer", "(", "next_obs", ")", "\n", "rew", "=", "self", ".", "reward_normalizer", "(", "rew", ",", "done", ")", "\n", "mask", "=", "1", "-", "done", ".", "astype", "(", "float", ")", "\n", "\n", "# time truncation is not true termination", "\n", "terminal_v", "=", "np", ".", "zeros_like", "(", "v", ")", "\n", "terminal_v_adv", "=", "np", ".", "zeros_like", "(", "v_adv", ")", "\n", "for", "idx", ",", "inf", "in", "enumerate", "(", "info", "[", "\"n\"", "]", ")", ":", "\n", "# if \"TimeLimit.truncated\" in inf and inf[\"TimeLimit.truncated\"]:", "\n", "                ", "if", "\"terminal_info\"", "not", "in", "inf", ":", "\n", "                    ", "continue", "\n", "", "inff", "=", "inf", "[", "\"terminal_info\"", "]", "\n", "if", "\"TimeLimit.truncated\"", "in", "inff", "and", "inff", "[", "\"TimeLimit.truncated\"", "]", ":", "\n", "                    ", "terminal_obs", "=", "inf", "[", "\"terminal_observation\"", "]", "\n", "terminal_obs_tensor", "=", "torch", ".", "FloatTensor", "(", "terminal_obs", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# estimate value for terminated state", "\n", "terminal_val", "=", "self", ".", "agent", ".", "ac", ".", "critic", "(", "terminal_obs_tensor", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "terminal_v", "[", "idx", "]", "=", "terminal_val", "\n", "\n", "# estimate terminal value for adversary", "\n", "adversary", "=", "self", ".", "adversaries", "[", "adv_indices", "[", "idx", "]", "]", "\n", "terminal_val_adv", "=", "adversary", ".", "ac", ".", "critic", "(", "terminal_obs_tensor", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "terminal_v_adv", "[", "idx", "]", "=", "terminal_val_adv", "\n", "\n", "# collect rollout data", "\n", "", "", "rollouts", ".", "push", "(", "{", "\"obs\"", ":", "obs", ",", "\"act\"", ":", "act", ",", "\"rew\"", ":", "rew", ",", "\"mask\"", ":", "mask", ",", "\"v\"", ":", "v", ",", "\"logp\"", ":", "logp", ",", "\"terminal_v\"", ":", "terminal_v", "}", ")", "\n", "# no need to push `obs`, `mask` since they are the same", "\n", "rollouts_adv", ".", "push", "(", "{", "\n", "\"act\"", ":", "act_adv", ",", "\n", "\"rew\"", ":", "-", "rew", ",", "\n", "\"v\"", ":", "v_adv", ",", "\n", "\"logp\"", ":", "logp_adv", ",", "\n", "\"terminal_v\"", ":", "terminal_v_adv", ",", "\n", "}", ")", "\n", "obs", "=", "next_obs", "\n", "\n", "# bookkeep", "\n", "", "self", ".", "total_steps", "+=", "self", ".", "rollout_batch_size", "*", "self", ".", "rollout_steps", "\n", "\n", "# postprocess for main agent", "\n", "last_val", "=", "self", ".", "agent", ".", "ac", ".", "critic", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "ret", ",", "adv", "=", "compute_returns_and_advantages", "(", "rollouts", ".", "rew", ",", "\n", "rollouts", ".", "v", ",", "\n", "rollouts", ".", "mask", ",", "\n", "rollouts", ".", "terminal_v", ",", "\n", "last_val", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "use_gae", "=", "self", ".", "use_gae", ",", "\n", "gae_lambda", "=", "self", ".", "gae_lambda", ")", "\n", "rollouts", ".", "ret", "=", "ret", "\n", "rollouts", ".", "adv", "=", "(", "adv", "-", "adv", ".", "mean", "(", ")", ")", "/", "(", "adv", ".", "std", "(", ")", "+", "1e-6", ")", "\n", "\n", "# postprocess for adversary", "\n", "rollouts_adv", ".", "obs", "=", "rollouts", ".", "obs", "\n", "rollouts_adv", ".", "mask", "=", "rollouts", ".", "mask", "\n", "\n", "obs_groups", "=", "split_obs_by_adversary", "(", "obs", ",", "indices_splits", ")", "\n", "last_val_adv", "=", "[", "]", "\n", "for", "idx", ",", "obs_adv", "in", "zip", "(", "indices_groups", ",", "obs_groups", ")", ":", "\n", "            ", "out", "=", "self", ".", "adversaries", "[", "idx", "]", ".", "ac", ".", "critic", "(", "torch", ".", "FloatTensor", "(", "obs_adv", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "last_val_adv", ".", "append", "(", "out", ")", "\n", "", "last_val_adv", "=", "np", ".", "concatenate", "(", "last_val_adv", ")", "\n", "\n", "ret", ",", "adv", "=", "compute_returns_and_advantages", "(", "rollouts_adv", ".", "rew", ",", "\n", "rollouts_adv", ".", "v", ",", "\n", "rollouts_adv", ".", "mask", ",", "\n", "rollouts_adv", ".", "terminal_v", ",", "\n", "last_val_adv", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "use_gae", "=", "self", ".", "use_gae", ",", "\n", "gae_lambda", "=", "self", ".", "gae_lambda", ")", "\n", "rollouts_adv", ".", "ret", "=", "ret", "\n", "rollouts_adv", ".", "adv", "=", "(", "adv", "-", "adv", ".", "mean", "(", ")", ")", "/", "(", "adv", ".", "std", "(", ")", "+", "1e-6", ")", "\n", "\n", "# split adversary rollouts for each", "\n", "rollout_splits", "=", "[", "]", "\n", "start", "=", "indices_splits", "\n", "end", "=", "np", ".", "concatenate", "(", "[", "indices_splits", "[", "1", ":", "]", ",", "[", "self", ".", "rollout_batch_size", "]", "]", ")", "\n", "\n", "for", "idx", ",", "s_idx", ",", "e_idx", "in", "zip", "(", "indices_groups", ",", "start", ",", "end", ")", ":", "\n", "            ", "split_batch_size", "=", "e_idx", "-", "s_idx", "\n", "rollout_split", "=", "PPOBuffer", "(", "self", ".", "adv_obs_space", ",", "self", ".", "adv_act_space", ",", "self", ".", "rollout_steps", ",", "split_batch_size", ")", "\n", "for", "k", "in", "rollouts_adv", ".", "scheme", ":", "\n", "# rollout_split[k] = rollouts_adv[k][:, s_idx:e_idx]", "\n", "                ", "setattr", "(", "rollout_split", ",", "k", ",", "getattr", "(", "rollouts_adv", ",", "k", ")", "[", ":", ",", "s_idx", ":", "e_idx", "]", ")", "\n", "", "rollout_splits", ".", "append", "(", "[", "idx", ",", "rollout_split", "]", ")", "\n", "\n", "", "return", "rollouts", ",", "rollout_splits", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.__init__": [[38, 102], ["safe_control_gym.controllers.base_controller.BaseController.__init__", "dict", "safe_control_gym.controllers.ppo.ppo_utils.PPOAgent", "rarl.RARL.agent.to", "safe_control_gym.controllers.ppo.ppo_utils.PPOAgent", "rarl.RARL.adversary.to", "safe_control_gym.math_and_models.normalization.BaseNormalizer", "safe_control_gym.math_and_models.normalization.BaseNormalizer", "safe_control_gym.utils.logging.ExperimentLogger", "safe_control_gym.envs.env_wrappers.vectorized_env.make_vec_envs", "safe_control_gym.envs.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "safe_control_gym.math_and_models.normalization.MeanStdNormalizer", "safe_control_gym.math_and_models.normalization.RewardStdNormalizer", "rarl.RARL.env.get_attr", "rarl.RARL.env.get_attr"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.__init__.make_vec_envs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_attr", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_attr"], ["def", "__init__", "(", "self", ",", "\n", "env_func", ",", "\n", "training", "=", "True", ",", "\n", "checkpoint_path", "=", "\"model_latest.pt\"", ",", "\n", "output_dir", "=", "\"temp\"", ",", "\n", "use_gpu", "=", "False", ",", "\n", "seed", "=", "0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env_func", ",", "training", ",", "checkpoint_path", ",", "output_dir", ",", "use_gpu", ",", "seed", ",", "**", "kwargs", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "# task", "\n", "if", "self", ".", "training", ":", "\n", "# training (+ evaluation)", "\n", "            ", "self", ".", "env", "=", "make_vec_envs", "(", "env_func", ",", "None", ",", "self", ".", "rollout_batch_size", ",", "self", ".", "num_workers", ",", "seed", ")", "\n", "self", ".", "env", "=", "VecRecordEpisodeStatistics", "(", "self", ".", "env", ",", "self", ".", "deque_size", ")", "\n", "self", ".", "eval_env", "=", "env_func", "(", "seed", "=", "seed", "*", "111", ")", "\n", "self", ".", "eval_env", "=", "RecordEpisodeStatistics", "(", "self", ".", "eval_env", ",", "self", ".", "deque_size", ")", "\n", "", "else", ":", "\n", "# testing only", "\n", "            ", "self", ".", "env", "=", "env_func", "(", ")", "\n", "self", ".", "env", "=", "RecordEpisodeStatistics", "(", "self", ".", "env", ")", "\n", "\n", "# protagonist and adversary agents", "\n", "", "shared_agent_args", "=", "dict", "(", "hidden_dim", "=", "self", ".", "hidden_dim", ",", "\n", "use_clipped_value", "=", "self", ".", "use_clipped_value", ",", "\n", "clip_param", "=", "self", ".", "clip_param", ",", "\n", "target_kl", "=", "self", ".", "target_kl", ",", "\n", "entropy_coef", "=", "self", ".", "entropy_coef", ",", "\n", "actor_lr", "=", "self", ".", "actor_lr", ",", "\n", "critic_lr", "=", "self", ".", "critic_lr", ",", "\n", "opt_epochs", "=", "self", ".", "opt_epochs", ",", "\n", "mini_batch_size", "=", "self", ".", "mini_batch_size", ")", "\n", "\n", "self", ".", "agent", "=", "PPOAgent", "(", "self", ".", "env", ".", "observation_space", ",", "self", ".", "env", ".", "action_space", ",", "**", "shared_agent_args", ")", "\n", "self", ".", "agent", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# fetch adversary specs from env ", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "adv_obs_space", "=", "self", ".", "env", ".", "get_attr", "(", "\"adversary_observation_space\"", ")", "[", "0", "]", "\n", "self", ".", "adv_act_space", "=", "self", ".", "env", ".", "get_attr", "(", "\"adversary_action_space\"", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "adv_obs_space", "=", "self", ".", "env", ".", "adversary_observation_space", "\n", "self", ".", "adv_act_space", "=", "self", ".", "env", ".", "adversary_action_space", "\n", "", "self", ".", "adversary", "=", "PPOAgent", "(", "self", ".", "adv_obs_space", ",", "self", ".", "adv_act_space", ",", "**", "shared_agent_args", ")", "\n", "self", ".", "adversary", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# pre-/post-processing", "\n", "self", ".", "obs_normalizer", "=", "BaseNormalizer", "(", ")", "\n", "if", "self", ".", "norm_obs", ":", "\n", "            ", "self", ".", "obs_normalizer", "=", "MeanStdNormalizer", "(", "shape", "=", "self", ".", "env", ".", "observation_space", ".", "shape", ",", "clip", "=", "self", ".", "clip_obs", ",", "epsilon", "=", "1e-8", ")", "\n", "\n", "", "self", ".", "reward_normalizer", "=", "BaseNormalizer", "(", ")", "\n", "if", "self", ".", "norm_reward", ":", "\n", "            ", "self", ".", "reward_normalizer", "=", "RewardStdNormalizer", "(", "gamma", "=", "self", ".", "gamma", ",", "clip", "=", "self", ".", "clip_reward", ",", "epsilon", "=", "1e-8", ")", "\n", "\n", "# logging", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "log_file_out", "=", "True", "\n", "use_tensorboard", "=", "self", ".", "tensorboard", "\n", "", "else", ":", "\n", "# disable logging to texts and tfboard for evaluation", "\n", "            ", "log_file_out", "=", "False", "\n", "use_tensorboard", "=", "False", "\n", "", "self", ".", "logger", "=", "ExperimentLogger", "(", "output_dir", ",", "log_file_out", "=", "log_file_out", ",", "use_tensorboard", "=", "use_tensorboard", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.reset": [[103, 120], ["rarl.RARL.env.add_tracker", "rarl.RARL.env.add_tracker", "rarl.RARL.eval_env.add_tracker", "rarl.RARL.eval_env.add_tracker", "rarl.RARL.env.reset", "rarl.RARL.obs_normalizer", "rarl.RARL.env.add_tracker", "rarl.RARL.env.add_tracker", "rarl.RARL.env.add_tracker"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do initializations for training or evaluation.\"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "# Add episodic stats to be tracked.", "\n", "            ", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "eval_env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "eval_env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n", "self", ".", "total_steps", "=", "0", "\n", "obs", ",", "_", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "", "else", ":", "\n", "# Add episodic stats to be tracked.", "\n", "            ", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_values\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.close": [[121, 127], ["rarl.RARL.env.close", "rarl.RARL.logger.close", "rarl.RARL.eval_env.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shuts down and cleans up lingering resources.\"\"\"", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "eval_env", ".", "close", "(", ")", "\n", "", "self", ".", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.save": [[128, 148], ["os.path.dirname", "os.makedirs", "torch.save", "rarl.RARL.agent.state_dict", "rarl.RARL.adversary.state_dict", "rarl.RARL.obs_normalizer.state_dict", "rarl.RARL.reward_normalizer.state_dict", "state_dict.update", "safe_control_gym.utils.utils.get_random_state", "rarl.RARL.env.get_env_random_state"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.get_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_env_random_state"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Saves model params and experiment state to checkpoint path.\"\"\"", "\n", "path_dir", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "path_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "state_dict", "=", "{", "\n", "\"agent\"", ":", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "\n", "\"adversary\"", ":", "self", ".", "adversary", ".", "state_dict", "(", ")", ",", "\n", "\"obs_normalizer\"", ":", "self", ".", "obs_normalizer", ".", "state_dict", "(", ")", ",", "\n", "\"reward_normalizer\"", ":", "self", ".", "reward_normalizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "exp_state", "=", "{", "\n", "\"total_steps\"", ":", "self", ".", "total_steps", ",", "\n", "\"obs\"", ":", "self", ".", "obs", ",", "\n", "\"random_state\"", ":", "get_random_state", "(", ")", ",", "\n", "\"env_random_state\"", ":", "self", ".", "env", ".", "get_env_random_state", "(", ")", "\n", "}", "\n", "state_dict", ".", "update", "(", "exp_state", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.load": [[149, 166], ["torch.load", "rarl.RARL.agent.load_state_dict", "rarl.RARL.adversary.load_state_dict", "rarl.RARL.obs_normalizer.load_state_dict", "rarl.RARL.reward_normalizer.load_state_dict", "safe_control_gym.utils.utils.set_random_state", "rarl.RARL.env.set_env_random_state", "rarl.RARL.logger.load"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.set_env_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Restores model and experiment given checkpoint path.\"\"\"", "\n", "state", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "# restore pllicy", "\n", "self", ".", "agent", ".", "load_state_dict", "(", "state", "[", "\"agent\"", "]", ")", "\n", "self", ".", "adversary", ".", "load_state_dict", "(", "state", "[", "\"adversary\"", "]", ")", "\n", "self", ".", "obs_normalizer", ".", "load_state_dict", "(", "state", "[", "\"obs_normalizer\"", "]", ")", "\n", "self", ".", "reward_normalizer", ".", "load_state_dict", "(", "state", "[", "\"reward_normalizer\"", "]", ")", "\n", "\n", "# restore experiment state", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "total_steps", "=", "state", "[", "\"total_steps\"", "]", "\n", "self", ".", "obs", "=", "state", "[", "\"obs\"", "]", "\n", "set_random_state", "(", "state", "[", "\"random_state\"", "]", ")", "\n", "self", ".", "env", ".", "set_env_random_state", "(", "state", "[", "\"env_random_state\"", "]", ")", "\n", "self", ".", "logger", ".", "load", "(", "self", ".", "total_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.learn": [[167, 200], ["rarl.RARL.train_step", "rarl.RARL.save", "rarl.RARL.logger.info", "os.path.join", "rarl.RARL.save", "rarl.RARL.run", "rarl.RARL.logger.info", "eval_results[].mean", "getattr", "rarl.RARL.log_step", "rarl.RARL.save", "eval_results[].mean", "eval_results[].std", "eval_results[].mean", "eval_results[].std", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.train_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.log_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save"], ["", "", "def", "learn", "(", "self", ",", "env", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Performs learning (pre-training, training, fine-tuning, etc).\"\"\"", "\n", "while", "self", ".", "total_steps", "<", "self", ".", "max_env_steps", ":", "\n", "            ", "results", "=", "self", ".", "train_step", "(", ")", "\n", "\n", "# checkpoint", "\n", "if", "self", ".", "total_steps", ">=", "self", ".", "max_env_steps", "or", "(", "self", ".", "save_interval", "and", "self", ".", "total_steps", "%", "self", ".", "save_interval", "==", "0", ")", ":", "\n", "# latest/final checkpoint", "\n", "                ", "self", ".", "save", "(", "self", ".", "checkpoint_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Checkpoint | {}\"", ".", "format", "(", "self", ".", "checkpoint_path", ")", ")", "\n", "", "if", "self", ".", "num_checkpoints", "and", "self", ".", "total_steps", "%", "(", "self", ".", "max_env_steps", "//", "self", ".", "num_checkpoints", ")", "==", "0", ":", "\n", "# intermediate checkpoint", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"checkpoints\"", ",", "\"model_{}.pt\"", ".", "format", "(", "self", ".", "total_steps", ")", ")", "\n", "self", ".", "save", "(", "path", ")", "\n", "\n", "# eval", "\n", "", "if", "self", ".", "eval_interval", "and", "self", ".", "total_steps", "%", "self", ".", "eval_interval", "==", "0", ":", "\n", "                ", "eval_results", "=", "self", ".", "run", "(", "env", "=", "self", ".", "eval_env", ",", "n_episodes", "=", "self", ".", "eval_batch_size", ")", "\n", "results", "[", "\"eval\"", "]", "=", "eval_results", "\n", "self", ".", "logger", ".", "info", "(", "\"Eval | ep_lengths {:.2f} +/- {:.2f} | ep_return {:.3f} +/- {:.3f}\"", ".", "format", "(", "eval_results", "[", "\"ep_lengths\"", "]", ".", "mean", "(", ")", ",", "\n", "eval_results", "[", "\"ep_lengths\"", "]", ".", "std", "(", ")", ",", "\n", "eval_results", "[", "\"ep_returns\"", "]", ".", "mean", "(", ")", ",", "\n", "eval_results", "[", "\"ep_returns\"", "]", ".", "std", "(", ")", ")", ")", "\n", "# save best model", "\n", "eval_score", "=", "eval_results", "[", "\"ep_returns\"", "]", ".", "mean", "(", ")", "\n", "eval_best_score", "=", "getattr", "(", "self", ",", "\"eval_best_score\"", ",", "-", "np", ".", "infty", ")", "\n", "if", "self", ".", "eval_save_best", "and", "eval_best_score", "<", "eval_score", ":", "\n", "                    ", "self", ".", "eval_best_score", "=", "eval_score", "\n", "self", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"model_best.pt\"", ")", ")", "\n", "\n", "# logging", "\n", "", "", "if", "self", ".", "log_interval", "and", "self", ".", "total_steps", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "self", ".", "log_step", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.run": [[201, 258], ["rarl.RARL.agent.eval", "rarl.RARL.adversary.eval", "rarl.RARL.obs_normalizer.set_read_only", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.reset", "rarl.RARL.obs_normalizer", "numpy.asarray", "numpy.asarray", "len", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.set_adversary_control", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.step", "rarl.RARL.obs_normalizer", "len", "len", "eval_results.update", "safe_control_gym.utils.utils.is_wrapped", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "torch.no_grad", "torch.FloatTensor().to", "rarl.RARL.agent.ac.act", "numpy.zeros", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.render", "frames.append", "print", "numpy.asarray.append", "numpy.asarray.append", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.reset", "numpy.asarray", "torch.no_grad", "rarl.RARL.adversary.ac.act", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.render", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.queued_stats.items", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.set_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.set_adversary_control", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.is_wrapped", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render"], ["", "", "", "def", "run", "(", "self", ",", "env", "=", "None", ",", "render", "=", "False", ",", "n_episodes", "=", "10", ",", "verbose", "=", "False", ",", "use_adv", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Runs evaluation with current policy.\"\"\"", "\n", "self", ".", "agent", ".", "eval", "(", ")", "\n", "self", ".", "adversary", ".", "eval", "(", ")", "\n", "self", ".", "obs_normalizer", ".", "set_read_only", "(", ")", "\n", "if", "env", "is", "None", ":", "\n", "            ", "env", "=", "self", ".", "env", "\n", "", "else", ":", "\n", "            ", "if", "not", "is_wrapped", "(", "env", ",", "RecordEpisodeStatistics", ")", ":", "\n", "                ", "env", "=", "RecordEpisodeStatistics", "(", "env", ",", "n_episodes", ")", "\n", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"constraint_values\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n", "", "", "obs", ",", "_", "=", "env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "ep_returns", ",", "ep_lengths", "=", "[", "]", ",", "[", "]", "\n", "frames", "=", "[", "]", "\n", "\n", "while", "len", "(", "ep_returns", ")", "<", "n_episodes", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "obs", "=", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "action", "=", "self", ".", "agent", ".", "ac", ".", "act", "(", "obs", ")", "\n", "\n", "# no disturbance during testing", "\n", "", "if", "use_adv", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "action_adv", "=", "self", ".", "adversary", ".", "ac", ".", "act", "(", "obs", ")", "\n", "", "", "else", ":", "\n", "                ", "action_adv", "=", "np", ".", "zeros", "(", "self", ".", "adv_act_space", ".", "shape", "[", "0", "]", ")", "\n", "", "env", ".", "set_adversary_control", "(", "action_adv", ")", "\n", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "render", ":", "\n", "                ", "env", ".", "render", "(", ")", "\n", "frames", ".", "append", "(", "env", ".", "render", "(", "\"rgb_array\"", ")", ")", "\n", "", "if", "verbose", ":", "\n", "                ", "print", "(", "\"obs {} | act {}\"", ".", "format", "(", "obs", ",", "action", ")", ")", "\n", "\n", "", "if", "done", ":", "\n", "                ", "assert", "\"episode\"", "in", "info", "\n", "ep_returns", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"r\"", "]", ")", "\n", "ep_lengths", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"l\"", "]", ")", "\n", "obs", ",", "_", "=", "env", ".", "reset", "(", ")", "\n", "", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "\n", "# collect evaluation results", "\n", "", "ep_lengths", "=", "np", ".", "asarray", "(", "ep_lengths", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "ep_returns", ")", "\n", "eval_results", "=", "{", "\"ep_returns\"", ":", "ep_returns", ",", "\"ep_lengths\"", ":", "ep_lengths", "}", "\n", "if", "len", "(", "frames", ")", ">", "0", ":", "\n", "            ", "eval_results", "[", "\"frames\"", "]", "=", "frames", "\n", "# Other episodic stats from evaluation env.", "\n", "", "if", "len", "(", "env", ".", "queued_stats", ")", ">", "0", ":", "\n", "            ", "queued_stats", "=", "{", "k", ":", "np", ".", "asarray", "(", "v", ")", "for", "k", ",", "v", "in", "env", ".", "queued_stats", ".", "items", "(", ")", "}", "\n", "eval_results", ".", "update", "(", "queued_stats", ")", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.train_step": [[259, 274], ["rarl.RARL.obs_normalizer.unset_read_only", "time.time", "rarl.RARL.update_agent", "results.update", "rarl.RARL.update_adversary", "results.update", "results.update", "time.time"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.unset_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.update_agent", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.update_adversary", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["", "def", "train_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Performs a training/fine-tuning step.\"\"\"", "\n", "self", ".", "obs_normalizer", ".", "unset_read_only", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "results", "=", "{", "}", "\n", "\n", "# perform updates by turn", "\n", "agent_results", "=", "self", ".", "update_agent", "(", ")", "\n", "results", ".", "update", "(", "agent_results", ")", "\n", "adversary_results", "=", "self", ".", "update_adversary", "(", ")", "\n", "results", ".", "update", "(", "adversary_results", ")", "\n", "\n", "# miscellaneous", "\n", "results", ".", "update", "(", "{", "\"step\"", ":", "self", ".", "total_steps", ",", "\"elapsed_time\"", ":", "time", ".", "time", "(", ")", "-", "start", "}", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.log_step": [[275, 339], ["rarl.RARL.logger.add_scalars", "rarl.RARL.logger.add_scalars", "rarl.RARL.logger.add_scalars", "numpy.asarray", "numpy.asarray", "numpy.asarray", "rarl.RARL.logger.add_scalars", "rarl.RARL.logger.add_scalars", "rarl.RARL.logger.dump_scalars", "rarl.RARL.logger.add_scalars", "numpy.asarray.mean", "numpy.asarray.mean", "numpy.asarray.mean", "eval_ep_lengths.mean", "eval_ep_returns.mean", "eval_constraint_violation.mean", "eval_mse.mean"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.dump_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars"], ["", "def", "log_step", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Does logging after a training step.\"\"\"", "\n", "step", "=", "results", "[", "\"step\"", "]", "\n", "# runner stats", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"step\"", ":", "step", ",", "\n", "\"time\"", ":", "results", "[", "\"elapsed_time\"", "]", ",", "\n", "\"progress\"", ":", "step", "/", "self", ".", "max_env_steps", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"time\"", ",", "\n", "write", "=", "False", ",", "\n", "write_tb", "=", "False", ")", "\n", "\n", "# learning stats", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "k", ":", "results", "[", "k", "]", "\n", "for", "k", "in", "[", "\"policy_loss\"", ",", "\"value_loss\"", ",", "\"entropy_loss\"", "]", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"loss\"", ")", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "k", ":", "results", "[", "k", "+", "\"_adv\"", "]", "\n", "for", "k", "in", "[", "\"policy_loss\"", ",", "\"value_loss\"", ",", "\"entropy_loss\"", "]", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"loss_adv\"", ")", "\n", "\n", "# performance stats", "\n", "ep_lengths", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "length_queue", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "return_queue", ")", "\n", "ep_constraint_violation", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "queued_stats", "[", "\"constraint_violation\"", "]", ")", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"ep_length\"", ":", "ep_lengths", ".", "mean", "(", ")", ",", "\n", "\"ep_return\"", ":", "ep_returns", ".", "mean", "(", ")", ",", "\n", "\"ep_reward\"", ":", "(", "ep_returns", "/", "ep_lengths", ")", ".", "mean", "(", ")", ",", "\n", "\"ep_constraint_violation\"", ":", "ep_constraint_violation", ".", "mean", "(", ")", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"stat\"", ")", "\n", "# Total constraint violation during learning.", "\n", "total_violations", "=", "self", ".", "env", ".", "accumulated_stats", "[", "\"constraint_violation\"", "]", "\n", "self", ".", "logger", ".", "add_scalars", "(", "{", "\"constraint_violation\"", ":", "total_violations", "}", ",", "step", ",", "prefix", "=", "\"stat\"", ")", "\n", "if", "\"eval\"", "in", "results", ":", "\n", "            ", "eval_ep_lengths", "=", "results", "[", "\"eval\"", "]", "[", "\"ep_lengths\"", "]", "\n", "eval_ep_returns", "=", "results", "[", "\"eval\"", "]", "[", "\"ep_returns\"", "]", "\n", "eval_constraint_violation", "=", "results", "[", "\"eval\"", "]", "[", "\"constraint_violation\"", "]", "\n", "eval_mse", "=", "results", "[", "\"eval\"", "]", "[", "\"mse\"", "]", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"ep_length\"", ":", "eval_ep_lengths", ".", "mean", "(", ")", ",", "\n", "\"ep_return\"", ":", "eval_ep_returns", ".", "mean", "(", ")", ",", "\n", "\"ep_reward\"", ":", "(", "eval_ep_returns", "/", "eval_ep_lengths", ")", ".", "mean", "(", ")", ",", "\n", "\"constraint_violation\"", ":", "eval_constraint_violation", ".", "mean", "(", ")", ",", "\n", "\"mse\"", ":", "eval_mse", ".", "mean", "(", ")", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"stat_eval\"", ")", "\n", "# print summary table", "\n", "", "self", ".", "logger", ".", "dump_scalars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.collect_rollouts": [[340, 420], ["range", "safe_control_gym.controllers.ppo.ppo_utils.compute_returns_and_advantages", "safe_control_gym.controllers.ppo.ppo_utils.PPOBuffer", "safe_control_gym.controllers.ppo.ppo_utils.PPOBuffer", "rarl.RARL.env.env_method", "rarl.RARL.env.step", "rarl.RARL.obs_normalizer", "rarl.RARL.reward_normalizer", "numpy.zeros_like", "enumerate", "safe_control_gym.controllers.ppo.ppo_utils.PPOBuffer.push", "rarl.RARL.adversary.ac.critic().detach().numpy", "rarl.RARL.agent.ac.critic().detach().numpy", "torch.no_grad", "rarl.RARL.agent.ac.step", "rarl.RARL.adversary.ac.step", "done.astype", "rollout_data.update", "rollout_data.update", "adv.mean", "adv.std", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().unsqueeze().to", "rarl.RARL.adversary.ac.critic().detach", "rarl.RARL.agent.ac.critic().detach", "rarl.RARL.adversary.ac.critic().squeeze().detach().numpy", "rarl.RARL.agent.ac.critic().squeeze().detach().numpy", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().unsqueeze", "rarl.RARL.adversary.ac.critic", "rarl.RARL.agent.ac.critic", "rarl.RARL.adversary.ac.critic().squeeze().detach", "rarl.RARL.agent.ac.critic().squeeze().detach", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "rarl.RARL.adversary.ac.critic().squeeze", "rarl.RARL.agent.ac.critic().squeeze", "torch.FloatTensor", "torch.FloatTensor", "rarl.RARL.adversary.ac.critic", "rarl.RARL.agent.ac.critic"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.compute_returns_and_advantages", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.env_method", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.push", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["", "def", "collect_rollouts", "(", "self", ",", "adversary", "=", "False", ")", ":", "\n", "        ", "\"\"\"Uses current agent and adversary to collect trajectories.\"\"\"", "\n", "if", "adversary", ":", "\n", "            ", "rollouts", "=", "PPOBuffer", "(", "self", ".", "adv_obs_space", ",", "self", ".", "adv_act_space", ",", "self", ".", "rollout_steps", ",", "self", ".", "rollout_batch_size", ")", "\n", "", "else", ":", "\n", "            ", "rollouts", "=", "PPOBuffer", "(", "self", ".", "env", ".", "observation_space", ",", "self", ".", "env", ".", "action_space", ",", "self", ".", "rollout_steps", ",", "self", ".", "rollout_batch_size", ")", "\n", "", "obs", "=", "self", ".", "obs", "\n", "\n", "# get rollouts/trajectories", "\n", "for", "step", "in", "range", "(", "self", ".", "rollout_steps", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# protagnist action", "\n", "                ", "act", ",", "v", ",", "logp", "=", "self", ".", "agent", ".", "ac", ".", "step", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "# adversary action", "\n", "act_adv", ",", "v_adv", ",", "logp_adv", "=", "self", ".", "adversary", ".", "ac", ".", "step", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "# step env", "\n", "", "act_adv_list", "=", "[", "[", "act", "]", "for", "act", "in", "act_adv", "]", "\n", "self", ".", "env", ".", "env_method", "(", "\"set_adversary_control\"", ",", "act_adv_list", ")", "\n", "next_obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "act", ")", "\n", "\n", "next_obs", "=", "self", ".", "obs_normalizer", "(", "next_obs", ")", "\n", "rew", "=", "self", ".", "reward_normalizer", "(", "rew", ",", "done", ")", "\n", "mask", "=", "1", "-", "done", ".", "astype", "(", "float", ")", "\n", "\n", "# time truncation is not true termination", "\n", "terminal_v", "=", "np", ".", "zeros_like", "(", "v", ")", "\n", "for", "idx", ",", "inf", "in", "enumerate", "(", "info", "[", "\"n\"", "]", ")", ":", "\n", "# if \"TimeLimit.truncated\" in inf and inf[\"TimeLimit.truncated\"]:", "\n", "                ", "if", "\"terminal_info\"", "not", "in", "inf", ":", "\n", "                    ", "continue", "\n", "", "inff", "=", "inf", "[", "\"terminal_info\"", "]", "\n", "if", "\"TimeLimit.truncated\"", "in", "inff", "and", "inff", "[", "\"TimeLimit.truncated\"", "]", ":", "\n", "                    ", "terminal_obs", "=", "inf", "[", "\"terminal_observation\"", "]", "\n", "terminal_obs_tensor", "=", "torch", ".", "FloatTensor", "(", "terminal_obs", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# estimate value for terminated state", "\n", "if", "adversary", ":", "\n", "                        ", "terminal_val", "=", "self", ".", "adversary", ".", "ac", ".", "critic", "(", "terminal_obs_tensor", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                        ", "terminal_val", "=", "self", ".", "agent", ".", "ac", ".", "critic", "(", "terminal_obs_tensor", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "terminal_v", "[", "idx", "]", "=", "terminal_val", "\n", "\n", "# collect rollout data", "\n", "", "", "rollout_data", "=", "{", "\"obs\"", ":", "obs", ",", "\"mask\"", ":", "mask", ",", "\"terminal_v\"", ":", "terminal_v", "}", "\n", "if", "adversary", ":", "\n", "                ", "rollout_data", ".", "update", "(", "{", "\n", "\"act\"", ":", "act_adv", ",", "\n", "\"rew\"", ":", "-", "rew", ",", "\n", "\"v\"", ":", "v_adv", ",", "\n", "\"logp\"", ":", "logp_adv", ",", "\n", "}", ")", "\n", "", "else", ":", "\n", "                ", "rollout_data", ".", "update", "(", "{", "\n", "\"act\"", ":", "act", ",", "\n", "\"rew\"", ":", "rew", ",", "\n", "\"v\"", ":", "v", ",", "\n", "\"logp\"", ":", "logp", ",", "\n", "}", ")", "\n", "", "rollouts", ".", "push", "(", "rollout_data", ")", "\n", "obs", "=", "next_obs", "\n", "\n", "", "self", ".", "obs", "=", "obs", "\n", "self", ".", "total_steps", "+=", "self", ".", "rollout_batch_size", "*", "self", ".", "rollout_steps", "\n", "\n", "# postprocess", "\n", "if", "adversary", ":", "\n", "            ", "last_val", "=", "self", ".", "adversary", ".", "ac", ".", "critic", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "last_val", "=", "self", ".", "agent", ".", "ac", ".", "critic", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "ret", ",", "adv", "=", "compute_returns_and_advantages", "(", "rollouts", ".", "rew", ",", "\n", "rollouts", ".", "v", ",", "\n", "rollouts", ".", "mask", ",", "\n", "rollouts", ".", "terminal_v", ",", "\n", "last_val", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "use_gae", "=", "self", ".", "use_gae", ",", "\n", "gae_lambda", "=", "self", ".", "gae_lambda", ")", "\n", "rollouts", ".", "ret", "=", "ret", "\n", "rollouts", ".", "adv", "=", "(", "adv", "-", "adv", ".", "mean", "(", ")", ")", "/", "(", "adv", ".", "std", "(", ")", "+", "1e-6", ")", "\n", "return", "rollouts", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.update_agent": [[421, 438], ["collections.defaultdict", "rarl.RARL.agent.train", "rarl.RARL.adversary.eval", "range", "rarl.RARL.collect_rollouts", "rarl.RARL.agent.update", "rarl.RARL.items", "results[].append", "sum", "len", "collections.defaultdict.items"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.collect_rollouts", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["", "def", "update_agent", "(", "self", ")", ":", "\n", "        ", "\"\"\"Updates the protagonist agent per outer iteration.\"\"\"", "\n", "results", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "agent", ".", "train", "(", ")", "\n", "self", ".", "adversary", ".", "eval", "(", ")", "\n", "\n", "# inner iteration", "\n", "for", "_", "in", "range", "(", "self", ".", "agent_iterations", ")", ":", "\n", "            ", "rollouts", "=", "self", ".", "collect_rollouts", "(", ")", "\n", "agent_results", "=", "self", ".", "agent", ".", "update", "(", "rollouts", ")", "\n", "# add inner iteration stats", "\n", "for", "key", ",", "val", "in", "agent_results", ".", "items", "(", ")", ":", "\n", "                ", "results", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "\n", "# average stats", "\n", "", "", "results", "=", "{", "k", ":", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.update_adversary": [[439, 455], ["collections.defaultdict", "rarl.RARL.agent.eval", "rarl.RARL.adversary.train", "range", "rarl.RARL.collect_rollouts", "rarl.RARL.adversary.update", "rarl.RARL.items", "results[].append", "sum", "len", "collections.defaultdict.items"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl.RARL.collect_rollouts", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["", "def", "update_adversary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Updates the adversary agent per outer iteration.\"\"\"", "\n", "results", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "agent", ".", "eval", "(", ")", "\n", "self", ".", "adversary", ".", "train", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "adversary_iterations", ")", ":", "\n", "            ", "adv_rollouts", "=", "self", ".", "collect_rollouts", "(", "adversary", "=", "True", ")", "\n", "adv_results", "=", "self", ".", "adversary", ".", "update", "(", "adv_rollouts", ")", "\n", "# add inner iteration stats", "\n", "for", "key", ",", "val", "in", "adv_results", ".", "items", "(", ")", ":", "\n", "                ", "results", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "\n", "# average stats", "\n", "", "", "results", "=", "{", "k", "+", "\"_adv\"", ":", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.rarl.rarl_utils.split_obs_by_adversary": [[17, 34], ["safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._unflatten_obs", "numpy.concatenate", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_obs", "zip", "len"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._unflatten_obs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_obs"], ["def", "split_obs_by_adversary", "(", "obs", ",", "indices_splits", ")", ":", "\n", "    ", "\"\"\"Splits and groups the observations by adversaries.\n    \n    Args:\n        obs (np.array | dict): batch of observations, (N,*obs_dim).\n        indices_splits (np.array): shape (n,), \n            first occurence indices of the obs batch for each adversary.\n    \n    Returns:\n        list: groups of observations for adversaries.\n\n    \"\"\"", "\n", "obs_list", "=", "_unflatten_obs", "(", "obs", ")", "\n", "start", "=", "indices_splits", "\n", "end", "=", "np", ".", "concatenate", "(", "[", "indices_splits", "[", "1", ":", "]", ",", "[", "len", "(", "obs_list", ")", "]", "]", ")", "\n", "obs_groups", "=", "[", "_flatten_obs", "(", "obs_list", "[", "i", ":", "j", "]", ")", "for", "i", ",", "j", "in", "zip", "(", "start", ",", "end", ")", "]", "\n", "return", "obs_groups", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.__init__": [[44, 201], ["safe_control_gym.controllers.mpc.linear_mpc.LinearMPC", "gp_mpc.GPMPC.prior_ctrl.reset", "safe_control_gym.controllers.mpc.linear_mpc.MPC.__init__", "env_func", "env_func", "numpy.eye", "type", "functools.partial", "inertial_prop.update", "functools.partial", "torch.cuda.is_available", "numpy.arange().tolist", "numpy.arange().tolist", "numpy.atleast_2d", "numpy.atleast_2d", "type", "type", "numpy.arange", "numpy.arange", "numpy.array", "numpy.array", "inertial_prop.items"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env_func", ",", "\n", "seed", ":", "int", "=", "1337", ",", "\n", "horizon", ":", "int", "=", "5", ",", "\n", "q_mpc", ":", "list", "=", "[", "1", "]", ",", "\n", "r_mpc", ":", "list", "=", "[", "1", "]", ",", "\n", "additional_constraints", ":", "list", "=", "None", ",", "\n", "soft_constraints", ":", "dict", "=", "None", ",", "\n", "warmstart", ":", "bool", "=", "True", ",", "\n", "train_iterations", ":", "int", "=", "None", ",", "\n", "test_data_ratio", ":", "float", "=", "0.2", ",", "\n", "overwrite_saved_data", ":", "bool", "=", "True", ",", "\n", "optimization_iterations", ":", "list", "=", "None", ",", "\n", "learning_rate", ":", "list", "=", "None", ",", "\n", "normalize_training_data", ":", "bool", "=", "False", ",", "\n", "use_gpu", ":", "bool", "=", "False", ",", "\n", "gp_model_path", ":", "str", "=", "None", ",", "\n", "prob", ":", "float", "=", "0.955", ",", "\n", "initial_rollout_std", ":", "float", "=", "0.005", ",", "\n", "input_mask", ":", "list", "=", "None", ",", "\n", "target_mask", ":", "list", "=", "None", ",", "\n", "gp_approx", ":", "str", "=", "'mean_eq'", ",", "\n", "sparse_gp", ":", "bool", "=", "False", ",", "\n", "n_ind_points", ":", "int", "=", "150", ",", "\n", "inducing_point_selection_method", ":", "str", "=", "'kmeans'", ",", "\n", "recalc_inducing_points_at_every_step", ":", "bool", "=", "False", ",", "\n", "online_learning", ":", "bool", "=", "False", ",", "\n", "inertial_prop", ":", "list", "=", "[", "1.0", "]", ",", "\n", "prior_param_coeff", ":", "float", "=", "1.0", ",", "\n", "terminate_run_on_done", ":", "bool", "=", "True", ",", "\n", "output_dir", ":", "str", "=", "\"results/temp\"", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize GP-MPC.\n\n        Args:\n            env_func (gym.Env): functionalized initialization of the environment.\n            seed (int): random seed.\n            horizon (int): MPC planning horizon.\n            Q, R (np.array): cost weight matrix.\n            use_prev_start (bool): Warmstart mpc with the previous solution.\n            train_iterations (int): the number of training examples to use for each dimension of the GP.\n            overwrite_saved_data (bool): Overwrite the input and target data to the already saved data if it exists.\n            optimization_iterations (list): the number of optimization iterations for each dimension of the GP.\n            learning_rate (list): the learning rate for training each dimension of the GP.\n            normalize_training_data (bool): Normalize the training data.\n            use_gpu (bool): use GPU while training the gp.\n            gp_model_path (str): path to a pretrained GP model. If None, will train a new one.\n            output_dir (str): directory to store model and results.\n            prob (float): desired probabilistic safety level.\n            initial_rollout_std (float): the initial std (across all states) for the mean_eq rollout.\n            inertial_prop (list): to initialize the inertial properties of the prior model.\n            prior_param_coeff (float): constant multiplying factor to adjust the prior model intertial properties.\n            input_mask (list): list of which input dimensions to use in GP model. If None, all are used.\n            target_mask (list): list of which output dimensions to use in the GP model. If None, all are used.\n            gp_approx (str): 'mean_eq' used mean equivalence rollout for the GP dynamics. Only one that works currently.\n            sparse_gp (bool): True to use sparse GP approximations, otherwise no spare approximation is used.\n            n_ind_points (int): Number of inducing points to use got the FTIC gp approximation.\n            inducing_point_selection_method (str): kmeans for kmeans clustering, 'random' for random.\n            recalc_inducing_points_at_every_step (bool): True to recompute the gp approx at every time step.\n            online_learning (bool): if true, GP kernel values will be updated using past trajectory values.\n            additional_constraints (list): list of Constraint objects defining additional constraints to be used.\n\n        \"\"\"", "\n", "if", "type", "(", "inertial_prop", ")", "is", "list", ":", "\n", "            ", "self", ".", "prior_env_func", "=", "partial", "(", "env_func", ",", "\n", "inertial_prop", "=", "np", ".", "array", "(", "inertial_prop", ")", "*", "prior_param_coeff", ",", "\n", "prior_prop", "=", "np", ".", "array", "(", "inertial_prop", ")", "*", "prior_param_coeff", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "type", "(", "inertial_prop", ")", "is", "dict", ")", "or", "(", "type", "(", "inertial_prop", ")", "==", "munch", ".", "Munch", ")", ",", "'[Error]: GPMPC.__init__(): Intertial properties must be a list, dict, or munch.Munch'", "\n", "inertial_prop", ".", "update", "(", "(", "prop", ",", "val", "*", "prior_param_coeff", ")", "for", "prop", ",", "val", "in", "inertial_prop", ".", "items", "(", ")", ")", "\n", "self", ".", "prior_env_func", "=", "partial", "(", "env_func", ",", "\n", "inertial_prop", "=", "inertial_prop", ",", "\n", "prior_prop", "=", "inertial_prop", ")", "\n", "", "if", "soft_constraints", "is", "None", ":", "\n", "            ", "self", ".", "soft_constraints_params", "=", "{", "'gp_soft_constraints'", ":", "False", ",", "\n", "'gp_soft_constraints_coeff'", ":", "0", ",", "\n", "'prior_soft_constraints'", ":", "False", ",", "\n", "'prior_soft_constraints_coeff'", ":", "0", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "soft_constraints_params", "=", "soft_constraints", "\n", "\n", "# Initialize the method using linear MPC.", "\n", "", "self", ".", "prior_ctrl", "=", "LinearMPC", "(", "\n", "self", ".", "prior_env_func", ",", "\n", "horizon", "=", "horizon", ",", "\n", "q_mpc", "=", "q_mpc", ",", "\n", "r_mpc", "=", "r_mpc", ",", "\n", "warmstart", "=", "warmstart", ",", "\n", "soft_constraints", "=", "self", ".", "soft_constraints_params", "[", "'prior_soft_constraints'", "]", ",", "\n", "terminate_run_on_done", "=", "terminate_run_on_done", ",", "\n", "# runner args", "\n", "# shared/base args", "\n", "output_dir", "=", "output_dir", ",", "\n", "additional_constraints", "=", "additional_constraints", ",", "\n", ")", "\n", "self", ".", "prior_ctrl", ".", "reset", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "self", ".", "prior_env_func", ",", "\n", "horizon", "=", "horizon", ",", "\n", "q_mpc", "=", "q_mpc", ",", "\n", "r_mpc", "=", "r_mpc", ",", "\n", "warmstart", "=", "warmstart", ",", "\n", "soft_constraints", "=", "self", ".", "soft_constraints_params", "[", "'gp_soft_constraints'", "]", ",", "\n", "terminate_run_on_done", "=", "terminate_run_on_done", ",", "\n", "# runner args", "\n", "# shared/base args", "\n", "output_dir", "=", "output_dir", ",", "\n", "additional_constraints", "=", "additional_constraints", ",", "\n", "**", "kwargs", ")", "\n", "# Setup environments.", "\n", "self", ".", "env_func", "=", "env_func", "\n", "self", ".", "env", "=", "env_func", "(", "randomized_init", "=", "False", ",", "seed", "=", "seed", ")", "\n", "self", ".", "env_training", "=", "env_func", "(", "randomized_init", "=", "True", ",", "seed", "=", "seed", ")", "\n", "# No training data accumulated yet so keep the dynamics function as linear prior.", "\n", "self", ".", "train_data", "=", "None", "\n", "self", ".", "data_inputs", "=", "None", "\n", "self", ".", "data_targets", "=", "None", "\n", "self", ".", "prior_dynamics_func", "=", "self", ".", "prior_ctrl", ".", "linear_dynamics_func", "\n", "self", ".", "X_EQ", "=", "np", ".", "atleast_2d", "(", "self", ".", "env", ".", "X_EQ", ")", "[", "0", ",", ":", "]", ".", "T", "\n", "self", ".", "U_EQ", "=", "np", ".", "atleast_2d", "(", "self", ".", "env", ".", "U_EQ", ")", "[", "0", ",", ":", "]", ".", "T", "\n", "# GP and training parameters.", "\n", "self", ".", "gaussian_process", "=", "None", "\n", "self", ".", "train_iterations", "=", "train_iterations", "\n", "self", ".", "test_data_ratio", "=", "test_data_ratio", "\n", "self", ".", "overwrite_saved_data", "=", "overwrite_saved_data", "\n", "self", ".", "optimization_iterations", "=", "optimization_iterations", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "gp_model_path", "=", "gp_model_path", "\n", "self", ".", "normalize_training_data", "=", "normalize_training_data", "\n", "self", ".", "use_gpu", "=", "use_gpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "sparse_gp", "=", "sparse_gp", "\n", "if", "input_mask", "is", "None", ":", "\n", "            ", "self", ".", "input_mask", "=", "np", ".", "arange", "(", "self", ".", "model", ".", "nx", "+", "self", ".", "model", ".", "nu", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_mask", "=", "input_mask", "\n", "", "if", "target_mask", "is", "None", ":", "\n", "            ", "self", ".", "target_mask", "=", "np", ".", "arange", "(", "self", ".", "model", ".", "nx", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "target_mask", "=", "target_mask", "\n", "", "Bd", "=", "np", ".", "eye", "(", "self", ".", "model", ".", "nx", ")", "\n", "self", ".", "Bd", "=", "Bd", "[", ":", ",", "self", ".", "target_mask", "]", "\n", "self", ".", "gp_approx", "=", "gp_approx", "\n", "self", ".", "n_ind_points", "=", "n_ind_points", "\n", "assert", "inducing_point_selection_method", "in", "[", "'kmeans'", ",", "'random'", "]", ",", "'[Error]: Inducing method choice is incorrect.'", "\n", "self", ".", "inducing_point_selection_method", "=", "inducing_point_selection_method", "\n", "self", ".", "recalc_inducing_points_at_every_step", "=", "recalc_inducing_points_at_every_step", "\n", "self", ".", "online_learning", "=", "online_learning", "\n", "self", ".", "last_obs", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "self", ".", "initial_rollout_std", "=", "initial_rollout_std", "\n", "# MPC params", "\n", "self", ".", "gp_soft_constraints", "=", "self", ".", "soft_constraints_params", "[", "'gp_soft_constraints'", "]", "\n", "self", ".", "gp_soft_constraints_coeff", "=", "self", ".", "soft_constraints_params", "[", "'gp_soft_constraints_coeff'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.setup_prior_dynamics": [[202, 215], ["safe_control_gym.controllers.mpc.mpc_utils.discretize_linear_system", "scipy.linalg.solve_discrete_are", "numpy.dot", "numpy.dot", "numpy.linalg.inv", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.discretize_linear_system"], ["", "def", "setup_prior_dynamics", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the LQR gain used for propograting GP uncertainty from the prior model dynamics.\n\n        \"\"\"", "\n", "# Determine the LQR gain K to propogate the input uncertainty (doing this at each timestep will increase complexity).", "\n", "A", ",", "B", "=", "discretize_linear_system", "(", "self", ".", "prior_ctrl", ".", "dfdx", ",", "self", ".", "prior_ctrl", ".", "dfdu", ",", "self", ".", "dt", ")", "\n", "Q_lqr", "=", "self", ".", "Q", "\n", "R_lqr", "=", "self", ".", "R", "\n", "P", "=", "scipy", ".", "linalg", ".", "solve_discrete_are", "(", "A", ",", "B", ",", "Q_lqr", ",", "R_lqr", ")", "\n", "btp", "=", "np", ".", "dot", "(", "B", ".", "T", ",", "P", ")", "\n", "self", ".", "lqr_gain", "=", "-", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "self", ".", "R", "+", "np", ".", "dot", "(", "btp", ",", "B", ")", ")", ",", "np", ".", "dot", "(", "btp", ",", "A", ")", ")", "\n", "self", ".", "discrete_dfdx", "=", "A", "\n", "self", ".", "discrete_dfdu", "=", "B", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.set_gp_dynamics_func": [[216, 226], ["gp_mpc.GPMPC.setup_prior_dynamics", "scipy.stats.norm.ppf", "gp_mpc.GPMPC.create_sparse_GP_machinery"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.setup_prior_dynamics", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.create_sparse_GP_machinery"], ["", "def", "set_gp_dynamics_func", "(", "self", ",", "n_ind_points", ")", ":", "\n", "        ", "\"\"\"Updates symbolic dynamics.\n\n        With actual control frequency, initialize GP model and add to the combined dynamics.\n\n        \"\"\"", "\n", "self", ".", "setup_prior_dynamics", "(", ")", "\n", "# Compute the probabilistic constraint inverse CDF according to section III.D.b in Hewing 2019.", "\n", "self", ".", "inverse_cdf", "=", "scipy", ".", "stats", ".", "norm", ".", "ppf", "(", "1", "-", "(", "1", "/", "self", ".", "model", ".", "nx", "-", "(", "self", ".", "prob", "+", "1", ")", "/", "(", "2", "*", "self", ".", "model", ".", "nx", ")", ")", ")", "\n", "self", ".", "create_sparse_GP_machinery", "(", "n_ind_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.create_sparse_GP_machinery": [[227, 257], ["gp_mpc.GPMPC.gaussian_process.get_hyperparameters", "lengthscales.squeeze", "signal_var.squeeze", "noise_var.squeeze", "len", "len", "casadi.SX.sym", "casadi.SX.sym", "casadi.SX.sym", "casadi.SX.sym", "casadi.SX.sym", "casadi.Function", "casadi.SX.zeros", "range", "casadi.Function", "casadi.SX.zeros", "range", "casadi.Function", "casadi.Function.", "casadi.Function.", "safe_control_gym.controllers.mpc.gp_utils.covSEard"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.get_hyperparameters", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.covSEard"], ["", "def", "create_sparse_GP_machinery", "(", "self", ",", "n_ind_points", ")", ":", "\n", "        ", "\"\"\"This setups the gaussian process approximations for FITC formulation.\n\n        \"\"\"", "\n", "lengthscales", ",", "signal_var", ",", "noise_var", ",", "gp_K_plus_noise", "=", "self", ".", "gaussian_process", ".", "get_hyperparameters", "(", "as_numpy", "=", "True", ")", "\n", "self", ".", "length_scales", "=", "lengthscales", ".", "squeeze", "(", ")", "\n", "self", ".", "signal_var", "=", "signal_var", ".", "squeeze", "(", ")", "\n", "self", ".", "noise_var", "=", "noise_var", ".", "squeeze", "(", ")", "\n", "self", ".", "gp_K_plus_noise", "=", "gp_K_plus_noise", "\n", "Nx", "=", "len", "(", "self", ".", "input_mask", ")", "\n", "Ny", "=", "len", "(", "self", ".", "target_mask", ")", "\n", "N", "=", "self", ".", "gaussian_process", ".", "n_training_samples", "\n", "# Create CasADI function for computing the kernel K_z_zind with parameters for z, z_ind, length scales and signal variance.", "\n", "# We need the CasADI version of this so that it can by symbolically differentiated in in the MPC optimization.", "\n", "z1", "=", "cs", ".", "SX", ".", "sym", "(", "'z1'", ",", "Nx", ")", "\n", "z2", "=", "cs", ".", "SX", ".", "sym", "(", "'z2'", ",", "Nx", ")", "\n", "ell_s", "=", "cs", ".", "SX", ".", "sym", "(", "'ell'", ",", "Nx", ")", "\n", "sf2_s", "=", "cs", ".", "SX", ".", "sym", "(", "'sf2'", ")", "\n", "z_ind", "=", "cs", ".", "SX", ".", "sym", "(", "'z_ind'", ",", "n_ind_points", ",", "Nx", ")", "\n", "covSE", "=", "cs", ".", "Function", "(", "'covSE'", ",", "[", "z1", ",", "z2", ",", "ell_s", ",", "sf2_s", "]", ",", "\n", "[", "covSEard", "(", "z1", ",", "z2", ",", "ell_s", ",", "sf2_s", ")", "]", ")", "\n", "ks", "=", "cs", ".", "SX", ".", "zeros", "(", "1", ",", "n_ind_points", ")", "\n", "for", "i", "in", "range", "(", "n_ind_points", ")", ":", "\n", "            ", "ks", "[", "i", "]", "=", "covSE", "(", "z1", ",", "z_ind", "[", "i", ",", ":", "]", ",", "ell_s", ",", "sf2_s", ")", "\n", "", "ks_func", "=", "cs", ".", "Function", "(", "'K_s'", ",", "[", "z1", ",", "z_ind", ",", "ell_s", ",", "sf2_s", "]", ",", "[", "ks", "]", ")", "\n", "K_z_zind", "=", "cs", ".", "SX", ".", "zeros", "(", "Ny", ",", "n_ind_points", ")", "\n", "for", "i", "in", "range", "(", "Ny", ")", ":", "\n", "            ", "K_z_zind", "[", "i", ",", ":", "]", "=", "ks_func", "(", "z1", ",", "z_ind", ",", "self", ".", "length_scales", "[", "i", ",", ":", "]", ",", "self", ".", "signal_var", "[", "i", "]", ")", "\n", "# This will be mulitplied by the mean_post_factor computed at every time step to compute the approximate mean.", "\n", "", "self", ".", "K_z_zind_func", "=", "cs", ".", "Function", "(", "'K_z_zind'", ",", "[", "z1", ",", "z_ind", "]", ",", "[", "K_z_zind", "]", ",", "[", "'z1'", ",", "'z2'", "]", ",", "[", "'K'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.preprocess_training_data": [[258, 282], ["[].toarray", "numpy.hstack", "gp_mpc.GPMPC.prior_dynamics_func"], "methods", ["None"], ["", "def", "preprocess_training_data", "(", "self", ",", "\n", "x_seq", ",", "\n", "u_seq", ",", "\n", "x_next_seq", "\n", ")", ":", "\n", "        ", "\"\"\"Converts trajectory data for GP trianing.\n        \n        Args:\n            x_seq (list): state sequence of np.array (nx,). \n            u_seq (list): action sequence of np.array (nu,). \n            x_next_seq (list): next state sequence of np.array (nx,). \n            \n        Returns:\n            np.array: inputs for GP training, (N, nx+nu).\n            np.array: targets for GP training, (N, nx).\n\n        \"\"\"", "\n", "# Get the predicted dynamics. This is a linear prior, thus we need to account for the fact that", "\n", "# it is linearized about an eq using self.X_GOAL and self.U_GOAL.", "\n", "x_pred_seq", "=", "self", ".", "prior_dynamics_func", "(", "x0", "=", "x_seq", ".", "T", "-", "self", ".", "prior_ctrl", ".", "X_EQ", "[", ":", ",", "None", "]", ",", "\n", "p", "=", "u_seq", ".", "T", "-", "self", ".", "prior_ctrl", ".", "U_EQ", "[", ":", ",", "None", "]", ")", "[", "'xf'", "]", ".", "toarray", "(", ")", "\n", "targets", "=", "(", "x_next_seq", ".", "T", "-", "(", "x_pred_seq", "+", "self", ".", "prior_ctrl", ".", "X_EQ", "[", ":", ",", "None", "]", ")", ")", ".", "transpose", "(", ")", "# (N, nx).", "\n", "inputs", "=", "np", ".", "hstack", "(", "[", "x_seq", ",", "u_seq", "]", ")", "# (N, nx+nu).", "\n", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.precompute_probabilistic_limits": [[283, 355], ["numpy.zeros", "numpy.zeros", "gp_mpc.GPMPC.results_dict[].append", "gp_mpc.GPMPC.results_dict[].append", "gp_mpc.GPMPC.results_dict[].append", "gp_mpc.GPMPC.results_dict[].append", "state_constraint_set.append", "input_constraint_set.append", "numpy.diag", "range", "enumerate", "print", "print", "print", "print", "numpy.zeros", "numpy.zeros", "numpy.hstack", "enumerate", "enumerate", "NotImplementedError", "NotImplementedError", "numpy.sqrt", "gp_mpc.GPMPC.gaussian_process.predict", "cov_d_tensor.detach().numpy", "gp_mpc.GPMPC.gaussian_process.get_hyperparameters", "NotImplementedError", "numpy.sqrt", "numpy.sqrt", "NotImplementedError", "numpy.absolute", "numpy.diag", "numpy.diag", "numpy.absolute", "numpy.diag", "numpy.absolute", "numpy.diag", "cov_d_tensor.detach", "cov_noise.detach().numpy", "cov_noise.detach"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.predict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.get_hyperparameters"], ["", "def", "precompute_probabilistic_limits", "(", "self", ",", "\n", "print_sets", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"This updates the constraint value limits to account for the uncertainty in the dynamics rollout.\n\n        Args:\n            print_sets (bool): True to print out the sets for debugging purposes.\n\n        \"\"\"", "\n", "nx", ",", "nu", "=", "self", ".", "model", ".", "nx", ",", "self", ".", "model", ".", "nu", "\n", "T", "=", "self", ".", "T", "\n", "state_covariances", "=", "np", ".", "zeros", "(", "(", "self", ".", "T", "+", "1", ",", "nx", ",", "nx", ")", ")", "\n", "input_covariances", "=", "np", ".", "zeros", "(", "(", "self", ".", "T", ",", "nu", ",", "nu", ")", ")", "\n", "# Initilize lists for the tightening of each constraint.", "\n", "state_constraint_set", "=", "[", "]", "\n", "for", "state_constraint", "in", "self", ".", "constraints", ".", "state_constraints", ":", "\n", "            ", "state_constraint_set", ".", "append", "(", "np", ".", "zeros", "(", "(", "state_constraint", ".", "num_constraints", ",", "T", "+", "1", ")", ")", ")", "\n", "", "input_constraint_set", "=", "[", "]", "\n", "for", "input_constraint", "in", "self", ".", "constraints", ".", "input_constraints", ":", "\n", "            ", "input_constraint_set", ".", "append", "(", "np", ".", "zeros", "(", "(", "input_constraint", ".", "num_constraints", ",", "T", ")", ")", ")", "\n", "", "if", "self", ".", "x_prev", "is", "not", "None", "and", "self", ".", "u_prev", "is", "not", "None", ":", "\n", "#cov_x = np.zeros((nx, nx))", "\n", "            ", "cov_x", "=", "np", ".", "diag", "(", "[", "self", ".", "initial_rollout_std", "**", "2", "]", "*", "nx", ")", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "                ", "state_covariances", "[", "i", "]", "=", "cov_x", "\n", "cov_u", "=", "self", ".", "lqr_gain", "@", "cov_x", "@", "self", ".", "lqr_gain", ".", "T", "\n", "input_covariances", "[", "i", "]", "=", "cov_u", "\n", "cov_xu", "=", "cov_x", "@", "self", ".", "lqr_gain", ".", "T", "\n", "z", "=", "np", ".", "hstack", "(", "(", "self", ".", "x_prev", "[", ":", ",", "i", "]", ",", "self", ".", "u_prev", "[", ":", ",", "i", "]", ")", ")", "\n", "if", "self", ".", "gp_approx", "==", "'taylor'", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Taylor GP approximation is currently not working.\"", ")", "\n", "", "elif", "self", ".", "gp_approx", "==", "'mean_eq'", ":", "\n", "                    ", "_", ",", "cov_d_tensor", "=", "self", ".", "gaussian_process", ".", "predict", "(", "z", "[", "None", ",", ":", "]", ",", "return_pred", "=", "False", ")", "\n", "cov_d", "=", "cov_d_tensor", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "# ToDo: Addition of noise here! And do we still need initial_rollout_std", "\n", "_", ",", "_", ",", "cov_noise", ",", "_", "=", "self", ".", "gaussian_process", ".", "get_hyperparameters", "(", ")", "\n", "cov_d", "=", "cov_d", "+", "np", ".", "diag", "(", "cov_noise", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'gp_approx method is incorrect or not implemented'", ")", "\n", "# Loop through input constraints and tighten by the required ammount.", "\n", "", "for", "ui", ",", "input_constraint", "in", "enumerate", "(", "self", ".", "constraints", ".", "input_constraints", ")", ":", "\n", "                    ", "input_constraint_set", "[", "ui", "]", "[", ":", ",", "i", "]", "=", "-", "1", "*", "self", ".", "inverse_cdf", "*", "np", ".", "absolute", "(", "input_constraint", ".", "A", ")", "@", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "cov_u", ")", ")", "\n", "", "for", "si", ",", "state_constraint", "in", "enumerate", "(", "self", ".", "constraints", ".", "state_constraints", ")", ":", "\n", "                    ", "state_constraint_set", "[", "si", "]", "[", ":", ",", "i", "]", "=", "-", "1", "*", "self", ".", "inverse_cdf", "*", "np", ".", "absolute", "(", "state_constraint", ".", "A", ")", "@", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "cov_x", ")", ")", "\n", "", "if", "self", ".", "gp_approx", "==", "'taylor'", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Taylor GP rollout not implemented.\"", ")", "\n", "", "elif", "self", ".", "gp_approx", "==", "'mean_eq'", ":", "\n", "# Compute the next step propogated state covariance using mean equivilence.", "\n", "                    ", "cov_x", "=", "self", ".", "discrete_dfdx", "@", "cov_x", "@", "self", ".", "discrete_dfdx", ".", "T", "+", "self", ".", "discrete_dfdx", "@", "cov_xu", "@", "self", ".", "discrete_dfdu", ".", "T", "+", "self", ".", "discrete_dfdu", "@", "cov_xu", ".", "T", "@", "self", ".", "discrete_dfdx", ".", "T", "+", "self", ".", "discrete_dfdu", "@", "cov_u", "@", "self", ".", "discrete_dfdu", ".", "T", "+", "self", ".", "Bd", "@", "cov_d", "@", "self", ".", "Bd", ".", "T", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'gp_approx method is incorrect or not implemented'", ")", "\n", "# Udate Final covariance.", "\n", "", "", "for", "si", ",", "state_constraint", "in", "enumerate", "(", "self", ".", "constraints", ".", "state_constraints", ")", ":", "\n", "                ", "state_constraint_set", "[", "si", "]", "[", ":", ",", "-", "1", "]", "=", "-", "1", "*", "self", ".", "inverse_cdf", "*", "np", ".", "absolute", "(", "state_constraint", ".", "A", ")", "@", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "cov_x", ")", ")", "\n", "", "state_covariances", "[", "-", "1", "]", "=", "cov_x", "\n", "", "if", "print_sets", ":", "\n", "            ", "print", "(", "\"Probabilistic State Constraint values along Horizon:\"", ")", "\n", "print", "(", "state_constraint_set", ")", "\n", "print", "(", "\"Probabilistic Input Constraint values along Horizon:\"", ")", "\n", "print", "(", "input_constraint_set", ")", "\n", "", "self", ".", "results_dict", "[", "'input_constraint_set'", "]", ".", "append", "(", "input_constraint_set", ")", "\n", "self", ".", "results_dict", "[", "'state_constraint_set'", "]", ".", "append", "(", "state_constraint_set", ")", "\n", "self", ".", "results_dict", "[", "'state_horizon_cov'", "]", ".", "append", "(", "state_covariances", ")", "\n", "self", ".", "results_dict", "[", "'input_horizon_cov'", "]", ".", "append", "(", "input_covariances", ")", "\n", "return", "state_constraint_set", ",", "input_constraint_set", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.precompute_mean_post_factor_all_data": [[356, 370], ["len", "numpy.zeros", "range", "K_z_z.detach().numpy", "K_z_z.detach"], "methods", ["None"], ["", "def", "precompute_mean_post_factor_all_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"If the number of data points is less than the number of inducing points, use all the data\n        as kernel points.\n        \"\"\"", "\n", "dim_gp_outputs", "=", "len", "(", "self", ".", "target_mask", ")", "\n", "n_training_samples", "=", "self", ".", "train_data", "[", "'train_targets'", "]", ".", "shape", "[", "0", "]", "\n", "inputs", "=", "self", ".", "train_data", "[", "'train_inputs'", "]", "\n", "targets", "=", "self", ".", "train_data", "[", "'train_targets'", "]", "\n", "mean_post_factor", "=", "np", ".", "zeros", "(", "(", "dim_gp_outputs", ",", "n_training_samples", ")", ")", "\n", "for", "i", "in", "range", "(", "dim_gp_outputs", ")", ":", "\n", "            ", "K_z_z", "=", "self", ".", "gaussian_process", ".", "K_plus_noise_inv", "[", "i", "]", "\n", "mean_post_factor", "[", "i", "]", "=", "K_z_z", ".", "detach", "(", ")", ".", "numpy", "(", ")", "@", "targets", "[", ":", ",", "self", ".", "target_mask", "[", "i", "]", "]", "\n", "\n", "", "return", "mean_post_factor", ",", "inputs", "[", ":", ",", "self", ".", "input_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.precompute_sparse_gp_values": [[371, 418], ["len", "len", "gp_mpc.GPMPC.gaussian_process.kernel", "gp_mpc.GPMPC.gaussian_process.kernel_inv", "gp_mpc.GPMPC.gaussian_process.kernel", "torch.diagonal", "torch.diag_embed", "torch.pinverse", "torch.zeros", "range", "numpy.hstack", "gp_mpc.GPMPC.env.np_random.choice", "numpy.vstack", "torch.Tensor().double", "torch.Tensor().double", "torch.from_numpy().double", "torch.tensor().double", "torch.linalg.solve", "torch.linalg.solve", "torch.zeros.detach().numpy", "Sigma_inv.detach().numpy", "gp_mpc.GPMPC.detach().numpy", "range", "safe_control_gym.controllers.mpc.gp_utils.kmeans_centriods", "sklearn.metrics.pairwise_distances_argmin_min", "gp_mpc.GPMPC.transpose", "gp_mpc.GPMPC.env.np_random.choice", "ValueError", "torch.Tensor", "torch.Tensor", "torch.from_numpy", "torch.tensor", "gp_mpc.GPMPC.transpose", "torch.from_numpy().double", "torch.zeros.detach", "Sigma_inv.detach", "gp_mpc.GPMPC.detach", "range", "gp_mpc.GPMPC.transpose", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.kernel", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.kernel_inv", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.kernel", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.kmeans_centriods"], ["", "def", "precompute_sparse_gp_values", "(", "self", ",", "n_ind_points", ")", ":", "\n", "        ", "\"\"\"Uses the last MPC solution to precomupte values associated with the FITC GP approximation.\n\n        Args:\n            n_ind_points (int): Number of inducing points.\n        \"\"\"", "\n", "n_data_points", "=", "self", ".", "gaussian_process", ".", "n_training_samples", "\n", "dim_gp_inputs", "=", "len", "(", "self", ".", "input_mask", ")", "\n", "dim_gp_outputs", "=", "len", "(", "self", ".", "target_mask", ")", "\n", "inputs", "=", "self", ".", "train_data", "[", "'train_inputs'", "]", "\n", "targets", "=", "self", ".", "train_data", "[", "'train_targets'", "]", "\n", "# Get the inducing points.", "\n", "if", "False", "and", "self", ".", "x_prev", "is", "not", "None", "and", "self", ".", "u_prev", "is", "not", "None", ":", "\n", "# Use the previous MPC solution as in Hewing 2019.", "\n", "            ", "z_prev", "=", "np", ".", "hstack", "(", "(", "self", ".", "x_prev", "[", ":", ",", ":", "-", "1", "]", ".", "T", ",", "self", ".", "u_prev", ".", "T", ")", ")", "\n", "z_prev", "=", "z_prev", "[", ":", ",", "self", ".", "input_mask", "]", "\n", "inds", "=", "self", ".", "env", ".", "np_random", ".", "choice", "(", "range", "(", "n_data_points", ")", ",", "size", "=", "n_ind_points", "-", "self", ".", "T", ",", "replace", "=", "False", ")", "\n", "#z_ind = self.data_inputs[inds][:, self.input_mask]", "\n", "z_ind", "=", "np", ".", "vstack", "(", "(", "z_prev", ",", "inputs", "[", "inds", "]", "[", ":", ",", "self", ".", "input_mask", "]", ")", ")", "\n", "", "else", ":", "\n", "# If there is no previous solution. Choose T random training set points.", "\n", "            ", "if", "self", ".", "inducing_point_selection_method", "==", "'kmeans'", ":", "\n", "                ", "centroids", "=", "kmeans_centriods", "(", "n_ind_points", ",", "inputs", "[", ":", ",", "self", ".", "input_mask", "]", ",", "rand_state", "=", "self", ".", "seed", ")", "\n", "inds", ",", "dist_mat", "=", "pairwise_distances_argmin_min", "(", "centroids", ",", "inputs", "[", ":", ",", "self", ".", "input_mask", "]", ")", "\n", "z_ind", "=", "inputs", "[", "inds", "]", "[", ":", ",", "self", ".", "input_mask", "]", "\n", "", "elif", "self", ".", "inducing_point_selection_method", "==", "'random'", ":", "\n", "                ", "inds", "=", "self", ".", "env", ".", "np_random", ".", "choice", "(", "range", "(", "n_data_points", ")", ",", "size", "=", "n_ind_points", ",", "replace", "=", "False", ")", "\n", "z_ind", "=", "inputs", "[", "inds", "]", "[", ":", ",", "self", ".", "input_mask", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"[Error]: gp_mpc.precompute_sparse_gp_values: Only 'kmeans' or 'random' allowed.\"", ")", "\n", "", "", "K_zind_zind", "=", "self", ".", "gaussian_process", ".", "kernel", "(", "torch", ".", "Tensor", "(", "z_ind", ")", ".", "double", "(", ")", ")", "\n", "K_zind_zind_inv", "=", "self", ".", "gaussian_process", ".", "kernel_inv", "(", "torch", ".", "Tensor", "(", "z_ind", ")", ".", "double", "(", ")", ")", "\n", "K_x_zind", "=", "self", ".", "gaussian_process", ".", "kernel", "(", "torch", ".", "from_numpy", "(", "inputs", "[", ":", ",", "self", ".", "input_mask", "]", ")", ".", "double", "(", ")", ",", "\n", "torch", ".", "tensor", "(", "z_ind", ")", ".", "double", "(", ")", ")", "\n", "#Q_X_X = K_x_zind @ K_zind_zind_inv @ K_x_zind.transpose(1,2)", "\n", "Q_X_X", "=", "K_x_zind", "@", "torch", ".", "linalg", ".", "solve", "(", "K_zind_zind", ",", "K_x_zind", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "Gamma", "=", "torch", ".", "diagonal", "(", "self", ".", "gaussian_process", ".", "K_plus_noise", "-", "Q_X_X", ",", "0", ",", "1", ",", "2", ")", "\n", "Gamma_inv", "=", "torch", ".", "diag_embed", "(", "1", "/", "Gamma", ")", "\n", "# Todo: Should inverse be used here instead? pinverse was more stable previsouly.", "\n", "Sigma_inv", "=", "K_zind_zind", "+", "K_x_zind", ".", "transpose", "(", "1", ",", "2", ")", "@", "Gamma_inv", "@", "K_x_zind", "\n", "Sigma", "=", "torch", ".", "pinverse", "(", "K_zind_zind", "+", "K_x_zind", ".", "transpose", "(", "1", ",", "2", ")", "@", "Gamma_inv", "@", "K_x_zind", ")", "\n", "mean_post_factor", "=", "torch", ".", "zeros", "(", "(", "dim_gp_outputs", ",", "n_ind_points", ")", ")", "\n", "for", "i", "in", "range", "(", "dim_gp_outputs", ")", ":", "\n", "            ", "mean_post_factor", "[", "i", "]", "=", "torch", ".", "linalg", ".", "solve", "(", "Sigma_inv", "[", "i", "]", ",", "K_x_zind", "[", "i", "]", ".", "T", "@", "Gamma_inv", "[", "i", "]", "@", "\n", "torch", ".", "from_numpy", "(", "targets", "[", ":", ",", "self", ".", "target_mask", "[", "i", "]", "]", ")", ".", "double", "(", ")", ")", "\n", "#mean_post_factor[i] = Sigma[i] @ K_x_zind[i].T @ Gamma_inv[i] @ torch.from_numpy(targets[:, self.target_mask[i]]).double()", "\n", "", "return", "mean_post_factor", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "Sigma_inv", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "K_zind_zind_inv", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "z_ind", "\n", "#return mean_post_factor.detach().numpy(), Sigma.detach().numpy(), K_zind_zind_inv.detach().numpy(), z_ind", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.setup_gp_optimizer": [[420, 567], ["casadi.Opti", "casadi.Opti.variable", "casadi.Opti.variable", "casadi.Opti.parameter", "casadi.Opti.parameter", "casadi.Opti.parameter", "casadi.Opti.parameter", "range", "casadi.vertcat", "range", "enumerate", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "range", "casadi.Opti.subject_to", "casadi.Opti.minimize", "casadi.Opti.subject_to", "casadi.Opti.solver", "state_constraint_set.append", "input_constraint_set.append", "len", "len", "cost_func", "casadi.Opti.subject_to", "enumerate", "enumerate", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.bounded", "gp_mpc.GPMPC.precompute_mean_post_factor_all_data", "gp_mpc.GPMPC.precompute_sparse_gp_values", "state_slack_list.append", "input_slack_list.append", "casadi.Opti.parameter", "casadi.Opti.parameter", "cost_func", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.bounded", "casadi.Opti.bounded", "casadi.Opti.variable", "casadi.Opti.variable", "numpy.zeros", "numpy.zeros", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "numpy.zeros", "casadi.sum2", "state_constraint", "state_constraint", "gp_mpc.GPMPC.prior_dynamics_func", "gp_mpc.GPMPC.prior_dynamics_func", "gp_mpc.GPMPC.gaussian_process.casadi_predict", "state_constraint", "state_constraint", "input_constraint", "input_constraint", "gp_mpc.GPMPC.K_z_zind_func"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.precompute_mean_post_factor_all_data", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.precompute_sparse_gp_values"], ["", "def", "setup_gp_optimizer", "(", "self", ",", "n_ind_points", ")", ":", "\n", "        ", "\"\"\"Sets up nonlinear optimization problem including cost objective, variable bounds and dynamics constraints.\n\n        Args:\n            n_ind_points (int): Number of inducing points.\n\n        \"\"\"", "\n", "nx", ",", "nu", "=", "self", ".", "model", ".", "nx", ",", "self", ".", "model", ".", "nu", "\n", "T", "=", "self", ".", "T", "\n", "# Define optimizer and variables.", "\n", "opti", "=", "cs", ".", "Opti", "(", ")", "\n", "# States.", "\n", "x_var", "=", "opti", ".", "variable", "(", "nx", ",", "T", "+", "1", ")", "\n", "# Inputs.", "\n", "u_var", "=", "opti", ".", "variable", "(", "nu", ",", "T", ")", "\n", "# Initial state.", "\n", "x_init", "=", "opti", ".", "parameter", "(", "nx", ",", "1", ")", "\n", "# Reference (equilibrium point or trajectory, last step for terminal cost).", "\n", "x_ref", "=", "opti", ".", "parameter", "(", "nx", ",", "T", "+", "1", ")", "\n", "# Add slack variables", "\n", "if", "self", ".", "gp_soft_constraints", ":", "\n", "            ", "state_slack_list", "=", "[", "]", "\n", "for", "state_constraint", "in", "self", ".", "constraints", ".", "state_constraints", ":", "\n", "                ", "state_slack_list", ".", "append", "(", "opti", ".", "variable", "(", "state_constraint", ".", "num_constraints", ",", "T", "+", "1", ")", ")", "\n", "", "input_slack_list", "=", "[", "]", "\n", "for", "input_constraint", "in", "self", ".", "constraints", ".", "input_constraints", ":", "\n", "                ", "input_slack_list", ".", "append", "(", "opti", ".", "variable", "(", "input_constraint", ".", "num_constraints", ",", "T", ")", ")", "\n", "", "soft_con_coeff", "=", "self", ".", "gp_soft_constraints_coeff", "\n", "# Chance constraint limits.", "\n", "", "state_constraint_set", "=", "[", "]", "\n", "for", "state_constraint", "in", "self", ".", "constraints", ".", "state_constraints", ":", "\n", "            ", "state_constraint_set", ".", "append", "(", "opti", ".", "parameter", "(", "state_constraint", ".", "num_constraints", ",", "T", "+", "1", ")", ")", "\n", "", "input_constraint_set", "=", "[", "]", "\n", "for", "input_constraint", "in", "self", ".", "constraints", ".", "input_constraints", ":", "\n", "            ", "input_constraint_set", ".", "append", "(", "opti", ".", "parameter", "(", "input_constraint", ".", "num_constraints", ",", "T", ")", ")", "\n", "# Sparse GP mean postfactor matrix.", "\n", "", "mean_post_factor", "=", "opti", ".", "parameter", "(", "len", "(", "self", ".", "target_mask", ")", ",", "n_ind_points", ")", "\n", "\n", "# Sparse GP inducing points.", "\n", "z_ind", "=", "opti", ".", "parameter", "(", "n_ind_points", ",", "len", "(", "self", ".", "input_mask", ")", ")", "\n", "# Cost (cumulative).", "\n", "cost", "=", "0", "\n", "cost_func", "=", "self", ".", "model", ".", "loss", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "            ", "cost", "+=", "cost_func", "(", "x", "=", "x_var", "[", ":", ",", "i", "]", ",", "\n", "u", "=", "u_var", "[", ":", ",", "i", "]", ",", "\n", "Xr", "=", "x_ref", "[", ":", ",", "i", "]", ",", "\n", "Ur", "=", "np", ".", "zeros", "(", "(", "nu", ",", "1", ")", ")", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "[", "\"l\"", "]", "\n", "# Terminal cost.", "\n", "", "cost", "+=", "cost_func", "(", "x", "=", "x_var", "[", ":", ",", "-", "1", "]", ",", "\n", "u", "=", "np", ".", "zeros", "(", "(", "nu", ",", "1", ")", ")", ",", "\n", "Xr", "=", "x_ref", "[", ":", ",", "-", "1", "]", ",", "\n", "Ur", "=", "np", ".", "zeros", "(", "(", "nu", ",", "1", ")", ")", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "[", "\"l\"", "]", "\n", "z", "=", "cs", ".", "vertcat", "(", "x_var", "[", ":", ",", ":", "-", "1", "]", ",", "u_var", ")", "\n", "z", "=", "z", "[", "self", ".", "input_mask", ",", ":", "]", "\n", "\n", "# Constraints", "\n", "for", "i", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "# Dynamics constraints using the dynamics of the prior and the mean of the GP.", "\n", "# This follows the tractable dynamics formulation in Section III.B in Hewing 2019.", "\n", "# Note that for the GP approximation, we are purposely using elementwise multiplication *.", "\n", "            ", "if", "True", "and", "self", ".", "sparse_gp", ":", "\n", "                ", "next_state", "=", "self", ".", "prior_dynamics_func", "(", "x0", "=", "x_var", "[", ":", ",", "i", "]", "-", "self", ".", "prior_ctrl", ".", "X_EQ", "[", ":", ",", "None", "]", ",", "\n", "p", "=", "u_var", "[", ":", ",", "i", "]", "-", "self", ".", "prior_ctrl", ".", "U_EQ", "[", ":", ",", "None", "]", ")", "[", "'xf'", "]", "+", "self", ".", "prior_ctrl", ".", "X_EQ", "[", ":", ",", "None", "]", "+", "self", ".", "Bd", "@", "cs", ".", "sum2", "(", "self", ".", "K_z_zind_func", "(", "z1", "=", "z", "[", ":", ",", "i", "]", ".", "T", ",", "z2", "=", "z_ind", ")", "[", "'K'", "]", "*", "mean_post_factor", ")", "\n", "", "else", ":", "\n", "# Sparse GP approximation doesn't always work well, thus, use Exact GP regression. This is much slower,", "\n", "# but for unstable systems, make performance much better.", "\n", "                ", "next_state", "=", "self", ".", "prior_dynamics_func", "(", "x0", "=", "x_var", "[", ":", ",", "i", "]", "-", "self", ".", "prior_ctrl", ".", "X_EQ", "[", ":", ",", "None", "]", ",", "\n", "p", "=", "u_var", "[", ":", ",", "i", "]", "-", "self", ".", "prior_ctrl", ".", "U_EQ", "[", ":", ",", "None", "]", ")", "[", "'xf'", "]", "+", "self", ".", "prior_ctrl", ".", "X_EQ", "[", ":", ",", "None", "]", "+", "self", ".", "Bd", "@", "self", ".", "gaussian_process", ".", "casadi_predict", "(", "z", "=", "z", "[", ":", ",", "i", "]", ")", "[", "'mean'", "]", "\n", "", "opti", ".", "subject_to", "(", "x_var", "[", ":", ",", "i", "+", "1", "]", "==", "next_state", ")", "\n", "# Probabilistic state and input constraints according to Hewing 2019 constraint tightening.", "\n", "for", "s_i", ",", "state_constraint", "in", "enumerate", "(", "self", ".", "state_constraints_sym", ")", ":", "\n", "                ", "if", "self", ".", "gp_soft_constraints", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "i", "]", ")", "<=", "state_constraint_set", "[", "s_i", "]", "[", ":", ",", "i", "]", "+", "state_slack_list", "[", "s_i", "]", "[", ":", ",", "i", "]", ")", "\n", "cost", "+=", "soft_con_coeff", "*", "state_slack_list", "[", "s_i", "]", "[", ":", ",", "i", "]", ".", "T", "@", "state_slack_list", "[", "s_i", "]", "[", ":", ",", "i", "]", "\n", "opti", ".", "subject_to", "(", "state_slack_list", "[", "s_i", "]", "[", ":", ",", "i", "]", ">=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "i", "]", ")", "<=", "state_constraint_set", "[", "s_i", "]", "[", ":", ",", "i", "]", ")", "\n", "", "", "for", "u_i", ",", "input_constraint", "in", "enumerate", "(", "self", ".", "input_constraints_sym", ")", ":", "\n", "                ", "if", "self", ".", "gp_soft_constraints", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "input_constraint", "(", "u_var", "[", ":", ",", "i", "]", ")", "<=", "input_constraint_set", "[", "u_i", "]", "[", ":", ",", "i", "]", "+", "input_slack_list", "[", "u_i", "]", "[", ":", ",", "i", "]", ")", "\n", "cost", "+=", "soft_con_coeff", "*", "input_slack_list", "[", "u_i", "]", "[", ":", ",", "i", "]", ".", "T", "@", "input_slack_list", "[", "u_i", "]", "[", ":", ",", "i", "]", "\n", "opti", ".", "subject_to", "(", "input_slack_list", "[", "u_i", "]", "[", ":", ",", "i", "]", ">=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "input_constraint", "(", "u_var", "[", ":", ",", "i", "]", ")", "<=", "input_constraint_set", "[", "u_i", "]", "[", ":", ",", "i", "]", ")", "\n", "\n", "# Final state constraints.", "\n", "", "", "", "for", "s_i", ",", "state_constraint", "in", "enumerate", "(", "self", ".", "state_constraints_sym", ")", ":", "\n", "            ", "if", "self", ".", "gp_soft_constraints", ":", "\n", "                ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "-", "1", "]", ")", "<=", "state_constraint_set", "[", "s_i", "]", "[", ":", ",", "-", "1", "]", "+", "state_slack_list", "[", "s_i", "]", "[", ":", ",", "-", "1", "]", ")", "\n", "cost", "+=", "soft_con_coeff", "*", "state_slack_list", "[", "s_i", "]", "[", ":", ",", "-", "1", "]", ".", "T", "@", "state_slack_list", "[", "s_i", "]", "[", ":", ",", "-", "1", "]", "\n", "opti", ".", "subject_to", "(", "state_slack_list", "[", "s_i", "]", "[", ":", ",", "-", "1", "]", ">=", "0", ")", "\n", "", "else", ":", "\n", "                ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "-", "1", "]", ")", "<=", "state_constraint_set", "[", "s_i", "]", "[", ":", ",", "-", "1", "]", ")", "\n", "\n", "# Bound constraints.", "\n", "", "", "upper_state_bounds", "=", "np", ".", "clip", "(", "self", ".", "prior_ctrl", ".", "env", ".", "observation_space", ".", "high", ",", "None", ",", "10", ")", "\n", "lower_state_bounds", "=", "np", ".", "clip", "(", "self", ".", "prior_ctrl", ".", "env", ".", "observation_space", ".", "low", ",", "-", "10", ",", "None", ")", "\n", "upper_input_bounds", "=", "np", ".", "clip", "(", "self", ".", "prior_ctrl", ".", "env", ".", "action_space", ".", "high", ",", "None", ",", "10", ")", "\n", "lower_input_bounds", "=", "np", ".", "clip", "(", "self", ".", "prior_ctrl", ".", "env", ".", "action_space", ".", "low", ",", "-", "10", ",", "None", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "            ", "opti", ".", "subject_to", "(", "opti", ".", "bounded", "(", "lower_state_bounds", ",", "x_var", "[", ":", ",", "i", "]", ",", "upper_state_bounds", ")", ")", "\n", "opti", ".", "subject_to", "(", "opti", ".", "bounded", "(", "lower_input_bounds", ",", "u_var", "[", ":", ",", "i", "]", ",", "upper_input_bounds", ")", ")", "\n", "", "opti", ".", "subject_to", "(", "opti", ".", "bounded", "(", "lower_state_bounds", ",", "x_var", "[", ":", ",", "-", "1", "]", ",", "upper_state_bounds", ")", ")", "\n", "\n", "opti", ".", "minimize", "(", "cost", ")", "\n", "# Initial condition constraints.", "\n", "opti", ".", "subject_to", "(", "x_var", "[", ":", ",", "0", "]", "==", "x_init", ")", "\n", "# Create solver (IPOPT solver in this version).", "\n", "opts", "=", "{", "\"ipopt.print_level\"", ":", "4", ",", "\n", "\"ipopt.sb\"", ":", "\"yes\"", ",", "\n", "\"ipopt.max_iter\"", ":", "100", ",", "#100,", "\n", "\"print_time\"", ":", "1", ",", "\n", "\"expand\"", ":", "True", ",", "\n", "\"verbose\"", ":", "True", "}", "\n", "opti", ".", "solver", "(", "'ipopt'", ",", "opts", ")", "\n", "self", ".", "opti_dict", "=", "{", "\n", "\"opti\"", ":", "opti", ",", "\n", "\"x_var\"", ":", "x_var", ",", "\n", "\"u_var\"", ":", "u_var", ",", "\n", "\"x_init\"", ":", "x_init", ",", "\n", "\"x_ref\"", ":", "x_ref", ",", "\n", "\"state_constraint_set\"", ":", "state_constraint_set", ",", "\n", "\"input_constraint_set\"", ":", "input_constraint_set", ",", "\n", "\"mean_post_factor\"", ":", "mean_post_factor", ",", "\n", "\"z_ind\"", ":", "z_ind", ",", "\n", "\"cost\"", ":", "cost", ",", "\n", "\"n_ind_points\"", ":", "n_ind_points", "\n", "}", "\n", "\n", "#if False and n_ind_points < self.n_ind_points:", "\n", "if", "not", "self", ".", "sparse_gp", ":", "\n", "            ", "mean_post_factor_val", ",", "z_ind_val", "=", "self", ".", "precompute_mean_post_factor_all_data", "(", ")", "\n", "self", ".", "mean_post_factor_val", "=", "mean_post_factor_val", "\n", "self", ".", "z_ind_val", "=", "z_ind_val", "\n", "", "else", ":", "\n", "            ", "mean_post_factor_val", ",", "Sigma", ",", "K_zind_zind_inv", ",", "z_ind_val", "=", "self", ".", "precompute_sparse_gp_values", "(", "n_ind_points", ")", "\n", "self", ".", "mean_post_factor_val", "=", "mean_post_factor_val", "\n", "#self.Sigma = Sigma", "\n", "#self.K_zind_zind_inv = K_zind_zind_inv", "\n", "self", ".", "z_ind_val", "=", "z_ind_val", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.select_action_with_gp": [[568, 661], ["opti.set_value", "gp_mpc.GPMPC.get_references", "opti.set_value", "gp_mpc.GPMPC.precompute_probabilistic_limits", "range", "range", "opti.set_value", "opti.set_value", "numpy.atleast_2d", "gp_mpc.GPMPC.results_dict[].append", "gp_mpc.GPMPC.results_dict[].append", "gp_mpc.GPMPC.results_dict[].append", "numpy.hstack", "numpy.sum", "print", "numpy.hstack", "gp_mpc.GPMPC.gaussian_process.predict", "print", "gp_mpc.GPMPC.results_dict[].append", "gp_mpc.GPMPC.results_dict[].append", "gp_mpc.GPMPC.results_dict[].append", "len", "opti.set_value", "len", "opti.set_value", "gp_mpc.GPMPC.precompute_sparse_gp_values", "gp_mpc.GPMPC.results_dict[].append", "gp_mpc.GPMPC.prior_ctrl.compute_initial_guess", "opti.set_initial", "opti.set_initial", "opti.solve", "copy.deepcopy", "copy.deepcopy", "[].toarray", "pred.numpy", "numpy.array", "copy.deepcopy", "copy.deepcopy", "opti.set_initial", "opti.set_initial", "opti.solve.value", "opti.solve.value", "opti.stats", "[].toarray", "pred.numpy", "opti.debug.value", "opti.debug.value", "gp_mpc.GPMPC.prior_dynamics_func", "gp_mpc.GPMPC.K_z_zind_func"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.get_references", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.precompute_probabilistic_limits", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.predict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.precompute_sparse_gp_values", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.compute_initial_guess"], ["", "", "def", "select_action_with_gp", "(", "self", ",", "\n", "obs", "\n", ")", ":", "\n", "        ", "\"\"\"Solves nonlinear MPC problem to get next action.\n\n         Args:\n             obs (np.array): current state/observation.\n\n         Returns:\n             np.array: input/action to the task/env.\n\n         \"\"\"", "\n", "opti_dict", "=", "self", ".", "opti_dict", "\n", "opti", "=", "opti_dict", "[", "\"opti\"", "]", "\n", "x_var", "=", "opti_dict", "[", "\"x_var\"", "]", "\n", "u_var", "=", "opti_dict", "[", "\"u_var\"", "]", "\n", "x_init", "=", "opti_dict", "[", "\"x_init\"", "]", "\n", "x_ref", "=", "opti_dict", "[", "\"x_ref\"", "]", "\n", "state_constraint_set", "=", "opti_dict", "[", "\"state_constraint_set\"", "]", "\n", "input_constraint_set", "=", "opti_dict", "[", "\"input_constraint_set\"", "]", "\n", "mean_post_factor", "=", "opti_dict", "[", "\"mean_post_factor\"", "]", "\n", "z_ind", "=", "opti_dict", "[", "\"z_ind\"", "]", "\n", "cost", "=", "opti_dict", "[", "\"cost\"", "]", "\n", "n_ind_points", "=", "opti_dict", "[", "\"n_ind_points\"", "]", "\n", "# Assign the initial state.", "\n", "opti", ".", "set_value", "(", "x_init", ",", "obs", ")", "\n", "# Assign reference trajectory within horizon.", "\n", "goal_states", "=", "self", ".", "get_references", "(", ")", "\n", "opti", ".", "set_value", "(", "x_ref", ",", "goal_states", ")", "\n", "if", "self", ".", "mode", "==", "\"tracking\"", ":", "\n", "            ", "self", ".", "traj_step", "+=", "1", "\n", "# Set the probabilistic state and input constraint set limits.", "\n", "", "state_constraint_set_prev", ",", "input_constraint_set_prev", "=", "self", ".", "precompute_probabilistic_limits", "(", ")", "\n", "\n", "for", "si", "in", "range", "(", "len", "(", "self", ".", "constraints", ".", "state_constraints", ")", ")", ":", "\n", "            ", "opti", ".", "set_value", "(", "state_constraint_set", "[", "si", "]", ",", "state_constraint_set_prev", "[", "si", "]", ")", "\n", "", "for", "ui", "in", "range", "(", "len", "(", "self", ".", "constraints", ".", "input_constraints", ")", ")", ":", "\n", "            ", "opti", ".", "set_value", "(", "input_constraint_set", "[", "ui", "]", ",", "input_constraint_set_prev", "[", "ui", "]", ")", "\n", "", "if", "self", ".", "recalc_inducing_points_at_every_step", ":", "\n", "            ", "mean_post_factor_val", ",", "_", ",", "_", ",", "z_ind_val", "=", "self", ".", "precompute_sparse_gp_values", "(", "n_ind_points", ")", "\n", "self", ".", "results_dict", "[", "'inducing_points'", "]", ".", "append", "(", "z_ind_val", ")", "\n", "", "else", ":", "\n", "            ", "mean_post_factor_val", "=", "self", ".", "mean_post_factor_val", "\n", "z_ind_val", "=", "self", ".", "z_ind_val", "\n", "self", ".", "results_dict", "[", "'inducing_points'", "]", "=", "[", "z_ind_val", "]", "\n", "\n", "", "opti", ".", "set_value", "(", "mean_post_factor", ",", "mean_post_factor_val", ")", "\n", "opti", ".", "set_value", "(", "z_ind", ",", "z_ind_val", ")", "\n", "# Initial guess for the optimization problem.", "\n", "if", "self", ".", "warmstart", "and", "self", ".", "x_prev", "is", "None", "and", "self", ".", "u_prev", "is", "None", ":", "\n", "            ", "x_guess", ",", "u_guess", "=", "self", ".", "prior_ctrl", ".", "compute_initial_guess", "(", "obs", ",", "goal_states", ",", "self", ".", "X_EQ", ",", "self", ".", "U_EQ", ")", "\n", "opti", ".", "set_initial", "(", "x_var", ",", "x_guess", ")", "\n", "opti", ".", "set_initial", "(", "u_var", ",", "u_guess", ")", "# Initial guess for optimization problem.", "\n", "", "elif", "self", ".", "warmstart", "and", "self", ".", "x_prev", "is", "not", "None", "and", "self", ".", "u_prev", "is", "not", "None", ":", "\n", "# shift previous solutions by 1 step", "\n", "            ", "x_guess", "=", "deepcopy", "(", "self", ".", "x_prev", ")", "\n", "u_guess", "=", "deepcopy", "(", "self", ".", "u_prev", ")", "\n", "x_guess", "[", ":", ",", ":", "-", "1", "]", "=", "x_guess", "[", ":", ",", "1", ":", "]", "\n", "u_guess", "[", ":", "-", "1", "]", "=", "u_guess", "[", "1", ":", "]", "\n", "opti", ".", "set_initial", "(", "x_var", ",", "x_guess", ")", "\n", "opti", ".", "set_initial", "(", "u_var", ",", "u_guess", ")", "\n", "# Solve the optimization problem.", "\n", "", "try", ":", "\n", "            ", "sol", "=", "opti", ".", "solve", "(", ")", "\n", "x_val", ",", "u_val", "=", "sol", ".", "value", "(", "x_var", ")", ",", "sol", ".", "value", "(", "u_var", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "x_val", ",", "u_val", "=", "opti", ".", "debug", ".", "value", "(", "x_var", ")", ",", "opti", ".", "debug", ".", "value", "(", "u_var", ")", "\n", "", "u_val", "=", "np", ".", "atleast_2d", "(", "u_val", ")", "\n", "self", ".", "x_prev", "=", "x_val", "\n", "self", ".", "u_prev", "=", "u_val", "\n", "self", ".", "results_dict", "[", "'horizon_states'", "]", ".", "append", "(", "deepcopy", "(", "self", ".", "x_prev", ")", ")", "\n", "self", ".", "results_dict", "[", "'horizon_inputs'", "]", ".", "append", "(", "deepcopy", "(", "self", ".", "u_prev", ")", ")", "\n", "self", ".", "results_dict", "[", "'t_wall'", "]", ".", "append", "(", "opti", ".", "stats", "(", ")", "[", "'t_wall_total'", "]", ")", "\n", "zi", "=", "np", ".", "hstack", "(", "(", "x_val", "[", ":", ",", "0", "]", ",", "u_val", "[", ":", ",", "0", "]", ")", ")", "\n", "zi", "=", "zi", "[", "self", ".", "input_mask", "]", "\n", "gp_contribution", "=", "np", ".", "sum", "(", "self", ".", "K_z_zind_func", "(", "z1", "=", "zi", ",", "z2", "=", "z_ind_val", ")", "[", "'K'", "]", ".", "toarray", "(", ")", "*", "mean_post_factor_val", ",", "axis", "=", "1", ")", "\n", "print", "(", "\"GP Mean eq Contribution: %s\"", "%", "gp_contribution", ")", "\n", "zi", "=", "np", ".", "hstack", "(", "(", "x_val", "[", ":", ",", "0", "]", ",", "u_val", "[", ":", ",", "0", "]", ")", ")", "\n", "pred", ",", "_", ",", "_", "=", "self", ".", "gaussian_process", ".", "predict", "(", "zi", "[", "None", ",", ":", "]", ")", "\n", "print", "(", "\"True GP value: %s\"", "%", "pred", ".", "numpy", "(", ")", ")", "\n", "lin_pred", "=", "self", ".", "prior_dynamics_func", "(", "x0", "=", "x_val", "[", ":", ",", "0", "]", "-", "self", ".", "prior_ctrl", ".", "X_EQ", ",", "\n", "p", "=", "u_val", "[", ":", ",", "0", "]", "-", "self", ".", "prior_ctrl", ".", "U_EQ", ")", "[", "'xf'", "]", ".", "toarray", "(", ")", "+", "self", ".", "prior_ctrl", ".", "X_EQ", "[", ":", ",", "None", "]", "\n", "self", ".", "results_dict", "[", "'linear_pred'", "]", ".", "append", "(", "lin_pred", ")", "\n", "self", ".", "results_dict", "[", "'gp_mean_eq_pred'", "]", ".", "append", "(", "gp_contribution", ")", "\n", "self", ".", "results_dict", "[", "'gp_pred'", "]", ".", "append", "(", "pred", ".", "numpy", "(", ")", ")", "\n", "# Take the first one from solved action sequence.", "\n", "if", "u_val", ".", "ndim", ">", "1", ":", "\n", "            ", "action", "=", "u_val", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "action", "=", "np", ".", "array", "(", "[", "u_val", "[", "0", "]", "]", ")", "\n", "", "self", ".", "prev_action", "=", "action", ",", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.learn": [[662, 827], ["gp_mpc.GPMPC.prior_ctrl.remove_constraints", "gp_mpc.GPMPC.reset", "torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().double", "gpytorch.likelihoods.GaussianLikelihood().double", "safe_control_gym.controllers.mpc.gp_utils.GaussianProcessCollection", "gp_mpc.GPMPC.reset", "gp_mpc.GPMPC.prior_ctrl.add_constraints", "gp_mpc.GPMPC.prior_ctrl.reset", "numpy.zeros", "numpy.zeros", "skopt.sampler.Lhs", "int", "skopt.sampler.Lhs.generate", "skopt.sampler.Lhs.generate", "numpy.array", "gp_mpc.GPMPC.env.np_random.randint", "range", "numpy.vstack", "numpy.vstack", "sklearn.model_selection.train_test_split", "list", "list", "len", "gp_mpc.GPMPC.gaussian_process.init_with_hyperparam", "gp_mpc.GPMPC.gaussian_process.train", "numpy.array", "numpy.array", "skopt.sampler.Lhs.generate", "numpy.array", "numpy.array", "numpy.vstack", "dict", "gp_mpc.GPMPC.env_func", "gp_mpc.GPMPC.prior_ctrl.run", "gp_mpc.GPMPC.close", "gp_mpc.GPMPC.close", "gp_mpc.GPMPC.preprocess_training_data", "numpy.vstack.append", "numpy.vstack.append", "ValueError", "list", "range", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "gpytorch.likelihoods.GaussianLikelihood", "len", "len", "zip", "numpy.vstack", "numpy.vstack", "range", "range", "gp_mpc.GPMPC.env.INIT_STATE_RAND_INFO.keys", "int", "gpytorch.constraints.GreaterThan"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.remove_constraints", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.add_constraints", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.init_with_hyperparam", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.preprocess_training_data"], ["", "def", "learn", "(", "self", ",", "\n", "input_data", "=", "None", ",", "\n", "target_data", "=", "None", ",", "\n", "gp_model", "=", "None", ",", "\n", "overwrite_saved_data", ":", "bool", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Performs GP training.\n\n        Args:\n            input_data, target_data (optiona, np.array): data to use for training\n            gp_model (str): if not None, this is the path to pretrained models to use instead of training new ones.\n            overwrite_saved_data (bool): Overwrite the input and target data to the already saved data if it exists.\n\n        Returns:\n            training_results (dict): Dictionary of the training results.\n\n        \"\"\"", "\n", "if", "gp_model", "is", "None", ":", "\n", "            ", "gp_model", "=", "self", ".", "gp_model_path", "\n", "", "if", "overwrite_saved_data", "is", "None", ":", "\n", "            ", "overwrite_saved_data", "=", "self", ".", "overwrite_saved_data", "\n", "", "self", ".", "prior_ctrl", ".", "remove_constraints", "(", "self", ".", "prior_ctrl", ".", "additional_constraints", ")", "\n", "self", ".", "reset", "(", ")", "\n", "if", "self", ".", "online_learning", ":", "\n", "            ", "input_data", "=", "np", ".", "zeros", "(", "(", "self", ".", "train_iterations", ",", "len", "(", "self", ".", "input_mask", ")", ")", ")", "\n", "target_data", "=", "np", ".", "zeros", "(", "(", "self", ".", "train_iterations", ",", "len", "(", "self", ".", "target_mask", ")", ")", ")", "\n", "", "if", "input_data", "is", "None", "and", "target_data", "is", "None", ":", "\n", "# If no input data is provided, we will generate self.train_iterations", "\n", "# + (1+self.test_ratio)* self.train_iterations number of training points. This will ensure the specified", "\n", "# number of train iterations are run, and the correct train-test data spilt is achieved.", "\n", "            ", "train_inputs", "=", "[", "]", "\n", "train_targets", "=", "[", "]", "\n", "train_info", "=", "[", "]", "\n", "\n", "############", "\n", "# Use Latin Hypercube Sampling to generate states withing environment bounds.", "\n", "lhs_sampler", "=", "Lhs", "(", "lhs_type", "=", "'classic'", ",", "criterion", "=", "'maximin'", ")", "\n", "#limits = [(self.env.INIT_STATE_RAND_INFO[key].low, self.env.INIT_STATE_RAND_INFO[key].high) for key in", "\n", "#          self.env.INIT_STATE_RAND_INFO]", "\n", "limits", "=", "[", "(", "self", ".", "env", ".", "INIT_STATE_RAND_INFO", "[", "'init_'", "+", "key", "]", "[", "'low'", "]", ",", "self", ".", "env", ".", "INIT_STATE_RAND_INFO", "[", "'init_'", "+", "key", "]", "[", "'high'", "]", ")", "for", "key", "in", "self", ".", "env", ".", "STATE_LABELS", "]", "\n", "# todo: parameterize this if we actually want it.", "\n", "num_eq_samples", "=", "0", "\n", "validation_iterations", "=", "int", "(", "self", ".", "train_iterations", "*", "(", "self", ".", "test_data_ratio", "/", "(", "1", "-", "self", ".", "test_data_ratio", ")", ")", ")", "\n", "samples", "=", "lhs_sampler", ".", "generate", "(", "limits", ",", "\n", "self", ".", "train_iterations", "+", "validation_iterations", "-", "num_eq_samples", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "if", "self", ".", "env", ".", "TASK", "==", "Task", ".", "STABILIZATION", "and", "num_eq_samples", ">", "0", ":", "\n", "# todo: choose if we want eq samples or not.", "\n", "                ", "delta_plus", "=", "np", ".", "array", "(", "[", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.03", ",", "0.3", "]", ")", "\n", "delta_neg", "=", "np", ".", "array", "(", "[", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.03", ",", "0.3", "]", ")", "\n", "eq_limits", "=", "[", "(", "self", ".", "prior_ctrl", ".", "env", ".", "X_GOAL", "[", "eq", "]", "-", "delta_neg", "[", "eq", "]", ",", "self", ".", "prior_ctrl", ".", "env", ".", "X_GOAL", "[", "eq", "]", "+", "delta_plus", "[", "eq", "]", ")", "for", "eq", "in", "range", "(", "self", ".", "model", ".", "nx", ")", "]", "\n", "eq_samples", "=", "lhs_sampler", ".", "generate", "(", "eq_limits", ",", "num_eq_samples", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "#samples = samples.append(eq_samples)", "\n", "init_state_samples", "=", "np", ".", "array", "(", "samples", "+", "eq_samples", ")", "\n", "", "else", ":", "\n", "                ", "init_state_samples", "=", "np", ".", "array", "(", "samples", ")", "\n", "", "input_limits", "=", "np", ".", "vstack", "(", "(", "self", ".", "constraints", ".", "input_constraints", "[", "0", "]", ".", "lower_bounds", ",", "\n", "self", ".", "constraints", ".", "input_constraints", "[", "0", "]", ".", "upper_bounds", ")", ")", ".", "T", "\n", "input_samples", "=", "lhs_sampler", ".", "generate", "(", "input_limits", ",", "\n", "self", ".", "train_iterations", "+", "validation_iterations", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "input_samples", "=", "np", ".", "array", "(", "input_samples", ")", "# not being used currently", "\n", "seeds", "=", "self", ".", "env", ".", "np_random", ".", "randint", "(", "0", ",", "99999", ",", "size", "=", "self", ".", "train_iterations", "+", "validation_iterations", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "train_iterations", "+", "validation_iterations", ")", ":", "\n", "# For random initial state training.", "\n", "#init_state = init_state_samples[i,:]", "\n", "                ", "init_state", "=", "dict", "(", "zip", "(", "self", ".", "env", ".", "INIT_STATE_RAND_INFO", ".", "keys", "(", ")", ",", "init_state_samples", "[", "i", ",", ":", "]", ")", ")", "\n", "# Collect data with prior controller.", "\n", "run_env", "=", "self", ".", "env_func", "(", "init_state", "=", "init_state", ",", "randomized_init", "=", "False", ",", "seed", "=", "int", "(", "seeds", "[", "i", "]", ")", ")", "\n", "episode_results", "=", "self", ".", "prior_ctrl", ".", "run", "(", "env", "=", "run_env", ",", "max_steps", "=", "1", ")", "\n", "run_env", ".", "close", "(", ")", "\n", "x_obs", "=", "episode_results", "[", "'obs'", "]", "[", "-", "3", ":", ",", ":", "]", "\n", "u_seq", "=", "episode_results", "[", "'action'", "]", "[", "-", "1", ":", ",", ":", "]", "\n", "run_env", ".", "close", "(", ")", "\n", "x_seq", "=", "x_obs", "[", ":", "-", "1", ",", ":", "]", "\n", "x_next_seq", "=", "x_obs", "[", "1", ":", ",", ":", "]", "\n", "train_inputs_i", ",", "train_targets_i", "=", "self", ".", "preprocess_training_data", "(", "x_seq", ",", "u_seq", ",", "x_next_seq", ")", "\n", "train_inputs", ".", "append", "(", "train_inputs_i", ")", "\n", "train_targets", ".", "append", "(", "train_targets_i", ")", "\n", "", "train_inputs", "=", "np", ".", "vstack", "(", "train_inputs", ")", "\n", "train_targets", "=", "np", ".", "vstack", "(", "train_targets", ")", "\n", "self", ".", "data_inputs", "=", "train_inputs", "\n", "self", ".", "data_targets", "=", "train_targets", "\n", "", "elif", "input_data", "is", "not", "None", "and", "target_data", "is", "not", "None", ":", "\n", "            ", "train_inputs", "=", "input_data", "\n", "train_targets", "=", "target_data", "\n", "if", "(", "self", ".", "data_inputs", "is", "None", "and", "self", ".", "data_targets", "is", "None", ")", "or", "overwrite_saved_data", ":", "\n", "                ", "self", ".", "data_inputs", "=", "train_inputs", "\n", "self", ".", "data_targets", "=", "train_targets", "\n", "", "else", ":", "\n", "                ", "self", ".", "data_inputs", "=", "np", ".", "vstack", "(", "(", "self", ".", "data_inputs", ",", "train_inputs", ")", ")", "\n", "self", ".", "data_targets", "=", "np", ".", "vstack", "(", "(", "self", ".", "data_targets", ",", "train_targets", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR]: gp_mpc.learn(): Need to provide both targets and inputs.\"", ")", "\n", "\n", "", "total_input_data", "=", "self", ".", "data_inputs", ".", "shape", "[", "0", "]", "\n", "# If validation set is desired.", "\n", "if", "self", ".", "test_data_ratio", ">", "0", "and", "self", ".", "test_data_ratio", "is", "not", "None", ":", "\n", "            ", "train_idx", ",", "test_idx", "=", "train_test_split", "(", "\n", "list", "(", "range", "(", "total_input_data", ")", ")", ",", "\n", "test_size", "=", "self", ".", "test_data_ratio", ",", "\n", "random_state", "=", "self", ".", "seed", "\n", ")", "\n", "\n", "", "else", ":", "\n", "# Otherwise, just copy the training data into the test data.", "\n", "            ", "train_idx", "=", "list", "(", "range", "(", "total_input_data", ")", ")", "\n", "test_idx", "=", "list", "(", "range", "(", "total_input_data", ")", ")", "\n", "\n", "", "train_inputs", "=", "self", ".", "data_inputs", "[", "train_idx", ",", ":", "]", "\n", "train_targets", "=", "self", ".", "data_targets", "[", "train_idx", ",", ":", "]", "\n", "self", ".", "train_data", "=", "{", "'train_inputs'", ":", "train_inputs", ",", "'train_targets'", ":", "train_targets", "}", "\n", "test_inputs", "=", "self", ".", "data_inputs", "[", "test_idx", ",", ":", "]", "\n", "test_targets", "=", "self", ".", "data_targets", "[", "test_idx", ",", ":", "]", "\n", "self", ".", "test_data", "=", "{", "'test_inputs'", ":", "test_inputs", ",", "'test_targets'", ":", "test_targets", "}", "\n", "\n", "train_inputs_tensor", "=", "torch", ".", "Tensor", "(", "train_inputs", ")", ".", "double", "(", ")", "\n", "train_targets_tensor", "=", "torch", ".", "Tensor", "(", "train_targets", ")", ".", "double", "(", ")", "\n", "test_inputs_tensor", "=", "torch", ".", "Tensor", "(", "test_inputs", ")", ".", "double", "(", ")", "\n", "test_targets_tensor", "=", "torch", ".", "Tensor", "(", "test_targets", ")", ".", "double", "(", ")", "\n", "\n", "# Define likelihood.", "\n", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "GaussianLikelihood", "(", "\n", "noise_constraint", "=", "gpytorch", ".", "constraints", ".", "GreaterThan", "(", "1e-6", ")", ",", "\n", ")", ".", "double", "(", ")", "\n", "self", ".", "gaussian_process", "=", "GaussianProcessCollection", "(", "ZeroMeanIndependentGPModel", ",", "\n", "likelihood", ",", "\n", "len", "(", "self", ".", "target_mask", ")", ",", "\n", "input_mask", "=", "self", ".", "input_mask", ",", "\n", "target_mask", "=", "self", ".", "target_mask", ",", "\n", "normalize", "=", "self", ".", "normalize_training_data", "\n", ")", "\n", "if", "gp_model", ":", "\n", "            ", "self", ".", "gaussian_process", ".", "init_with_hyperparam", "(", "train_inputs_tensor", ",", "\n", "train_targets_tensor", ",", "\n", "gp_model", ")", "\n", "", "else", ":", "\n", "# Train the GP.", "\n", "            ", "self", ".", "gaussian_process", ".", "train", "(", "train_inputs_tensor", ",", "\n", "train_targets_tensor", ",", "\n", "test_inputs_tensor", ",", "\n", "test_targets_tensor", ",", "\n", "n_train", "=", "self", ".", "optimization_iterations", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "gpu", "=", "self", ".", "use_gpu", ",", "\n", "dir", "=", "self", ".", "output_dir", ")", "\n", "\n", "", "self", ".", "reset", "(", ")", "\n", "#if self.train_data['train_targets'].shape[0] <= self.n_ind_points:", "\n", "#    n_ind_points = self.train_data['train_targets'].shape[0]", "\n", "#else:", "\n", "#    n_ind_points = self.n_ind_points", "\n", "#self.set_gp_dynamics_func(n_ind_points)", "\n", "#self.setup_gp_optimizer(n_ind_points)", "\n", "self", ".", "prior_ctrl", ".", "add_constraints", "(", "self", ".", "prior_ctrl", ".", "additional_constraints", ")", "\n", "self", ".", "prior_ctrl", ".", "reset", "(", ")", "\n", "# Collect training results.", "\n", "training_results", "=", "{", "}", "\n", "training_results", "[", "'train_targets'", "]", "=", "train_targets", "\n", "training_results", "[", "'train_inputs'", "]", "=", "train_inputs", "\n", "try", ":", "\n", "            ", "training_results", "[", "'info'", "]", "=", "train_info", "\n", "", "except", "UnboundLocalError", ":", "\n", "            ", "training_results", "[", "'info'", "]", "=", "None", "\n", "", "return", "training_results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.select_action": [[828, 853], ["gp_mpc.GPMPC.prior_ctrl.select_action", "time.perf_counter", "gp_mpc.GPMPC.select_action_with_gp", "time.perf_counter", "print", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.select_action", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.select_action_with_gp"], ["", "def", "select_action", "(", "self", ",", "\n", "obs", "\n", ")", ":", "\n", "        ", "\"\"\"Select the action based on the given observation.\n\n        Args:\n            obs (np.array): current observed state.\n\n        Returns:\n            action (np.array): desired policy action.\n\n        \"\"\"", "\n", "if", "self", ".", "gaussian_process", "is", "None", ":", "\n", "            ", "action", "=", "self", ".", "prior_ctrl", ".", "select_action", "(", "obs", ")", "\n", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "last_obs", "is", "not", "None", "and", "self", ".", "last_action", "is", "not", "None", "and", "self", ".", "online_learning", ")", ":", "\n", "                ", "print", "(", "\"[ERROR]: Not yet supported.\"", ")", "\n", "exit", "(", ")", "\n", "", "t1", "=", "time", ".", "perf_counter", "(", ")", "\n", "action", "=", "self", ".", "select_action_with_gp", "(", "obs", ")", "\n", "t2", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"GP SELECT ACTION TIME: %s\"", "%", "(", "t2", "-", "t1", ")", ")", "\n", "self", ".", "last_obs", "=", "obs", "\n", "self", ".", "last_action", "=", "action", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.close": [[854, 860], ["gp_mpc.GPMPC.env_training.close", "gp_mpc.GPMPC.env.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clean up.\n\n        \"\"\"", "\n", "self", ".", "env_training", ".", "close", "(", ")", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.reset_results_dict": [[861, 876], ["super().reset_results_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.reset_results_dict"], ["", "def", "reset_results_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "\"Result the results_dict before running.\"", "\n", "super", "(", ")", ".", "reset_results_dict", "(", ")", "\n", "self", ".", "results_dict", "[", "'input_constraint_set'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'state_constraint_set'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'state_horizon_cov'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'input_horizon_cov'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'gp_mean_eq_pred'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'gp_pred'", "]", "=", "[", "]", "\n", "self", ".", "results_dict", "[", "'linear_pred'", "]", "=", "[", "]", "\n", "if", "self", ".", "sparse_gp", ":", "\n", "            ", "self", ".", "results_dict", "[", "'inducing_points'", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.reset": [[877, 904], ["gp_mpc.GPMPC.prior_ctrl.reset", "gp_mpc.GPMPC.set_gp_dynamics_func", "gp_mpc.GPMPC.setup_gp_optimizer"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.set_gp_dynamics_func", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_mpc.GPMPC.setup_gp_optimizer"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the controller before running.\n\n        \"\"\"", "\n", "# Setup reference input.", "\n", "if", "self", ".", "env", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "self", ".", "mode", "=", "\"stabilization\"", "\n", "self", ".", "x_goal", "=", "self", ".", "env", ".", "X_GOAL", "\n", "", "elif", "self", ".", "env", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "            ", "self", ".", "mode", "=", "\"tracking\"", "\n", "self", ".", "traj", "=", "self", ".", "env", ".", "X_GOAL", ".", "T", "\n", "self", ".", "traj_step", "=", "0", "\n", "# Dynamics model.", "\n", "", "if", "self", ".", "gaussian_process", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "sparse_gp", "and", "self", ".", "train_data", "[", "'train_targets'", "]", ".", "shape", "[", "0", "]", "<=", "self", ".", "n_ind_points", ":", "\n", "                ", "n_ind_points", "=", "self", ".", "train_data", "[", "'train_targets'", "]", ".", "shape", "[", "0", "]", "\n", "", "elif", "self", ".", "sparse_gp", ":", "\n", "                ", "n_ind_points", "=", "self", ".", "n_ind_points", "\n", "", "else", ":", "\n", "                ", "n_ind_points", "=", "self", ".", "train_data", "[", "'train_targets'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "self", ".", "set_gp_dynamics_func", "(", "n_ind_points", ")", "\n", "self", ".", "setup_gp_optimizer", "(", "n_ind_points", ")", "\n", "", "self", ".", "prior_ctrl", ".", "reset", "(", ")", "\n", "# Previously solved states & inputs, useful for warm start.", "\n", "self", ".", "x_prev", "=", "None", "\n", "self", ".", "u_prev", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.linear_mpc.LinearMPC.__init__": [[25, 76], ["locals().items", "safe_control_gym.controllers.mpc.mpc.MPC.__init__", "locals", "numpy.atleast_2d", "numpy.atleast_2d"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env_func", ",", "\n", "horizon", "=", "5", ",", "\n", "q_mpc", "=", "[", "1", "]", ",", "\n", "r_mpc", "=", "[", "1", "]", ",", "\n", "warmstart", "=", "True", ",", "\n", "soft_constraints", "=", "False", ",", "\n", "terminate_run_on_done", "=", "True", ",", "\n", "# runner args", "\n", "# shared/base args", "\n", "output_dir", "=", "\"results/temp\"", ",", "\n", "additional_constraints", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Creates task and controller.\n\n        Args:\n            env_func (Callable): function to instantiate task/environment.\n            horizon (int): mpc planning horizon.\n            q_mpc (list): diagonals of state cost weight.\n            r_mpc (list): diagonals of input/action cost weight.\n            warmstart (bool): if to initialize from previous iteration.\n            soft_constraints (bool): Formulate the constraints as soft constraints.\n            terminate_run_on_done (bool): Terminate the run when the environment returns done or not.\n            output_dir (str): output directory to write logs and results.\n            additional_constraints (list): list of constraints.\n\n        \"\"\"", "\n", "# Store all params/args.", "\n", "for", "k", ",", "v", "in", "locals", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"self\"", "and", "k", "!=", "\"kwargs\"", "and", "\"__\"", "not", "in", "k", ":", "\n", "                ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "\n", "env_func", ",", "\n", "horizon", "=", "horizon", ",", "\n", "q_mpc", "=", "q_mpc", ",", "\n", "r_mpc", "=", "r_mpc", ",", "\n", "warmstart", "=", "warmstart", ",", "\n", "soft_constraints", "=", "soft_constraints", ",", "\n", "terminate_run_on_done", "=", "terminate_run_on_done", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "additional_constraints", "=", "additional_constraints", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "# todo: setup environment equilibrium", "\n", "#self.X_EQ = np.atleast_2d(self.env.X_GOAL)[0,:].T", "\n", "#self.U_EQ = np.atleast_2d(self.env.U_GOAL)[0,:]", "\n", "\n", "self", ".", "X_EQ", "=", "np", ".", "atleast_2d", "(", "self", ".", "env", ".", "X_EQ", ")", "[", "0", ",", ":", "]", ".", "T", "\n", "self", ".", "U_EQ", "=", "np", ".", "atleast_2d", "(", "self", ".", "env", ".", "U_EQ", ")", "[", "0", ",", ":", "]", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.linear_mpc.LinearMPC.set_dynamics_func": [[78, 106], ["linear_mpc.LinearMPC.model.df_func", "dfdxdfdu[].toarray", "dfdxdfdu[].toarray", "casadi.MX.sym", "casadi.MX.sym", "safe_control_gym.controllers.mpc.mpc_utils.discretize_linear_system", "casadi.Function"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.discretize_linear_system"], ["", "def", "set_dynamics_func", "(", "self", ")", ":", "\n", "        ", "\"\"\"Updates symbolic dynamics with actual control frequency.\n\n        \"\"\"", "\n", "# Original version, used in shooting.", "\n", "dfdxdfdu", "=", "self", ".", "model", ".", "df_func", "(", "x", "=", "self", ".", "X_EQ", ",", "u", "=", "self", ".", "U_EQ", ")", "\n", "dfdx", "=", "dfdxdfdu", "[", "'dfdx'", "]", ".", "toarray", "(", ")", "\n", "dfdu", "=", "dfdxdfdu", "[", "'dfdu'", "]", ".", "toarray", "(", ")", "\n", "delta_x", "=", "cs", ".", "MX", ".", "sym", "(", "'delta_x'", ",", "self", ".", "model", ".", "nx", ",", "1", ")", "\n", "delta_u", "=", "cs", ".", "MX", ".", "sym", "(", "'delta_u'", ",", "self", ".", "model", ".", "nu", ",", "1", ")", "\n", "#x_dot_lin_vec = dfdx @ delta_x + dfdu @ delta_u", "\n", "#self.linear_dynamics_func = cs.integrator(", "\n", "#    'linear_discrete_dynamics', self.model.integration_algo,", "\n", "#    {", "\n", "#        'x': delta_x,", "\n", "#        'p': delta_u,", "\n", "#        'ode': x_dot_lin_vec", "\n", "#    }, {'tf': self.dt}", "\n", "#)", "\n", "Ad", ",", "Bd", "=", "discretize_linear_system", "(", "dfdx", ",", "dfdu", ",", "self", ".", "dt", ",", "exact", "=", "True", ")", "\n", "x_dot_lin", "=", "Ad", "@", "delta_x", "+", "Bd", "@", "delta_u", "\n", "self", ".", "linear_dynamics_func", "=", "cs", ".", "Function", "(", "'linear_discrete_dynamics'", ",", "\n", "[", "delta_x", ",", "delta_u", "]", ",", "\n", "[", "x_dot_lin", "]", ",", "\n", "[", "'x0'", ",", "'p'", "]", ",", "\n", "[", "'xf'", "]", ")", "\n", "self", ".", "dfdx", "=", "dfdx", "\n", "self", ".", "dfdu", "=", "dfdu", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.linear_mpc.LinearMPC.compute_initial_guess": [[107, 124], ["linear_mpc.LinearMPC.model.df_func", "dfdxdfdu[].toarray", "dfdxdfdu[].toarray", "safe_control_gym.controllers.mpc.mpc_utils.compute_discrete_lqr_gain_from_cont_linear_system", "numpy.zeros", "numpy.zeros", "range", "[].toarray", "linear_mpc.LinearMPC.linear_dynamics_func"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.compute_discrete_lqr_gain_from_cont_linear_system"], ["", "def", "compute_initial_guess", "(", "self", ",", "init_state", ",", "goal_states", ",", "x_lin", ",", "u_lin", ")", ":", "\n", "        ", "\"\"\"Use LQR to get an initial guess of the \"\"\"", "\n", "dfdxdfdu", "=", "self", ".", "model", ".", "df_func", "(", "x", "=", "x_lin", ",", "u", "=", "u_lin", ")", "\n", "dfdx", "=", "dfdxdfdu", "[", "'dfdx'", "]", ".", "toarray", "(", ")", "\n", "dfdu", "=", "dfdxdfdu", "[", "'dfdu'", "]", ".", "toarray", "(", ")", "\n", "lqr_gain", ",", "Ad", ",", "Bd", "=", "compute_discrete_lqr_gain_from_cont_linear_system", "(", "dfdx", ",", "dfdu", ",", "self", ".", "Q", ",", "self", ".", "R", ",", "self", ".", "dt", ")", "\n", "\n", "x_guess", "=", "np", ".", "zeros", "(", "(", "self", ".", "model", ".", "nx", ",", "self", ".", "T", "+", "1", ")", ")", "\n", "u_guess", "=", "np", ".", "zeros", "(", "(", "self", ".", "model", ".", "nu", ",", "self", ".", "T", ")", ")", "\n", "x_guess", "[", ":", ",", "0", "]", "=", "init_state", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "            ", "u", "=", "lqr_gain", "@", "(", "x_guess", "[", ":", ",", "i", "]", "-", "goal_states", "[", ":", ",", "i", "]", ")", "+", "u_lin", "\n", "u_guess", "[", ":", ",", "i", "]", "=", "u", "\n", "x_guess", "[", ":", ",", "i", "+", "1", ",", "None", "]", "=", "self", ".", "linear_dynamics_func", "(", "x0", "=", "x_guess", "[", ":", ",", "i", "]", ",", "p", "=", "u", ")", "[", "'xf'", "]", ".", "toarray", "(", ")", "\n", "\n", "", "return", "x_guess", ",", "u_guess", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.linear_mpc.LinearMPC.setup_optimizer": [[125, 217], ["casadi.Opti", "casadi.Opti.variable", "casadi.Opti.variable", "casadi.Opti.parameter", "casadi.Opti.parameter", "casadi.Opti.variable", "casadi.Opti.variable", "range", "range", "enumerate", "casadi.Opti.subject_to", "casadi.Opti.minimize", "len", "len", "cost_func", "casadi.Opti.subject_to", "enumerate", "enumerate", "opts.update", "casadi.Opti.solver", "cost_func", "linear_mpc.LinearMPC.linear_dynamics_func", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "opts.update", "casadi.Opti.solver", "print", "exit", "numpy.zeros", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "numpy.zeros", "numpy.zeros", "state_constraint", "state_constraint", "state_constraint", "state_constraint", "input_constraint", "input_constraint"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["", "def", "setup_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets up convex optimization problem.\n\n        Including cost objective, variable bounds and dynamics constraints.\n\n        \"\"\"", "\n", "nx", ",", "nu", "=", "self", ".", "model", ".", "nx", ",", "self", ".", "model", ".", "nu", "\n", "T", "=", "self", ".", "T", "\n", "# Define optimizer and variables.", "\n", "opti", "=", "cs", ".", "Opti", "(", ")", "\n", "# States.", "\n", "x_var", "=", "opti", ".", "variable", "(", "nx", ",", "T", "+", "1", ")", "\n", "# Inputs.", "\n", "u_var", "=", "opti", ".", "variable", "(", "nu", ",", "T", ")", "\n", "# Initial state.", "\n", "x_init", "=", "opti", ".", "parameter", "(", "nx", ",", "1", ")", "\n", "# Reference (equilibrium point or trajectory, last step for terminal cost).", "\n", "x_ref", "=", "opti", ".", "parameter", "(", "nx", ",", "T", "+", "1", ")", "\n", "# Add slack variables", "\n", "state_slack", "=", "opti", ".", "variable", "(", "len", "(", "self", ".", "state_constraints_sym", ")", ")", "\n", "input_slack", "=", "opti", ".", "variable", "(", "len", "(", "self", ".", "input_constraints_sym", ")", ")", "\n", "\n", "# cost (cumulative)", "\n", "cost", "=", "0", "\n", "cost_func", "=", "self", ".", "model", ".", "loss", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "            ", "cost", "+=", "cost_func", "(", "x", "=", "x_var", "[", ":", ",", "i", "]", "+", "self", ".", "X_EQ", "[", ":", ",", "None", "]", ",", "\n", "u", "=", "u_var", "[", ":", ",", "i", "]", "+", "self", ".", "U_EQ", "[", ":", ",", "None", "]", ",", "\n", "Xr", "=", "x_ref", "[", ":", ",", "i", "]", ",", "\n", "Ur", "=", "np", ".", "zeros", "(", "(", "nu", ",", "1", ")", ")", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "[", "\"l\"", "]", "\n", "# Terminal cost.", "\n", "", "cost", "+=", "cost_func", "(", "x", "=", "x_var", "[", ":", ",", "-", "1", "]", "+", "self", ".", "X_EQ", "[", ":", ",", "None", "]", ",", "\n", "u", "=", "np", ".", "zeros", "(", "(", "nu", ",", "1", ")", ")", "+", "self", ".", "U_EQ", "[", ":", ",", "None", "]", ",", "\n", "Xr", "=", "x_ref", "[", ":", ",", "-", "1", "]", ",", "\n", "Ur", "=", "np", ".", "zeros", "(", "(", "nu", ",", "1", ")", ")", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "[", "\"l\"", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "# Dynamics constraints.", "\n", "            ", "next_state", "=", "self", ".", "linear_dynamics_func", "(", "x0", "=", "x_var", "[", ":", ",", "i", "]", ",", "p", "=", "u_var", "[", ":", ",", "i", "]", ")", "[", "'xf'", "]", "\n", "opti", ".", "subject_to", "(", "x_var", "[", ":", ",", "i", "+", "1", "]", "==", "next_state", ")", "\n", "\n", "# State and input constraints", "\n", "soft_con_coeff", "=", "10", "\n", "for", "sc_i", ",", "state_constraint", "in", "enumerate", "(", "self", ".", "state_constraints_sym", ")", ":", "\n", "                ", "if", "self", ".", "soft_constraints", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "i", "]", "+", "self", ".", "X_EQ", ".", "T", ")", "<=", "state_slack", "[", "sc_i", "]", ")", "\n", "cost", "+=", "soft_con_coeff", "*", "state_slack", "[", "sc_i", "]", "**", "2", "\n", "opti", ".", "subject_to", "(", "state_slack", "[", "sc_i", "]", ">=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "i", "]", "+", "self", ".", "X_EQ", ".", "T", ")", "<=", "0", ")", "\n", "\n", "", "", "for", "ic_i", ",", "input_constraint", "in", "enumerate", "(", "self", ".", "input_constraints_sym", ")", ":", "\n", "                ", "if", "self", ".", "soft_constraints", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "input_constraint", "(", "u_var", "[", ":", ",", "i", "]", "+", "self", ".", "U_EQ", ".", "T", ")", "<=", "input_slack", "[", "ic_i", "]", ")", "\n", "cost", "+=", "soft_con_coeff", "*", "input_slack", "[", "ic_i", "]", "**", "2", "\n", "opti", ".", "subject_to", "(", "input_slack", "[", "ic_i", "]", ">=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "input_constraint", "(", "u_var", "[", ":", ",", "i", "]", "+", "self", ".", "U_EQ", ".", "T", ")", "<=", "0", ")", "\n", "\n", "# final state constraints", "\n", "", "", "", "for", "sc_i", ",", "state_constraint", "in", "enumerate", "(", "self", ".", "state_constraints_sym", ")", ":", "\n", "            ", "if", "self", ".", "soft_constraints", ":", "\n", "                ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "-", "1", "]", "+", "self", ".", "X_EQ", ".", "T", ")", "<=", "state_slack", "[", "sc_i", "]", ")", "\n", "cost", "+=", "soft_con_coeff", "*", "state_slack", "[", "sc_i", "]", "**", "2", "\n", "opti", ".", "subject_to", "(", "state_slack", "[", "sc_i", "]", ">=", "0", ")", "\n", "", "else", ":", "\n", "                ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "-", "1", "]", "+", "self", ".", "X_EQ", ".", "T", ")", "<=", "0", ")", "\n", "\n", "# initial condition constraints", "\n", "", "", "opti", ".", "subject_to", "(", "x_var", "[", ":", ",", "0", "]", "==", "x_init", ")", "\n", "opti", ".", "minimize", "(", "cost", ")", "\n", "# create solver (IPOPT solver for now )", "\n", "opts", "=", "{", "\"expand\"", ":", "True", "}", "\n", "if", "platform", "==", "\"linux\"", ":", "\n", "            ", "opts", ".", "update", "(", "{", "\"print_time\"", ":", "1", ",", "\"print_header\"", ":", "0", "}", ")", "\n", "opti", ".", "solver", "(", "'sqpmethod'", ",", "opts", ")", "\n", "", "elif", "platform", "==", "\"darwin\"", ":", "\n", "            ", "opts", ".", "update", "(", "{", "\"ipopt.max_iter\"", ":", "100", "}", ")", "\n", "opti", ".", "solver", "(", "'ipopt'", ",", "opts", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR]: CasADi solver tested on Linux and OSX only.\"", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "opti_dict", "=", "{", "\n", "\"opti\"", ":", "opti", ",", "\n", "\"x_var\"", ":", "x_var", ",", "\n", "\"u_var\"", ":", "u_var", ",", "\n", "\"x_init\"", ":", "x_init", ",", "\n", "\"x_ref\"", ":", "x_ref", ",", "\n", "\"cost\"", ":", "cost", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.linear_mpc.LinearMPC.select_action": [[219, 282], ["opti.set_value", "linear_mpc.LinearMPC.get_references", "opti.set_value", "opti.set_initial", "opti.set_initial", "opti.solve", "linear_mpc.LinearMPC.results_dict[].append", "linear_mpc.LinearMPC.results_dict[].append", "numpy.array", "opti.solve.value", "opti.solve.value", "print", "opti.return_status", "copy.deepcopy", "copy.deepcopy", "print", "numpy.zeros", "opti.debug.value", "opti.debug.value"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.get_references"], ["", "def", "select_action", "(", "self", ",", "\n", "obs", "\n", ")", ":", "\n", "        ", "\"\"\"Solve nonlinear mpc problem to get next action.\n        \n        Args:\n            obs (np.array): current state/observation. \n        \n        Returns:\n            action (np.array): input/action to the task/env.\n\n        \"\"\"", "\n", "nx", ",", "nu", "=", "self", ".", "model", ".", "nx", ",", "self", ".", "model", ".", "nu", "\n", "T", "=", "self", ".", "T", "\n", "opti_dict", "=", "self", ".", "opti_dict", "\n", "opti", "=", "opti_dict", "[", "\"opti\"", "]", "\n", "x_var", "=", "opti_dict", "[", "\"x_var\"", "]", "\n", "u_var", "=", "opti_dict", "[", "\"u_var\"", "]", "\n", "x_init", "=", "opti_dict", "[", "\"x_init\"", "]", "\n", "x_ref", "=", "opti_dict", "[", "\"x_ref\"", "]", "\n", "cost", "=", "opti_dict", "[", "\"cost\"", "]", "\n", "# Assign the initial state.", "\n", "opti", ".", "set_value", "(", "x_init", ",", "obs", "-", "self", ".", "X_EQ", ")", "\n", "# Assign reference trajectory within horizon.", "\n", "goal_states", "=", "self", ".", "get_references", "(", ")", "\n", "opti", ".", "set_value", "(", "x_ref", ",", "goal_states", ")", "\n", "if", "self", ".", "env", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "            ", "self", ".", "traj_step", "+=", "1", "\n", "", "if", "self", ".", "warmstart", "and", "self", ".", "u_prev", "is", "not", "None", "and", "self", ".", "x_prev", "is", "not", "None", ":", "\n", "            ", "opti", ".", "set_initial", "(", "x_var", ",", "self", ".", "x_prev", ")", "\n", "opti", ".", "set_initial", "(", "u_var", ",", "self", ".", "u_prev", ")", "\n", "# Solve the optimization problem.", "\n", "", "try", ":", "\n", "            ", "sol", "=", "opti", ".", "solve", "(", ")", "\n", "x_val", ",", "u_val", "=", "sol", ".", "value", "(", "x_var", ")", ",", "sol", ".", "value", "(", "u_var", ")", "\n", "self", ".", "x_prev", "=", "x_val", "\n", "self", ".", "u_prev", "=", "u_val", "\n", "self", ".", "results_dict", "[", "'horizon_states'", "]", ".", "append", "(", "deepcopy", "(", "self", ".", "x_prev", ")", "+", "self", ".", "X_EQ", "[", ":", ",", "None", "]", ")", "\n", "self", ".", "results_dict", "[", "'horizon_inputs'", "]", ".", "append", "(", "deepcopy", "(", "self", ".", "u_prev", ")", "+", "self", ".", "U_EQ", "[", ":", ",", "None", "]", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "return_status", "=", "opti", ".", "return_status", "(", ")", "\n", "if", "return_status", "==", "'unknown'", ":", "\n", "                ", "self", ".", "terminate_loop", "=", "True", "\n", "u_val", "=", "self", ".", "u_prev", "\n", "if", "u_val", "is", "None", ":", "\n", "                    ", "print", "(", "'[WARN]: MPC Infeasible first step.'", ")", "\n", "u_val", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "model", ".", "nu", ")", ")", "\n", "", "", "elif", "return_status", "==", "'Maximum_Iterations_Exceeded'", ":", "\n", "                ", "self", ".", "terminate_loop", "=", "True", "\n", "u_val", "=", "opti", ".", "debug", ".", "value", "(", "u_var", ")", "\n", "", "elif", "return_status", "==", "'Search_Direction_Becomes_Too_Small'", ":", "\n", "                ", "self", ".", "terminate_loop", "=", "True", "\n", "u_val", "=", "opti", ".", "debug", ".", "value", "(", "u_var", ")", "\n", "\n", "# take first one from solved action sequence", "\n", "", "", "if", "u_val", ".", "ndim", ">", "1", ":", "\n", "            ", "action", "=", "u_val", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "action", "=", "np", ".", "array", "(", "[", "u_val", "[", "0", "]", "]", ")", "\n", "", "action", "+=", "self", ".", "U_EQ", "\n", "self", ".", "prev_action", "=", "action", "\n", "return", "action", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.ZeroMeanIndependentMultitaskGPModel.__init__": [[47, 73], ["super().__init__", "gpytorch.means.ZeroMean", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.RBFKernel", "torch.Size", "torch.Size", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "train_x", ",", "\n", "train_y", ",", "\n", "likelihood", ",", "\n", "nx", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize a multidimensional Gaussian Process model with zero mean function.\n\n        Args:\n            train_x (torch.Tensor): input training data (input_dim X N samples).\n            train_y (torch.Tensor): output training data (output dim x N samples).\n            likelihood (gpytorch.likelihood): Likelihood function (gpytorch.likelihoods.MultitaskGaussianLikelihood).\n            nx (int): dimension of the target output (output dim)\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "self", ".", "n", "=", "nx", "\n", "# For Zero mean function.", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ZeroMean", "(", "\n", "batch_shape", "=", "torch", ".", "Size", "(", "[", "self", ".", "n", "]", ")", ")", "\n", "# For constant mean function.", "\n", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "\n", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", "batch_shape", "=", "torch", ".", "Size", "(", "[", "self", ".", "n", "]", ")", ",", "\n", "ard_num_dims", "=", "train_x", ".", "shape", "[", "1", "]", ")", ",", "\n", "batch_shape", "=", "torch", ".", "Size", "(", "[", "self", ".", "n", "]", ")", ",", "\n", "ard_num_dims", "=", "train_x", ".", "shape", "[", "1", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.ZeroMeanIndependentMultitaskGPModel.forward": [[75, 85], ["gp_utils.ZeroMeanIndependentMultitaskGPModel.mean_module", "gp_utils.ZeroMeanIndependentMultitaskGPModel.covar_module", "gpytorch.distributions.MultitaskMultivariateNormal.from_batch_mvn", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "x", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultitaskMultivariateNormal", ".", "from_batch_mvn", "(", "\n", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.ZeroMeanIndependentGPModel.__init__": [[94, 114], ["super().__init__", "gpytorch.means.ZeroMean", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.RBFKernel"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "train_x", ",", "\n", "train_y", ",", "\n", "likelihood", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize a single dimensional Gaussian Process model with zero mean function.\n\n        Args:\n            train_x (torch.Tensor): input training data (input_dim X N samples).\n            train_y (torch.Tensor): output training data (output dim x N samples).\n            likelihood (gpytorch.likelihood): Likelihood function (gpytorch.likelihoods.GaussianLikelihood).\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "# For Zero mean function.", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ZeroMean", "(", ")", "\n", "# For constant mean function.", "\n", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "\n", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", "ard_num_dims", "=", "train_x", ".", "shape", "[", "1", "]", ")", ",", "\n", "ard_num_dims", "=", "train_x", ".", "shape", "[", "1", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.ZeroMeanIndependentGPModel.forward": [[116, 125], ["gp_utils.ZeroMeanIndependentGPModel.mean_module", "gp_utils.ZeroMeanIndependentGPModel.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "x", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.__init__": [[132, 163], ["range", "gp_utils.GaussianProcessCollection.gp_list.append", "gp_utils.GaussianProcess", "copy.deepcopy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model_type", ",", "\n", "likelihood", ",", "\n", "target_dim", ",", "\n", "input_mask", "=", "None", ",", "\n", "target_mask", "=", "None", ",", "\n", "normalize", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"Creates a single GaussianProcess for each output dimension.\n\n        Args:\n            model_type (gpytorch model class): Model class for the GP (ZeroMeanIndependentGPModel).\n            likelihood (gpytorch.likelihood): likelihood function.\n            target_dim (int): Dimension of the output (how many GPs to make).\n            input_mask (list): Input dimensions to keep. If None, use all input dimensions.\n            target_mask (list): Target dimensions to keep. If None, use all target dimensions.\n            normalize (bool): If True, scale all data between -1 and 1.\n\n        \"\"\"", "\n", "self", ".", "gp_list", "=", "[", "]", "\n", "self", ".", "model_type", "=", "model_type", "\n", "self", ".", "likelihood", "=", "likelihood", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "NORMALIZE", "=", "normalize", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "target_mask", "=", "target_mask", "\n", "for", "i", "in", "range", "(", "target_dim", ")", ":", "\n", "            ", "self", ".", "gp_list", ".", "append", "(", "GaussianProcess", "(", "model_type", ",", "\n", "deepcopy", "(", "likelihood", ")", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "normalize", "=", "normalize", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection._init_properties": [[164, 178], ["None"], "methods", ["None"], ["", "", "def", "_init_properties", "(", "self", ",", "\n", "train_inputs", ",", "\n", "train_targets", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize useful properties.\n\n        Args:\n            train_inputs, train_targets (torch.tensors): Input and target training data.\n\n        \"\"\"", "\n", "target_dimension", "=", "train_targets", ".", "shape", "[", "1", "]", "\n", "self", ".", "input_dimension", "=", "train_inputs", ".", "shape", "[", "1", "]", "\n", "self", ".", "output_dimension", "=", "target_dimension", "\n", "self", ".", "n_training_samples", "=", "train_inputs", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.init_with_hyperparam": [[179, 212], ["gp_utils.GaussianProcessCollection._init_properties", "enumerate", "torch.stack", "torch.stack", "gp_utils.GaussianProcessCollection.make_casadi_predict_func", "os.path.join", "print", "print", "print", "print", "gp.init_with_hyperparam", "gp_K_plus_noise_list.append", "gp_K_plus_noise_inv_list.append", "print", "gp.model.K_plus_noise.detach", "gp.model.K_plus_noise_inv.detach"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection._init_properties", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.make_casadi_predict_func", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.init_with_hyperparam"], ["", "def", "init_with_hyperparam", "(", "self", ",", "\n", "train_inputs", ",", "\n", "train_targets", ",", "\n", "path_to_statedicts", "\n", ")", ":", "\n", "        ", "\"\"\"Load hyperparameters from a state_dict.\n\n        Args:\n            train_inputs, train_targets (torch.tensors): Input and target training data.\n            path_to_statedicts (str): Path to where the state dicts are saved.\n\n        \"\"\"", "\n", "self", ".", "_init_properties", "(", "train_inputs", ",", "train_targets", ")", "\n", "target_dimension", "=", "train_targets", ".", "shape", "[", "1", "]", "\n", "gp_K_plus_noise_list", "=", "[", "]", "\n", "gp_K_plus_noise_inv_list", "=", "[", "]", "\n", "for", "gp_ind", ",", "gp", "in", "enumerate", "(", "self", ".", "gp_list", ")", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "path_to_statedicts", ",", "'best_model_%s.pth'", "%", "self", ".", "target_mask", "[", "gp_ind", "]", ")", "\n", "print", "(", "\"#########################################\"", ")", "\n", "print", "(", "\"#       Loading GP dimension %s         #\"", "%", "self", ".", "target_mask", "[", "gp_ind", "]", ")", "\n", "print", "(", "\"#########################################\"", ")", "\n", "print", "(", "'Path: %s'", "%", "path", ")", "\n", "gp", ".", "init_with_hyperparam", "(", "train_inputs", ",", "\n", "train_targets", "[", ":", ",", "self", ".", "target_mask", "[", "gp_ind", "]", "]", ",", "\n", "path", ")", "\n", "gp_K_plus_noise_list", ".", "append", "(", "gp", ".", "model", ".", "K_plus_noise", ".", "detach", "(", ")", ")", "\n", "gp_K_plus_noise_inv_list", ".", "append", "(", "gp", ".", "model", ".", "K_plus_noise_inv", ".", "detach", "(", ")", ")", "\n", "print", "(", "'Loaded!'", ")", "\n", "", "gp_K_plus_noise", "=", "torch", ".", "stack", "(", "gp_K_plus_noise_list", ")", "\n", "gp_K_plus_noise_inv", "=", "torch", ".", "stack", "(", "gp_K_plus_noise_inv_list", ")", "\n", "self", ".", "K_plus_noise", "=", "gp_K_plus_noise", "\n", "self", ".", "K_plus_noise_inv", "=", "gp_K_plus_noise_inv", "\n", "self", ".", "casadi_predict", "=", "self", ".", "make_casadi_predict_func", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.get_hyperparameters": [[213, 233], ["torch.cat", "torch.Tensor", "torch.Tensor", "lengthscale_list.append", "output_scale_list.append", "noise_list.append", "gp.model.covar_module.base_kernel.lengthscale.detach", "gp.model.covar_module.outputscale.detach", "gp.model.likelihood.noise.detach", "torch.cat.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "gp_utils.GaussianProcessCollection.K_plus_noise.detach().numpy", "gp_utils.GaussianProcessCollection.K_plus_noise.detach"], "methods", ["None"], ["", "def", "get_hyperparameters", "(", "self", ",", "\n", "as_numpy", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"Get the outputscale and lengthscale from the kernel matrices of the GPs.\n\n        \"\"\"", "\n", "lengthscale_list", "=", "[", "]", "\n", "output_scale_list", "=", "[", "]", "\n", "noise_list", "=", "[", "]", "\n", "for", "gp", "in", "self", ".", "gp_list", ":", "\n", "            ", "lengthscale_list", ".", "append", "(", "gp", ".", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "detach", "(", ")", ")", "\n", "output_scale_list", ".", "append", "(", "gp", ".", "model", ".", "covar_module", ".", "outputscale", ".", "detach", "(", ")", ")", "\n", "noise_list", ".", "append", "(", "gp", ".", "model", ".", "likelihood", ".", "noise", ".", "detach", "(", ")", ")", "\n", "", "lengthscale", "=", "torch", ".", "cat", "(", "lengthscale_list", ")", "\n", "outputscale", "=", "torch", ".", "Tensor", "(", "output_scale_list", ")", "\n", "noise", "=", "torch", ".", "Tensor", "(", "noise_list", ")", "\n", "if", "as_numpy", ":", "\n", "            ", "return", "lengthscale", ".", "numpy", "(", ")", ",", "outputscale", ".", "numpy", "(", ")", ",", "noise", ".", "numpy", "(", ")", ",", "self", ".", "K_plus_noise", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "lengthscale", ",", "outputscale", ",", "noise", ",", "self", ".", "K_plus_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.train": [[234, 280], ["gp_utils.GaussianProcessCollection._init_properties", "safe_control_gym.utils.utils.mkdirs", "enumerate", "torch.stack", "torch.stack", "gp_utils.GaussianProcessCollection.make_casadi_predict_func", "print", "print", "print", "print", "print", "gp.train", "gp_utils.GaussianProcessCollection.model_paths.append", "gp_K_plus_noise_list.append", "gp_K_plus_noise_inv_list.append", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection._init_properties", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.mkdirs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.make_casadi_predict_func", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train"], ["", "", "def", "train", "(", "self", ",", "\n", "train_x_raw", ",", "\n", "train_y_raw", ",", "\n", "test_x_raw", ",", "\n", "test_y_raw", ",", "\n", "n_train", "=", "[", "500", "]", ",", "\n", "learning_rate", "=", "[", "0.01", "]", ",", "\n", "gpu", "=", "False", ",", "\n", "dir", "=", "'results'", "\n", ")", ":", "\n", "        ", "\"\"\"Train the GP using Train_x and Train_y.\n\n        Args:\n            train_x: Torch tensor (N samples [rows] by input dim [cols])\n            train_y: Torch tensor (N samples [rows] by target dim [cols])\n\n        \"\"\"", "\n", "self", ".", "_init_properties", "(", "train_x_raw", ",", "train_y_raw", ")", "\n", "self", ".", "model_paths", "=", "[", "]", "\n", "mkdirs", "(", "dir", ")", "\n", "gp_K_plus_noise_inv_list", "=", "[", "]", "\n", "gp_K_plus_noise_list", "=", "[", "]", "\n", "for", "gp_ind", ",", "gp", "in", "enumerate", "(", "self", ".", "gp_list", ")", ":", "\n", "            ", "lr", "=", "learning_rate", "[", "self", ".", "target_mask", "[", "gp_ind", "]", "]", "\n", "n_t", "=", "n_train", "[", "self", ".", "target_mask", "[", "gp_ind", "]", "]", "\n", "print", "(", "\"#########################################\"", ")", "\n", "print", "(", "\"#      Training GP dimension %s         #\"", "%", "self", ".", "target_mask", "[", "gp_ind", "]", ")", "\n", "print", "(", "\"#########################################\"", ")", "\n", "print", "(", "\"Train iterations: %s\"", "%", "n_t", ")", "\n", "print", "(", "\"Learning Rate:: %s\"", "%", "lr", ")", "\n", "gp", ".", "train", "(", "train_x_raw", ",", "\n", "train_y_raw", "[", ":", ",", "self", ".", "target_mask", "[", "gp_ind", "]", "]", ",", "\n", "test_x_raw", ",", "\n", "test_y_raw", "[", ":", ",", "self", ".", "target_mask", "[", "gp_ind", "]", "]", ",", "\n", "n_train", "=", "n_t", ",", "\n", "learning_rate", "=", "lr", ",", "\n", "gpu", "=", "gpu", ",", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'best_model_%s.pth'", "%", "self", ".", "target_mask", "[", "gp_ind", "]", ")", ")", "\n", "self", ".", "model_paths", ".", "append", "(", "dir", ")", "\n", "gp_K_plus_noise_list", ".", "append", "(", "gp", ".", "model", ".", "K_plus_noise", ")", "\n", "gp_K_plus_noise_inv_list", ".", "append", "(", "gp", ".", "model", ".", "K_plus_noise_inv", ")", "\n", "", "gp_K_plus_noise", "=", "torch", ".", "stack", "(", "gp_K_plus_noise_list", ")", "\n", "gp_K_plus_noise_inv", "=", "torch", ".", "stack", "(", "gp_K_plus_noise_inv_list", ")", "\n", "self", ".", "K_plus_noise", "=", "gp_K_plus_noise", "\n", "self", ".", "K_plus_noise_inv", "=", "gp_K_plus_noise_inv", "\n", "self", ".", "casadi_predict", "=", "self", ".", "make_casadi_predict_func", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.predict": [[282, 316], ["torch.tensor", "torch.diag", "means_list.append", "cov_list.append", "torch.cat().squeeze", "gp.predict", "pred_list.append", "gp.predict", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.predict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.predict"], ["", "def", "predict", "(", "self", ",", "\n", "x", ",", "\n", "requires_grad", "=", "False", ",", "\n", "return_pred", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            x : torch.Tensor (N_samples x input DIM).\n\n        Return\n            Predictions\n                mean : torch.tensor (nx X N_samples).\n                lower : torch.tensor (nx X N_samples).\n                upper : torch.tensor (nx X N_samples).\n\n        \"\"\"", "\n", "means_list", "=", "[", "]", "\n", "cov_list", "=", "[", "]", "\n", "pred_list", "=", "[", "]", "\n", "for", "gp", "in", "self", ".", "gp_list", ":", "\n", "            ", "if", "return_pred", ":", "\n", "                ", "mean", ",", "cov", ",", "pred", "=", "gp", ".", "predict", "(", "x", ",", "requires_grad", "=", "requires_grad", ",", "return_pred", "=", "return_pred", ")", "\n", "pred_list", ".", "append", "(", "pred", ")", "\n", "", "else", ":", "\n", "                ", "mean", ",", "cov", "=", "gp", ".", "predict", "(", "x", ",", "requires_grad", "=", "requires_grad", ",", "return_pred", "=", "return_pred", ")", "\n", "", "means_list", ".", "append", "(", "mean", ")", "\n", "cov_list", ".", "append", "(", "cov", ")", "\n", "", "means", "=", "torch", ".", "tensor", "(", "means_list", ")", "\n", "cov", "=", "torch", ".", "diag", "(", "torch", ".", "cat", "(", "cov_list", ")", ".", "squeeze", "(", ")", ")", "\n", "if", "return_pred", ":", "\n", "            ", "return", "means", ",", "cov", ",", "pred_list", "\n", "", "else", ":", "\n", "            ", "return", "means", ",", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.make_casadi_predict_func": [[317, 335], ["len", "len", "casadi.SX.sym", "casadi.SX.zeros", "enumerate", "casadi.Function", "gp.casadi_predict"], "methods", ["None"], ["", "", "def", "make_casadi_predict_func", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Assume train_inputs and train_tergets are already\n        \"\"\"", "\n", "\n", "means_list", "=", "[", "]", "\n", "Nz", "=", "len", "(", "self", ".", "input_mask", ")", "\n", "Ny", "=", "len", "(", "self", ".", "target_mask", ")", "\n", "z", "=", "ca", ".", "SX", ".", "sym", "(", "'z1'", ",", "Nz", ")", "\n", "y", "=", "ca", ".", "SX", ".", "zeros", "(", "Ny", ")", "\n", "for", "gp_ind", ",", "gp", "in", "enumerate", "(", "self", ".", "gp_list", ")", ":", "\n", "            ", "y", "[", "gp_ind", "]", "=", "gp", ".", "casadi_predict", "(", "z", "=", "z", ")", "[", "'mean'", "]", "\n", "", "casadi_predict", "=", "ca", ".", "Function", "(", "'pred'", ",", "\n", "[", "z", "]", ",", "\n", "[", "y", "]", ",", "\n", "[", "'z'", "]", ",", "\n", "[", "'mean'", "]", ")", "\n", "return", "casadi_predict", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.prediction_jacobian": [[338, 345], ["None"], "methods", ["None"], ["", "def", "prediction_jacobian", "(", "self", ",", "\n", "query", "\n", ")", ":", "\n", "        ", "\"\"\"Return Jacobian.\n\n        \"\"\"", "\n", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.plot_trained_gp": [[346, 360], ["enumerate", "gp.plot_trained_gp"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.plot_trained_gp"], ["", "def", "plot_trained_gp", "(", "self", ",", "\n", "inputs", ",", "\n", "targets", ",", "\n", "fig_count", "=", "0", "\n", ")", ":", "\n", "        ", "\"\"\"Plot the trained GP given the input and target data.\n\n        \"\"\"", "\n", "for", "gp_ind", ",", "gp", "in", "enumerate", "(", "self", ".", "gp_list", ")", ":", "\n", "            ", "fig_count", "=", "gp", ".", "plot_trained_gp", "(", "inputs", ",", "\n", "targets", "[", ":", ",", "self", ".", "target_mask", "[", "gp_ind", "]", ",", "None", "]", ",", "\n", "self", ".", "target_mask", "[", "gp_ind", "]", ",", "\n", "fig_count", "=", "fig_count", ")", "\n", "fig_count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection._kernel_list": [[361, 385], ["k_list.append", "gp.model.covar_module"], "methods", ["None"], ["", "", "def", "_kernel_list", "(", "self", ",", "\n", "x1", ",", "\n", "x2", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Evaluate the kernel given vectors x1 and x2.\n\n        Args:\n            x1 (torch.Tensor): First vector.\n            x2 (torch.Tensor): Second vector.\n\n        Returns:\n            list of LazyTensor Kernels.\n\n        \"\"\"", "\n", "if", "x2", "is", "None", ":", "\n", "            ", "x2", "=", "x1", "\n", "# todo: Make normalization at the GPCollection level?", "\n", "#if self.NORMALIZE:", "\n", "#    x1 = torch.from_numpy(self.gp_list[0].scaler.transform(x1.numpy()))", "\n", "#    x2 = torch.from_numpy(self.gp_list[0].scaler.transform(x2.numpy()))", "\n", "", "k_list", "=", "[", "]", "\n", "for", "gp", "in", "self", ".", "gp_list", ":", "\n", "            ", "k_list", ".", "append", "(", "gp", ".", "model", ".", "covar_module", "(", "x1", ",", "x2", ")", ")", "\n", "", "return", "k_list", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.kernel": [[386, 403], ["gp_utils.GaussianProcessCollection._kernel_list", "torch.stack", "k.evaluate"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection._kernel_list"], ["", "def", "kernel", "(", "self", ",", "\n", "x1", ",", "\n", "x2", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Evaluate the kernel given vectors x1 and x2.\n\n        Args:\n            x1 (torch.Tensor): First vector.\n            x2 (torch.Tensor): Second vector.\n\n        Returns:\n            Torch tensor of the non-lazy kernel matrices.\n\n        \"\"\"", "\n", "k_list", "=", "self", ".", "_kernel_list", "(", "x1", ",", "x2", ")", "\n", "non_lazy_tensors", "=", "[", "k", ".", "evaluate", "(", ")", "for", "k", "in", "k_list", "]", "\n", "return", "torch", ".", "stack", "(", "non_lazy_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection.kernel_inv": [[404, 428], ["ValueError", "gp_utils.GaussianProcessCollection._kernel_list", "torch.stack", "k.inv_matmul", "torch.eye().double", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcessCollection._kernel_list"], ["", "def", "kernel_inv", "(", "self", ",", "\n", "x1", ",", "\n", "x2", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Evaluate the inverse kernel given vectors x1 and x2.\n\n        Only works for square kernel.\n\n        Args:\n            x1 (torch.Tensor): First vector.\n            x2 (torch.Tensor): Second vector.\n\n        Returns:\n            Torch tensor of the non-lazy inverse kernel matrices.\n\n        \"\"\"", "\n", "if", "x2", "is", "None", ":", "\n", "            ", "x2", "=", "x1", "\n", "", "assert", "x1", ".", "shape", "==", "x2", ".", "shape", ",", "ValueError", "(", "\"x1 and x2 need to have the same shape.\"", ")", "\n", "k_list", "=", "self", ".", "_kernel_list", "(", "x1", ",", "x2", ")", "\n", "num_of_points", "=", "x1", ".", "shape", "[", "0", "]", "\n", "# Efficient inversion is performed VIA inv_matmul on the laze tensor with Identity.", "\n", "non_lazy_tensors", "=", "[", "k", ".", "inv_matmul", "(", "torch", ".", "eye", "(", "num_of_points", ")", ".", "double", "(", ")", ")", "for", "k", "in", "k_list", "]", "\n", "return", "torch", ".", "stack", "(", "non_lazy_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.__init__": [[434, 456], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "model_type", ",", "\n", "likelihood", ",", "\n", "input_mask", "=", "None", ",", "\n", "target_mask", "=", "None", ",", "\n", "normalize", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize Gaussian Process.\n       \n        Args:\n            model_type (gpytorch model class): Model class for the GP (ZeroMeanIndependentMultitaskGPModel).\n            likelihood (gpytorch.likelihood): likelihood function.\n            normalize (bool): If True, scale all data between -1 and 1. (prototype and not fully operational).\n\n        \"\"\"", "\n", "self", ".", "model_type", "=", "model_type", "\n", "self", ".", "likelihood", "=", "likelihood", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "NORMALIZE", "=", "normalize", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "target_mask", "=", "target_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess._init_model": [[457, 482], ["sklearn.preprocessing.StandardScaler().fit", "torch.from_numpy.numpy", "torch.from_numpy", "gp_utils.GaussianProcess.model_type", "sklearn.preprocessing.StandardScaler", "gp_utils.GaussianProcess.scaler.transform", "torch.from_numpy.numpy"], "methods", ["None"], ["", "def", "_init_model", "(", "self", ",", "\n", "train_inputs", ",", "\n", "train_targets", "\n", ")", ":", "\n", "        ", "\"\"\"Init GP model from train inputs and train_targets.\n\n        \"\"\"", "\n", "if", "train_targets", ".", "ndim", ">", "1", ":", "\n", "            ", "target_dimension", "=", "train_targets", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "target_dimension", "=", "1", "\n", "\n", "# Define normalization scaler.", "\n", "", "self", ".", "scaler", "=", "preprocessing", ".", "StandardScaler", "(", ")", ".", "fit", "(", "train_inputs", ".", "numpy", "(", ")", ")", "\n", "if", "self", ".", "NORMALIZE", ":", "\n", "            ", "train_inputs", "=", "torch", ".", "from_numpy", "(", "self", ".", "scaler", ".", "transform", "(", "train_inputs", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model_type", "(", "train_inputs", ",", "\n", "train_targets", ",", "\n", "self", ".", "likelihood", ")", "\n", "# Extract dimensions for external use.", "\n", "", "self", ".", "input_dimension", "=", "train_inputs", ".", "shape", "[", "1", "]", "\n", "self", ".", "output_dimension", "=", "target_dimension", "\n", "self", ".", "n_training_samples", "=", "train_inputs", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess._compute_GP_covariances": [[484, 496], ["gp_utils.GaussianProcess.model.covar_module", "gp_utils.GaussianProcess.add_diag", "gp_utils.GaussianProcess.add_diag.matmul", "gp_utils.GaussianProcess.add_diag.inv_matmul", "train_x.double", "torch.eye().double", "torch.eye().double", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "_compute_GP_covariances", "(", "self", ",", "\n", "train_x", "\n", ")", ":", "\n", "        ", "\"\"\"Compute K(X,X) + sigma*I and its inverse.\n\n        \"\"\"", "\n", "# Pre-compute inverse covariance plus noise to speed-up computation.", "\n", "K_lazy", "=", "self", ".", "model", ".", "covar_module", "(", "train_x", ".", "double", "(", ")", ")", "\n", "K_lazy_plus_noise", "=", "K_lazy", ".", "add_diag", "(", "self", ".", "model", ".", "likelihood", ".", "noise", ")", "\n", "n_samples", "=", "train_x", ".", "shape", "[", "0", "]", "\n", "self", ".", "model", ".", "K_plus_noise", "=", "K_lazy_plus_noise", ".", "matmul", "(", "torch", ".", "eye", "(", "n_samples", ")", ".", "double", "(", ")", ")", "\n", "self", ".", "model", ".", "K_plus_noise_inv", "=", "K_lazy_plus_noise", ".", "inv_matmul", "(", "torch", ".", "eye", "(", "n_samples", ")", ".", "double", "(", ")", ")", "\n", "#self.model.K_plus_noise_inv_2 = torch.inverse(self.model.K_plus_noise) # Equivalent to above but slower.", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.init_with_hyperparam": [[498, 519], ["torch.device", "torch.load", "gp_utils.GaussianProcess._init_model", "gp_utils.GaussianProcess.model.load_state_dict", "gp_utils.GaussianProcess.model.double", "gp_utils.GaussianProcess._compute_GP_covariances", "gp_utils.GaussianProcess.make_casadi_prediction_func", "torch.from_numpy", "gp_utils.GaussianProcess.scaler.transform", "torch.from_numpy.numpy"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess._init_model", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess._compute_GP_covariances", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.make_casadi_prediction_func"], ["", "def", "init_with_hyperparam", "(", "self", ",", "\n", "train_inputs", ",", "\n", "train_targets", ",", "\n", "path_to_statedict", "\n", ")", ":", "\n", "        ", "\"\"\"Load hyperparameters from a state_dict.\n\n        \"\"\"", "\n", "if", "self", ".", "input_mask", "is", "not", "None", ":", "\n", "            ", "train_inputs", "=", "train_inputs", "[", ":", ",", "self", ".", "input_mask", "]", "\n", "", "if", "self", ".", "target_mask", "is", "not", "None", ":", "\n", "            ", "train_targets", "=", "train_targets", "[", ":", ",", "self", ".", "target_mask", "]", "\n", "", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "path_to_statedict", ",", "map_location", "=", "device", ")", "\n", "self", ".", "_init_model", "(", "train_inputs", ",", "train_targets", ")", "\n", "if", "self", ".", "NORMALIZE", ":", "\n", "            ", "train_inputs", "=", "torch", ".", "from_numpy", "(", "self", ".", "scaler", ".", "transform", "(", "train_inputs", ".", "numpy", "(", ")", ")", ")", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "self", ".", "model", ".", "double", "(", ")", "# needed otherwise loads state_dict as float32", "\n", "self", ".", "_compute_GP_covariances", "(", "train_inputs", ")", "\n", "self", ".", "casadi_predict", "=", "self", ".", "make_casadi_prediction_func", "(", "train_inputs", ",", "train_targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.train": [[520, 613], ["gp_utils.GaussianProcess._init_model", "gp_utils.GaussianProcess.model.double", "gp_utils.GaussianProcess.likelihood.double", "gp_utils.GaussianProcess.model.train", "gp_utils.GaussianProcess.likelihood.train", "torch.optim.Adam", "gpytorch.mlls.ExactMarginalLogLikelihood", "torch.tensor", "print", "print", "print", "gp_utils.GaussianProcess.model.cpu", "gp_utils.GaussianProcess.likelihood.cpu", "train_x.cuda.cuda.cpu", "train_y.cuda.cuda.cpu", "gp_utils.GaussianProcess.model.load_state_dict", "gp_utils.GaussianProcess._compute_GP_covariances", "gp_utils.GaussianProcess.make_casadi_prediction_func", "torch.from_numpy", "torch.from_numpy", "train_x.cuda.cuda.cuda", "train_y.cuda.cuda.cuda", "test_x.cuda.cuda.cuda", "test_y.cuda.cuda.cuda", "gp_utils.GaussianProcess.model.cuda", "gp_utils.GaussianProcess.likelihood.cuda", "gp_utils.GaussianProcess.model.parameters", "gp_utils.GaussianProcess.model.train", "gp_utils.GaussianProcess.likelihood.train", "gp_utils.GaussianProcess.optimizer.zero_grad", "gp_utils.GaussianProcess.model", "torch.tensor.backward", "gp_utils.GaussianProcess.optimizer.step", "torch.load", "gp_utils.GaussianProcess.scaler.transform", "gp_utils.GaussianProcess.scaler.transform", "torch.abs", "torch.no_grad", "gp_utils.GaussianProcess.model.eval", "gp_utils.GaussianProcess.likelihood.eval", "gp_utils.GaussianProcess.model", "gpytorch.mlls.ExactMarginalLogLikelihood.", "print", "gp_utils.GaussianProcess.model.state_dict", "torch.save", "gpytorch.mlls.ExactMarginalLogLikelihood.", "torch.tensor.item", "test_loss.item"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess._init_model", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess._compute_GP_covariances", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.make_casadi_prediction_func", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save"], ["", "def", "train", "(", "self", ",", "\n", "train_input_data", ",", "\n", "train_target_data", ",", "\n", "test_input_data", ",", "\n", "test_target_data", ",", "\n", "n_train", "=", "500", ",", "\n", "learning_rate", "=", "0.01", ",", "\n", "gpu", "=", "False", ",", "\n", "fname", "=", "'best_model.pth'", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Train the GP using Train_x and Train_y.\n\n        Args:\n            train_x: Torch tensor (N samples [rows] by input dim [cols])\n            train_y: Torch tensor (N samples [rows] by target dim [cols])\n\n        \"\"\"", "\n", "train_x_raw", "=", "train_input_data", "\n", "train_y_raw", "=", "train_target_data", "\n", "test_x_raw", "=", "test_input_data", "\n", "test_y_raw", "=", "test_target_data", "\n", "if", "self", ".", "input_mask", "is", "not", "None", ":", "\n", "            ", "train_x_raw", "=", "train_x_raw", "[", ":", ",", "self", ".", "input_mask", "]", "\n", "test_x_raw", "=", "test_x_raw", "[", ":", ",", "self", ".", "input_mask", "]", "\n", "", "if", "self", ".", "target_mask", "is", "not", "None", ":", "\n", "            ", "train_y_raw", "=", "train_y_raw", "[", ":", ",", "self", ".", "target_mask", "]", "\n", "test_y_raw", "=", "test_y_raw", "[", ":", ",", "self", ".", "target_mask", "]", "\n", "", "self", ".", "_init_model", "(", "train_x_raw", ",", "train_y_raw", ")", "\n", "if", "self", ".", "NORMALIZE", ":", "\n", "            ", "train_x", "=", "torch", ".", "from_numpy", "(", "self", ".", "scaler", ".", "transform", "(", "train_x_raw", ")", ")", "\n", "test_x", "=", "torch", ".", "from_numpy", "(", "self", ".", "scaler", ".", "transform", "(", "test_x_raw", ")", ")", "\n", "train_y", "=", "train_y_raw", "\n", "test_y", "=", "test_y_raw", "\n", "", "else", ":", "\n", "            ", "train_x", "=", "train_x_raw", "\n", "train_y", "=", "train_y_raw", "\n", "test_x", "=", "test_x_raw", "\n", "test_y", "=", "test_y_raw", "\n", "", "if", "gpu", ":", "\n", "            ", "train_x", "=", "train_x", ".", "cuda", "(", ")", "\n", "train_y", "=", "train_y", ".", "cuda", "(", ")", "\n", "test_x", "=", "test_x", ".", "cuda", "(", ")", "\n", "test_y", "=", "test_y", ".", "cuda", "(", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "likelihood", "=", "self", ".", "likelihood", ".", "cuda", "(", ")", "\n", "", "self", ".", "model", ".", "double", "(", ")", "\n", "self", ".", "likelihood", ".", "double", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "likelihood", ".", "train", "(", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "mll", "=", "gpytorch", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "self", ".", "likelihood", ",", "self", ".", "model", ")", "\n", "last_loss", "=", "99999999", "\n", "best_loss", "=", "99999999", "\n", "loss", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "i", "=", "0", "\n", "while", "i", "<", "n_train", "and", "torch", ".", "abs", "(", "loss", "-", "last_loss", ")", ">", "1e-2", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "likelihood", ".", "eval", "(", ")", "\n", "test_output", "=", "self", ".", "model", "(", "test_x", ")", "\n", "test_loss", "=", "-", "mll", "(", "test_output", ",", "test_y", ")", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "likelihood", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "train_x", ")", "\n", "loss", "=", "-", "mll", "(", "output", ",", "train_y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'Iter %d/%d - MLL trian Loss: %.3f, Posterior Test Loss: %0.3f'", "%", "(", "i", "+", "1", ",", "n_train", ",", "loss", ".", "item", "(", ")", ",", "test_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "#if test_loss < best_loss:", "\n", "#    best_loss = test_loss", "\n", "#    state_dict = self.model.state_dict()", "\n", "#    torch.save(state_dict, fname)", "\n", "#    best_epoch = i", "\n", "if", "test_loss", "<", "best_loss", ":", "\n", "                ", "best_loss", "=", "test_loss", "\n", "state_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "fname", ")", "\n", "best_epoch", "=", "i", "\n", "\n", "", "i", "+=", "1", "\n", "", "print", "(", "\"Training Complete\"", ")", "\n", "print", "(", "\"Lowest epoch: %s\"", "%", "best_epoch", ")", "\n", "print", "(", "\"Lowest Loss: %s\"", "%", "best_loss", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "cpu", "(", ")", "\n", "self", ".", "likelihood", "=", "self", ".", "likelihood", ".", "cpu", "(", ")", "\n", "train_x", "=", "train_x", ".", "cpu", "(", ")", "\n", "train_y", "=", "train_y", ".", "cpu", "(", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "fname", ")", ")", "\n", "self", ".", "_compute_GP_covariances", "(", "train_x", ")", "\n", "self", ".", "casadi_predict", "=", "self", ".", "make_casadi_prediction_func", "(", "train_x", ",", "train_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.predict": [[614, 652], ["gp_utils.GaussianProcess.model.eval", "gp_utils.GaussianProcess.likelihood.eval", "type", "torch.from_numpy().double", "torch.from_numpy", "gp_utils.GaussianProcess.likelihood", "gp_utils.GaussianProcess.scaler.transform", "gp_utils.GaussianProcess.model", "torch.no_grad", "gpytorch.settings.fast_pred_var", "gpytorch.settings.fast_pred_samples", "gp_utils.GaussianProcess.likelihood", "torch.from_numpy", "gp_utils.GaussianProcess.model"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval"], ["", "def", "predict", "(", "self", ",", "\n", "x", ",", "\n", "requires_grad", "=", "False", ",", "\n", "return_pred", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            x : torch.Tensor (N_samples x input DIM).\n\n        Returns:\n            Predictions\n                mean : torch.tensor (nx X N_samples).\n                lower : torch.tensor (nx X N_samples).\n                upper : torch.tensor (nx X N_samples).\n\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "likelihood", ".", "eval", "(", ")", "\n", "if", "type", "(", "x", ")", "is", "np", ".", "ndarray", ":", "\n", "            ", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "double", "(", ")", "\n", "", "if", "self", ".", "input_mask", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", "self", ".", "input_mask", "]", "\n", "", "if", "self", ".", "NORMALIZE", ":", "\n", "            ", "x", "=", "torch", ".", "from_numpy", "(", "self", ".", "scaler", ".", "transform", "(", "x", ")", ")", "\n", "", "if", "requires_grad", ":", "\n", "            ", "predictions", "=", "self", ".", "likelihood", "(", "self", ".", "model", "(", "x", ")", ")", "\n", "mean", "=", "predictions", ".", "mean", "\n", "cov", "=", "predictions", ".", "covariance_matrix", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ",", "gpytorch", ".", "settings", ".", "fast_pred_var", "(", "state", "=", "True", ")", ",", "gpytorch", ".", "settings", ".", "fast_pred_samples", "(", "state", "=", "True", ")", ":", "\n", "                ", "predictions", "=", "self", ".", "likelihood", "(", "self", ".", "model", "(", "x", ")", ")", "\n", "mean", "=", "predictions", ".", "mean", "\n", "cov", "=", "predictions", ".", "covariance_matrix", "\n", "", "", "if", "return_pred", ":", "\n", "            ", "return", "mean", ",", "cov", ",", "predictions", "\n", "", "else", ":", "\n", "            ", "return", "mean", ",", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.prediction_jacobian": [[654, 661], ["torch.autograd.functional.jacobian", "mean_der.detach().squeeze", "query.double", "gp_utils.GaussianProcess.predict", "mean_der.detach"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.predict"], ["", "", "def", "prediction_jacobian", "(", "self", ",", "\n", "query", "\n", ")", ":", "\n", "        ", "mean_der", ",", "cov_der", "=", "torch", ".", "autograd", ".", "functional", ".", "jacobian", "(", "\n", "lambda", "x", ":", "self", ".", "predict", "(", "x", ",", "requires_grad", "=", "True", ",", "return_pred", "=", "False", ")", ",", "\n", "query", ".", "double", "(", ")", ")", "\n", "return", "mean_der", ".", "detach", "(", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.make_casadi_prediction_func": [[662, 683], ["train_inputs.numpy.numpy.numpy", "train_targets.numpy.numpy.numpy", "gp_utils.GaussianProcess.model.covar_module.base_kernel.lengthscale.detach().numpy", "gp_utils.GaussianProcess.model.covar_module.outputscale.detach().numpy", "len", "casadi.SX.sym", "casadi.Function", "casadi.Function", "gp_utils.GaussianProcess.model.covar_module.base_kernel.lengthscale.detach", "gp_utils.GaussianProcess.model.covar_module.outputscale.detach", "gp_utils.covSEard", "gp_utils.GaussianProcess.model.K_plus_noise_inv.detach().numpy", "casadi.Function.", "gp_utils.GaussianProcess.model.K_plus_noise_inv.detach"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.covSEard"], ["", "def", "make_casadi_prediction_func", "(", "self", ",", "train_inputs", ",", "train_targets", ")", ":", "\n", "        ", "\"\"\"\n        Assumes train_inputs and train_targets are already masked.\n        \"\"\"", "\n", "train_inputs", "=", "train_inputs", ".", "numpy", "(", ")", "\n", "train_targets", "=", "train_targets", ".", "numpy", "(", ")", "\n", "lengthscale", "=", "self", ".", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "output_scale", "=", "self", ".", "model", ".", "covar_module", ".", "outputscale", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "Nx", "=", "len", "(", "self", ".", "input_mask", ")", "\n", "z", "=", "ca", ".", "SX", ".", "sym", "(", "'z'", ",", "Nx", ")", "\n", "K_z_ztrain", "=", "ca", ".", "Function", "(", "'k_z_ztrain'", ",", "\n", "[", "z", "]", ",", "\n", "[", "covSEard", "(", "z", ",", "train_inputs", ".", "T", ",", "lengthscale", ".", "T", ",", "output_scale", ")", "]", ",", "\n", "[", "'z'", "]", ",", "\n", "[", "'K'", "]", ")", "\n", "predict", "=", "ca", ".", "Function", "(", "'pred'", ",", "\n", "[", "z", "]", ",", "\n", "[", "K_z_ztrain", "(", "z", "=", "z", ")", "[", "'K'", "]", "@", "self", ".", "model", ".", "K_plus_noise_inv", ".", "detach", "(", ")", ".", "numpy", "(", ")", "@", "train_targets", "]", ",", "\n", "[", "'z'", "]", ",", "\n", "[", "'mean'", "]", ")", "\n", "return", "predict", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.plot_trained_gp": [[684, 712], ["gp_utils.GaussianProcess.predict", "numpy.arange", "preds.confidence_region", "range", "matplotlib.figure", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.plot", "lower[].detach().numpy", "upper[].detach().numpy", "lower.detach().numpy", "upper.detach().numpy", "lower[].detach", "upper[].detach", "lower.detach", "upper.detach"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.GaussianProcess.predict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_trained_gp", "(", "self", ",", "\n", "inputs", ",", "\n", "targets", ",", "\n", "output_label", ",", "\n", "fig_count", "=", "0", "\n", ")", ":", "\n", "        ", "if", "self", ".", "target_mask", "is", "not", "None", ":", "\n", "            ", "targets", "=", "targets", "[", ":", ",", "self", ".", "target_mask", "]", "\n", "", "means", ",", "covs", ",", "preds", "=", "self", ".", "predict", "(", "inputs", ")", "\n", "t", "=", "np", ".", "arange", "(", "inputs", ".", "shape", "[", "0", "]", ")", "\n", "lower", ",", "upper", "=", "preds", ".", "confidence_region", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "output_dimension", ")", ":", "\n", "            ", "fig_count", "+=", "1", "\n", "plt", ".", "figure", "(", "fig_count", ")", "\n", "if", "lower", ".", "ndim", ">", "1", ":", "\n", "                ", "plt", ".", "fill_between", "(", "t", ",", "lower", "[", ":", ",", "i", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "upper", "[", ":", ",", "i", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "alpha", "=", "0.5", ",", "label", "=", "'95%'", ")", "\n", "plt", ".", "plot", "(", "t", ",", "means", "[", ":", ",", "i", "]", ",", "'r'", ",", "label", "=", "'GP Mean'", ")", "\n", "plt", ".", "plot", "(", "t", ",", "targets", "[", ":", ",", "i", "]", ",", "'*k'", ",", "label", "=", "'Data'", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "fill_between", "(", "t", ",", "lower", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "upper", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "alpha", "=", "0.5", ",", "label", "=", "'95%'", ")", "\n", "plt", ".", "plot", "(", "t", ",", "means", ",", "'r'", ",", "label", "=", "'GP Mean'", ")", "\n", "plt", ".", "plot", "(", "t", ",", "targets", ",", "'*k'", ",", "label", "=", "'Data'", ")", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "'Fitted GP x%s'", "%", "output_label", ")", "\n", "plt", ".", "xlabel", "(", "'Time (s)'", ")", "\n", "plt", ".", "ylabel", "(", "'v'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "return", "fig_count", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.covSEard": [[17, 38], ["casadi.sum1", "casadi.SX.exp"], "function", ["None"], ["def", "covSEard", "(", "x", ",", "\n", "z", ",", "\n", "ell", ",", "\n", "sf2", "\n", ")", ":", "\n", "    ", "\"\"\"GP squared exponential kernel.\n\n    This function is based on the 2018 GP-MPC library by Helge-Andr\u00e9 Lang\u00e5ker\n\n    Args:\n        x (np.array or casadi.MX/SX): First vector.\n        z (np.array or casadi.MX/SX): Second vector.\n        ell (np.array or casadi.MX/SX): Length scales.\n        sf2 (float or casadi.MX/SX): output scale parameter.\n\n    Returns:\n        SE kernel (casadi.MX/SX): SE kernel.\n\n    \"\"\"", "\n", "dist", "=", "ca", ".", "sum1", "(", "(", "x", "-", "z", ")", "**", "2", "/", "ell", "**", "2", ")", "\n", "return", "sf2", "*", "ca", ".", "SX", ".", "exp", "(", "-", ".5", "*", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.gp_utils.kmeans_centriods": [[713, 726], ["sklearn.cluster.KMeans().fit", "sklearn.cluster.KMeans"], "function", ["None"], ["", "", "def", "kmeans_centriods", "(", "n_cent", ",", "data", ",", "rand_state", "=", "0", ")", ":", "\n", "    ", "\"\"\"kmeans clustering. Useful for finding reasonable inducing points.\n\n    Args:\n        n_cent (int): Number of centriods.\n        data (np.array): Data to find the centroids of n_samples X n_features.\n\n    Return:\n        centriods (np.array): Array of centriods (n_cent X n_features).\n\n    \"\"\"", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "n_cent", ",", "random_state", "=", "rand_state", ")", ".", "fit", "(", "data", ")", "\n", "return", "kmeans", ".", "cluster_centers_", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.get_cost_weight_matrix": [[9, 22], ["len", "numpy.diag", "len", "numpy.diag", "Exception"], "function", ["None"], ["def", "get_cost_weight_matrix", "(", "weights", ",", "\n", "dim", "\n", ")", ":", "\n", "    ", "\"\"\"Gets weight matrix from input args.\n\n    \"\"\"", "\n", "if", "len", "(", "weights", ")", "==", "dim", ":", "\n", "        ", "W", "=", "np", ".", "diag", "(", "weights", ")", "\n", "", "elif", "len", "(", "weights", ")", "==", "1", ":", "\n", "        ", "W", "=", "np", ".", "diag", "(", "weights", "*", "dim", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Wrong dimension for cost weights.\"", ")", "\n", "", "return", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.discretize_linear_system": [[24, 57], ["numpy.zeros", "scipy.linalg.expm", "numpy.eye"], "function", ["None"], ["", "def", "discretize_linear_system", "(", "A", ",", "\n", "B", ",", "\n", "dt", ",", "\n", "exact", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Discretize a linear system.\n    \n    dx/dt = A x + B u\n    --> xd[k+1] = Ad xd[k] + Bd ud[k] where xd[k] = x(k*dt)\n\n    Args:\n        A: np.array, system transition matrix.\n        B: np.array, input matrix.\n        dt: scalar, step time interval.\n        exact: bool, if to use exact discretization.\n\n    Returns:\n        Discretized matrices Ad, Bd.\n\n    \"\"\"", "\n", "state_dim", ",", "input_dim", "=", "A", ".", "shape", "[", "1", "]", ",", "B", ".", "shape", "[", "1", "]", "\n", "if", "exact", ":", "\n", "        ", "M", "=", "np", ".", "zeros", "(", "(", "state_dim", "+", "input_dim", ",", "state_dim", "+", "input_dim", ")", ")", "\n", "M", "[", ":", "state_dim", ",", ":", "state_dim", "]", "=", "A", "\n", "M", "[", ":", "state_dim", ",", "state_dim", ":", "]", "=", "B", "\n", "Md", "=", "scipy", ".", "linalg", ".", "expm", "(", "M", "*", "dt", ")", "\n", "Ad", "=", "Md", "[", ":", "state_dim", ",", ":", "state_dim", "]", "\n", "Bd", "=", "Md", "[", ":", "state_dim", ",", "state_dim", ":", "]", "\n", "", "else", ":", "\n", "        ", "I", "=", "np", ".", "eye", "(", "state_dim", ")", "\n", "Ad", "=", "I", "+", "A", "*", "dt", "\n", "Bd", "=", "B", "*", "dt", "\n", "", "return", "Ad", ",", "Bd", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.compute_discrete_lqr_gain_from_cont_linear_system": [[58, 78], ["mpc_utils.discretize_linear_system", "scipy.linalg.solve_discrete_are", "numpy.dot", "numpy.dot", "numpy.linalg.inv", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.discretize_linear_system"], ["", "def", "compute_discrete_lqr_gain_from_cont_linear_system", "(", "dfdx", ",", "dfdu", ",", "Q_lqr", ",", "R_lqr", ",", "dt", ")", ":", "\n", "    ", "\"\"\"Computes the LQR gain used for propograting GP uncertainty from the prior model dynamics.\n\n    Args:\n        dfdx (np.array): CT A matrix\n        dfdu (np.array): CT B matrix\n        Q, R (np.array): Gain matrices\n        dt (float): Time discretization\n\n    Retrun:\n        lqr_gain (np.array): LQR optimal gain, such that (A+BK) is hurwitz\n\n    \"\"\"", "\n", "# Determine the LQR gain K to propogate the input uncertainty (doing this at each timestep will increase complexity).", "\n", "A", ",", "B", "=", "discretize_linear_system", "(", "dfdx", ",", "dfdu", ",", "dt", ")", "\n", "P", "=", "scipy", ".", "linalg", ".", "solve_discrete_are", "(", "A", ",", "B", ",", "Q_lqr", ",", "R_lqr", ")", "\n", "btp", "=", "np", ".", "dot", "(", "B", ".", "T", ",", "P", ")", "\n", "lqr_gain", "=", "-", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "R_lqr", "+", "np", ".", "dot", "(", "btp", ",", "B", ")", ")", ",", "np", ".", "dot", "(", "btp", ",", "A", ")", ")", "\n", "\n", "return", "lqr_gain", ",", "A", ",", "B", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.rk_discrete": [[79, 102], ["casadi.SX.sym", "casadi.SX.sym", "f", "f", "f", "f", "casadi.Function"], "function", ["None"], ["", "def", "rk_discrete", "(", "f", ",", "n", ",", "m", ",", "dt", ")", ":", "\n", "    ", "\"\"\"Runge Kutta discretization for the function.\n\n    Args:\n        f (casadi function): Function to discretize.\n        n (int): state dimensions.\n        m (int): input dimension.\n        dt (float): discretization time.\n\n    Return:\n        x_next (casadi function?):\n    \"\"\"", "\n", "X", "=", "cs", ".", "SX", ".", "sym", "(", "'X'", ",", "n", ")", "\n", "U", "=", "cs", ".", "SX", ".", "sym", "(", "'U'", ",", "m", ")", "\n", "# Runge-Kutta 4 integration", "\n", "k1", "=", "f", "(", "X", ",", "U", ")", "\n", "k2", "=", "f", "(", "X", "+", "dt", "/", "2", "*", "k1", ",", "U", ")", "\n", "k3", "=", "f", "(", "X", "+", "dt", "/", "2", "*", "k2", ",", "U", ")", "\n", "k4", "=", "f", "(", "X", "+", "dt", "*", "k3", ",", "U", ")", "\n", "x_next", "=", "X", "+", "dt", "/", "6", "*", "(", "k1", "+", "2", "*", "k2", "+", "2", "*", "k3", "+", "k4", ")", "\n", "rk_dyn", "=", "cs", ".", "Function", "(", "'rk_f'", ",", "[", "X", ",", "U", "]", ",", "[", "x_next", "]", ",", "[", "'x0'", ",", "'p'", "]", ",", "[", "'xf'", "]", ")", "\n", "\n", "return", "rk_dyn", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.compute_state_rmse": [[103, 110], ["numpy.mean", "numpy.sqrt", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "compute_state_rmse", "(", "state_error", ")", ":", "\n", "    ", "\"\"\"Compute root-mean-square error.\"\"\"", "\n", "mse", "=", "np", ".", "mean", "(", "state_error", "**", "2", ",", "axis", "=", "0", ")", "\n", "state_rmse", "=", "np", ".", "sqrt", "(", "mse", ")", "\n", "state_rmse_scalar", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "mse", ")", ")", "\n", "\n", "return", "state_rmse", ",", "state_rmse_scalar", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.__init__": [[20, 73], ["locals().items", "env_func", "safe_control_gym.controllers.mpc.mpc_utils.get_cost_weight_matrix", "safe_control_gym.controllers.mpc.mpc_utils.get_cost_weight_matrix", "safe_control_gym.envs.constraints.create_constraint_list", "mpc.MPC.reset_constraints", "mpc.MPC.reset_constraints", "locals", "mpc.MPC.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.get_cost_weight_matrix", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.get_cost_weight_matrix", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.create_constraint_list", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.reset_constraints", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.reset_constraints", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env_func", ",", "\n", "horizon", "=", "5", ",", "\n", "q_mpc", "=", "[", "1", "]", ",", "\n", "r_mpc", "=", "[", "1", "]", ",", "\n", "warmstart", "=", "True", ",", "\n", "soft_constraints", "=", "False", ",", "\n", "terminate_run_on_done", "=", "True", ",", "\n", "# runner args", "\n", "# shared/base args", "\n", "output_dir", "=", "\"results/temp\"", ",", "\n", "additional_constraints", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Creates task and controller.\n\n        Args:\n            env_func (Callable): function to instantiate task/environment.\n            horizon (int): mpc planning horizon.\n            q_mpc (list): diagonals of state cost weight.\n            r_mpc (list): diagonals of input/action cost weight.\n            warmstart (bool): if to initialize from previous iteration.\n            soft_constraints (bool): Formulate the constraints as soft constraints.\n            terminate_run_on_done (bool): Terminate the run when the environment returns done or not.\n            output_dir (str): output directory to write logs and results.\n            additional_constraints (list): List of additional constraints\n\n        \"\"\"", "\n", "for", "k", ",", "v", "in", "locals", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"self\"", "and", "k", "!=", "\"kwargs\"", "and", "\"__\"", "not", "in", "k", ":", "\n", "                ", "self", ".", "__dict__", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "# Task.", "\n", "", "", "self", ".", "env", "=", "env_func", "(", ")", "\n", "if", "additional_constraints", "is", "not", "None", ":", "\n", "            ", "additional_ConstraintsList", "=", "create_constraint_list", "(", "additional_constraints", ",", "\n", "GENERAL_CONSTRAINTS", ",", "\n", "self", ".", "env", ")", "\n", "self", ".", "additional_constraints", "=", "additional_ConstraintsList", ".", "constraints", "\n", "self", ".", "reset_constraints", "(", "self", ".", "env", ".", "constraints", ".", "constraints", "+", "self", ".", "additional_constraints", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "reset_constraints", "(", "self", ".", "env", ".", "constraints", ".", "constraints", ")", "\n", "self", ".", "additional_constraints", "=", "[", "]", "\n", "# Model parameters", "\n", "", "self", ".", "model", "=", "self", ".", "env", ".", "symbolic", "\n", "self", ".", "dt", "=", "self", ".", "model", ".", "dt", "\n", "self", ".", "T", "=", "horizon", "\n", "self", ".", "Q", "=", "get_cost_weight_matrix", "(", "self", ".", "q_mpc", ",", "self", ".", "model", ".", "nx", ")", "\n", "self", ".", "R", "=", "get_cost_weight_matrix", "(", "self", ".", "r_mpc", ",", "self", ".", "model", ".", "nu", ")", "\n", "\n", "self", ".", "soft_constraints", "=", "soft_constraints", "\n", "self", ".", "warmstart", "=", "warmstart", "\n", "self", ".", "terminate_run_on_done", "=", "terminate_run_on_done", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.reset_constraints": [[79, 93], ["safe_control_gym.envs.constraints.ConstraintList", "mpc.MPC.constraints.get_state_constraint_symbolic_models", "mpc.MPC.constraints.get_input_constraint_symbolic_models", "len", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_state_constraint_symbolic_models", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_input_constraint_symbolic_models"], ["", "def", "reset_constraints", "(", "self", ",", "\n", "constraints", "\n", ")", ":", "\n", "        ", "\"\"\" Setup the constraints list.\n\n        Args:\n            constraints (list): List of constraints controller is subject to.\n\n        \"\"\"", "\n", "self", ".", "constraints", "=", "ConstraintList", "(", "constraints", ")", "\n", "self", ".", "state_constraints_sym", "=", "self", ".", "constraints", ".", "get_state_constraint_symbolic_models", "(", ")", "\n", "self", ".", "input_constraints_sym", "=", "self", ".", "constraints", ".", "get_input_constraint_symbolic_models", "(", ")", "\n", "if", "len", "(", "self", ".", "constraints", ".", "input_state_constraints", ")", ">", "0", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'MPC cannot handle combined state input constraints yet.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.add_constraints": [[94, 104], ["mpc.MPC.reset_constraints"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.reset_constraints"], ["", "", "def", "add_constraints", "(", "self", ",", "\n", "constraints", "\n", ")", ":", "\n", "        ", "\"\"\"Add the constraints (from a list) to the system.\n\n        Args:\n            constraints (list): List of constraints controller is subject too.\n\n        \"\"\"", "\n", "self", ".", "reset_constraints", "(", "constraints", "+", "self", ".", "constraints", ".", "constraints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.remove_constraints": [[105, 120], ["mpc.MPC.reset_constraints", "ValueError", "old_constraints_list.remove"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.reset_constraints"], ["", "def", "remove_constraints", "(", "self", ",", "\n", "constraints", "\n", ")", ":", "\n", "        ", "\"\"\"Remove constraints from the current constraint list.\n\n        Args:\n            constraints (list): list of constraints to be removed.\n\n        \"\"\"", "\n", "old_constraints_list", "=", "self", ".", "constraints", ".", "constraints", "\n", "for", "constraint", "in", "constraints", ":", "\n", "            ", "assert", "constraint", "in", "self", ".", "constraints", ".", "constraints", ",", "ValueError", "(", "\"This constraint is not in the current list of constraints\"", ")", "\n", "old_constraints_list", ".", "remove", "(", "constraint", ")", "\n", "", "self", ".", "reset_constraints", "(", "old_constraints_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.close": [[121, 126], ["mpc.MPC.env.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Cleans up resources.\n\n        \"\"\"", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.reset": [[127, 149], ["mpc.MPC.set_dynamics_func", "mpc.MPC.setup_optimizer", "mpc.MPC.reset_results_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.set_dynamics_func", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.setup_optimizer", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.reset_results_dict"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Prepares for training or evaluation.\n\n        \"\"\"", "\n", "# Setup reference input.", "\n", "if", "self", ".", "env", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "self", ".", "mode", "=", "\"stabilization\"", "\n", "self", ".", "x_goal", "=", "self", ".", "env", ".", "X_GOAL", "\n", "", "elif", "self", ".", "env", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "            ", "self", ".", "mode", "=", "\"tracking\"", "\n", "self", ".", "traj", "=", "self", ".", "env", ".", "X_GOAL", ".", "T", "\n", "# Step along the reference.", "\n", "self", ".", "traj_step", "=", "0", "\n", "# Dynamics model.", "\n", "", "self", ".", "set_dynamics_func", "(", ")", "\n", "# CasADi optimizer.", "\n", "self", ".", "setup_optimizer", "(", ")", "\n", "# Previously solved states & inputs, useful for warm start.", "\n", "self", ".", "x_prev", "=", "None", "\n", "self", ".", "u_prev", "=", "None", "\n", "\n", "self", ".", "reset_results_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.set_dynamics_func": [[150, 165], ["safe_control_gym.controllers.mpc.mpc_utils.rk_discrete"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.rk_discrete"], ["", "def", "set_dynamics_func", "(", "self", ")", ":", "\n", "        ", "\"\"\"Updates symbolic dynamics with actual control frequency.\n\n        \"\"\"", "\n", "#self.dynamics_func = cs.integrator('fd', 'rk',", "\n", "#                                   {", "\n", "#                                    'x': self.model.x_sym,", "\n", "#                                    'p': self.model.u_sym,", "\n", "#                                    'ode': self.model.x_dot", "\n", "#                                    },", "\n", "#                                   {'tf': self.dt})", "\n", "self", ".", "dynamics_func", "=", "rk_discrete", "(", "self", ".", "model", ".", "fc_func", ",", "\n", "self", ".", "model", ".", "nx", ",", "\n", "self", ".", "model", ".", "nu", ",", "\n", "self", ".", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.compute_initial_guess": [[166, 183], ["mpc.MPC.model.df_func", "dfdxdfdu[].toarray", "dfdxdfdu[].toarray", "safe_control_gym.controllers.mpc.mpc_utils.compute_discrete_lqr_gain_from_cont_linear_system", "numpy.zeros", "numpy.zeros", "range", "[].toarray", "mpc.MPC.dynamics_func"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.compute_discrete_lqr_gain_from_cont_linear_system"], ["", "def", "compute_initial_guess", "(", "self", ",", "init_state", ",", "goal_states", ",", "x_lin", ",", "u_lin", ")", ":", "\n", "        ", "\"\"\"Use LQR to get an initial guess of the \"\"\"", "\n", "dfdxdfdu", "=", "self", ".", "model", ".", "df_func", "(", "x", "=", "x_lin", ",", "u", "=", "u_lin", ")", "\n", "dfdx", "=", "dfdxdfdu", "[", "'dfdx'", "]", ".", "toarray", "(", ")", "\n", "dfdu", "=", "dfdxdfdu", "[", "'dfdu'", "]", ".", "toarray", "(", ")", "\n", "lqr_gain", ",", "Ad", ",", "Bd", "=", "compute_discrete_lqr_gain_from_cont_linear_system", "(", "dfdx", ",", "dfdu", ",", "self", ".", "Q", ",", "self", ".", "R", ",", "self", ".", "dt", ")", "\n", "\n", "x_guess", "=", "np", ".", "zeros", "(", "(", "self", ".", "model", ".", "nx", ",", "self", ".", "T", "+", "1", ")", ")", "\n", "u_guess", "=", "np", ".", "zeros", "(", "(", "self", ".", "model", ".", "nu", ",", "self", ".", "T", ")", ")", "\n", "x_guess", "[", ":", ",", "0", "]", "=", "init_state", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "            ", "u", "=", "lqr_gain", "@", "(", "x_guess", "[", ":", ",", "i", "]", "-", "goal_states", "[", ":", ",", "i", "]", ")", "+", "u_lin", "\n", "u_guess", "[", ":", ",", "i", "]", "=", "u", "\n", "x_guess", "[", ":", ",", "i", "+", "1", ",", "None", "]", "=", "self", ".", "dynamics_func", "(", "x0", "=", "x_guess", "[", ":", ",", "i", "]", ",", "p", "=", "u", ")", "[", "'xf'", "]", ".", "toarray", "(", ")", "\n", "\n", "", "return", "x_guess", ",", "u_guess", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.setup_optimizer": [[186, 268], ["casadi.Opti", "casadi.Opti.variable", "casadi.Opti.variable", "casadi.Opti.parameter", "casadi.Opti.parameter", "casadi.Opti.variable", "casadi.Opti.variable", "range", "range", "enumerate", "casadi.Opti.subject_to", "casadi.Opti.minimize", "casadi.Opti.solver", "len", "len", "cost_func", "casadi.Opti.subject_to", "enumerate", "enumerate", "cost_func", "mpc.MPC.dynamics_func", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "numpy.zeros", "numpy.zeros", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "casadi.Opti.subject_to", "numpy.zeros", "state_constraint", "state_constraint", "state_constraint", "state_constraint", "input_constraint", "input_constraint"], "methods", ["None"], ["", "def", "setup_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets up nonlinear optimization problem.\n\n        \"\"\"", "\n", "nx", ",", "nu", "=", "self", ".", "model", ".", "nx", ",", "self", ".", "model", ".", "nu", "\n", "T", "=", "self", ".", "T", "\n", "# Define optimizer and variables.", "\n", "opti", "=", "cs", ".", "Opti", "(", ")", "\n", "# States.", "\n", "x_var", "=", "opti", ".", "variable", "(", "nx", ",", "T", "+", "1", ")", "\n", "# Inputs.", "\n", "u_var", "=", "opti", ".", "variable", "(", "nu", ",", "T", ")", "\n", "# Initial state.", "\n", "x_init", "=", "opti", ".", "parameter", "(", "nx", ",", "1", ")", "\n", "# Reference (equilibrium point or trajectory, last step for terminal cost).", "\n", "x_ref", "=", "opti", ".", "parameter", "(", "nx", ",", "T", "+", "1", ")", "\n", "# Add slack variables", "\n", "state_slack", "=", "opti", ".", "variable", "(", "len", "(", "self", ".", "state_constraints_sym", ")", ")", "\n", "input_slack", "=", "opti", ".", "variable", "(", "len", "(", "self", ".", "input_constraints_sym", ")", ")", "\n", "\n", "# cost (cumulative)", "\n", "cost", "=", "0", "\n", "cost_func", "=", "self", ".", "model", ".", "loss", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "# Can ignore the first state cost since fist x_var == x_init.", "\n", "            ", "cost", "+=", "cost_func", "(", "x", "=", "x_var", "[", ":", ",", "i", "]", ",", "\n", "u", "=", "u_var", "[", ":", ",", "i", "]", ",", "\n", "Xr", "=", "x_ref", "[", ":", ",", "i", "]", ",", "\n", "Ur", "=", "np", ".", "zeros", "(", "(", "nu", ",", "1", ")", ")", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "[", "\"l\"", "]", "\n", "# Terminal cost.", "\n", "", "cost", "+=", "cost_func", "(", "x", "=", "x_var", "[", ":", ",", "-", "1", "]", ",", "\n", "u", "=", "np", ".", "zeros", "(", "(", "nu", ",", "1", ")", ")", ",", "\n", "Xr", "=", "x_ref", "[", ":", ",", "-", "1", "]", ",", "\n", "Ur", "=", "np", ".", "zeros", "(", "(", "nu", ",", "1", ")", ")", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "[", "\"l\"", "]", "\n", "# Constraints", "\n", "for", "i", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "# Dynamics constraints.", "\n", "            ", "next_state", "=", "self", ".", "dynamics_func", "(", "x0", "=", "x_var", "[", ":", ",", "i", "]", ",", "p", "=", "u_var", "[", ":", ",", "i", "]", ")", "[", "'xf'", "]", "\n", "opti", ".", "subject_to", "(", "x_var", "[", ":", ",", "i", "+", "1", "]", "==", "next_state", ")", "\n", "\n", "for", "sc_i", ",", "state_constraint", "in", "enumerate", "(", "self", ".", "state_constraints_sym", ")", ":", "\n", "                ", "if", "self", ".", "soft_constraints", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "i", "]", ")", "<=", "state_slack", "[", "sc_i", "]", ")", "\n", "cost", "+=", "10000", "*", "state_slack", "[", "sc_i", "]", "**", "2", "\n", "opti", ".", "subject_to", "(", "state_slack", "[", "sc_i", "]", ">=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "i", "]", ")", "<", "0", ")", "\n", "", "", "for", "ic_i", ",", "input_constraint", "in", "enumerate", "(", "self", ".", "input_constraints_sym", ")", ":", "\n", "                ", "if", "self", ".", "soft_constraints", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "input_constraint", "(", "u_var", "[", ":", ",", "i", "]", ")", "<=", "input_slack", "[", "ic_i", "]", ")", "\n", "cost", "+=", "10000", "*", "input_slack", "[", "ic_i", "]", "**", "2", "\n", "opti", ".", "subject_to", "(", "input_slack", "[", "ic_i", "]", ">=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "opti", ".", "subject_to", "(", "input_constraint", "(", "u_var", "[", ":", ",", "i", "]", ")", "<", "0", ")", "\n", "\n", "# Final state constraints.", "\n", "", "", "", "for", "sc_i", ",", "state_constraint", "in", "enumerate", "(", "self", ".", "state_constraints_sym", ")", ":", "\n", "            ", "if", "self", ".", "soft_constraints", ":", "\n", "                ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "-", "1", "]", ")", "<=", "state_slack", "[", "sc_i", "]", ")", "\n", "cost", "+=", "10000", "*", "state_slack", "[", "sc_i", "]", "**", "2", "\n", "opti", ".", "subject_to", "(", "state_slack", "[", "sc_i", "]", ">=", "0", ")", "\n", "", "else", ":", "\n", "                ", "opti", ".", "subject_to", "(", "state_constraint", "(", "x_var", "[", ":", ",", "-", "1", "]", ")", "<=", "0", ")", "\n", "# initial condition constraints", "\n", "", "", "opti", ".", "subject_to", "(", "x_var", "[", ":", ",", "0", "]", "==", "x_init", ")", "\n", "\n", "opti", ".", "minimize", "(", "cost", ")", "\n", "# Create solver (IPOPT solver in this version)", "\n", "#opts = {\"ipopt.print_level\": 0, \"ipopt.sb\": \"yes\", \"print_time\": 0}", "\n", "opts", "=", "{", "\"expand\"", ":", "True", "}", "\n", "opti", ".", "solver", "(", "'ipopt'", ",", "opts", ")", "\n", "self", ".", "opti_dict", "=", "{", "\n", "\"opti\"", ":", "opti", ",", "\n", "\"x_var\"", ":", "x_var", ",", "\n", "\"u_var\"", ":", "u_var", ",", "\n", "\"x_init\"", ":", "x_init", ",", "\n", "\"x_ref\"", ":", "x_ref", ",", "\n", "\"cost\"", ":", "cost", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.select_action": [[270, 324], ["opti.set_value", "mpc.MPC.get_references", "opti.set_value", "opti.solve", "mpc.MPC.results_dict[].append", "mpc.MPC.results_dict[].append", "mpc.MPC.results_dict[].append", "copy.deepcopy", "copy.deepcopy", "opti.set_initial", "opti.set_initial", "opti.solve.value", "opti.solve.value", "copy.deepcopy", "copy.deepcopy", "numpy.array", "opti.stats"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.get_references"], ["", "def", "select_action", "(", "self", ",", "\n", "obs", "\n", ")", ":", "\n", "        ", "\"\"\"Solves nonlinear mpc problem to get next action.\n\n        Args:\n            obs (np.array): current state/observation. \n        \n        Returns:\n            np.array: input/action to the task/env. \n\n        \"\"\"", "\n", "opti_dict", "=", "self", ".", "opti_dict", "\n", "opti", "=", "opti_dict", "[", "\"opti\"", "]", "\n", "x_var", "=", "opti_dict", "[", "\"x_var\"", "]", "\n", "u_var", "=", "opti_dict", "[", "\"u_var\"", "]", "\n", "x_init", "=", "opti_dict", "[", "\"x_init\"", "]", "\n", "x_ref", "=", "opti_dict", "[", "\"x_ref\"", "]", "\n", "cost", "=", "opti_dict", "[", "\"cost\"", "]", "\n", "# Assign the initial state.", "\n", "opti", ".", "set_value", "(", "x_init", ",", "obs", ")", "\n", "# Assign reference trajectory within horizon.", "\n", "goal_states", "=", "self", ".", "get_references", "(", ")", "\n", "opti", ".", "set_value", "(", "x_ref", ",", "goal_states", ")", "\n", "if", "self", ".", "mode", "==", "\"tracking\"", ":", "\n", "            ", "self", ".", "traj_step", "+=", "1", "\n", "#if self.warmstart and self.x_prev is None and self.u_prev is None:", "\n", "#    x_guess, u_guess = self.compute_initial_guess(obs, goal_states, self.X_EQ, self.U_EQ)", "\n", "#    opti.set_initial(x_var, x_guess)", "\n", "#    opti.set_initial(u_var, u_guess) # Initial guess for optimization problem.", "\n", "#elif self.warmstart and self.x_prev is not None and self.u_prev is not None:", "\n", "", "if", "self", ".", "warmstart", "and", "self", ".", "x_prev", "is", "not", "None", "and", "self", ".", "u_prev", "is", "not", "None", ":", "\n", "# shift previous solutions by 1 step", "\n", "            ", "x_guess", "=", "deepcopy", "(", "self", ".", "x_prev", ")", "\n", "u_guess", "=", "deepcopy", "(", "self", ".", "u_prev", ")", "\n", "x_guess", "[", ":", ",", ":", "-", "1", "]", "=", "x_guess", "[", ":", ",", "1", ":", "]", "\n", "u_guess", "[", ":", "-", "1", "]", "=", "u_guess", "[", "1", ":", "]", "\n", "opti", ".", "set_initial", "(", "x_var", ",", "x_guess", ")", "\n", "opti", ".", "set_initial", "(", "u_var", ",", "u_guess", ")", "\n", "# Solve the optimization problem.", "\n", "", "sol", "=", "opti", ".", "solve", "(", ")", "\n", "x_val", ",", "u_val", "=", "sol", ".", "value", "(", "x_var", ")", ",", "sol", ".", "value", "(", "u_var", ")", "\n", "self", ".", "x_prev", "=", "x_val", "\n", "self", ".", "u_prev", "=", "u_val", "\n", "self", ".", "results_dict", "[", "'horizon_states'", "]", ".", "append", "(", "deepcopy", "(", "self", ".", "x_prev", ")", ")", "\n", "self", ".", "results_dict", "[", "'horizon_inputs'", "]", ".", "append", "(", "deepcopy", "(", "self", ".", "u_prev", ")", ")", "\n", "self", ".", "results_dict", "[", "'t_wall'", "]", ".", "append", "(", "opti", ".", "stats", "(", ")", "[", "'t_wall_total'", "]", ")", "\n", "# Take the first action from the solved action sequence.", "\n", "if", "u_val", ".", "ndim", ">", "1", ":", "\n", "            ", "action", "=", "u_val", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "action", "=", "np", ".", "array", "(", "[", "u_val", "[", "0", "]", "]", ")", "\n", "", "self", ".", "prev_action", "=", "action", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.get_references": [[325, 344], ["numpy.tile", "mpc.MPC.env.X_GOAL.reshape", "min", "min", "max", "numpy.concatenate", "Exception", "numpy.tile"], "methods", ["None"], ["", "def", "get_references", "(", "self", ")", ":", "\n", "        ", "\"\"\"Constructs reference states along mpc horizon.(nx, T+1).\n\n        \"\"\"", "\n", "if", "self", ".", "env", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "# Repeat goal state for horizon steps.", "\n", "            ", "goal_states", "=", "np", ".", "tile", "(", "self", ".", "env", ".", "X_GOAL", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "(", "1", ",", "self", ".", "T", "+", "1", ")", ")", "\n", "", "elif", "self", ".", "env", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "# Slice trajectory for horizon steps, if not long enough, repeat last state.", "\n", "            ", "start", "=", "min", "(", "self", ".", "traj_step", ",", "self", ".", "traj", ".", "shape", "[", "-", "1", "]", ")", "\n", "end", "=", "min", "(", "self", ".", "traj_step", "+", "self", ".", "T", "+", "1", ",", "self", ".", "traj", ".", "shape", "[", "-", "1", "]", ")", "\n", "remain", "=", "max", "(", "0", ",", "self", ".", "T", "+", "1", "-", "(", "end", "-", "start", ")", ")", "\n", "goal_states", "=", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "traj", "[", ":", ",", "start", ":", "end", "]", ",", "\n", "np", ".", "tile", "(", "self", ".", "traj", "[", ":", ",", "-", "1", ":", "]", ",", "(", "1", ",", "remain", ")", ")", "\n", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Reference for this mode is not implemented.\"", ")", "\n", "", "return", "goal_states", "# (nx, T+1).", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.reset_results_dict": [[345, 362], ["None"], "methods", ["None"], ["", "def", "reset_results_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "self", ".", "results_dict", "=", "{", "'obs'", ":", "[", "]", ",", "\n", "'reward'", ":", "[", "]", ",", "\n", "'done'", ":", "[", "]", ",", "\n", "'info'", ":", "[", "]", ",", "\n", "'action'", ":", "[", "]", ",", "\n", "'horizon_inputs'", ":", "[", "]", ",", "\n", "'horizon_states'", ":", "[", "]", ",", "\n", "'frames'", ":", "[", "]", ",", "\n", "'state_mse'", ":", "[", "]", ",", "\n", "'common_cost'", ":", "[", "]", ",", "\n", "'state'", ":", "[", "]", ",", "\n", "'state_error'", ":", "[", "]", ",", "\n", "'t_wall'", ":", "[", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.run": [[364, 465], ["env.reset", "print", "print", "mpc.MPC.reset_results_dict", "mpc.MPC.results_dict[].append", "mpc.MPC.results_dict[].append", "numpy.asarray", "numpy.asarray", "numpy.vstack", "numpy.vstack", "copy.deepcopy", "env.set_cost_function_param", "mpc.MPC.select_action", "env.step", "mpc.MPC.results_dict[].append", "mpc.MPC.results_dict[].append", "mpc.MPC.results_dict[].append", "mpc.MPC.results_dict[].append", "mpc.MPC.results_dict[].append", "mpc.MPC.results_dict[].append", "mpc.MPC.results_dict[].append", "print", "print", "print", "print", "print", "print", "print", "len", "numpy.vstack", "numpy.vstack", "safe_control_gym.controllers.mpc.mpc_utils.compute_state_rmse", "safe_control_gym.controllers.mpc.mpc_utils.compute_state_rmse", "int", "print", "env.render", "frames.append", "numpy.asarray.mean", "numpy.asarray.std", "numpy.asarray.mean", "numpy.asarray.std", "Exception", "env.render"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.reset_results_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.set_cost_function_param", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc.MPC.select_action", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.compute_state_rmse", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.mpc.mpc_utils.compute_state_rmse", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render"], ["", "def", "run", "(", "self", ",", "\n", "env", "=", "None", ",", "\n", "render", "=", "False", ",", "\n", "logging", "=", "False", ",", "\n", "max_steps", "=", "None", ",", "\n", "terminate_run_on_done", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Runs evaluation with current policy.\n        \n        Args:\n            render (bool): if to do real-time rendering. \n            logging (bool): if to log on terminal.\n            \n        Returns:\n            dict: evaluation statisitcs, rendered frames. \n\n        \"\"\"", "\n", "if", "env", "is", "None", ":", "\n", "            ", "env", "=", "self", ".", "env", "\n", "", "if", "terminate_run_on_done", "is", "None", ":", "\n", "            ", "terminate_run_on_done", "=", "self", ".", "terminate_run_on_done", "\n", "\n", "", "self", ".", "x_prev", "=", "None", "\n", "self", ".", "u_prev", "=", "None", "\n", "if", "not", "env", ".", "initial_reset", ":", "\n", "            ", "env", ".", "set_cost_function_param", "(", "self", ".", "Q", ",", "self", ".", "R", ")", "\n", "#obs, info = env.reset()", "\n", "", "obs", "=", "env", ".", "reset", "(", ")", "\n", "print", "(", "\"Init State:\"", ")", "\n", "print", "(", "obs", ")", "\n", "ep_returns", ",", "ep_lengths", "=", "[", "]", ",", "[", "]", "\n", "frames", "=", "[", "]", "\n", "self", ".", "reset_results_dict", "(", ")", "\n", "self", ".", "results_dict", "[", "'obs'", "]", ".", "append", "(", "obs", ")", "\n", "self", ".", "results_dict", "[", "'state'", "]", ".", "append", "(", "env", ".", "state", ")", "\n", "i", "=", "0", "\n", "if", "env", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "if", "max_steps", "is", "None", ":", "\n", "                ", "MAX_STEPS", "=", "int", "(", "env", ".", "CTRL_FREQ", "*", "env", ".", "EPISODE_LEN_SEC", ")", "\n", "", "else", ":", "\n", "                ", "MAX_STEPS", "=", "max_steps", "\n", "", "", "elif", "env", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "            ", "if", "max_steps", "is", "None", ":", "\n", "                ", "MAX_STEPS", "=", "self", ".", "traj", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "MAX_STEPS", "=", "max_steps", "\n", "", "", "else", ":", "\n", "            ", "raise", "(", "\"Undefined Task\"", ")", "\n", "", "self", ".", "terminate_loop", "=", "False", "\n", "done", "=", "False", "\n", "common_metric", "=", "0", "\n", "while", "not", "(", "done", "and", "terminate_run_on_done", ")", "and", "i", "<", "MAX_STEPS", "and", "not", "(", "self", ".", "terminate_loop", ")", ":", "\n", "            ", "action", "=", "self", ".", "select_action", "(", "obs", ")", "\n", "if", "self", ".", "terminate_loop", ":", "\n", "                ", "print", "(", "\"Infeasible MPC Problem\"", ")", "\n", "break", "\n", "# Repeat input for more efficient control.", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "results_dict", "[", "'obs'", "]", ".", "append", "(", "obs", ")", "\n", "self", ".", "results_dict", "[", "'reward'", "]", ".", "append", "(", "reward", ")", "\n", "self", ".", "results_dict", "[", "'done'", "]", ".", "append", "(", "done", ")", "\n", "self", ".", "results_dict", "[", "'info'", "]", ".", "append", "(", "info", ")", "\n", "self", ".", "results_dict", "[", "'action'", "]", ".", "append", "(", "action", ")", "\n", "self", ".", "results_dict", "[", "'state'", "]", ".", "append", "(", "env", ".", "state", ")", "\n", "self", ".", "results_dict", "[", "'state_mse'", "]", ".", "append", "(", "info", "[", "\"mse\"", "]", ")", "\n", "#self.results_dict['state_error'].append(env.state - env.X_GOAL[i,:])", "\n", "\n", "common_metric", "+=", "info", "[", "\"mse\"", "]", "\n", "print", "(", "i", ",", "'-th step.'", ")", "\n", "print", "(", "action", ")", "\n", "print", "(", "obs", ")", "\n", "print", "(", "reward", ")", "\n", "print", "(", "done", ")", "\n", "print", "(", "info", ")", "\n", "print", "(", ")", "\n", "if", "render", ":", "\n", "                ", "env", ".", "render", "(", ")", "\n", "frames", ".", "append", "(", "env", ".", "render", "(", "\"rgb_array\"", ")", ")", "\n", "", "i", "+=", "1", "\n", "# Collect evaluation results.", "\n", "", "ep_lengths", "=", "np", ".", "asarray", "(", "ep_lengths", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "ep_returns", ")", "\n", "if", "logging", ":", "\n", "            ", "msg", "=", "\"****** Evaluation ******\\n\"", "\n", "msg", "+=", "\"eval_ep_length {:.2f} +/- {:.2f} | eval_ep_return {:.3f} +/- {:.3f}\\n\"", ".", "format", "(", "\n", "ep_lengths", ".", "mean", "(", ")", ",", "ep_lengths", ".", "std", "(", ")", ",", "ep_returns", ".", "mean", "(", ")", ",", "\n", "ep_returns", ".", "std", "(", ")", ")", "\n", "", "if", "len", "(", "frames", ")", "!=", "0", ":", "\n", "            ", "self", ".", "results_dict", "[", "'frames'", "]", "=", "frames", "\n", "", "self", ".", "results_dict", "[", "'obs'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'obs'", "]", ")", "\n", "self", ".", "results_dict", "[", "'state'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'state'", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "results_dict", "[", "'reward'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'reward'", "]", ")", "\n", "self", ".", "results_dict", "[", "'action'", "]", "=", "np", ".", "vstack", "(", "self", ".", "results_dict", "[", "'action'", "]", ")", "\n", "self", ".", "results_dict", "[", "'full_traj_common_cost'", "]", "=", "common_metric", "\n", "self", ".", "results_dict", "[", "'total_rmse_state_error'", "]", "=", "compute_state_rmse", "(", "self", ".", "results_dict", "[", "'state'", "]", ")", "\n", "self", ".", "results_dict", "[", "'total_rmse_obs_error'", "]", "=", "compute_state_rmse", "(", "self", ".", "results_dict", "[", "'obs'", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "Exception", "(", "\"[ERROR] mpc.run().py: MPC could not find a solution for the first step given the initial conditions. \"", "\n", "\"Check to make sure initial conditions are feasible.\"", ")", "\n", "", "return", "deepcopy", "(", "self", ".", "results_dict", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.__init__": [[21, 63], ["sac_utils.MLPActorCritic", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "copy.deepcopy", "sac_utils.SACAgent.ac_targ.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "numpy.log", "sac_utils.SACAgent.ac.actor.parameters", "list", "list", "numpy.prod().item", "sac_utils.SACAgent.ac.q1.parameters", "sac_utils.SACAgent.ac.q2.parameters", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.log"], ["def", "__init__", "(", "self", ",", "\n", "obs_space", ",", "\n", "act_space", ",", "\n", "hidden_dim", "=", "256", ",", "\n", "gamma", "=", "0.99", ",", "\n", "tau", "=", "0.005", ",", "\n", "init_temperature", "=", "0.2", ",", "\n", "use_entropy_tuning", "=", "False", ",", "\n", "target_entropy", "=", "None", ",", "\n", "actor_lr", "=", "0.001", ",", "\n", "critic_lr", "=", "0.001", ",", "\n", "entropy_lr", "=", "0.001", ",", "\n", "**", "kwargs", ")", ":", "\n", "# params", "\n", "        ", "self", ".", "obs_space", "=", "obs_space", "\n", "self", ".", "act_space", "=", "act_space", "\n", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "use_entropy_tuning", "=", "use_entropy_tuning", "\n", "\n", "# model", "\n", "self", ".", "ac", "=", "MLPActorCritic", "(", "obs_space", ",", "act_space", ",", "hidden_dims", "=", "[", "hidden_dim", "]", "*", "2", ",", "activation", "=", "\"relu\"", ")", "\n", "self", ".", "log_alpha", "=", "torch", ".", "tensor", "(", "np", ".", "log", "(", "init_temperature", ")", ")", "\n", "\n", "if", "self", ".", "use_entropy_tuning", ":", "\n", "            ", "self", ".", "log_alpha", ".", "requires_grad", "=", "True", "\n", "if", "target_entropy", "is", "None", ":", "\n", "# Use heuristic value from SAC paper", "\n", "                ", "self", ".", "target_entropy", "=", "-", "np", ".", "prod", "(", "act_space", ".", "shape", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "target_entropy", "=", "target_entropy", "\n", "\n", "# target networks", "\n", "", "", "self", ".", "ac_targ", "=", "deepcopy", "(", "self", ".", "ac", ")", "\n", "for", "p", "in", "self", ".", "ac_targ", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# optimizers", "\n", "", "self", ".", "actor_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "ac", ".", "actor", ".", "parameters", "(", ")", ",", "actor_lr", ")", "\n", "self", ".", "critic_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "list", "(", "self", ".", "ac", ".", "q1", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "ac", ".", "q2", ".", "parameters", "(", ")", ")", ",", "critic_lr", ")", "\n", "self", ".", "alpha_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "self", ".", "log_alpha", "]", ",", "entropy_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.alpha": [[64, 68], ["sac_utils.SACAgent.log_alpha.exp"], "methods", ["None"], ["", "@", "property", "\n", "def", "alpha", "(", "self", ")", ":", "\n", "        ", "\"\"\"Entropy-tuning parameter/temperature\"\"\"", "\n", "return", "self", ".", "log_alpha", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to": [[69, 74], ["sac_utils.SACAgent.ac.to", "sac_utils.SACAgent.ac_targ.to", "sac_utils.SACAgent.log_alpha.to"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\"Puts agent to device.\"\"\"", "\n", "self", ".", "ac", ".", "to", "(", "device", ")", "\n", "self", ".", "ac_targ", ".", "to", "(", "device", ")", "\n", "self", ".", "log_alpha", "=", "self", ".", "log_alpha", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.train": [[75, 79], ["sac_utils.SACAgent.ac.train"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets training mode.\"\"\"", "\n", "self", ".", "ac", ".", "train", "(", ")", "\n", "self", ".", "log_alpha", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval": [[80, 84], ["sac_utils.SACAgent.ac.eval"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets evaluation mode.\"\"\"", "\n", "self", ".", "ac", ".", "eval", "(", ")", "\n", "self", ".", "log_alpha", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.state_dict": [[85, 94], ["sac_utils.SACAgent.ac.state_dict", "sac_utils.SACAgent.ac_targ.state_dict", "sac_utils.SACAgent.actor_opt.state_dict", "sac_utils.SACAgent.critic_opt.state_dict", "sac_utils.SACAgent.alpha_opt.state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Snapshots agent state.\"\"\"", "\n", "return", "{", "\n", "\"ac\"", ":", "self", ".", "ac", ".", "state_dict", "(", ")", ",", "\n", "\"log_alpha\"", ":", "self", ".", "log_alpha", ",", "\n", "\"ac_targ\"", ":", "self", ".", "ac_targ", ".", "state_dict", "(", ")", ",", "\n", "\"actor_opt\"", ":", "self", ".", "actor_opt", ".", "state_dict", "(", ")", ",", "\n", "\"critic_opt\"", ":", "self", ".", "critic_opt", ".", "state_dict", "(", ")", ",", "\n", "\"alpha_opt\"", ":", "self", ".", "alpha_opt", ".", "state_dict", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.load_state_dict": [[96, 104], ["sac_utils.SACAgent.ac.load_state_dict", "sac_utils.SACAgent.ac_targ.load_state_dict", "sac_utils.SACAgent.actor_opt.load_state_dict", "sac_utils.SACAgent.critic_opt.load_state_dict", "sac_utils.SACAgent.alpha_opt.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Restores agent state.\"\"\"", "\n", "self", ".", "ac", ".", "load_state_dict", "(", "state_dict", "[", "\"ac\"", "]", ")", "\n", "self", ".", "log_alpha", "=", "state_dict", "[", "\"log_alpha\"", "]", "\n", "self", ".", "ac_targ", ".", "load_state_dict", "(", "state_dict", "[", "\"ac_targ\"", "]", ")", "\n", "self", ".", "actor_opt", ".", "load_state_dict", "(", "state_dict", "[", "\"actor_opt\"", "]", ")", "\n", "self", ".", "critic_opt", ".", "load_state_dict", "(", "state_dict", "[", "\"critic_opt\"", "]", ")", "\n", "self", ".", "alpha_opt", ".", "load_state_dict", "(", "state_dict", "[", "\"alpha_opt\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.compute_policy_loss": [[105, 118], ["sac_utils.SACAgent.ac.actor", "sac_utils.SACAgent.ac.q1", "sac_utils.SACAgent.ac.q2", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "sac_utils.SACAgent.alpha.detach"], "methods", ["None"], ["", "def", "compute_policy_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Returns policy loss(es) given batch of data.\"\"\"", "\n", "obs", "=", "batch", "[", "\"obs\"", "]", "\n", "act", ",", "logp", "=", "self", ".", "ac", ".", "actor", "(", "obs", ",", "deterministic", "=", "False", ",", "with_logprob", "=", "True", ")", "\n", "q1", "=", "self", ".", "ac", ".", "q1", "(", "obs", ",", "act", ")", "\n", "q2", "=", "self", ".", "ac", ".", "q2", "(", "obs", ",", "act", ")", "\n", "q", "=", "torch", ".", "min", "(", "q1", ",", "q2", ")", "\n", "policy_loss", "=", "(", "self", ".", "alpha", ".", "detach", "(", ")", "*", "logp", "-", "q", ")", ".", "mean", "(", ")", "\n", "\n", "entropy_loss", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "if", "self", ".", "use_entropy_tuning", ":", "\n", "            ", "entropy_loss", "=", "-", "(", "self", ".", "log_alpha", "*", "(", "logp", "+", "self", ".", "target_entropy", ")", ".", "detach", "(", ")", ")", ".", "mean", "(", ")", "\n", "", "return", "policy_loss", ",", "entropy_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.compute_q_loss": [[119, 137], ["sac_utils.SACAgent.ac.q1", "sac_utils.SACAgent.ac.q2", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sac_utils.SACAgent.ac.actor", "sac_utils.SACAgent.ac_targ.q1", "sac_utils.SACAgent.ac_targ.q2", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "compute_q_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Returns q-value loss(es) given batch of data.\"\"\"", "\n", "obs", ",", "act", ",", "rew", ",", "next_obs", ",", "mask", "=", "batch", "[", "\"obs\"", "]", ",", "batch", "[", "\"act\"", "]", ",", "batch", "[", "\"rew\"", "]", ",", "batch", "[", "\"next_obs\"", "]", ",", "batch", "[", "\"mask\"", "]", "\n", "q1", "=", "self", ".", "ac", ".", "q1", "(", "obs", ",", "act", ")", "\n", "q2", "=", "self", ".", "ac", ".", "q2", "(", "obs", ",", "act", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_act", ",", "next_logp", "=", "self", ".", "ac", ".", "actor", "(", "next_obs", ",", "deterministic", "=", "False", ",", "with_logprob", "=", "True", ")", "\n", "next_q1_targ", "=", "self", ".", "ac_targ", ".", "q1", "(", "next_obs", ",", "next_act", ")", "\n", "next_q2_targ", "=", "self", ".", "ac_targ", ".", "q2", "(", "next_obs", ",", "next_act", ")", "\n", "next_q_targ", "=", "torch", ".", "min", "(", "next_q1_targ", ",", "next_q2_targ", ")", "\n", "# q value regression target", "\n", "q_targ", "=", "rew", "+", "self", ".", "gamma", "*", "mask", "*", "(", "next_q_targ", "-", "self", ".", "alpha", "*", "next_logp", ")", "\n", "\n", "", "q1_loss", "=", "(", "q1", "-", "q_targ", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "q2_loss", "=", "(", "q2", "-", "q_targ", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "critic_loss", "=", "q1_loss", "+", "q2_loss", "\n", "return", "critic_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.update": [[138, 166], ["collections.defaultdict", "sac_utils.SACAgent.compute_policy_loss", "sac_utils.SACAgent.actor_opt.zero_grad", "policy_loss.backward", "sac_utils.SACAgent.actor_opt.step", "sac_utils.SACAgent.compute_q_loss", "sac_utils.SACAgent.critic_opt.zero_grad", "sac_utils.SACAgent.backward", "sac_utils.SACAgent.critic_opt.step", "sac_utils.soft_update", "policy_loss.item", "sac_utils.SACAgent.item", "entropy_loss.item", "sac_utils.SACAgent.alpha_opt.zero_grad", "entropy_loss.backward", "sac_utils.SACAgent.alpha_opt.step"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.compute_policy_loss", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.compute_q_loss", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.soft_update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step"], ["", "def", "update", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Updates model parameters based on current training batch.\"\"\"", "\n", "resutls", "=", "defaultdict", "(", "list", ")", "\n", "\n", "# actor update", "\n", "policy_loss", ",", "entropy_loss", "=", "self", ".", "compute_policy_loss", "(", "batch", ")", "\n", "self", ".", "actor_opt", ".", "zero_grad", "(", ")", "\n", "policy_loss", ".", "backward", "(", ")", "\n", "self", ".", "actor_opt", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "use_entropy_tuning", ":", "\n", "            ", "self", ".", "alpha_opt", ".", "zero_grad", "(", ")", "\n", "entropy_loss", ".", "backward", "(", ")", "\n", "self", ".", "alpha_opt", ".", "step", "(", ")", "\n", "\n", "# critic update", "\n", "", "critic_loss", "=", "self", ".", "compute_q_loss", "(", "batch", ")", "\n", "self", ".", "critic_opt", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic_opt", ".", "step", "(", ")", "\n", "\n", "# update target networks", "\n", "soft_update", "(", "self", ".", "ac", ",", "self", ".", "ac_targ", ",", "self", ".", "tau", ")", "\n", "\n", "resutls", "[", "\"policy_loss\"", "]", "=", "policy_loss", ".", "item", "(", ")", "\n", "resutls", "[", "\"critic_loss\"", "]", "=", "critic_loss", ".", "item", "(", ")", "\n", "resutls", "[", "\"entropy_loss\"", "]", "=", "entropy_loss", ".", "item", "(", ")", "\n", "return", "resutls", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActor.__init__": [[175, 186], ["torch.Module.__init__", "safe_control_gym.math_and_models.neural_networks.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "safe_control_gym.math_and_models.distributions.Normal", "log_std.exp"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obs_dim", ",", "act_dim", ",", "hidden_dims", ",", "activation", ",", "postprocess_fn", "=", "lambda", "x", ":", "x", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "MLP", "(", "obs_dim", ",", "hidden_dims", "[", "-", "1", "]", ",", "hidden_dims", "[", ":", "-", "1", "]", ",", "activation", ")", "\n", "self", ".", "postprocess_fn", "=", "postprocess_fn", "\n", "\n", "self", ".", "mu_layer", "=", "nn", ".", "Linear", "(", "hidden_dims", "[", "-", "1", "]", ",", "act_dim", ")", "\n", "self", ".", "log_std_layer", "=", "nn", ".", "Linear", "(", "hidden_dims", "[", "-", "1", "]", ",", "act_dim", ")", "\n", "\n", "self", ".", "dist_fn", "=", "lambda", "mu", ",", "log_std", ":", "Normal", "(", "mu", ",", "log_std", ".", "exp", "(", ")", ")", "\n", "self", ".", "log_std_min", "=", "-", "20", "\n", "self", ".", "log_std_max", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActor.forward": [[187, 208], ["sac_utils.MLPActor.net", "sac_utils.MLPActor.mu_layer", "sac_utils.MLPActor.log_std_layer", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "sac_utils.MLPActor.dist_fn", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "sac_utils.MLPActor.postprocess_fn", "sac_utils.MLPActor.mode", "sac_utils.MLPActor.rsample", "sac_utils.MLPActor.log_prob", "torch.softplus", "torch.softplus", "torch.softplus", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.mode", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.log_prob", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.FileLogger.log"], ["", "def", "forward", "(", "self", ",", "obs", ",", "deterministic", "=", "False", ",", "with_logprob", "=", "True", ")", ":", "\n", "        ", "net_out", "=", "self", ".", "net", "(", "obs", ")", "\n", "mu", "=", "self", ".", "mu_layer", "(", "net_out", ")", "\n", "log_std", "=", "self", ".", "log_std_layer", "(", "net_out", ")", "\n", "log_std", "=", "torch", ".", "clamp", "(", "log_std", ",", "self", ".", "log_std_min", ",", "self", ".", "log_std_max", ")", "\n", "dist", "=", "self", ".", "dist_fn", "(", "mu", ",", "log_std", ")", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "action", "=", "dist", ".", "mode", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "dist", ".", "rsample", "(", ")", "\n", "\n", "", "if", "with_logprob", ":", "\n", "            ", "logp", "=", "dist", ".", "log_prob", "(", "action", ")", "\n", "logp", "-=", "(", "2", "*", "(", "np", ".", "log", "(", "2", ")", "-", "action", "-", "F", ".", "softplus", "(", "-", "2", "*", "action", ")", ")", ")", ".", "sum", "(", "axis", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "logp", "=", "None", "\n", "\n", "", "action", "=", "torch", ".", "tanh", "(", "action", ")", "\n", "action", "=", "self", ".", "postprocess_fn", "(", "action", ")", "\n", "return", "action", ",", "logp", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorDiscrete.__init__": [[212, 220], ["torch.Module.__init__", "safe_control_gym.math_and_models.neural_networks.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "safe_control_gym.math_and_models.distributions.Categorical"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obs_dim", ",", "act_dim", ",", "hidden_dims", ",", "activation", ",", "postprocess_fn", "=", "lambda", "x", ":", "x", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "MLP", "(", "obs_dim", ",", "hidden_dims", "[", "-", "1", "]", ",", "hidden_dims", "[", ":", "-", "1", "]", ",", "activation", ")", "\n", "self", ".", "postprocess_fn", "=", "postprocess_fn", "\n", "\n", "self", ".", "logits_layer", "=", "nn", ".", "Linear", "(", "hidden_dims", "[", "-", "1", "]", ",", "act_dim", ")", "\n", "# TODO(Justin): Should change Categorial to SoftmaxCategorical", "\n", "self", ".", "dist_fn", "=", "lambda", "x", ":", "Categorical", "(", "logits", "=", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorDiscrete.forward": [[221, 238], ["sac_utils.MLPActorDiscrete.net", "sac_utils.MLPActorDiscrete.logits_layer", "sac_utils.MLPActorDiscrete.dist_fn", "sac_utils.MLPActorDiscrete.postprocess_fn", "sac_utils.MLPActorDiscrete.mode", "sac_utils.MLPActorDiscrete.rsample", "sac_utils.MLPActorDiscrete.log_prob"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.mode", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.log_prob"], ["", "def", "forward", "(", "self", ",", "obs", ",", "deterministic", "=", "False", ",", "with_logprob", "=", "True", ")", ":", "\n", "        ", "net_out", "=", "self", ".", "net", "(", "obs", ")", "\n", "logits", "=", "self", ".", "logits_layer", "(", "net_out", ")", "\n", "dist", "=", "self", ".", "dist_fn", "(", "logits", ")", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "action", "=", "dist", ".", "mode", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "dist", ".", "rsample", "(", ")", "\n", "\n", "", "if", "with_logprob", ":", "\n", "            ", "logp", "=", "dist", ".", "log_prob", "(", "action", ")", "\n", "", "else", ":", "\n", "            ", "logp", "=", "None", "\n", "\n", "", "action", "=", "self", ".", "postprocess_fn", "(", "action", ")", "\n", "return", "action", ",", "logp", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPQFunction.__init__": [[242, 245], ["torch.Module.__init__", "safe_control_gym.math_and_models.neural_networks.MLP"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obs_dim", ",", "act_dim", ",", "hidden_dims", ",", "activation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "q_net", "=", "MLP", "(", "obs_dim", "+", "act_dim", ",", "1", ",", "hidden_dims", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPQFunction.forward": [[246, 248], ["sac_utils.MLPQFunction.q_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "obs", ",", "act", ")", ":", "\n", "        ", "return", "self", ".", "q_net", "(", "torch", ".", "cat", "(", "[", "obs", ",", "act", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.__init__": [[258, 283], ["torch.Module.__init__", "isinstance", "sac_utils.MLPQFunction", "sac_utils.MLPQFunction", "sac_utils.MLPActorDiscrete", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "sac_utils.MLPActor", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to"], ["def", "__init__", "(", "self", ",", "obs_space", ",", "act_space", ",", "hidden_dims", "=", "(", "64", ",", "64", ")", ",", "activation", "=", "\"relu\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "obs_dim", "=", "obs_space", ".", "shape", "[", "0", "]", "\n", "if", "isinstance", "(", "act_space", ",", "Box", ")", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "shape", "[", "0", "]", "\n", "discrete", "=", "False", "\n", "", "else", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "n", "\n", "discrete", "=", "True", "\n", "\n", "# policy", "\n", "", "if", "discrete", ":", "\n", "            ", "self", ".", "actor", "=", "MLPActorDiscrete", "(", "obs_dim", ",", "act_dim", ",", "hidden_dims", ",", "activation", ")", "\n", "", "else", ":", "\n", "            ", "low", ",", "high", "=", "act_space", ".", "low", ",", "act_space", ".", "high", "\n", "low", "=", "torch", ".", "FloatTensor", "(", "low", ")", "\n", "high", "=", "torch", ".", "FloatTensor", "(", "high", ")", "\n", "# Rescale action from [-1, 1] to [low, high]", "\n", "unscale_fn", "=", "lambda", "x", ":", "low", ".", "to", "(", "x", ".", "device", ")", "+", "(", "0.5", "*", "(", "x", "+", "1.0", ")", "*", "(", "high", ".", "to", "(", "x", ".", "device", ")", "-", "low", ".", "to", "(", "x", ".", "device", ")", ")", ")", "\n", "self", ".", "actor", "=", "MLPActor", "(", "obs_dim", ",", "act_dim", ",", "hidden_dims", ",", "activation", ",", "postprocess_fn", "=", "unscale_fn", ")", "\n", "\n", "# Q functions", "\n", "", "self", ".", "q1", "=", "MLPQFunction", "(", "obs_dim", ",", "act_dim", ",", "hidden_dims", ",", "activation", ")", "\n", "self", ".", "q2", "=", "MLPQFunction", "(", "obs_dim", ",", "act_dim", ",", "hidden_dims", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act": [[284, 287], ["sac_utils.MLPActorCritic.actor", "a.numpy"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "obs", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "a", ",", "_", "=", "self", ".", "actor", "(", "obs", ",", "deterministic", ",", "False", ")", "\n", "return", "a", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.__init__": [[304, 336], ["object.__init__", "isinstance", "list", "sac_utils.SACBuffer.reset", "sac_utils.SACBuffer.scheme.keys"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["def", "__init__", "(", "self", ",", "obs_space", ",", "act_space", ",", "max_size", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "obs_dim", "=", "obs_space", ".", "shape", "\n", "if", "isinstance", "(", "act_space", ",", "Box", ")", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "act_dim", "=", "act_space", ".", "n", "\n", "\n", "", "N", "=", "max_size", "\n", "self", ".", "scheme", "=", "{", "\n", "\"obs\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "*", "obs_dim", ")", "\n", "}", ",", "\n", "\"next_obs\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "*", "obs_dim", ")", "\n", "}", ",", "\n", "\"act\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "act_dim", ")", "\n", "}", ",", "\n", "\"rew\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "1", ")", "\n", "}", ",", "\n", "\"mask\"", ":", "{", "\n", "\"vshape\"", ":", "(", "N", ",", "1", ")", ",", "\n", "\"init\"", ":", "np", ".", "ones", "\n", "}", "\n", "}", "\n", "self", ".", "keys", "=", "list", "(", "self", ".", "scheme", ".", "keys", "(", ")", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.reset": [[337, 348], ["sac_utils.SACBuffer.scheme.items", "info.get", "info.get", "info.get."], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Allocate space for containers.\"\"\"", "\n", "for", "k", ",", "info", "in", "self", ".", "scheme", ".", "items", "(", ")", ":", "\n", "            ", "assert", "\"vshape\"", "in", "info", ",", "\"Scheme must define vshape for {}\"", ".", "format", "(", "k", ")", "\n", "vshape", "=", "info", "[", "\"vshape\"", "]", "\n", "dtype", "=", "info", ".", "get", "(", "\"dtype\"", ",", "np", ".", "float32", ")", "\n", "init", "=", "info", ".", "get", "(", "\"init\"", ",", "np", ".", "zeros", ")", "\n", "self", ".", "__dict__", "[", "k", "]", "=", "init", "(", "vshape", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "self", ".", "pos", "=", "0", "\n", "self", ".", "buffer_size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.__len__": [[349, 352], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns current size of the buffer.\"\"\"", "\n", "return", "self", ".", "buffer_size", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.state_dict": [[353, 363], ["dict"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a snapshot of current buffer.\"\"\"", "\n", "state", "=", "dict", "(", "\n", "pos", "=", "self", ".", "pos", ",", "\n", "buffer_size", "=", "self", ".", "buffer_size", ",", "\n", ")", "\n", "for", "k", "in", "self", ".", "scheme", ":", "\n", "            ", "v", "=", "self", ".", "__dict__", "[", "k", "]", "\n", "state", "[", "k", "]", "=", "v", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.load_state_dict": [[364, 368], ["state.items"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Restores buffer from previous state.\"\"\"", "\n", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.push": [[369, 391], ["batch.items", "list", "sac_utils.SACBuffer.scheme[].get", "numpy.asarray().reshape", "min", "batch.keys", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get"], ["", "", "def", "push", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Inserts transition step data (as dict) to storage.\"\"\"", "\n", "# batch size", "\n", "k", "=", "list", "(", "batch", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "n", "=", "batch", "[", "k", "]", ".", "shape", "[", "0", "]", "\n", "\n", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", ":", "\n", "            ", "shape", "=", "self", ".", "scheme", "[", "k", "]", "[", "\"vshape\"", "]", "[", "1", ":", "]", "\n", "dtype", "=", "self", ".", "scheme", "[", "k", "]", ".", "get", "(", "\"dtype\"", ",", "np", ".", "float32", ")", "\n", "v_", "=", "np", ".", "asarray", "(", "v", ",", "dtype", "=", "dtype", ")", ".", "reshape", "(", "(", "n", ",", ")", "+", "shape", ")", "\n", "\n", "if", "self", ".", "pos", "+", "n", "<=", "self", ".", "max_size", ":", "\n", "                ", "self", ".", "__dict__", "[", "k", "]", "[", "self", ".", "pos", ":", "self", ".", "pos", "+", "n", "]", "=", "v_", "\n", "", "else", ":", "\n", "# wrap around", "\n", "                ", "remain_n", "=", "self", ".", "pos", "+", "n", "-", "self", ".", "max_size", "\n", "self", ".", "__dict__", "[", "k", "]", "[", "self", ".", "pos", ":", "self", ".", "max_size", "]", "=", "v_", "[", ":", "-", "remain_n", "]", "\n", "self", ".", "__dict__", "[", "k", "]", "[", ":", "remain_n", "]", "=", "v_", "[", "-", "remain_n", ":", "]", "\n", "\n", "", "", "if", "self", ".", "buffer_size", "<", "self", ".", "max_size", ":", "\n", "            ", "self", ".", "buffer_size", "=", "min", "(", "self", ".", "max_size", ",", "self", ".", "pos", "+", "n", ")", "\n", "", "self", ".", "pos", "=", "(", "self", ".", "pos", "+", "n", ")", "%", "self", ".", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.sample": [[392, 407], ["numpy.random.randint", "sac_utils.SACBuffer.scheme.items", "len", "sac_utils.SACBuffer.__dict__[].reshape", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns data batch.\"\"\"", "\n", "if", "not", "batch_size", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "\n", "", "indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", ",", "size", "=", "batch_size", ")", "\n", "batch", "=", "{", "}", "\n", "for", "k", ",", "info", "in", "self", ".", "scheme", ".", "items", "(", ")", ":", "\n", "            ", "shape", "=", "info", "[", "\"vshape\"", "]", "[", "1", ":", "]", "\n", "v", "=", "self", ".", "__dict__", "[", "k", "]", ".", "reshape", "(", "-", "1", ",", "*", "shape", ")", "[", "indices", "]", "\n", "if", "device", "is", "None", ":", "\n", "                ", "batch", "[", "k", "]", "=", "torch", ".", "as_tensor", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "batch", "[", "k", "]", "=", "torch", ".", "as_tensor", "(", "v", ",", "device", "=", "device", ")", "\n", "", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.soft_update": [[414, 418], ["zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["", "", "def", "soft_update", "(", "source", ",", "target", ",", "tau", ")", ":", "\n", "    ", "\"\"\"Synchronizes target networks with exponential moving average.\"\"\"", "\n", "for", "target_param", ",", "param", "in", "zip", "(", "target", ".", "parameters", "(", ")", ",", "source", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "target_param", ".", "data", ".", "copy_", "(", "target_param", ".", "data", "*", "(", "1.0", "-", "tau", ")", "+", "param", ".", "data", "*", "tau", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.hard_update": [[420, 424], ["zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["", "", "def", "hard_update", "(", "source", ",", "target", ")", ":", "\n", "    ", "\"\"\"Synchronizes target networks by copying over parameters directly.\"\"\"", "\n", "for", "target_param", ",", "param", "in", "zip", "(", "target", ".", "parameters", "(", ")", ",", "source", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "target_param", ".", "data", ".", "copy_", "(", "param", ".", "data", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.__init__": [[39, 93], ["safe_control_gym.controllers.base_controller.BaseController.__init__", "safe_control_gym.controllers.sac.sac_utils.SACAgent", "sac.SAC.agent.to", "safe_control_gym.math_and_models.normalization.BaseNormalizer", "safe_control_gym.math_and_models.normalization.BaseNormalizer", "safe_control_gym.utils.logging.ExperimentLogger", "safe_control_gym.envs.env_wrappers.vectorized_env.make_vec_envs", "safe_control_gym.envs.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "env_func", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "safe_control_gym.math_and_models.normalization.MeanStdNormalizer", "safe_control_gym.math_and_models.normalization.RewardStdNormalizer"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.__init__.make_vec_envs"], ["def", "__init__", "(", "self", ",", "\n", "env_func", ",", "\n", "training", "=", "True", ",", "\n", "checkpoint_path", "=", "\"model_latest.pt\"", ",", "\n", "output_dir", "=", "\"temp\"", ",", "\n", "use_gpu", "=", "False", ",", "\n", "seed", "=", "0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env_func", ",", "training", ",", "checkpoint_path", ",", "output_dir", ",", "use_gpu", ",", "seed", ",", "**", "kwargs", ")", "\n", "\n", "# task", "\n", "if", "self", ".", "training", ":", "\n", "# training (+ evaluation)", "\n", "            ", "self", ".", "env", "=", "make_vec_envs", "(", "env_func", ",", "None", ",", "self", ".", "rollout_batch_size", ",", "self", ".", "num_workers", ",", "seed", ")", "\n", "self", ".", "env", "=", "VecRecordEpisodeStatistics", "(", "self", ".", "env", ",", "self", ".", "deque_size", ")", "\n", "self", ".", "eval_env", "=", "env_func", "(", "seed", "=", "seed", "*", "111", ")", "\n", "self", ".", "eval_env", "=", "RecordEpisodeStatistics", "(", "self", ".", "eval_env", ",", "self", ".", "deque_size", ")", "\n", "", "else", ":", "\n", "# testing only", "\n", "            ", "self", ".", "env", "=", "env_func", "(", ")", "\n", "self", ".", "env", "=", "RecordEpisodeStatistics", "(", "self", ".", "env", ")", "\n", "\n", "# agent", "\n", "", "self", ".", "agent", "=", "SACAgent", "(", "self", ".", "env", ".", "observation_space", ",", "\n", "self", ".", "env", ".", "action_space", ",", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "tau", "=", "self", ".", "tau", ",", "\n", "init_temperature", "=", "self", ".", "init_temperature", ",", "\n", "use_entropy_tuning", "=", "self", ".", "use_entropy_tuning", ",", "\n", "target_entropy", "=", "self", ".", "target_entropy", ",", "\n", "actor_lr", "=", "self", ".", "actor_lr", ",", "\n", "critic_lr", "=", "self", ".", "critic_lr", ",", "\n", "entropy_lr", "=", "self", ".", "entropy_lr", ")", "\n", "self", ".", "agent", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# pre-/post-processing", "\n", "self", ".", "obs_normalizer", "=", "BaseNormalizer", "(", ")", "\n", "if", "self", ".", "norm_obs", ":", "\n", "            ", "self", ".", "obs_normalizer", "=", "MeanStdNormalizer", "(", "shape", "=", "self", ".", "env", ".", "observation_space", ".", "shape", ",", "clip", "=", "self", ".", "clip_obs", ",", "epsilon", "=", "1e-8", ")", "\n", "\n", "", "self", ".", "reward_normalizer", "=", "BaseNormalizer", "(", ")", "\n", "if", "self", ".", "norm_reward", ":", "\n", "            ", "self", ".", "reward_normalizer", "=", "RewardStdNormalizer", "(", "gamma", "=", "self", ".", "gamma", ",", "clip", "=", "self", ".", "clip_reward", ",", "epsilon", "=", "1e-8", ")", "\n", "\n", "# logging", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "log_file_out", "=", "True", "\n", "use_tensorboard", "=", "self", ".", "tensorboard", "\n", "", "else", ":", "\n", "# disable logging to texts and tfboard for testing", "\n", "            ", "log_file_out", "=", "False", "\n", "use_tensorboard", "=", "False", "\n", "", "self", ".", "logger", "=", "ExperimentLogger", "(", "output_dir", ",", "log_file_out", "=", "log_file_out", ",", "use_tensorboard", "=", "use_tensorboard", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.reset": [[94, 112], ["sac.SAC.env.add_tracker", "sac.SAC.env.add_tracker", "sac.SAC.eval_env.add_tracker", "sac.SAC.eval_env.add_tracker", "sac.SAC.env.reset", "sac.SAC.obs_normalizer", "safe_control_gym.controllers.sac.sac_utils.SACBuffer", "sac.SAC.env.add_tracker", "sac.SAC.env.add_tracker", "sac.SAC.env.add_tracker"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Prepares for training or testing.\"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "# set up stats tracking", "\n", "            ", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "eval_env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "eval_env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n", "self", ".", "total_steps", "=", "0", "\n", "obs", ",", "_", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "self", ".", "buffer", "=", "SACBuffer", "(", "self", ".", "env", ".", "observation_space", ",", "self", ".", "env", ".", "action_space", ",", "self", ".", "max_buffer_size", ",", "self", ".", "train_batch_size", ")", "\n", "", "else", ":", "\n", "# set up stats tracking", "\n", "            ", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"constraint_values\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "self", ".", "env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.close": [[113, 119], ["sac.SAC.env.close", "sac.SAC.logger.close", "sac.SAC.eval_env.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shuts down and cleans up lingering resources.\"\"\"", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "eval_env", ".", "close", "(", ")", "\n", "", "self", ".", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save": [[120, 143], ["os.path.dirname", "os.makedirs", "torch.save", "sac.SAC.agent.state_dict", "sac.SAC.obs_normalizer.state_dict", "sac.SAC.reward_normalizer.state_dict", "state_dict.update", "safe_control_gym.utils.utils.get_random_state", "sac.SAC.env.get_env_random_state", "sac.SAC.buffer.state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.get_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_env_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict"], ["", "def", "save", "(", "self", ",", "path", ",", "save_buffer", "=", "True", ")", ":", "\n", "        ", "\"\"\"Saves model params and experiment state to checkpoint path.\"\"\"", "\n", "path_dir", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "path_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "state_dict", "=", "{", "\n", "\"agent\"", ":", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "\n", "\"obs_normalizer\"", ":", "self", ".", "obs_normalizer", ".", "state_dict", "(", ")", ",", "\n", "\"reward_normalizer\"", ":", "self", ".", "reward_normalizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "exp_state", "=", "{", "\n", "\"total_steps\"", ":", "self", ".", "total_steps", ",", "\n", "\"obs\"", ":", "self", ".", "obs", ",", "\n", "\"random_state\"", ":", "get_random_state", "(", ")", ",", "\n", "\"env_random_state\"", ":", "self", ".", "env", ".", "get_env_random_state", "(", ")", "\n", "}", "\n", "# latest checkpoint shoud enable save_buffer (for experiment restore),", "\n", "# but intermediate checkpoint shoud not, to save storage (buffer is large)", "\n", "if", "save_buffer", ":", "\n", "                ", "exp_state", "[", "\"buffer\"", "]", "=", "self", ".", "buffer", ".", "state_dict", "(", ")", "\n", "", "state_dict", ".", "update", "(", "exp_state", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load": [[144, 162], ["torch.load", "sac.SAC.agent.load_state_dict", "sac.SAC.obs_normalizer.load_state_dict", "sac.SAC.reward_normalizer.load_state_dict", "safe_control_gym.utils.utils.set_random_state", "sac.SAC.env.set_env_random_state", "sac.SAC.logger.load", "sac.SAC.buffer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.set_env_random_state", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Restores model and experiment given checkpoint path.\"\"\"", "\n", "state", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "# restore params", "\n", "self", ".", "agent", ".", "load_state_dict", "(", "state", "[", "\"agent\"", "]", ")", "\n", "self", ".", "obs_normalizer", ".", "load_state_dict", "(", "state", "[", "\"obs_normalizer\"", "]", ")", "\n", "self", ".", "reward_normalizer", ".", "load_state_dict", "(", "state", "[", "\"reward_normalizer\"", "]", ")", "\n", "\n", "# restore experiment state", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "total_steps", "=", "state", "[", "\"total_steps\"", "]", "\n", "self", ".", "obs", "=", "state", "[", "\"obs\"", "]", "\n", "set_random_state", "(", "state", "[", "\"random_state\"", "]", ")", "\n", "self", ".", "env", ".", "set_env_random_state", "(", "state", "[", "\"env_random_state\"", "]", ")", "\n", "if", "\"buffer\"", "in", "state", ":", "\n", "                ", "self", ".", "buffer", ".", "load_state_dict", "(", "state", "[", "\"buffer\"", "]", ")", "\n", "", "self", ".", "logger", ".", "load", "(", "self", ".", "total_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn": [[163, 196], ["sac.SAC.train_step", "sac.SAC.save", "sac.SAC.logger.info", "os.path.join", "sac.SAC.save", "sac.SAC.run", "sac.SAC.logger.info", "eval_results[].mean", "getattr", "sac.SAC.log_step", "sac.SAC.save", "eval_results[].mean", "eval_results[].std", "eval_results[].mean", "eval_results[].std", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.train_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.log_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.save"], ["", "", "def", "learn", "(", "self", ",", "env", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Performs learning (pre-training, training, fine-tuning, etc).\"\"\"", "\n", "while", "self", ".", "total_steps", "<", "self", ".", "max_env_steps", ":", "\n", "            ", "results", "=", "self", ".", "train_step", "(", ")", "\n", "\n", "# checkpoint", "\n", "if", "self", ".", "total_steps", ">=", "self", ".", "max_env_steps", "or", "(", "self", ".", "save_interval", "and", "self", ".", "total_steps", "%", "self", ".", "save_interval", "==", "0", ")", ":", "\n", "# latest/final checkpoint", "\n", "                ", "self", ".", "save", "(", "self", ".", "checkpoint_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Checkpoint | {}\"", ".", "format", "(", "self", ".", "checkpoint_path", ")", ")", "\n", "", "if", "self", ".", "num_checkpoints", "and", "self", ".", "total_steps", "%", "(", "self", ".", "max_env_steps", "//", "self", ".", "num_checkpoints", ")", "==", "0", ":", "\n", "# intermediate checkpoint", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"checkpoints\"", ",", "\"model_{}.pt\"", ".", "format", "(", "self", ".", "total_steps", ")", ")", "\n", "self", ".", "save", "(", "path", ",", "save_buffer", "=", "False", ")", "\n", "\n", "# eval", "\n", "", "if", "self", ".", "eval_interval", "and", "self", ".", "total_steps", "%", "self", ".", "eval_interval", "==", "0", ":", "\n", "                ", "eval_results", "=", "self", ".", "run", "(", "env", "=", "self", ".", "eval_env", ",", "n_episodes", "=", "self", ".", "eval_batch_size", ")", "\n", "results", "[", "\"eval\"", "]", "=", "eval_results", "\n", "self", ".", "logger", ".", "info", "(", "\"Eval | ep_lengths {:.2f} +/- {:.2f} | ep_return {:.3f} +/- {:.3f}\"", ".", "format", "(", "eval_results", "[", "\"ep_lengths\"", "]", ".", "mean", "(", ")", ",", "\n", "eval_results", "[", "\"ep_lengths\"", "]", ".", "std", "(", ")", ",", "\n", "eval_results", "[", "\"ep_returns\"", "]", ".", "mean", "(", ")", ",", "\n", "eval_results", "[", "\"ep_returns\"", "]", ".", "std", "(", ")", ")", ")", "\n", "# save best model", "\n", "eval_score", "=", "eval_results", "[", "\"ep_returns\"", "]", ".", "mean", "(", ")", "\n", "eval_best_score", "=", "getattr", "(", "self", ",", "\"eval_best_score\"", ",", "-", "np", ".", "infty", ")", "\n", "if", "self", ".", "eval_save_best", "and", "eval_best_score", "<", "eval_score", ":", "\n", "                    ", "self", ".", "eval_best_score", "=", "eval_score", "\n", "self", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"model_best.pt\"", ")", ")", "\n", "\n", "# logging", "\n", "", "", "if", "self", ".", "log_interval", "and", "self", ".", "total_steps", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "self", ".", "log_step", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.run": [[197, 246], ["sac.SAC.agent.eval", "sac.SAC.obs_normalizer.set_read_only", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.reset", "sac.SAC.obs_normalizer", "numpy.asarray", "numpy.asarray", "len", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.step", "sac.SAC.obs_normalizer", "len", "len", "eval_results.update", "safe_control_gym.utils.utils.is_wrapped", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker", "torch.no_grad", "torch.FloatTensor().to", "sac.SAC.agent.ac.act", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.render", "frames.append", "print", "numpy.asarray.append", "numpy.asarray.append", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.reset", "numpy.asarray", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.render", "safe_control_gym.envs.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.queued_stats.items", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.eval", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.set_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.is_wrapped", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render"], ["", "", "", "def", "run", "(", "self", ",", "env", "=", "None", ",", "render", "=", "False", ",", "n_episodes", "=", "10", ",", "verbose", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Runs evaluation with current policy.\"\"\"", "\n", "self", ".", "agent", ".", "eval", "(", ")", "\n", "self", ".", "obs_normalizer", ".", "set_read_only", "(", ")", "\n", "if", "env", "is", "None", ":", "\n", "            ", "env", "=", "self", ".", "env", "\n", "", "else", ":", "\n", "            ", "if", "not", "is_wrapped", "(", "env", ",", "RecordEpisodeStatistics", ")", ":", "\n", "                ", "env", "=", "RecordEpisodeStatistics", "(", "env", ",", "n_episodes", ")", "\n", "# Add eposodic stats to be tracked.", "\n", "env", ".", "add_tracker", "(", "\"constraint_violation\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"constraint_values\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "env", ".", "add_tracker", "(", "\"mse\"", ",", "0", ",", "mode", "=", "\"queue\"", ")", "\n", "\n", "", "", "obs", ",", "info", "=", "env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "ep_returns", ",", "ep_lengths", "=", "[", "]", ",", "[", "]", "\n", "frames", "=", "[", "]", "\n", "\n", "while", "len", "(", "ep_returns", ")", "<", "n_episodes", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "obs", "=", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "action", "=", "self", ".", "agent", ".", "ac", ".", "act", "(", "obs", ",", "deterministic", "=", "True", ")", "\n", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "render", ":", "\n", "                ", "env", ".", "render", "(", ")", "\n", "frames", ".", "append", "(", "env", ".", "render", "(", "\"rgb_array\"", ")", ")", "\n", "", "if", "verbose", ":", "\n", "                ", "print", "(", "\"obs {} | act {}\"", ".", "format", "(", "obs", ",", "action", ")", ")", "\n", "\n", "", "if", "done", ":", "\n", "                ", "assert", "\"episode\"", "in", "info", "\n", "ep_returns", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"r\"", "]", ")", "\n", "ep_lengths", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"l\"", "]", ")", "\n", "obs", ",", "info", "=", "env", ".", "reset", "(", ")", "\n", "", "obs", "=", "self", ".", "obs_normalizer", "(", "obs", ")", "\n", "\n", "# collect evaluation results", "\n", "", "ep_lengths", "=", "np", ".", "asarray", "(", "ep_lengths", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "ep_returns", ")", "\n", "eval_results", "=", "{", "\"ep_returns\"", ":", "ep_returns", ",", "\"ep_lengths\"", ":", "ep_lengths", "}", "\n", "if", "len", "(", "frames", ")", ">", "0", ":", "\n", "            ", "eval_results", "[", "\"frames\"", "]", "=", "frames", "\n", "# Other episodic stats from evaluation env.", "\n", "", "if", "len", "(", "env", ".", "queued_stats", ")", ">", "0", ":", "\n", "            ", "queued_stats", "=", "{", "k", ":", "np", ".", "asarray", "(", "v", ")", "for", "k", ",", "v", "in", "env", ".", "queued_stats", ".", "items", "(", ")", "}", "\n", "eval_results", ".", "update", "(", "queued_stats", ")", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.train_step": [[247, 314], ["sac.SAC.agent.train", "sac.SAC.obs_normalizer.unset_read_only", "time.time", "sac.SAC.env.step", "sac.SAC.obs_normalizer", "sac.SAC.reward_normalizer", "enumerate", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._unflatten_obs", "mask.copy", "zip", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_obs", "sac.SAC.buffer.push", "collections.defaultdict", "collections.defaultdict.update", "numpy.stack", "numpy.asarray", "len", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._unflatten_obs", "range", "torch.no_grad", "sac.SAC.agent.ac.act", "terminal_idx.append", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._unflatten_obs.append", "sac.SAC.obs_normalizer", "sac.SAC.buffer.sample", "sac.SAC.agent.update", "sac.SAC.items", "sum", "len", "collections.defaultdict.items", "sac.SAC.env.action_space.sample", "torch.FloatTensor().to", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_obs", "results[].append", "time.time", "range", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.unset_read_only", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._unflatten_obs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_obs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACBuffer.push", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._unflatten_obs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.SACAgent.to", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_obs"], ["", "def", "train_step", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Performs a training step.\"\"\"", "\n", "self", ".", "agent", ".", "train", "(", ")", "\n", "self", ".", "obs_normalizer", ".", "unset_read_only", "(", ")", "\n", "obs", "=", "self", ".", "obs", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "total_steps", "<", "self", ".", "warm_up_steps", ":", "\n", "            ", "act", "=", "np", ".", "stack", "(", "[", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "self", ".", "rollout_batch_size", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "act", "=", "self", ".", "agent", ".", "ac", ".", "act", "(", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ",", "deterministic", "=", "False", ")", "\n", "", "", "next_obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "act", ")", "\n", "\n", "next_obs", "=", "self", ".", "obs_normalizer", "(", "next_obs", ")", "\n", "rew", "=", "self", ".", "reward_normalizer", "(", "rew", ",", "done", ")", "\n", "mask", "=", "1", "-", "np", ".", "asarray", "(", "done", ")", "\n", "\n", "# time truncation is not true termination", "\n", "terminal_idx", ",", "terminal_obs", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "inf", "in", "enumerate", "(", "info", "[", "\"n\"", "]", ")", ":", "\n", "            ", "if", "\"terminal_info\"", "not", "in", "inf", ":", "\n", "                ", "continue", "\n", "", "inff", "=", "inf", "[", "\"terminal_info\"", "]", "\n", "if", "\"TimeLimit.truncated\"", "in", "inff", "and", "inff", "[", "\"TimeLimit.truncated\"", "]", ":", "\n", "                ", "terminal_idx", ".", "append", "(", "idx", ")", "\n", "terminal_obs", ".", "append", "(", "inf", "[", "\"terminal_observation\"", "]", ")", "\n", "", "", "if", "len", "(", "terminal_obs", ")", ">", "0", ":", "\n", "            ", "terminal_obs", "=", "_unflatten_obs", "(", "self", ".", "obs_normalizer", "(", "_flatten_obs", "(", "terminal_obs", ")", ")", ")", "\n", "\n", "# collect the true next states and masks (accounting for time truncation)", "\n", "", "true_next_obs", "=", "_unflatten_obs", "(", "next_obs", ")", "\n", "true_mask", "=", "mask", ".", "copy", "(", ")", "\n", "for", "idx", ",", "term_ob", "in", "zip", "(", "terminal_idx", ",", "terminal_obs", ")", ":", "\n", "            ", "true_next_obs", "[", "idx", "]", "=", "term_ob", "\n", "true_mask", "[", "idx", "]", "=", "1.0", "\n", "", "true_next_obs", "=", "_flatten_obs", "(", "true_next_obs", ")", "\n", "\n", "self", ".", "buffer", ".", "push", "(", "{", "\n", "\"obs\"", ":", "obs", ",", "\n", "\"act\"", ":", "act", ",", "\n", "\"rew\"", ":", "rew", ",", "\n", "# \"next_obs\": next_obs,", "\n", "# \"mask\": mask,", "\n", "\"next_obs\"", ":", "true_next_obs", ",", "\n", "\"mask\"", ":", "true_mask", ",", "\n", "}", ")", "\n", "obs", "=", "next_obs", "\n", "\n", "self", ".", "obs", "=", "obs", "\n", "self", ".", "total_steps", "+=", "self", ".", "rollout_batch_size", "\n", "\n", "# learn", "\n", "results", "=", "defaultdict", "(", "list", ")", "\n", "if", "self", ".", "total_steps", ">", "self", ".", "warm_up_steps", "and", "not", "self", ".", "total_steps", "%", "self", ".", "train_interval", ":", "\n", "# Regardless of how long you wait between updates,", "\n", "# the ratio of env steps to gradient steps is locked to 1.", "\n", "# alternatively, can update once each step", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "train_interval", ")", ":", "\n", "                ", "batch", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "train_batch_size", ",", "self", ".", "device", ")", "\n", "res", "=", "self", ".", "agent", ".", "update", "(", "batch", ")", "\n", "for", "k", ",", "v", "in", "res", ".", "items", "(", ")", ":", "\n", "                    ", "results", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "", "", "results", "=", "{", "k", ":", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "results", ".", "update", "(", "{", "\"step\"", ":", "self", ".", "total_steps", ",", "\"elapsed_time\"", ":", "time", ".", "time", "(", ")", "-", "start", "}", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.log_step": [[315, 376], ["sac.SAC.logger.add_scalars", "numpy.asarray", "numpy.asarray", "numpy.asarray", "sac.SAC.logger.add_scalars", "sac.SAC.logger.add_scalars", "sac.SAC.logger.dump_scalars", "sac.SAC.logger.add_scalars", "sac.SAC.logger.add_scalars", "numpy.asarray.mean", "numpy.asarray.mean", "numpy.asarray.mean", "eval_ep_lengths.mean", "eval_ep_returns.mean", "eval_constraint_violation.mean", "eval_mse.mean"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.dump_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.logging.ExperimentLogger.add_scalars"], ["", "def", "log_step", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Does logging after a training step.\"\"\"", "\n", "step", "=", "results", "[", "\"step\"", "]", "\n", "# runner stats", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"step\"", ":", "step", ",", "\n", "\"time\"", ":", "results", "[", "\"elapsed_time\"", "]", ",", "\n", "\"progress\"", ":", "step", "/", "self", ".", "max_env_steps", ",", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"time\"", ",", "\n", "write", "=", "False", ",", "\n", "write_tb", "=", "False", ")", "\n", "\n", "# learning stats", "\n", "if", "\"policy_loss\"", "in", "results", ":", "\n", "            ", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "k", ":", "results", "[", "k", "]", "\n", "for", "k", "in", "[", "\"policy_loss\"", ",", "\"critic_loss\"", ",", "\"entropy_loss\"", "]", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"loss\"", ")", "\n", "\n", "# performance stats", "\n", "", "ep_lengths", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "length_queue", ")", "\n", "ep_returns", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "return_queue", ")", "\n", "ep_constraint_violation", "=", "np", ".", "asarray", "(", "self", ".", "env", ".", "queued_stats", "[", "\"constraint_violation\"", "]", ")", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"ep_length\"", ":", "ep_lengths", ".", "mean", "(", ")", ",", "\n", "\"ep_return\"", ":", "ep_returns", ".", "mean", "(", ")", ",", "\n", "\"ep_reward\"", ":", "(", "ep_returns", "/", "ep_lengths", ")", ".", "mean", "(", ")", ",", "\n", "\"ep_constraint_violation\"", ":", "ep_constraint_violation", ".", "mean", "(", ")", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"stat\"", ")", "\n", "\n", "# total constraint violation during learning", "\n", "total_violations", "=", "self", ".", "env", ".", "accumulated_stats", "[", "\"constraint_violation\"", "]", "\n", "self", ".", "logger", ".", "add_scalars", "(", "{", "\"constraint_violation\"", ":", "total_violations", "}", ",", "step", ",", "prefix", "=", "\"stat\"", ")", "\n", "\n", "if", "\"eval\"", "in", "results", ":", "\n", "            ", "eval_ep_lengths", "=", "results", "[", "\"eval\"", "]", "[", "\"ep_lengths\"", "]", "\n", "eval_ep_returns", "=", "results", "[", "\"eval\"", "]", "[", "\"ep_returns\"", "]", "\n", "eval_constraint_violation", "=", "results", "[", "\"eval\"", "]", "[", "\"constraint_violation\"", "]", "\n", "eval_mse", "=", "results", "[", "\"eval\"", "]", "[", "\"mse\"", "]", "\n", "self", ".", "logger", ".", "add_scalars", "(", "\n", "{", "\n", "\"ep_length\"", ":", "eval_ep_lengths", ".", "mean", "(", ")", ",", "\n", "\"ep_return\"", ":", "eval_ep_returns", ".", "mean", "(", ")", ",", "\n", "\"ep_reward\"", ":", "(", "eval_ep_returns", "/", "eval_ep_lengths", ")", ".", "mean", "(", ")", ",", "\n", "\"constraint_violation\"", ":", "eval_constraint_violation", ".", "mean", "(", ")", ",", "\n", "\"mse\"", ":", "eval_mse", ".", "mean", "(", ")", "\n", "}", ",", "\n", "step", ",", "\n", "prefix", "=", "\"stat_eval\"", ")", "\n", "\n", "# print summary table", "\n", "", "self", ".", "logger", ".", "dump_scalars", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.__init__": [[53, 199], ["benchmark_env.Task", "int", "benchmark_env.Cost", "benchmark_env.BenchmarkEnv._set_action_space", "benchmark_env.BenchmarkEnv._set_observation_space", "hasattr", "benchmark_env.BenchmarkEnv._setup_constraints", "benchmark_env.BenchmarkEnv._setup_disturbances", "benchmark_env.BenchmarkEnv.seed", "os.getcwd", "ValueError", "numpy.eye", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._set_action_space", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._set_observation_space", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._setup_constraints", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._setup_disturbances", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed"], ["def", "__init__", "(", "self", ",", "\n", "output_dir", "=", "None", ",", "\n", "seed", "=", "None", ",", "\n", "info_in_reset", ":", "bool", "=", "False", ",", "\n", "gui", ":", "bool", "=", "False", ",", "\n", "verbose", ":", "bool", "=", "False", ",", "\n", "normalized_rl_action_space", ":", "bool", "=", "False", ",", "\n", "# Task.", "\n", "task", ":", "Task", "=", "Task", ".", "STABILIZATION", ",", "\n", "task_info", "=", "None", ",", "\n", "cost", ":", "Cost", "=", "Cost", ".", "RL_REWARD", ",", "\n", "pyb_freq", ":", "int", "=", "50", ",", "\n", "ctrl_freq", ":", "int", "=", "50", ",", "\n", "episode_len_sec", ":", "int", "=", "5", ",", "\n", "# Initialization.", "\n", "init_state", "=", "None", ",", "\n", "randomized_init", ":", "bool", "=", "True", ",", "\n", "init_state_randomization_info", "=", "None", ",", "\n", "# Domain randomization.", "\n", "prior_prop", "=", "None", ",", "\n", "inertial_prop", "=", "None", ",", "\n", "randomized_inertial_prop", ":", "bool", "=", "False", ",", "\n", "inertial_prop_randomization_info", "=", "None", ",", "\n", "# Constraint.", "\n", "constraints", "=", "None", ",", "\n", "done_on_violation", ":", "bool", "=", "False", ",", "\n", "use_constraint_penalty", "=", "False", ",", "\n", "constraint_penalty", "=", "-", "1", ",", "\n", "# Disturbance.", "\n", "disturbances", "=", "None", ",", "\n", "adversary_disturbance", "=", "None", ",", "\n", "adversary_disturbance_offset", "=", "0.0", ",", "\n", "adversary_disturbance_scale", "=", "0.01", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization method for BenchmarkEnv.\n\n        Args:\n            output_dir (str, optional): path to directory to save any env outputs.\n            seed (int, optional): Seed for the random number generator.\n            info_in_reset (bool, optional): Whether .reset() returns a dictionary with the\n                                            environment's symbolic model.\n            gui (bool, optional): Whether to show PyBullet's GUI.\n            verbose (bool, optional): If to suppress environment print statetments.\n            normalized_rl_action_space (bool, optional): Whether to normalize the action space.\n            task: (Task, optional): The environment's task (stabilization or traj. tracking).\n            task_info (dict, optional): A dictionary with the information used to generate the \n                task X and U references.\n            cost (Cost, optional): Cost function choice used to compute the reward in .step().\n            pyb_freq (int, optional): The frequency at which PyBullet steps (a multiple of ctrl_freq).\n            ctrl_freq (int, optional): The frequency at which the environment steps.\n            episode_len_sec (int, optional): Maximum episode duration in seconds.\n            init_state  (ndarray/dict, optional): The initial state of the environment \n            randomized_init (bool, optional): Whether to randomize the initial state.\n            init_state_randomization_info (dict, optional): A dictionary with information used to \n                randomize the initial state.\n            prior_prop (dict, optional): The prior inertial properties of the environment.\n            inertial_prop (dict, optional): The ground truth inertial properties of the environment.\n            randomized_inertial_prop (bool, optional): Whether to randomize the inertial properties.\n            inertial_prop_randomization_info (dict, optional): A dictionary with information used \n                to randomize the inert. properties.\n            constraints (Dict, optional): Dictionary to specify the constraints being used.\n            done_on_violation (bool, optional): Whether to return done==True on a constraint violation.\n            use_constraint_penalty (bool, optional): if to use shaped reward to penalize potential \n                constraint violation.\n            constraint_penalty (float, optional): constraint penalty cost for reward shaping. \n            disturbances (dict, optional): Dictionary to specify disturbances being used. \n            adversary_disturbance (str, optional): if to use adversary/external disturbance.\n            adversary_disturbance_offset (float, optional): parameterizes the offset of the adversary disturbance.\n            adversary_disturbance_scale (float, optional): parameterizes magnitude of adversary disturbance.\n\n        Attributes:\n            id (int): unique identifier of the current env instance (among other instances).\n\n        \"\"\"", "\n", "# Assign unique ID based on env instance count.", "\n", "self", ".", "id", "=", "self", ".", "__class__", ".", "_count", "\n", "self", ".", "__class__", ".", "_count", "+=", "1", "\n", "# Directory to save any env output.", "\n", "if", "output_dir", "is", "None", ":", "\n", "            ", "output_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "GUI", "=", "gui", "\n", "self", ".", "VERBOSE", "=", "verbose", "\n", "# Task.", "\n", "self", ".", "TASK", "=", "Task", "(", "task", ")", "\n", "if", "task_info", "is", "not", "None", ":", "\n", "            ", "self", ".", "TASK_INFO", "=", "task_info", "\n", "# Set timing constants.", "\n", "", "self", ".", "CTRL_FREQ", "=", "ctrl_freq", "\n", "self", ".", "PYB_FREQ", "=", "pyb_freq", "\n", "if", "self", ".", "PYB_FREQ", "%", "self", ".", "CTRL_FREQ", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR] in BenchmarkEnv.__init__(), pyb_freq is not divisible by env_freq.\"", ")", "\n", "", "self", ".", "PYB_STEPS_PER_CTRL", "=", "int", "(", "self", ".", "PYB_FREQ", "/", "self", ".", "CTRL_FREQ", ")", "\n", "self", ".", "CTRL_TIMESTEP", "=", "1.", "/", "self", ".", "CTRL_FREQ", "\n", "self", ".", "PYB_TIMESTEP", "=", "1.", "/", "self", ".", "PYB_FREQ", "\n", "# Maximum episode length in seconds.", "\n", "self", ".", "EPISODE_LEN_SEC", "=", "episode_len_sec", "\n", "self", ".", "CTRL_STEPS", "=", "self", ".", "EPISODE_LEN_SEC", "*", "self", ".", "CTRL_FREQ", "\n", "# Initialization of state.", "\n", "self", ".", "INIT_STATE", "=", "init_state", "\n", "self", ".", "RANDOMIZED_INIT", "=", "randomized_init", "\n", "if", "init_state_randomization_info", "is", "not", "None", ":", "\n", "            ", "self", ".", "INIT_STATE_RAND_INFO", "=", "init_state_randomization_info", "\n", "# Domain randomization on parameters.", "\n", "", "self", ".", "PRIOR_PROP", "=", "prior_prop", "\n", "self", ".", "INERTIAL_PROP", "=", "inertial_prop", "\n", "self", ".", "RANDOMIZED_INERTIAL_PROP", "=", "randomized_inertial_prop", "\n", "if", "inertial_prop_randomization_info", "is", "not", "None", ":", "\n", "            ", "self", ".", "INERTIAL_PROP_RAND_INFO", "=", "inertial_prop_randomization_info", "\n", "# Set up action and observation space.", "\n", "", "self", ".", "NORMALIZED_RL_ACTION_SPACE", "=", "normalized_rl_action_space", "\n", "# Define cost-related quantities.", "\n", "self", ".", "COST", "=", "Cost", "(", "cost", ")", "\n", "# Create action and observation spaces.", "\n", "self", ".", "_set_action_space", "(", ")", "\n", "self", ".", "_set_observation_space", "(", ")", "\n", "# Store action (input) and observation spaces dimensions.", "\n", "# if observation is not the same as state, env should also have a `state_space`", "\n", "# and `state_dim` is queried from it.", "\n", "self", ".", "action_dim", "=", "self", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "obs_dim", "=", "self", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "if", "hasattr", "(", "self", ",", "\"state_space\"", ")", ":", "\n", "            ", "self", ".", "state_dim", "=", "self", ".", "state_space", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "state_dim", "=", "self", ".", "obs_dim", "\n", "# Default Q and R matrices for quadratic cost.", "\n", "", "if", "self", ".", "COST", "==", "Cost", ".", "QUADRATIC", ":", "\n", "            ", "self", ".", "Q", "=", "np", ".", "eye", "(", "self", ".", "observation_space", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "R", "=", "np", ".", "eye", "(", "self", ".", "action_space", ".", "shape", "[", "0", "]", ")", "\n", "# Set constraint info.", "\n", "", "self", ".", "CONSTRAINTS", "=", "constraints", "\n", "self", ".", "DONE_ON_VIOLATION", "=", "done_on_violation", "\n", "self", ".", "use_constraint_penalty", "=", "use_constraint_penalty", "\n", "self", ".", "constraint_penalty", "=", "constraint_penalty", "\n", "self", ".", "_setup_constraints", "(", ")", "\n", "# Set disturbance info.", "\n", "self", ".", "DISTURBANCES", "=", "disturbances", "\n", "self", ".", "adversary_disturbance", "=", "adversary_disturbance", "\n", "self", ".", "adversary_disturbance_offset", "=", "adversary_disturbance_offset", "\n", "self", ".", "adversary_disturbance_scale", "=", "adversary_disturbance_scale", "\n", "self", ".", "_setup_disturbances", "(", ")", "\n", "# Default seed None means pure randomness/no seeding.", "\n", "self", ".", "seed", "(", "seed", ")", "\n", "self", ".", "initial_reset", "=", "False", "\n", "self", ".", "INFO_IN_RESET", "=", "info_in_reset", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.seed": [[200, 216], ["gym.utils.seeding.np_random", "benchmark_env.BenchmarkEnv.action_space.seed", "benchmark_env.BenchmarkEnv.disturbances.items", "disturbs.seed"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed"], ["", "def", "seed", "(", "self", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Sets up a random number generator for a given seed.\n        \n        Remember to seed all random generators, currently in\n        - env\n        - action_space\n        - disturbances \n        \n        \"\"\"", "\n", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "self", ".", "action_space", ".", "seed", "(", "seed", ")", "\n", "for", "_", ",", "disturbs", "in", "self", ".", "disturbances", ".", "items", "(", ")", ":", "\n", "            ", "disturbs", ".", "seed", "(", "self", ")", "\n", "", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.set_cost_function_param": [[217, 234], ["RuntimeError"], "methods", ["None"], ["", "def", "set_cost_function_param", "(", "self", ",", "\n", "Q", ",", "\n", "R", "\n", ")", ":", "\n", "        ", "\"\"\"Set the cost function parameters.\n\n        Args:\n            Q (np.array): State weight matrix (nx by nx).\n            R (np.array): Input weight matrix (nu by nu).\n\n        \"\"\"", "\n", "if", "not", "self", ".", "initial_reset", ":", "\n", "            ", "self", ".", "Q", "=", "Q", "\n", "self", ".", "R", "=", "R", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'[ERROR] env.set_cost_function_param() cannot be called after the first reset of the environment.'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.set_adversary_control": [[236, 246], ["numpy.clip", "RuntimeError"], "methods", ["None"], ["", "", "def", "set_adversary_control", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Sets disturbance by an adversary controller, called before (each) step().\n\n        \"\"\"", "\n", "if", "self", ".", "adversary_disturbance", "is", "not", "None", ":", "\n", "            ", "clipped_adv_action", "=", "np", ".", "clip", "(", "action", ",", "self", ".", "adversary_action_space", ".", "low", ",", "self", ".", "adversary_action_space", ".", "high", ")", "\n", "self", ".", "adv_action", "=", "clipped_adv_action", "*", "self", ".", "adversary_disturbance_scale", "+", "self", ".", "adversary_disturbance_offset", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"[ERROR] adversary_disturbance does not exist, env.set_adversary_control() cannot be called.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._check_initial_reset": [[248, 255], ["RuntimeError"], "methods", ["None"], ["", "", "def", "_check_initial_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Makes sure that .reset() is called at least once before .step().\n\n        \"\"\"", "\n", "if", "not", "self", ".", "initial_reset", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"[ERROR] You must call env.reset() at least once before using env.step().\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._randomize_values_by_info": [[257, 289], ["copy.deepcopy", "copy.deepcopy", "getattr", "rand_info_copy[].pop", "getattr.", "rand_info_copy[].pop"], "methods", ["None"], ["", "", "def", "_randomize_values_by_info", "(", "self", ",", "\n", "original_values", ",", "\n", "randomization_info", "\n", ")", ":", "\n", "        ", "\"\"\"Randomizes a list of values according to desired distributions.\n\n        Args:\n            original_values (dict): a dict of orginal values.\n            randomization_info (dict): A dictionary containing information about the distributions\n                                       used to randomize original_values.\n\n        Returns:\n            dict: A dict of randomized values.\n\n        \"\"\"", "\n", "# Start from a copy of the original values.", "\n", "randomized_values", "=", "copy", ".", "deepcopy", "(", "original_values", ")", "\n", "# Copy the info dict to parse it with \"pop\".", "\n", "rand_info_copy", "=", "copy", ".", "deepcopy", "(", "randomization_info", ")", "\n", "# Randomized and replace values for which randomization info are given.", "\n", "for", "key", "in", "original_values", ":", "\n", "            ", "if", "key", "in", "rand_info_copy", ":", "\n", "# Get distribution removing it from info dict.", "\n", "                ", "distrib", "=", "getattr", "(", "self", ".", "np_random", ",", "\n", "rand_info_copy", "[", "key", "]", ".", "pop", "(", "\"distrib\"", ")", ")", "\n", "# Pop positional args.", "\n", "d_args", "=", "rand_info_copy", "[", "key", "]", ".", "pop", "(", "\"args\"", ",", "[", "]", ")", "\n", "# Keyword args are just anything left.", "\n", "d_kwargs", "=", "rand_info_copy", "[", "key", "]", "\n", "# Randomize (adding to the original values).", "\n", "randomized_values", "[", "key", "]", "+=", "distrib", "(", "*", "d_args", ",", "**", "d_kwargs", ")", "\n", "", "", "return", "randomized_values", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._setup_symbolic": [[290, 293], ["None"], "methods", ["None"], ["", "def", "_setup_symbolic", "(", "self", ")", ":", "\n", "        ", "\"\"\"Creates a symbolic (CasADi) model for dynamics and cost.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._setup_disturbances": [[294, 311], ["benchmark_env.BenchmarkEnv.DISTURBANCES.items", "gym.spaces.Box", "safe_control_gym.envs.disturbances.create_disturbance_list"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.create_disturbance_list"], ["", "def", "_setup_disturbances", "(", "self", ")", ":", "\n", "        ", "\"\"\"Creates attributes and action spaces for the disturbances.\"\"\"", "\n", "# Default: no passive disturbances.", "\n", "self", ".", "disturbances", "=", "{", "}", "\n", "if", "self", ".", "DISTURBANCES", "is", "not", "None", ":", "\n", "            ", "for", "mode", ",", "disturb_specs", "in", "self", ".", "DISTURBANCES", ".", "items", "(", ")", ":", "\n", "                ", "assert", "mode", "in", "self", ".", "DISTURBANCE_MODES", ",", "\"[ERROR] in BenchmarkEnv._setup_disturbances(), disturbance mode not available.\"", "\n", "mode_shared_args", "=", "self", ".", "DISTURBANCE_MODES", "[", "mode", "]", "\n", "self", ".", "disturbances", "[", "mode", "]", "=", "create_disturbance_list", "(", "disturb_specs", ",", "mode_shared_args", ",", "self", ")", "\n", "# Adversary disturbance (set from outside of env, active/non-passive).", "\n", "", "", "if", "self", ".", "adversary_disturbance", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "adversary_disturbance", "in", "self", ".", "DISTURBANCE_MODES", ",", "\"[ERROR] in Cartpole._setup_disturbances()\"", "\n", "shared_args", "=", "self", ".", "DISTURBANCE_MODES", "[", "self", ".", "adversary_disturbance", "]", "\n", "dim", "=", "shared_args", "[", "\"dim\"", "]", "\n", "self", ".", "adversary_action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "dim", ",", ")", ")", "\n", "# Adversary obs are the same as those of the protagonist.", "\n", "self", ".", "adversary_observation_space", "=", "self", ".", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._setup_constraints": [[312, 319], ["safe_control_gym.envs.constraints.create_constraint_list"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.create_constraint_list"], ["", "", "def", "_setup_constraints", "(", "self", ")", ":", "\n", "        ", "\"\"\"Creates a list of constraints as an attribute.\"\"\"", "\n", "self", ".", "constraints", "=", "None", "\n", "self", ".", "num_constraints", "=", "0", "\n", "if", "self", ".", "CONSTRAINTS", "is", "not", "None", ":", "\n", "            ", "self", ".", "constraints", "=", "create_constraint_list", "(", "self", ".", "CONSTRAINTS", ",", "self", ".", "AVAILABLE_CONSTRAINTS", ",", "self", ")", "\n", "self", ".", "num_constraints", "=", "self", ".", "constraints", ".", "num_constraints", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._set_action_space": [[320, 325], ["None"], "methods", ["None"], ["", "", "def", "_set_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Defines the action space of the environment.\n        \n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._set_observation_space": [[326, 335], ["None"], "methods", ["None"], ["", "def", "_set_observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Defines the observation space of the environment.\n\n        Sets `self.observation_space`, if observation is not identical to state,\n        e.g. in RL where obs is [state, goal] or angle is converted to sine & cosine,\n        additionally sets a `self.state_space`.\n        \n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.before_reset": [[336, 351], ["benchmark_env.BenchmarkEnv.disturbances.keys", "benchmark_env.BenchmarkEnv.disturbances[].reset"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["", "def", "before_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Pre-processing before calling `.reset()`.\n        \n        \"\"\"", "\n", "# Housekeeping variables.", "\n", "self", ".", "initial_reset", "=", "True", "\n", "self", ".", "pyb_step_counter", "=", "0", "\n", "self", ".", "ctrl_step_counter", "=", "0", "\n", "self", ".", "current_raw_input_action", "=", "None", "\n", "self", ".", "current_preprocessed_action", "=", "None", "\n", "# Reset the disturbances.", "\n", "for", "mode", "in", "self", ".", "disturbances", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "disturbances", "[", "mode", "]", ".", "reset", "(", "self", ")", "\n", "", "if", "self", ".", "adversary_disturbance", "is", "not", "None", ":", "\n", "            ", "self", ".", "adv_action", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.after_reset": [[352, 360], ["benchmark_env.BenchmarkEnv.constraints.get_values"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_values"], ["", "", "def", "after_reset", "(", "self", ",", "obs", ",", "info", ")", ":", "\n", "        ", "\"\"\"Post-processing after calling `.reset()`.\n\n        \"\"\"", "\n", "# Add initial constraint info (no action/input yet, so only state-based constraints)", "\n", "if", "self", ".", "constraints", "is", "not", "None", ":", "\n", "            ", "info", "[", "\"constraint_values\"", "]", "=", "self", ".", "constraints", ".", "get_values", "(", "self", ",", "only_state", "=", "True", ")", "\n", "", "return", "obs", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._preprocess_control": [[361, 369], ["None"], "methods", ["None"], ["", "def", "_preprocess_control", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Pre-processes the action passed to `.step()`, default is identity.\n\n        It's suggested that you set `self.current_preprocessed_action` here,\n        if you ever need to use it later on (e.g. to compute reward/cost).\n        \n        \"\"\"", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.before_step": [[370, 381], ["benchmark_env.BenchmarkEnv._check_initial_reset", "benchmark_env.BenchmarkEnv._preprocess_control"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._check_initial_reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._preprocess_control"], ["", "def", "before_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Pre-processing before calling `.step()`.\n\n        \"\"\"", "\n", "# Sanity check (reset at least once).", "\n", "self", ".", "_check_initial_reset", "(", ")", "\n", "# Save the raw input action.", "\n", "self", ".", "current_raw_input_action", "=", "action", "\n", "# Pre-process/clip the action", "\n", "processed_action", "=", "self", ".", "_preprocess_control", "(", "action", ")", "\n", "return", "processed_action", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.after_step": [[382, 416], ["benchmark_env.BenchmarkEnv.constraints.get_values", "benchmark_env.BenchmarkEnv.constraints.is_violated", "benchmark_env.BenchmarkEnv.constraints.is_almost_active"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_values", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.is_violated", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.is_almost_active"], ["", "def", "after_step", "(", "self", ",", "obs", ",", "rew", ",", "done", ",", "info", ")", ":", "\n", "        ", "\"\"\"Post-processing after calling `.step()`.\n\n        \"\"\"", "\n", "# Increment counters ", "\n", "self", ".", "pyb_step_counter", "+=", "self", ".", "PYB_STEPS_PER_CTRL", "\n", "self", ".", "ctrl_step_counter", "+=", "1", "\n", "\n", "# Terminate when (any) constraint is violated.", "\n", "# here we cache the constraint values `c_value`, so we only evaluate the constraints once,", "\n", "# but use it in 1) info dict; 2) check constraint violation; 3) check near constraint violation/almost active.", "\n", "# it also allows stateful constraint, where evaluation/update should only be done once per time step.", "\n", "c_value", "=", "None", "\n", "if", "self", ".", "constraints", "is", "not", "None", ":", "\n", "            ", "c_value", "=", "self", ".", "constraints", ".", "get_values", "(", "self", ")", "\n", "info", "[", "\"constraint_values\"", "]", "=", "c_value", "\n", "if", "self", ".", "constraints", ".", "is_violated", "(", "self", ",", "c_value", "=", "c_value", ")", ":", "\n", "                ", "info", "[", "\"constraint_violation\"", "]", "=", "1", "\n", "if", "self", ".", "DONE_ON_VIOLATION", ":", "\n", "                    ", "done", "=", "True", "\n", "", "", "else", ":", "\n", "                ", "info", "[", "\"constraint_violation\"", "]", "=", "0", "\n", "\n", "# Apply penalized reward when close to constraint violation", "\n", "", "", "if", "self", ".", "COST", "==", "Cost", ".", "RL_REWARD", ":", "\n", "            ", "if", "self", ".", "constraints", "is", "not", "None", "and", "self", ".", "use_constraint_penalty", "and", "self", ".", "constraints", ".", "is_almost_active", "(", "self", ",", "c_value", "=", "c_value", ")", ":", "\n", "                ", "rew", "+=", "self", ".", "constraint_penalty", "\n", "\n", "# Terminate when reaching time limit,", "\n", "# but distinguish between done due to true termination or time limit reached ", "\n", "", "", "if", "self", ".", "ctrl_step_counter", ">=", "self", ".", "CTRL_STEPS", ":", "\n", "            ", "info", "[", "\"TimeLimit.truncated\"", "]", "=", "not", "done", "\n", "done", "=", "True", "\n", "", "return", "obs", ",", "rew", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._generate_trajectory": [[417, 472], ["numpy.array", "numpy.arange", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "ValueError", "direction_list.index", "direction_list.index", "ValueError", "benchmark_env.BenchmarkEnv._get_coordinates", "numpy.linalg.norm", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._get_coordinates"], ["", "def", "_generate_trajectory", "(", "self", ",", "\n", "traj_type", "=", "\"figure8\"", ",", "\n", "traj_length", "=", "10.0", ",", "\n", "num_cycles", "=", "1", ",", "\n", "traj_plane", "=", "\"xy\"", ",", "\n", "position_offset", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", ",", "\n", "scaling", "=", "1.0", ",", "\n", "sample_time", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Generates a 2D trajectory.\n\n        Args:\n            traj_type (str, optional): The type of trajectory (circle, square, figure8).\n            traj_length (float, optional): The length of the trajectory in seconds.\n            num_cycles (int, optional): The number of cycles within the length.\n            traj_plane (str, optional): The plane of the trajectory (e.g. \"xz\").\n            position_offset (ndarray, optional): An initial position offset in the plane.\n            scaling (float, optional): Scaling factor for the trajectory.\n            sample_time (float, optional): The sampling timestep of the trajectory.\n\n        Returns:\n            ndarray: The positions in x, y, z of the trajectory sampled for its entire duration.\n            ndarray: The velocities in x, y, z of the trajectory sampled for its entire duration.\n            ndarray: The scalar speed of the trajectory sampled for its entire duration.\n\n        \"\"\"", "\n", "# Get trajectory type.", "\n", "valid_traj_type", "=", "[", "\"circle\"", ",", "\"square\"", ",", "\"figure8\"", "]", "\n", "if", "traj_type", "not", "in", "valid_traj_type", ":", "\n", "            ", "raise", "ValueError", "(", "\"Trajectory type should be one of [circle, square, figure8].\"", ")", "\n", "", "traj_period", "=", "traj_length", "/", "num_cycles", "\n", "direction_list", "=", "[", "\"x\"", ",", "\"y\"", ",", "\"z\"", "]", "\n", "# Get coordinates indexes.", "\n", "if", "traj_plane", "[", "0", "]", "in", "direction_list", "and", "traj_plane", "[", "\n", "1", "]", "in", "direction_list", "and", "traj_plane", "[", "0", "]", "!=", "traj_plane", "[", "1", "]", ":", "\n", "            ", "coord_index_a", "=", "direction_list", ".", "index", "(", "traj_plane", "[", "0", "]", ")", "\n", "coord_index_b", "=", "direction_list", ".", "index", "(", "traj_plane", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Trajectory plane should be in form of ab, where a and b can be {x, y, z}.\"", ")", "\n", "# Generate time stamps.", "\n", "", "times", "=", "np", ".", "arange", "(", "0", ",", "traj_length", ",", "sample_time", ")", "\n", "pos_ref_traj", "=", "np", ".", "zeros", "(", "(", "len", "(", "times", ")", ",", "3", ")", ")", "\n", "vel_ref_traj", "=", "np", ".", "zeros", "(", "(", "len", "(", "times", ")", ",", "3", ")", ")", "\n", "speed_traj", "=", "np", ".", "zeros", "(", "(", "len", "(", "times", ")", ",", "1", ")", ")", "\n", "# Compute trajectory points.", "\n", "for", "t", "in", "enumerate", "(", "times", ")", ":", "\n", "            ", "pos_ref_traj", "[", "t", "[", "0", "]", "]", ",", "vel_ref_traj", "[", "t", "[", "0", "]", "]", "=", "self", ".", "_get_coordinates", "(", "t", "[", "1", "]", ",", "\n", "traj_type", ",", "\n", "traj_period", ",", "\n", "coord_index_a", ",", "\n", "coord_index_b", ",", "\n", "position_offset", "[", "0", "]", ",", "\n", "position_offset", "[", "1", "]", ",", "\n", "scaling", ")", "\n", "speed_traj", "[", "t", "[", "0", "]", "]", "=", "np", ".", "linalg", ".", "norm", "(", "vel_ref_traj", "[", "t", "[", "0", "]", "]", ")", "\n", "", "return", "pos_ref_traj", ",", "vel_ref_traj", ",", "speed_traj", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._get_coordinates": [[473, 519], ["numpy.zeros", "numpy.zeros", "benchmark_env.BenchmarkEnv._figure8", "benchmark_env.BenchmarkEnv._circle", "benchmark_env.BenchmarkEnv._square"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._figure8", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._circle", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._square"], ["", "def", "_get_coordinates", "(", "self", ",", "\n", "t", ",", "\n", "traj_type", ",", "\n", "traj_period", ",", "\n", "coord_index_a", ",", "\n", "coord_index_b", ",", "\n", "position_offset_a", ",", "\n", "position_offset_b", ",", "\n", "scaling", "\n", ")", ":", "\n", "        ", "\"\"\"Computes the coordinates of a specified trajectory at time t.\n\n        Args:\n            t (float): The time at which we want to sample one trajectory point.\n            traj_type (str, optional): The type of trajectory (circle, square, figure8).\n            traj_period (float): The period of the trajectory in seconds.\n            coord_index_a (int): The index of the first coordinate of the trajectory plane.\n            coord_index_b (int): The index of the second coordinate of the trajectory plane.\n            position_offset_a (float): The offset in the first coordinate of the trajectory plane.\n            position_offset_b (float): The offset in the second coordinate of the trajectory plane.\n            scaling (float, optional): Scaling factor for the trajectory.\n\n        Returns:\n            ndarray: The position in x, y, z, at time t.\n            ndarray: The velocity in x, y, z, at time t.\n\n        \"\"\"", "\n", "# Get coordinates for the trajectory chosen.", "\n", "if", "traj_type", "==", "\"figure8\"", ":", "\n", "            ", "coords_a", ",", "coords_b", ",", "coords_a_dot", ",", "coords_b_dot", "=", "self", ".", "_figure8", "(", "\n", "t", ",", "traj_period", ",", "scaling", ")", "\n", "", "elif", "traj_type", "==", "\"circle\"", ":", "\n", "            ", "coords_a", ",", "coords_b", ",", "coords_a_dot", ",", "coords_b_dot", "=", "self", ".", "_circle", "(", "\n", "t", ",", "traj_period", ",", "scaling", ")", "\n", "", "elif", "traj_type", "==", "\"square\"", ":", "\n", "            ", "coords_a", ",", "coords_b", ",", "coords_a_dot", ",", "coords_b_dot", "=", "self", ".", "_square", "(", "\n", "t", ",", "traj_period", ",", "scaling", ")", "\n", "# Initialize position and velocity references.", "\n", "", "pos_ref", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "vel_ref", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "# Set position and velocity references based on the plane of the trajectory chosen.", "\n", "pos_ref", "[", "coord_index_a", "]", "=", "coords_a", "+", "position_offset_a", "\n", "vel_ref", "[", "coord_index_a", "]", "=", "coords_a_dot", "\n", "pos_ref", "[", "coord_index_b", "]", "=", "coords_b", "+", "position_offset_b", "\n", "vel_ref", "[", "coord_index_b", "]", "=", "coords_b_dot", "\n", "return", "pos_ref", ",", "vel_ref", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._figure8": [[520, 545], ["numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "_figure8", "(", "self", ",", "\n", "t", ",", "\n", "traj_period", ",", "\n", "scaling", "\n", ")", ":", "\n", "        ", "\"\"\"Computes the coordinates of a figure8 trajectory at time t.\n\n        Args:\n            t (float): The time at which we want to sample one trajectory point.\n            traj_period (float): The period of the trajectory in seconds.\n            scaling (float, optional): Scaling factor for the trajectory.\n\n        Returns:\n            float: The position in the first coordinate. \n            float: The position in the second coordinate. \n            float: The velocity in the first coordinate. \n            float: The velocity in the second coordinate. \n\n        \"\"\"", "\n", "traj_freq", "=", "2.0", "*", "np", ".", "pi", "/", "traj_period", "\n", "coords_a", "=", "scaling", "*", "np", ".", "sin", "(", "traj_freq", "*", "t", ")", "\n", "coords_b", "=", "scaling", "*", "np", ".", "sin", "(", "traj_freq", "*", "t", ")", "*", "np", ".", "cos", "(", "traj_freq", "*", "t", ")", "\n", "coords_a_dot", "=", "scaling", "*", "traj_freq", "*", "np", ".", "cos", "(", "traj_freq", "*", "t", ")", "\n", "coords_b_dot", "=", "scaling", "*", "traj_freq", "*", "(", "np", ".", "cos", "(", "traj_freq", "*", "t", ")", "**", "2", "-", "np", ".", "sin", "(", "traj_freq", "*", "t", ")", "**", "2", ")", "\n", "return", "coords_a", ",", "coords_b", ",", "coords_a_dot", ",", "coords_b_dot", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._circle": [[546, 571], ["numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "def", "_circle", "(", "self", ",", "\n", "t", ",", "\n", "traj_period", ",", "\n", "scaling", "\n", ")", ":", "\n", "        ", "\"\"\"Computes the coordinates of a circle trajectory at time t.\n\n        Args:\n            t (float): The time at which we want to sample one trajectory point.\n            traj_period (float): The period of the trajectory in seconds.\n            scaling (float, optional): Scaling factor for the trajectory.\n\n        Returns:\n            float: The position in the first coordinate. \n            float: The position in the second coordinate. \n            float: The velocity in the first coordinate. \n            float: The velocity in the second coordinate. \n\n        \"\"\"", "\n", "traj_freq", "=", "2.0", "*", "np", ".", "pi", "/", "traj_period", "\n", "coords_a", "=", "scaling", "*", "np", ".", "cos", "(", "traj_freq", "*", "t", ")", "\n", "coords_b", "=", "scaling", "*", "np", ".", "sin", "(", "traj_freq", "*", "t", ")", "\n", "coords_a_dot", "=", "-", "scaling", "*", "traj_freq", "*", "np", ".", "sin", "(", "traj_freq", "*", "t", ")", "\n", "coords_b_dot", "=", "scaling", "*", "traj_freq", "*", "np", ".", "cos", "(", "traj_freq", "*", "t", ")", "\n", "return", "coords_a", ",", "coords_b", ",", "coords_a_dot", ",", "coords_b_dot", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._square": [[572, 627], ["int", "numpy.floor"], "methods", ["None"], ["", "def", "_square", "(", "self", ",", "\n", "t", ",", "\n", "traj_period", ",", "\n", "scaling", "\n", ")", ":", "\n", "        ", "\"\"\"Computes the coordinates of a square trajectory at time t.\n\n        Args:\n            t (float): The time at which we want to sample one trajectory point.\n            traj_period (float): The period of the trajectory in seconds.\n            scaling (float, optional): Scaling factor for the trajectory.\n\n        Returns:\n            float: The position in the first coordinate. \n            float: The position in the second coordinate. \n            float: The velocity in the first coordinate. \n            float: The velocity in the second coordinate. \n\n        \"\"\"", "\n", "# Compute time for each segment to complete.", "\n", "segment_period", "=", "traj_period", "/", "4.0", "\n", "traverse_speed", "=", "scaling", "/", "segment_period", "\n", "# Compute time for the cycle.", "\n", "cycle_time", "=", "t", "%", "traj_period", "\n", "# Check time along the current segment and ratio of completion.", "\n", "segment_time", "=", "cycle_time", "%", "segment_period", "\n", "# Check current segment index.", "\n", "segment_index", "=", "int", "(", "np", ".", "floor", "(", "cycle_time", "/", "segment_period", ")", ")", "\n", "# Position along segment", "\n", "segment_position", "=", "traverse_speed", "*", "segment_time", "\n", "if", "segment_index", "==", "0", ":", "\n", "# Moving up along second axis from (0, 0).", "\n", "            ", "coords_a", "=", "0.0", "\n", "coords_b", "=", "segment_position", "\n", "coords_a_dot", "=", "0.0", "\n", "coords_b_dot", "=", "traverse_speed", "\n", "", "elif", "segment_index", "==", "1", ":", "\n", "# Moving left along first axis from (0, 1).", "\n", "            ", "coords_a", "=", "-", "segment_position", "\n", "coords_b", "=", "scaling", "\n", "coords_a_dot", "=", "-", "traverse_speed", "\n", "coords_b_dot", "=", "0.0", "\n", "", "elif", "segment_index", "==", "2", ":", "\n", "# Moving down along second axis from (-1, 1).", "\n", "            ", "coords_a", "=", "-", "scaling", "\n", "coords_b", "=", "scaling", "-", "segment_position", "\n", "coords_a_dot", "=", "0.0", "\n", "coords_b_dot", "=", "-", "traverse_speed", "\n", "", "elif", "segment_index", "==", "3", ":", "\n", "# Moving right along second axis from (-1, 0).", "\n", "            ", "coords_a", "=", "-", "scaling", "+", "segment_position", "\n", "coords_b", "=", "0.0", "\n", "coords_a_dot", "=", "traverse_speed", "\n", "coords_b_dot", "=", "0.0", "\n", "", "return", "coords_a", ",", "coords_b", ",", "coords_a_dot", ",", "coords_b_dot", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._plot_trajectory": [[628, 694], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "matplotlib.pyplot.subplots", "numpy.arange", "axs[].plot", "axs[].set_ylabel", "axs[].plot", "axs[].set_ylabel", "axs[].plot", "axs[].set_ylabel", "axs[].set_xlabel", "axs[].plot", "axs[].set_ylabel", "axs[].plot", "axs[].set_ylabel", "axs[].plot", "axs[].set_ylabel", "axs[].set_xlabel", "matplotlib.pyplot.show", "matplotlib.pyplot.figure", "matplotlib.pyplot.figure.gca", "plt.figure.gca.plot", "plt.figure.gca.set_xlabel", "plt.figure.gca.set_ylabel", "plt.figure.gca.set_zlabel", "matplotlib.pyplot.show", "min", "max", "min", "max", "min", "max", "min", "max", "min", "max", "min", "max", "min", "max", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "_plot_trajectory", "(", "self", ",", "\n", "traj_type", ",", "\n", "traj_plane", ",", "\n", "traj_length", ",", "\n", "num_cycles", ",", "\n", "pos_ref_traj", ",", "\n", "vel_ref_traj", ",", "\n", "speed_traj", "\n", ")", ":", "\n", "        ", "\"\"\"Plots a trajectory along x, y, z, and in a 3D projection.\n\n        Args:\n            traj_type (str, optional): The type of trajectory (circle, square, figure8).\n            traj_plane (str, optional): The plane of the trajectory (e.g. \"xz\").\n            traj_length (float, optional): The length of the trajectory in seconds.\n            num_cycles (int, optional): The number of cycles within the length.\n            pos_ref_traj (ndarray): The positions in x, y, z of the trajectory sampled for its entire duration.\n            vel_ref_traj (ndarray): The velocities in x, y, z of the trajectory sampled for its entire duration.\n            speed_traj (ndarray): The scalar speed of the trajectory sampled for its entire duration.\n\n        \"\"\"", "\n", "# Print basic properties.", "\n", "print", "(", "\"Trajectory type: %s\"", "%", "traj_type", ")", "\n", "print", "(", "\"Trajectory plane: %s\"", "%", "traj_plane", ")", "\n", "print", "(", "\"Trajectory length: %s sec\"", "%", "traj_length", ")", "\n", "print", "(", "\"Number of cycles: %d\"", "%", "num_cycles", ")", "\n", "print", "(", "\"Trajectory period: %.2f sec\"", "%", "(", "traj_length", "/", "num_cycles", ")", ")", "\n", "print", "(", "\"Angular speed: %.2f rad/sec\"", "%", "(", "2.0", "*", "np", ".", "pi", "/", "(", "traj_length", "/", "num_cycles", ")", ")", ")", "\n", "print", "(", "\n", "\"Position bounds: x [%.2f, %.2f] m, y [%.2f, %.2f] m, z [%.2f, %.2f] m\"", "\n", "%", "(", "min", "(", "pos_ref_traj", "[", ":", ",", "0", "]", ")", ",", "max", "(", "pos_ref_traj", "[", ":", ",", "0", "]", ")", ",", "\n", "min", "(", "pos_ref_traj", "[", ":", ",", "1", "]", ")", ",", "max", "(", "pos_ref_traj", "[", ":", ",", "1", "]", ")", ",", "\n", "min", "(", "pos_ref_traj", "[", ":", ",", "2", "]", ")", ",", "max", "(", "pos_ref_traj", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "print", "(", "\n", "\"Velocity bounds: vx [%.2f, %.2f] m/s, vy [%.2f, %.2f] m/s, vz [%.2f, %.2f] m/s\"", "\n", "%", "(", "min", "(", "vel_ref_traj", "[", ":", ",", "0", "]", ")", ",", "max", "(", "vel_ref_traj", "[", ":", ",", "0", "]", ")", ",", "\n", "min", "(", "vel_ref_traj", "[", ":", ",", "1", "]", ")", ",", "max", "(", "vel_ref_traj", "[", ":", ",", "1", "]", ")", ",", "\n", "min", "(", "vel_ref_traj", "[", ":", ",", "2", "]", ")", ",", "max", "(", "vel_ref_traj", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "print", "(", "\"Speed: min %.2f m/s max %.2f m/s mean %.2f\"", "%", "\n", "(", "min", "(", "speed_traj", ")", ",", "max", "(", "speed_traj", ")", ",", "np", ".", "mean", "(", "speed_traj", ")", ")", ")", "\n", "# Plot in x, y, z.", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "3", ",", "2", ")", "\n", "t", "=", "np", ".", "arange", "(", "0", ",", "traj_length", ",", "traj_length", "/", "pos_ref_traj", ".", "shape", "[", "0", "]", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "plot", "(", "t", ",", "pos_ref_traj", "[", ":", ",", "0", "]", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_ylabel", "(", "'pos x (m)'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "plot", "(", "t", ",", "pos_ref_traj", "[", ":", ",", "1", "]", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_ylabel", "(", "'pos y (m)'", ")", "\n", "axs", "[", "2", ",", "0", "]", ".", "plot", "(", "t", ",", "pos_ref_traj", "[", ":", ",", "2", "]", ")", "\n", "axs", "[", "2", ",", "0", "]", ".", "set_ylabel", "(", "'pos z (m)'", ")", "\n", "axs", "[", "2", ",", "0", "]", ".", "set_xlabel", "(", "'time (s)'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "plot", "(", "t", ",", "vel_ref_traj", "[", ":", ",", "0", "]", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_ylabel", "(", "'vel x (m)'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "plot", "(", "t", ",", "vel_ref_traj", "[", ":", ",", "1", "]", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_ylabel", "(", "'vel y (m)'", ")", "\n", "axs", "[", "2", ",", "1", "]", ".", "plot", "(", "t", ",", "vel_ref_traj", "[", ":", ",", "2", "]", ")", "\n", "axs", "[", "2", ",", "1", "]", ".", "set_ylabel", "(", "'vel z (m)'", ")", "\n", "axs", "[", "2", ",", "1", "]", ".", "set_xlabel", "(", "'time (s)'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "# Plot in 3D.", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "ax", ".", "plot", "(", "pos_ref_traj", "[", ":", ",", "0", "]", ",", "pos_ref_traj", "[", ":", ",", "1", "]", ",", "pos_ref_traj", "[", ":", ",", "2", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "'x [m]'", ")", "\n", "ax", ".", "set_ylabel", "(", "'y [m]'", ")", "\n", "ax", ".", "set_zlabel", "(", "'z [m]'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.Constraint.__init__": [[35, 82], ["constraints.ConstrainedVariableType", "isinstance", "isinstance", "all", "all", "len", "numpy.eye", "numpy.array", "len", "len", "len", "numpy.eye", "NotImplementedError", "isinstance", "set"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Registry.all", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Registry.all"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "constrained_variable", ":", "ConstrainedVariableType", ",", "\n", "strict", ":", "bool", "=", "False", ",", "\n", "active_dims", "=", "None", ",", "\n", "tolerance", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Defines params (e.g. bounds) and state.\n\n        Args:\n            env (safe_control_gym.envs.bechmark_env.BenchmarkEnv): The environment the constraint is for.\n            constrained_variable (ConstrainedVariableType): Specifies the input type to the constraint as a constraint\n                                                         that acts on the state, input, or both.\n            strict (optional, bool): Whether the constraint is violated also when equal to its threshold.\n            active_dims (list of ints): Filters the constraint to only act only select certian dimensions.\n            tolerance (list or np.array): The distance from the constraint at which is_almost_active returns True.\n\n        \"\"\"", "\n", "self", ".", "constrained_variable", "=", "ConstrainedVariableType", "(", "constrained_variable", ")", "\n", "if", "self", ".", "constrained_variable", "==", "ConstrainedVariableType", ".", "STATE", ":", "\n", "            ", "self", ".", "dim", "=", "env", ".", "state_dim", "\n", "", "elif", "self", ".", "constrained_variable", "==", "ConstrainedVariableType", ".", "INPUT", ":", "\n", "            ", "self", ".", "dim", "=", "env", ".", "action_dim", "\n", "", "elif", "self", ".", "constrained_variable", "==", "ConstrainedVariableType", ".", "INPUT_AND_STATE", ":", "\n", "            ", "self", ".", "dim", "=", "env", ".", "state_dim", "+", "env", ".", "action_dim", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'[ERROR] invalid constrained_variable (use STATE, INPUT or INPUT_AND_STATE).'", ")", "\n", "# Save the strictness attribute", "\n", "", "self", ".", "strict", "=", "strict", "\n", "# Only want to select specific dimensions, implemented via a filter matrix.", "\n", "if", "active_dims", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "active_dims", ",", "int", ")", ":", "\n", "                ", "active_dims", "=", "[", "active_dims", "]", "\n", "", "assert", "isinstance", "(", "active_dims", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", ",", "'[ERROR] active_dims is not a list/array.'", "\n", "assert", "(", "len", "(", "active_dims", ")", "<=", "self", ".", "dim", ")", ",", "'[ERROR] more active_dim than constrainable self.dim'", "\n", "assert", "all", "(", "isinstance", "(", "n", ",", "int", ")", "for", "n", "in", "active_dims", ")", ",", "'[ERROR] non-integer active_dim.'", "\n", "assert", "all", "(", "(", "n", "<", "self", ".", "dim", ")", "for", "n", "in", "active_dims", ")", ",", "'[ERROR] active_dim not stricly smaller than self.dim.'", "\n", "assert", "(", "len", "(", "active_dims", ")", "==", "len", "(", "set", "(", "active_dims", ")", ")", ")", ",", "'[ERROR] duplicates in active_dim'", "\n", "self", ".", "constraint_filter", "=", "np", ".", "eye", "(", "self", ".", "dim", ")", "[", "active_dims", "]", "\n", "self", ".", "dim", "=", "len", "(", "active_dims", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "constraint_filter", "=", "np", ".", "eye", "(", "self", ".", "dim", ")", "\n", "", "if", "tolerance", "is", "not", "None", ":", "\n", "            ", "self", ".", "tolerance", "=", "np", ".", "array", "(", "tolerance", ",", "ndmin", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tolerance", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.Constraint.reset": [[83, 88], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clears up the constraint state (if any).\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.Constraint.get_symbolic_model": [[89, 102], ["None"], "methods", ["None"], ["", "def", "get_symbolic_model", "(", "self", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "\"\"\"Gets the symbolic form of the constraint function.\n\n        Args:\n            env: The environment to constrain.\n\n        Returns:\n            obj: The symbolic form of the constraint.\n\n        \"\"\"", "\n", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.Constraint.get_value": [[103, 117], ["constraints.Constraint.get_env_constraint_var", "numpy.atleast_1d", "numpy.squeeze", "constraints.Constraint.sym_func", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.Constraint.get_env_constraint_var"], ["", "def", "get_value", "(", "self", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "\"\"\"Gets the constraint function value.\n\n        Args:\n            env: The environment to constrain.\n\n        Returns:\n            ndarray: The evaulation of the constraint.\n\n        \"\"\"", "\n", "env_value", "=", "self", ".", "get_env_constraint_var", "(", "env", ")", "\n", "return", "np", ".", "atleast_1d", "(", "np", ".", "squeeze", "(", "self", ".", "sym_func", "(", "np", ".", "array", "(", "env_value", ",", "ndmin", "=", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.Constraint.is_violated": [[118, 139], ["bool", "constraints.Constraint.get_value", "numpy.any", "numpy.any", "numpy.greater_equal", "numpy.greater"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.SymmetricStateConstraint.get_value"], ["", "def", "is_violated", "(", "self", ",", "\n", "env", ",", "\n", "c_value", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Checks if constraint is violated.\n\n        Args:\n            env: The environment to constrain.\n            c_value: an already calculated constraint value (no need to recompute).\n\n        Returns:\n            bool: Whether the constraint was violeted.\n\n        \"\"\"", "\n", "if", "c_value", "is", "None", ":", "\n", "            ", "c_value", "=", "self", ".", "get_value", "(", "env", ")", "\n", "", "if", "self", ".", "strict", ":", "\n", "            ", "flag", "=", "np", ".", "any", "(", "np", ".", "greater_equal", "(", "c_value", ",", "0.", ")", ")", "\n", "", "else", ":", "\n", "            ", "flag", "=", "np", ".", "any", "(", "np", ".", "greater", "(", "c_value", ",", "0.", ")", ")", "\n", "", "return", "bool", "(", "flag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.Constraint.is_almost_active": [[140, 156], ["numpy.any", "bool", "constraints.Constraint.get_value", "numpy.greater", "hasattr"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.SymmetricStateConstraint.get_value"], ["", "def", "is_almost_active", "(", "self", ",", "\n", "env", ",", "\n", "c_value", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Checks if constraint is nearly violated.\n\n        This is checked by using a slack variable (from init args).\n        This can be used for reward shaping/constraint penalty in RL methods.\n\n        \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "\"tolerance\"", ")", "or", "self", ".", "tolerance", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "c_value", "is", "None", ":", "\n", "            ", "c_value", "=", "self", ".", "get_value", "(", "env", ")", "\n", "", "flag", "=", "np", ".", "any", "(", "np", ".", "greater", "(", "c_value", "+", "self", ".", "tolerance", ",", "0.", ")", ")", "\n", "return", "bool", "(", "flag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.Constraint.get_env_constraint_var": [[157, 170], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_env_constraint_var", "(", "self", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "\"\"\"Gets the env variable(s) subject to the constraint.\n        \"\"\"", "\n", "if", "self", ".", "constrained_variable", "==", "ConstrainedVariableType", ".", "STATE", ":", "\n", "            ", "return", "env", ".", "state", "\n", "", "elif", "self", ".", "constrained_variable", "==", "ConstrainedVariableType", ".", "INPUT", ":", "\n", "            ", "return", "env", ".", "current_raw_input_action", "\n", "", "elif", "self", ".", "constrained_variable", "==", "ConstrainedVariableType", ".", "INPUT_AND_STATE", ":", "\n", "            ", "return", "(", "env", ".", "state", ",", "env", ".", "current_raw_input_action", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Constraint input type not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.Constraint.check_tolerance_shape": [[171, 174], ["ValueError", "len"], "methods", ["None"], ["", "", "def", "check_tolerance_shape", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "tolerance", "is", "not", "None", "and", "len", "(", "self", ".", "tolerance", ")", "!=", "self", ".", "num_constraints", ":", "\n", "            ", "raise", "ValueError", "(", "'[ERROR] the tolerance dimension does not match the number of constraints.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.QuadraticContstraint.__init__": [[181, 212], ["constraints.Constraint.__init__", "numpy.array", "isinstance", "constraints.QuadraticContstraint.check_tolerance_shape"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.SymmetricStateConstraint.check_tolerance_shape"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "P", ":", "np", ".", "ndarray", ",", "\n", "b", ":", "float", ",", "\n", "constrained_variable", ":", "ConstrainedVariableType", ",", "\n", "strict", ":", "bool", "=", "False", ",", "\n", "active_dims", "=", "None", ",", "\n", "tolerance", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Initializes the class.\n\n        Args:\n            env (safe_control_gym.envs.bechmark_env.BenchmarkEnv): The environment the constraint is for.\n            P (np.array): The square matrix representing the quadratic.\n            b (float): The scalar limit for the quadatic constraint.\n            constrained_variable (ConstrainedVariableType): Specifies the input type to the constraint as a constraint\n                                                        that acts on the state, input, or both.\n            strict (optional, bool): Whether the constraint is violated also when equal to its threshold.\n            active_dims (list of ints): Filters the constraint to only act only select certian dimensions.\n            tolerance (list or np.array): The distance from the constraint at which is_almost_active returns True.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "env", ",", "constrained_variable", ",", "strict", "=", "strict", ",", "active_dims", "=", "active_dims", ",", "tolerance", "=", "tolerance", ")", "\n", "P", "=", "np", ".", "array", "(", "P", ",", "ndmin", "=", "1", ")", "\n", "assert", "P", ".", "shape", "==", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", ",", "'[ERROR] P has the wrong dimension!'", "\n", "self", ".", "P", "=", "P", "\n", "assert", "isinstance", "(", "b", ",", "float", ")", ",", "'[ERROR] b is not a scalar!'", "\n", "self", ".", "b", "=", "b", "\n", "self", ".", "num_constraints", "=", "1", "# Always scalar.", "\n", "self", ".", "sym_func", "=", "lambda", "x", ":", "x", ".", "T", "@", "self", ".", "constraint_filter", ".", "T", "@", "self", ".", "P", "@", "self", ".", "constraint_filter", "@", "x", "-", "self", ".", "b", "\n", "self", ".", "check_tolerance_shape", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.QuadraticContstraint.get_symbolic_model": [[213, 221], ["None"], "methods", ["None"], ["", "def", "get_symbolic_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the symbolic form of the constraint function.\n\n        Returns:\n            lambda: The symbolic form of the constraint.\n\n        \"\"\"", "\n", "return", "self", ".", "sym_func", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.LinearConstraint.__init__": [[228, 259], ["constraints.Constraint.__init__", "numpy.array", "numpy.array", "constraints.LinearConstraint.check_tolerance_shape"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.SymmetricStateConstraint.check_tolerance_shape"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "A", ":", "np", ".", "ndarray", ",", "\n", "b", ":", "np", ".", "ndarray", ",", "\n", "constrained_variable", ":", "ConstrainedVariableType", ",", "\n", "strict", ":", "bool", "=", "False", ",", "\n", "active_dims", "=", "None", ",", "\n", "tolerance", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize the class.\n\n        Args:\n            env (BenchmarkEnv): The environment to constraint.\n            A (np.array or list): A matrix of the constraint (self.num_constraints by self.dim).\n            b (np.array or list): b matrix of the constraint (1D array self.num_constraints)\n                                  constrained_variable (ConstrainedVariableType): Type of constraint.\n            strict (optional, bool): Whether the constraint is violated also when equal to its threshold.\n            active_dims (list or int): List specifying which dimensions the constraint is active for.\n            tolerance (float): The distance at which is_almost_active(env) triggers.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "env", ",", "constrained_variable", ",", "strict", "=", "strict", ",", "active_dims", "=", "active_dims", ",", "tolerance", "=", "tolerance", ")", "\n", "A", "=", "np", ".", "array", "(", "A", ",", "ndmin", "=", "1", ")", "\n", "b", "=", "np", ".", "array", "(", "b", ",", "ndmin", "=", "1", ")", "\n", "assert", "A", ".", "shape", "[", "1", "]", "==", "self", ".", "dim", ",", "'[ERROR] A has the wrong dimension!'", "\n", "self", ".", "A", "=", "A", "\n", "assert", "b", ".", "shape", "[", "0", "]", "==", "A", ".", "shape", "[", "0", "]", ",", "'[ERROR] Dimension 0 of b does not match A!'", "\n", "self", ".", "b", "=", "b", "\n", "self", ".", "num_constraints", "=", "A", ".", "shape", "[", "0", "]", "\n", "self", ".", "sym_func", "=", "lambda", "x", ":", "self", ".", "A", "@", "self", ".", "constraint_filter", "@", "x", "-", "self", ".", "b", "\n", "self", ".", "check_tolerance_shape", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.LinearConstraint.get_symbolic_model": [[260, 268], ["None"], "methods", ["None"], ["", "def", "get_symbolic_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the symbolic form of the constraint function.\n\n        Returns:\n            lambda: The symbolic form of the constraint.\n\n        \"\"\"", "\n", "return", "self", ".", "sym_func", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.BoundedConstraint.__init__": [[275, 302], ["numpy.array", "numpy.array", "numpy.vstack", "numpy.hstack", "constraints.LinearConstraint.__init__", "constraints.BoundedConstraint.check_tolerance_shape", "numpy.eye", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.SymmetricStateConstraint.check_tolerance_shape"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "lower_bounds", ":", "np", ".", "ndarray", ",", "\n", "upper_bounds", ":", "np", ".", "ndarray", ",", "\n", "constrained_variable", ":", "ConstrainedVariableType", ",", "\n", "strict", ":", "bool", "=", "False", ",", "\n", "active_dims", "=", "None", ",", "\n", "tolerance", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the constraint.\n\n        Args:\n            env (BenchmarkEnv): The environment to constraint.\n            lower_bounds (np.array or list): Lower bound of constraint.\n            upper_bounds (np.array or list): Uppbound of constraint.\n            constrained_variable (ConstrainedVariableType): Type of constraint.\n            strict (optional, bool): Whether the constraint is violated also when equal to its threshold.\n            active_dims (list or int): List specifying which dimensions the constraint is active for.\n            tolerance (float): The distance at which is_almost_active(env) triggers.\n\n        \"\"\"", "\n", "self", ".", "lower_bounds", "=", "np", ".", "array", "(", "lower_bounds", ",", "ndmin", "=", "1", ")", "\n", "self", ".", "upper_bounds", "=", "np", ".", "array", "(", "upper_bounds", ",", "ndmin", "=", "1", ")", "\n", "dim", "=", "self", ".", "lower_bounds", ".", "shape", "[", "0", "]", "\n", "A", "=", "np", ".", "vstack", "(", "(", "-", "np", ".", "eye", "(", "dim", ")", ",", "np", ".", "eye", "(", "dim", ")", ")", ")", "\n", "b", "=", "np", ".", "hstack", "(", "(", "-", "self", ".", "lower_bounds", ",", "self", ".", "upper_bounds", ")", ")", "\n", "super", "(", ")", ".", "__init__", "(", "env", ",", "A", ",", "b", ",", "constrained_variable", ",", "strict", "=", "strict", ",", "active_dims", "=", "active_dims", ",", "tolerance", "=", "tolerance", ")", "\n", "self", ".", "check_tolerance_shape", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.DefaultConstraint.__init__": [[314, 366], ["constraints.BoundedConstraint.__init__", "hasattr", "numpy.array", "ValueError", "numpy.array", "ValueError", "NotImplementedError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "constrained_variable", ":", "ConstrainedVariableType", ",", "\n", "lower_bounds", "=", "None", ",", "\n", "upper_bounds", "=", "None", ",", "\n", "strict", ":", "bool", "=", "False", ",", "\n", "tolerance", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\"Initialize the class.\n\n        Args:\n            env (BenchmarkEnv): Environment for the constraint.\n            lower_bounds (list, np.array): 1D array or list of the lower bounds. Length must match\n                the environemt observation space dimension. If none, the env defaults are used\n            upper_bounds (list, np.array): 1D array or list of the lower bounds. Length must match\n                the environemt observation space dimension. If None, the env defaults are used.\n            strict (optional, bool): Whether the constraint is violated also when equal to its threshold.\n            tolerance (float): The distance at which is_almost_active(env) triggers.\n\n        \"\"\"", "\n", "if", "constrained_variable", "==", "ConstrainedVariableType", ".", "STATE", ":", "\n", "# for now we only constrain the underlying env state, and assume either the observation", "\n", "# is the same as state, or observation contain additional info other than state and so ", "\n", "# the env has separate `state_space` and `observation_space`", "\n", "            ", "if", "hasattr", "(", "env", ",", "\"state_space\"", ")", ":", "\n", "                ", "default_constraint_space", "=", "env", ".", "state_space", "\n", "", "else", ":", "\n", "                ", "default_constraint_space", "=", "env", ".", "observation_space", "\n", "", "", "elif", "constrained_variable", "==", "ConstrainedVariableType", ".", "INPUT", ":", "\n", "            ", "default_constraint_space", "=", "env", ".", "action_space", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'[ERROR] DefaultConstraint can only be of type STATE or INPUT'", ")", "\n", "# extract bounds from the space", "\n", "", "if", "upper_bounds", "is", "None", ":", "\n", "            ", "upper_bounds", "=", "default_constraint_space", ".", "high", "\n", "", "else", ":", "\n", "            ", "upper_bounds", "=", "np", ".", "array", "(", "upper_bounds", ",", "ndmin", "=", "1", ")", "\n", "assert", "len", "(", "upper_bounds", ")", "==", "default_constraint_space", ".", "shape", "[", "0", "]", ",", "ValueError", "(", "\"[ERROR]: Upper bound must have length equal to space dimension.\"", ")", "\n", "", "if", "lower_bounds", "is", "None", ":", "\n", "            ", "lower_bounds", "=", "default_constraint_space", ".", "low", "\n", "", "else", ":", "\n", "            ", "lower_bounds", "=", "np", ".", "array", "(", "lower_bounds", ",", "ndmin", "=", "1", ")", "\n", "assert", "len", "(", "lower_bounds", ")", "==", "default_constraint_space", ".", "shape", "[", "0", "]", ",", "ValueError", "(", "\"[ERROR]: Lower bound must have length equal to space dimension.\"", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "env", ",", "\n", "lower_bounds", "=", "lower_bounds", ",", "\n", "upper_bounds", "=", "upper_bounds", ",", "\n", "constrained_variable", "=", "constrained_variable", ",", "\n", "strict", "=", "strict", ",", "\n", "active_dims", "=", "None", ",", "\n", "tolerance", "=", "tolerance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.SymmetricStateConstraint.__init__": [[375, 400], ["numpy.array", "constraints.BoundedConstraint.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "constrained_variable", ",", "\n", "bound", ",", "\n", "strict", ":", "bool", "=", "False", ",", "\n", "active_dims", "=", "None", ",", "\n", "tolerance", "=", "None", ",", "\n", "**", "kwrags", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "assert", "bound", "is", "not", "None", "\n", "self", ".", "bound", "=", "np", ".", "array", "(", "bound", ",", "ndmin", "=", "1", ")", "\n", "super", "(", ")", ".", "__init__", "(", "env", ",", "\n", "lower_bounds", "=", "-", "bound", ",", "\n", "upper_bounds", "=", "bound", ",", "\n", "constrained_variable", "=", "constrained_variable", ",", "\n", "strict", "=", "strict", ",", "\n", "active_dims", "=", "active_dims", ",", "\n", "tolerance", "=", "tolerance", ",", "\n", "**", "kwrags", ")", "\n", "assert", "(", "env", ".", "NAME", "==", "'cartpole'", ")", ",", "'[ERROR] SymmetricStateConstraint is meant for CartPole environments'", "\n", "assert", "(", "env", ".", "COST", "==", "'rl_reward'", ")", ",", "'[ERROR] SymmetricStateConstraint is meant for RL environments'", "\n", "self", ".", "num_constraints", "=", "self", ".", "bound", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.SymmetricStateConstraint.get_value": [[401, 404], ["numpy.abs"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "env", ")", ":", "\n", "        ", "c_value", "=", "np", ".", "abs", "(", "self", ".", "constraint_filter", "@", "env", ".", "state", ")", "-", "self", ".", "bound", "\n", "return", "c_value", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.SymmetricStateConstraint.check_tolerance_shape": [[406, 413], ["ValueError", "len", "len"], "methods", ["None"], ["", "def", "check_tolerance_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Note we compare tolerance shape to bound shape (instead of num_constraints), since \n        num_constraints will be set as 2x due to subclassing BoundedConstraint,\n        it will be overwritten at the end of __init__ to the correct shape.\n        \"\"\"", "\n", "if", "self", ".", "tolerance", "is", "not", "None", "and", "len", "(", "self", ".", "tolerance", ")", "!=", "len", "(", "self", ".", "bound", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'[ERROR] the tolerance dimension does not match the number of constraints.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.__init__": [[428, 449], ["numpy.cumsum", "sum", "sum", "sum", "sum"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "constraints", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize the constraint list.\n\n        Args:\n            constraints: The list of constraints.\n\n        \"\"\"", "\n", "self", ".", "constraints", "=", "constraints", "\n", "self", ".", "constraint_lengths", "=", "[", "con", ".", "num_constraints", "for", "con", "in", "self", ".", "constraints", "]", "\n", "# 1st constraint is always index 0, hence ignored ", "\n", "self", ".", "constraint_indices", "=", "np", ".", "cumsum", "(", "self", ".", "constraint_lengths", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "num_constraints", "=", "sum", "(", "self", ".", "constraint_lengths", ")", "\n", "# constraint subsets", "\n", "self", ".", "state_constraints", "=", "[", "con", "for", "con", "in", "self", ".", "constraints", "if", "con", ".", "constrained_variable", "==", "ConstrainedVariableType", ".", "STATE", "]", "\n", "self", ".", "num_state_constraints", "=", "sum", "(", "[", "con", ".", "num_constraints", "for", "con", "in", "self", ".", "state_constraints", "]", ")", "\n", "self", ".", "input_constraints", "=", "[", "con", "for", "con", "in", "self", ".", "constraints", "if", "con", ".", "constrained_variable", "==", "ConstrainedVariableType", ".", "INPUT", "]", "\n", "self", ".", "num_input_constraints", "=", "sum", "(", "[", "con", ".", "num_constraints", "for", "con", "in", "self", ".", "input_constraints", "]", ")", "\n", "self", ".", "input_state_constraints", "=", "[", "con", "for", "con", "in", "self", ".", "constraints", "if", "con", ".", "constrained_variable", "==", "ConstrainedVariableType", ".", "INPUT_AND_STATE", "]", "\n", "self", ".", "num_input_state_constraints", "=", "sum", "(", "[", "con", ".", "num_constraints", "for", "con", "in", "self", ".", "input_state_constraints", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.__len__": [[450, 458], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the constraint list length.\n\n        Returns:\n            int: The number of constraints in the list.\n\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "constraints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_all_symbolic_models": [[459, 464], ["constraints.get_symbolic_constraint_models"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.get_symbolic_constraint_models"], ["", "def", "get_all_symbolic_models", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return all the symbolic models the constraints.\n\n        \"\"\"", "\n", "return", "get_symbolic_constraint_models", "(", "self", ".", "constraints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_state_constraint_symbolic_models": [[465, 470], ["constraints.get_symbolic_constraint_models"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.get_symbolic_constraint_models"], ["", "def", "get_state_constraint_symbolic_models", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return only the constraints that act on the state.\n\n        \"\"\"", "\n", "return", "get_symbolic_constraint_models", "(", "self", ".", "state_constraints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_input_constraint_symbolic_models": [[471, 476], ["constraints.get_symbolic_constraint_models"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.get_symbolic_constraint_models"], ["", "def", "get_input_constraint_symbolic_models", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return only the constraints that act on the input.\n\n        \"\"\"", "\n", "return", "get_symbolic_constraint_models", "(", "self", ".", "input_constraints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_input_and_state_constraint_symbolic_models": [[477, 482], ["constraints.get_symbolic_constraint_models"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.get_symbolic_constraint_models"], ["", "def", "get_input_and_state_constraint_symbolic_models", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return only the constraints that act on both state and inputs simultaneously.\n\n        \"\"\"", "\n", "return", "get_symbolic_constraint_models", "(", "self", ".", "input_state_constraints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_stacked_symbolic_model": [[483, 499], ["casadi.vertcat", "casadi.Function", "con.get_symbolic_model", "func"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.LinearConstraint.get_symbolic_model"], ["", "def", "get_stacked_symbolic_model", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Gets the symbolic form of all constraints.\n\n        Args:\n            env: The environment to constrain.\n\n        Returns:\n            obj: The symbolic form of the constraint.\n\n        \"\"\"", "\n", "symbolic_models", "=", "[", "con", ".", "get_symbolic_model", "(", ")", "for", "con", "in", "self", ".", "constraints", "]", "\n", "X", "=", "env", ".", "symbolic", ".", "x_sym", "\n", "U", "=", "env", ".", "symbolic", ".", "u_sym", "\n", "stack_c_sym", "=", "cs", ".", "vertcat", "(", "*", "[", "func", "(", "X", ",", "U", ")", "for", "func", "in", "symbolic_models", "]", ")", "\n", "sym_func", "=", "cs", ".", "Function", "(", "\"constraints\"", ",", "[", "X", ",", "U", "]", ",", "[", "stack_c_sym", "]", ")", "\n", "return", "sym_func", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_values": [[500, 518], ["numpy.concatenate", "numpy.concatenate", "con.get_value", "con.get_value"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.SymmetricStateConstraint.get_value", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.SymmetricStateConstraint.get_value"], ["", "def", "get_values", "(", "self", ",", "\n", "env", ",", "\n", "only_state", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"Gets all constraint function values.\n\n        Args:\n            env: The environment to constrain.\n\n        Returns:\n            ndarray: An array with the evaluation of each constraint.\n\n        \"\"\"", "\n", "if", "only_state", ":", "\n", "            ", "con_values", "=", "np", ".", "concatenate", "(", "[", "con", ".", "get_value", "(", "env", ")", "for", "con", "in", "self", ".", "state_constraints", "]", ")", "\n", "", "else", ":", "\n", "            ", "con_values", "=", "np", ".", "concatenate", "(", "[", "con", ".", "get_value", "(", "env", ")", "for", "con", "in", "self", ".", "constraints", "]", ")", "\n", "", "return", "con_values", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_violations": [[519, 537], ["con.is_violated", "con.is_violated"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.is_violated", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.is_violated"], ["", "def", "get_violations", "(", "self", ",", "\n", "env", ",", "\n", "only_state", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"Gets all constraint violations.\n\n        Args:\n            env: The environment to constrain.\n\n        Returns:\n            list: A list of booleans saying whether each constraint was violated.\n\n        \"\"\"", "\n", "if", "only_state", ":", "\n", "            ", "flags", "=", "[", "con", ".", "is_violated", "(", "env", ")", "for", "con", "in", "self", ".", "state_constraints", "]", "\n", "", "else", ":", "\n", "            ", "flags", "=", "[", "con", ".", "is_violated", "(", "env", ")", "for", "con", "in", "self", ".", "constraints", "]", "\n", "", "return", "flags", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.is_violated": [[538, 561], ["numpy.split", "any", "any", "con.is_violated", "con.is_violated", "zip"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.is_violated", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.is_violated"], ["", "def", "is_violated", "(", "self", ",", "\n", "env", ",", "\n", "c_value", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Checks if any of the constraints is violated.\n\n        Args:\n            env: The environment to constrain.\n            c_value: an already calculated constraint value (no need to recompute).\n\n        Returns:\n            bool: A boolean flag if any constraint is violeted. \n\n        \"\"\"", "\n", "if", "c_value", "is", "not", "None", ":", "\n", "            ", "c_value_splits", "=", "np", ".", "split", "(", "c_value", ",", "self", ".", "constraint_indices", ")", "\n", "flag", "=", "any", "(", "[", "\n", "con", ".", "is_violated", "(", "env", ",", "c_value", "=", "c_value_split", ")", "\n", "for", "con", ",", "c_value_split", "in", "zip", "(", "self", ".", "constraints", ",", "c_value_splits", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "flag", "=", "any", "(", "[", "con", ".", "is_violated", "(", "env", ")", "for", "con", "in", "self", ".", "constraints", "]", ")", "\n", "", "return", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.is_almost_active": [[562, 581], ["numpy.split", "any", "any", "con.is_almost_active", "con.is_almost_active", "zip"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.is_almost_active", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.is_almost_active"], ["", "def", "is_almost_active", "(", "self", ",", "\n", "env", ",", "\n", "c_value", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Checks if constraint is nearly violated.\n\n        This is checked by using a slack variable (from init args) and can be used\n        for reward shaping/constraint penalty in RL methods.\n\n        \"\"\"", "\n", "if", "c_value", "is", "not", "None", ":", "\n", "            ", "c_value_splits", "=", "np", ".", "split", "(", "c_value", ",", "self", ".", "constraint_indices", ")", "\n", "flag", "=", "any", "(", "[", "\n", "con", ".", "is_almost_active", "(", "env", ",", "c_value", "=", "c_value_split", ")", "\n", "for", "con", ",", "c_value_split", "in", "zip", "(", "self", ".", "constraints", ",", "c_value_splits", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "flag", "=", "any", "(", "[", "con", ".", "is_almost_active", "(", "env", ")", "for", "con", "in", "self", ".", "constraints", "]", ")", "\n", "", "return", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.get_symbolic_constraint_models": [[415, 421], ["con.get_symbolic_model"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.LinearConstraint.get_symbolic_model"], ["", "", "", "def", "get_symbolic_constraint_models", "(", "constraint_list", ")", ":", "\n", "    ", "\"\"\"Create list of symbolic models from list of constraints.\n\n    \"\"\"", "\n", "symbolic_models", "=", "[", "con", ".", "get_symbolic_model", "(", ")", "for", "con", "in", "constraint_list", "]", "\n", "return", "symbolic_models", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.create_constraint_list": [[591, 610], ["constraints.ConstraintList", "isinstance", "constraint_list.append", "constraint.keys", "con_class"], "function", ["None"], ["def", "create_constraint_list", "(", "constraint_specs", ",", "available_constraints", ",", "env", ")", ":", "\n", "    ", "\"\"\"Creates a ConstraintList from yaml constraint specification.\n\n    Args:\n        constraint_specs (list): List of dicts defining the constraints info.\n        available_constraints (dict): Dict of the constraints that are available\n        env (BenchmarkEnv): Env for which the constraints will be applied\n    \"\"\"", "\n", "constraint_list", "=", "[", "]", "\n", "for", "constraint", "in", "constraint_specs", ":", "\n", "        ", "assert", "isinstance", "(", "constraint", ",", "dict", ")", ",", "\"[ERROR]: Each constraint must be specified as a dict.\"", "\n", "assert", "\"constraint_form\"", "in", "constraint", ".", "keys", "(", ")", ",", "\"[ERROR]: Each constraint must have a key 'constraint_form'\"", "\n", "con_form", "=", "constraint", "[", "\"constraint_form\"", "]", "\n", "assert", "con_form", "in", "available_constraints", ",", "\"[ERROR]. constraint not in list of available constraints\"", "\n", "con_class", "=", "available_constraints", "[", "con_form", "]", "\n", "cfg", "=", "{", "key", ":", "constraint", "[", "key", "]", "for", "key", "in", "constraint", "if", "key", "!=", "\"constraint_form\"", "}", "\n", "constraint_list", ".", "append", "(", "con_class", "(", "env", ",", "**", "cfg", ")", ")", "\n", "", "return", "ConstraintList", "(", "constraint_list", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.Disturbance.__init__": [[13, 24], ["numpy.asarray", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "dim", ",", "\n", "mask", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "dim", "=", "dim", "\n", "self", ".", "mask", "=", "mask", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "self", ".", "mask", "=", "np", ".", "asarray", "(", "mask", ")", "\n", "assert", "self", ".", "dim", "==", "len", "(", "self", ".", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.Disturbance.reset": [[25, 29], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.Disturbance.apply": [[30, 38], ["None"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "\n", "target", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "\"\"\"Default is identity.\n\n        \"\"\"", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.Disturbance.seed": [[39, 44], ["None"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Reset seed from env.\n        \n        \"\"\"", "\n", "self", ".", "np_random", "=", "env", ".", "np_random", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.__init__": [[52, 59], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "disturbances", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of the list of disturbances.\n\n        \"\"\"", "\n", "self", ".", "disturbances", "=", "disturbances", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.reset": [[60, 68], ["disturb.reset"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["", "def", "reset", "(", "self", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "\"\"\"Sequentially reset disturbances.\n\n        \"\"\"", "\n", "for", "disturb", "in", "self", ".", "disturbances", ":", "\n", "            ", "disturb", ".", "reset", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.apply": [[69, 80], ["disturb.apply"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.PeriodicNoise.apply"], ["", "", "def", "apply", "(", "self", ",", "\n", "target", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "\"\"\"Sequentially apply disturbances.\n\n        \"\"\"", "\n", "disturbed", "=", "target", "\n", "for", "disturb", "in", "self", ".", "disturbances", ":", "\n", "            ", "disturbed", "=", "disturb", ".", "apply", "(", "disturbed", ",", "env", ")", "\n", "", "return", "disturbed", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed": [[81, 87], ["disturb.seed"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed"], ["", "def", "seed", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Reset seed from env.\n        \n        \"\"\"", "\n", "for", "disturb", "in", "self", ".", "disturbances", ":", "\n", "            ", "disturb", ".", "seed", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.ImpulseDisturbance.__init__": [[99, 118], ["disturbances.Disturbance.__init__", "int"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "dim", ",", "\n", "mask", "=", "None", ",", "\n", "magnitude", "=", "1", ",", "\n", "step_offset", "=", "None", ",", "\n", "duration", "=", "1", ",", "\n", "decay_rate", "=", "1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ",", "dim", ",", "mask", ")", "\n", "self", ".", "magnitude", "=", "magnitude", "\n", "self", ".", "step_offset", "=", "step_offset", "\n", "self", ".", "max_step", "=", "int", "(", "env", ".", "EPISODE_LEN_SEC", "/", "env", ".", "CTRL_TIMESTEP", ")", "\n", "# Specify shape of the impulse.", "\n", "assert", "duration", ">=", "1", "\n", "assert", "decay_rate", ">", "0", "and", "decay_rate", "<=", "1", "\n", "self", ".", "duration", "=", "duration", "\n", "self", ".", "decay_rate", "=", "decay_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.ImpulseDisturbance.reset": [[119, 127], ["int", "disturbances.ImpulseDisturbance.np_random.randint"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "if", "self", ".", "step_offset", "is", "None", ":", "\n", "            ", "self", ".", "current_step_offset", "=", "self", ".", "np_random", ".", "randint", "(", "self", ".", "max_step", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "current_step_offset", "=", "self", ".", "step_offset", "\n", "", "self", ".", "current_peak_step", "=", "int", "(", "self", ".", "current_step_offset", "+", "self", ".", "duration", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.ImpulseDisturbance.apply": [[128, 144], ["numpy.abs"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "\n", "target", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "noise", "=", "0", "\n", "if", "env", ".", "ctrl_step_counter", ">=", "self", ".", "current_step_offset", ":", "\n", "            ", "peak_offset", "=", "np", ".", "abs", "(", "env", ".", "ctrl_step_counter", "-", "self", ".", "current_peak_step", ")", "\n", "if", "peak_offset", "<", "self", ".", "duration", "/", "2", ":", "\n", "                ", "decay", "=", "self", ".", "decay_rate", "**", "peak_offset", "\n", "", "else", ":", "\n", "                ", "decay", "=", "0", "\n", "", "noise", "=", "self", ".", "magnitude", "*", "decay", "\n", "", "if", "self", ".", "mask", "is", "not", "None", ":", "\n", "            ", "noise", "*=", "self", ".", "mask", "\n", "", "disturbed", "=", "target", "+", "noise", "\n", "return", "disturbed", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.StepDisturbance.__init__": [[153, 165], ["disturbances.Disturbance.__init__", "int"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "dim", ",", "\n", "mask", "=", "None", ",", "\n", "magnitude", "=", "1", ",", "\n", "step_offset", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ",", "dim", ",", "mask", ")", "\n", "self", ".", "magnitude", "=", "magnitude", "\n", "self", ".", "step_offset", "=", "step_offset", "\n", "self", ".", "max_step", "=", "int", "(", "env", ".", "EPISODE_LEN_SEC", "/", "env", ".", "CTRL_TIMESTEP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.StepDisturbance.reset": [[166, 173], ["disturbances.StepDisturbance.np_random.randint"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "if", "self", ".", "step_offset", "is", "None", ":", "\n", "            ", "self", ".", "current_step_offset", "=", "self", ".", "np_random", ".", "randint", "(", "self", ".", "max_step", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "current_step_offset", "=", "self", ".", "step_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.StepDisturbance.apply": [[174, 185], ["None"], "methods", ["None"], ["", "", "def", "apply", "(", "self", ",", "\n", "target", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "noise", "=", "0", "\n", "if", "env", ".", "ctrl_step_counter", ">=", "self", ".", "current_step_offset", ":", "\n", "            ", "noise", "=", "self", ".", "magnitude", "\n", "", "if", "self", ".", "mask", "is", "not", "None", ":", "\n", "            ", "noise", "*=", "self", ".", "mask", "\n", "", "disturbed", "=", "target", "+", "noise", "\n", "return", "disturbed", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.UniformNoise.__init__": [[189, 206], ["disturbances.Disturbance.__init__", "isinstance", "isinstance", "numpy.asarray", "isinstance", "numpy.asarray", "isinstance", "numpy.asarray", "ValueError", "numpy.asarray", "ValueError"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "dim", ",", "mask", "=", "None", ",", "low", "=", "0.0", ",", "high", "=", "1.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ",", "dim", ",", "mask", ")", "\n", "\n", "# uniform distribution bounds", "\n", "if", "isinstance", "(", "low", ",", "float", ")", ":", "\n", "            ", "self", ".", "low", "=", "np", ".", "asarray", "(", "[", "low", "]", "*", "self", ".", "dim", ")", "\n", "", "elif", "isinstance", "(", "low", ",", "list", ")", ":", "\n", "            ", "self", ".", "low", "=", "np", ".", "asarray", "(", "low", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR] UniformNoise.__init__(): low must be specified as a float or list.\"", ")", "\n", "\n", "", "if", "isinstance", "(", "high", ",", "float", ")", ":", "\n", "            ", "self", ".", "high", "=", "np", ".", "asarray", "(", "[", "high", "]", "*", "self", ".", "dim", ")", "\n", "", "elif", "isinstance", "(", "low", ",", "list", ")", ":", "\n", "            ", "self", ".", "high", "=", "np", ".", "asarray", "(", "high", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR] UniformNoise.__init__(): high must be specified as a float or list.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.UniformNoise.apply": [[207, 213], ["disturbances.UniformNoise.np_random.uniform"], "methods", ["None"], ["", "", "def", "apply", "(", "self", ",", "target", ",", "env", ")", ":", "\n", "        ", "noise", "=", "self", ".", "np_random", ".", "uniform", "(", "self", ".", "low", ",", "self", ".", "high", ",", "size", "=", "self", ".", "dim", ")", "\n", "if", "self", ".", "mask", "is", "not", "None", ":", "\n", "            ", "noise", "*=", "self", ".", "mask", "\n", "", "disturbed", "=", "target", "+", "noise", "\n", "return", "disturbed", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.WhiteNoise.__init__": [[220, 236], ["disturbances.Disturbance.__init__", "isinstance", "numpy.asarray", "isinstance", "len", "numpy.asarray", "ValueError"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "dim", ",", "\n", "mask", "=", "None", ",", "\n", "std", "=", "1.0", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ",", "dim", ",", "mask", ")", "\n", "# I.i.d gaussian variance.", "\n", "if", "isinstance", "(", "std", ",", "float", ")", ":", "\n", "            ", "self", ".", "std", "=", "np", ".", "asarray", "(", "[", "std", "]", "*", "self", ".", "dim", ")", "\n", "", "elif", "isinstance", "(", "std", ",", "list", ")", ":", "\n", "            ", "self", ".", "std", "=", "np", ".", "asarray", "(", "std", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR] WhiteNoise.__init__(): std must be specified as a float or list.\"", ")", "\n", "", "assert", "self", ".", "dim", "==", "len", "(", "self", ".", "std", ")", ",", "\"std shape should be the same as dim.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.WhiteNoise.apply": [[237, 249], ["disturbances.WhiteNoise.np_random.normal"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "\n", "target", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "noise", "=", "self", ".", "np_random", ".", "normal", "(", "0", ",", "self", ".", "std", ",", "size", "=", "self", ".", "dim", ")", "\n", "# # TODO: hack for debug ", "\n", "# noise = np.clip(noise, -self.std, self.std)", "\n", "\n", "if", "self", ".", "mask", "is", "not", "None", ":", "\n", "            ", "noise", "*=", "self", ".", "mask", "\n", "", "disturbed", "=", "target", "+", "noise", "\n", "return", "disturbed", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.BrownianNoise.__init__": [[256, 258], ["disturbances.Disturbance.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.PeriodicNoise.__init__": [[265, 277], ["disturbances.Disturbance.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "dim", ",", "\n", "mask", "=", "None", ",", "\n", "scale", "=", "1.0", ",", "\n", "frequency", "=", "1.0", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ",", "dim", ")", "\n", "# Sine function parameters.", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "frequency", "=", "frequency", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.PeriodicNoise.apply": [[278, 289], ["disturbances.PeriodicNoise.np_random.uniform", "numpy.sin"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "\n", "target", ",", "\n", "env", "\n", ")", ":", "\n", "        ", "phase", "=", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "np", ".", "pi", ",", "high", "=", "np", ".", "pi", ",", "size", "=", "self", ".", "dim", ")", "\n", "t", "=", "env", ".", "pyb_step_counter", "*", "env", ".", "PYB_TIMESTEP", "\n", "noise", "=", "self", ".", "scale", "*", "np", ".", "sin", "(", "2", "*", "np", ".", "pi", "*", "self", ".", "frequency", "*", "t", "+", "phase", ")", "\n", "if", "self", ".", "mask", "is", "not", "None", ":", "\n", "            ", "noise", "*=", "self", ".", "mask", "\n", "", "disturbed", "=", "target", "+", "noise", "\n", "return", "disturbed", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.StateDependentDisturbance.__init__": [[298, 305], ["disturbances.Disturbance.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "dim", ",", "\n", "mask", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.create_disturbance_list": [[315, 334], ["disturbances.DisturbanceList", "disturb_cls", "disturb_list.append", "disturb_cls.keys"], "function", ["None"], ["def", "create_disturbance_list", "(", "disturbance_specs", ",", "shared_args", ",", "env", ")", ":", "\n", "    ", "\"\"\"Creates a DisturbanceList from yaml disturbance specification.\n\n    Args:\n        disturbance_specs (list): List of dicts defining the disturbances info.\n        shared_args (dict): args shared across the disturbances in the list.\n        env (BenchmarkEnv): Env for which the constraints will be applied\n    \"\"\"", "\n", "disturb_list", "=", "[", "]", "\n", "# Each disturbance for the mode.", "\n", "for", "disturb", "in", "disturbance_specs", ":", "\n", "        ", "assert", "\"disturbance_func\"", "in", "disturb", ".", "keys", "(", ")", ",", "\"[ERROR]: Every distrubance must specify a disturbance_func.\"", "\n", "disturb_func", "=", "disturb", "[", "\"disturbance_func\"", "]", "\n", "assert", "disturb_func", "in", "DISTURBANCE_TYPES", ",", "\"[ERROR] in BenchmarkEnv._setup_disturbances(), disturbance type not available.\"", "\n", "disturb_cls", "=", "DISTURBANCE_TYPES", "[", "disturb_func", "]", "\n", "cfg", "=", "{", "key", ":", "disturb", "[", "key", "]", "for", "key", "in", "disturb", "if", "key", "!=", "\"disturbance_func\"", "}", "\n", "disturb", "=", "disturb_cls", "(", "env", ",", "**", "shared_args", ",", "**", "cfg", ")", "\n", "disturb_list", ".", "append", "(", "disturb", ")", "\n", "", "return", "DisturbanceList", "(", "disturb_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.__init__": [[18, 34], ["gym.Wrapper.__init__", "time.time", "collections.deque", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "deque_size", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "RecordEpisodeStatistics", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "deque_size", "=", "deque_size", "\n", "self", ".", "t0", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "episode_return", "=", "0.0", "\n", "self", ".", "episode_length", "=", "0", "\n", "self", ".", "return_queue", "=", "deque", "(", "maxlen", "=", "deque_size", ")", "\n", "self", ".", "length_queue", "=", "deque", "(", "maxlen", "=", "deque_size", ")", "\n", "# Other tracked stats.", "\n", "self", ".", "episode_stats", "=", "{", "}", "\n", "self", ".", "accumulated_stats", "=", "{", "}", "\n", "self", ".", "queued_stats", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.add_tracker": [[35, 54], ["collections.deque", "Exception"], "methods", ["None"], ["", "def", "add_tracker", "(", "self", ",", "\n", "name", ",", "\n", "init_value", ",", "\n", "mode", "=", "\"accumulate\"", "\n", ")", ":", "\n", "        ", "\"\"\"Adds a specific stat to be tracked (accumulate|queue).\n        \n        Modes to track stats\n            * accumulate: rolling sum, e.g. total # of constraint violations during training.\n            * queue: finite, individual storage, e.g. returns, lengths, constraint costs.\n\n        \"\"\"", "\n", "self", ".", "episode_stats", "[", "name", "]", "=", "init_value", "\n", "if", "mode", "==", "\"accumulate\"", ":", "\n", "            ", "self", ".", "accumulated_stats", "[", "name", "]", "=", "init_value", "\n", "", "elif", "mode", "==", "\"queue\"", ":", "\n", "            ", "self", ".", "queued_stats", "[", "name", "]", "=", "deque", "(", "maxlen", "=", "self", ".", "deque_size", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Tracker mode not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.reset": [[55, 64], ["record_episode_statistics.RecordEpisodeStatistics.env.reset"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["", "", "def", "reset", "(", "self", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "episode_return", "=", "0.0", "\n", "self", ".", "episode_length", "=", "0", "\n", "# Reset other tracked stats.", "\n", "for", "key", "in", "self", ".", "episode_stats", ":", "\n", "            ", "self", ".", "episode_stats", "[", "key", "]", "*=", "0", "\n", "", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.RecordEpisodeStatistics.step": [[65, 90], ["record_episode_statistics.RecordEpisodeStatistics.env.step", "record_episode_statistics.RecordEpisodeStatistics.return_queue.append", "record_episode_statistics.RecordEpisodeStatistics.length_queue.append", "round", "copy.deepcopy", "copy.deepcopy", "record_episode_statistics.RecordEpisodeStatistics.queued_stats[].append", "time.time", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step"], ["", "def", "step", "(", "self", ",", "\n", "action", "\n", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "episode_return", "+=", "reward", "\n", "self", ".", "episode_length", "+=", "1", "\n", "# Add other tracked stats.", "\n", "for", "key", "in", "self", ".", "episode_stats", ":", "\n", "            ", "if", "key", "in", "info", ":", "\n", "                ", "self", ".", "episode_stats", "[", "key", "]", "+=", "info", "[", "key", "]", "\n", "", "", "if", "done", ":", "\n", "            ", "info", "[", "'episode'", "]", "=", "{", "'r'", ":", "self", ".", "episode_return", ",", "'l'", ":", "self", ".", "episode_length", ",", "'t'", ":", "round", "(", "time", ".", "time", "(", ")", "-", "self", ".", "t0", ",", "6", ")", "}", "\n", "self", ".", "return_queue", ".", "append", "(", "self", ".", "episode_return", ")", "\n", "self", ".", "length_queue", ".", "append", "(", "self", ".", "episode_length", ")", "\n", "self", ".", "episode_return", "=", "0.0", "\n", "self", ".", "episode_length", "=", "0", "\n", "# Other tracked stats.", "\n", "for", "key", "in", "self", ".", "episode_stats", ":", "\n", "                ", "info", "[", "'episode'", "]", "[", "key", "]", "=", "deepcopy", "(", "self", ".", "episode_stats", "[", "key", "]", ")", "\n", "if", "key", "in", "self", ".", "accumulated_stats", ":", "\n", "                    ", "self", ".", "accumulated_stats", "[", "key", "]", "+=", "deepcopy", "(", "self", ".", "episode_stats", "[", "key", "]", ")", "\n", "", "if", "key", "in", "self", ".", "queued_stats", ":", "\n", "                    ", "self", ".", "queued_stats", "[", "key", "]", ".", "append", "(", "deepcopy", "(", "self", ".", "episode_stats", "[", "key", "]", ")", ")", "\n", "", "self", ".", "episode_stats", "[", "key", "]", "*=", "0", "\n", "", "", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.__init__": [[99, 114], ["safe_control_gym.envs.env_wrappers.vectorized_env.vec_env.VecEnvWrapper.__init__", "numpy.zeros", "numpy.zeros", "collections.deque", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "venv", ",", "\n", "deque_size", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "VecRecordEpisodeStatistics", ",", "self", ")", ".", "__init__", "(", "venv", ")", "\n", "self", ".", "deque_size", "=", "deque_size", "\n", "self", ".", "episode_return", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "self", ".", "episode_length", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "self", ".", "return_queue", "=", "deque", "(", "maxlen", "=", "deque_size", ")", "\n", "self", ".", "length_queue", "=", "deque", "(", "maxlen", "=", "deque_size", ")", "\n", "# Other tracked stats.", "\n", "self", ".", "episode_stats", "=", "{", "}", "\n", "self", ".", "accumulated_stats", "=", "{", "}", "\n", "self", ".", "queued_stats", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.add_tracker": [[115, 130], ["range", "collections.deque", "Exception"], "methods", ["None"], ["", "def", "add_tracker", "(", "self", ",", "\n", "name", ",", "\n", "init_value", ",", "\n", "mode", "=", "\"accumulate\"", "\n", ")", ":", "\n", "        ", "\"\"\"Adds a specific stat to be tracked (accumulated).\n\n        \"\"\"", "\n", "self", ".", "episode_stats", "[", "name", "]", "=", "[", "init_value", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", "if", "mode", "==", "\"accumulate\"", ":", "\n", "            ", "self", ".", "accumulated_stats", "[", "name", "]", "=", "init_value", "\n", "", "elif", "mode", "==", "\"queue\"", ":", "\n", "            ", "self", ".", "queued_stats", "[", "name", "]", "=", "deque", "(", "maxlen", "=", "self", ".", "deque_size", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Tracker mode not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.reset": [[131, 141], ["numpy.zeros", "numpy.zeros", "record_episode_statistics.VecRecordEpisodeStatistics.venv.reset", "range"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["", "", "def", "reset", "(", "self", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "episode_return", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "self", ".", "episode_length", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "# Reset other tracked stats.", "\n", "for", "key", "in", "self", ".", "episode_stats", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "                ", "self", ".", "episode_stats", "[", "key", "]", "[", "i", "]", "*=", "0", "\n", "", "", "return", "self", ".", "venv", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.env_wrappers.record_episode_statistics.VecRecordEpisodeStatistics.step_wait": [[142, 170], ["record_episode_statistics.VecRecordEpisodeStatistics.venv.step_wait", "enumerate", "zip", "record_episode_statistics.VecRecordEpisodeStatistics.return_queue.append", "record_episode_statistics.VecRecordEpisodeStatistics.length_queue.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "record_episode_statistics.VecRecordEpisodeStatistics.queued_stats[].append", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.step_wait"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "for", "i", ",", "(", "r", ",", "d", ")", "in", "enumerate", "(", "zip", "(", "reward", ",", "done", ")", ")", ":", "\n", "            ", "self", ".", "episode_return", "[", "i", "]", "+=", "r", "\n", "self", ".", "episode_length", "[", "i", "]", "+=", "1", "\n", "# Add other tracked stats.", "\n", "for", "key", "in", "self", ".", "episode_stats", ":", "\n", "                ", "if", "d", ":", "\n", "                    ", "inf", "=", "info", "[", "\"n\"", "]", "[", "i", "]", "[", "\"terminal_info\"", "]", "\n", "", "else", ":", "\n", "                    ", "inf", "=", "info", "[", "\"n\"", "]", "[", "i", "]", "\n", "", "if", "key", "in", "inf", ":", "\n", "                    ", "self", ".", "episode_stats", "[", "key", "]", "[", "i", "]", "+=", "inf", "[", "key", "]", "\n", "", "", "if", "d", ":", "\n", "                ", "info", "[", "\"n\"", "]", "[", "i", "]", "[", "'episode'", "]", "=", "{", "'r'", ":", "self", ".", "episode_return", "[", "i", "]", ",", "'l'", ":", "self", ".", "episode_length", "[", "i", "]", "}", "\n", "self", ".", "return_queue", ".", "append", "(", "deepcopy", "(", "self", ".", "episode_return", "[", "i", "]", ")", ")", "\n", "self", ".", "length_queue", ".", "append", "(", "deepcopy", "(", "self", ".", "episode_length", "[", "i", "]", ")", ")", "\n", "self", ".", "episode_return", "[", "i", "]", "=", "0", "\n", "self", ".", "episode_length", "[", "i", "]", "=", "0", "\n", "# Other tracked stats.", "\n", "for", "key", "in", "self", ".", "episode_stats", ":", "\n", "                    ", "info", "[", "\"n\"", "]", "[", "i", "]", "[", "'episode'", "]", "[", "key", "]", "=", "deepcopy", "(", "self", ".", "episode_stats", "[", "key", "]", "[", "i", "]", ")", "\n", "if", "key", "in", "self", ".", "accumulated_stats", ":", "\n", "                        ", "self", ".", "accumulated_stats", "[", "key", "]", "+=", "deepcopy", "(", "self", ".", "episode_stats", "[", "key", "]", "[", "i", "]", ")", "\n", "", "if", "key", "in", "self", ".", "queued_stats", ":", "\n", "                        ", "self", ".", "queued_stats", "[", "key", "]", ".", "append", "(", "deepcopy", "(", "self", ".", "episode_stats", "[", "key", "]", "[", "i", "]", ")", ")", "\n", "", "self", ".", "episode_stats", "[", "key", "]", "[", "i", "]", "*=", "0", "\n", "", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.__init__": [[27, 35], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "num_envs", ",", "\n", "observation_space", ",", "\n", "action_space", "\n", ")", ":", "\n", "        ", "self", ".", "num_envs", "=", "num_envs", "\n", "self", ".", "observation_space", "=", "observation_space", "\n", "self", ".", "action_space", "=", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.reset": [[36, 45], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset all the environments and return an array of observations, or a dict of observation arrays.\n\n        If step_async is still doing work, that work will be cancelled and step_wait() should not\n        be called until step_async() is invoked again.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.step_async": [[46, 57], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step_async", "(", "self", ",", "\n", "actions", "\n", ")", ":", "\n", "        ", "\"\"\"Tell all the environments to start taking a step with the given actions.\n\n        Call step_wait() to get the results of the step.\n        You should not call this if a step_async run is already pending.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.step_wait": [[58, 70], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "\"\"\"Wait for the step taken with step_async().\n\n        Returns (obs, rews, dones, infos):\n            - obs: an array of observations, or a dict of arrays of observations.\n            - rews: an array of rewards\n            - dones: an array of \"episode done\" booleans\n            - infos: a sequence of info objects\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.close_extras": [[71, 76], ["None"], "methods", ["None"], ["", "def", "close_extras", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clean up the  extra resources. Only runs when not self.closed.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.close": [[77, 84], ["vec_env.VecEnv.close_extras", "vec_env.VecEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.close_extras", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "closed", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "", "self", ".", "close_extras", "(", ")", "\n", "self", ".", "closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.step": [[85, 93], ["vec_env.VecEnv.step_async", "vec_env.VecEnv.step_wait"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.step_async", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.step_wait"], ["", "def", "step", "(", "self", ",", "\n", "actions", "\n", ")", ":", "\n", "        ", "\"\"\"Step the environments synchronously.\n\n        \"\"\"", "\n", "self", ".", "step_async", "(", "actions", ")", "\n", "return", "self", ".", "step_wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.render": [[94, 109], ["vec_env.VecEnv.get_images", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils.tile_images", "vec_env.VecEnv.get_viewer().imshow", "vec_env.VecEnv.get_viewer", "vec_env.VecEnv.get_viewer"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_images", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils.tile_images", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.get_viewer", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.get_viewer"], ["", "def", "render", "(", "self", ",", "\n", "mode", "=", "'human'", "\n", ")", ":", "\n", "        ", "\"\"\"Display environment via a viewer.\n\n        \"\"\"", "\n", "imgs", "=", "self", ".", "get_images", "(", ")", "\n", "bigimg", "=", "tile_images", "(", "imgs", ")", "\n", "if", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "get_viewer", "(", ")", ".", "imshow", "(", "bigimg", ")", "\n", "return", "self", ".", "get_viewer", "(", ")", ".", "isopen", "\n", "", "elif", "mode", "==", "'rgb_array'", ":", "\n", "            ", "return", "bigimg", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.get_images": [[110, 115], ["None"], "methods", ["None"], ["", "", "def", "get_images", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return RGB images from each environment.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.unwrapped": [[116, 122], ["isinstance"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ",", "VecEnvWrapper", ")", ":", "\n", "            ", "return", "self", ".", "venv", ".", "unwrapped", "\n", "", "else", ":", "\n", "            ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.get_viewer": [[123, 128], ["rendering.SimpleImageViewer"], "methods", ["None"], ["", "", "def", "get_viewer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "SimpleImageViewer", "(", ")", "\n", "", "return", "self", ".", "viewer", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.get_attr": [[129, 135], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_attr", "(", "self", ",", "attr_name", ",", "indices", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return attribute from vectorized environment.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.set_attr": [[136, 142], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_attr", "(", "self", ",", "attr_name", ",", "values", ",", "indices", "=", "None", ")", ":", "\n", "        ", "\"\"\"Set attribute inside vectorized environments.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv.env_method": [[143, 153], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "env_method", "(", "self", ",", "\n", "method_name", ",", "\n", "method_args", "=", "None", ",", "\n", "method_kwargs", "=", "None", ",", "\n", "indices", "=", "None", ")", ":", "\n", "        ", "\"\"\"Call instance methods of vectorized environments.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv._get_indices": [[154, 163], ["range", "isinstance"], "methods", ["None"], ["", "def", "_get_indices", "(", "self", ",", "\n", "indices", "\n", ")", ":", "\n", "        ", "\"\"\"Convert a flexibly-typed reference to environment indices to an implied list of indices.\"\"\"", "\n", "if", "indices", "is", "None", ":", "\n", "            ", "indices", "=", "range", "(", "self", ".", "num_envs", ")", "\n", "", "elif", "isinstance", "(", "indices", ",", "int", ")", ":", "\n", "            ", "indices", "=", "[", "indices", "]", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnvWrapper.__init__": [[168, 177], ["vec_env.VecEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "venv", ",", "\n", "observation_space", "=", "None", ",", "\n", "action_space", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "super", "(", ")", ".", "__init__", "(", "num_envs", "=", "venv", ".", "num_envs", ",", "\n", "observation_space", "=", "observation_space", "or", "venv", ".", "observation_space", ",", "\n", "action_space", "=", "action_space", "or", "venv", ".", "action_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnvWrapper.step_async": [[178, 180], ["vec_env.VecEnvWrapper.venv.step_async"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.step_async"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "self", ".", "venv", ".", "step_async", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnvWrapper.reset": [[181, 184], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnvWrapper.step_wait": [[185, 188], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnvWrapper.close": [[189, 191], ["vec_env.VecEnvWrapper.venv.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnvWrapper.render": [[192, 194], ["vec_env.VecEnvWrapper.venv.render"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "render", "(", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnvWrapper.get_images": [[195, 197], ["vec_env.VecEnvWrapper.venv.get_images"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_images"], ["", "def", "get_images", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "get_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnvWrapper.__getattr__": [[198, 205], ["name.startswith", "getattr", "AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "\n", "name", "\n", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'_'", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"attempted to get missing private attribute '{}'\"", ".", "format", "(", "name", ")", ")", "\n", "", "return", "getattr", "(", "self", ".", "venv", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnvWrapper.get_attr": [[206, 211], ["vec_env.VecEnvWrapper.venv.get_attr"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_attr"], ["", "def", "get_attr", "(", "self", ",", "\n", "attr_name", ",", "\n", "indices", "=", "None", "\n", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "get_attr", "(", "attr_name", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnvWrapper.set_attr": [[212, 218], ["vec_env.VecEnvWrapper.venv.set_attr"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.set_attr"], ["", "def", "set_attr", "(", "self", ",", "\n", "attr_name", ",", "\n", "values", ",", "\n", "indices", "=", "None", "\n", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "set_attr", "(", "attr_name", ",", "values", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnvWrapper.env_method": [[219, 228], ["vec_env.VecEnvWrapper.venv.env_method"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.env_method"], ["", "def", "env_method", "(", "self", ",", "\n", "method_name", ",", "\n", "method_args", "=", "None", ",", "\n", "method_kwargs", "=", "None", ",", "\n", "indices", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "env_method", "(", "method_name", ",", "\n", "method_args", "=", "method_args", ",", "\n", "method_kwargs", "=", "method_kwargs", ",", "\n", "indices", "=", "indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv.__init__": [[22, 49], ["len", "numpy.array_split", "multiprocessing.get_context", "zip", "subproc_vec_env.SubprocVecEnv.remotes[].send", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env.VecEnv.__init__", "multiprocessing.get_context.Process", "remote.close", "subproc_vec_env.SubprocVecEnv.remotes[].recv", "zip", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils.clear_mpi_env_vars", "p.start", "multiprocessing.get_context.Pipe", "range", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils.CloudpickleWrapper"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils.clear_mpi_env_vars"], ["def", "__init__", "(", "self", ",", "env_fns", ",", "spaces", "=", "None", ",", "context", "=", "\"spawn\"", ",", "n_workers", "=", "1", ")", ":", "\n", "        ", "self", ".", "waiting", "=", "False", "\n", "self", ".", "closed", "=", "False", "\n", "nenvs", "=", "len", "(", "env_fns", ")", "\n", "self", ".", "n_workers", "=", "n_workers", "\n", "assert", "nenvs", "%", "n_workers", "==", "0", ",", "\"Number of envs must be divisible by number of workers to run in series\"", "\n", "env_fns", "=", "np", ".", "array_split", "(", "env_fns", ",", "self", ".", "n_workers", ")", "\n", "# Context is necessary for multiprocessing with CUDA, see pytorch.org/docs/stable/notes/multiprocessing.html", "\n", "ctx", "=", "mp", ".", "get_context", "(", "context", ")", "\n", "self", ".", "remotes", ",", "self", ".", "work_remotes", "=", "zip", "(", "\n", "*", "[", "ctx", ".", "Pipe", "(", ")", "for", "_", "in", "range", "(", "self", ".", "n_workers", ")", "]", ")", "\n", "self", ".", "ps", "=", "[", "\n", "ctx", ".", "Process", "(", "target", "=", "worker", ",", "\n", "args", "=", "(", "work_remote", ",", "remote", ",", "CloudpickleWrapper", "(", "env_fn", ")", ")", ")", "\n", "for", "(", "work_remote", ",", "remote", ",", "\n", "env_fn", ")", "in", "zip", "(", "self", ".", "work_remotes", ",", "self", ".", "remotes", ",", "env_fns", ")", "\n", "]", "\n", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "daemon", "=", "True", "# If the main process crashes, we should not cause things to hang.", "\n", "with", "clear_mpi_env_vars", "(", ")", ":", "\n", "                ", "p", ".", "start", "(", ")", "\n", "", "", "for", "remote", "in", "self", ".", "work_remotes", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "", "self", ".", "remotes", "[", "0", "]", ".", "send", "(", "(", "'get_spaces_spec'", ",", "None", ")", ")", "\n", "observation_space", ",", "action_space", "=", "self", ".", "remotes", "[", "0", "]", ".", "recv", "(", ")", ".", "x", "\n", "self", ".", "viewer", "=", "None", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "nenvs", ",", "observation_space", ",", "action_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv.step_async": [[50, 56], ["subproc_vec_env.SubprocVecEnv._assert_not_closed", "numpy.array_split", "zip", "remote.send"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv._assert_not_closed"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "actions", "=", "np", ".", "array_split", "(", "actions", ",", "self", ".", "n_workers", ")", "\n", "for", "remote", ",", "action", "in", "zip", "(", "self", ".", "remotes", ",", "actions", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'step'", ",", "action", ")", ")", "\n", "", "self", ".", "waiting", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv.step_wait": [[57, 64], ["subproc_vec_env.SubprocVecEnv._assert_not_closed", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_list", "zip", "remote.recv", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_obs", "numpy.stack", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv._assert_not_closed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_list", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_obs"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "results", "=", "_flatten_list", "(", "results", ")", "\n", "self", ".", "waiting", "=", "False", "\n", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "_flatten_obs", "(", "obs", ")", ",", "np", ".", "stack", "(", "rews", ")", ",", "np", ".", "stack", "(", "dones", ")", ",", "{", "\"n\"", ":", "infos", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv.reset": [[65, 73], ["subproc_vec_env.SubprocVecEnv._assert_not_closed", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_list", "zip", "remote.send", "remote.recv", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_obs"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv._assert_not_closed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_list", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'reset'", ",", "None", ")", ")", "\n", "", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "results", "=", "_flatten_list", "(", "results", ")", "\n", "obs", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "_flatten_obs", "(", "obs", ")", ",", "{", "\"n\"", ":", "infos", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv.get_images": [[74, 84], ["subproc_vec_env.SubprocVecEnv._assert_not_closed", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_list", "pipe.send", "pipe.recv"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv._assert_not_closed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_list"], ["", "def", "get_images", "(", "self", ")", ":", "\n", "        ", "\"\"\"Called by parent `render` to support tiling images.\n\n        \"\"\"", "\n", "self", ".", "_assert_not_closed", "(", ")", "\n", "for", "pipe", "in", "self", ".", "remotes", ":", "\n", "            ", "pipe", ".", "send", "(", "(", "'render'", ",", "None", ")", ")", "\n", "", "imgs", "=", "[", "pipe", ".", "recv", "(", ")", "for", "pipe", "in", "self", ".", "remotes", "]", "\n", "imgs", "=", "_flatten_list", "(", "imgs", ")", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv.close": [[85, 98], ["subproc_vec_env.SubprocVecEnv.viewer.close", "remote.send", "p.join", "remote.recv"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "closed", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "", "if", "self", ".", "waiting", ":", "\n", "            ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "                ", "remote", ".", "recv", "(", ")", "\n", "", "", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'close'", ",", "None", ")", ")", "\n", "", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "", "self", ".", "closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv._assert_not_closed": [[99, 101], ["None"], "methods", ["None"], ["", "def", "_assert_not_closed", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "closed", ",", "\"Trying to operate on a SubprocVecEnv after calling close()\"", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv.get_env_random_state": [[102, 107], ["remote.send", "remote.recv"], "methods", ["None"], ["", "def", "get_env_random_state", "(", "self", ")", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'get_random_state'", ",", "None", ")", ")", "\n", "", "worker_random_states", "=", "[", "remote", ".", "recv", "(", ")", ".", "x", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "return", "worker_random_states", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv.set_env_random_state": [[108, 112], ["zip", "remote.send", "remote.recv"], "methods", ["None"], ["", "def", "set_env_random_state", "(", "self", ",", "worker_random_states", ")", ":", "\n", "        ", "for", "remote", ",", "random_state", "in", "zip", "(", "self", ".", "remotes", ",", "worker_random_states", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'set_random_state'", ",", "random_state", ")", ")", "\n", "", "res", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv.get_attr": [[113, 121], ["subproc_vec_env.SubprocVecEnv._get_target_envs", "zip", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_list", "remote.send", "remote.recv"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv._get_target_envs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_list"], ["", "def", "get_attr", "(", "self", ",", "attr_name", ",", "indices", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return attribute from vectorized environment (see base class).\n\n        \"\"\"", "\n", "target_remotes", ",", "remote_env_indices", "=", "self", ".", "_get_target_envs", "(", "indices", ")", "\n", "for", "remote", ",", "env_indices", "in", "zip", "(", "target_remotes", ",", "remote_env_indices", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"get_attr\"", ",", "(", "env_indices", ",", "attr_name", ")", ")", ")", "\n", "", "return", "_flatten_list", "(", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "target_remotes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv.set_attr": [[122, 139], ["subproc_vec_env.SubprocVecEnv._get_target_envs", "range", "zip", "value_splits.append", "remote.send", "remote.recv", "len"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv._get_target_envs"], ["", "def", "set_attr", "(", "self", ",", "attr_name", ",", "values", ",", "indices", "=", "None", ")", ":", "\n", "        ", "\"\"\"Set attribute inside vectorized environments (see base class).\n\n        \"\"\"", "\n", "target_remotes", ",", "remote_env_indices", ",", "splits", "=", "self", ".", "_get_target_envs", "(", "\n", "indices", ")", "\n", "value_splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "splits", ")", "-", "1", ")", ":", "\n", "            ", "start", ",", "end", "=", "splits", "[", "i", "]", ",", "splits", "[", "i", "+", "1", "]", "\n", "value_splits", ".", "append", "(", "values", "[", "start", ":", "end", "]", ")", "\n", "\n", "", "for", "remote", ",", "env_indices", ",", "value_split", "in", "zip", "(", "target_remotes", ",", "\n", "remote_env_indices", ",", "\n", "value_splits", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"set_attr\"", ",", "(", "env_indices", ",", "attr_name", ",", "value_split", ")", ")", ")", "\n", "", "for", "remote", "in", "target_remotes", ":", "\n", "            ", "remote", ".", "recv", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv.env_method": [[140, 167], ["subproc_vec_env.SubprocVecEnv._get_target_envs", "range", "zip", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_list", "remote.send", "len", "method_arg_splits.append", "method_arg_splits.append", "method_kwarg_splits.append", "method_kwarg_splits.append", "remote.recv", "len", "len"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv._get_target_envs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_list"], ["", "", "def", "env_method", "(", "self", ",", "\n", "method_name", ",", "\n", "method_args", "=", "None", ",", "\n", "method_kwargs", "=", "None", ",", "\n", "indices", "=", "None", ")", ":", "\n", "        ", "\"\"\"Call instance methods of vectorized environments.\n\n        \"\"\"", "\n", "target_remotes", ",", "remote_env_indices", ",", "splits", "=", "self", ".", "_get_target_envs", "(", "indices", ")", "\n", "method_arg_splits", ",", "method_kwarg_splits", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "splits", ")", "-", "1", ")", ":", "\n", "            ", "start", ",", "end", "=", "splits", "[", "i", "]", ",", "splits", "[", "i", "+", "1", "]", "\n", "if", "method_args", "is", "None", ":", "\n", "                ", "method_arg_splits", ".", "append", "(", "[", "[", "]", "]", "*", "len", "(", "end", "-", "start", ")", ")", "\n", "", "else", ":", "\n", "                ", "method_arg_splits", ".", "append", "(", "method_args", "[", "start", ":", "end", "]", ")", "\n", "", "if", "method_kwargs", "is", "None", ":", "\n", "                ", "method_kwarg_splits", ".", "append", "(", "[", "{", "}", "]", "*", "len", "(", "end", "-", "start", ")", ")", "\n", "", "else", ":", "\n", "                ", "method_kwarg_splits", ".", "append", "(", "method_kwargs", "[", "start", ":", "end", "]", ")", "\n", "\n", "", "", "for", "remote", ",", "env_indices", ",", "method_arg_split", ",", "method_kwarg_split", "in", "zip", "(", "\n", "target_remotes", ",", "remote_env_indices", ",", "method_arg_splits", ",", "\n", "method_kwarg_splits", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"env_method\"", ",", "(", "env_indices", ",", "method_name", ",", "\n", "method_arg_split", ",", "method_kwarg_split", ")", ")", ")", "\n", "", "return", "_flatten_list", "(", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "target_remotes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.SubprocVecEnv._get_target_envs": [[168, 193], ["subproc_vec_env.SubprocVecEnv._get_indices", "numpy.unique", "numpy.split", "remote_env_indices.tolist.tolist.tolist", "numpy.append", "numpy.array", "numpy.array", "sorted", "len"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv._get_indices"], ["", "def", "_get_target_envs", "(", "self", ",", "indices", ")", ":", "\n", "        ", "\"\"\"\n\n        Example:\n            n_workers: 3\n            current envs: [0,1,2,3,4,5]\n            remote_envs: [0,1], [2,3], [4,5]\n            target_envs: [1,1,3,4]\n\n            remote_indices: [0,0,1,1] -> [0,1]\n            splits: [0,2] -> [0,2,4]\n            remote_env_indices: [1,1,0,1] -> [1,1], [0,1]\n\n        \"\"\"", "\n", "assert", "indices", "is", "None", "or", "sorted", "(", "\n", "indices", ")", "==", "indices", ",", "\"Indices must be ordered\"", "\n", "indices", "=", "self", ".", "_get_indices", "(", "indices", ")", "\n", "remote_indices", "=", "[", "idx", "//", "self", ".", "n_workers", "for", "idx", "in", "indices", "]", "\n", "remote_env_indices", "=", "[", "idx", "%", "self", ".", "n_workers", "for", "idx", "in", "indices", "]", "\n", "remote_indices", ",", "splits", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "remote_indices", ")", ",", "return_index", "=", "True", ")", "\n", "target_remotes", "=", "[", "self", ".", "remotes", "[", "idx", "]", "for", "idx", "in", "remote_indices", "]", "\n", "remote_env_indices", "=", "np", ".", "split", "(", "np", ".", "array", "(", "remote_env_indices", ")", ",", "splits", "[", "1", ":", "]", ")", "\n", "remote_env_indices", "=", "remote_env_indices", ".", "tolist", "(", ")", "\n", "splits", "=", "np", ".", "append", "(", "splits", ",", "[", "len", "(", "indices", ")", "]", ")", "\n", "return", "target_remotes", ",", "remote_env_indices", ",", "splits", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.subproc_vec_env.worker": [[195, 263], ["parent_remote.close", "env.step", "env_fn_wrapper", "copy.deepcopy", "copy.deepcopy", "env.reset", "remote.recv", "print", "print", "print", "env.close", "remote.send", "str", "remote.send", "subproc_vec_env.worker.step_env"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "", "def", "worker", "(", "remote", ",", "parent_remote", ",", "env_fn_wrappers", ")", ":", "\n", "    ", "\"\"\"Worker func to execute vec_env commands.\n\n    \"\"\"", "\n", "def", "step_env", "(", "env", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "done", ":", "\n", "            ", "end_obs", "=", "copy", ".", "deepcopy", "(", "ob", ")", "\n", "end_info", "=", "copy", ".", "deepcopy", "(", "info", ")", "\n", "ob", ",", "info", "=", "env", ".", "reset", "(", ")", "\n", "info", "[", "\"terminal_observation\"", "]", "=", "end_obs", "\n", "info", "[", "\"terminal_info\"", "]", "=", "end_info", "\n", "", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "", "parent_remote", ".", "close", "(", ")", "\n", "envs", "=", "[", "env_fn_wrapper", "(", ")", "for", "env_fn_wrapper", "in", "env_fn_wrappers", ".", "x", "]", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "cmd", ",", "data", "=", "remote", ".", "recv", "(", ")", "\n", "# Branch out for requests.", "\n", "if", "cmd", "==", "'step'", ":", "\n", "                ", "remote", ".", "send", "(", "\n", "[", "step_env", "(", "env", ",", "action", ")", "for", "env", ",", "action", "in", "zip", "(", "envs", ",", "data", ")", "]", ")", "\n", "", "elif", "cmd", "==", "'reset'", ":", "\n", "                ", "remote", ".", "send", "(", "[", "env", ".", "reset", "(", ")", "for", "env", "in", "envs", "]", ")", "\n", "", "elif", "cmd", "==", "'render'", ":", "\n", "                ", "remote", ".", "send", "(", "[", "env", ".", "render", "(", "mode", "=", "'rgb_array'", ")", "for", "env", "in", "envs", "]", ")", "\n", "", "elif", "cmd", "==", "'close'", ":", "\n", "                ", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "elif", "cmd", "==", "'get_spaces_spec'", ":", "\n", "                ", "remote", ".", "send", "(", "\n", "CloudpickleWrapper", "(", "\n", "(", "envs", "[", "0", "]", ".", "observation_space", ",", "envs", "[", "0", "]", ".", "action_space", ")", ")", ")", "\n", "", "elif", "cmd", "==", "\"get_random_state\"", ":", "\n", "                ", "remote", ".", "send", "(", "CloudpickleWrapper", "(", "get_random_state", "(", ")", ")", ")", "\n", "", "elif", "cmd", "==", "\"set_random_state\"", ":", "\n", "                ", "set_random_state", "(", "data", ")", "\n", "# Placeholder for the return.", "\n", "remote", ".", "send", "(", "True", ")", "\n", "", "elif", "cmd", "==", "\"get_attr\"", ":", "\n", "                ", "env_indices", ",", "attr_name", "=", "data", "\n", "target_envs", "=", "[", "envs", "[", "idx", "]", "for", "idx", "in", "env_indices", "]", "\n", "remote", ".", "send", "(", "[", "getattr", "(", "env", ",", "attr_name", ")", "for", "env", "in", "target_envs", "]", ")", "\n", "", "elif", "cmd", "==", "\"set_attr\"", ":", "\n", "                ", "env_indices", ",", "attr_name", ",", "values", "=", "data", "\n", "target_envs", "=", "[", "envs", "[", "idx", "]", "for", "idx", "in", "env_indices", "]", "\n", "remote", ".", "send", "(", "[", "\n", "setattr", "(", "env", ",", "attr_name", ",", "value", ")", "\n", "for", "env", ",", "value", "in", "zip", "(", "target_envs", ",", "values", ")", "\n", "]", ")", "\n", "", "elif", "cmd", "==", "\"env_method\"", ":", "\n", "                ", "env_indices", ",", "name", ",", "args_list", ",", "kwargs_list", "=", "data", "\n", "target_envs", "=", "[", "envs", "[", "idx", "]", "for", "idx", "in", "env_indices", "]", "\n", "methods", "=", "[", "getattr", "(", "env", ",", "name", ")", "for", "env", "in", "target_envs", "]", "\n", "remote", ".", "send", "(", "[", "\n", "method", "(", "*", "args", ",", "**", "kwargs", ")", "for", "method", ",", "args", ",", "kwargs", "in", "zip", "(", "\n", "methods", ",", "args_list", ",", "kwargs_list", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "'SubprocVecEnv worker: got KeyboardInterrupt'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'Environment runner process failed...'", ")", "\n", "print", "(", "str", "(", "e", ")", ")", "\n", "", "finally", ":", "\n", "        ", "for", "env", "in", "envs", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.__init__": [[14, 25], ["safe_control_gym.envs.env_wrappers.vectorized_env.vec_env.VecEnv.__init__", "fn", "len"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "env_fns", "\n", ")", ":", "\n", "        ", "\"\"\"\n        \n        \"\"\"", "\n", "self", ".", "envs", "=", "[", "fn", "(", ")", "for", "fn", "in", "env_fns", "]", "\n", "env", "=", "self", ".", "envs", "[", "0", "]", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "len", "(", "env_fns", ")", ",", "env", ".", "observation_space", ",", "env", ".", "action_space", ")", "\n", "self", ".", "actions", "=", "None", "\n", "self", ".", "closed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.step_async": [[26, 33], ["None"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "\n", "actions", "\n", ")", ":", "\n", "        ", "\"\"\"\n        \n        \"\"\"", "\n", "self", ".", "actions", "=", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.step_wait": [[34, 50], ["range", "zip", "dummy_vec_env.DummyVecEnv.envs[].step", "results.append", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_obs", "numpy.array", "numpy.array", "copy.deepcopy", "copy.deepcopy", "dummy_vec_env.DummyVecEnv.envs[].reset"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_obs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \n        \"\"\"", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "envs", "[", "i", "]", ".", "step", "(", "self", ".", "actions", "[", "i", "]", ")", "\n", "if", "done", ":", "\n", "                ", "end_obs", "=", "copy", ".", "deepcopy", "(", "obs", ")", "\n", "end_info", "=", "copy", ".", "deepcopy", "(", "info", ")", "\n", "obs", ",", "info", "=", "self", ".", "envs", "[", "i", "]", ".", "reset", "(", ")", "\n", "info", "[", "\"terminal_observation\"", "]", "=", "end_obs", "\n", "info", "[", "\"terminal_info\"", "]", "=", "end_info", "\n", "", "results", ".", "append", "(", "[", "obs", ",", "rew", ",", "done", ",", "info", "]", ")", "\n", "", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "_flatten_obs", "(", "obs", ")", ",", "np", ".", "array", "(", "rews", ")", ",", "np", ".", "array", "(", "dones", ")", ",", "{", "\"n\"", ":", "infos", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.reset": [[51, 60], ["zip", "results.append", "safe_control_gym.envs.env_wrappers.vectorized_env.vec_env_utils._flatten_obs", "env.reset"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_obs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \n        \"\"\"", "\n", "results", "=", "[", "]", "\n", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "results", ".", "append", "(", "env", ".", "reset", "(", ")", ")", "\n", "", "obs", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "_flatten_obs", "(", "obs", ")", ",", "{", "\"n\"", ":", "infos", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.close": [[61, 70], ["env.close", "dummy_vec_env.DummyVecEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \n        \"\"\"", "\n", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "", "self", ".", "closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_images": [[71, 76], ["env.render"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render"], ["", "def", "get_images", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \n        \"\"\"", "\n", "return", "[", "env", ".", "render", "(", "mode", "=", "'rgb_array'", ")", "for", "env", "in", "self", ".", "envs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.render": [[77, 87], ["dummy_vec_env.DummyVecEnv.envs[].render", "super().render"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render"], ["", "def", "render", "(", "self", ",", "\n", "mode", "=", "'human'", "\n", ")", ":", "\n", "        ", "\"\"\"\n        \n        \"\"\"", "\n", "if", "self", ".", "num_envs", "==", "1", ":", "\n", "            ", "return", "self", ".", "envs", "[", "0", "]", ".", "render", "(", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "render", "(", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_env_random_state": [[88, 93], ["safe_control_gym.utils.utils.get_random_state"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.get_random_state"], ["", "", "def", "get_env_random_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \n        \"\"\"", "\n", "return", "[", "get_random_state", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.set_env_random_state": [[94, 101], ["safe_control_gym.utils.utils.set_random_state"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_random_state"], ["", "def", "set_env_random_state", "(", "self", ",", "\n", "worker_random_states", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "set_random_state", "(", "worker_random_states", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.get_attr": [[102, 111], ["dummy_vec_env.DummyVecEnv._get_target_envs", "getattr"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv._get_target_envs"], ["", "def", "get_attr", "(", "self", ",", "\n", "attr_name", ",", "\n", "indices", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Return attribute from vectorized environment (see base class).\n\n        \"\"\"", "\n", "target_envs", "=", "self", ".", "_get_target_envs", "(", "indices", ")", "\n", "return", "[", "getattr", "(", "env_i", ",", "attr_name", ")", "for", "env_i", "in", "target_envs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.set_attr": [[112, 124], ["dummy_vec_env.DummyVecEnv._get_target_envs", "zip", "len", "len", "setattr"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv._get_target_envs"], ["", "def", "set_attr", "(", "self", ",", "\n", "attr_name", ",", "\n", "values", ",", "\n", "indices", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Set attribute inside vectorized environments (see base class).\n\n        \"\"\"", "\n", "target_envs", "=", "self", ".", "_get_target_envs", "(", "indices", ")", "\n", "assert", "len", "(", "target_envs", ")", "==", "len", "(", "values", ")", "\n", "for", "env_i", ",", "val_i", "in", "zip", "(", "target_envs", ",", "values", ")", ":", "\n", "            ", "setattr", "(", "env_i", ",", "attr_name", ",", "val_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv.env_method": [[125, 143], ["dummy_vec_env.DummyVecEnv._get_target_envs", "len", "len", "len", "len", "len", "len", "getattr", "zip"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv._get_target_envs"], ["", "", "def", "env_method", "(", "self", ",", "\n", "method_name", ",", "\n", "method_args", "=", "None", ",", "\n", "method_kwargs", "=", "None", ",", "\n", "indices", "=", "None", ")", ":", "\n", "        ", "\"\"\"Call instance methods of vectorized environments.\n\n        \"\"\"", "\n", "target_envs", "=", "self", ".", "_get_target_envs", "(", "indices", ")", "\n", "if", "method_args", "is", "None", ":", "\n", "            ", "method_args", "=", "[", "[", "]", "]", "*", "len", "(", "target_envs", ")", "\n", "", "if", "method_kwargs", "is", "None", ":", "\n", "            ", "method_kwargs", "=", "[", "{", "}", "]", "*", "len", "(", "target_envs", ")", "\n", "", "assert", "len", "(", "target_envs", ")", "==", "len", "(", "method_args", ")", "and", "len", "(", "target_envs", ")", "==", "len", "(", "\n", "method_kwargs", ")", "\n", "return", "[", "\n", "getattr", "(", "env_i", ",", "method_name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "for", "env_i", ",", "args", ",", "kwargs", "\n", "in", "zip", "(", "target_envs", ",", "method_args", ",", "method_kwargs", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.dummy_vec_env.DummyVecEnv._get_target_envs": [[145, 155], ["dummy_vec_env.DummyVecEnv._get_indices", "sorted"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env.VecEnv._get_indices"], ["", "def", "_get_target_envs", "(", "self", ",", "\n", "indices", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "assert", "indices", "is", "None", "or", "sorted", "(", "\n", "indices", ")", "==", "indices", ",", "\"Indices must be ordered\"", "\n", "indices", "=", "self", ".", "_get_indices", "(", "indices", ")", "\n", "return", "[", "self", ".", "envs", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils.CloudpickleWrapper.__init__": [[11, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils.CloudpickleWrapper.__getstate__": [[14, 17], ["cloudpickle.dumps"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "import", "cloudpickle", "\n", "return", "cloudpickle", ".", "dumps", "(", "self", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils.CloudpickleWrapper.__setstate__": [[18, 21], ["pickle.loads"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "ob", ")", ":", "\n", "        ", "import", "pickle", "\n", "self", ".", "x", "=", "pickle", ".", "loads", "(", "ob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils.clear_mpi_env_vars": [[23, 44], ["list", "os.environ.items", "os.environ.update", "k.startswith"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "clear_mpi_env_vars", "(", ")", ":", "\n", "    ", "\"\"\"From mpi4py import MPI will call MPI_Init by default.  \n    \n    If the child process has MPI environment variables, MPI will think that the child process\n    is an MPI process just like the parent and do bad things such as hang.\n    \n    This context manager is a hacky way to clear those environment variables temporarily such\n    as when we are starting multiprocessing Processes.\n\n    \"\"\"", "\n", "removed_environment", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "list", "(", "os", ".", "environ", ".", "items", "(", ")", ")", ":", "\n", "        ", "for", "prefix", "in", "[", "'OMPI_'", ",", "'PMI_'", "]", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "prefix", ")", ":", "\n", "                ", "removed_environment", "[", "k", "]", "=", "v", "\n", "del", "os", ".", "environ", "[", "k", "]", "\n", "", "", "", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "os", ".", "environ", ".", "update", "(", "removed_environment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils.tile_images": [[46, 69], ["numpy.asarray", "int", "int", "numpy.array", "np.array.reshape", "img_nhwc.reshape.transpose", "img_HWhwc.transpose.reshape", "numpy.ceil", "numpy.ceil", "numpy.sqrt", "list", "float", "range"], "function", ["None"], ["", "", "def", "tile_images", "(", "img_nhwc", ")", ":", "\n", "    ", "\"\"\"Tile N images into one big PxQ image.\n\n    (P,Q) are chosen to be as close as possible, and if N is square, then P=Q.\n\n    Args: \n        img_nhwc: list or array of images, ndim=4 once turned into array,\n                  n = batch index, h = height, w = width, c = channel.\n\n    Returns:\n        img_Hh_Ww_c: ndarray with ndim=3.\n\n    \"\"\"", "\n", "img_nhwc", "=", "np", ".", "asarray", "(", "img_nhwc", ")", "\n", "N", ",", "h", ",", "w", ",", "c", "=", "img_nhwc", ".", "shape", "\n", "H", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "N", ")", ")", ")", "\n", "W", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "N", ")", "/", "H", ")", ")", "\n", "img_nhwc", "=", "np", ".", "array", "(", "\n", "list", "(", "img_nhwc", ")", "+", "[", "img_nhwc", "[", "0", "]", "*", "0", "for", "_", "in", "range", "(", "N", ",", "H", "*", "W", ")", "]", ")", "\n", "img_HWhwc", "=", "img_nhwc", ".", "reshape", "(", "H", ",", "W", ",", "h", ",", "w", ",", "c", ")", "\n", "img_HhWwc", "=", "img_HWhwc", ".", "transpose", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", "img_Hh_Ww_c", "=", "img_HhWwc", ".", "reshape", "(", "H", "*", "h", ",", "W", "*", "w", ",", "c", ")", "\n", "return", "img_Hh_Ww_c", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_obs": [[71, 83], ["isinstance", "isinstance", "len", "obs[].keys", "numpy.stack", "numpy.stack"], "function", ["None"], ["", "def", "_flatten_obs", "(", "obs", ")", ":", "\n", "    ", "\"\"\"\n\n    \"\"\"", "\n", "assert", "isinstance", "(", "obs", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "obs", ")", ">", "0", "\n", "\n", "if", "isinstance", "(", "obs", "[", "0", "]", ",", "dict", ")", ":", "\n", "        ", "keys", "=", "obs", "[", "0", "]", ".", "keys", "(", ")", "\n", "return", "{", "k", ":", "np", ".", "stack", "(", "[", "o", "[", "k", "]", "for", "o", "in", "obs", "]", ")", "for", "k", "in", "keys", "}", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "stack", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._unflatten_obs": [[85, 100], ["isinstance", "isinstance", "list", "list", "vec_env_utils._unflatten_obs.split_batch"], "function", ["None"], ["", "", "def", "_unflatten_obs", "(", "obs", ")", ":", "\n", "    ", "\"\"\"\n    \n    \"\"\"", "\n", "assert", "isinstance", "(", "obs", ",", "(", "np", ".", "ndarray", ",", "dict", ")", ")", "\n", "def", "split_batch", "(", "data", ")", ":", "\n", "        ", "return", "[", "d", "[", "0", "]", "for", "d", "in", "np", ".", "split", "(", "data", ",", "len", "(", "data", ")", ")", "]", "\n", "", "if", "isinstance", "(", "obs", ",", "dict", ")", ":", "\n", "        ", "keys", "=", "list", "(", "obs", ".", "keys", "(", ")", ")", "\n", "unflat_obs", "=", "[", "split_batch", "(", "obs", "[", "k", "]", ")", "for", "k", "in", "keys", "]", "\n", "unflat_obs", "=", "list", "(", "zip", "(", "*", "unflat_obs", ")", ")", "\n", "unflat_obs", "=", "[", "dict", "(", "zip", "(", "keys", ",", "v", ")", ")", "for", "v", "in", "unflat_obs", "]", "\n", "return", "unflat_obs", "\n", "", "else", ":", "\n", "        ", "return", "split_batch", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.vec_env_utils._flatten_list": [[102, 110], ["isinstance", "all", "len", "len"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.Registry.all"], ["", "", "def", "_flatten_list", "(", "l", ")", ":", "\n", "    ", "\"\"\"\n    \n    \"\"\"", "\n", "assert", "isinstance", "(", "l", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "l", ")", ">", "0", "\n", "assert", "all", "(", "[", "len", "(", "l_", ")", ">", "0", "for", "l_", "in", "l", "]", ")", "\n", "return", "[", "l__", "for", "l_", "in", "l", "for", "l__", "in", "l_", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.__init__.make_env_fn": [[9, 38], ["random.seed", "numpy.random.seed", "torch.manual_seed", "env_func", "env_func"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.DisturbanceList.seed"], []], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.__init__.make_vec_envs": [[40, 66], ["__init__.make_env_fn", "safe_control_gym.envs.env_wrappers.vectorized_env.subproc_vec_env.SubprocVecEnv", "safe_control_gym.envs.env_wrappers.vectorized_env.dummy_vec_env.DummyVecEnv", "range"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.vectorized_env.__init__.make_env_fn"], []], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor_utils.PIDController.__init__": [[72, 122], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "quadrotor_utils.PIDController.reset"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset"], ["def", "__init__", "(", "self", ",", "\n", "g", ":", "float", "=", "9.8", ",", "\n", "m", ":", "float", "=", "0.027", ",", "\n", "kf", ":", "float", "=", "3.16e-10", ",", "\n", "km", ":", "float", "=", "7.94e-12", ",", "\n", "pwm2rpm_scale", ":", "float", "=", "0.2685", ",", "\n", "pwm2rpm_const", ":", "float", "=", "4070.3", ",", "\n", "min_pwm", ":", "float", "=", "20000", ",", "\n", "max_pwm", ":", "float", "=", "65535", ",", "\n", "p_coeff_for", "=", "np", ".", "array", "(", "[", ".4", ",", ".4", ",", "1.25", "]", ")", ",", "\n", "i_coeff_for", "=", "np", ".", "array", "(", "[", ".05", ",", ".05", ",", ".05", "]", ")", ",", "\n", "d_coeff_for", "=", "np", ".", "array", "(", "[", ".2", ",", ".2", ",", ".5", "]", ")", ",", "\n", "p_coeff_tor", "=", "np", ".", "array", "(", "[", "70000.", ",", "70000.", ",", "60000.", "]", ")", ",", "\n", "i_coeff_tor", "=", "np", ".", "array", "(", "[", ".0", ",", ".0", ",", "500.", "]", ")", ",", "\n", "d_coeff_tor", "=", "np", ".", "array", "(", "[", "20000.", ",", "20000.", ",", "12000.", "]", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Common control classes __init__ method.\n\n        Args:\n            g (float, optional): The gravitational acceleration in m/s^2.\n            m (float, optional): Mass of the quadrotor in kg.\n            kf (float, optional): thrust coefficient.\n            km (float, optional): torque coefficient.\n            pwm2rpm_scale (float, optional): PWM-to-RPM scale factor.\n            pwm2rpm_const (float, optional): PWM-to-RPM constant factor.\n            min_pwm (float, optional): minimum PWM.\n            max_pwm (float, optional): maximum PWM.\n            p_coeff_for (ndarray, optional): position proportional coefficients.\n            i_coeff_for (ndarray, optional): position integral coefficients.\n            d_coeff_for (ndarray, optional): position derivative coefficients.\n            p_coeff_tor (ndarray, optional): attitude proportional coefficients.\n            i_coeff_tor (ndarray, optional): attitude integral coefficients.\n            d_coeff_tor (ndarray, optional): attitude derivative coefficients.\n\n        \"\"\"", "\n", "self", ".", "GRAVITY", "=", "g", "*", "m", "# The gravitational force (M*g) acting on each drone.", "\n", "self", ".", "KF", "=", "kf", "\n", "self", ".", "KM", "=", "km", "\n", "self", ".", "P_COEFF_FOR", "=", "p_coeff_for", "\n", "self", ".", "I_COEFF_FOR", "=", "i_coeff_for", "\n", "self", ".", "D_COEFF_FOR", "=", "d_coeff_for", "\n", "self", ".", "P_COEFF_TOR", "=", "p_coeff_tor", "\n", "self", ".", "I_COEFF_TOR", "=", "i_coeff_tor", "\n", "self", ".", "D_COEFF_TOR", "=", "d_coeff_tor", "\n", "self", ".", "PWM2RPM_SCALE", "=", "pwm2rpm_scale", "\n", "self", ".", "PWM2RPM_CONST", "=", "pwm2rpm_const", "\n", "self", ".", "MIN_PWM", "=", "min_pwm", "\n", "self", ".", "MAX_PWM", "=", "max_pwm", "\n", "self", ".", "MIXER_MATRIX", "=", "np", ".", "array", "(", "[", "[", ".5", ",", "-", ".5", ",", "-", "1", "]", ",", "[", ".5", ",", ".5", ",", "1", "]", ",", "[", "-", ".5", ",", ".5", ",", "-", "1", "]", ",", "[", "-", ".5", ",", "-", ".5", ",", "1", "]", "]", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor_utils.PIDController.reset": [[123, 135], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the control classes.\n\n        The previous step's and integral errors for both position and attitude are set to zero.\n\n        \"\"\"", "\n", "self", ".", "control_counter", "=", "0", "# Store the last roll, pitch, and yaw.", "\n", "self", ".", "last_rpy", "=", "np", ".", "zeros", "(", "3", ")", "# Initialized PID control variables.", "\n", "self", ".", "last_pos_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "integral_pos_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "last_rpy_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "integral_rpy_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor_utils.PIDController.compute_control": [[136, 186], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "quadrotor_utils.PIDController._compute_force_and_euler", "quadrotor_utils.PIDController._compute_rpms", "pybullet.getEulerFromQuaternion"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor_utils.PIDController._compute_force_and_euler", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor_utils.PIDController._compute_rpms"], ["", "def", "compute_control", "(", "self", ",", "\n", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "cur_vel", ",", "\n", "cur_ang_vel", ",", "\n", "target_pos", ",", "\n", "target_rpy", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_vel", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_rpy_rates", "=", "np", ".", "zeros", "(", "3", ")", "\n", ")", ":", "\n", "        ", "\"\"\"Computes the PID control action (as RPMs) for a single drone.\n\n        This methods sequentially calls `_compute_force_and_euler()` and `_compute_rpms()`.\n        Parameter `cur_ang_vel` is unused.\n\n        Args:\n            control_timestep (float): The time step at which control is computed.\n            cur_pos (ndarray): (3,1)-shaped array of floats containing the current position.\n            cur_quat (ndarray): (4,1)-shaped array of floats containing the current orientation as a quaternion.\n            cur_vel (ndarray): (3,1)-shaped array of floats containing the current velocity.\n            cur_ang_vel (ndarray): (3,1)-shaped array of floats containing the current angular velocity.\n            target_pos (ndarray): (3,1)-shaped array of floats containing the desired position.\n            target_rpy (ndarray, optional): (3,1)-shaped array of floats containing the desired orientation as roll, pitch, yaw.\n            target_vel (ndarray, optional): (3,1)-shaped array of floats containing the desired velocity.\n            target_rpy_rates (ndarray, optional): (3,1)-shaped array of floats containing the desired roll, pitch, and yaw rates.\n\n        Returns:\n            ndarray: (4,1)-shaped array of integers containing the RPMs to apply to each of the 4 motors.\n            ndarray: (3,1)-shaped array of floats containing the current XYZ position error.\n            float: The current yaw error.\n\n        \"\"\"", "\n", "self", ".", "control_counter", "+=", "1", "\n", "thrust", ",", "computed_target_rpy", ",", "pos_e", "=", "self", ".", "_compute_force_and_euler", "(", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "cur_vel", ",", "\n", "target_pos", ",", "\n", "target_rpy", ",", "\n", "target_vel", "\n", ")", "\n", "rpm", "=", "self", ".", "_compute_rpms", "(", "control_timestep", ",", "\n", "thrust", ",", "\n", "cur_quat", ",", "\n", "computed_target_rpy", ",", "\n", "target_rpy_rates", "\n", ")", "\n", "cur_rpy", "=", "p", ".", "getEulerFromQuaternion", "(", "cur_quat", ")", "\n", "return", "rpm", ",", "pos_e", ",", "computed_target_rpy", "[", "2", "]", "-", "cur_rpy", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor_utils.PIDController._compute_force_and_euler": [[187, 235], ["numpy.array().reshape", "numpy.clip", "numpy.clip", "max", "numpy.array", "numpy.cross", "numpy.vstack().transpose", "scipy.spatial.transform.Rotation.from_matrix().as_euler", "numpy.any", "numpy.array", "numpy.dot", "numpy.linalg.norm", "numpy.cross", "numpy.linalg.norm", "ValueError", "numpy.array", "numpy.multiply", "math.sqrt", "math.cos", "math.sin", "numpy.cross", "numpy.vstack", "scipy.spatial.transform.Rotation.from_matrix", "numpy.abs", "pybullet.getMatrixFromQuaternion", "numpy.multiply", "numpy.multiply"], "methods", ["None"], ["", "def", "_compute_force_and_euler", "(", "self", ",", "\n", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "cur_vel", ",", "\n", "target_pos", ",", "\n", "target_rpy", ",", "\n", "target_vel", "\n", ")", ":", "\n", "        ", "\"\"\"DSL's CF2.x PID position control.\n\n        Args:\n            control_timestep (float): The time step at which control is computed.\n            cur_pos (ndarray): (3,1)-shaped array of floats containing the current position.\n            cur_quat (ndarray): (4,1)-shaped array of floats containing the current orientation as a quaternion.\n            cur_vel (ndarray): (3,1)-shaped array of floats containing the current velocity.\n            target_pos (ndarray): (3,1)-shaped array of floats containing the desired position.\n            target_rpy (ndarray): (3,1)-shaped array of floats containing the desired orientation as roll, pitch, yaw.\n            target_vel (ndarray): (3,1)-shaped array of floats containing the desired velocity.\n\n        Returns:\n            float: The target thrust along the drone z-axis.\n            ndarray: (3,1)-shaped array of floats containing the target roll, pitch, and yaw.\n            float: The current position error.\n\n        \"\"\"", "\n", "cur_rotation", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "cur_quat", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "pos_e", "=", "target_pos", "-", "cur_pos", "\n", "vel_e", "=", "target_vel", "-", "cur_vel", "\n", "self", ".", "integral_pos_e", "=", "self", ".", "integral_pos_e", "+", "pos_e", "*", "control_timestep", "\n", "self", ".", "integral_pos_e", "=", "np", ".", "clip", "(", "self", ".", "integral_pos_e", ",", "-", "2.", ",", "2.", ")", "\n", "self", ".", "integral_pos_e", "[", "2", "]", "=", "np", ".", "clip", "(", "self", ".", "integral_pos_e", "[", "2", "]", ",", "-", "0.15", ",", ".15", ")", "\n", "# PID target thrust.", "\n", "target_thrust", "=", "np", ".", "multiply", "(", "self", ".", "P_COEFF_FOR", ",", "pos_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "I_COEFF_FOR", ",", "self", ".", "integral_pos_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "D_COEFF_FOR", ",", "vel_e", ")", "+", "np", ".", "array", "(", "[", "0", ",", "0", ",", "self", ".", "GRAVITY", "]", ")", "\n", "scalar_thrust", "=", "max", "(", "0.", ",", "np", ".", "dot", "(", "target_thrust", ",", "cur_rotation", "[", ":", ",", "2", "]", ")", ")", "\n", "thrust", "=", "(", "math", ".", "sqrt", "(", "scalar_thrust", "/", "(", "4", "*", "self", ".", "KF", ")", ")", "-", "self", ".", "PWM2RPM_CONST", ")", "/", "self", ".", "PWM2RPM_SCALE", "\n", "target_z_ax", "=", "target_thrust", "/", "np", ".", "linalg", ".", "norm", "(", "target_thrust", ")", "\n", "target_x_c", "=", "np", ".", "array", "(", "[", "math", ".", "cos", "(", "target_rpy", "[", "2", "]", ")", ",", "math", ".", "sin", "(", "target_rpy", "[", "2", "]", ")", ",", "0", "]", ")", "\n", "target_y_ax", "=", "np", ".", "cross", "(", "target_z_ax", ",", "target_x_c", ")", "/", "np", ".", "linalg", ".", "norm", "(", "np", ".", "cross", "(", "target_z_ax", ",", "target_x_c", ")", ")", "\n", "target_x_ax", "=", "np", ".", "cross", "(", "target_y_ax", ",", "target_z_ax", ")", "\n", "target_rotation", "=", "(", "np", ".", "vstack", "(", "[", "target_x_ax", ",", "target_y_ax", ",", "target_z_ax", "]", ")", ")", ".", "transpose", "(", ")", "\n", "# Target rotation.", "\n", "target_euler", "=", "(", "Rotation", ".", "from_matrix", "(", "target_rotation", ")", ")", ".", "as_euler", "(", "'XYZ'", ",", "degrees", "=", "False", ")", "\n", "if", "np", ".", "any", "(", "np", ".", "abs", "(", "target_euler", ")", ">", "math", ".", "pi", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"\\n[ERROR] ctrl it\"", ",", "self", ".", "control_counter", ",", "\"in Control._compute_force_and_euler(), values outside range [-pi,pi]\"", ")", "\n", "", "return", "thrust", ",", "target_euler", ",", "pos_e", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor_utils.PIDController._compute_rpms": [[236, 276], ["numpy.array().reshape", "numpy.array", "scipy.spatial.transform.Rotation.from_euler().as_quat", "scipy.spatial.transform.Rotation.from_quat().as_matrix", "numpy.array", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "pybullet.getEulerFromQuaternion", "numpy.dot", "numpy.dot", "numpy.multiply", "numpy.dot", "numpy.array", "scipy.spatial.transform.Rotation.from_euler", "scipy.spatial.transform.Rotation.from_quat", "scipy.spatial.transform.Rotation.from_quat().as_matrix.transpose", "numpy.array().reshape.transpose", "numpy.multiply", "pybullet.getMatrixFromQuaternion", "numpy.multiply"], "methods", ["None"], ["", "def", "_compute_rpms", "(", "self", ",", "\n", "control_timestep", ",", "\n", "thrust", ",", "\n", "cur_quat", ",", "\n", "target_euler", ",", "\n", "target_rpy_rates", "\n", ")", ":", "\n", "        ", "\"\"\"DSL's CF2.x PID attitude control.\n\n        Args:\n            control_timestep (float): The time step at which control is computed.\n            thrust (float): The target thrust along the drone z-axis.\n            cur_quat (ndarray): (4,1)-shaped array of floats containing the current orientation as a quaternion.\n            target_euler (ndarray): (3,1)-shaped array of floats containing the computed target Euler angles.\n            target_rpy_rates (ndarray): (3,1)-shaped array of floats containing the desired roll, pitch, and yaw rates.\n\n        Returns:\n            ndarray: (4,1)-shaped array of integers containing the RPMs to apply to each of the 4 motors.\n\n        \"\"\"", "\n", "cur_rotation", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "cur_quat", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "cur_rpy", "=", "np", ".", "array", "(", "p", ".", "getEulerFromQuaternion", "(", "cur_quat", ")", ")", "\n", "target_quat", "=", "(", "Rotation", ".", "from_euler", "(", "'XYZ'", ",", "target_euler", ",", "degrees", "=", "False", ")", ")", ".", "as_quat", "(", ")", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "target_quat", "\n", "target_rotation", "=", "(", "Rotation", ".", "from_quat", "(", "[", "w", ",", "x", ",", "y", ",", "z", "]", ")", ")", ".", "as_matrix", "(", ")", "\n", "rot_matrix_e", "=", "np", ".", "dot", "(", "(", "target_rotation", ".", "transpose", "(", ")", ")", ",", "cur_rotation", ")", "-", "np", ".", "dot", "(", "cur_rotation", ".", "transpose", "(", ")", ",", "target_rotation", ")", "\n", "rot_e", "=", "np", ".", "array", "(", "[", "rot_matrix_e", "[", "2", ",", "1", "]", ",", "rot_matrix_e", "[", "0", ",", "2", "]", ",", "rot_matrix_e", "[", "1", ",", "0", "]", "]", ")", "\n", "rpy_rates_e", "=", "target_rpy_rates", "-", "(", "cur_rpy", "-", "self", ".", "last_rpy", ")", "/", "control_timestep", "\n", "self", ".", "last_rpy", "=", "cur_rpy", "\n", "self", ".", "integral_rpy_e", "=", "self", ".", "integral_rpy_e", "-", "rot_e", "*", "control_timestep", "\n", "self", ".", "integral_rpy_e", "=", "np", ".", "clip", "(", "self", ".", "integral_rpy_e", ",", "-", "1500.", ",", "1500.", ")", "\n", "self", ".", "integral_rpy_e", "[", "0", ":", "2", "]", "=", "np", ".", "clip", "(", "self", ".", "integral_rpy_e", "[", "0", ":", "2", "]", ",", "-", "1.", ",", "1.", ")", "\n", "# PID target torques.", "\n", "target_torques", "=", "-", "np", ".", "multiply", "(", "self", ".", "P_COEFF_TOR", ",", "rot_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "D_COEFF_TOR", ",", "rpy_rates_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "I_COEFF_TOR", ",", "self", ".", "integral_rpy_e", ")", "\n", "target_torques", "=", "np", ".", "clip", "(", "target_torques", ",", "-", "3200", ",", "3200", ")", "\n", "pwm", "=", "thrust", "+", "np", ".", "dot", "(", "self", ".", "MIXER_MATRIX", ",", "target_torques", ")", "\n", "pwm", "=", "np", ".", "clip", "(", "pwm", ",", "self", ".", "MIN_PWM", ",", "self", ".", "MAX_PWM", ")", "\n", "return", "self", ".", "PWM2RPM_SCALE", "*", "pwm", "+", "self", ".", "PWM2RPM_CONST", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor_utils.cmd2pwm": [[20, 49], ["numpy.clip", "numpy.clip", "int", "numpy.zeros_like", "numpy.repeat", "numpy.sqrt", "numpy.concatenate", "ValueError"], "function", ["None"], ["", "def", "cmd2pwm", "(", "thrust", ",", "pwm2rpm_scale", ",", "pwm2rpm_const", ",", "ct", ",", "pwm_min", ",", "pwm_max", ")", ":", "\n", "    ", "\"\"\"Generic cmd to pwm function.\n\n    For 1D, thrust is the total of all 4 motors; for 2D, 1st thrust is total of motor\n    1 & 4, 2nd thrust is total of motor 2 & 3; for 4D, thrust is thrust of each motor.\n\n    Args:\n        thrust (ndarray): array of length 1, 2 containing target thrusts.\n        pwm2rpm_scale (float): scaling factor between PWM and RPMs.\n        pwm2rpm_const (float): constant factor between PWM and RPMs.\n        ct (float): torque coefficient.\n        pwm_min (float): pwm lower bound.\n        pwm_max (float): pwm upper bound.\n\n    Returns:\n        ndarray: array of length 4 containing PWM.\n\n    \"\"\"", "\n", "n_motor", "=", "4", "//", "int", "(", "thrust", ".", "size", ")", "\n", "thrust", "=", "np", ".", "clip", "(", "thrust", ",", "np", ".", "zeros_like", "(", "thrust", ")", ",", "None", ")", "# Make sure thrust is not negative.", "\n", "motor_pwm", "=", "(", "np", ".", "sqrt", "(", "thrust", "/", "n_motor", "/", "ct", ")", "-", "pwm2rpm_const", ")", "/", "pwm2rpm_scale", "\n", "if", "thrust", ".", "size", "==", "1", ":", "# 1D case.", "\n", "        ", "motor_pwm", "=", "np", ".", "repeat", "(", "motor_pwm", ",", "4", ")", "\n", "", "elif", "thrust", ".", "size", "==", "2", ":", "# 2D case.", "\n", "        ", "motor_pwm", "=", "np", ".", "concatenate", "(", "[", "motor_pwm", ",", "motor_pwm", "[", ":", ":", "-", "1", "]", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input action shape not supported.\"", ")", "\n", "", "motor_pwm", "=", "np", ".", "clip", "(", "motor_pwm", ",", "pwm_min", ",", "pwm_max", ")", "\n", "return", "motor_pwm", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor_utils.pwm2rpm": [[51, 65], ["None"], "function", ["None"], ["", "def", "pwm2rpm", "(", "pwm", ",", "pwm2rpm_scale", ",", "pwm2rpm_const", ")", ":", "\n", "    ", "\"\"\"Computes motor squared rpm from pwm.\n\n    Args:\n        pwm (ndarray): Array of length 4 containing PWM.\n        pwm2rpm_scale (float): Scaling factor between PWM and RPMs.\n        pwm2rpm_const (float): Constant factor between PWM and RPMs.\n\n    Returns:\n        ndarray: Array of length 4 containing RPMs.\n\n    \"\"\"", "\n", "rpm", "=", "pwm2rpm_scale", "*", "pwm", "+", "pwm2rpm_const", "\n", "return", "rpm", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary.__init__": [[66, 196], ["base_aviary.DroneModel", "os.path.join", "base_aviary.Physics", "base_aviary.BaseAviary._parse_urdf_parameters", "numpy.sqrt", "numpy.sqrt", "safe_control_gym.envs.benchmark_env.BenchmarkEnv.__init__", "int", "int", "int", "pybullet.computeViewMatrixFromYawPitchRoll", "pybullet.computeProjectionMatrixFOV", "numpy.vstack().transpose().reshape", "numpy.zeros", "print", "numpy.sqrt", "pybullet.connect", "pybullet.resetDebugVisualizerCamera", "pybullet.getDebugVisualizerCamera", "pybullet.connect", "print", "print", "numpy.vstack().transpose", "numpy.vstack", "numpy.array", "numpy.array", "numpy.ones", "range", "range"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._parse_urdf_parameters", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", ":", "int", "=", "1", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "record", "=", "False", ",", "\n", "gui", "=", "False", ",", "\n", "verbose", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initialization of a generic aviary environment.\n\n        Args:\n            drone_model (DroneModel, optional): The desired drone type (detailed in an .urdf file\n                                                in folder `assets`).\n            num_drones (int, optional): The desired number of drones in the aviary.\n            physics (Physics, optional): The desired implementation of PyBullet physics/custom\n                                         dynamics.\n            record (bool, optional): Whether to save a video of the simulation in folder\n                                     `files/videos/`.\n            gui (bool, optional): Whether to use PyBullet's GUI.\n            verbose (bool, optional): If to suppress environment print statetments.\n\n        \"\"\"", "\n", "# Constants.", "\n", "self", ".", "GRAVITY_ACC", "=", "9.8", "\n", "self", ".", "RAD2DEG", "=", "180", "/", "np", ".", "pi", "\n", "self", ".", "DEG2RAD", "=", "np", ".", "pi", "/", "180", "\n", "# Parameters.", "\n", "self", ".", "DRONE_MODEL", "=", "DroneModel", "(", "drone_model", ")", "\n", "self", ".", "URDF_PATH", "=", "os", ".", "path", ".", "join", "(", "self", ".", "URDF_DIR", ",", "self", ".", "DRONE_MODEL", ".", "value", "+", "\".urdf\"", ")", "\n", "self", ".", "NUM_DRONES", "=", "num_drones", "\n", "self", ".", "PHYSICS", "=", "Physics", "(", "physics", ")", "\n", "self", ".", "RECORD", "=", "record", "\n", "# Load the drone properties from the .urdf file.", "\n", "self", ".", "MASS", ",", "self", ".", "L", ",", "self", ".", "THRUST2WEIGHT_RATIO", ",", "self", ".", "J", ",", "self", ".", "J_INV", ",", "self", ".", "KF", ",", "self", ".", "KM", ",", "self", ".", "COLLISION_H", ",", "self", ".", "COLLISION_R", ",", "self", ".", "COLLISION_Z_OFFSET", ",", "self", ".", "MAX_SPEED_KMH", ",", "self", ".", "GND_EFF_COEFF", ",", "self", ".", "PROP_RADIUS", ",", "self", ".", "DRAG_COEFF", ",", "self", ".", "DW_COEFF_1", ",", "self", ".", "DW_COEFF_2", ",", "self", ".", "DW_COEFF_3", ",", "self", ".", "PWM2RPM_SCALE", ",", "self", ".", "PWM2RPM_CONST", ",", "self", ".", "MIN_PWM", ",", "self", ".", "MAX_PWM", "=", "self", ".", "_parse_urdf_parameters", "(", "self", ".", "URDF_PATH", ")", "\n", "self", ".", "GROUND_PLANE_Z", "=", "-", "0.05", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\n", "\"[INFO] BaseAviary.__init__() loaded parameters from the drone's .urdf: \\\n                \\n[INFO] m {:f}, L {:f},\\n[INFO] ixx {:f}, iyy {:f}, izz {:f}, \\\n                \\n[INFO] kf {:f}, km {:f},\\n[INFO] t2w {:f}, max_speed_kmh {:f}, \\\n                \\n[INFO] gnd_eff_coeff {:f}, prop_radius {:f}, \\\n                \\n[INFO] drag_xy_coeff {:f}, drag_z_coeff {:f}, \\\n                \\n[INFO] dw_coeff_1 {:f}, dw_coeff_2 {:f}, dw_coeff_3 {:f} \\\n                \\n[INFO] pwm2rpm_scale {:f}, pwm2rpm_const {:f}, min_pwm {:f}, max_pwm {:f}\"", "\n", ".", "format", "(", "self", ".", "MASS", ",", "self", ".", "L", ",", "self", ".", "J", "[", "0", ",", "0", "]", ",", "self", ".", "J", "[", "1", ",", "1", "]", ",", "self", ".", "J", "[", "2", ",", "2", "]", ",", "\n", "self", ".", "KF", ",", "self", ".", "KM", ",", "self", ".", "THRUST2WEIGHT_RATIO", ",", "\n", "self", ".", "MAX_SPEED_KMH", ",", "self", ".", "GND_EFF_COEFF", ",", "self", ".", "PROP_RADIUS", ",", "\n", "self", ".", "DRAG_COEFF", "[", "0", "]", ",", "self", ".", "DRAG_COEFF", "[", "2", "]", ",", "self", ".", "DW_COEFF_1", ",", "\n", "self", ".", "DW_COEFF_2", ",", "self", ".", "DW_COEFF_3", ",", "self", ".", "PWM2RPM_SCALE", ",", "\n", "self", ".", "PWM2RPM_CONST", ",", "self", ".", "MIN_PWM", ",", "self", ".", "MAX_PWM", ")", ")", "\n", "# Compute constants.", "\n", "", "self", ".", "GRAVITY", "=", "self", ".", "GRAVITY_ACC", "*", "self", ".", "MASS", "\n", "self", ".", "HOVER_RPM", "=", "np", ".", "sqrt", "(", "self", ".", "GRAVITY", "/", "(", "4", "*", "self", ".", "KF", ")", ")", "\n", "self", ".", "MAX_RPM", "=", "np", ".", "sqrt", "(", "(", "self", ".", "THRUST2WEIGHT_RATIO", "*", "self", ".", "GRAVITY", ")", "/", "\n", "(", "4", "*", "self", ".", "KF", ")", ")", "\n", "self", ".", "MAX_THRUST", "=", "(", "4", "*", "self", ".", "KF", "*", "self", ".", "MAX_RPM", "**", "2", ")", "\n", "self", ".", "MAX_XY_TORQUE", "=", "(", "self", ".", "L", "*", "self", ".", "KF", "*", "self", ".", "MAX_RPM", "**", "2", ")", "\n", "self", ".", "MAX_Z_TORQUE", "=", "(", "2", "*", "self", ".", "KM", "*", "self", ".", "MAX_RPM", "**", "2", ")", "\n", "self", ".", "GND_EFF_H_CLIP", "=", "0.25", "*", "self", ".", "PROP_RADIUS", "*", "np", ".", "sqrt", "(", "\n", "(", "15", "*", "self", ".", "MAX_RPM", "**", "2", "*", "self", ".", "KF", "*", "self", ".", "GND_EFF_COEFF", ")", "\n", "/", "self", ".", "MAX_THRUST", ")", "\n", "# BenchmarkEnv constructor.", "\n", "super", "(", ")", ".", "__init__", "(", "gui", "=", "gui", ",", "verbose", "=", "verbose", ",", "**", "kwargs", ")", "\n", "# Connect to PyBullet.", "\n", "self", ".", "PYB_CLIENT", "=", "-", "1", "\n", "if", "gui", ":", "\n", "# With debug GUI.", "\n", "            ", "self", ".", "PYB_CLIENT", "=", "p", ".", "connect", "(", "p", ".", "GUI", ")", "# p.connect(p.GUI, options=\"--opengl2\")", "\n", "p", ".", "resetDebugVisualizerCamera", "(", "cameraDistance", "=", "3", ",", "\n", "cameraYaw", "=", "-", "30", ",", "\n", "cameraPitch", "=", "-", "30", ",", "\n", "cameraTargetPosition", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "ret", "=", "p", ".", "getDebugVisualizerCamera", "(", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\"viewMatrix\"", ",", "ret", "[", "2", "]", ")", "\n", "print", "(", "\"projectionMatrix\"", ",", "ret", "[", "3", "]", ")", "\n", "", "", "else", ":", "\n", "# Without debug GUI.", "\n", "            ", "self", ".", "PYB_CLIENT", "=", "p", ".", "connect", "(", "p", ".", "DIRECT", ")", "\n", "# Uncomment the following line to use EGL Render Plugin #", "\n", "# Instead of TinyRender (CPU-based) in PYB's Direct mode", "\n", "# if platform == \"linux\":", "\n", "#     p.setAdditionalSearchPath(pybullet_data.getDataPath())", "\n", "#     plugin = p.loadPlugin(egl.get_filename(), \"_eglRendererPlugin\")", "\n", "#     print(\"plugin=\", plugin)", "\n", "", "self", ".", "RENDER_WIDTH", "=", "int", "(", "640", ")", "\n", "self", ".", "RENDER_HEIGHT", "=", "int", "(", "480", ")", "\n", "self", ".", "FRAME_PER_SEC", "=", "24", "\n", "self", ".", "CAPTURE_FREQ", "=", "int", "(", "self", ".", "PYB_FREQ", "/", "self", ".", "FRAME_PER_SEC", ")", "\n", "self", ".", "CAM_VIEW", "=", "p", ".", "computeViewMatrixFromYawPitchRoll", "(", "\n", "distance", "=", "3", ",", "\n", "yaw", "=", "-", "30", ",", "\n", "pitch", "=", "-", "30", ",", "\n", "roll", "=", "0", ",", "\n", "cameraTargetPosition", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "upAxisIndex", "=", "2", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "self", ".", "CAM_PRO", "=", "p", ".", "computeProjectionMatrixFOV", "(", "fov", "=", "60.0", ",", "\n", "aspect", "=", "self", ".", "RENDER_WIDTH", "\n", "/", "self", ".", "RENDER_HEIGHT", ",", "\n", "nearVal", "=", "0.1", ",", "\n", "farVal", "=", "1000.0", ")", "\n", "# Set default initial poses when loading drone's urdf model.", "\n", "# can be overriden later for specific tasks (as sub-classes) in reset()", "\n", "self", ".", "INIT_XYZS", "=", "np", ".", "vstack", "(", "[", "np", ".", "array", "(", "[", "x", "*", "4", "*", "self", ".", "L", "for", "x", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "]", ")", ",", "np", ".", "array", "(", "[", "y", "*", "4", "*", "self", ".", "L", "for", "y", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "]", ")", ",", "np", ".", "ones", "(", "self", ".", "NUM_DRONES", ")", "*", "(", "self", ".", "COLLISION_H", "/", "2", "-", "self", ".", "COLLISION_Z_OFFSET", ")", "\n", "]", ")", ".", "transpose", "(", ")", ".", "reshape", "(", "self", ".", "NUM_DRONES", ",", "3", ")", "\n", "self", ".", "INIT_RPYS", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary.close": [[197, 206], ["pybullet.stopStateLogging", "pybullet.disconnect"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Terminates the environment.\n\n        \"\"\"", "\n", "if", "self", ".", "RECORD", "and", "self", ".", "GUI", ":", "\n", "            ", "p", ".", "stopStateLogging", "(", "self", ".", "VIDEO_ID", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "", "if", "self", ".", "PYB_CLIENT", ">=", "0", ":", "\n", "            ", "p", ".", "disconnect", "(", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "", "self", ".", "PYB_CLIENT", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._reset_simulation": [[207, 255], ["time.time", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pybullet.resetSimulation", "pybullet.setGravity", "pybullet.setRealTimeSimulation", "pybullet.setTimeStep", "pybullet.setAdditionalSearchPath", "pybullet.loadURDF", "numpy.array", "base_aviary.BaseAviary._update_and_store_kinematic_information", "base_aviary.BaseAviary._start_video_recording", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.zeros", "pybullet_data.getDataPath", "pybullet.loadURDF", "pybullet.getQuaternionFromEuler", "range"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._update_and_store_kinematic_information", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._start_video_recording"], ["", "def", "_reset_simulation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Housekeeping function.\n\n        Allocation and zero-ing of the variables and PyBullet's parameters/objects\n        in the `reset()` function.\n\n        \"\"\"", "\n", "# Initialize/reset counters and zero-valued variables.", "\n", "self", ".", "RESET_TIME", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "first_render_call", "=", "True", "\n", "self", ".", "X_AX", "=", "-", "1", "*", "np", ".", "ones", "(", "self", ".", "NUM_DRONES", ")", "\n", "self", ".", "Y_AX", "=", "-", "1", "*", "np", ".", "ones", "(", "self", ".", "NUM_DRONES", ")", "\n", "self", ".", "Z_AX", "=", "-", "1", "*", "np", ".", "ones", "(", "self", ".", "NUM_DRONES", ")", "\n", "self", ".", "GUI_INPUT_TEXT", "=", "-", "1", "*", "np", ".", "ones", "(", "self", ".", "NUM_DRONES", ")", "\n", "self", ".", "USE_GUI_RPM", "=", "False", "\n", "self", ".", "last_input_switch", "=", "0", "\n", "self", ".", "last_clipped_action", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "self", ".", "gui_input", "=", "np", ".", "zeros", "(", "4", ")", "\n", "# Initialize the drones kinematic information.", "\n", "self", ".", "pos", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "self", ".", "quat", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "self", ".", "rpy", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "self", ".", "vel", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "self", ".", "ang_v", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "if", "self", ".", "PHYSICS", "==", "Physics", ".", "DYN", ":", "\n", "            ", "self", ".", "rpy_rates", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "# Set PyBullet's parameters.", "\n", "", "p", ".", "resetSimulation", "(", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "p", ".", "setGravity", "(", "0", ",", "0", ",", "-", "self", ".", "GRAVITY_ACC", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "p", ".", "setRealTimeSimulation", "(", "0", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "p", ".", "setTimeStep", "(", "self", ".", "PYB_TIMESTEP", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "p", ".", "setAdditionalSearchPath", "(", "pybullet_data", ".", "getDataPath", "(", ")", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Load ground plane, drone and obstacles models.", "\n", "self", ".", "PLANE_ID", "=", "p", ".", "loadURDF", "(", "\"plane.urdf\"", ",", "[", "0", ",", "0", ",", "self", ".", "GROUND_PLANE_Z", "]", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "self", ".", "DRONE_IDS", "=", "np", ".", "array", "(", "[", "\n", "p", ".", "loadURDF", "(", "self", ".", "URDF_PATH", ",", "\n", "self", ".", "INIT_XYZS", "[", "i", ",", ":", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "self", ".", "INIT_RPYS", "[", "i", ",", ":", "]", ")", ",", "\n", "# flags = p.URDF_USE_INERTIA_FROM_FILE,", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "\n", "]", ")", "\n", "# Update and store the drones kinematic information.", "\n", "self", ".", "_update_and_store_kinematic_information", "(", ")", "\n", "# Start video recording.", "\n", "self", ".", "_start_video_recording", "(", ")", "\n", "# # Show frame of references of drones, will severly slow down the GUI.", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._advance_simulation": [[260, 317], ["numpy.reshape", "range", "base_aviary.BaseAviary._update_and_store_kinematic_information", "range", "base_aviary.BaseAviary._update_and_store_kinematic_information", "pybullet.stepSimulation", "base_aviary.BaseAviary._physics", "pybullet.applyExternalForce", "base_aviary.BaseAviary._dynamics", "base_aviary.BaseAviary._get_drone_state_vector", "base_aviary.BaseAviary._physics", "base_aviary.BaseAviary._ground_effect", "base_aviary.BaseAviary._physics", "base_aviary.BaseAviary._drag", "base_aviary.BaseAviary._physics", "base_aviary.BaseAviary._downwash", "base_aviary.BaseAviary._physics", "base_aviary.BaseAviary._ground_effect", "base_aviary.BaseAviary._drag", "base_aviary.BaseAviary._downwash"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._update_and_store_kinematic_information", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._update_and_store_kinematic_information", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._physics", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._dynamics", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._get_drone_state_vector", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._physics", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._ground_effect", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._physics", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._drag", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._physics", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._downwash", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._physics", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._ground_effect", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._drag", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._downwash"], ["", "def", "_advance_simulation", "(", "self", ",", "clipped_action", ",", "disturbance_force", "=", "None", ")", ":", "\n", "        ", "\"\"\"Advances the environment by one simulation step.\n\n        Args:\n            clipped_action (ndarray): The input action for one or more drones,\n                                         as RPMs by the specific implementation of\n                                         `_preprocess_action()` in each subclass.\n            disturbance_force (ndarray, optional): Disturbance force, applied to all drones.\n\n        \"\"\"", "\n", "clipped_action", "=", "np", ".", "reshape", "(", "clipped_action", ",", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "# Repeat for as many as the aggregate physics steps.", "\n", "for", "_", "in", "range", "(", "self", ".", "PYB_STEPS_PER_CTRL", ")", ":", "\n", "# Update and store the drones kinematic info for certain", "\n", "# Between aggregate steps for certain types of update.", "\n", "            ", "if", "self", ".", "PYB_STEPS_PER_CTRL", ">", "1", "and", "self", ".", "PHYSICS", "in", "[", "\n", "Physics", ".", "DYN", ",", "Physics", ".", "PYB_GND", ",", "Physics", ".", "PYB_DRAG", ",", "\n", "Physics", ".", "PYB_DW", ",", "Physics", ".", "PYB_GND_DRAG_DW", "\n", "]", ":", "\n", "                ", "self", ".", "_update_and_store_kinematic_information", "(", ")", "\n", "# Step the simulation using the desired physics update.", "\n", "", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "                ", "if", "self", ".", "PHYSICS", "==", "Physics", ".", "PYB", ":", "\n", "                    ", "self", ".", "_physics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "", "elif", "self", ".", "PHYSICS", "==", "Physics", ".", "DYN", ":", "\n", "                    ", "self", ".", "_dynamics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "", "elif", "self", ".", "PHYSICS", "==", "Physics", ".", "PYB_GND", ":", "\n", "                    ", "self", ".", "_physics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_ground_effect", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "", "elif", "self", ".", "PHYSICS", "==", "Physics", ".", "PYB_DRAG", ":", "\n", "                    ", "self", ".", "_physics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_drag", "(", "self", ".", "last_clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "", "elif", "self", ".", "PHYSICS", "==", "Physics", ".", "PYB_DW", ":", "\n", "                    ", "self", ".", "_physics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_downwash", "(", "i", ")", "\n", "", "elif", "self", ".", "PHYSICS", "==", "Physics", ".", "PYB_GND_DRAG_DW", ":", "\n", "                    ", "self", ".", "_physics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_ground_effect", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_drag", "(", "self", ".", "last_clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_downwash", "(", "i", ")", "\n", "# Apply disturbance", "\n", "", "if", "disturbance_force", "is", "not", "None", ":", "\n", "                    ", "pos", "=", "self", ".", "_get_drone_state_vector", "(", "i", ")", "[", ":", "3", "]", "\n", "p", ".", "applyExternalForce", "(", "\n", "self", ".", "DRONE_IDS", "[", "i", "]", ",", "\n", "linkIndex", "=", "4", ",", "# Link attached to the quadrotor's center of mass.", "\n", "forceObj", "=", "disturbance_force", ",", "\n", "posObj", "=", "pos", ",", "\n", "flags", "=", "p", ".", "WORLD_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# PyBullet computes the new state, unless Physics.DYN.", "\n", "", "", "if", "self", ".", "PHYSICS", "!=", "Physics", ".", "DYN", ":", "\n", "                ", "p", ".", "stepSimulation", "(", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Save the last applied action (e.g. to compute drag).", "\n", "", "self", ".", "last_clipped_action", "=", "clipped_action", "\n", "# Update and store the drones kinematic information.", "\n", "", "self", ".", "_update_and_store_kinematic_information", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary.render": [[318, 355], ["print", "print", "range", "print", "time.time", "time.time"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "\"\"\"Prints a textual output of the environment.\n\n        Args:\n            mode (str, optional): Unused.\n            close (bool, optional): Unused.\n\n        \"\"\"", "\n", "if", "self", ".", "first_render_call", "and", "not", "self", ".", "GUI", ":", "\n", "            ", "print", "(", "\n", "\"[WARNING] BaseAviary.render() is implemented as text-only, re-initialize the environment using Aviary(gui=True) to use PyBullet's graphical interface\"", "\n", ")", "\n", "self", ".", "first_render_call", "=", "False", "\n", "", "if", "self", ".", "VERBOSE", ":", "\n", "            ", "print", "(", "\n", "\"\\n[INFO] BaseAviary.render() \u2014\u2014\u2014 it {:04d}\"", ".", "format", "(", "\n", "self", ".", "pyb_step_counter", ")", ",", "\n", "\"\u2014\u2014\u2014 wall-clock time {:.1f}s,\"", ".", "format", "(", "time", ".", "time", "(", ")", "\n", "-", "self", ".", "RESET_TIME", ")", ",", "\n", "\"simulation time {:.1f}s@{:d}Hz ({:.2f}x)\"", ".", "format", "(", "\n", "self", ".", "pyb_step_counter", "*", "self", ".", "TIMESTEP", ",", "self", ".", "SIM_FREQ", ",", "\n", "(", "self", ".", "pyb_step_counter", "*", "self", ".", "TIMESTEP", ")", "/", "\n", "(", "time", ".", "time", "(", ")", "-", "self", ".", "RESET_TIME", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "                ", "print", "(", "\n", "\"[INFO] BaseAviary.render() \u2014\u2014\u2014 drone {:d}\"", ".", "format", "(", "i", ")", ",", "\n", "\"\u2014\u2014\u2014 x {:+06.2f}, y {:+06.2f}, z {:+06.2f}\"", ".", "format", "(", "\n", "self", ".", "pos", "[", "i", ",", "0", "]", ",", "self", ".", "pos", "[", "i", ",", "1", "]", ",", "self", ".", "pos", "[", "i", ",", "2", "]", ")", ",", "\n", "\"\u2014\u2014\u2014 velocity {:+06.2f}, {:+06.2f}, {:+06.2f}\"", ".", "format", "(", "\n", "self", ".", "vel", "[", "i", ",", "0", "]", ",", "self", ".", "vel", "[", "i", ",", "1", "]", ",", "self", ".", "vel", "[", "i", ",", "2", "]", ")", ",", "\n", "\"\u2014\u2014\u2014 roll {:+06.2f}, pitch {:+06.2f}, yaw {:+06.2f}\"", ".", "format", "(", "\n", "self", ".", "rpy", "[", "i", ",", "0", "]", "*", "self", ".", "RAD2DEG", ",", "\n", "self", ".", "rpy", "[", "i", ",", "1", "]", "*", "self", ".", "RAD2DEG", ",", "\n", "self", ".", "rpy", "[", "i", ",", "2", "]", "*", "self", ".", "RAD2DEG", ")", ",", "\n", "\"\u2014\u2014\u2014 angular velocity {:+06.4f}, {:+06.4f}, {:+06.4f} \u2014\u2014\u2014 \"", ".", "\n", "format", "(", "self", ".", "ang_v", "[", "i", ",", "0", "]", ",", "self", ".", "ang_v", "[", "i", ",", "1", "]", ",", "self", ".", "ang_v", "[", "i", ",", "\n", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._update_and_store_kinematic_information": [[356, 369], ["range", "pybullet.getBasePositionAndOrientation", "pybullet.getEulerFromQuaternion", "pybullet.getBaseVelocity"], "methods", ["None"], ["", "", "", "def", "_update_and_store_kinematic_information", "(", "self", ")", ":", "\n", "        ", "\"\"\"Updates and stores the drones kinematic information.\n\n        This method is meant to limit the number of calls to PyBullet in each step\n        and improve performance (at the expense of memory).\n\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "self", ".", "pos", "[", "i", "]", ",", "self", ".", "quat", "[", "i", "]", "=", "p", ".", "getBasePositionAndOrientation", "(", "\n", "self", ".", "DRONE_IDS", "[", "i", "]", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "self", ".", "rpy", "[", "i", "]", "=", "p", ".", "getEulerFromQuaternion", "(", "self", ".", "quat", "[", "i", "]", ")", "\n", "self", ".", "vel", "[", "i", "]", ",", "self", ".", "ang_v", "[", "i", "]", "=", "p", ".", "getBaseVelocity", "(", "\n", "self", ".", "DRONE_IDS", "[", "i", "]", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._start_video_recording": [[370, 386], ["pybullet.startStateLogging", "os.path.join", "os.makedirs", "os.path.dirname", "os.path.join", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "", "def", "_start_video_recording", "(", "self", ")", ":", "\n", "        ", "\"\"\"Starts the recording of a video output.\n\n        The format of the video output is .mp4, if GUI is True, or .png, otherwise.\n        The video is saved under folder `files/videos`.\n\n        \"\"\"", "\n", "if", "self", ".", "RECORD", "and", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "VIDEO_ID", "=", "p", ".", "startStateLogging", "(", "\n", "loggingType", "=", "p", ".", "STATE_LOGGING_VIDEO_MP4", ",", "\n", "fileName", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"videos/video-{}.mp4\"", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m.%d.%Y_%H.%M.%S\"", ")", ")", ")", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "", "if", "self", ".", "RECORD", "and", "not", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "FRAME_NUM", "=", "0", "\n", "self", ".", "IMG_PATH", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"quadrotor_videos/video-{}/\"", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m.%d.%Y_%H.%M.%S\"", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "IMG_PATH", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._get_drone_state_vector": [[387, 405], ["numpy.hstack", "numpy.hstack.reshape"], "methods", ["None"], ["", "", "def", "_get_drone_state_vector", "(", "self", ",", "nth_drone", ")", ":", "\n", "        ", "\"\"\"Returns the state vector of the n-th drone.\n\n        Args:\n            nth_drone (int): The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        Returns:\n            ndarray. (20,)-shaped array of floats containing the state vector of the n-th drone.\n                     Check the only line in this method and `_update_and_store_kinematic_information()`\n                     to understand its format.\n\n        \"\"\"", "\n", "state", "=", "np", ".", "hstack", "(", "[", "\n", "self", ".", "pos", "[", "nth_drone", ",", ":", "]", ",", "self", ".", "quat", "[", "nth_drone", ",", ":", "]", ",", "\n", "self", ".", "rpy", "[", "nth_drone", ",", ":", "]", ",", "self", ".", "vel", "[", "nth_drone", ",", ":", "]", ",", "\n", "self", ".", "ang_v", "[", "nth_drone", ",", ":", "]", ",", "self", ".", "last_clipped_action", "[", "nth_drone", ",", ":", "]", "\n", "]", ")", "\n", "return", "state", ".", "reshape", "(", "20", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._physics": [[406, 429], ["range", "pybullet.applyExternalTorque", "numpy.array", "numpy.array", "pybullet.applyExternalForce"], "methods", ["None"], ["", "def", "_physics", "(", "self", ",", "rpm", ",", "nth_drone", ")", ":", "\n", "        ", "\"\"\"Base PyBullet physics implementation.\n\n        Args:\n            rpm (ndarray): (4)-shaped array of ints containing the RPMs values of the 4 motors.\n            nth_drone (int): The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "forces", "=", "np", ".", "array", "(", "rpm", "**", "2", ")", "*", "self", ".", "KF", "\n", "torques", "=", "np", ".", "array", "(", "rpm", "**", "2", ")", "*", "self", ".", "KM", "\n", "z_torque", "=", "(", "-", "torques", "[", "0", "]", "+", "torques", "[", "1", "]", "-", "torques", "[", "2", "]", "+", "torques", "[", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "p", ".", "applyExternalForce", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "i", ",", "\n", "forceObj", "=", "[", "0", ",", "0", ",", "forces", "[", "i", "]", "]", ",", "\n", "posObj", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "flags", "=", "p", ".", "LINK_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "", "p", ".", "applyExternalTorque", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "4", ",", "\n", "torqueObj", "=", "[", "0", ",", "0", ",", "z_torque", "]", ",", "\n", "flags", "=", "p", ".", "LINK_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._ground_effect": [[430, 464], ["numpy.array", "numpy.array", "numpy.clip", "pybullet.getLinkStates", "range", "numpy.abs", "numpy.abs", "pybullet.applyExternalForce", "numpy.array"], "methods", ["None"], ["", "def", "_ground_effect", "(", "self", ",", "rpm", ",", "nth_drone", ")", ":", "\n", "        ", "\"\"\"PyBullet implementation of a ground effect model.\n\n        Inspired by the analytical model used for comparison in (Shi et al., 2019).\n\n        Args:\n            rpm (ndarray): (4)-shaped array of ints containing the RPMs values of the 4 motors.\n            nth_drone (int): The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "# Kin. info of all links (propellers and center of mass)", "\n", "link_states", "=", "np", ".", "array", "(", "\n", "p", ".", "getLinkStates", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "linkIndices", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ",", "\n", "computeLinkVelocity", "=", "1", ",", "\n", "computeForwardKinematics", "=", "1", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", ")", "\n", "# Simple, per-propeller ground effects.", "\n", "prop_heights", "=", "np", ".", "array", "(", "[", "\n", "link_states", "[", "0", ",", "0", "]", "[", "2", "]", ",", "link_states", "[", "1", ",", "0", "]", "[", "2", "]", ",", "link_states", "[", "2", ",", "0", "]", "[", "2", "]", ",", "\n", "link_states", "[", "3", ",", "0", "]", "[", "2", "]", "\n", "]", ")", "\n", "prop_heights", "=", "np", ".", "clip", "(", "prop_heights", ",", "self", ".", "GND_EFF_H_CLIP", ",", "np", ".", "inf", ")", "\n", "gnd_effects", "=", "np", ".", "array", "(", "rpm", "**", "2", ")", "*", "self", ".", "KF", "*", "self", ".", "GND_EFF_COEFF", "*", "(", "self", ".", "PROP_RADIUS", "/", "(", "4", "*", "prop_heights", ")", ")", "**", "2", "\n", "if", "np", ".", "abs", "(", "self", ".", "rpy", "[", "nth_drone", ",", "0", "]", ")", "<", "np", ".", "pi", "/", "2", "and", "np", ".", "abs", "(", "\n", "self", ".", "rpy", "[", "nth_drone", ",", "1", "]", ")", "<", "np", ".", "pi", "/", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "p", ".", "applyExternalForce", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "i", ",", "\n", "forceObj", "=", "[", "0", ",", "0", ",", "gnd_effects", "[", "i", "]", "]", ",", "\n", "posObj", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "flags", "=", "p", ".", "LINK_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# TODO: a more realistic model accounting for the drone's", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._drag": [[467, 490], ["numpy.array().reshape", "numpy.dot", "pybullet.applyExternalForce", "numpy.sum", "numpy.array", "numpy.array", "numpy.array", "pybullet.getMatrixFromQuaternion"], "methods", ["None"], ["", "", "", "def", "_drag", "(", "self", ",", "rpm", ",", "nth_drone", ")", ":", "\n", "        ", "\"\"\"PyBullet implementation of a drag model.\n\n        Based on the the system identification in (Forster, 2015).\n\n        Args:\n            rpm (ndarray): (4)-shaped array of ints containing the RPMs values of the 4 motors.\n            nth_drone (int): The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "# Rotation matrix of the base.", "\n", "base_rot", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "\n", "self", ".", "quat", "[", "nth_drone", ",", ":", "]", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "# Simple draft model applied to the base/center of mass #", "\n", "drag_factors", "=", "-", "1", "*", "self", ".", "DRAG_COEFF", "*", "np", ".", "sum", "(", "\n", "np", ".", "array", "(", "2", "*", "np", ".", "pi", "*", "rpm", "/", "60", ")", ")", "\n", "drag", "=", "np", ".", "dot", "(", "base_rot", ",", "drag_factors", "*", "np", ".", "array", "(", "self", ".", "vel", "[", "nth_drone", ",", ":", "]", ")", ")", "\n", "p", ".", "applyExternalForce", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "4", ",", "\n", "forceObj", "=", "drag", ",", "\n", "posObj", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "flags", "=", "p", ".", "LINK_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._downwash": [[491, 514], ["range", "numpy.linalg.norm", "pybullet.applyExternalForce", "numpy.array", "numpy.array", "numpy.exp"], "methods", ["None"], ["", "def", "_downwash", "(", "self", ",", "nth_drone", ")", ":", "\n", "        ", "\"\"\"PyBullet implementation of a ground effect model.\n\n        Based on experiments conducted at the Dynamic Systems Lab by SiQi Zhou.\n\n        Args:\n            nth_drone (int): The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "delta_z", "=", "self", ".", "pos", "[", "i", ",", "2", "]", "-", "self", ".", "pos", "[", "nth_drone", ",", "2", "]", "\n", "delta_xy", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "np", ".", "array", "(", "self", ".", "pos", "[", "i", ",", "0", ":", "2", "]", ")", "-", "np", ".", "array", "(", "self", ".", "pos", "[", "nth_drone", ",", "0", ":", "2", "]", ")", ")", "\n", "if", "delta_z", ">", "0", "and", "delta_xy", "<", "10", ":", "# Ignore drones more than 10 meters away", "\n", "                ", "alpha", "=", "self", ".", "DW_COEFF_1", "*", "(", "self", ".", "PROP_RADIUS", "/", "(", "4", "*", "delta_z", ")", ")", "**", "2", "\n", "beta", "=", "self", ".", "DW_COEFF_2", "*", "delta_z", "+", "self", ".", "DW_COEFF_3", "\n", "downwash", "=", "[", "0", ",", "0", ",", "-", "alpha", "*", "np", ".", "exp", "(", "-", ".5", "*", "(", "delta_xy", "/", "beta", ")", "**", "2", ")", "]", "\n", "p", ".", "applyExternalForce", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "4", ",", "\n", "forceObj", "=", "downwash", ",", "\n", "posObj", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "flags", "=", "p", ".", "LINK_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._dynamics": [[515, 569], ["numpy.array().reshape", "numpy.array", "numpy.dot", "numpy.array", "numpy.dot", "pybullet.resetBasePositionAndOrientation", "pybullet.resetBaseVelocity", "numpy.array", "numpy.array", "numpy.array", "numpy.cross", "pybullet.getQuaternionFromEuler", "numpy.array", "numpy.sum", "numpy.dot", "pybullet.getMatrixFromQuaternion", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "", "", "def", "_dynamics", "(", "self", ",", "rpm", ",", "nth_drone", ")", ":", "\n", "        ", "\"\"\"Explicit dynamics implementation.\n\n        Based on code written at the Dynamic Systems Lab by James Xu.\n\n        Args:\n            rpm (ndarray): (4)-shaped array of ints containing the RPMs values of the 4 motors.\n            nth_drone (int): The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "# Current state.", "\n", "pos", "=", "self", ".", "pos", "[", "nth_drone", ",", ":", "]", "\n", "quat", "=", "self", ".", "quat", "[", "nth_drone", ",", ":", "]", "\n", "rpy", "=", "self", ".", "rpy", "[", "nth_drone", ",", ":", "]", "\n", "vel", "=", "self", ".", "vel", "[", "nth_drone", ",", ":", "]", "\n", "rpy_rates", "=", "self", ".", "rpy_rates", "[", "nth_drone", ",", ":", "]", "\n", "rotation", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "quat", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "# Compute forces and torques.", "\n", "forces", "=", "np", ".", "array", "(", "rpm", "**", "2", ")", "*", "self", ".", "KF", "\n", "thrust", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "np", ".", "sum", "(", "forces", ")", "]", ")", "\n", "thrust_world_frame", "=", "np", ".", "dot", "(", "rotation", ",", "thrust", ")", "\n", "force_world_frame", "=", "thrust_world_frame", "-", "np", ".", "array", "(", "[", "0", ",", "0", ",", "self", ".", "GRAVITY", "]", ")", "\n", "z_torques", "=", "np", ".", "array", "(", "rpm", "**", "2", ")", "*", "self", ".", "KM", "\n", "z_torque", "=", "(", "-", "z_torques", "[", "0", "]", "+", "z_torques", "[", "1", "]", "-", "z_torques", "[", "2", "]", "+", "z_torques", "[", "3", "]", ")", "\n", "if", "self", ".", "DRONE_MODEL", "==", "DroneModel", ".", "CF2X", ":", "\n", "            ", "x_torque", "=", "(", "forces", "[", "0", "]", "+", "forces", "[", "1", "]", "-", "forces", "[", "2", "]", "\n", "-", "forces", "[", "3", "]", ")", "*", "(", "self", ".", "L", "/", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "y_torque", "=", "(", "-", "forces", "[", "0", "]", "+", "forces", "[", "1", "]", "+", "forces", "[", "2", "]", "\n", "-", "forces", "[", "3", "]", ")", "*", "(", "self", ".", "L", "/", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "", "elif", "self", ".", "DRONE_MODEL", "==", "DroneModel", ".", "CF2P", ":", "\n", "            ", "x_torque", "=", "(", "forces", "[", "1", "]", "-", "forces", "[", "3", "]", ")", "*", "self", ".", "L", "\n", "y_torque", "=", "(", "-", "forces", "[", "0", "]", "+", "forces", "[", "2", "]", ")", "*", "self", ".", "L", "\n", "", "torques", "=", "np", ".", "array", "(", "[", "x_torque", ",", "y_torque", ",", "z_torque", "]", ")", "\n", "torques", "=", "torques", "-", "np", ".", "cross", "(", "rpy_rates", ",", "np", ".", "dot", "(", "self", ".", "J", ",", "rpy_rates", ")", ")", "\n", "rpy_rates_deriv", "=", "np", ".", "dot", "(", "self", ".", "J_INV", ",", "torques", ")", "\n", "no_pybullet_dyn_accs", "=", "force_world_frame", "/", "self", ".", "MASS", "\n", "# Update state.", "\n", "vel", "=", "vel", "+", "self", ".", "TIMESTEP", "*", "no_pybullet_dyn_accs", "\n", "rpy_rates", "=", "rpy_rates", "+", "self", ".", "TIMESTEP", "*", "rpy_rates_deriv", "\n", "pos", "=", "pos", "+", "self", ".", "TIMESTEP", "*", "vel", "\n", "rpy", "=", "rpy", "+", "self", ".", "TIMESTEP", "*", "rpy_rates", "\n", "# Set PyBullet's state.", "\n", "p", ".", "resetBasePositionAndOrientation", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "pos", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "rpy", ")", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Note: the base's velocity only stored and not used #", "\n", "p", ".", "resetBaseVelocity", "(", "\n", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "vel", ",", "\n", "rpy_rates", ",", "# ang_vel not computed by DYN", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Store the roll, pitch, yaw rates for the next step #", "\n", "self", ".", "rpy_rates", "[", "nth_drone", ",", ":", "]", "=", "rpy_rates", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._show_drone_local_axes": [[570, 603], ["pybullet.addUserDebugLine", "pybullet.addUserDebugLine", "pybullet.addUserDebugLine", "int", "int", "int"], "methods", ["None"], ["", "def", "_show_drone_local_axes", "(", "self", ",", "nth_drone", ")", ":", "\n", "        ", "\"\"\"Draws the local frame of the n-th drone in PyBullet's GUI.\n\n        Args:\n            nth_drone (int): The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "if", "self", ".", "GUI", ":", "\n", "            ", "AXIS_LENGTH", "=", "2", "*", "self", ".", "L", "\n", "self", ".", "X_AX", "[", "nth_drone", "]", "=", "p", ".", "addUserDebugLine", "(", "\n", "lineFromXYZ", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "lineToXYZ", "=", "[", "AXIS_LENGTH", ",", "0", ",", "0", "]", ",", "\n", "lineColorRGB", "=", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "parentObjectUniqueId", "=", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "parentLinkIndex", "=", "-", "1", ",", "\n", "replaceItemUniqueId", "=", "int", "(", "self", ".", "X_AX", "[", "nth_drone", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "self", ".", "Y_AX", "[", "nth_drone", "]", "=", "p", ".", "addUserDebugLine", "(", "\n", "lineFromXYZ", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "lineToXYZ", "=", "[", "0", ",", "AXIS_LENGTH", ",", "0", "]", ",", "\n", "lineColorRGB", "=", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "parentObjectUniqueId", "=", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "parentLinkIndex", "=", "-", "1", ",", "\n", "replaceItemUniqueId", "=", "int", "(", "self", ".", "Y_AX", "[", "nth_drone", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "self", ".", "Z_AX", "[", "nth_drone", "]", "=", "p", ".", "addUserDebugLine", "(", "\n", "lineFromXYZ", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "lineToXYZ", "=", "[", "0", ",", "0", ",", "AXIS_LENGTH", "]", ",", "\n", "lineColorRGB", "=", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "parentObjectUniqueId", "=", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "parentLinkIndex", "=", "-", "1", ",", "\n", "replaceItemUniqueId", "=", "int", "(", "self", ".", "Z_AX", "[", "nth_drone", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._parse_urdf_parameters": [[604, 644], ["xml.parse().getroot", "float", "float", "float", "float", "float", "float", "numpy.diag", "numpy.linalg.inv", "float", "float", "float", "float", "float", "float", "float", "float", "float", "numpy.array", "float", "float", "float", "float", "float", "float", "float", "float", "xml.parse", "[].attrib[].split"], "methods", ["None"], ["", "", "def", "_parse_urdf_parameters", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "\"\"\"Loads parameters from an URDF file.\n\n        This method is nothing more than a custom XML parser for the .urdf\n        files in folder `assets/`.\n\n        \"\"\"", "\n", "URDF_TREE", "=", "etxml", ".", "parse", "(", "file_name", ")", ".", "getroot", "(", ")", "\n", "M", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "0", "]", "[", "1", "]", ".", "attrib", "[", "'value'", "]", ")", "\n", "L", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'arm'", "]", ")", "\n", "THRUST2WEIGHT_RATIO", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'thrust2weight'", "]", ")", "\n", "IXX", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "0", "]", "[", "2", "]", ".", "attrib", "[", "'ixx'", "]", ")", "\n", "IYY", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "0", "]", "[", "2", "]", ".", "attrib", "[", "'iyy'", "]", ")", "\n", "IZZ", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "0", "]", "[", "2", "]", ".", "attrib", "[", "'izz'", "]", ")", "\n", "J", "=", "np", ".", "diag", "(", "[", "IXX", ",", "IYY", ",", "IZZ", "]", ")", "\n", "J_INV", "=", "np", ".", "linalg", ".", "inv", "(", "J", ")", "\n", "KF", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'kf'", "]", ")", "\n", "KM", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'km'", "]", ")", "\n", "COLLISION_H", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "2", "]", "[", "1", "]", "[", "0", "]", ".", "attrib", "[", "'length'", "]", ")", "\n", "COLLISION_R", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "2", "]", "[", "1", "]", "[", "0", "]", ".", "attrib", "[", "'radius'", "]", ")", "\n", "COLLISION_SHAPE_OFFSETS", "=", "[", "\n", "float", "(", "s", ")", "for", "s", "in", "URDF_TREE", "[", "1", "]", "[", "2", "]", "[", "0", "]", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", "' '", ")", "\n", "]", "\n", "COLLISION_Z_OFFSET", "=", "COLLISION_SHAPE_OFFSETS", "[", "2", "]", "\n", "MAX_SPEED_KMH", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'max_speed_kmh'", "]", ")", "\n", "GND_EFF_COEFF", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'gnd_eff_coeff'", "]", ")", "\n", "PROP_RADIUS", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'prop_radius'", "]", ")", "\n", "DRAG_COEFF_XY", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'drag_coeff_xy'", "]", ")", "\n", "DRAG_COEFF_Z", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'drag_coeff_z'", "]", ")", "\n", "DRAG_COEFF", "=", "np", ".", "array", "(", "[", "DRAG_COEFF_XY", ",", "DRAG_COEFF_XY", ",", "DRAG_COEFF_Z", "]", ")", "\n", "DW_COEFF_1", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'dw_coeff_1'", "]", ")", "\n", "DW_COEFF_2", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'dw_coeff_2'", "]", ")", "\n", "DW_COEFF_3", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'dw_coeff_3'", "]", ")", "\n", "PWM2RPM_SCALE", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'pwm2rpm_scale'", "]", ")", "\n", "PWM2RPM_CONST", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'pwm2rpm_const'", "]", ")", "\n", "MIN_PWM", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'pwm_min'", "]", ")", "\n", "MAX_PWM", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'pwm_max'", "]", ")", "\n", "return", "M", ",", "L", ",", "THRUST2WEIGHT_RATIO", ",", "J", ",", "J_INV", ",", "KF", ",", "KM", ",", "COLLISION_H", ",", "COLLISION_R", ",", "COLLISION_Z_OFFSET", ",", "MAX_SPEED_KMH", ",", "GND_EFF_COEFF", ",", "PROP_RADIUS", ",", "DRAG_COEFF", ",", "DW_COEFF_1", ",", "DW_COEFF_2", ",", "DW_COEFF_3", ",", "PWM2RPM_SCALE", ",", "PWM2RPM_CONST", ",", "MIN_PWM", ",", "MAX_PWM", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor.__init__": [[100, 255], ["safe_control_gym.envs.gym_pybullet_drones.quadrotor_utils.QuadType", "numpy.array", "numpy.array", "safe_control_gym.envs.gym_pybullet_drones.base_aviary.BaseAviary.__init__", "quadrotor.Quadrotor._setup_symbolic", "numpy.zeros", "numpy.zeros", "quadrotor.Quadrotor.INERTIAL_PROP_RAND_INFO.pop", "numpy.array", "numpy.array", "ValueError", "numpy.zeros", "isinstance", "quadrotor.Quadrotor.INIT_STATE_RAND_INFO.pop", "isinstance", "numpy.hstack", "quadrotor.Quadrotor._generate_trajectory", "numpy.array", "ValueError", "isinstance", "isinstance", "numpy.array", "inertial_prop.get", "inertial_prop.get", "ValueError", "numpy.ones", "numpy.hstack", "numpy.vstack().transpose", "len", "len", "init_state.get", "init_state.get", "ValueError", "isinstance", "numpy.vstack().transpose", "init_state.get", "init_state.get", "init_state.get", "init_state.get", "init_state.get", "init_state.get", "ValueError", "numpy.vstack", "numpy.vstack", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._setup_symbolic", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._generate_trajectory", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get"], ["def", "__init__", "(", "self", ",", "\n", "init_state", "=", "None", ",", "\n", "inertial_prop", "=", "None", ",", "\n", "# custom args", "\n", "quad_type", ":", "QuadType", "=", "QuadType", ".", "TWO_D", ",", "\n", "norm_act_scale", "=", "0.1", ",", "\n", "obs_goal_horizon", "=", "1", ",", "\n", "rew_state_weight", "=", "1.0", ",", "\n", "rew_act_weight", "=", "0.0001", ",", "\n", "rew_exponential", "=", "True", ",", "\n", "done_on_out_of_bound", "=", "True", ",", "\n", "info_mse_metric_state_weight", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize a quadrotor environment.\n\n        Args:\n            init_state  (ndarray, optional): The initial state of the environment, (z, z_dot) or (x, x_dot, z, z_dot theta, theta_dot).\n            inertial_prop (ndarray, optional): The inertial properties of the environment (mass, Iyy).\n            quad_type (QuadType, optional): The choice of motion type (1D along z or 2D in the x-z plane).\n            norm_act_scale (float): scaling the [-1,1] action space around hover thrust when `normalized_action_space` is True.\n            obs_goal_horizon (int): how many future goal states to append to obervation.\n            rew_state_weight (list/ndarray): quadratic weights for state in rl reward.\n            rew_act_weight (list/ndarray): quadratic weights for action in rl reward.\n            rew_exponential (bool): if to exponentiate negative quadratic cost to positive, bounded [0,1] reward.\n            done_on_out_of_bound (bool): if to termiante when state is out of bound.\n            info_mse_metric_state_weight (list/ndarray): quadratic weights for state in mse calculation for info dict.\n\n        \"\"\"", "\n", "# Select the 1D (moving along z) or 2D (moving in the xz plane) quadrotor.", "\n", "self", ".", "QUAD_TYPE", "=", "QuadType", "(", "quad_type", ")", "\n", "self", ".", "norm_act_scale", "=", "norm_act_scale", "\n", "self", ".", "obs_goal_horizon", "=", "obs_goal_horizon", "\n", "self", ".", "rew_state_weight", "=", "np", ".", "array", "(", "rew_state_weight", ",", "ndmin", "=", "1", ",", "dtype", "=", "float", ")", "\n", "self", ".", "rew_act_weight", "=", "np", ".", "array", "(", "rew_act_weight", ",", "ndmin", "=", "1", ",", "dtype", "=", "float", ")", "\n", "self", ".", "rew_exponential", "=", "rew_exponential", "\n", "self", ".", "done_on_out_of_bound", "=", "done_on_out_of_bound", "\n", "if", "info_mse_metric_state_weight", "is", "None", ":", "\n", "            ", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "                ", "self", ".", "info_mse_metric_state_weight", "=", "np", ".", "array", "(", "[", "1", ",", "0", "]", ",", "ndmin", "=", "1", ",", "dtype", "=", "float", ")", "\n", "", "elif", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "TWO_D", ":", "\n", "                ", "self", ".", "info_mse_metric_state_weight", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "ndmin", "=", "1", ",", "dtype", "=", "float", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"[ERROR] in Quadrotor.__init__(), not implemented quad type.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", "and", "len", "(", "info_mse_metric_state_weight", ")", "==", "2", ")", "or", "(", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "TWO_D", "and", "len", "(", "info_mse_metric_state_weight", ")", "==", "6", ")", ":", "\n", "                ", "self", ".", "info_mse_metric_state_weight", "=", "np", ".", "array", "(", "info_mse_metric_state_weight", ",", "ndmin", "=", "1", ",", "dtype", "=", "float", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"[ERROR] in Quadrotor.__init__(), wrong info_mse_metric_state_weight argument size.\"", ")", "\n", "# BaseAviary constructor, called after defining the custom args, ", "\n", "# since some BenchmarkEnv init setup can be task(custom args)-dependent. ", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "init_state", "=", "init_state", ",", "inertial_prop", "=", "inertial_prop", ",", "**", "kwargs", ")", "\n", "\n", "# Custom disturbance info.", "\n", "# 1D quad disturbances have lower dimensions", "\n", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "            ", "self", ".", "DISTURBANCE_MODES", "[", "\"observation\"", "]", "[", "\"dim\"", "]", "=", "2", "\n", "self", ".", "DISTURBANCE_MODES", "[", "\"action\"", "]", "[", "\"dim\"", "]", "=", "1", "\n", "self", ".", "DISTURBANCE_MODES", "[", "\"dynamics\"", "]", "[", "\"dim\"", "]", "=", "1", "\n", "\n", "# Store initial state info.", "\n", "", "if", "init_state", "is", "None", ":", "\n", "            ", "self", ".", "INIT_X", ",", "self", ".", "INIT_X_DOT", ",", "self", ".", "INIT_Z", ",", "self", ".", "INIT_Z_DOT", ",", "self", ".", "INIT_THETA", ",", "self", ".", "INIT_THETA_DOT", "=", "np", ".", "zeros", "(", "6", ")", "\n", "", "elif", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "            ", "self", ".", "INIT_X", ",", "self", ".", "INIT_X_DOT", ",", "self", ".", "INIT_THETA", ",", "self", ".", "INIT_THETA_DOT", "=", "np", ".", "zeros", "(", "4", ")", "\n", "if", "isinstance", "(", "init_state", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "self", ".", "INIT_Z", ",", "self", ".", "INIT_Z_DOT", "=", "init_state", "\n", "", "elif", "isinstance", "(", "init_state", ",", "dict", ")", ":", "\n", "                ", "self", ".", "INIT_Z", "=", "init_state", ".", "get", "(", "\"init_z\"", ",", "0", ")", "\n", "self", ".", "INIT_Z_DOT", "=", "init_state", ".", "get", "(", "\"init_z_dot\"", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"[ERROR] in Quadrotor.__init__(), init_state incorrect format.\"", ")", "\n", "", "", "elif", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "TWO_D", ":", "\n", "            ", "if", "isinstance", "(", "init_state", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "self", ".", "INIT_X", ",", "self", ".", "INIT_X_DOT", ",", "self", ".", "INIT_Z", ",", "self", ".", "INIT_Z_DOT", ",", "self", ".", "INIT_THETA", ",", "self", ".", "INIT_THETA_DOT", "=", "init_state", "\n", "", "elif", "isinstance", "(", "init_state", ",", "dict", ")", ":", "\n", "                ", "self", ".", "INIT_X", "=", "init_state", ".", "get", "(", "\"init_x\"", ",", "0", ")", "\n", "self", ".", "INIT_X_DOT", "=", "init_state", ".", "get", "(", "\"init_x_dot\"", ",", "0", ")", "\n", "self", ".", "INIT_Z", "=", "init_state", ".", "get", "(", "\"init_z\"", ",", "0", ")", "\n", "self", ".", "INIT_Z_DOT", "=", "init_state", ".", "get", "(", "\"init_z_dot\"", ",", "0", ")", "\n", "self", ".", "INIT_THETA", "=", "init_state", ".", "get", "(", "\"init_theta\"", ",", "0", ")", "\n", "self", ".", "INIT_THETA_DOT", "=", "init_state", ".", "get", "(", "\"init_theta_dot\"", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"[ERROR] in Quadrotor.__init__(), init_state incorrect format.\"", ")", "\n", "# Decide whether to randomize the initial state and how (see info dictionary).", "\n", "#self.RANDOMIZED_INIT = randomized_init", "\n", "#if init_state_randomization_info is not None:", "\n", "#    self.INIT_STATE_RAND_INFO = init_state_randomization_info", "\n", "# Do NOT randomize x, x_dot, theta, theta_dot for the 1D quadrotor.", "\n", "", "", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "            ", "for", "init_name", "in", "[", "\"init_x\"", ",", "\"init_x_dot\"", ",", "\"init_theta\"", ",", "\"init_theta_dot\"", "]", ":", "\n", "                ", "self", ".", "INIT_STATE_RAND_INFO", ".", "pop", "(", "init_name", ",", "None", ")", "\n", "\n", "# Decide whether to randomize the inertial properties and how (see info dictionary).", "\n", "# self.RANDOMIZED_INERTIAL_PROP = randomized_inertial_prop", "\n", "# if inertial_prop_randomization_info is not None:", "\n", "#     self.INERTIAL_PROP_RAND_INFO = inertial_prop_randomization_info", "\n", "# Do NOT randomize J for the 1D quadrotor.", "\n", "", "", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "            ", "self", ".", "INERTIAL_PROP_RAND_INFO", ".", "pop", "(", "\"Iyy\"", ",", "None", ")", "\n", "\n", "# Override inertial properties of passed as arguments.", "\n", "", "if", "inertial_prop", "is", "None", ":", "\n", "            ", "pass", "\n", "", "elif", "np", ".", "array", "(", "inertial_prop", ")", ".", "shape", "==", "(", "2", ",", ")", ":", "\n", "            ", "self", ".", "MASS", ",", "self", ".", "J", "[", "1", ",", "1", "]", "=", "inertial_prop", "\n", "", "elif", "isinstance", "(", "inertial_prop", ",", "dict", ")", ":", "\n", "            ", "self", ".", "MASS", "=", "inertial_prop", ".", "get", "(", "\"mass\"", ",", "0", ")", "\n", "self", ".", "J", "[", "1", ",", "1", "]", "=", "inertial_prop", ".", "get", "(", "\"iyy\"", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR] in Quadrotor.__init__(), inertial_prop is not of shape (2,).\"", ")", "\n", "# Set prior/symbolic info.", "\n", "", "self", ".", "_setup_symbolic", "(", ")", "\n", "\n", "# Create X_GOAL and U_GOAL references for the assigned task.", "\n", "self", ".", "U_GOAL", "=", "np", ".", "ones", "(", "self", ".", "action_dim", ")", "*", "self", ".", "MASS", "*", "self", ".", "GRAVITY_ACC", "/", "self", ".", "action_dim", "\n", "if", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "                ", "self", ".", "X_GOAL", "=", "np", ".", "hstack", "(", "\n", "[", "self", ".", "TASK_INFO", "[", "\"stabilization_goal\"", "]", "[", "1", "]", ",", "\n", "0.0", "]", ")", "# x = {z, z_dot}.", "\n", "", "elif", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "TWO_D", ":", "\n", "                ", "self", ".", "X_GOAL", "=", "np", ".", "hstack", "(", "[", "\n", "self", ".", "TASK_INFO", "[", "\"stabilization_goal\"", "]", "[", "0", "]", ",", "0.0", ",", "\n", "self", ".", "TASK_INFO", "[", "\"stabilization_goal\"", "]", "[", "1", "]", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "]", ")", "# x = {x, x_dot, z, z_dot, theta, theta_dot}.", "\n", "", "", "elif", "self", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "            ", "POS_REF", ",", "VEL_REF", ",", "SPEED", "=", "self", ".", "_generate_trajectory", "(", "traj_type", "=", "self", ".", "TASK_INFO", "[", "\"trajectory_type\"", "]", ",", "\n", "traj_length", "=", "self", ".", "EPISODE_LEN_SEC", ",", "\n", "num_cycles", "=", "self", ".", "TASK_INFO", "[", "\"num_cycles\"", "]", ",", "\n", "traj_plane", "=", "self", ".", "TASK_INFO", "[", "\"trajectory_plane\"", "]", ",", "\n", "position_offset", "=", "self", ".", "TASK_INFO", "[", "\"trajectory_position_offset\"", "]", ",", "\n", "scaling", "=", "self", ".", "TASK_INFO", "[", "\"trajectory_scale\"", "]", ",", "\n", "sample_time", "=", "self", ".", "CTRL_TIMESTEP", "\n", ")", "\n", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "                ", "self", ".", "X_GOAL", "=", "np", ".", "vstack", "(", "[", "\n", "POS_REF", "[", ":", ",", "2", "]", ",", "\n", "VEL_REF", "[", ":", ",", "2", "]", "\n", "]", ")", ".", "transpose", "(", ")", "\n", "", "elif", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "TWO_D", ":", "\n", "                ", "self", ".", "X_GOAL", "=", "np", ".", "vstack", "(", "[", "\n", "POS_REF", "[", ":", ",", "0", "]", ",", "\n", "VEL_REF", "[", ":", ",", "0", "]", ",", "\n", "POS_REF", "[", ":", ",", "2", "]", ",", "\n", "VEL_REF", "[", ":", ",", "2", "]", ",", "\n", "np", ".", "zeros", "(", "POS_REF", ".", "shape", "[", "0", "]", ")", ",", "\n", "np", ".", "zeros", "(", "VEL_REF", ".", "shape", "[", "0", "]", ")", "\n", "]", ")", ".", "transpose", "(", ")", "\n", "# Equilibrium point at hover for linearization.", "\n", "", "", "self", ".", "X_EQ", "=", "np", ".", "zeros", "(", "self", ".", "state_dim", ")", "\n", "self", ".", "U_EQ", "=", "self", ".", "U_GOAL", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor.reset": [[257, 322], ["super().before_reset", "super()._reset_simulation", "pybullet.changeDynamics", "pybullet.resetBasePositionAndOrientation", "pybullet.resetBaseVelocity", "quadrotor.Quadrotor._update_and_store_kinematic_information", "super().after_reset", "quadrotor.Quadrotor._randomize_values_by_info", "any", "quadrotor.Quadrotor._randomize_values_by_info", "pybullet.getQuaternionFromEuler", "quadrotor.Quadrotor._get_observation", "quadrotor.Quadrotor._get_reset_info", "ValueError", "quadrotor.Quadrotor.values"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.before_reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._reset_simulation", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._update_and_store_kinematic_information", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.after_reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._randomize_values_by_info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._randomize_values_by_info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_observation", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_reset_info"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"(Re-)initializes the environment to start an episode.\n\n        Mandatory to call at least once after __init__().\n\n        Returns:\n            ndarray: The initial state of the environment.\n            dict: A dictionary with information about the dynamics and constraints symbolic models.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "before_reset", "(", ")", "\n", "# PyBullet simulation reset.  ", "\n", "super", "(", ")", ".", "_reset_simulation", "(", ")", "\n", "# Choose randomized or deterministic inertial properties.", "\n", "prop_values", "=", "{", "\n", "\"M\"", ":", "self", ".", "MASS", ",", "\n", "\"Iyy\"", ":", "self", ".", "J", "[", "1", ",", "1", "]", ",", "\n", "}", "\n", "if", "self", ".", "RANDOMIZED_INERTIAL_PROP", ":", "\n", "            ", "prop_values", "=", "self", ".", "_randomize_values_by_info", "(", "\n", "prop_values", ",", "self", ".", "INERTIAL_PROP_RAND_INFO", ")", "\n", "if", "any", "(", "phy_quantity", "<", "0", "for", "phy_quantity", "in", "prop_values", ".", "values", "(", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"[ERROR] in CartPole.reset(), negative randomized inertial properties.\"", ")", "\n", "", "", "self", ".", "OVERRIDDEN_QUAD_MASS", "=", "prop_values", "[", "\"M\"", "]", "\n", "self", ".", "OVERRIDDEN_QUAD_INERTIA", "=", "[", "self", ".", "J", "[", "0", ",", "0", "]", ",", "prop_values", "[", "\"Iyy\"", "]", ",", "self", ".", "J", "[", "2", ",", "2", "]", "]", "\n", "# Override inertial properties.", "\n", "p", ".", "changeDynamics", "(", "\n", "self", ".", "DRONE_IDS", "[", "0", "]", ",", "\n", "linkIndex", "=", "-", "1", ",", "# Base link.", "\n", "mass", "=", "self", ".", "OVERRIDDEN_QUAD_MASS", ",", "\n", "localInertiaDiagonal", "=", "self", ".", "OVERRIDDEN_QUAD_INERTIA", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Randomize initial state.", "\n", "init_values", "=", "{", "\n", "\"init_x\"", ":", "self", ".", "INIT_X", ",", "\n", "\"init_x_dot\"", ":", "self", ".", "INIT_X_DOT", ",", "\n", "\"init_z\"", ":", "self", ".", "INIT_Z", ",", "\n", "\"init_z_dot\"", ":", "self", ".", "INIT_Z_DOT", ",", "\n", "\"init_theta\"", ":", "self", ".", "INIT_THETA", ",", "\n", "\"init_theta_dot\"", ":", "self", ".", "INIT_THETA_DOT", ",", "\n", "}", "\n", "if", "self", ".", "RANDOMIZED_INIT", ":", "\n", "            ", "init_values", "=", "self", ".", "_randomize_values_by_info", "(", "init_values", ",", "self", ".", "INIT_STATE_RAND_INFO", ")", "\n", "", "OVERRIDDEN_INIT_X", "=", "init_values", "[", "\"init_x\"", "]", "\n", "OVERRIDDEN_INIT_X_DOT", "=", "init_values", "[", "\"init_x_dot\"", "]", "\n", "OVERRIDDEN_INIT_Z", "=", "init_values", "[", "\"init_z\"", "]", "\n", "OVERRIDDEN_INIT_Z_DOT", "=", "init_values", "[", "\"init_z_dot\"", "]", "\n", "OVERRIDDEN_INIT_THETA", "=", "init_values", "[", "\"init_theta\"", "]", "\n", "OVERRIDDEN_INIT_THETA_DOT", "=", "init_values", "[", "\"init_theta_dot\"", "]", "\n", "p", ".", "resetBasePositionAndOrientation", "(", "self", ".", "DRONE_IDS", "[", "0", "]", ",", "[", "OVERRIDDEN_INIT_X", ",", "0", ",", "OVERRIDDEN_INIT_Z", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "OVERRIDDEN_INIT_THETA", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "p", ".", "resetBaseVelocity", "(", "self", ".", "DRONE_IDS", "[", "0", "]", ",", "\n", "[", "OVERRIDDEN_INIT_X_DOT", ",", "0", ",", "OVERRIDDEN_INIT_Z_DOT", "]", ",", "\n", "[", "0", ",", "OVERRIDDEN_INIT_THETA_DOT", ",", "0", "]", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Update BaseAviary internal variables before calling self._get_observation().", "\n", "self", ".", "_update_and_store_kinematic_information", "(", ")", "\n", "obs", ",", "info", "=", "self", ".", "_get_observation", "(", ")", ",", "self", ".", "_get_reset_info", "(", ")", "\n", "obs", ",", "info", "=", "super", "(", ")", ".", "after_reset", "(", "obs", ",", "info", ")", "\n", "# Return either an observation and dictionary or just the observation.", "\n", "if", "self", ".", "INFO_IN_RESET", ":", "\n", "            ", "return", "obs", ",", "info", "\n", "", "else", ":", "\n", "            ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor.step": [[324, 379], ["super().before_step", "super()._advance_simulation", "quadrotor.Quadrotor._get_observation", "quadrotor.Quadrotor._get_reward", "quadrotor.Quadrotor._get_done", "quadrotor.Quadrotor._get_info", "super().after_step", "numpy.zeros", "quadrotor.Quadrotor.disturbances[].apply", "float", "NotImplementedError", "float", "float"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.before_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._advance_simulation", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_observation", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_reward", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_done", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.after_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.PeriodicNoise.apply"], ["", "", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Advances the environment by one control step.\n        \n        Pass the commanded RPMs and the adversarial force to the superclass .step().\n        The PyBullet simulation is stepped PYB_FREQ/CTRL_FREQ times in BaseAviary.\n\n        Args:\n            action (ndarray): the action applied to the environment for the step.\n\n        Returns:\n            ndarray: The state of the environment after the step.\n            float: The scalar reward/cost of the step.\n            bool: Whether the conditions for the end of an episode are met in the step.\n            dict: A dictionary with information about the constraints evaluations and violations.\n\n        \"\"\"", "\n", "# Get the preprocessed rpm for each motor", "\n", "rpm", "=", "super", "(", ")", ".", "before_step", "(", "action", ")", "\n", "# Determine disturbance force.", "\n", "disturb_force", "=", "None", "\n", "passive_disturb", "=", "\"dynamics\"", "in", "self", ".", "disturbances", "\n", "adv_disturb", "=", "self", ".", "adversary_disturbance", "==", "\"dynamics\"", "\n", "if", "passive_disturb", "or", "adv_disturb", ":", "\n", "            ", "disturb_force", "=", "np", ".", "zeros", "(", "2", ")", "\n", "", "if", "passive_disturb", ":", "\n", "            ", "disturb_force", "=", "self", ".", "disturbances", "[", "\"dynamics\"", "]", ".", "apply", "(", "\n", "disturb_force", ",", "self", ")", "\n", "", "if", "adv_disturb", "and", "self", ".", "adv_action", "is", "not", "None", ":", "\n", "            ", "disturb_force", "=", "disturb_force", "+", "self", ".", "adv_action", "\n", "# Clear the adversary action, wait for the next one.", "\n", "self", ".", "adv_action", "=", "None", "\n", "# Construct full (3D) disturbance force.", "\n", "", "if", "disturb_force", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "# Only disturb on z direction.", "\n", "                ", "disturb_force", "=", "[", "0", ",", "0", ",", "float", "(", "disturb_force", ")", "]", "\n", "", "elif", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "TWO_D", ":", "\n", "# Only disturb on x-z plane.", "\n", "                ", "disturb_force", "=", "[", "\n", "float", "(", "disturb_force", "[", "0", "]", ")", ",", "0", ",", "\n", "float", "(", "disturb_force", "[", "1", "]", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "\"[ERROR] in Quadrotor._advance_simulation(), disturb force for quad 3D is not available.\"", "\n", ")", "\n", "# Advance the simulation.        ", "\n", "", "", "super", "(", ")", ".", "_advance_simulation", "(", "rpm", ",", "disturb_force", ")", "\n", "# Standard Gym return.", "\n", "obs", "=", "self", ".", "_get_observation", "(", ")", "\n", "rew", "=", "self", ".", "_get_reward", "(", ")", "\n", "done", "=", "self", ".", "_get_done", "(", ")", "\n", "info", "=", "self", ".", "_get_info", "(", ")", "\n", "obs", ",", "rew", ",", "done", ",", "info", "=", "super", "(", ")", ".", "after_step", "(", "obs", ",", "rew", ",", "done", ",", "info", ")", "\n", "return", "obs", ",", "rew", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor.render": [[380, 400], ["pybullet.getCameraImage", "numpy.reshape"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "\"\"\"Retrieves a frame from PyBullet rendering.\n\n        Args:\n            mode (str): Unused.\n\n        Returns:\n            ndarray: A multidimensional array with the RGB frame captured by PyBullet's camera.\n\n        \"\"\"", "\n", "[", "w", ",", "h", ",", "rgb", ",", "dep", ",", "seg", "]", "=", "p", ".", "getCameraImage", "(", "width", "=", "self", ".", "RENDER_WIDTH", ",", "\n", "height", "=", "self", ".", "RENDER_HEIGHT", ",", "\n", "shadow", "=", "1", ",", "\n", "viewMatrix", "=", "self", ".", "CAM_VIEW", ",", "\n", "projectionMatrix", "=", "self", ".", "CAM_PRO", ",", "\n", "renderer", "=", "p", ".", "ER_TINY_RENDERER", ",", "\n", "flags", "=", "p", ".", "ER_SEGMENTATION_MASK_OBJECT_AND_LINKINDEX", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Image.fromarray(np.reshape(rgb, (h, w, 4)), 'RGBA').show()", "\n", "return", "np", ".", "reshape", "(", "rgb", ",", "(", "h", ",", "w", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor._setup_symbolic": [[401, 465], ["casadi.MX.sym", "casadi.MX.sym", "casadi.MX.sym", "casadi.MX.sym", "casadi.MX.sym", "casadi.MX.sym", "safe_control_gym.math_and_models.symbolic_systems.SymbolicModel", "casadi.vertcat", "casadi.MX.sym", "casadi.vertcat", "casadi.vertcat", "casadi.vertcat", "casadi.MX.sym", "casadi.MX.sym", "casadi.MX.sym", "casadi.MX.sym", "casadi.vertcat", "casadi.MX.sym", "casadi.MX.sym", "casadi.vertcat", "casadi.vertcat", "casadi.vertcat", "numpy.sqrt", "casadi.sin", "casadi.cos"], "methods", ["None"], ["", "def", "_setup_symbolic", "(", "self", ")", ":", "\n", "        ", "\"\"\"Creates symbolic (CasADi) models for dynamics, observation, and cost.\n\n        Returns:\n            SymbolicModel: CasADi symbolic model of the environment.\n\n        \"\"\"", "\n", "m", ",", "g", ",", "l", "=", "self", ".", "MASS", ",", "self", ".", "GRAVITY_ACC", ",", "self", ".", "L", "\n", "Iyy", "=", "self", ".", "J", "[", "1", ",", "1", "]", "\n", "dt", "=", "self", ".", "CTRL_TIMESTEP", "\n", "# Define states.", "\n", "z", "=", "cs", ".", "MX", ".", "sym", "(", "'z'", ")", "\n", "z_dot", "=", "cs", ".", "MX", ".", "sym", "(", "'z_dot'", ")", "\n", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "            ", "nx", ",", "nu", "=", "2", ",", "1", "\n", "# Define states.", "\n", "X", "=", "cs", ".", "vertcat", "(", "z", ",", "z_dot", ")", "\n", "# Define input thrust.", "\n", "T", "=", "cs", ".", "MX", ".", "sym", "(", "'T'", ")", "\n", "U", "=", "cs", ".", "vertcat", "(", "T", ")", "\n", "# Define dynamics equations.", "\n", "X_dot", "=", "cs", ".", "vertcat", "(", "z_dot", ",", "T", "/", "m", "-", "g", ")", "\n", "# Define observation equation.", "\n", "Y", "=", "cs", ".", "vertcat", "(", "z", ",", "z_dot", ")", "\n", "", "elif", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "TWO_D", ":", "\n", "            ", "nx", ",", "nu", "=", "6", ",", "2", "\n", "# Define states.", "\n", "x", "=", "cs", ".", "MX", ".", "sym", "(", "'x'", ")", "\n", "x_dot", "=", "cs", ".", "MX", ".", "sym", "(", "'x_dot'", ")", "\n", "theta", "=", "cs", ".", "MX", ".", "sym", "(", "'theta'", ")", "\n", "theta_dot", "=", "cs", ".", "MX", ".", "sym", "(", "'theta_dot'", ")", "\n", "X", "=", "cs", ".", "vertcat", "(", "x", ",", "x_dot", ",", "z", ",", "z_dot", ",", "theta", ",", "theta_dot", ")", "\n", "# Define input thrusts.", "\n", "T1", "=", "cs", ".", "MX", ".", "sym", "(", "'T1'", ")", "\n", "T2", "=", "cs", ".", "MX", ".", "sym", "(", "'T2'", ")", "\n", "U", "=", "cs", ".", "vertcat", "(", "T1", ",", "T2", ")", "\n", "# Define dynamics equations.", "\n", "X_dot", "=", "cs", ".", "vertcat", "(", "x_dot", ",", "\n", "cs", ".", "sin", "(", "theta", ")", "*", "(", "T1", "+", "T2", ")", "/", "m", ",", "z_dot", ",", "\n", "cs", ".", "cos", "(", "theta", ")", "*", "(", "T1", "+", "T2", ")", "/", "m", "-", "g", ",", "theta_dot", ",", "\n", "l", "*", "(", "T2", "-", "T1", ")", "/", "Iyy", "/", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "# Define observation.", "\n", "Y", "=", "cs", ".", "vertcat", "(", "x", ",", "x_dot", ",", "z", ",", "z_dot", ",", "theta", ",", "theta_dot", ")", "\n", "# Define cost (quadratic form).", "\n", "", "Q", "=", "cs", ".", "MX", ".", "sym", "(", "'Q'", ",", "nx", ",", "nx", ")", "\n", "R", "=", "cs", ".", "MX", ".", "sym", "(", "'R'", ",", "nu", ",", "nu", ")", "\n", "Xr", "=", "cs", ".", "MX", ".", "sym", "(", "'Xr'", ",", "nx", ",", "1", ")", "\n", "Ur", "=", "cs", ".", "MX", ".", "sym", "(", "'Ur'", ",", "nu", ",", "1", ")", "\n", "cost_func", "=", "0.5", "*", "(", "X", "-", "Xr", ")", ".", "T", "@", "Q", "@", "(", "X", "-", "Xr", ")", "+", "0.5", "*", "(", "U", "-", "Ur", ")", ".", "T", "@", "R", "@", "(", "U", "-", "Ur", ")", "\n", "# Define dynamics and cost dictionaries.", "\n", "dynamics", "=", "{", "\"dyn_eqn\"", ":", "X_dot", ",", "\"obs_eqn\"", ":", "Y", ",", "\"vars\"", ":", "{", "\"X\"", ":", "X", ",", "\"U\"", ":", "U", "}", "}", "\n", "cost", "=", "{", "\n", "\"cost_func\"", ":", "cost_func", ",", "\n", "\"vars\"", ":", "{", "\n", "\"X\"", ":", "X", ",", "\n", "\"U\"", ":", "U", ",", "\n", "\"Xr\"", ":", "Xr", ",", "\n", "\"Ur\"", ":", "Ur", ",", "\n", "\"Q\"", ":", "Q", ",", "\n", "\"R\"", ":", "R", "\n", "}", "\n", "}", "\n", "# Setup symbolic model.", "\n", "self", ".", "symbolic", "=", "SymbolicModel", "(", "dynamics", "=", "dynamics", ",", "cost", "=", "cost", ",", "dt", "=", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor._set_action_space": [[466, 500], ["gym.spaces.Box", "gym.spaces.Box", "NotImplementedError", "numpy.ones", "numpy.full", "numpy.full", "numpy.ones"], "methods", ["None"], ["", "def", "_set_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the action space of the environment.\n\n        Returns:\n            gym.spaces: The quadrotor environment's action space, of size 1 or 2 depending on QUAD_TYPE.\n\n        \"\"\"", "\n", "# Define action/input dimension, labels, and units.", "\n", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "            ", "action_dim", "=", "1", "\n", "self", ".", "ACTION_LABELS", "=", "[", "'T'", "]", "\n", "self", ".", "ACTION_UNITS", "=", "[", "'N'", "]", "if", "not", "self", ".", "NORMALIZED_RL_ACTION_SPACE", "else", "[", "'-'", "]", "\n", "", "elif", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "TWO_D", ":", "\n", "            ", "action_dim", "=", "2", "\n", "self", ".", "ACTION_LABELS", "=", "[", "'T1'", ",", "'T2'", "]", "\n", "self", ".", "ACTION_UNITS", "=", "[", "'N'", ",", "'N'", "]", "if", "not", "self", ".", "NORMALIZED_RL_ACTION_SPACE", "else", "[", "'-'", ",", "'-'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"[ERROR] in Quadrotor._set_action_space(), quad_type not supported.\"", "\n", ")", "\n", "", "if", "self", ".", "NORMALIZED_RL_ACTION_SPACE", ":", "\n", "# normalized thrust (around hover thrust)", "\n", "            ", "self", ".", "hover_thrust", "=", "self", ".", "GRAVITY_ACC", "*", "self", ".", "MASS", "/", "action_dim", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "ones", "(", "action_dim", ")", ",", "\n", "high", "=", "np", ".", "ones", "(", "action_dim", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "# direct thrust control ", "\n", "            ", "n_mot", "=", "4", "/", "action_dim", "\n", "a_low", "=", "self", ".", "KF", "*", "n_mot", "*", "(", "self", ".", "PWM2RPM_SCALE", "*", "self", ".", "MIN_PWM", "+", "self", ".", "PWM2RPM_CONST", ")", "**", "2", "\n", "a_high", "=", "self", ".", "KF", "*", "n_mot", "*", "(", "self", ".", "PWM2RPM_SCALE", "*", "self", ".", "MAX_PWM", "+", "self", ".", "PWM2RPM_CONST", ")", "**", "2", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "np", ".", "full", "(", "action_dim", ",", "a_low", ",", "np", ".", "float32", ")", ",", "\n", "high", "=", "np", ".", "full", "(", "action_dim", ",", "a_high", ",", "np", ".", "float32", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor._set_observation_space": [[501, 548], ["gym.spaces.Box", "gym.spaces.Box", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.finfo", "numpy.finfo", "numpy.finfo", "numpy.finfo", "numpy.finfo", "numpy.finfo", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "", "def", "_set_observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the observation space of the environment.\n\n        Returns:\n            gym.spaces: The bounded observation (state) space, of size 2 or 6 depending on QUAD_TYPE.\n\n        \"\"\"", "\n", "self", ".", "x_threshold", "=", "2", "\n", "self", ".", "z_threshold", "=", "2", "\n", "self", ".", "theta_threshold_radians", "=", "85", "*", "math", ".", "pi", "/", "180", "\n", "# Define obs/state bounds, labels and units.", "\n", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "# obs/state = {z, z_dot}.", "\n", "            ", "low", "=", "np", ".", "array", "(", "[", "self", ".", "GROUND_PLANE_Z", "*", "2", ",", "-", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", "]", ")", "\n", "high", "=", "np", ".", "array", "(", "[", "self", ".", "z_threshold", "*", "2", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", "]", ")", "\n", "self", ".", "STATE_LABELS", "=", "[", "'z'", ",", "'z_dot'", "]", "\n", "self", ".", "STATE_UNITS", "=", "[", "'m'", ",", "'m/s'", "]", "\n", "", "elif", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "TWO_D", ":", "\n", "# obs/state = {x, x_dot, z, z_dot, theta, theta_dot}.", "\n", "            ", "low", "=", "np", ".", "array", "(", "[", "\n", "-", "self", ".", "x_threshold", "*", "2", ",", "-", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "self", ".", "GROUND_PLANE_Z", "*", "2", ",", "-", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "-", "self", ".", "theta_threshold_radians", "*", "2", ",", "-", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", "\n", "]", ")", "\n", "high", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "x_threshold", "*", "2", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "self", ".", "z_threshold", "*", "2", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "self", ".", "theta_threshold_radians", "*", "2", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", "\n", "]", ")", "\n", "self", ".", "STATE_LABELS", "=", "[", "'x'", ",", "'x_dot'", ",", "'z'", ",", "'z_dot'", ",", "'theta'", ",", "'theta_dot'", "]", "\n", "self", ".", "STATE_UNITS", "=", "[", "'m'", ",", "'m/s'", ",", "'m'", ",", "'m/s'", ",", "'rad'", ",", "'rad/s'", "]", "\n", "# Define underlying state space in dynamics transition", "\n", "", "self", ".", "state_space", "=", "spaces", ".", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Concatenate goal info for RL ", "\n", "if", "self", ".", "COST", "==", "Cost", ".", "RL_REWARD", "and", "self", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "# include future goal state(s) ", "\n", "# e.g. horizon=1, obs = {state, state_target}", "\n", "            ", "mul", "=", "1", "+", "self", ".", "obs_goal_horizon", "\n", "low", "=", "np", ".", "concatenate", "(", "[", "low", "]", "*", "mul", ")", "\n", "high", "=", "np", ".", "concatenate", "(", "[", "high", "]", "*", "mul", ")", "\n", "", "elif", "self", ".", "COST", "==", "Cost", ".", "RL_REWARD", "and", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "low", "=", "np", ".", "concatenate", "(", "[", "low", "]", "*", "2", ")", "\n", "high", "=", "np", ".", "concatenate", "(", "[", "high", "]", "*", "2", ")", "\n", "# Define obs space exposed to the controller ", "\n", "# Note obs space is often different to state space for RL (with additional task info)", "\n", "", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor._preprocess_control": [[549, 577], ["safe_control_gym.envs.gym_pybullet_drones.quadrotor_utils.cmd2pwm", "safe_control_gym.envs.gym_pybullet_drones.quadrotor_utils.pwm2rpm", "numpy.clip", "numpy.clip", "print", "quadrotor.Quadrotor.disturbances[].apply", "numpy.array_equal", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor_utils.cmd2pwm", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor_utils.pwm2rpm", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.PeriodicNoise.apply"], ["", "def", "_preprocess_control", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Converts the action passed to .step() into motors' RPMs (ndarray of shape (4,)).\n\n        Args:\n            action (ndarray): The raw action input, of size 1 or 2 depending on QUAD_TYPE.\n\n        Returns:\n            ndarray: The motors RPMs to apply to the quadrotor.\n\n        \"\"\"", "\n", "if", "self", ".", "NORMALIZED_RL_ACTION_SPACE", ":", "\n", "# rescale action to around hover thrust", "\n", "            ", "action", "=", "np", ".", "clip", "(", "action", ",", "self", ".", "action_space", ".", "low", ",", "self", ".", "action_space", ".", "high", ")", "\n", "thrust", "=", "(", "1", "+", "self", ".", "norm_act_scale", "*", "action", ")", "*", "self", ".", "hover_thrust", "\n", "", "else", ":", "\n", "            ", "thrust", "=", "np", ".", "clip", "(", "action", ",", "self", ".", "action_space", ".", "low", ",", "self", ".", "action_space", ".", "high", ")", "\n", "", "if", "not", "np", ".", "array_equal", "(", "thrust", ",", "np", ".", "array", "(", "action", ")", ")", "and", "self", ".", "VERBOSE", ":", "\n", "            ", "print", "(", "\"[WARNING]: action was clipped in Quadrotor._preprocess_control().\"", ")", "\n", "", "self", ".", "current_preprocessed_action", "=", "thrust", "\n", "# Apply disturbances.", "\n", "if", "\"action\"", "in", "self", ".", "disturbances", ":", "\n", "            ", "thrust", "=", "self", ".", "disturbances", "[", "\"action\"", "]", ".", "apply", "(", "thrust", ",", "self", ")", "\n", "", "if", "self", ".", "adversary_disturbance", "==", "\"action\"", ":", "\n", "            ", "thrust", "=", "thrust", "+", "self", ".", "adv_action", "\n", "# convert to quad motor rpm commands", "\n", "", "pwm", "=", "cmd2pwm", "(", "thrust", ",", "self", ".", "PWM2RPM_SCALE", ",", "self", ".", "PWM2RPM_CONST", ",", "self", ".", "KF", ",", "self", ".", "MIN_PWM", ",", "self", ".", "MAX_PWM", ")", "\n", "rpm", "=", "pwm2rpm", "(", "pwm", ",", "self", ".", "PWM2RPM_SCALE", ",", "self", ".", "PWM2RPM_CONST", ")", "\n", "return", "rpm", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor._get_observation": [[578, 620], ["quadrotor.Quadrotor._get_drone_state_vector", "numpy.split", "copy.deepcopy", "numpy.hstack().reshape", "quadrotor.Quadrotor.disturbances[].apply", "quadrotor.Quadrotor.X_GOAL[].flatten", "numpy.concatenate", "numpy.hstack().reshape", "min", "quadrotor.Quadrotor.X_GOAL.flatten", "numpy.concatenate", "numpy.hstack", "range", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.base_aviary.BaseAviary._get_drone_state_vector", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.PeriodicNoise.apply"], ["", "def", "_get_observation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the current observation (state) of the environment.\n\n        Returns:\n            ndarray: The state of the quadrotor, of size 2 or 6 depending on QUAD_TYPE.\n\n        \"\"\"", "\n", "full_state", "=", "self", ".", "_get_drone_state_vector", "(", "0", ")", "\n", "pos", ",", "_", ",", "rpy", ",", "vel", ",", "ang_v", ",", "_", "=", "np", ".", "split", "(", "full_state", ",", "[", "3", ",", "7", ",", "10", ",", "13", ",", "16", "]", ")", "\n", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "# {z, z_dot}.", "\n", "            ", "self", ".", "state", "=", "np", ".", "hstack", "(", "[", "pos", "[", "2", "]", ",", "vel", "[", "2", "]", "]", ")", ".", "reshape", "(", "(", "2", ",", ")", ")", "\n", "", "elif", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "TWO_D", ":", "\n", "# {x, x_dot, z, z_dot, theta, theta_dot}.", "\n", "            ", "self", ".", "state", "=", "np", ".", "hstack", "(", "\n", "[", "pos", "[", "0", "]", ",", "vel", "[", "0", "]", ",", "pos", "[", "2", "]", ",", "vel", "[", "2", "]", ",", "rpy", "[", "1", "]", ",", "ang_v", "[", "1", "]", "]", "\n", ")", ".", "reshape", "(", "(", "6", ",", ")", ")", "\n", "# if not np.array_equal(self.state,", "\n", "#                       np.clip(self.state, self.observation_space.low, self.observation_space.high)):", "\n", "#     if self.GUI and self.VERBOSE:", "\n", "#         print(", "\n", "#             \"[WARNING]: observation was clipped in Quadrotor._get_observation().\"", "\n", "#         )", "\n", "# Apply observation disturbance.", "\n", "", "obs", "=", "deepcopy", "(", "self", ".", "state", ")", "\n", "if", "\"observation\"", "in", "self", ".", "disturbances", ":", "\n", "            ", "obs", "=", "self", ".", "disturbances", "[", "\"observation\"", "]", ".", "apply", "(", "obs", ",", "self", ")", "\n", "# Concatenate goal info (goal state(s)) for RL ", "\n", "", "if", "self", ".", "COST", "==", "Cost", ".", "RL_REWARD", "and", "self", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "# increment by 1 since counter is post-updated after _get_observation(),", "\n", "# obs should contain goal state desired for the next state", "\n", "            ", "next_step", "=", "self", ".", "ctrl_step_counter", "+", "1", "\n", "wp_idx", "=", "[", "\n", "min", "(", "next_step", "+", "i", ",", "self", ".", "X_GOAL", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "obs_goal_horizon", ")", "\n", "]", "\n", "goal_state", "=", "self", ".", "X_GOAL", "[", "wp_idx", "]", ".", "flatten", "(", ")", "\n", "obs", "=", "np", ".", "concatenate", "(", "[", "obs", ",", "goal_state", "]", ")", "\n", "", "elif", "self", ".", "COST", "==", "Cost", ".", "RL_REWARD", "and", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "goal_state", "=", "self", ".", "X_GOAL", ".", "flatten", "(", ")", "\n", "obs", "=", "np", ".", "concatenate", "(", "[", "obs", ",", "goal_state", "]", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor._get_reward": [[621, 665], ["numpy.asarray", "numpy.sum", "numpy.sum", "min", "numpy.sum", "numpy.sum", "numpy.exp", "float", "float", "quadrotor.Quadrotor.symbolic.loss", "quadrotor.Quadrotor.symbolic.loss"], "methods", ["None"], ["", "def", "_get_reward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current step's reward value.\n\n        Returns:\n            float: The evaluated reward/cost.\n\n        \"\"\"", "\n", "# RL cost.", "\n", "if", "self", ".", "COST", "==", "Cost", ".", "RL_REWARD", ":", "\n", "            ", "state", "=", "self", ".", "state", "\n", "act", "=", "np", ".", "asarray", "(", "self", ".", "current_preprocessed_action", ")", "\n", "# quadratic costs w.r.t state and action", "\n", "# TODO: consider using action error with goal action the hover thrust", "\n", "# TODO: consider using multiple future goal states for cost in tracking", "\n", "if", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "                ", "state_error", "=", "state", "-", "self", ".", "X_GOAL", "\n", "dist", "=", "np", ".", "sum", "(", "self", ".", "rew_state_weight", "*", "state_error", "*", "state_error", ")", "\n", "dist", "+=", "np", ".", "sum", "(", "self", ".", "rew_act_weight", "*", "act", "*", "act", ")", "\n", "", "if", "self", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "                ", "wp_idx", "=", "min", "(", "self", ".", "ctrl_step_counter", ",", "self", ".", "X_GOAL", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "state_error", "=", "state", "-", "self", ".", "X_GOAL", "[", "wp_idx", "]", "\n", "dist", "=", "np", ".", "sum", "(", "self", ".", "rew_state_weight", "*", "state_error", "*", "state_error", ")", "\n", "dist", "+=", "np", ".", "sum", "(", "self", ".", "rew_act_weight", "*", "act", "*", "act", ")", "\n", "", "rew", "=", "-", "dist", "\n", "# convert rew to be positive and bounded [0,1]", "\n", "if", "self", ".", "rew_exponential", ":", "\n", "                ", "rew", "=", "np", ".", "exp", "(", "rew", ")", "\n", "", "return", "rew", "\n", "# Control cost.", "\n", "", "if", "self", ".", "COST", "==", "Cost", ".", "QUADRATIC", ":", "\n", "            ", "if", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "                ", "return", "float", "(", "-", "1", "*", "self", ".", "symbolic", ".", "loss", "(", "x", "=", "self", ".", "state", ",", "\n", "Xr", "=", "self", ".", "X_GOAL", ",", "\n", "u", "=", "self", ".", "current_preprocessed_action", ",", "\n", "Ur", "=", "self", ".", "U_GOAL", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "[", "\"l\"", "]", ")", "\n", "", "if", "self", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "                ", "return", "float", "(", "-", "1", "*", "self", ".", "symbolic", ".", "loss", "(", "x", "=", "self", ".", "state", ",", "\n", "Xr", "=", "self", ".", "X_GOAL", "[", "self", ".", "ctrl_step_counter", ",", ":", "]", ",", "\n", "u", "=", "self", ".", "current_preprocessed_action", ",", "\n", "Ur", "=", "self", ".", "U_GOAL", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "[", "\"l\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor._get_done": [[666, 704], ["bool", "bool", "bool", "numpy.linalg.norm"], "methods", ["None"], ["", "", "", "def", "_get_done", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the conditions for termination of an episode.\n\n        Returns:\n            bool: Whether an episode is over.\n\n        \"\"\"", "\n", "# Done if goal reached for stabilization task with quadratic cost.", "\n", "if", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", "and", "self", ".", "COST", "==", "Cost", ".", "QUADRATIC", ":", "\n", "            ", "self", ".", "goal_reached", "=", "bool", "(", "np", ".", "linalg", ".", "norm", "(", "self", ".", "state", "-", "self", ".", "X_GOAL", ")", "<", "self", ".", "TASK_INFO", "[", "\"stabilization_goal_tolerance\"", "]", ")", "\n", "if", "self", ".", "goal_reached", ":", "\n", "                ", "return", "True", "\n", "# # Done if the episode length is exceeded.", "\n", "# if (self.ctrl_step_counter + 1) / self.CTRL_FREQ >= self.EPISODE_LEN_SEC:", "\n", "#     return True", "\n", "# # Done if a constraint is violated.", "\n", "# if self.constraints is not None:", "\n", "#     if self.DONE_ON_VIOLATION and self.constraints.is_violated(self):", "\n", "#         return True", "\n", "# Done if state is out-of-bounds.", "\n", "", "", "if", "self", ".", "done_on_out_of_bound", ":", "\n", "            ", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "ONE_D", ":", "\n", "                ", "z", ",", "_", "=", "self", ".", "state", "\n", "out_of_bound", "=", "bool", "(", "z", "<", "-", "self", ".", "z_threshold", "\n", "or", "z", ">", "self", ".", "z_threshold", ")", "\n", "", "if", "self", ".", "QUAD_TYPE", "==", "QuadType", ".", "TWO_D", ":", "\n", "                ", "x", ",", "_", ",", "z", ",", "_", ",", "theta", ",", "_", "=", "self", ".", "state", "\n", "out_of_bound", "=", "bool", "(", "x", "<", "-", "self", ".", "x_threshold", "\n", "or", "x", ">", "self", ".", "x_threshold", "\n", "or", "z", "<", "-", "self", ".", "z_threshold", "\n", "or", "z", ">", "self", ".", "z_threshold", "\n", "or", "theta", "<", "-", "self", ".", "theta_threshold_radians", "\n", "or", "theta", ">", "self", ".", "theta_threshold_radians", ")", "\n", "# early terminate if needed, but does not return False right away, ", "\n", "# allowing other done conditions to be chained afterwards", "\n", "", "if", "out_of_bound", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor._get_info": [[705, 731], ["copy.deepcopy", "numpy.sum", "min"], "methods", ["None"], ["", "def", "_get_info", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generates the info dictionary returned by every call to .step().\n\n        Returns:\n            dict: A dictionary with information about the constraints evaluations and violations.\n\n        \"\"\"", "\n", "info", "=", "{", "}", "\n", "if", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", "and", "self", ".", "COST", "==", "Cost", ".", "QUADRATIC", ":", "\n", "            ", "info", "[", "\"goal_reached\"", "]", "=", "self", ".", "goal_reached", "# Add boolean flag for the goal being reached.", "\n", "# Add MSE.", "\n", "", "state", "=", "deepcopy", "(", "self", ".", "state", ")", "\n", "if", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "state_error", "=", "state", "-", "self", ".", "X_GOAL", "\n", "", "elif", "self", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "# TODO: should use angle wrapping  ", "\n", "# state[4] = normalize_angle(state[4])", "\n", "            ", "wp_idx", "=", "min", "(", "self", ".", "ctrl_step_counter", ",", "self", ".", "X_GOAL", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "state_error", "=", "state", "-", "self", ".", "X_GOAL", "[", "wp_idx", "]", "\n", "# filter only relevant dimensions ", "\n", "", "state_error", "=", "state_error", "*", "self", ".", "info_mse_metric_state_weight", "\n", "info", "[", "\"mse\"", "]", "=", "np", ".", "sum", "(", "state_error", "**", "2", ")", "\n", "# if self.constraints is not None:", "\n", "#     info[\"constraint_values\"] = self.constraints.get_values(self)", "\n", "#     info[\"constraint_violations\"] = self.constraints.get_violations(self)", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_pybullet_drones.quadrotor.Quadrotor._get_reset_info": [[732, 750], ["quadrotor.Quadrotor.constraints.get_all_symbolic_models"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_all_symbolic_models"], ["", "def", "_get_reset_info", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generates the info dictionary returned by every call to .reset().\n\n        Returns:\n            dict: A dictionary with information about the dynamics and constraints symbolic models.\n\n        \"\"\"", "\n", "info", "=", "{", "}", "\n", "info", "[", "\"symbolic_model\"", "]", "=", "self", ".", "symbolic", "\n", "info", "[", "\"physical_parameters\"", "]", "=", "{", "\n", "\"quadrotor_mass\"", ":", "self", ".", "MASS", ",", "\n", "\"quadrotor_iyy_inertia\"", ":", "self", ".", "J", "[", "1", ",", "1", "]", "\n", "}", "\n", "info", "[", "\"x_reference\"", "]", "=", "self", ".", "X_GOAL", "\n", "info", "[", "\"u_reference\"", "]", "=", "self", ".", "U_GOAL", "\n", "if", "self", ".", "constraints", "is", "not", "None", ":", "\n", "            ", "info", "[", "\"symbolic_constraints\"", "]", "=", "self", ".", "constraints", ".", "get_all_symbolic_models", "(", ")", "\n", "", "return", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.__init__": [[124, 237], ["numpy.array", "numpy.array", "safe_control_gym.envs.benchmark_env.BenchmarkEnv.__init__", "pybullet.setPhysicsEngineParameter", "int", "int", "cartpole.CartPole._parse_urdf_parameters", "cartpole.CartPole._setup_symbolic", "numpy.zeros", "pybullet.connect", "pybullet.connect", "numpy.zeros", "isinstance", "isinstance", "isinstance", "numpy.hstack", "numpy.atleast_2d", "isinstance", "inertial_prop.get", "inertial_prop.get", "inertial_prop.get", "ValueError", "prior_prop.get", "prior_prop.get", "prior_prop.get", "ValueError", "cartpole.CartPole._generate_trajectory", "numpy.vstack().transpose", "numpy.atleast_2d", "init_state.get", "init_state.get", "init_state.get", "init_state.get", "ValueError", "numpy.array", "numpy.vstack", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._parse_urdf_parameters", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._setup_symbolic", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._generate_trajectory", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.ppo.ppo_utils.PPOBuffer.get"], ["def", "__init__", "(", "self", ",", "\n", "init_state", "=", "None", ",", "\n", "prior_prop", "=", "None", ",", "\n", "inertial_prop", "=", "None", ",", "\n", "# custom args ", "\n", "obs_wrap_angle", "=", "False", ",", "\n", "rew_state_weight", "=", "1.0", ",", "\n", "rew_act_weight", "=", "0.0001", ",", "\n", "rew_exponential", "=", "True", ",", "\n", "done_on_out_of_bound", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize a cartpole environment.\n\n        Args:\n            init_state  (ndarray/dict, optional): The initial state of the environment \n                (x, x_dot, theta, theta_dot).\n            prior_prop (dict, optional): The prior inertial properties of the environment.\n            inertial_prop (dict, optional): The ground truth inertial properties of the environment.\n            obs_wrap_angle (bool): if to wrap angle to [-pi, pi] when used in observation.\n            rew_state_weight (list/ndarray): quadratic weights for state in rl reward.\n            rew_act_weight (list/ndarray): quadratic weights for action in rl reward.\n            rew_exponential (bool): if to exponentiate negative quadratic cost to positive, bounded [0,1] reward.\n            done_on_out_of_bound (bool): if to termiante when state is out of bound.\n        \"\"\"", "\n", "self", ".", "obs_wrap_angle", "=", "obs_wrap_angle", "\n", "self", ".", "rew_state_weight", "=", "np", ".", "array", "(", "rew_state_weight", ",", "ndmin", "=", "1", ",", "dtype", "=", "float", ")", "\n", "self", ".", "rew_act_weight", "=", "np", ".", "array", "(", "rew_act_weight", ",", "ndmin", "=", "1", ",", "dtype", "=", "float", ")", "\n", "self", ".", "rew_exponential", "=", "rew_exponential", "\n", "self", ".", "done_on_out_of_bound", "=", "done_on_out_of_bound", "\n", "# BenchmarkEnv constructor, called after defining the custom args, ", "\n", "# since some BenchmarkEnv init setup can be task(custom args)-dependent. ", "\n", "super", "(", ")", ".", "__init__", "(", "init_state", "=", "init_state", ",", "prior_prop", "=", "prior_prop", ",", "inertial_prop", "=", "inertial_prop", ",", "**", "kwargs", ")", "\n", "\n", "# Create PyBullet client connection.", "\n", "self", ".", "PYB_CLIENT", "=", "-", "1", "\n", "if", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "PYB_CLIENT", "=", "p", ".", "connect", "(", "p", ".", "GUI", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "PYB_CLIENT", "=", "p", ".", "connect", "(", "p", ".", "DIRECT", ")", "\n", "# disable urdf caching for randomization via reloading urdf", "\n", "", "p", ".", "setPhysicsEngineParameter", "(", "enableFileCaching", "=", "0", ")", "\n", "\n", "# Set GUI and rendering constants.", "\n", "self", ".", "RENDER_HEIGHT", "=", "int", "(", "200", ")", "\n", "self", ".", "RENDER_WIDTH", "=", "int", "(", "320", ")", "\n", "\n", "# Set the initial state.", "\n", "if", "init_state", "is", "None", ":", "\n", "            ", "self", ".", "INIT_X", ",", "self", ".", "INIT_X_DOT", ",", "self", ".", "INIT_THETA", ",", "self", ".", "INIT_THETA_DOT", "=", "np", ".", "zeros", "(", "4", ")", "\n", "", "elif", "isinstance", "(", "init_state", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "INIT_X", ",", "self", ".", "INIT_X_DOT", ",", "self", ".", "INIT_THETA", ",", "self", ".", "INIT_THETA_DOT", "=", "init_state", "\n", "", "elif", "isinstance", "(", "init_state", ",", "dict", ")", ":", "\n", "            ", "self", ".", "INIT_X", "=", "init_state", ".", "get", "(", "\"init_x\"", ",", "0", ")", "\n", "self", ".", "INIT_X_DOT", "=", "init_state", ".", "get", "(", "\"init_x_dot\"", ",", "0", ")", "\n", "self", ".", "INIT_THETA", "=", "init_state", ".", "get", "(", "\"init_theta\"", ",", "0", ")", "\n", "self", ".", "INIT_THETA_DOT", "=", "init_state", ".", "get", "(", "\"init_theta_dot\"", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR] in CartPole.__init__(), init_state incorrect format.\"", ")", "\n", "\n", "# Get physical properties from URDF (as default parameters).", "\n", "", "self", ".", "GRAVITY_ACC", "=", "9.8", "\n", "EFFECTIVE_POLE_LENGTH", ",", "POLE_MASS", ",", "CART_MASS", "=", "self", ".", "_parse_urdf_parameters", "(", "self", ".", "URDF_PATH", ")", "\n", "\n", "# Store ground truth parameters.", "\n", "if", "inertial_prop", "is", "None", ":", "\n", "            ", "self", ".", "EFFECTIVE_POLE_LENGTH", "=", "EFFECTIVE_POLE_LENGTH", "\n", "self", ".", "POLE_MASS", "=", "POLE_MASS", "\n", "self", ".", "CART_MASS", "=", "CART_MASS", "\n", "", "elif", "isinstance", "(", "inertial_prop", ",", "dict", ")", ":", "\n", "            ", "self", ".", "EFFECTIVE_POLE_LENGTH", "=", "inertial_prop", ".", "get", "(", "\"pole_length\"", ",", "EFFECTIVE_POLE_LENGTH", ")", "\n", "self", ".", "POLE_MASS", "=", "inertial_prop", ".", "get", "(", "\"pole_mass\"", ",", "POLE_MASS", ")", "\n", "self", ".", "CART_MASS", "=", "inertial_prop", ".", "get", "(", "\"cart_mass\"", ",", "CART_MASS", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR] in CartPole.__init__(), inertial_prop incorrect format.\"", ")", "\n", "\n", "# Store prior parameters.", "\n", "", "if", "prior_prop", "is", "None", ":", "\n", "            ", "self", ".", "PRIOR_EFFECTIVE_POLE_LENGTH", "=", "EFFECTIVE_POLE_LENGTH", "\n", "self", ".", "PRIOR_POLE_MASS", "=", "POLE_MASS", "\n", "self", ".", "PRIOR_CART_MASS", "=", "CART_MASS", "\n", "", "elif", "isinstance", "(", "prior_prop", ",", "dict", ")", ":", "\n", "            ", "self", ".", "PRIOR_EFFECTIVE_POLE_LENGTH", "=", "prior_prop", ".", "get", "(", "\"pole_length\"", ",", "EFFECTIVE_POLE_LENGTH", ")", "\n", "self", ".", "PRIOR_POLE_MASS", "=", "prior_prop", ".", "get", "(", "\"pole_mass\"", ",", "POLE_MASS", ")", "\n", "self", ".", "PRIOR_CART_MASS", "=", "prior_prop", ".", "get", "(", "\"cart_mass\"", ",", "CART_MASS", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR] in CartPole.__init__(), prior_prop incorrect format.\"", ")", "\n", "# Set prior/symbolic info.", "\n", "", "self", ".", "_setup_symbolic", "(", ")", "\n", "# Create X_GOAL and U_GOAL references for the assigned task.", "\n", "self", ".", "U_GOAL", "=", "np", ".", "zeros", "(", "1", ")", "\n", "if", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "            ", "self", ".", "X_GOAL", "=", "np", ".", "hstack", "(", "[", "self", ".", "TASK_INFO", "[", "\"stabilization_goal\"", "]", "[", "0", "]", ",", "0.", ",", "0.", ",", "0.", "]", ")", "# x = {x, x_dot, theta, theta_dot}.", "\n", "", "elif", "self", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "            ", "POS_REF", ",", "VEL_REF", ",", "SPEED", "=", "self", ".", "_generate_trajectory", "(", "traj_type", "=", "self", ".", "TASK_INFO", "[", "\"trajectory_type\"", "]", ",", "\n", "traj_length", "=", "self", ".", "EPISODE_LEN_SEC", ",", "\n", "num_cycles", "=", "self", ".", "TASK_INFO", "[", "\"num_cycles\"", "]", ",", "\n", "traj_plane", "=", "self", ".", "TASK_INFO", "[", "\"trajectory_plane\"", "]", ",", "\n", "position_offset", "=", "np", ".", "array", "(", "self", ".", "TASK_INFO", "[", "\"trajectory_position_offset\"", "]", ")", ",", "\n", "scaling", "=", "self", ".", "TASK_INFO", "[", "\"trajectory_scale\"", "]", ",", "\n", "sample_time", "=", "self", ".", "CTRL_TIMESTEP", "\n", ")", "\n", "self", ".", "X_GOAL", "=", "np", ".", "vstack", "(", "[", "\n", "POS_REF", "[", ":", ",", "0", "]", ",", "# Possible feature: add initial position.", "\n", "VEL_REF", "[", ":", ",", "0", "]", ",", "\n", "np", ".", "zeros", "(", "POS_REF", ".", "shape", "[", "0", "]", ")", ",", "\n", "np", ".", "zeros", "(", "VEL_REF", ".", "shape", "[", "0", "]", ")", "\n", "]", ")", ".", "transpose", "(", ")", "\n", "# Define equilibrium point about the upright equilibrium for stabilization or first point in trajectory.", "\n", "", "self", ".", "X_EQ", "=", "np", ".", "atleast_2d", "(", "self", ".", "X_GOAL", ")", "[", "0", ",", ":", "]", ".", "T", "\n", "self", ".", "U_EQ", "=", "np", ".", "atleast_2d", "(", "self", ".", "U_GOAL", ")", "[", "0", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step": [[238, 265], ["super().before_step", "cartpole.CartPole._advance_simulation", "numpy.hstack", "cartpole.CartPole._get_observation", "cartpole.CartPole._get_reward", "cartpole.CartPole._get_done", "cartpole.CartPole._get_info", "super().after_step", "pybullet.getJointState", "pybullet.getJointState"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.before_step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._advance_simulation", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_observation", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_reward", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_done", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.after_step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Advances the environment by one control step.\n\n        Args:\n            action (ndarray): the action applied to the environment for the step.\n\n        Returns:\n            ndarray: The state of the environment after the step.\n            float: The scalar reward/cost of the step.\n            bool: Whether the conditions for the end of an episode are met in the step.\n            dict: A dictionary with information about the constraints evaluations and violations.\n\n        \"\"\"", "\n", "force", "=", "super", "(", ")", ".", "before_step", "(", "action", ")", "\n", "# Advance the simulation.", "\n", "self", ".", "_advance_simulation", "(", "force", ")", "\n", "# Update the state.", "\n", "self", ".", "state", "=", "np", ".", "hstack", "(", "\n", "(", "p", ".", "getJointState", "(", "self", ".", "CARTPOLE_ID", ",", "jointIndex", "=", "0", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "[", "0", ":", "2", "]", ",", "p", ".", "getJointState", "(", "self", ".", "CARTPOLE_ID", ",", "jointIndex", "=", "1", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "[", "0", ":", "2", "]", ")", ")", "\n", "# Standard Gym return.", "\n", "obs", "=", "self", ".", "_get_observation", "(", ")", "\n", "rew", "=", "self", ".", "_get_reward", "(", ")", "\n", "done", "=", "self", ".", "_get_done", "(", ")", "\n", "info", "=", "self", ".", "_get_info", "(", ")", "\n", "obs", ",", "rew", ",", "done", ",", "info", "=", "super", "(", ")", ".", "after_step", "(", "obs", ",", "rew", ",", "done", ",", "info", ")", "\n", "return", "obs", ",", "rew", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset": [[266, 355], ["super().before_reset", "pybullet.resetSimulation", "pybullet.setGravity", "pybullet.setTimeStep", "pybullet.setRealTimeSimulation", "pybullet.setAdditionalSearchPath", "cartpole.CartPole._create_urdf", "os.path.join", "cartpole.CartPole.write", "pybullet.loadURDF", "os.remove", "pybullet.changeDynamics", "pybullet.changeDynamics", "pybullet.resetJointState", "pybullet.resetJointState", "numpy.hstack", "super().after_reset", "pybullet_data.getDataPath", "cartpole.CartPole._randomize_values_by_info", "any", "pybullet.changeDynamics", "pybullet.setJointMotorControl2", "cartpole.CartPole._randomize_values_by_info", "cartpole.CartPole._get_observation", "cartpole.CartPole._get_reset_info", "ValueError", "os.getpid", "pybullet.getJointState", "pybullet.getJointState", "cartpole.CartPole.values"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.before_reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._create_urdf", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv.after_reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._randomize_values_by_info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.benchmark_env.BenchmarkEnv._randomize_values_by_info", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_observation", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_reset_info"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"(Re-)initializes the environment to start an episode.\n\n        Mandatory to call at least once after __init__().\n\n        Returns:\n            ndarray: The initial state of the environment.\n            dict: A dictionary with information about the dynamics and constraints symbolic models.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "before_reset", "(", ")", "\n", "# PyBullet simulation reset.", "\n", "p", ".", "resetSimulation", "(", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "p", ".", "setGravity", "(", "0", ",", "0", ",", "-", "self", ".", "GRAVITY_ACC", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "p", ".", "setTimeStep", "(", "self", ".", "PYB_TIMESTEP", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "p", ".", "setRealTimeSimulation", "(", "0", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "p", ".", "setAdditionalSearchPath", "(", "pybullet_data", ".", "getDataPath", "(", ")", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# p.loadURDF(\"plane.urdf\", [0, 0, -1], physicsClientId=self.PYB_CLIENT)", "\n", "# Choose randomized or deterministic inertial properties.", "\n", "prop_values", "=", "{", "\"pole_length\"", ":", "self", ".", "EFFECTIVE_POLE_LENGTH", ",", "\"cart_mass\"", ":", "self", ".", "CART_MASS", ",", "\"pole_mass\"", ":", "self", ".", "POLE_MASS", "}", "\n", "if", "self", ".", "RANDOMIZED_INERTIAL_PROP", ":", "\n", "            ", "prop_values", "=", "self", ".", "_randomize_values_by_info", "(", "prop_values", ",", "self", ".", "INERTIAL_PROP_RAND_INFO", ")", "\n", "if", "any", "(", "phy_quantity", "<", "0", "for", "phy_quantity", "in", "prop_values", ".", "values", "(", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"[ERROR] in CartPole.reset(), negative randomized inertial properties.\"", ")", "\n", "", "", "self", ".", "OVERRIDDEN_EFFECTIVE_POLE_LENGTH", "=", "prop_values", "[", "\"pole_length\"", "]", "\n", "self", ".", "OVERRIDDEN_CART_MASS", "=", "prop_values", "[", "\"cart_mass\"", "]", "\n", "self", ".", "OVERRIDDEN_POLE_MASS", "=", "prop_values", "[", "\"pole_mass\"", "]", "\n", "# See `slender rod`, https://en.wikipedia.org/wiki/List_of_moments_of_inertia.", "\n", "OVERRIDDEN_POLE_INERTIA", "=", "(", "1", "/", "12", ")", "*", "self", ".", "OVERRIDDEN_POLE_MASS", "*", "(", "2", "*", "self", ".", "OVERRIDDEN_EFFECTIVE_POLE_LENGTH", ")", "**", "2", "\n", "# Load the cartpole with new urdf.", "\n", "override_urdf_tree", "=", "self", ".", "_create_urdf", "(", "self", ".", "URDF_PATH", ",", "length", "=", "self", ".", "OVERRIDDEN_EFFECTIVE_POLE_LENGTH", ",", "inertia", "=", "OVERRIDDEN_POLE_INERTIA", ")", "\n", "self", ".", "override_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"pid-{}_id-{}_cartpole.urdf\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ",", "self", ".", "id", ")", ")", "\n", "override_urdf_tree", ".", "write", "(", "self", ".", "override_path", ")", "\n", "self", ".", "CARTPOLE_ID", "=", "p", ".", "loadURDF", "(", "\n", "self", ".", "override_path", ",", "\n", "basePosition", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "# flags = p.URDF_USE_INERTIA_FROM_FILE,", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Remove cache file after loading it into PyBullet.", "\n", "os", ".", "remove", "(", "self", ".", "override_path", ")", "\n", "# Cartpole settings.", "\n", "for", "i", "in", "[", "-", "1", ",", "0", ",", "1", "]", ":", "# Slider, cart, and pole.", "\n", "            ", "p", ".", "changeDynamics", "(", "self", ".", "CARTPOLE_ID", ",", "linkIndex", "=", "i", ",", "linearDamping", "=", "0", ",", "angularDamping", "=", "0", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "", "for", "i", "in", "[", "0", ",", "1", "]", ":", "# Slider-to-cart and cart-to-pole joints.", "\n", "            ", "p", ".", "setJointMotorControl2", "(", "self", ".", "CARTPOLE_ID", ",", "jointIndex", "=", "i", ",", "controlMode", "=", "p", ".", "VELOCITY_CONTROL", ",", "force", "=", "0", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Override inertial properties.", "\n", "", "p", ".", "changeDynamics", "(", "\n", "self", ".", "CARTPOLE_ID", ",", "\n", "linkIndex", "=", "0", ",", "# Cart.", "\n", "mass", "=", "self", ".", "OVERRIDDEN_CART_MASS", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "p", ".", "changeDynamics", "(", "\n", "self", ".", "CARTPOLE_ID", ",", "\n", "linkIndex", "=", "1", ",", "# Pole.", "\n", "mass", "=", "self", ".", "OVERRIDDEN_POLE_MASS", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Randomize initial state.", "\n", "init_values", "=", "{", "\"init_x\"", ":", "self", ".", "INIT_X", ",", "\"init_x_dot\"", ":", "self", ".", "INIT_X_DOT", ",", "\"init_theta\"", ":", "self", ".", "INIT_THETA", ",", "\"init_theta_dot\"", ":", "self", ".", "INIT_THETA_DOT", "}", "\n", "if", "self", ".", "RANDOMIZED_INIT", ":", "\n", "            ", "init_values", "=", "self", ".", "_randomize_values_by_info", "(", "init_values", ",", "self", ".", "INIT_STATE_RAND_INFO", ")", "\n", "", "OVERRIDDEN_INIT_X", "=", "init_values", "[", "\"init_x\"", "]", "\n", "OVERRIDDEN_INIT_X_DOT", "=", "init_values", "[", "\"init_x_dot\"", "]", "\n", "OVERRIDDEN_INIT_THETA", "=", "init_values", "[", "\"init_theta\"", "]", "\n", "OVERRIDDEN_INIT_THETA_DOT", "=", "init_values", "[", "\"init_theta_dot\"", "]", "\n", "p", ".", "resetJointState", "(", "\n", "self", ".", "CARTPOLE_ID", ",", "\n", "jointIndex", "=", "0", ",", "# Slider-to-cart joint.", "\n", "targetValue", "=", "OVERRIDDEN_INIT_X", ",", "\n", "targetVelocity", "=", "OVERRIDDEN_INIT_X_DOT", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "p", ".", "resetJointState", "(", "\n", "self", ".", "CARTPOLE_ID", ",", "\n", "jointIndex", "=", "1", ",", "# Cart-to-pole joints.", "\n", "targetValue", "=", "OVERRIDDEN_INIT_THETA", ",", "\n", "targetVelocity", "=", "OVERRIDDEN_INIT_THETA_DOT", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Compute state (x, x_dot, theta, theta_dot).", "\n", "self", ".", "state", "=", "np", ".", "hstack", "(", "\n", "(", "p", ".", "getJointState", "(", "self", ".", "CARTPOLE_ID", ",", "jointIndex", "=", "0", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "[", "0", ":", "2", "]", ",", "p", ".", "getJointState", "(", "self", ".", "CARTPOLE_ID", ",", "jointIndex", "=", "1", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "[", "0", ":", "2", "]", ")", ")", "\n", "# Debug visualization if GUI enabled", "\n", "self", ".", "line", "=", "None", "\n", "obs", ",", "info", "=", "self", ".", "_get_observation", "(", ")", ",", "self", ".", "_get_reset_info", "(", ")", "\n", "obs", ",", "info", "=", "super", "(", ")", ".", "after_reset", "(", "obs", ",", "info", ")", "\n", "# Return either an observation and dictionary or just the observation.", "\n", "if", "self", ".", "INFO_IN_RESET", ":", "\n", "            ", "return", "obs", ",", "info", "\n", "", "else", ":", "\n", "            ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.render": [[356, 387], ["numpy.reshape", "pybullet.computeViewMatrixFromYawPitchRoll", "pybullet.computeProjectionMatrixFOV", "pybullet.getCameraImage", "float"], "methods", ["None"], ["", "", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "\"\"\"Retrieves a frame from PyBullet rendering.\n\n        Args:\n            mode (str): Unused.\n\n        Returns:\n            ndarray: A multidimensional array with the RGB frame captured by PyBullet's camera.\n\n        \"\"\"", "\n", "if", "self", ".", "PYB_CLIENT", ">=", "0", ":", "\n", "            ", "VIEW_MATRIX", "=", "p", ".", "computeViewMatrixFromYawPitchRoll", "(", "cameraTargetPosition", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "distance", "=", "2", ",", "\n", "yaw", "=", "0", ",", "\n", "pitch", "=", "0.3", ",", "\n", "roll", "=", "0", ",", "\n", "upAxisIndex", "=", "2", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "PROJ_MATRIX", "=", "p", ".", "computeProjectionMatrixFOV", "(", "fov", "=", "60", ",", "\n", "aspect", "=", "float", "(", "self", ".", "RENDER_WIDTH", ")", "/", "self", ".", "RENDER_HEIGHT", ",", "\n", "nearVal", "=", "0.1", ",", "\n", "farVal", "=", "100.0", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "(", "w", ",", "h", ",", "rgb", ",", "_", ",", "_", ")", "=", "p", ".", "getCameraImage", "(", "width", "=", "self", ".", "RENDER_WIDTH", ",", "\n", "height", "=", "self", ".", "RENDER_HEIGHT", ",", "\n", "renderer", "=", "p", ".", "ER_BULLET_HARDWARE_OPENGL", ",", "\n", "viewMatrix", "=", "VIEW_MATRIX", ",", "\n", "projectionMatrix", "=", "PROJ_MATRIX", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Image.fromarray(np.reshape(rgb, (h, w, 4)), 'RGBA').show()", "\n", "", "return", "np", ".", "reshape", "(", "rgb", ",", "(", "h", ",", "w", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close": [[388, 395], ["pybullet.disconnect"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clean up the environment and PyBullet connection.\n\n        \"\"\"", "\n", "if", "self", ".", "PYB_CLIENT", ">=", "0", ":", "\n", "            ", "p", ".", "disconnect", "(", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "", "self", ".", "PYB_CLIENT", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._setup_symbolic": [[396, 430], ["casadi.MX.sym", "casadi.MX.sym", "casadi.MX.sym", "casadi.MX.sym", "casadi.vertcat", "casadi.MX.sym", "casadi.vertcat", "casadi.vertcat", "casadi.MX.sym", "casadi.MX.sym", "casadi.MX.sym", "casadi.MX.sym", "safe_control_gym.math_and_models.symbolic_systems.SymbolicModel", "casadi.sin", "casadi.sin", "casadi.cos", "casadi.cos", "casadi.cos"], "methods", ["None"], ["", "def", "_setup_symbolic", "(", "self", ")", ":", "\n", "        ", "\"\"\"Creates symbolic (CasADi) models for dynamics, observation, and cost.\n\n        \"\"\"", "\n", "l", ",", "m", ",", "M", "=", "self", ".", "PRIOR_EFFECTIVE_POLE_LENGTH", ",", "self", ".", "PRIOR_POLE_MASS", ",", "self", ".", "PRIOR_CART_MASS", "\n", "Mm", ",", "ml", "=", "m", "+", "M", ",", "m", "*", "l", "\n", "g", "=", "self", ".", "GRAVITY_ACC", "\n", "dt", "=", "self", ".", "CTRL_TIMESTEP", "\n", "# Input variables.", "\n", "x", "=", "cs", ".", "MX", ".", "sym", "(", "'x'", ")", "\n", "x_dot", "=", "cs", ".", "MX", ".", "sym", "(", "'x_dot'", ")", "\n", "theta", "=", "cs", ".", "MX", ".", "sym", "(", "'theta'", ")", "\n", "theta_dot", "=", "cs", ".", "MX", ".", "sym", "(", "'theta_dot'", ")", "\n", "X", "=", "cs", ".", "vertcat", "(", "x", ",", "x_dot", ",", "theta", ",", "theta_dot", ")", "\n", "U", "=", "cs", ".", "MX", ".", "sym", "(", "'U'", ")", "\n", "nx", "=", "4", "\n", "nu", "=", "1", "\n", "# Dynamics.", "\n", "temp_factor", "=", "(", "U", "+", "ml", "*", "theta_dot", "**", "2", "*", "cs", ".", "sin", "(", "theta", ")", ")", "/", "Mm", "\n", "theta_dot_dot", "=", "(", "(", "g", "*", "cs", ".", "sin", "(", "theta", ")", "-", "cs", ".", "cos", "(", "theta", ")", "*", "temp_factor", ")", "/", "(", "l", "*", "(", "4.0", "/", "3.0", "-", "m", "*", "cs", ".", "cos", "(", "theta", ")", "**", "2", "/", "Mm", ")", ")", ")", "\n", "X_dot", "=", "cs", ".", "vertcat", "(", "x_dot", ",", "temp_factor", "-", "ml", "*", "theta_dot_dot", "*", "cs", ".", "cos", "(", "theta", ")", "/", "Mm", ",", "theta_dot", ",", "theta_dot_dot", ")", "\n", "# Observation.", "\n", "Y", "=", "cs", ".", "vertcat", "(", "x", ",", "x_dot", ",", "theta", ",", "theta_dot", ")", "\n", "# Define cost (quadratic form).", "\n", "Q", "=", "cs", ".", "MX", ".", "sym", "(", "'Q'", ",", "nx", ",", "nx", ")", "\n", "R", "=", "cs", ".", "MX", ".", "sym", "(", "'R'", ",", "nu", ",", "nu", ")", "\n", "Xr", "=", "cs", ".", "MX", ".", "sym", "(", "'Xr'", ",", "nx", ",", "1", ")", "\n", "Ur", "=", "cs", ".", "MX", ".", "sym", "(", "'Ur'", ",", "nu", ",", "1", ")", "\n", "cost_func", "=", "0.5", "*", "(", "X", "-", "Xr", ")", ".", "T", "@", "Q", "@", "(", "X", "-", "Xr", ")", "+", "0.5", "*", "(", "U", "-", "Ur", ")", ".", "T", "@", "R", "@", "(", "U", "-", "Ur", ")", "\n", "# Define dynamics and cost dictionaries.", "\n", "dynamics", "=", "{", "\"dyn_eqn\"", ":", "X_dot", ",", "\"obs_eqn\"", ":", "Y", ",", "\"vars\"", ":", "{", "\"X\"", ":", "X", ",", "\"U\"", ":", "U", "}", "}", "\n", "cost", "=", "{", "\"cost_func\"", ":", "cost_func", ",", "\"vars\"", ":", "{", "\"X\"", ":", "X", ",", "\"U\"", ":", "U", ",", "\"Xr\"", ":", "Xr", ",", "\"Ur\"", ":", "Ur", ",", "\"Q\"", ":", "Q", ",", "\"R\"", ":", "R", "}", "}", "\n", "# Setup symbolic model.", "\n", "self", ".", "symbolic", "=", "SymbolicModel", "(", "dynamics", "=", "dynamics", ",", "cost", "=", "cost", ",", "dt", "=", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._set_action_space": [[431, 441], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_set_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the action space of the environment.\n\n        \"\"\"", "\n", "self", ".", "action_scale", "=", "10", "\n", "self", ".", "action_threshold", "=", "1", "if", "self", ".", "NORMALIZED_RL_ACTION_SPACE", "else", "self", ".", "action_scale", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "self", ".", "action_threshold", ",", "high", "=", "self", ".", "action_threshold", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "# Define action/input labels and units.", "\n", "self", ".", "ACTION_LABELS", "=", "[", "'U'", "]", "\n", "self", ".", "ACTION_UNITS", "=", "[", "'N'", "]", "if", "not", "self", ".", "NORMALIZED_RL_ACTION_SPACE", "else", "[", "'-'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._set_observation_space": [[442, 457], ["numpy.array", "gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_set_observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the observation space of the environment.\n\n        \"\"\"", "\n", "# Angle at which to fail the episode.", "\n", "# Original 0.20943951023931953 rad/12 deg; current 90 deg.", "\n", "self", ".", "theta_threshold_radians", "=", "90", "*", "math", ".", "pi", "/", "180", "\n", "# NOTE: different value in PyBullet gym (0.4) and OpenAI gym (2.4).", "\n", "self", ".", "x_threshold", "=", "2.4", "\n", "# Limit set to 2x: i.e. a failing observation is still within bounds.", "\n", "obs_bound", "=", "np", ".", "array", "(", "[", "self", ".", "x_threshold", "*", "2", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "self", ".", "theta_threshold_radians", "*", "2", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", "]", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "-", "obs_bound", ",", "obs_bound", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# Define obs/state labels and units.", "\n", "self", ".", "STATE_LABELS", "=", "[", "'x'", ",", "'x_dot'", ",", "'theta'", ",", "'theta_dot'", "]", "\n", "self", ".", "STATE_UNITS", "=", "[", "'m'", ",", "'m/s'", ",", "'rad'", ",", "'rad/s'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._preprocess_control": [[458, 483], ["numpy.clip", "print", "cartpole.CartPole.disturbances[].apply", "numpy.array_equal", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.PeriodicNoise.apply"], ["", "def", "_preprocess_control", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Converts the raw action input into the one used by .step().\n\n        Args:\n            action (ndarray): The raw action input.\n\n        Returns:\n            float: The scalar, clipped force to apply to the cart.\n\n        \"\"\"", "\n", "force", "=", "np", ".", "clip", "(", "action", ",", "self", ".", "action_space", ".", "low", ",", "self", ".", "action_space", ".", "high", ")", "\n", "if", "not", "np", ".", "array_equal", "(", "force", ",", "np", ".", "array", "(", "action", ")", ")", "and", "self", ".", "VERBOSE", ":", "\n", "            ", "print", "(", "\"[WARNING]: action was clipped in CartPole._preprocess_control().\"", ")", "\n", "", "if", "self", ".", "NORMALIZED_RL_ACTION_SPACE", ":", "\n", "            ", "force", "=", "self", ".", "action_scale", "*", "force", "\n", "# Apply disturbances.", "\n", "", "if", "\"action\"", "in", "self", ".", "disturbances", ":", "\n", "            ", "force", "=", "self", ".", "disturbances", "[", "\"action\"", "]", ".", "apply", "(", "force", ",", "self", ")", "\n", "", "if", "self", ".", "adversary_disturbance", "==", "\"action\"", "and", "self", ".", "adv_action", "is", "not", "None", ":", "\n", "            ", "force", "=", "force", "+", "self", ".", "adv_action", "\n", "# Save the actual input.", "\n", "", "self", ".", "current_preprocessed_action", "=", "force", "\n", "# Only use the scalar value.", "\n", "force", "=", "force", "[", "0", "]", "\n", "return", "force", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._advance_simulation": [[484, 537], ["range", "numpy.zeros", "cartpole.CartPole.disturbances[].apply", "pybullet.setJointMotorControl2", "pybullet.stepSimulation", "pybullet.applyExternalForce", "float", "float", "numpy.asarray", "numpy.asarray", "pybullet.addUserDebugLine", "pybullet.addUserDebugLine", "pybullet.getLinkState", "pybullet.getLinkState", "numpy.asarray.tolist", "numpy.asarray.tolist"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.PeriodicNoise.apply"], ["", "def", "_advance_simulation", "(", "self", ",", "force", ")", ":", "\n", "        ", "\"\"\"Apply the commanded forces and adversarial actions to the cartpole.\n\n        The PyBullet simulation is stepped PYB_FREQ/CTRL_FREQ times.\n\n        Args:\n            force (float): The force to apply to the slider-to-cart joint.\n\n        \"\"\"", "\n", "tab_force", "=", "None", "\n", "# Determine the disturbance force.", "\n", "passive_disturb", "=", "\"dynamics\"", "in", "self", ".", "disturbances", "\n", "adv_disturb", "=", "self", ".", "adversary_disturbance", "==", "\"dynamics\"", "\n", "if", "passive_disturb", "or", "adv_disturb", ":", "\n", "            ", "tab_force", "=", "np", ".", "zeros", "(", "2", ")", "\n", "", "if", "passive_disturb", ":", "\n", "            ", "tab_force", "=", "self", ".", "disturbances", "[", "\"dynamics\"", "]", ".", "apply", "(", "tab_force", ",", "self", ")", "\n", "", "if", "adv_disturb", "and", "self", ".", "adv_action", "is", "not", "None", ":", "\n", "            ", "tab_force", "=", "tab_force", "+", "self", ".", "adv_action", "\n", "# Clear adversary's action, wait for the next one.", "\n", "self", ".", "adv_action", "=", "None", "\n", "", "for", "_", "in", "range", "(", "self", ".", "PYB_STEPS_PER_CTRL", ")", ":", "\n", "# apply disturbance (by tabbing pole on x-z plane).", "\n", "            ", "if", "tab_force", "is", "not", "None", ":", "\n", "# Convert 2D force to 3D on for PyBullet.", "\n", "                ", "tab_force_3d", "=", "[", "float", "(", "tab_force", "[", "0", "]", ")", ",", "0.0", ",", "float", "(", "tab_force", "[", "1", "]", ")", "]", "\n", "p", ".", "applyExternalForce", "(", "\n", "self", ".", "CARTPOLE_ID", ",", "\n", "linkIndex", "=", "1", ",", "# Pole link.", "\n", "forceObj", "=", "tab_force_3d", ",", "\n", "posObj", "=", "p", ".", "getLinkState", "(", "\n", "self", ".", "CARTPOLE_ID", ",", "\n", "linkIndex", "=", "1", ",", "# Pole link.", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "[", "0", "]", ",", "# exert force on pole center", "\n", "flags", "=", "p", ".", "WORLD_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Debug visualization", "\n", "if", "self", ".", "GUI", ":", "\n", "                    ", "center", "=", "np", ".", "asarray", "(", "p", ".", "getLinkState", "(", "self", ".", "CARTPOLE_ID", ",", "linkIndex", "=", "1", ",", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "[", "0", "]", ")", "\n", "ff", "=", "np", ".", "asarray", "(", "tab_force_3d", ")", "*", "10", "\n", "if", "self", ".", "line", "is", "None", ":", "\n", "                        ", "self", ".", "line", "=", "p", ".", "addUserDebugLine", "(", "center", ".", "tolist", "(", ")", ",", "(", "center", "-", "ff", ")", ".", "tolist", "(", ")", ",", "lineColorRGB", "=", "[", "0", ",", "0", ",", "0", "]", ",", "lineWidth", "=", "1", ")", "\n", "", "else", ":", "\n", "                        ", "p", ".", "addUserDebugLine", "(", "center", ".", "tolist", "(", ")", ",", "(", "center", "-", "ff", ")", ".", "tolist", "(", ")", ",", "lineColorRGB", "=", "[", "0", ",", "0", ",", "0", "]", ",", "lineWidth", "=", "1", ",", "replaceItemUniqueId", "=", "self", ".", "line", ")", "\n", "# Apply control.", "\n", "", "", "", "p", ".", "setJointMotorControl2", "(", "\n", "self", ".", "CARTPOLE_ID", ",", "\n", "jointIndex", "=", "0", ",", "# Slider-to-cart joint.", "\n", "controlMode", "=", "p", ".", "TORQUE_CONTROL", ",", "\n", "force", "=", "force", ",", "\n", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "# Step simulation and counter.", "\n", "p", ".", "stepSimulation", "(", "physicsClientId", "=", "self", ".", "PYB_CLIENT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_observation": [[538, 555], ["copy.deepcopy", "print", "cartpole.CartPole.disturbances[].apply", "safe_control_gym.math_and_models.normalization.normalize_angle", "numpy.array_equal", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.disturbances.PeriodicNoise.apply", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.normalize_angle"], ["", "", "def", "_get_observation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the current observation (state) of the environment.\n\n        Returns:\n            ndarray: The state (x, x_dot, theta, theta_dot) of the cartpole.\n\n        \"\"\"", "\n", "if", "not", "np", ".", "array_equal", "(", "self", ".", "state", ",", "np", ".", "clip", "(", "self", ".", "state", ",", "self", ".", "observation_space", ".", "low", ",", "self", ".", "observation_space", ".", "high", ")", ")", "and", "self", ".", "VERBOSE", ":", "\n", "            ", "print", "(", "\"[WARNING]: observation was clipped in CartPole._get_observation().\"", ")", "\n", "# Apply observation disturbance.", "\n", "", "obs", "=", "deepcopy", "(", "self", ".", "state", ")", "\n", "if", "\"observation\"", "in", "self", ".", "disturbances", ":", "\n", "            ", "obs", "=", "self", ".", "disturbances", "[", "\"observation\"", "]", ".", "apply", "(", "obs", ",", "self", ")", "\n", "# Wrap angle to constrain state space, useful in swing-up task.", "\n", "", "if", "self", ".", "obs_wrap_angle", ":", "\n", "            ", "obs", "[", "2", "]", "=", "normalize_angle", "(", "obs", "[", "2", "]", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_reward": [[556, 601], ["copy.deepcopy", "numpy.asarray", "numpy.clip", "numpy.sum", "numpy.sum", "numpy.exp", "float", "float", "cartpole.CartPole.symbolic.loss", "cartpole.CartPole.symbolic.loss"], "methods", ["None"], ["", "def", "_get_reward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current step's reward value.\n\n        Returns:\n            float: The evaluated reward/cost.\n\n        \"\"\"", "\n", "if", "self", ".", "COST", "==", "Cost", ".", "RL_REWARD", ":", "\n", "# negative quadratic reward with angle wrapped around ", "\n", "            ", "state", "=", "deepcopy", "(", "self", ".", "state", ")", "\n", "# TODO: should use angle wrapping ", "\n", "# TODO: should use `current_preprocessed_action` ", "\n", "# state[2] = normalize_angle(state[2])", "\n", "act", "=", "np", ".", "asarray", "(", "self", ".", "current_raw_input_action", ")", "\n", "act", "=", "np", ".", "clip", "(", "act", ",", "self", ".", "action_space", ".", "low", ",", "self", ".", "action_space", ".", "high", ")", "\n", "# act = np.asarray(self.current_preprocessed_action)", "\n", "dist", "=", "np", ".", "sum", "(", "self", ".", "rew_state_weight", "*", "state", "*", "state", ")", "\n", "dist", "+=", "np", ".", "sum", "(", "self", ".", "rew_act_weight", "*", "act", "*", "act", ")", "\n", "rew", "=", "-", "dist", "\n", "# convert rew to be positive and bounded [0,1]", "\n", "if", "self", ".", "rew_exponential", ":", "\n", "                ", "rew", "=", "np", ".", "exp", "(", "rew", ")", "\n", "", "return", "rew", "\n", "# TODO: legacy code to match paper results ", "\n", "# if self.constraints is not None and self.use_constraint_penalty and self.constraints.is_almost_active(self):", "\n", "#     return self.constraint_penalty", "\n", "# # Constant reward if episode not done (pole stays upright).", "\n", "# return 1.0", "\n", "", "if", "self", ".", "COST", "==", "Cost", ".", "QUADRATIC", ":", "\n", "            ", "if", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", ":", "\n", "                ", "return", "float", "(", "\n", "-", "1", "*", "self", ".", "symbolic", ".", "loss", "(", "x", "=", "self", ".", "state", ",", "\n", "Xr", "=", "self", ".", "X_GOAL", ",", "\n", "u", "=", "self", ".", "current_preprocessed_action", ",", "\n", "Ur", "=", "self", ".", "U_GOAL", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "[", "\"l\"", "]", ")", "\n", "", "if", "self", ".", "TASK", "==", "Task", ".", "TRAJ_TRACKING", ":", "\n", "                ", "return", "float", "(", "\n", "-", "1", "*", "self", ".", "symbolic", ".", "loss", "(", "x", "=", "self", ".", "state", ",", "\n", "Xr", "=", "self", ".", "X_GOAL", "[", "self", ".", "ctrl_step_counter", ",", ":", "]", ",", "\n", "u", "=", "self", ".", "current_preprocessed_action", ",", "\n", "Ur", "=", "self", ".", "U_GOAL", ",", "\n", "Q", "=", "self", ".", "Q", ",", "\n", "R", "=", "self", ".", "R", ")", "[", "\"l\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_done": [[602, 627], ["bool", "numpy.linalg.norm"], "methods", ["None"], ["", "", "", "def", "_get_done", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the conditions for termination of an episode.\n\n        Returns:\n            bool: Whether an episode is over.\n\n        \"\"\"", "\n", "# Done if goal reached for stabilization task with quadratic cost.", "\n", "if", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", "and", "self", ".", "COST", "==", "Cost", ".", "QUADRATIC", ":", "\n", "            ", "self", ".", "goal_reached", "=", "bool", "(", "np", ".", "linalg", ".", "norm", "(", "self", ".", "state", "-", "self", ".", "X_GOAL", ")", "<", "self", ".", "TASK_INFO", "[", "\"stabilization_goal_tolerance\"", "]", ")", "\n", "if", "self", ".", "goal_reached", ":", "\n", "                ", "return", "True", "\n", "# # Done if the episode length is exceeded.", "\n", "# if (self.ctrl_step_counter + 1) / self.CTRL_FREQ >= self.EPISODE_LEN_SEC:", "\n", "#     return True", "\n", "# # Done if a constraint is violated.", "\n", "# if self.constraints is not None:", "\n", "#     if self.DONE_ON_VIOLATION and self.constraints.is_violated(self):", "\n", "#         return True", "\n", "# Done if state is out-of-bounds.", "\n", "", "", "if", "self", ".", "done_on_out_of_bound", ":", "\n", "            ", "x", ",", "_", ",", "theta", ",", "_", "=", "self", ".", "state", "\n", "if", "x", "<", "-", "self", ".", "x_threshold", "or", "x", ">", "self", ".", "x_threshold", "or", "theta", "<", "-", "self", ".", "theta_threshold_radians", "or", "theta", ">", "self", ".", "theta_threshold_radians", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_info": [[628, 653], ["copy.deepcopy", "numpy.sum"], "methods", ["None"], ["", "def", "_get_info", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generates the info dictionary returned by every call to .step().\n\n        Returns:\n            dict: A dictionary with information about the constraints evaluations and violations.\n\n        \"\"\"", "\n", "info", "=", "{", "}", "\n", "if", "self", ".", "TASK", "==", "Task", ".", "STABILIZATION", "and", "self", ".", "COST", "==", "Cost", ".", "QUADRATIC", ":", "\n", "            ", "info", "[", "\"goal_reached\"", "]", "=", "self", ".", "goal_reached", "# Add boolean flag for the goal being reached.", "\n", "# if self.constraints is not None:", "\n", "#     info[\"constraint_values\"] = self.constraints.get_values(self)", "\n", "#     violation = np.any(np.greater(info[\"constraint_values\"], 0.))", "\n", "#     info[\"constraint_violation\"] = int(violation)", "\n", "# if self.pyb_step_counter / self.PYB_FREQ >= self.EPISODE_LEN_SEC:", "\n", "#     x, _, theta, _ = self.state", "\n", "#     done = bool(x < -self.x_threshold or x > self.x_threshold or theta < -self.theta_threshold_radians or theta > self.theta_threshold_radians)", "\n", "#     if self.constraints is not None:", "\n", "#         if self.DONE_ON_VIOLATION and self.constraints.is_violated(self):", "\n", "#             done = True", "\n", "#     info['TimeLimit.truncated'] = not done", "\n", "# Add MSE.", "\n", "", "state", "=", "deepcopy", "(", "self", ".", "state", ")", "\n", "info", "[", "\"mse\"", "]", "=", "np", ".", "sum", "(", "state", "**", "2", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._get_reset_info": [[654, 675], ["cartpole.CartPole.constraints.get_all_symbolic_models", "cartpole.CartPole.constraints.get_values"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_all_symbolic_models", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.envs.constraints.ConstraintList.get_values"], ["", "def", "_get_reset_info", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generates the info dictionary returned by every call to .reset().\n\n        Returns:\n            dict: A dictionary with information about the dynamics and constraints symbolic models.\n\n        \"\"\"", "\n", "info", "=", "{", "}", "\n", "info", "[", "\"symbolic_model\"", "]", "=", "self", ".", "symbolic", "\n", "info", "[", "\"physical_parameters\"", "]", "=", "{", "\n", "\"pole_effective_length\"", ":", "self", ".", "PRIOR_EFFECTIVE_POLE_LENGTH", ",", "\n", "\"pole_mass\"", ":", "self", ".", "PRIOR_POLE_MASS", ",", "\n", "\"cart_mass\"", ":", "self", ".", "PRIOR_CART_MASS", "\n", "}", "\n", "info", "[", "\"x_reference\"", "]", "=", "self", ".", "X_GOAL", "\n", "info", "[", "\"u_reference\"", "]", "=", "self", ".", "U_GOAL", "\n", "if", "self", ".", "constraints", "is", "not", "None", ":", "\n", "            ", "info", "[", "\"symbolic_constraints\"", "]", "=", "self", ".", "constraints", ".", "get_all_symbolic_models", "(", ")", "\n", "# NOTE: Cannot evaluate constraints on reset/without inputs.", "\n", "info", "[", "\"constraint_values\"", "]", "=", "self", ".", "constraints", ".", "get_values", "(", "self", ",", "only_state", "=", "True", ")", "# Fix for input constraints only", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._parse_urdf_parameters": [[676, 693], ["xml.parse().getroot", "float", "float", "float", "xml.parse", "[].attrib[].split"], "methods", ["None"], ["", "def", "_parse_urdf_parameters", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "\"\"\"Parses an URDF file for the robot's properties.\n\n        Args:\n            file_name (str, optional): The .urdf file from which the properties should be pased.\n\n        Returns:\n            float: The effective pole length.\n            float: The pole mass.\n            float: The cart mass.\n\n        \"\"\"", "\n", "URDF_TREE", "=", "(", "etxml", ".", "parse", "(", "file_name", ")", ")", ".", "getroot", "(", ")", "\n", "EFFECTIVE_POLE_LENGTH", "=", "0.5", "*", "float", "(", "URDF_TREE", "[", "3", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "attrib", "[", "\"size\"", "]", ".", "split", "(", "\" \"", ")", "[", "-", "1", "]", ")", "# Note: HALF length of pole.", "\n", "POLE_MASS", "=", "float", "(", "URDF_TREE", "[", "3", "]", "[", "1", "]", "[", "1", "]", ".", "attrib", "[", "\"value\"", "]", ")", "\n", "CART_MASS", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "2", "]", "[", "0", "]", ".", "attrib", "[", "\"value\"", "]", ")", "\n", "return", "EFFECTIVE_POLE_LENGTH", ",", "POLE_MASS", ",", "CART_MASS", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole._create_urdf": [[694, 735], ["xml.parse", "xml.parse.getroot", "str", "str", "str", "out.split", "str", "out.split", "str", "out.split", "str", "out.split", "str", "out.split", "str"], "methods", ["None"], ["", "def", "_create_urdf", "(", "self", ",", "file_name", ",", "length", "=", "None", ",", "inertia", "=", "None", ")", ":", "\n", "        ", "\"\"\"For domain randomization.\n        \n        Args:\n            file_name (str): path to the base URDF with attributes to modify.\n            length (float): overriden effective pole length. \n            inertia (float): pole inertia (symmetric, Ixx & Iyy).\n            \n        Returns:\n            xml tree object.\n            \n        \"\"\"", "\n", "tree", "=", "etxml", ".", "parse", "(", "file_name", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "# Overwrite pod length.", "\n", "if", "length", "is", "not", "None", ":", "\n", "# Pole visual geometry box.", "\n", "            ", "out", "=", "root", "[", "3", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "attrib", "[", "\"size\"", "]", "\n", "out", "=", "\" \"", ".", "join", "(", "out", ".", "split", "(", "\" \"", ")", "[", ":", "-", "1", "]", "+", "[", "str", "(", "2", "*", "length", ")", "]", ")", "\n", "root", "[", "3", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "attrib", "[", "\"size\"", "]", "=", "out", "\n", "# Pole visual origin.", "\n", "out", "=", "root", "[", "3", "]", "[", "0", "]", "[", "1", "]", ".", "attrib", "[", "\"xyz\"", "]", "\n", "out", "=", "\" \"", ".", "join", "(", "out", ".", "split", "(", "\" \"", ")", "[", ":", "-", "1", "]", "+", "[", "str", "(", "length", ")", "]", ")", "\n", "root", "[", "3", "]", "[", "0", "]", "[", "1", "]", ".", "attrib", "[", "\"xyz\"", "]", "=", "out", "\n", "# Pole inertial origin.", "\n", "out", "=", "root", "[", "3", "]", "[", "1", "]", "[", "0", "]", ".", "attrib", "[", "\"xyz\"", "]", "\n", "out", "=", "\" \"", ".", "join", "(", "out", ".", "split", "(", "\" \"", ")", "[", ":", "-", "1", "]", "+", "[", "str", "(", "length", ")", "]", ")", "\n", "root", "[", "3", "]", "[", "1", "]", "[", "0", "]", ".", "attrib", "[", "\"xyz\"", "]", "=", "out", "\n", "# Pole inertia.", "\n", "root", "[", "3", "]", "[", "1", "]", "[", "2", "]", ".", "attrib", "[", "\"ixx\"", "]", "=", "str", "(", "inertia", ")", "\n", "root", "[", "3", "]", "[", "1", "]", "[", "2", "]", ".", "attrib", "[", "\"iyy\"", "]", "=", "str", "(", "inertia", ")", "\n", "root", "[", "3", "]", "[", "1", "]", "[", "2", "]", ".", "attrib", "[", "\"izz\"", "]", "=", "str", "(", "0.0", ")", "\n", "# Pole collision geometry box.", "\n", "out", "=", "root", "[", "3", "]", "[", "2", "]", "[", "0", "]", "[", "0", "]", ".", "attrib", "[", "\"size\"", "]", "\n", "out", "=", "\" \"", ".", "join", "(", "out", ".", "split", "(", "\" \"", ")", "[", ":", "-", "1", "]", "+", "[", "str", "(", "2", "*", "length", ")", "]", ")", "\n", "root", "[", "3", "]", "[", "2", "]", "[", "0", "]", "[", "0", "]", ".", "attrib", "[", "\"size\"", "]", "=", "out", "\n", "# Pole collision origin.", "\n", "out", "=", "root", "[", "3", "]", "[", "2", "]", "[", "1", "]", ".", "attrib", "[", "\"xyz\"", "]", "\n", "out", "=", "\" \"", ".", "join", "(", "out", ".", "split", "(", "\" \"", ")", "[", ":", "-", "1", "]", "+", "[", "str", "(", "length", ")", "]", ")", "\n", "root", "[", "3", "]", "[", "2", "]", "[", "1", "]", ".", "attrib", "[", "\"xyz\"", "]", "=", "out", "\n", "", "return", "tree", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.__init__": [[27, 38], ["numpy.zeros", "numpy.ones"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "1e-4", ",", "shape", "=", "(", ")", ")", ":", "\n", "        ", "\"\"\"Initializes containers for data mean and variance. \n        \n        Args:\n            epsilon (float): helps with arithmetic issues.\n            shape (tuple): the shape of the data stream's output.\n\n        \"\"\"", "\n", "self", ".", "mean", "=", "np", ".", "zeros", "(", "shape", ",", "np", ".", "float64", ")", "\n", "self", ".", "var", "=", "np", ".", "ones", "(", "shape", ",", "np", ".", "float64", ")", "\n", "self", ".", "count", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update": [[39, 50], ["numpy.mean", "numpy.var", "normalization.RunningMeanStd.update_from_moments"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update_from_moments"], ["", "def", "update", "(", "self", ",", "arr", ")", ":", "\n", "        ", "\"\"\"Update current stats with a new stream of data.\n\n        Args:\n            arr (np.array): 1D array of data, (batch_size, *shape).\n\n        \"\"\"", "\n", "batch_mean", "=", "np", ".", "mean", "(", "arr", ",", "axis", "=", "0", ")", "\n", "batch_var", "=", "np", ".", "var", "(", "arr", ",", "axis", "=", "0", ")", "\n", "batch_count", "=", "arr", ".", "shape", "[", "0", "]", "\n", "self", ".", "update_from_moments", "(", "batch_mean", ",", "batch_var", ",", "batch_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update_from_moments": [[51, 66], ["numpy.square"], "methods", ["None"], ["", "def", "update_from_moments", "(", "self", ",", "batch_mean", ",", "batch_var", ",", "batch_count", ")", ":", "\n", "        ", "\"\"\"Util function for `update` method.\n\n        \"\"\"", "\n", "delta", "=", "batch_mean", "-", "self", ".", "mean", "\n", "tot_count", "=", "self", ".", "count", "+", "batch_count", "\n", "new_mean", "=", "self", ".", "mean", "+", "delta", "*", "batch_count", "/", "tot_count", "\n", "m_a", "=", "self", ".", "var", "*", "self", ".", "count", "\n", "m_b", "=", "batch_var", "*", "batch_count", "\n", "m_2", "=", "m_a", "+", "m_b", "+", "np", ".", "square", "(", "delta", ")", "*", "self", ".", "count", "*", "batch_count", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "new_var", "=", "m_2", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "new_count", "=", "batch_count", "+", "self", ".", "count", "\n", "self", ".", "mean", "=", "new_mean", "\n", "self", ".", "var", "=", "new_var", "\n", "self", ".", "count", "=", "new_count", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.__init__": [[76, 78], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "read_only", "=", "False", ")", ":", "\n", "        ", "self", ".", "read_only", "=", "read_only", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.set_read_only": [[79, 81], ["None"], "methods", ["None"], ["", "def", "set_read_only", "(", "self", ")", ":", "\n", "        ", "self", ".", "read_only", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.unset_read_only": [[82, 84], ["None"], "methods", ["None"], ["", "def", "unset_read_only", "(", "self", ")", ":", "\n", "        ", "self", ".", "read_only", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.__call__": [[85, 90], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Invokes normalization on the given input.\n\n        \"\"\"", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.state_dict": [[91, 96], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns snapshot of current stats.\n\n        \"\"\"", "\n", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.BaseNormalizer.load_state_dict": [[97, 102], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "_", ")", ":", "\n", "        ", "\"\"\"Restores the stats from a snapshot.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.__init__": [[109, 124], ["normalization.BaseNormalizer.__init__", "normalization.RunningMeanStd"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "shape", "=", "(", ")", ",", "read_only", "=", "False", ",", "clip", "=", "10.0", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"Initializes the data stream tracker. \n\n        Args:\n            shape (tuple): shape of data being tracked.\n            read_only (bool): if to freeze the tracker.\n            clip (float): bounds on the data. \n            epsilon (float): offset to provide divide-by-zero.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "read_only", ")", "\n", "self", ".", "read_only", "=", "read_only", "\n", "self", ".", "rms", "=", "RunningMeanStd", "(", "shape", "=", "shape", ")", "\n", "self", ".", "clip", "=", "clip", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.__call__": [[125, 135], ["numpy.asarray", "numpy.clip", "normalization.MeanStdNormalizer.rms.update", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Update tracker given data, optionally normalize the data.\n\n        \"\"\"", "\n", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "if", "not", "self", ".", "read_only", ":", "\n", "            ", "self", ".", "rms", ".", "update", "(", "x", ")", "\n", "", "return", "np", ".", "clip", "(", "\n", "(", "x", "-", "self", ".", "rms", ".", "mean", ")", "/", "np", ".", "sqrt", "(", "self", ".", "rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "\n", "-", "self", ".", "clip", ",", "self", ".", "clip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.state_dict": [[136, 138], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "'mean'", ":", "self", ".", "rms", ".", "mean", ",", "'var'", ":", "self", ".", "rms", ".", "var", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.MeanStdNormalizer.load_state_dict": [[139, 142], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "saved", ")", ":", "\n", "        ", "self", ".", "rms", ".", "mean", "=", "saved", "[", "'mean'", "]", "\n", "self", ".", "rms", ".", "var", "=", "saved", "[", "'var'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RewardStdNormalizer.__init__": [[156, 170], ["normalization.MeanStdNormalizer.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "gamma", "=", "0.99", ",", "read_only", "=", "False", ",", "clip", "=", "10.0", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"Initializes the data stream tracker. \n        \n        Args:\n            gamma (float): discount factor for rewards.\n            read_only (bool): if to freeze the tracker.\n            clip (float): bounds on the data. \n            epsilon (float): offset to provide divide-by-zero.\n\n        \"\"\"", "\n", "# Reward has default shape (1,) or just ().", "\n", "super", "(", ")", ".", "__init__", "(", "(", ")", ",", "read_only", ",", "clip", ",", "epsilon", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "ret", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RewardStdNormalizer.__call__": [[171, 185], ["numpy.asarray", "numpy.clip", "normalization.RewardStdNormalizer.rms.update", "numpy.zeros", "numpy.sqrt", "dones.astype"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RunningMeanStd.update"], ["", "def", "__call__", "(", "self", ",", "x", ",", "dones", ")", ":", "\n", "        ", "\"\"\"Update tracker given reward, optionally normalize the reward (only scaling).\n\n        \"\"\"", "\n", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "if", "not", "self", ".", "read_only", ":", "\n", "# Track running average of forward discounted returns.", "\n", "            ", "if", "self", ".", "ret", "is", "None", ":", "\n", "                ", "self", ".", "ret", "=", "np", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "", "self", ".", "ret", "=", "self", ".", "ret", "*", "self", ".", "gamma", "+", "x", "\n", "self", ".", "rms", ".", "update", "(", "self", ".", "ret", ")", "\n", "# Prevent information leak from previous episodes.", "\n", "self", ".", "ret", "[", "dones", ".", "astype", "(", "np", ".", "long", ")", "]", "=", "0", "\n", "", "return", "np", ".", "clip", "(", "x", "/", "np", ".", "sqrt", "(", "self", ".", "rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "-", "self", ".", "clip", ",", "self", ".", "clip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RescaleNormalizer.__init__": [[192, 201], ["normalization.BaseNormalizer.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "coef", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Initializes with fixed scaling constant.\n\n        Args:\n            coef (float): scaling coefficient.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "self", ")", "\n", "self", ".", "coef", "=", "coef", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.RescaleNormalizer.__call__": [[202, 209], ["isinstance", "numpy.asarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Scale the input.\n\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "", "return", "self", ".", "coef", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.ImageNormalizer.__init__": [[216, 218], ["normalization.RescaleNormalizer.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "self", ",", "1.0", "/", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.ActionUnnormalizer.__init__": [[225, 234], ["normalization.BaseNormalizer.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "action_space", ")", ":", "\n", "        ", "\"\"\"Defines the mean and std for the bounded action space.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "action_space", ",", "Box", ")", ",", "\"action space must be gym.spaces.Box\"", "\n", "low", ",", "high", "=", "action_space", ".", "low", ",", "action_space", ".", "high", "\n", "self", ".", "mean", "=", "(", "low", "+", "high", ")", "/", "2.0", "\n", "self", ".", "std", "=", "(", "high", "-", "low", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.ActionUnnormalizer.__call__": [[235, 241], ["numpy.asarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Unnormalizes given input action.\n\n        \"\"\"", "\n", "x", "=", "np", ".", "asarray", "(", "action", ")", "\n", "return", "self", ".", "mean", "+", "x", "*", "self", ".", "std", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.normalization.normalize_angle": [[10, 15], ["None"], "function", ["None"], ["def", "normalize_angle", "(", "x", ")", ":", "\n", "    ", "\"\"\"Wraps input angle to [-pi, pi].\n\n    \"\"\"", "\n", "return", "(", "(", "x", "+", "np", ".", "pi", ")", "%", "(", "2", "*", "np", ".", "pi", ")", ")", "-", "np", ".", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.MLP.__init__": [[31, 59], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "neural_networks.get_activation", "neural_networks.get_activation", "init_func", "torch.Linear", "torch.Linear", "torch.Linear", "range", "len"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.get_activation", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.get_activation"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "hidden_dims", "=", "[", "]", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "output_act", "=", "None", ",", "\n", "init_weights", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Multi-layer perception/fully-connected network.\n\n        Args:\n            input_dim (int): input dimension.\n            output_dim (int): output dimension.\n            hidden_dims (list): hidden layer dimensions.\n            act (str): hidden layer activation.\n            output_act (str): output layer activation.\n\n        \"\"\"", "\n", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dims", "=", "[", "input_dim", "]", "+", "hidden_dims", "+", "[", "output_dim", "]", "\n", "init_func", "=", "init_", "if", "init_weights", "else", "lambda", "x", ":", "x", "\n", "self", ".", "fcs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "init_func", "(", "nn", ".", "Linear", "(", "dims", "[", "i", "]", ",", "dims", "[", "i", "+", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", "-", "1", ")", "\n", "]", ")", "\n", "self", ".", "act", "=", "get_activation", "(", "act", ")", "\n", "self", ".", "output_act", "=", "get_activation", "(", "output_act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.MLP.forward": [[60, 69], ["neural_networks.MLP.output_act", "neural_networks.MLP.act", "fc"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "out", "=", "x", "\n", "for", "fc", "in", "self", ".", "fcs", "[", ":", "-", "1", "]", ":", "\n", "            ", "out", "=", "self", ".", "act", "(", "fc", "(", "out", ")", ")", "\n", "", "out", "=", "self", ".", "output_act", "(", "self", ".", "fcs", "[", "-", "1", "]", "(", "out", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.CNN.__init__": [[76, 96], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "neural_networks.init_", "neural_networks.get_activation", "neural_networks.get_activation", "torch.Linear", "torch.Linear", "torch.Linear", "neural_networks.init_", "neural_networks.init_", "neural_networks.init_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.init_", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.get_activation", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.get_activation", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.init_", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.init_", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.init_"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "output_act", "=", "\"relu\"", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "input_dim", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ")", ",", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ")", ",", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "stride", "=", "1", ")", ")", "\n", "]", ")", "\n", "conv_out_dim", "=", "32", "*", "7", "*", "7", "\n", "self", ".", "fc", "=", "init_", "(", "nn", ".", "Linear", "(", "conv_out_dim", ",", "output_dim", ")", ")", "\n", "self", ".", "act", "=", "get_activation", "(", "act", ")", "\n", "self", ".", "output_act", "=", "get_activation", "(", "output_act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.CNN.forward": [[97, 107], ["neural_networks.CNN.output_act", "neural_networks.CNN.act", "neural_networks.CNN.fc", "conv", "neural_networks.CNN.view"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac_utils.MLPActorCritic.act"], ["", "def", "forward", "(", "self", ",", "x", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "out", "=", "x", "/", "255.0", "if", "normalize", "else", "x", "\n", "N", "=", "x", ".", "shape", "[", "0", "]", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "out", "=", "self", ".", "act", "(", "conv", "(", "out", ")", ")", "\n", "", "out", "=", "self", ".", "output_act", "(", "self", ".", "fc", "(", "out", ".", "view", "(", "N", ",", "-", "1", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.RNN.__init__": [[114, 129], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU", "neural_networks.RNN.gru.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "super", "(", "RNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "input_dim", ",", "output_dim", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "gru", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.RNN.forward": [[130, 169], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "hxs.squeeze.squeeze.size", "neural_networks.RNN.gru", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "hxs.squeeze.squeeze.squeeze", "has_zeros.squeeze().cpu.squeeze().cpu.squeeze().cpu", "hxs.squeeze.squeeze.unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hxs.squeeze.squeeze.squeeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "has_zeros.squeeze().cpu.squeeze().cpu.dim", "neural_networks.RNN.gru", "outputs.append", "has_zeros.squeeze().cpu.squeeze().cpu.squeeze", "len", "has_zeros.squeeze().cpu.squeeze().cpu.item", "masks.squeeze"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "hxs", ",", "masks", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "if", "x", ".", "size", "(", "0", ")", "==", "hxs", ".", "size", "(", "0", ")", ":", "\n", "# Forward one step, x, hxs, masks: (N, *).", "\n", "            ", "x", ",", "hxs", "=", "self", ".", "gru", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "(", "hxs", "*", "masks", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# x, hxs: (N, *).", "\n", "x", "=", "x", ".", "squeeze", "(", "0", ")", "\n", "hxs", "=", "hxs", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "# Forward a sequence, x, masks: (T, N, *), hxs: (N, *).", "\n", "            ", "T", ",", "N", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "# Let's figure out which steps in the sequence have a zero for any agent.", "\n", "# We will always assume t=0 has a zero in it as that makes the logic cleaner.", "\n", "has_zeros", "=", "(", "masks", ".", "squeeze", "(", "-", "1", ")", "[", "1", ":", "]", "==", "0.0", ")", ".", "any", "(", "dim", "=", "-", "1", ")", ".", "nonzero", "(", ")", "\n", "has_zeros", "=", "has_zeros", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "\n", "# +1 to correct the masks[1:]", "\n", "if", "has_zeros", ".", "dim", "(", ")", "==", "0", ":", "\n", "# Deal with scalar.", "\n", "                ", "has_zeros", "=", "[", "has_zeros", ".", "item", "(", ")", "+", "1", "]", "\n", "", "else", ":", "\n", "                ", "has_zeros", "=", "(", "has_zeros", "+", "1", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "# Add t=0 and t=T to the list.", "\n", "", "has_zeros", "=", "[", "0", "]", "+", "has_zeros", "+", "[", "T", "]", "\n", "# Run gru in masked segments, faster.", "\n", "hxs", "=", "hxs", ".", "unsqueeze", "(", "0", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "has_zeros", ")", "-", "1", ")", ":", "\n", "# We can now process steps that don't have any zeros in masks together!", "\n", "                ", "start_idx", "=", "has_zeros", "[", "i", "]", "\n", "end_idx", "=", "has_zeros", "[", "i", "+", "1", "]", "\n", "rnn_scores", ",", "hxs", "=", "self", ".", "gru", "(", "\n", "x", "[", "start_idx", ":", "end_idx", "]", ",", "(", "hxs", "*", "masks", "[", "start_idx", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "outputs", ".", "append", "(", "rnn_scores", ")", "\n", "# x: (T, N, *), hxs: (N, *).", "\n", "", "x", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "hxs", "=", "hxs", ".", "squeeze", "(", "0", ")", "\n", "", "return", "x", ",", "hxs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.get_activation": [[10, 15], ["getattr"], "function", ["None"], ["def", "get_activation", "(", "name", ")", ":", "\n", "    ", "\"\"\"\n\n    \"\"\"", "\n", "return", "getattr", "(", "F", ",", "name", ")", "if", "name", "else", "lambda", "x", ":", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.neural_networks.init_": [[17, 24], ["torch.init.orthogonal_", "torch.init.constant_"], "function", ["None"], ["", "def", "init_", "(", "module", ")", ":", "\n", "    ", "\"\"\"\n\n    \"\"\"", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "module", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ".", "data", ",", "0", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Normal.log_prob": [[14, 25], ["super().log_prob().sum", "super().log_prob"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.log_prob"], ["def", "log_prob", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\"Log probability of actions given current distribution.\n\n        Args:\n            actions (torch.FloatTensor): shape (batch, *).\n\n        Returns:\n            (torch.FloatTensor): shape (batch, 1).\n\n        \"\"\"", "\n", "return", "super", "(", ")", ".", "log_prob", "(", "actions", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Normal.entropy": [[26, 34], ["super().entropy().sum", "super().entropy"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Normal.entropy"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "\"\"\"Entropy of current distribution.\n\n        Returns:\n            (torch.FloatTensor): shape (batch,).\n\n        \"\"\"", "\n", "return", "super", "(", ")", ".", "entropy", "(", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Normal.mode": [[35, 40], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Mode (max probability point) of current distribution.\n\n        \"\"\"", "\n", "return", "self", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample": [[47, 55], ["super().sample().unsqueeze", "super().sample"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample"], ["def", "sample", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sample from the current distribution.\n\n        Returns:\n            (torch.FloatTensor): shape (batch, 1).\n\n        \"\"\"", "\n", "return", "super", "(", ")", ".", "sample", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.log_prob": [[56, 67], ["super().log_prob().view().sum().unsqueeze", "super().log_prob().view().sum", "super().log_prob().view", "actions.size", "super().log_prob", "actions.squeeze"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.log_prob"], ["", "def", "log_prob", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\"Log probability of actions given current distribution.\n\n        Args:\n            actions (torch.FloatTensor): shape (batch, *).\n\n        Returns:\n            (torch.FloatTensor): shape (batch, 1).\n\n        \"\"\"", "\n", "return", "(", "super", "(", ")", ".", "log_prob", "(", "actions", ".", "squeeze", "(", "-", "1", ")", ")", ".", "view", "(", "actions", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.mode": [[68, 73], ["distributions.Categorical.probs.argmax"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Mode (max probability point) of current distribution.\n\n        \"\"\"", "\n", "return", "self", ".", "probs", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.__init__": [[21, 62], ["print", "symbolic_systems.SymbolicModel.setup_model", "symbolic_systems.SymbolicModel.setup_linearization", "funcs.items"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.setup_model", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.setup_linearization"], ["def", "__init__", "(", "self", ",", "\n", "dynamics", ",", "\n", "cost", ",", "\n", "dt", "=", "1e-3", ",", "\n", "integration_algo", "=", "'cvodes'", ",", "\n", "funcs", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "# Setup for dynamics.", "\n", "self", ".", "x_sym", "=", "dynamics", "[", "\"vars\"", "]", "[", "\"X\"", "]", "\n", "self", ".", "u_sym", "=", "dynamics", "[", "\"vars\"", "]", "[", "\"U\"", "]", "\n", "self", ".", "x_dot", "=", "dynamics", "[", "\"dyn_eqn\"", "]", "\n", "if", "dynamics", "[", "\"obs_eqn\"", "]", "is", "None", ":", "\n", "            ", "self", ".", "y_sym", "=", "self", ".", "x_sym", "\n", "", "else", ":", "\n", "            ", "self", ".", "y_sym", "=", "dynamics", "[", "\"obs_eqn\"", "]", "\n", "# Sampling time.", "\n", "", "self", ".", "dt", "=", "dt", "\n", "# Integration algorithm.", "\n", "self", ".", "integration_algo", "=", "integration_algo", "\n", "# Other symbolic functions.", "\n", "if", "funcs", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "func", "in", "funcs", ".", "items", "(", ")", ":", "\n", "                ", "assert", "name", "not", "in", "self", ".", "__dict__", "\n", "self", ".", "__dict__", "[", "name", "]", "=", "func", "\n", "# Variable dimensions.", "\n", "", "", "self", ".", "nx", "=", "self", ".", "x_sym", ".", "shape", "[", "0", "]", "\n", "self", ".", "nu", "=", "self", ".", "u_sym", ".", "shape", "[", "0", "]", "\n", "self", ".", "ny", "=", "self", ".", "y_sym", ".", "shape", "[", "0", "]", "\n", "# Setup cost function.", "\n", "self", ".", "cost_func", "=", "cost", "[", "\"cost_func\"", "]", "\n", "print", "(", "self", ".", "cost_func", ")", "\n", "self", ".", "Q", "=", "cost", "[", "\"vars\"", "]", "[", "\"Q\"", "]", "\n", "self", ".", "R", "=", "cost", "[", "\"vars\"", "]", "[", "\"R\"", "]", "\n", "self", ".", "Xr", "=", "cost", "[", "\"vars\"", "]", "[", "\"Xr\"", "]", "\n", "self", ".", "Ur", "=", "cost", "[", "\"vars\"", "]", "[", "\"Ur\"", "]", "\n", "# Setup symbolic model.", "\n", "self", ".", "setup_model", "(", ")", "\n", "# Setup Jacobian and Hessian of the dynamics and cost functions.", "\n", "self", ".", "setup_linearization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.setup_model": [[63, 76], ["casadi.Function", "casadi.integrator", "casadi.Function"], "methods", ["None"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Exposes functions to evaluate the model.\n\n        \"\"\"", "\n", "# Continuous time dynamics.", "\n", "self", ".", "fc_func", "=", "cs", ".", "Function", "(", "'fc'", ",", "[", "self", ".", "x_sym", ",", "self", ".", "u_sym", "]", ",", "[", "self", ".", "x_dot", "]", ",", "[", "'x'", ",", "'u'", "]", ",", "[", "'f'", "]", ")", "\n", "# Discrete time dynamics.", "\n", "self", ".", "fd_func", "=", "cs", ".", "integrator", "(", "'fd'", ",", "self", ".", "integration_algo", ",", "{", "'x'", ":", "self", ".", "x_sym", ",", "\n", "'p'", ":", "self", ".", "u_sym", ",", "\n", "'ode'", ":", "self", ".", "x_dot", "}", ",", "{", "'tf'", ":", "self", ".", "dt", "}", "\n", ")", "\n", "# Observation model.", "\n", "self", ".", "g_func", "=", "cs", ".", "Function", "(", "'g'", ",", "[", "self", ".", "x_sym", ",", "self", ".", "u_sym", "]", ",", "[", "self", ".", "y_sym", "]", ",", "[", "'x'", ",", "'u'", "]", ",", "[", "'g'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.symbolic_systems.SymbolicModel.setup_linearization": [[77, 124], ["casadi.jacobian", "casadi.jacobian", "casadi.Function", "casadi.jacobian", "casadi.jacobian", "casadi.Function", "casadi.MX.sym", "casadi.MX.sym", "casadi.Function", "casadi.integrator", "casadi.Function", "casadi.jacobian", "casadi.jacobian", "casadi.jacobian", "casadi.jacobian", "casadi.jacobian", "casadi.Function", "casadi.vertcat"], "methods", ["None"], ["", "def", "setup_linearization", "(", "self", ")", ":", "\n", "        ", "\"\"\"Exposes functions for the linearized model.\n\n        \"\"\"", "\n", "# Jacobians w.r.t state & input.", "\n", "self", ".", "dfdx", "=", "cs", ".", "jacobian", "(", "self", ".", "x_dot", ",", "self", ".", "x_sym", ")", "\n", "self", ".", "dfdu", "=", "cs", ".", "jacobian", "(", "self", ".", "x_dot", ",", "self", ".", "u_sym", ")", "\n", "self", ".", "df_func", "=", "cs", ".", "Function", "(", "'df'", ",", "[", "self", ".", "x_sym", ",", "self", ".", "u_sym", "]", ",", "\n", "[", "self", ".", "dfdx", ",", "self", ".", "dfdu", "]", ",", "[", "'x'", ",", "'u'", "]", ",", "\n", "[", "'dfdx'", ",", "'dfdu'", "]", ")", "\n", "self", ".", "dgdx", "=", "cs", ".", "jacobian", "(", "self", ".", "y_sym", ",", "self", ".", "x_sym", ")", "\n", "self", ".", "dgdu", "=", "cs", ".", "jacobian", "(", "self", ".", "y_sym", ",", "self", ".", "u_sym", ")", "\n", "self", ".", "dg_func", "=", "cs", ".", "Function", "(", "'dg'", ",", "[", "self", ".", "x_sym", ",", "self", ".", "u_sym", "]", ",", "\n", "[", "self", ".", "dgdx", ",", "self", ".", "dgdu", "]", ",", "[", "'x'", ",", "'u'", "]", ",", "\n", "[", "'dgdx'", ",", "'dgdu'", "]", ")", "\n", "# Evaluation point for linearization.", "\n", "self", ".", "x_eval", "=", "cs", ".", "MX", ".", "sym", "(", "'x_eval'", ",", "self", ".", "nx", ",", "1", ")", "\n", "self", ".", "u_eval", "=", "cs", ".", "MX", ".", "sym", "(", "'u_eval'", ",", "self", ".", "nu", ",", "1", ")", "\n", "# Linearized dynamics model.", "\n", "self", ".", "x_dot_linear", "=", "self", ".", "x_dot", "+", "self", ".", "dfdx", "@", "(", "\n", "self", ".", "x_eval", "-", "self", ".", "x_sym", ")", "+", "self", ".", "dfdu", "@", "(", "self", ".", "u_eval", "-", "self", ".", "u_sym", ")", "\n", "self", ".", "fc_linear_func", "=", "cs", ".", "Function", "(", "\n", "'fc'", ",", "[", "self", ".", "x_eval", ",", "self", ".", "u_eval", ",", "self", ".", "x_sym", ",", "self", ".", "u_sym", "]", ",", "\n", "[", "self", ".", "x_dot_linear", "]", ",", "[", "'x_eval'", ",", "'u_eval'", ",", "'x'", ",", "'u'", "]", ",", "[", "'f_linear'", "]", ")", "\n", "self", ".", "fd_linear_func", "=", "cs", ".", "integrator", "(", "\n", "'fd_linear'", ",", "self", ".", "integration_algo", ",", "{", "\n", "'x'", ":", "self", ".", "x_eval", ",", "\n", "'p'", ":", "cs", ".", "vertcat", "(", "self", ".", "u_eval", ",", "self", ".", "x_sym", ",", "self", ".", "u_sym", ")", ",", "\n", "'ode'", ":", "self", ".", "x_dot_linear", "\n", "}", ",", "{", "'tf'", ":", "self", ".", "dt", "}", ")", "\n", "# Linearized observation model.", "\n", "self", ".", "y_linear", "=", "self", ".", "y_sym", "+", "self", ".", "dgdx", "@", "(", "\n", "self", ".", "x_eval", "-", "self", ".", "x_sym", ")", "+", "self", ".", "dgdu", "@", "(", "self", ".", "u_eval", "-", "self", ".", "u_sym", ")", "\n", "self", ".", "g_linear_func", "=", "cs", ".", "Function", "(", "\n", "'g_linear'", ",", "[", "self", ".", "x_eval", ",", "self", ".", "u_eval", ",", "self", ".", "x_sym", ",", "self", ".", "u_sym", "]", ",", "\n", "[", "self", ".", "y_linear", "]", ",", "[", "'x_eval'", ",", "'u_eval'", ",", "'x'", ",", "'u'", "]", ",", "[", "'g_linear'", "]", ")", "\n", "# Jacobian and Hessian of cost function.", "\n", "self", ".", "l_x", "=", "cs", ".", "jacobian", "(", "self", ".", "cost_func", ",", "self", ".", "x_sym", ")", "\n", "self", ".", "l_xx", "=", "cs", ".", "jacobian", "(", "self", ".", "l_x", ",", "self", ".", "x_sym", ")", "\n", "self", ".", "l_u", "=", "cs", ".", "jacobian", "(", "self", ".", "cost_func", ",", "self", ".", "u_sym", ")", "\n", "self", ".", "l_uu", "=", "cs", ".", "jacobian", "(", "self", ".", "l_u", ",", "self", ".", "u_sym", ")", "\n", "self", ".", "l_xu", "=", "cs", ".", "jacobian", "(", "self", ".", "l_x", ",", "self", ".", "u_sym", ")", "\n", "l_inputs", "=", "[", "self", ".", "x_sym", ",", "self", ".", "u_sym", ",", "self", ".", "Xr", ",", "self", ".", "Ur", ",", "self", ".", "Q", ",", "self", ".", "R", "]", "\n", "l_inputs_str", "=", "[", "'x'", ",", "'u'", ",", "'Xr'", ",", "'Ur'", ",", "'Q'", ",", "'R'", "]", "\n", "l_outputs", "=", "[", "self", ".", "cost_func", ",", "self", ".", "l_x", ",", "self", ".", "l_xx", ",", "self", ".", "l_u", ",", "self", ".", "l_uu", ",", "self", ".", "l_xu", "]", "\n", "l_outputs_str", "=", "[", "'l'", ",", "'l_x'", ",", "'l_xx'", ",", "'l_u'", ",", "'l_uu'", ",", "'l_xu'", "]", "\n", "self", ".", "loss", "=", "cs", ".", "Function", "(", "'loss'", ",", "l_inputs", ",", "l_outputs", ",", "l_inputs_str", ",", "l_outputs_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.experiments.main.train": [[18, 50], ["safe_control_gym.utils.utils.set_seed_from_config", "safe_control_gym.utils.utils.set_device_from_config", "functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.learn", "safe_control_gym.utils.registration.make.close", "print", "safe_control_gym.utils.utils.set_dir_from_config", "safe_control_gym.utils.registration.make.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_seed_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_device_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_dir_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load"], ["def", "train", "(", "config", ")", ":", "\n", "    ", "\"\"\"Training template.\n    \n    Usage:\n        * to start training, use with `--func train`.\n        * to restore from a previous training, additionally use `--restore {dir_path}` \n            where `dir_path` is the output folder from previous training.  \n\n    \"\"\"", "\n", "# Experiment setup.", "\n", "if", "not", "config", ".", "restore", ":", "\n", "        ", "set_dir_from_config", "(", "config", ")", "\n", "", "set_seed_from_config", "(", "config", ")", "\n", "set_device_from_config", "(", "config", ")", "\n", "# Define function to create task/env.", "\n", "env_func", "=", "partial", "(", "make", ",", "config", ".", "task", ",", "output_dir", "=", "config", ".", "output_dir", ",", "**", "config", ".", "task_config", ")", "\n", "# Create the controller/control_agent.", "\n", "control_agent", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "training", "=", "True", ",", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"model_latest.pt\"", ")", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "use_gpu", "=", "config", ".", "use_gpu", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "control_agent", ".", "reset", "(", ")", "\n", "if", "config", ".", "restore", ":", "\n", "        ", "control_agent", ".", "load", "(", "os", ".", "path", ".", "join", "(", "config", ".", "restore", ",", "\"model_latest.pt\"", ")", ")", "\n", "# Training.", "\n", "", "control_agent", ".", "learn", "(", ")", "\n", "control_agent", ".", "close", "(", ")", "\n", "print", "(", "\"Training done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.experiments.main.make_plots": [[52, 67], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "safe_control_gym.utils.utils.mkdirs", "safe_control_gym.utils.plotting.plot_from_logs", "print"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.mkdirs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.plot_from_logs"], ["", "def", "make_plots", "(", "config", ")", ":", "\n", "    ", "\"\"\"Produces plots for logged stats during training.\n    \n    Usage\n        * use with `--func plot` and `--restore {dir_path}` where `dir_path` is \n            the experiment folder containing the logs.\n        * save figures under `dir_path/plots/`.\n\n    \"\"\"", "\n", "# Define source and target log locations.", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"logs\"", ")", "\n", "plot_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"plots\"", ")", "\n", "mkdirs", "(", "plot_dir", ")", "\n", "plot_from_logs", "(", "log_dir", ",", "plot_dir", ",", "window", "=", "3", ")", "\n", "print", "(", "\"Plotting done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.experiments.main.test_policy": [[69, 126], ["safe_control_gym.utils.utils.set_device_from_config", "functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "print", "safe_control_gym.utils.registration.make.close", "print", "safe_control_gym.utils.utils.set_seed_from_config", "safe_control_gym.utils.registration.make.load", "os.path.join", "os.path.join", "os.path.dirname", "os.path.dirname", "open", "pickle.dump", "ep_lengths.mean", "ep_lengths.std", "ep_returns.mean", "ep_returns.std", "safe_control_gym.utils.utils.save_video", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_device_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_seed_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.save_video"], ["", "def", "test_policy", "(", "config", ")", ":", "\n", "    ", "\"\"\"Run the (trained) policy/controller for evaluation.\n    \n    Usage\n        * use with `--func test`.\n        * to test policy from a trained model checkpoint, additionally use \n            `--restore {dir_path}` where `dir_path` is folder to the trained model.\n        * to test un-trained policy (e.g. non-learning based), use as it is.\n\n    \"\"\"", "\n", "# Evaluation setup.", "\n", "set_device_from_config", "(", "config", ")", "\n", "if", "config", ".", "set_test_seed", ":", "\n", "# seed the evaluation (both controller and env) if given", "\n", "        ", "set_seed_from_config", "(", "config", ")", "\n", "env_seed", "=", "config", ".", "seed", "\n", "", "else", ":", "\n", "        ", "env_seed", "=", "None", "\n", "# Define function to create task/env.", "\n", "", "env_func", "=", "partial", "(", "make", ",", "config", ".", "task", ",", "seed", "=", "env_seed", ",", "output_dir", "=", "config", ".", "output_dir", ",", "**", "config", ".", "task_config", ")", "\n", "# Create the controller/control_agent.", "\n", "control_agent", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "training", "=", "False", ",", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"model_latest.pt\"", ")", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "use_gpu", "=", "config", ".", "use_gpu", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "control_agent", ".", "reset", "(", ")", "\n", "if", "config", ".", "restore", ":", "\n", "        ", "control_agent", ".", "load", "(", "os", ".", "path", ".", "join", "(", "config", ".", "restore", ",", "\"model_latest.pt\"", ")", ")", "\n", "# Test controller.", "\n", "", "results", "=", "control_agent", ".", "run", "(", "n_episodes", "=", "config", ".", "algo_config", ".", "eval_batch_size", ",", "\n", "render", "=", "config", ".", "render", ",", "\n", "verbose", "=", "config", ".", "verbose", ",", "\n", "use_adv", "=", "config", ".", "use_adv", ")", "\n", "# Save evalution results.", "\n", "if", "config", ".", "eval_output_dir", "is", "not", "None", "and", "config", ".", "eval_output_dir", ":", "\n", "        ", "eval_output_dir", "=", "config", ".", "eval_output_dir", "\n", "", "else", ":", "\n", "        ", "eval_output_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"eval\"", ")", "\n", "", "os", ".", "makedirs", "(", "eval_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "# test trajs and statistics ", "\n", "eval_path", "=", "os", ".", "path", ".", "join", "(", "eval_output_dir", ",", "config", ".", "eval_output_path", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "eval_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "eval_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "results", ",", "f", ")", "\n", "", "ep_lengths", "=", "results", "[", "\"ep_lengths\"", "]", "\n", "ep_returns", "=", "results", "[", "\"ep_returns\"", "]", "\n", "msg", "=", "\"eval_ep_length {:.2f} +/- {:.2f}\\n\"", ".", "format", "(", "ep_lengths", ".", "mean", "(", ")", ",", "ep_lengths", ".", "std", "(", ")", ")", "\n", "msg", "+=", "\"eval_ep_return {:.3f} +/- {:.3f}\\n\"", ".", "format", "(", "ep_returns", ".", "mean", "(", ")", ",", "ep_returns", ".", "std", "(", ")", ")", "\n", "print", "(", "msg", ")", "\n", "if", "\"frames\"", "in", "results", ":", "\n", "        ", "save_video", "(", "os", ".", "path", ".", "join", "(", "eval_output_dir", ",", "\"video.gif\"", ")", ",", "results", "[", "\"frames\"", "]", ")", "\n", "", "control_agent", ".", "close", "(", ")", "\n", "print", "(", "\"Evaluation done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure8.mpsc_experiment.main": [[18, 82], ["safe_control_gym.utils.configuration.ConfigFactory", "safe_control_gym.utils.configuration.ConfigFactory.merge", "functools.partial", "safe_control_gym.utils.utils.read_file", "munch.munchify", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.load", "shutil.rmtree", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "functools.partial.", "safe_control_gym.utils.registration.make.learn", "functools.partial.", "functools.partial.", "safe_control_gym.utils.registration.make.run", "safe_control_gym.utils.registration.make.close", "matplotlib.subplots", "ax_obs.plot", "ax_obs.plot", "ax_obs.plot", "ax_obs.legend", "ax_obs.set_title", "ax_obs.set_xlabel", "ax_obs.set_ylabel", "ax_obs.set_box_aspect", "matplotlib.subplots", "ax_act.plot", "ax_act.plot", "ax_act.legend", "ax_act.set_title", "ax_act.set_xlabel", "ax_act.set_ylabel", "ax_act.set_box_aspect", "matplotlib.subplots", "ax.plot", "ax.plot", "ax.plot", "ax.axvline", "ax.axvline", "ax.set_xlabel", "ax.set_ylabel", "ax.set_box_aspect", "ax.legend", "matplotlib.tight_layout", "matplotlib.show", "os.path.dirname", "os.path.join", "os.path.dirname", "os.path.join", "os.path.abspath", "os.path.abspath", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.merge", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.read_file", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["def", "main", "(", ")", ":", "\n", "# Define arguments.", "\n", "    ", "fac", "=", "ConfigFactory", "(", ")", "\n", "config", "=", "fac", ".", "merge", "(", ")", "\n", "env_func", "=", "partial", "(", "make", ",", "\n", "config", ".", "task", ",", "\n", "**", "config", ".", "task_config", ")", "\n", "# Create controller from PPO YAML.", "\n", "ppo_config_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "+", "'/config_overrides'", "\n", "ppo_dict", "=", "read_file", "(", "os", ".", "path", ".", "join", "(", "ppo_config_dir", ",", "'unsafe_ppo_config.yaml'", ")", ")", "\n", "ppo_config", "=", "munchify", "(", "ppo_dict", ")", "\n", "# Setup PPO controller.", "\n", "ppo_ctrl", "=", "make", "(", "ppo_config", ".", "algo", ",", "\n", "env_func", ",", "\n", "**", "ppo_config", ".", "algo_config", ")", "\n", "# Load state_dict from trained PPO.", "\n", "ppo_model_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "+", "'/unsafe_ppo_model'", "\n", "ppo_ctrl", ".", "load", "(", "os", ".", "path", ".", "join", "(", "ppo_model_dir", ",", "'unsafe_ppo_model_30000.pt'", ")", ")", "# Show violation.", "\n", "# Remove temporary files and directories", "\n", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "+", "'/temp'", ")", "\n", "# Setup MPSC.", "\n", "ctrl", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "rl_controller", "=", "ppo_ctrl", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "ctrl", ".", "reset", "(", ")", "\n", "train_env", "=", "env_func", "(", "init_state", "=", "None", ")", "\n", "ctrl", ".", "learn", "(", "env", "=", "train_env", ")", "\n", "test_env", "=", "env_func", "(", ")", "\n", "uncertified_env", "=", "env_func", "(", ")", "\n", "results", "=", "ctrl", ".", "run", "(", "env", "=", "test_env", ",", "\n", "uncertified_env", "=", "uncertified_env", ")", "\n", "ctrl", ".", "close", "(", ")", "\n", "fig_obs", ",", "ax_obs", "=", "plt", ".", "subplots", "(", ")", "\n", "ax_obs", ".", "plot", "(", "results", ".", "obs", "[", ":", ",", "0", "]", ",", "results", ".", "obs", "[", ":", ",", "2", "]", ",", "'.-'", ",", "label", "=", "'Certified'", ")", "\n", "ax_obs", ".", "plot", "(", "results", ".", "uncertified_obs", "[", ":", "10", ",", "0", "]", ",", "results", ".", "uncertified_obs", "[", ":", "10", ",", "2", "]", ",", "'r--'", ",", "label", "=", "'Uncertified'", ")", "\n", "ax_obs", ".", "plot", "(", "results", ".", "obs", "[", "results", ".", "corrections", ">", "1e-6", ",", "0", "]", ",", "results", ".", "obs", "[", "results", ".", "corrections", ">", "1e-6", ",", "2", "]", ",", "'r.'", ",", "label", "=", "'Modified'", ")", "\n", "ax_obs", ".", "legend", "(", ")", "\n", "ax_obs", ".", "set_title", "(", "'State Space'", ")", "\n", "ax_obs", ".", "set_xlabel", "(", "r'$x$'", ")", "\n", "ax_obs", ".", "set_ylabel", "(", "r'$\\theta$'", ")", "\n", "ax_obs", ".", "set_box_aspect", "(", "0.5", ")", "\n", "fig_act", ",", "ax_act", "=", "plt", ".", "subplots", "(", ")", "\n", "ax_act", ".", "plot", "(", "results", ".", "actions", "[", ":", "]", ",", "'b-'", ",", "label", "=", "'Certified Inputs'", ")", "\n", "ax_act", ".", "plot", "(", "results", ".", "learning_actions", "[", ":", "]", ",", "'r--'", ",", "label", "=", "'Uncertified Input'", ")", "\n", "ax_act", ".", "legend", "(", ")", "\n", "ax_act", ".", "set_title", "(", "'Input comparison'", ")", "\n", "ax_act", ".", "set_xlabel", "(", "'Step'", ")", "\n", "ax_act", ".", "set_ylabel", "(", "'Input'", ")", "\n", "ax_act", ".", "set_box_aspect", "(", "0.5", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "plot", "(", "results", ".", "obs", "[", ":", ",", "2", "]", ",", "results", ".", "obs", "[", ":", ",", "3", "]", ",", "'.-'", ",", "label", "=", "'Certified'", ")", "\n", "modified_inds", "=", "results", ".", "corrections", ">", "1e-6", "\n", "ax", ".", "plot", "(", "results", ".", "obs", "[", "results", ".", "corrections", ">", "1e-6", ",", "2", "]", ",", "results", ".", "obs", "[", "results", ".", "corrections", ">", "1e-6", ",", "3", "]", ",", "'r.'", ",", "label", "=", "'Modified'", ")", "\n", "uncert_end", "=", "results", ".", "uncertified_obs", ".", "shape", "[", "0", "]", "\n", "ax", ".", "plot", "(", "results", ".", "uncertified_obs", "[", ":", "uncert_end", ",", "2", "]", ",", "results", ".", "uncertified_obs", "[", ":", "uncert_end", ",", "3", "]", ",", "'r--'", ",", "label", "=", "'Uncertified'", ")", "\n", "ax", ".", "axvline", "(", "x", "=", "-", "0.2", ",", "color", "=", "'r'", ",", "label", "=", "'Limit'", ")", "\n", "ax", ".", "axvline", "(", "x", "=", "0.2", ",", "color", "=", "'r'", ")", "\n", "ax", ".", "set_xlabel", "(", "r\"$\\theta$\"", ")", "\n", "ax", ".", "set_ylabel", "(", "r\"$\\dot{\\theta}$\"", ")", "\n", "ax", ".", "set_box_aspect", "(", "0.5", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure6.gp_mpc_experiment.plot_xz_comparison_diag_constraint": [[17, 41], ["gp_mpc_experiment.plot_2D_comparison_with_prior", "numpy.array", "plot_2D_comparison_with_prior.plot", "plot_2D_comparison_with_prior.legend", "plot_2D_comparison_with_prior.set_xlabel", "plot_2D_comparison_with_prior.set_ylabel", "plot_2D_comparison_with_prior.set_xlim", "plot_2D_comparison_with_prior.set_ylim", "plot_2D_comparison_with_prior.set_box_aspect", "matplotlib.tight_layout", "numpy.savetxt", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure6.gp_mpc_experiment.plot_2D_comparison_with_prior", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["def", "plot_xz_comparison_diag_constraint", "(", "prior_run", ",", "\n", "run", ",", "\n", "init_ind", ",", "\n", "dir", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n\n    \"\"\"", "\n", "state_inds", "=", "[", "0", ",", "2", "]", "\n", "goal", "=", "[", "0", ",", "1", "]", "\n", "ax", "=", "plot_2D_comparison_with_prior", "(", "state_inds", ",", "prior_run", ",", "run", ",", "goal", ",", "init_ind", ",", "dir", "=", "dir", ")", "\n", "limit_vals", "=", "np", ".", "array", "(", "[", "[", "-", "2.1", ",", "-", "1.0", "]", ",", "\n", "[", "2.0", ",", "3.1", "]", "]", ")", "\n", "ax", ".", "plot", "(", "limit_vals", "[", ":", ",", "0", "]", ",", "limit_vals", "[", ":", ",", "1", "]", ",", "'r-'", ",", "label", "=", "'Limit'", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "'lower center'", ",", "bbox_to_anchor", "=", "(", "0.5", ",", "1.05", ")", ",", "\n", "ncol", "=", "3", ",", "fancybox", "=", "True", ",", "shadow", "=", "True", ")", "\n", "if", "dir", "is", "not", "None", ":", "\n", "        ", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'limit.csv'", ")", ",", "limit_vals", ",", "delimiter", "=", "','", ",", "header", "=", "'x_limit,y_limit'", ")", "\n", "", "ax", ".", "set_xlabel", "(", "'X Position [m]'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Z Position [m]'", ")", "\n", "ax", ".", "set_xlim", "(", "[", "-", "1.2", ",", "0.1", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "-", "0.05", ",", "1.1", "]", ")", "\n", "ax", ".", "set_box_aspect", "(", "0.5", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure6.gp_mpc_experiment.plot_2D_comparison_with_prior": [[43, 110], ["min", "matplotlib.subplots", "ax.plot", "ax.plot", "ax.plot", "range", "ax.set_aspect", "ax.axis", "ax.legend", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.zeros", "numpy.zeros", "ax.annotate", "ax.annotate", "numpy.savetxt", "len", "os.path.join", "numpy.array", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "ax.plot", "ax.plot", "gp_mpc_experiment.add_2d_cov_ellipse", "ax.plot", "ax.plot", "gp_mpc_experiment.add_2d_cov_ellipse", "str", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure6.gp_mpc_experiment.add_2d_cov_ellipse", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure6.gp_mpc_experiment.add_2d_cov_ellipse"], ["", "def", "plot_2D_comparison_with_prior", "(", "state_inds", ",", "\n", "prior_run", ",", "\n", "run", ",", "goal", ",", "\n", "init_ind", ",", "\n", "dir", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n\n    \"\"\"", "\n", "init_ind", "=", "min", "(", "1", ",", "len", "(", "prior_run", ".", "horizon_states", ")", "-", "1", ")", "# Temporary bugfix for ipopt failing to find a second solution", "\n", "horizon_cov", "=", "run", ".", "state_horizon_cov", "[", "init_ind", "]", "\n", "horizon_states", "=", "run", ".", "horizon_states", "[", "init_ind", "]", "\n", "prior_horizon_states", "=", "prior_run", ".", "horizon_states", "[", "init_ind", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "plot", "(", "goal", "[", "0", "]", ",", "goal", "[", "1", "]", ",", "'g'", ",", "\n", "marker", "=", "'x'", ",", "\n", "markersize", "=", "12", ",", "\n", "markeredgewidth", "=", "2", ",", "\n", "label", "=", "'Goal'", ")", "\n", "final_ind", "=", "-", "1", "\n", "ax", ".", "plot", "(", "prior_run", ".", "obs", "[", ":", ",", "state_inds", "[", "0", "]", "]", ",", "prior_run", ".", "obs", "[", ":", ",", "state_inds", "[", "1", "]", "]", ",", "'-'", ",", "label", "=", "'Linear MPC'", ")", "\n", "ax", ".", "plot", "(", "run", ".", "obs", "[", ":", ",", "state_inds", "[", "0", "]", "]", ",", "run", ".", "obs", "[", ":", ",", "state_inds", "[", "1", "]", "]", ",", "'-'", ",", "label", "=", "'GP-MPC'", ")", "\n", "if", "dir", "is", "not", "None", ":", "\n", "        ", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'goal.csv'", ")", ",", "np", ".", "array", "(", "[", "goal", "]", ")", ",", "delimiter", "=", "','", ",", "header", "=", "'x_goal,y_goal'", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'linear_mpc.csv'", ")", ",", "prior_run", ".", "obs", "[", ":", ",", "state_inds", "]", ",", "delimiter", "=", "','", ",", "header", "=", "'x_linearmpc,y_linearmpc'", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'gp_mpc.csv'", ")", ",", "run", ".", "obs", "[", ":", ",", "state_inds", "]", ",", "delimiter", "=", "','", ",", "header", "=", "'x_gpmpc,y_gpmpc'", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'gp_mpc_horizon.csv'", ")", ",", "horizon_states", "[", "state_inds", "]", ".", "T", ",", "delimiter", "=", "','", ",", "\n", "header", "=", "'x_gpmpc-horizon,y_gpmpc-horizon'", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'linear_mpc_horizon.csv'", ")", ",", "prior_horizon_states", "[", "state_inds", "]", ".", "T", ",", "delimiter", "=", "','", ",", "\n", "header", "=", "'x_linear-horizon,y_linear-horizon'", ")", "\n", "run_ellipse_data", "=", "np", ".", "zeros", "(", "(", "horizon_cov", ".", "shape", "[", "0", "]", ",", "2", "+", "1", "+", "1", "+", "1", ")", ")", "\n", "", "for", "i", "in", "range", "(", "horizon_cov", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "cov", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ")", "\n", "cov", "[", "0", ",", "0", "]", "=", "horizon_cov", "[", "i", ",", "state_inds", "[", "0", "]", ",", "state_inds", "[", "0", "]", "]", "\n", "cov", "[", "0", ",", "1", "]", "=", "horizon_cov", "[", "i", ",", "state_inds", "[", "0", "]", ",", "state_inds", "[", "1", "]", "]", "\n", "cov", "[", "1", ",", "0", "]", "=", "horizon_cov", "[", "i", ",", "state_inds", "[", "1", "]", ",", "state_inds", "[", "0", "]", "]", "\n", "cov", "[", "1", ",", "1", "]", "=", "horizon_cov", "[", "i", ",", "state_inds", "[", "1", "]", ",", "state_inds", "[", "1", "]", "]", "\n", "position", "=", "horizon_states", "[", "state_inds", ",", "i", "]", "\n", "prior_position", "=", "prior_horizon_states", "[", "state_inds", ",", "i", "]", "\n", "if", "i", "==", "1", ":", "\n", "            ", "ax", ".", "plot", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "'k.'", ",", "label", "=", "'GP-MPC Prediction horizon'", ")", "\n", "ax", ".", "plot", "(", "prior_position", "[", "0", "]", ",", "prior_position", "[", "1", "]", ",", "'m.'", ",", "label", "=", "'Linear MPC Prediction horizon'", ")", "\n", "pos", ",", "major_axis_length", ",", "minor_axis_length", ",", "alpha", "=", "add_2d_cov_ellipse", "(", "position", ",", "cov", ",", "ax", ",", "legend", "=", "True", ")", "\n", "if", "dir", "is", "not", "None", ":", "\n", "                ", "run_ellipse_data", "[", "i", ",", ":", "2", "]", "=", "pos", "\n", "run_ellipse_data", "[", "i", ",", "2", "]", "=", "major_axis_length", "\n", "run_ellipse_data", "[", "i", ",", "3", "]", "=", "minor_axis_length", "\n", "run_ellipse_data", "[", "i", ",", "4", "]", "=", "alpha", "\n", "", "", "else", ":", "\n", "            ", "ax", ".", "plot", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "'k.'", ")", "\n", "ax", ".", "plot", "(", "prior_position", "[", "0", "]", ",", "prior_position", "[", "1", "]", ",", "'m.'", ")", "\n", "pos", ",", "major_axis_length", ",", "minor_axis_length", ",", "alpha", "=", "add_2d_cov_ellipse", "(", "position", ",", "cov", ",", "ax", ")", "\n", "if", "dir", "is", "not", "None", ":", "\n", "                ", "run_ellipse_data", "[", "i", ",", ":", "2", "]", "=", "pos", "\n", "run_ellipse_data", "[", "i", ",", "2", "]", "=", "major_axis_length", "\n", "run_ellipse_data", "[", "i", ",", "3", "]", "=", "minor_axis_length", "\n", "run_ellipse_data", "[", "i", ",", "4", "]", "=", "alpha", "\n", "", "", "ax", ".", "annotate", "(", "str", "(", "i", ")", ",", "position", ")", "\n", "ax", ".", "annotate", "(", "str", "(", "i", ")", ",", "prior_position", ")", "\n", "", "if", "dir", "is", "not", "None", ":", "\n", "        ", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'cov_ellipses.csv'", ")", ",", "run_ellipse_data", ",", "delimiter", "=", "','", ",", "\n", "header", "=", "'pos_x,pos_y,major_axis_length,minor_axis_length,alpha'", ")", "\n", "\n", "", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "ax", ".", "axis", "(", "'equal'", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure6.gp_mpc_experiment.add_2d_cov_ellipse": [[112, 146], ["numpy.linalg.eig", "numpy.argmax", "ax.add_artist", "numpy.sqrt", "numpy.sqrt", "matplotlib.patches.Ellipse", "matplotlib.patches.Ellipse", "numpy.arctan2"], "function", ["None"], ["", "def", "add_2d_cov_ellipse", "(", "position", ",", "\n", "cov", ",", "\n", "ax", ",", "\n", "legend", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"\n\n    \"\"\"", "\n", "evals", ",", "evecs", "=", "np", ".", "linalg", ".", "eig", "(", "cov", ")", "\n", "major_axis_ind", "=", "np", ".", "argmax", "(", "evals", ")", "\n", "minor_axis_ind", "=", "0", "if", "major_axis_ind", "==", "1", "else", "1", "\n", "major_eval", "=", "evals", "[", "major_axis_ind", "]", "\n", "minor_eval", "=", "evals", "[", "minor_axis_ind", "]", "\n", "major_evec", "=", "evecs", "[", ":", ",", "major_axis_ind", "]", "\n", "minor_evec", "=", "evecs", "[", ":", ",", "minor_axis_ind", "]", "\n", "alpha", "=", "np", ".", "arctan2", "(", "major_evec", "[", "1", "]", ",", "major_evec", "[", "0", "]", ")", "*", "180", "/", "np", ".", "pi", "\n", "# For 95% confidence interval, you must multiply by sqrt 5.991.", "\n", "major_axis_length", "=", "2", "*", "np", ".", "sqrt", "(", "5.991", "*", "major_eval", ")", "\n", "minor_axis_length", "=", "2", "*", "np", ".", "sqrt", "(", "5.991", "*", "minor_eval", ")", "\n", "if", "legend", ":", "\n", "        ", "ellipse", "=", "Ellipse", "(", "position", ",", "\n", "major_axis_length", ",", "\n", "minor_axis_length", ",", "\n", "angle", "=", "alpha", ",", "\n", "alpha", "=", "0.5", ",", "\n", "label", "=", "'95% C.I.'", ")", "\n", "", "else", ":", "\n", "        ", "ellipse", "=", "Ellipse", "(", "position", ",", "\n", "major_axis_length", ",", "\n", "minor_axis_length", ",", "\n", "angle", "=", "alpha", ",", "\n", "alpha", "=", "0.5", ")", "\n", "", "ax", ".", "add_artist", "(", "ellipse", ")", "\n", "return", "position", ",", "major_axis_length", ",", "minor_axis_length", ",", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot_from_exps": [[25, 102], ["collections.defaultdict", "legend_dir_specs.items", "float", "collections.defaultdict.items", "collections.defaultdict.items", "matplotlib.figure", "matplotlib.clf", "enumerate", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.show", "min", "numpy.stack", "numpy.mean", "numpy.std", "numpy.median", "numpy.quantile", "sorted", "os.path.join", "safe_control_gym.utils.plotting.load_from_log_file", "stats[].append", "min", "numpy.array", "processed_stats.keys", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.fill_between", "numpy.asarray", "numpy.asarray", "safe_control_gym.utils.plotting.window_func", "len"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.load_from_log_file", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.window_func"], ["def", "plot_from_exps", "(", "legend_dir_specs", ",", "\n", "out_path", "=", "\"temp.jpg\"", ",", "\n", "scalar_name", "=", "None", ",", "\n", "title", "=", "\"Traing Curves\"", ",", "\n", "xlabel", "=", "\"Epochs\"", ",", "\n", "ylabel", "=", "\"Loss\"", ",", "\n", "window", "=", "None", ",", "\n", "x_num_max", "=", "None", ",", "\n", "num_std", "=", "1", ",", "\n", "use_median_quantile", "=", "False", ")", ":", "\n", "    ", "\"\"\"Plots 1 stat figure at a time.\n\n    \"\"\"", "\n", "# Get all stats.", "\n", "stats", "=", "defaultdict", "(", "list", ")", "\n", "for", "l", ",", "dirs", "in", "legend_dir_specs", ".", "items", "(", ")", ":", "\n", "        ", "for", "d", "in", "dirs", ":", "\n", "# Pick from either log source (tensorboard or log text files).", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "d", ",", "\"logs\"", ",", "scalar_name", "+", "\".log\"", ")", "\n", "_", ",", "x", ",", "_", ",", "y", "=", "load_from_log_file", "(", "path", ")", "\n", "# Smoothing.", "\n", "x", ",", "y", "=", "np", ".", "asarray", "(", "x", ")", ",", "np", ".", "asarray", "(", "y", ")", "\n", "if", "window", ":", "\n", "                ", "x", ",", "y", "=", "window_func", "(", "x", ",", "y", ",", "window", ",", "np", ".", "mean", ")", "\n", "", "stats", "[", "l", "]", ".", "append", "(", "[", "x", ",", "y", "]", ")", "\n", "# Post-processing.", "\n", "", "", "x_max", "=", "float", "(", "\"inf\"", ")", "\n", "for", "_", ",", "runs", "in", "stats", ".", "items", "(", ")", ":", "\n", "        ", "for", "x", ",", "y", "in", "runs", ":", "\n", "# Align length of x data (get min across all runs & all algos).", "\n", "            ", "x_max", "=", "min", "(", "x_max", ",", "len", "(", "x", ")", ")", "\n", "", "", "if", "x_num_max", ":", "\n", "        ", "x_max", "=", "min", "(", "x_max", ",", "x_num_max", ")", "\n", "", "processed_stats", "=", "{", "}", "\n", "for", "name", ",", "runs", "in", "stats", ".", "items", "(", ")", ":", "\n", "# Use same x for all runs to an algo.", "\n", "        ", "x", "=", "np", ".", "array", "(", "[", "x", "[", ":", "x_max", "]", "for", "x", ",", "_", "in", "runs", "]", ")", "[", "0", "]", "\n", "# Different y for different runs.", "\n", "y", "=", "np", ".", "stack", "(", "[", "y", "[", ":", "x_max", "]", "for", "_", ",", "y", "in", "runs", "]", ")", "\n", "y_mean", "=", "np", ".", "mean", "(", "y", ",", "axis", "=", "0", ")", "\n", "y_std", "=", "np", ".", "std", "(", "y", ",", "axis", "=", "0", ")", "\n", "y_median", "=", "np", ".", "median", "(", "y", ",", "axis", "=", "0", ")", "\n", "y_quantiles", "=", "np", ".", "quantile", "(", "y", ",", "[", "0.25", ",", "0.75", "]", ",", "axis", "=", "0", ")", "\n", "# Record stats.", "\n", "processed_stats", "[", "name", "]", "=", "{", "\n", "\"x\"", ":", "x", ",", "\n", "\"mean\"", ":", "y_mean", ",", "\n", "\"std\"", ":", "y_std", ",", "\n", "\"median\"", ":", "y_median", ",", "\n", "\"quantiles\"", ":", "y_quantiles", ",", "\n", "}", "\n", "# Actual plot.", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "5", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "sorted", "(", "processed_stats", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "color", "=", "COLORS", "[", "i", "]", "\n", "x", "=", "processed_stats", "[", "name", "]", "[", "\"x\"", "]", "\n", "if", "use_median_quantile", ":", "\n", "            ", "y_median", "=", "processed_stats", "[", "name", "]", "[", "\"median\"", "]", "\n", "y_quantiles", "=", "processed_stats", "[", "name", "]", "[", "\"quantiles\"", "]", "\n", "y_quant_1st", "=", "y_quantiles", "[", "0", "]", "\n", "y_quant_3rd", "=", "y_quantiles", "[", "1", "]", "\n", "plt", ".", "plot", "(", "x", ",", "y_median", ",", "label", "=", "name", ",", "color", "=", "color", ")", "\n", "plt", ".", "fill_between", "(", "x", ",", "y_quant_3rd", ",", "y_quant_1st", ",", "alpha", "=", "0.3", ",", "color", "=", "color", ")", "\n", "", "else", ":", "\n", "            ", "y_mean", "=", "processed_stats", "[", "name", "]", "[", "\"mean\"", "]", "\n", "y_std", "=", "processed_stats", "[", "name", "]", "[", "\"std\"", "]", "\n", "plt", ".", "plot", "(", "x", ",", "y_mean", ",", "label", "=", "name", ",", "color", "=", "color", ")", "\n", "plt", ".", "fill_between", "(", "x", ",", "y_mean", "+", "num_std", "*", "y_std", ",", "y_mean", "-", "num_std", "*", "y_std", ",", "alpha", "=", "0.3", ",", "color", "=", "color", ")", "\n", "", "", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "xlabel", "(", "xlabel", ")", "\n", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper center'", ",", "bbox_to_anchor", "=", "(", "0.5", ",", "-", "0.15", ")", ",", "fancybox", "=", "True", ",", "shadow", "=", "True", ",", "ncol", "=", "4", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "out_path", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "stats", ",", "processed_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.reward_to_cost": [[104, 109], ["None"], "function", ["None"], ["", "def", "reward_to_cost", "(", "y", ")", ":", "\n", "    ", "\"\"\"Converts RL reward to control cost (for plotting).\n\n    \"\"\"", "\n", "return", "250", "-", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.load_stats": [[111, 158], ["collections.defaultdict", "legend_dir_specs.items", "float", "collections.defaultdict.items", "collections.defaultdict.items", "copy.deepcopy", "min", "numpy.stack", "numpy.mean", "numpy.std", "numpy.median", "numpy.quantile", "os.path.join", "safe_control_gym.utils.plotting.load_from_log_file", "stats[].append", "min", "numpy.array", "numpy.asarray", "numpy.asarray", "safe_exp_plots.reward_to_cost", "safe_control_gym.utils.plotting.window_func", "len", "scalar_name.lower", "scalar_name.lower"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.load_from_log_file", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.reward_to_cost", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.window_func"], ["", "def", "load_stats", "(", "legend_dir_specs", ",", "scalar_names", "=", "[", "]", ",", "window", "=", "None", ",", "x_num_max", "=", "None", ")", ":", "\n", "    ", "\"\"\"Gets all processed stats for multiple scalars.\"\"\"", "\n", "scalar_stats", "=", "{", "}", "\n", "for", "scalar_name", "in", "scalar_names", ":", "\n", "# Get all stats.", "\n", "        ", "stats", "=", "defaultdict", "(", "list", ")", "\n", "for", "l", ",", "dirs", "in", "legend_dir_specs", ".", "items", "(", ")", ":", "\n", "            ", "for", "d", "in", "dirs", ":", "\n", "# Pick from either log source (tensorboard or log text files).", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "d", ",", "\"logs\"", ",", "scalar_name", "+", "\".log\"", ")", "\n", "_", ",", "x", ",", "_", ",", "y", "=", "load_from_log_file", "(", "path", ")", "\n", "# Smoothing.", "\n", "x", ",", "y", "=", "np", ".", "asarray", "(", "x", ")", ",", "np", ".", "asarray", "(", "y", ")", "\n", "if", "\"return\"", "in", "scalar_name", ".", "lower", "(", ")", "or", "\"reward\"", "in", "scalar_name", ".", "lower", "(", ")", ":", "\n", "                    ", "y", "=", "reward_to_cost", "(", "y", ")", "\n", "", "if", "window", ":", "\n", "                    ", "x", ",", "y", "=", "window_func", "(", "x", ",", "y", ",", "window", ",", "np", ".", "mean", ")", "\n", "", "stats", "[", "l", "]", ".", "append", "(", "[", "x", ",", "y", "]", ")", "\n", "# Post-processing.", "\n", "", "", "x_max", "=", "float", "(", "\"inf\"", ")", "\n", "for", "_", ",", "runs", "in", "stats", ".", "items", "(", ")", ":", "\n", "            ", "for", "x", ",", "y", "in", "runs", ":", "\n", "# Align length of x data (get min across all runs & all algos).", "\n", "                ", "x_max", "=", "min", "(", "x_max", ",", "len", "(", "x", ")", ")", "\n", "", "", "if", "x_num_max", ":", "\n", "            ", "x_max", "=", "min", "(", "x_max", ",", "x_num_max", ")", "\n", "", "processed_stats", "=", "{", "}", "\n", "for", "name", ",", "runs", "in", "stats", ".", "items", "(", ")", ":", "\n", "# Use same x for all runs to an algo.", "\n", "            ", "x", "=", "np", ".", "array", "(", "[", "x", "[", ":", "x_max", "]", "for", "x", ",", "_", "in", "runs", "]", ")", "[", "0", "]", "\n", "# Different y for different runs.", "\n", "y", "=", "np", ".", "stack", "(", "[", "y", "[", ":", "x_max", "]", "for", "_", ",", "y", "in", "runs", "]", ")", "\n", "y_mean", "=", "np", ".", "mean", "(", "y", ",", "axis", "=", "0", ")", "\n", "y_std", "=", "np", ".", "std", "(", "y", ",", "axis", "=", "0", ")", "\n", "y_median", "=", "np", ".", "median", "(", "y", ",", "axis", "=", "0", ")", "\n", "y_quantiles", "=", "np", ".", "quantile", "(", "y", ",", "[", "0.25", ",", "0.75", "]", ",", "axis", "=", "0", ")", "\n", "# Record stats.", "\n", "processed_stats", "[", "name", "]", "=", "{", "\n", "\"x\"", ":", "x", ",", "\n", "\"mean\"", ":", "y_mean", ",", "\n", "\"std\"", ":", "y_std", ",", "\n", "\"median\"", ":", "y_median", ",", "\n", "\"quantiles\"", ":", "y_quantiles", ",", "\n", "}", "\n", "# Copy over stats.", "\n", "", "scalar_stats", "[", "scalar_name", "]", "=", "deepcopy", "(", "processed_stats", ")", "\n", "", "return", "scalar_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot_from_exps2": [[160, 232], ["safe_exp_plots.load_stats", "len", "math.ceil", "min", "matplotlib.figure", "plt.figure.subplots", "enumerate", "plt.figure.suptitle", "plt.figure.subplots_adjust", "plt.figure.legend", "matplotlib.savefig", "matplotlib.show", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.set_ylim", "ax.get_legend_handles_labels", "lines.extend", "labels.extend", "sorted", "processed_stats.keys", "len", "len", "ax.plot", "ax.fill_between", "ax.plot", "ax.fill_between"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.load_stats", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot"], ["", "def", "plot_from_exps2", "(", "legend_dir_specs", ",", "\n", "out_path", "=", "\"temp.jpg\"", ",", "\n", "scalar_names", "=", "[", "]", ",", "\n", "title", "=", "\"Traing Curves\"", ",", "\n", "sub_titles", "=", "[", "\"Loss Curve\"", "]", ",", "\n", "xlabel", "=", "\"Epochs\"", ",", "\n", "ylabels", "=", "[", "\"Loss\"", "]", ",", "\n", "window", "=", "None", ",", "\n", "x_num_max", "=", "None", ",", "\n", "num_std", "=", "1", ",", "\n", "use_median_quantile", "=", "False", ",", "\n", "cols_per_row", "=", "3", ")", ":", "\n", "    ", "\"\"\"Plots 1 stat figure at a time.\n\n    \"\"\"", "\n", "# Get all stats.", "\n", "scalar_stats", "=", "load_stats", "(", "legend_dir_specs", ",", "scalar_names", "=", "scalar_names", ",", "window", "=", "window", ",", "x_num_max", "=", "x_num_max", ")", "\n", "# Make plots.", "\n", "num_plots", "=", "len", "(", "scalar_stats", ")", "\n", "num_rows", "=", "math", ".", "ceil", "(", "num_plots", "/", "cols_per_row", ")", "\n", "num_cols", "=", "min", "(", "num_plots", ",", "cols_per_row", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "6", ")", ")", "\n", "axes", "=", "fig", ".", "subplots", "(", "nrows", "=", "num_rows", ",", "ncols", "=", "num_cols", ")", "\n", "for", "idx", ",", "scalar_name", "in", "enumerate", "(", "scalar_names", ")", ":", "\n", "        ", "row_idx", "=", "idx", "//", "num_rows", "\n", "col_idx", "=", "idx", "%", "num_cols", "\n", "if", "num_rows", ">", "1", ":", "\n", "            ", "ax", "=", "axes", "[", "row_idx", ",", "col_idx", "]", "\n", "", "else", ":", "\n", "            ", "ax", "=", "axes", "[", "col_idx", "]", "\n", "", "processed_stats", "=", "scalar_stats", "[", "scalar_name", "]", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "sorted", "(", "processed_stats", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "color_i", "=", "(", "i", "+", "0", ")", "%", "len", "(", "COLORS", ")", "\n", "color", "=", "COLORS", "[", "color_i", "]", "\n", "line_i", "=", "(", "i", "+", "0", ")", "%", "len", "(", "LINE_STYLES", ")", "\n", "linestyle", "=", "LINE_STYLES", "[", "line_i", "]", "[", "-", "1", "]", "\n", "x", "=", "processed_stats", "[", "name", "]", "[", "\"x\"", "]", "\n", "if", "use_median_quantile", ":", "\n", "                ", "y_median", "=", "processed_stats", "[", "name", "]", "[", "\"median\"", "]", "\n", "y_quantiles", "=", "processed_stats", "[", "name", "]", "[", "\"quantiles\"", "]", "\n", "y_quant_1st", "=", "y_quantiles", "[", "0", "]", "\n", "y_quant_3rd", "=", "y_quantiles", "[", "1", "]", "\n", "ax", ".", "plot", "(", "x", ",", "y_median", ",", "label", "=", "name", ",", "color", "=", "color", ",", "alpha", "=", "0.7", ",", "linestyle", "=", "linestyle", ")", "\n", "ax", ".", "fill_between", "(", "x", ",", "y_quant_3rd", ",", "y_quant_1st", ",", "alpha", "=", "0.1", ",", "color", "=", "color", ")", "\n", "", "else", ":", "\n", "                ", "y_mean", "=", "processed_stats", "[", "name", "]", "[", "\"mean\"", "]", "\n", "y_std", "=", "processed_stats", "[", "name", "]", "[", "\"std\"", "]", "\n", "ax", ".", "plot", "(", "x", ",", "y_mean", ",", "label", "=", "name", ",", "color", "=", "color", ",", "alpha", "=", "0.7", ",", "linestyle", "=", "linestyle", ")", "\n", "ax", ".", "fill_between", "(", "x", ",", "y_mean", "+", "num_std", "*", "y_std", ",", "y_mean", "-", "num_std", "*", "y_std", ",", "alpha", "=", "0.1", ",", "color", "=", "color", ")", "\n", "", "", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabels", "[", "idx", "]", ")", "\n", "ax", ".", "set_ylim", "(", "(", "-", "10", ",", "None", ")", ")", "\n", "# Postprocess plot.", "\n", "", "fig", ".", "suptitle", "(", "title", ")", "\n", "fig", ".", "subplots_adjust", "(", "bottom", "=", "0.15", ")", "\n", "lines", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "ax", "in", "fig", ".", "axes", ":", "\n", "        ", "axLine", ",", "axLabel", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "lines", ".", "extend", "(", "axLine", ")", "\n", "labels", ".", "extend", "(", "axLabel", ")", "\n", "break", "\n", "", "fig", ".", "legend", "(", "lines", ",", "\n", "labels", ",", "\n", "loc", "=", "'lower center'", ",", "\n", "fancybox", "=", "True", ",", "\n", "shadow", "=", "True", ",", "\n", "borderaxespad", "=", "0.1", ",", "\n", "ncol", "=", "7", ")", "\n", "plt", ".", "savefig", "(", "out_path", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "scalar_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot": [[268, 329], ["os.listdir", "sorted", "safe_exp_plots.plot_from_exps2", "numpy.array().transpose", "np.array().transpose.tolist", "os.path.join", "print", "os.listdir", "sorted", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "d.split", "os.path.join", "os.path.join", "os.path.join", "stats.keys", "header.extend", "stat_rows.append", "stat_rows.append", "stat_rows.append", "numpy.array", "header.append", "stat_rows.append"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.figure7.safe_exp_plots.plot_from_exps2"], ["def", "plot", "(", "config", ")", ":", "\n", "    ", "\"\"\"Central plot function.\n\n    \"\"\"", "\n", "legend_map", "=", "legend_maps", "[", "config", ".", "constraint", "]", "\n", "# Collect results.", "\n", "dirs", "=", "os", ".", "listdir", "(", "config", ".", "plot_dir", ")", "\n", "# Remove pretrain dirs.", "\n", "dirs", "=", "sorted", "(", "[", "d", "for", "d", "in", "dirs", "if", "d", "in", "legend_map", "]", ")", "\n", "# Make spec.", "\n", "spec", "=", "{", "}", "\n", "for", "d", "in", "dirs", ":", "\n", "        ", "d_name", "=", "d", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "legend", "=", "legend_map", "[", "d_name", "]", "\n", "seed_dirs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "d", ")", ")", "\n", "spec", "[", "legend", "]", "=", "[", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "d", ",", "sd", ")", "for", "sd", "in", "seed_dirs", "]", "\n", "# Collective plot (mean only).", "\n", "", "scalar_stats", "=", "plot_from_exps2", "(", "spec", ",", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "\"performance.jpg\"", ")", ",", "\n", "scalar_names", "=", "[", "\"stat/ep_return\"", ",", "\"stat/constraint_violation\"", "]", ",", "\n", "title", "=", "\"Learning Curves\"", ",", "\n", "sub_titles", "=", "[", "\"Average Costs\"", ",", "\"Total Constraint Violations\"", "]", ",", "\n", "xlabel", "=", "\"Step\"", ",", "\n", "ylabels", "=", "[", "\"Cost\"", ",", "\"Constraint Violations\"", "]", ",", "\n", "window", "=", "10", ",", "\n", "x_num_max", "=", "None", ",", "\n", "num_std", "=", "0", ",", "\n", "use_median_quantile", "=", "True", ",", "\n", "cols_per_row", "=", "3", ")", "\n", "# Save stats to CSV.", "\n", "curves", "=", "[", "\"median\"", ",", "\"top_quartile\"", ",", "\"bottom_quartile\"", "]", "\n", "header", "=", "[", "]", "\n", "stat_rows", "=", "[", "]", "\n", "x_already", "=", "False", "\n", "for", "scalar_name", "in", "scalar_stats", ":", "\n", "        ", "stats", "=", "scalar_stats", "[", "scalar_name", "]", "\n", "true_scalar_name", "=", "{", "\"stat/ep_return\"", ":", "\"Cost\"", ",", "\"stat/constraint_violation\"", ":", "\"Constraint Violations\"", "}", "[", "scalar_name", "]", "\n", "# Collect stats.", "\n", "for", "algo_name", "in", "sorted", "(", "stats", ".", "keys", "(", ")", ")", ":", "\n", "            ", "true_algo_name", "=", "xabs_name_map", "[", "algo_name", "]", "\n", "stat", "=", "stats", "[", "algo_name", "]", "\n", "# X.", "\n", "if", "not", "x_already", ":", "\n", "                ", "header", ".", "append", "(", "\"x-Step\"", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"x\"", "]", ")", "\n", "x_already", "=", "True", "\n", "# Y.", "\n", "", "header", ".", "extend", "(", "[", "\"y-{}-{}-{}\"", ".", "format", "(", "true_scalar_name", ",", "true_algo_name", ",", "c", ")", "for", "c", "in", "curves", "]", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"median\"", "]", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"quantiles\"", "]", "[", "1", "]", ")", "\n", "stat_rows", ".", "append", "(", "stat", "[", "\"quantiles\"", "]", "[", "0", "]", ")", "\n", "# Make rows.", "\n", "", "", "stat_mtx", "=", "np", ".", "array", "(", "stat_rows", ")", ".", "transpose", "(", ")", "\n", "rows", "=", "stat_mtx", ".", "tolist", "(", ")", "\n", "# Write to csv.", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "plot_dir", ",", "\"performance.csv\"", ")", "\n", "with", "open", "(", "csv_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "writer", ".", "writerows", "(", "rows", ")", "\n", "", "print", "(", "\"Plotting done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.tracking.run": [[18, 81], ["safe_control_gym.utils.configuration.ConfigFactory", "safe_control_gym.utils.configuration.ConfigFactory.merge", "int", "range", "min", "time.time", "functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.run", "range", "safe_control_gym.utils.registration.make.close", "print", "range", "print", "print", "time.time", "pybullet.addUserDebugLine"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.merge", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close"], ["def", "run", "(", "gui", "=", "None", ",", "max_steps", "=", "None", ")", ":", "\n", "    ", "\"\"\"The main function creating, running, and closing an environment.\n\n    \"\"\"", "\n", "\n", "# Create an environment", "\n", "CONFIG_FACTORY", "=", "ConfigFactory", "(", ")", "\n", "config", "=", "CONFIG_FACTORY", ".", "merge", "(", ")", "\n", "\n", "# Set iterations and episode counter.", "\n", "ITERATIONS", "=", "int", "(", "config", ".", "quadrotor_config", "[", "'episode_len_sec'", "]", "*", "config", ".", "quadrotor_config", "[", "'ctrl_freq'", "]", ")", "\n", "\n", "# Use function arguments for workflow testing", "\n", "if", "gui", "is", "not", "None", ":", "\n", "        ", "config", ".", "quadrotor_config", "[", "'gui'", "]", "=", "gui", "\n", "", "if", "max_steps", "is", "not", "None", ":", "\n", "        ", "ITERATIONS", "=", "min", "(", "ITERATIONS", ",", "max_steps", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "# Start a timer.", "\n", "        ", "START", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "==", "1", ":", "\n", "            ", "config", ".", "quadrotor_config", "[", "'task_info'", "]", "[", "'trajectory_type'", "]", "=", "'circle'", "\n", "", "elif", "i", "==", "2", ":", "\n", "            ", "config", ".", "quadrotor_config", "[", "'task_info'", "]", "[", "'trajectory_type'", "]", "=", "'square'", "\n", "\n", "# Create controller.", "\n", "", "env_func", "=", "partial", "(", "make", ",", "\n", "'quadrotor'", ",", "\n", "**", "config", ".", "quadrotor_config", "\n", ")", "\n", "ctrl", "=", "make", "(", "'pid'", ",", "\n", "env_func", ",", "\n", ")", "\n", "\n", "reference_traj", "=", "ctrl", ".", "reference", "\n", "\n", "# Plot trajectory.", "\n", "if", "config", ".", "quadrotor_config", "[", "'gui'", "]", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "reference_traj", ".", "shape", "[", "0", "]", ",", "10", ")", ":", "\n", "                ", "p", ".", "addUserDebugLine", "(", "lineFromXYZ", "=", "[", "reference_traj", "[", "i", "-", "10", ",", "0", "]", ",", "0", ",", "reference_traj", "[", "i", "-", "10", ",", "2", "]", "]", ",", "\n", "lineToXYZ", "=", "[", "reference_traj", "[", "i", ",", "0", "]", ",", "0", ",", "reference_traj", "[", "i", ",", "2", "]", "]", ",", "\n", "lineColorRGB", "=", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "physicsClientId", "=", "ctrl", ".", "env", ".", "PYB_CLIENT", ")", "\n", "\n", "# Run the experiment.", "\n", "", "", "results", "=", "ctrl", ".", "run", "(", "iterations", "=", "ITERATIONS", ")", "\n", "\n", "# Plot the experiment.", "\n", "for", "i", "in", "range", "(", "ITERATIONS", ")", ":", "\n", "# Step the environment and print all returned information.", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", ",", "action", "=", "results", "[", "'obs'", "]", "[", "i", "]", ",", "results", "[", "'reward'", "]", "[", "i", "]", ",", "results", "[", "'done'", "]", "[", "i", "]", ",", "results", "[", "'info'", "]", "[", "i", "]", ",", "results", "[", "'action'", "]", "[", "i", "]", "\n", "\n", "# Print the last action and the information returned at each step.", "\n", "print", "(", "i", ",", "'-th step.'", ")", "\n", "print", "(", "action", ",", "'\\n'", ",", "obs", ",", "'\\n'", ",", "reward", ",", "'\\n'", ",", "done", ",", "'\\n'", ",", "info", ",", "'\\n'", ")", "\n", "\n", "", "ctrl", ".", "close", "(", ")", "\n", "\n", "elapsed_sec", "=", "time", ".", "time", "(", ")", "-", "START", "\n", "print", "(", "\"\\n{:d} iterations (@{:d}Hz) and {:d} episodes in {:.2f} seconds, i.e. {:.2f} steps/sec for a {:.2f}x speedup.\\n\"", "\n", ".", "format", "(", "ITERATIONS", ",", "config", ".", "quadrotor_config", ".", "ctrl_freq", ",", "1", ",", "elapsed_sec", ",", "ITERATIONS", "/", "elapsed_sec", ",", "(", "ITERATIONS", "*", "(", "1.", "/", "config", ".", "quadrotor_config", ".", "ctrl_freq", ")", ")", "/", "elapsed_sec", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run": [[16, 115], ["int", "time.time", "safe_control_gym.utils.configuration.ConfigFactory", "safe_control_gym.utils.configuration.ConfigFactory.add_argument", "safe_control_gym.utils.configuration.ConfigFactory.merge", "safe_control_gym.utils.registration.make.reset", "print", "verbose_api.print_str_with_style", "print", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "print", "range", "safe_control_gym.utils.registration.make.close", "str", "verbose_api.print_str_with_style", "safe_control_gym.utils.registration.make", "print", "str().strip", "str().strip", "str().strip", "str().replace().replace().replace", "verbose_api.print_str_with_style", "str", "str", "str", "safe_control_gym.utils.registration.make.action_space.sample", "safe_control_gym.utils.registration.make.step", "verbose_api.print_str_with_style", "print", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "print", "time.time", "safe_control_gym.utils.registration.make", "print", "str", "str().strip", "str", "str", "str", "str", "str", "safe_control_gym.utils.registration.make.reset", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "verbose_api.print_str_with_style", "print", "print", "str", "str", "str", "str", "str().replace().replace", "str", "str", "bool", "pybullet.getDynamicsInfo", "str", "str", "str", "str", "str", "pybullet.getDynamicsInfo", "str().replace", "inspect.getsource", "str"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.add_argument", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.configuration.ConfigFactory.merge", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.math_and_models.distributions.Categorical.sample", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.step", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style"], ["def", "run", "(", ")", ":", "\n", "    ", "\"\"\"The main function creating, running, and closing an environment.\n\n    \"\"\"", "\n", "# Set iterations and episode counter.", "\n", "num_episodes", "=", "1", "\n", "ITERATIONS", "=", "int", "(", "2", ")", "\n", "# Start a timer.", "\n", "START", "=", "time", ".", "time", "(", ")", "\n", "# Create an environment", "\n", "CONFIG_FACTORY", "=", "ConfigFactory", "(", ")", "\n", "CONFIG_FACTORY", ".", "add_argument", "(", "'--system'", ",", "type", "=", "str", ",", "default", "=", "'cartpole'", ",", "choices", "=", "[", "'cartpole'", ",", "'quadrotor'", "]", ")", "\n", "config", "=", "CONFIG_FACTORY", ".", "merge", "(", ")", "\n", "if", "config", ".", "system", "==", "'cartpole'", ":", "\n", "        ", "env", "=", "make", "(", "config", ".", "system", ",", "**", "config", ".", "cartpole_config", ")", "\n", "", "elif", "config", ".", "system", "==", "'quadrotor'", ":", "\n", "        ", "env", "=", "make", "(", "config", ".", "system", ",", "**", "config", ".", "quadrotor_config", ")", "\n", "# Reset the environment, obtain and print the initial observations.", "\n", "", "initial_obs", ",", "initial_info", "=", "env", ".", "reset", "(", ")", "\n", "print", "(", "'\\n\\n'", ")", "\n", "# Dynamics info", "\n", "print_str_with_style", "(", "'PyBullet dynamics info:'", ",", "7", ")", "\n", "if", "config", ".", "system", "==", "'cartpole'", ":", "\n", "        ", "print", "(", "'\\t'", "+", "str", "(", "p", ".", "getDynamicsInfo", "(", "bodyUniqueId", "=", "env", ".", "CARTPOLE_ID", ",", "linkIndex", "=", "-", "1", ",", "physicsClientId", "=", "env", ".", "PYB_CLIENT", ")", ")", ")", "\n", "", "elif", "config", ".", "system", "==", "'quadrotor'", ":", "\n", "        ", "print", "(", "'\\t'", "+", "str", "(", "p", ".", "getDynamicsInfo", "(", "bodyUniqueId", "=", "env", ".", "DRONE_IDS", "[", "0", "]", ",", "linkIndex", "=", "-", "1", ",", "physicsClientId", "=", "env", ".", "PYB_CLIENT", ")", ")", ")", "\n", "", "print", "(", "'\\n\\n'", ")", "\n", "print_str_with_style", "(", "'Initial reset.\\n'", ",", "7", ")", "\n", "print_str_with_style", "(", "'Open AI gym API:'", ",", "2", ")", "\n", "print_str_with_style", "(", "'\\tInitial observation: '", "+", "str", "(", "initial_obs", ")", ",", "2", ")", "\n", "# ", "\n", "print_str_with_style", "(", "'safe-control-gym API:'", ",", "0", ")", "\n", "print_str_with_style", "(", "'\\tA priori symbolic model:'", ",", "0", ")", "\n", "out", "=", "'\\t\\tState: '", "+", "str", "(", "initial_info", "[", "'symbolic_model'", "]", ".", "x_sym", ")", ".", "strip", "(", "'vertcat'", ")", "\n", "print_str_with_style", "(", "out", ",", "0", ")", "\n", "out", "=", "'\\t\\tInput: '", "+", "str", "(", "initial_info", "[", "'symbolic_model'", "]", ".", "u_sym", ")", ".", "strip", "(", "'vertcat'", ")", "\n", "print_str_with_style", "(", "out", ",", "0", ")", "\n", "out", "=", "'\\t\\tDynamics: '", "+", "str", "(", "initial_info", "[", "'symbolic_model'", "]", ".", "x_dot", ")", ".", "strip", "(", "'vertcat'", ")", "\n", "print_str_with_style", "(", "out", ",", "0", ")", "\n", "out", "=", "'\\t\\tCost: '", "+", "str", "(", "initial_info", "[", "'symbolic_model'", "]", ".", "cost_func", ")", ".", "replace", "(", "'vertcat'", ",", "''", ")", ".", "replace", "(", "', ('", ",", "',\\n\\t\\t\\t('", ")", ".", "replace", "(", "', @'", ",", "',\\n\\t\\t\\t@'", ")", "\n", "print_str_with_style", "(", "out", ",", "0", ")", "\n", "print_str_with_style", "(", "'\\tConstraints:'", ",", "0", ")", "\n", "for", "fun", "in", "initial_info", "[", "'symbolic_constraints'", "]", ":", "\n", "        ", "out", "=", "'\\t'", "+", "str", "(", "inspect", ".", "getsource", "(", "fun", ")", ")", ".", "strip", "(", "'\\n'", ")", "\n", "print_str_with_style", "(", "out", ",", "0", ")", "\n", "", "print_str_with_style", "(", "'\\tA priori parameters:'", ",", "0", ")", "\n", "out", "=", "'\\t\\t'", "+", "str", "(", "initial_info", "[", "'physical_parameters'", "]", ")", "\n", "print_str_with_style", "(", "out", ",", "0", ")", "\n", "print_str_with_style", "(", "'\\tX reference:'", ",", "0", ")", "\n", "out", "=", "'\\t\\t'", "+", "str", "(", "initial_info", "[", "'x_reference'", "]", ")", "\n", "print_str_with_style", "(", "out", ",", "0", ")", "\n", "print_str_with_style", "(", "'\\tU reference:'", ",", "0", ")", "\n", "out", "=", "'\\t\\t'", "+", "str", "(", "initial_info", "[", "'u_reference'", "]", ")", "\n", "print_str_with_style", "(", "out", ",", "0", ")", "\n", "print", "(", "'\\n\\n'", ")", "\n", "# Run an experiment.", "\n", "for", "i", "in", "range", "(", "ITERATIONS", ")", ":", "\n", "# Step by keyboard input", "\n", "# _ = input('Press any key to continue.')", "\n", "# Sample a random action.", "\n", "        ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "# Step the environment and print all returned information.", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "#", "\n", "print_str_with_style", "(", "str", "(", "i", ")", "+", "'-th step.'", ",", "7", ")", "\n", "out", "=", "'\\tApplied action: '", "+", "str", "(", "action", ")", "+", "'\\n'", "\n", "print", "(", "out", ")", "\n", "\n", "print_str_with_style", "(", "'Open AI gym API:'", ",", "2", ")", "\n", "out", "=", "'\\tObservation: '", "+", "str", "(", "obs", ")", "\n", "print_str_with_style", "(", "out", ",", "2", ")", "\n", "out", "=", "'\\tReward: '", "+", "str", "(", "reward", ")", "\n", "print_str_with_style", "(", "out", ",", "2", ")", "\n", "out", "=", "'\\tDone: '", "+", "str", "(", "done", ")", "\n", "print_str_with_style", "(", "out", ",", "2", ")", "\n", "\n", "print_str_with_style", "(", "'safe-control-gym API:'", ",", "0", ")", "\n", "out", "=", "'\\tConstraints evaluations: '", "+", "str", "(", "info", "[", "'constraint_values'", "]", ")", "\n", "print_str_with_style", "(", "out", ",", "0", ")", "\n", "out", "=", "'\\tConstraints violation: '", "+", "str", "(", "bool", "(", "info", "[", "'constraint_violation'", "]", ")", ")", "\n", "print_str_with_style", "(", "out", ",", "0", ")", "\n", "\n", "print", "(", "'\\n\\n'", ")", "\n", "# If an episode is complete, reset the environment.", "\n", "if", "done", ":", "\n", "            ", "num_episodes", "+=", "1", "\n", "new_initial_obs", ",", "new_initial_info", "=", "env", ".", "reset", "(", ")", "\n", "print_str_with_style", "(", "str", "(", "num_episodes", ")", "+", "'-th reset.'", ",", "7", ")", "\n", "print_str_with_style", "(", "'Reset obs'", "+", "str", "(", "new_initial_obs", ")", ",", "2", ")", "\n", "print_str_with_style", "(", "'Reset info'", "+", "str", "(", "new_initial_info", ")", ",", "0", ")", "\n", "print", "(", "'\\n\\n------------------------------------------------------------------------------'", ")", "\n", "print", "(", "'------------------------------------------------------------------------------\\n\\n'", ")", "\n", "\n", "# Close the environment and print timing statistics.", "\n", "", "", "env", ".", "close", "(", ")", "\n", "elapsed_sec", "=", "time", ".", "time", "(", ")", "-", "START", "\n", "out", "=", "str", "(", "\"\\n{:d} iterations (@{:d}Hz) and {:d} episodes in {:.2f} seconds, i.e. {:.2f} steps/sec for a {:.2f}x speedup.\\n\\n\"", "\n", ".", "format", "(", "ITERATIONS", ",", "env", ".", "CTRL_FREQ", ",", "num_episodes", ",", "elapsed_sec", ",", "ITERATIONS", "/", "elapsed_sec", ",", "(", "ITERATIONS", "*", "env", ".", "CTRL_TIMESTEP", ")", "/", "elapsed_sec", ")", ")", "\n", "print_str_with_style", "(", "out", ",", "7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.print_str_with_style": [[131, 154], ["str", "print", "print", "print", "print", "print", "print", "print", "print", "ValueError"], "function", ["None"], ["", "def", "print_str_with_style", "(", "string", ":", "str", "=", "''", ",", "style", ":", "int", "=", "0", ")", ":", "\n", "    ", "\"\"\"Function to convert to string and print in color.\n\n    \"\"\"", "\n", "string", "=", "str", "(", "string", ")", "\n", "if", "style", "==", "0", ":", "\n", "        ", "print", "(", "bcolors", ".", "HEADER", "+", "string", "+", "bcolors", ".", "ENDC", ")", "\n", "", "elif", "style", "==", "1", ":", "\n", "        ", "print", "(", "bcolors", ".", "OKBLUE", "+", "string", "+", "bcolors", ".", "ENDC", ")", "\n", "", "elif", "style", "==", "2", ":", "\n", "        ", "print", "(", "bcolors", ".", "OKCYAN", "+", "string", "+", "bcolors", ".", "ENDC", ")", "\n", "", "elif", "style", "==", "3", ":", "\n", "        ", "print", "(", "bcolors", ".", "OKGREEN", "+", "string", "+", "bcolors", ".", "ENDC", ")", "\n", "", "elif", "style", "==", "4", ":", "\n", "        ", "print", "(", "bcolors", ".", "WARNING", "+", "string", "+", "bcolors", ".", "ENDC", ")", "\n", "", "elif", "style", "==", "5", ":", "\n", "        ", "print", "(", "bcolors", ".", "FAIL", "+", "string", "+", "bcolors", ".", "ENDC", ")", "\n", "", "elif", "style", "==", "6", ":", "\n", "        ", "print", "(", "bcolors", ".", "BOLD", "+", "string", "+", "bcolors", ".", "ENDC", ")", "\n", "", "elif", "style", "==", "7", ":", "\n", "        ", "print", "(", "bcolors", ".", "UNDERLINE", "+", "string", "+", "bcolors", ".", "ENDC", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'[ERROR] unknown style!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.tests.test_build.test_imports": [[1, 7], ["None"], "function", ["None"], ["def", "test_imports", "(", ")", ":", "\n", "    ", "import", "safe_control_gym", "\n", "import", "safe_control_gym", ".", "controllers", "\n", "import", "safe_control_gym", ".", "envs", "\n", "import", "safe_control_gym", ".", "envs", ".", "env_wrappers", "\n", "import", "safe_control_gym", ".", "utils", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.test_pid.test_pid.test_pid_trajectory_tracking": [[5, 8], ["experiments.pid.pid_experiment.run"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run"], ["def", "test_pid_trajectory_tracking", "(", ")", ":", "\n", "    ", "sys", ".", "argv", "[", "1", ":", "]", "=", "[", "'--task'", ",", "'quadrotor'", ",", "'--algo'", ",", "'pid'", ",", "'--overrides'", ",", "'./experiments/pid/config_pid_quadrotor.yaml'", "]", "\n", "run", "(", "gui", "=", "False", ",", "max_steps", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.test_pid.test_pid.test_pid_stabilization": [[9, 12], ["experiments.pid.pid_experiment.run"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run"], ["", "def", "test_pid_stabilization", "(", ")", ":", "\n", "    ", "sys", ".", "argv", "[", "1", ":", "]", "=", "[", "'--task'", ",", "'quadrotor'", ",", "'--algo'", ",", "'pid'", ",", "'--overrides'", ",", "'./experiments/pid/config_pid_quadrotor_stabilization.yaml'", "]", "\n", "run", "(", "gui", "=", "False", ",", "max_steps", "=", "10", ")", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.test_examples.test_examples.test_tracking": [[6, 9], ["examples.tracking.run"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run"], ["def", "test_tracking", "(", ")", ":", "\n", "    ", "sys", ".", "argv", "[", "1", ":", "]", "=", "[", "'--overrides'", ",", "'./examples/tracking.yaml'", "]", "\n", "tracking_run", "(", "gui", "=", "False", ",", "max_steps", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.test_examples.test_examples.test_verbose_api": [[10, 13], ["examples.verbose_api.run"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run"], ["", "def", "test_verbose_api", "(", ")", ":", "\n", "    ", "sys", ".", "argv", "[", "1", ":", "]", "=", "[", "'--overrides'", ",", "'./examples/verbose_api.yaml'", "]", "\n", "verbose_run", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.train": [[18, 50], ["safe_control_gym.utils.utils.set_seed_from_config", "safe_control_gym.utils.utils.set_device_from_config", "functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.learn", "safe_control_gym.utils.registration.make.close", "print", "safe_control_gym.utils.utils.set_dir_from_config", "safe_control_gym.utils.registration.make.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_seed_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_device_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.learn", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_dir_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load"], ["def", "train", "(", "config", ")", ":", "\n", "    ", "\"\"\"Training template.\n    \n    Usage:\n        * to start training, use with `--func train`.\n        * to restore from a previous training, additionally use `--restore {dir_path}` \n            where `dir_path` is the output folder from previous training.  \n\n    \"\"\"", "\n", "# Experiment setup.", "\n", "if", "not", "config", ".", "restore", ":", "\n", "        ", "set_dir_from_config", "(", "config", ")", "\n", "", "set_seed_from_config", "(", "config", ")", "\n", "set_device_from_config", "(", "config", ")", "\n", "# Define function to create task/env.", "\n", "env_func", "=", "partial", "(", "make", ",", "config", ".", "task", ",", "output_dir", "=", "config", ".", "output_dir", ",", "**", "config", ".", "task_config", ")", "\n", "# Create the controller/control_agent.", "\n", "control_agent", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "training", "=", "True", ",", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"model_latest.pt\"", ")", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "device", "=", "config", ".", "device", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "control_agent", ".", "reset", "(", ")", "\n", "if", "config", ".", "restore", ":", "\n", "        ", "control_agent", ".", "load", "(", "os", ".", "path", ".", "join", "(", "config", ".", "restore", ",", "\"model_latest.pt\"", ")", ")", "\n", "# Training.", "\n", "", "control_agent", ".", "learn", "(", ")", "\n", "control_agent", ".", "close", "(", ")", "\n", "print", "(", "\"Training done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.make_plots": [[52, 67], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "safe_control_gym.utils.utils.mkdirs", "safe_control_gym.utils.plotting.plot_from_logs", "print"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.mkdirs", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.plotting.plot_from_logs"], ["", "def", "make_plots", "(", "config", ")", ":", "\n", "    ", "\"\"\"Produces plots for logged stats during training.\n    \n    Usage\n        * use with `--func plot` and `--restore {dir_path}` where `dir_path` is \n            the experiment folder containing the logs.\n        * save figures under `dir_path/plots/`.\n\n    \"\"\"", "\n", "# Define source and target log locations.", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"logs\"", ")", "\n", "plot_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"plots\"", ")", "\n", "mkdirs", "(", "plot_dir", ")", "\n", "plot_from_logs", "(", "log_dir", ",", "plot_dir", ",", "window", "=", "3", ")", "\n", "print", "(", "\"Plotting done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.walkthroughs.tutorial.test_policy": [[69, 128], ["safe_control_gym.utils.utils.set_device_from_config", "functools.partial", "safe_control_gym.utils.registration.make", "safe_control_gym.utils.registration.make.reset", "safe_control_gym.utils.registration.make.run", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "print", "safe_control_gym.utils.registration.make.close", "print", "safe_control_gym.utils.utils.set_seed_from_config", "safe_control_gym.utils.registration.make.load", "os.path.join", "os.path.join", "os.path.dirname", "os.path.dirname", "open", "pickle.dump", "ep_lengths.mean", "ep_lengths.std", "ep_returns.mean", "ep_returns.std", "mse.mean", "mse.std", "safe_control_gym.utils.utils.save_video", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_device_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.registration.make", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.reset", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.examples.verbose_api.run", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.gym_control.cartpole.CartPole.close", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.set_seed_from_config", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.sac.sac.SAC.load", "home.repos.pwc.inspect_result.utiasDSL_safe-control-gym.utils.utils.save_video"], ["", "def", "test_policy", "(", "config", ")", ":", "\n", "    ", "\"\"\"Run the (trained) policy/controller for evaluation.\n    \n    Usage\n        * use with `--func test`.\n        * to test policy from a trained model checkpoint, additionally use \n            `--restore {dir_path}` where `dir_path` is folder to the trained model.\n        * to test un-trained policy (e.g. non-learning based), use as it is.\n\n    \"\"\"", "\n", "# Evaluation setup.", "\n", "set_device_from_config", "(", "config", ")", "\n", "if", "config", ".", "set_test_seed", ":", "\n", "# seed the evaluation (both controller and env) if given", "\n", "        ", "set_seed_from_config", "(", "config", ")", "\n", "env_seed", "=", "config", ".", "seed", "\n", "", "else", ":", "\n", "        ", "env_seed", "=", "None", "\n", "# Define function to create task/env.", "\n", "", "env_func", "=", "partial", "(", "make", ",", "config", ".", "task", ",", "seed", "=", "env_seed", ",", "output_dir", "=", "config", ".", "output_dir", ",", "**", "config", ".", "task_config", ")", "\n", "# Create the controller/control_agent.", "\n", "control_agent", "=", "make", "(", "config", ".", "algo", ",", "\n", "env_func", ",", "\n", "training", "=", "False", ",", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"model_latest.pt\"", ")", ",", "\n", "output_dir", "=", "config", ".", "output_dir", ",", "\n", "device", "=", "config", ".", "device", ",", "\n", "seed", "=", "config", ".", "seed", ",", "\n", "**", "config", ".", "algo_config", ")", "\n", "control_agent", ".", "reset", "(", ")", "\n", "if", "config", ".", "restore", ":", "\n", "        ", "control_agent", ".", "load", "(", "os", ".", "path", ".", "join", "(", "config", ".", "restore", ",", "\"model_latest.pt\"", ")", ")", "\n", "# Test controller.", "\n", "", "results", "=", "control_agent", ".", "run", "(", "n_episodes", "=", "config", ".", "algo_config", ".", "eval_batch_size", ",", "\n", "render", "=", "config", ".", "render", ",", "\n", "verbose", "=", "config", ".", "verbose", ",", "\n", "use_adv", "=", "config", ".", "use_adv", ")", "\n", "# Save evalution results.", "\n", "if", "config", ".", "eval_output_dir", "is", "not", "None", ":", "\n", "        ", "eval_output_dir", "=", "config", ".", "eval_output_dir", "\n", "", "else", ":", "\n", "        ", "eval_output_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "\"eval\"", ")", "\n", "", "os", ".", "makedirs", "(", "eval_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "# test trajs and statistics ", "\n", "eval_path", "=", "os", ".", "path", ".", "join", "(", "eval_output_dir", ",", "config", ".", "eval_output_path", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "eval_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "eval_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "results", ",", "f", ")", "\n", "", "ep_lengths", "=", "results", "[", "\"ep_lengths\"", "]", "\n", "ep_returns", "=", "results", "[", "\"ep_returns\"", "]", "\n", "mse", "=", "results", "[", "\"mse\"", "]", "\n", "msg", "=", "\"eval_ep_length {:.2f} +/- {:.2f}\\n\"", ".", "format", "(", "ep_lengths", ".", "mean", "(", ")", ",", "ep_lengths", ".", "std", "(", ")", ")", "\n", "msg", "+=", "\"eval_ep_return {:.3f} +/- {:.3f}\\n\"", ".", "format", "(", "ep_returns", ".", "mean", "(", ")", ",", "ep_returns", ".", "std", "(", ")", ")", "\n", "msg", "+=", "\"eval_mse {:.3f} +/- {:.3f}\\n\"", ".", "format", "(", "mse", ".", "mean", "(", ")", ",", "mse", ".", "std", "(", ")", ")", "\n", "print", "(", "msg", ")", "\n", "if", "\"frames\"", "in", "results", ":", "\n", "        ", "save_video", "(", "os", ".", "path", ".", "join", "(", "eval_output_dir", ",", "\"video.gif\"", ")", ",", "results", "[", "\"frames\"", "]", ")", "\n", "", "control_agent", ".", "close", "(", ")", "\n", "print", "(", "\"Evaluation done.\"", ")", "\n", "\n"]]}