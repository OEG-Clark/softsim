{"home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BerBandit.__init__": [[66, 73], ["numpy.copy", "numpy.argmax", "AdaTS_Public.BerBandit.randomize"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "mu", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "copy", "(", "mu", ")", "\n", "self", ".", "K", "=", "self", ".", "mu", ".", "size", "\n", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BerBandit.randomize": [[74, 77], ["numpy.random.rand"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# generate random rewards", "\n", "    ", "self", ".", "rt", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "mu", ")", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BerBandit.reward": [[78, 81], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BerBandit.regret": [[82, 85], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BerBandit.pregret": [[86, 89], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mu", "[", "self", ".", "best_arm", "]", "-", "self", ".", "mu", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BerBandit.print": [[90, 93], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "return", "\"Bernoulli bandit with arms (%s)\"", "%", "\", \"", ".", "join", "(", "\"%.3f\"", "%", "s", "for", "s", "in", "self", ".", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BetaBandit.__init__": [[98, 106], ["numpy.copy", "numpy.argmax", "AdaTS_Public.BetaBandit.randomize"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "mu", ",", "a_plus_b", "=", "4", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "copy", "(", "mu", ")", "\n", "self", ".", "K", "=", "self", ".", "mu", ".", "size", "\n", "self", ".", "a_plus_b", "=", "a_plus_b", "\n", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BetaBandit.randomize": [[107, 111], ["numpy.random.beta"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# generate random rewards", "\n", "    ", "self", ".", "rt", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "a_plus_b", "*", "self", ".", "mu", ",", "self", ".", "a_plus_b", "*", "(", "1", "-", "self", ".", "mu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BetaBandit.reward": [[112, 115], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BetaBandit.regret": [[116, 119], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BetaBandit.pregret": [[120, 123], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mu", "[", "self", ".", "best_arm", "]", "-", "self", ".", "mu", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.BetaBandit.print": [[124, 127], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "return", "\"Beta bandit with arms (%s)\"", "%", "\", \"", ".", "join", "(", "\"%.3f\"", "%", "s", "for", "s", "in", "self", ".", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.GaussBandit.__init__": [[132, 140], ["numpy.copy", "numpy.argmax", "AdaTS_Public.GaussBandit.randomize"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "mu", ",", "sigma", "=", "0.5", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "copy", "(", "mu", ")", "\n", "self", ".", "K", "=", "self", ".", "mu", ".", "size", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.GaussBandit.randomize": [[141, 144], ["numpy.random.randn"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# generate random rewards", "\n", "    ", "self", ".", "rt", "=", "self", ".", "mu", "+", "self", ".", "sigma", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.GaussBandit.reward": [[145, 148], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.GaussBandit.regret": [[149, 152], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.GaussBandit.pregret": [[153, 156], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mu", "[", "self", ".", "best_arm", "]", "-", "self", ".", "mu", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.GaussBandit.print": [[157, 160], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "return", "\"Gaussian bandit with arms (%s)\"", "%", "\", \"", ".", "join", "(", "\"%.3f\"", "%", "s", "for", "s", "in", "self", ".", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinBandit.__init__": [[165, 178], ["numpy.copy", "numpy.copy", "AdaTS_Public.LinBandit.X.dot", "numpy.argmax", "AdaTS_Public.LinBandit.randomize"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "X", ",", "theta", ",", "noise", "=", "\"normal\"", ",", "sigma", "=", "0.5", ")", ":", "\n", "    ", "self", ".", "X", "=", "np", ".", "copy", "(", "X", ")", "\n", "self", ".", "K", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "d", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "theta", "=", "np", ".", "copy", "(", "theta", ")", "\n", "self", ".", "noise", "=", "noise", "\n", "if", "self", ".", "noise", "==", "\"normal\"", ":", "\n", "      ", "self", ".", "sigma", "=", "sigma", "\n", "\n", "", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "self", ".", "theta", ")", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinBandit.randomize": [[179, 187], ["numpy.random.randn", "numpy.random.beta", "numpy.random.rand"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# generate random rewards", "\n", "    ", "if", "self", ".", "noise", "==", "\"normal\"", ":", "\n", "      ", "self", ".", "rt", "=", "self", ".", "mu", "+", "self", ".", "sigma", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "K", ")", "\n", "", "elif", "self", ".", "noise", "==", "\"bernoulli\"", ":", "\n", "      ", "self", ".", "rt", "=", "(", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "<", "self", ".", "mu", ")", ".", "astype", "(", "float", ")", "\n", "", "elif", "self", ".", "noise", "==", "\"beta\"", ":", "\n", "      ", "self", ".", "rt", "=", "np", ".", "random", ".", "beta", "(", "4", "*", "self", ".", "mu", ",", "4", "*", "(", "1", "-", "self", ".", "mu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinBandit.reward": [[188, 191], ["None"], "methods", ["None"], ["", "", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinBandit.regret": [[192, 195], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinBandit.pregret": [[196, 199], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mu", "[", "self", ".", "best_arm", "]", "-", "self", ".", "mu", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinBandit.print": [[200, 210], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "noise", "==", "\"normal\"", ":", "\n", "      ", "return", "\"Linear bandit: %d dimensions, %d arms\"", "%", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "", "elif", "self", ".", "noise", "==", "\"bernoulli\"", ":", "\n", "      ", "return", "\"Bernoulli linear bandit: %d dimensions, %d arms\"", "%", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "", "elif", "self", ".", "noise", "==", "\"beta\"", ":", "\n", "      ", "return", "\"Beta linear bandit: %d dimensions, %d arms\"", "%", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogBandit.__init__": [[215, 225], ["numpy.copy", "numpy.copy", "numpy.argmax", "AdaTS_Public.LogBandit.randomize", "numpy.exp", "AdaTS_Public.LogBandit.X.dot"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "X", ",", "theta", ")", ":", "\n", "    ", "self", ".", "X", "=", "np", ".", "copy", "(", "X", ")", "\n", "self", ".", "K", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "d", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "theta", "=", "np", ".", "copy", "(", "theta", ")", "\n", "\n", "self", ".", "mu", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "self", ".", "X", ".", "dot", "(", "self", ".", "theta", ")", ")", ")", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogBandit.randomize": [[226, 229], ["numpy.random.rand"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# generate random rewards", "\n", "    ", "self", ".", "rt", "=", "(", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "<", "self", ".", "mu", ")", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogBandit.reward": [[230, 233], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogBandit.regret": [[234, 237], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogBandit.pregret": [[238, 241], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mu", "[", "self", ".", "best_arm", "]", "-", "self", ".", "mu", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogBandit.print": [[242, 244], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "return", "\"Logistic bandit: %d dimensions, %d arms\"", "%", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogBandit.ball_env": [[245, 274], ["range", "numpy.eye", "numpy.random.randn", "numpy.hstack", "numpy.random.randn", "numpy.append", "env.append", "AdaTS_Public.LogBandit.print"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["", "@", "staticmethod", "\n", "def", "ball_env", "(", "d", "=", "3", ",", "K", "=", "10", ",", "num_env", "=", "100", ")", ":", "\n", "    ", "\"\"\"Arm features and theta are generated randomly in a ball.\"\"\"", "\n", "\n", "env", "=", "[", "]", "\n", "for", "env_id", "in", "range", "(", "num_env", ")", ":", "\n", "# standard d-dimensional basis (with a bias term)", "\n", "      ", "basis", "=", "np", ".", "eye", "(", "d", ")", "\n", "basis", "[", ":", ",", "-", "1", "]", "=", "1", "\n", "\n", "# arm features in a unit (d - 2)-sphere", "\n", "X", "=", "np", ".", "random", ".", "randn", "(", "K", ",", "d", "-", "1", ")", "\n", "X", "/=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "X", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "K", ",", "1", ")", ")", ")", ")", "# bias term", "\n", "X", "[", ":", "basis", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "basis", "\n", "\n", "# parameter vector in a (d - 2)-sphere with radius 1.5", "\n", "theta", "=", "np", ".", "random", ".", "randn", "(", "d", "-", "1", ")", "\n", "theta", "*=", "1.5", "/", "np", ".", "sqrt", "(", "np", ".", "square", "(", "theta", ")", ".", "sum", "(", ")", ")", "\n", "theta", "=", "np", ".", "append", "(", "theta", ",", "[", "0", "]", ")", "\n", "\n", "# create environment", "\n", "env", ".", "append", "(", "LogBandit", "(", "X", ",", "theta", ")", ")", "\n", "print", "(", "\"%3d: %.2f %.2f | \"", "%", "(", "env", "[", "-", "1", "]", ".", "best_arm", ",", "\n", "env", "[", "-", "1", "]", ".", "mu", ".", "min", "(", ")", ",", "env", "[", "-", "1", "]", ".", "mu", ".", "max", "(", ")", ")", ",", "end", "=", "\"\"", ")", "\n", "if", "(", "env_id", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "        ", "print", "(", ")", "\n", "\n", "", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.CoBandit.__init__": [[279, 291], ["numpy.copy", "numpy.copy", "AdaTS_Public.CoBandit.X.dot", "numpy.argmax", "AdaTS_Public.CoBandit.randomize"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "X", ",", "Theta", ",", "sigma", "=", "0.5", ")", ":", "\n", "    ", "self", ".", "X", "=", "np", ".", "copy", "(", "X", ")", "# [number of contexs] x d feature matrix", "\n", "self", ".", "Theta", "=", "np", ".", "copy", "(", "Theta", ")", "# d x [number of arms] parameter matrix", "\n", "self", ".", "K", "=", "self", ".", "Theta", ".", "shape", "[", "1", "]", "\n", "self", ".", "d", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "num_contexts", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "self", ".", "Theta", ")", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.CoBandit.randomize": [[292, 299], ["numpy.random.randint", "numpy.random.randn"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# choose context", "\n", "    ", "self", ".", "ct", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_contexts", ")", "\n", "self", ".", "mut", "=", "self", ".", "mu", "[", "self", ".", "ct", ",", ":", "]", "\n", "\n", "# generate stochastic rewards", "\n", "self", ".", "rt", "=", "self", ".", "mut", "+", "self", ".", "sigma", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.CoBandit.reward": [[300, 303], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.CoBandit.regret": [[304, 307], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "[", "self", ".", "ct", "]", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.CoBandit.pregret": [[308, 311], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mut", "[", "self", ".", "best_arm", "[", "self", ".", "ct", "]", "]", "-", "self", ".", "mut", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.CoBandit.print": [[312, 314], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "return", "\"Contextual bandit: %d dimensions, %d arms\"", "%", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCB1.__init__": [[320, 330], ["params.items", "setattr", "numpy.ones", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "crs", "=", "1.0", "# confidence region scaling", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "pulls", "=", "1e-6", "*", "np", ".", "ones", "(", "self", ".", "K", ")", "# number of pulls", "\n", "self", ".", "reward", "=", "1e-6", "*", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "self", ".", "tiebreak", "=", "1e-6", "*", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "# tie breaking", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCB1.update": [[331, 334], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "self", ".", "reward", "[", "arm", "]", "+=", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCB1.get_arm": [[335, 344], ["numpy.argmax", "numpy.sqrt", "numpy.log", "numpy.sqrt"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "# UCBs", "\n", "    ", "t", "+=", "1", "# time starts at one", "\n", "ciw", "=", "self", ".", "crs", "*", "np", ".", "sqrt", "(", "2", "*", "np", ".", "log", "(", "t", ")", ")", "\n", "self", ".", "ucb", "=", "self", ".", "reward", "/", "self", ".", "pulls", "+", "ciw", "*", "np", ".", "sqrt", "(", "1", "/", "self", ".", "pulls", ")", "+", "self", ".", "tiebreak", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "ucb", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCB1.print": [[345, 348], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"UCB1\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCBV.__init__": [[351, 362], ["params.items", "numpy.zeros", "numpy.zeros", "numpy.zeros", "setattr", "numpy.random.rand"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "n", "=", "n", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "pulls", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# number of pulls", "\n", "self", ".", "reward", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "self", ".", "reward2", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# cumulative squared reward", "\n", "self", ".", "tiebreak", "=", "1e-6", "*", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "# tie breaking", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCBV.update": [[363, 367], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "self", ".", "reward", "[", "arm", "]", "+=", "r", "\n", "self", ".", "reward2", "[", "arm", "]", "+=", "r", "*", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCBV.get_arm": [[368, 392], ["numpy.argmax", "numpy.zeros", "numpy.maximum", "numpy.power", "numpy.square", "numpy.sqrt", "numpy.log", "numpy.log"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "if", "t", "<", "self", ".", "K", ":", "\n", "# pull each arm once in the first K rounds", "\n", "      ", "self", ".", "ucb", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "self", ".", "ucb", "[", "t", "]", "=", "1", "\n", "", "else", ":", "\n", "# UCBs", "\n", "      ", "t", "+=", "1", "# time starts at one", "\n", "\n", "# from \\sum_{t = 1}^n \\sum_{s = 1}^t (1 / n^2) <= 1", "\n", "delta", "=", "1.0", "/", "np", ".", "power", "(", "self", ".", "n", ",", "2", ")", "\n", "# # from \\sum_{t = 1}^n \\sum_{s = 1}^t (1 / t^3) <= \\pi^2 / 6", "\n", "# delta = 1.0 / np.power(t, 3)", "\n", "\n", "muhat", "=", "self", ".", "reward", "/", "self", ".", "pulls", "\n", "varhat", "=", "(", "self", ".", "reward2", "-", "self", ".", "pulls", "*", "np", ".", "square", "(", "muhat", ")", ")", "/", "self", ".", "pulls", "\n", "varhat", "=", "np", ".", "maximum", "(", "varhat", ",", "0", ")", "\n", "self", ".", "ucb", "=", "muhat", "+", "np", ".", "sqrt", "(", "2", "*", "varhat", "*", "np", ".", "log", "(", "3", "/", "delta", ")", "/", "self", ".", "pulls", ")", "+", "3", "*", "np", ".", "log", "(", "3", "/", "delta", ")", "/", "self", ".", "pulls", "+", "self", ".", "tiebreak", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "ucb", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCBV.print": [[393, 396], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"UCB-V\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.KLUCB.__init__": [[399, 408], ["params.items", "setattr", "numpy.ones", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "pulls", "=", "1e-6", "*", "np", ".", "ones", "(", "self", ".", "K", ")", "# number of pulls", "\n", "self", ".", "reward", "=", "1e-6", "*", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "self", ".", "tiebreak", "=", "1e-6", "*", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "# tie breaking", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.KLUCB.UCB": [[409, 421], ["numpy.minimum", "range", "numpy.maximum", "numpy.ones", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["None"], ["", "def", "UCB", "(", "self", ",", "p", ",", "N", ",", "t", ")", ":", "\n", "    ", "C", "=", "(", "np", ".", "log", "(", "t", ")", "+", "3", "*", "np", ".", "log", "(", "np", ".", "log", "(", "t", ")", "+", "1e-6", ")", ")", "/", "N", "\n", "\n", "qmin", "=", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "p", ",", "1e-6", ")", ",", "1", "-", "1e-6", ")", "\n", "qmax", "=", "(", "1", "-", "1e-6", ")", "*", "np", ".", "ones", "(", "p", ".", "size", ")", "\n", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "      ", "q", "=", "(", "qmax", "+", "qmin", ")", "/", "2", "\n", "ndx", "=", "(", "p", "*", "np", ".", "log", "(", "p", "/", "q", ")", "+", "(", "1", "-", "p", ")", "*", "np", ".", "log", "(", "(", "1", "-", "p", ")", "/", "(", "1", "-", "q", ")", ")", ")", "<", "C", "\n", "qmin", "[", "ndx", "]", "=", "q", "[", "ndx", "]", "\n", "qmax", "[", "~", "ndx", "]", "=", "q", "[", "~", "ndx", "]", "\n", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.KLUCB.update": [[422, 427], ["numpy.random.rand"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "if", "(", "r", ">", "0", ")", "and", "(", "r", "<", "1", ")", ":", "\n", "      ", "r", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "<", "r", ")", ".", "astype", "(", "float", ")", "\n", "", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "self", ".", "reward", "[", "arm", "]", "+=", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.KLUCB.get_arm": [[428, 436], ["numpy.argmax", "AdaTS_Public.KLUCB.UCB"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.KLUCB.UCB"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "# UCBs", "\n", "    ", "t", "+=", "1", "# time starts at one", "\n", "self", ".", "ucb", "=", "self", ".", "UCB", "(", "self", ".", "reward", "/", "self", ".", "pulls", ",", "self", ".", "pulls", ",", "t", ")", "+", "self", ".", "tiebreak", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "ucb", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.KLUCB.print": [[437, 440], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"KL-UCB\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.TS.__init__": [[443, 455], ["numpy.ones", "numpy.ones", "params.items", "isinstance", "setattr", "setattr", "numpy.copy"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "crs", "=", "1.0", "# confidence region scaling", "\n", "\n", "self", ".", "alpha", "=", "np", ".", "ones", "(", "self", ".", "K", ")", "# positive observations", "\n", "self", ".", "beta", "=", "np", ".", "ones", "(", "self", ".", "K", ")", "# negative observations", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "setattr", "(", "self", ",", "attr", ",", "np", ".", "copy", "(", "val", ")", ")", "\n", "", "else", ":", "\n", "        ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.TS.update": [[456, 461], ["numpy.random.rand"], "methods", ["None"], ["", "", "", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "if", "(", "r", ">", "0", ")", "and", "(", "r", "<", "1", ")", ":", "\n", "      ", "r", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "<", "r", ")", ".", "astype", "(", "float", ")", "\n", "", "self", ".", "alpha", "[", "arm", "]", "+=", "r", "\n", "self", ".", "beta", "[", "arm", "]", "+=", "1", "-", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.TS.get_arm": [[462, 474], ["numpy.argmax", "numpy.zeros", "numpy.square", "numpy.random.beta"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "if", "t", "<", "self", ".", "K", ":", "\n", "# each arm is initially pulled once", "\n", "      ", "self", ".", "mu", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "self", ".", "mu", "[", "t", "]", "=", "1", "\n", "", "else", ":", "\n", "# posterior sampling", "\n", "      ", "crs2", "=", "np", ".", "square", "(", "self", ".", "crs", ")", "\n", "self", ".", "mu", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "alpha", "/", "crs2", ",", "self", ".", "beta", "/", "crs2", ")", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.TS.print": [[475, 478], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"TS\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.GaussTS.__init__": [[481, 493], ["numpy.zeros", "params.items", "numpy.zeros", "numpy.zeros", "numpy.ones", "setattr"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "sigma", "=", "0.5", "\n", "\n", "self", ".", "mu0", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "self", ".", "sigma0", "=", "0.5", "*", "np", ".", "ones", "(", "self", ".", "K", ")", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "pulls", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# number of pulls", "\n", "self", ".", "reward", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.GaussTS.update": [[494, 497], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "self", ".", "reward", "[", "arm", "]", "+=", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.GaussTS.get_arm": [[498, 515], ["numpy.argmax", "numpy.zeros", "numpy.square", "numpy.square", "numpy.sqrt", "numpy.random.randn"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "if", "t", "<", "self", ".", "K", ":", "\n", "# each arm is initially pulled once", "\n", "      ", "self", ".", "mu", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "self", ".", "mu", "[", "t", "]", "=", "1", "\n", "", "else", ":", "\n", "# posterior distribution", "\n", "      ", "sigma2", "=", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "sigma02", "=", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "post_var", "=", "1.0", "/", "(", "1.0", "/", "sigma02", "+", "self", ".", "pulls", "/", "sigma2", ")", "\n", "post_mean", "=", "post_var", "*", "(", "self", ".", "mu0", "/", "sigma02", "+", "self", ".", "reward", "/", "sigma2", ")", "\n", "\n", "# posterior sampling", "\n", "self", ".", "mu", "=", "post_mean", "+", "np", ".", "sqrt", "(", "post_var", ")", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "K", ")", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.GaussTS.print": [[516, 519], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"Gaussian TS\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.EpsilonGreedy.__init__": [[522, 542], ["params.items", "numpy.zeros", "numpy.zeros", "hasattr", "numpy.sqrt", "setattr", "numpy.ones", "numpy.ones", "AdaTS_Public.EpsilonGreedy.base_Alg"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "env", "=", "env", "\n", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "epsilon", "=", "self", ".", "K", "/", "np", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "crs", "=", "1.0", "# confidence region scaling", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "pulls", "=", "1e-6", "*", "np", ".", "ones", "(", "self", ".", "K", ")", "# number of pulls", "\n", "self", ".", "reward", "=", "1e-6", "*", "np", ".", "ones", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "# self.tiebreak = 1e-6 * np.random.rand(self.K)  # tie breaking", "\n", "\n", "self", ".", "grad", "=", "np", ".", "zeros", "(", "n", ")", "\n", "self", ".", "metrics", "=", "np", ".", "zeros", "(", "(", "n", ",", "3", ")", ")", "\n", "\n", "# initialize baseline", "\n", "self", ".", "is_baseline", "=", "hasattr", "(", "self", ",", "\"base_Alg\"", ")", "\n", "if", "self", ".", "is_baseline", ":", "\n", "      ", "self", ".", "base_alg", "=", "self", ".", "base_Alg", "(", "env", ",", "n", ",", "self", ".", "base_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.EpsilonGreedy.update": [[543, 557], ["AdaTS_Public.EpsilonGreedy.base_alg.get_arm", "AdaTS_Public.EpsilonGreedy.env.reward", "AdaTS_Public.EpsilonGreedy.base_alg.update", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.get_arm", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.reward", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["", "", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "self", ".", "reward", "[", "arm", "]", "+=", "r", "\n", "\n", "best_r", "=", "self", ".", "env", ".", "rt", "[", "self", ".", "env", ".", "best_arm", "]", "\n", "if", "self", ".", "is_baseline", ":", "\n", "# baseline action and update", "\n", "      ", "base_arm", "=", "self", ".", "base_alg", ".", "get_arm", "(", "t", ")", "\n", "base_r", "=", "self", ".", "env", ".", "reward", "(", "base_arm", ")", "\n", "self", ".", "base_alg", ".", "update", "(", "t", ",", "base_arm", ",", "base_r", ")", "\n", "\n", "self", ".", "metrics", "[", "t", ",", ":", "]", "=", "np", ".", "asarray", "(", "[", "r", ",", "r", "-", "best_r", ",", "r", "-", "base_r", "]", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "metrics", "[", "t", ",", ":", "]", "=", "np", ".", "asarray", "(", "[", "r", ",", "r", "-", "best_r", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.EpsilonGreedy.get_arm": [[558, 576], ["numpy.argmax", "numpy.random.rand", "numpy.random.randint", "numpy.arange"], "methods", ["None"], ["", "", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "# decision statistics", "\n", "    ", "muhat", "=", "self", ".", "reward", "/", "self", ".", "pulls", "\n", "best_arm", "=", "np", ".", "argmax", "(", "muhat", ")", "\n", "\n", "# probabilities of pulling arms", "\n", "eps", "=", "self", ".", "crs", "*", "self", ".", "epsilon", "\n", "p", "=", "(", "1", "-", "eps", ")", "*", "(", "np", ".", "arange", "(", "self", ".", "K", ")", "==", "best_arm", ")", "+", "eps", "/", "self", ".", "K", "\n", "\n", "# pull the arm", "\n", "arm", "=", "best_arm", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "eps", ":", "\n", "      ", "arm", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "K", ")", "\n", "\n", "# derivative of the probability of the pulled arm", "\n", "", "self", ".", "grad", "[", "t", "]", "=", "self", ".", "epsilon", "*", "(", "1", "/", "self", ".", "K", "-", "(", "arm", "==", "best_arm", ")", ")", "/", "p", "[", "arm", "]", "\n", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.EpsilonGreedy.print": [[577, 580], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"e-greedy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.Exp3.__init__": [[583, 601], ["min", "params.items", "numpy.zeros", "numpy.zeros", "numpy.zeros", "hasattr", "numpy.sqrt", "setattr", "AdaTS_Public.Exp3.base_Alg", "numpy.log"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "env", "=", "env", "\n", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "crs", "=", "min", "(", "1", ",", "np", ".", "sqrt", "(", "self", ".", "K", "*", "np", ".", "log", "(", "self", ".", "K", ")", "/", "(", "(", "np", ".", "e", "-", "1", ")", "*", "n", ")", ")", ")", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "eta", "=", "self", ".", "crs", "/", "self", ".", "K", "\n", "self", ".", "reward", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "\n", "self", ".", "grad", "=", "np", ".", "zeros", "(", "n", ")", "\n", "self", ".", "metrics", "=", "np", ".", "zeros", "(", "(", "n", ",", "3", ")", ")", "\n", "\n", "# initialize baseline", "\n", "self", ".", "is_baseline", "=", "hasattr", "(", "self", ",", "\"base_Alg\"", ")", "\n", "if", "self", ".", "is_baseline", ":", "\n", "      ", "self", ".", "base_alg", "=", "self", ".", "base_Alg", "(", "env", ",", "n", ",", "self", ".", "base_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.Exp3.update": [[602, 615], ["AdaTS_Public.Exp3.base_alg.get_arm", "AdaTS_Public.Exp3.env.reward", "AdaTS_Public.Exp3.base_alg.update", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.get_arm", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.reward", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["", "", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "reward", "[", "arm", "]", "+=", "r", "/", "self", ".", "phat", "[", "arm", "]", "\n", "\n", "best_r", "=", "self", ".", "env", ".", "rt", "[", "self", ".", "env", ".", "best_arm", "]", "\n", "if", "self", ".", "is_baseline", ":", "\n", "# baseline action and update", "\n", "      ", "base_arm", "=", "self", ".", "base_alg", ".", "get_arm", "(", "t", ")", "\n", "base_r", "=", "self", ".", "env", ".", "reward", "(", "base_arm", ")", "\n", "self", ".", "base_alg", ".", "update", "(", "t", ",", "base_arm", ",", "base_r", ")", "\n", "\n", "self", ".", "metrics", "[", "t", ",", ":", "]", "=", "np", ".", "asarray", "(", "[", "r", ",", "r", "-", "best_r", ",", "r", "-", "base_r", "]", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "metrics", "[", "t", ",", ":", "]", "=", "np", ".", "asarray", "(", "[", "r", ",", "r", "-", "best_r", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.Exp3.get_arm": [[616, 633], ["numpy.exp", "numpy.exp.sum", "numpy.cumsum", "AdaTS_Public.Exp3.reward.max", "numpy.flatnonzero", "numpy.random.rand", "numpy.exp.dot"], "methods", ["None"], ["", "", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "# probabilities of pulling arms", "\n", "    ", "scaled_reward", "=", "self", ".", "reward", "-", "self", ".", "reward", ".", "max", "(", ")", "\n", "p", "=", "np", ".", "exp", "(", "self", ".", "eta", "*", "scaled_reward", ")", "\n", "p", "/=", "p", ".", "sum", "(", ")", "\n", "self", ".", "phat", "=", "(", "1", "-", "self", ".", "crs", ")", "*", "p", "+", "self", ".", "eta", "\n", "\n", "# pull the arm", "\n", "q", "=", "np", ".", "cumsum", "(", "self", ".", "phat", ")", "\n", "arm", "=", "np", ".", "flatnonzero", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "q", "[", "-", "1", "]", "<", "q", ")", "[", "0", "]", "\n", "\n", "# derivative of the probability of the pulled arm", "\n", "self", ".", "grad", "[", "t", "]", "=", "(", "1", "/", "self", ".", "phat", "[", "arm", "]", ")", "*", "(", "(", "1", "-", "self", ".", "crs", ")", "*", "(", "p", "[", "arm", "]", "/", "self", ".", "K", ")", "*", "\n", "(", "scaled_reward", "[", "arm", "]", "-", "p", ".", "dot", "(", "scaled_reward", ")", ")", "-", "p", "[", "arm", "]", "+", "1", "/", "self", ".", "K", ")", "\n", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.Exp3.print": [[634, 637], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"Exp3\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.FPL.__init__": [[640, 648], ["numpy.sqrt", "params.items", "numpy.zeros", "setattr", "numpy.log"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "eta", "=", "np", ".", "sqrt", "(", "(", "np", ".", "log", "(", "self", ".", "K", ")", "+", "1", ")", "/", "(", "self", ".", "K", "*", "n", ")", ")", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "loss", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# cumulative loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.FPL.update": [[649, 659], ["numpy.random.exponential", "numpy.argmin"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "# estimate the probability of pulling the arm", "\n", "    ", "wait_time", "=", "0", "\n", "while", "True", ":", "\n", "      ", "wait_time", "+=", "1", "\n", "ploss", "=", "self", ".", "loss", "+", "np", ".", "random", ".", "exponential", "(", "1", "/", "self", ".", "eta", ",", "self", ".", "K", ")", "\n", "if", "np", ".", "argmin", "(", "ploss", ")", "==", "arm", ":", "\n", "        ", "break", ";", "\n", "\n", "", "", "self", ".", "loss", "[", "arm", "]", "+=", "(", "1", "-", "r", ")", "*", "wait_time", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.FPL.get_arm": [[660, 666], ["numpy.argmin", "numpy.random.exponential"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "# perturb cumulative loss", "\n", "    ", "ploss", "=", "self", ".", "loss", "+", "np", ".", "random", ".", "exponential", "(", "1", "/", "self", ".", "eta", ",", "self", ".", "K", ")", "\n", "\n", "arm", "=", "np", ".", "argmin", "(", "ploss", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.FPL.print": [[667, 670], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"FPL\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinBanditAlg.__init__": [[673, 693], ["numpy.copy", "numpy.zeros", "params.items", "numpy.linalg.inv", "AdaTS_Public.LinBanditAlg.Gram.dot", "setattr", "hasattr", "numpy.square", "numpy.eye"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "env", "=", "env", "\n", "self", ".", "X", "=", "np", ".", "copy", "(", "env", ".", "X", ")", "\n", "self", ".", "K", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "d", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "theta0", "=", "np", ".", "zeros", "(", "self", ".", "d", ")", "\n", "self", ".", "sigma0", "=", "1.0", "\n", "self", ".", "sigma", "=", "0.5", "\n", "self", ".", "crs", "=", "1.0", "# confidence region scaling", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "self", ",", "\"Sigma0\"", ")", ":", "\n", "      ", "self", ".", "Sigma0", "=", "np", ".", "square", "(", "self", ".", "sigma0", ")", "*", "np", ".", "eye", "(", "self", ".", "d", ")", "\n", "\n", "# sufficient statistics", "\n", "", "self", ".", "Gram", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "Sigma0", ")", "\n", "self", ".", "B", "=", "self", ".", "Gram", ".", "dot", "(", "self", ".", "theta0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinBanditAlg.update": [[694, 698], ["numpy.outer", "numpy.square", "numpy.square"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "x", "=", "self", ".", "X", "[", "arm", ",", ":", "]", "\n", "self", ".", "Gram", "+=", "np", ".", "outer", "(", "x", ",", "x", ")", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "self", ".", "B", "+=", "x", "*", "r", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinUCB.__init__": [[701, 705], ["AdaTS_Public.LinBanditAlg.__init__", "AdaTS_Public.LinUCB.confidence_ellipsoid_width"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.__init__", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBLog.confidence_ellipsoid_width"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "LinBanditAlg", ".", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", "\n", "\n", "self", ".", "cew", "=", "self", ".", "crs", "*", "self", ".", "confidence_ellipsoid_width", "(", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinUCB.confidence_ellipsoid_width": [[706, 717], ["numpy.amax", "numpy.sqrt", "numpy.linalg.norm", "numpy.square", "numpy.sqrt", "numpy.sqrt", "numpy.log", "numpy.square"], "methods", ["None"], ["", "def", "confidence_ellipsoid_width", "(", "self", ",", "t", ")", ":", "\n", "# Theorem 2 in Abassi-Yadkori (2011)", "\n", "# Improved Algorithms for Linear Stochastic Bandits", "\n", "    ", "delta", "=", "1", "/", "self", ".", "n", "\n", "L", "=", "np", ".", "amax", "(", "np", ".", "linalg", ".", "norm", "(", "self", ".", "X", ",", "axis", "=", "1", ")", ")", "\n", "Lambda", "=", "1", "/", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "R", "=", "self", ".", "sigma", "\n", "S", "=", "np", ".", "sqrt", "(", "self", ".", "d", ")", "\n", "width", "=", "np", ".", "sqrt", "(", "Lambda", ")", "*", "S", "+", "R", "*", "np", ".", "sqrt", "(", "self", ".", "d", "*", "np", ".", "log", "(", "(", "1", "+", "t", "*", "np", ".", "square", "(", "L", ")", "/", "Lambda", ")", "/", "delta", ")", ")", "\n", "return", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinUCB.get_arm": [[718, 729], ["numpy.linalg.inv", "numpy.linalg.inv.dot", "numpy.square", "numpy.argmax", "AdaTS_Public.LinUCB.X.dot", "numpy.sqrt", "AdaTS_Public.LinUCB.X.dot"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "Gram", ")", "\n", "theta", "=", "Gram_inv", ".", "dot", "(", "self", ".", "B", ")", "\n", "\n", "# UCBs", "\n", "Gram_inv", "/=", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "theta", ")", "+", "self", ".", "cew", "*", "np", ".", "sqrt", "(", "(", "self", ".", "X", ".", "dot", "(", "Gram_inv", ")", "*", "self", ".", "X", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinUCB.print": [[730, 733], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"LinUCB\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinGreedy.get_arm": [[736, 746], ["numpy.zeros", "numpy.argmax", "numpy.random.rand", "numpy.linalg.solve", "AdaTS_Public.LinGreedy.X.dot", "numpy.sqrt", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve"], ["  ", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.05", "*", "np", ".", "sqrt", "(", "self", ".", "n", "/", "(", "t", "+", "1", ")", ")", "/", "2", ":", "\n", "      ", "self", ".", "mu", "[", "np", ".", "random", ".", "randint", "(", "self", ".", "K", ")", "]", "=", "np", ".", "Inf", "\n", "", "else", ":", "\n", "      ", "theta", "=", "np", ".", "linalg", ".", "solve", "(", "self", ".", "Gram", ",", "self", ".", "B", ")", "\n", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "theta", ")", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinGreedy.print": [[747, 750], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"Lin e-greedy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinTS.update": [[753, 757], ["numpy.outer", "numpy.square", "numpy.square"], "methods", ["None"], ["  ", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "x", "=", "self", ".", "env", ".", "X", "[", "arm", ",", ":", "]", "\n", "self", ".", "Gram", "+=", "np", ".", "outer", "(", "x", ",", "x", ")", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "self", ".", "B", "+=", "x", "*", "r", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinTS.get_arm": [[758, 769], ["numpy.linalg.inv", "numpy.linalg.inv.dot", "numpy.random.multivariate_normal", "AdaTS_Public.LinTS.env.X.dot", "numpy.argmax", "numpy.square"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "Gram", ")", "\n", "thetabar", "=", "Gram_inv", ".", "dot", "(", "self", ".", "B", ")", "\n", "\n", "# posterior sampling", "\n", "thetatilde", "=", "np", ".", "random", ".", "multivariate_normal", "(", "thetabar", ",", "\n", "np", ".", "square", "(", "self", ".", "crs", ")", "*", "Gram_inv", ")", "\n", "self", ".", "mu", "=", "self", ".", "env", ".", "X", ".", "dot", "(", "thetatilde", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LinTS.print": [[770, 773], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"LinTS\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.CoLinTS.update": [[776, 780], ["numpy.outer", "numpy.square", "numpy.square"], "methods", ["None"], ["  ", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "x", "=", "self", ".", "env", ".", "X", "[", "arm", ",", ":", "]", "\n", "self", ".", "Gram", "+=", "np", ".", "outer", "(", "x", ",", "x", ")", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "self", ".", "B", "+=", "x", "*", "r", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.CoLinTS.get_arm": [[781, 792], ["numpy.linalg.inv", "numpy.linalg.inv.dot", "numpy.random.multivariate_normal", "AdaTS_Public.CoLinTS.env.X.dot", "numpy.argmax", "numpy.square"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "Gram", ")", "\n", "thetabar", "=", "Gram_inv", ".", "dot", "(", "self", ".", "B", ")", "\n", "\n", "# posterior sampling", "\n", "thetatilde", "=", "np", ".", "random", ".", "multivariate_normal", "(", "thetabar", ",", "\n", "np", ".", "square", "(", "self", ".", "crs", ")", "*", "Gram_inv", ")", "\n", "self", ".", "mu", "=", "self", ".", "env", ".", "X", ".", "dot", "(", "thetatilde", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.CoLinTS.print": [[793, 796], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"CoLinTS\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogBanditAlg.__init__": [[799, 822], ["numpy.copy", "numpy.zeros", "params.items", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "setattr", "numpy.outer"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "env", "=", "env", "\n", "self", ".", "X", "=", "np", ".", "copy", "(", "env", ".", "X", ")", "\n", "self", ".", "K", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "d", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "sigma0", "=", "1.0", "\n", "self", ".", "crs", "=", "1.0", "# confidence region scaling", "\n", "self", ".", "crs_is_width", "=", "False", "\n", "\n", "self", ".", "irls_theta", "=", "np", ".", "zeros", "(", "self", ".", "d", ")", "\n", "self", ".", "irls_error", "=", "1e-3", "\n", "self", ".", "irls_num_iter", "=", "30", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "# sufficient statistics", "\n", "", "self", ".", "pos", "=", "np", ".", "zeros", "(", "self", ".", "K", ",", "dtype", "=", "int", ")", "# number of positive observations", "\n", "self", ".", "neg", "=", "np", ".", "zeros", "(", "self", ".", "K", ",", "dtype", "=", "int", ")", "# number of negative observations", "\n", "self", ".", "X2", "=", "np", ".", "zeros", "(", "(", "self", ".", "K", ",", "self", ".", "d", ",", "self", ".", "d", ")", ")", "# outer products of arm features", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "      ", "self", ".", "X2", "[", "k", ",", ":", ",", ":", "]", "=", "np", ".", "outer", "(", "self", ".", "X", "[", "k", ",", ":", "]", ",", "self", ".", "X", "[", "k", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogBanditAlg.update": [[823, 826], ["None"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "pos", "[", "arm", "]", "+=", "r", "\n", "self", ".", "neg", "[", "arm", "]", "+=", "1", "-", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogBanditAlg.sigmoid": [[827, 830], ["numpy.exp"], "methods", ["None"], ["", "def", "sigmoid", "(", "self", ",", "x", ")", ":", "\n", "    ", "y", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogBanditAlg.solve": [[831, 861], ["numpy.copy", "numpy.copy", "AdaTS_Public.LogBanditAlg.X.dot", "numpy.linalg.solve", "numpy.zeros", "numpy.copy", "AdaTS_Public.LogBanditAlg.sigmoid", "numpy.tensordot", "AdaTS_Public.LogBanditAlg.X.T.dot", "numpy.linalg.norm", "AdaTS_Public.LogBanditAlg.sigmoid", "numpy.eye", "numpy.square", "AdaTS_Public.LogBanditAlg.sigmoid", "AdaTS_Public.LogBanditAlg.sigmoid"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid"], ["", "def", "solve", "(", "self", ")", ":", "\n", "# iterative reweighted least squares for Bayesian logistic regression", "\n", "# Sections 4.3.3 and 4.5.1 in Bishop (2006)", "\n", "# Pattern Recognition and Machine Learning", "\n", "    ", "theta", "=", "np", ".", "copy", "(", "self", ".", "irls_theta", ")", "\n", "\n", "num_iter", "=", "0", "\n", "while", "num_iter", "<", "self", ".", "irls_num_iter", ":", "\n", "      ", "theta_old", "=", "np", ".", "copy", "(", "theta", ")", "\n", "\n", "Xtheta", "=", "self", ".", "X", ".", "dot", "(", "theta", ")", "\n", "R", "=", "self", ".", "sigmoid", "(", "Xtheta", ")", "*", "(", "1", "-", "self", ".", "sigmoid", "(", "Xtheta", ")", ")", "\n", "pulls", "=", "self", ".", "pos", "+", "self", ".", "neg", "\n", "Gram", "=", "np", ".", "tensordot", "(", "R", "*", "pulls", ",", "self", ".", "X2", ",", "axes", "=", "(", "[", "0", "]", ",", "[", "0", "]", ")", ")", "+", "np", ".", "eye", "(", "self", ".", "d", ")", "/", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "Rz", "=", "R", "*", "pulls", "*", "Xtheta", "-", "self", ".", "pos", "*", "(", "self", ".", "sigmoid", "(", "Xtheta", ")", "-", "1", ")", "-", "self", ".", "neg", "*", "(", "self", ".", "sigmoid", "(", "Xtheta", ")", "-", "0", ")", "\n", "theta", "=", "np", ".", "linalg", ".", "solve", "(", "Gram", ",", "self", ".", "X", ".", "T", ".", "dot", "(", "Rz", ")", ")", "\n", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "theta", "-", "theta_old", ")", "<", "self", ".", "irls_error", ":", "\n", "        ", "break", ";", "\n", "", "num_iter", "+=", "1", "\n", "\n", "", "if", "num_iter", "==", "self", ".", "irls_num_iter", ":", "\n", "      ", "self", ".", "irls_theta", "=", "np", ".", "zeros", "(", "self", ".", "d", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "irls_theta", "=", "np", ".", "copy", "(", "theta", ")", "\n", "\n", "", "return", "theta", ",", "Gram", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogUCB.__init__": [[864, 871], ["AdaTS_Public.LogBanditAlg.__init__", "AdaTS_Public.LogUCB.confidence_ellipsoid_width"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.__init__", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBLog.confidence_ellipsoid_width"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "LogBanditAlg", ".", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", "\n", "\n", "if", "not", "self", ".", "crs_is_width", ":", "\n", "      ", "self", ".", "cew", "=", "self", ".", "crs", "*", "self", ".", "confidence_ellipsoid_width", "(", "n", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "cew", "=", "self", ".", "crs", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogUCB.confidence_ellipsoid_width": [[872, 884], ["numpy.amax", "numpy.sqrt", "numpy.linalg.norm", "numpy.sqrt", "numpy.log", "numpy.log", "numpy.log", "numpy.square"], "methods", ["None"], ["", "", "def", "confidence_ellipsoid_width", "(", "self", ",", "t", ")", ":", "\n", "# Section 4.1 in Filippi (2010)", "\n", "# Parametric Bandits: The Generalized Linear Case", "\n", "    ", "delta", "=", "1", "/", "self", ".", "n", "\n", "c_m", "=", "np", ".", "amax", "(", "np", ".", "linalg", ".", "norm", "(", "self", ".", "X", ",", "axis", "=", "1", ")", ")", "\n", "c_mu", "=", "0.25", "# minimum derivative of the mean function", "\n", "k_mu", "=", "0.25", "\n", "kappa", "=", "np", ".", "sqrt", "(", "3", "+", "2", "*", "np", ".", "log", "(", "1", "+", "2", "*", "np", ".", "square", "(", "c_m", "/", "self", ".", "sigma0", ")", ")", ")", "\n", "R_max", "=", "1.0", "\n", "width", "=", "(", "2", "*", "k_mu", "*", "kappa", "*", "R_max", "/", "c_mu", ")", "*", "np", ".", "sqrt", "(", "2", "*", "self", ".", "d", "*", "np", ".", "log", "(", "t", ")", "*", "np", ".", "log", "(", "2", "*", "self", ".", "d", "*", "self", ".", "n", "/", "delta", ")", ")", "\n", "return", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogUCB.get_arm": [[885, 898], ["numpy.linalg.inv", "AdaTS_Public.LogUCB.solve", "numpy.argmax", "numpy.tensordot", "AdaTS_Public.LogUCB.sigmoid", "numpy.eye", "numpy.square", "AdaTS_Public.LogUCB.X.dot", "numpy.sqrt", "AdaTS_Public.LogUCB.X.dot"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "pulls", "=", "self", ".", "pos", "+", "self", ".", "neg", "\n", "Gram", "=", "np", ".", "tensordot", "(", "pulls", ",", "self", ".", "X2", ",", "axes", "=", "(", "[", "0", "]", ",", "[", "0", "]", ")", ")", "+", "np", ".", "eye", "(", "self", ".", "d", ")", "/", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "Gram", ")", "\n", "theta", ",", "_", "=", "self", ".", "solve", "(", ")", "\n", "\n", "# UCBs", "\n", "self", ".", "mu", "=", "self", ".", "sigmoid", "(", "self", ".", "X", ".", "dot", "(", "theta", ")", ")", "+", "self", ".", "cew", "*", "np", ".", "sqrt", "(", "(", "self", ".", "X", ".", "dot", "(", "Gram_inv", ")", "*", "self", ".", "X", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogUCB.print": [[899, 902], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"GLM-UCB (log)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCBLog.__init__": [[905, 912], ["AdaTS_Public.LogBanditAlg.__init__", "AdaTS_Public.UCBLog.confidence_ellipsoid_width"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.__init__", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBLog.confidence_ellipsoid_width"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "LogBanditAlg", ".", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", "\n", "\n", "if", "not", "self", ".", "crs_is_width", ":", "\n", "      ", "self", ".", "cew", "=", "self", ".", "crs", "*", "self", ".", "confidence_ellipsoid_width", "(", "n", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "cew", "=", "self", ".", "crs", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCBLog.confidence_ellipsoid_width": [[913, 923], ["numpy.sqrt", "numpy.log", "numpy.log"], "methods", ["None"], ["", "", "def", "confidence_ellipsoid_width", "(", "self", ",", "t", ")", ":", "\n", "# Theorem 2 in Li (2017)", "\n", "# Provably Optimal Algorithms for Generalized Linear Contextual Bandits", "\n", "    ", "delta", "=", "1", "/", "self", ".", "n", "\n", "sigma", "=", "0.5", "\n", "kappa", "=", "0.25", "# minimum derivative of a constrained mean function", "\n", "width", "=", "(", "sigma", "/", "kappa", ")", "*", "np", ".", "sqrt", "(", "(", "self", ".", "d", "/", "2", ")", "*", "np", ".", "log", "(", "1", "+", "2", "*", "self", ".", "n", "/", "self", ".", "d", ")", "+", "np", ".", "log", "(", "1", "/", "delta", ")", ")", "\n", "return", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCBLog.get_arm": [[924, 937], ["numpy.linalg.inv", "AdaTS_Public.UCBLog.solve", "numpy.argmax", "numpy.tensordot", "AdaTS_Public.UCBLog.X.dot", "numpy.eye", "numpy.square", "numpy.sqrt", "AdaTS_Public.UCBLog.X.dot"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "pulls", "=", "self", ".", "pos", "+", "self", ".", "neg", "\n", "Gram", "=", "np", ".", "tensordot", "(", "pulls", ",", "self", ".", "X2", ",", "axes", "=", "(", "[", "0", "]", ",", "[", "0", "]", ")", ")", "+", "np", ".", "eye", "(", "self", ".", "d", ")", "/", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "Gram", ")", "\n", "theta", ",", "_", "=", "self", ".", "solve", "(", ")", "\n", "\n", "# UCBs", "\n", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "theta", ")", "+", "self", ".", "cew", "*", "np", ".", "sqrt", "(", "(", "self", ".", "X", ".", "dot", "(", "Gram_inv", ")", "*", "self", ".", "X", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.UCBLog.print": [[938, 941], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"UCB-GLM (log)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogGreedy.__init__": [[944, 948], ["AdaTS_Public.LogBanditAlg.__init__"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.__init__"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "LogBanditAlg", ".", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", "\n", "\n", "self", ".", "epsilon", "=", "0.05", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogGreedy.get_arm": [[949, 959], ["numpy.zeros", "numpy.argmax", "numpy.random.rand", "AdaTS_Public.LogGreedy.solve", "AdaTS_Public.LogGreedy.sigmoid", "AdaTS_Public.LogGreedy.X.dot", "numpy.sqrt", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "epsilon", "*", "np", ".", "sqrt", "(", "self", ".", "n", "/", "(", "t", "+", "1", ")", ")", "/", "2", ":", "\n", "      ", "self", ".", "mu", "[", "np", ".", "random", ".", "randint", "(", "self", ".", "K", ")", "]", "=", "np", ".", "Inf", "\n", "", "else", ":", "\n", "      ", "theta", ",", "_", "=", "self", ".", "solve", "(", ")", "\n", "self", ".", "mu", "=", "self", ".", "sigmoid", "(", "self", ".", "X", ".", "dot", "(", "theta", ")", ")", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogGreedy.print": [[960, 963], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"Log e-greedy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogTS.get_arm": [[966, 977], ["AdaTS_Public.LogTS.solve", "numpy.linalg.inv", "numpy.random.multivariate_normal", "AdaTS_Public.LogTS.X.dot", "numpy.argmax", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve"], ["  ", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "thetabar", ",", "Gram", "=", "self", ".", "solve", "(", ")", "\n", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "Gram", ")", "\n", "\n", "# posterior sampling", "\n", "thetatilde", "=", "np", ".", "random", ".", "multivariate_normal", "(", "thetabar", ",", "\n", "np", ".", "square", "(", "self", ".", "crs", ")", "*", "Gram_inv", ")", "\n", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "thetatilde", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogTS.print": [[978, 981], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"GLM-TSL (log)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogFPL.__init__": [[984, 988], ["AdaTS_Public.LogBanditAlg.__init__"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.__init__"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "a", "=", "1.0", "\n", "\n", "LogBanditAlg", ".", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogFPL.solve": [[989, 1022], ["numpy.copy", "numpy.minimum", "numpy.copy", "AdaTS_Public.LogFPL.X.dot", "numpy.linalg.solve", "numpy.zeros", "numpy.copy", "numpy.sqrt", "numpy.maximum", "AdaTS_Public.LogFPL.sigmoid", "numpy.tensordot", "AdaTS_Public.LogFPL.X.T.dot", "numpy.linalg.norm", "numpy.random.randn", "AdaTS_Public.LogFPL.sigmoid", "numpy.eye", "numpy.square", "AdaTS_Public.LogFPL.sigmoid"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid"], ["", "def", "solve", "(", "self", ")", ":", "\n", "# normal noise perturbation", "\n", "    ", "pulls", "=", "self", ".", "pos", "+", "self", ".", "neg", "\n", "z", "=", "self", ".", "a", "*", "np", ".", "sqrt", "(", "pulls", ")", "*", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "np", ".", "random", ".", "randn", "(", "self", ".", "K", ")", ",", "-", "6", ")", ",", "6", ")", "\n", "\n", "# iterative reweighted least squares for Bayesian logistic regression", "\n", "# Sections 4.3.3 and 4.5.1 in Bishop (2006)", "\n", "# Pattern Recognition and Machine Learning", "\n", "theta", "=", "np", ".", "copy", "(", "self", ".", "irls_theta", ")", "\n", "\n", "num_iter", "=", "0", "\n", "while", "num_iter", "<", "self", ".", "irls_num_iter", ":", "\n", "      ", "theta_old", "=", "np", ".", "copy", "(", "theta", ")", "\n", "\n", "Xtheta", "=", "self", ".", "X", ".", "dot", "(", "theta", ")", "\n", "R", "=", "self", ".", "sigmoid", "(", "Xtheta", ")", "*", "(", "1", "-", "self", ".", "sigmoid", "(", "Xtheta", ")", ")", "\n", "Gram", "=", "np", ".", "tensordot", "(", "R", "*", "pulls", ",", "self", ".", "X2", ",", "axes", "=", "(", "[", "0", "]", ",", "[", "0", "]", ")", ")", "+", "np", ".", "eye", "(", "self", ".", "d", ")", "/", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "Rz", "=", "R", "*", "pulls", "*", "Xtheta", "-", "(", "pulls", "*", "self", ".", "sigmoid", "(", "Xtheta", ")", "-", "(", "self", ".", "pos", "+", "z", ")", ")", "\n", "theta", "=", "np", ".", "linalg", ".", "solve", "(", "Gram", ",", "self", ".", "X", ".", "T", ".", "dot", "(", "Rz", ")", ")", "\n", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "theta", "-", "theta_old", ")", "<", "self", ".", "irls_error", ":", "\n", "        ", "break", ";", "\n", "", "num_iter", "+=", "1", "\n", "\n", "", "if", "num_iter", "==", "self", ".", "irls_num_iter", ":", "\n", "      ", "self", ".", "irls_theta", "=", "np", ".", "zeros", "(", "self", ".", "d", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "irls_theta", "=", "np", ".", "copy", "(", "theta", ")", "\n", "\n", "", "return", "theta", ",", "Gram", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogFPL.get_arm": [[1023, 1034], ["numpy.zeros", "numpy.argmax", "AdaTS_Public.LogFPL.solve", "AdaTS_Public.LogFPL.sigmoid", "AdaTS_Public.LogFPL.X.dot"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "if", "t", "<", "self", ".", "d", ":", "\n", "      ", "self", ".", "mu", "[", "t", "]", "=", "np", ".", "Inf", "\n", "", "else", ":", "\n", "# history perturbation", "\n", "      ", "theta", ",", "_", "=", "self", ".", "solve", "(", ")", "\n", "self", ".", "mu", "=", "self", ".", "sigmoid", "(", "self", ".", "X", ".", "dot", "(", "theta", ")", ")", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.LogFPL.print": [[1035, 1038], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"GLM-FPL (log)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.get_label": [[1040, 1051], ["None"], "function", ["None"], ["", "", "def", "get_label", "(", "alg", ")", ":", "\n", "  ", "if", "alg", "[", "1", "]", "[", "0", "]", "!=", "1", ":", "\n", "    ", "return", "\"\"", "\n", "", "if", "alg", "[", "-", "1", "]", "not", "in", "BML_algs", ":", "\n", "    ", "return", "alg", "[", "-", "1", "]", "\n", "", "elif", "alg", "[", "-", "1", "]", "==", "'mts'", ":", "\n", "    ", "return", "\"fMetaTS\"", "\n", "", "elif", "alg", "[", "-", "1", "]", "==", "'mts-mean'", ":", "\n", "    ", "return", "\"mfMetaTS\"", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.evaluate_one": [[1053, 1076], ["Alg", "numpy.zeros", "numpy.zeros", "range", "env.randomize", "Alg.get_arm", "Alg.update", "env.regret", "numpy.argmax", "env.pregret", "env.reward"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.get_arm", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.regret", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.pregret", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.reward"], ["", "", "def", "evaluate_one", "(", "Alg", ",", "params", ",", "env", ",", "n", ",", "period_size", "=", "1", ")", ":", "\n", "  ", "\"\"\"One run of a bandit algorithm.\"\"\"", "\n", "alg", "=", "Alg", "(", "env", ",", "n", ",", "params", ")", "\n", "\n", "regret", "=", "np", ".", "zeros", "(", "n", "//", "period_size", ")", "\n", "sregret", "=", "np", ".", "zeros", "(", "n", "//", "period_size", ")", "\n", "for", "t", "in", "range", "(", "n", ")", ":", "\n", "# generate state", "\n", "    ", "env", ".", "randomize", "(", ")", "\n", "\n", "# take action", "\n", "arm", "=", "alg", ".", "get_arm", "(", "t", ")", "\n", "\n", "# update model and regret", "\n", "alg", ".", "update", "(", "t", ",", "arm", ",", "env", ".", "reward", "(", "arm", ")", ")", "\n", "regret_at_t", "=", "env", ".", "regret", "(", "arm", ")", "\n", "regret", "[", "t", "//", "period_size", "]", "+=", "regret_at_t", "\n", "\n", "# BAI", "\n", "idx_mf", "=", "np", ".", "argmax", "(", "alg", ".", "pulls", ")", "\n", "sregret", "[", "t", "//", "period_size", "]", "+=", "env", ".", "pregret", "(", "idx_mf", ")", "\n", "\n", "", "return", "regret", ",", "alg", ",", "sregret", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.evaluate": [[1078, 1109], ["time.time", "len", "numpy.zeros", "numpy.zeros", "numpy.linspace().astype", "range", "print", "AdaTS_Public.evaluate_one", "print", "np.zeros.sum", "print", "numpy.linspace", "Alg.print", "print", "time.time", "regret.sum.mean", "numpy.median", "regret.sum.max", "regret.sum.min", "regret.sum.std", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.evaluate_one", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["", "def", "evaluate", "(", "Alg", ",", "params", ",", "env", ",", "n", "=", "1000", ",", "period_size", "=", "1", ",", "printout", "=", "True", ")", ":", "\n", "  ", "\"\"\"Multiple runs of a bandit algorithm.\"\"\"", "\n", "if", "printout", ":", "\n", "    ", "print", "(", "\"Evaluating %s\"", "%", "Alg", ".", "print", "(", ")", ",", "end", "=", "\"\"", ")", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "num_exps", "=", "len", "(", "env", ")", "\n", "regret", "=", "np", ".", "zeros", "(", "(", "n", "//", "period_size", ",", "num_exps", ")", ")", "\n", "sregret", "=", "np", ".", "zeros", "(", "(", "n", "//", "period_size", ",", "num_exps", ")", ")", "\n", "alg_", "=", "num_exps", "*", "[", "None", "]", "\n", "\n", "dots", "=", "np", ".", "linspace", "(", "0", ",", "num_exps", "-", "1", ",", "100", ")", ".", "astype", "(", "int", ")", "\n", "for", "ex", "in", "range", "(", "num_exps", ")", ":", "\n", "    ", "output", "=", "evaluate_one", "(", "Alg", ",", "params", ",", "env", "[", "ex", "]", ",", "n", ",", "period_size", ")", "\n", "regret", "[", ":", ",", "ex", "]", "=", "output", "[", "0", "]", "\n", "alg_", "[", "ex", "]", "=", "output", "[", "1", "]", "\n", "sregret", "[", ":", ",", "ex", "]", "=", "output", "[", "2", "]", "\n", "\n", "if", "ex", "in", "dots", ":", "\n", "      ", "if", "printout", ":", "\n", "        ", "print", "(", "\".\"", ",", "end", "=", "\"\"", ")", "\n", "", "", "", "if", "printout", ":", "\n", "    ", "print", "(", "\" %.1f seconds\"", "%", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "", "if", "printout", ":", "\n", "    ", "total_regret", "=", "regret", ".", "sum", "(", "axis", "=", "0", ")", "\n", "print", "(", "\"Regret: %.2f +/- %.2f (median: %.2f, max: %.2f, min: %.2f)\"", "%", "\n", "(", "total_regret", ".", "mean", "(", ")", ",", "total_regret", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "num_exps", ")", ",", "\n", "np", ".", "median", "(", "total_regret", ")", ",", "total_regret", ".", "max", "(", ")", ",", "total_regret", ".", "min", "(", ")", ")", ")", "\n", "\n", "", "return", "regret", ",", "alg_", ",", "sregret", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.one_run_mab": [[1111, 1214], ["numpy.zeros", "numpy.zeros", "print", "numpy.square", "numpy.square", "numpy.sqrt", "str().startswith", "list", "enumerate", "numpy.array().reshape", "range", "numpy.random.randn", "numpy.arange", "numpy.zeros", "numpy.zeros", "BML_2.exp.one_iter_standard", "AdaTS_Public.GaussBandit", "AdaTS_Public.evaluate", "task_regret.flatten", "task_sregret.flatten", "str", "int", "int", "int", "numpy.diag", "numpy.array().reshape", "numpy.array().reshape", "numpy.mean", "numpy.min", "numpy.array", "numpy.copy", "numpy.copy", "globals", "numpy.square", "numpy.square", "len", "len", "numpy.square", "numpy.random.randn", "numpy.copy", "numpy.sqrt", "numpy.sqrt", "numpy.array", "numpy.array", "alg[].startswith", "numpy.random.rand", "numpy.ones", "numpy.square", "numpy.square", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.sqrt", "numpy.random.randn", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.exp.one_iter_standard", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.evaluate"], ["", "def", "one_run_mab", "(", "run", ",", "alg", ",", "params", ")", ":", "\n", "\n", "  ", "algs", ",", "num_runs", ",", "num_tasks", "=", "params", "[", "'algs'", "]", ",", "params", "[", "'num_runs'", "]", ",", "params", "[", "'num_tasks'", "]", "\n", "n", ",", "K", "=", "params", "[", "'n'", "]", ",", "params", "[", "'K'", "]", "\n", "mu_q", ",", "sigma_q", ",", "sigma_0", "=", "params", "[", "'mu_q'", "]", ",", "params", "[", "'sigma_q'", "]", ",", "params", "[", "'sigma_0'", "]", "\n", "alg_num", ",", "sigma", "=", "params", "[", "'alg_num'", "]", ",", "params", "[", "'sigma'", "]", "\n", "alp_fmts", "=", "params", "[", "'alp_fmts'", "]", "\n", "\n", "num_tasks_n", "=", "num_tasks", "*", "n", "\n", "run_regret", "=", "np", ".", "zeros", "(", "(", "num_tasks_n", ",", "1", ")", ")", "\n", "run_sregret", "=", "np", ".", "zeros", "(", "(", "num_tasks_n", ",", "1", ")", ")", "\n", "\n", "\n", "print", "(", "f\"alg {alg[-1]}, run {run}\"", ")", "\n", "# true prior", "\n", "mu_star", "=", "mu_q", "+", "sigma_q", "*", "np", ".", "random", ".", "randn", "(", "K", ")", "\n", "\n", "# potential meta-prior misspecification", "\n", "sigma_q_alg", "=", "alg", "[", "1", "]", "[", "0", "]", "*", "sigma_q", "\n", "if", "alg", "[", "1", "]", "[", "1", "]", "!=", "0", ":", "\n", "    ", "mu_q_alg", "=", "mu_q", "+", "(", "np", ".", "random", ".", "rand", "(", "1", ")", "*", "np", ".", "ones", "(", "K", ")", "*", "2", "*", "alg", "[", "1", "]", "[", "1", "]", "-", "alg", "[", "1", "]", "[", "1", "]", ")", "# move mu_q to a uniform random number in radius alg[1][1]", "\n", "", "else", ":", "\n", "    ", "mu_q_alg", "=", "1", "*", "mu_q", "\n", "\n", "# incrementally updated statistics", "\n", "", "mu_inc", "=", "mu_q_alg", "/", "np", ".", "square", "(", "sigma_q_alg", ")", "\n", "lambda_inc", "=", "1.0", "/", "np", ".", "square", "(", "sigma_q_alg", ")", "\n", "\n", "# initial meta-posterior", "\n", "mu_hat", "=", "mu_inc", "/", "lambda_inc", "\n", "sigma_hat", "=", "1.0", "/", "np", ".", "sqrt", "(", "lambda_inc", ")", "\n", "\n", "if", "BML_flag", "and", "str", "(", "alg", "[", "-", "1", "]", ")", ".", "startswith", "(", "'mts'", ")", ":", "\n", "    ", "if", "alg", "[", "-", "1", "]", "==", "'mts-mean'", ":", "\n", "      ", "alp_fmts", "=", "1", "\n", "", "elif", "alg", "[", "-", "1", "]", "in", "[", "'mts-min'", "]", ":", "\n", "      ", "alp_fmts", "=", "0", "\n", "", "Args_d", "=", "{", "'K'", ":", "K", ",", "'H'", ":", "n", ",", "'T'", ":", "num_tasks", ",", "'alg'", ":", "alg", "[", "-", "1", "]", "}", "\n", "# Args_d['train'] = min(100, int(num_tasks / 2))  # TODO", "\n", "train_lens", "=", "list", "(", "np", ".", "arange", "(", "int", "(", "num_tasks", "/", "10", ")", ",", "int", "(", "num_tasks", "/", "2", ")", ",", "int", "(", "num_tasks", "/", "10", ")", ")", ")", "\n", "rew_vecs", ",", "sreg_vecs", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_lens", ")", ",", "num_tasks_n", ")", ")", ",", "np", ".", "zeros", "(", "(", "len", "(", "train_lens", ")", ",", "num_tasks_n", ")", ")", "\n", "Args_d", "[", "'num_random'", "]", "=", "2", "*", "K", "# TODO", "\n", "for", "cc", ",", "train_len", "in", "enumerate", "(", "train_lens", ")", ":", "\n", "      ", "Args_d", "[", "'train'", "]", "=", "train_len", "\n", "(", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "rew_vec", ",", "sreg_vec", ")", "=", "one_iter_standard", "(", "Args_d", ",", "mu_star", ",", "np", ".", "diag", "(", "np", ".", "square", "(", "sigma_0", ")", ")", ",", "\n", "iter_cnt", "=", "run", ",", "prior_dist", "=", "'AdaTScode'", ",", "\n", "reward_dist", "=", "'GausAdaTScode'", ")", "\n", "rew_vecs", "[", "cc", ",", ":", "]", ",", "sreg_vecs", "[", "cc", ",", ":", "]", "=", "np", ".", "array", "(", "rew_vec", ")", ".", "reshape", "(", "num_tasks_n", ",", ")", ",", "np", ".", "array", "(", "sreg_vec", ")", ".", "reshape", "(", "num_tasks_n", ",", ")", "\n", "# sreg_vecs = np.min(sreg_vecs, axis=0)  # pointwise best", "\n", "# sreg_vec = np.mean(sreg_vecs, axis=0)  # mean, more fair", "\n", "", "sreg_vecs", "=", "(", "alp_fmts", "*", "np", ".", "mean", "(", "sreg_vecs", ",", "axis", "=", "0", ")", "+", "(", "1", "-", "alp_fmts", ")", "*", "np", ".", "min", "(", "sreg_vecs", ",", "axis", "=", "0", ")", ")", "# mean, more fair", "\n", "# regret[:, run] += np.array(rew_vec).reshape(num_tasks_n, 1)  # rewards returned by BML #TODO", "\n", "run_sregret", "=", "np", ".", "array", "(", "sreg_vecs", ")", ".", "reshape", "(", "num_tasks_n", ",", "1", ")", "\n", "", "else", ":", "\n", "    ", "for", "task", "in", "range", "(", "num_tasks", ")", ":", "\n", "# sample problem instance from N(\\mu_*, \\sigma_0^2 I_K)", "\n", "      ", "mu", "=", "mu_star", "+", "sigma_0", "*", "np", ".", "random", ".", "randn", "(", "K", ")", "\n", "env", "=", "GaussBandit", "(", "mu", ",", "sigma", "=", "sigma", ")", "\n", "\n", "# task prior", "\n", "if", "alg_num", "==", "0", ":", "\n", "# OracleTS", "\n", "        ", "mu_task", "=", "np", ".", "copy", "(", "mu_star", ")", "\n", "sigma_task", "=", "np", ".", "copy", "(", "sigma_0", ")", "\n", "", "elif", "alg_num", "==", "1", ":", "\n", "# TS", "\n", "        ", "mu_task", "=", "np", ".", "copy", "(", "mu_q_alg", ")", "\n", "sigma_task", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "sigma_0", ")", "+", "np", ".", "square", "(", "sigma_q", ")", ")", "\n", "", "elif", "alg_num", ">=", "2", ":", "\n", "        ", "if", "alg", "[", "-", "1", "]", ".", "startswith", "(", "\"Meta\"", ")", ":", "\n", "# MetaTS", "\n", "          ", "mu_tilde", "=", "mu_hat", "+", "sigma_hat", "*", "np", ".", "random", ".", "randn", "(", "K", ")", "\n", "mu_task", "=", "np", ".", "copy", "(", "mu_tilde", ")", "\n", "sigma_task", "=", "np", ".", "copy", "(", "sigma_0", ")", "\n", "", "else", ":", "\n", "# AdaTS", "\n", "          ", "mu_task", "=", "np", ".", "copy", "(", "mu_hat", ")", "\n", "sigma_task", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "sigma_0", ")", "+", "np", ".", "square", "(", "sigma_hat", ")", ")", "\n", "\n", "# evaluate on a sampled problem instance", "\n", "", "", "alg_class", "=", "globals", "(", ")", "[", "alg", "[", "0", "]", "]", "\n", "alg_params", "=", "{", "\n", "\"mu0\"", ":", "mu_task", ",", "\n", "\"sigma0\"", ":", "sigma_task", ",", "\n", "\"sigma\"", ":", "sigma", "}", "\n", "task_regret", ",", "logs", ",", "task_sregret", "=", "evaluate", "(", "alg_class", ",", "alg_params", ",", "[", "env", "]", ",", "n", ",", "printout", "=", "False", ")", "\n", "run_regret", "[", "task", "*", "n", ":", "(", "task", "+", "1", ")", "*", "n", ",", "0", "]", "+=", "task_regret", ".", "flatten", "(", ")", "\n", "run_sregret", "[", "task", "*", "n", ":", "(", "task", "+", "1", ")", "*", "n", ",", "0", "]", "+=", "task_sregret", ".", "flatten", "(", ")", "\n", "\n", "# meta-posterior update", "\n", "if", "alg_num", ">=", "2", ":", "\n", "          ", "sigma2", "=", "np", ".", "square", "(", "sigma", ")", "\n", "sigma_02", "=", "np", ".", "square", "(", "sigma_0", ")", "\n", "\n", "# incremental update", "\n", "mu_inc", "+=", "logs", "[", "0", "]", ".", "reward", "/", "(", "logs", "[", "0", "]", ".", "pulls", "*", "sigma_02", "+", "sigma2", ")", "\n", "lambda_inc", "+=", "logs", "[", "0", "]", ".", "pulls", "/", "(", "logs", "[", "0", "]", ".", "pulls", "*", "sigma_02", "+", "sigma2", ")", "\n", "\n", "# updated meta-posterior", "\n", "mu_hat", "=", "mu_inc", "/", "lambda_inc", "\n", "sigma_hat", "=", "1.0", "/", "np", ".", "sqrt", "(", "lambda_inc", ")", "\n", "\n", "", "", "", "return", "run_regret", ",", "run_sregret", ",", "run", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.AdaTS_Public.collect_result": [[1216, 1224], ["run_regret.flatten", "run_sregret.flatten"], "function", ["None"], ["", "def", "collect_result", "(", "res", ")", ":", "\n", "  ", "run_regret", ",", "run_sregret", ",", "run", "=", "res", "\n", "global", "regret", ",", "sregret", "\n", "\n", "regret", "[", ":", ",", "run", "]", "+=", "run_regret", ".", "flatten", "(", ")", "\n", "sregret", "[", ":", ",", "run", "]", "+=", "run_sregret", ".", "flatten", "(", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCB1.__init__": [[68, 78], ["params.items", "setattr", "numpy.ones", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "crs", "=", "1.0", "# confidence region scaling", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "pulls", "=", "1e-6", "*", "np", ".", "ones", "(", "self", ".", "K", ")", "# number of pulls", "\n", "self", ".", "reward", "=", "1e-6", "*", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "self", ".", "tiebreak", "=", "1e-6", "*", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "# tie breaking", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCB1.update": [[79, 82], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "self", ".", "reward", "[", "arm", "]", "+=", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCB1.get_arm": [[83, 92], ["numpy.argmax", "numpy.sqrt", "numpy.log", "numpy.sqrt"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "# UCBs", "\n", "    ", "t", "+=", "1", "# time starts at one", "\n", "ciw", "=", "self", ".", "crs", "*", "np", ".", "sqrt", "(", "2", "*", "np", ".", "log", "(", "t", ")", ")", "\n", "self", ".", "ucb", "=", "self", ".", "reward", "/", "self", ".", "pulls", "+", "ciw", "*", "np", ".", "sqrt", "(", "1", "/", "self", ".", "pulls", ")", "+", "self", ".", "tiebreak", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "ucb", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCB1.print": [[93, 96], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"UCB1\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBV.__init__": [[99, 110], ["params.items", "numpy.zeros", "numpy.zeros", "numpy.zeros", "setattr", "numpy.random.rand"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "n", "=", "n", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "pulls", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# number of pulls", "\n", "self", ".", "reward", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "self", ".", "reward2", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# cumulative squared reward", "\n", "self", ".", "tiebreak", "=", "1e-6", "*", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "# tie breaking", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBV.update": [[111, 115], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "self", ".", "reward", "[", "arm", "]", "+=", "r", "\n", "self", ".", "reward2", "[", "arm", "]", "+=", "r", "*", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBV.get_arm": [[116, 140], ["numpy.argmax", "numpy.zeros", "numpy.maximum", "numpy.power", "numpy.square", "numpy.sqrt", "numpy.log", "numpy.log"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "if", "t", "<", "self", ".", "K", ":", "\n", "# pull each arm once in the first K rounds", "\n", "      ", "self", ".", "ucb", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "self", ".", "ucb", "[", "t", "]", "=", "1", "\n", "", "else", ":", "\n", "# UCBs", "\n", "      ", "t", "+=", "1", "# time starts at one", "\n", "\n", "# from \\sum_{t = 1}^n \\sum_{s = 1}^t (1 / n^2) <= 1", "\n", "delta", "=", "1.0", "/", "np", ".", "power", "(", "self", ".", "n", ",", "2", ")", "\n", "# # from \\sum_{t = 1}^n \\sum_{s = 1}^t (1 / t^3) <= \\pi^2 / 6", "\n", "# delta = 1.0 / np.power(t, 3)", "\n", "\n", "muhat", "=", "self", ".", "reward", "/", "self", ".", "pulls", "\n", "varhat", "=", "(", "self", ".", "reward2", "-", "self", ".", "pulls", "*", "np", ".", "square", "(", "muhat", ")", ")", "/", "self", ".", "pulls", "\n", "varhat", "=", "np", ".", "maximum", "(", "varhat", ",", "0", ")", "\n", "self", ".", "ucb", "=", "muhat", "+", "np", ".", "sqrt", "(", "2", "*", "varhat", "*", "np", ".", "log", "(", "3", "/", "delta", ")", "/", "self", ".", "pulls", ")", "+", "3", "*", "np", ".", "log", "(", "3", "/", "delta", ")", "/", "self", ".", "pulls", "+", "self", ".", "tiebreak", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "ucb", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBV.print": [[141, 144], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"UCB-V\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.KLUCB.__init__": [[147, 156], ["params.items", "setattr", "numpy.ones", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "pulls", "=", "1e-6", "*", "np", ".", "ones", "(", "self", ".", "K", ")", "# number of pulls", "\n", "self", ".", "reward", "=", "1e-6", "*", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "self", ".", "tiebreak", "=", "1e-6", "*", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "# tie breaking", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.KLUCB.UCB": [[157, 169], ["numpy.minimum", "range", "numpy.maximum", "numpy.ones", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["None"], ["", "def", "UCB", "(", "self", ",", "p", ",", "N", ",", "t", ")", ":", "\n", "    ", "C", "=", "(", "np", ".", "log", "(", "t", ")", "+", "3", "*", "np", ".", "log", "(", "np", ".", "log", "(", "t", ")", "+", "1e-6", ")", ")", "/", "N", "\n", "\n", "qmin", "=", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "p", ",", "1e-6", ")", ",", "1", "-", "1e-6", ")", "\n", "qmax", "=", "(", "1", "-", "1e-6", ")", "*", "np", ".", "ones", "(", "p", ".", "size", ")", "\n", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "      ", "q", "=", "(", "qmax", "+", "qmin", ")", "/", "2", "\n", "ndx", "=", "(", "p", "*", "np", ".", "log", "(", "p", "/", "q", ")", "+", "(", "1", "-", "p", ")", "*", "np", ".", "log", "(", "(", "1", "-", "p", ")", "/", "(", "1", "-", "q", ")", ")", ")", "<", "C", "\n", "qmin", "[", "ndx", "]", "=", "q", "[", "ndx", "]", "\n", "qmax", "[", "~", "ndx", "]", "=", "q", "[", "~", "ndx", "]", "\n", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.KLUCB.update": [[170, 175], ["numpy.random.rand"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "if", "(", "r", ">", "0", ")", "and", "(", "r", "<", "1", ")", ":", "\n", "      ", "r", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "<", "r", ")", ".", "astype", "(", "float", ")", "\n", "", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "self", ".", "reward", "[", "arm", "]", "+=", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.KLUCB.get_arm": [[176, 184], ["numpy.argmax", "CoAdaTS_Public.KLUCB.UCB"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.KLUCB.UCB"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "# UCBs", "\n", "    ", "t", "+=", "1", "# time starts at one", "\n", "self", ".", "ucb", "=", "self", ".", "UCB", "(", "self", ".", "reward", "/", "self", ".", "pulls", ",", "self", ".", "pulls", ",", "t", ")", "+", "self", ".", "tiebreak", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "ucb", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.KLUCB.print": [[185, 188], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"KL-UCB\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.TS.__init__": [[191, 203], ["numpy.ones", "numpy.ones", "params.items", "isinstance", "setattr", "setattr", "numpy.copy"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "crs", "=", "1.0", "# confidence region scaling", "\n", "\n", "self", ".", "alpha", "=", "np", ".", "ones", "(", "self", ".", "K", ")", "# positive observations", "\n", "self", ".", "beta", "=", "np", ".", "ones", "(", "self", ".", "K", ")", "# negative observations", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "setattr", "(", "self", ",", "attr", ",", "np", ".", "copy", "(", "val", ")", ")", "\n", "", "else", ":", "\n", "        ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.TS.update": [[204, 209], ["numpy.random.rand"], "methods", ["None"], ["", "", "", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "if", "(", "r", ">", "0", ")", "and", "(", "r", "<", "1", ")", ":", "\n", "      ", "r", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "<", "r", ")", ".", "astype", "(", "float", ")", "\n", "", "self", ".", "alpha", "[", "arm", "]", "+=", "r", "\n", "self", ".", "beta", "[", "arm", "]", "+=", "1", "-", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.TS.get_arm": [[210, 222], ["numpy.argmax", "numpy.zeros", "numpy.square", "numpy.random.beta"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "if", "t", "<", "self", ".", "K", ":", "\n", "# each arm is initially pulled once", "\n", "      ", "self", ".", "mu", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "self", ".", "mu", "[", "t", "]", "=", "1", "\n", "", "else", ":", "\n", "# posterior sampling", "\n", "      ", "crs2", "=", "np", ".", "square", "(", "self", ".", "crs", ")", "\n", "self", ".", "mu", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "alpha", "/", "crs2", ",", "self", ".", "beta", "/", "crs2", ")", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.TS.print": [[223, 226], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"TS\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.GaussTS.__init__": [[229, 241], ["numpy.zeros", "params.items", "numpy.zeros", "numpy.zeros", "numpy.ones", "setattr"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "sigma", "=", "0.5", "\n", "\n", "self", ".", "mu0", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "self", ".", "sigma0", "=", "0.5", "*", "np", ".", "ones", "(", "self", ".", "K", ")", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "pulls", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# number of pulls", "\n", "self", ".", "reward", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.GaussTS.update": [[242, 245], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "self", ".", "reward", "[", "arm", "]", "+=", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.GaussTS.get_arm": [[246, 263], ["numpy.argmax", "numpy.zeros", "numpy.square", "numpy.square", "numpy.sqrt", "numpy.random.randn"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "if", "t", "<", "self", ".", "K", ":", "\n", "# each arm is initially pulled once", "\n", "      ", "self", ".", "mu", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "self", ".", "mu", "[", "t", "]", "=", "1", "\n", "", "else", ":", "\n", "# posterior distribution", "\n", "      ", "sigma2", "=", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "sigma02", "=", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "post_var", "=", "1.0", "/", "(", "1.0", "/", "sigma02", "+", "self", ".", "pulls", "/", "sigma2", ")", "\n", "post_mean", "=", "post_var", "*", "(", "self", ".", "mu0", "/", "sigma02", "+", "self", ".", "reward", "/", "sigma2", ")", "\n", "\n", "# posterior sampling", "\n", "self", ".", "mu", "=", "post_mean", "+", "np", ".", "sqrt", "(", "post_var", ")", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "K", ")", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.GaussTS.print": [[264, 267], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"Gaussian TS\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.EpsilonGreedy.__init__": [[270, 290], ["params.items", "numpy.zeros", "numpy.zeros", "hasattr", "numpy.sqrt", "setattr", "numpy.ones", "numpy.ones", "CoAdaTS_Public.EpsilonGreedy.base_Alg"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "env", "=", "env", "\n", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "epsilon", "=", "self", ".", "K", "/", "np", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "crs", "=", "1.0", "# confidence region scaling", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "pulls", "=", "1e-6", "*", "np", ".", "ones", "(", "self", ".", "K", ")", "# number of pulls", "\n", "self", ".", "reward", "=", "1e-6", "*", "np", ".", "ones", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "# self.tiebreak = 1e-6 * np.random.rand(self.K)  # tie breaking", "\n", "\n", "self", ".", "grad", "=", "np", ".", "zeros", "(", "n", ")", "\n", "self", ".", "metrics", "=", "np", ".", "zeros", "(", "(", "n", ",", "3", ")", ")", "\n", "\n", "# initialize baseline", "\n", "self", ".", "is_baseline", "=", "hasattr", "(", "self", ",", "\"base_Alg\"", ")", "\n", "if", "self", ".", "is_baseline", ":", "\n", "      ", "self", ".", "base_alg", "=", "self", ".", "base_Alg", "(", "env", ",", "n", ",", "self", ".", "base_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.EpsilonGreedy.update": [[291, 305], ["CoAdaTS_Public.EpsilonGreedy.base_alg.get_arm", "CoAdaTS_Public.EpsilonGreedy.env.reward", "CoAdaTS_Public.EpsilonGreedy.base_alg.update", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.get_arm", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.reward", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["", "", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "self", ".", "reward", "[", "arm", "]", "+=", "r", "\n", "\n", "best_r", "=", "self", ".", "env", ".", "rt", "[", "self", ".", "env", ".", "best_arm", "]", "\n", "if", "self", ".", "is_baseline", ":", "\n", "# baseline action and update", "\n", "      ", "base_arm", "=", "self", ".", "base_alg", ".", "get_arm", "(", "t", ")", "\n", "base_r", "=", "self", ".", "env", ".", "reward", "(", "base_arm", ")", "\n", "self", ".", "base_alg", ".", "update", "(", "t", ",", "base_arm", ",", "base_r", ")", "\n", "\n", "self", ".", "metrics", "[", "t", ",", ":", "]", "=", "np", ".", "asarray", "(", "[", "r", ",", "r", "-", "best_r", ",", "r", "-", "base_r", "]", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "metrics", "[", "t", ",", ":", "]", "=", "np", ".", "asarray", "(", "[", "r", ",", "r", "-", "best_r", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.EpsilonGreedy.get_arm": [[306, 324], ["numpy.argmax", "numpy.random.rand", "numpy.random.randint", "numpy.arange"], "methods", ["None"], ["", "", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "# decision statistics", "\n", "    ", "muhat", "=", "self", ".", "reward", "/", "self", ".", "pulls", "\n", "best_arm", "=", "np", ".", "argmax", "(", "muhat", ")", "\n", "\n", "# probabilities of pulling arms", "\n", "eps", "=", "self", ".", "crs", "*", "self", ".", "epsilon", "\n", "p", "=", "(", "1", "-", "eps", ")", "*", "(", "np", ".", "arange", "(", "self", ".", "K", ")", "==", "best_arm", ")", "+", "eps", "/", "self", ".", "K", "\n", "\n", "# pull the arm", "\n", "arm", "=", "best_arm", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "eps", ":", "\n", "      ", "arm", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "K", ")", "\n", "\n", "# derivative of the probability of the pulled arm", "\n", "", "self", ".", "grad", "[", "t", "]", "=", "self", ".", "epsilon", "*", "(", "1", "/", "self", ".", "K", "-", "(", "arm", "==", "best_arm", ")", ")", "/", "p", "[", "arm", "]", "\n", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.EpsilonGreedy.print": [[325, 328], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"e-greedy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.Exp3.__init__": [[331, 349], ["min", "params.items", "numpy.zeros", "numpy.zeros", "numpy.zeros", "hasattr", "numpy.sqrt", "setattr", "CoAdaTS_Public.Exp3.base_Alg", "numpy.log"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "env", "=", "env", "\n", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "crs", "=", "min", "(", "1", ",", "np", ".", "sqrt", "(", "self", ".", "K", "*", "np", ".", "log", "(", "self", ".", "K", ")", "/", "(", "(", "np", ".", "e", "-", "1", ")", "*", "n", ")", ")", ")", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "eta", "=", "self", ".", "crs", "/", "self", ".", "K", "\n", "self", ".", "reward", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# cumulative reward", "\n", "\n", "self", ".", "grad", "=", "np", ".", "zeros", "(", "n", ")", "\n", "self", ".", "metrics", "=", "np", ".", "zeros", "(", "(", "n", ",", "3", ")", ")", "\n", "\n", "# initialize baseline", "\n", "self", ".", "is_baseline", "=", "hasattr", "(", "self", ",", "\"base_Alg\"", ")", "\n", "if", "self", ".", "is_baseline", ":", "\n", "      ", "self", ".", "base_alg", "=", "self", ".", "base_Alg", "(", "env", ",", "n", ",", "self", ".", "base_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.Exp3.update": [[350, 363], ["CoAdaTS_Public.Exp3.base_alg.get_arm", "CoAdaTS_Public.Exp3.env.reward", "CoAdaTS_Public.Exp3.base_alg.update", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.get_arm", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.reward", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["", "", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "reward", "[", "arm", "]", "+=", "r", "/", "self", ".", "phat", "[", "arm", "]", "\n", "\n", "best_r", "=", "self", ".", "env", ".", "rt", "[", "self", ".", "env", ".", "best_arm", "]", "\n", "if", "self", ".", "is_baseline", ":", "\n", "# baseline action and update", "\n", "      ", "base_arm", "=", "self", ".", "base_alg", ".", "get_arm", "(", "t", ")", "\n", "base_r", "=", "self", ".", "env", ".", "reward", "(", "base_arm", ")", "\n", "self", ".", "base_alg", ".", "update", "(", "t", ",", "base_arm", ",", "base_r", ")", "\n", "\n", "self", ".", "metrics", "[", "t", ",", ":", "]", "=", "np", ".", "asarray", "(", "[", "r", ",", "r", "-", "best_r", ",", "r", "-", "base_r", "]", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "metrics", "[", "t", ",", ":", "]", "=", "np", ".", "asarray", "(", "[", "r", ",", "r", "-", "best_r", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.Exp3.get_arm": [[364, 381], ["numpy.exp", "numpy.exp.sum", "numpy.cumsum", "CoAdaTS_Public.Exp3.reward.max", "numpy.flatnonzero", "numpy.random.rand", "numpy.exp.dot"], "methods", ["None"], ["", "", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "# probabilities of pulling arms", "\n", "    ", "scaled_reward", "=", "self", ".", "reward", "-", "self", ".", "reward", ".", "max", "(", ")", "\n", "p", "=", "np", ".", "exp", "(", "self", ".", "eta", "*", "scaled_reward", ")", "\n", "p", "/=", "p", ".", "sum", "(", ")", "\n", "self", ".", "phat", "=", "(", "1", "-", "self", ".", "crs", ")", "*", "p", "+", "self", ".", "eta", "\n", "\n", "# pull the arm", "\n", "q", "=", "np", ".", "cumsum", "(", "self", ".", "phat", ")", "\n", "arm", "=", "np", ".", "flatnonzero", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "q", "[", "-", "1", "]", "<", "q", ")", "[", "0", "]", "\n", "\n", "# derivative of the probability of the pulled arm", "\n", "self", ".", "grad", "[", "t", "]", "=", "(", "1", "/", "self", ".", "phat", "[", "arm", "]", ")", "*", "(", "(", "1", "-", "self", ".", "crs", ")", "*", "(", "p", "[", "arm", "]", "/", "self", ".", "K", ")", "*", "\n", "(", "scaled_reward", "[", "arm", "]", "-", "p", ".", "dot", "(", "scaled_reward", ")", ")", "-", "p", "[", "arm", "]", "+", "1", "/", "self", ".", "K", ")", "\n", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.Exp3.print": [[382, 385], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"Exp3\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.FPL.__init__": [[388, 396], ["numpy.sqrt", "params.items", "numpy.zeros", "setattr", "numpy.log"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "K", "=", "env", ".", "K", "\n", "self", ".", "eta", "=", "np", ".", "sqrt", "(", "(", "np", ".", "log", "(", "self", ".", "K", ")", "+", "1", ")", "/", "(", "self", ".", "K", "*", "n", ")", ")", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "self", ".", "loss", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# cumulative loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.FPL.update": [[397, 407], ["numpy.random.exponential", "numpy.argmin"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "# estimate the probability of pulling the arm", "\n", "    ", "wait_time", "=", "0", "\n", "while", "True", ":", "\n", "      ", "wait_time", "+=", "1", "\n", "ploss", "=", "self", ".", "loss", "+", "np", ".", "random", ".", "exponential", "(", "1", "/", "self", ".", "eta", ",", "self", ".", "K", ")", "\n", "if", "np", ".", "argmin", "(", "ploss", ")", "==", "arm", ":", "\n", "        ", "break", ";", "\n", "\n", "", "", "self", ".", "loss", "[", "arm", "]", "+=", "(", "1", "-", "r", ")", "*", "wait_time", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.FPL.get_arm": [[408, 414], ["numpy.argmin", "numpy.random.exponential"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "# perturb cumulative loss", "\n", "    ", "ploss", "=", "self", ".", "loss", "+", "np", ".", "random", ".", "exponential", "(", "1", "/", "self", ".", "eta", ",", "self", ".", "K", ")", "\n", "\n", "arm", "=", "np", ".", "argmin", "(", "ploss", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.FPL.print": [[415, 418], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"FPL\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinBanditAlg.__init__": [[421, 443], ["numpy.copy", "numpy.zeros", "params.items", "numpy.zeros", "numpy.linalg.inv", "CoAdaTS_Public.LinBanditAlg.Gram.dot", "setattr", "hasattr", "numpy.square", "numpy.eye"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "env", "=", "env", "\n", "self", ".", "X", "=", "np", ".", "copy", "(", "env", ".", "X", ")", "\n", "self", ".", "K", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "d", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "theta0", "=", "np", ".", "zeros", "(", "self", ".", "d", ")", "\n", "self", ".", "sigma0", "=", "1.0", "\n", "self", ".", "sigma", "=", "0.5", "\n", "self", ".", "crs", "=", "1.0", "# confidence region scaling", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "self", ",", "\"Sigma0\"", ")", ":", "\n", "      ", "self", ".", "Sigma0", "=", "np", ".", "square", "(", "self", ".", "sigma0", ")", "*", "np", ".", "eye", "(", "self", ".", "d", ")", "\n", "\n", "", "self", ".", "pulls", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "\n", "# sufficient statistics", "\n", "self", ".", "Gram", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "Sigma0", ")", "\n", "self", ".", "B", "=", "self", ".", "Gram", ".", "dot", "(", "self", ".", "theta0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinBanditAlg.update": [[444, 448], ["numpy.outer", "numpy.square", "numpy.square"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "x", "=", "self", ".", "X", "[", "arm", ",", ":", "]", "\n", "self", ".", "Gram", "+=", "np", ".", "outer", "(", "x", ",", "x", ")", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "self", ".", "B", "+=", "x", "*", "r", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinUCB.__init__": [[451, 455], ["CoAdaTS_Public.LinBanditAlg.__init__", "CoAdaTS_Public.LinUCB.confidence_ellipsoid_width"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.__init__", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBLog.confidence_ellipsoid_width"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "LinBanditAlg", ".", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", "\n", "\n", "self", ".", "cew", "=", "self", ".", "crs", "*", "self", ".", "confidence_ellipsoid_width", "(", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinUCB.confidence_ellipsoid_width": [[456, 467], ["numpy.amax", "numpy.sqrt", "numpy.linalg.norm", "numpy.square", "numpy.sqrt", "numpy.sqrt", "numpy.log", "numpy.square"], "methods", ["None"], ["", "def", "confidence_ellipsoid_width", "(", "self", ",", "t", ")", ":", "\n", "# Theorem 2 in Abassi-Yadkori (2011)", "\n", "# Improved Algorithms for Linear Stochastic Bandits", "\n", "    ", "delta", "=", "1", "/", "self", ".", "n", "\n", "L", "=", "np", ".", "amax", "(", "np", ".", "linalg", ".", "norm", "(", "self", ".", "X", ",", "axis", "=", "1", ")", ")", "\n", "Lambda", "=", "1", "/", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "R", "=", "self", ".", "sigma", "\n", "S", "=", "np", ".", "sqrt", "(", "self", ".", "d", ")", "\n", "width", "=", "np", ".", "sqrt", "(", "Lambda", ")", "*", "S", "+", "R", "*", "np", ".", "sqrt", "(", "self", ".", "d", "*", "np", ".", "log", "(", "(", "1", "+", "t", "*", "np", ".", "square", "(", "L", ")", "/", "Lambda", ")", "/", "delta", ")", ")", "\n", "return", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinUCB.get_arm": [[468, 479], ["numpy.linalg.inv", "numpy.linalg.inv.dot", "numpy.square", "numpy.argmax", "CoAdaTS_Public.LinUCB.X.dot", "numpy.sqrt", "CoAdaTS_Public.LinUCB.X.dot"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "Gram", ")", "\n", "theta", "=", "Gram_inv", ".", "dot", "(", "self", ".", "B", ")", "\n", "\n", "# UCBs", "\n", "Gram_inv", "/=", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "theta", ")", "+", "self", ".", "cew", "*", "np", ".", "sqrt", "(", "(", "self", ".", "X", ".", "dot", "(", "Gram_inv", ")", "*", "self", ".", "X", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinUCB.print": [[480, 483], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"LinUCB\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinGreedy.get_arm": [[486, 496], ["numpy.zeros", "numpy.argmax", "numpy.random.rand", "numpy.linalg.solve", "CoAdaTS_Public.LinGreedy.X.dot", "numpy.sqrt", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve"], ["  ", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.05", "*", "np", ".", "sqrt", "(", "self", ".", "n", "/", "(", "t", "+", "1", ")", ")", "/", "2", ":", "\n", "      ", "self", ".", "mu", "[", "np", ".", "random", ".", "randint", "(", "self", ".", "K", ")", "]", "=", "np", ".", "Inf", "\n", "", "else", ":", "\n", "      ", "theta", "=", "np", ".", "linalg", ".", "solve", "(", "self", ".", "Gram", ",", "self", ".", "B", ")", "\n", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "theta", ")", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinGreedy.print": [[497, 500], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"Lin e-greedy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinTS.update": [[503, 507], ["numpy.outer", "numpy.square", "numpy.square"], "methods", ["None"], ["  ", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "x", "=", "self", ".", "env", ".", "X", "[", "arm", ",", ":", "]", "\n", "self", ".", "Gram", "+=", "np", ".", "outer", "(", "x", ",", "x", ")", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "self", ".", "B", "+=", "x", "*", "r", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinTS.get_arm": [[508, 520], ["numpy.linalg.inv", "numpy.linalg.inv.dot", "numpy.random.multivariate_normal", "CoAdaTS_Public.LinTS.env.X.dot", "numpy.argmax", "numpy.square"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "Gram", ")", "\n", "thetabar", "=", "Gram_inv", ".", "dot", "(", "self", ".", "B", ")", "\n", "\n", "# posterior sampling", "\n", "thetatilde", "=", "np", ".", "random", ".", "multivariate_normal", "(", "thetabar", ",", "\n", "np", ".", "square", "(", "self", ".", "crs", ")", "*", "Gram_inv", ")", "\n", "self", ".", "mu", "=", "self", ".", "env", ".", "X", ".", "dot", "(", "thetatilde", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinTS.print": [[521, 524], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"LinTS\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoLinTS.update": [[527, 531], ["numpy.outer", "numpy.square", "numpy.square"], "methods", ["None"], ["  ", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "x", "=", "self", ".", "env", ".", "X", "[", "arm", ",", ":", "]", "\n", "self", ".", "Gram", "+=", "np", ".", "outer", "(", "x", ",", "x", ")", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "self", ".", "B", "+=", "x", "*", "r", "/", "np", ".", "square", "(", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoLinTS.get_arm": [[532, 544], ["numpy.linalg.inv", "numpy.linalg.inv.dot", "numpy.random.multivariate_normal", "CoAdaTS_Public.CoLinTS.env.X.dot", "numpy.argmax", "numpy.square"], "methods", ["None"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "Gram", ")", "\n", "thetabar", "=", "Gram_inv", ".", "dot", "(", "self", ".", "B", ")", "\n", "\n", "# posterior sampling", "\n", "thetatilde", "=", "np", ".", "random", ".", "multivariate_normal", "(", "thetabar", ",", "\n", "np", ".", "square", "(", "self", ".", "crs", ")", "*", "Gram_inv", ")", "\n", "self", ".", "mu", "=", "self", ".", "env", ".", "X", ".", "dot", "(", "thetatilde", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "self", ".", "pulls", "[", "arm", "]", "+=", "1", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoLinTS.print": [[545, 548], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"CoLinTS\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.__init__": [[551, 574], ["numpy.copy", "numpy.zeros", "params.items", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "setattr", "numpy.outer"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "env", "=", "env", "\n", "self", ".", "X", "=", "np", ".", "copy", "(", "env", ".", "X", ")", "\n", "self", ".", "K", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "d", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "sigma0", "=", "1.0", "\n", "self", ".", "crs", "=", "1.0", "# confidence region scaling", "\n", "self", ".", "crs_is_width", "=", "False", "\n", "\n", "self", ".", "irls_theta", "=", "np", ".", "zeros", "(", "self", ".", "d", ")", "\n", "self", ".", "irls_error", "=", "1e-3", "\n", "self", ".", "irls_num_iter", "=", "30", "\n", "\n", "for", "attr", ",", "val", "in", "params", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "# sufficient statistics", "\n", "", "self", ".", "pos", "=", "np", ".", "zeros", "(", "self", ".", "K", ",", "dtype", "=", "int", ")", "# number of positive observations", "\n", "self", ".", "neg", "=", "np", ".", "zeros", "(", "self", ".", "K", ",", "dtype", "=", "int", ")", "# number of negative observations", "\n", "self", ".", "X2", "=", "np", ".", "zeros", "(", "(", "self", ".", "K", ",", "self", ".", "d", ",", "self", ".", "d", ")", ")", "# outer products of arm features", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "      ", "self", ".", "X2", "[", "k", ",", ":", ",", ":", "]", "=", "np", ".", "outer", "(", "self", ".", "X", "[", "k", ",", ":", "]", ",", "self", ".", "X", "[", "k", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.update": [[575, 578], ["None"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "t", ",", "arm", ",", "r", ")", ":", "\n", "    ", "self", ".", "pos", "[", "arm", "]", "+=", "r", "\n", "self", ".", "neg", "[", "arm", "]", "+=", "1", "-", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid": [[579, 582], ["numpy.exp"], "methods", ["None"], ["", "def", "sigmoid", "(", "self", ",", "x", ")", ":", "\n", "    ", "y", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.solve": [[583, 613], ["numpy.copy", "numpy.copy", "CoAdaTS_Public.LogBanditAlg.X.dot", "numpy.linalg.solve", "numpy.zeros", "numpy.copy", "CoAdaTS_Public.LogBanditAlg.sigmoid", "numpy.tensordot", "CoAdaTS_Public.LogBanditAlg.X.T.dot", "numpy.linalg.norm", "CoAdaTS_Public.LogBanditAlg.sigmoid", "numpy.eye", "numpy.square", "CoAdaTS_Public.LogBanditAlg.sigmoid", "CoAdaTS_Public.LogBanditAlg.sigmoid"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid"], ["", "def", "solve", "(", "self", ")", ":", "\n", "# iterative reweighted least squares for Bayesian logistic regression", "\n", "# Sections 4.3.3 and 4.5.1 in Bishop (2006)", "\n", "# Pattern Recognition and Machine Learning", "\n", "    ", "theta", "=", "np", ".", "copy", "(", "self", ".", "irls_theta", ")", "\n", "\n", "num_iter", "=", "0", "\n", "while", "num_iter", "<", "self", ".", "irls_num_iter", ":", "\n", "      ", "theta_old", "=", "np", ".", "copy", "(", "theta", ")", "\n", "\n", "Xtheta", "=", "self", ".", "X", ".", "dot", "(", "theta", ")", "\n", "R", "=", "self", ".", "sigmoid", "(", "Xtheta", ")", "*", "(", "1", "-", "self", ".", "sigmoid", "(", "Xtheta", ")", ")", "\n", "pulls", "=", "self", ".", "pos", "+", "self", ".", "neg", "\n", "Gram", "=", "np", ".", "tensordot", "(", "R", "*", "pulls", ",", "self", ".", "X2", ",", "axes", "=", "(", "[", "0", "]", ",", "[", "0", "]", ")", ")", "+", "np", ".", "eye", "(", "self", ".", "d", ")", "/", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "Rz", "=", "R", "*", "pulls", "*", "Xtheta", "-", "self", ".", "pos", "*", "(", "self", ".", "sigmoid", "(", "Xtheta", ")", "-", "1", ")", "-", "self", ".", "neg", "*", "(", "self", ".", "sigmoid", "(", "Xtheta", ")", "-", "0", ")", "\n", "theta", "=", "np", ".", "linalg", ".", "solve", "(", "Gram", ",", "self", ".", "X", ".", "T", ".", "dot", "(", "Rz", ")", ")", "\n", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "theta", "-", "theta_old", ")", "<", "self", ".", "irls_error", ":", "\n", "        ", "break", ";", "\n", "", "num_iter", "+=", "1", "\n", "\n", "", "if", "num_iter", "==", "self", ".", "irls_num_iter", ":", "\n", "      ", "self", ".", "irls_theta", "=", "np", ".", "zeros", "(", "self", ".", "d", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "irls_theta", "=", "np", ".", "copy", "(", "theta", ")", "\n", "\n", "", "return", "theta", ",", "Gram", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogUCB.__init__": [[616, 623], ["CoAdaTS_Public.LogBanditAlg.__init__", "CoAdaTS_Public.LogUCB.confidence_ellipsoid_width"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.__init__", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBLog.confidence_ellipsoid_width"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "LogBanditAlg", ".", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", "\n", "\n", "if", "not", "self", ".", "crs_is_width", ":", "\n", "      ", "self", ".", "cew", "=", "self", ".", "crs", "*", "self", ".", "confidence_ellipsoid_width", "(", "n", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "cew", "=", "self", ".", "crs", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogUCB.confidence_ellipsoid_width": [[624, 636], ["numpy.amax", "numpy.sqrt", "numpy.linalg.norm", "numpy.sqrt", "numpy.log", "numpy.log", "numpy.log", "numpy.square"], "methods", ["None"], ["", "", "def", "confidence_ellipsoid_width", "(", "self", ",", "t", ")", ":", "\n", "# Section 4.1 in Filippi (2010)", "\n", "# Parametric Bandits: The Generalized Linear Case", "\n", "    ", "delta", "=", "1", "/", "self", ".", "n", "\n", "c_m", "=", "np", ".", "amax", "(", "np", ".", "linalg", ".", "norm", "(", "self", ".", "X", ",", "axis", "=", "1", ")", ")", "\n", "c_mu", "=", "0.25", "# minimum derivative of the mean function", "\n", "k_mu", "=", "0.25", "\n", "kappa", "=", "np", ".", "sqrt", "(", "3", "+", "2", "*", "np", ".", "log", "(", "1", "+", "2", "*", "np", ".", "square", "(", "c_m", "/", "self", ".", "sigma0", ")", ")", ")", "\n", "R_max", "=", "1.0", "\n", "width", "=", "(", "2", "*", "k_mu", "*", "kappa", "*", "R_max", "/", "c_mu", ")", "*", "np", ".", "sqrt", "(", "2", "*", "self", ".", "d", "*", "np", ".", "log", "(", "t", ")", "*", "np", ".", "log", "(", "2", "*", "self", ".", "d", "*", "self", ".", "n", "/", "delta", ")", ")", "\n", "return", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogUCB.get_arm": [[637, 650], ["numpy.linalg.inv", "CoAdaTS_Public.LogUCB.solve", "numpy.argmax", "numpy.tensordot", "CoAdaTS_Public.LogUCB.sigmoid", "numpy.eye", "numpy.square", "CoAdaTS_Public.LogUCB.X.dot", "numpy.sqrt", "CoAdaTS_Public.LogUCB.X.dot"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "pulls", "=", "self", ".", "pos", "+", "self", ".", "neg", "\n", "Gram", "=", "np", ".", "tensordot", "(", "pulls", ",", "self", ".", "X2", ",", "axes", "=", "(", "[", "0", "]", ",", "[", "0", "]", ")", ")", "+", "np", ".", "eye", "(", "self", ".", "d", ")", "/", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "Gram", ")", "\n", "theta", ",", "_", "=", "self", ".", "solve", "(", ")", "\n", "\n", "# UCBs", "\n", "self", ".", "mu", "=", "self", ".", "sigmoid", "(", "self", ".", "X", ".", "dot", "(", "theta", ")", ")", "+", "self", ".", "cew", "*", "np", ".", "sqrt", "(", "(", "self", ".", "X", ".", "dot", "(", "Gram_inv", ")", "*", "self", ".", "X", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogUCB.print": [[651, 654], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"GLM-UCB (log)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBLog.__init__": [[657, 664], ["CoAdaTS_Public.LogBanditAlg.__init__", "CoAdaTS_Public.UCBLog.confidence_ellipsoid_width"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.__init__", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBLog.confidence_ellipsoid_width"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "LogBanditAlg", ".", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", "\n", "\n", "if", "not", "self", ".", "crs_is_width", ":", "\n", "      ", "self", ".", "cew", "=", "self", ".", "crs", "*", "self", ".", "confidence_ellipsoid_width", "(", "n", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "cew", "=", "self", ".", "crs", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBLog.confidence_ellipsoid_width": [[665, 675], ["numpy.sqrt", "numpy.log", "numpy.log"], "methods", ["None"], ["", "", "def", "confidence_ellipsoid_width", "(", "self", ",", "t", ")", ":", "\n", "# Theorem 2 in Li (2017)", "\n", "# Provably Optimal Algorithms for Generalized Linear Contextual Bandits", "\n", "    ", "delta", "=", "1", "/", "self", ".", "n", "\n", "sigma", "=", "0.5", "\n", "kappa", "=", "0.25", "# minimum derivative of a constrained mean function", "\n", "width", "=", "(", "sigma", "/", "kappa", ")", "*", "np", ".", "sqrt", "(", "(", "self", ".", "d", "/", "2", ")", "*", "np", ".", "log", "(", "1", "+", "2", "*", "self", ".", "n", "/", "self", ".", "d", ")", "+", "np", ".", "log", "(", "1", "/", "delta", ")", ")", "\n", "return", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBLog.get_arm": [[676, 689], ["numpy.linalg.inv", "CoAdaTS_Public.UCBLog.solve", "numpy.argmax", "numpy.tensordot", "CoAdaTS_Public.UCBLog.X.dot", "numpy.eye", "numpy.square", "numpy.sqrt", "CoAdaTS_Public.UCBLog.X.dot"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "pulls", "=", "self", ".", "pos", "+", "self", ".", "neg", "\n", "Gram", "=", "np", ".", "tensordot", "(", "pulls", ",", "self", ".", "X2", ",", "axes", "=", "(", "[", "0", "]", ",", "[", "0", "]", ")", ")", "+", "np", ".", "eye", "(", "self", ".", "d", ")", "/", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "Gram", ")", "\n", "theta", ",", "_", "=", "self", ".", "solve", "(", ")", "\n", "\n", "# UCBs", "\n", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "theta", ")", "+", "self", ".", "cew", "*", "np", ".", "sqrt", "(", "(", "self", ".", "X", ".", "dot", "(", "Gram_inv", ")", "*", "self", ".", "X", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.UCBLog.print": [[690, 693], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"UCB-GLM (log)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogGreedy.__init__": [[696, 700], ["CoAdaTS_Public.LogBanditAlg.__init__"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.__init__"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "LogBanditAlg", ".", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", "\n", "\n", "self", ".", "epsilon", "=", "0.05", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogGreedy.get_arm": [[701, 711], ["numpy.zeros", "numpy.argmax", "numpy.random.rand", "CoAdaTS_Public.LogGreedy.solve", "CoAdaTS_Public.LogGreedy.sigmoid", "CoAdaTS_Public.LogGreedy.X.dot", "numpy.sqrt", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "epsilon", "*", "np", ".", "sqrt", "(", "self", ".", "n", "/", "(", "t", "+", "1", ")", ")", "/", "2", ":", "\n", "      ", "self", ".", "mu", "[", "np", ".", "random", ".", "randint", "(", "self", ".", "K", ")", "]", "=", "np", ".", "Inf", "\n", "", "else", ":", "\n", "      ", "theta", ",", "_", "=", "self", ".", "solve", "(", ")", "\n", "self", ".", "mu", "=", "self", ".", "sigmoid", "(", "self", ".", "X", ".", "dot", "(", "theta", ")", ")", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogGreedy.print": [[712, 715], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"Log e-greedy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogTS.get_arm": [[718, 729], ["CoAdaTS_Public.LogTS.solve", "numpy.linalg.inv", "numpy.random.multivariate_normal", "CoAdaTS_Public.LogTS.X.dot", "numpy.argmax", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve"], ["  ", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "thetabar", ",", "Gram", "=", "self", ".", "solve", "(", ")", "\n", "Gram_inv", "=", "np", ".", "linalg", ".", "inv", "(", "Gram", ")", "\n", "\n", "# posterior sampling", "\n", "thetatilde", "=", "np", ".", "random", ".", "multivariate_normal", "(", "thetabar", ",", "\n", "np", ".", "square", "(", "self", ".", "crs", ")", "*", "Gram_inv", ")", "\n", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "thetatilde", ")", "\n", "\n", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogTS.print": [[730, 733], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"GLM-TSL (log)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.__init__": [[736, 740], ["CoAdaTS_Public.LogBanditAlg.__init__"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.__init__"], ["  ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", ":", "\n", "    ", "self", ".", "a", "=", "1.0", "\n", "\n", "LogBanditAlg", ".", "__init__", "(", "self", ",", "env", ",", "n", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve": [[741, 774], ["numpy.copy", "numpy.minimum", "numpy.copy", "CoAdaTS_Public.LogFPL.X.dot", "numpy.linalg.solve", "numpy.zeros", "numpy.copy", "numpy.sqrt", "numpy.maximum", "CoAdaTS_Public.LogFPL.sigmoid", "numpy.tensordot", "CoAdaTS_Public.LogFPL.X.T.dot", "numpy.linalg.norm", "numpy.random.randn", "CoAdaTS_Public.LogFPL.sigmoid", "numpy.eye", "numpy.square", "CoAdaTS_Public.LogFPL.sigmoid"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid"], ["", "def", "solve", "(", "self", ")", ":", "\n", "# normal noise perturbation", "\n", "    ", "pulls", "=", "self", ".", "pos", "+", "self", ".", "neg", "\n", "z", "=", "self", ".", "a", "*", "np", ".", "sqrt", "(", "pulls", ")", "*", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "np", ".", "random", ".", "randn", "(", "self", ".", "K", ")", ",", "-", "6", ")", ",", "6", ")", "\n", "\n", "# iterative reweighted least squares for Bayesian logistic regression", "\n", "# Sections 4.3.3 and 4.5.1 in Bishop (2006)", "\n", "# Pattern Recognition and Machine Learning", "\n", "theta", "=", "np", ".", "copy", "(", "self", ".", "irls_theta", ")", "\n", "\n", "num_iter", "=", "0", "\n", "while", "num_iter", "<", "self", ".", "irls_num_iter", ":", "\n", "      ", "theta_old", "=", "np", ".", "copy", "(", "theta", ")", "\n", "\n", "Xtheta", "=", "self", ".", "X", ".", "dot", "(", "theta", ")", "\n", "R", "=", "self", ".", "sigmoid", "(", "Xtheta", ")", "*", "(", "1", "-", "self", ".", "sigmoid", "(", "Xtheta", ")", ")", "\n", "Gram", "=", "np", ".", "tensordot", "(", "R", "*", "pulls", ",", "self", ".", "X2", ",", "axes", "=", "(", "[", "0", "]", ",", "[", "0", "]", ")", ")", "+", "np", ".", "eye", "(", "self", ".", "d", ")", "/", "np", ".", "square", "(", "self", ".", "sigma0", ")", "\n", "Rz", "=", "R", "*", "pulls", "*", "Xtheta", "-", "(", "pulls", "*", "self", ".", "sigmoid", "(", "Xtheta", ")", "-", "(", "self", ".", "pos", "+", "z", ")", ")", "\n", "theta", "=", "np", ".", "linalg", ".", "solve", "(", "Gram", ",", "self", ".", "X", ".", "T", ".", "dot", "(", "Rz", ")", ")", "\n", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "theta", "-", "theta_old", ")", "<", "self", ".", "irls_error", ":", "\n", "        ", "break", ";", "\n", "", "num_iter", "+=", "1", "\n", "\n", "", "if", "num_iter", "==", "self", ".", "irls_num_iter", ":", "\n", "      ", "self", ".", "irls_theta", "=", "np", ".", "zeros", "(", "self", ".", "d", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "irls_theta", "=", "np", ".", "copy", "(", "theta", ")", "\n", "\n", "", "return", "theta", ",", "Gram", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.get_arm": [[775, 786], ["numpy.zeros", "numpy.argmax", "CoAdaTS_Public.LogFPL.solve", "CoAdaTS_Public.LogFPL.sigmoid", "CoAdaTS_Public.LogFPL.X.dot"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.solve", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBanditAlg.sigmoid"], ["", "def", "get_arm", "(", "self", ",", "t", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "if", "t", "<", "self", ".", "d", ":", "\n", "      ", "self", ".", "mu", "[", "t", "]", "=", "np", ".", "Inf", "\n", "", "else", ":", "\n", "# history perturbation", "\n", "      ", "theta", ",", "_", "=", "self", ".", "solve", "(", ")", "\n", "self", ".", "mu", "=", "self", ".", "sigmoid", "(", "self", ".", "X", ".", "dot", "(", "theta", ")", ")", "\n", "\n", "", "arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "return", "arm", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.print": [[787, 790], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print", "(", ")", ":", "\n", "    ", "return", "\"GLM-FPL (log)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BerBandit.__init__": [[796, 803], ["numpy.copy", "numpy.argmax", "CoAdaTS_Public.BerBandit.randomize"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "mu", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "copy", "(", "mu", ")", "\n", "self", ".", "K", "=", "self", ".", "mu", ".", "size", "\n", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BerBandit.randomize": [[804, 807], ["numpy.random.rand"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# generate random rewards", "\n", "    ", "self", ".", "rt", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "mu", ")", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BerBandit.reward": [[808, 811], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BerBandit.regret": [[812, 815], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BerBandit.pregret": [[816, 819], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mu", "[", "self", ".", "best_arm", "]", "-", "self", ".", "mu", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BerBandit.print": [[820, 823], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "return", "\"Bernoulli bandit with arms (%s)\"", "%", "\", \"", ".", "join", "(", "\"%.3f\"", "%", "s", "for", "s", "in", "self", ".", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BetaBandit.__init__": [[828, 836], ["numpy.copy", "numpy.argmax", "CoAdaTS_Public.BetaBandit.randomize"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "mu", ",", "a_plus_b", "=", "4", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "copy", "(", "mu", ")", "\n", "self", ".", "K", "=", "self", ".", "mu", ".", "size", "\n", "self", ".", "a_plus_b", "=", "a_plus_b", "\n", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BetaBandit.randomize": [[837, 841], ["numpy.random.beta"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# generate random rewards", "\n", "    ", "self", ".", "rt", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "a_plus_b", "*", "self", ".", "mu", ",", "self", ".", "a_plus_b", "*", "(", "1", "-", "self", ".", "mu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BetaBandit.reward": [[842, 845], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BetaBandit.regret": [[846, 849], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BetaBandit.pregret": [[850, 853], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mu", "[", "self", ".", "best_arm", "]", "-", "self", ".", "mu", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.BetaBandit.print": [[854, 857], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "return", "\"Beta bandit with arms (%s)\"", "%", "\", \"", ".", "join", "(", "\"%.3f\"", "%", "s", "for", "s", "in", "self", ".", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.GaussBandit.__init__": [[862, 870], ["numpy.copy", "numpy.argmax", "CoAdaTS_Public.GaussBandit.randomize"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "mu", ",", "sigma", "=", "0.5", ")", ":", "\n", "    ", "self", ".", "mu", "=", "np", ".", "copy", "(", "mu", ")", "\n", "self", ".", "K", "=", "self", ".", "mu", ".", "size", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.GaussBandit.randomize": [[871, 874], ["numpy.random.randn"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# generate random rewards", "\n", "    ", "self", ".", "rt", "=", "self", ".", "mu", "+", "self", ".", "sigma", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.GaussBandit.reward": [[875, 878], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.GaussBandit.regret": [[879, 882], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.GaussBandit.pregret": [[883, 886], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mu", "[", "self", ".", "best_arm", "]", "-", "self", ".", "mu", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.GaussBandit.print": [[887, 890], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "return", "\"Gaussian bandit with arms (%s)\"", "%", "\", \"", ".", "join", "(", "\"%.3f\"", "%", "s", "for", "s", "in", "self", ".", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinBandit.__init__": [[895, 908], ["numpy.copy", "numpy.copy", "CoAdaTS_Public.LinBandit.X.dot", "numpy.argmax", "CoAdaTS_Public.LinBandit.randomize"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "X", ",", "theta", ",", "noise", "=", "\"normal\"", ",", "sigma", "=", "0.5", ")", ":", "\n", "    ", "self", ".", "X", "=", "np", ".", "copy", "(", "X", ")", "\n", "self", ".", "K", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "d", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "theta", "=", "np", ".", "copy", "(", "theta", ")", "\n", "self", ".", "noise", "=", "noise", "\n", "if", "self", ".", "noise", "==", "\"normal\"", ":", "\n", "      ", "self", ".", "sigma", "=", "sigma", "\n", "\n", "", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "self", ".", "theta", ")", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinBandit.randomize": [[909, 917], ["numpy.random.randn", "numpy.random.beta", "numpy.random.rand"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# generate random rewards", "\n", "    ", "if", "self", ".", "noise", "==", "\"normal\"", ":", "\n", "      ", "self", ".", "rt", "=", "self", ".", "mu", "+", "self", ".", "sigma", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "K", ")", "\n", "", "elif", "self", ".", "noise", "==", "\"bernoulli\"", ":", "\n", "      ", "self", ".", "rt", "=", "(", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "<", "self", ".", "mu", ")", ".", "astype", "(", "float", ")", "\n", "", "elif", "self", ".", "noise", "==", "\"beta\"", ":", "\n", "      ", "self", ".", "rt", "=", "np", ".", "random", ".", "beta", "(", "4", "*", "self", ".", "mu", ",", "4", "*", "(", "1", "-", "self", ".", "mu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinBandit.reward": [[918, 921], ["None"], "methods", ["None"], ["", "", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinBandit.regret": [[922, 925], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinBandit.pregret": [[926, 929], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mu", "[", "self", ".", "best_arm", "]", "-", "self", ".", "mu", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LinBandit.print": [[930, 940], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "noise", "==", "\"normal\"", ":", "\n", "      ", "return", "\"Linear bandit: %d dimensions, %d arms\"", "%", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "", "elif", "self", ".", "noise", "==", "\"bernoulli\"", ":", "\n", "      ", "return", "\"Bernoulli linear bandit: %d dimensions, %d arms\"", "%", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "", "elif", "self", ".", "noise", "==", "\"beta\"", ":", "\n", "      ", "return", "\"Beta linear bandit: %d dimensions, %d arms\"", "%", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBandit.__init__": [[945, 955], ["numpy.copy", "numpy.copy", "numpy.argmax", "CoAdaTS_Public.LogBandit.randomize", "numpy.exp", "CoAdaTS_Public.LogBandit.X.dot"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "X", ",", "theta", ")", ":", "\n", "    ", "self", ".", "X", "=", "np", ".", "copy", "(", "X", ")", "\n", "self", ".", "K", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "d", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "theta", "=", "np", ".", "copy", "(", "theta", ")", "\n", "\n", "self", ".", "mu", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "self", ".", "X", ".", "dot", "(", "self", ".", "theta", ")", ")", ")", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBandit.randomize": [[956, 959], ["numpy.random.rand"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# generate random rewards", "\n", "    ", "self", ".", "rt", "=", "(", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "<", "self", ".", "mu", ")", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBandit.reward": [[960, 963], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBandit.regret": [[964, 967], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBandit.pregret": [[968, 971], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mu", "[", "self", ".", "best_arm", "]", "-", "self", ".", "mu", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBandit.print": [[972, 974], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "return", "\"Logistic bandit: %d dimensions, %d arms\"", "%", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogBandit.ball_env": [[975, 1004], ["range", "numpy.eye", "numpy.random.randn", "numpy.hstack", "numpy.random.randn", "numpy.append", "env.append", "CoAdaTS_Public.LogBandit.print"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["", "@", "staticmethod", "\n", "def", "ball_env", "(", "d", "=", "3", ",", "K", "=", "10", ",", "num_env", "=", "100", ")", ":", "\n", "    ", "\"\"\"Arm features and theta are generated randomly in a ball.\"\"\"", "\n", "\n", "env", "=", "[", "]", "\n", "for", "env_id", "in", "range", "(", "num_env", ")", ":", "\n", "# standard d-dimensional basis (with a bias term)", "\n", "      ", "basis", "=", "np", ".", "eye", "(", "d", ")", "\n", "basis", "[", ":", ",", "-", "1", "]", "=", "1", "\n", "\n", "# arm features in a unit (d - 2)-sphere", "\n", "X", "=", "np", ".", "random", ".", "randn", "(", "K", ",", "d", "-", "1", ")", "\n", "X", "/=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "X", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "K", ",", "1", ")", ")", ")", ")", "# bias term", "\n", "X", "[", ":", "basis", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "basis", "\n", "\n", "# parameter vector in a (d - 2)-sphere with radius 1.5", "\n", "theta", "=", "np", ".", "random", ".", "randn", "(", "d", "-", "1", ")", "\n", "theta", "*=", "1.5", "/", "np", ".", "sqrt", "(", "np", ".", "square", "(", "theta", ")", ".", "sum", "(", ")", ")", "\n", "theta", "=", "np", ".", "append", "(", "theta", ",", "[", "0", "]", ")", "\n", "\n", "# create environment", "\n", "env", ".", "append", "(", "LogBandit", "(", "X", ",", "theta", ")", ")", "\n", "print", "(", "\"%3d: %.2f %.2f | \"", "%", "(", "env", "[", "-", "1", "]", ".", "best_arm", ",", "\n", "env", "[", "-", "1", "]", ".", "mu", ".", "min", "(", ")", ",", "env", "[", "-", "1", "]", ".", "mu", ".", "max", "(", ")", ")", ",", "end", "=", "\"\"", ")", "\n", "if", "(", "env_id", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "        ", "print", "(", ")", "\n", "\n", "", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.__init__": [[1009, 1021], ["numpy.copy", "numpy.copy", "CoAdaTS_Public.CoBandit.X.dot", "numpy.argmax", "CoAdaTS_Public.CoBandit.randomize"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize"], ["def", "__init__", "(", "self", ",", "X", ",", "Theta", ",", "sigma", "=", "0.5", ")", ":", "\n", "    ", "self", ".", "X", "=", "np", ".", "copy", "(", "X", ")", "# [number of contexs] x d feature matrix", "\n", "self", ".", "Theta", "=", "np", ".", "copy", "(", "Theta", ")", "# d x [number of arms] parameter matrix", "\n", "self", ".", "K", "=", "self", ".", "Theta", ".", "shape", "[", "1", "]", "\n", "self", ".", "d", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "num_contexts", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n", "self", ".", "mu", "=", "self", ".", "X", ".", "dot", "(", "self", ".", "Theta", ")", "\n", "self", ".", "best_arm", "=", "np", ".", "argmax", "(", "self", ".", "mu", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "randomize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize": [[1022, 1029], ["numpy.random.randint", "numpy.random.randn"], "methods", ["None"], ["", "def", "randomize", "(", "self", ")", ":", "\n", "# choose context", "\n", "    ", "self", ".", "ct", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_contexts", ")", "\n", "self", ".", "mut", "=", "self", ".", "mu", "[", "self", ".", "ct", ",", ":", "]", "\n", "\n", "# generate stochastic rewards", "\n", "self", ".", "rt", "=", "self", ".", "mut", "+", "self", ".", "sigma", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.reward": [[1030, 1033], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous reward of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.regret": [[1034, 1037], ["None"], "methods", ["None"], ["", "def", "regret", "(", "self", ",", "arm", ")", ":", "\n", "# instantaneous regret of the arm", "\n", "    ", "return", "self", ".", "rt", "[", "self", ".", "best_arm", "[", "self", ".", "ct", "]", "]", "-", "self", ".", "rt", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.pregret": [[1038, 1041], ["None"], "methods", ["None"], ["", "def", "pregret", "(", "self", ",", "arm", ")", ":", "\n", "# expected regret of the arm", "\n", "    ", "return", "self", ".", "mut", "[", "self", ".", "best_arm", "[", "self", ".", "ct", "]", "]", "-", "self", ".", "mut", "[", "arm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print": [[1042, 1044], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "    ", "return", "\"Contextual bandit: %d dimensions, %d arms\"", "%", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.evaluate_one": [[1046, 1069], ["Alg", "numpy.zeros", "numpy.zeros", "range", "env.randomize", "Alg.get_arm", "Alg.update", "env.regret", "numpy.argmax", "env.pregret", "env.reward"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.randomize", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.LogFPL.get_arm", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.regret", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.pregret", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.reward"], ["", "", "def", "evaluate_one", "(", "Alg", ",", "params", ",", "env", ",", "n", ",", "period_size", "=", "1", ")", ":", "\n", "  ", "\"\"\"One run of a bandit algorithm.\"\"\"", "\n", "alg", "=", "Alg", "(", "env", ",", "n", ",", "params", ")", "\n", "\n", "regret", "=", "np", ".", "zeros", "(", "n", "//", "period_size", ")", "\n", "sregret", "=", "np", ".", "zeros", "(", "n", "//", "period_size", ")", "\n", "for", "t", "in", "range", "(", "n", ")", ":", "\n", "# generate state", "\n", "    ", "env", ".", "randomize", "(", ")", "\n", "\n", "# take action", "\n", "arm", "=", "alg", ".", "get_arm", "(", "t", ")", "\n", "\n", "# update model and regret", "\n", "alg", ".", "update", "(", "t", ",", "arm", ",", "env", ".", "reward", "(", "arm", ")", ")", "\n", "regret_at_t", "=", "env", ".", "regret", "(", "arm", ")", "\n", "regret", "[", "t", "//", "period_size", "]", "+=", "regret_at_t", "\n", "\n", "# BAI", "\n", "idx_mf", "=", "np", ".", "argmax", "(", "alg", ".", "pulls", ")", "\n", "sregret", "[", "t", "//", "period_size", "]", "+=", "env", ".", "pregret", "(", "idx_mf", ")", "\n", "\n", "", "return", "regret", ",", "alg", ",", "sregret", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.evaluate": [[1071, 1102], ["time.time", "len", "numpy.zeros", "numpy.zeros", "numpy.linspace().astype", "range", "print", "CoAdaTS_Public.evaluate_one", "print", "np.zeros.sum", "print", "numpy.linspace", "Alg.print", "print", "time.time", "regret.sum.mean", "numpy.median", "regret.sum.max", "regret.sum.min", "regret.sum.std", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.evaluate_one", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["", "def", "evaluate", "(", "Alg", ",", "params", ",", "env", ",", "n", "=", "1000", ",", "period_size", "=", "1", ",", "printout", "=", "True", ")", ":", "\n", "  ", "\"\"\"Multiple runs of a bandit algorithm.\"\"\"", "\n", "if", "printout", ":", "\n", "    ", "print", "(", "\"Evaluating %s\"", "%", "Alg", ".", "print", "(", ")", ",", "end", "=", "\"\"", ")", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "num_exps", "=", "len", "(", "env", ")", "\n", "regret", "=", "np", ".", "zeros", "(", "(", "n", "//", "period_size", ",", "num_exps", ")", ")", "\n", "sregret", "=", "np", ".", "zeros", "(", "(", "n", "//", "period_size", ",", "num_exps", ")", ")", "\n", "alg", "=", "num_exps", "*", "[", "None", "]", "\n", "\n", "dots", "=", "np", ".", "linspace", "(", "0", ",", "num_exps", "-", "1", ",", "100", ")", ".", "astype", "(", "int", ")", "\n", "for", "ex", "in", "range", "(", "num_exps", ")", ":", "\n", "    ", "output", "=", "evaluate_one", "(", "Alg", ",", "params", ",", "env", "[", "ex", "]", ",", "n", ",", "period_size", ")", "\n", "regret", "[", ":", ",", "ex", "]", "=", "output", "[", "0", "]", "\n", "alg", "[", "ex", "]", "=", "output", "[", "1", "]", "\n", "sregret", "[", ":", ",", "ex", "]", "=", "output", "[", "2", "]", "\n", "\n", "if", "ex", "in", "dots", ":", "\n", "      ", "if", "printout", ":", "\n", "        ", "print", "(", "\".\"", ",", "end", "=", "\"\"", ")", "\n", "", "", "", "if", "printout", ":", "\n", "    ", "print", "(", "\" %.1f seconds\"", "%", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "", "if", "printout", ":", "\n", "    ", "total_regret", "=", "regret", ".", "sum", "(", "axis", "=", "0", ")", "\n", "print", "(", "\"Regret: %.2f +/- %.2f (median: %.2f, max: %.2f, min: %.2f)\"", "%", "\n", "(", "total_regret", ".", "mean", "(", ")", ",", "total_regret", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "num_exps", ")", ",", "\n", "np", ".", "median", "(", "total_regret", ")", ",", "total_regret", ".", "max", "(", ")", ",", "total_regret", ".", "min", "(", ")", ")", ")", "\n", "\n", "", "return", "regret", ",", "alg", ",", "sregret", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.one_run": [[1104, 1217], ["numpy.zeros", "numpy.zeros", "numpy.diag", "numpy.diag", "numpy.diag().dot", "numpy.diag", "numpy.linalg.inv().dot", "numpy.linalg.inv", "numpy.square", "numpy.square", "list", "enumerate", "numpy.array().reshape", "range", "numpy.random.randn", "numpy.diag", "numpy.square", "numpy.linalg.inv", "numpy.arange", "numpy.zeros", "numpy.zeros", "BML_2.linear_bandits2.one_iter_BML", "numpy.max", "numpy.min", "numpy.random.randn", "CoAdaTS_Public.LinBandit", "CoAdaTS_Public.evaluate", "task_regret.flatten", "task_sregret.flatten", "int", "int", "int", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.linalg.norm", "numpy.copy", "numpy.copy", "globals", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv().dot", "numpy.linalg.inv", "numpy.square", "len", "len", "numpy.random.randn", "numpy.copy", "np.linalg.inv.dot", "Gt.dot().dot", "Gt.dot().dot", "numpy.array", "numpy.array", "alg[].startswith", "numpy.linalg.inv", "numpy.random.rand", "numpy.ones", "numpy.random.multivariate_normal", "numpy.copy", "numpy.copy", "numpy.eye", "numpy.square", "Gt.dot", "Gt.dot", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.one_iter_BML", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.evaluate"], ["", "def", "one_run", "(", "run", ",", "alg", ",", "params", ")", ":", "\n", "\n", "# for k, v in params.items():", "\n", "#   locals()k = params[v]", "\n", "\n", "  ", "algs", ",", "num_runs", ",", "num_tasks", "=", "params", "[", "'algs'", "]", ",", "params", "[", "'num_runs'", "]", ",", "params", "[", "'num_tasks'", "]", "\n", "n", ",", "d", ",", "K", "=", "params", "[", "'n'", "]", ",", "params", "[", "'d'", "]", ",", "params", "[", "'K'", "]", "\n", "mu_q", ",", "sigma_q", ",", "sigma_0", "=", "params", "[", "'mu_q'", "]", ",", "params", "[", "'sigma_q'", "]", ",", "params", "[", "'sigma_0'", "]", "\n", "alg_num", ",", "sigma", "=", "params", "[", "'alg_num'", "]", ",", "params", "[", "'sigma'", "]", "\n", "\n", "num_tasks_n", "=", "num_tasks", "*", "n", "\n", "run_regret", "=", "np", ".", "zeros", "(", "(", "num_tasks_n", ",", "1", ")", ")", "\n", "run_sregret", "=", "np", ".", "zeros", "(", "(", "num_tasks_n", ",", "1", ")", ")", "\n", "\n", "# true prior", "\n", "mu_star", "=", "mu_q", "+", "sigma_q", "*", "np", ".", "random", ".", "randn", "(", "d", ")", "\n", "Sigma_q", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "sigma_q", ")", ")", "\n", "Sigma_0", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "sigma_0", ")", ")", "\n", "\n", "# potential meta-prior misspecification", "\n", "sigma_q_alg", "=", "alg", "[", "1", "]", "[", "0", "]", "*", "sigma_q", "\n", "if", "alg", "[", "1", "]", "[", "1", "]", "!=", "0", ":", "\n", "    ", "mu_q_alg", "=", "mu_q", "+", "(", "np", ".", "random", ".", "rand", "(", "1", ")", "*", "np", ".", "ones", "(", "d", ")", "*", "2", "*", "alg", "[", "1", "]", "[", "1", "]", "-", "alg", "[", "1", "]", "[", "1", "]", ")", "# move mu_q to a uniform random number in radius alg[1][1]", "\n", "", "else", ":", "\n", "    ", "mu_q_alg", "=", "1", "*", "mu_q", "\n", "\n", "# incrementally updated statistics", "\n", "", "mu_inc", "=", "np", ".", "diag", "(", "1.0", "/", "np", ".", "square", "(", "sigma_q_alg", ")", ")", ".", "dot", "(", "mu_q_alg", ")", "\n", "Lambda_inc", "=", "np", ".", "diag", "(", "1.0", "/", "np", ".", "square", "(", "sigma_q_alg", ")", ")", "\n", "\n", "# initial meta-posterior", "\n", "mu_hat", "=", "np", ".", "linalg", ".", "inv", "(", "Lambda_inc", ")", ".", "dot", "(", "mu_inc", ")", "\n", "Sigma_hat", "=", "np", ".", "linalg", ".", "inv", "(", "Lambda_inc", ")", "\n", "\n", "# BML", "\n", "if", "BML_flag", "and", "alg", "[", "-", "1", "]", "==", "'mts'", ":", "\n", "    ", "Args_d", "=", "{", "'d'", ":", "d", ",", "'K'", ":", "K", ",", "'H'", ":", "n", ",", "'T'", ":", "num_tasks", ",", "'alg'", ":", "alg", "[", "-", "1", "]", "}", "\n", "# Args_d['train'] = min(100, int(num_tasks / 2))", "\n", "# (_, _, _, _, _, _, rew_vec, sreg_vec) = one_iter_BML(Args_d, mu_star, Sigma_0, iter_cnt=run)", "\n", "# # run_regret = np.array(rew_vec).reshape(num_tasks * n, 1)  # rewards returned by BML #TODO", "\n", "# run_sregret = np.array(sreg_vec).reshape(num_tasks * n, 1)", "\n", "\n", "train_lens", "=", "list", "(", "np", ".", "arange", "(", "int", "(", "num_tasks", "/", "10", ")", ",", "int", "(", "num_tasks", "/", "2", ")", ",", "int", "(", "num_tasks", "/", "10", ")", ")", ")", "\n", "rew_vecs", ",", "sreg_vecs", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_lens", ")", ",", "num_tasks_n", ")", ")", ",", "np", ".", "zeros", "(", "(", "len", "(", "train_lens", ")", ",", "num_tasks_n", ")", ")", "\n", "for", "cc", ",", "train_len", "in", "enumerate", "(", "train_lens", ")", ":", "\n", "      ", "Args_d", "[", "'train'", "]", "=", "train_len", "\n", "(", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "rew_vec", ",", "sreg_vec", ")", "=", "one_iter_BML", "(", "Args_d", ",", "mu_star", ",", "Sigma_0", ",", "iter_cnt", "=", "run", ",", "\n", "arm_dist", "=", "'unif'", ",", "weight_dist", "=", "'AdaTS'", ")", "\n", "rew_vecs", "[", "cc", ",", ":", "]", ",", "sreg_vecs", "[", "cc", ",", ":", "]", "=", "np", ".", "array", "(", "rew_vec", ")", ".", "reshape", "(", "num_tasks_n", ",", ")", ",", "np", ".", "array", "(", "sreg_vec", ")", ".", "reshape", "(", "num_tasks_n", ",", ")", "\n", "", "rew_vec", ",", "sreg_vec", "=", "np", ".", "max", "(", "rew_vecs", ",", "axis", "=", "0", ")", ",", "np", ".", "min", "(", "sreg_vecs", ",", "axis", "=", "0", ")", "# pointwise best", "\n", "run_sregret", "=", "np", ".", "array", "(", "sreg_vec", ")", ".", "reshape", "(", "num_tasks_n", ",", "1", ")", "\n", "", "else", ":", "\n", "    ", "for", "task", "in", "range", "(", "num_tasks", ")", ":", "\n", "# sample problem instance from N(\\mu_*, \\sigma_0^2 I_d)", "\n", "      ", "theta", "=", "mu_star", "+", "sigma_0", "*", "np", ".", "random", ".", "randn", "(", "d", ")", "\n", "# sample arms from a unit ball", "\n", "X", "=", "np", ".", "random", ".", "randn", "(", "K", ",", "d", ")", "\n", "X", "/=", "np", ".", "linalg", ".", "norm", "(", "X", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "### env", "\n", "env", "=", "LinBandit", "(", "X", ",", "theta", ",", "sigma", "=", "sigma", ")", "\n", "\n", "# task prior", "\n", "# Sigma_q = np.diag(np.square(sigma_q))", "\n", "# Sigma_0 = np.diag(np.square(sigma_0))", "\n", "if", "alg_num", "==", "0", ":", "\n", "# OracleTS", "\n", "        ", "mu_task", "=", "np", ".", "copy", "(", "mu_star", ")", "\n", "Sigma_task", "=", "np", ".", "copy", "(", "Sigma_0", ")", "\n", "", "elif", "alg_num", "==", "1", ":", "\n", "# TS", "\n", "        ", "mu_task", "=", "np", ".", "copy", "(", "mu_q_alg", ")", "\n", "Sigma_task", "=", "Sigma_0", "+", "Sigma_q", "\n", "", "elif", "alg_num", ">=", "2", ":", "\n", "        ", "if", "alg", "[", "-", "1", "]", ".", "startswith", "(", "\"Meta\"", ")", ":", "\n", "# MetaTS", "\n", "          ", "mu_tilde", "=", "np", ".", "random", ".", "multivariate_normal", "(", "mu_hat", ",", "Sigma_hat", ")", "\n", "mu_task", "=", "np", ".", "copy", "(", "mu_tilde", ")", "\n", "Sigma_task", "=", "np", ".", "copy", "(", "Sigma_0", ")", "\n", "", "elif", "\"Ada\"", "in", "alg", "[", "-", "1", "]", ":", "\n", "# AdaTS", "\n", "          ", "mu_task", "=", "np", ".", "copy", "(", "mu_hat", ")", "\n", "Sigma_task", "=", "Sigma_0", "+", "Sigma_hat", "\n", "\n", "# evaluate on a sampled problem instance", "\n", "", "", "alg_class", "=", "globals", "(", ")", "[", "alg", "[", "0", "]", "]", "\n", "alg_params", "=", "{", "\n", "\"theta0\"", ":", "mu_task", ",", "\n", "\"Sigma0\"", ":", "Sigma_task", ",", "\n", "\"sigma\"", ":", "sigma", "}", "\n", "\n", "task_regret", ",", "logs", ",", "task_sregret", "=", "evaluate", "(", "alg_class", ",", "alg_params", ",", "[", "env", "]", ",", "n", ",", "printout", "=", "False", ")", "\n", "run_regret", "[", "task", "*", "n", ":", "(", "task", "+", "1", ")", "*", "n", ",", "0", "]", "+=", "task_regret", ".", "flatten", "(", ")", "\n", "run_sregret", "[", "task", "*", "n", ":", "(", "task", "+", "1", ")", "*", "n", ",", "0", "]", "+=", "task_sregret", ".", "flatten", "(", ")", "\n", "\n", "# meta-posterior update", "\n", "if", "alg_num", ">=", "2", ":", "\n", "# subtract priors, which are added in LinTS", "\n", "        ", "M", "=", "np", ".", "linalg", ".", "inv", "(", "Sigma_task", ")", "\n", "Gt", "=", "logs", "[", "0", "]", ".", "Gram", "-", "M", "\n", "Bt", "=", "logs", "[", "0", "]", ".", "B", "-", "M", ".", "dot", "(", "mu_task", ")", "\n", "\n", "# incremental update", "\n", "M", "=", "np", ".", "linalg", ".", "inv", "(", "np", ".", "eye", "(", "d", ")", "/", "np", ".", "square", "(", "sigma_0", ")", "+", "Gt", ")", "\n", "mu_inc", "+=", "Bt", "-", "Gt", ".", "dot", "(", "M", ")", ".", "dot", "(", "Bt", ")", "\n", "Lambda_inc", "+=", "Gt", "-", "Gt", ".", "dot", "(", "M", ")", ".", "dot", "(", "Gt", ")", "\n", "\n", "# updated meta-posterior", "\n", "mu_hat", "=", "np", ".", "linalg", ".", "inv", "(", "Lambda_inc", ")", ".", "dot", "(", "mu_inc", ")", "\n", "Sigma_hat", "=", "np", ".", "linalg", ".", "inv", "(", "Lambda_inc", ")", "\n", "\n", "", "", "", "return", "run_regret", ",", "run_sregret", ",", "run", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.collect_result": [[1219, 1227], ["run_regret.flatten", "run_sregret.flatten"], "function", ["None"], ["", "def", "collect_result", "(", "res", ")", ":", "\n", "  ", "run_regret", ",", "run_sregret", ",", "run", "=", "res", "\n", "global", "regret", ",", "sregret", "\n", "\n", "regret", "[", ":", ",", "run", "]", "+=", "run_regret", ".", "flatten", "(", ")", "\n", "sregret", "[", ":", ",", "run", "]", "+=", "run_sregret", ".", "flatten", "(", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.get_label": [[1229, 1238], ["None"], "function", ["None"], ["", "def", "get_label", "(", "alg", ")", ":", "\n", "  ", "if", "alg", "[", "1", "]", "[", "0", "]", "!=", "1", ":", "\n", "    ", "return", "\"\"", "\n", "", "if", "alg", "[", "-", "1", "]", "not", "in", "BML_algs", ":", "\n", "    ", "return", "alg", "[", "-", "1", "]", "\n", "", "if", "alg", "[", "-", "1", "]", "==", "'mts'", ":", "\n", "    ", "return", "\"fMetaTS\"", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.utils.save_res": [[3, 6], ["numpy.savetxt", "numpy.savetxt"], "function", ["None"], ["def", "save_res", "(", "fname", ",", "regs", ",", "sregs", ")", ":", "\n", "    ", "np", ".", "savetxt", "(", "fname", ",", "regs", ")", "\n", "np", ".", "savetxt", "(", "fname", ",", "sregs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.utils.linestyle2dashes": [[7, 20], ["None"], "function", ["None"], ["", "def", "linestyle2dashes", "(", "style", ")", ":", "\n", "  ", "if", "style", "==", "\"--\"", ":", "\n", "    ", "return", "(", "3", ",", "3", ")", "\n", "", "elif", "style", "==", "\":\"", ":", "\n", "    ", "return", "(", "1", ",", "2", ")", "\n", "", "elif", "style", "==", "\"-.\"", ":", "\n", "    ", "return", "(", "5", ",", "1", ",", "1", ",", "2", ")", "\n", "", "elif", "style", "==", "\"-.-\"", ":", "\n", "    ", "return", "(", "2", ",", "1", ",", "2", ",", "1", ")", "\n", "", "elif", "style", "==", "\"-.--\"", ":", "\n", "    ", "return", "(", ".5", ",", ".5", ",", "1", ",", ".5", ")", "\n", "", "else", ":", "\n", "    ", "return", "(", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.utils.get_pst_time": [[38, 44], ["datetime.datetime.now", "date.astimezone.astimezone", "date.astimezone.strftime", "pytz.timezone"], "function", ["None"], ["def", "get_pst_time", "(", ")", ":", "\n", "    ", "date_format", "=", "'%m-%d-%Y-%H-%M-%S'", "\n", "date", "=", "datetime", ".", "now", "(", "tz", "=", "utc", ")", "\n", "date", "=", "date", ".", "astimezone", "(", "timezone", "(", "'US/Pacific'", ")", ")", "\n", "pstDateTime", "=", "date", ".", "strftime", "(", "date_format", ")", "\n", "return", "pstDateTime", "", "", ""]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteTS.__init__": [[18, 22], ["copy.deepcopy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "prior", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "prior", "=", "prior", "\n", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "prior", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteTS.select": [[23, 28], ["numpy.random.choice", "DiscreteAlgs.argmax_random", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.argmax_random"], ["", "def", "select", "(", "self", ")", ":", "\n", "        ", "sample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "self", ".", "post", ")", ")", ",", "p", "=", "self", ".", "post", ")", "\n", "#         a = np.argmax(DISTS[sample])", "\n", "a", "=", "argmax_random", "(", "DISTS", "[", "sample", "]", ")", "\n", "return", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteTS.update": [[29, 31], ["DiscreteAlgs.discrete_update", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.discrete_update"], ["", "def", "update", "(", "self", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "post", "=", "discrete_update", "(", "copy", ".", "deepcopy", "(", "self", ".", "post", ")", ",", "action", ",", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteTS.reset": [[32, 34], ["copy.deepcopy"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteKG.__init__": [[37, 45], ["copy.deepcopy", "numpy.matrix", "range", "numpy.zeros", "len", "numpy.array", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "prior", ",", "ntrials", "=", "10", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "prior", "=", "prior", "\n", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "prior", ")", "\n", "self", ".", "ntrials", "=", "ntrials", "\n", "self", ".", "dists", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "len", "(", "DISTS", ")", ",", "self", ".", "k", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "DISTS", ")", ")", ":", "\n", "            ", "self", ".", "dists", "[", "i", ",", ":", "]", "=", "np", ".", "array", "(", "DISTS", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteKG.select": [[46, 64], ["range", "range", "scores.append", "numpy.array.append", "len", "numpy.argmax", "numpy.flatnonzero", "numpy.array", "DiscreteAlgs.argmax_random", "DiscreteAlgs.DiscreteKG.get_lookahead_value", "numpy.flatnonzero", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.argmax_random", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.get_lookahead_value"], ["", "", "def", "select", "(", "self", ")", ":", "\n", "        ", "scores", "=", "[", "]", "\n", "tiebreaker", "=", "[", "]", "\n", "for", "a", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "v", "=", "0", "\n", "r", "=", "0", "\n", "for", "t", "in", "range", "(", "self", ".", "ntrials", ")", ":", "\n", "                ", "vp", ",", "rp", "=", "self", ".", "get_lookahead_value", "(", "a", ")", "\n", "v", "+=", "vp", ";", "r", "+=", "rp", "\n", "", "scores", ".", "append", "(", "v", "/", "self", ".", "ntrials", ")", "\n", "tiebreaker", ".", "append", "(", "(", "v", "+", "r", ")", "/", "self", ".", "ntrials", ")", "\n", "", "if", "len", "(", "np", ".", "flatnonzero", "(", "scores", "==", "np", ".", "max", "(", "scores", ")", ")", ")", "==", "1", ":", "\n", "            ", "return", "np", ".", "argmax", "(", "scores", ")", "\n", "", "else", ":", "\n", "            ", "inds", "=", "np", ".", "flatnonzero", "(", "scores", "==", "np", ".", "max", "(", "scores", ")", ")", "\n", "tiebreaker", "=", "np", ".", "array", "(", "tiebreaker", ")", "\n", "ind", "=", "argmax_random", "(", "tiebreaker", "[", "inds", "]", ")", "\n", "return", "inds", "[", "ind", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteKG.get_lookahead_value": [[65, 88], ["numpy.random.choice", "DiscreteAlgs.discrete_update", "numpy.random.choice", "numpy.zeros", "range", "copy.deepcopy", "range", "len", "numpy.matrix", "numpy.max", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.discrete_update"], ["", "", "def", "get_lookahead_value", "(", "self", ",", "action", ")", ":", "\n", "        ", "sample_idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "self", ".", "post", ")", ")", ",", "p", "=", "self", ".", "post", ")", "\n", "ra", "=", "DISTS", "[", "sample_idx", "]", "[", "action", "]", "\n", "\n", "## Recompute posterior after the fake sample", "\n", "tmp_post", "=", "discrete_update", "(", "copy", ".", "deepcopy", "(", "self", ".", "post", ")", ",", "action", ",", "ra", ")", "\n", "\n", "#         ## compute posterior mean", "\n", "#         mean = np.matrix(tmp_post)*self.dists", "\n", "#         return (np.max(mean), ra)", "\n", "## Resample from posterior", "\n", "#         print(\"MC update\")", "\n", "#         print(tmp_post)", "\n", "sample_idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "self", ".", "post", ")", ")", ",", "p", "=", "tmp_post", ",", "size", "=", "self", ".", "ntrials", ")", "\n", "emp_post", "=", "np", ".", "zeros", "(", "len", "(", "tmp_post", ")", ")", "\n", "for", "i", "in", "sample_idx", ":", "\n", "            ", "emp_post", "[", "i", "]", "+=", "1", "\n", "", "emp_post", "=", "emp_post", "/", "self", ".", "ntrials", "\n", "mean", "=", "np", ".", "matrix", "(", "emp_post", ")", "*", "self", ".", "dists", "\n", "#         print(DISTS[sample_idx[0]])", "\n", "#         print(DISTS[sample_idx[1]])", "\n", "#         print(mean, flush=True)", "\n", "return", "(", "np", ".", "max", "(", "mean", ")", ",", "ra", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteKG.update": [[89, 91], ["DiscreteAlgs.discrete_update", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.discrete_update"], ["", "def", "update", "(", "self", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "post", "=", "discrete_update", "(", "copy", ".", "deepcopy", "(", "self", ".", "post", ")", ",", "action", ",", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteKG.reset": [[92, 94], ["copy.deepcopy"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteExplore.__init__": [[96, 104], ["copy.deepcopy", "numpy.ones", "numpy.sum", "numpy.ones", "len", "len", "len", "len", "numpy.flatnonzero"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "prior", "=", "np", ".", "ones", "(", "len", "(", "DISTS", ")", ")", "/", "len", "(", "DISTS", ")", "\n", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "self", ".", "collapsed", "=", "len", "(", "np", ".", "flatnonzero", "(", "self", ".", "post", ")", ")", "==", "1", "\n", "\n", "self", ".", "counts", "=", "np", ".", "ones", "(", "len", "(", "DISTS", ")", ")", "\n", "self", ".", "total", "=", "np", ".", "sum", "(", "self", ".", "counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteExplore.select": [[105, 114], ["numpy.argmax", "numpy.argmax", "numpy.random.choice"], "methods", ["None"], ["", "def", "select", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "collapsed", ":", "\n", "# print(\"Collapsed posterior\", flush=True)", "\n", "            ", "idx", "=", "np", ".", "argmax", "(", "self", ".", "post", ")", "\n", "a", "=", "np", ".", "argmax", "(", "DISTS", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "a", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "k", ")", "\n", "# print(\"Selecting random action: %d\" % (a), flush=True)", "\n", "", "return", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteExplore.update": [[115, 118], ["DiscreteAlgs.discrete_update", "copy.deepcopy", "len", "numpy.flatnonzero"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.discrete_update"], ["", "def", "update", "(", "self", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "post", "=", "discrete_update", "(", "copy", ".", "deepcopy", "(", "self", ".", "post", ")", ",", "action", ",", "reward", ")", "\n", "self", ".", "collapsed", "=", "len", "(", "np", ".", "flatnonzero", "(", "self", ".", "post", ")", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.DiscreteExplore.reset": [[119, 126], ["copy.deepcopy", "numpy.argmax", "len", "numpy.flatnonzero"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "collapsed", ":", "\n", "            ", "idx", "=", "np", ".", "argmax", "(", "self", ".", "post", ")", "\n", "self", ".", "counts", "[", "idx", "]", "+=", "1", "\n", "self", ".", "total", "+=", "1", "\n", "", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "self", ".", "collapsed", "=", "len", "(", "np", ".", "flatnonzero", "(", "self", ".", "post", ")", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.ExploreKG.__init__": [[128, 133], ["DiscreteAlgs.DiscreteExplore"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "train_len", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "train_len", "=", "train_len", "\n", "self", ".", "base", "=", "DiscreteExplore", "(", "self", ".", "k", ")", "\n", "self", ".", "episodes", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.ExploreKG.select": [[134, 136], ["DiscreteAlgs.ExploreKG.base.select"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select"], ["", "def", "select", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "base", ".", "select", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.ExploreKG.update": [[137, 139], ["DiscreteAlgs.ExploreKG.base.update"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["", "def", "update", "(", "self", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "base", ".", "update", "(", "action", ",", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.ExploreKG.reset": [[140, 146], ["DiscreteAlgs.ExploreKG.base.reset", "DiscreteAlgs.DiscreteKG"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "base", ".", "reset", "(", ")", "\n", "self", ".", "episodes", "+=", "1", "\n", "if", "self", ".", "episodes", "==", "self", ".", "train_len", ":", "\n", "            ", "self", ".", "prior", "=", "self", ".", "base", ".", "counts", "/", "self", ".", "base", ".", "total", "\n", "self", ".", "base", "=", "DiscreteKG", "(", "self", ".", "k", ",", "self", ".", "prior", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.ExploreTS.__init__": [[148, 153], ["DiscreteAlgs.DiscreteExplore"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "train_len", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "train_len", "=", "train_len", "\n", "self", ".", "base", "=", "DiscreteExplore", "(", "self", ".", "k", ")", "\n", "self", ".", "episodes", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.ExploreTS.select": [[154, 156], ["DiscreteAlgs.ExploreTS.base.select"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select"], ["", "def", "select", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "base", ".", "select", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.ExploreTS.update": [[157, 159], ["DiscreteAlgs.ExploreTS.base.update"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["", "def", "update", "(", "self", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "base", ".", "update", "(", "action", ",", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.ExploreTS.reset": [[160, 166], ["DiscreteAlgs.ExploreTS.base.reset", "DiscreteAlgs.DiscreteTS"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "base", ".", "reset", "(", ")", "\n", "self", ".", "episodes", "+=", "1", "\n", "if", "self", ".", "episodes", "==", "self", ".", "train_len", ":", "\n", "            ", "self", ".", "prior", "=", "self", ".", "base", ".", "counts", "/", "self", ".", "base", ".", "total", "\n", "self", ".", "base", "=", "DiscreteTS", "(", "self", ".", "k", ",", "self", ".", "prior", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.argmax_random": [[5, 7], ["numpy.random.choice", "numpy.flatnonzero", "numpy.max"], "function", ["None"], ["def", "argmax_random", "(", "vec", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "choice", "(", "np", ".", "flatnonzero", "(", "vec", "==", "np", ".", "max", "(", "vec", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteAlgs.discrete_update": [[8, 14], ["range", "len", "numpy.sum"], "function", ["None"], ["", "def", "discrete_update", "(", "dist", ",", "act", ",", "rew", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "dist", ")", ")", ":", "\n", "        ", "if", "DISTS", "[", "i", "]", "[", "act", "]", "!=", "rew", ":", "\n", "            ", "dist", "[", "i", "]", "=", "0", "\n", "", "", "dist", "=", "dist", "/", "np", ".", "sum", "(", "dist", ")", "\n", "return", "(", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.exp.test_": [[13, 15], ["print", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["def", "test_", "(", ")", ":", "\n", "    ", "print", "(", "np", ".", "random", ".", "randn", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.exp.make_spiked_instance": [[16, 21], ["numpy.zeros", "numpy.eye"], "function", ["None"], ["", "def", "make_spiked_instance", "(", "K", ")", ":", "\n", "    ", "mean", "=", "np", ".", "zeros", "(", "K", ")", "\n", "mean", "[", "3", "]", "=", "0.5", "\n", "cov", "=", "0.1", "*", "np", ".", "eye", "(", "K", ")", "\n", "return", "(", "mean", ",", "cov", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.exp.make_near_block": [[22, 29], ["numpy.matrix", "range", "range", "numpy.zeros", "int"], "function", ["None"], ["", "def", "make_near_block", "(", "n", ",", "k", ")", ":", "\n", "    ", "M", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "n", "/", "k", ")", ")", ":", "\n", "        ", "M", "[", "k", "*", "i", ":", "k", "*", "(", "i", "+", "1", ")", ",", "k", "*", "i", ":", "k", "*", "(", "i", "+", "1", ")", "]", "=", "0.9", "\n", "", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "M", "[", "i", ",", "i", "]", "=", "1", "\n", "", "return", "(", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.exp.make_block_instance": [[30, 36], ["numpy.zeros", "exp.make_near_block", "int", "int"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.exp.make_near_block"], ["", "def", "make_block_instance", "(", "K", ")", ":", "\n", "    ", "mean", "=", "np", ".", "zeros", "(", "K", ")", "\n", "mean", "[", "0", "]", "=", "0.5", "\n", "mean", "[", "int", "(", "K", "/", "2", ")", "]", "=", "0.1", "\n", "cov", "=", "make_near_block", "(", "K", ",", "int", "(", "K", "/", "2", ")", ")", "\n", "return", "(", "mean", ",", "cov", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.exp.experiment": [[42, 80], ["range", "env.start", "alg.reset", "ep_rewards.append", "numpy.argmax", "ep_sreg.append", "alg.select", "env.step", "alg.update", "ep_rounds_rewards.append", "numpy.argmax", "ep_rounds_sreg.append", "alg.__dict__.keys", "cov_errs.append", "alg.__dict__.keys", "mean_errs.append", "numpy.cumsum", "numpy.arange", "numpy.cumsum", "numpy.arange", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.start", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.reset", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.step", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["def", "experiment", "(", "alg", ",", "env", ",", "repsT", ")", ":", "\n", "\n", "    ", "ep_rewards", "=", "[", "]", "\n", "ep_rounds_rewards", "=", "[", "]", "# episode rounds rewards", "\n", "ep_sreg", "=", "[", "]", "\n", "ep_rounds_sreg", "=", "[", "]", "# episode rounds simple regs", "\n", "cov_errs", "=", "[", "]", "\n", "mean_errs", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "repsT", ")", ":", "\n", "        ", "env", ".", "start", "(", ")", "\n", "alg", ".", "reset", "(", ")", "\n", "ep_rew", "=", "0", "\n", "while", "not", "env", ".", "done", ":", "\n", "            ", "action", "=", "alg", ".", "select", "(", ")", "\n", "(", "r", ",", "done", ")", "=", "env", ".", "step", "(", "action", ")", "\n", "alg", ".", "update", "(", "action", ",", "r", ")", "\n", "ep_rew", "+=", "r", "\n", "ep_rounds_rewards", ".", "append", "(", "r", ")", "\n", "# BAI", "\n", "idx_mf", "=", "np", ".", "argmax", "(", "env", ".", "Ns", ")", "\n", "_sreg", "=", "env", ".", "param", "[", "env", ".", "idx_best", "]", "-", "env", ".", "param", "[", "idx_mf", "]", "\n", "assert", "_sreg", ">=", "0", ",", "'negative simple regret!'", "\n", "ep_rounds_sreg", ".", "append", "(", "_sreg", ")", "\n", "\n", "", "ep_rewards", ".", "append", "(", "ep_rew", ")", "\n", "\n", "# BAI", "\n", "idx_mf", "=", "np", ".", "argmax", "(", "env", ".", "Ns", ")", "\n", "ep_sreg", ".", "append", "(", "env", ".", "param", "[", "env", ".", "idx_best", "]", "-", "env", ".", "param", "[", "idx_mf", "]", ")", "\n", "\n", "if", "'cov'", "in", "alg", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "cov_errs", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "alg", ".", "cov", "-", "env", ".", "cov", ")", ")", "\n", "", "if", "'mean'", "in", "alg", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "mean_errs", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "alg", ".", "mean", "-", "env", ".", "mean", ")", ")", "\n", "\n", "", "", "return", "(", "np", ".", "cumsum", "(", "ep_rewards", ")", "/", "np", ".", "arange", "(", "1", ",", "repsT", "+", "1", ")", ",", "mean_errs", ",", "\n", "cov_errs", ",", "np", ".", "cumsum", "(", "ep_sreg", ")", "/", "np", ".", "arange", "(", "1", ",", "repsT", "+", "1", ")", ",", "\n", "ep_rounds_rewards", ",", "ep_rounds_sreg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.exp.explore_then_commit_experiment": [[81, 105], ["range", "env.start", "alg.reset", "ep_rewards.append", "alg.select", "env.step", "alg.__dict__.keys", "cov_errs.append", "alg.__dict__.keys", "mean_errs.append", "alg.update", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.start", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.reset", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.step", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["", "def", "explore_then_commit_experiment", "(", "alg", ",", "env", ",", "train_steps", ",", "reps", ")", ":", "\n", "    ", "ep_rewards", "=", "[", "]", "\n", "cov_errs", "=", "[", "]", "\n", "mean_errs", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "reps", ")", ":", "\n", "        ", "env", ".", "start", "(", ")", "\n", "alg", ".", "reset", "(", ")", "\n", "ep_rew", "=", "0", "\n", "greedy", "=", "False", "\n", "while", "not", "env", ".", "done", ":", "\n", "            ", "if", "env", ".", "h", "==", "train_steps", ":", "\n", "                ", "greedy", "=", "True", "\n", "ep_rew", "=", "0", "\n", "", "action", "=", "alg", ".", "select", "(", "greedy", "=", "greedy", ")", "\n", "(", "r", ",", "done", ")", "=", "env", ".", "step", "(", "action", ")", "\n", "ep_rew", "+=", "r", "\n", "if", "not", "greedy", ":", "\n", "                ", "alg", ".", "update", "(", "action", ",", "r", ")", "\n", "", "", "ep_rewards", ".", "append", "(", "ep_rew", "/", "(", "env", ".", "horizon", "-", "train_steps", ")", ")", "\n", "if", "'cov'", "in", "alg", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "cov_errs", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "alg", ".", "cov", "-", "env", ".", "cov", ")", ")", "\n", "", "if", "'mean'", "in", "alg", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "mean_errs", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "alg", ".", "mean", "-", "env", ".", "mean", ")", ")", "\n", "", "", "return", "(", "ep_rewards", ",", "mean_errs", ",", "cov_errs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.exp.one_iter_standard": [[106, 135], ["BML_2.GaussianEnv", "exp.experiment", "BML_2.MetaThompsonGeneral", "BML_2.MetaThompsonGeneral", "BML_2.Thompson", "BML_2.Thompson", "numpy.zeros", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.experiment"], ["", "def", "one_iter_standard", "(", "Args", ",", "mean", ",", "cov", ",", "iter_cnt", "=", "0", ",", "prior_dist", "=", "None", ",", "reward_dist", "=", "None", ")", ":", "\n", "###", "\n", "# env = envs.GaussianEnv(Args.H, Args.K, mean, cov)", "\n", "# if Args.alg == 'mts-no-cov':", "\n", "#     Alg = meta_learner_general.MetaThompsonGeneral(Args.K, train=Args.train, num_random=1, fit_cov=False)", "\n", "# elif Args.alg == 'mts':", "\n", "#     Alg = meta_learner_general.MetaThompsonGeneral(Args.K, train=Args.train, num_random=Args.num_random, fit_cov=True)", "\n", "# elif Args.alg == 'oracle':", "\n", "#     Alg = bandits.Thompson(Args.K, env.mean, env.cov)", "\n", "# else:", "\n", "#     Alg = bandits.Thompson(Args.K, np.zeros(Args.K), np.eye(Args.K))", "\n", "#", "\n", "# (vec, me, ce, svec) = experiment(Alg, env, Args.T)", "\n", "\n", "    ", "env", "=", "envs", ".", "GaussianEnv", "(", "Args", "[", "'H'", "]", ",", "Args", "[", "'K'", "]", ",", "mean", ",", "cov", ",", "prior_dist", "=", "prior_dist", ",", "reward_dist", "=", "reward_dist", ")", "\n", "if", "Args", "[", "'alg'", "]", "==", "'mts-no-cov'", ":", "\n", "        ", "Alg", "=", "meta_learner_general", ".", "MetaThompsonGeneral", "(", "Args", "[", "'K'", "]", ",", "train", "=", "Args", "[", "'train'", "]", ",", "num_random", "=", "1", ",", "fit_cov", "=", "False", ")", "\n", "", "elif", "Args", "[", "'alg'", "]", "==", "'mts'", ":", "\n", "        ", "Alg", "=", "meta_learner_general", ".", "MetaThompsonGeneral", "(", "Args", "[", "'K'", "]", ",", "train", "=", "Args", "[", "'train'", "]", ",", "num_random", "=", "Args", "[", "'num_random'", "]", ",", "\n", "fit_cov", "=", "True", ")", "\n", "", "elif", "Args", "[", "'alg'", "]", "==", "'oracle'", ":", "\n", "        ", "Alg", "=", "bandits", ".", "Thompson", "(", "Args", "[", "'K'", "]", ",", "env", ".", "mean", ",", "env", ".", "cov", ")", "\n", "", "else", ":", "\n", "        ", "Alg", "=", "bandits", ".", "Thompson", "(", "Args", "[", "'K'", "]", ",", "np", ".", "zeros", "(", "Args", "[", "'K'", "]", ")", ",", "np", ".", "eye", "(", "Args", "[", "'K'", "]", ")", ")", "\n", "\n", "", "(", "rew_vec", ",", "sreg_vec", ",", "mean_", ",", "cov_est_", ",", "ep_rounds_rewards", ",", "ep_rounds_sreg", ")", "=", "experiment", "(", "Alg", ",", "env", ",", "Args", "[", "'T'", "]", ")", "\n", "\n", "# return (iter_cnt, vec, svec, me, ce)", "\n", "return", "(", "iter_cnt", ",", "rew_vec", ",", "sreg_vec", ",", "mean_", ",", "cov_est_", ",", "Args", ",", "ep_rounds_rewards", ",", "ep_rounds_sreg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.exp.collect_result": [[136, 147], ["rewards.append", "simple_regs.append", "mean_est.append", "cov_est.append", "print", "numpy.mean", "int"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["", "def", "collect_result", "(", "res", ")", ":", "\n", "    ", "(", "i", ",", "vec", ",", "svec", ",", "me", ",", "ce", ",", "Args", ",", "_", ",", "_", ")", "=", "res", "\n", "global", "rewards", ",", "simple_regs", ",", "mean_est", ",", "cov_est", "\n", "rewards", ".", "append", "(", "vec", ")", "\n", "simple_regs", ".", "append", "(", "svec", ")", "\n", "mean_est", ".", "append", "(", "me", ")", "\n", "cov_est", ".", "append", "(", "ce", ")", "\n", "\n", "print", "(", "\"Iter: %d, test_reward: %0.3f\"", "%", "(", "i", ",", "np", ".", "mean", "(", "vec", "[", "int", "(", "Args", "[", "'T'", "]", "/", "2", ")", ":", "]", ")", ")", ",", "flush", "=", "True", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learners.MetaThompson.__init__": [[6, 32], ["numpy.zeros", "numpy.zeros", "numpy.eye", "numpy.matrix", "params.keys", "numpy.zeros", "params.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "train", "=", "None", ",", "fit_cov", "=", "True", ",", "params", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "fit_cov", "=", "fit_cov", "\n", "\n", "self", ".", "mean", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "self", ".", "running_mean", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "\n", "if", "'mean'", "in", "params", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "mean", "=", "params", "[", "'mean'", "]", "\n", "self", ".", "running_mean", "=", "params", "[", "'mean'", "]", "\n", "", "self", ".", "cov", "=", "np", ".", "eye", "(", "self", ".", "k", ")", "\n", "self", ".", "running_cov", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "k", ",", "self", ".", "k", ")", ")", ")", "\n", "if", "'cov'", "in", "params", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "cov", "=", "params", "[", "'cov'", "]", "\n", "self", ".", "running_cov", "=", "params", "[", "'cov'", "]", "\n", "\n", "", "self", ".", "t", "=", "0", "\n", "if", "train", "is", "None", ":", "\n", "            ", "self", ".", "train", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "=", "train", "\n", "\n", "", "self", ".", "num_random", "=", "2", "\n", "if", "self", ".", "fit_cov", "is", "False", ":", "\n", "            ", "self", ".", "num_random", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learners.MetaThompson.select": [[34, 40], ["numpy.random.choice", "meta_learners.MetaThompson.base_learner.select"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select"], ["", "", "def", "select", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "h", "<", "self", ".", "num_random", "and", "(", "self", ".", "train", "<", "0", "or", "self", ".", "t", "<=", "self", ".", "train", ")", ":", "\n", "            ", "action", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "k", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "self", ".", "base_learner", ".", "select", "(", ")", "\n", "", "return", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learners.MetaThompson.update": [[41, 57], ["meta_learners.MetaThompson.base_learner.update", "numpy.zeros", "meta_learners.MetaThompson.get_cov", "numpy.matrix", "numpy.matrix"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learners.MetaThompson.get_cov"], ["", "def", "update", "(", "self", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "base_learner", ".", "update", "(", "action", ",", "reward", ")", "\n", "\n", "if", "self", ".", "h", "<", "self", ".", "num_random", "and", "(", "self", ".", "train", "<", "0", "or", "self", ".", "t", "<=", "self", ".", "train", ")", ":", "\n", "            ", "vec", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "vec", "[", "action", "]", "=", "self", ".", "k", "*", "reward", "### importance weighting", "\n", "self", ".", "tmp_vec", "+=", "vec", "\n", "\n", "if", "self", ".", "h", "==", "self", ".", "num_random", "-", "1", ":", "\n", "                ", "self", ".", "running_mean", "+=", "self", ".", "tmp_vec", "/", "self", ".", "num_random", "\n", "self", ".", "mean", "=", "self", ".", "running_mean", "/", "(", "self", ".", "t", "+", "1", ")", "\n", "if", "self", ".", "fit_cov", ":", "\n", "### Covariance estimation, I think correct now", "\n", "                    ", "self", ".", "running_cov", "+=", "np", ".", "matrix", "(", "self", ".", "tmp_vec", ")", ".", "T", "*", "np", ".", "matrix", "(", "self", ".", "tmp_vec", ")", "/", "self", ".", "num_random", "\n", "self", ".", "cov", "=", "self", ".", "get_cov", "(", "self", ".", "running_mean", ",", "self", ".", "running_cov", ",", "self", ".", "t", ")", "\n", "", "", "", "self", ".", "h", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learners.MetaThompson.get_cov": [[58, 73], ["range", "numpy.linalg.eig", "numpy.matrix", "numpy.matrix", "numpy.diag", "numpy.eye", "numpy.diag", "numpy.matrix", "numpy.diag", "numpy.maximum", "numpy.matrix", "numpy.matrix", "numpy.matrix"], "methods", ["None"], ["", "def", "get_cov", "(", "self", ",", "mean", ",", "c", ",", "t", ")", ":", "\n", "        ", "k", "=", "mean", ".", "shape", "[", "0", "]", "\n", "m", "=", "mean", "/", "t", "\n", "cov", "=", "c", "/", "t", "\n", "M", "=", "cov", "-", "np", ".", "matrix", "(", "m", ")", ".", "T", "*", "np", ".", "matrix", "(", "m", ")", "\n", "M", "-=", "k", "*", "np", ".", "diag", "(", "np", ".", "diag", "(", "np", ".", "matrix", "(", "m", ")", ".", "T", "*", "np", ".", "matrix", "(", "m", ")", ")", ")", "\n", "M", "-=", "k", "*", "np", ".", "eye", "(", "k", ")", "\n", "for", "a", "in", "range", "(", "k", ")", ":", "\n", "            ", "M", "[", "a", ",", "a", "]", "=", "M", "[", "a", ",", "a", "]", "/", "(", "k", "+", "1", ")", "\n", "\n", "## make sure matrix is psd (might be too slow now...)", "\n", "", "eigval", ",", "eigvec", "=", "np", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "Q", "=", "np", ".", "matrix", "(", "eigvec", ")", "\n", "d", "=", "np", ".", "matrix", "(", "np", ".", "diag", "(", "np", ".", "maximum", "(", "eigval", ",", "0", ")", ")", ")", "\n", "return", "(", "Q", "*", "d", "*", "Q", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learners.MetaThompson.reset": [[74, 79], ["BML_2.Thompson", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "+=", "1", "\n", "self", ".", "base_learner", "=", "bandits", ".", "Thompson", "(", "self", ".", "k", ",", "self", ".", "mean", ",", "self", ".", "cov", ")", "\n", "self", ".", "tmp_vec", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "self", ".", "h", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteEnv.DiscreteEnv.__init__": [[40, 52], ["len", "range", "numpy.ones", "numpy.append", "int", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "horizon", ")", ":", "\n", "        ", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "k", "=", "len", "(", "DISTS", "[", "0", "]", ")", "\n", "self", ".", "dists", "=", "DISTS", "\n", "#         self.param = np.random.dirichlet(np.ones(len(DISTS)),1)", "\n", "#         self.param = self.param[0]", "\n", "#         self.param = np.ones(len(DISTS))/len(DISTS)", "\n", "#         idx = np.random.choice(BLOCKS)", "\n", "arr", "=", "np", ".", "ones", "(", "int", "(", "len", "(", "DISTS", ")", "/", "BLOCKS", ")", ")", "/", "(", "len", "(", "DISTS", ")", "/", "BLOCKS", ")", "\n", "self", ".", "param", "=", "0.9", "*", "arr", "\n", "for", "i", "in", "range", "(", "1", ",", "BLOCKS", ")", ":", "\n", "            ", "self", ".", "param", "=", "np", ".", "append", "(", "self", ".", "param", ",", "0.1", "/", "(", "BLOCKS", "-", "1", ")", "*", "arr", ")", "\n", "#         print(\"[DiscreteEnv] Environment initialized, param: \" + str(self.param), flush=True)", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteEnv.DiscreteEnv.start": [[55, 59], ["numpy.random.choice", "range", "len"], "methods", ["None"], ["", "", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "h", "=", "0", "\n", "self", ".", "done", "=", "False", "\n", "self", ".", "idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "DISTS", ")", ")", ",", "p", "=", "self", ".", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteEnv.DiscreteEnv.step": [[60, 67], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "done", "is", "False", ",", "\"Environment must be reset\"", "\n", "self", ".", "h", "+=", "1", "\n", "if", "self", ".", "h", "==", "self", ".", "horizon", ":", "\n", "            ", "self", ".", "done", "=", "True", "\n", "", "r", "=", "self", ".", "dists", "[", "self", ".", "idx", "]", "[", "action", "]", "\n", "return", "(", "r", ",", "self", ".", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteEnv.make_dist": [[21, 33], ["int", "range", "int", "range", "int", "DISTS.append", "range"], "function", ["None"], ["def", "make_dist", "(", "actions", ",", "blocks", ")", ":", "\n", "    ", "assert", "actions", "/", "blocks", "==", "int", "(", "actions", "/", "blocks", ")", ",", "\"actions/blocks should be an integer\"", "\n", "step", "=", "int", "(", "actions", "/", "blocks", ")", "\n", "\n", "DISTS", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "blocks", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "int", "(", "step", ")", ")", ":", "\n", "            ", "d", "=", "[", "0", "for", "i", "in", "range", "(", "actions", ")", "]", "\n", "d", "[", "b", "*", "step", "]", "=", "i", "/", "10.", "\n", "d", "[", "b", "*", "step", "+", "i", "]", "=", "1", "\n", "DISTS", ".", "append", "(", "d", ")", "\n", "", "", "return", "(", "DISTS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.bandits.UCB.__init__": [[5, 10], ["range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "conf", ")", ":", "\n", "        ", "self", ".", "conf", "=", "conf", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "rew", "=", "[", "0", "for", "i", "in", "range", "(", "self", ".", "k", ")", "]", "\n", "self", ".", "counts", "=", "[", "0", "for", "i", "in", "range", "(", "self", ".", "k", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.bandits.UCB.select": [[12, 20], ["numpy.argmax", "numpy.min", "numpy.argmin", "range", "numpy.sqrt"], "methods", ["None"], ["", "def", "select", "(", "self", ")", ":", "\n", "        ", "if", "np", ".", "min", "(", "self", ".", "counts", ")", "==", "0", ":", "\n", "            ", "action", "=", "np", ".", "argmin", "(", "self", ".", "counts", ")", "\n", "return", "action", "\n", "\n", "", "scores", "=", "[", "self", ".", "rew", "[", "i", "]", "/", "self", ".", "counts", "[", "i", "]", "+", "self", ".", "conf", "*", "np", ".", "sqrt", "(", "1.0", "/", "self", ".", "counts", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "k", ")", "]", "\n", "action", "=", "np", ".", "argmax", "(", "scores", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.bandits.UCB.update": [[21, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "rew", "[", "action", "]", "+=", "reward", "\n", "self", ".", "counts", "[", "action", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.bandits.UCB.reset": [[25, 28], ["range", "range"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "rew", "=", "[", "0", "for", "i", "in", "range", "(", "self", ".", "k", ")", "]", "\n", "self", ".", "counts", "=", "[", "0", "for", "i", "in", "range", "(", "self", ".", "k", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.bandits.Thompson.__init__": [[32, 40], ["numpy.matrix", "numpy.linalg.pinv", "numpy.matrix", "numpy.zeros", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "mean", ",", "cov", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "mean", "=", "np", ".", "matrix", "(", "mean", ")", "\n", "self", ".", "cov", "=", "cov", "\n", "self", ".", "prec", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "cov", ")", "\n", "\n", "self", ".", "rew", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "k", ")", ")", ")", "\n", "self", ".", "counts", "=", "[", "0", "for", "i", "in", "range", "(", "self", ".", "k", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.bandits.Thompson.select": [[41, 52], ["numpy.linalg.pinv", "numpy.random.multivariate_normal", "numpy.argmax", "numpy.diag", "numpy.array"], "methods", ["None"], ["", "def", "select", "(", "self", ",", "greedy", "=", "False", ")", ":", "\n", "### Compute posterior (I think correct?)", "\n", "\n", "        ", "posterior_cov", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "prec", "+", "np", ".", "diag", "(", "self", ".", "counts", ")", ")", "\n", "posterior_mean", "=", "(", "self", ".", "mean", "*", "self", ".", "prec", "+", "self", ".", "rew", ")", "*", "posterior_cov", "\n", "\n", "sample", "=", "np", ".", "random", ".", "multivariate_normal", "(", "np", ".", "array", "(", "posterior_mean", ")", "[", "0", ",", ":", "]", ",", "posterior_cov", ")", "\n", "if", "greedy", ":", "\n", "            ", "sample", "=", "posterior_mean", "\n", "", "action", "=", "np", ".", "argmax", "(", "sample", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.bandits.Thompson.update": [[53, 56], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "rew", "[", "0", ",", "action", "]", "+=", "reward", "\n", "self", ".", "counts", "[", "action", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.bandits.Thompson.reset": [[57, 60], ["numpy.matrix", "numpy.zeros", "range"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "rew", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "k", ")", ")", ")", "\n", "self", ".", "counts", "=", "[", "0", "for", "i", "in", "range", "(", "self", ".", "k", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.__init__": [[8, 47], ["numpy.zeros", "numpy.zeros", "numpy.eye", "numpy.eye", "numpy.eye", "numpy.matrix", "params.keys", "numpy.zeros", "params.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "train", "=", "None", ",", "num_random", "=", "None", ",", "fit_cov", "=", "True", ",", "params", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "fit_cov", "=", "fit_cov", "\n", "\n", "self", ".", "mean", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "self", ".", "running_mean", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "\n", "self", ".", "explore_action", "=", "0", "\n", "\n", "if", "'mean'", "in", "params", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "mean", "=", "params", "[", "'mean'", "]", "\n", "self", ".", "running_mean", "=", "params", "[", "'mean'", "]", "\n", "\n", "", "self", ".", "cov", "=", "np", ".", "eye", "(", "self", ".", "k", ")", "\n", "self", ".", "second_moment", "=", "np", ".", "eye", "(", "self", ".", "k", ")", "\n", "self", ".", "cov_unprojected", "=", "np", ".", "eye", "(", "self", ".", "k", ")", "\n", "\n", "self", ".", "running_cov", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "k", ",", "self", ".", "k", ")", ")", ")", "\n", "if", "'cov'", "in", "params", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "cov", "=", "params", "[", "'cov'", "]", "\n", "self", ".", "running_cov", "=", "params", "[", "'cov'", "]", "\n", "self", ".", "second_moment", "=", "params", "[", "'cov'", "]", "\n", "\n", "", "self", ".", "t", "=", "0", "\n", "if", "train", "is", "None", ":", "\n", "            ", "self", ".", "train", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "=", "train", "\n", "\n", "\n", "", "if", "num_random", "is", "None", ":", "\n", "            ", "self", ".", "num_random", "=", "1e9", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_random", "=", "num_random", "\n", "\n", "", "self", ".", "explore_stages", "=", "0", "\n", "self", ".", "explore_rounds", "=", "0", "\n", "self", ".", "cov_log", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.explore_decision": [[48, 53], ["None"], "methods", ["None"], ["", "def", "explore_decision", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "h", "<", "self", ".", "num_random", "and", "(", "self", ".", "train", "<", "0", "or", "self", ".", "t", "<=", "self", ".", "train", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.select": [[54, 64], ["meta_learner_general.MetaThompsonGeneral.explore_decision", "meta_learner_general.MetaThompsonGeneral.explore_decision", "numpy.random.choice", "meta_learner_general.MetaThompsonGeneral.base_learner.select"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.explore_decision", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.explore_decision", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select"], ["", "", "def", "select", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "explore_decision", "(", ")", "\n", "if", "self", ".", "explore_decision", "(", ")", "is", "True", ":", "\n", "            ", "action", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "k", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "self", ".", "base_learner", ".", "select", "(", ")", "\n", "self", ".", "isExplore", "=", "False", "\n", "#             print('not  random?',self.h,self.t,self.train)", "\n", "", "return", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.update": [[65, 77], ["meta_learner_general.MetaThompsonGeneral.explore_decision", "meta_learner_general.MetaThompsonGeneral.base_learner.update", "meta_learner_general.MetaThompsonGeneral.explore_decision"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.explore_decision", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.explore_decision"], ["", "def", "update", "(", "self", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "explore_decision", "(", ")", "\n", "self", ".", "base_learner", ".", "update", "(", "action", ",", "reward", ")", "\n", "\n", "if", "self", ".", "explore_decision", "(", ")", "is", "True", ":", "\n", "            ", "self", ".", "explore_stages", "+=", "1", "\n", "self", ".", "ep_running_mean", "[", "action", "]", "+=", "reward", "\n", "self", ".", "ep_running_sq", "[", "action", "]", "+=", "reward", "*", "reward", "\n", "\n", "if", "self", ".", "h", "==", "0", ":", "\n", "                ", "self", ".", "explore_rounds", "+=", "1", "\n", "", "", "self", ".", "h", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.update_mean_and_cov": [[78, 119], ["range", "meta_learner_general.MetaThompsonGeneral.psd_proj", "Exception", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.psd_proj"], ["", "def", "update_mean_and_cov", "(", "self", ")", ":", "\n", "        ", "k", "=", "self", ".", "k", "+", "0.0", "\n", "n", "=", "self", ".", "explore_stages", "+", "0.0", "\n", "t", "=", "self", ".", "explore_rounds", "+", "0.0", "\n", "\n", "in_ep_mean", "=", "(", "k", "/", "n", ")", "*", "self", ".", "ep_running_mean", "\n", "old_mean", "=", "(", "t", "-", "1", ")", "*", "self", ".", "mean", "/", "t", "\n", "self", ".", "mean", "=", "old_mean", "+", "(", "in_ep_mean", "/", "t", ")", "\n", "\n", "if", "self", ".", "fit_cov", "is", "False", ":", "\n", "            ", "return", "\n", "\n", "", "if", "n", "<", "2", ":", "\n", "            ", "raise", "Exception", "(", "'updating covariance with too few samples'", ")", "\n", "\n", "# constructing unbiased estimator of mu_t mu_t^T", "\n", "\n", "", "M", "=", "np", ".", "matrix", "(", "in_ep_mean", ")", ".", "T", "*", "np", ".", "matrix", "(", "in_ep_mean", ")", "\n", "# Exp[M[a][a]] | round t", "\n", "#                = (k/n)^2 * (n/k * sigma_reward^2)", "\n", "#                   + (k/n)^2  (n/k mu_t(a)^2 + n(n-1)/k^2 mu_t(a)^2)", "\n", "#                =  k/n * sigma_reward^2 + mu_t(a)^2 ( (k+n-1)/n)", "\n", "# ", "\n", "# Exp[ M[a][b]]  = (k/n)^2 * (n*(n-1))/k^2 mu_t(a) mu_t(b)", "\n", "#                = (n-1)/n * mu_t(a)mu_t(b)", "\n", "#renormalize off diagonals", "\n", "cov_t", "=", "n", "/", "(", "n", "-", "1", ")", "*", "M", "\n", "#if t == 100:", "\n", "#    print(M)", "\n", "#    print(cov_t)", "\n", "\n", "for", "a", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "# correct for noise", "\n", "            ", "cov_t", "[", "a", ",", "a", "]", "=", "(", "k", "/", "n", "*", "self", ".", "ep_running_sq", "[", "a", "]", ")", "-", "1", "\n", "\n", "\n", "\n", "", "self", ".", "second_moment", "=", "(", "(", "t", "-", "1", ")", "*", "self", ".", "second_moment", "/", "t", ")", "+", "(", "cov_t", "/", "t", ")", "\n", "self", ".", "cov_unprojected", "=", "self", ".", "second_moment", "-", "np", ".", "matrix", "(", "self", ".", "mean", ")", ".", "T", "*", "np", ".", "matrix", "(", "self", ".", "mean", ")", "\n", "\n", "self", ".", "cov", "=", "MetaThompsonGeneral", ".", "psd_proj", "(", "self", ".", "cov_unprojected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.psd_proj": [[120, 125], ["numpy.linalg.eig", "numpy.matrix", "numpy.matrix", "numpy.diag", "numpy.maximum"], "methods", ["None"], ["", "def", "psd_proj", "(", "M", ")", ":", "\n", "        ", "eigval", ",", "eigvec", "=", "np", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "Q", "=", "np", ".", "matrix", "(", "eigvec", ")", "\n", "d", "=", "np", ".", "matrix", "(", "np", ".", "diag", "(", "np", ".", "maximum", "(", "eigval", ",", "0", ")", ")", ")", "\n", "return", "(", "Q", "*", "d", "*", "Q", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.reset": [[126, 139], ["BML_2.Thompson", "numpy.zeros", "numpy.zeros", "meta_learner_general.MetaThompsonGeneral.update_mean_and_cov", "meta_learner_general.MetaThompsonGeneral.cov_log.append"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.meta_learner_general.MetaThompsonGeneral.update_mean_and_cov"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "explore_rounds", ">=", "1", "and", "self", ".", "explore_stages", ">", "0", ":", "\n", "            ", "self", ".", "update_mean_and_cov", "(", ")", "\n", "self", ".", "cov_log", ".", "append", "(", "self", ".", "second_moment", "[", "0", ",", "1", "]", ")", "\n", "\n", "\n", "", "self", ".", "t", "+=", "1", "\n", "self", ".", "base_learner", "=", "bandits", ".", "Thompson", "(", "self", ".", "k", ",", "self", ".", "mean", ",", "self", ".", "cov", ")", "\n", "self", ".", "h", "=", "0", "\n", "self", ".", "ep_running_mean", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "self", ".", "ep_running_sq", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "\n", "self", ".", "explore_stages", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearBandit.__init__": [[11, 28], ["numpy.zeros", "numpy.random.seed", "numpy.zeros", "numpy.eye"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "K", ",", "H", ",", "prior", "=", "None", ",", "noise", "=", "False", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "d", "=", "d", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "noise", "=", "noise", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "self", ".", "Ns", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# number of plays", "\n", "\n", "if", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "574", ")", "\n", "\n", "", "self", ".", "ep", "=", "0", "\n", "\n", "self", ".", "prior", "=", "[", "np", ".", "zeros", "(", "d", ")", ",", "np", ".", "eye", "(", "d", ")", "]", "\n", "if", "prior", "is", "not", "None", ":", "\n", "            ", "self", ".", "prior", "=", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearBandit.start": [[29, 41], ["numpy.zeros", "numpy.random.multivariate_normal", "linear_bandits.LinearBandit.get_new_context"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.get_new_context"], ["", "", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "ep", "+=", "1", "\n", "self", ".", "h", "=", "0", "\n", "self", ".", "Ns", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "self", ".", "done", "=", "False", "\n", "self", ".", "curr_x", "=", "None", "\n", "self", ".", "features", "=", "None", "\n", "self", ".", "curr_r", "=", "None", "\n", "\n", "self", ".", "weights", "=", "np", ".", "random", ".", "multivariate_normal", "(", "self", ".", "prior", "[", "0", "]", ",", "self", ".", "prior", "[", "1", "]", ")", "\n", "\n", "return", "(", "self", ".", "get_new_context", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearBandit.get_new_features_means": [[42, 51], ["numpy.matrix", "numpy.argmax", "numpy.random.normal", "numpy.diag", "numpy.array", "numpy.sqrt", "numpy.diag", "numpy.matrix"], "methods", ["None"], ["", "def", "get_new_features_means", "(", "self", ")", ":", "\n", "        ", "self", ".", "features", "=", "np", ".", "matrix", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "self", ".", "K", ",", "self", ".", "d", "]", ")", ")", "\n", "# self.features[0,:] = 0.05*self.features[0,:] + np.matrix(self.weights.T)", "\n", "self", ".", "features", "=", "np", ".", "diag", "(", "1.", "/", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "self", ".", "features", "*", "self", ".", "features", ".", "T", ")", ")", ")", "*", "self", ".", "features", "# ???", "\n", "self", ".", "curr_means", "=", "np", ".", "array", "(", "(", "self", ".", "features", "*", "np", ".", "matrix", "(", "self", ".", "weights", ")", ".", "T", ")", ".", "T", ")", "[", "0", "]", "\n", "\n", "self", ".", "idx_best", "=", "np", ".", "argmax", "(", "self", ".", "curr_means", ")", "\n", "\n", "return", "self", ".", "features", ",", "self", ".", "curr_means", "# .038311", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearBandit.get_new_context": [[52, 70], ["numpy.random.seed", "linear_bandits.LinearBandit.get_new_features_means", "numpy.random.normal", "numpy.array", "type", "numpy.random.normal", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.get_new_features_means"], ["", "def", "get_new_context", "(", "self", ")", ":", "\n", "## Generate random feature matrix and normalize.", "\n", "        ", "if", "self", ".", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "(", "self", ".", "h", "+", "self", ".", "ep", "*", "self", ".", "H", "+", "17", ")", "*", "(", "self", ".", "seed", "+", "1", ")", "+", "37", ")", "\n", "\n", "", "if", "not", "BAI", "or", "self", ".", "h", "==", "0", ":", "# under BAI features should not change", "\n", "            ", "self", ".", "features", ",", "self", ".", "curr_means", "=", "self", ".", "get_new_features_means", "(", ")", "\n", "\n", "", "if", "self", ".", "noise", "and", "type", "(", "self", ".", "noise", ")", "==", "float", ":", "\n", "            ", "self", ".", "noise_term", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "self", ".", "noise", ")", "\n", "self", ".", "curr_r", "=", "np", ".", "array", "(", "self", ".", "curr_means", "+", "self", ".", "noise_term", ")", "\n", "", "elif", "self", ".", "noise", ":", "\n", "            ", "self", ".", "noise_term", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "0.1", ")", "\n", "self", ".", "curr_r", "=", "np", ".", "array", "(", "self", ".", "curr_means", "+", "self", ".", "noise_term", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "curr_r", "=", "np", ".", "array", "(", "self", ".", "curr_means", ")", "\n", "\n", "", "return", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearBandit.get_best_reward": [[71, 74], ["numpy.argsort", "numpy.sum"], "methods", ["None"], ["", "def", "get_best_reward", "(", "self", ")", ":", "\n", "        ", "idx", "=", "np", ".", "argsort", "(", "self", ".", "curr_means", ")", "\n", "return", "np", ".", "sum", "(", "self", ".", "curr_r", "[", "idx", "[", "-", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearBandit.step": [[75, 89], ["linear_bandits.LinearBandit.get_new_context"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.get_new_context"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "assert", "self", ".", "done", "is", "False", ",", "\"Environment must be reset\"", "\n", "self", ".", "h", "+=", "1", "\n", "self", ".", "Ns", "[", "a", "]", "+=", "1", "\n", "\n", "if", "self", ".", "h", "==", "self", ".", "H", ":", "\n", "            ", "self", ".", "done", "=", "True", "\n", "", "r", "=", "self", ".", "curr_r", "[", "a", "]", "# cum reward", "\n", "\n", "# if BAI:# simple reward", "\n", "#     idx_most_freq = np.argmax(self.Ns)", "\n", "#     sr = self.curr_means[self.idx_best] - self.curr_means[idx_most_freq]", "\n", "\n", "return", "(", "r", ",", "self", ".", "get_new_context", "(", ")", ",", "self", ".", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearTS.__init__": [[92, 101], ["copy.deepcopy", "numpy.matrix", "numpy.matrix", "numpy.zeros", "numpy.eye", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "K", ",", "prior", "=", "None", ")", ":", "\n", "        ", "self", ".", "d", "=", "d", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "prior", "=", "[", "np", ".", "zeros", "(", "d", ")", ",", "np", ".", "eye", "(", "d", ")", "]", "\n", "if", "prior", "is", "not", "None", ":", "\n", "            ", "self", ".", "prior", "=", "prior", "\n", "", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "self", ".", "data_norm", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "self", ".", "d", ")", ")", ")", "\n", "self", ".", "b_vec", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearTS.select": [[102, 107], ["numpy.argmax", "numpy.matrix", "numpy.array", "numpy.random.multivariate_normal"], "methods", ["None"], ["", "def", "select", "(", "self", ",", "features", ")", ":", "\n", "        ", "sample", "=", "np", ".", "matrix", "(", "np", ".", "random", ".", "multivariate_normal", "(", "self", ".", "post", "[", "0", "]", ",", "self", ".", "post", "[", "1", "]", ")", ")", ".", "T", "\n", "scores", "=", "np", ".", "array", "(", "(", "features", "*", "sample", ")", ".", "T", ")", "[", "0", "]", "\n", "idx", "=", "np", ".", "argmax", "(", "scores", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearTS.update": [[108, 116], ["numpy.matrix", "numpy.linalg.pinv", "numpy.linalg.pinv", "numpy.array", "numpy.matrix"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "features", ",", "action", ",", "reward", ")", ":", "\n", "        ", "x", "=", "np", ".", "matrix", "(", "features", "[", "action", ",", ":", "]", ")", "\n", "self", ".", "post", "[", "1", "]", "+=", "x", ".", "T", "*", "x", "## posterior covariance = \\Lambda_0 + \\sum_t x_t x_t^\\top ", "\n", "self", ".", "data_norm", "+=", "x", ".", "T", "*", "x", "## data_norm = \\sum_t x_t x_t^\\top", "\n", "self", ".", "b_vec", "+=", "x", ".", "T", "*", "reward", "## b_vec = \\sum_t x_t r_t", "\n", "ols_param", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "data_norm", ")", "*", "self", ".", "b_vec", "## (\\sum_t x_t x_t^\\top)^\\dagger \\sum_t x_t y_t", "\n", "self", ".", "post", "[", "0", "]", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "post", "[", "1", "]", ")", "*", "(", "self", ".", "data_norm", "*", "ols_param", "+", "self", ".", "prior", "[", "1", "]", "*", "np", ".", "matrix", "(", "self", ".", "prior", "[", "0", "]", ")", ".", "T", ")", "\n", "self", ".", "post", "[", "0", "]", "=", "np", ".", "array", "(", "self", ".", "post", "[", "0", "]", ".", "T", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearTS.reset": [[117, 121], ["copy.deepcopy", "numpy.matrix", "numpy.matrix", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "self", ".", "data_norm", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "self", ".", "d", ")", ")", ")", "\n", "self", ".", "b_vec", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearExplore.__init__": [[124, 136], ["copy.deepcopy", "numpy.matrix", "numpy.matrix", "numpy.zeros", "numpy.eye", "numpy.zeros", "numpy.eye", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "K", ")", ":", "\n", "        ", "self", ".", "d", "=", "d", "\n", "self", ".", "K", "=", "K", "\n", "## Meta learner state", "\n", "self", ".", "prior", "=", "[", "np", ".", "zeros", "(", "d", ")", ",", "np", ".", "eye", "(", "d", ")", "]", "\n", "self", ".", "estimated_prior", "=", "[", "np", ".", "zeros", "(", "d", ")", ",", "np", ".", "eye", "(", "d", ")", "]", "\n", "self", ".", "t", "=", "1", "\n", "\n", "## Per episode state", "\n", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "self", ".", "data_norm", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "self", ".", "d", ")", ")", ")", "\n", "self", ".", "b_vec", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearExplore.select": [[137, 140], ["numpy.random.choice"], "methods", ["None"], ["", "def", "select", "(", "self", ",", "features", ")", ":", "\n", "        ", "a", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "K", ")", "\n", "return", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearExplore.update": [[141, 149], ["numpy.matrix", "numpy.linalg.pinv", "numpy.linalg.pinv", "numpy.array", "numpy.matrix"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "features", ",", "action", ",", "reward", ")", ":", "\n", "        ", "x", "=", "np", ".", "matrix", "(", "features", "[", "action", ",", ":", "]", ")", "\n", "self", ".", "post", "[", "1", "]", "+=", "x", ".", "T", "*", "x", "\n", "self", ".", "data_norm", "+=", "x", ".", "T", "*", "x", "\n", "self", ".", "b_vec", "+=", "x", ".", "T", "*", "reward", "\n", "ols_param", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "data_norm", ")", "*", "self", ".", "b_vec", "## (\\sum_t x_t x_t^\\top)^\\dagger \\sum_t x_t y_t", "\n", "self", ".", "post", "[", "0", "]", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "post", "[", "1", "]", ")", "*", "(", "self", ".", "data_norm", "*", "ols_param", "+", "self", ".", "prior", "[", "1", "]", "*", "np", ".", "matrix", "(", "self", ".", "prior", "[", "0", "]", ")", ".", "T", ")", "# ???", "\n", "self", ".", "post", "[", "0", "]", "=", "np", ".", "array", "(", "self", ".", "post", "[", "0", "]", ".", "T", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearExplore.reset": [[150, 168], ["copy.deepcopy", "numpy.matrix", "numpy.matrix", "numpy.linalg.pinv", "numpy.linalg.pinv", "numpy.zeros", "numpy.zeros", "numpy.array"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "## Update meta learner state", "\n", "        ", "self", ".", "t", "+=", "1", "\n", "ols_pred", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "data_norm", ")", "*", "self", ".", "b_vec", "\n", "\n", "## First moment estimator is just ols_pred", "\n", "self", ".", "estimated_prior", "[", "0", "]", "=", "(", "(", "self", ".", "t", "-", "1", ")", "*", "self", ".", "estimated_prior", "[", "0", "]", "+", "np", ".", "array", "(", "ols_pred", ".", "T", ")", "[", "0", "]", ")", "/", "self", ".", "t", "\n", "\n", "## Second moment estimator needs to debias", "\n", "## ols_pred = true_beta + N(0, data_norm^{-1}) ", "\n", "second_moment", "=", "ols_pred", "*", "ols_pred", ".", "T", "-", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "data_norm", ")", "\n", "self", ".", "estimated_prior", "[", "1", "]", "=", "(", "(", "self", ".", "t", "-", "1", ")", "*", "self", ".", "estimated_prior", "[", "1", "]", "+", "second_moment", ")", "/", "self", ".", "t", "\n", "\n", "## Reset per-ep state", "\n", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "self", ".", "data_norm", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "self", ".", "d", ")", ")", ")", "\n", "self", ".", "b_vec", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearMetaTS.__init__": [[171, 181], ["linear_bandits.LinearExplore", "numpy.zeros", "numpy.eye"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "K", ",", "train_len", ")", ":", "\n", "        ", "self", ".", "d", "=", "d", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "train_len", "=", "train_len", "\n", "self", ".", "prior", "=", "[", "np", ".", "zeros", "(", "d", ")", ",", "np", ".", "eye", "(", "d", ")", "]", "\n", "self", ".", "base", "=", "LinearExplore", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "self", ".", "episodes", "=", "0", "\n", "\n", "\n", "self", ".", "estimated_prior", "=", "self", ".", "base", ".", "estimated_prior", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearMetaTS.select": [[182, 184], ["linear_bandits.LinearMetaTS.base.select"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select"], ["", "def", "select", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "(", "self", ".", "base", ".", "select", "(", "features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearMetaTS.update": [[185, 187], ["linear_bandits.LinearMetaTS.base.update"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["", "def", "update", "(", "self", ",", "features", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "base", ".", "update", "(", "features", ",", "action", ",", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.LinearMetaTS.reset": [[188, 198], ["linear_bandits.LinearMetaTS.base.reset", "linear_bandits.LinearTS", "numpy.matrix", "numpy.matrix"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "base", ".", "reset", "(", ")", "\n", "self", ".", "episodes", "+=", "1", "\n", "if", "self", ".", "episodes", "<=", "self", ".", "train_len", ":", "\n", "            ", "self", ".", "estimated_prior", "=", "self", ".", "base", ".", "estimated_prior", "\n", "", "if", "self", ".", "episodes", "==", "self", ".", "train_len", ":", "\n", "            ", "mean", "=", "self", ".", "base", ".", "estimated_prior", "[", "0", "]", "\n", "cov", "=", "self", ".", "base", ".", "estimated_prior", "[", "1", "]", "-", "np", ".", "matrix", "(", "mean", ")", ".", "T", "*", "np", ".", "matrix", "(", "mean", ")", "\n", "self", ".", "prior", "=", "[", "mean", ",", "cov", "]", "\n", "self", ".", "base", "=", "LinearTS", "(", "self", ".", "d", ",", "self", ".", "K", ",", "prior", "=", "self", ".", "prior", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.experiment": [[200, 228], ["range", "env.start", "alg.reset", "ep_rewards.append", "numpy.argmax", "ep_sreg.append", "alg.select", "env.step", "alg.update", "alg.__dict__.keys", "mean_errs.append", "cov_errs.append", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.matrix", "numpy.matrix"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.start", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.reset", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.step", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["", "", "", "def", "experiment", "(", "alg", ",", "env", ",", "repsT", ")", ":", "\n", "    ", "ep_rewards", "=", "[", "]", "# episode rewards", "\n", "ep_sreg", "=", "[", "]", "\n", "mean_errs", "=", "[", "]", "\n", "cov_errs", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "repsT", ")", ":", "\n", "        ", "ctx", "=", "env", ".", "start", "(", ")", "\n", "alg", ".", "reset", "(", ")", "\n", "ep_rew", "=", "0", "\n", "while", "not", "env", ".", "done", ":", "\n", "            ", "action", "=", "alg", ".", "select", "(", "ctx", ")", "\n", "(", "r", ",", "new_ctx", ",", "done", ")", "=", "env", ".", "step", "(", "action", ")", "\n", "alg", ".", "update", "(", "ctx", ",", "action", ",", "r", ")", "\n", "ep_rew", "+=", "r", "\n", "ctx", "=", "new_ctx", "\n", "", "ep_rewards", ".", "append", "(", "ep_rew", ")", "\n", "\n", "# BAI", "\n", "idx_mf", "=", "np", ".", "argmax", "(", "env", ".", "Ns", ")", "\n", "ep_sreg", ".", "append", "(", "env", ".", "curr_means", "[", "env", ".", "idx_best", "]", "-", "env", ".", "curr_means", "[", "idx_mf", "]", ")", "\n", "\n", "if", "'estimated_prior'", "in", "alg", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "mean", "=", "alg", ".", "estimated_prior", "[", "0", "]", "\n", "mean_errs", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "mean", "-", "env", ".", "prior", "[", "0", "]", ")", ")", "\n", "cov", "=", "alg", ".", "estimated_prior", "[", "1", "]", "-", "np", ".", "matrix", "(", "mean", ")", ".", "T", "*", "np", ".", "matrix", "(", "mean", ")", "\n", "cov_errs", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "cov", "-", "env", ".", "prior", "[", "1", "]", ")", ")", "\n", "\n", "", "", "return", "(", "ep_rewards", ",", "ep_sreg", ",", "mean_errs", ",", "cov_errs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.one_iter": [[230, 243], ["linear_bandits.LinearBandit", "linear_bandits.experiment", "linear_bandits.LinearMetaTS", "linear_bandits.LinearTS", "linear_bandits.LinearTS"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.experiment"], ["", "def", "one_iter", "(", "Args", ",", "mean", ",", "cov", ",", "iter_cnt", "=", "0", ")", ":", "\n", "\n", "    ", "env", "=", "LinearBandit", "(", "Args", ".", "d", ",", "Args", ".", "K", ",", "Args", ".", "H", ",", "prior", "=", "[", "mean", ",", "cov", "]", ",", "noise", "=", "1.0", ",", "seed", "=", "59", "+", "iter_cnt", ")", "\n", "if", "Args", ".", "alg", "==", "'mts'", ":", "\n", "        ", "Alg", "=", "LinearMetaTS", "(", "Args", ".", "d", ",", "Args", ".", "K", ",", "Args", ".", "train", ")", "\n", "", "elif", "Args", ".", "alg", "==", "'oracle'", ":", "\n", "        ", "Alg", "=", "LinearTS", "(", "Args", ".", "d", ",", "Args", ".", "K", ",", "prior", "=", "[", "mean", ",", "cov", "]", ")", "\n", "", "else", ":", "\n", "        ", "Alg", "=", "LinearTS", "(", "Args", ".", "d", ",", "Args", ".", "K", ",", "prior", "=", "None", ")", "\n", "\n", "", "(", "vec", ",", "svec", ",", "me", ",", "ce", ")", "=", "experiment", "(", "Alg", ",", "env", ",", "Args", ".", "T", ")", "\n", "\n", "return", "(", "iter_cnt", ",", "vec", ",", "svec", ",", "me", ",", "ce", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits.collect_result": [[245, 256], ["rewards.append", "simple_regs.append", "mean_est.append", "cov_est.append", "print", "numpy.mean", "int"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["", "def", "collect_result", "(", "res", ")", ":", "\n", "    ", "(", "i", ",", "vec", ",", "svec", ",", "me", ",", "ce", ")", "=", "res", "\n", "global", "rewards", ",", "simple_regs", ",", "mean_est", ",", "cov_est", "\n", "rewards", ".", "append", "(", "vec", ")", "\n", "simple_regs", ".", "append", "(", "svec", ")", "\n", "mean_est", ".", "append", "(", "me", ")", "\n", "cov_est", ".", "append", "(", "ce", ")", "\n", "\n", "print", "(", "\"Iter: %d, test_reward: %0.3f\"", "%", "(", "i", ",", "np", ".", "mean", "(", "vec", "[", "int", "(", "Args", ".", "T", "/", "2", ")", ":", "]", ")", ")", ",", "flush", "=", "True", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.KGPolicy.__init__": [[24, 31], ["numpy.zeros", "numpy.zeros", "numpy.diag"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "mean", ",", "cov", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "mean", "=", "mean", "\n", "\n", "self", ".", "prec", "=", "1.", "/", "np", ".", "diag", "(", "cov", ")", "\n", "self", ".", "rew", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "self", ".", "counts", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.KGPolicy.select": [[32, 36], ["kg.kg_select"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.kg_select"], ["", "def", "select", "(", "self", ",", "greedy", "=", "False", ")", ":", "\n", "        ", "pc", "=", "self", ".", "prec", "+", "self", ".", "counts", "\n", "pm", "=", "(", "self", ".", "mean", "*", "self", ".", "prec", "+", "self", ".", "rew", ")", "*", "pc", "\n", "return", "kg_select", "(", "pm", ",", "pc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.KGPolicy.update": [[37, 40], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "rew", "[", "action", "]", "+=", "reward", "\n", "self", ".", "counts", "[", "action", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.KGPolicy.reset": [[41, 44], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "rew", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "self", ".", "counts", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.kg_f": [[5, 7], ["scipy.stats.norm.pdf", "scipy.stats.norm.cdf"], "function", ["None"], ["def", "kg_f", "(", "z", ")", ":", "\n", "    ", "return", "z", "*", "norm", ".", "cdf", "(", "z", ")", "+", "norm", ".", "pdf", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.kg_sigma": [[8, 10], ["numpy.sqrt"], "function", ["None"], ["", "def", "kg_sigma", "(", "precision", ")", ":", "\n", "    ", "return", "1.", "/", "np", ".", "sqrt", "(", "precision", "*", "(", "precision", "+", "1.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.kg_zeta": [[11, 18], ["numpy.argmax", "numpy.nanmax", "kg.kg_sigma", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.kg_sigma"], ["", "def", "kg_zeta", "(", "mean", ",", "precision", ")", ":", "\n", "    ", "max_index", "=", "np", ".", "argmax", "(", "mean", ")", "\n", "max_val", "=", "mean", "[", "max_index", "]", "\n", "mean", "[", "max_index", "]", "=", "np", ".", "nan", "\n", "second_max_val", "=", "np", ".", "nanmax", "(", "mean", ")", "\n", "mean", "[", "max_index", "]", "=", "max_val", "\n", "return", "-", "np", ".", "abs", "(", "[", "m", "-", "second_max_val", "if", "m", "==", "max_val", "else", "m", "-", "max_val", "for", "m", "in", "mean", "]", ")", "/", "kg_sigma", "(", "precision", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.kg_select": [[19, 21], ["numpy.argmax", "kg.kg_sigma", "kg.kg_f", "kg.kg_zeta"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.kg_sigma", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.kg_f", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg.kg_zeta"], ["", "def", "kg_select", "(", "mean", ",", "precision", ")", ":", "\n", "    ", "return", "np", ".", "argmax", "(", "kg_sigma", "(", "precision", ")", "*", "kg_f", "(", "kg_zeta", "(", "mean", ",", "precision", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.envs.Environment.__init__": [[5, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "horizon", ",", "k", ")", ":", "\n", "        ", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "h", "=", "0", "\n", "self", ".", "done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.envs.Environment.start": [[11, 15], ["None"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "h", "=", "0", "\n", "self", ".", "done", "=", "False", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.envs.Environment.step": [[16, 23], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "done", "is", "False", ",", "\"Environment must be reset\"", "\n", "self", ".", "h", "+=", "1", "\n", "if", "self", ".", "h", "==", "self", ".", "horizon", ":", "\n", "            ", "self", ".", "done", "=", "True", "\n", "\n", "", "return", "(", "0", ",", "self", ".", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.envs.GaussianEnv.__init__": [[28, 52], ["numpy.zeros", "numpy.random.seed", "numpy.random.normal", "numpy.shape", "numpy.matrix", "numpy.shape", "numpy.random.randint", "numpy.eye"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "horizon", ",", "k", ",", "mean", "=", "None", ",", "cov", "=", "None", ",", "seed", "=", "None", ",", "prior_dist", "=", "None", ",", "reward_dist", "=", "None", ")", ":", "\n", "        ", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "Ns", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "prior_dist", "=", "prior_dist", "\n", "self", ".", "reward_dist", "=", "reward_dist", "\n", "if", "mean", "is", "None", ":", "\n", "            ", "self", ".", "mean", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "self", ".", "k", ")", "\n", "", "assert", "np", ".", "shape", "(", "self", ".", "mean", ")", "==", "(", "self", ".", "k", ",", ")", ",", "\"Mean is the wrong shape\"", "\n", "\n", "self", ".", "cov", "=", "cov", "\n", "if", "self", ".", "cov", "is", "None", ":", "\n", "            ", "self", ".", "cov", "=", "np", ".", "matrix", "(", "np", ".", "eye", "(", "self", ".", "k", ")", ")", "\n", "", "assert", "np", ".", "shape", "(", "self", ".", "cov", ")", "==", "(", "self", ".", "k", ",", "self", ".", "k", ")", ",", "\"Mean is the wrong shape\"", "\n", "\n", "self", ".", "param", "=", "None", "\n", "self", ".", "h", "=", "0", "\n", "self", ".", "done", "=", "True", "\n", "if", "seed", "==", "None", ":", "\n", "            ", "self", ".", "seed", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "100", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "seed", "=", "seed", "\n", "", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.envs.GaussianEnv.start": [[53, 63], ["numpy.zeros", "numpy.argmax", "numpy.random.multivariate_normal", "numpy.diagonal", "numpy.random.randn"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "h", "=", "0", "\n", "self", ".", "Ns", "=", "np", ".", "zeros", "(", "self", ".", "k", ")", "\n", "self", ".", "done", "=", "False", "\n", "if", "self", ".", "prior_dist", "==", "'AdaTScode'", ":", "\n", "            ", "self", ".", "param", "=", "self", ".", "mean", "+", "np", ".", "diagonal", "(", "self", ".", "cov", ")", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "k", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "param", "=", "np", ".", "random", ".", "multivariate_normal", "(", "self", ".", "mean", ",", "self", ".", "cov", ")", "\n", "\n", "", "self", ".", "idx_best", "=", "np", ".", "argmax", "(", "self", ".", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.envs.GaussianEnv.step": [[64, 79], ["numpy.random.normal", "numpy.random.randn"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "done", "is", "False", ",", "\"Environment must be reset\"", "\n", "self", ".", "h", "+=", "1", "\n", "self", ".", "Ns", "[", "action", "]", "+=", "1", "\n", "if", "self", ".", "h", "==", "self", ".", "horizon", ":", "\n", "            ", "self", ".", "done", "=", "True", "\n", "\n", "", "if", "self", ".", "reward_dist", "==", "'GausAdaTScode'", ":", "\n", "            ", "_sigma", "=", "1.0", "\n", "r", "=", "self", ".", "param", "+", "_sigma", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "k", ")", "#TODO: sigma assumed always 1", "\n", "r", "=", "r", "[", "action", "]", "\n", "", "else", ":", "\n", "            ", "r", "=", "np", ".", "random", ".", "normal", "(", "self", ".", "param", "[", "action", "]", ",", "1", ")", "\n", "\n", "", "return", "(", "r", ",", "self", ".", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg_plots.get_pointwise_best": [[16, 30], ["numpy.zeros", "numpy.zeros", "range", "numpy.argmax", "len", "numpy.array", "numpy.array", "len", "len", "numpy.loadtxt", "numpy.cumsum", "numpy.mean", "numpy.std", "print", "range", "range"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["def", "get_pointwise_best", "(", "n", ",", "alg", ")", ":", "\n", "    ", "means", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_lens", ")", ",", "n", ")", ")", "\n", "stds", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_lens", ")", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_lens", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "tmp", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "'%s_%d_rewards.out'", "%", "(", "alg", ",", "train_lens", "[", "i", "]", ")", ")", "\n", "v", "=", "np", ".", "cumsum", "(", "tmp", ",", "axis", "=", "1", ")", "\n", "means", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "v", ",", "axis", "=", "0", ")", "\n", "stds", "[", "i", ",", ":", "]", "=", "np", ".", "std", "(", "v", ",", "axis", "=", "0", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Skipping %d\"", "%", "(", "train_lens", "[", "i", "]", ")", ",", "flush", "=", "True", ")", "\n", "continue", "\n", "", "", "idx", "=", "np", ".", "argmax", "(", "means", ",", "axis", "=", "0", ")", "\n", "return", "(", "np", ".", "array", "(", "[", "means", "[", "idx", "[", "i", "]", ",", "i", "]", "for", "i", "in", "range", "(", "n", ")", "]", ")", ",", "np", ".", "array", "(", "[", "stds", "[", "idx", "[", "i", "]", ",", "i", "]", "for", "i", "in", "range", "(", "n", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.kg_plots.process_act_mat": [[120, 123], ["print", "numpy.count_nonzero", "range"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["def", "process_act_mat", "(", "M", ")", ":", "\n", "    ", "print", "(", "M", ".", "shape", ")", "\n", "return", "(", "[", "np", ".", "count_nonzero", "(", "M", "==", "x", ")", "for", "x", "in", "range", "(", "K", ")", "]", ")", "\n", "", "hists", "=", "[", "process_act_mat", "(", "M", ")", "for", "M", "in", "actions", "]", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.DiscreteExp.experiment": [[4, 24], ["range", "env.start", "alg.reset", "ep_rewards.append", "ep_actions.append", "alg.select", "env.step", "alg.update", "ep_act.append"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.start", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.reset", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.step", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["def", "experiment", "(", "alg", ",", "env", ",", "reps", ")", ":", "\n", "\n", "    ", "ep_rewards", "=", "[", "]", "\n", "ep_actions", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "reps", ")", ":", "\n", "# print(\"New episode\", flush=True)", "\n", "        ", "env", ".", "start", "(", ")", "\n", "alg", ".", "reset", "(", ")", "\n", "ep_rew", "=", "0", "\n", "ep_act", "=", "[", "]", "\n", "while", "not", "env", ".", "done", ":", "\n", "            ", "action", "=", "alg", ".", "select", "(", ")", "\n", "(", "r", ",", "done", ")", "=", "env", ".", "step", "(", "action", ")", "\n", "alg", ".", "update", "(", "action", ",", "r", ")", "\n", "ep_rew", "+=", "r", "\n", "ep_act", ".", "append", "(", "action", ")", "\n", "# print(\"%d\" % (ep_act[0]), flush=True)", "\n", "", "ep_rewards", ".", "append", "(", "ep_rew", ")", "\n", "ep_actions", ".", "append", "(", "ep_act", "[", "0", "]", ")", "\n", "", "return", "(", "ep_rewards", ",", "ep_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.__init__": [[13, 32], ["numpy.zeros", "numpy.random.seed", "numpy.zeros", "numpy.eye"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "K", ",", "H", ",", "prior", "=", "None", ",", "noise", "=", "False", ",", "seed", "=", "None", ",", "arm_dist", "=", "'Gaus'", ",", "weight_dist", "=", "'MulGaus'", ")", ":", "\n", "        ", "self", ".", "d", "=", "d", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "noise", "=", "noise", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "arm_dist", "=", "arm_dist", "\n", "self", ".", "weight_dist", "=", "weight_dist", "\n", "\n", "self", ".", "Ns", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "# number of plays", "\n", "\n", "if", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "574", ")", "\n", "\n", "", "self", ".", "ep", "=", "0", "\n", "\n", "self", ".", "prior", "=", "[", "np", ".", "zeros", "(", "d", ")", ",", "np", ".", "eye", "(", "d", ")", "]", "\n", "if", "prior", "is", "not", "None", ":", "\n", "            ", "self", ".", "prior", "=", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.start": [[33, 48], ["numpy.zeros", "linear_bandits2.LinearBandit.get_new_context", "numpy.random.multivariate_normal", "numpy.diagonal", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.get_new_context"], ["", "", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "ep", "+=", "1", "\n", "self", ".", "h", "=", "0", "\n", "self", ".", "Ns", "=", "np", ".", "zeros", "(", "self", ".", "K", ")", "\n", "self", ".", "done", "=", "False", "\n", "self", ".", "curr_x", "=", "None", "\n", "self", ".", "features", "=", "None", "\n", "self", ".", "curr_r", "=", "None", "\n", "\n", "if", "self", ".", "weight_dist", "==", "'MulGaus'", ":", "\n", "            ", "self", ".", "weights", "=", "np", ".", "random", ".", "multivariate_normal", "(", "self", ".", "prior", "[", "0", "]", ",", "self", ".", "prior", "[", "1", "]", ")", "\n", "", "elif", "self", ".", "weight_dist", "==", "'AdaTS'", ":", "# same as AdaTS code", "\n", "            ", "self", ".", "weights", "=", "self", ".", "prior", "[", "0", "]", "+", "np", ".", "diagonal", "(", "self", ".", "prior", "[", "1", "]", ")", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "d", ")", "\n", "\n", "", "return", "(", "self", ".", "get_new_context", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.get_new_features_means": [[49, 63], ["numpy.argmax", "numpy.random.randn", "numpy.matrix", "numpy.diag", "numpy.array", "numpy.linalg.norm", "numpy.matrix", "numpy.random.normal", "numpy.sqrt", "numpy.diag", "numpy.matrix"], "methods", ["None"], ["", "def", "get_new_features_means", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "arm_dist", "==", "'unif'", ":", "\n", "            ", "self", ".", "features", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "K", ",", "self", ".", "d", ")", "\n", "self", ".", "features", "/=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "features", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "self", ".", "features", "=", "np", ".", "matrix", "(", "self", ".", "features", ")", "\n", "", "elif", "self", ".", "arm_dist", "==", "'Gaus'", ":", "\n", "            ", "self", ".", "features", "=", "np", ".", "matrix", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "self", ".", "K", ",", "self", ".", "d", "]", ")", ")", "\n", "# self.features[0,:] = 0.05*self.features[0,:] + np.matrix(self.weights.T)", "\n", "", "self", ".", "features", "=", "np", ".", "diag", "(", "1.", "/", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "self", ".", "features", "*", "self", ".", "features", ".", "T", ")", ")", ")", "*", "self", ".", "features", "# ???", "\n", "self", ".", "curr_means", "=", "np", ".", "array", "(", "(", "self", ".", "features", "*", "np", ".", "matrix", "(", "self", ".", "weights", ")", ".", "T", ")", ".", "T", ")", "[", "0", "]", "\n", "\n", "self", ".", "idx_best", "=", "np", ".", "argmax", "(", "self", ".", "curr_means", ")", "\n", "\n", "return", "self", ".", "features", ",", "self", ".", "curr_means", "# .038311", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.get_new_context": [[64, 82], ["numpy.random.seed", "linear_bandits2.LinearBandit.get_new_features_means", "numpy.random.normal", "numpy.array", "type", "numpy.random.normal", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.get_new_features_means"], ["", "def", "get_new_context", "(", "self", ")", ":", "\n", "## Generate random feature matrix and normalize.", "\n", "        ", "if", "self", ".", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "(", "self", ".", "h", "+", "self", ".", "ep", "*", "self", ".", "H", "+", "17", ")", "*", "(", "self", ".", "seed", "+", "1", ")", "+", "37", ")", "\n", "\n", "", "if", "not", "BAI", "or", "self", ".", "h", "==", "0", ":", "# under BAI features should not change", "\n", "            ", "self", ".", "features", ",", "self", ".", "curr_means", "=", "self", ".", "get_new_features_means", "(", ")", "\n", "\n", "", "if", "self", ".", "noise", "and", "type", "(", "self", ".", "noise", ")", "==", "float", ":", "\n", "            ", "self", ".", "noise_term", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "self", ".", "noise", ")", "\n", "self", ".", "curr_r", "=", "np", ".", "array", "(", "self", ".", "curr_means", "+", "self", ".", "noise_term", ")", "\n", "", "elif", "self", ".", "noise", ":", "\n", "            ", "self", ".", "noise_term", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "0.1", ")", "\n", "self", ".", "curr_r", "=", "np", ".", "array", "(", "self", ".", "curr_means", "+", "self", ".", "noise_term", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "curr_r", "=", "np", ".", "array", "(", "self", ".", "curr_means", ")", "\n", "\n", "", "return", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.get_best_reward": [[83, 86], ["numpy.argsort", "numpy.sum"], "methods", ["None"], ["", "def", "get_best_reward", "(", "self", ")", ":", "\n", "        ", "idx", "=", "np", ".", "argsort", "(", "self", ".", "curr_means", ")", "\n", "return", "np", ".", "sum", "(", "self", ".", "curr_r", "[", "idx", "[", "-", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.step": [[87, 101], ["linear_bandits2.LinearBandit.get_new_context"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.get_new_context"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "assert", "self", ".", "done", "is", "False", ",", "\"Environment must be reset\"", "\n", "self", ".", "h", "+=", "1", "\n", "self", ".", "Ns", "[", "a", "]", "+=", "1", "\n", "\n", "if", "self", ".", "h", "==", "self", ".", "H", ":", "\n", "            ", "self", ".", "done", "=", "True", "\n", "", "r", "=", "self", ".", "curr_r", "[", "a", "]", "# cum reward", "\n", "\n", "# if BAI:# simple reward", "\n", "#     idx_most_freq = np.argmax(self.Ns)", "\n", "#     sr = self.curr_means[self.idx_best] - self.curr_means[idx_most_freq]", "\n", "\n", "return", "(", "r", ",", "self", ".", "get_new_context", "(", ")", ",", "self", ".", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearTS.__init__": [[104, 113], ["copy.deepcopy", "numpy.matrix", "numpy.matrix", "numpy.zeros", "numpy.eye", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "K", ",", "prior", "=", "None", ")", ":", "\n", "        ", "self", ".", "d", "=", "d", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "prior", "=", "[", "np", ".", "zeros", "(", "d", ")", ",", "np", ".", "eye", "(", "d", ")", "]", "\n", "if", "prior", "is", "not", "None", ":", "\n", "            ", "self", ".", "prior", "=", "prior", "\n", "", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "self", ".", "data_norm", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "self", ".", "d", ")", ")", ")", "\n", "self", ".", "b_vec", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearTS.select": [[114, 119], ["numpy.argmax", "numpy.matrix", "numpy.array", "numpy.random.multivariate_normal"], "methods", ["None"], ["", "def", "select", "(", "self", ",", "features", ")", ":", "\n", "        ", "sample", "=", "np", ".", "matrix", "(", "np", ".", "random", ".", "multivariate_normal", "(", "self", ".", "post", "[", "0", "]", ",", "self", ".", "post", "[", "1", "]", ")", ")", ".", "T", "\n", "scores", "=", "np", ".", "array", "(", "(", "features", "*", "sample", ")", ".", "T", ")", "[", "0", "]", "\n", "idx", "=", "np", ".", "argmax", "(", "scores", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearTS.update": [[120, 128], ["numpy.matrix", "numpy.linalg.pinv", "numpy.linalg.pinv", "numpy.array", "numpy.matrix"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "features", ",", "action", ",", "reward", ")", ":", "\n", "        ", "x", "=", "np", ".", "matrix", "(", "features", "[", "action", ",", ":", "]", ")", "\n", "self", ".", "post", "[", "1", "]", "+=", "x", ".", "T", "*", "x", "## posterior covariance = \\Lambda_0 + \\sum_t x_t x_t^\\top ", "\n", "self", ".", "data_norm", "+=", "x", ".", "T", "*", "x", "## data_norm = \\sum_t x_t x_t^\\top", "\n", "self", ".", "b_vec", "+=", "x", ".", "T", "*", "reward", "## b_vec = \\sum_t x_t r_t", "\n", "ols_param", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "data_norm", ")", "*", "self", ".", "b_vec", "## (\\sum_t x_t x_t^\\top)^\\dagger \\sum_t x_t y_t", "\n", "self", ".", "post", "[", "0", "]", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "post", "[", "1", "]", ")", "*", "(", "self", ".", "data_norm", "*", "ols_param", "+", "self", ".", "prior", "[", "1", "]", "*", "np", ".", "matrix", "(", "self", ".", "prior", "[", "0", "]", ")", ".", "T", ")", "\n", "self", ".", "post", "[", "0", "]", "=", "np", ".", "array", "(", "self", ".", "post", "[", "0", "]", ".", "T", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearTS.reset": [[129, 133], ["copy.deepcopy", "numpy.matrix", "numpy.matrix", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "self", ".", "data_norm", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "self", ".", "d", ")", ")", ")", "\n", "self", ".", "b_vec", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearExplore.__init__": [[136, 148], ["copy.deepcopy", "numpy.matrix", "numpy.matrix", "numpy.zeros", "numpy.eye", "numpy.zeros", "numpy.eye", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "K", ")", ":", "\n", "        ", "self", ".", "d", "=", "d", "\n", "self", ".", "K", "=", "K", "\n", "## Meta learner state", "\n", "self", ".", "prior", "=", "[", "np", ".", "zeros", "(", "d", ")", ",", "np", ".", "eye", "(", "d", ")", "]", "\n", "self", ".", "estimated_prior", "=", "[", "np", ".", "zeros", "(", "d", ")", ",", "np", ".", "eye", "(", "d", ")", "]", "\n", "self", ".", "t", "=", "1", "\n", "\n", "## Per episode state", "\n", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "self", ".", "data_norm", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "self", ".", "d", ")", ")", ")", "\n", "self", ".", "b_vec", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearExplore.select": [[149, 152], ["numpy.random.choice"], "methods", ["None"], ["", "def", "select", "(", "self", ",", "features", ")", ":", "\n", "        ", "a", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "K", ")", "\n", "return", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearExplore.update": [[153, 161], ["numpy.matrix", "numpy.linalg.pinv", "numpy.linalg.pinv", "numpy.array", "numpy.matrix"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "features", ",", "action", ",", "reward", ")", ":", "\n", "        ", "x", "=", "np", ".", "matrix", "(", "features", "[", "action", ",", ":", "]", ")", "\n", "self", ".", "post", "[", "1", "]", "+=", "x", ".", "T", "*", "x", "\n", "self", ".", "data_norm", "+=", "x", ".", "T", "*", "x", "\n", "self", ".", "b_vec", "+=", "x", ".", "T", "*", "reward", "\n", "ols_param", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "data_norm", ")", "*", "self", ".", "b_vec", "## (\\sum_t x_t x_t^\\top)^\\dagger \\sum_t x_t y_t", "\n", "self", ".", "post", "[", "0", "]", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "post", "[", "1", "]", ")", "*", "(", "self", ".", "data_norm", "*", "ols_param", "+", "self", ".", "prior", "[", "1", "]", "*", "np", ".", "matrix", "(", "self", ".", "prior", "[", "0", "]", ")", ".", "T", ")", "# ???", "\n", "self", ".", "post", "[", "0", "]", "=", "np", ".", "array", "(", "self", ".", "post", "[", "0", "]", ".", "T", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearExplore.reset": [[162, 180], ["copy.deepcopy", "numpy.matrix", "numpy.matrix", "numpy.linalg.pinv", "numpy.linalg.pinv", "numpy.zeros", "numpy.zeros", "numpy.array"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "## Update meta learner state", "\n", "        ", "self", ".", "t", "+=", "1", "\n", "ols_pred", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "data_norm", ")", "*", "self", ".", "b_vec", "\n", "\n", "## First moment estimator is just ols_pred", "\n", "self", ".", "estimated_prior", "[", "0", "]", "=", "(", "(", "self", ".", "t", "-", "1", ")", "*", "self", ".", "estimated_prior", "[", "0", "]", "+", "np", ".", "array", "(", "ols_pred", ".", "T", ")", "[", "0", "]", ")", "/", "self", ".", "t", "\n", "\n", "## Second moment estimator needs to debias", "\n", "## ols_pred = true_beta + N(0, data_norm^{-1}) ", "\n", "second_moment", "=", "ols_pred", "*", "ols_pred", ".", "T", "-", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "data_norm", ")", "\n", "self", ".", "estimated_prior", "[", "1", "]", "=", "(", "(", "self", ".", "t", "-", "1", ")", "*", "self", ".", "estimated_prior", "[", "1", "]", "+", "second_moment", ")", "/", "self", ".", "t", "\n", "\n", "## Reset per-ep state", "\n", "self", ".", "post", "=", "copy", ".", "deepcopy", "(", "self", ".", "prior", ")", "\n", "self", ".", "data_norm", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "self", ".", "d", ")", ")", ")", "\n", "self", ".", "b_vec", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "self", ".", "d", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearMetaTS.__init__": [[183, 193], ["linear_bandits2.LinearExplore", "numpy.zeros", "numpy.eye"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "K", ",", "train_len", ")", ":", "\n", "        ", "self", ".", "d", "=", "d", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "train_len", "=", "train_len", "\n", "self", ".", "prior", "=", "[", "np", ".", "zeros", "(", "d", ")", ",", "np", ".", "eye", "(", "d", ")", "]", "\n", "self", ".", "base", "=", "LinearExplore", "(", "self", ".", "d", ",", "self", ".", "K", ")", "\n", "self", ".", "episodes", "=", "0", "\n", "\n", "\n", "self", ".", "estimated_prior", "=", "self", ".", "base", ".", "estimated_prior", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearMetaTS.select": [[194, 196], ["linear_bandits2.LinearMetaTS.base.select"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select"], ["", "def", "select", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "(", "self", ".", "base", ".", "select", "(", "features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearMetaTS.update": [[197, 199], ["linear_bandits2.LinearMetaTS.base.update"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["", "def", "update", "(", "self", ",", "features", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "base", ".", "update", "(", "features", ",", "action", ",", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearMetaTS.reset": [[200, 210], ["linear_bandits2.LinearMetaTS.base.reset", "linear_bandits2.LinearTS", "numpy.matrix", "numpy.matrix"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "base", ".", "reset", "(", ")", "# updates meta learner state", "\n", "self", ".", "episodes", "+=", "1", "\n", "if", "self", ".", "episodes", "<=", "self", ".", "train_len", ":", "\n", "            ", "self", ".", "estimated_prior", "=", "self", ".", "base", ".", "estimated_prior", "\n", "", "if", "self", ".", "episodes", "==", "self", ".", "train_len", ":", "\n", "            ", "mean", "=", "self", ".", "base", ".", "estimated_prior", "[", "0", "]", "\n", "cov", "=", "self", ".", "base", ".", "estimated_prior", "[", "1", "]", "-", "np", ".", "matrix", "(", "mean", ")", ".", "T", "*", "np", ".", "matrix", "(", "mean", ")", "\n", "self", ".", "prior", "=", "[", "mean", ",", "cov", "]", "\n", "self", ".", "base", "=", "LinearTS", "(", "self", ".", "d", ",", "self", ".", "K", ",", "prior", "=", "self", ".", "prior", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.experiment": [[212, 247], ["range", "env.start", "alg.reset", "ep_rewards.append", "numpy.argmax", "ep_sreg.append", "alg.select", "env.step", "alg.update", "ep_rounds_rewards.append", "numpy.argmax", "ep_rounds_sreg.append", "alg.__dict__.keys", "mean_errs.append", "cov_errs.append", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.matrix", "numpy.matrix"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.start", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.reset", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.LinearBandit.step", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update"], ["", "", "", "def", "experiment", "(", "alg", ",", "env", ",", "repsT", ")", ":", "\n", "    ", "ep_rewards", "=", "[", "]", "# episode rewards", "\n", "ep_rounds_rewards", "=", "[", "]", "# episode rounds rewards", "\n", "ep_sreg", "=", "[", "]", "\n", "ep_rounds_sreg", "=", "[", "]", "# episode rounds simple regs", "\n", "mean_errs", "=", "[", "]", "\n", "cov_errs", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "repsT", ")", ":", "\n", "        ", "ctx", "=", "env", ".", "start", "(", ")", "\n", "alg", ".", "reset", "(", ")", "\n", "ep_rew", "=", "0", "\n", "while", "not", "env", ".", "done", ":", "\n", "            ", "action", "=", "alg", ".", "select", "(", "ctx", ")", "\n", "(", "r", ",", "new_ctx", ",", "done", ")", "=", "env", ".", "step", "(", "action", ")", "\n", "alg", ".", "update", "(", "ctx", ",", "action", ",", "r", ")", "\n", "ep_rounds_rewards", ".", "append", "(", "r", ")", "\n", "# BAI", "\n", "idx_mf", "=", "np", ".", "argmax", "(", "env", ".", "Ns", ")", "\n", "ep_rounds_sreg", ".", "append", "(", "env", ".", "curr_means", "[", "env", ".", "idx_best", "]", "-", "env", ".", "curr_means", "[", "idx_mf", "]", ")", "\n", "\n", "ep_rew", "+=", "r", "\n", "ctx", "=", "new_ctx", "\n", "", "ep_rewards", ".", "append", "(", "ep_rew", ")", "\n", "\n", "# BAI", "\n", "idx_mf", "=", "np", ".", "argmax", "(", "env", ".", "Ns", ")", "\n", "ep_sreg", ".", "append", "(", "env", ".", "curr_means", "[", "env", ".", "idx_best", "]", "-", "env", ".", "curr_means", "[", "idx_mf", "]", ")", "\n", "\n", "if", "'estimated_prior'", "in", "alg", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "mean", "=", "alg", ".", "estimated_prior", "[", "0", "]", "\n", "mean_errs", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "mean", "-", "env", ".", "prior", "[", "0", "]", ")", ")", "\n", "cov", "=", "alg", ".", "estimated_prior", "[", "1", "]", "-", "np", ".", "matrix", "(", "mean", ")", ".", "T", "*", "np", ".", "matrix", "(", "mean", ")", "\n", "cov_errs", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "cov", "-", "env", ".", "prior", "[", "1", "]", ")", ")", "\n", "\n", "", "", "return", "(", "ep_rewards", ",", "ep_sreg", ",", "mean_errs", ",", "cov_errs", ",", "ep_rounds_rewards", ",", "ep_rounds_sreg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.one_iter_BML": [[249, 276], ["linear_bandits2.LinearBandit", "linear_bandits2.experiment", "linear_bandits2.LinearMetaTS", "linear_bandits2.LinearTS", "linear_bandits2.LinearTS"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.experiment"], ["", "def", "one_iter_BML", "(", "Args", ",", "mean", ",", "cov", ",", "iter_cnt", "=", "0", ",", "arm_dist", "=", "'Gaus'", ",", "weight_dist", "=", "'MulGaus'", ")", ":", "\n", "\n", "# env = LinearBandit(Args.d, Args.K, Args.H, prior=[mean, cov], noise=1.0, seed=59 + iter_cnt)", "\n", "# if Args.alg == 'mts':", "\n", "#     Alg = LinearMetaTS(Args.d, Args.K, Args.train)", "\n", "# elif Args.alg == 'oracle':", "\n", "#     Alg = LinearTS(Args.d, Args.K, prior=[mean, cov])", "\n", "# else:", "\n", "#     Alg = LinearTS(Args.d, Args.K, prior=None)", "\n", "#", "\n", "# (rew_vec, sreg_vec, mean_, cov_est_) = experiment(Alg, env, Args.T)", "\n", "\n", "    ", "env", "=", "LinearBandit", "(", "Args", "[", "'d'", "]", ",", "Args", "[", "'K'", "]", ",", "Args", "[", "'H'", "]", ",", "prior", "=", "[", "mean", ",", "cov", "]", ",", "noise", "=", "1.0", ",", "\n", "seed", "=", "None", ",", "arm_dist", "=", "arm_dist", ",", "weight_dist", "=", "weight_dist", ")", "\n", "# env = LinearBandit(Args['d'], Args['K'], Args['H'], prior=[mean, cov], noise=1.0,", "\n", "#                    seed=59 + iter_cnt, arm_dist=arm_dist, weight_dist=weight_dist)", "\n", "# env = LinearBandit(Args['d'], Args['K'], Args['H'], prior=[mean, cov], noise=1.0, seed=None, arm_dist=arm_dist)", "\n", "if", "Args", "[", "'alg'", "]", "==", "'mts'", ":", "\n", "        ", "Alg", "=", "LinearMetaTS", "(", "Args", "[", "'d'", "]", ",", "Args", "[", "'K'", "]", ",", "Args", "[", "'train'", "]", ")", "\n", "", "elif", "Args", "[", "'alg'", "]", "==", "'oracle'", ":", "\n", "        ", "Alg", "=", "LinearTS", "(", "Args", "[", "'d'", "]", ",", "Args", "[", "'K'", "]", ",", "prior", "=", "[", "mean", ",", "cov", "]", ")", "\n", "", "else", ":", "\n", "        ", "Alg", "=", "LinearTS", "(", "Args", "[", "'d'", "]", ",", "Args", "[", "'K'", "]", ",", "prior", "=", "None", ")", "\n", "\n", "", "(", "rew_vec", ",", "sreg_vec", ",", "mean_", ",", "cov_est_", ",", "ep_rounds_rewards", ",", "ep_rounds_sreg", ")", "=", "experiment", "(", "Alg", ",", "env", ",", "Args", "[", "'T'", "]", ")", "\n", "\n", "return", "(", "iter_cnt", ",", "rew_vec", ",", "sreg_vec", ",", "mean_", ",", "cov_est_", ",", "Args", ",", "ep_rounds_rewards", ",", "ep_rounds_sreg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_bandits2.collect_result": [[278, 289], ["rewards.append", "simple_regs.append", "mean_est.append", "cov_est.append", "print", "numpy.mean", "int"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["", "def", "collect_result", "(", "res", ")", ":", "\n", "    ", "(", "i", ",", "vec", ",", "svec", ",", "me", ",", "ce", ",", "Args_d", ",", "_", ",", "_", ")", "=", "res", "\n", "global", "rewards", ",", "simple_regs", ",", "mean_est", ",", "cov_est", "\n", "rewards", ".", "append", "(", "vec", ")", "\n", "simple_regs", ".", "append", "(", "svec", ")", "\n", "mean_est", ".", "append", "(", "me", ")", "\n", "cov_est", ".", "append", "(", "ce", ")", "\n", "\n", "print", "(", "\"Iter: %d, test_reward: %0.3f\"", "%", "(", "i", ",", "np", ".", "mean", "(", "vec", "[", "int", "(", "Args_d", "[", "'T'", "]", "/", "2", ")", ":", "]", ")", ")", ",", "flush", "=", "True", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.__init__": [[6, 16], ["numpy.matrix", "numpy.linalg.pinv", "numpy.matrix", "numpy.zeros", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "mean", ",", "cov", ",", "lookahead", "=", "1", ",", "ntrials", "=", "100", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "mean", "=", "np", ".", "matrix", "(", "mean", ")", "\n", "self", ".", "cov", "=", "cov", "\n", "self", ".", "lookahead", "=", "lookahead", "\n", "self", ".", "ntrials", "=", "ntrials", "\n", "\n", "self", ".", "prec", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "cov", ")", "\n", "self", ".", "rew", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "k", ")", ")", ")", "\n", "self", ".", "counts", "=", "[", "0", "for", "i", "in", "range", "(", "self", ".", "k", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.select": [[18, 37], ["numpy.linalg.pinv", "range", "numpy.argmax", "numpy.argmax", "range", "scores.append", "numpy.diag", "mpc.MPCPolicy.get_lookahead_value"], "methods", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.get_lookahead_value"], ["", "def", "select", "(", "self", ",", "greedy", "=", "False", ")", ":", "\n", "        ", "pc", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "prec", "+", "np", ".", "diag", "(", "self", ".", "counts", ")", ")", "\n", "pm", "=", "(", "self", ".", "mean", "*", "self", ".", "prec", "+", "self", ".", "rew", ")", "*", "pc", "\n", "\n", "if", "greedy", ":", "\n", "            ", "action", "=", "np", ".", "argmax", "(", "pm", ")", "\n", "return", "action", "\n", "\n", "#         print(\"---- Selection ----\",flush=True)", "\n", "#         print(pc)", "\n", "#         print(pm)", "\n", "", "scores", "=", "[", "]", "\n", "for", "a", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "v", "=", "0", "\n", "for", "t", "in", "range", "(", "self", ".", "ntrials", ")", ":", "\n", "                ", "v", "+=", "self", ".", "get_lookahead_value", "(", "a", ",", "pm", ",", "pc", ")", "\n", "", "scores", ".", "append", "(", "v", "/", "self", ".", "ntrials", ")", "\n", "#         print(scores)", "\n", "", "return", "np", ".", "argmax", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.get_lookahead_value": [[38, 56], ["numpy.random.multivariate_normal", "numpy.random.normal", "copy.deepcopy", "copy.deepcopy", "numpy.linalg.pinv", "numpy.max", "numpy.array", "numpy.diag"], "methods", ["None"], ["", "def", "get_lookahead_value", "(", "self", ",", "action", ",", "pm", ",", "pc", ")", ":", "\n", "### First compute posterior mean and covariance (these are passed in to amortize)", "\n", "### Sample rewards from posterior and select arm a", "\n", "        ", "sample_mu", "=", "np", ".", "random", ".", "multivariate_normal", "(", "np", ".", "array", "(", "pm", ")", "[", "0", ",", ":", "]", ",", "pc", ")", "\n", "ra", "=", "np", ".", "random", ".", "normal", "(", "sample_mu", "[", "action", "]", ",", "1", ")", "\n", "\n", "### Update posterior mean and take the max", "\n", "### These are the simulated statistics", "\n", "counts", "=", "copy", ".", "deepcopy", "(", "self", ".", "counts", ")", "\n", "counts", "[", "action", "]", "+=", "1", "\n", "rew", "=", "copy", ".", "deepcopy", "(", "self", ".", "rew", ")", "\n", "rew", "[", "0", ",", "action", "]", "+=", "ra", "\n", "\n", "posterior_cov", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "prec", "+", "np", ".", "diag", "(", "counts", ")", ")", "\n", "posterior_mean", "=", "(", "self", ".", "mean", "*", "self", ".", "prec", "+", "rew", ")", "*", "posterior_cov", "\n", "### Two options here", "\n", "### Knowledge gradient", "\n", "return", "np", ".", "max", "(", "posterior_mean", ")", "\n", "#### MPC", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.update": [[60, 63], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "action", ",", "reward", ")", ":", "\n", "        ", "self", ".", "rew", "[", "0", ",", "action", "]", "+=", "reward", "\n", "self", ".", "counts", "[", "action", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mpc.MPCPolicy.reset": [[64, 67], ["numpy.matrix", "numpy.zeros", "range"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "rew", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "k", ")", ")", ")", "\n", "self", ".", "counts", "=", "[", "0", "for", "i", "in", "range", "(", "self", ".", "k", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_plots2.plot_box": [[26, 75], ["print", "numpy.loadtxt", "print", "numpy.loadtxt", "print", "numpy.loadtxt", "print", "matplotlib.boxplot", "zip", "zip", "patch.set_linewidth", "matplotlib.gca", "plt.gca.set_xlim", "plt.gca.set_xticks", "plt.gca.set_xticklabels", "matplotlib.ylabel", "matplotlib.title", "arr.append", "patch.set_facecolor", "patch.set_alpha", "patch.set_color", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "range", "int"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["def", "plot_box", "(", ")", ":", "\n", "    ", "print", "(", "\"Preprocessing Data\"", ")", "\n", "colors", "=", "[", "'tab:blue'", ",", "'tab:orange'", ",", "'tab:green'", "]", "\n", "# T = 200", "\n", "# H=20", "\n", "# d=6", "\n", "# K=6", "\n", "# R=100", "\n", "# results_dir='./results/linear_T=%d_d=%d_H=%d_K=%d/' % (T,d,H,K)", "\n", "\n", "\n", "# train_lengths = [10,20,30,40,50,60,70,80,90,100]", "\n", "\n", "# process oracle", "\n", "oracle_rew", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'oracle_0_{out_type}.out'", ")", "\n", "print", "(", "'Oracle: %0.3f'", "%", "(", "np", ".", "mean", "(", "oracle_rew", ")", ")", ")", "\n", "# process mts-10", "\n", "mts_rew", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'mts_{mts_rew_mid}_{out_type}.out'", ")", "\n", "print", "(", "'MTS: %0.3f'", "%", "(", "np", ".", "mean", "(", "mts_rew", ")", ")", ")", "\n", "# process misspecified", "\n", "misspecified_rew", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'misspecified_0_{out_type}.out'", ")", "\n", "print", "(", "'Misspec: %0.3f'", "%", "(", "np", ".", "mean", "(", "misspecified_rew", ")", ")", ")", "\n", "\n", "vecs", "=", "(", "oracle_rew", ",", "mts_rew", ",", "misspecified_rew", ")", "\n", "arr", "=", "[", "]", "\n", "for", "v", "in", "vecs", ":", "\n", "        ", "arr", ".", "append", "(", "[", "np", ".", "mean", "(", "v", "[", "i", ",", "int", "(", "T", "/", "2", ")", ":", "]", ")", "for", "i", "in", "range", "(", "v", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "#        arr.append([(T*v[i,-1] - T*v[i,int(T/2)]/2)*2/T for i in range(v.shape[0])])", "\n", "", "alg", "=", "[", "'Oracle'", ",", "'MTS'", ",", "'Misspecified'", "]", "\n", "\n", "#     f = plt.figure(figsize=(4,4),dpi=100)", "\n", "bplot", "=", "plt", ".", "boxplot", "(", "arr", ",", "patch_artist", "=", "True", ",", "widths", "=", "0.5", ",", "positions", "=", "[", "1", ",", "1.6", ",", "2.2", "]", ")", "\n", "#     bplot = plt.violinplot(arr,positions=[1,2,3],widths=0.75,showmeans=True)", "\n", "# fill with colors", "\n", "for", "patch", ",", "color", "in", "zip", "(", "bplot", "[", "'boxes'", "]", ",", "colors", ")", ":", "\n", "        ", "patch", ".", "set_facecolor", "(", "color", ")", "\n", "patch", ".", "set_alpha", "(", "0.5", ")", "\n", "\n", "", "for", "patch", ",", "color", "in", "zip", "(", "bplot", "[", "'medians'", "]", ",", "colors", ")", ":", "\n", "        ", "patch", ".", "set_color", "(", "color", ")", "\n", "", "patch", ".", "set_linewidth", "(", "2", ")", "\n", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0.7", ",", "2.5", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "1", ",", "1.6", ",", "2.2", "]", ")", "\n", "#     ax.set_xticklabels(['Oracle', 'MTS', 'Misspecified'],rotation=30)", "\n", "ax", ".", "set_xticklabels", "(", "[", "'OracleTS'", ",", "'MetaTS: full'", ",", "'MisTS'", "]", ")", "\n", "plt", ".", "ylabel", "(", "'Per-episode reward after meta-training'", ")", "\n", "plt", ".", "title", "(", "'Gaussian Linear CB, A=6, d=6, H=20'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_plots2.get_pointwise_best": [[94, 108], ["numpy.zeros", "numpy.zeros", "range", "numpy.argmax", "len", "numpy.array", "numpy.array", "len", "len", "numpy.loadtxt", "numpy.mean", "numpy.std", "numpy.cumsum", "numpy.arange", "range", "range"], "function", ["None"], ["def", "get_pointwise_best", "(", "n", ")", ":", "# finds the best result between iterations", "\n", "    ", "means", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_lengths", ")", ",", "n", ")", ")", "\n", "stds", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_lengths", ")", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_lengths", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "tmp", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'mts_{train_lengths[i]}_{out_type}.out'", ")", "\n", "tmp", "=", "np", ".", "cumsum", "(", "tmp", ",", "axis", "=", "1", ")", "/", "np", ".", "arange", "(", "1", ",", "n", "+", "1", ")", "\n", "# tmp = tmp/np.arange(1,n+1)", "\n", "means", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "tmp", ",", "axis", "=", "0", ")", "\n", "stds", "[", "i", ",", ":", "]", "=", "np", ".", "std", "(", "tmp", ",", "axis", "=", "0", ")", "\n", "", "except", ":", "\n", "            ", "continue", "\n", "", "", "idx", "=", "np", ".", "argmax", "(", "means", ",", "axis", "=", "0", ")", "\n", "return", "(", "np", ".", "array", "(", "[", "means", "[", "idx", "[", "i", "]", ",", "i", "]", "for", "i", "in", "range", "(", "n", ")", "]", ")", ",", "np", ".", "array", "(", "[", "stds", "[", "idx", "[", "i", "]", ",", "i", "]", "for", "i", "in", "range", "(", "n", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mab_plots.plot_box": [[21, 68], ["print", "numpy.loadtxt", "print", "numpy.loadtxt", "print", "numpy.loadtxt", "print", "numpy.loadtxt", "print", "matplotlib.boxplot", "zip", "zip", "patch.set_linewidth", "matplotlib.gca", "plt.gca.set_xlim", "plt.gca.set_xticks", "plt.gca.set_xticklabels", "matplotlib.ylabel", "matplotlib.title", "arr.append", "patch.set_facecolor", "patch.set_alpha", "patch.set_color", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "range", "int"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print"], ["def", "plot_box", "(", ")", ":", "\n", "    ", "print", "(", "\"Preprocessing Data\"", ")", "\n", "colors", "=", "[", "'tab:blue'", ",", "'tab:orange'", ",", "'tab:green'", ",", "'tab:red'", "]", "\n", "# T = 10000", "\n", "# H=10", "\n", "# K=6", "\n", "# R=100", "\n", "# results_dir='./results/standard_block_T=%d_H=%d_K=%d/' % (T,H,K)", "\n", "\n", "# train_lengths = range(200,5001,200) # [200,400,600,800,1000,1200,1400,1600,1800,2000]", "\n", "\n", "# process oracle", "\n", "oracle_rew", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'oracle_0_0_{out_type}.out'", ")", "\n", "print", "(", "'Oracle: %0.3f'", "%", "(", "np", ".", "mean", "(", "oracle_rew", ")", ")", ")", "\n", "# process mts-10", "\n", "mts_10_rew", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'mts_{train_lengths[-1]}_10_{out_type}.out'", ")", "\n", "print", "(", "'MTS-10: %0.3f'", "%", "(", "np", ".", "mean", "(", "mts_10_rew", ")", ")", ")", "\n", "# process misspecified", "\n", "misspecified_rew", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'misspecified_0_0_{out_type}.out'", ")", "\n", "print", "(", "'Misspec: %0.3f'", "%", "(", "np", ".", "mean", "(", "misspecified_rew", ")", ")", ")", "\n", "# process no-cov", "\n", "no_cov_rew", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'mts-no-cov_{train_lengths[-1]}_0_{out_type}.out'", ")", "\n", "print", "(", "'No-cov: %0.3f'", "%", "(", "np", ".", "mean", "(", "no_cov_rew", ")", ")", ")", "\n", "\n", "vecs", "=", "(", "oracle_rew", ",", "mts_10_rew", ",", "misspecified_rew", ",", "no_cov_rew", ")", "\n", "arr", "=", "[", "]", "\n", "for", "v", "in", "vecs", ":", "\n", "        ", "arr", ".", "append", "(", "[", "(", "T", "*", "v", "[", "i", ",", "-", "1", "]", "-", "T", "*", "v", "[", "i", ",", "int", "(", "T", "/", "20", ")", "]", "/", "2", ")", "*", "2", "/", "T", "for", "i", "in", "range", "(", "v", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "", "alg", "=", "[", "'Oracle'", ",", "'Misspecified'", ",", "'No-Cov'", ",", "'TS-2'", ",", "'TS-5'", ",", "'TS-10'", "]", "\n", "\n", "#     f = plt.figure(figsize=(5,4),dpi=100)", "\n", "bplot", "=", "plt", ".", "boxplot", "(", "arr", ",", "patch_artist", "=", "True", ",", "widths", "=", "0.5", ",", "positions", "=", "[", "1", ",", "1.6", ",", "2.2", ",", "2.8", "]", ")", "\n", "# fill with colors", "\n", "for", "patch", ",", "color", "in", "zip", "(", "bplot", "[", "'boxes'", "]", ",", "colors", ")", ":", "\n", "        ", "patch", ".", "set_facecolor", "(", "color", ")", "\n", "patch", ".", "set_alpha", "(", "0.5", ")", "\n", "\n", "", "for", "patch", ",", "color", "in", "zip", "(", "bplot", "[", "'medians'", "]", ",", "colors", ")", ":", "\n", "        ", "patch", ".", "set_color", "(", "color", ")", "\n", "", "patch", ".", "set_linewidth", "(", "2", ")", "\n", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0.7", ",", "3.1", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "1", ",", "1.6", ",", "2.2", ",", "2.8", "]", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "'OracleTS'", ",", "'MetaTS: full'", ",", "'MisTS'", ",", "'MetaTS: no-cov'", "]", ")", "\n", "plt", ".", "ylabel", "(", "'Per-episode reward after meta-training'", ")", "\n", "plt", ".", "title", "(", "f'Gaussian MAB, A={K}, H={H}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.mab_plots.plot_mab_curve": [[69, 134], ["print", "numpy.arange", "numpy.loadtxt", "vecs.append", "vecs.append", "vecs.append", "numpy.loadtxt", "vecs.append", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.xlim", "matplotlib.title", "numpy.zeros", "numpy.zeros", "range", "numpy.argmax", "numpy.zeros", "numpy.zeros", "range", "numpy.argmax", "mab_plots.plot_mab_curve.get_pointwise_best"], "function", ["home.repos.pwc.inspect_result.Azizimj_Meta-SRM.None.CoAdaTS_Public.CoBandit.print", "home.repos.pwc.inspect_result.Azizimj_Meta-SRM.BML_2.linear_plots2.get_pointwise_best"], ["", "def", "plot_mab_curve", "(", ")", ":", "\n", "    ", "print", "(", "\"Preprocessing Data\"", ")", "\n", "colors", "=", "[", "'tab:blue'", ",", "'tab:orange'", ",", "'tab:red'", ",", "'tab:green'", "]", "\n", "symbols", "=", "[", "'o'", ",", "'s'", ",", "'v'", ",", "'D'", "]", "\n", "# T = 10000", "\n", "# H=10", "\n", "# K=6", "\n", "# R=100", "\n", "# results_dir='./results/standard_block_T=%d_H=%d_K=%d/' % (T,H,K)", "\n", "\n", "# train_lengths = range(200,5001,200) # [200,400,600,800,1000,1200,1400,1600,1800,2000]", "\n", "\n", "def", "get_pointwise_best", "(", "n", ",", "num_explore", ")", ":", "\n", "        ", "means", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_lengths", ")", ",", "n", ")", ")", "\n", "stds", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_lengths", ")", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_lengths", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "tmp", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'mts_{train_lengths[i]}_{num_explore}_{out_type}.out'", ")", "\n", "means", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "tmp", ",", "axis", "=", "0", ")", "\n", "stds", "[", "i", ",", ":", "]", "=", "np", ".", "std", "(", "tmp", ",", "axis", "=", "0", ")", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "idx", "=", "np", ".", "argmax", "(", "means", ",", "axis", "=", "0", ")", "\n", "return", "(", "np", ".", "array", "(", "[", "means", "[", "idx", "[", "i", "]", ",", "i", "]", "for", "i", "in", "range", "(", "n", ")", "]", ")", ",", "np", ".", "array", "(", "[", "stds", "[", "idx", "[", "i", "]", ",", "i", "]", "for", "i", "in", "range", "(", "n", ")", "]", ")", ")", "\n", "\n", "", "def", "get_pointwise_best_no_cov", "(", "n", ")", ":", "\n", "        ", "means", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_lengths", ")", ",", "n", ")", ")", "\n", "stds", "=", "np", ".", "zeros", "(", "(", "len", "(", "train_lengths", ")", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_lengths", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "tmp", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'mts-no-cov_{train_lengths[i]}_0_{out_type}.out'", ")", "\n", "means", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "tmp", ",", "axis", "=", "0", ")", "\n", "stds", "[", "i", ",", ":", "]", "=", "np", ".", "std", "(", "tmp", ",", "axis", "=", "0", ")", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "idx", "=", "np", ".", "argmax", "(", "means", ",", "axis", "=", "0", ")", "\n", "return", "(", "np", ".", "array", "(", "[", "means", "[", "idx", "[", "i", "]", ",", "i", "]", "for", "i", "in", "range", "(", "n", ")", "]", ")", ",", "np", ".", "array", "(", "[", "stds", "[", "idx", "[", "i", "]", ",", "i", "]", "for", "i", "in", "range", "(", "n", ")", "]", ")", ")", "\n", "\n", "# x = np.arange(10,T+1,10)", "\n", "", "x", "=", "np", ".", "arange", "(", "1", ",", "T", "+", "1", ")", "\n", "\n", "vecs", "=", "[", "]", "\n", "oracle_rew", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'oracle_0_0_{out_type}.out'", ")", "#[:, ::10]", "\n", "vecs", ".", "append", "(", "(", "np", ".", "mean", "(", "oracle_rew", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "oracle_rew", ",", "axis", "=", "0", ")", ")", ")", "\n", "vecs", ".", "append", "(", "get_pointwise_best", "(", "len", "(", "x", ")", ",", "10", ")", ")", "\n", "vecs", ".", "append", "(", "get_pointwise_best_no_cov", "(", "len", "(", "x", ")", ")", ")", "\n", "misspecified_rew", "=", "np", ".", "loadtxt", "(", "results_dir", "+", "f'misspecified_0_0_{out_type}.out'", ")", "#[:, ::10]", "\n", "vecs", ".", "append", "(", "(", "np", ".", "mean", "(", "misspecified_rew", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "misspecified_rew", ",", "axis", "=", "0", ")", ")", ")", "\n", "# x=x[20:]", "\n", "x", "=", "x", "[", "min", "(", "train_lengths", ")", ":", "]", "[", ":", ":", "step", "]", "\n", "i", "=", "0", "\n", "ls", "=", "[", "]", "\n", "for", "(", "m", ",", "s", ")", "in", "vecs", ":", "\n", "        ", "m", "=", "m", "[", "min", "(", "train_lengths", ")", ":", "]", "[", ":", ":", "step", "]", "\n", "s", "=", "s", "[", "min", "(", "train_lengths", ")", ":", "]", "[", ":", ":", "step", "]", "\n", "ls", ".", "append", "(", "plt", ".", "plot", "(", "x", ",", "m", ",", "color", "=", "colors", "[", "i", "]", ",", "marker", "=", "symbols", "[", "i", "]", ",", "markevery", "=", "100", ")", ")", "\n", "#        plt.plot(x[100::100], m[100::100],color=colors[i], marker=symbols[i])", "\n", "plt", ".", "fill_between", "(", "x", ",", "m", "-", "2", "/", "np", ".", "sqrt", "(", "R", ")", "*", "s", ",", "m", "+", "2", "/", "np", ".", "sqrt", "(", "R", ")", "*", "s", ",", "alpha", "=", "0.4", ",", "color", "=", "colors", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "plt", ".", "legend", "(", "[", "'OracleTS'", ",", "'MetaTS: full'", ",", "'MetaTS: no-cov'", ",", "'MisTS'", "]", ")", "\n", "#         plt.legend(ls,['OracleTS', 'MetaTS: full', 'MetaTS: no-cov', 'MisTS'])", "\n", "", "plt", ".", "ylabel", "(", "'Cumulative average reward'", ")", "\n", "plt", ".", "xlabel", "(", "'Episodes'", ")", "\n", "plt", ".", "xlim", "(", "[", "min", "(", "train_lengths", ")", ",", "T", "]", ")", "\n", "plt", ".", "title", "(", "f'Gaussian MAB, A={K}, H={H}'", ")", "\n", "\n"]]}