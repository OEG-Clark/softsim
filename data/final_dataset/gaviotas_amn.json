{"home.repos.pwc.inspect_result.gaviotas_amn.step.eval_sem_seg.run": [[8, 32], ["chainercv.datasets.VOCSemanticSegmentationDataset", "confusion.sum", "confusion.sum", "numpy.diag", "print", "print", "print", "imageio.imread().astype", "preds.append", "chainercv.evaluations.calc_semantic_segmentation_confusion", "numpy.mean", "numpy.mean", "chainercv.datasets.VOCSemanticSegmentationDataset.get_example_by_keys", "range", "imageio.imread().astype.copy", "numpy.nanmean", "len", "imageio.imread", "os.path.join"], "function", ["None"], ["def", "run", "(", "args", ")", ":", "\n", "    ", "dataset", "=", "VOCSemanticSegmentationDataset", "(", "split", "=", "args", ".", "chainer_eval_set", ",", "data_dir", "=", "args", ".", "voc12_root", ")", "\n", "labels", "=", "[", "dataset", ".", "get_example_by_keys", "(", "i", ",", "(", "1", ",", ")", ")", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "\n", "preds", "=", "[", "]", "\n", "for", "id", "in", "dataset", ".", "ids", ":", "\n", "        ", "cls_labels", "=", "imageio", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "args", ".", "sem_seg_out_dir", ",", "id", "+", "'.png'", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "cls_labels", "[", "cls_labels", "==", "255", "]", "=", "0", "\n", "preds", ".", "append", "(", "cls_labels", ".", "copy", "(", ")", ")", "\n", "\n", "", "confusion", "=", "calc_semantic_segmentation_confusion", "(", "preds", ",", "labels", ")", "[", ":", "21", ",", ":", "21", "]", "\n", "\n", "gtj", "=", "confusion", ".", "sum", "(", "axis", "=", "1", ")", "\n", "resj", "=", "confusion", ".", "sum", "(", "axis", "=", "0", ")", "\n", "gtjresj", "=", "np", ".", "diag", "(", "confusion", ")", "\n", "denominator", "=", "gtj", "+", "resj", "-", "gtjresj", "\n", "fp", "=", "1.", "-", "gtj", "/", "denominator", "\n", "fn", "=", "1.", "-", "resj", "/", "denominator", "\n", "iou", "=", "gtjresj", "/", "denominator", "\n", "\n", "print", "(", "fp", "[", "0", "]", ",", "fn", "[", "0", "]", ")", "\n", "print", "(", "np", ".", "mean", "(", "fp", "[", "1", ":", "]", ")", ",", "np", ".", "mean", "(", "fn", "[", "1", ":", "]", ")", ")", "\n", "\n", "print", "(", "{", "'iou'", ":", "iou", ",", "'miou'", ":", "np", ".", "nanmean", "(", "iou", ")", "}", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.eval_amn_cam.run": [[9, 34], ["chainercv.datasets.VOCSemanticSegmentationDataset", "tqdm.tqdm", "chainercv.evaluations.calc_semantic_segmentation_confusion", "chainercv.evaluations.calc_semantic_segmentation_confusion.sum", "chainercv.evaluations.calc_semantic_segmentation_confusion.sum", "numpy.diag", "print", "numpy.load().item", "numpy.pad", "numpy.pad", "numpy.argmax", "preds.append", "chainercv.datasets.VOCSemanticSegmentationDataset.get_example_by_keys", "range", "np.argmax.copy", "numpy.nanmean", "len", "numpy.load", "os.path.join"], "function", ["None"], ["def", "run", "(", "args", ")", ":", "\n", "    ", "dataset", "=", "VOCSemanticSegmentationDataset", "(", "split", "=", "args", ".", "chainer_eval_set", ",", "data_dir", "=", "args", ".", "voc12_root", ")", "\n", "labels", "=", "[", "dataset", ".", "get_example_by_keys", "(", "i", ",", "(", "1", ",", ")", ")", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "\n", "preds", "=", "[", "]", "\n", "for", "id", "in", "tqdm", "(", "dataset", ".", "ids", ")", ":", "\n", "        ", "cam_dict", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "amn_cam_out_dir", ",", "id", "+", "'.npy'", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "cams", "=", "cam_dict", "[", "'high_res'", "]", "[", "1", ":", ",", "...", "]", "\n", "\n", "cams", "=", "np", ".", "pad", "(", "cams", ",", "(", "(", "1", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "args", ".", "cam_eval_thres", ")", "\n", "keys", "=", "np", ".", "pad", "(", "cam_dict", "[", "'keys'", "]", "+", "1", ",", "(", "1", ",", "0", ")", ",", "mode", "=", "'constant'", ")", "\n", "cls_labels", "=", "np", ".", "argmax", "(", "cams", ",", "axis", "=", "0", ")", "\n", "cls_labels", "=", "keys", "[", "cls_labels", "]", "\n", "preds", ".", "append", "(", "cls_labels", ".", "copy", "(", ")", ")", "\n", "\n", "", "confusion", "=", "calc_semantic_segmentation_confusion", "(", "preds", ",", "labels", ")", "\n", "\n", "gtj", "=", "confusion", ".", "sum", "(", "axis", "=", "1", ")", "\n", "resj", "=", "confusion", ".", "sum", "(", "axis", "=", "0", ")", "\n", "gtjresj", "=", "np", ".", "diag", "(", "confusion", ")", "\n", "denominator", "=", "gtj", "+", "resj", "-", "gtjresj", "\n", "iou", "=", "gtjresj", "/", "denominator", "\n", "\n", "print", "(", "{", "'iou'", ":", "iou", ",", "'miou'", ":", "np", ".", "nanmean", "(", "iou", ")", "}", ")", "", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.amn_cam_to_ir_label._work": [[13, 47], ["torch.utils.data.DataLoader", "enumerate", "tqdm.tqdm", "voc12.dataloader.decode_int_filename", "[].numpy", "numpy.load().item", "numpy.pad", "numpy.pad", "numpy.argmax", "misc.imutils.crf_inference_label", "numpy.pad", "numpy.argmax", "misc.imutils.crf_inference_label", "fg_conf.copy", "imageio.imwrite", "os.path.join", "fg_conf.copy.astype", "numpy.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.decode_int_filename", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.crf_inference_label", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.crf_inference_label"], ["def", "_work", "(", "process_id", ",", "infer_dataset", ",", "args", ")", ":", "\n", "\n", "    ", "databin", "=", "infer_dataset", "[", "process_id", "]", "\n", "infer_data_loader", "=", "DataLoader", "(", "databin", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "False", ")", "\n", "\n", "for", "iter", ",", "pack", "in", "enumerate", "(", "tqdm", "(", "infer_data_loader", ",", "position", "=", "process_id", ",", "desc", "=", "f'[PID{process_id}]'", ")", ")", ":", "\n", "        ", "img_name", "=", "voc12", ".", "dataloader", ".", "decode_int_filename", "(", "pack", "[", "'name'", "]", "[", "0", "]", ")", "\n", "img", "=", "pack", "[", "'img'", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "cam_dict", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "amn_cam_out_dir", ",", "img_name", "+", "'.npy'", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "cams", "=", "cam_dict", "[", "'high_res'", "]", "\n", "\n", "cams", "=", "cams", "[", "1", ":", ",", "...", "]", "\n", "\n", "keys", "=", "np", ".", "pad", "(", "cam_dict", "[", "'keys'", "]", "+", "1", ",", "(", "1", ",", "0", ")", ",", "mode", "=", "'constant'", ")", "\n", "\n", "# 1. find confident fg & bg", "\n", "fg_conf_cam", "=", "np", ".", "pad", "(", "cams", ",", "(", "(", "1", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "args", ".", "conf_fg_thres", ")", "\n", "fg_conf_cam", "=", "np", ".", "argmax", "(", "fg_conf_cam", ",", "axis", "=", "0", ")", "\n", "pred", "=", "imutils", ".", "crf_inference_label", "(", "img", ",", "fg_conf_cam", ",", "n_labels", "=", "keys", ".", "shape", "[", "0", "]", ")", "\n", "fg_conf", "=", "keys", "[", "pred", "]", "\n", "\n", "bg_conf_cam", "=", "np", ".", "pad", "(", "cams", ",", "(", "(", "1", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "args", ".", "conf_bg_thres", ")", "\n", "bg_conf_cam", "=", "np", ".", "argmax", "(", "bg_conf_cam", ",", "axis", "=", "0", ")", "\n", "pred", "=", "imutils", ".", "crf_inference_label", "(", "img", ",", "bg_conf_cam", ",", "n_labels", "=", "keys", ".", "shape", "[", "0", "]", ")", "\n", "bg_conf", "=", "keys", "[", "pred", "]", "\n", "\n", "# 2. combine confident fg & bg", "\n", "conf", "=", "fg_conf", ".", "copy", "(", ")", "\n", "conf", "[", "fg_conf", "==", "0", "]", "=", "255", "\n", "conf", "[", "bg_conf", "+", "fg_conf", "==", "0", "]", "=", "0", "\n", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "amn_ir_label_out_dir", ",", "img_name", "+", "'.png'", ")", ",", "\n", "conf", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.amn_cam_to_ir_label.run": [[48, 53], ["voc12.dataloader.VOC12ImageDataset", "misc.torchutils.split_dataset", "torch.multiprocessing.spawn"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.split_dataset"], ["", "", "def", "run", "(", "args", ")", ":", "\n", "    ", "dataset", "=", "voc12", ".", "dataloader", ".", "VOC12ImageDataset", "(", "args", ".", "train_list", ",", "voc12_root", "=", "args", ".", "voc12_root", ",", "img_normal", "=", "None", ",", "to_torch", "=", "False", ")", "\n", "dataset", "=", "torchutils", ".", "split_dataset", "(", "dataset", ",", "args", ".", "num_workers", ")", "\n", "\n", "multiprocessing", ".", "spawn", "(", "_work", ",", "nprocs", "=", "args", ".", "num_workers", ",", "args", "=", "(", "dataset", ",", "args", ")", ",", "join", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_cocoann.run": [[10, 50], ["voc12.dataloader.VOC12ImageDataset", "torch.utils.data.DataLoader", "json.load", "enumerate", "open", "int", "pycococreatortools.pycococreatortools.create_image_info", "coco_output[].append", "numpy.load().item", "zip", "open", "json.dump", "os.path.join", "pycococreatortools.pycococreatortools.create_annotation_info", "coco_output[].append", "numpy.load", "os.path.join"], "function", ["None"], ["def", "run", "(", "args", ")", ":", "\n", "\n", "    ", "infer_dataset", "=", "voc12", ".", "dataloader", ".", "VOC12ImageDataset", "(", "args", ".", "infer_list", ",", "voc12_root", "=", "args", ".", "voc12_root", ")", "\n", "\n", "infer_data_loader", "=", "DataLoader", "(", "infer_dataset", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_json", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "VOC2012_JSON_FOLDER", ",", "'pascal_val2012.json'", ")", ")", ")", "\n", "# Do not use this file for evaluation!", "\n", "\n", "coco_output", "=", "{", "}", "\n", "coco_output", "[", "\"images\"", "]", "=", "[", "]", "\n", "coco_output", "[", "\"annotations\"", "]", "=", "[", "]", "\n", "coco_output", "[", "'categories'", "]", "=", "val_json", "[", "'categories'", "]", "\n", "coco_output", "[", "'type'", "]", "=", "val_json", "[", "'type'", "]", "\n", "\n", "for", "iter", ",", "pack", "in", "enumerate", "(", "infer_data_loader", ")", ":", "\n", "\n", "        ", "img_name", "=", "pack", "[", "'name'", "]", "[", "0", "]", "\n", "img_id", "=", "int", "(", "img_name", "[", ":", "4", "]", "+", "img_name", "[", "5", ":", "]", ")", "\n", "img_size", "=", "pack", "[", "'img'", "]", ".", "shape", "[", "2", ":", "]", "\n", "\n", "image_info", "=", "pycococreatortools", ".", "create_image_info", "(", "\n", "img_id", ",", "img_name", "+", "\".jpg\"", ",", "(", "img_size", "[", "1", "]", ",", "img_size", "[", "0", "]", ")", ")", "\n", "coco_output", "[", "\"images\"", "]", ".", "append", "(", "image_info", ")", "\n", "ann", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ins_seg_out_dir", ",", "img_name", ")", "+", "'.npy'", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "instance_id", "=", "1", "\n", "\n", "for", "score", ",", "mask", ",", "class_id", "in", "zip", "(", "ann", "[", "'score'", "]", ",", "ann", "[", "'mask'", "]", ",", "ann", "[", "'class'", "]", ")", ":", "\n", "            ", "if", "score", "<", "1e-5", ":", "\n", "                ", "continue", "\n", "", "category_info", "=", "{", "'id'", ":", "class_id", ",", "'is_crowd'", ":", "False", "}", "\n", "\n", "annotation_info", "=", "pycococreatortools", ".", "create_annotation_info", "(", "\n", "instance_id", ",", "img_id", ",", "category_info", ",", "mask", ",", "img_size", "[", ":", ":", "-", "1", "]", ",", "tolerance", "=", "0", ")", "\n", "instance_id", "+=", "1", "\n", "coco_output", "[", "'annotations'", "]", ".", "append", "(", "annotation_info", ")", "\n", "\n", "", "", "with", "open", "(", "'voc2012_train_custom.json'", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "coco_output", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.train_cam.validate": [[14, 36], ["print", "misc.pyutils.AverageMeter", "model.eval", "model.train", "print", "torch.no_grad", "torch.no_grad", "pack[].cuda", "pack[].cuda", "model", "torch.multilabel_soft_margin_loss", "pyutils.AverageMeter.add", "pyutils.AverageMeter.pop", "F.multilabel_soft_margin_loss.item"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.train", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.add", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.pop"], ["def", "validate", "(", "model", ",", "data_loader", ")", ":", "\n", "    ", "print", "(", "'validating ... '", ",", "flush", "=", "True", ",", "end", "=", "''", ")", "\n", "\n", "val_loss_meter", "=", "pyutils", ".", "AverageMeter", "(", "'loss1'", ",", "'loss2'", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "pack", "in", "data_loader", ":", "\n", "            ", "img", "=", "pack", "[", "'img'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label", "=", "pack", "[", "'label'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "x", "=", "model", "(", "img", ")", "\n", "loss1", "=", "F", ".", "multilabel_soft_margin_loss", "(", "x", ",", "label", ")", "\n", "\n", "val_loss_meter", ".", "add", "(", "{", "'loss1'", ":", "loss1", ".", "item", "(", ")", "}", ")", "\n", "\n", "", "", "model", ".", "train", "(", ")", "\n", "\n", "print", "(", "'loss: %.4f'", "%", "(", "val_loss_meter", ".", "pop", "(", "'loss1'", ")", ")", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.train_cam.run": [[38, 101], ["voc12.dataloader.VOC12ClassificationDataset", "torch.utils.data.DataLoader", "voc12.dataloader.VOC12ClassificationDataset", "torch.utils.data.DataLoader", "torch.nn.DataParallel().cuda.trainable_parameters", "misc.torchutils.PolyOptimizer", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.train", "misc.pyutils.AverageMeter", "misc.pyutils.Timer", "range", "torch.save", "torch.save", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "getattr", "print", "enumerate", "torch.nn.DataParallel().cuda.module.state_dict", "importlib.import_module", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "pack[].cuda", "torch.nn.DataParallel().cuda.", "torch.multilabel_soft_margin_loss", "pyutils.AverageMeter.add", "torchutils.PolyOptimizer.zero_grad", "F.multilabel_soft_margin_loss.backward", "torchutils.PolyOptimizer.step", "train_cam.validate", "pyutils.Timer.reset_stage", "pyutils.Timer.update_progress", "print", "F.multilabel_soft_margin_loss.item", "pyutils.AverageMeter.pop", "pyutils.Timer.str_estimated_complete", "pyutils.Timer.get_stage_elapsed"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.trainable_parameters", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.train", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.add", "home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.SGDROptimizer.step", "home.repos.pwc.inspect_result.gaviotas_amn.step.train_cam.validate", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.reset_stage", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.update_progress", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.pop", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.str_estimated_complete", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.get_stage_elapsed"], ["", "def", "run", "(", "args", ")", ":", "\n", "\n", "    ", "model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "args", ".", "cam_network", ")", ",", "'Net'", ")", "(", ")", "\n", "\n", "\n", "train_dataset", "=", "voc12", ".", "dataloader", ".", "VOC12ClassificationDataset", "(", "args", ".", "train_list", ",", "voc12_root", "=", "args", ".", "voc12_root", ",", "\n", "resize_long", "=", "(", "320", ",", "640", ")", ",", "hor_flip", "=", "True", ",", "\n", "crop_size", "=", "512", ",", "crop_method", "=", "\"random\"", ")", "\n", "train_data_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "cam_batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "max_step", "=", "(", "len", "(", "train_dataset", ")", "//", "args", ".", "cam_batch_size", ")", "*", "args", ".", "cam_num_epoches", "\n", "\n", "val_dataset", "=", "voc12", ".", "dataloader", ".", "VOC12ClassificationDataset", "(", "args", ".", "val_list", ",", "voc12_root", "=", "args", ".", "voc12_root", ",", "\n", "crop_size", "=", "512", ")", "\n", "val_data_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "cam_batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "param_groups", "=", "model", ".", "trainable_parameters", "(", ")", "\n", "optimizer", "=", "torchutils", ".", "PolyOptimizer", "(", "[", "\n", "{", "'params'", ":", "param_groups", "[", "0", "]", ",", "'lr'", ":", "args", ".", "cam_learning_rate", ",", "'weight_decay'", ":", "args", ".", "cam_weight_decay", "}", ",", "\n", "{", "'params'", ":", "param_groups", "[", "1", "]", ",", "'lr'", ":", "10", "*", "args", ".", "cam_learning_rate", ",", "'weight_decay'", ":", "args", ".", "cam_weight_decay", "}", ",", "\n", "]", ",", "lr", "=", "args", ".", "cam_learning_rate", ",", "weight_decay", "=", "args", ".", "cam_weight_decay", ",", "max_step", "=", "max_step", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "avg_meter", "=", "pyutils", ".", "AverageMeter", "(", ")", "\n", "\n", "timer", "=", "pyutils", ".", "Timer", "(", ")", "\n", "\n", "for", "ep", "in", "range", "(", "args", ".", "cam_num_epoches", ")", ":", "\n", "\n", "        ", "print", "(", "'Epoch %d/%d'", "%", "(", "ep", "+", "1", ",", "args", ".", "cam_num_epoches", ")", ")", "\n", "\n", "for", "step", ",", "pack", "in", "enumerate", "(", "train_data_loader", ")", ":", "\n", "\n", "            ", "img", "=", "pack", "[", "'img'", "]", "\n", "label", "=", "pack", "[", "'label'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "x", "=", "model", "(", "img", ")", "\n", "loss", "=", "F", ".", "multilabel_soft_margin_loss", "(", "x", ",", "label", ")", "\n", "\n", "avg_meter", ".", "add", "(", "{", "'loss1'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "(", "optimizer", ".", "global_step", "-", "1", ")", "%", "100", "==", "0", ":", "\n", "                ", "timer", ".", "update_progress", "(", "optimizer", ".", "global_step", "/", "max_step", ")", "\n", "\n", "print", "(", "'step:%5d/%5d'", "%", "(", "optimizer", ".", "global_step", "-", "1", ",", "max_step", ")", ",", "\n", "'loss:%.4f'", "%", "(", "avg_meter", ".", "pop", "(", "'loss1'", ")", ")", ",", "\n", "'imps:%.1f'", "%", "(", "(", "step", "+", "1", ")", "*", "args", ".", "cam_batch_size", "/", "timer", ".", "get_stage_elapsed", "(", ")", ")", ",", "\n", "'lr: %.4f'", "%", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ",", "\n", "'etc:%s'", "%", "(", "timer", ".", "str_estimated_complete", "(", ")", ")", ",", "flush", "=", "True", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "validate", "(", "model", ",", "val_data_loader", ")", "\n", "timer", ".", "reset_stage", "(", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "args", ".", "cam_weights_name", "+", "'.pth'", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.cam_to_ir_label._work": [[13, 48], ["torch.utils.data.DataLoader", "enumerate", "voc12.dataloader.decode_int_filename", "[].numpy", "numpy.load().item", "numpy.pad", "numpy.pad", "numpy.argmax", "misc.imutils.crf_inference_label", "numpy.pad", "numpy.argmax", "misc.imutils.crf_inference_label", "fg_conf.copy", "imageio.imwrite", "os.path.join", "fg_conf.copy.astype", "print", "numpy.load", "os.path.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.decode_int_filename", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.crf_inference_label", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.crf_inference_label"], ["def", "_work", "(", "process_id", ",", "infer_dataset", ",", "args", ")", ":", "\n", "\n", "    ", "databin", "=", "infer_dataset", "[", "process_id", "]", "\n", "infer_data_loader", "=", "DataLoader", "(", "databin", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "False", ")", "\n", "\n", "for", "iter", ",", "pack", "in", "enumerate", "(", "infer_data_loader", ")", ":", "\n", "        ", "img_name", "=", "voc12", ".", "dataloader", ".", "decode_int_filename", "(", "pack", "[", "'name'", "]", "[", "0", "]", ")", "\n", "img", "=", "pack", "[", "'img'", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "cam_dict", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "cam_out_dir", ",", "img_name", "+", "'.npy'", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "cams", "=", "cam_dict", "[", "'high_res'", "]", "\n", "keys", "=", "np", ".", "pad", "(", "cam_dict", "[", "'keys'", "]", "+", "1", ",", "(", "1", ",", "0", ")", ",", "mode", "=", "'constant'", ")", "\n", "\n", "# 1. find confident fg & bg", "\n", "fg_conf_cam", "=", "np", ".", "pad", "(", "cams", ",", "(", "(", "1", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "args", ".", "conf_fg_thres", ")", "\n", "fg_conf_cam", "=", "np", ".", "argmax", "(", "fg_conf_cam", ",", "axis", "=", "0", ")", "\n", "pred", "=", "imutils", ".", "crf_inference_label", "(", "img", ",", "fg_conf_cam", ",", "n_labels", "=", "keys", ".", "shape", "[", "0", "]", ")", "\n", "fg_conf", "=", "keys", "[", "pred", "]", "\n", "\n", "bg_conf_cam", "=", "np", ".", "pad", "(", "cams", ",", "(", "(", "1", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "args", ".", "conf_bg_thres", ")", "\n", "bg_conf_cam", "=", "np", ".", "argmax", "(", "bg_conf_cam", ",", "axis", "=", "0", ")", "\n", "pred", "=", "imutils", ".", "crf_inference_label", "(", "img", ",", "bg_conf_cam", ",", "n_labels", "=", "keys", ".", "shape", "[", "0", "]", ")", "\n", "bg_conf", "=", "keys", "[", "pred", "]", "\n", "\n", "# 2. combine confident fg & bg", "\n", "conf", "=", "fg_conf", ".", "copy", "(", ")", "\n", "conf", "[", "fg_conf", "==", "0", "]", "=", "255", "\n", "conf", "[", "bg_conf", "+", "fg_conf", "==", "0", "]", "=", "0", "\n", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ir_label_out_dir", ",", "img_name", "+", "'.png'", ")", ",", "\n", "conf", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "\n", "if", "process_id", "==", "args", ".", "num_workers", "-", "1", "and", "iter", "%", "(", "len", "(", "databin", ")", "//", "20", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"%d \"", "%", "(", "(", "5", "*", "iter", "+", "1", ")", "//", "(", "len", "(", "databin", ")", "//", "20", ")", ")", ",", "end", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.cam_to_ir_label.run": [[49, 56], ["voc12.dataloader.VOC12ImageDataset", "misc.torchutils.split_dataset", "print", "torch.multiprocessing.spawn", "print"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.split_dataset"], ["", "", "", "def", "run", "(", "args", ")", ":", "\n", "    ", "dataset", "=", "voc12", ".", "dataloader", ".", "VOC12ImageDataset", "(", "args", ".", "train_list", ",", "voc12_root", "=", "args", ".", "voc12_root", ",", "img_normal", "=", "None", ",", "to_torch", "=", "False", ")", "\n", "dataset", "=", "torchutils", ".", "split_dataset", "(", "dataset", ",", "args", ".", "num_workers", ")", "\n", "\n", "print", "(", "'[ '", ",", "end", "=", "''", ")", "\n", "multiprocessing", ".", "spawn", "(", "_work", ",", "nprocs", "=", "args", ".", "num_workers", ",", "args", "=", "(", "dataset", ",", "args", ")", ",", "join", "=", "True", ")", "\n", "print", "(", "']'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_amn_cam._work": [[20, 78], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.utils.data.DataLoader", "torch.no_grad", "torch.no_grad", "torch.cuda.device", "model.cuda", "enumerate", "tqdm.tqdm", "PIL.Image.open", "misc.imutils.get_strided_size", "numpy.array", "numpy.array", "numpy.pad", "torch.softmax", "torch.softmax", "strided_cam.detach().cpu().numpy.detach().cpu().numpy", "highres_cam.detach().cpu().numpy.detach().cpu().numpy", "torch.tensor().unsqueeze().expand().numpy", "torch.tensor().unsqueeze().expand().numpy", "torch.tensor().unsqueeze().expand().numpy", "torch.tensor().unsqueeze().expand().numpy", "numpy.save", "os.path.join", "Image.open.resize", "Image.open.resize", "model", "torch.sum", "torch.sum", "len", "torch.interpolate", "len", "torch.nonzero", "torch.nonzero", "os.path.join", "img[].cuda", "label.unsqueeze().expand().cuda", "torch.stack", "torch.stack", "torch.unsqueeze", "torch.unsqueeze", "torch.sum", "torch.sum", "strided_cam.detach().cpu().numpy.detach().cpu", "highres_cam.detach().cpu().numpy.detach().cpu", "numpy.min", "numpy.min", "torch.tensor().unsqueeze().expand", "torch.tensor().unsqueeze().expand", "torch.tensor().unsqueeze().expand", "torch.tensor().unsqueeze().expand", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "label.unsqueeze().expand", "strided_cam.detach().cpu().numpy.detach", "highres_cam.detach().cpu().numpy.detach", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.interpolate", "label.unsqueeze", "img[].size", "torch.unsqueeze", "torch.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.get_strided_size"], ["def", "_work", "(", "process_id", ",", "model", ",", "dataset", ",", "args", ")", ":", "\n", "\n", "    ", "databin", "=", "dataset", "[", "process_id", "]", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "data_loader", "=", "DataLoader", "(", "databin", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", "//", "n_gpus", ",", "pin_memory", "=", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "cuda", ".", "device", "(", "process_id", ")", ":", "\n", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "for", "iter", ",", "pack", "in", "enumerate", "(", "tqdm", "(", "data_loader", ",", "position", "=", "process_id", ",", "desc", "=", "f'[PID{process_id}]'", ")", ")", ":", "\n", "\n", "            ", "img_name", "=", "pack", "[", "'name'", "]", "[", "0", "]", "\n", "label", "=", "pack", "[", "'label'", "]", "[", "0", "]", "\n", "size", "=", "pack", "[", "'size'", "]", "\n", "\n", "label_amn", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ir_label_out_dir", ",", "img_name", "+", "'.png'", ")", ")", "\n", "\n", "strided_size", "=", "imutils", ".", "get_strided_size", "(", "size", ",", "4", ")", "\n", "\n", "label_amn_down", "=", "np", ".", "array", "(", "label_amn", ".", "resize", "(", "(", "strided_size", "[", "1", "]", ",", "strided_size", "[", "0", "]", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", ")", "\n", "label_amn_up", "=", "np", ".", "array", "(", "label_amn", ".", "resize", "(", "(", "size", "[", "1", "]", ",", "size", "[", "0", "]", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", ")", "\n", "\n", "outputs", "=", "[", "model", "(", "img", "[", "0", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "label", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "img", "[", "0", "]", ".", "size", "(", "0", ")", ",", "20", ")", ")", ".", "cuda", "(", ")", ")", "\n", "for", "img", "in", "pack", "[", "'img'", "]", "]", "\n", "\n", "strided_cam", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "\n", "[", "F", ".", "interpolate", "(", "torch", ".", "unsqueeze", "(", "o", ",", "0", ")", ",", "strided_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "for", "o", "\n", "in", "outputs", "]", ")", ",", "0", ")", "/", "len", "(", "outputs", ")", "\n", "\n", "highres_cam", "=", "[", "F", ".", "interpolate", "(", "torch", ".", "unsqueeze", "(", "o", ",", "1", ")", ",", "size", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "for", "o", "in", "outputs", "]", "\n", "highres_cam", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "highres_cam", ",", "0", ")", ",", "0", ")", "[", ":", ",", "0", ",", ":", "size", "[", "0", "]", ",", ":", "size", "[", "1", "]", "]", "/", "len", "(", "outputs", ")", "\n", "\n", "valid_cat", "=", "torch", ".", "nonzero", "(", "label", ")", "[", ":", ",", "0", "]", "\n", "keys", "=", "np", ".", "pad", "(", "valid_cat", "+", "1", ",", "(", "1", ",", "0", ")", ",", "mode", "=", "'constant'", ")", "\n", "\n", "strided_cam", "=", "F", ".", "softmax", "(", "strided_cam", ",", "dim", "=", "0", ")", "\n", "highres_cam", "=", "F", ".", "softmax", "(", "highres_cam", ",", "dim", "=", "0", ")", "\n", "\n", "strided_cam", "=", "strided_cam", "[", "keys", "]", "\n", "highres_cam", "=", "highres_cam", "[", "keys", "]", "\n", "\n", "strided_cam", "=", "strided_cam", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "highres_cam", "=", "highres_cam", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "strided_cam_norm", "=", "(", "strided_cam", "-", "np", ".", "min", "(", "strided_cam", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "/", "(", "np", ".", "max", "(", "strided_cam", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "strided_cam", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "+", "1e-5", ")", "\n", "highres_cam_norm", "=", "(", "highres_cam", "-", "np", ".", "min", "(", "highres_cam", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "/", "(", "np", ".", "max", "(", "highres_cam", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "highres_cam", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "+", "1e-5", ")", "\n", "\n", "strided_mask_bg", "=", "torch", ".", "tensor", "(", "label_amn_down", "==", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "strided_cam", ".", "shape", ")", ".", "numpy", "(", ")", "\n", "highres_mask_bg", "=", "torch", ".", "tensor", "(", "label_amn_up", "==", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "highres_cam", ".", "shape", ")", ".", "numpy", "(", ")", "\n", "\n", "strided_cam", "[", "~", "strided_mask_bg", "]", "=", "strided_cam_norm", "[", "~", "strided_mask_bg", "]", "\n", "highres_cam", "[", "~", "highres_mask_bg", "]", "=", "highres_cam_norm", "[", "~", "highres_mask_bg", "]", "\n", "\n", "# save cams", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "amn_cam_out_dir", ",", "img_name", "+", "'.npy'", ")", ",", "\n", "{", "\"keys\"", ":", "valid_cat", ",", "\"cam\"", ":", "torch", ".", "tensor", "(", "strided_cam", ")", ",", "\"high_res\"", ":", "highres_cam", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_amn_cam.run": [[80, 95], ["model.load_state_dict", "model.eval", "torch.cuda.device_count", "torch.cuda.device_count", "voc12.dataloader.VOC12ClassificationDatasetMSF", "misc.torchutils.split_dataset", "torch.multiprocessing.spawn", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "getattr", "torch.load", "torch.load", "importlib.import_module"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.split_dataset"], ["", "", "", "def", "run", "(", "args", ")", ":", "\n", "    ", "model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "args", ".", "amn_network", ")", ",", "'CAM'", ")", "(", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "amn_weights_name", "+", "'.pth'", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "dataset", "=", "voc12", ".", "dataloader", ".", "VOC12ClassificationDatasetMSF", "(", "args", ".", "train_list", ",", "\n", "voc12_root", "=", "args", ".", "voc12_root", ",", "scales", "=", "args", ".", "cam_scales", ")", "\n", "dataset", "=", "torchutils", ".", "split_dataset", "(", "dataset", ",", "n_gpus", ")", "\n", "\n", "multiprocessing", ".", "spawn", "(", "_work", ",", "nprocs", "=", "n_gpus", ",", "args", "=", "(", "model", ",", "dataset", ",", "args", ")", ",", "join", "=", "True", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_ins_seg_labels.find_centroids_with_refinement": [[18, 57], ["numpy.repeat().astype", "numpy.repeat().astype", "range", "numpy.round().astype", "numpy.round().astype", "numpy.stack", "numpy.ceil().astype", "numpy.floor().astype", "numpy.ceil().astype", "numpy.floor().astype", "numpy.clip", "numpy.clip", "numpy.repeat", "numpy.repeat", "numpy.round", "numpy.round", "numpy.expand_dims", "numpy.expand_dims", "numpy.ceil", "numpy.floor", "numpy.ceil", "numpy.floor", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "find_centroids_with_refinement", "(", "displacement", ",", "iterations", "=", "300", ")", ":", "\n", "# iteration: the number of refinement steps (u), set to any integer >= 100.", "\n", "\n", "    ", "height", ",", "width", "=", "displacement", ".", "shape", "[", "1", ":", "3", "]", "\n", "\n", "# 1. initialize centroids as their coordinates", "\n", "centroid_y", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "height", ")", ",", "1", ")", ",", "width", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "centroid_x", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "width", ")", ",", "0", ")", ",", "height", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "\n", "# 2. find numbers after the decimals", "\n", "        ", "uy", "=", "np", ".", "ceil", "(", "centroid_y", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "dy", "=", "np", ".", "floor", "(", "centroid_y", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "y_c", "=", "centroid_y", "-", "dy", "\n", "\n", "ux", "=", "np", ".", "ceil", "(", "centroid_x", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "dx", "=", "np", ".", "floor", "(", "centroid_x", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "x_c", "=", "centroid_x", "-", "dx", "\n", "\n", "# 3. move centroids", "\n", "centroid_y", "+=", "displacement", "[", "0", "]", "[", "uy", ",", "ux", "]", "*", "y_c", "*", "x_c", "+", "displacement", "[", "0", "]", "[", "dy", ",", "ux", "]", "*", "(", "1", "-", "y_c", ")", "*", "x_c", "+", "displacement", "[", "0", "]", "[", "uy", ",", "dx", "]", "*", "y_c", "*", "(", "1", "-", "x_c", ")", "+", "displacement", "[", "0", "]", "[", "dy", ",", "dx", "]", "*", "(", "1", "-", "y_c", ")", "*", "(", "1", "-", "x_c", ")", "\n", "\n", "centroid_x", "+=", "displacement", "[", "1", "]", "[", "uy", ",", "ux", "]", "*", "y_c", "*", "x_c", "+", "displacement", "[", "1", "]", "[", "dy", ",", "ux", "]", "*", "(", "1", "-", "y_c", ")", "*", "x_c", "+", "displacement", "[", "1", "]", "[", "uy", ",", "dx", "]", "*", "y_c", "*", "(", "1", "-", "x_c", ")", "+", "displacement", "[", "1", "]", "[", "dy", ",", "dx", "]", "*", "(", "1", "-", "y_c", ")", "*", "(", "1", "-", "x_c", ")", "\n", "\n", "# 4. bound centroids", "\n", "centroid_y", "=", "np", ".", "clip", "(", "centroid_y", ",", "0", ",", "height", "-", "1", ")", "\n", "centroid_x", "=", "np", ".", "clip", "(", "centroid_x", ",", "0", ",", "width", "-", "1", ")", "\n", "\n", "", "centroid_y", "=", "np", ".", "round", "(", "centroid_y", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "centroid_x", "=", "np", ".", "round", "(", "centroid_x", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "return", "np", ".", "stack", "(", "[", "centroid_y", ",", "centroid_x", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_ins_seg_labels.cluster_centroids": [[58, 76], ["numpy.sqrt", "skimage.measure.label", "skimage.measure.label.reshape", "misc.imutils.compress_range", "misc.pyutils.to_one_hot", "clusters_1d.reshape"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.compress_range", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.to_one_hot"], ["", "def", "cluster_centroids", "(", "centroids", ",", "displacement", ",", "thres", "=", "2.5", ")", ":", "\n", "# thres: threshold for grouping centroid (see supp)", "\n", "\n", "    ", "dp_strength", "=", "np", ".", "sqrt", "(", "displacement", "[", "1", "]", "**", "2", "+", "displacement", "[", "0", "]", "**", "2", ")", "\n", "height", ",", "width", "=", "dp_strength", ".", "shape", "\n", "\n", "weak_dp_region", "=", "dp_strength", "<", "thres", "\n", "\n", "dp_label", "=", "skimage", ".", "measure", ".", "label", "(", "weak_dp_region", ",", "connectivity", "=", "1", ",", "background", "=", "0", ")", "\n", "dp_label_1d", "=", "dp_label", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "centroids_1d", "=", "centroids", "[", "0", "]", "*", "width", "+", "centroids", "[", "1", "]", "\n", "\n", "clusters_1d", "=", "dp_label_1d", "[", "centroids_1d", "]", "\n", "\n", "cluster_map", "=", "imutils", ".", "compress_range", "(", "clusters_1d", ".", "reshape", "(", "height", ",", "width", ")", "+", "1", ")", "\n", "\n", "return", "pyutils", ".", "to_one_hot", "(", "cluster_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_ins_seg_labels.separte_score_by_mask": [[77, 81], ["torch.from_numpy", "torch.from_numpy", "numpy.expand_dims().astype", "torch.unsqueeze", "torch.unsqueeze", "torch.from_numpy.cuda", "numpy.expand_dims"], "function", ["None"], ["", "def", "separte_score_by_mask", "(", "scores", ",", "masks", ")", ":", "\n", "    ", "instacne_map_expanded", "=", "torch", ".", "from_numpy", "(", "np", ".", "expand_dims", "(", "masks", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "instance_score", "=", "torch", ".", "unsqueeze", "(", "scores", ",", "1", ")", "*", "instacne_map_expanded", ".", "cuda", "(", ")", "\n", "return", "instance_score", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_ins_seg_labels.detect_instance": [[82, 106], ["zip", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.sum", "misc.pyutils.to_one_hot", "pred_label.append", "pred_mask.append", "skimage.measure.label", "numpy.sum", "pred_score.append", "pred_score.append", "numpy.max"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.to_one_hot"], ["", "def", "detect_instance", "(", "score_map", ",", "mask", ",", "class_id", ",", "max_fragment_size", "=", "0", ")", ":", "\n", "# converting pixel-wise instance ids into detection form", "\n", "\n", "    ", "pred_score", "=", "[", "]", "\n", "pred_label", "=", "[", "]", "\n", "pred_mask", "=", "[", "]", "\n", "\n", "for", "ag_score", ",", "ag_mask", ",", "ag_class", "in", "zip", "(", "score_map", ",", "mask", ",", "class_id", ")", ":", "\n", "        ", "if", "np", ".", "sum", "(", "ag_mask", ")", "<", "1", ":", "\n", "            ", "continue", "\n", "", "segments", "=", "pyutils", ".", "to_one_hot", "(", "skimage", ".", "measure", ".", "label", "(", "ag_mask", ",", "connectivity", "=", "1", ",", "background", "=", "0", ")", ")", "[", "1", ":", "]", "\n", "# connected components analysis", "\n", "\n", "for", "seg_mask", "in", "segments", ":", "\n", "            ", "if", "np", ".", "sum", "(", "seg_mask", ")", "<", "max_fragment_size", ":", "\n", "                ", "pred_score", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "pred_score", ".", "append", "(", "np", ".", "max", "(", "ag_score", "*", "seg_mask", ")", ")", "\n", "", "pred_label", ".", "append", "(", "ag_class", ")", "\n", "pred_mask", ".", "append", "(", "seg_mask", ")", "\n", "\n", "", "", "return", "{", "'score'", ":", "np", ".", "stack", "(", "pred_score", ",", "0", ")", ",", "\n", "'mask'", ":", "np", ".", "stack", "(", "pred_mask", ",", "0", ")", ",", "\n", "'class'", ":", "np", ".", "stack", "(", "pred_label", ",", "0", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_ins_seg_labels._work": [[108, 156], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.utils.data.DataLoader", "torch.no_grad", "torch.no_grad", "torch.cuda.device", "model.cuda", "enumerate", "numpy.asarray", "model", "dp.cpu().numpy.cpu().numpy", "numpy.load().item", "cam_dict[].cuda", "make_ins_seg_labels.find_centroids_with_refinement", "make_ins_seg_labels.cluster_centroids", "make_ins_seg_labels.separte_score_by_mask", "misc.indexing.propagate_to_edge", "torch.pad", "len", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "numpy.repeat", "make_ins_seg_labels.detect_instance", "numpy.save", "[].cuda", "torch.interpolate", "torch.max", "torch.max", "misc.pyutils.to_one_hot", "rw_up.cpu().numpy", "os.path.join", "print", "dp.cpu().numpy.cpu", "numpy.load", "torch.argmax().cpu", "torch.argmax().cpu", "rw_up.cpu", "torch.argmax", "torch.argmax", "len", "len"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.step.make_ins_seg_labels.find_centroids_with_refinement", "home.repos.pwc.inspect_result.gaviotas_amn.step.make_ins_seg_labels.cluster_centroids", "home.repos.pwc.inspect_result.gaviotas_amn.step.make_ins_seg_labels.separte_score_by_mask", "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.propagate_to_edge", "home.repos.pwc.inspect_result.gaviotas_amn.step.make_ins_seg_labels.detect_instance", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.to_one_hot"], ["", "def", "_work", "(", "process_id", ",", "model", ",", "dataset", ",", "args", ")", ":", "\n", "\n", "    ", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "databin", "=", "dataset", "[", "process_id", "]", "\n", "data_loader", "=", "DataLoader", "(", "databin", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", "//", "n_gpus", ",", "pin_memory", "=", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "cuda", ".", "device", "(", "process_id", ")", ":", "\n", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "for", "iter", ",", "pack", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "img_name", "=", "pack", "[", "'name'", "]", "[", "0", "]", "\n", "size", "=", "np", ".", "asarray", "(", "pack", "[", "'size'", "]", ")", "\n", "\n", "edge", ",", "dp", "=", "model", "(", "pack", "[", "'img'", "]", "[", "0", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "\n", "dp", "=", "dp", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "cam_dict", "=", "np", ".", "load", "(", "args", ".", "cam_out_dir", "+", "'/'", "+", "img_name", "+", "'.npy'", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "cams", "=", "cam_dict", "[", "'cam'", "]", ".", "cuda", "(", ")", "\n", "keys", "=", "cam_dict", "[", "'keys'", "]", "\n", "\n", "centroids", "=", "find_centroids_with_refinement", "(", "dp", ")", "\n", "instance_map", "=", "cluster_centroids", "(", "centroids", ",", "dp", ")", "\n", "instance_cam", "=", "separte_score_by_mask", "(", "cams", ",", "instance_map", ")", "\n", "\n", "rw", "=", "indexing", ".", "propagate_to_edge", "(", "instance_cam", ",", "edge", ",", "beta", "=", "args", ".", "beta", ",", "exp_times", "=", "args", ".", "exp_times", ",", "radius", "=", "5", ")", "\n", "\n", "rw_up", "=", "F", ".", "interpolate", "(", "rw", ",", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", ":", ",", "0", ",", ":", "size", "[", "0", "]", ",", ":", "size", "[", "1", "]", "]", "\n", "rw_up", "=", "rw_up", "/", "torch", ".", "max", "(", "rw_up", ")", "\n", "\n", "rw_up_bg", "=", "F", ".", "pad", "(", "rw_up", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "value", "=", "args", ".", "ins_seg_bg_thres", ")", "\n", "\n", "num_classes", "=", "len", "(", "keys", ")", "\n", "num_instances", "=", "instance_map", ".", "shape", "[", "0", "]", "\n", "\n", "instance_shape", "=", "torch", ".", "argmax", "(", "rw_up_bg", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "instance_shape", "=", "pyutils", ".", "to_one_hot", "(", "instance_shape", ",", "maximum_val", "=", "num_instances", "*", "num_classes", "+", "1", ")", "[", "1", ":", "]", "\n", "instance_class_id", "=", "np", ".", "repeat", "(", "keys", ",", "num_instances", ")", "\n", "\n", "detected", "=", "detect_instance", "(", "rw_up", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "instance_shape", ",", "instance_class_id", ",", "\n", "max_fragment_size", "=", "size", "[", "0", "]", "*", "size", "[", "1", "]", "*", "0.01", ")", "\n", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ins_seg_out_dir", ",", "img_name", "+", "'.npy'", ")", ",", "detected", ")", "\n", "\n", "if", "process_id", "==", "n_gpus", "-", "1", "and", "iter", "%", "(", "len", "(", "databin", ")", "//", "20", ")", "==", "0", ":", "\n", "                ", "print", "(", "\"%d \"", "%", "(", "(", "5", "*", "iter", "+", "1", ")", "//", "(", "len", "(", "databin", ")", "//", "20", ")", ")", ",", "end", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_ins_seg_labels.run": [[158, 173], ["model.load_state_dict", "model.eval", "torch.cuda.device_count", "torch.cuda.device_count", "voc12.dataloader.VOC12ClassificationDatasetMSF", "misc.torchutils.split_dataset", "print", "torch.multiprocessing.spawn", "print", "getattr", "torch.load", "torch.load", "importlib.import_module"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.split_dataset"], ["", "", "", "", "def", "run", "(", "args", ")", ":", "\n", "    ", "model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "args", ".", "irn_network", ")", ",", "'EdgeDisplacement'", ")", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "irn_weights_name", ")", ",", "strict", "=", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "dataset", "=", "voc12", ".", "dataloader", ".", "VOC12ClassificationDatasetMSF", "(", "args", ".", "infer_list", ",", "\n", "voc12_root", "=", "args", ".", "voc12_root", ",", "\n", "scales", "=", "(", "1.0", ",", ")", ")", "\n", "dataset", "=", "torchutils", ".", "split_dataset", "(", "dataset", ",", "n_gpus", ")", "\n", "\n", "print", "(", "\"[ \"", ",", "end", "=", "''", ")", "\n", "multiprocessing", ".", "spawn", "(", "_work", ",", "nprocs", "=", "n_gpus", ",", "args", "=", "(", "model", ",", "dataset", ",", "args", ")", ",", "join", "=", "True", ")", "\n", "print", "(", "\"]\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.eval_ins_seg.run": [[8, 24], ["chainercv.datasets.VOCInstanceSegmentationDataset", "print", "numpy.load().item", "pred_class.append", "pred_mask.append", "pred_score.append", "chainercv.evaluations.eval_instance_segmentation_voc", "chainercv.datasets.VOCInstanceSegmentationDataset.get_example_by_keys", "range", "chainercv.datasets.VOCInstanceSegmentationDataset.get_example_by_keys", "range", "len", "len", "numpy.load", "os.path.join"], "function", ["None"], ["def", "run", "(", "args", ")", ":", "\n", "    ", "dataset", "=", "VOCInstanceSegmentationDataset", "(", "split", "=", "args", ".", "chainer_eval_set", ",", "data_dir", "=", "args", ".", "voc12_root", ")", "\n", "gt_masks", "=", "[", "dataset", ".", "get_example_by_keys", "(", "i", ",", "(", "1", ",", ")", ")", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "gt_labels", "=", "[", "dataset", ".", "get_example_by_keys", "(", "i", ",", "(", "2", ",", ")", ")", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "\n", "pred_class", "=", "[", "]", "\n", "pred_mask", "=", "[", "]", "\n", "pred_score", "=", "[", "]", "\n", "for", "id", "in", "dataset", ".", "ids", ":", "\n", "        ", "ins_out", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ins_seg_out_dir", ",", "id", "+", "'.npy'", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "pred_class", ".", "append", "(", "ins_out", "[", "'class'", "]", ")", "\n", "pred_mask", ".", "append", "(", "ins_out", "[", "'mask'", "]", ")", "\n", "pred_score", ".", "append", "(", "ins_out", "[", "'score'", "]", ")", "\n", "\n", "", "print", "(", "'0.5iou:'", ",", "chainercv", ".", "evaluations", ".", "eval_instance_segmentation_voc", "(", "pred_mask", ",", "pred_class", ",", "pred_score", ",", "\n", "gt_masks", ",", "gt_labels", ",", "iou_thresh", "=", "0.5", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_sem_seg_labels._work": [[18, 54], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.utils.data.DataLoader", "torch.no_grad", "torch.no_grad", "torch.cuda.device", "model.cuda", "enumerate", "tqdm.tqdm", "voc12.dataloader.decode_int_filename", "numpy.asarray", "model", "numpy.load().item", "numpy.power", "numpy.pad", "cams[].cuda", "misc.indexing.propagate_to_edge", "torch.pad", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "imageio.imsave", "[].cuda", "torch.interpolate", "torch.max", "torch.max", "os.path.join", "torch.argmax().cpu().numpy.astype", "numpy.load", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.decode_int_filename", "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.propagate_to_edge"], ["def", "_work", "(", "process_id", ",", "model", ",", "dataset", ",", "args", ")", ":", "\n", "\n", "    ", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "databin", "=", "dataset", "[", "process_id", "]", "\n", "data_loader", "=", "DataLoader", "(", "databin", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", "//", "n_gpus", ",", "pin_memory", "=", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "cuda", ".", "device", "(", "process_id", ")", ":", "\n", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "for", "iter", ",", "pack", "in", "enumerate", "(", "tqdm", "(", "data_loader", ",", "position", "=", "process_id", ",", "desc", "=", "f'[PID{process_id}]'", ")", ")", ":", "\n", "            ", "img_name", "=", "voc12", ".", "dataloader", ".", "decode_int_filename", "(", "pack", "[", "'name'", "]", "[", "0", "]", ")", "\n", "orig_img_size", "=", "np", ".", "asarray", "(", "pack", "[", "'size'", "]", ")", "\n", "\n", "edge", ",", "dp", "=", "model", "(", "pack", "[", "'img'", "]", "[", "0", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "\n", "cam_dict", "=", "np", ".", "load", "(", "args", ".", "amn_cam_out_dir", "+", "'/'", "+", "img_name", "+", "'.npy'", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "cams", "=", "np", ".", "power", "(", "cam_dict", "[", "'cam'", "]", ",", "1.3", ")", "\n", "\n", "keys", "=", "np", ".", "pad", "(", "cam_dict", "[", "'keys'", "]", "+", "1", ",", "(", "1", ",", "0", ")", ",", "mode", "=", "'constant'", ")", "\n", "\n", "cam_downsized_values", "=", "cams", "[", "1", ":", ",", "...", "]", ".", "cuda", "(", ")", "\n", "\n", "rw", "=", "indexing", ".", "propagate_to_edge", "(", "cam_downsized_values", ",", "edge", ",", "beta", "=", "args", ".", "beta", ",", "exp_times", "=", "args", ".", "exp_times", ",", "radius", "=", "5", ")", "\n", "\n", "rw_up", "=", "F", ".", "interpolate", "(", "rw", ",", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "...", ",", "0", ",", ":", "orig_img_size", "[", "0", "]", ",", ":", "orig_img_size", "[", "1", "]", "]", "\n", "rw_up", "=", "rw_up", "/", "torch", ".", "max", "(", "rw_up", ")", "\n", "\n", "rw_up_bg", "=", "F", ".", "pad", "(", "rw_up", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "value", "=", "args", ".", "sem_seg_bg_thres", ")", "\n", "rw_pred", "=", "torch", ".", "argmax", "(", "rw_up_bg", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "rw_pred", "=", "keys", "[", "rw_pred", "]", "\n", "\n", "imageio", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "args", ".", "sem_seg_out_dir", ",", "img_name", "+", "'.png'", ")", ",", "rw_pred", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_sem_seg_labels.run": [[56, 71], ["model.load_state_dict", "model.eval", "torch.cuda.device_count", "torch.cuda.device_count", "voc12.dataloader.VOC12ClassificationDatasetMSF", "misc.torchutils.split_dataset", "torch.multiprocessing.spawn", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "getattr", "torch.load", "torch.load", "importlib.import_module"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.split_dataset"], ["", "", "", "def", "run", "(", "args", ")", ":", "\n", "    ", "model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "args", ".", "irn_network", ")", ",", "'EdgeDisplacement'", ")", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "irn_weights_name", ")", ",", "strict", "=", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "dataset", "=", "voc12", ".", "dataloader", ".", "VOC12ClassificationDatasetMSF", "(", "args", ".", "infer_list", ",", "\n", "voc12_root", "=", "args", ".", "voc12_root", ",", "\n", "scales", "=", "(", "1.0", ",", ")", ")", "\n", "dataset", "=", "torchutils", ".", "split_dataset", "(", "dataset", ",", "n_gpus", ")", "\n", "\n", "multiprocessing", ".", "spawn", "(", "_work", ",", "nprocs", "=", "n_gpus", ",", "args", "=", "(", "model", ",", "dataset", ",", "args", ")", ",", "join", "=", "True", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.train_amn.balanced_cross_entropy": [[21, 46], ["torch.log_softmax", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.sum", "torch.sum", "torch.sum", "torch.zeros_like.sum", "torch.zeros_like.sum", "one_hot_labels.size", "one_hot_labels.size"], "function", ["None"], ["def", "balanced_cross_entropy", "(", "logits", ",", "labels", ",", "one_hot_labels", ")", ":", "\n", "    ", "\"\"\"\n    :param logits: shape: (N, C)\n    :param labels: shape: (N, C)\n    :param reduction: options: \"none\", \"mean\", \"sum\"\n    :return: loss or losses\n    \"\"\"", "\n", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "logits", ".", "shape", "\n", "\n", "assert", "one_hot_labels", ".", "size", "(", "0", ")", "==", "N", "and", "one_hot_labels", ".", "size", "(", "1", ")", "==", "C", ",", "f'label tensor shape is {one_hot_labels.shape}, while logits tensor shape is {logits.shape}'", "\n", "\n", "log_logits", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "loss_structure", "=", "-", "torch", ".", "sum", "(", "log_logits", "*", "one_hot_labels", ",", "dim", "=", "1", ")", "# (N)", "\n", "\n", "ignore_mask_bg", "=", "torch", ".", "zeros_like", "(", "labels", ")", "\n", "ignore_mask_fg", "=", "torch", ".", "zeros_like", "(", "labels", ")", "\n", "\n", "ignore_mask_bg", "[", "labels", "==", "0", "]", "=", "1", "\n", "ignore_mask_fg", "[", "(", "labels", "!=", "0", ")", "&", "(", "labels", "!=", "255", ")", "]", "=", "1", "\n", "\n", "loss_bg", "=", "(", "loss_structure", "*", "ignore_mask_bg", ")", ".", "sum", "(", ")", "/", "ignore_mask_bg", ".", "sum", "(", ")", "\n", "loss_fg", "=", "(", "loss_structure", "*", "ignore_mask_fg", ")", ".", "sum", "(", ")", "/", "ignore_mask_fg", ".", "sum", "(", ")", "\n", "\n", "return", "(", "loss_bg", "+", "loss_fg", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.train_amn.resize_labels": [[48, 62], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "Image.fromarray().resize.float().numpy", "PIL.Image.fromarray().resize", "torch.LongTensor.append", "numpy.asarray", "Image.fromarray().resize.float", "PIL.Image.fromarray"], "function", ["None"], ["", "def", "resize_labels", "(", "labels", ",", "size", ")", ":", "\n", "    ", "\"\"\"\n    Downsample labels for 0.5x and 0.75x logits by nearest interpolation.\n    Other nearest methods result in misaligned labels.\n    -> F.interpolate(labels, shape, mode='nearest')\n    -> cv2.resize(labels, shape, interpolation=cv2.INTER_NEAREST)\n    \"\"\"", "\n", "new_labels", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "label", "=", "label", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "label", "=", "Image", ".", "fromarray", "(", "label", ")", ".", "resize", "(", "size", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "new_labels", ".", "append", "(", "np", ".", "asarray", "(", "label", ")", ")", "\n", "", "new_labels", "=", "torch", ".", "LongTensor", "(", "new_labels", ")", "\n", "return", "new_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.train_amn.run": [[64, 210], ["voc12.dataloader.VOC12SegmentationDataset", "torch.utils.data.DataLoader", "voc12.dataloader.VOC12SegmentationDataset", "torch.utils.data.DataLoader", "torch.nn.DataParallel().cuda.trainable_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.train", "misc.pyutils.AverageMeter", "range", "torch.save", "torch.save", "torch.save", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "getattr", "iter", "tqdm.tqdm", "enumerate", "torch.nn.DataParallel().cuda.module.state_dict", "importlib.import_module", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "range", "torch.optim.Adam.zero_grad", "pack[].cuda", "pack[].long().cuda", "pack[].cuda", "torch.nn.DataParallel().cuda.", "resize_labels().cuda", "resize_labels().cuda.clone", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda.scatter_", "train_amn.balanced_cross_entropy", "loss.backward", "torch.optim.Adam.step", "pyutils.AverageMeter.add", "tqdm.tqdm.set_description", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.DataParallel().cuda.eval", "chainercv.datasets.VOCSemanticSegmentationDataset", "enumerate", "chainercv.evaluations.calc_semantic_segmentation_confusion", "chainercv.evaluations.calc_semantic_segmentation_confusion.sum", "chainercv.evaluations.calc_semantic_segmentation_confusion.sum", "numpy.diag", "print", "torch.nn.DataParallel().cuda.train", "len", "next", "tqdm.tqdm", "img.cuda.cuda", "torch.nn.DataParallel().cuda.", "misc.imutils.get_strided_up_size", "numpy.pad", "torch.interpolate", "[].cpu().numpy", "numpy.argmax", "preds.append", "labels.append", "len", "iter", "next", "pack[].long", "train_amn.resize_labels", "torch.full", "torch.full", "torch.full", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "balanced_cross_entropy.item", "pack[].cuda", "torch.nonzero", "torch.nonzero", "torch.nonzero", "np.argmax.copy", "chainercv.datasets.VOCSemanticSegmentationDataset.get_example_by_keys", "gt_label.copy", "resize_labels().cuda.cpu", "pyutils.AverageMeter.pop", "[].cpu", "numpy.nanmean", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.trainable_parameters", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.train", "home.repos.pwc.inspect_result.gaviotas_amn.step.train_amn.balanced_cross_entropy", "home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.SGDROptimizer.step", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.add", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.train", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.get_strided_up_size", "home.repos.pwc.inspect_result.gaviotas_amn.step.train_amn.resize_labels", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.pop"], ["", "def", "run", "(", "args", ")", ":", "\n", "\n", "    ", "model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "args", ".", "amn_network", ")", ",", "'Net'", ")", "(", ")", "\n", "\n", "train_dataset", "=", "voc12", ".", "dataloader", ".", "VOC12SegmentationDataset", "(", "args", ".", "train_list", ",", "\n", "label_dir", "=", "args", ".", "ir_label_out_dir", ",", "\n", "voc12_root", "=", "args", ".", "voc12_root", ",", "\n", "hor_flip", "=", "True", ",", "\n", "crop_size", "=", "args", ".", "amn_crop_size", ",", "\n", "crop_method", "=", "\"random\"", ",", "\n", "rescale", "=", "(", "0.5", ",", "1.5", ")", "\n", ")", "\n", "\n", "train_data_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "amn_batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "val_dataset", "=", "voc12", ".", "dataloader", ".", "VOC12SegmentationDataset", "(", "args", ".", "infer_list", ",", "\n", "label_dir", "=", "args", ".", "ir_label_out_dir", ",", "\n", "voc12_root", "=", "args", ".", "voc12_root", ",", "\n", "crop_size", "=", "None", ",", "\n", "crop_method", "=", "\"none\"", ",", "\n", ")", "\n", "\n", "val_data_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "param_groups", "=", "model", ".", "trainable_parameters", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "[", "\n", "{", "\n", "'params'", ":", "param_groups", "[", "0", "]", ",", "\n", "'lr'", ":", "5e-06", ",", "\n", "'weight_decay'", ":", "1.0e-4", ",", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "param_groups", "[", "1", "]", ",", "\n", "'lr'", ":", "1e-04", ",", "\n", "'weight_decay'", ":", "1.0e-4", ",", "\n", "}", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "total_epochs", "=", "args", ".", "amn_num_epoches", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "avg_meter", "=", "pyutils", ".", "AverageMeter", "(", ")", "\n", "\n", "for", "ep", "in", "range", "(", "total_epochs", ")", ":", "\n", "        ", "loader_iter", "=", "iter", "(", "train_data_loader", ")", "\n", "\n", "pbar", "=", "tqdm", "(", "\n", "range", "(", "1", ",", "len", "(", "train_data_loader", ")", "+", "1", ")", ",", "\n", "total", "=", "len", "(", "train_data_loader", ")", ",", "\n", "dynamic_ncols", "=", "True", ",", "\n", ")", "\n", "\n", "for", "iteration", ",", "_", "in", "enumerate", "(", "pbar", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "                ", "pack", "=", "next", "(", "loader_iter", ")", "\n", "", "except", ":", "\n", "                ", "loader_iter", "=", "iter", "(", "train_data_loader", ")", "\n", "pack", "=", "next", "(", "loader_iter", ")", "\n", "\n", "", "img", "=", "pack", "[", "'img'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_amn", "=", "pack", "[", "'label'", "]", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_cls", "=", "pack", "[", "'label_cls'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logit", "=", "model", "(", "img", ",", "label_cls", ")", "\n", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "logit", ".", "shape", "\n", "\n", "label_amn", "=", "resize_labels", "(", "label_amn", ".", "cpu", "(", ")", ",", "size", "=", "logit", ".", "shape", "[", "-", "2", ":", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "label_", "=", "label_amn", ".", "clone", "(", ")", "\n", "label_", "[", "label_amn", "==", "255", "]", "=", "0", "\n", "\n", "given_labels", "=", "torch", ".", "full", "(", "size", "=", "(", "B", ",", "C", ",", "H", ",", "W", ")", ",", "fill_value", "=", "args", ".", "eps", "/", "(", "C", "-", "1", ")", ")", ".", "cuda", "(", ")", "\n", "given_labels", ".", "scatter_", "(", "dim", "=", "1", ",", "index", "=", "torch", ".", "unsqueeze", "(", "label_", ",", "dim", "=", "1", ")", ",", "value", "=", "1", "-", "args", ".", "eps", ")", "\n", "\n", "loss_pcl", "=", "balanced_cross_entropy", "(", "logit", ",", "label_amn", ",", "given_labels", ")", "\n", "\n", "loss", "=", "loss_pcl", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "avg_meter", ".", "add", "(", "{", "'loss_pcl'", ":", "loss_pcl", ".", "item", "(", ")", "}", ")", "\n", "\n", "pbar", ".", "set_description", "(", "f\"[{ep + 1}/{total_epochs}] \"", "\n", "f\"PCL: [{avg_meter.pop('loss_pcl'):.4f}]\"", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "dataset", "=", "VOCSemanticSegmentationDataset", "(", "split", "=", "args", ".", "chainer_eval_set", ",", "data_dir", "=", "args", ".", "voc12_root", ")", "\n", "labels", "=", "[", "]", "\n", "preds", "=", "[", "]", "\n", "\n", "for", "i", ",", "pack", "in", "enumerate", "(", "tqdm", "(", "val_data_loader", ")", ")", ":", "\n", "\n", "                ", "img_name", "=", "pack", "[", "'name'", "]", "[", "0", "]", "\n", "img", "=", "pack", "[", "'img'", "]", "\n", "label_cls", "=", "pack", "[", "'label_cls'", "]", "[", "0", "]", "\n", "\n", "img", "=", "img", ".", "cuda", "(", ")", "\n", "\n", "logit", "=", "model", "(", "img", ",", "pack", "[", "'label_cls'", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "size", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "strided_up_size", "=", "imutils", ".", "get_strided_up_size", "(", "size", ",", "16", ")", "\n", "\n", "valid_cat", "=", "torch", ".", "nonzero", "(", "label_cls", ")", "[", ":", ",", "0", "]", "\n", "keys", "=", "np", ".", "pad", "(", "valid_cat", "+", "1", ",", "(", "1", ",", "0", ")", ",", "mode", "=", "'constant'", ")", "\n", "\n", "logit_up", "=", "F", ".", "interpolate", "(", "logit", ",", "strided_up_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "logit_up", "=", "logit_up", "[", "0", ",", ":", ",", ":", "size", "[", "0", "]", ",", ":", "size", "[", "1", "]", "]", "\n", "\n", "logit_up", "=", "F", ".", "softmax", "(", "logit_up", ",", "dim", "=", "0", ")", "[", "keys", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "cls_labels", "=", "np", ".", "argmax", "(", "logit_up", ",", "axis", "=", "0", ")", "\n", "cls_labels", "=", "keys", "[", "cls_labels", "]", "\n", "\n", "preds", ".", "append", "(", "cls_labels", ".", "copy", "(", ")", ")", "\n", "\n", "gt_label", "=", "dataset", ".", "get_example_by_keys", "(", "i", ",", "(", "1", ",", ")", ")", "[", "0", "]", "\n", "\n", "labels", ".", "append", "(", "gt_label", ".", "copy", "(", ")", ")", "\n", "\n", "", "confusion", "=", "calc_semantic_segmentation_confusion", "(", "preds", ",", "labels", ")", "\n", "\n", "gtj", "=", "confusion", ".", "sum", "(", "axis", "=", "1", ")", "\n", "resj", "=", "confusion", ".", "sum", "(", "axis", "=", "0", ")", "\n", "gtjresj", "=", "np", ".", "diag", "(", "confusion", ")", "\n", "denominator", "=", "gtj", "+", "resj", "-", "gtjresj", "\n", "iou", "=", "gtjresj", "/", "denominator", "\n", "\n", "print", "(", "f'[{ep + 1}/{total_epochs}] miou: {np.nanmean(iou):.4f}'", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "args", ".", "amn_weights_name", "+", "'.pth'", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.train_irn.run": [[10, 112], ["misc.indexing.PathIndex", "voc12.dataloader.VOC12AffinityDataset", "torch.utils.data.DataLoader", "torch.nn.DataParallel().cuda.trainable_parameters", "misc.torchutils.PolyOptimizer", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.train", "misc.pyutils.AverageMeter", "misc.pyutils.Timer", "range", "voc12.dataloader.VOC12ImageDataset", "torch.utils.data.DataLoader", "torch.nn.DataParallel().cuda.eval", "print", "print", "torch.save", "torch.cuda.empty_cache", "getattr", "print", "enumerate", "torch.no_grad", "enumerate", "torch.mean", "torch.nn.DataParallel().cuda.module.state_dict", "importlib.import_module", "len", "torch.nn.DataParallel", "pack[].cuda", "pack[].cuda", "pack[].cuda", "pack[].cuda", "torch.nn.DataParallel().cuda.", "pyutils.AverageMeter.add", "torchutils.PolyOptimizer.zero_grad", "total_loss.backward", "torchutils.PolyOptimizer.step", "pyutils.Timer.reset_stage", "pack[].cuda", "torch.nn.DataParallel().cuda.", "dp_mean_list.append", "torch.stack", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pyutils.Timer.update_progress", "print", "torch.mean().cpu", "torch.sum", "torch.sum", "torch.sum", "pos_aff_loss.item", "neg_aff_loss.item", "dp_fg_loss.item", "dp_bg_loss.item", "torch.unsqueeze", "torch.sum", "torch.unsqueeze", "torch.sum", "pyutils.Timer.str_estimated_complete", "torch.mean", "pyutils.AverageMeter.pop", "pyutils.AverageMeter.pop", "pyutils.AverageMeter.pop", "pyutils.AverageMeter.pop", "pyutils.Timer.get_stage_elapsed"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.trainable_parameters", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.train", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.add", "home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.SGDROptimizer.step", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.reset_stage", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.update_progress", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.str_estimated_complete", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.pop", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.pop", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.pop", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.pop", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.get_stage_elapsed"], ["def", "run", "(", "args", ")", ":", "\n", "\n", "    ", "path_index", "=", "indexing", ".", "PathIndex", "(", "radius", "=", "10", ",", "default_size", "=", "(", "args", ".", "irn_crop_size", "//", "4", ",", "args", ".", "irn_crop_size", "//", "4", ")", ")", "\n", "\n", "model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "args", ".", "irn_network", ")", ",", "'AffinityDisplacementLoss'", ")", "(", "\n", "path_index", ")", "\n", "\n", "train_dataset", "=", "voc12", ".", "dataloader", ".", "VOC12AffinityDataset", "(", "args", ".", "train_list", ",", "\n", "label_dir", "=", "args", ".", "amn_ir_label_out_dir", ",", "\n", "voc12_root", "=", "args", ".", "voc12_root", ",", "\n", "indices_from", "=", "path_index", ".", "src_indices", ",", "\n", "indices_to", "=", "path_index", ".", "dst_indices", ",", "\n", "hor_flip", "=", "True", ",", "\n", "crop_size", "=", "args", ".", "irn_crop_size", ",", "\n", "crop_method", "=", "\"random\"", ",", "\n", "rescale", "=", "(", "0.5", ",", "1.5", ")", "\n", ")", "\n", "train_data_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "irn_batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "max_step", "=", "(", "len", "(", "train_dataset", ")", "//", "args", ".", "irn_batch_size", ")", "*", "args", ".", "irn_num_epoches", "\n", "\n", "param_groups", "=", "model", ".", "trainable_parameters", "(", ")", "\n", "optimizer", "=", "torchutils", ".", "PolyOptimizer", "(", "[", "\n", "{", "'params'", ":", "param_groups", "[", "0", "]", ",", "'lr'", ":", "1", "*", "args", ".", "irn_learning_rate", ",", "'weight_decay'", ":", "args", ".", "irn_weight_decay", "}", ",", "\n", "{", "'params'", ":", "param_groups", "[", "1", "]", ",", "'lr'", ":", "10", "*", "args", ".", "irn_learning_rate", ",", "'weight_decay'", ":", "args", ".", "irn_weight_decay", "}", "\n", "]", ",", "lr", "=", "args", ".", "irn_learning_rate", ",", "weight_decay", "=", "args", ".", "irn_weight_decay", ",", "max_step", "=", "max_step", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "avg_meter", "=", "pyutils", ".", "AverageMeter", "(", ")", "\n", "\n", "timer", "=", "pyutils", ".", "Timer", "(", ")", "\n", "\n", "for", "ep", "in", "range", "(", "args", ".", "irn_num_epoches", ")", ":", "\n", "\n", "        ", "print", "(", "'Epoch %d/%d'", "%", "(", "ep", "+", "1", ",", "args", ".", "irn_num_epoches", ")", ")", "\n", "\n", "for", "iter", ",", "pack", "in", "enumerate", "(", "train_data_loader", ")", ":", "\n", "\n", "            ", "img", "=", "pack", "[", "'img'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "bg_pos_label", "=", "pack", "[", "'aff_bg_pos_label'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "fg_pos_label", "=", "pack", "[", "'aff_fg_pos_label'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "neg_label", "=", "pack", "[", "'aff_neg_label'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "pos_aff_loss", ",", "neg_aff_loss", ",", "dp_fg_loss", ",", "dp_bg_loss", "=", "model", "(", "img", ",", "True", ")", "\n", "\n", "bg_pos_aff_loss", "=", "torch", ".", "sum", "(", "bg_pos_label", "*", "pos_aff_loss", ")", "/", "(", "torch", ".", "sum", "(", "bg_pos_label", ")", "+", "1e-5", ")", "\n", "fg_pos_aff_loss", "=", "torch", ".", "sum", "(", "fg_pos_label", "*", "pos_aff_loss", ")", "/", "(", "torch", ".", "sum", "(", "fg_pos_label", ")", "+", "1e-5", ")", "\n", "pos_aff_loss", "=", "bg_pos_aff_loss", "/", "2", "+", "fg_pos_aff_loss", "/", "2", "\n", "neg_aff_loss", "=", "torch", ".", "sum", "(", "neg_label", "*", "neg_aff_loss", ")", "/", "(", "torch", ".", "sum", "(", "neg_label", ")", "+", "1e-5", ")", "\n", "\n", "dp_fg_loss", "=", "torch", ".", "sum", "(", "dp_fg_loss", "*", "torch", ".", "unsqueeze", "(", "fg_pos_label", ",", "1", ")", ")", "/", "(", "2", "*", "torch", ".", "sum", "(", "fg_pos_label", ")", "+", "1e-5", ")", "\n", "dp_bg_loss", "=", "torch", ".", "sum", "(", "dp_bg_loss", "*", "torch", ".", "unsqueeze", "(", "bg_pos_label", ",", "1", ")", ")", "/", "(", "2", "*", "torch", ".", "sum", "(", "bg_pos_label", ")", "+", "1e-5", ")", "\n", "\n", "avg_meter", ".", "add", "(", "{", "'loss1'", ":", "pos_aff_loss", ".", "item", "(", ")", ",", "'loss2'", ":", "neg_aff_loss", ".", "item", "(", ")", ",", "\n", "'loss3'", ":", "dp_fg_loss", ".", "item", "(", ")", ",", "'loss4'", ":", "dp_bg_loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "total_loss", "=", "(", "pos_aff_loss", "+", "neg_aff_loss", ")", "/", "2", "+", "(", "dp_fg_loss", "+", "dp_bg_loss", ")", "/", "2", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "(", "optimizer", ".", "global_step", "-", "1", ")", "%", "50", "==", "0", ":", "\n", "                ", "timer", ".", "update_progress", "(", "optimizer", ".", "global_step", "/", "max_step", ")", "\n", "\n", "print", "(", "'step:%5d/%5d'", "%", "(", "optimizer", ".", "global_step", "-", "1", ",", "max_step", ")", ",", "\n", "'loss:%.4f %.4f %.4f %.4f'", "%", "(", "\n", "avg_meter", ".", "pop", "(", "'loss1'", ")", ",", "avg_meter", ".", "pop", "(", "'loss2'", ")", ",", "avg_meter", ".", "pop", "(", "'loss3'", ")", ",", "avg_meter", ".", "pop", "(", "'loss4'", ")", ")", ",", "\n", "'imps:%.1f'", "%", "(", "(", "iter", "+", "1", ")", "*", "args", ".", "irn_batch_size", "/", "timer", ".", "get_stage_elapsed", "(", ")", ")", ",", "\n", "'lr: %.4f'", "%", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ",", "\n", "'etc:%s'", "%", "(", "timer", ".", "str_estimated_complete", "(", ")", ")", ",", "flush", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "timer", ".", "reset_stage", "(", ")", "\n", "\n", "", "", "infer_dataset", "=", "voc12", ".", "dataloader", ".", "VOC12ImageDataset", "(", "args", ".", "infer_list", ",", "\n", "voc12_root", "=", "args", ".", "voc12_root", ",", "\n", "crop_size", "=", "args", ".", "irn_crop_size", ",", "\n", "crop_method", "=", "\"top_left\"", ")", "\n", "infer_data_loader", "=", "DataLoader", "(", "infer_dataset", ",", "batch_size", "=", "args", ".", "irn_batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "print", "(", "'Analyzing displacements mean ... '", ",", "end", "=", "''", ")", "\n", "\n", "dp_mean_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "iter", ",", "pack", "in", "enumerate", "(", "infer_data_loader", ")", ":", "\n", "            ", "img", "=", "pack", "[", "'img'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "aff", ",", "dp", "=", "model", "(", "img", ",", "False", ")", "\n", "\n", "dp_mean_list", ".", "append", "(", "torch", ".", "mean", "(", "dp", ",", "dim", "=", "(", "0", ",", "2", ",", "3", ")", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "model", ".", "module", ".", "mean_shift", ".", "running_mean", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "dp_mean_list", ")", ",", "dim", "=", "0", ")", "\n", "", "print", "(", "'done.'", ")", "\n", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "args", ".", "irn_weights_name", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.eval_cam.run": [[7, 30], ["chainercv.datasets.VOCSemanticSegmentationDataset", "chainercv.evaluations.calc_semantic_segmentation_confusion", "chainercv.evaluations.calc_semantic_segmentation_confusion.sum", "chainercv.evaluations.calc_semantic_segmentation_confusion.sum", "numpy.diag", "print", "numpy.load().item", "numpy.pad", "numpy.pad", "numpy.argmax", "preds.append", "chainercv.datasets.VOCSemanticSegmentationDataset.get_example_by_keys", "range", "np.argmax.copy", "numpy.nanmean", "len", "numpy.load", "os.path.join"], "function", ["None"], ["def", "run", "(", "args", ")", ":", "\n", "    ", "dataset", "=", "VOCSemanticSegmentationDataset", "(", "split", "=", "args", ".", "chainer_eval_set", ",", "data_dir", "=", "args", ".", "voc12_root", ")", "\n", "labels", "=", "[", "dataset", ".", "get_example_by_keys", "(", "i", ",", "(", "1", ",", ")", ")", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "\n", "preds", "=", "[", "]", "\n", "for", "id", "in", "dataset", ".", "ids", ":", "\n", "        ", "cam_dict", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "cam_out_dir", ",", "id", "+", "'.npy'", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "cams", "=", "cam_dict", "[", "'high_res'", "]", "\n", "cams", "=", "np", ".", "pad", "(", "cams", ",", "(", "(", "1", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "args", ".", "cam_eval_thres", ")", "\n", "keys", "=", "np", ".", "pad", "(", "cam_dict", "[", "'keys'", "]", "+", "1", ",", "(", "1", ",", "0", ")", ",", "mode", "=", "'constant'", ")", "\n", "cls_labels", "=", "np", ".", "argmax", "(", "cams", ",", "axis", "=", "0", ")", "\n", "cls_labels", "=", "keys", "[", "cls_labels", "]", "\n", "preds", ".", "append", "(", "cls_labels", ".", "copy", "(", ")", ")", "\n", "\n", "", "confusion", "=", "calc_semantic_segmentation_confusion", "(", "preds", ",", "labels", ")", "\n", "\n", "gtj", "=", "confusion", ".", "sum", "(", "axis", "=", "1", ")", "\n", "resj", "=", "confusion", ".", "sum", "(", "axis", "=", "0", ")", "\n", "gtjresj", "=", "np", ".", "diag", "(", "confusion", ")", "\n", "denominator", "=", "gtj", "+", "resj", "-", "gtjresj", "\n", "iou", "=", "gtjresj", "/", "denominator", "\n", "\n", "print", "(", "{", "'iou'", ":", "iou", ",", "'miou'", ":", "np", ".", "nanmean", "(", "iou", ")", "}", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_cam._work": [[16, 60], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.utils.data.DataLoader", "torch.no_grad", "torch.no_grad", "torch.cuda.device", "model.cuda", "enumerate", "misc.imutils.get_strided_size", "misc.imutils.get_strided_up_size", "torch.sum", "torch.sum", "numpy.save", "model", "torch.stack", "torch.stack", "torch.interpolate", "torch.sum", "torch.sum", "torch.nonzero", "torch.nonzero", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "os.path.join", "print", "img[].cuda", "torch.unsqueeze", "torch.unsqueeze", "torch.stack", "torch.stack", "torch.sum.cpu", "highres_cam.cpu().numpy", "torch.interpolate", "highres_cam.cpu", "len", "torch.unsqueeze", "torch.unsqueeze", "len"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.get_strided_size", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.get_strided_up_size"], ["def", "_work", "(", "process_id", ",", "model", ",", "dataset", ",", "args", ")", ":", "\n", "\n", "    ", "databin", "=", "dataset", "[", "process_id", "]", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "data_loader", "=", "DataLoader", "(", "databin", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", "//", "n_gpus", ",", "pin_memory", "=", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "cuda", ".", "device", "(", "process_id", ")", ":", "\n", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "for", "iter", ",", "pack", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "            ", "img_name", "=", "pack", "[", "'name'", "]", "[", "0", "]", "\n", "label", "=", "pack", "[", "'label'", "]", "[", "0", "]", "\n", "size", "=", "pack", "[", "'size'", "]", "\n", "\n", "strided_size", "=", "imutils", ".", "get_strided_size", "(", "size", ",", "4", ")", "\n", "strided_up_size", "=", "imutils", ".", "get_strided_up_size", "(", "size", ",", "16", ")", "\n", "\n", "outputs", "=", "[", "model", "(", "img", "[", "0", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "for", "img", "in", "pack", "[", "'img'", "]", "]", "\n", "\n", "strided_cam", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "\n", "[", "F", ".", "interpolate", "(", "torch", ".", "unsqueeze", "(", "o", ",", "0", ")", ",", "strided_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "for", "o", "\n", "in", "outputs", "]", ")", ",", "0", ")", "\n", "\n", "highres_cam", "=", "[", "F", ".", "interpolate", "(", "torch", ".", "unsqueeze", "(", "o", ",", "1", ")", ",", "strided_up_size", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "for", "o", "in", "outputs", "]", "\n", "highres_cam", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "highres_cam", ",", "0", ")", ",", "0", ")", "[", ":", ",", "0", ",", ":", "size", "[", "0", "]", ",", ":", "size", "[", "1", "]", "]", "\n", "\n", "valid_cat", "=", "torch", ".", "nonzero", "(", "label", ")", "[", ":", ",", "0", "]", "\n", "\n", "strided_cam", "=", "strided_cam", "[", "valid_cat", "]", "\n", "strided_cam", "/=", "F", ".", "adaptive_max_pool2d", "(", "strided_cam", ",", "(", "1", ",", "1", ")", ")", "+", "1e-5", "\n", "\n", "highres_cam", "=", "highres_cam", "[", "valid_cat", "]", "\n", "highres_cam", "/=", "F", ".", "adaptive_max_pool2d", "(", "highres_cam", ",", "(", "1", ",", "1", ")", ")", "+", "1e-5", "\n", "\n", "# save cams", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "cam_out_dir", ",", "img_name", "+", "'.npy'", ")", ",", "\n", "{", "\"keys\"", ":", "valid_cat", ",", "\"cam\"", ":", "strided_cam", ".", "cpu", "(", ")", ",", "\"high_res\"", ":", "highres_cam", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "\n", "if", "process_id", "==", "n_gpus", "-", "1", "and", "iter", "%", "(", "len", "(", "databin", ")", "//", "20", ")", "==", "0", ":", "\n", "                ", "print", "(", "\"%d \"", "%", "(", "(", "5", "*", "iter", "+", "1", ")", "//", "(", "len", "(", "databin", ")", "//", "20", ")", ")", ",", "end", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.step.make_cam.run": [[62, 78], ["model.load_state_dict", "model.eval", "torch.cuda.device_count", "torch.cuda.device_count", "voc12.dataloader.VOC12ClassificationDatasetMSF", "misc.torchutils.split_dataset", "print", "torch.multiprocessing.spawn", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "getattr", "torch.load", "torch.load", "importlib.import_module"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.split_dataset"], ["", "", "", "", "def", "run", "(", "args", ")", ":", "\n", "    ", "model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "args", ".", "cam_network", ")", ",", "'CAM'", ")", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "cam_weights_name", "+", "'.pth'", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "dataset", "=", "voc12", ".", "dataloader", ".", "VOC12ClassificationDatasetMSF", "(", "args", ".", "train_list", ",", "\n", "voc12_root", "=", "args", ".", "voc12_root", ",", "scales", "=", "args", ".", "cam_scales", ")", "\n", "dataset", "=", "torchutils", ".", "split_dataset", "(", "dataset", ",", "n_gpus", ")", "\n", "\n", "print", "(", "'[ '", ",", "end", "=", "''", ")", "\n", "multiprocessing", ".", "spawn", "(", "_work", ",", "nprocs", "=", "n_gpus", ",", "args", "=", "(", "model", ",", "dataset", ",", "args", ")", ",", "join", "=", "True", ")", "\n", "print", "(", "']'", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.PolyOptimizer.__init__": [[11, 19], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", ",", "weight_decay", ",", "max_step", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "params", ",", "lr", ",", "weight_decay", ")", "\n", "\n", "self", ".", "global_step", "=", "0", "\n", "self", ".", "max_step", "=", "max_step", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "self", ".", "__initial_lr", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.PolyOptimizer.step": [[21, 32], ["super().step", "range", "len"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.SGDROptimizer.step"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "global_step", "<", "self", ".", "max_step", ":", "\n", "            ", "lr_mult", "=", "(", "1", "-", "self", ".", "global_step", "/", "self", ".", "max_step", ")", "**", "self", ".", "momentum", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "param_groups", ")", ")", ":", "\n", "                ", "self", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "=", "self", ".", "__initial_lr", "[", "i", "]", "*", "lr_mult", "\n", "\n", "", "", "super", "(", ")", ".", "step", "(", "closure", ")", "\n", "\n", "self", ".", "global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.SGDROptimizer.__init__": [[35, 46], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "steps_per_epoch", ",", "lr", "=", "0", ",", "weight_decay", "=", "0", ",", "epoch_start", "=", "1", ",", "restart_mult", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "params", ",", "lr", ",", "weight_decay", ")", "\n", "\n", "self", ".", "global_step", "=", "0", "\n", "self", ".", "local_step", "=", "0", "\n", "self", ".", "total_restart", "=", "0", "\n", "\n", "self", ".", "max_step", "=", "steps_per_epoch", "*", "epoch_start", "\n", "self", ".", "restart_mult", "=", "restart_mult", "\n", "\n", "self", ".", "__initial_lr", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.SGDROptimizer.step": [[48, 64], ["range", "super().step", "len", "math.cos"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.SGDROptimizer.step"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "local_step", ">=", "self", ".", "max_step", ":", "\n", "            ", "self", ".", "local_step", "=", "0", "\n", "self", ".", "max_step", "*=", "self", ".", "restart_mult", "\n", "self", ".", "total_restart", "+=", "1", "\n", "\n", "", "lr_mult", "=", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "local_step", "/", "self", ".", "max_step", ")", ")", "/", "2", "/", "(", "self", ".", "total_restart", "+", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "param_groups", ")", ")", ":", "\n", "            ", "self", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "=", "self", ".", "__initial_lr", "[", "i", "]", "*", "lr_mult", "\n", "\n", "", "super", "(", ")", ".", "step", "(", "closure", ")", "\n", "\n", "self", ".", "local_step", "+=", "1", "\n", "self", ".", "global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.split_dataset": [[66, 69], ["torch.utils.data.Subset", "numpy.arange", "range", "len"], "function", ["None"], ["", "", "def", "split_dataset", "(", "dataset", ",", "n_splits", ")", ":", "\n", "\n", "    ", "return", "[", "Subset", "(", "dataset", ",", "np", ".", "arange", "(", "i", ",", "len", "(", "dataset", ")", ",", "n_splits", ")", ")", "for", "i", "in", "range", "(", "n_splits", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.gap2d": [[71, 77], ["torch.mean", "x.view", "out.view.view", "x.size", "x.size", "out.view.size", "out.view.size"], "function", ["None"], ["", "def", "gap2d", "(", "x", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "out", "=", "torch", ".", "mean", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "if", "keepdims", ":", "\n", "        ", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "out", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Logger.__init__": [[7, 11], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "outfile", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "self", ".", "log", "=", "open", "(", "outfile", ",", "\"w\"", ")", "\n", "sys", ".", "stdout", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Logger.write": [[12, 15], ["pyutils.Logger.terminal.write", "pyutils.Logger.log.write"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Logger.write", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Logger.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Logger.flush": [[16, 18], ["pyutils.Logger.terminal.flush"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Logger.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.__init__": [[21, 25], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "keys", ")", ":", "\n", "        ", "self", ".", "__data", "=", "dict", "(", ")", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "self", ".", "__data", "[", "k", "]", "=", "[", "0.0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.add": [[26, 32], ["dict.items"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "dict", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "__data", ":", "\n", "                ", "self", ".", "__data", "[", "k", "]", "=", "[", "0.0", ",", "0", "]", "\n", "", "self", ".", "__data", "[", "k", "]", "[", "0", "]", "+=", "v", "\n", "self", ".", "__data", "[", "k", "]", "[", "1", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.get": [[33, 39], ["len", "tuple"], "methods", ["None"], ["", "", "def", "get", "(", "self", ",", "*", "keys", ")", ":", "\n", "        ", "if", "len", "(", "keys", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "__data", "[", "keys", "[", "0", "]", "]", "[", "0", "]", "/", "self", ".", "__data", "[", "keys", "[", "0", "]", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "v_list", "=", "[", "self", ".", "__data", "[", "k", "]", "[", "0", "]", "/", "self", ".", "__data", "[", "k", "]", "[", "1", "]", "for", "k", "in", "keys", "]", "\n", "return", "tuple", "(", "v_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.pop": [[40, 48], ["pyutils.AverageMeter.__data.keys", "pyutils.AverageMeter.get"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.get"], ["", "", "def", "pop", "(", "self", ",", "key", "=", "None", ")", ":", "\n", "        ", "if", "key", "is", "None", ":", "\n", "            ", "for", "k", "in", "self", ".", "__data", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "__data", "[", "k", "]", "=", "[", "0.0", ",", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "v", "=", "self", ".", "get", "(", "key", ")", "\n", "self", ".", "__data", "[", "key", "]", "=", "[", "0.0", ",", "0", "]", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.__init__": [[51, 57], ["time.time", "print", "time.ctime", "time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "starting_msg", "=", "None", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "stage_start", "=", "self", ".", "start", "\n", "\n", "if", "starting_msg", "is", "not", "None", ":", "\n", "            ", "print", "(", "starting_msg", ",", "time", ".", "ctime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.__enter__": [[58, 60], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.__exit__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.update_progress": [[64, 69], ["int", "time.time"], "methods", ["None"], ["", "def", "update_progress", "(", "self", ",", "progress", ")", ":", "\n", "        ", "self", ".", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start", "\n", "self", ".", "est_total", "=", "self", ".", "elapsed", "/", "progress", "\n", "self", ".", "est_remaining", "=", "self", ".", "est_total", "-", "self", ".", "elapsed", "\n", "self", ".", "est_finish", "=", "int", "(", "self", ".", "start", "+", "self", ".", "est_total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.str_estimated_complete": [[71, 73], ["str", "time.ctime"], "methods", ["None"], ["", "def", "str_estimated_complete", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "time", ".", "ctime", "(", "self", ".", "est_finish", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.get_stage_elapsed": [[74, 76], ["time.time"], "methods", ["None"], ["", "def", "get_stage_elapsed", "(", "self", ")", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "-", "self", ".", "stage_start", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.reset_stage": [[77, 79], ["time.time"], "methods", ["None"], ["", "def", "reset_stage", "(", "self", ")", ":", "\n", "        ", "self", ".", "stage_start", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.Timer.lapse": [[80, 84], ["time.time", "time.time"], "methods", ["None"], ["", "def", "lapse", "(", "self", ")", ":", "\n", "        ", "out", "=", "time", ".", "time", "(", ")", "-", "self", ".", "stage_start", "\n", "self", ".", "stage_start", "=", "time", ".", "time", "(", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.to_one_hot": [[86, 102], ["numpy.reshape", "numpy.zeros", "numpy.reshape", "numpy.max", "list", "numpy.arange"], "function", ["None"], ["", "", "def", "to_one_hot", "(", "sparse_integers", ",", "maximum_val", "=", "None", ",", "dtype", "=", "np", ".", "bool", ")", ":", "\n", "\n", "    ", "if", "maximum_val", "is", "None", ":", "\n", "        ", "maximum_val", "=", "np", ".", "max", "(", "sparse_integers", ")", "+", "1", "\n", "\n", "", "src_shape", "=", "sparse_integers", ".", "shape", "\n", "\n", "flat_src", "=", "np", ".", "reshape", "(", "sparse_integers", ",", "[", "-", "1", "]", ")", "\n", "src_size", "=", "flat_src", ".", "shape", "[", "0", "]", "\n", "\n", "one_hot", "=", "np", ".", "zeros", "(", "(", "maximum_val", ",", "src_size", ")", ",", "dtype", ")", "\n", "one_hot", "[", "flat_src", ",", "np", ".", "arange", "(", "src_size", ")", "]", "=", "1", "\n", "\n", "one_hot", "=", "np", ".", "reshape", "(", "one_hot", ",", "[", "maximum_val", "]", "+", "list", "(", "src_shape", ")", ")", "\n", "\n", "return", "one_hot", "\n", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.pil_resize": [[8, 18], ["numpy.asarray", "PIL.Image.fromarray().resize", "PIL.Image.fromarray"], "function", ["None"], ["def", "pil_resize", "(", "img", ",", "size", ",", "order", ")", ":", "\n", "    ", "if", "size", "[", "0", "]", "==", "img", ".", "shape", "[", "0", "]", "and", "size", "[", "1", "]", "==", "img", ".", "shape", "[", "1", "]", ":", "\n", "        ", "return", "img", "\n", "\n", "", "if", "order", "==", "3", ":", "\n", "        ", "resample", "=", "Image", ".", "BICUBIC", "\n", "", "elif", "order", "==", "0", ":", "\n", "        ", "resample", "=", "Image", ".", "NEAREST", "\n", "\n", "", "return", "np", ".", "asarray", "(", "Image", ".", "fromarray", "(", "img", ")", ".", "resize", "(", "size", "[", ":", ":", "-", "1", "]", ",", "resample", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.pil_rescale": [[19, 23], ["imutils.pil_resize", "int", "int", "numpy.round", "numpy.round"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.pil_resize"], ["", "def", "pil_rescale", "(", "img", ",", "scale", ",", "order", ")", ":", "\n", "    ", "height", ",", "width", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "target_size", "=", "(", "int", "(", "np", ".", "round", "(", "height", "*", "scale", ")", ")", ",", "int", "(", "np", ".", "round", "(", "width", "*", "scale", ")", ")", ")", "\n", "return", "pil_resize", "(", "img", ",", "target_size", ",", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.random_resize_long": [[25, 35], ["random.randint", "imutils.pil_rescale"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.pil_rescale"], ["", "def", "random_resize_long", "(", "img", ",", "min_long", ",", "max_long", ")", ":", "\n", "    ", "target_long", "=", "random", ".", "randint", "(", "min_long", ",", "max_long", ")", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "w", "<", "h", ":", "\n", "        ", "scale", "=", "target_long", "/", "h", "\n", "", "else", ":", "\n", "        ", "scale", "=", "target_long", "/", "w", "\n", "\n", "", "return", "pil_rescale", "(", "img", ",", "scale", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.random_scale": [[36, 44], ["isinstance", "imutils.pil_rescale", "random.random", "imutils.pil_rescale", "imutils.pil_rescale"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.pil_rescale", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.pil_rescale", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.pil_rescale"], ["", "def", "random_scale", "(", "img", ",", "scale_range", ",", "order", ")", ":", "\n", "\n", "    ", "target_scale", "=", "scale_range", "[", "0", "]", "+", "random", ".", "random", "(", ")", "*", "(", "scale_range", "[", "1", "]", "-", "scale_range", "[", "0", "]", ")", "\n", "\n", "if", "isinstance", "(", "img", ",", "tuple", ")", ":", "\n", "        ", "return", "(", "pil_rescale", "(", "img", "[", "0", "]", ",", "target_scale", ",", "order", "[", "0", "]", ")", ",", "pil_rescale", "(", "img", "[", "1", "]", ",", "target_scale", ",", "order", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_rescale", "(", "img", "[", "0", "]", ",", "target_scale", ",", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.random_lr_flip": [[45, 54], ["bool", "random.getrandbits", "isinstance", "numpy.fliplr", "numpy.fliplr"], "function", ["None"], ["", "", "def", "random_lr_flip", "(", "img", ")", ":", "\n", "\n", "    ", "if", "bool", "(", "random", ".", "getrandbits", "(", "1", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "img", ",", "tuple", ")", ":", "\n", "            ", "return", "[", "np", ".", "fliplr", "(", "m", ")", "for", "m", "in", "img", "]", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "fliplr", "(", "img", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.get_random_crop_box": [[55, 79], ["min", "min", "random.randrange", "random.randrange", "random.randrange", "random.randrange"], "function", ["None"], ["", "", "def", "get_random_crop_box", "(", "imgsize", ",", "cropsize", ")", ":", "\n", "    ", "h", ",", "w", "=", "imgsize", "\n", "\n", "ch", "=", "min", "(", "cropsize", ",", "h", ")", "\n", "cw", "=", "min", "(", "cropsize", ",", "w", ")", "\n", "\n", "w_space", "=", "w", "-", "cropsize", "\n", "h_space", "=", "h", "-", "cropsize", "\n", "\n", "if", "w_space", ">", "0", ":", "\n", "        ", "cont_left", "=", "0", "\n", "img_left", "=", "random", ".", "randrange", "(", "w_space", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "cont_left", "=", "random", ".", "randrange", "(", "-", "w_space", "+", "1", ")", "\n", "img_left", "=", "0", "\n", "\n", "", "if", "h_space", ">", "0", ":", "\n", "        ", "cont_top", "=", "0", "\n", "img_top", "=", "random", ".", "randrange", "(", "h_space", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "cont_top", "=", "random", ".", "randrange", "(", "-", "h_space", "+", "1", ")", "\n", "img_top", "=", "0", "\n", "\n", "", "return", "cont_top", ",", "cont_top", "+", "ch", ",", "cont_left", ",", "cont_left", "+", "cw", ",", "img_top", ",", "img_top", "+", "ch", ",", "img_left", ",", "img_left", "+", "cw", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.random_crop": [[80, 102], ["isinstance", "isinstance", "imutils.get_random_crop_box", "zip", "new_images.append", "len", "len", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.get_random_crop_box"], ["", "def", "random_crop", "(", "images", ",", "cropsize", ",", "default_values", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "images", "=", "(", "images", ",", ")", "\n", "if", "isinstance", "(", "default_values", ",", "int", ")", ":", "default_values", "=", "(", "default_values", ",", ")", "\n", "\n", "imgsize", "=", "images", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "box", "=", "get_random_crop_box", "(", "imgsize", ",", "cropsize", ")", "\n", "\n", "new_images", "=", "[", "]", "\n", "for", "img", ",", "f", "in", "zip", "(", "images", ",", "default_values", ")", ":", "\n", "\n", "        ", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "            ", "cont", "=", "np", ".", "ones", "(", "(", "cropsize", ",", "cropsize", ",", "img", ".", "shape", "[", "2", "]", ")", ",", "img", ".", "dtype", ")", "*", "f", "\n", "", "else", ":", "\n", "            ", "cont", "=", "np", ".", "ones", "(", "(", "cropsize", ",", "cropsize", ")", ",", "img", ".", "dtype", ")", "*", "f", "\n", "", "cont", "[", "box", "[", "0", "]", ":", "box", "[", "1", "]", ",", "box", "[", "2", "]", ":", "box", "[", "3", "]", "]", "=", "img", "[", "box", "[", "4", "]", ":", "box", "[", "5", "]", ",", "box", "[", "6", "]", ":", "box", "[", "7", "]", "]", "\n", "new_images", ".", "append", "(", "cont", ")", "\n", "\n", "", "if", "len", "(", "new_images", ")", "==", "1", ":", "\n", "        ", "new_images", "=", "new_images", "[", "0", "]", "\n", "\n", "", "return", "new_images", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.top_left_crop": [[103, 118], ["min", "min", "len", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "top_left_crop", "(", "img", ",", "cropsize", ",", "default_value", ")", ":", "\n", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "\n", "ch", "=", "min", "(", "cropsize", ",", "h", ")", "\n", "cw", "=", "min", "(", "cropsize", ",", "w", ")", "\n", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "        ", "container", "=", "np", ".", "ones", "(", "(", "cropsize", ",", "cropsize", ")", ",", "img", ".", "dtype", ")", "*", "default_value", "\n", "", "else", ":", "\n", "        ", "container", "=", "np", ".", "ones", "(", "(", "cropsize", ",", "cropsize", ",", "img", ".", "shape", "[", "2", "]", ")", ",", "img", ".", "dtype", ")", "*", "default_value", "\n", "\n", "", "container", "[", ":", "ch", ",", ":", "cw", "]", "=", "img", "[", ":", "ch", ",", ":", "cw", "]", "\n", "\n", "return", "container", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.center_crop": [[119, 152], ["min", "min", "int", "int", "int", "int", "len", "round", "round", "round", "round", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "center_crop", "(", "img", ",", "cropsize", ",", "default_value", "=", "0", ")", ":", "\n", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "\n", "ch", "=", "min", "(", "cropsize", ",", "h", ")", "\n", "cw", "=", "min", "(", "cropsize", ",", "w", ")", "\n", "\n", "sh", "=", "h", "-", "cropsize", "\n", "sw", "=", "w", "-", "cropsize", "\n", "\n", "if", "sw", ">", "0", ":", "\n", "        ", "cont_left", "=", "0", "\n", "img_left", "=", "int", "(", "round", "(", "sw", "/", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "cont_left", "=", "int", "(", "round", "(", "-", "sw", "/", "2", ")", ")", "\n", "img_left", "=", "0", "\n", "\n", "", "if", "sh", ">", "0", ":", "\n", "        ", "cont_top", "=", "0", "\n", "img_top", "=", "int", "(", "round", "(", "sh", "/", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "cont_top", "=", "int", "(", "round", "(", "-", "sh", "/", "2", ")", ")", "\n", "img_top", "=", "0", "\n", "\n", "", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "        ", "container", "=", "np", ".", "ones", "(", "(", "cropsize", ",", "cropsize", ")", ",", "img", ".", "dtype", ")", "*", "default_value", "\n", "", "else", ":", "\n", "        ", "container", "=", "np", ".", "ones", "(", "(", "cropsize", ",", "cropsize", ",", "img", ".", "shape", "[", "2", "]", ")", ",", "img", ".", "dtype", ")", "*", "default_value", "\n", "\n", "", "container", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "img", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "\n", "return", "container", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.HWC_to_CHW": [[153, 155], ["numpy.transpose"], "function", ["None"], ["", "def", "HWC_to_CHW", "(", "img", ")", ":", "\n", "    ", "return", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.crf_inference_label": [[156, 171], ["pydensecrf.DenseCRF2D", "pydensecrf.utils.unary_from_labels", "dcrf.DenseCRF2D.setUnaryEnergy", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseBilateral", "dcrf.DenseCRF2D.inference", "numpy.argmax", "numpy.array().reshape", "numpy.ascontiguousarray", "numpy.copy", "numpy.array"], "function", ["None"], ["", "def", "crf_inference_label", "(", "img", ",", "labels", ",", "t", "=", "10", ",", "n_labels", "=", "21", ",", "gt_prob", "=", "0.7", ")", ":", "\n", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "\n", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "w", ",", "h", ",", "n_labels", ")", "\n", "\n", "unary", "=", "unary_from_labels", "(", "labels", ",", "n_labels", ",", "gt_prob", "=", "gt_prob", ",", "zero_unsure", "=", "False", ")", "\n", "\n", "d", ".", "setUnaryEnergy", "(", "unary", ")", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "3", ",", "compat", "=", "3", ")", "\n", "d", ".", "addPairwiseBilateral", "(", "sxy", "=", "50", ",", "srgb", "=", "5", ",", "rgbim", "=", "np", ".", "ascontiguousarray", "(", "np", ".", "copy", "(", "img", ")", ")", ",", "compat", "=", "10", ")", "\n", "\n", "q", "=", "d", ".", "inference", "(", "t", ")", "\n", "\n", "return", "np", ".", "argmax", "(", "np", ".", "array", "(", "q", ")", ".", "reshape", "(", "(", "n_labels", ",", "h", ",", "w", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.get_strided_size": [[173, 175], ["None"], "function", ["None"], ["", "def", "get_strided_size", "(", "orig_size", ",", "stride", ")", ":", "\n", "    ", "return", "(", "(", "orig_size", "[", "0", "]", "-", "1", ")", "//", "stride", "+", "1", ",", "(", "orig_size", "[", "1", "]", "-", "1", ")", "//", "stride", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.get_strided_up_size": [[177, 180], ["imutils.get_strided_size"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.get_strided_size"], ["", "def", "get_strided_up_size", "(", "orig_size", ",", "stride", ")", ":", "\n", "    ", "strided_size", "=", "get_strided_size", "(", "orig_size", ",", "stride", ")", "\n", "return", "strided_size", "[", "0", "]", "*", "stride", ",", "strided_size", "[", "1", "]", "*", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.compress_range": [[182, 191], ["numpy.unique", "numpy.max", "numpy.zeros", "numpy.arange", "numpy.min"], "function", ["None"], ["", "def", "compress_range", "(", "arr", ")", ":", "\n", "    ", "uniques", "=", "np", ".", "unique", "(", "arr", ")", "\n", "maximum", "=", "np", ".", "max", "(", "uniques", ")", "\n", "\n", "d", "=", "np", ".", "zeros", "(", "maximum", "+", "1", ",", "np", ".", "int32", ")", "\n", "d", "[", "uniques", "]", "=", "np", ".", "arange", "(", "uniques", ".", "shape", "[", "0", "]", ")", "\n", "\n", "out", "=", "d", "[", "arr", "]", "\n", "return", "out", "-", "np", ".", "min", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.colorize_score": [[193, 223], ["numpy.stack", "matplotlib.colors.hsv_to_rgb", "numpy.array", "numpy.arange", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones_like", "numpy.ones_like", "numpy.argmax", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "numpy.argmax"], "function", ["None"], ["", "def", "colorize_score", "(", "score_map", ",", "exclude_zero", "=", "False", ",", "normalize", "=", "True", ",", "by_hue", "=", "False", ")", ":", "\n", "    ", "import", "matplotlib", ".", "colors", "\n", "if", "by_hue", ":", "\n", "        ", "aranged", "=", "np", ".", "arange", "(", "score_map", ".", "shape", "[", "0", "]", ")", "/", "(", "score_map", ".", "shape", "[", "0", "]", ")", "\n", "hsv_color", "=", "np", ".", "stack", "(", "(", "aranged", ",", "np", ".", "ones_like", "(", "aranged", ")", ",", "np", ".", "ones_like", "(", "aranged", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "rgb_color", "=", "matplotlib", ".", "colors", ".", "hsv_to_rgb", "(", "hsv_color", ")", "\n", "\n", "test", "=", "rgb_color", "[", "np", ".", "argmax", "(", "score_map", ",", "axis", "=", "0", ")", "]", "\n", "test", "=", "np", ".", "expand_dims", "(", "np", ".", "max", "(", "score_map", ",", "axis", "=", "0", ")", ",", "axis", "=", "-", "1", ")", "*", "test", "\n", "\n", "if", "normalize", ":", "\n", "            ", "return", "test", "/", "(", "np", ".", "max", "(", "test", ")", "+", "1e-5", ")", "\n", "", "else", ":", "\n", "            ", "return", "test", "\n", "\n", "", "", "else", ":", "\n", "        ", "VOC_color", "=", "np", ".", "array", "(", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "128", ",", "0", ",", "0", ")", ",", "(", "0", ",", "128", ",", "0", ")", ",", "(", "128", ",", "128", ",", "0", ")", ",", "(", "0", ",", "0", ",", "128", ")", ",", "(", "128", ",", "0", ",", "128", ")", ",", "\n", "(", "0", ",", "128", ",", "128", ")", ",", "(", "128", ",", "128", ",", "128", ")", ",", "(", "64", ",", "0", ",", "0", ")", ",", "(", "192", ",", "0", ",", "0", ")", ",", "(", "64", ",", "128", ",", "0", ")", ",", "(", "192", ",", "128", ",", "0", ")", ",", "\n", "(", "64", ",", "0", ",", "128", ")", ",", "(", "192", ",", "0", ",", "128", ")", ",", "(", "64", ",", "128", ",", "128", ")", ",", "(", "192", ",", "128", ",", "128", ")", ",", "(", "0", ",", "64", ",", "0", ")", ",", "(", "128", ",", "64", ",", "0", ")", ",", "\n", "(", "0", ",", "192", ",", "0", ")", ",", "(", "128", ",", "192", ",", "0", ")", ",", "(", "0", ",", "64", ",", "128", ")", ",", "(", "255", ",", "255", ",", "255", ")", "]", ",", "np", ".", "float32", ")", "\n", "\n", "if", "exclude_zero", ":", "\n", "            ", "VOC_color", "=", "VOC_color", "[", "1", ":", "]", "\n", "\n", "", "test", "=", "VOC_color", "[", "np", ".", "argmax", "(", "score_map", ",", "axis", "=", "0", ")", "%", "22", "]", "\n", "test", "=", "np", ".", "expand_dims", "(", "np", ".", "max", "(", "score_map", ",", "axis", "=", "0", ")", ",", "axis", "=", "-", "1", ")", "*", "test", "\n", "if", "normalize", ":", "\n", "            ", "test", "/=", "np", ".", "max", "(", "test", ")", "+", "1e-5", "\n", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.colorize_displacement": [[225, 238], ["numpy.sqrt", "numpy.stack", "matplotlib.colors.hsv_to_rgb", "numpy.max", "numpy.ones_like", "numpy.arctan2"], "function", ["None"], ["", "", "def", "colorize_displacement", "(", "disp", ")", ":", "\n", "\n", "    ", "import", "matplotlib", ".", "colors", "\n", "import", "math", "\n", "\n", "a", "=", "(", "np", ".", "arctan2", "(", "-", "disp", "[", "0", "]", ",", "-", "disp", "[", "1", "]", ")", "/", "math", ".", "pi", "+", "1", ")", "/", "2", "\n", "\n", "r", "=", "np", ".", "sqrt", "(", "disp", "[", "0", "]", "**", "2", "+", "disp", "[", "1", "]", "**", "2", ")", "\n", "s", "=", "r", "/", "np", ".", "max", "(", "r", ")", "\n", "hsv_color", "=", "np", ".", "stack", "(", "(", "a", ",", "s", ",", "np", ".", "ones_like", "(", "a", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "rgb_color", "=", "matplotlib", ".", "colors", ".", "hsv_to_rgb", "(", "hsv_color", ")", "\n", "\n", "return", "rgb_color", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.colorize_label": [[240, 273], ["label_map.astype.astype", "numpy.max", "numpy.stack", "matplotlib.colors.hsv_to_rgb", "numpy.concatenate", "numpy.array", "numpy.greater", "numpy.pad", "numpy.pad", "numpy.repeat", "numpy.maximum", "numpy.arange", "numpy.max", "numpy.expand_dims", "numpy.ones_like", "numpy.ones_like", "numpy.zeros", "numpy.sum", "numpy.sum", "numpy.maximum", "numpy.abs", "numpy.abs"], "function", ["None"], ["", "def", "colorize_label", "(", "label_map", ",", "normalize", "=", "True", ",", "by_hue", "=", "True", ",", "exclude_zero", "=", "False", ",", "outline", "=", "False", ")", ":", "\n", "\n", "    ", "label_map", "=", "label_map", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "by_hue", ":", "\n", "        ", "import", "matplotlib", ".", "colors", "\n", "sz", "=", "np", ".", "max", "(", "label_map", ")", "\n", "aranged", "=", "np", ".", "arange", "(", "sz", ")", "/", "sz", "\n", "hsv_color", "=", "np", ".", "stack", "(", "(", "aranged", ",", "np", ".", "ones_like", "(", "aranged", ")", ",", "np", ".", "ones_like", "(", "aranged", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "rgb_color", "=", "matplotlib", ".", "colors", ".", "hsv_to_rgb", "(", "hsv_color", ")", "\n", "rgb_color", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "1", ",", "3", ")", ")", ",", "rgb_color", "]", ",", "axis", "=", "0", ")", "\n", "\n", "test", "=", "rgb_color", "[", "label_map", "]", "\n", "", "else", ":", "\n", "        ", "VOC_color", "=", "np", ".", "array", "(", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "128", ",", "0", ",", "0", ")", ",", "(", "0", ",", "128", ",", "0", ")", ",", "(", "128", ",", "128", ",", "0", ")", ",", "(", "0", ",", "0", ",", "128", ")", ",", "(", "128", ",", "0", ",", "128", ")", ",", "\n", "(", "0", ",", "128", ",", "128", ")", ",", "(", "128", ",", "128", ",", "128", ")", ",", "(", "64", ",", "0", ",", "0", ")", ",", "(", "192", ",", "0", ",", "0", ")", ",", "(", "64", ",", "128", ",", "0", ")", ",", "(", "192", ",", "128", ",", "0", ")", ",", "\n", "(", "64", ",", "0", ",", "128", ")", ",", "(", "192", ",", "0", ",", "128", ")", ",", "(", "64", ",", "128", ",", "128", ")", ",", "(", "192", ",", "128", ",", "128", ")", ",", "(", "0", ",", "64", ",", "0", ")", ",", "(", "128", ",", "64", ",", "0", ")", ",", "\n", "(", "0", ",", "192", ",", "0", ")", ",", "(", "128", ",", "192", ",", "0", ")", ",", "(", "0", ",", "64", ",", "128", ")", ",", "(", "255", ",", "255", ",", "255", ")", "]", ",", "np", ".", "float32", ")", "\n", "\n", "if", "exclude_zero", ":", "\n", "            ", "VOC_color", "=", "VOC_color", "[", "1", ":", "]", "\n", "", "test", "=", "VOC_color", "[", "label_map", "]", "\n", "if", "normalize", ":", "\n", "            ", "test", "/=", "np", ".", "max", "(", "test", ")", "\n", "\n", "", "", "if", "outline", ":", "\n", "        ", "edge", "=", "np", ".", "greater", "(", "np", ".", "sum", "(", "np", ".", "abs", "(", "test", "[", ":", "-", "1", ",", ":", "-", "1", "]", "-", "test", "[", "1", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "-", "1", ")", "+", "np", ".", "sum", "(", "np", ".", "abs", "(", "test", "[", ":", "-", "1", ",", ":", "-", "1", "]", "-", "test", "[", ":", "-", "1", ",", "1", ":", "]", ")", ",", "axis", "=", "-", "1", ")", ",", "0", ")", "\n", "edge1", "=", "np", ".", "pad", "(", "edge", ",", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "edge2", "=", "np", ".", "pad", "(", "edge", ",", "(", "(", "1", ",", "0", ")", ",", "(", "1", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "edge", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "np", ".", "maximum", "(", "edge1", ",", "edge2", ")", ",", "-", "1", ")", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "\n", "test", "=", "np", ".", "maximum", "(", "test", ",", "edge", ")", "\n", "", "return", "test", "\n", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.PathIndex.__init__": [[8, 17], ["int", "indexing.PathIndex.get_search_paths_dst", "indexing.PathIndex.get_path_indices", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.PathIndex.get_search_paths_dst", "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.PathIndex.get_path_indices"], ["    ", "def", "__init__", "(", "self", ",", "radius", ",", "default_size", ")", ":", "\n", "        ", "self", ".", "radius", "=", "radius", "\n", "self", ".", "radius_floor", "=", "int", "(", "np", ".", "ceil", "(", "radius", ")", "-", "1", ")", "\n", "\n", "self", ".", "search_paths", ",", "self", ".", "search_dst", "=", "self", ".", "get_search_paths_dst", "(", "self", ".", "radius", ")", "\n", "\n", "self", ".", "path_indices", ",", "self", ".", "src_indices", ",", "self", ".", "dst_indices", "=", "self", ".", "get_path_indices", "(", "default_size", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.PathIndex.get_search_paths_dst": [[18, 57], ["range", "range", "numpy.concatenate", "search_dirs.append", "range", "sorted", "sorted", "range", "path_coords.sort", "len", "coord_indices_by_length[].append", "numpy.asarray", "range", "range", "search_dirs.append", "path_coords.append", "abs", "abs"], "methods", ["None"], ["", "def", "get_search_paths_dst", "(", "self", ",", "max_radius", "=", "5", ")", ":", "\n", "\n", "        ", "coord_indices_by_length", "=", "[", "[", "]", "for", "_", "in", "range", "(", "max_radius", "*", "4", ")", "]", "\n", "\n", "search_dirs", "=", "[", "]", "\n", "\n", "for", "x", "in", "range", "(", "1", ",", "max_radius", ")", ":", "\n", "            ", "search_dirs", ".", "append", "(", "(", "0", ",", "x", ")", ")", "\n", "\n", "", "for", "y", "in", "range", "(", "1", ",", "max_radius", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "-", "max_radius", "+", "1", ",", "max_radius", ")", ":", "\n", "                ", "if", "x", "*", "x", "+", "y", "*", "y", "<", "max_radius", "**", "2", ":", "\n", "                    ", "search_dirs", ".", "append", "(", "(", "y", ",", "x", ")", ")", "\n", "\n", "", "", "", "for", "dir", "in", "search_dirs", ":", "\n", "\n", "            ", "length_sq", "=", "dir", "[", "0", "]", "**", "2", "+", "dir", "[", "1", "]", "**", "2", "\n", "path_coords", "=", "[", "]", "\n", "\n", "min_y", ",", "max_y", "=", "sorted", "(", "(", "0", ",", "dir", "[", "0", "]", ")", ")", "\n", "min_x", ",", "max_x", "=", "sorted", "(", "(", "0", ",", "dir", "[", "1", "]", ")", ")", "\n", "\n", "for", "y", "in", "range", "(", "min_y", ",", "max_y", "+", "1", ")", ":", "\n", "                ", "for", "x", "in", "range", "(", "min_x", ",", "max_x", "+", "1", ")", ":", "\n", "\n", "                    ", "dist_sq", "=", "(", "dir", "[", "0", "]", "*", "x", "-", "dir", "[", "1", "]", "*", "y", ")", "**", "2", "/", "length_sq", "\n", "\n", "if", "dist_sq", "<", "1", ":", "\n", "                        ", "path_coords", ".", "append", "(", "[", "y", ",", "x", "]", ")", "\n", "\n", "", "", "", "path_coords", ".", "sort", "(", "key", "=", "lambda", "x", ":", "-", "abs", "(", "x", "[", "0", "]", ")", "-", "abs", "(", "x", "[", "1", "]", ")", ")", "\n", "path_length", "=", "len", "(", "path_coords", ")", "\n", "\n", "coord_indices_by_length", "[", "path_length", "]", ".", "append", "(", "path_coords", ")", "\n", "\n", "", "path_list_by_length", "=", "[", "np", ".", "asarray", "(", "v", ")", "for", "v", "in", "coord_indices_by_length", "if", "v", "]", "\n", "path_destinations", "=", "np", ".", "concatenate", "(", "[", "p", "[", ":", ",", "0", "]", "for", "p", "in", "path_list_by_length", "]", ",", "axis", "=", "0", ")", "\n", "\n", "return", "path_list_by_length", ",", "path_destinations", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.PathIndex.get_path_indices": [[58, 89], ["numpy.reshape", "numpy.reshape", "numpy.concatenate", "numpy.arange", "path_indices.append", "path_indices_list.append", "numpy.array", "numpy.reshape", "coord_indices_list.append"], "methods", ["None"], ["", "def", "get_path_indices", "(", "self", ",", "size", ")", ":", "\n", "\n", "        ", "full_indices", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "0", ",", "size", "[", "0", "]", "*", "size", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", ")", "\n", "\n", "cropped_height", "=", "size", "[", "0", "]", "-", "self", ".", "radius_floor", "\n", "cropped_width", "=", "size", "[", "1", "]", "-", "2", "*", "self", ".", "radius_floor", "\n", "\n", "path_indices", "=", "[", "]", "\n", "\n", "for", "paths", "in", "self", ".", "search_paths", ":", "\n", "\n", "            ", "path_indices_list", "=", "[", "]", "\n", "for", "p", "in", "paths", ":", "\n", "\n", "                ", "coord_indices_list", "=", "[", "]", "\n", "\n", "for", "dy", ",", "dx", "in", "p", ":", "\n", "                    ", "coord_indices", "=", "full_indices", "[", "dy", ":", "dy", "+", "cropped_height", ",", "\n", "self", ".", "radius_floor", "+", "dx", ":", "self", ".", "radius_floor", "+", "dx", "+", "cropped_width", "]", "\n", "coord_indices", "=", "np", ".", "reshape", "(", "coord_indices", ",", "[", "-", "1", "]", ")", "\n", "\n", "coord_indices_list", ".", "append", "(", "coord_indices", ")", "\n", "\n", "", "path_indices_list", ".", "append", "(", "coord_indices_list", ")", "\n", "\n", "", "path_indices", ".", "append", "(", "np", ".", "array", "(", "path_indices_list", ")", ")", "\n", "\n", "", "src_indices", "=", "np", ".", "reshape", "(", "full_indices", "[", ":", "cropped_height", ",", "self", ".", "radius_floor", ":", "self", ".", "radius_floor", "+", "cropped_width", "]", ",", "-", "1", ")", "\n", "dst_indices", "=", "np", ".", "concatenate", "(", "[", "p", "[", ":", ",", "0", "]", "for", "p", "in", "path_indices", "]", ",", "axis", "=", "0", ")", "\n", "\n", "return", "path_indices", ",", "src_indices", ",", "dst_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.edge_to_affinity": [[91, 110], ["edge.view.view", "range", "torch.cat", "torch.cat", "edge.view.size", "len", "isinstance", "paths_indices[].cuda", "ind.view", "torch.index_select", "torch.index_select", "dist.view.view", "torch.squeeze", "torch.squeeze", "aff_list.append", "torch.from_numpy", "torch.from_numpy", "dist.view.size", "ind.size", "ind.size", "ind.size", "torch.max_pool2d", "dist.view.size"], "function", ["None"], ["", "", "def", "edge_to_affinity", "(", "edge", ",", "paths_indices", ")", ":", "\n", "\n", "    ", "aff_list", "=", "[", "]", "\n", "edge", "=", "edge", ".", "view", "(", "edge", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "paths_indices", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "paths_indices", "[", "i", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "paths_indices", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "paths_indices", "[", "i", "]", ")", "\n", "", "paths_indices", "[", "i", "]", "=", "paths_indices", "[", "i", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "", "for", "ind", "in", "paths_indices", ":", "\n", "        ", "ind_flat", "=", "ind", ".", "view", "(", "-", "1", ")", "\n", "dist", "=", "torch", ".", "index_select", "(", "edge", ",", "dim", "=", "-", "1", ",", "index", "=", "ind_flat", ")", "\n", "dist", "=", "dist", ".", "view", "(", "dist", ".", "size", "(", "0", ")", ",", "ind", ".", "size", "(", "0", ")", ",", "ind", ".", "size", "(", "1", ")", ",", "ind", ".", "size", "(", "2", ")", ")", "\n", "aff", "=", "torch", ".", "squeeze", "(", "1", "-", "F", ".", "max_pool2d", "(", "dist", ",", "(", "dist", ".", "size", "(", "2", ")", ",", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "aff_list", ".", "append", "(", "aff", ")", "\n", "", "aff_cat", "=", "torch", ".", "cat", "(", "aff_list", ",", "dim", "=", "1", ")", "\n", "\n", "return", "aff_cat", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.affinity_sparse2dense": [[112, 130], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "affinity_sparse.view().cpu.view().cpu", "ind_from.repeat().view.repeat().view", "ind_to.view.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "affinity_sparse.view().cpu.view", "ind_from.repeat().view.repeat", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "ind_to.view.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "affinity_sparse2dense", "(", "affinity_sparse", ",", "ind_from", ",", "ind_to", ",", "n_vertices", ")", ":", "\n", "\n", "    ", "ind_from", "=", "torch", ".", "from_numpy", "(", "ind_from", ")", "\n", "ind_to", "=", "torch", ".", "from_numpy", "(", "ind_to", ")", "\n", "\n", "affinity_sparse", "=", "affinity_sparse", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "ind_from", "=", "ind_from", ".", "repeat", "(", "ind_to", ".", "size", "(", "0", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "ind_to", "=", "ind_to", ".", "view", "(", "-", "1", ")", "\n", "\n", "indices", "=", "torch", ".", "stack", "(", "[", "ind_from", ",", "ind_to", "]", ")", "\n", "indices_tp", "=", "torch", ".", "stack", "(", "[", "ind_to", ",", "ind_from", "]", ")", "\n", "\n", "indices_id", "=", "torch", ".", "stack", "(", "[", "torch", ".", "arange", "(", "0", ",", "n_vertices", ")", ".", "long", "(", ")", ",", "torch", ".", "arange", "(", "0", ",", "n_vertices", ")", ".", "long", "(", ")", "]", ")", "\n", "\n", "affinity_dense", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "torch", ".", "cat", "(", "[", "indices", ",", "indices_id", ",", "indices_tp", "]", ",", "dim", "=", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "affinity_sparse", ",", "torch", ".", "ones", "(", "[", "n_vertices", "]", ")", ",", "affinity_sparse", "]", ")", ")", ".", "to_dense", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "affinity_dense", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.to_transition_matrix": [[132, 140], ["torch.pow", "torch.pow", "range", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "to_transition_matrix", "(", "affinity_dense", ",", "beta", ",", "times", ")", ":", "\n", "    ", "scaled_affinity", "=", "torch", ".", "pow", "(", "affinity_dense", ",", "beta", ")", "\n", "\n", "trans_mat", "=", "scaled_affinity", "/", "torch", ".", "sum", "(", "scaled_affinity", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "for", "_", "in", "range", "(", "times", ")", ":", "\n", "        ", "trans_mat", "=", "torch", ".", "matmul", "(", "trans_mat", ",", "trans_mat", ")", "\n", "\n", "", "return", "trans_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.propagate_to_edge": [[141, 168], ["indexing.PathIndex", "torch.pad", "indexing.edge_to_affinity", "indexing.affinity_sparse2dense", "dense_aff.reshape.view", "dense_aff.reshape.reshape", "indexing.to_transition_matrix", "torch.matmul", "torch.matmul", "rw.view.view", "torch.unsqueeze", "torch.unsqueeze", "x.view", "x.view", "rw.view.size"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.edge_to_affinity", "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.affinity_sparse2dense", "home.repos.pwc.inspect_result.gaviotas_amn.misc.indexing.to_transition_matrix"], ["", "def", "propagate_to_edge", "(", "x", ",", "edge", ",", "radius", "=", "5", ",", "beta", "=", "10", ",", "exp_times", "=", "8", ")", ":", "\n", "\n", "    ", "height", ",", "width", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "hor_padded", "=", "width", "+", "radius", "*", "2", "\n", "ver_padded", "=", "height", "+", "radius", "\n", "\n", "path_index", "=", "PathIndex", "(", "radius", "=", "radius", ",", "default_size", "=", "(", "ver_padded", ",", "hor_padded", ")", ")", "\n", "\n", "edge_padded", "=", "F", ".", "pad", "(", "edge", ",", "(", "radius", ",", "radius", ",", "0", ",", "radius", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "1.0", ")", "\n", "sparse_aff", "=", "edge_to_affinity", "(", "torch", ".", "unsqueeze", "(", "edge_padded", ",", "0", ")", ",", "\n", "path_index", ".", "path_indices", ")", "\n", "\n", "dense_aff", "=", "affinity_sparse2dense", "(", "sparse_aff", ",", "path_index", ".", "src_indices", ",", "\n", "path_index", ".", "dst_indices", ",", "ver_padded", "*", "hor_padded", ")", "\n", "dense_aff", "=", "dense_aff", ".", "view", "(", "ver_padded", ",", "hor_padded", ",", "ver_padded", ",", "hor_padded", ")", "\n", "dense_aff", "=", "dense_aff", "[", ":", "-", "radius", ",", "radius", ":", "-", "radius", ",", ":", "-", "radius", ",", "radius", ":", "-", "radius", "]", "\n", "dense_aff", "=", "dense_aff", ".", "reshape", "(", "height", "*", "width", ",", "height", "*", "width", ")", "\n", "\n", "trans_mat", "=", "to_transition_matrix", "(", "dense_aff", ",", "beta", "=", "beta", ",", "times", "=", "exp_times", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "height", ",", "width", ")", "*", "(", "1", "-", "edge", ")", "\n", "\n", "rw", "=", "torch", ".", "matmul", "(", "x", ".", "view", "(", "-", "1", ",", "height", "*", "width", ")", ",", "trans_mat", ")", "\n", "rw", "=", "rw", ".", "view", "(", "rw", ".", "size", "(", "0", ")", ",", "1", ",", "height", ",", "width", ")", "\n", "\n", "return", "rw", "", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.TorchvisionNormalize.__init__": [[66, 69], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.TorchvisionNormalize.__call__": [[70, 79], ["numpy.asarray", "numpy.empty_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "imgarr", "=", "np", ".", "asarray", "(", "img", ")", "\n", "proc_img", "=", "np", ".", "empty_like", "(", "imgarr", ",", "np", ".", "float32", ")", "\n", "\n", "proc_img", "[", "...", ",", "0", "]", "=", "(", "imgarr", "[", "...", ",", "0", "]", "/", "255.", "-", "self", ".", "mean", "[", "0", "]", ")", "/", "self", ".", "std", "[", "0", "]", "\n", "proc_img", "[", "...", ",", "1", "]", "=", "(", "imgarr", "[", "...", ",", "1", "]", "/", "255.", "-", "self", ".", "mean", "[", "1", "]", ")", "/", "self", ".", "std", "[", "1", "]", "\n", "proc_img", "[", "...", ",", "2", "]", "=", "(", "imgarr", "[", "...", ",", "2", "]", "/", "255.", "-", "self", ".", "mean", "[", "2", "]", ")", "/", "self", ".", "std", "[", "2", "]", "\n", "\n", "return", "proc_img", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.GetAffinityLabelFromIndices.__init__": [[82, 86], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "indices_from", ",", "indices_to", ")", ":", "\n", "\n", "        ", "self", ".", "indices_from", "=", "indices_from", "\n", "self", ".", "indices_to", "=", "indices_to", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.GetAffinityLabelFromIndices.__call__": [[87, 107], ["numpy.reshape", "numpy.expand_dims", "numpy.logical_and", "numpy.equal", "numpy.logical_and", "numpy.logical_and().astype", "numpy.logical_and().astype", "numpy.logical_and().astype", "numpy.less", "numpy.less", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.equal", "numpy.greater", "numpy.logical_not"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "segm_map", ")", ":", "\n", "\n", "        ", "segm_map_flat", "=", "np", ".", "reshape", "(", "segm_map", ",", "-", "1", ")", "\n", "\n", "segm_label_from", "=", "np", ".", "expand_dims", "(", "segm_map_flat", "[", "self", ".", "indices_from", "]", ",", "axis", "=", "0", ")", "\n", "segm_label_to", "=", "segm_map_flat", "[", "self", ".", "indices_to", "]", "\n", "\n", "valid_label", "=", "np", ".", "logical_and", "(", "np", ".", "less", "(", "segm_label_from", ",", "21", ")", ",", "np", ".", "less", "(", "segm_label_to", ",", "21", ")", ")", "\n", "\n", "equal_label", "=", "np", ".", "equal", "(", "segm_label_from", ",", "segm_label_to", ")", "\n", "\n", "pos_affinity_label", "=", "np", ".", "logical_and", "(", "equal_label", ",", "valid_label", ")", "\n", "\n", "bg_pos_affinity_label", "=", "np", ".", "logical_and", "(", "pos_affinity_label", ",", "np", ".", "equal", "(", "segm_label_from", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "fg_pos_affinity_label", "=", "np", ".", "logical_and", "(", "pos_affinity_label", ",", "np", ".", "greater", "(", "segm_label_from", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "neg_affinity_label", "=", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "equal_label", ")", ",", "valid_label", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "bg_pos_affinity_label", ")", ",", "torch", ".", "from_numpy", "(", "fg_pos_affinity_label", ")", ",", "torch", ".", "from_numpy", "(", "neg_affinity_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12ImageDataset.__init__": [[111, 125], ["dataloader.TorchvisionNormalize", "dataloader.load_img_name_list"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.load_img_name_list"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "voc12_root", ",", "\n", "resize_long", "=", "None", ",", "rescale", "=", "None", ",", "img_normal", "=", "TorchvisionNormalize", "(", ")", ",", "hor_flip", "=", "False", ",", "\n", "crop_size", "=", "None", ",", "crop_method", "=", "None", ",", "to_torch", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "img_name_list", "=", "load_img_name_list", "(", "img_name_list_path", ")", "\n", "self", ".", "voc12_root", "=", "voc12_root", "\n", "\n", "self", ".", "resize_long", "=", "resize_long", "\n", "self", ".", "rescale", "=", "rescale", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "img_normal", "=", "img_normal", "\n", "self", ".", "hor_flip", "=", "hor_flip", "\n", "self", ".", "crop_method", "=", "crop_method", "\n", "self", ".", "to_torch", "=", "to_torch", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12ImageDataset.__len__": [[126, 128], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12ImageDataset.__getitem__": [[129, 157], ["dataloader.decode_int_filename", "numpy.asarray", "imageio.imread", "misc.imutils.random_resize_long", "misc.imutils.random_scale", "dataloader.VOC12ImageDataset.img_normal", "misc.imutils.random_lr_flip", "misc.imutils.HWC_to_CHW", "dataloader.get_img_path", "misc.imutils.random_crop", "misc.imutils.top_left_crop"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.decode_int_filename", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.random_resize_long", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.random_scale", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.random_lr_flip", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.HWC_to_CHW", "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.get_img_path", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.random_crop", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.top_left_crop"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "img_name_list", "[", "idx", "]", "\n", "name_str", "=", "decode_int_filename", "(", "name", ")", "\n", "\n", "img", "=", "np", ".", "asarray", "(", "imageio", ".", "imread", "(", "get_img_path", "(", "name_str", ",", "self", ".", "voc12_root", ")", ")", ")", "\n", "\n", "if", "self", ".", "resize_long", ":", "\n", "            ", "img", "=", "imutils", ".", "random_resize_long", "(", "img", ",", "self", ".", "resize_long", "[", "0", "]", ",", "self", ".", "resize_long", "[", "1", "]", ")", "\n", "\n", "", "if", "self", ".", "rescale", ":", "\n", "            ", "img", "=", "imutils", ".", "random_scale", "(", "img", ",", "scale_range", "=", "self", ".", "rescale", ",", "order", "=", "3", ")", "\n", "\n", "", "if", "self", ".", "img_normal", ":", "\n", "            ", "img", "=", "self", ".", "img_normal", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "hor_flip", ":", "\n", "            ", "img", "=", "imutils", ".", "random_lr_flip", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "crop_size", ":", "\n", "            ", "if", "self", ".", "crop_method", "==", "\"random\"", ":", "\n", "                ", "img", "=", "imutils", ".", "random_crop", "(", "img", ",", "self", ".", "crop_size", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "imutils", ".", "top_left_crop", "(", "img", ",", "self", ".", "crop_size", ",", "0", ")", "\n", "\n", "", "", "if", "self", ".", "to_torch", ":", "\n", "            ", "img", "=", "imutils", ".", "HWC_to_CHW", "(", "img", ")", "\n", "\n", "", "return", "{", "'name'", ":", "name_str", ",", "'img'", ":", "img", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12ClassificationDataset.__init__": [[160, 167], ["dataloader.TorchvisionNormalize", "dataloader.VOC12ImageDataset.__init__", "dataloader.load_image_label_list_from_npy"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__", "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.load_image_label_list_from_npy"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "voc12_root", ",", "\n", "resize_long", "=", "None", ",", "rescale", "=", "None", ",", "img_normal", "=", "TorchvisionNormalize", "(", ")", ",", "hor_flip", "=", "False", ",", "\n", "crop_size", "=", "None", ",", "crop_method", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "img_name_list_path", ",", "voc12_root", ",", "\n", "resize_long", ",", "rescale", ",", "img_normal", ",", "hor_flip", ",", "\n", "crop_size", ",", "crop_method", ")", "\n", "self", ".", "label_list", "=", "load_image_label_list_from_npy", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12ClassificationDataset.__getitem__": [[168, 174], ["dataloader.VOC12ImageDataset.__getitem__", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12AffinityDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "out", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "out", "[", "'label'", "]", "=", "torch", ".", "from_numpy", "(", "self", ".", "label_list", "[", "idx", "]", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12ClassificationDatasetMSF.__init__": [[177, 184], ["dataloader.TorchvisionNormalize", "dataloader.VOC12ClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "voc12_root", ",", "\n", "img_normal", "=", "TorchvisionNormalize", "(", ")", ",", "\n", "scales", "=", "(", "1.0", ",", ")", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "img_name_list_path", ",", "voc12_root", ",", "img_normal", "=", "img_normal", ")", "\n", "self", ".", "scales", "=", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12ClassificationDatasetMSF.__getitem__": [[185, 206], ["dataloader.decode_int_filename", "imageio.imread", "dataloader.get_img_path", "dataloader.VOC12ClassificationDatasetMSF.img_normal", "misc.imutils.HWC_to_CHW", "ms_img_list.append", "len", "torch.from_numpy", "misc.imutils.pil_rescale", "numpy.stack", "numpy.flip"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.decode_int_filename", "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.get_img_path", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.HWC_to_CHW", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.pil_rescale"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "img_name_list", "[", "idx", "]", "\n", "name_str", "=", "decode_int_filename", "(", "name", ")", "\n", "\n", "img", "=", "imageio", ".", "imread", "(", "get_img_path", "(", "name_str", ",", "self", ".", "voc12_root", ")", ")", "\n", "\n", "ms_img_list", "=", "[", "]", "\n", "for", "s", "in", "self", ".", "scales", ":", "\n", "            ", "if", "s", "==", "1", ":", "\n", "                ", "s_img", "=", "img", "\n", "", "else", ":", "\n", "                ", "s_img", "=", "imutils", ".", "pil_rescale", "(", "img", ",", "s", ",", "order", "=", "3", ")", "\n", "", "s_img", "=", "self", ".", "img_normal", "(", "s_img", ")", "\n", "s_img", "=", "imutils", ".", "HWC_to_CHW", "(", "s_img", ")", "\n", "ms_img_list", ".", "append", "(", "np", ".", "stack", "(", "[", "s_img", ",", "np", ".", "flip", "(", "s_img", ",", "-", "1", ")", "]", ",", "axis", "=", "0", ")", ")", "\n", "", "if", "len", "(", "self", ".", "scales", ")", "==", "1", ":", "\n", "            ", "ms_img_list", "=", "ms_img_list", "[", "0", "]", "\n", "\n", "", "out", "=", "{", "\"name\"", ":", "name_str", ",", "\"img\"", ":", "ms_img_list", ",", "\"size\"", ":", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", ",", "\n", "\"label\"", ":", "torch", ".", "from_numpy", "(", "self", ".", "label_list", "[", "idx", "]", ")", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12SegmentationDataset.__init__": [[209, 225], ["dataloader.TorchvisionNormalize", "dataloader.load_img_name_list", "dataloader.load_image_label_list_from_npy"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.load_img_name_list", "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.load_image_label_list_from_npy"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "label_dir", ",", "crop_size", ",", "voc12_root", ",", "\n", "rescale", "=", "None", ",", "img_normal", "=", "TorchvisionNormalize", "(", ")", ",", "hor_flip", "=", "False", ",", "\n", "crop_method", "=", "'random'", ")", ":", "\n", "\n", "        ", "self", ".", "img_name_list", "=", "load_img_name_list", "(", "img_name_list_path", ")", "\n", "self", ".", "voc12_root", "=", "voc12_root", "\n", "\n", "self", ".", "label_dir", "=", "label_dir", "\n", "\n", "self", ".", "rescale", "=", "rescale", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "img_normal", "=", "img_normal", "\n", "self", ".", "hor_flip", "=", "hor_flip", "\n", "self", ".", "crop_method", "=", "crop_method", "\n", "\n", "self", ".", "label_list", "=", "load_image_label_list_from_npy", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12SegmentationDataset.__len__": [[226, 228], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12SegmentationDataset.__getitem__": [[229, 259], ["dataloader.decode_int_filename", "imageio.imread", "imageio.imread", "numpy.asarray", "numpy.asarray", "misc.imutils.HWC_to_CHW", "dataloader.get_img_path", "os.path.join", "misc.imutils.random_scale", "dataloader.VOC12SegmentationDataset.img_normal", "misc.imutils.random_lr_flip", "misc.imutils.random_crop", "torch.from_numpy", "misc.imutils.top_left_crop", "misc.imutils.top_left_crop"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.decode_int_filename", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.HWC_to_CHW", "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.get_img_path", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.random_scale", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.random_lr_flip", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.random_crop", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.top_left_crop", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.top_left_crop"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "img_name_list", "[", "idx", "]", "\n", "name_str", "=", "decode_int_filename", "(", "name", ")", "\n", "\n", "img", "=", "imageio", ".", "imread", "(", "get_img_path", "(", "name_str", ",", "self", ".", "voc12_root", ")", ")", "\n", "label", "=", "imageio", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "label_dir", ",", "name_str", "+", "'.png'", ")", ")", "\n", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ")", "\n", "\n", "if", "self", ".", "rescale", ":", "\n", "            ", "img", ",", "label", "=", "imutils", ".", "random_scale", "(", "(", "img", ",", "label", ")", ",", "scale_range", "=", "self", ".", "rescale", ",", "order", "=", "(", "3", ",", "0", ")", ")", "\n", "\n", "", "if", "self", ".", "img_normal", ":", "\n", "            ", "img", "=", "self", ".", "img_normal", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "hor_flip", ":", "\n", "            ", "img", ",", "label", "=", "imutils", ".", "random_lr_flip", "(", "(", "img", ",", "label", ")", ")", "\n", "\n", "", "if", "self", ".", "crop_method", "==", "\"random\"", ":", "\n", "            ", "img", ",", "label", "=", "imutils", ".", "random_crop", "(", "(", "img", ",", "label", ")", ",", "self", ".", "crop_size", ",", "(", "0", ",", "255", ")", ")", "\n", "", "elif", "self", ".", "crop_method", "==", "'none'", ":", "\n", "            ", "img", ",", "label", "=", "img", ",", "label", "\n", "", "else", ":", "\n", "            ", "img", "=", "imutils", ".", "top_left_crop", "(", "img", ",", "self", ".", "crop_size", ",", "0", ")", "\n", "label", "=", "imutils", ".", "top_left_crop", "(", "label", ",", "self", ".", "crop_size", ",", "255", ")", "\n", "\n", "", "img", "=", "imutils", ".", "HWC_to_CHW", "(", "img", ")", "\n", "\n", "return", "{", "'name'", ":", "name", ",", "'img'", ":", "img", ",", "'label'", ":", "label", ",", "\"label_cls\"", ":", "torch", ".", "from_numpy", "(", "self", ".", "label_list", "[", "idx", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12AffinityDataset.__init__": [[261, 267], ["dataloader.TorchvisionNormalize", "dataloader.VOC12SegmentationDataset.__init__", "dataloader.GetAffinityLabelFromIndices"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "label_dir", ",", "crop_size", ",", "voc12_root", ",", "\n", "indices_from", ",", "indices_to", ",", "\n", "rescale", "=", "None", ",", "img_normal", "=", "TorchvisionNormalize", "(", ")", ",", "hor_flip", "=", "False", ",", "crop_method", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "img_name_list_path", ",", "label_dir", ",", "crop_size", ",", "voc12_root", ",", "rescale", ",", "img_normal", ",", "hor_flip", ",", "crop_method", "=", "crop_method", ")", "\n", "\n", "self", ".", "extract_aff_lab_func", "=", "GetAffinityLabelFromIndices", "(", "indices_from", ",", "indices_to", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12AffinityDataset.__len__": [[268, 270], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12AffinityDataset.__getitem__": [[271, 279], ["dataloader.VOC12SegmentationDataset.__getitem__", "misc.imutils.pil_rescale", "dataloader.VOC12AffinityDataset.extract_aff_lab_func"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.VOC12AffinityDataset.__getitem__", "home.repos.pwc.inspect_result.gaviotas_amn.misc.imutils.pil_rescale"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "out", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "reduced_label", "=", "imutils", ".", "pil_rescale", "(", "out", "[", "'label'", "]", ",", "0.25", ",", "0", ")", "\n", "\n", "out", "[", "'aff_bg_pos_label'", "]", ",", "out", "[", "'aff_fg_pos_label'", "]", ",", "out", "[", "'aff_neg_label'", "]", "=", "self", ".", "extract_aff_lab_func", "(", "reduced_label", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.decode_int_filename": [[26, 29], ["str", "int"], "function", ["None"], ["def", "decode_int_filename", "(", "int_filename", ")", ":", "\n", "    ", "s", "=", "str", "(", "int", "(", "int_filename", ")", ")", "\n", "return", "s", "[", ":", "4", "]", "+", "'_'", "+", "s", "[", "4", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.load_image_label_from_xml": [[30, 44], ["minidom.parse().getElementsByTagName", "numpy.zeros", "minidom.parse", "os.path.join", "dataloader.decode_int_filename"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.decode_int_filename"], ["", "def", "load_image_label_from_xml", "(", "img_name", ",", "voc12_root", ")", ":", "\n", "    ", "from", "xml", ".", "dom", "import", "minidom", "\n", "\n", "elem_list", "=", "minidom", ".", "parse", "(", "os", ".", "path", ".", "join", "(", "voc12_root", ",", "ANNOT_FOLDER_NAME", ",", "decode_int_filename", "(", "img_name", ")", "+", "'.xml'", ")", ")", ".", "getElementsByTagName", "(", "'name'", ")", "\n", "\n", "multi_cls_lab", "=", "np", ".", "zeros", "(", "(", "N_CAT", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "elem", "in", "elem_list", ":", "\n", "        ", "cat_name", "=", "elem", ".", "firstChild", ".", "data", "\n", "if", "cat_name", "in", "CAT_LIST", ":", "\n", "            ", "cat_num", "=", "CAT_NAME_TO_NUM", "[", "cat_name", "]", "\n", "multi_cls_lab", "[", "cat_num", "]", "=", "1.0", "\n", "\n", "", "", "return", "multi_cls_lab", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.load_image_label_list_from_xml": [[45, 48], ["dataloader.load_image_label_from_xml"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.load_image_label_from_xml"], ["", "def", "load_image_label_list_from_xml", "(", "img_name_list", ",", "voc12_root", ")", ":", "\n", "\n", "    ", "return", "[", "load_image_label_from_xml", "(", "img_name", ",", "voc12_root", ")", "for", "img_name", "in", "img_name_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.load_image_label_list_from_npy": [[49, 52], ["numpy.array"], "function", ["None"], ["", "def", "load_image_label_list_from_npy", "(", "img_name_list", ")", ":", "\n", "\n", "    ", "return", "np", ".", "array", "(", "[", "cls_labels_dict", "[", "img_name", "]", "for", "img_name", "in", "img_name_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.get_img_path": [[53, 57], ["os.path.join", "isinstance", "dataloader.decode_int_filename"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.decode_int_filename"], ["", "def", "get_img_path", "(", "img_name", ",", "voc12_root", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "img_name", ",", "str", ")", ":", "\n", "        ", "img_name", "=", "decode_int_filename", "(", "img_name", ")", "\n", "", "return", "os", ".", "path", ".", "join", "(", "voc12_root", ",", "IMG_FOLDER_NAME", ",", "img_name", "+", "'.jpg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.voc12.dataloader.load_img_name_list": [[58, 63], ["numpy.loadtxt"], "function", ["None"], ["", "def", "load_img_name_list", "(", "dataset_path", ")", ":", "\n", "\n", "    ", "img_name_list", "=", "np", ".", "loadtxt", "(", "dataset_path", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "img_name_list", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_amn._ASPP.__init__": [[10, 21], ["torch.Module.__init__", "enumerate", "resnet50_amn._ASPP.children", "resnet50_amn._ASPP.add_module", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__"], ["def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "rates", ")", ":", "\n", "        ", "super", "(", "_ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", ",", "rate", "in", "enumerate", "(", "rates", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\n", "\"c{}\"", ".", "format", "(", "i", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "1", ",", "padding", "=", "rate", ",", "dilation", "=", "rate", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_amn._ASPP.forward": [[22, 24], ["sum", "stage", "resnet50_amn._ASPP.children"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "sum", "(", "[", "stage", "(", "x", ")", "for", "stage", "in", "self", ".", "children", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_amn.Net.__init__": [[28, 50], ["torch.Module.__init__", "net.resnet50.resnet50", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "resnet50_amn._ASPP"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.resnet50"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resnet50", "=", "resnet50", ".", "resnet50", "(", "pretrained", "=", "True", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ",", "1", ")", ")", "\n", "\n", "self", ".", "stage1", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "conv1", ",", "self", ".", "resnet50", ".", "bn1", ",", "self", ".", "resnet50", ".", "relu", ",", "self", ".", "resnet50", ".", "maxpool", ",", "\n", "self", ".", "resnet50", ".", "layer1", ")", "\n", "self", ".", "stage2", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "layer2", ")", "\n", "self", ".", "stage3", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "layer3", ")", "\n", "self", ".", "stage4", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "layer4", ")", "\n", "\n", "astrous_rates", "=", "[", "6", ",", "12", ",", "18", ",", "24", "]", "\n", "\n", "self", ".", "label_enc", "=", "nn", ".", "Linear", "(", "20", ",", "2048", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ",", "\n", "_ASPP", "(", "in_ch", "=", "2048", ",", "out_ch", "=", "21", ",", "rates", "=", "astrous_rates", ")", "\n", ")", "\n", "\n", "self", ".", "backbone", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "stage1", ",", "self", ".", "stage2", ",", "self", ".", "stage3", ",", "self", ".", "stage4", "]", ")", "\n", "self", ".", "newly_added", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "classifier", ",", "self", ".", "label_enc", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_amn.Net.forward": [[51, 65], ["resnet50_amn.Net.label_enc().unsqueeze().unsqueeze", "resnet50_amn.Net.stage1", "resnet50_amn.Net.stage2", "resnet50_amn.Net.stage3", "resnet50_amn.Net.stage4", "resnet50_amn.Net.classifier", "resnet50_amn.Net.label_enc().unsqueeze", "resnet50_amn.Net.label_enc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "label_cls", ")", ":", "\n", "\n", "        ", "y", "=", "self", ".", "label_enc", "(", "label_cls", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "x", "=", "self", ".", "stage1", "(", "img", ")", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "\n", "x", "=", "x", "*", "y", "\n", "\n", "logit", "=", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_amn.Net.train": [[66, 71], ["resnet50_amn.Net.resnet50.conv1.parameters", "resnet50_amn.Net.resnet50.bn1.parameters"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "resnet50", ".", "conv1", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "self", ".", "resnet50", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_amn.Net.trainable_parameters": [[72, 75], ["list", "list", "resnet50_amn.Net.backbone.parameters", "resnet50_amn.Net.newly_added.parameters"], "methods", ["None"], ["", "", "def", "trainable_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "return", "(", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", ",", "list", "(", "self", ".", "newly_added", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_amn.CAM.__init__": [[79, 81], ["resnet50_amn.Net.__init__"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_amn.CAM.forward": [[82, 101], ["resnet50_amn.CAM.stage1", "resnet50_amn.CAM.stage2", "resnet50_amn.CAM.stage3", "resnet50_amn.CAM.stage4", "resnet50_amn.CAM.label_enc", "y.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "resnet50_amn.CAM.classifier", "y.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "logit[].flip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "stage1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "\n", "y", "=", "self", ".", "label_enc", "(", "y", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "x", "=", "x", "*", "y", "\n", "\n", "logit", "=", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "logit", "=", "(", "logit", "[", "0", "]", "+", "logit", "[", "1", "]", ".", "flip", "(", "-", "1", ")", ")", "/", "2", "\n", "\n", "return", "logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.Net.__init__": [[9, 98], ["torch.Module.__init__", "net.resnet50.resnet50", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "Net.MeanShift", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.resnet50"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# backbone", "\n", "self", ".", "resnet50", "=", "resnet50", ".", "resnet50", "(", "pretrained", "=", "True", ",", "strides", "=", "[", "2", ",", "2", ",", "2", ",", "1", "]", ")", "\n", "\n", "self", ".", "stage1", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "conv1", ",", "self", ".", "resnet50", ".", "bn1", ",", "self", ".", "resnet50", ".", "relu", ",", "self", ".", "resnet50", ".", "maxpool", ")", "\n", "self", ".", "stage2", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "layer1", ")", "\n", "self", ".", "stage3", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "layer2", ")", "\n", "self", ".", "stage4", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "layer3", ")", "\n", "self", ".", "stage5", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "layer4", ")", "\n", "self", ".", "mean_shift", "=", "Net", ".", "MeanShift", "(", "2", ")", "\n", "\n", "# branch: class boundary detection", "\n", "self", ".", "fc_edge1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "4", ",", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_edge2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "32", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "4", ",", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_edge3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "32", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "4", ",", "32", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_edge4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "32", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "4", ",", "32", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_edge5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2048", ",", "32", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "4", ",", "32", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_edge6", "=", "nn", ".", "Conv2d", "(", "160", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# branch: displacement field", "\n", "self", ".", "fc_dp1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_dp2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "16", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_dp3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_dp4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "256", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_dp5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2048", ",", "256", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_dp6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "768", ",", "256", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_dp7", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "448", ",", "256", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "mean_shift", "\n", ")", "\n", "\n", "self", ".", "backbone", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "stage1", ",", "self", ".", "stage2", ",", "self", ".", "stage3", ",", "self", ".", "stage4", ",", "self", ".", "stage5", "]", ")", "\n", "self", ".", "edge_layers", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "fc_edge1", ",", "self", ".", "fc_edge2", ",", "self", ".", "fc_edge3", ",", "self", ".", "fc_edge4", ",", "self", ".", "fc_edge5", ",", "self", ".", "fc_edge6", "]", ")", "\n", "self", ".", "dp_layers", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "fc_dp1", ",", "self", ".", "fc_dp2", ",", "self", ".", "fc_dp3", ",", "self", ".", "fc_dp4", ",", "self", ".", "fc_dp5", ",", "self", ".", "fc_dp6", ",", "self", ".", "fc_dp7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.Net.forward": [[110, 134], ["resnet50_irn.Net.stage1().detach", "resnet50_irn.Net.stage2().detach", "resnet50_irn.Net.stage3().detach", "resnet50_irn.Net.stage4().detach", "resnet50_irn.Net.stage5().detach", "resnet50_irn.Net.fc_edge1", "resnet50_irn.Net.fc_edge2", "resnet50_irn.Net.fc_edge6", "resnet50_irn.Net.fc_dp1", "resnet50_irn.Net.fc_dp2", "resnet50_irn.Net.fc_dp3", "resnet50_irn.Net.fc_dp7", "resnet50_irn.Net.fc_edge3", "resnet50_irn.Net.fc_edge4", "resnet50_irn.Net.fc_edge5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet50_irn.Net.fc_dp4", "resnet50_irn.Net.fc_dp5", "resnet50_irn.Net.fc_dp6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet50_irn.Net.stage1", "resnet50_irn.Net.stage2", "resnet50_irn.Net.stage3", "resnet50_irn.Net.stage4", "resnet50_irn.Net.stage5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet50_irn.Net.size", "resnet50_irn.Net.size", "resnet50_irn.Net.size", "resnet50_irn.Net.size", "resnet50_irn.Net.size", "resnet50_irn.Net.size", "resnet50_irn.Net.size", "resnet50_irn.Net.size", "resnet50_irn.Net.size", "resnet50_irn.Net.size", "resnet50_irn.Net.size", "resnet50_irn.Net.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "stage1", "(", "x", ")", ".", "detach", "(", ")", "\n", "x2", "=", "self", ".", "stage2", "(", "x1", ")", ".", "detach", "(", ")", "\n", "x3", "=", "self", ".", "stage3", "(", "x2", ")", ".", "detach", "(", ")", "\n", "x4", "=", "self", ".", "stage4", "(", "x3", ")", ".", "detach", "(", ")", "\n", "x5", "=", "self", ".", "stage5", "(", "x4", ")", ".", "detach", "(", ")", "\n", "\n", "edge1", "=", "self", ".", "fc_edge1", "(", "x1", ")", "\n", "edge2", "=", "self", ".", "fc_edge2", "(", "x2", ")", "\n", "edge3", "=", "self", ".", "fc_edge3", "(", "x3", ")", "[", "...", ",", ":", "edge2", ".", "size", "(", "2", ")", ",", ":", "edge2", ".", "size", "(", "3", ")", "]", "\n", "edge4", "=", "self", ".", "fc_edge4", "(", "x4", ")", "[", "...", ",", ":", "edge2", ".", "size", "(", "2", ")", ",", ":", "edge2", ".", "size", "(", "3", ")", "]", "\n", "edge5", "=", "self", ".", "fc_edge5", "(", "x5", ")", "[", "...", ",", ":", "edge2", ".", "size", "(", "2", ")", ",", ":", "edge2", ".", "size", "(", "3", ")", "]", "\n", "edge_out", "=", "self", ".", "fc_edge6", "(", "torch", ".", "cat", "(", "[", "edge1", ",", "edge2", ",", "edge3", ",", "edge4", ",", "edge5", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "dp1", "=", "self", ".", "fc_dp1", "(", "x1", ")", "\n", "dp2", "=", "self", ".", "fc_dp2", "(", "x2", ")", "\n", "dp3", "=", "self", ".", "fc_dp3", "(", "x3", ")", "\n", "dp4", "=", "self", ".", "fc_dp4", "(", "x4", ")", "[", "...", ",", ":", "dp3", ".", "size", "(", "2", ")", ",", ":", "dp3", ".", "size", "(", "3", ")", "]", "\n", "dp5", "=", "self", ".", "fc_dp5", "(", "x5", ")", "[", "...", ",", ":", "dp3", ".", "size", "(", "2", ")", ",", ":", "dp3", ".", "size", "(", "3", ")", "]", "\n", "\n", "dp_up3", "=", "self", ".", "fc_dp6", "(", "torch", ".", "cat", "(", "[", "dp3", ",", "dp4", ",", "dp5", "]", ",", "dim", "=", "1", ")", ")", "[", "...", ",", ":", "dp2", ".", "size", "(", "2", ")", ",", ":", "dp2", ".", "size", "(", "3", ")", "]", "\n", "dp_out", "=", "self", ".", "fc_dp7", "(", "torch", ".", "cat", "(", "[", "dp1", ",", "dp2", ",", "dp_up3", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "edge_out", ",", "dp_out", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.Net.trainable_parameters": [[135, 138], ["tuple", "tuple", "resnet50_irn.Net.edge_layers.parameters", "resnet50_irn.Net.dp_layers.parameters"], "methods", ["None"], ["", "def", "trainable_parameters", "(", "self", ")", ":", "\n", "        ", "return", "(", "tuple", "(", "self", ".", "edge_layers", ".", "parameters", "(", ")", ")", ",", "\n", "tuple", "(", "self", ".", "dp_layers", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.Net.train": [[139, 142], ["super().train", "resnet50_irn.Net.backbone.eval"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "backbone", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.AffinityDisplacementLoss.__init__": [[148, 161], ["resnet50_irn.Net.__init__", "len", "enumerate", "resnet50_irn.AffinityDisplacementLoss.register_buffer", "resnet50_irn.AffinityDisplacementLoss.register_buffer", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "str", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.from_numpy().transpose", "torch.from_numpy().transpose", "torch.from_numpy().transpose", "torch.from_numpy().transpose", "torch.from_numpy().transpose", "torch.from_numpy().transpose", "torch.from_numpy().transpose", "torch.from_numpy().transpose", "torch.from_numpy().transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__"], ["def", "__init__", "(", "self", ",", "path_index", ")", ":", "\n", "\n", "        ", "super", "(", "AffinityDisplacementLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "path_index", "=", "path_index", "\n", "\n", "self", ".", "n_path_lengths", "=", "len", "(", "path_index", ".", "path_indices", ")", "\n", "for", "i", ",", "pi", "in", "enumerate", "(", "path_index", ".", "path_indices", ")", ":", "\n", "            ", "self", ".", "register_buffer", "(", "AffinityDisplacementLoss", ".", "path_indices_prefix", "+", "str", "(", "i", ")", ",", "torch", ".", "from_numpy", "(", "pi", ")", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "\n", "'disp_target'", ",", "\n", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "from_numpy", "(", "path_index", ".", "search_dst", ")", ".", "transpose", "(", "1", ",", "0", ")", ",", "0", ")", ",", "-", "1", ")", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.AffinityDisplacementLoss.to_affinity": [[162, 176], ["edge.view.view.view", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge.view.view.size", "ind.view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "dist.view.view.view", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "aff_list.append", "dist.view.view.size", "ind.size", "ind.size", "ind.size", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "str", "dist.view.view.size"], "methods", ["None"], ["", "def", "to_affinity", "(", "self", ",", "edge", ")", ":", "\n", "        ", "aff_list", "=", "[", "]", "\n", "edge", "=", "edge", ".", "view", "(", "edge", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_path_lengths", ")", ":", "\n", "            ", "ind", "=", "self", ".", "_buffers", "[", "AffinityDisplacementLoss", ".", "path_indices_prefix", "+", "str", "(", "i", ")", "]", "\n", "ind_flat", "=", "ind", ".", "view", "(", "-", "1", ")", "\n", "dist", "=", "torch", ".", "index_select", "(", "edge", ",", "dim", "=", "-", "1", ",", "index", "=", "ind_flat", ")", "\n", "dist", "=", "dist", ".", "view", "(", "dist", ".", "size", "(", "0", ")", ",", "ind", ".", "size", "(", "0", ")", ",", "ind", ".", "size", "(", "1", ")", ",", "ind", ".", "size", "(", "2", ")", ")", "\n", "aff", "=", "torch", ".", "squeeze", "(", "1", "-", "F", ".", "max_pool2d", "(", "dist", ",", "(", "dist", ".", "size", "(", "2", ")", ",", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "aff_list", ".", "append", "(", "aff", ")", "\n", "", "aff_cat", "=", "torch", ".", "cat", "(", "aff_list", ",", "dim", "=", "1", ")", "\n", "\n", "return", "aff_cat", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.AffinityDisplacementLoss.to_pair_displacement": [[177, 194], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "pair_disp.view.view.view", "disp.size", "disp.size", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "pair_disp.view.view.size", "pair_disp.view.view.size", "pair_disp.view.view.size"], "methods", ["None"], ["", "def", "to_pair_displacement", "(", "self", ",", "disp", ")", ":", "\n", "        ", "height", ",", "width", "=", "disp", ".", "size", "(", "2", ")", ",", "disp", ".", "size", "(", "3", ")", "\n", "radius_floor", "=", "self", ".", "path_index", ".", "radius_floor", "\n", "\n", "cropped_height", "=", "height", "-", "radius_floor", "\n", "cropped_width", "=", "width", "-", "2", "*", "radius_floor", "\n", "\n", "disp_src", "=", "disp", "[", ":", ",", ":", ",", ":", "cropped_height", ",", "radius_floor", ":", "radius_floor", "+", "cropped_width", "]", "\n", "\n", "disp_dst", "=", "[", "disp", "[", ":", ",", ":", ",", "dy", ":", "dy", "+", "cropped_height", ",", "radius_floor", "+", "dx", ":", "radius_floor", "+", "dx", "+", "cropped_width", "]", "\n", "for", "dy", ",", "dx", "in", "self", ".", "path_index", ".", "search_dst", "]", "\n", "disp_dst", "=", "torch", ".", "stack", "(", "disp_dst", ",", "2", ")", "\n", "\n", "pair_disp", "=", "torch", ".", "unsqueeze", "(", "disp_src", ",", "2", ")", "-", "disp_dst", "\n", "pair_disp", "=", "pair_disp", ".", "view", "(", "pair_disp", ".", "size", "(", "0", ")", ",", "pair_disp", ".", "size", "(", "1", ")", ",", "pair_disp", ".", "size", "(", "2", ")", ",", "-", "1", ")", "\n", "\n", "return", "pair_disp", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.AffinityDisplacementLoss.to_displacement_loss": [[195, 197], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "to_displacement_loss", "(", "self", ",", "pair_disp", ")", ":", "\n", "        ", "return", "torch", ".", "abs", "(", "pair_disp", "-", "self", ".", "disp_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.AffinityDisplacementLoss.forward": [[198, 214], ["resnet50_irn.Net.forward", "resnet50_irn.AffinityDisplacementLoss.to_affinity", "resnet50_irn.AffinityDisplacementLoss.to_pair_displacement", "resnet50_irn.AffinityDisplacementLoss.to_displacement_loss", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.forward", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.AffinityDisplacementLoss.to_affinity", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.AffinityDisplacementLoss.to_pair_displacement", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.AffinityDisplacementLoss.to_displacement_loss"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "x", ",", "return_loss", "=", "inputs", "\n", "edge_out", ",", "dp_out", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "\n", "if", "return_loss", "is", "False", ":", "\n", "            ", "return", "edge_out", ",", "dp_out", "\n", "\n", "", "aff", "=", "self", ".", "to_affinity", "(", "torch", ".", "sigmoid", "(", "edge_out", ")", ")", "\n", "pos_aff_loss", "=", "(", "-", "1", ")", "*", "torch", ".", "log", "(", "aff", "+", "1e-5", ")", "\n", "neg_aff_loss", "=", "(", "-", "1", ")", "*", "torch", ".", "log", "(", "1.", "+", "1e-5", "-", "aff", ")", "\n", "\n", "pair_disp", "=", "self", ".", "to_pair_displacement", "(", "dp_out", ")", "\n", "dp_fg_loss", "=", "self", ".", "to_displacement_loss", "(", "pair_disp", ")", "\n", "dp_bg_loss", "=", "torch", ".", "abs", "(", "pair_disp", ")", "\n", "\n", "return", "pos_aff_loss", ",", "neg_aff_loss", ",", "dp_fg_loss", ",", "dp_bg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.EdgeDisplacement.__init__": [[218, 222], ["resnet50_irn.Net.__init__"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", "=", "512", ",", "stride", "=", "4", ")", ":", "\n", "        ", "super", "(", "EdgeDisplacement", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_irn.EdgeDisplacement.forward": [[223, 235], ["torch.pad", "torch.pad", "torch.pad", "resnet50_irn.Net.forward", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.pad.size", "torch.pad.size", "edge_out[].flip", "torch.pad.size", "torch.pad.size"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat_size", "=", "(", "x", ".", "size", "(", "2", ")", "-", "1", ")", "//", "self", ".", "stride", "+", "1", ",", "(", "x", ".", "size", "(", "3", ")", "-", "1", ")", "//", "self", ".", "stride", "+", "1", "\n", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "0", ",", "self", ".", "crop_size", "-", "x", ".", "size", "(", "3", ")", ",", "0", ",", "self", ".", "crop_size", "-", "x", ".", "size", "(", "2", ")", "]", ")", "\n", "edge_out", ",", "dp_out", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "edge_out", "=", "edge_out", "[", "...", ",", ":", "feat_size", "[", "0", "]", ",", ":", "feat_size", "[", "1", "]", "]", "\n", "dp_out", "=", "dp_out", "[", "...", ",", ":", "feat_size", "[", "0", "]", ",", ":", "feat_size", "[", "1", "]", "]", "\n", "\n", "edge_out", "=", "torch", ".", "sigmoid", "(", "edge_out", "[", "0", "]", "/", "2", "+", "edge_out", "[", "1", "]", ".", "flip", "(", "-", "1", ")", "/", "2", ")", "\n", "dp_out", "=", "dp_out", "[", "0", "]", "\n", "\n", "return", "edge_out", ",", "dp_out", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.FixedBatchNorm.forward": [[12, 15], ["torch.batch_norm", "torch.batch_norm", "torch.batch_norm"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "F", ".", "batch_norm", "(", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "training", "=", "False", ",", "eps", "=", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.Bottleneck.__init__": [[20, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet50.FixedBatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet50.FixedBatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet50.FixedBatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "FixedBatchNorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "FixedBatchNorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "FixedBatchNorm", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.Bottleneck.forward": [[34, 55], ["resnet50.Bottleneck.conv1", "resnet50.Bottleneck.bn1", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.conv2", "resnet50.Bottleneck.bn2", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.conv3", "resnet50.Bottleneck.bn3", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.ResNet.__init__": [[59, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet50.FixedBatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.ResNet._make_layer", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.ResNet._make_layer", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.ResNet._make_layer", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "strides", "[", "0", "]", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "FixedBatchNorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "dilation", "=", "dilations", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "strides", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "strides", "[", "2", "]", ",", "dilation", "=", "dilations", "[", "2", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "strides", "[", "3", "]", ",", "dilation", "=", "dilations", "[", "3", "]", ")", "\n", "self", ".", "inplanes", "=", "1024", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.ResNet._make_layer": [[77, 92], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet50.FixedBatchNorm", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "FixedBatchNorm", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "dilation", "=", "1", ")", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.ResNet.forward": [[93, 109], ["resnet50.ResNet.conv1", "resnet50.ResNet.bn1", "resnet50.ResNet.relu", "resnet50.ResNet.maxpool", "resnet50.ResNet.layer1", "resnet50.ResNet.layer2", "resnet50.ResNet.layer3", "resnet50.ResNet.layer4", "resnet50.ResNet.avgpool", "resnet50.ResNet.view", "resnet50.ResNet.fc", "resnet50.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.resnet50": [[111, 120], ["resnet50.ResNet", "torch.load_url", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "ResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.pop", "home.repos.pwc.inspect_result.gaviotas_amn.misc.pyutils.AverageMeter.pop"], ["", "", "def", "resnet50", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", "\n", "state_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "state_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.__init__": [[9, 24], ["torch.Module.__init__", "net.resnet50.resnet50", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__", "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50.resnet50"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resnet50", "=", "resnet50", ".", "resnet50", "(", "pretrained", "=", "True", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ",", "1", ")", ")", "\n", "\n", "self", ".", "stage1", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "conv1", ",", "self", ".", "resnet50", ".", "bn1", ",", "self", ".", "resnet50", ".", "relu", ",", "self", ".", "resnet50", ".", "maxpool", ",", "\n", "self", ".", "resnet50", ".", "layer1", ")", "\n", "self", ".", "stage2", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "layer2", ")", "\n", "self", ".", "stage3", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "layer3", ")", "\n", "self", ".", "stage4", "=", "nn", ".", "Sequential", "(", "self", ".", "resnet50", ".", "layer4", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "2048", ",", "20", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "backbone", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "stage1", ",", "self", ".", "stage2", ",", "self", ".", "stage3", ",", "self", ".", "stage4", "]", ")", "\n", "self", ".", "newly_added", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "classifier", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.forward": [[25, 38], ["resnet50_cam.Net.stage1", "resnet50_cam.Net.stage2().detach", "resnet50_cam.Net.stage3", "resnet50_cam.Net.stage4", "misc.torchutils.gap2d", "resnet50_cam.Net.classifier", "x.view.view.view", "resnet50_cam.Net.stage2"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.misc.torchutils.gap2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "stage1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", ".", "detach", "(", ")", "\n", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "\n", "x", "=", "torchutils", ".", "gap2d", "(", "x", ",", "keepdims", "=", "True", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "20", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.train": [[39, 44], ["resnet50_cam.Net.resnet50.conv1.parameters", "resnet50_cam.Net.resnet50.bn1.parameters"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "resnet50", ".", "conv1", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "self", ".", "resnet50", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.Net.trainable_parameters": [[45, 48], ["list", "list", "resnet50_cam.Net.backbone.parameters", "resnet50_cam.Net.newly_added.parameters"], "methods", ["None"], ["", "", "def", "trainable_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "return", "(", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", ",", "list", "(", "self", ".", "newly_added", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__": [[52, 54], ["resnet50_cam.Net.__init__"], "methods", ["home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaviotas_amn.net.resnet50_cam.CAM.forward": [[55, 71], ["resnet50_cam.CAM.stage1", "resnet50_cam.CAM.stage2", "resnet50_cam.CAM.stage3", "resnet50_cam.CAM.stage4", "torch.conv2d", "torch.conv2d", "torch.relu", "torch.relu", "x[].flip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "stage1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "classifier", ".", "weight", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "x", "[", "0", "]", "+", "x", "[", "1", "]", ".", "flip", "(", "-", "1", ")", "\n", "\n", "return", "x", "\n", "", "", ""]]}